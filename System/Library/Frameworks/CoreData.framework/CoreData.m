unint64_t sortAsLong(uint64_t a1, uint64_t a2)
{
  return (a1 > a2) - (unint64_t)(a1 < a2);
}

uint64_t __generateAccessor_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(a1 + 32))(a2, 0, *(void *)(a1 + 40));
}

unint64_t _PFObjectIDFastHash64(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0x8000000000000000) == 0)
  {
    Class Class = object_getClass((id)a1);
    IndexedIvars = object_getIndexedIvars(Class);
    if ((IndexedIvars[4] & 2) != 0)
    {
      Class v5 = object_getClass((id)v1);
      if (*((unsigned char *)object_getIndexedIvars(v5) + 4)) {
        uint64_t v4 = *(void *)(v1 + 8) >> 16;
      }
      else {
        uint64_t v4 = *(void *)(v1 + 16);
      }
    }
    else
    {
      uint64_t v4 = [*(id *)(v1 + 16) hash];
    }
    return *((unsigned int *)IndexedIvars + 8) ^ (unint64_t)(v4 << 6);
  }
  return v1;
}

unint64_t sortByFunctionComparison(void *a1, void *a2, uint64_t a3)
{
  Class v5 = *(uint64_t (**)(void, uint64_t))a3;
  uint64_t v4 = *(void *)(a3 + 8);
  int v6 = (*(uint64_t (**)(void, uint64_t))a3)(*a1, v4);
  int v7 = v5(*a2, v4);
  return (v6 > v7) - (unint64_t)(v6 < v7);
}

size_t customCount(const __CFArray *a1)
{
  ValueAtIndex = (const char *)CFArrayGetValueAtIndex(a1, 0);
  return strlen(ValueAtIndex);
}

uint64_t customCharAt(const __CFArray *a1, uint64_t a2)
{
  return *((unsigned __int8 *)CFArrayGetValueAtIndex(a1, 0) + a2);
}

uint64_t _prepareDictionaryResults(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  v160 = (void **)a2;
  if (a2) {
    uint64_t v3 = *(void *)(a2 + 136);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 4);
  if (v4 >= 0x40000001) {
    return NSArray_EmptyArray;
  }
  v151 = PF_ALLOCATE_OBJECT_ARRAY(*(unsigned int *)(a1 + 4));
  if (!v151) {
    return NSArray_EmptyArray;
  }
  uint64_t v5 = **(void **)(v2 + 64);
  int v6 = *(unint64_t **)(v3 + 40);
  if (v160) {
    v137 = v160[14];
  }
  else {
    v137 = 0;
  }
  v159 = *(uint64_t (**)(uint64_t, char *, void))(v3 + 64);
  if (v6) {
    unint64_t v143 = v6[30];
  }
  else {
    unint64_t v143 = 0;
  }
  v165 = v6;
  unint64_t plan_for_entity = _sql_read_only_fetch_plan_for_entity(v6);
  if (!v160)
  {
    v11 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
    id v141 = v11;
    BOOL v138 = 0;
    v142 = 0;
    v12 = 0;
    v9 = 0;
LABEL_236:
    int v155 = 0;
    goto LABEL_16;
  }
  v142 = v160[16];
  int v7 = (void **)v160[4];
  v8 = v160[17];
  if (v8) {
    v9 = (void *)v8[1];
  }
  else {
    v9 = 0;
  }
  v11 = objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager", v137);
  id v141 = v11;
  BOOL v138 = *((unsigned char *)v160 + 201) != 0;
  v12 = v7;
  if (!v7) {
    goto LABEL_236;
  }
  int v155 = *((unsigned char *)v7 + 43) & 1;
LABEL_16:
  BOOL v134 = (*(_DWORD *)(v3 + 72) & 0x1C) == 20;
  v145 = v12;
  if (v134)
  {
    v150 = (void *)[MEMORY[0x1E4F1CA48] array];
    v22 = (void *)[MEMORY[0x1E4F1CA80] set];
    v163 = (void *)[MEMORY[0x1E4F1CA48] array];
    uint64_t v13 = *(unsigned int *)(plan_for_entity + 4);
    if (v13)
    {
      v14 = (id *)(plan_for_entity + 24);
      do
      {
        uint64_t v15 = objc_msgSend(*v14, "propertyDescription", v137);
        if (v15)
        {
          v16 = (void *)v15;
          [v150 addObject:v15];
          if (([v16 _entitysReferenceID] & 0x8000000000000000) == 0) {
            objc_msgSend(v22, "addObject:", objc_msgSend(v16, "name"));
          }
        }
        v14 += 3;
        --v13;
      }
      while (v13);
    }
    long long v175 = 0u;
    long long v176 = 0u;
    long long v174 = 0u;
    long long v173 = 0u;
    v17 = objc_msgSend(v9, "propertiesToFetch", v137);
    v11 = (void *)[v17 countByEnumeratingWithState:&v173 objects:v177 count:16];
    if (v11)
    {
      v18 = v11;
      uint64_t v19 = *(void *)v174;
      do
      {
        v20 = 0;
        do
        {
          if (*(void *)v174 != v19) {
            objc_enumerationMutation(v17);
          }
          v21 = *(void **)(*((void *)&v173 + 1) + 8 * (void)v20);
          if ([v21 isTransient])
          {
            [v163 addObject:v21];
            if (([v21 _entitysReferenceID] & 0x8000000000000000) == 0) {
              objc_msgSend(v22, "addObject:", objc_msgSend(v21, "name"));
            }
          }
          v20 = (char *)v20 + 1;
        }
        while (v18 != v20);
        v11 = (void *)[v17 countByEnumeratingWithState:&v173 objects:v177 count:16];
        v18 = v11;
      }
      while (v11);
    }
  }
  else
  {
    v163 = 0;
    v150 = 0;
    v22 = 0;
  }
  if ((int)v4 >= 1)
  {
    uint64_t v23 = 0;
    uint64_t v157 = 0;
    v146 = 0;
    id v144 = 0;
    v139 = 0;
    v149 = 0;
    v158 = sel_entityForID_;
    v162 = @"TOMBSTONE";
    uint64_t v148 = v4;
    uint64_t v152 = v2;
    uint64_t v147 = v3;
    uint64_t v140 = (uint64_t)v22;
    while (1)
    {
      while ((*(_DWORD *)v5 & 0x80000000) != 0)
      {
        uint64_t v24 = *(unsigned int *)(v5 + 4);
        if ((v24 & 0x80000000) != 0) {
          uint64_t v5 = 0;
        }
        else {
          uint64_t v5 = *(void *)(*(void *)(v2 + 64) + 8 * v24) + *(void *)(v5 + 16);
        }
      }
      uint64_t v25 = *(unsigned int *)(plan_for_entity + 4);
      MEMORY[0x1F4188790](v11);
      v28 = (char *)&v137 - v27;
      uint64_t v167 = v25;
      if (v25 >= 0x201) {
        break;
      }
      bzero((char *)&v137 - v27, 8 * v26);
      v168 = v28;
      if (v25)
      {
        v153 = &v137;
        uint64_t v154 = v23;
        uint64_t v156 = v5;
LABEL_44:
        uint64_t v29 = 0;
        unint64_t v30 = 0;
        v166 = 0;
        uint64_t v161 = 0;
        int v31 = 0;
        uint64_t v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = v156 + 32;
        while (1)
        {
          uint64_t v35 = v32;
          uint64_t v36 = plan_for_entity + v29;
          int v37 = *(unsigned __int8 *)(plan_for_entity + v29 + 20);
          if ((v37 - 2) > 6) {
            uint64_t v38 = 3;
          }
          else {
            uint64_t v38 = qword_18AE54B30[(char)(v37 - 2)];
          }
          v39 = (unsigned __int8 *)((v38 + v34) & ~v38);
          if (*(unsigned char *)(v36 + 16))
          {
            int v41 = *v39;
            uint64_t v171 = (uint64_t)(v39 + 1);
            BOOL v40 = v41 != 0;
          }
          else
          {
            uint64_t v171 = (v38 + v34) & ~v38;
            BOOL v40 = 0;
          }
          v42 = 0;
          int v170 = v31;
          if (((v30 > 6) & v31) == 1 && !v40)
          {
            unint64_t v164 = v30;
            unsigned int v43 = v33;
            uint64_t v44 = v32;
            v45 = v166;
            if (!v166)
            {
              if (v160) {
                v46 = v160[1];
              }
              else {
                v46 = 0;
              }
              uint64_t v47 = objc_msgSend(v46, "model", v137);
              v45 = (id *)v159(v47, v158, (int)v161);
            }
            v42 = v45;
            id v48 = +[_PFPersistentHistoryModel _retainedTombstonesForEntity:]((uint64_t)_PFPersistentHistoryModel, v45);
            v49 = objc_msgSend((id)objc_msgSend(*(id *)(plan_for_entity + v29 + 24), "propertyDescription"), "name");
            int v50 = objc_msgSend((id)objc_msgSend(v49, "stringByReplacingOccurrencesOfString:withString:", v162, &stru_1ED787880), "intValue");
            int v51 = [v48 count];
            v166 = v42;
            if (v50 >= v51)
            {
              v42 = 0;
            }
            else
            {
              uint64_t v52 = [v48 objectAtIndexedSubscript:v50];
              if (v42) {
                v42 = (id *)[v42[5] objectForKey:v52];
              }
              int v37 = 17;
            }

            uint64_t v35 = v44;
            unsigned int v33 = v43;
            unint64_t v30 = v164;
          }
          uint64_t v53 = ~v38;
          uint64_t v32 = 0;
          switch(v37)
          {
            case 1:
              LODWORD(valuePtr) = 0;
              v69 = (int *)v171;
              v70 = (CFAbsoluteTime *)((v38 + v171) & v53);
              if (!v40) {
                v69 = (int *)v70 + 1;
              }
              uint64_t v171 = (uint64_t)v69;
              if (v40) {
                p_CFAbsoluteTime valuePtr = &valuePtr;
              }
              else {
                p_CFAbsoluteTime valuePtr = v70;
              }
              int v72 = *(unsigned __int8 *)(plan_for_entity + v29 + 21);
              switch(v72)
              {
                case 10:
                  goto LABEL_145;
                case 4:
                  if (v40) {
                    CFNumberRef v74 = 0;
                  }
                  else {
                    CFNumberRef v74 = (CFNumberRef)v159((uint64_t)v137, v158, *(int *)v70);
                  }
                  uint64_t v35 = 1;
                  break;
                case 1:
                  if (byte_1EB270AB6) {
                    BOOL v73 = v40;
                  }
                  else {
                    BOOL v73 = 0;
                  }
                  if (v73)
                  {
                    CFNumberRef v74 = 0;
                  }
                  else
                  {
                    if (byte_1EB270AB6) {
                      p_CFAbsoluteTime valuePtr = v70;
                    }
LABEL_145:
                    CFNumberRef v74 = CFNumberCreate(0, kCFNumberIntType, p_valuePtr);
                  }
                  uint64_t v35 = 0;
                  break;
                default:
                  goto LABEL_158;
              }
              v168[v33] = v74;
              goto LABEL_158;
            case 2:
            case 3:
              CFAbsoluteTime valuePtr = 0.0;
              v58 = (void *)v171;
              v59 = (CFAbsoluteTime *)((v38 + v171) & v53);
              if (!v40) {
                v58 = v59 + 1;
              }
              uint64_t v171 = (uint64_t)v58;
              int v60 = *(unsigned __int8 *)(plan_for_entity + v29 + 21);
              if (v60 != 3)
              {
                if (v60 != 1) {
                  goto LABEL_158;
                }
                if (byte_1EB270AB6) {
                  BOOL v61 = v40;
                }
                else {
                  BOOL v61 = 0;
                }
                if (v61)
                {
LABEL_132:
                  CFNumberRef v64 = 0;
                }
                else
                {
                  v62 = &valuePtr;
                  if (!v40) {
                    v62 = v59;
                  }
                  if (byte_1EB270AB6) {
                    v63 = v59;
                  }
                  else {
                    v63 = v62;
                  }
                  CFNumberRef v64 = CFNumberCreate(0, kCFNumberLongLongType, v63);
                }
                uint64_t v77 = v157;
                goto LABEL_134;
              }
              if (v35)
              {
                uint64_t v77 = v168[--v33];
                if (v40) {
                  goto LABEL_132;
                }
              }
              else
              {
                uint64_t v77 = objc_msgSend((id)objc_msgSend(*(id *)(plan_for_entity + v29 + 24), "toOneRelationship"), "destinationEntity");
                if (v40) {
                  goto LABEL_132;
                }
              }
              if (!*(void *)v59) {
                goto LABEL_132;
              }
              v88 = v146;
              if (v77 != v157) {
                v88 = 0;
              }
              if (v160 && v77 != v157) {
                v88 = (objc_class *)[v160[1] objectIDFactoryForSQLEntity:v77];
              }
              v146 = v88;
              CFNumberRef v64 = (CFNumberRef)[[v88 alloc] initWithPK64:*(void *)v59];
LABEL_134:
              uint64_t v35 = 0;
              v168[v33] = v64;
              uint64_t v157 = v77;
LABEL_158:
              uint64_t v32 = v35;
              goto LABEL_198;
            case 4:
            case 5:
            case 6:
            case 9:
            case 12:
              if (v40)
              {
                CFStringRef v54 = 0;
                goto LABEL_109;
              }
              v55 = (const char *)((v38 + v171) & v53);
              CFStringRef v54 = CFStringCreateWithCString(0, v55 + 4, 0x8000100u);
              int v56 = *(unsigned __int8 *)(v36 + 20);
              uint64_t v171 = (uint64_t)&v55[*(int *)v55 + 4];
              if (v56 == 12)
              {
                CFStringRef v57 = (const __CFString *)(id)[MEMORY[0x1E4F1CB10] URLWithString:v54];
              }
              else
              {
                if (v56 != 4) {
                  goto LABEL_109;
                }
                CFStringRef v57 = (const __CFString *)[objc_alloc(MEMORY[0x1E4F28C28]) initWithString:v54];
              }
              CFStringRef v76 = v57;
              CFRelease(v54);
              CFStringRef v54 = v76;
LABEL_109:
              uint64_t v32 = 0;
              v168[v33] = v54;
              goto LABEL_198;
            case 7:
            case 8:
              if (v40)
              {
                CFNumberRef v65 = 0;
              }
              else
              {
                v75 = (CFAbsoluteTime *)((v38 + v171) & v53);
                CFAbsoluteTime valuePtr = 0.0;
                CFAbsoluteTime valuePtr = *v75;
                BOOL v134 = *(unsigned char *)(v36 + 20) == 7;
                uint64_t v171 = (uint64_t)(v75 + 1);
                if (v134) {
                  CFNumberRef v65 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
                }
                else {
                  CFNumberRef v65 = CFDateCreate(0, *v75);
                }
              }
              uint64_t v32 = 0;
              v168[v33] = v65;
              goto LABEL_198;
            case 13:
            case 14:
              goto LABEL_198;
            case 16:
              v66 = (void *)[*(id *)(plan_for_entity + v29 + 24) propertyDescription];
              if (v155 && ![v66 _isFileBackedFuture]) {
                goto LABEL_89;
              }
              if (v40)
              {
                v67 = 0;
                goto LABEL_176;
              }
              v81 = (int *)((v38 + v171) & v53);
              v83 = v81 + 1;
              int v82 = *((unsigned __int8 *)v81 + 4);
              v84 = v149;
              if (v82 == 3)
              {
                if (v160 && !v149) {
                  v84 = v160[13];
                }
                uint64_t v93 = objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", ((v38 + v171) & v53) + 4, *v81, v137);
                v94 = [_NSDataFileBackedFuture alloc];
                v149 = v84;
                uint64_t v87 = -[_NSDataFileBackedFuture initWithStoreMetadata:directory:](v94, "initWithStoreMetadata:directory:", v93, [MEMORY[0x1E4F1CB10] fileURLWithPath:v84 isDirectory:1]);
                goto LABEL_174;
              }
              if (v82 == 1)
              {
                v85 = [_PFExternalReferenceData alloc];
                if (v160) {
                  uint64_t v86 = *((unsigned int *)v160 + 46);
                }
                else {
                  uint64_t v86 = 0;
                }
                uint64_t v87 = -[_PFExternalReferenceData initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:](v85, "initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:", v83, *v81, 0, 0, v86, v137);
                goto LABEL_174;
              }
              size_t v95 = strnlen((const char *)v81 + 5, *v81 - 1);
              uint64_t v96 = [v141 stringWithFileSystemRepresentation:(char *)v81 + 5 length:v95];
              v97 = v139;
              if (v144)
              {
                if (v160 && !v139) {
                  goto LABEL_162;
                }
              }
              else
              {
                if (v160)
                {
                  id v144 = v160[11];
                  if (v139) {
                    goto LABEL_163;
                  }
LABEL_162:
                  v97 = v160[12];
                  goto LABEL_163;
                }
                id v144 = 0;
              }
LABEL_163:
              uint64_t v98 = objc_msgSend(v144, "stringByAppendingPathComponent:", v96, v137);
              uint64_t v99 = [v97 stringByAppendingPathComponent:v96];
              v139 = v97;
              if (v138 && ![v141 fileExistsAtPath:v98])
              {
                v67 = 0;
LABEL_170:
                if ([v141 fileExistsAtPath:v98]) {
                  goto LABEL_175;
                }

                v102 = v160;
                v103 = -[NSSQLFetchRequestContext ubiquitousExternalReferenceLocationForUUID:](v160, v96);
                v104 = [_PFExternalReferenceData alloc];
                if (v102) {
                  uint64_t v105 = *((unsigned int *)v102 + 46);
                }
                else {
                  uint64_t v105 = 0;
                }
                uint64_t v87 = [(_PFExternalReferenceData *)v104 initWithStoreBytes:v83 length:*v81 externalLocation:v98 safeguardLocation:v99 protectionLevel:v105 ubiquitousLocation:v103];
LABEL_174:
                v67 = (_PFExternalReferenceData *)v87;
                goto LABEL_175;
              }
              v100 = [_PFExternalReferenceData alloc];
              if (v160) {
                uint64_t v101 = *((unsigned int *)v160 + 46);
              }
              else {
                uint64_t v101 = 0;
              }
              v67 = [(_PFExternalReferenceData *)v100 initWithStoreBytes:v83 length:*v81 externalLocation:v98 safeguardLocation:v99 protectionLevel:v101];
              if (v138) {
                goto LABEL_170;
              }
LABEL_175:
              uint64_t v171 = (uint64_t)v83 + *v81;
LABEL_176:
              uint64_t v32 = 0;
              v168[v33] = v67;
              goto LABEL_198;
            default:
LABEL_89:
              if (v40) {
                goto LABEL_90;
              }
              v78 = (const UInt8 *)((v38 + v171) & v53);
              CFDataRef v68 = CFDataCreate(0, v78 + 4, *(int *)v78);
              uint64_t v171 = (uint64_t)&v78[*(int *)v78 + 4];
              if (v37 == 17 && [v42 sqlType] != 10)
              {
                [*(id *)(plan_for_entity + v29 + 24) propertyDescription];
                CFStringRef v90 = 0;
                int v91 = [v42 sqlType];
                switch(v91)
                {
                  case 1:
                    uint64_t v116 = [(__CFData *)v68 bytes];
                    v107 = (void *)[[NSString alloc] initWithUTF8String:v116];
                    uint64_t v108 = objc_msgSend(objc_alloc(NSNumber), "initWithInteger:", objc_msgSend(v107, "integerValue"));
                    goto LABEL_188;
                  case 2:
                  case 3:
                    uint64_t v106 = [(__CFData *)v68 bytes];
                    v107 = (void *)[[NSString alloc] initWithUTF8String:v106];
                    uint64_t v108 = objc_msgSend(objc_alloc(NSNumber), "initWithLongLong:", objc_msgSend(v107, "longLongValue"));
LABEL_188:
                    CFStringRef v90 = (CFStringRef)v108;

                    goto LABEL_196;
                  case 4:
                  case 5:
                  case 6:
                  case 9:
                  case 12:
                    if (CFDataGetLength(v68))
                    {
                      BytePtr = (const char *)CFDataGetBytePtr(v68);
                      CFStringRef v90 = CFStringCreateWithCString(0, BytePtr, 0x8000100u);
                    }
                    else
                    {
                      CFStringRef v90 = &stru_1ED787880;
                    }
                    if (v91 == 12)
                    {
                      v114 = (objc_class *)MEMORY[0x1E4F1CB10];
                    }
                    else
                    {
                      if (v91 != 4) {
                        goto LABEL_196;
                      }
                      v114 = (objc_class *)MEMORY[0x1E4F28C28];
                    }
                    uint64_t v115 = [[v114 alloc] initWithString:v90];
                    CFRelease(v90);
                    CFStringRef v90 = (CFStringRef)v115;
LABEL_196:
                    CFRelease(v68);
                    CFDataRef v68 = (CFDataRef)v90;
                    break;
                  case 7:
                  case 8:
                    uint64_t v109 = [(__CFData *)v68 bytes];
                    v110 = (void *)[[NSString alloc] initWithUTF8String:v109];
                    if (v91 == 7)
                    {
                      uint64_t v111 = objc_msgSend((id)objc_msgSend(v42, "propertyDescription"), "attributeType");
                      id v112 = objc_alloc(NSNumber);
                      if (v111 == 600)
                      {
                        [v110 floatValue];
                        uint64_t v113 = objc_msgSend(v112, "initWithFloat:");
                      }
                      else
                      {
                        [v110 doubleValue];
                        uint64_t v113 = objc_msgSend(v112, "initWithDouble:");
                      }
                    }
                    else
                    {
                      id v118 = objc_alloc(MEMORY[0x1E4F1C9C8]);
                      [v110 doubleValue];
                      uint64_t v113 = objc_msgSend(v118, "initWithTimeIntervalSinceReferenceDate:");
                    }
                    CFStringRef v90 = (CFStringRef)v113;

                    goto LABEL_196;
                  case 11:
                    if ([(__CFData *)v68 length] == 16)
                    {
                      CFStringRef v117 = (const __CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E4F29128]), "initWithUUIDBytes:", -[__CFData bytes](v68, "bytes"));
LABEL_192:
                      CFStringRef v90 = v117;
                    }
                    else
                    {
                      CFStringRef v90 = 0;
                    }
                    goto LABEL_196;
                  case 15:
                    CFStringRef v117 = (const __CFString *)+[_PFRoutines retainedDecodeValue:forTransformableAttribute:]((uint64_t)_PFRoutines, (uint64_t)v68, (void *)[v42 propertyDescription]);
                    goto LABEL_192;
                  default:
                    goto LABEL_196;
                }
              }
              else
              {
                int v79 = *(unsigned __int8 *)(v36 + 20);
                if (v79 != 11)
                {
                  if (v79 != 15) {
                    goto LABEL_197;
                  }
                  CFDataRef v80 = (const __CFData *)+[_PFRoutines retainedDecodeValue:forTransformableAttribute:]((uint64_t)_PFRoutines, (uint64_t)v68, (void *)[*(id *)(plan_for_entity + v29 + 24) propertyDescription]);
                  goto LABEL_139;
                }
                if ([(__CFData *)v68 length] == 16)
                {
                  CFDataRef v80 = (const __CFData *)objc_msgSend(objc_alloc(MEMORY[0x1E4F29128]), "initWithUUIDBytes:", -[__CFData bytes](v68, "bytes"));
LABEL_139:
                  CFDataRef v89 = v80;
                  CFRelease(v68);
                  CFDataRef v68 = v89;
                  goto LABEL_197;
                }

LABEL_90:
                CFDataRef v68 = 0;
              }
LABEL_197:
              uint64_t v32 = 0;
              v168[v33] = v68;
LABEL_198:
              if (v165 && v29 == 72 && *((_DWORD *)v165 + 46) == 16001)
              {
                BOOL v119 = [(id)v168[v33] intValue] == 2;
                int v31 = v119 | v170;
                uint64_t v120 = v167;
                uint64_t v34 = v171;
              }
              else
              {
                int v31 = v170;
                uint64_t v120 = v167;
                uint64_t v34 = v171;
                if (v29 == 120 && (v170 & 1) != 0)
                {
                  uint64_t v161 = [(id)v168[v33] intValue];
                  int v31 = 1;
                }
              }
              ++v33;
              ++v30;
              v29 += 24;
              if (v120 == v30)
              {
                uint64_t v4 = v148;
                uint64_t v2 = v152;
                uint64_t v3 = v147;
                uint64_t v5 = v156;
                uint64_t v23 = v154;
                goto LABEL_212;
              }
              break;
          }
        }
      }
      unsigned int v33 = 0;
LABEL_212:
      if ((*(_DWORD *)(v3 + 72) & 0x1C) == 0x10)
      {
        v121 = [NSKnownKeysDictionary alloc];
        v122 = [(NSKnownKeysDictionary *)v121 initWithSearchStrategy:v143];
        v11 = (void *)[(NSKnownKeysDictionary *)v122 setValues:v168];
      }
      else
      {
        uint64_t v123 = v4;
        uint64_t v124 = v3;
        v125 = v168;
        v126 = v145;
        int v127 = (int)v142;
        v122 = (NSKnownKeysDictionary *)-[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:](v145, (void *)*v168, (uint64_t)v142);
        uint64_t v128 = (uint64_t)v125;
        uint64_t v3 = v124;
        uint64_t v4 = v123;
        uint64_t v2 = v152;
        _PFFaultHandlerFulfillPartialFault(v127, (unsigned int *)v122, (uint64_t)v126, v128, v150, v140, v163);
      }
      v151[v23] = v122;
      if (v33)
      {
        uint64_t v129 = v33;
        v130 = (void **)v168;
        do
        {
          v131 = *v130++;

          --v129;
        }
        while (v129);
      }
      if (v167 >= 0x201) {
        NSZoneFree(0, v168);
      }
      uint64_t v132 = *(unsigned int *)(v5 + 4);
      if ((v132 & 0x80000000) == 0)
      {
        uint64_t v133 = *(void *)(*(void *)(v2 + 64) + 8 * v132);
        uint64_t v5 = v133 + *(void *)(v5 + 16);
        BOOL v134 = !v133 || ++v23 == v4;
        if (!v134) {
          continue;
        }
      }
      goto LABEL_228;
    }
    v153 = &v137;
    uint64_t v154 = v23;
    uint64_t v156 = v5;
    v168 = NSAllocateScannedUncollectable();
    goto LABEL_44;
  }
LABEL_228:
  if ((*(_DWORD *)(v3 + 72) & 0x1C) == 0x14) {
    uint64_t v135 = 46;
  }
  else {
    uint64_t v135 = 10;
  }
  v136 = [_PFArray alloc];
  return (uint64_t)[(_PFArray *)v136 initWithObjects:v151 count:v4 andFlags:v135 andContext:v145];
}

uint64_t _execute(uint64_t a1)
{
  v67[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_assert_queue_V2(v2);
  }
  unsigned int v3 = 0;
  unsigned int v4 = 0;
  int v5 = 0;
  unsigned int v61 = 0;
  double v6 = 0.0;
LABEL_4:
  int v7 = 3 * v4 - 29999;
  while (1)
  {
    uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a1 + 80));
    uint64_t v9 = result;
    switch((char)result)
    {
      case 1:
      case 7:
      case 10:
      case 17:
      case 21:
        goto LABEL_38;
      case 2:
      case 3:
      case 4:
      case 8:
      case 9:
      case 12:
      case 13:
      case 15:
      case 16:
      case 18:
      case 20:
      case 22:
      case 23:
      case 24:
      case 25:
        goto LABEL_58;
      case 5:
        if ((*(unsigned char *)(a1 + 312) & 2) == 0) {
          sqlite3_reset(*(sqlite3_stmt **)(a1 + 80));
        }
        if (*(double *)(a1 + 232) > 0.0 && v6 == 0.0) {
          double v6 = CFAbsoluteTimeGetCurrent() + *(double *)(a1 + 232);
        }
        if (v4 < 0x2711) {
          goto LABEL_29;
        }
        if (v4 - 10000 >= 0xB) {
          useconds_t v10 = v4 - 8899;
        }
        else {
          useconds_t v10 = v7;
        }
        goto LABEL_28;
      case 6:
        if ((*(unsigned char *)(a1 + 312) & 2) == 0) {
          sqlite3_reset(*(sqlite3_stmt **)(a1 + 80));
        }
        if (*(double *)(a1 + 232) > 0.0 && v6 == 0.0) {
          double v6 = CFAbsoluteTimeGetCurrent() + *(double *)(a1 + 232);
        }
        goto LABEL_25;
      case 11:
      case 26:
        goto LABEL_43;
      case 14:
        if (v5 > 2)
        {
LABEL_38:
          int v12 = result;
          uint64_t v13 = [NSString stringWithUTF8String:sqlite3_errmsg(*(sqlite3 **)(a1 + 72))];
          if (v12 == 10 && (sqlite3_file_control(*(sqlite3 **)(a1 + 72), 0, 4, &v61), v61)) {
            uint64_t v14 = [NSString stringWithFormat:@"I/O error for database at %@.  SQLite error code:%d, '%@' errno:%d", *(void *)(a1 + 32), v9, v13, v61];
          }
          else {
            uint64_t v14 = [NSString stringWithFormat:@"I/O error for database at %@.  SQLite error code:%d, '%@'", *(void *)(a1 + 32), v9, v13, v59];
          }
          uint64_t v15 = (void *)v14;
          if (!v14) {
LABEL_43:
          }
            uint64_t v15 = (void *)[NSString stringWithFormat:@"Fatal error.  The database at %@ is corrupted.  SQLite error code:%d, '%s'", *(void *)(a1 + 32), v9, sqlite3_errmsg(*(sqlite3 **)(a1 + 72))];
          uint64_t v16 = (int)v9;
          v17 = @"NSSQLiteErrorDomain";
          -[NSSQLiteConnection _forceDisconnectOnError](a1);
LABEL_45:
          if (v9 == 1555)
          {
            *(_DWORD *)(a1 + 312) &= ~2u;
            -[NSSQLiteConnection _endFetch]((void *)a1);
            -[NSSQLiteConnection releaseSQLStatement](a1);
            uint64_t v26 = *MEMORY[0x1E4F1C3C8];
            v62 = @"_NSCoreDataOptimisticLockingFailureConflictsKey";
            uint64_t v63 = MEMORY[0x1E4F1CBF0];
            uint64_t v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v63 forKeys:&v62 count:1];
            uint64_t v25 = @"Constraint primary key violation";
            uint64_t v23 = _NSCoreDataOptimisticLockingException;
            uint64_t v24 = v26;
            goto LABEL_55;
          }
          uint64_t v60 = v16;
          if (v9 == 1811)
          {
            uint64_t v27 = sqlite3_errmsg(*(sqlite3 **)(a1 + 72));
            *(_DWORD *)(a1 + 312) &= ~2u;
            -[NSSQLiteConnection _endFetch]((void *)a1);
            -[NSSQLiteConnection releaseSQLStatement](a1);
            v28 = "no message";
            if (v27) {
              v28 = v27;
            }
            uint64_t v29 = objc_msgSend(NSString, "stringWithFormat:", @"Constraint trigger violation: %s", v28);
            uint64_t v30 = *MEMORY[0x1E4F1C3C8];
            v64[0] = *MEMORY[0x1E4F28588];
            v64[1] = @"_NSCoreDataOptimisticLockingFailureConflictsKey";
            v65[0] = v29;
            v65[1] = MEMORY[0x1E4F1CBF0];
            uint64_t v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v65 forKeys:v64 count:2];
            uint64_t v23 = _NSCoreDataConstraintViolationException;
            uint64_t v24 = v30;
            uint64_t v25 = (__CFString *)v29;
LABEL_55:
            objc_exception_throw((id)[(__objc2_class *)v23 exceptionWithName:v24 reason:v25 userInfo:v22]);
          }
          if (v9 == 2067)
          {
            v18 = sqlite3_errmsg(*(sqlite3 **)(a1 + 72));
            *(_DWORD *)(a1 + 312) &= ~2u;
            -[NSSQLiteConnection _endFetch]((void *)a1);
            -[NSSQLiteConnection releaseSQLStatement](a1);
            uint64_t v19 = *MEMORY[0x1E4F1C3C8];
            v20 = "no message";
            if (v18) {
              v20 = v18;
            }
            uint64_t v21 = objc_msgSend(NSString, "stringWithFormat:", @"Constraint unique violation: %s", v20);
            v66 = @"_NSCoreDataOptimisticLockingFailureConflictsKey";
            v67[0] = MEMORY[0x1E4F1CBF0];
            uint64_t v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v67 forKeys:&v66 count:1];
            uint64_t v23 = _NSCoreDataConstraintViolationException;
            uint64_t v24 = v19;
            uint64_t v25 = (__CFString *)v21;
            goto LABEL_55;
          }
          if (v15)
          {
            int v37 = (const char *)[v15 UTF8String];
            char v38 = 0;
            goto LABEL_60;
          }
LABEL_59:
          int v37 = sqlite3_errmsg(*(sqlite3 **)(a1 + 72));
          uint64_t v15 = 0;
          char v38 = 1;
LABEL_60:
          if (*(unsigned char *)(a1 + 42)) {
            v39 = @"\x1B[31m\x1B[47mERROR:\x1B[0m\x1B[31m (%d) %s\x1B[0m";
          }
          else {
            v39 = @"(%d) %s";
          }
          _NSCoreDataLog(1, (uint64_t)v39, v31, v32, v33, v34, v35, v36, v9);
          if (v38)
          {
            uint64_t v15 = objc_msgSend(NSString, "stringWithFormat:", @"error during SQL execution : %s", v37, v37);
            uint64_t v60 = (int)v9;
            v17 = @"NSSQLiteErrorDomain";
          }
          -[NSSQLiteConnection _forceDisconnectOnError](a1);
          uint64_t v40 = *MEMORY[0x1E4F1C3B8];
          int v41 = (void *)MEMORY[0x1E4F1C9E8];
          uint64_t v42 = *(void *)(a1 + 32);
          uint64_t v43 = *MEMORY[0x1E4F28328];
          uint64_t v44 = [NSNumber numberWithInt:v9];
          if (v61) {
            uint64_t v45 = objc_msgSend(NSNumber, "numberWithInteger:");
          }
          else {
            uint64_t v45 = 0;
          }
          id v46 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, v40, v60, (uint64_t)v15, objc_msgSend(v41, "dictionaryWithObjectsAndKeys:", v42, v43, v44, @"NSSQLiteErrorDomain", v45, *MEMORY[0x1E4F28798], 0));
          uint64_t v47 = v46;
          if (v17) {
            -[_NSCoreDataException _setDomain:]((uint64_t)v46, v17);
          }
          objc_exception_throw(v47);
        }
        if (*(double *)(a1 + 232) > 0.0 && v6 == 0.0) {
          double v6 = CFAbsoluteTimeGetCurrent() + *(double *)(a1 + 232);
        }
        ++v5;
LABEL_25:
        if (v4 <= 0xA) {
          useconds_t v10 = 3 * v4 + 1;
        }
        else {
          useconds_t v10 = v4 + 1101;
        }
LABEL_28:
        usleep(v10);
LABEL_29:
        if (v6 != 0.0)
        {
          double Current = CFAbsoluteTimeGetCurrent();
          if (Current > v6)
          {
            if (v3 > 7)
            {
              uint64_t v48 = [NSString stringWithFormat:@"The database operation timed out after %.2f seconds.", Current - v6 + *(double *)(a1 + 232)];
              if (+[NSSQLCore debugDefault] >= 1)
              {
                if (*(unsigned char *)(a1 + 42)) {
                  v55 = @"\x1B[31m\x1B[47mERROR:\x1B[0m\x1B[31m (%d) %@\x1B[0m";
                }
                else {
                  v55 = @"(%d) %@";
                }
                uint64_t v58 = v48;
                _NSCoreDataLog(1, (uint64_t)v55, v49, v50, v51, v52, v53, v54, v9);
              }
              uint64_t v56 = [NSString stringWithFormat:@"error during SQL execution : %@", v48, v58];
              *(_DWORD *)(a1 + 312) &= ~2u;
              -[NSSQLiteConnection releaseSQLStatement](a1);
              id v57 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E4F1C3B8], 134090, v56, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObject:forKey:", objc_msgSend(NSNumber, "numberWithInt:", v9), @"NSSQLiteErrorDomain"));
              objc_exception_throw(v57);
            }
            ++v4;
            double v6 = Current + *(double *)(a1 + 240);
            ++v3;
            goto LABEL_4;
          }
        }
        v7 += 3;
        ++v4;
        break;
      case 19:
        uint64_t v15 = 0;
        v17 = 0;
        uint64_t v16 = 0;
        goto LABEL_45;
      default:
        if (result == 100)
        {
          *(_DWORD *)(a1 + 312) |= 2u;
        }
        else
        {
          if (result != 101)
          {
LABEL_58:
            uint64_t v60 = 0;
            v17 = 0;
            goto LABEL_59;
          }
          uint64_t result = (uint64_t)-[NSSQLiteConnection setColumnsToFetch:]((void *)a1, 0);
          *(_DWORD *)(a1 + 312) &= ~2u;
          *(void *)(a1 + 92) = 0;
          *(void *)(a1 + 100) = 0;
          *(_DWORD *)(a1 + 108) = 0;
        }
        return result;
    }
  }
}

double fetchResultSetPrepareNextRow(int *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = *((void *)a1 + 4);
  unsigned int v4 = (void *)*((void *)a1 + 8);
  uint64_t v5 = v4[v2] + v3;
  if ((*(_DWORD *)v5 & 0x80000000) != 0)
  {
    if (a1[7] < 0) {
      goto LABEL_5;
    }
    *(_DWORD *)(v5 + 4) = v2;
    *(void *)(v5 + 16) = v3;
  }
  a1[7] = v2;
  *((void *)a1 + 5) = v3;
LABEL_5:
  uint64_t v6 = *((void *)a1 + 10);
  int v7 = (_OWORD *)((*((void *)a1 + 11) + 7) & 0xFFFFFFFFFFFFFFF8);
  if (a1[4] + (int)v6 - (int)v7 <= 31)
  {
    int v8 = a1[5];
    a1[4] = 15359;
    a1[5] = v8 + 1;
    uint64_t v9 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
    {
      uint64_t v9 = malloc_default_zone();
      unsigned int v4 = (void *)*((void *)a1 + 8);
    }
    useconds_t v10 = malloc_type_zone_realloc(v9, v4, 8 * (v8 + 2), 0x80040B8603338uLL);
    *((void *)a1 + 8) = v10;
    v10[v8 + 1] = 0;
    v11 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if ((a1[12] & 4) != 0)
    {
      if (!_PF_Private_Malloc_Zone) {
        v11 = malloc_default_zone();
      }
      int v12 = malloc_type_zone_calloc(v11, 1uLL, 0x3BFFuLL, 0x42DE65BCuLL);
    }
    else
    {
      if (!_PF_Private_Malloc_Zone) {
        v11 = malloc_default_zone();
      }
      int v12 = malloc_type_zone_malloc(v11, 0x3BFFuLL, 0x8C1BA41BuLL);
    }
    *((void *)a1 + 10) = v12;
    *(void *)(*((void *)a1 + 8) + 8 * v8) = v12;
    int v7 = (_OWORD *)*((void *)a1 + 10);
    *((void *)a1 + 11) = v7;
    uint64_t v13 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      uint64_t v13 = malloc_default_zone();
    }
    uint64_t v14 = malloc_type_zone_realloc(v13, *((void **)a1 + 9), 8 * (v8 + 2), 0x100004000313F17uLL);
    *((void *)a1 + 9) = v14;
    v14[v8] = 15359;
    a1[6] = v8;
    uint64_t v6 = *((void *)a1 + 10);
  }
  *((void *)a1 + 4) = (char *)v7 - v6;
  double result = 0.0;
  *int v7 = 0u;
  v7[1] = 0u;
  uint64_t v16 = *(void *)(*((void *)a1 + 8) + 8 * a1[6]) + *((void *)a1 + 4);
  int v17 = *a1;
  *(_DWORD *)uint64_t v16 = *a1;
  *(_DWORD *)(v16 + 4) = -1;
  *(void *)(v16 + 16) = 0;
  *a1 = v17 + 1;
  *((void *)a1 + 11) = v16 + 32;
  return result;
}

unint64_t _sql_fetch_plan_for_entity(unint64_t *a1)
{
  unint64_t v1 = a1;
  v35[5] = *MEMORY[0x1E4F143B8];
  if (!atomic_load(a1 + 28))
  {
    uint64_t v3 = (void *)[a1 foreignKeyColumns];
    unsigned int v4 = (void *)[v1 foreignEntityKeyColumns];
    uint64_t v5 = (void *)[v1 foreignOrderKeyColumns];
    uint64_t v6 = (void *)[v1 attributeColumns];
    uint64_t v31 = v1;
    uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObject:v1[18]];
    int v8 = [v3 count];
    int v9 = [v4 count];
    int v10 = [v5 count];
    int v11 = v9 + v8 + v10 + [v6 count];
    int v12 = v11 + 1;
    size_t v13 = (24 * v11 + 32);
    uint64_t v14 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      uint64_t v14 = malloc_default_zone();
    }
    uint64_t v15 = malloc_type_zone_malloc(v14, v13, 0xCD29492DuLL);
    uint64_t v16 = 0;
    v15[1] = v12;
    uint64_t v30 = (CFTypeRef *)v15;
    int v17 = (char *)(v15 + 2);
    v35[0] = v7;
    v35[1] = v3;
    v35[2] = v4;
    v35[3] = v5;
    int v18 = 32;
    v35[4] = v6;
    do
    {
      uint64_t v32 = v16;
      uint64_t v34 = (void *)v35[v16];
      uint64_t v33 = objc_msgSend(v34, "count", v30);
      if (v33)
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          v20 = (unsigned __int16 *)[v34 objectAtIndex:i];
          int v21 = [v20 slot];
          if (v20) {
            int v22 = v20[13];
          }
          else {
            int v22 = 0;
          }
          char v23 = [v20 sqlType];
          int v24 = [v20 propertyType];
          char v25 = v24;
          if (v24 == 1)
          {
            int v26 = objc_msgSend((id)objc_msgSend(v20, "propertyDescription"), "isOptional");
            if (v26) {
              v18 += 4;
            }
          }
          else
          {
            int v26 = 0;
          }
          int v27 = -[NSSQLColumn roughSizeEstimate]((uint64_t)v20);
          if (v20) {
            CFRetain(v20);
          }
          v18 += v27;
          *(_DWORD *)int v17 = v21;
          *((_DWORD *)v17 + 1) = v22;
          *((_DWORD *)v17 + 2) = v26;
          v17[12] = v23;
          v17[13] = v25;
          *((_WORD *)v17 + 7) = 0;
          *((void *)v17 + 2) = v20;
          v17 += 24;
        }
      }
      uint64_t v16 = v32 + 1;
    }
    while (v32 != 4);
    uint64_t v28 = 0;
    unint64_t v1 = v31;
    *(_DWORD *)uint64_t v30 = v18;
    atomic_compare_exchange_strong((atomic_ullong *volatile)v31 + 28, (unint64_t *)&v28, (unint64_t)v30);
    if (v28) {
      _deallocateFetchEntityPlan(v30);
    }
  }
  return atomic_load(v1 + 28);
}

uint64_t _PFRawIndexForKnownKey(void *a1, __CFString *a2)
{
  if (!a2) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v4 = _PFRawFastIndexForKnownKey(a1, a2, &v7);
  if (v4 >= a1[3]) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v5 = v4;
  if (*(__CFString **)(a1[5] + 8 * v4) != a2 && !-[__CFString isEqualToString:](a2, "isEqualToString:")) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  return v5;
}

uint64_t _PFRawFastIndexForKnownKey(void *a1, __CFString *theString, unint64_t *a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (!a1[3]) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  if (!CStringPtr)
  {
    uint64_t v19 = (uint64_t **)a1[2];
    v20 = *v19;
    uint64_t v21 = [(__CFString *)theString length];
    if (v20)
    {
      unint64_t v22 = v21;
      int v23 = 0;
      uint64_t v24 = *v20;
      while (1)
      {
        if ((v24 & 0x1FF8) != 0)
        {
          if (v24 >> 13 >= v22) {
            goto LABEL_46;
          }
          unint64_t v25 = -[__CFString characterAtIndex:](theString, "characterAtIndex:");
        }
        else
        {
          *a3 = v22;
          unint64_t v25 = v22;
        }
        if ((v24 & 7) == 1)
        {
          unint64_t v26 = *((unsigned __int16 *)v20 + 4);
          BOOL v18 = v25 >= v26;
          unint64_t v27 = v25 - v26;
          if (v18)
          {
            if (v25 <= *((unsigned __int16 *)v20 + 6))
            {
              if (v27 <= 0xFFFE) {
                unint64_t v29 = v27;
              }
              else {
                unint64_t v29 = 0;
              }
              uint64_t v28 = (__int16 *)v20 + v29 + 8;
            }
            else
            {
              uint64_t v28 = (__int16 *)v20 + 7;
            }
          }
          else
          {
            uint64_t v28 = (__int16 *)v20 + 5;
          }
          int v23 = *v28;
        }
        if ((v23 & 0x80000000) == 0) {
          break;
        }
        v20 = v19[-v23];
        uint64_t v24 = *v20;
        if ((*v20 & 0x1FF8) != 0 && v22 <= *v20 >> 13) {
          return 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      uint64_t result = (v23 + HIDWORD(v24));
      if (result != 0x200000) {
        return result;
      }
LABEL_46:
      [a1 length];
      _NSCoreDataLog(1, @"NSKnownKeysDictionary: dumping bad mapping: %@ with length:\x05", v32, v33, v34, v35, v36, v37, (uint64_t)a1);
      [a1 keys];
      if (a1[3])
      {
        unint64_t v44 = 0;
        do
          _NSCoreDataLog(1, @" \t key[%d] = %@", v38, v39, v40, v41, v42, v43, v44++);
        while (a1[3] > v44);
      }
      uint64_t v45 = [NSString stringWithUTF8String:"NSKnownKeysDictionary: improper mapping detected with key '%@'"];
      _NSCoreDataLog(17, v45, v46, v47, v48, v49, v50, v51, (uint64_t)theString);
      uint64_t v52 = __pflogFaultLog;
      if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v54 = theString;
        _os_log_fault_impl(&dword_18AB82000, v52, OS_LOG_TYPE_FAULT, "CoreData: NSKnownKeysDictionary: improper mapping detected with key '%@'", buf, 0xCu);
      }
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v7 = CStringPtr;
  unint64_t v8 = [(__CFString *)theString length];
  *a3 = v8;
  int v9 = (uint64_t **)a1[2];
  int v10 = *v9;
  if (!*v9) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v11 = *v10;
  while (1)
  {
    unint64_t v12 = v8;
    if ((v11 & 0x1FF8) != 0) {
      unint64_t v12 = v7[v11 >> 13];
    }
    unint64_t v13 = *((unsigned __int16 *)v10 + 4);
    BOOL v18 = v12 >= v13;
    unint64_t v14 = v12 - v13;
    if (v18)
    {
      if (v12 <= *((unsigned __int16 *)v10 + 6))
      {
        unint64_t v16 = v14 <= 0xFFFE ? v14 : 0;
        uint64_t v15 = (__int16 *)v10 + v16 + 8;
      }
      else
      {
        uint64_t v15 = (__int16 *)v10 + 7;
      }
    }
    else
    {
      uint64_t v15 = (__int16 *)v10 + 5;
    }
    int v17 = *v15;
    if ((v17 & 0x80000000) == 0) {
      break;
    }
    int v10 = v9[-v17];
    uint64_t v11 = *v10;
    BOOL v18 = (*v10 & 0x1FF8) != 0 && *v10 >> 13 >= v8;
    if (v18) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  return (v17 + HIDWORD(v11));
}

BOOL _compareUnknownStrings(void *a1, __CFString *a2)
{
  int64_t v4 = [a1 length];
  if (v4 != [(__CFString *)a2 length]) {
    return 0;
  }
  unint64_t v5 = (char *)[a1 UTF8String];
  Class Class = object_getClass(a1);
  if (Class == object_getClass(a2))
  {
    CStringPtr = (const char *)[(__CFString *)a2 UTF8String];
    return memcmp(v5, CStringPtr, v4) == 0;
  }
  if (a2)
  {
    CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
    CStringPtr = CFStringGetCStringPtr(a2, SystemEncoding);
    if (CStringPtr) {
      return memcmp(v5, CStringPtr, v4) == 0;
    }
  }
  memset(v25, 0, sizeof(v25));
  CFStringRef theString = a2;
  uint64_t v29 = 0;
  int64_t v30 = v4;
  CharactersPtr = CFStringGetCharactersPtr(a2);
  int v10 = 0;
  unint64_t v27 = CharactersPtr;
  if (!CharactersPtr) {
    int v10 = CFStringGetCStringPtr(a2, 0x600u);
  }
  int64_t v31 = 0;
  int64_t v32 = 0;
  uint64_t v28 = v10;
  if (v4 < 1)
  {
    return 1;
  }
  else
  {
    uint64_t v11 = 0;
    int64_t v12 = 0;
    BOOL v13 = 0;
    int64_t v14 = 0;
    uint64_t v15 = 64;
    do
    {
      if ((unint64_t)v14 >= 4) {
        uint64_t v16 = 4;
      }
      else {
        uint64_t v16 = v14;
      }
      int64_t v17 = v30;
      if (v30 <= v14)
      {
        UniChar v18 = 0;
      }
      else if (v27)
      {
        UniChar v18 = v27[v14 + v29];
      }
      else if (v28)
      {
        UniChar v18 = v28[v29 + v14];
      }
      else
      {
        if (v32 <= v14 || v12 > v14)
        {
          uint64_t v20 = v16 + v11;
          uint64_t v21 = v15 - v16;
          int64_t v22 = v14 - v16;
          int64_t v23 = v22 + 64;
          if (v22 + 64 >= v30) {
            int64_t v23 = v30;
          }
          int64_t v31 = v22;
          int64_t v32 = v23;
          if (v30 >= v21) {
            int64_t v17 = v21;
          }
          v33.length = v17 + v20;
          v33.location = v22 + v29;
          CFStringGetCharacters(theString, v33, (UniChar *)v25);
          int64_t v12 = v31;
        }
        UniChar v18 = *((_WORD *)v25 + v14 - v12);
      }
      if (v18 != (unsigned __int16)v5[v14]) {
        break;
      }
      BOOL v13 = ++v14 >= v4;
      --v11;
      ++v15;
    }
    while (v4 != v14);
  }
  return v13;
}

unint64_t _sql_read_only_fetch_plan_for_entity(unint64_t *a1)
{
  unint64_t v1 = a1;
  if (!atomic_load(a1 + 28))
  {
    uint64_t v3 = (void *)[a1 foreignKeyColumns];
    int64_t v4 = (void *)[v1 foreignEntityKeyColumns];
    unint64_t v5 = (void *)[v1 foreignOrderKeyColumns];
    uint64_t v28 = v1;
    uint64_t v6 = (void *)[v1 attributeColumns];
    int v7 = [v3 count];
    int v8 = [v4 count];
    int v9 = [v5 count];
    int v10 = v8 + v7 + v9 + [v6 count];
    uint64_t v11 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      uint64_t v11 = malloc_default_zone();
    }
    int64_t v12 = malloc_type_zone_malloc(v11, (24 * v10 + 8), 0xA7A4CA07uLL);
    v12[1] = v10;
    id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    [v13 addObjectsFromArray:v3];
    [v13 addObjectsFromArray:v4];
    [v13 addObjectsFromArray:v5];
    [v13 addObjectsFromArray:v6];
    [v13 sortUsingFunction:_compareSQLColumnsByFetchIndex context:0];
    int64_t v30 = v13;
    uint64_t v29 = [v13 count];
    ptr = (CFTypeRef *)v12;
    if (v29)
    {
      uint64_t v14 = 0;
      uint64_t v15 = (char *)(v12 + 2);
      int v16 = 32;
      while (1)
      {
        int64_t v17 = (unsigned __int16 *)objc_msgSend(v30, "objectAtIndex:", v14, ptr);
        int v18 = [v17 slot];
        if (v17) {
          int v19 = v17[13];
        }
        else {
          int v19 = 0;
        }
        uint64_t v20 = [v17 sqlType];
        uint64_t v21 = [v17 propertyType];
        int64_t v22 = (void *)[v17 propertyDescription];
        if (v22)
        {
          unsigned int v23 = [v22 isOptional];
          if (!v23) {
            goto LABEL_13;
          }
        }
        else
        {
          unsigned int v23 = 1;
        }
        v16 += 4;
LABEL_13:
        int v24 = -[NSSQLColumn roughSizeEstimate]((uint64_t)v17);
        if (v17) {
          CFRetain(v17);
        }
        v16 += v24;
        *(_DWORD *)uint64_t v15 = v18;
        *((_DWORD *)v15 + 1) = v19;
        *((void *)v15 + 1) = (v20 << 32) | (v21 << 40) | v23;
        *((void *)v15 + 2) = v17;
        v15 += 24;
        if (v29 == ++v14) {
          goto LABEL_19;
        }
      }
    }
    int v16 = 32;
LABEL_19:

    uint64_t v25 = 0;
    *(_DWORD *)ptr = v16;
    unint64_t v1 = v28;
    atomic_compare_exchange_strong((atomic_ullong *volatile)v28 + 28, (unint64_t *)&v25, (unint64_t)ptr);
    if (v25) {
      _deallocateFetchEntityPlan(ptr);
    }
  }
  return atomic_load(v1 + 28);
}

void _PFFaultHandlerFulfillPartialFault(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = a2[4];
  if ((v7 & 0x38000) == 0x8000)
  {
    a2[4] = v7 & 0xFFFC7FFF | 0x18000;
    int64_t v12 = (void *)*((void *)a2 + 5);
    id v13 = (unint64_t **)_PFEntityForManagedObject(a2);
    uint64_t v14 = v13;
    if (v13) {
      uint64_t v15 = v13[14];
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v97 = _kvcPropertysPrimitiveSetters((uint64_t)v13);
    int v16 = (void *)*((void *)a2 + 6);
    if (v16 && *v16)
    {
      uint64_t v17 = 0;
      char v18 = 1;
      if (a6)
      {
        unsigned int v19 = a2[4];
        if ((v19 & 0x2000) == 0)
        {
          if (a3) {
            ++*(_WORD *)(a3 + 46);
          }
          a2[4] = v19 | 0x1000;
          [a2 _willChangeValuesForKeys:a6];
          char v18 = 0;
          uint64_t v17 = a6;
        }
      }
    }
    else
    {
      uint64_t v17 = 0;
      char v18 = 1;
    }
    char v90 = v18;
    uint64_t v89 = v17;
    uint64_t v91 = a3;
    uint64_t v20 = (objc_class *)_PFCDSnapshotClassForEntity((unint64_t)v14);
    uint64_t v21 = (void *)*((void *)a2 + 3);
    if (v21) {

    }
    int64_t v22 = -[_CDSnapshot initWithObjectID:]([v20 alloc], v12);
    snapshot_initialize_all_null(v22);
    *((void *)a2 + 3) = v22;
    uint64_t v23 = a2[5];
    if (v23) {
      int v24 = (char *)a2 + v23;
    }
    else {
      int v24 = 0;
    }
    size_t v95 = &v24[-(((unint64_t)a2[4] >> 22) & 0x3FC)];
    unint64_t v25 = *v15;
    unint64_t v26 = v15[1] + *v15;
    if (*v15 < v26)
    {
      int v27 = v26 - 1;
      int v28 = (int)v25 >> 3;
      int v29 = v27 >> 3;
      unsigned int v30 = 0xFFu >> (8 - (v25 & 7));
      if (v27 >> 3 == (int)v25 >> 3)
      {
        int v31 = (510 << (v27 & 7)) | v30;
      }
      else
      {
        v95[v28] &= v30;
        if (v28 + 1 < v29) {
          bzero(&v95[v28 + 1], (v29 - v28 - 2) + 1);
        }
        int v31 = 510 << (v27 & 7);
        int v28 = v27 >> 3;
      }
      v95[v28] &= v31;
    }
    unint64_t v33 = v15[12];
    unint64_t v32 = v15[13];
    if (v33 < v32 + v33)
    {
      do
      {
        _PF_CopyOnWrite_Snapshot(a2);
        if (*(void *)(v97 + 8 * v33))
        {
          _NSSetUsingKeyValueSetter();
        }
        else
        {
          snapshot_set_value_as_object(*((char **)a2 + 3), v33, (void *)_CD_ScalarNull, v34, v35, v36, v37, v38);
        }
        ++v33;
        --v32;
      }
      while (v32);
    }
    uint64_t v96 = (char **)a2;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    uint64_t v39 = [a5 countByEnumeratingWithState:&v102 objects:v107 count:16];
    if (v39)
    {
      uint64_t v40 = v39;
      uint64_t v41 = *(void *)v103;
      uint64_t v42 = 1;
      uint64_t v92 = a4;
      do
      {
        for (uint64_t i = 0; i != v40; ++i)
        {
          if (*(void *)v103 != v41) {
            objc_enumerationMutation(a5);
          }
          unint64_t v44 = *(void **)(*((void *)&v102 + 1) + 8 * i);
          uint64_t v45 = [v44 _entitysReferenceID];
          if (v45 < 0)
          {
            ++v42;
          }
          else
          {
            uint64_t v46 = v45;
            uint64_t v47 = [v44 entity];
            if (v14 != (unint64_t **)v47) {
              uint64_t v46 = objc_msgSend(v14, "_offsetRelationshipIndex:fromSuperEntity:andIsToMany:", v46, v47, objc_msgSend(v44, "_isToManyRelationship"));
            }
            if (a4) {
              uint64_t v48 = *(void **)(a4 + 8 * v42++);
            }
            else {
              uint64_t v48 = 0;
            }
            unint64_t v49 = v15[6];
            BOOL v51 = v46 >= v49;
            unint64_t v50 = v46 - v49;
            BOOL v51 = !v51 || v50 >= v15[7];
            if (v51)
            {
              unint64_t v52 = v15[12];
              BOOL v51 = v46 >= v52;
              unint64_t v53 = v46 - v52;
              if (v51 && v53 < v15[13])
              {
                uint64_t v55 = *(void *)(v97 + 8 * v46);
                _PF_CopyOnWrite_Snapshot(v96);
                if (v55)
                {
                  _NSSetUsingKeyValueSetter();
                }
                else
                {
                  id v63 = v48;
                  snapshot_set_value_as_object(v96[3], v46, v63, v64, v65, v66, v67, v68);
                }
                a4 = v92;
                if (!v48) {
                  v95[v46 >> 3] |= 1 << (v46 & 7);
                }
              }
            }
            else
            {
              uint64_t v56 = *(void *)(v97 + 8 * v46);
              _PF_CopyOnWrite_Snapshot(v96);
              if (v56)
              {
                _NSSetUsingKeyValueSetter();
              }
              else
              {
                id v57 = v48;
                snapshot_set_value_as_object(v96[3], v46, v57, v58, v59, v60, v61, v62);
              }
              v95[v46 >> 3] |= 1 << (v46 & 7);
              a4 = v92;
            }
          }
        }
        uint64_t v40 = [a5 countByEnumeratingWithState:&v102 objects:v107 count:16];
      }
      while (v40);
    }
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    uint64_t v69 = [a7 countByEnumeratingWithState:&v98 objects:v106 count:16];
    if (v69)
    {
      uint64_t v70 = v69;
      uint64_t v71 = *(void *)v99;
      do
      {
        for (uint64_t j = 0; j != v70; ++j)
        {
          if (*(void *)v99 != v71) {
            objc_enumerationMutation(a7);
          }
          BOOL v73 = *(void **)(*((void *)&v98 + 1) + 8 * j);
          uint64_t v74 = [v73 _entitysReferenceID];
          if ((v74 & 0x8000000000000000) == 0)
          {
            uint64_t v75 = v74;
            uint64_t v76 = [v73 entity];
            if (v14 != (unint64_t **)v76) {
              uint64_t v75 = objc_msgSend(v14, "_offsetRelationshipIndex:fromSuperEntity:andIsToMany:", v75, v76, objc_msgSend(v73, "_isToManyRelationship"));
            }
            unint64_t v77 = v15[10];
            BOOL v51 = v75 >= v77;
            unint64_t v78 = v75 - v77;
            if (v51 && v78 < v15[11])
            {
              if ([v73 _propertyType] == 7) {
                uint64_t v80 = [v73 _buildDefaultValue];
              }
              else {
                uint64_t v80 = [v73 defaultValue];
              }
              v81 = (void *)v80;
              uint64_t v82 = *(void *)(v97 + 8 * v75);
              _PF_CopyOnWrite_Snapshot(v96);
              if (v82)
              {
                _NSSetUsingKeyValueSetter();
              }
              else
              {
                id v83 = v81;
                snapshot_set_value_as_object(v96[3], v75, v83, v84, v85, v86, v87, v88);
              }
              v95[v75 >> 3] |= 1 << (v75 & 7);
            }
          }
        }
        uint64_t v70 = [a7 countByEnumeratingWithState:&v98 objects:v106 count:16];
      }
      while (v70);
    }
    *((_DWORD *)v96 + 4) = v96[2] & 0xFFFC7FFF | 0x28000;
    if ((v90 & 1) == 0)
    {
      [v96 _didChangeValuesForKeys:v89];
      *((_DWORD *)v96 + 4) &= ~0x1000u;
      if (v91) {
        --*(_WORD *)(v91 + 46);
      }
    }
  }
}

void fetchResultSetReallocCurrentRow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 24);
  if ((v3 & 0x80000000) != 0) {
    int64_t v4 = 0;
  }
  else {
    int64_t v4 = (const void *)(*(void *)(*(void *)(a1 + 64) + 8 * v3) + *(void *)(a1 + 32));
  }
  size_t v5 = *(void *)(a1 + 88) - (void)v4;
  unsigned int v6 = (a2 + v5 + 7) & 0xFFFFFFF8;
  if (v6 >= 0x3BFF) {
    size_t v7 = v6 + 15359;
  }
  else {
    size_t v7 = 15359;
  }
  *(_DWORD *)(a1 + 16) = v7;
  if (!v3 && !*(void *)(a1 + 32))
  {
    int v16 = **(void ***)(a1 + 64);
    unsigned int v19 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if ((*(unsigned char *)(a1 + 48) & 4) != 0)
    {
      if (!_PF_Private_Malloc_Zone) {
        unsigned int v19 = malloc_default_zone();
      }
      uint64_t v20 = malloc_type_zone_calloc(v19, 1uLL, v7, 0xE0D7EB99uLL);
    }
    else
    {
      if (!_PF_Private_Malloc_Zone) {
        unsigned int v19 = malloc_default_zone();
      }
      uint64_t v20 = malloc_type_zone_malloc(v19, v7, 0x1F8792B6uLL);
    }
    LODWORD(v8) = 0;
    *(void *)(a1 + 80) = v20;
    **(void **)(a1 + 64) = v20;
    uint64_t v21 = *(void *)(a1 + 80);
    **(void **)(a1 + 72) = v7;
    *(void *)(a1 + 88) = v21;
    *(_DWORD *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    goto LABEL_30;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 20);
  uint64_t v9 = (v8 + 1);
  *(_DWORD *)(a1 + 20) = v9;
  int v10 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    int v10 = malloc_default_zone();
  }
  uint64_t v11 = malloc_type_zone_realloc(v10, *(void **)(a1 + 64), 8 * (v8 + 2), 0x80040B8603338uLL);
  *(void *)(a1 + 64) = v11;
  v11[v9] = 0;
  int64_t v12 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if ((*(unsigned char *)(a1 + 48) & 4) != 0)
  {
    if (!_PF_Private_Malloc_Zone) {
      int64_t v12 = malloc_default_zone();
    }
    id v13 = malloc_type_zone_calloc(v12, 1uLL, v7, 0x8911625CuLL);
  }
  else
  {
    if (!_PF_Private_Malloc_Zone) {
      int64_t v12 = malloc_default_zone();
    }
    id v13 = malloc_type_zone_malloc(v12, v7, 0x7B75F37uLL);
  }
  *(void *)(a1 + 80) = v13;
  *(void *)(*(void *)(a1 + 64) + 8 * v8) = v13;
  uint64_t v14 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v14 = malloc_default_zone();
  }
  uint64_t v15 = malloc_type_zone_realloc(v14, *(void **)(a1 + 72), 8 * (v8 + 2), 0x100004000313F17uLL);
  int v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  *(void *)(a1 + 72) = v15;
  v15[v9] = 0;
  v15[v8] = v7;
  *(void *)(a1 + 88) = *(void *)(a1 + 80);
  *(_DWORD *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = 0;
  if ((v8 & 0x80000000) == 0)
  {
LABEL_30:
    char v18 = *(void **)(*(void *)(a1 + 64) + 8 * v8);
    uint64_t v17 = v16;
  }
  memcpy(v18, v4, v5);
  *(void *)(a1 + 88) += v5;
  if (v17)
  {
    int64_t v22 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      int64_t v22 = malloc_default_zone();
    }
    malloc_zone_free(v22, v17);
  }
}

uint64_t _PFfastRowRetain(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed);
  return result;
}

void _pvfk_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t _compareSQLColumnsByFetchIndex(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 26);
    if (a2)
    {
LABEL_3:
      unsigned int v3 = *(unsigned __int16 *)(a2 + 26);
      goto LABEL_4;
    }
  }
  else
  {
    unsigned int v2 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  unsigned int v3 = 0;
LABEL_4:
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return v5;
  }
  else {
    return -1;
  }
}

uint64_t _populateRowValuesOnBackgroundThread(uint64_t a1)
{
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(uint64_t **)(a1 + 24);
  uint64_t v120 = *v2;
  uint64_t v3 = v2[4];
  uint64_t v106 = (unsigned __int8 *)v2[3];
  long long v103 = (__CFArray *)v2[5];
  CFArrayRef theArray = (const __CFArray *)v2[1];
  long long v98 = (unsigned __int8 *)v2[6];
  PF_FREE_OBJECT_ARRAY(v2);
  *(void *)(a1 + 24) = 0;
  id v112 = (void (*)(uint64_t, char *, void, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  BOOL v119 = (void (*)(uint64_t, char *, void, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  uint64_t v111 = (void (*)(uint64_t, char *, void, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  id v118 = (void (*)(uint64_t, char *, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  long long v157 = 0u;
  long long v158 = 0u;
  long long v155 = 0u;
  long long v156 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v151 = 0u;
  long long v152 = 0u;
  long long v149 = 0u;
  long long v150 = 0u;
  long long v147 = 0u;
  long long v148 = 0u;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  long long v141 = 0u;
  long long v142 = 0u;
  long long v139 = 0u;
  long long v140 = 0u;
  long long v99 = (pthread_cond_t *)(a1 + 96);
  long long v100 = (pthread_mutex_t *)(a1 + 32);
  uint64_t v105 = v3;
  long long v101 = (pthread_cond_t *)(v3 + 96);
  long long v102 = (pthread_mutex_t *)(v3 + 32);
  long long v137 = 0u;
  long long v138 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  *(_OWORD *)values = 0u;
  long long v128 = 0u;
LABEL_2:
  pthread_mutex_lock(v100);
  CFArrayRef v4 = theArray;
  do
  {
    CFIndex Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      if (Count >= 128) {
        CFIndex v9 = 128;
      }
      else {
        CFIndex v9 = Count;
      }
      v160.location = 0;
      v160.length = v9;
      CFArrayGetValues(theArray, v160, (const void **)values);
      if ((unint64_t)Count > 0x7F)
      {
        v161.location = 0;
        v161.length = v9;
        CFArrayReplaceValues(theArray, v161, 0, 0);
      }
      else
      {
        CFArrayRemoveAllValues(theArray);
      }
      atomic_load(v106);
      CFIndex Count = v9;
LABEL_18:
      pthread_mutex_unlock(v100);
      if (v120)
      {
        uint64_t v121 = *(void *)(v120 + 112);
        CFStringRef v117 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
        BOOL v113 = *(unsigned char *)(v120 + 201) != 0;
      }
      else
      {
        CFStringRef v117 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
        uint64_t v121 = 0;
        BOOL v113 = 0;
      }
      if (Count >= 1)
      {
        CFIndex v10 = 0;
        uint64_t v115 = 0;
        uint64_t v116 = 0;
        v114 = 0;
        while (1)
        {
          CFIndex v109 = v10;
          uint64_t v11 = values[v10];
          int64_t v12 = *(void **)((char *)values + ((8 * v10) | 8));
          uint64_t v124 = objc_msgSend(v12, "_objectsPointer", v98);
          uint64_t v108 = v12;
          uint64_t v122 = [v12 count];
          if (!v122) {
            goto LABEL_159;
          }
          uint64_t v13 = 0;
          uint64_t v14 = (uint64_t *)v11[8];
          uint64_t v15 = *v14;
          uint64_t v123 = v11;
          while (1)
          {
            while ((*(_DWORD *)v15 & 0x80000000) != 0)
            {
              uint64_t v16 = *(unsigned int *)(v15 + 4);
              if ((v16 & 0x80000000) != 0) {
                uint64_t v15 = 0;
              }
              else {
                uint64_t v15 = v14[v16] + *(void *)(v15 + 16);
              }
            }
            uint64_t v125 = v13;
            uint64_t v126 = *(void *)(v124 + 8 * v13);
            uint64_t v17 = *(char **)(v126 + 40);
            char v18 = (unint64_t *)_sqlEntityForEntityID(v121, *(unsigned int *)(v15 + 8));
            unint64_t plan_for_entity = _sql_fetch_plan_for_entity(v18);
            uint64_t v20 = *(unsigned int *)(plan_for_entity + 4);
            if (v20)
            {
              uint64_t v21 = (unsigned __int8 *)(v15 + 32);
              int64_t v22 = (id *)(plan_for_entity + 24);
              while (1)
              {
                int v23 = *((unsigned __int8 *)v22 - 4);
                if ((v23 - 2) > 6) {
                  uint64_t v24 = 3;
                }
                else {
                  uint64_t v24 = qword_18AE54480[(char)(v23 - 2)];
                }
                uint64_t v21 = (unsigned __int8 *)((unint64_t)&v21[v24] & ~v24);
                if (*(unsigned char *)(v22 - 1))
                {
                  int v26 = *v21++;
                  BOOL v25 = v26 != 0;
                }
                else
                {
                  BOOL v25 = 0;
                }
                int v27 = (unsigned int *)(v22 - 2);
                uint64_t v28 = ~v24;
                switch(*((unsigned char *)v22 - 4))
                {
                  case 1:
                    unint64_t v48 = (unint64_t)&v21[v24];
                    unint64_t v49 = (__int16 *)(v48 & v28);
                    uint64_t v39 = (v48 & v28) + 4;
                    if (v25) {
                      uint64_t v50 = (uint64_t)v21;
                    }
                    else {
                      uint64_t v50 = (v48 & v28) + 4;
                    }
                    int v51 = *((unsigned __int8 *)v22 - 3);
                    switch(v51)
                    {
                      case 10:
                        if (v25) {
                          uint64_t v72 = 0;
                        }
                        else {
                          uint64_t v72 = *(unsigned int *)v49;
                        }
                        v111(v126, sel_setForeignOrderKeySlot_orderKey_, *v27, v72);
                        break;
                      case 4:
                        if (v25) {
                          uint64_t v71 = 0;
                        }
                        else {
                          uint64_t v71 = *(unsigned int *)v49;
                        }
                        v112(v126, sel_setForeignEntityKeySlot_entityKey_, *v27, v71);
                        break;
                      case 1:
                        uint64_t v41 = objc_msgSend((id)objc_msgSend(*v22, "propertyDescription"), "superCompositeAttribute");
                        if (v25) {
                          goto LABEL_69;
                        }
                        if (v41)
                        {
                          setMultiColumnValueDictionary(v17, v22 - 2, (void *)[NSNumber numberWithInt:*(unsigned int *)v49]);
                        }
                        else
                        {
                          uint64_t v85 = *v27;
                          Class Class = object_getClass(v17);
                          int v87 = *(char *)(*((void *)object_getIndexedIvars(Class) + 7) + v85);
                          if (v87 == 115)
                          {
                            snapshot_set_int16(v17, *v27, *v49);
                          }
                          else if (v87 == 99)
                          {
                            snapshot_set_int8(v17, *v27, *(unsigned char *)v49);
                          }
                          else
                          {
                            snapshot_set_int32(v17, *v27, *(_DWORD *)v49);
                          }
                        }
                        goto LABEL_97;
                    }
                    uint64_t v21 = (unsigned __int8 *)v50;
                    goto LABEL_146;
                  case 2:
                  case 3:
                    unint64_t v36 = (unint64_t)&v21[v24];
                    uint64_t v37 = (uint64_t *)(v36 & v28);
                    uint64_t v38 = (v36 & v28) + 8;
                    if (v25) {
                      uint64_t v39 = (uint64_t)v21;
                    }
                    else {
                      uint64_t v39 = (v36 & v28) + 8;
                    }
                    int v40 = *((unsigned __int8 *)v22 - 3);
                    switch(v40)
                    {
                      case 6:
                        if (v25) {
                          uint64_t v57 = 0;
                        }
                        else {
                          uint64_t v57 = *v37;
                        }
                        v118(v126, sel_setOptLock_, v57);
                        goto LABEL_97;
                      case 3:
                        if (v25) {
                          uint64_t v56 = 0;
                        }
                        else {
                          uint64_t v56 = *v37;
                        }
                        v119(v126, sel_setForeignKeySlot_int64_, *v27, v56);
LABEL_97:
                        uint64_t v21 = (unsigned __int8 *)v39;
                        goto LABEL_146;
                      case 1:
                        uint64_t v41 = objc_msgSend((id)objc_msgSend(*v22, "propertyDescription"), "superCompositeAttribute");
                        if (v25) {
                          goto LABEL_69;
                        }
                        uint64_t v73 = *v37;
                        if (v41) {
                          setMultiColumnValueDictionary(v17, v22 - 2, (void *)[NSNumber numberWithLongLong:v73]);
                        }
                        else {
                          snapshot_set_int64(v17, *v27, v73);
                        }
                        uint64_t v21 = (unsigned __int8 *)v38;
                        break;
                      default:
                        uint64_t v21 = (unsigned __int8 *)v39;
                        break;
                    }
                    goto LABEL_146;
                  case 4:
                  case 5:
                  case 6:
                  case 9:
                  case 0xC:
                    if (v25) {
                      goto LABEL_68;
                    }
                    int v29 = (const char *)((unint64_t)&v21[v24] & v28);
                    unsigned int v30 = (int *)(v29 + 4);
                    int v31 = (__CFString *)CFStringCreateWithCString(0, v29 + 4, 0x8000100u);
                    uint64_t v32 = *(int *)v29;
                    int v33 = *((unsigned __int8 *)v22 - 4);
                    if (v33 == 12)
                    {
                      uint64_t v34 = (__CFString *)(id)[MEMORY[0x1E4F1CB10] URLWithString:v31];
                    }
                    else
                    {
                      if (v33 != 4)
                      {
LABEL_74:
                        uint64_t v21 = (unsigned __int8 *)v30 + v32;
                        if (objc_msgSend((id)objc_msgSend(*v22, "propertyDescription"), "superCompositeAttribute")) {
                          goto LABEL_75;
                        }
                        unsigned int v53 = *v27;
                        uint64_t v54 = v17;
                        uint64_t v55 = (uint64_t)v31;
                        goto LABEL_77;
                      }
                      uint64_t v34 = (__CFString *)[objc_alloc(MEMORY[0x1E4F28C28]) initWithString:v31];
                    }
                    unint64_t v52 = v34;
                    CFRelease(v31);
                    int v31 = v52;
                    goto LABEL_74;
                  case 7:
                  case 8:
                    if (v25) {
                      goto LABEL_68;
                    }
                    uint64_t v35 = (double *)((unint64_t)&v21[v24] & v28);
                    uint64_t v21 = (unsigned __int8 *)(v35 + 1);
                    if (objc_msgSend((id)objc_msgSend(*v22, "propertyDescription"), "superCompositeAttribute"))
                    {
                      setMultiColumnValueDictionary(v17, v22 - 2, (void *)[NSNumber numberWithDouble:*v35]);
                      goto LABEL_146;
                    }
                    uint64_t v65 = *((unsigned int *)v22 - 4);
                    if (*((unsigned char *)v22 - 4) == 7)
                    {
                      Class v66 = object_getClass(v17);
                      IndexedIvars = object_getIndexedIvars(v66);
                      unsigned int v68 = *v27;
                      double v69 = *v35;
                      if (*(unsigned char *)(IndexedIvars[7] + v65) == 102)
                      {
                        float v70 = v69;
                        snapshot_set_float(v17, v68, v70);
                        goto LABEL_146;
                      }
                      uint64_t v74 = v17;
                    }
                    else
                    {
                      double v69 = *v35;
                      uint64_t v74 = v17;
                      unsigned int v68 = *((_DWORD *)v22 - 4);
                    }
                    snapshot_set_double(v74, v68, v69);
                    goto LABEL_146;
                  case 0xD:
                  case 0xE:
                    goto LABEL_146;
                  case 0x10:
                    if (v25) {
                      goto LABEL_68;
                    }
                    uint64_t v42 = (int *)((unint64_t)&v21[v24] & v28);
                    unint64_t v44 = v42 + 1;
                    int v43 = *((unsigned __int8 *)v42 + 4);
                    if (v43 == 3)
                    {
                      if (v120)
                      {
                        uint64_t v75 = v115;
                        if (!v115) {
                          uint64_t v75 = *(void *)(v120 + 104);
                        }
                      }
                      else
                      {
                        uint64_t v75 = v115;
                      }
                      uint64_t v88 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v44 length:*v42];
                      uint64_t v89 = [_NSDataFileBackedFuture alloc];
                      uint64_t v115 = v75;
                      uint64_t v47 = -[_NSDataFileBackedFuture initWithStoreMetadata:directory:](v89, "initWithStoreMetadata:directory:", v88, [MEMORY[0x1E4F1CB10] fileURLWithPath:v75 isDirectory:1]);
                      goto LABEL_143;
                    }
                    if (v43 == 1)
                    {
                      uint64_t v45 = [_PFExternalReferenceData alloc];
                      if (v120) {
                        uint64_t v46 = *(unsigned int *)(v120 + 184);
                      }
                      else {
                        uint64_t v46 = 0;
                      }
                      uint64_t v47 = [(_PFExternalReferenceData *)v45 initWithStoreBytes:v44 length:*v42 externalLocation:0 safeguardLocation:0 protectionLevel:v46];
                      goto LABEL_143;
                    }
                    uint64_t v76 = objc_msgSend(v117, "stringWithFileSystemRepresentation:length:", (char *)v42 + 5, strnlen((const char *)v42 + 5, *v42 - 1));
                    unint64_t v77 = v116;
                    if (v116)
                    {
                      uint64_t v78 = v120;
                      int v79 = v114;
                      if (!v120 || v114) {
                        goto LABEL_127;
                      }
LABEL_126:
                      int v79 = *(void **)(v78 + 96);
                      goto LABEL_127;
                    }
                    uint64_t v78 = v120;
                    int v79 = v114;
                    if (v120)
                    {
                      unint64_t v77 = *(void **)(v120 + 88);
                      if (v114) {
                        goto LABEL_127;
                      }
                      goto LABEL_126;
                    }
                    unint64_t v77 = 0;
LABEL_127:
                    uint64_t v116 = v77;
                    uint64_t v81 = [v77 stringByAppendingPathComponent:v76];
                    v114 = v79;
                    uint64_t v82 = [v79 stringByAppendingPathComponent:v76];
                    uint64_t v110 = v82;
                    if (v113 && ![v117 fileExistsAtPath:v81])
                    {
                      int v31 = 0;
LABEL_139:
                      if ([v117 fileExistsAtPath:v81]) {
                        goto LABEL_144;
                      }

                      char v90 = -[NSSQLFetchRequestContext ubiquitousExternalReferenceLocationForUUID:]((void **)v120, v76);
                      uint64_t v91 = [_PFExternalReferenceData alloc];
                      if (v120) {
                        uint64_t v92 = *(unsigned int *)(v120 + 184);
                      }
                      else {
                        uint64_t v92 = 0;
                      }
                      uint64_t v47 = [(_PFExternalReferenceData *)v91 initWithStoreBytes:v44 length:*v42 externalLocation:v81 safeguardLocation:v110 protectionLevel:v92 ubiquitousLocation:v90];
LABEL_143:
                      int v31 = (__CFString *)v47;
                      goto LABEL_144;
                    }
                    id v83 = [_PFExternalReferenceData alloc];
                    if (v120) {
                      uint64_t v84 = *(unsigned int *)(v120 + 184);
                    }
                    else {
                      uint64_t v84 = 0;
                    }
                    int v31 = [(_PFExternalReferenceData *)v83 initWithStoreBytes:v44 length:*v42 externalLocation:v81 safeguardLocation:v82 protectionLevel:v84];
                    if (v113) {
                      goto LABEL_139;
                    }
LABEL_144:
                    uint64_t v21 = (unsigned __int8 *)v44 + *v42;
                    if (objc_msgSend((id)objc_msgSend(*v22, "propertyDescription"), "superCompositeAttribute"))
                    {
LABEL_75:
                      setMultiColumnValueDictionary(v17, v22 - 2, v31);
                    }
                    else
                    {
                      snapshot_set_object(v17, *v27, (uint64_t)v31);
                    }
LABEL_146:
                    v22 += 3;
                    if (!--v20) {
                      goto LABEL_154;
                    }
                    break;
                  default:
                    if (v25)
                    {
LABEL_68:
                      uint64_t v41 = objc_msgSend((id)objc_msgSend(*v22, "propertyDescription"), "superCompositeAttribute");
LABEL_69:
                      if (v41) {
                        setMultiColumnValueNullFlag(v17, (_DWORD *)v22 - 4);
                      }
                      else {
                        v17[((unint64_t)*v27 >> 3) + 28] |= 1 << (*v27 & 7);
                      }
                      goto LABEL_146;
                    }
                    uint64_t v58 = (const UInt8 *)((unint64_t)&v21[v24] & v28);
                    uint64_t v59 = (int *)(v58 + 4);
                    CFDataRef v60 = CFDataCreate(0, v58 + 4, *(int *)v58);
                    CFDataRef v61 = v60;
                    uint64_t v62 = *(int *)v58;
                    int v63 = *((unsigned __int8 *)v22 - 4);
                    if (v63 != 11)
                    {
                      if (v63 != 15) {
                        goto LABEL_121;
                      }
                      CFDataRef v64 = (const __CFData *)+[_PFRoutines retainedDecodeValue:forTransformableAttribute:]((uint64_t)_PFRoutines, (uint64_t)v60, (void *)[*v22 propertyDescription]);
                      goto LABEL_110;
                    }
                    if ([(__CFData *)v60 length] == 16)
                    {
                      CFDataRef v64 = (const __CFData *)objc_msgSend(objc_alloc(MEMORY[0x1E4F29128]), "initWithUUIDBytes:", -[__CFData bytes](v61, "bytes"));
LABEL_110:
                      CFDataRef v80 = v64;
                      CFRelease(v61);
                      CFDataRef v61 = v80;
                      goto LABEL_121;
                    }

                    CFDataRef v61 = 0;
LABEL_121:
                    uint64_t v21 = (unsigned __int8 *)v59 + v62;
                    if (objc_msgSend((id)objc_msgSend(*v22, "propertyDescription"), "superCompositeAttribute"))
                    {
                      setMultiColumnValueDictionary(v17, v22 - 2, v61);
                    }
                    else
                    {
                      unsigned int v53 = *v27;
                      uint64_t v54 = v17;
                      uint64_t v55 = (uint64_t)v61;
LABEL_77:
                      snapshot_set_object(v54, v53, v55);
                    }
                    goto LABEL_146;
                }
              }
            }
LABEL_154:
            uint64_t v93 = *(unsigned int *)(v15 + 4);
            if ((v93 & 0x80000000) != 0) {
              break;
            }
            uint64_t v11 = v123;
            uint64_t v14 = (uint64_t *)v123[8];
            uint64_t v94 = v14[v93];
            if (v94)
            {
              uint64_t v15 = v94 + *(void *)(v15 + 16);
              uint64_t v13 = v125 + 1;
              if (v125 + 1 != v122) {
                continue;
              }
            }
            goto LABEL_159;
          }
          uint64_t v11 = v123;
LABEL_159:
          if (v108) {
            BOOL v95 = v105 == 0;
          }
          else {
            BOOL v95 = 1;
          }
          if (!v95)
          {
            pthread_mutex_lock(v102);
            CFRetain(v108);
            CFArrayAppendValue(v103, v108);
            pthread_mutex_unlock(v102);
            pthread_cond_signal(v101);
            fetchResultSetDeallocate((uint64_t)v11);
            CFIndex v96 = v109;
            goto LABEL_165;
          }
          fetchResultSetDeallocate((uint64_t)v11);
          CFIndex v96 = v109;
          if (v108) {
LABEL_165:
          }
            CFRelease(v108);
          CFIndex v10 = v96 + 2;
          if (Count <= v10) {
            goto LABEL_2;
          }
        }
      }
      goto LABEL_2;
    }
    unsigned __int8 v5 = atomic_load(v106);
    if (v5) {
      pthread_cond_wait(v99, v100);
    }
    unsigned __int8 v6 = atomic_load(v106);
    CFArrayRef v4 = theArray;
  }
  while ((v6 & 1) != 0);
  CFIndex v7 = Count;
  unsigned __int8 v8 = atomic_load(v106);
  if (v7 || (v8 & 1) != 0) {
    goto LABEL_18;
  }
  if (CFArrayGetCount(theArray))
  {
    CFIndex Count = 0;
    goto LABEL_18;
  }
  if (v98) {
    atomic_store(0, v98);
  }
  pthread_mutex_unlock(v100);
  return 0;
}

uint64_t _prepareResultsFromResultSet(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = (void **)a3;
  uint64_t v191 = *MEMORY[0x1E4F143B8];
  long long v155 = a2;
  if (a3) {
    uint64_t v5 = *(void *)(a3 + 136);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*(_DWORD *)(a1 + 4) <= 0x40000000u) {
    unsigned int v6 = *(_DWORD *)(a1 + 4);
  }
  else {
    unsigned int v6 = 0;
  }
  CFIndex v7 = PF_ALLOCATE_OBJECT_ARRAY((int)v6);
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v166 = a1;
  if (v3)
  {
    uint64_t v9 = (uint64_t)v3[14];
    uint64_t v165 = *(void *)(v5 + 56);
    id v163 = (id)[MEMORY[0x1E4F28CB8] defaultManager];
    BOOL v156 = *((unsigned char *)v3 + 201) != 0;
    CFIndex v10 = v3[4];
    if (v10) {
      int v177 = v10[43] & 1;
    }
    else {
      int v177 = 0;
    }
    unsigned int v189 = *(_DWORD *)(v5 + 72);
    unsigned int v11 = (v189 >> 2) & 7;
    uint64_t v12 = **(void **)(a1 + 64);
    v184 = (void *)(a1 + 64);
    if (v11 == 3)
    {
      uint64_t v167 = v3[16];
      BOOL v175 = 1;
    }
    else
    {
      BOOL v175 = 0;
      uint64_t v167 = 0;
    }
  }
  else
  {
    uint64_t v165 = *(void *)(v5 + 56);
    id v163 = (id)[MEMORY[0x1E4F28CB8] defaultManager];
    CFIndex v10 = 0;
    uint64_t v9 = 0;
    BOOL v156 = 0;
    int v177 = 0;
    uint64_t v167 = 0;
    unsigned int v189 = *(_DWORD *)(v5 + 72);
    unsigned int v11 = (v189 >> 2) & 7;
    BOOL v175 = v11 == 3;
    long long v146 = *(uint64_t **)(a1 + 64);
    v184 = (void *)(a1 + 64);
    uint64_t v12 = *v146;
  }
  v183 = (void **)v10;
  uint64_t v13 = [*(id *)(v5 + 8) _disablePersistentStoreResultCaching];
  int v176 = v13;
  unsigned int v14 = v189;
  if (v189) {
    unsigned int v15 = 0;
  }
  else {
    unsigned int v15 = v8;
  }
  MEMORY[0x1F4188790](v13);
  if (v15 > 0x200)
  {
    char v18 = NSAllocateScannedUncollectable();
    v181 = v18;
  }
  else
  {
    v181 = (uint64_t *)((char *)&v147 - v17);
    bzero((char *)&v147 - v17, 8 * v16);
  }
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v147 - v20;
  unsigned int v161 = v22;
  if (v22 > 0x200) {
    uint64_t v21 = (char *)NSAllocateScannedUncollectable();
  }
  else {
    bzero((char *)&v147 - v20, 8 * v19);
  }
  v182 = v21;
  if (v181) {
    BOOL v23 = v21 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23)
  {
    PF_FREE_OBJECT_ARRAY(v7);
    CFIndex v7 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v24 = v183;
  unsigned int v162 = v15;
  CFRange v160 = sel_setForeignEntityKeySlot_entityKey_;
  uint64_t v159 = +[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  uint64_t v171 = sel_setForeignKeySlot_int64_;
  int v170 = (void (*)(id, char *, void, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  long long v158 = sel_setForeignOrderKeySlot_orderKey_;
  uint64_t v157 = +[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  v169 = sel_setOptLock_;
  v168 = (void (*)(id, char *, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  if (v3)
  {
    BOOL v25 = (void *)[v3[1] objectIDFactoryForSQLEntity:*(void *)(v5 + 40)];
    if (v14) {
      goto LABEL_40;
    }
  }
  else
  {
    BOOL v25 = 0;
    if (v14) {
      goto LABEL_40;
    }
  }
  int v26 = v25;
  if (v8 == [v25 allocateBatch:v181 count:v8]) {
    uint64_t v27 = v8;
  }
  else {
    uint64_t v27 = 0;
  }
  if ((v14 & 2) != 0 || !v27)
  {
    BOOL v25 = v26;
    uint64_t v24 = v183;
    if (!v27)
    {
      PF_FREE_OBJECT_ARRAY(v7);
      uint64_t v28 = 0;
      CFIndex v7 = 0;
      BOOL v150 = 0;
      if ((v14 & 2) == 0) {
        goto LABEL_215;
      }
      goto LABEL_225;
    }
LABEL_40:
    v187 = (objc_class *)v25;
    BOOL v150 = (int)v8 > 0;
    uint64_t v164 = v8;
    int v29 = v184;
    if ((int)v8 >= 1)
    {
      uint64_t v30 = 0;
      long long v152 = 0;
      long long v153 = 0;
      long long v154 = 0;
      int v31 = 0;
      uint64_t v180 = v164;
      unsigned int v173 = v11;
      long long v174 = v7;
      uint64_t v178 = v3;
      uint64_t v172 = v9;
      while (1)
      {
        while ((*(_DWORD *)v12 & 0x80000000) != 0)
        {
          uint64_t v32 = *(unsigned int *)(v12 + 4);
          if ((v32 & 0x80000000) != 0) {
            uint64_t v12 = 0;
          }
          else {
            uint64_t v12 = *(void *)(*v29 + 8 * v32) + *(void *)(v12 + 16);
          }
        }
        int v33 = (unint64_t *)_sqlEntityForEntityID(v9, *(unsigned int *)(v12 + 8));
        uint64_t v34 = v187;
        if (v33 != v31) {
          uint64_t v34 = 0;
        }
        v188 = v33;
        if (v3 && v33 != v31) {
          uint64_t v34 = (objc_class *)objc_msgSend(v3[1], "objectIDFactoryForSQLEntity:");
        }
        v187 = v34;
        if (v14)
        {
          uint64_t v38 = (void *)[[v34 alloc] initWithPK64:*(void *)(v12 + 24)];
          if ((v14 & 2) != 0) {
            goto LABEL_199;
          }
          int v40 = v188;
          uint64_t v41 = v38;
          uint64_t v42 = +[NSSQLRow allocForSQLEntity:]((uint64_t)NSSQLRow, v188);
          double v43 = *(double *)(v166 + 8);
          v179 = v41;
          unint64_t v44 = (void *)[v42 initWithSQLEntity:v40 ownedObjectID:v41 andTimestamp:v43];
          *(void *)&v182[8 * v30] = v44;
        }
        else
        {
          uint64_t v35 = v181;
          unint64_t v36 = v181[v30];
          unint64_t v37 = _PFSetPrimaryKey(v36, *(void *)(v12 + 24));
          uint64_t v38 = (void *)v36;
          if (v36 == v37)
          {
            if ((v14 & 2) != 0) {
              goto LABEL_199;
            }
          }
          else
          {
            uint64_t v39 = (void *)v37;

            v35[v30] = v39;
            if ((v14 & 2) != 0)
            {
              uint64_t v38 = v39;
LABEL_199:
              if (v11 - 1 >= 2)
              {
                if (v11 && v11 != 3)
                {
LABEL_203:
                  uint64_t v38 = 0;
                }
                else
                {
                  long long v131 = v38;
                  uint64_t v126 = (atomic_uint *)-[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:](v24, v38, (uint64_t)v167);

LABEL_205:
                  uint64_t v38 = v126;
                }
              }
LABEL_206:
              int v29 = v184;
              goto LABEL_207;
            }
            *(void *)(*(void *)(*(void *)&v182[8 * v30] + 40) + 16) = v39;
            uint64_t v38 = v39;
          }
          v179 = v38;
          unint64_t v44 = *(void **)&v182[8 * v30];
          int v40 = v188;
        }
        id v186 = v44;
        uint64_t v45 = (char *)v44[5];
        unint64_t plan_for_entity = _sql_fetch_plan_for_entity(v40);
        uint64_t v47 = *(unsigned int *)(plan_for_entity + 4);
        v190 = v45;
        if (v47)
        {
          unint64_t v48 = (__int16 *)(v12 + 32);
          v185 = v45 + 28;
          unint64_t v49 = (id *)(plan_for_entity + 24);
          while (1)
          {
            int v50 = *((unsigned __int8 *)v49 - 4);
            if ((v50 - 2) > 6) {
              uint64_t v51 = 3;
            }
            else {
              uint64_t v51 = qword_18AE54480[(char)(v50 - 2)];
            }
            unint64_t v48 = (__int16 *)(((unint64_t)v48 + v51) & ~v51);
            if (*(unsigned char *)(v49 - 1))
            {
              int v53 = *(unsigned __int8 *)v48;
              unint64_t v48 = (__int16 *)((char *)v48 + 1);
              BOOL v52 = v53 != 0;
            }
            else
            {
              BOOL v52 = 0;
            }
            uint64_t v54 = (unsigned int *)(v49 - 2);
            uint64_t v55 = ~v51;
            switch(*((unsigned char *)v49 - 4))
            {
              case 1:
                uint64_t v78 = (__int16 *)(((unint64_t)v48 + v51) & v55);
                if (v52) {
                  int v79 = v48;
                }
                else {
                  int v79 = v78 + 2;
                }
                int v80 = *((unsigned __int8 *)v49 - 3);
                if (v80 == 10)
                {
                  if (v52) {
                    uint64_t v97 = 0;
                  }
                  else {
                    uint64_t v97 = *(unsigned int *)v78;
                  }
                  uint64_t v100 = *v54;
                  id v101 = v186;
                  long long v102 = v158;
                  long long v103 = &v191;
                  goto LABEL_140;
                }
                if (v80 == 4)
                {
                  if (v52) {
                    uint64_t v97 = 0;
                  }
                  else {
                    uint64_t v97 = *(unsigned int *)v78;
                  }
                  uint64_t v100 = *v54;
                  id v101 = v186;
                  long long v102 = v160;
                  long long v103 = &v192;
LABEL_140:
                  ((void (*)(id, char *, uint64_t, uint64_t))*(v103 - 32))(v101, v102, v100, v97);
LABEL_141:
                  unint64_t v48 = v79;
                  goto LABEL_154;
                }
                if (v80 != 1) {
                  goto LABEL_141;
                }
                uint64_t v67 = objc_msgSend((id)objc_msgSend(*v49, "propertyDescription"), "superCompositeAttribute");
                if (v52) {
                  goto LABEL_102;
                }
                unsigned int v14 = v189;
                if (v67)
                {
                  v107 = (void *)[NSNumber numberWithInt:*(unsigned int *)v78];
                  setMultiColumnValueDictionary(v190, v49 - 2, v107);
                }
                else
                {
                  uint64_t v114 = *v54;
                  Class Class = object_getClass(v190);
                  int v116 = *(char *)(*((void *)object_getIndexedIvars(Class) + 7) + v114);
                  if (v116 == 115)
                  {
                    snapshot_set_int16(v190, *v54, *v78);
                  }
                  else if (v116 == 99)
                  {
                    snapshot_set_int8(v190, *v54, *(unsigned char *)v78);
                  }
                  else
                  {
                    snapshot_set_int32(v190, *v54, *(_DWORD *)v78);
                  }
                }
                unint64_t v48 = v78 + 2;
                goto LABEL_155;
              case 2:
              case 3:
                CFDataRef v64 = (void *)(((unint64_t)v48 + v51) & v55);
                if (v52) {
                  uint64_t v65 = (unsigned __int8 *)v48;
                }
                else {
                  uint64_t v65 = (unsigned __int8 *)(v64 + 1);
                }
                int v66 = *((unsigned __int8 *)v49 - 3);
                switch(v66)
                {
                  case 6:
                    if (v52) {
                      uint64_t v89 = 0;
                    }
                    else {
                      uint64_t v89 = *v64;
                    }
                    unsigned int v14 = v189;
                    v168(v186, v169, v89);
                    goto LABEL_129;
                  case 3:
                    if (v52) {
                      uint64_t v88 = 0;
                    }
                    else {
                      uint64_t v88 = *v64;
                    }
                    unsigned int v14 = v189;
                    v170(v186, v171, *v54, v88);
LABEL_129:
                    unint64_t v48 = (__int16 *)v65;
                    goto LABEL_155;
                  case 1:
                    uint64_t v67 = objc_msgSend((id)objc_msgSend(*v49, "propertyDescription"), "superCompositeAttribute");
                    if (v52)
                    {
LABEL_102:
                      unsigned int v14 = v189;
                      if (v67) {
                        goto LABEL_94;
                      }
LABEL_103:
                      v185[(unint64_t)*v54 >> 3] |= 1 << (*v54 & 7);
                      goto LABEL_155;
                    }
                    uint64_t v68 = *v64;
                    if (v67)
                    {
                      double v69 = (void *)[NSNumber numberWithLongLong:v68];
                      setMultiColumnValueDictionary(v190, v49 - 2, v69);
                    }
                    else
                    {
                      snapshot_set_int64(v190, *v54, v68);
                    }
                    unint64_t v48 = (__int16 *)(v64 + 1);
                    break;
                  default:
                    unint64_t v48 = (__int16 *)v65;
                    break;
                }
LABEL_154:
                unsigned int v14 = v189;
                goto LABEL_155;
              case 4:
              case 5:
              case 6:
              case 9:
              case 0xC:
                if (v52) {
                  goto LABEL_93;
                }
                uint64_t v56 = (const char *)(((unint64_t)v48 + v51) & v55);
                uint64_t v57 = (int *)(v56 + 4);
                uint64_t v58 = (__CFString *)CFStringCreateWithCString(0, v56 + 4, 0x8000100u);
                uint64_t v59 = *(int *)v56;
                int v60 = *((unsigned __int8 *)v49 - 4);
                if (v60 == 12)
                {
                  CFDataRef v61 = (__CFString *)(id)[MEMORY[0x1E4F1CB10] URLWithString:v58];
                }
                else
                {
                  if (v60 != 4) {
                    goto LABEL_106;
                  }
                  CFDataRef v61 = (__CFString *)[objc_alloc(MEMORY[0x1E4F28C28]) initWithString:v58];
                }
                goto LABEL_105;
              case 7:
              case 8:
                if (v52) {
                  goto LABEL_93;
                }
                uint64_t v62 = (double *)(((unint64_t)v48 + v51) & v55);
                unint64_t v48 = (__int16 *)(v62 + 1);
                if (objc_msgSend((id)objc_msgSend(*v49, "propertyDescription"), "superCompositeAttribute"))
                {
                  int v63 = (void *)[NSNumber numberWithDouble:*v62];
                  setMultiColumnValueDictionary(v190, v49 - 2, v63);
                  goto LABEL_155;
                }
                uint64_t v90 = *((unsigned int *)v49 - 4);
                if (*((unsigned char *)v49 - 4) == 7)
                {
                  uint64_t v91 = v190;
                  Class v92 = object_getClass(v190);
                  IndexedIvars = object_getIndexedIvars(v92);
                  unsigned int v94 = *v54;
                  double v95 = *v62;
                  if (*(unsigned char *)(IndexedIvars[7] + v90) == 102)
                  {
                    float v96 = v95;
                    snapshot_set_float(v91, v94, v96);
                    goto LABEL_155;
                  }
                  long long v98 = v91;
                }
                else
                {
                  double v95 = *v62;
                  long long v98 = v190;
                  unsigned int v94 = *((_DWORD *)v49 - 4);
                }
                snapshot_set_double(v98, v94, v95);
                goto LABEL_155;
              case 0xD:
              case 0xE:
                goto LABEL_155;
              case 0x10:
                float v70 = (void *)[*v49 propertyDescription];
                if (v177 && ![v70 _isFileBackedFuture]) {
                  goto LABEL_92;
                }
                if (v52) {
                  goto LABEL_93;
                }
                uint64_t v71 = (int *)(((unint64_t)v48 + v51) & v55);
                uint64_t v73 = v71 + 1;
                int v72 = *((unsigned __int8 *)v71 + 4);
                if (v72 != 3)
                {
                  uint64_t v74 = v178;
                  if (v72 == 1)
                  {
                    uint64_t v75 = [_PFExternalReferenceData alloc];
                    if (v74) {
                      uint64_t v76 = *((unsigned int *)v74 + 46);
                    }
                    else {
                      uint64_t v76 = 0;
                    }
                    uint64_t v77 = [(_PFExternalReferenceData *)v75 initWithStoreBytes:v71 + 1 length:*v71 externalLocation:0 safeguardLocation:0 protectionLevel:v76];
LABEL_177:
                    BOOL v113 = (_PFExternalReferenceData *)v77;
                    goto LABEL_178;
                  }
                  size_t v104 = strnlen((const char *)v71 + 5, *v71 - 1);
                  long long v149 = (void **)[v163 stringWithFileSystemRepresentation:(char *)v71 + 5 length:v104];
                  uint64_t v105 = v152;
                  long long v151 = v71;
                  if (v152)
                  {
                    uint64_t v106 = v153;
                    if (!v74 || v153) {
                      goto LABEL_160;
                    }
LABEL_159:
                    uint64_t v106 = v74[12];
                  }
                  else
                  {
                    uint64_t v106 = v153;
                    if (v74)
                    {
                      uint64_t v105 = v74[11];
                      if (!v153) {
                        goto LABEL_159;
                      }
                    }
                    else
                    {
                      uint64_t v105 = 0;
                    }
                  }
LABEL_160:
                  long long v152 = v105;
                  uint64_t v108 = v149;
                  uint64_t v109 = [v105 stringByAppendingPathComponent:v149];
                  uint64_t v110 = [v106 stringByAppendingPathComponent:v108];
                  long long v153 = v106;
                  if (v156 && ![v163 fileExistsAtPath:v109])
                  {
                    BOOL v113 = 0;
                  }
                  else
                  {
                    uint64_t v111 = [_PFExternalReferenceData alloc];
                    if (v178) {
                      uint64_t v112 = *((unsigned int *)v178 + 46);
                    }
                    else {
                      uint64_t v112 = 0;
                    }
                    BOOL v113 = [(_PFExternalReferenceData *)v111 initWithStoreBytes:v73 length:*v151 externalLocation:v109 safeguardLocation:v110 protectionLevel:v112];
                    if (!v156)
                    {
LABEL_173:
                      uint64_t v71 = v151;
                      goto LABEL_178;
                    }
                  }
                  if ([v163 fileExistsAtPath:v109]) {
                    goto LABEL_173;
                  }
                  uint64_t v148 = v110;
                  uint64_t v122 = v178;
                  long long v149 = -[NSSQLFetchRequestContext ubiquitousExternalReferenceLocationForUUID:](v178, (uint64_t)v149);

                  uint64_t v123 = [_PFExternalReferenceData alloc];
                  if (v122) {
                    uint64_t v124 = *((unsigned int *)v122 + 46);
                  }
                  else {
                    uint64_t v124 = 0;
                  }
                  uint64_t v125 = v109;
                  uint64_t v71 = v151;
                  uint64_t v77 = [(_PFExternalReferenceData *)v123 initWithStoreBytes:v73 length:*v151 externalLocation:v125 safeguardLocation:v148 protectionLevel:v124 ubiquitousLocation:v149];
                  goto LABEL_177;
                }
                unsigned int v189 = v14;
                if (v178)
                {
                  long long v99 = v154;
                  if (!v154) {
                    long long v99 = v178[13];
                  }
                }
                else
                {
                  long long v99 = v154;
                }
                uint64_t v117 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v71 + 1 length:*v71];
                id v118 = v71;
                BOOL v119 = [_NSDataFileBackedFuture alloc];
                long long v154 = v99;
                uint64_t v120 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v99 isDirectory:1];
                uint64_t v121 = v119;
                uint64_t v71 = v118;
                BOOL v113 = [(_NSDataFileBackedFuture *)v121 initWithStoreMetadata:v117 directory:v120];
                unsigned int v14 = v189;
LABEL_178:
                unint64_t v48 = (__int16 *)((char *)v73 + *v71);
                if (objc_msgSend((id)objc_msgSend(*v49, "propertyDescription"), "superCompositeAttribute"))
                {
                  setMultiColumnValueDictionary(v190, v49 - 2, v113);
                }
                else
                {
                  unsigned int v82 = *v54;
                  id v83 = v190;
                  uint64_t v84 = (uint64_t)v113;
LABEL_109:
                  snapshot_set_object(v83, v82, v84);
                }
LABEL_155:
                v49 += 3;
                if (!--v47) {
                  goto LABEL_187;
                }
                break;
              default:
LABEL_92:
                if (v52)
                {
LABEL_93:
                  if (!objc_msgSend((id)objc_msgSend(*v49, "propertyDescription"), "superCompositeAttribute")) {
                    goto LABEL_103;
                  }
LABEL_94:
                  setMultiColumnValueNullFlag(v190, (_DWORD *)v49 - 4);
                  goto LABEL_155;
                }
                uint64_t v85 = (const UInt8 *)(((unint64_t)v48 + v51) & v55);
                uint64_t v57 = (int *)(v85 + 4);
                CFDataRef v86 = CFDataCreate(0, v85 + 4, *(int *)v85);
                uint64_t v58 = (__CFString *)v86;
                uint64_t v59 = *(int *)v85;
                int v87 = *((unsigned __int8 *)v49 - 4);
                if (v87 == 11)
                {
                  if ([(__CFData *)v86 length] == 16)
                  {
                    CFDataRef v61 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E4F29128]), "initWithUUIDBytes:", -[__CFString bytes](v58, "bytes"));
                    goto LABEL_105;
                  }

                  uint64_t v58 = 0;
                }
                else if (v87 == 15)
                {
                  CFDataRef v61 = (__CFString *)+[_PFRoutines retainedDecodeValue:forTransformableAttribute:]((uint64_t)_PFRoutines, (uint64_t)v86, (void *)[*v49 propertyDescription]);
LABEL_105:
                  uint64_t v81 = v61;
                  CFRelease(v58);
                  uint64_t v58 = v81;
                }
LABEL_106:
                unint64_t v48 = (__int16 *)((char *)v57 + v59);
                if (objc_msgSend((id)objc_msgSend(*v49, "propertyDescription"), "superCompositeAttribute"))
                {
                  setMultiColumnValueDictionary(v190, v49 - 2, v58);

                  goto LABEL_155;
                }
                unsigned int v82 = *v54;
                id v83 = v190;
                uint64_t v84 = (uint64_t)v58;
                goto LABEL_109;
            }
          }
        }
LABEL_187:
        uint64_t v9 = v172;
        if (v176)
        {
          unsigned int v11 = v173;
          CFIndex v7 = v174;
          uint64_t v24 = v183;
          uint64_t v3 = v178;
          uint64_t v126 = (atomic_uint *)v186;
          if (v173 == 2) {
            goto LABEL_205;
          }
          [v186 knownKeyValuesPointer];
          int v127 = v190;
          *(void *)&v182[8 * v30] = v127;
        }
        else
        {
          uint64_t v126 = (atomic_uint *)v186;
          [v186 knownKeyValuesPointer];
          -[NSPersistentStoreCache registerRow:forObjectID:options:](v165, (uint64_t)v126, v179, 0);
          CFIndex v7 = v174;
          uint64_t v24 = v183;
          unsigned int v11 = v173;
          uint64_t v3 = v178;
        }
        switch(v11)
        {
          case 0u:
          case 3u:
            id v128 = -[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:](v24, v179, (uint64_t)v167);
            uint64_t v38 = v128;
            if (v176) {
              goto LABEL_206;
            }
            int v29 = v184;
            if (!v128) {
              goto LABEL_196;
            }
            int v129 = *((_DWORD *)v128 + 4);
            if ((v129 & 0x200) != 0)
            {
              if (v126)
              {
                long long v130 = v126 + 3;
                if ((int)atomic_fetch_add(v126 + 3, 0) <= 0) {
                  goto LABEL_213;
                }
              }
            }
            else
            {
              *((_DWORD *)v128 + 4) = v129 | 0x200;
LABEL_196:
              if (v126)
              {
                long long v130 = v126 + 3;
LABEL_213:
                atomic_fetch_add_explicit(v130, 1u, memory_order_relaxed);
                break;
              }
            }
            break;
          case 1u:
            uint64_t v126 = (atomic_uint *)v179;
            _PFfastOidRetain(0, v179);
            goto LABEL_205;
          case 2u:
            goto LABEL_205;
          default:
            goto LABEL_203;
        }
LABEL_207:
        *((void *)v7 + v30) = v38;
        uint64_t v132 = *(unsigned int *)(v12 + 4);
        if ((v132 & 0x80000000) == 0)
        {
          uint64_t v133 = *(void *)(*v29 + 8 * v132);
          if (v133)
          {
            uint64_t v12 = v133 + *(void *)(v12 + 16);
            ++v30;
            int v31 = v188;
            if (v30 != v180) {
              continue;
            }
          }
        }
        break;
      }
    }
    uint64_t v28 = v164;
    if ((v14 & 2) == 0) {
      goto LABEL_215;
    }
LABEL_225:
    unsigned int v142 = v162;
    unsigned int v136 = v161;
    long long v138 = v182;
    goto LABEL_226;
  }
  BOOL v23 = v27 == +[NSSQLRow newBatchRowAllocation:v182 count:v27 forSQLEntity:*(void *)(v5 + 40) withOwnedObjectIDs:v181 andTimestamp:*(double *)(v166 + 8)];
  BOOL v25 = v26;
  uint64_t v24 = v183;
  if (v23) {
    goto LABEL_40;
  }
  PF_FREE_OBJECT_ARRAY(v7);
  CFIndex v7 = 0;
  uint64_t v28 = 0;
  BOOL v150 = 0;
LABEL_215:
  long long v134 = v155;
  char v135 = !v175;
  if (!v155) {
    char v135 = 1;
  }
  unsigned int v136 = v161;
  if (v135)
  {
    long long v138 = v182;
    if (v11 != 2 && v150)
    {
      uint64_t v139 = (int)v28;
      long long v140 = (void **)v182;
      do
      {
        long long v141 = *v140++;

        --v139;
      }
      while (v139);
    }
  }
  else
  {
    long long v137 = [_PFArray alloc];
    long long v138 = v182;
    *long long v134 = [(_PFArray *)v137 initWithObjects:v182 count:v28 andFlags:26 andContext:v183];
  }
  unsigned int v142 = v162;
LABEL_226:
  if (v136 >= 0x201) {
    NSZoneFree(0, v138);
  }
  if (v142 >= 0x201) {
    NSZoneFree(0, v181);
  }
  if (v11 > 3) {
    uint64_t v143 = 10;
  }
  else {
    uint64_t v143 = dword_18AE54470[v11];
  }
  long long v144 = [_PFArray alloc];
  return (uint64_t)[(_PFArray *)v144 initWithObjects:v7 count:v28 andFlags:v143 andContext:v183];
}

uint64_t _prepareResultsFromResultSet_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  long long v141 = a2;
  uint64_t v179 = *MEMORY[0x1E4F143B8];
  if (a3) {
    uint64_t v5 = *(void *)(a3 + 136);
  }
  else {
    uint64_t v5 = 0;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 4);
  uint64_t v153 = *(void *)(v5 + 56);
  if (v6 <= 0x40000000) {
    LODWORD(v7) = v6;
  }
  else {
    LODWORD(v7) = 0;
  }
  uint64_t v8 = PF_ALLOCATE_OBJECT_ARRAY((int)v7);
  if (v8) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v9 = *(unsigned int *)(v5 + 72);
  uint64_t v10 = (v9 >> 2) & 7;
  uint64_t v154 = a1;
  if (!a3)
  {
    uint64_t v133 = *(uint64_t **)(a1 + 64);
    unsigned int v173 = (void *)(a1 + 64);
    uint64_t v13 = *v133;
    uint64_t v14 = [*(id *)(v5 + 8) _disablePersistentStoreResultCaching];
    int v166 = v14;
    uint64_t v155 = 0;
    uint64_t v11 = 0;
LABEL_230:
    int v167 = 0;
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(a3 + 32);
  uint64_t v12 = *(uint64_t **)(a1 + 64);
  unsigned int v173 = (void *)(a1 + 64);
  uint64_t v13 = *v12;
  if (v10 == 3) {
    uint64_t v155 = *(void *)(a3 + 128);
  }
  else {
    uint64_t v155 = 0;
  }
  uint64_t v14 = [*(id *)(v5 + 8) _disablePersistentStoreResultCaching];
  int v166 = v14;
  if (!v11) {
    goto LABEL_230;
  }
  int v167 = *(unsigned char *)(v11 + 43) & 1;
LABEL_15:
  int v171 = *(_DWORD *)(v5 + 72);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v139 - v16;
  unsigned int v143 = v18;
  long long v174 = (void **)a3;
  if (v18 > 0x200)
  {
    uint64_t v19 = NSAllocateScannedUncollectable();
    uint64_t v17 = (char *)v19;
  }
  else
  {
    bzero((char *)&v139 - v16, 8 * v15);
  }
  MEMORY[0x1F4188790](v19);
  unsigned int v22 = (char *)&v139 - v21;
  unsigned int v144 = v23;
  if (v23 > 0x200) {
    unsigned int v22 = (char *)NSAllocateScannedUncollectable();
  }
  else {
    bzero((char *)&v139 - v21, 8 * v20);
  }
  v169 = v22;
  if (v17) {
    BOOL v24 = v22 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (v24)
  {
    PF_FREE_OBJECT_ARRAY(v8);
    uint64_t v8 = 0;
    uint64_t v160 = 0;
  }
  else
  {
    uint64_t v160 = v7;
  }
  BOOL v25 = v174 == 0;
  long long v151 = sel_setForeignEntityKeySlot_entityKey_;
  uint64_t v150 = +[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  uint64_t v159 = sel_setForeignKeySlot_int64_;
  long long v158 = (void (*)(atomic_uint *, char *, void, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  long long v149 = sel_setForeignOrderKeySlot_orderKey_;
  uint64_t v148 = +[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  uint64_t v157 = sel_setOptLock_;
  BOOL v156 = (void (*)(atomic_uint *, char *, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  if (v25)
  {
    id v152 = (id)[MEMORY[0x1E4F28CB8] defaultManager];
    Class v177 = 0;
    BOOL v147 = 0;
  }
  else
  {
    Class v177 = (Class)[v174[1] objectIDFactoryForSQLEntity:*(void *)(v5 + 40)];
    id v152 = (id)[MEMORY[0x1E4F28CB8] defaultManager];
    BOOL v147 = *((unsigned char *)v174 + 201) != 0;
  }
  uint64_t v163 = v11;
  uint64_t v164 = (v9 >> 2) & 7;
  unint64_t v162 = v9;
  uint64_t v165 = v17;
  if ((v171 & 1) == 0)
  {
    int v26 = [(objc_class *)v177 allocateBatch:v17 count:v160];
    if (v160 == v26) {
      uint64_t v27 = v160;
    }
    else {
      uint64_t v27 = 0;
    }
    if (v27) {
      BOOL v28 = (v9 & 2) == 0;
    }
    else {
      BOOL v28 = 0;
    }
    if (v28)
    {
      if (v27 != +[NSSQLRow newBatchRowAllocation:v169 count:v27 forSQLEntity:*(void *)(v5 + 40) withOwnedObjectIDs:v17 andTimestamp:*(double *)(v154 + 8)])
      {
LABEL_38:
        PF_FREE_OBJECT_ARRAY(v8);
        int v29 = 0;
        uint64_t v160 = 0;
        uint64_t v8 = 0;
        goto LABEL_224;
      }
    }
    else if (!v27)
    {
      goto LABEL_38;
    }
  }
  if ((int)v160 < 1)
  {
    int v29 = 0;
    goto LABEL_224;
  }
  uint64_t v178 = 0;
  long long v145 = 0;
  id v146 = 0;
  unsigned int v142 = 0;
  uint64_t v30 = 0;
  uint64_t v168 = v160;
  unsigned int v161 = v8;
  while (1)
  {
    if ((*(_DWORD *)v13 & 0x80000000) != 0)
    {
      uint64_t v32 = v173;
      int v31 = v174;
      do
      {
        uint64_t v33 = *(unsigned int *)(v13 + 4);
        if ((v33 & 0x80000000) != 0) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = *(void *)(*v173 + 8 * v33) + *(void *)(v13 + 16);
        }
      }
      while ((*(_DWORD *)v13 & 0x80000000) != 0);
    }
    else
    {
      uint64_t v32 = v173;
      int v31 = v174;
    }
    if (v31) {
      uint64_t v34 = (uint64_t)v31[14];
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t v35 = (void *)_sqlEntityForEntityID(v34, *(unsigned int *)(v13 + 8));
    unint64_t v36 = v177;
    if (v35 != v30) {
      unint64_t v36 = 0;
    }
    int v176 = v35;
    Class v177 = v36;
    if (v31 && v35 != v30) {
      Class v177 = (Class)[v31[1] objectIDFactoryForSQLEntity:v35];
    }
    if (v171)
    {
      uint64_t v42 = (void *)[[v177 alloc] initWithPK64:*(void *)(v13 + 24)];
      id v39 = v42;
      if ((v9 & 2) != 0) {
        goto LABEL_196;
      }
      int v170 = v42;
      double v43 = v176;
      unint64_t v44 = +[NSSQLRow allocForSQLEntity:]((uint64_t)NSSQLRow, v176);
      uint64_t v45 = (atomic_uint *)[v44 initWithSQLEntity:v43 ownedObjectID:v170 andTimestamp:*(double *)(v154 + 8)];
      *(void *)&v169[8 * v178] = v45;
    }
    else
    {
      unint64_t v37 = *(void *)&v17[8 * v178];
      unint64_t v38 = _PFSetPrimaryKey(v37, *(void *)(v13 + 24));
      id v39 = (id)v38;
      if (v37 == v38)
      {
        id v39 = (id)v37;
        if ((v9 & 2) != 0)
        {
LABEL_196:
          if ((v10 - 1) >= 2)
          {
            if (v10 && v10 != 3)
            {
LABEL_212:
              id v39 = 0;
            }
            else
            {
              id v117 = v39;
              id v118 = -[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:]((void **)v11, v39, v155);
              BOOL v119 = v117;
              id v120 = v118;

              id v39 = v120;
            }
          }
          goto LABEL_217;
        }
      }
      else
      {
        uint64_t v40 = v178;
        *(void *)&v17[8 * v178] = v38;
        if ((v9 & 2) != 0) {
          goto LABEL_196;
        }
        uint64_t v41 = (void *)v38;
        objc_msgSend(*(id *)&v169[8 * v40], "setObjectID:");
        id v39 = v41;
      }
      int v170 = v39;
      uint64_t v45 = *(atomic_uint **)&v169[8 * v178];
    }
    BOOL v175 = v45;
    uint64_t v46 = (char *)*((void *)v45 + 5);
    unint64_t plan_for_entity = _sql_fetch_plan_for_entity((unint64_t *)v176);
    uint64_t v48 = *(unsigned int *)(plan_for_entity + 4);
    if (v48)
    {
      unint64_t v49 = (char *)(v13 + 32);
      uint64_t v172 = v46 + 28;
      int v50 = (id *)(plan_for_entity + 24);
      while (2)
      {
        int v51 = *((unsigned __int8 *)v50 - 4);
        if ((v51 - 2) >= 7) {
          uint64_t v52 = 3;
        }
        else {
          uint64_t v52 = qword_18AE54B30[(char)(v51 - 2)];
        }
        unint64_t v49 = (char *)((unint64_t)&v49[v52] & ~v52);
        if (*(unsigned char *)(v50 - 1))
        {
          int v54 = *v49++;
          BOOL v53 = v54 != 0;
        }
        else
        {
          BOOL v53 = 0;
        }
        uint64_t v55 = (unsigned int *)(v50 - 2);
        uint64_t v56 = ~v52;
        switch(*((unsigned char *)v50 - 4))
        {
          case 1:
            double v69 = (char *)((unint64_t)&v49[v52] & v56);
            if (v53) {
              float v70 = v49;
            }
            else {
              float v70 = v69 + 4;
            }
            int v71 = *((unsigned __int8 *)v50 - 3);
            if (v71 == 10)
            {
              uint64_t v95 = *v55;
              if (!v53)
              {
                uint64_t v100 = v149;
                id v101 = &v180;
                goto LABEL_147;
              }
              float v96 = v149;
              uint64_t v97 = &v180;
            }
            else
            {
              if (v71 != 4)
              {
                if (v71 == 1)
                {
                  id v72 = *v50;
                  if (v53)
                  {
                    if (!objc_msgSend((id)objc_msgSend(v72, "propertyDescription"), "superCompositeAttribute")) {
                      goto LABEL_107;
                    }
                    goto LABEL_106;
                  }
                  if (objc_msgSend((id)objc_msgSend(v72, "propertyDescription"), "superCompositeAttribute"))
                  {
                    setMultiColumnValueDictionary_0(v46, v50 - 2, [NSNumber numberWithInt:*(unsigned int *)v69]);
                    unint64_t v49 = v69 + 4;
                  }
                  else
                  {
                    uint64_t v107 = *v55;
                    Class Class = object_getClass(v46);
                    int v109 = *(char *)(*((void *)object_getIndexedIvars(Class) + 7) + v107);
                    if (v109 == 99)
                    {
                      snapshot_set_int8(v46, *v55, *v69);
                      unint64_t v49 = v69 + 4;
                    }
                    else
                    {
                      if (v109 == 115) {
                        snapshot_set_int16(v46, *v55, *(_WORD *)v69);
                      }
                      else {
                        snapshot_set_int32(v46, *v55, *(_DWORD *)v69);
                      }
                      unint64_t v49 = v69 + 4;
                    }
                  }
                }
                else
                {
                  unint64_t v49 = v70;
                }
                goto LABEL_188;
              }
              uint64_t v95 = *v55;
              if (!v53)
              {
                uint64_t v100 = v151;
                id v101 = &v181;
LABEL_147:
                ((void (*)(atomic_uint *, char *, uint64_t, void))*(v101 - 32))(v175, v100, v95, *(unsigned int *)v69);
                goto LABEL_148;
              }
              float v96 = v151;
              uint64_t v97 = &v181;
            }
            ((void (*)(atomic_uint *, char *, uint64_t, void))*(v97 - 32))(v175, v96, v95, 0);
LABEL_148:
            unint64_t v49 = v70;
LABEL_188:
            v50 += 3;
            if (!--v48) {
              break;
            }
            continue;
          case 2:
          case 3:
            int v63 = (void *)((unint64_t)&v49[v52] & v56);
            if (v53) {
              CFDataRef v64 = v49;
            }
            else {
              CFDataRef v64 = (char *)(v63 + 1);
            }
            int v65 = *((unsigned __int8 *)v50 - 3);
            switch(v65)
            {
              case 6:
                if (v53) {
                  uint64_t v82 = 0;
                }
                else {
                  uint64_t v82 = *v63;
                }
                v156(v175, v157, v82);
                unint64_t v49 = v64;
                break;
              case 3:
                if (v53) {
                  uint64_t v81 = 0;
                }
                else {
                  uint64_t v81 = *v63;
                }
                v158(v175, v159, *v55, v81);
                unint64_t v49 = v64;
                break;
              case 1:
                id v66 = *v50;
                if (v53)
                {
                  if (!objc_msgSend((id)objc_msgSend(v66, "propertyDescription"), "superCompositeAttribute")) {
                    goto LABEL_107;
                  }
                  goto LABEL_106;
                }
                uint64_t v98 = objc_msgSend((id)objc_msgSend(v66, "propertyDescription"), "superCompositeAttribute");
                uint64_t v99 = *v63;
                if (v98) {
                  setMultiColumnValueDictionary_0(v46, v50 - 2, [NSNumber numberWithLongLong:v99]);
                }
                else {
                  snapshot_set_int64(v46, *v55, v99);
                }
                unint64_t v49 = (char *)(v63 + 1);
                break;
              default:
                unint64_t v49 = v64;
                break;
            }
            goto LABEL_188;
          case 4:
          case 5:
          case 6:
          case 9:
          case 0xC:
            if (v53) {
              goto LABEL_94;
            }
            uint64_t v57 = (const char *)((unint64_t)&v49[v52] & v56);
            uint64_t v58 = (int *)(v57 + 4);
            uint64_t v59 = (__CFString *)CFStringCreateWithCString(0, v57 + 4, 0x8000100u);
            uint64_t v60 = *(int *)v57;
            int v61 = *((unsigned __int8 *)v50 - 4);
            if (v61 == 12)
            {
              uint64_t v73 = (__CFString *)(id)[MEMORY[0x1E4F1CB10] URLWithString:v59];
              CFRelease(v59);
              uint64_t v59 = v73;
            }
            else if (v61 == 4)
            {
              uint64_t v62 = [objc_alloc(MEMORY[0x1E4F28C28]) initWithString:v59];
              CFRelease(v59);
              uint64_t v59 = (__CFString *)v62;
            }
            unint64_t v49 = (char *)v58 + v60;
            if (objc_msgSend((id)objc_msgSend(*v50, "propertyDescription"), "superCompositeAttribute"))
            {
              setMultiColumnValueDictionary_0(v46, v50 - 2, (uint64_t)v59);
            }
            else
            {
              snapshot_set_object(v46, *v55, (uint64_t)v59);
            }
            goto LABEL_188;
          case 7:
          case 8:
            if (v53) {
              goto LABEL_94;
            }
            uint64_t v68 = (double *)((unint64_t)&v49[v52] & v56);
            unint64_t v49 = (char *)(v68 + 1);
            if (objc_msgSend((id)objc_msgSend(*v50, "propertyDescription"), "superCompositeAttribute"))
            {
              setMultiColumnValueDictionary_0(v46, v50 - 2, [NSNumber numberWithDouble:*v68]);
            }
            else
            {
              uint64_t v89 = *((unsigned int *)v50 - 4);
              if (*((unsigned char *)v50 - 4) == 7)
              {
                Class v90 = object_getClass(v46);
                IndexedIvars = object_getIndexedIvars(v90);
                unsigned int v92 = *v55;
                double v93 = *v68;
                if (*(unsigned char *)(IndexedIvars[7] + v89) == 102)
                {
                  float v94 = v93;
                  snapshot_set_float(v46, v92, v94);
                }
                else
                {
                  snapshot_set_double(v46, v92, v93);
                }
              }
              else
              {
                snapshot_set_double(v46, *((_DWORD *)v50 - 4), *v68);
              }
            }
            goto LABEL_188;
          case 0xD:
          case 0xE:
            goto LABEL_188;
          case 0x10:
            uint64_t v67 = (void *)[*v50 propertyDescription];
            if (v167 && ([v67 _isFileBackedFuture] & 1) == 0) {
              goto LABEL_93;
            }
            if (v53)
            {
              if (!objc_msgSend((id)objc_msgSend(*v50, "propertyDescription"), "superCompositeAttribute")) {
                goto LABEL_107;
              }
              goto LABEL_106;
            }
            id v83 = (int *)((unint64_t)&v49[v52] & v56);
            uint64_t v85 = v83 + 1;
            int v84 = *((unsigned __int8 *)v83 + 4);
            if (v84 == 3)
            {
              if (v174 && !v145) {
                long long v145 = v174[13];
              }
              uint64_t v102 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v85 length:*v83];
              long long v103 = [_NSDataFileBackedFuture alloc];
              uint64_t v88 = -[_NSDataFileBackedFuture initWithStoreMetadata:directory:](v103, "initWithStoreMetadata:directory:", v102, [MEMORY[0x1E4F1CB10] fileURLWithPath:v145 isDirectory:1]);
              goto LABEL_184;
            }
            if (v84 == 1)
            {
              CFDataRef v86 = [_PFExternalReferenceData alloc];
              if (v174) {
                uint64_t v87 = *((unsigned int *)v174 + 46);
              }
              else {
                uint64_t v87 = 0;
              }
              uint64_t v88 = [(_PFExternalReferenceData *)v86 initWithStoreBytes:v85 length:*v83 externalLocation:0 safeguardLocation:0 protectionLevel:v87];
              goto LABEL_184;
            }
            size_t v104 = strnlen((const char *)v83 + 5, *v83 - 1);
            uint64_t v105 = [v152 stringWithFileSystemRepresentation:(char *)v83 + 5 length:v104];
            uint64_t v106 = v142;
            if (v142)
            {
              if (!v174)
              {
LABEL_173:
                unsigned int v142 = v106;
                uint64_t v110 = [v106 stringByAppendingPathComponent:v105];
                uint64_t v140 = [v146 stringByAppendingPathComponent:v105];
                if (v147 && ![v152 fileExistsAtPath:v110])
                {
                  BOOL v113 = 0;
                }
                else
                {
                  uint64_t v111 = [_PFExternalReferenceData alloc];
                  if (v174) {
                    uint64_t v112 = *((unsigned int *)v174 + 46);
                  }
                  else {
                    uint64_t v112 = 0;
                  }
                  BOOL v113 = [(_PFExternalReferenceData *)v111 initWithStoreBytes:v85 length:*v83 externalLocation:v110 safeguardLocation:v140 protectionLevel:v112];
                  if (!v147) {
                    goto LABEL_185;
                  }
                }
                if ([v152 fileExistsAtPath:v110])
                {
LABEL_185:
                  unint64_t v49 = (char *)v85 + *v83;
                  if (objc_msgSend((id)objc_msgSend(*v50, "propertyDescription"), "superCompositeAttribute"))
                  {
                    setMultiColumnValueDictionary_0(v46, v50 - 2, (uint64_t)v113);
                  }
                  else
                  {
                    snapshot_set_object(v46, *v55, (uint64_t)v113);
                  }
                  goto LABEL_188;
                }
                uint64_t v114 = -[NSSQLFetchRequestContext ubiquitousExternalReferenceLocationForUUID:](v174, v105);

                uint64_t v115 = [_PFExternalReferenceData alloc];
                if (v174) {
                  uint64_t v116 = *((unsigned int *)v174 + 46);
                }
                else {
                  uint64_t v116 = 0;
                }
                uint64_t v88 = [(_PFExternalReferenceData *)v115 initWithStoreBytes:v85 length:*v83 externalLocation:v110 safeguardLocation:v140 protectionLevel:v116 ubiquitousLocation:v114];
LABEL_184:
                BOOL v113 = (_PFExternalReferenceData *)v88;
                goto LABEL_185;
              }
            }
            else
            {
              if (!v174)
              {
                uint64_t v106 = 0;
                goto LABEL_173;
              }
              uint64_t v106 = v174[11];
            }
            if (!v146) {
              id v146 = v174[12];
            }
            goto LABEL_173;
          default:
LABEL_93:
            if (v53)
            {
LABEL_94:
              if (objc_msgSend((id)objc_msgSend(*v50, "propertyDescription"), "superCompositeAttribute")) {
LABEL_106:
              }
                setMultiColumnValueNullFlag(v46, (_DWORD *)v50 - 4);
              else {
LABEL_107:
              }
                v172[(unint64_t)*v55 >> 3] |= 1 << (*v55 & 7);
            }
            else
            {
              uint64_t v74 = (const UInt8 *)((unint64_t)&v49[v52] & v56);
              uint64_t v75 = (int *)(v74 + 4);
              CFDataRef v76 = CFDataCreate(0, v74 + 4, *(int *)v74);
              CFDataRef v77 = v76;
              uint64_t v78 = *(int *)v74;
              int v79 = *((unsigned __int8 *)v50 - 4);
              if (v79 == 11)
              {
                if ([(__CFData *)v76 length] == 16)
                {
                  id v80 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F29128]), "initWithUUIDBytes:", -[__CFData bytes](v77, "bytes"));
                  CFRelease(v77);
                }
                else
                {

                  id v80 = 0;
                }
              }
              else if (v79 == 15)
              {
                id v80 = +[_PFRoutines retainedDecodeValue:forTransformableAttribute:]((uint64_t)_PFRoutines, (uint64_t)v76, (void *)[*v50 propertyDescription]);
                CFRelease(v77);
              }
              else
              {
                id v80 = v76;
              }
              if (objc_msgSend((id)objc_msgSend(*v50, "propertyDescription"), "superCompositeAttribute")) {
                setMultiColumnValueDictionary_0(v46, v50 - 2, (uint64_t)v80);
              }
              else {
                snapshot_set_object(v46, *v55, (uint64_t)v80);
              }

              unint64_t v49 = (char *)v75 + v78;
            }
            goto LABEL_188;
        }
        break;
      }
    }
    if (v166)
    {
      uint64_t v11 = v163;
      uint64_t v10 = v164;
      uint64_t v8 = v161;
      LOBYTE(v9) = v162;
      uint64_t v17 = v165;
      uint64_t v32 = v173;
      if (v164 == 2)
      {
LABEL_211:
        id v39 = v175;
        goto LABEL_217;
      }
      [(atomic_uint *)v175 knownKeyValuesPointer];
      uint64_t v121 = v46;
      *(void *)&v169[8 * v178] = v121;
    }
    else
    {
      uint64_t v11 = v163;
      uint64_t v10 = v164;
      uint64_t v8 = v161;
      LOBYTE(v9) = v162;
      uint64_t v17 = v165;
      [(atomic_uint *)v175 knownKeyValuesPointer];
      uint64_t v32 = v173;
      -[NSPersistentStoreCache registerRow:forObjectID:options:](v153, (uint64_t)v175, v170, 0);
    }
    switch((int)v10)
    {
      case 0:
      case 3:
        id v122 = -[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:]((void **)v11, v170, v155);
        id v39 = v122;
        uint64_t v123 = v175;
        if (v166) {
          break;
        }
        if (!v122) {
          goto LABEL_209;
        }
        int v124 = *((_DWORD *)v122 + 4);
        if ((v124 & 0x200) != 0)
        {
          if (v175)
          {
            uint64_t v125 = v175 + 3;
            if ((int)atomic_fetch_add(v175 + 3, 0) <= 0) {
              goto LABEL_216;
            }
          }
        }
        else
        {
          *((_DWORD *)v122 + 4) = v124 | 0x200;
LABEL_209:
          if (v123)
          {
            uint64_t v125 = v123 + 3;
LABEL_216:
            atomic_fetch_add_explicit(v125, 1u, memory_order_relaxed);
            break;
          }
        }
        break;
      case 1:
        uint64_t v126 = v170;
        _PFfastOidRetain(0, v170);
        id v39 = v126;
        break;
      case 2:
        goto LABEL_211;
      default:
        goto LABEL_212;
    }
LABEL_217:
    *((void *)v8 + v178) = v39;
    uint64_t v127 = *(unsigned int *)(v13 + 4);
    if ((v127 & 0x80000000) != 0) {
      break;
    }
    uint64_t v128 = *(void *)(*v32 + 8 * v127);
    int v29 = 1;
    if (v128)
    {
      uint64_t v13 = v128 + *(void *)(v13 + 16);
      uint64_t v30 = v176;
      if (++v178 != v168) {
        continue;
      }
    }
    goto LABEL_224;
  }
  int v29 = 1;
LABEL_224:
  if ((v9 & 2) != 0) {
    goto LABEL_240;
  }
  if (v141 && v10 == 3)
  {
    int v129 = &OBJC_METACLASS____PFEncodedString;
    long long v130 = v169;
    long long v131 = [_PFArray alloc];
    uint64_t v132 = [(_PFArray *)v131 initWithObjects:v130 count:v160 andFlags:26 andContext:v11];
    *long long v141 = v132;
    goto LABEL_238;
  }
  if ((v9 & 2) != 0 || v10 == 2)
  {
    uint64_t v17 = v165;
LABEL_240:
    long long v130 = v169;
    int v129 = &OBJC_METACLASS____PFEncodedString;
    goto LABEL_241;
  }
  long long v130 = v169;
  int v129 = &OBJC_METACLASS____PFEncodedString;
  if (v29)
  {
    uint64_t v134 = (int)v160;
    char v135 = (id *)v169;
    uint64_t v17 = v165;
    do
    {

      --v134;
    }
    while (v134);
  }
  else
  {
LABEL_238:
    uint64_t v17 = v165;
  }
LABEL_241:
  if (v144 >= 0x201) {
    NSZoneFree(0, v130);
  }
  if (v143 >= 0x201) {
    NSZoneFree(0, v17);
  }
  if (v10 >= 4) {
    uint64_t v136 = 10;
  }
  else {
    uint64_t v136 = dword_18AE54470[v10];
  }
  id v137 = objc_alloc(&v129[31]);
  return [v137 initWithObjects:v8 count:v160 andFlags:v136 andContext:v11];
}

void sub_18AB8BC30(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AB8BAF4);
  }
  _Unwind_Resume(a1);
}

void sub_18AB8BC4C(_Unwind_Exception *a1)
{
}

void sub_18AB8BC70(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AB8BC7CLL);
}

void snapshot_set_object(char *a1, unsigned int a2, uint64_t a3)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (unsigned int *)object_getIndexedIvars(Class);
  a1[((unint64_t)a2 >> 3) + 28] &= ~(1 << (a2 & 7));
  uint64_t v8 = IndexedIvars[a2 + 19];
  unint64_t v9 = *(void **)&a1[v8];
  *(void *)&a1[v8] = a3;
  if (v9)
  {
  }
}

unsigned int *snapshot_set_int8(void *a1, unsigned int a2, char a3)
{
  Class Class = object_getClass(a1);
  uint64_t result = (unsigned int *)object_getIndexedIvars(Class);
  *((unsigned char *)a1 + ((unint64_t)a2 >> 3) + 28) &= ~(1 << (a2 & 7));
  *((unsigned char *)a1 + result[a2 + 19]) = a3;
  return result;
}

unsigned int *snapshot_set_int64(char *a1, unsigned int a2, uint64_t a3)
{
  Class Class = object_getClass(a1);
  uint64_t result = (unsigned int *)object_getIndexedIvars(Class);
  a1[((unint64_t)a2 >> 3) + 28] &= ~(1 << (a2 & 7));
  *(void *)&a1[result[a2 + 19]] = a3;
  return result;
}

unsigned int *snapshot_set_double(char *a1, unsigned int a2, double a3)
{
  Class Class = object_getClass(a1);
  uint64_t result = (unsigned int *)object_getIndexedIvars(Class);
  a1[((unint64_t)a2 >> 3) + 28] &= ~(1 << (a2 & 7));
  *(double *)&a1[result[a2 + 19]] = a3;
  return result;
}

const void *_sqlEntityForEntityID(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 64) >= a2) {
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), ~(unint64_t)*(unsigned int *)(a1 + 60) + a2);
  }
  else {
    return 0;
  }
}

unsigned int *snapshot_set_int16(char *a1, unsigned int a2, __int16 a3)
{
  Class Class = object_getClass(a1);
  uint64_t result = (unsigned int *)object_getIndexedIvars(Class);
  a1[((unint64_t)a2 >> 3) + 28] &= ~(1 << (a2 & 7));
  *(_WORD *)&a1[result[a2 + 19]] = a3;
  return result;
}

id _PFfastOidRetain(int a1, id a2)
{
  if (((unint64_t)a2 & 0x8000000000000000) == 0)
  {
    Class Class = object_getClass(a2);
    if (*((unsigned char *)object_getIndexedIvars(Class) + 4))
    {
      while (1)
      {
        while (1)
        {
          uint64_t v5 = *((void *)a2 + 1);
          if ((v5 & 0x8000) != 0) {
            break;
          }
          uint64_t v6 = *((void *)a2 + 1);
          atomic_compare_exchange_strong((atomic_ullong *volatile)a2 + 1, (unint64_t *)&v6, v5 + 1);
          if (v6 == v5) {
            return a2;
          }
        }
        unint64_t v7 = v5 | 0x8000;
        uint64_t v8 = *((void *)a2 + 1);
        os_unfair_lock_lock_with_options();
        uint64_t v9 = v8;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)a2 + 1, (unint64_t *)&v9, v7, memory_order_relaxed, memory_order_relaxed);
        if (v9 == v8) {
          break;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)&_extraRetainsLock);
      }
      NSIncrementExtraRefCount(a2);
      os_unfair_lock_unlock((os_unfair_lock_t)&_extraRetainsLock);
    }
    else
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)a2 + 2, 1u, memory_order_relaxed);
    }
  }
  return a2;
}

void _PFCMT_SetValue(uint64_t a1, void *a2, const void *a3)
{
  if (a2)
  {
    if ([a2 isTemporaryID])
    {
      unint64_t v7 = (__CFDictionary **)(a1 + 16);
      uint64_t v6 = *(__CFDictionary **)(a1 + 16);
      if (v6)
      {
LABEL_31:
        CFDictionarySetValue(v6, a2, a3);
        return;
      }
      memset(&keyCallBacks, 0, 24);
      *(_OWORD *)&keyCallBacks.copyDescription = *(_OWORD *)(MEMORY[0x1E4F1D530] + 24);
      keyCallBacks.hash = *(CFDictionaryHashCallBack *)(MEMORY[0x1E4F1D530] + 40);
      memset(&v20, 0, sizeof(v20));
      v20.copyDescription = *(CFDictionaryCopyDescriptionCallBack *)(MEMORY[0x1E4F1D540] + 24);
      int v8 = *(_DWORD *)(a1 + 48) & 3;
      if (v8 != 1)
      {
        *(_OWORD *)&v20.retain = *(_OWORD *)(MEMORY[0x1E4F1D540] + 8);
        if (v8 == 3) {
          *(_OWORD *)&keyCallBacks.retain = *(_OWORD *)(MEMORY[0x1E4F1D530] + 8);
        }
      }
      *unint64_t v7 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &keyCallBacks, &v20);
      _CFDictionarySetCapacity();
    }
    else
    {
      int v9 = _PFModelMapSlotForEntity(*(void *)(a1 + 56), (void *)[a2 entity]);
      LODWORD(v10) = v9;
      if (v9 < 0)
      {
        uint64_t v10 = v9 & 0x7FFFFFFF;
        uint64_t v16 = *(void **)(a1 + 24);
        if (!v16)
        {
          uint64_t v17 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
          if (!_PF_Private_Malloc_Zone) {
            uint64_t v17 = malloc_default_zone();
          }
          uint64_t v16 = malloc_type_zone_calloc(v17, 1uLL, 8 * *(void *)(a1 + 8), 0x80040B8603338uLL);
          *(void *)(a1 + 24) = v16;
        }
        uint64_t v6 = (__CFDictionary *)v16[v10];
        if (v6) {
          goto LABEL_31;
        }
        unsigned int v18 = 0;
        memset(&keyCallBacks, 0, 24);
        *(_OWORD *)&keyCallBacks.copyDescription = *(_OWORD *)(MEMORY[0x1E4F1D530] + 24);
        keyCallBacks.hash = *(CFDictionaryHashCallBack *)(MEMORY[0x1E4F1D530] + 40);
        memset(&v20, 0, sizeof(v20));
        v20.copyDescription = *(CFDictionaryCopyDescriptionCallBack *)(MEMORY[0x1E4F1D540] + 24);
        int v19 = *(_DWORD *)(a1 + 48) & 3;
        if (v19 != 1)
        {
          *(_OWORD *)&v20.retain = *(_OWORD *)(MEMORY[0x1E4F1D540] + 8);
          if (v19 == 3) {
            *(_OWORD *)&keyCallBacks.retain = *(_OWORD *)(MEMORY[0x1E4F1D530] + 8);
          }
          unsigned int v18 = &v20;
        }
        *(void *)(*(void *)(a1 + 24) + 8 * v10) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &keyCallBacks, v18);
        _CFDictionarySetCapacity();
        uint64_t v15 = *(void *)(a1 + 24);
      }
      else
      {
        uint64_t v11 = *(void **)(a1 + 32);
        if (!v11)
        {
          uint64_t v12 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
          if (!_PF_Private_Malloc_Zone) {
            uint64_t v12 = malloc_default_zone();
          }
          uint64_t v11 = malloc_type_zone_calloc(v12, 1uLL, 8 * *(void *)(a1 + 8), 0x80040B8603338uLL);
          *(void *)(a1 + 32) = v11;
        }
        uint64_t v6 = (__CFDictionary *)v11[v10];
        if (v6) {
          goto LABEL_31;
        }
        uint64_t v13 = 0;
        uint64_t v10 = v10;
        memset(&keyCallBacks, 0, 24);
        keyCallBacks.copyDescription = *(CFDictionaryCopyDescriptionCallBack *)(MEMORY[0x1E4F1D530] + 24);
        keyCallBacks.equal = (CFDictionaryEqualCallBack)_PFObjectIDFastEquals64;
        keyCallBacks.hash = (CFDictionaryHashCallBack)_PFObjectIDFastHash64;
        memset(&v20, 0, sizeof(v20));
        v20.copyDescription = *(CFDictionaryCopyDescriptionCallBack *)(MEMORY[0x1E4F1D540] + 24);
        int v14 = *(_DWORD *)(a1 + 48) & 3;
        if (v14 != 1)
        {
          *(_OWORD *)&v20.retain = *(_OWORD *)(MEMORY[0x1E4F1D540] + 8);
          if (v14 == 3) {
            *(_OWORD *)&keyCallBacks.retain = *(_OWORD *)(MEMORY[0x1E4F1D530] + 8);
          }
          uint64_t v13 = &v20;
        }
        *(void *)(*(void *)(a1 + 32) + 8 * v10) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &keyCallBacks, v13);
        _CFDictionarySetCapacity();
        uint64_t v15 = *(void *)(a1 + 32);
      }
      unint64_t v7 = (__CFDictionary **)(v15 + 8 * v10);
    }
    uint64_t v6 = *v7;
    goto LABEL_31;
  }
}

const void *_PFCMT_GetValue(void *a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  if ([a2 isTemporaryID])
  {
    CFDictionaryRef v4 = (const __CFDictionary *)a1[2];
    if (!v4) {
      return 0;
    }
  }
  else
  {
    unsigned int v5 = _PFModelMapSlotForEntity(a1[7], (void *)[a2 entity]);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v7 = a1[3];
      if (!v7) {
        return 0;
      }
      CFDictionaryRef v4 = *(const __CFDictionary **)(v7 + 8 * (v5 & 0x7FFFFFFF));
      if (!v4) {
        return 0;
      }
    }
    else
    {
      uint64_t v6 = a1[4];
      if (!v6) {
        return 0;
      }
      CFDictionaryRef v4 = *(const __CFDictionary **)(v6 + 8 * v5);
      if (!v4) {
        return 0;
      }
    }
  }

  return CFDictionaryGetValue(v4, a2);
}

id _PFEntityForManagedObject(id result)
{
  if (result)
  {
    unint64_t v1 = result;
    unsigned int v2 = (void *)*((void *)result + 5);
    if (!v2 || (uint64_t result = (id)[v2 entity]) == 0)
    {
      Class Class = object_getClass(v1);
      return _PFEntityForClass(Class);
    }
  }
  return result;
}

uint64_t _sqlCoreLookupSQLEntityForEntityDescription(void *a1, void *a2)
{
  uint64_t v2 = 0;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      uint64_t v2 = _sqlEntityForEntityDescription([a1 model], a2);
      if (!v2)
      {
        id v5 = (id)[a1 ancillarySQLModels];
        long long v12 = 0u;
        long long v13 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v6)
        {
          uint64_t v7 = v6;
          uint64_t v8 = *(void *)v13;
          while (2)
          {
            for (uint64_t i = 0; i != v7; ++i)
            {
              if (*(void *)v13 != v8) {
                objc_enumerationMutation(v5);
              }
              uint64_t v10 = _sqlEntityForEntityDescription([v5 objectForKey:*(void *)(*((void *)&v12 + 1) + 8 * i)], a2);
              if (v10)
              {
                uint64_t v2 = v10;
                goto LABEL_14;
              }
            }
            uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
            if (v7) {
              continue;
            }
            break;
          }
        }
        uint64_t v2 = 0;
LABEL_14:
      }
    }
  }
  return v2;
}

uint64_t _sqlEntityForEntityDescription(uint64_t a1, void *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v5 = objc_msgSend((id)objc_msgSend(a2, "managedObjectModel"), "_modelsReferenceIDOffset");
    if (v5 == *(_DWORD *)(a1 + 60) && (unint64_t v6 = a2[20], (unint64_t)*(unsigned int *)(a1 + 64) - v5 >= v6)) {
      return *(void *)(*(void *)(a1 + 40) + 8 * v6);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t _PFModelMapSlotForEntity(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_msgSend((id)objc_msgSend(a2, "managedObjectModel"), "_modelsReferenceIDOffset");
  if (a2)
  {
    uint64_t result = a2[20];
    if (a1) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t result = 0;
    if (a1) {
      goto LABEL_4;
    }
  }
  if (v4)
  {
    uint64_t v10 = [NSString stringWithUTF8String:"Model map is unexpectedly nil"];
    _NSCoreDataLog(17, v10, v11, v12, v13, v14, v15, v16, v26);
    uint64_t v17 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_18AB82000, v17, OS_LOG_TYPE_FAULT, "CoreData: Model map is unexpectedly nil", buf, 2u);
    }
    unsigned int v18 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v19 = *MEMORY[0x1E4F1C3B8];
    CFDictionaryValueCallBacks v20 = @"Model map is nil";
LABEL_23:
    objc_exception_throw((id)[v18 exceptionWithName:v19 reason:v20 userInfo:0]);
  }
LABEL_4:
  if (v4 > 16049)
  {
    switch(v4)
    {
      case 16050:
        uint64_t v9 = 0;
        unint64_t v6 = *(void **)(a1 + 64);
LABEL_15:
        uint64_t v8 = v9 + 1;
        result += v6[v9];
        goto LABEL_16;
      case 17000:
        uint64_t v7 = 0;
        unint64_t v6 = *(void **)(a1 + 64);
        goto LABEL_14;
      case 18000:
        unint64_t v6 = *(void **)(a1 + 64);
        result += *v6;
        uint64_t v7 = 1;
LABEL_14:
        uint64_t v9 = v7 + 1;
        result += v6[v7];
        goto LABEL_15;
    }
    goto LABEL_24;
  }
  if (!v4) {
    return result;
  }
  if (v4 != 16000)
  {
LABEL_24:
    uint64_t v21 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v22 = *MEMORY[0x1E4F1C3B8];
    unsigned int v23 = NSString;
    uint64_t v24 = v4;
    BOOL v25 = (objc_class *)objc_opt_class();
    CFDictionaryValueCallBacks v20 = (__CFString *)[v23 stringWithFormat:@"Managed object model with offset %lu is not known to %@", v24, NSStringFromClass(v25)];
    unsigned int v18 = v21;
    uint64_t v19 = v22;
    goto LABEL_23;
  }
  uint64_t v8 = 0;
  unint64_t v6 = *(void **)(a1 + 64);
LABEL_16:
  result += v6[v8];
  return result;
}

unint64_t _PFFastEntityClass(unint64_t result)
{
  v38[3] = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  unint64_t v1 = (atomic_ullong *)result;
  if (atomic_load((unint64_t *)(result + 56))) {
    return atomic_load((unint64_t *)(result + 56));
  }
  Class v3 = (Class)objc_opt_class();
  uint64_t v4 = (NSString *)[(atomic_ullong *)v1 managedObjectClassName];
  Class v5 = NSClassFromString(v4);
  if (!v5)
  {
    if (([@"NSManagedObject" isEqualToString:v4] & 1) == 0) {
      PFUseToolchainBehaviors();
    }
    goto LABEL_13;
  }
  unint64_t v6 = v5;
  if (v5 != v3 && ([(objc_class *)v5 isSubclassOfClass:v3] & 1) == 0)
  {
    uint64_t v13 = [(atomic_ullong *)v1 name];
    if (v13) {
      uint64_t v14 = (__CFString *)v13;
    }
    else {
      uint64_t v14 = @"<nil entity>";
    }
    ImageName = class_getImageName(v6);
    if (ImageName) {
      uint64_t v16 = ImageName;
    }
    else {
      uint64_t v16 = "<unknown library>";
    }
    Name = class_getName(v6);
    if (Name) {
      unsigned int v18 = Name;
    }
    else {
      unsigned int v18 = "<unknown class>";
    }
    uint64_t v19 = class_getName(v6);
    unint64_t v36 = v16;
    _NSCoreDataLog(1, @"Class '%s' for entity '%@' is not a subclass of NSManagedObject.  It was loaded from '%s'", v20, v21, v22, v23, v24, v25, (uint64_t)v19);
    v38[0] = v14;
    v37[0] = @"entityName";
    v37[1] = @"className";
    v38[1] = [NSString stringWithUTF8String:v18];
    v37[2] = @"sourceLibrary";
    v38[2] = [NSString stringWithUTF8String:v16];
    uint64_t v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v38 forKeys:v37 count:3];
    uint64_t v27 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v28 = *MEMORY[0x1E4F1C3B8];
    uint64_t v29 = [NSString stringWithFormat:@"\"%@\" is not a subclass of NSManagedObject.", -[atomic_ullong managedObjectClassName](v1, "managedObjectClassName"), v14, v36];
    uint64_t v30 = v27;
    uint64_t v31 = v28;
    uint64_t v32 = v26;
    goto LABEL_34;
  }
  if ((_BYTE)z9dsptsiQ80etb9782fsrs98bfdle88)
  {
    uint64_t v7 = [(objc_class *)v6 instanceMethodForSelector:sel_isEqual_];
    if (v7 == +[NSManagedObject instanceMethodForSelector:sel_isEqual_])
    {
      uint64_t v8 = [(objc_class *)v6 instanceMethodForSelector:sel_hash];
      if (v8 == +[NSManagedObject instanceMethodForSelector:sel_hash])goto LABEL_10; {
      uint64_t v33 = (void *)MEMORY[0x1E4F1CA00];
      }
      uint64_t v34 = *MEMORY[0x1E4F1C3B8];
      uint64_t v35 = [NSString stringWithFormat:@"Class '%s' for entity '%@' has an illegal override of NSManagedObject -hash", class_getName(v6), -[atomic_ullong name](v1, "name")];
    }
    else
    {
      uint64_t v33 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v34 = *MEMORY[0x1E4F1C3B8];
      uint64_t v35 = [NSString stringWithFormat:@"Class '%s' for entity '%@' has an illegal override of NSManagedObject -isEqual:", class_getName(v6), -[atomic_ullong name](v1, "name")];
    }
    uint64_t v29 = v35;
    uint64_t v30 = v33;
    uint64_t v31 = v34;
    uint64_t v32 = 0;
LABEL_34:
    objc_exception_throw((id)[v30 exceptionWithName:v31 reason:v29 userInfo:v32]);
  }
LABEL_10:
  Class v3 = v6;
LABEL_13:
  if ([(objc_class *)v3 _isGeneratedClass])
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = (objc_class *)[(objc_class *)v3 classForEntity:v1];
    Class v3 = v9;
  }
  uint64_t v10 = 0;
  uint64_t v11 = v1 + 7;
  atomic_compare_exchange_strong(v11, (unint64_t *)&v10, (unint64_t)v3);
  if (v10)
  {
    unint64_t v12 = atomic_load((unint64_t *)v11);
    if (v9 != (objc_class *)v12) {
      [(objc_class *)v9 _entityDeallocated];
    }
  }
  return atomic_load((unint64_t *)v11);
}

void *_PFAllocateObject(Class cls, uint64_t a2)
{
  uint64_t v4 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v4 = malloc_default_zone();
  }
  size_t InstanceSize = class_getInstanceSize(cls);
  unint64_t v6 = malloc_type_zone_calloc(v4, 1uLL, ((InstanceSize + 7) & 0xFFFFFFFFFFFFFFF8) + a2, 0xE6E82253uLL);
  uint64_t v7 = v6;
  if (*MEMORY[0x1E4F1CBC0])
  {
    class_getName(cls);
    __CFSetLastAllocationEventName();
    if (!v7) {
      return v7;
    }
    goto LABEL_5;
  }
  if (v6) {
LABEL_5:
  }
    objc_constructInstance(cls, v7);
  return v7;
}

uint64_t __generateReturnPointerMethod_block_invoke(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t __generateReturnPointerMethod_block_invoke_0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unsigned int *snapshot_set_float(char *a1, unsigned int a2, float a3)
{
  Class Class = object_getClass(a1);
  uint64_t result = (unsigned int *)object_getIndexedIvars(Class);
  a1[((unint64_t)a2 >> 3) + 28] &= ~(1 << (a2 & 7));
  *(float *)&a1[result[a2 + 19]] = a3;
  return result;
}

unsigned int *snapshot_set_int32(char *a1, unsigned int a2, int a3)
{
  Class Class = object_getClass(a1);
  uint64_t result = (unsigned int *)object_getIndexedIvars(Class);
  a1[((unint64_t)a2 >> 3) + 28] &= ~(1 << (a2 & 7));
  *(_DWORD *)&a1[result[a2 + 19]] = a3;
  return result;
}

void *_PFFastTemporaryIDCreation(void *a1)
{
  uint64_t v2 = _PFAllocateObject((Class)_NSTemporaryObjectID_Default_Class, 0);
  if (v2)
  {
    v2[2] = a1;
    *((_DWORD *)v2 + 3) = atomic_fetch_add_explicit(&_CoreDataProcessInstanceTempIDCounter, 1u, memory_order_relaxed)
                        + 1;
  }
  return v2;
}

void *stack_allocate(size_t size, uint64_t a2, void *a3)
{
  if (size - 1 > 0x7FFFFE
    || (result = (void *)a3[1], size_t v6 = ((unint64_t)result + size + 15) & 0xFFFFFFFFFFFFFFF0, v6 >= a3[2]))
  {
    uint64_t v7 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      uint64_t v7 = malloc_default_zone();
    }
    uint64_t result = malloc_type_zone_malloc(v7, size, 0x4B9079E1uLL);
    if (result) {
      ++a3[3];
    }
  }
  else
  {
    a3[1] = v6;
  }
  return result;
}

uint64_t _PFObjectIDFastEquals64(unint64_t a1, unint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = 0;
  if ((a1 & 0x8000000000000000) == 0 && (a2 & 0x8000000000000000) == 0)
  {
    Class Class = object_getClass((id)a1);
    if (Class == (Class)objc_opt_class())
    {
      Class v6 = object_getClass((id)a1);
      if ((*((unsigned char *)object_getIndexedIvars(v6) + 4) & 2) != 0)
      {
        Class v7 = object_getClass((id)a1);
        if (*((unsigned char *)object_getIndexedIvars(v7) + 4)) {
          uint64_t v8 = *(void *)(a1 + 8) >> 16;
        }
        else {
          uint64_t v8 = *(void *)(a1 + 16);
        }
        Class v9 = object_getClass((id)a2);
        if (*((unsigned char *)object_getIndexedIvars(v9) + 4)) {
          uint64_t v10 = *(void *)(a2 + 8) >> 16;
        }
        else {
          uint64_t v10 = *(void *)(a2 + 16);
        }
        return v8 == v10;
      }
      else
      {
        return [*(id *)(a1 + 16) isEqual:*(void *)(a2 + 16)];
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void _pvfk_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _PFfastRowRelease(int a1, atomic_uint *obj)
{
  if ((int)atomic_fetch_add_explicit(obj + 2, 0xFFFFFFFF, memory_order_relaxed) <= 0)
  {
    atomic_fetch_add_explicit(obj + 2, 0x20000000u, memory_order_relaxed);
    _NSQLRow_dealloc_standard((id *)obj);
  }
}

CFComparisonResult _NSCoreDataCollateFinderlikeBridge(uint64_t a1, int a2, const UniChar *a3, int a4, const UniChar *a5)
{
  return _NSCoreDataDoStringCompare(a2, a3, a4, a5, 0x361uLL);
}

void _pvfk_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_42(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18AB8F448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

uint64_t _comparePropertiesByName(void *a1, void *a2)
{
  Class v3 = (void *)[a1 name];
  uint64_t v4 = [a2 name];

  return [v3 compare:v4];
}

void sub_18AB91A0C(void *a1)
{
}

void sub_18AB91A24(_Unwind_Exception *a1)
{
}

void _pvfk_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

Class override_instace_class(void *a1)
{
  Class Class = object_getClass(a1);

  return class_getSuperclass(Class);
}

Class override_instace_class_0(void *a1)
{
  Class Class = object_getClass(a1);

  return class_getSuperclass(Class);
}

void _pvfk_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_43(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_21(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
}

void __Block_byref_object_dispose__28(uint64_t a1)
{
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
}

void __Block_byref_object_dispose__33(uint64_t a1)
{
}

void __Block_byref_object_dispose__34(uint64_t a1)
{
}

void __Block_byref_object_dispose__35(uint64_t a1)
{
}

void __Block_byref_object_dispose__36(uint64_t a1)
{
}

void __Block_byref_object_dispose__37(uint64_t a1)
{
}

void __Block_byref_object_dispose__38(uint64_t a1)
{
}

void __Block_byref_object_dispose__39(uint64_t a1)
{
}

void __Block_byref_object_dispose__40(uint64_t a1)
{
}

void __Block_byref_object_dispose__41(uint64_t a1)
{
}

void __Block_byref_object_dispose__42(uint64_t a1)
{
}

void __Block_byref_object_dispose__43(uint64_t a1)
{
}

void __Block_byref_object_dispose__44(uint64_t a1)
{
}

void __Block_byref_object_dispose__45(uint64_t a1)
{
}

void __Block_byref_object_dispose__46(uint64_t a1)
{
}

void __Block_byref_object_dispose__47(uint64_t a1)
{
}

void __Block_byref_object_dispose__48(uint64_t a1)
{
}

void __Block_byref_object_dispose__49(uint64_t a1)
{
}

void __Block_byref_object_dispose__50(uint64_t a1)
{
}

void __Block_byref_object_dispose__51(uint64_t a1)
{
}

void __Block_byref_object_dispose__52(uint64_t a1)
{
}

void __Block_byref_object_dispose__53(uint64_t a1)
{
}

void __Block_byref_object_dispose__54(uint64_t a1)
{
}

void __Block_byref_object_dispose__55(uint64_t a1)
{
}

void __Block_byref_object_dispose__56(uint64_t a1)
{
}

void __Block_byref_object_dispose__57(uint64_t a1)
{
}

void __Block_byref_object_dispose__58(uint64_t a1)
{
}

void __Block_byref_object_dispose__59(uint64_t a1)
{
}

void __Block_byref_object_dispose__60(uint64_t a1)
{
}

void __Block_byref_object_dispose__61(uint64_t a1)
{
}

void __Block_byref_object_dispose__62(uint64_t a1)
{
}

void __Block_byref_object_dispose__63(uint64_t a1)
{
}

void __Block_byref_object_dispose__64(uint64_t a1)
{
}

void __Block_byref_object_dispose__65(uint64_t a1)
{
}

void __Block_byref_object_dispose__66(uint64_t a1)
{
}

void __Block_byref_object_dispose__67(uint64_t a1)
{
}

void __Block_byref_object_dispose__68(uint64_t a1)
{
}

void __Block_byref_object_dispose__69(uint64_t a1)
{
}

void __Block_byref_object_dispose__70(uint64_t a1)
{
}

void _pvfk_20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_36(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

id _executeNewRowValuesForObjectFaultRequest(void *a1)
{
  unint64_t v1 = a1;
  if (a1)
  {
    uint64_t v2 = (const void *)a1[11];
    a1 = (void *)a1[4];
  }
  else
  {
    uint64_t v2 = 0;
  }
  [a1 stalenessInterval];
  double v4 = v3;
  if (v3 <= 0.0) {
    double v5 = *(double *)&NSSQLDistantPastTimeInterval;
  }
  else {
    double v5 = CFAbsoluteTimeGetCurrent() - v3;
  }
  if (v4 == 0.0) {
    double v6 = *(double *)&NSSQLDistantFutureTimeInterval;
  }
  else {
    double v6 = v5;
  }
  id v20 = -[NSPersistentStoreCache rowForObjectID:afterTimestamp:]((os_unfair_lock_s *)objc_msgSend(v1, "rowCache", v5), v2, v6);
  if (!v20) {
    id v20 = _executeObjectFaultRequest((uint64_t)v1);
  }
  if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)v1) < 3)
  {
    if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)v1) >= 1) {
      _NSCoreDataLog(4, @"fault fulfilled from database for : %@", v13, v14, v15, v16, v17, v18, (uint64_t)v2);
    }
  }
  else
  {
    _NSCoreDataLog(4, @"fault fulfilled from database for : %@ with row values: %@", v7, v8, v9, v10, v11, v12, (uint64_t)v2);
  }

  return v20;
}

void sub_18AB9334C(_Unwind_Exception *a1)
{
}

void sub_18AB93378(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AB932E4);
  }
  JUMPOUT(0x18AB9336CLL);
}

void sub_18AB942B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AB94280);
  }
  _Unwind_Resume(a1);
}

void sub_18AB942D0(_Unwind_Exception *a1)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_18AB942E8(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AB942F4);
}

_PFFetchPlanHeader *fetchPlanAllocateInitialize(NSFetchRequest *a1, NSPersistentStore *a2, NSManagedObjectContext *a3)
{
  double v6 = objc_alloc_init(_PFFetchPlanHeader);
  v6->fetch_request = a1;
  v6->requested_batch_size = [(NSFetchRequest *)a1 fetchLimit];
  v6->sql_core = a2;
  uint64_t v7 = (NSSQLEntity *)_sqlCoreLookupSQLEntityForEntityDescription(a2, (void *)[(NSFetchRequest *)a1 entity]);
  v6->statement_entity = v7;
  v6->sql_model = (NSSQLModel *)[(NSSQLEntity *)v7 model];
  v6->current_context = a3;
  uint64_t v8 = objc_opt_class();
  if (v8 == objc_opt_class())
  {
    if (a2) {
      uint64_t v9 = (NSSQLRowCache *)-[NSSQLCore rowCacheForGeneration:](a2, (void *)[(NSManagedObjectContext *)a3 _queryGenerationToken]);
    }
    else {
      uint64_t v9 = 0;
    }
    v6->row_cache = v9;
  }
  v6->entity_for_ek_funptr = (void *)[(NSSQLModel *)v6->sql_model methodForSelector:sel_entityForID_];
  int v10 = [(NSFetchRequest *)a1 includesPropertyValues];
  uint64_t v11 = [(NSFetchRequest *)a1 resultType];
  uint64_t v12 = [(NSFetchRequest *)a1 resultType];
  if ([(NSFetchRequest *)a1 returnsObjectsAsFaults]) {
    BOOL v13 = [(NSArray *)[(NSFetchRequest *)a1 relationshipKeyPathsForPrefetching] count] != 0;
  }
  else {
    BOOL v13 = 1;
  }
  if ([(NSFetchRequest *)a1 resultType])
  {
    BOOL v14 = 1;
  }
  else
  {
    uint64_t v15 = [(NSArray *)[(NSFetchRequest *)a1 propertiesToFetch] count];
    BOOL v14 = v15 == 0;
    if (v15) {
      int v10 = 1;
    }
  }
  statement_entity = v6->statement_entity;
  if (statement_entity)
  {
    subentities = statement_entity->_subentities;
    if (subentities) {
      LODWORD(statement_entity) = [(NSMutableArray *)subentities count] != 0;
    }
    else {
      LODWORD(statement_entity) = 0;
    }
  }
  if (v11 == 1) {
    int v18 = 4;
  }
  else {
    int v18 = 16;
  }
  if (v11 != 1 && v12 != 2)
  {
    if ((v14 | v10 ^ 1) == 1)
    {
      if ((v13 & v10) != 0) {
        int v18 = 12;
      }
      else {
        int v18 = 0;
      }
    }
    else
    {
      int v18 = 20;
    }
  }
  if (v12 == 2) {
    int v19 = 1;
  }
  else {
    int v19 = v10;
  }
  if (v19) {
    int v20 = 0;
  }
  else {
    int v20 = 2;
  }
  v6->flags = ($C6D29F7D67899FE11DE7F8953A7C3E5F)(statement_entity | v20 | v18 | *(_DWORD *)&v6->flags & 0x20);
  return v6;
}

void sub_18AB95574(_Unwind_Exception *a1)
{
}

#error "18AB955F0: call analysis failed (funcsize=41)"

void sub_18AB95CB8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id _PFRetainedObjectIDCore(uint64_t a1, void *a2, void *a3, char a4)
{
  double v6 = a2;
  v23[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (void *)[a2 persistentStore];
  uint64_t v9 = [v8 _persistentStoreCoordinator];
  int v10 = (void *)[(id)a1 persistentStoreCoordinator];
  if (v8) {
    int v11 = [v6 _isPersistentStoreAlive] ^ 1;
  }
  else {
    int v11 = 1;
  }
  if (*(void *)(*(void *)(a1 + 168) + 8))
  {
    if ([v6 isTemporaryID])
    {
      if (!_PFCMT_GetValue(*(void **)(a1 + 120), v6))
      {
        uint64_t v12 = [**(id **)(*(void *)(a1 + 168) + 8) objectForKey:v6];
        if (v12) {
          double v6 = (void *)v12;
        }
      }
    }
  }
  if ((void *)v9 == v10) {
    int v13 = v11;
  }
  else {
    int v13 = 1;
  }
  if (v13 == 1 && (v8 || ![v6 isTemporaryID]))
  {
    CFURLRef v15 = (const __CFURL *)[v6 URIRepresentation];
    if ([v6 isTemporaryID])
    {
      uint64_t v16 = 133000;
      id v17 = (id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"Temporary object ID refers to object in different NSPersistentStoreCoordinator" userInfo:0];
      if ((a4 & 1) == 0)
      {
LABEL_20:
        if (!a3) {
          return 0;
        }
        if (v17) {
          id v17 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithObjectsAndKeys:", v17, @"NSUnderlyingException", 0);
        }
LABEL_29:
        *a3 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:v16 userInfo:v17];

        return 0;
      }
    }
    else
    {
      if (-[NSPersistentStoreCoordinator _persistentStoreForIdentifier:]((uint64_t)v10, [v6 _storeIdentifier]))
      {
        int v18 = -[NSPersistentStoreCoordinator managedObjectIDForURIRepresentation:error:](v10, v15, 0);
        if (v18)
        {
          id v17 = -[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:]((void **)a1, v18, 0);
          if (v17) {
            return v17;
          }
        }
        if ((a4 & 1) == 0)
        {
          id v17 = 0;
          if (!a3) {
            return v17;
          }
          uint64_t v16 = 133000;
          goto LABEL_29;
        }
LABEL_34:
        id v17 = (id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:@"Invalid state for objectID or NSManagedObjectContext" userInfo:0];
LABEL_35:
        objc_exception_throw(v17);
      }
      int v19 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v20 = *MEMORY[0x1E4F1C3C8];
      uint64_t v21 = [NSString stringWithFormat:@"Object %@ persistent store is not reachable from this NSManagedObjectContext's coordinator", v6];
      uint64_t v22 = @"objectID";
      v23[0] = v6;
      id v17 = (id)objc_msgSend(v19, "exceptionWithName:reason:userInfo:", v20, v21, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v23, &v22, 1));
      uint64_t v16 = 134098;
      if ((a4 & 1) == 0) {
        goto LABEL_20;
      }
    }
    if (v17) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }

  return -[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:]((void **)a1, v6, 0);
}

void _pvfk_35(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_49(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__14(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__18(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__19(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__20(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__22(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__23(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__24(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__25(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__26(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__27(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__28(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__29(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__30(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__31(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__32(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__33(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__34(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__35(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__36(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__37(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__38(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__39(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__40(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__41(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__42(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__43(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__44(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__45(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__46(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__47(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__48(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__49(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__50(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__51(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__52(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__53(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__54(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__55(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__56(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__57(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__58(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__59(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__60(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__61(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__62(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__63(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__64(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__65(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__66(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__67(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__68(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__69(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__70(uint64_t a1, uint64_t a2)
{
}

void _pvfk_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_29(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18AB976B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t compareObjectIDsByPKs(void *a1, void *a2)
{
  uint64_t v3 = [a1 _referenceData64];
  uint64_t v4 = [a2 _referenceData64];
  uint64_t v5 = -1;
  if (v3 >= v4) {
    uint64_t v5 = 1;
  }
  if (v3 == v4) {
    return 0;
  }
  else {
    return v5;
  }
}

void sub_18AB98920(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v3 = objc_begin_catch(exception_object);
    if (v2) {
      sqlite3_free(v2);
    }
    objc_exception_throw(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AB9896C()
{
}

void *snapshot_set_transient_default_values(uint64_t a1)
{
  uint64_t result = (void *)[*(id *)(a1 + 16) entity];
  if (result)
  {
    uint64_t v3 = result[14];
    uint64_t v4 = *(void *)(v3 + 88);
    if (!v4) {
      return result;
    }
    unint64_t v5 = *(void *)(v3 + 80);
    unint64_t v6 = v5 + v4;
    uint64_t v7 = result[12];
  }
  else
  {
    if (!MEMORY[0x58]) {
      return result;
    }
    uint64_t v7 = 0;
    unint64_t v5 = MEMORY[0x50];
    unint64_t v6 = MEMORY[0x50] + MEMORY[0x58];
  }
  if (v5 < v6)
  {
    uint64_t v8 = v7 + 24;
    uint64_t v9 = a1 + 28;
    int v10 = v6 - 1;
    int v11 = (int)v5 >> 3;
    int v12 = 255 << (v5 & 7);
    if ((int)v5 >> 3 == ((int)v6 - 1) >> 3)
    {
      unsigned int v13 = (0xFFu >> (~(_BYTE)v10 & 7)) & v12;
    }
    else
    {
      *(unsigned char *)(v9 + v11) |= v12;
      if (v11 + 1 < v10 >> 3) {
        memset((void *)(v11 + a1 + 29), 255, ((v10 >> 3) - v11 - 2) + 1);
      }
      unsigned int v13 = 0xFFu >> (~(_BYTE)v10 & 7);
      int v11 = v10 >> 3;
    }
    *(unsigned char *)(v9 + v11) |= v13;
    do
    {
      BOOL v14 = *(void **)(v8 + 8 * v5);
      if ([v14 _propertyType] == 7) {
        uint64_t result = (void *)[v14 _buildDefaultValue];
      }
      else {
        uint64_t result = (void *)[v14 defaultValue];
      }
      if (result)
      {
        CFURLRef v15 = result;
        uint64_t result = snapshot_set_value_as_object((char *)a1, v5, v15, v16, v17, v18, v19, v20);
      }
      ++v5;
    }
    while (v6 != v5);
  }
  return result;
}

unint64_t _PFCDSnapshotClassForEntity(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    uint64_t v2 = (unint64_t *)(result + 16);
    if (atomic_load((unint64_t *)(result + 16)))
    {
      return atomic_load(v2);
    }
    else
    {
      uint64_t v4 = +[_CDSnapshot classForEntity:result];
      uint64_t v5 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)v2, (unint64_t *)&v5, (unint64_t)v4);
      if (v5)
      {
        unint64_t v6 = atomic_load((unint64_t *)(v1 + 16));
        if (v4 != (objc_class *)v6) {
          [(objc_class *)v4 _entityDeallocated];
        }
      }
      return atomic_load((unint64_t *)(v1 + 16));
    }
  }
  return result;
}

uint64_t _PFAllocateObjects(objc_class *a1, void **a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = 0;
  if (a2 && a3)
  {
    unint64_t v6 = a2;
    size_t v8 = ((class_getInstanceSize(a1) + 7) & 0xFFFFFFFFFFFFFFF8) + a4;
    uint64_t v9 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      uint64_t v9 = malloc_default_zone();
    }
    LODWORD(v4) = 0;
    unsigned int v10 = a3;
    int v11 = v6;
    do
    {
      unsigned int v12 = malloc_zone_batch_malloc(v9, v8, v11, v10);
      uint64_t v4 = v12 + v4;
      if (v10 == v12)
      {
        unsigned int v10 = 0;
      }
      else
      {
        unsigned int v13 = v12;
        BOOL v14 = malloc_type_zone_malloc(v9, v8, 0x81D79597uLL);
        if (!v14) {
          break;
        }
        CFURLRef v15 = &v11[v13];
        *CFURLRef v15 = v14;
        int v11 = v15 + 1;
        uint64_t v4 = (v4 + 1);
        v10 += ~v13;
      }
    }
    while (v4 < a3);
    int v16 = a3 - v4;
    if (a3 > v4)
    {
      uint64_t v17 = &v6[v4];
      do
      {
        uint64_t v18 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
        if (!_PF_Private_Malloc_Zone) {
          uint64_t v18 = malloc_default_zone();
        }
        uint64_t v19 = malloc_type_zone_malloc(v18, v8, 0xE974DA11uLL);
        if (v19)
        {
          NSObject *v17 = v19;
          uint64_t v4 = (v4 + 1);
        }
        ++v17;
        --v16;
      }
      while (v16);
    }
    if (v4 >= a3)
    {
      uint64_t v23 = v4;
      do
      {
        bzero(*v6, v8);
        uint64_t v24 = *v6++;
        objc_constructInstance(a1, v24);
        --v23;
      }
      while (v23);
    }
    else if (v4)
    {
      uint64_t v20 = v4;
      do
      {
        uint64_t v21 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
        if (!_PF_Private_Malloc_Zone) {
          uint64_t v21 = malloc_default_zone();
        }
        uint64_t v22 = *v6++;
        malloc_zone_free(v21, v22);
        --v20;
      }
      while (v20);
      return 0;
    }
  }
  return v4;
}

void _pvfk_25(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t _sharedIMPL_pvfk_core_q(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  if (!_pvfk_header((unsigned int *)a1, a3, a3, a4, a5, a6, a7, a8)) {
    return 0;
  }
  unsigned int v10 = *(char **)(a1 + 24);
  Class Class = object_getClass(v10);
  return *(void *)&v10[*((unsigned int *)object_getIndexedIvars(Class) + v8 + 19)];
}

void _pvfk_26(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t _sharedIMPL_pvfk_core_s(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  if (_pvfk_header((unsigned int *)a1, a3, a3, a4, a5, a6, a7, a8))
  {
    unsigned int v10 = *(char **)(a1 + 24);
    Class Class = object_getClass(v10);
    return *(__int16 *)&v10[*((unsigned int *)object_getIndexedIvars(Class) + v8 + 19)];
  }
  else
  {
    return 0;
  }
}

void _pvfk_27(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

void _pvfk_34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t _sharedIMPL_pvfk_core_c(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  if (_pvfk_header((unsigned int *)a1, a3, a3, a4, a5, a6, a7, a8))
  {
    unsigned int v10 = *(void **)(a1 + 24);
    Class Class = object_getClass(v10);
    return (char)*((unsigned char *)v10 + *((unsigned int *)object_getIndexedIvars(Class) + v8 + 19));
  }
  else
  {
    return 0;
  }
}

void *_PF_Handler_Public_GetProperty(id **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = *((unsigned int *)a1 + 5);
    if (v6) {
      uint64_t v7 = (char *)a1 + v6;
    }
    else {
      uint64_t v7 = 0;
    }
    if (((v7[(a2 >> 3) - (((unint64_t)*((unsigned int *)a1 + 4) >> 22) & 0x3FC)] >> (a2 & 7)) & 1) == 0) {
      _PF_FulfillDeferredFault(a1, a2);
    }
    unsigned int v8 = (void *)_NSGetUsingKeyValueGetter();
    uint64_t v9 = *(void *)(*((void *)_PFEntityForManagedObject(a1) + 19) + 72);
    if (v9 && (*(unsigned char *)(v9 + a2) & 0x10) != 0 && v8 && [v8 isNSNumber])
    {
      unsigned int v10 = (void *)MEMORY[0x1E4F1C9C8];
      [v8 doubleValue];
      unsigned int v8 = objc_msgSend(v10, "dateWithTimeIntervalSinceReferenceDate:");
    }
  }
  else
  {
    unsigned int v8 = (void *)[a1 _genericValueForKey:a3 withIndex:a2 flags:1];
    if (!a1) {
      return v8;
    }
  }
  if ((*((unsigned char *)a1 + 17) & 0x40) != 0)
  {
    unsigned int v12 = a1;
    *((_DWORD *)a1 + 4) &= ~0x4000u;
  }
  return v8;
}

void snapshot_get_value_as_object(id *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    Class Class = object_getClass(a1);
    IndexedIvars = object_getIndexedIvars(Class);
    if (((*((unsigned __int8 *)a1 + ((unint64_t)a2 >> 3) + 28) >> (a2 & 7)) & 1) == 0)
    {
      uint64_t v13 = *((unsigned int *)IndexedIvars + a2 + 19);
      int v14 = *(char *)(IndexedIvars[7] + a2);
      switch(*(unsigned char *)(IndexedIvars[7] + a2))
      {
        case 'c':
          uint64_t v15 = *((char *)a1 + v13);
          int v16 = NSNumber;
          [v16 numberWithChar:v15];
          break;
        case 'd':
          double v19 = *(double *)((char *)a1 + v13);
          uint64_t v20 = *(void **)(*(void *)([a1[2] entity] + 96) + 24 + 8 * a2);
          if (([v20 _isRelationship] & 1) != 0 || objc_msgSend(v20, "attributeType") != 900)
          {
            uint64_t v27 = NSNumber;
            [v27 numberWithDouble:v19];
          }
          else
          {
            uint64_t v21 = (void *)MEMORY[0x1E4F1C9C8];
            [v21 dateWithTimeIntervalSinceReferenceDate:v19];
          }
          break;
        case 'e':
        case 'g':
        case 'h':
          return;
        case 'f':
          LODWORD(v12) = *(_DWORD *)((char *)a1 + v13);
          uint64_t v22 = NSNumber;
          [v22 numberWithFloat:v12];
          break;
        case 'i':
          uint64_t v23 = *(unsigned int *)((char *)a1 + v13);
          uint64_t v24 = NSNumber;
          [v24 numberWithInt:v23];
          break;
        default:
          if (v14 == 113)
          {
            uint64_t v25 = *(uint64_t *)((char *)a1 + v13);
            uint64_t v26 = NSNumber;
            [v26 numberWithLongLong:v25];
          }
          else if (v14 == 115)
          {
            uint64_t v17 = *(__int16 *)((char *)a1 + v13);
            uint64_t v18 = NSNumber;
            [v18 numberWithShort:v17];
          }
          break;
      }
    }
  }
  else
  {
    _NSCoreDataLog(1, @"warning snapshot_get_value_as_object called on NULL", a3, a4, a5, a6, a7, a8, v28);
    __break(1u);
  }
}

void _sharedIMPL_pvfk_core(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  if (_pvfk_header((unsigned int *)a1, a3, a3, a4, a5, a6, a7, a8))
  {
    int v16 = *(id **)(a1 + 24);
    snapshot_get_value_as_object(v16, v8, v10, v11, v12, v13, v14, v15);
  }
}

uint64_t _pvfk_header(unsigned int *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!_PF_Threading_Debugging_level)
  {
    if (a1) {
      goto LABEL_3;
    }
LABEL_6:
    unsigned int v10 = MEMORY[0x10];
    goto LABEL_7;
  }
  _PFAssertSafeMultiThreadedAccess_impl([a1 managedObjectContext], sel_primitiveValueForKey_);
  if (!a1) {
    goto LABEL_6;
  }
LABEL_3:
  unsigned int v10 = a1[4];
  if ((v10 & 0x4000) != 0)
  {
    uint64_t v11 = a1;
    unsigned int v10 = a1[4] & 0xFFFFBFFF;
    a1[4] = v10;
  }
LABEL_7:
  uint64_t v12 = a1[5];
  if (v12) {
    uint64_t v13 = (char *)a1 + v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (((v13[(a2 >> 3) - ((v10 >> 22) & 0x3FC)] >> (a2 & 7)) & 1) == 0) {
    _PF_FulfillDeferredFault((id **)a1, a2);
  }
  if (*((void *)a1 + 3)) {
    return 1;
  }
  uint64_t result = 0;
  unsigned int v15 = a1[4];
  if ((v15 & 0x38000) != 0x10000 && (v15 & 0x80) == 0)
  {
    _NSCoreDataLog(1, @"NULL _cd_rawData but the object is not being turned into a fault", a3, a4, a5, a6, a7, a8, v16);
    return 0;
  }
  return result;
}

uint64_t _PFAssertSafeMultiThreadedAccess_impl(uint64_t result, const char *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 24);
    unint64_t v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 712);
    if (v3)
    {
      if (v4)
      {
        unint64_t v5 = 0;
        int v6 = 0;
        unint64_t v7 = v4;
        while (v7 != result)
        {
          if (v7 == v5) {
            goto LABEL_23;
          }
          if (!v5) {
            unint64_t v5 = v7;
          }
          unint64_t v7 = atomic_load((unint64_t *)(v7 + 8));
          if (!v7) {
            goto LABEL_26;
          }
        }
        int v6 = 1;
LABEL_23:
        if (v6)
        {
          unsigned __int8 v14 = atomic_load((unsigned __int8 *)(result + 49));
          if (v14) {
            goto LABEL_41;
          }
          return result;
        }
LABEL_26:
        unint64_t v15 = 0;
        int v16 = 0;
        unint64_t v17 = result;
        do
        {
          BOOL v18 = v17 == v4;
          if (v17 == v4) {
            int v16 = 1;
          }
          if (v17 == v15) {
            BOOL v18 = 1;
          }
          if (v18) {
            break;
          }
          if (!v15) {
            unint64_t v15 = v17;
          }
          unint64_t v17 = atomic_load((unint64_t *)(v17 + 8));
        }
        while (v17);
        unsigned __int8 v19 = atomic_load((unsigned __int8 *)(result + 49));
        if (v19) {
          goto LABEL_41;
        }
        if (v16) {
          BOOL v20 = v18;
        }
        else {
          BOOL v20 = 0;
        }
        if (v20) {
          return result;
        }
        goto LABEL_81;
      }
      unsigned __int8 v13 = atomic_load((unsigned __int8 *)(result + 49));
      if ((v13 & 1) == 0)
      {
LABEL_81:
        uint64_t result = self;
        __break(1u);
        return result;
      }
LABEL_41:
      uint64_t result = _PFIsSerializedWithMainQueue();
      if ((result & 1) == 0) {
        goto LABEL_81;
      }
    }
    else
    {
      uint64_t v9 = *(void **)(*(void *)(result + 168) + 56);
      if (v4)
      {
        unint64_t v10 = 0;
        int v11 = 0;
        unint64_t v12 = v4;
        while (v12 != result)
        {
          if (v12 == v10) {
            goto LABEL_45;
          }
          if (!v10) {
            unint64_t v10 = v12;
          }
          unint64_t v12 = atomic_load((unint64_t *)(v12 + 8));
          if (!v12) {
            goto LABEL_48;
          }
        }
        int v11 = 1;
LABEL_45:
        if (v11)
        {
          unsigned __int8 v22 = atomic_load((unsigned __int8 *)(result + 49));
          if ((v22 & 1) == 0) {
            return result;
          }
          goto LABEL_63;
        }
LABEL_48:
        unint64_t v23 = 0;
        int v24 = 0;
        unint64_t v25 = result;
        do
        {
          BOOL v26 = v25 == v4;
          if (v25 == v4) {
            int v24 = 1;
          }
          if (v25 == v23) {
            BOOL v26 = 1;
          }
          if (v26) {
            break;
          }
          if (!v23) {
            unint64_t v23 = v25;
          }
          unint64_t v25 = atomic_load((unint64_t *)(v25 + 8));
        }
        while (v25);
        unsigned __int8 v27 = atomic_load((unsigned __int8 *)(result + 49));
        if (v27) {
          goto LABEL_63;
        }
        if (v24) {
          BOOL v28 = v26;
        }
        else {
          BOOL v28 = 0;
        }
        if (v28) {
          return result;
        }
      }
      else
      {
        unsigned __int8 v21 = atomic_load((unsigned __int8 *)(result + 49));
        if (v21)
        {
LABEL_63:
          uint64_t result = _PFIsSerializedWithMainQueue();
          if (result) {
            return result;
          }
        }
      }
      uint64_t v29 = (_opaque_pthread_t *)v9[1];
      pthread_t v30 = pthread_self();
      if (([*(id *)(v2 + 136) tryLock] & 1) == 0)
      {
        NSStringFromSelector(a2);
        _NSCoreDataLog(1, @"Multiple threads illegally accessing an NSManagedObjectContext (%p) during %@", v38, v39, v40, v41, v42, v43, v2);
        goto LABEL_81;
      }
      if (v30 != v29)
      {
        uint64_t v32 = (void *)v9[2];
        uint64_t v31 = v9[3];
        uint64_t v33 = (void *)[MEMORY[0x1E4F28F08] currentQueue];
        uint64_t v34 = [v33 maxConcurrentOperationCount] == 1 ? v33 : 0;
        if (!v34 || v34 != v32)
        {
          current_queue = dispatch_get_current_queue();
          unint64_t v36 = current_queue == dispatch_get_global_queue(0, 0) ? 0 : current_queue;
          if (!v36 || v36 != v31)
          {
            NSStringFromSelector(a2);
            _NSCoreDataLog(1, @"The current thread is not the recognized owner of this NSManagedObjectContext(%p).  Illegal access during %@", v44, v45, v46, v47, v48, v49, v2);
            goto LABEL_81;
          }
        }
      }
      unint64_t v37 = *(void **)(v2 + 136);
      return [v37 unlock];
    }
  }
  return result;
}

id *_PF_FulfillDeferredFault(id **a1, unint64_t a2)
{
  if (_PF_Threading_Debugging_level) {
    _PFAssertSafeMultiThreadedAccess_impl([a1 managedObjectContext], sel_fulfillFault_withContext_forIndex_);
  }
  if ((a1[2] & 0x30000) == 0x10000 || (a1[2] & 0x80) != 0) {
    return 0;
  }
  unint64_t v5 = a1[4];
  int v6 = a1[5];
  unint64_t v7 = _PFEntityForManagedObject(a1);
  unsigned int v8 = (void *)v7[14];
  unint64_t v9 = v8[2];
  BOOL v11 = a2 >= v9;
  unint64_t v10 = a2 - v9;
  BOOL v11 = !v11 || v10 >= v8[3];
  BOOL v12 = !v11;
  unint64_t v14 = *((unsigned int *)a1 + 4);
  uint64_t v13 = *((unsigned int *)a1 + 5);
  unint64_t v15 = v13 ? (char *)a1 + v13 : 0;
  int v16 = &v15[-((v14 >> 22) & 0x3FC)];
  unint64_t v17 = a2 >> 3;
  if ((v14 & 0x38000) == 0x8000 || v12)
  {
    [(id)_insertion_fault_handler fulfillFault:a1 withContext:v5 forIndex:a2];
    if (((v16[v17] >> (a2 & 7)) | v12)) {
      return 0;
    }
  }
  unint64_t v18 = v8[12];
  unint64_t v19 = v8[13];
  uint64_t v20 = _kvcPropertysPrimitiveSetters((uint64_t)v7);
  BOOL v11 = a2 >= v18;
  unint64_t v21 = a2 - v18;
  uint64_t v22 = *(void *)(v20 + 8 * a2);
  if (!v11 || v21 >= v19)
  {
    uint64_t v71 = *(void *)(v20 + 8 * a2);
    unint64_t v24 = v8[28];
    BOOL v11 = a2 >= v24;
    unint64_t v25 = a2 - v24;
    int v27 = v11 && v25 < v8[29];
    unint64_t v28 = v8[18];
    BOOL v11 = a2 >= v28;
    unint64_t v29 = a2 - v28;
    int v31 = v11 && v29 < v8[19];
    unint64_t v32 = v8[26];
    BOOL v11 = a2 >= v32;
    unint64_t v33 = a2 - v32;
    int v35 = v11 && v33 < v8[27];
    if (((v27 | v31) & 1) == 0 && !v35)
    {
      if (*(void *)(_kvcPropertysPrimitiveGetters(v7) + 8 * a2)) {
        uint64_t v42 = _NSGetUsingKeyValueGetter();
      }
      else {
        snapshot_get_value_as_object(a1[3], a2, v36, v37, v38, v39, v40, v41);
      }
      unint64_t v5 = (id *)v42;
      goto LABEL_68;
    }
    BOOL v51 = (a1[2] & 0x12) == 0;
    int v52 = [v6 isTemporaryID];
    BOOL v53 = v5 != 0;
    uint64_t v54 = *(void *)(v7[12] + 24 + 8 * a2);
    uint64_t v55 = (v53 | ~v52) & v51 | v27;
    uint64_t v56 = (objc_class *)objc_opt_class();
    unint64_t v5 = (id *)objc_msgSend(_PFAllocateObject(v56, 0), "initWithSource:forRelationship:asFault:", a1, v54, v55);
    _PF_CopyOnWrite_Snapshot(a1);
    if (v71) {
      goto LABEL_57;
    }
    goto LABEL_58;
  }
  if (!v5)
  {
LABEL_68:
    v16[v17] |= 1 << (a2 & 7);
    return v5;
  }
  uint64_t v49 = *(void *)(_kvcPropertysPrimitiveGetters(v7) + 8 * a2);
  if (v49) {
    uint64_t v50 = _NSGetUsingKeyValueGetter();
  }
  else {
    snapshot_get_value_as_object(a1[3], a2, v43, v44, v45, v46, v47, v48);
  }
  uint64_t v62 = (void *)v50;
  if (v50 != _CD_ScalarNull)
  {
    if (v50) {
      goto LABEL_56;
    }
    goto LABEL_67;
  }
  [(id)_insertion_fault_handler fulfillFault:a1 withContext:v5 forIndex:a2];
  uint64_t result = a1[3];
  if (result)
  {
    if ((v16[v17] >> (a2 & 7))) {
      return 0;
    }
    if (v49) {
      uint64_t v70 = _NSGetUsingKeyValueGetter();
    }
    else {
      snapshot_get_value_as_object(result, a2, v63, v64, v65, v66, v67, v68);
    }
    uint64_t v62 = (void *)v70;
    if (v70)
    {
LABEL_56:
      unint64_t v5 = (id *)-[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:]((void **)v5, v62, 0);
      _PF_CopyOnWrite_Snapshot(a1);
      if (v22)
      {
LABEL_57:
        _NSSetUsingKeyValueSetter();

        goto LABEL_68;
      }
LABEL_58:
      snapshot_set_value_as_object((char *)a1[3], a2, v5, v57, v58, v59, v60, v61);
      goto LABEL_68;
    }
LABEL_67:
    unint64_t v5 = 0;
    goto LABEL_68;
  }
  __break(1u);
  return result;
}

void _PF_CopyOnWrite_Snapshot(id a1)
{
  uint64_t v2 = (unsigned char *)*((void *)a1 + 3);
  if (v2)
  {
    if (v2[24])
    {
      id v13 = v2;
      *((void *)a1 + 3) = [v2 mutableCopy];
    }
  }
  else
  {
    id v3 = _PFEntityForManagedObject(a1);
    unint64_t v4 = (objc_class *)_PFCDSnapshotClassForEntity((unint64_t)v3);
    if (v4)
    {
      BOOL v11 = -[_CDSnapshot initWithObjectID:]([v4 alloc], *((void **)a1 + 5));
      snapshot_initialize_all_null(v11);
      *((_DWORD *)v11 + 3) = *((_DWORD *)a1 + 3);
      *((void *)a1 + 3) = v11;
    }
    else
    {
      _NSCoreDataLog(1, @"Snapshot class was nil", v5, v6, v7, v8, v9, v10, v12);
      __break(1u);
    }
  }
}

void *snapshot_set_value_as_object(char *a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    Class Class = object_getClass(a1);
    uint64_t result = object_getIndexedIvars(Class);
    uint64_t v12 = &a1[(unint64_t)a2 >> 3];
    int v13 = 1 << (a2 & 7);
    char v14 = v12[28];
    char v15 = v14 & ~(_BYTE)v13;
    char v16 = v14 | v13;
    unint64_t v17 = a3;
    if (a3) {
      char v16 = v15;
    }
    v12[28] = v16;
    uint64_t v18 = *((unsigned int *)result + a2 + 19);
    int v19 = *(char *)(result[7] + a2);
    switch(*(unsigned char *)(result[7] + a2))
    {
      case 'c':
        uint64_t result = (void *)[a3 charValue];
        a1[v18] = (char)result;
        if (a3) {
          goto LABEL_29;
        }
        return result;
      case 'd':
        if (a3)
        {
          if ([a3 isNSNumber]) {
            uint64_t result = (void *)[a3 doubleValue];
          }
          else {
            uint64_t result = (void *)[a3 timeIntervalSinceReferenceDate];
          }
          unint64_t v17 = a3;
        }
        else
        {
          uint64_t v21 = 0;
        }
        *(void *)&a1[v18] = v21;
        if (v17) {
          goto LABEL_29;
        }
        return result;
      case 'e':
      case 'g':
      case 'h':
        goto LABEL_11;
      case 'f':
        if (a3)
        {
          uint64_t result = (void *)[a3 floatValue];
          unint64_t v17 = a3;
        }
        else
        {
          int v22 = 0;
        }
        *(_DWORD *)&a1[v18] = v22;
        if (!v17) {
          return result;
        }
        goto LABEL_29;
      case 'i':
        uint64_t result = (void *)[a3 intValue];
        *(_DWORD *)&a1[v18] = result;
        if (!a3) {
          return result;
        }
        goto LABEL_29;
      default:
        if (v19 == 113)
        {
          uint64_t result = (void *)[a3 longLongValue];
          *(void *)&a1[v18] = result;
          if (!a3) {
            return result;
          }
        }
        else if (v19 == 115)
        {
          uint64_t result = (void *)[a3 shortValue];
          *(_WORD *)&a1[v18] = (_WORD)result;
          if (!a3) {
            return result;
          }
        }
        else
        {
LABEL_11:
          uint64_t v20 = *(void *)&a1[v18];
          *(void *)&a1[v18] = a3;
          if (!v20) {
            return result;
          }
        }
LABEL_29:
        break;
    }
  }
  else
  {
    _NSCoreDataLog(1, @"warning snapshot_set_value_as_object called on NULL", (uint64_t)a3, a4, a5, a6, a7, a8, v23);
    __break(1u);
  }
  return (void *)MEMORY[0x1F41817F8]();
}

uint64_t _kvcPropertysPrimitiveGetters(void *a1)
{
  if (*(void *)(a1[19] + 8)) {
    return *(void *)(a1[19] + 8);
  }
  else {
    return _resolveForSelectorAndType(a1, sel__createValuePrimitiveGetterWithContainerClassID_key_, (objc_class *)qword_1EB270630, 1u);
  }
}

void _PFFaultHandlerFulfillFault(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  int v5 = (*(_DWORD *)(a2 + 16) >> 15) & 7;
  if (((*(_DWORD *)(a2 + 16) >> 15) & 3 | 4) != 5) {
    return;
  }
  int v150 = a5;
  id v152 = &v144;
  context = (void *)MEMORY[0x18C127630]();
  uint64_t v9 = *(_DWORD *)(a2 + 16) & 0xFFFC7FFF | 0x18000;
  *(_DWORD *)(a2 + 16) = v9;
  if ((v9 & 0x100) == 0) {
    [(id)a2 willFireFault];
  }
  uint64_t v10 = *(void **)(a2 + 40);
  BOOL v11 = _PFEntityForManagedObject((id)a2);
  if ((v9 & 0x12) != 0)
  {
    int v12 = 1;
  }
  else if ([v10 isTemporaryID])
  {
    if (a3) {
      BOOL v13 = a4 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    int v12 = v13;
  }
  else
  {
    int v12 = 0;
  }
  id v146 = v10;
  id v156 = a4;
  if (v11)
  {
    unsigned int v161 = (void *)v11[14];
    uint64_t v14 = v11[12];
    uint64_t v15 = v11[13] + 40;
  }
  else
  {
    unsigned int v161 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 40;
  }
  uint64_t v144 = *(void *)v15;
  uint64_t v16 = _kvcPropertysPrimitiveSetters((uint64_t)v11);
  unint64_t v17 = *(void **)(a2 + 48);
  if (!v17 || !*v17 || (*(unsigned char *)(a2 + 17) & 0x20) != 0)
  {
    uint64_t v20 = (uint64_t)v11;
LABEL_26:
    int HasCustomPrimitiveProperties = _PF_HasCustomPrimitiveProperties(v20);
    uint64_t v18 = 0;
    goto LABEL_27;
  }
  if (!v11)
  {
    uint64_t v20 = 0;
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(v11[19] + 48);
  int HasCustomPrimitiveProperties = _PF_HasCustomPrimitiveProperties((uint64_t)v11);
  if (!v18)
  {
LABEL_27:
    int v19 = 1;
    goto LABEL_28;
  }
  if (a3) {
    ++*(_WORD *)(a3 + 46);
  }
  *(_DWORD *)(a2 + 16) |= 0x1000u;
  [(id)a2 _willChangeValuesForKeys:v18];
  int v19 = 0;
LABEL_28:
  uint64_t v153 = a3;
  uint64_t v149 = v9;
  uint64_t v145 = v18;
  int v147 = v5;
  int v148 = v19;
  if (v12)
  {
    uint64_t v159 = 0;
LABEL_35:
    unint64_t v24 = *(char **)(a2 + 24);
    unint64_t v33 = v24;
    _PF_CopyOnWrite_Snapshot((id)a2);
    if (v5 == 5)
    {
      id v154 = v24;
    }
    else
    {

      id v154 = 0;
      unint64_t v24 = 0;
    }
    int HasCustomPrimitiveProperties = 1;
    int v32 = 1;
    goto LABEL_39;
  }
  uint64_t v21 = v14;
  id v22 = v156;
  uint64_t v23 = (_DWORD *)[v156 _snapshot];
  if (!v23)
  {
    uint64_t v159 = [v22 knownKeyValuesPointer];
    *(_DWORD *)(a2 + 12) = [v22 _versionNumber];
    uint64_t v14 = v21;
    goto LABEL_35;
  }
  id v154 = v23;
  *(_DWORD *)(a2 + 12) = v23[3];
  unint64_t v24 = *(char **)(a2 + 24);
  unint64_t v25 = v24;
  uint64_t v14 = v21;
  if (v24 == v154)
  {
    if (v5 != 5)
    {

      id v154 = 0;
    }
    int v32 = 0;
    uint64_t v159 = 0;
    unint64_t v24 = 0;
  }
  else
  {
    *(void *)(a2 + 24) = v154;
    if (v5 == 5)
    {
      int v32 = 0;
      uint64_t v159 = 0;
      id v154 = v24;
    }
    else
    {

      id v154 = 0;
      int v32 = 0;
      uint64_t v159 = 0;
    }
  }
LABEL_39:
  uint64_t v160 = v14 + 24;
  unint64_t v34 = v161[6];
  uint64_t v35 = v161[7];
  unint64_t v36 = v35 + v34;
  uint64_t v37 = *(unsigned int *)(a2 + 20);
  if (v37) {
    uint64_t v38 = a2 + v37;
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v39 = v38 - (((unint64_t)*(unsigned int *)(a2 + 16) >> 22) & 0x3FC);
  int v155 = v12;
  if (v34 < v36)
  {
    int v40 = v36 - 1;
    int v41 = (int)v34 >> 3;
    int v42 = ((int)v36 - 1) >> 3;
    int v43 = 255 << (v34 & 7);
    if (v42 == (int)v34 >> 3)
    {
      unsigned int v44 = (0xFFu >> (~(_BYTE)v40 & 7)) & v43;
    }
    else
    {
      *(unsigned char *)(v39 + v41) |= v43;
      if (v41 + 1 < v42) {
        memset((void *)(v41 + v39 + 1), 255, (v42 - v41 - 2) + 1);
      }
      unsigned int v44 = 0xFFu >> (~(_BYTE)v40 & 7);
      int v41 = v40 >> 3;
    }
    *(unsigned char *)(v39 + v41) |= v44;
    LOBYTE(v12) = v155;
  }
  int v158 = v32;
  if ((v12 & 1) == 0)
  {
    uint64_t v47 = v144;
    if (HasCustomPrimitiveProperties)
    {
      if (v158)
      {
        if (v34 < v36)
        {
          do
          {
            if (v159) {
              uint64_t v48 = *(void **)(v159 + 8 * v34);
            }
            else {
              uint64_t v48 = (void *)[v156 valueForKey:*(void *)(v47 + 8 * v34)];
            }
            uint64_t v49 = *(void *)(v16 + 8 * v34);
            _PF_CopyOnWrite_Snapshot((id)a2);
            if (v49)
            {
              _NSSetUsingKeyValueSetter();
            }
            else
            {
              id v50 = v48;
              snapshot_set_value_as_object(*(char **)(a2 + 24), v34, v50, v51, v52, v53, v54, v55);
            }
            ++v34;
            --v35;
          }
          while (v35);
        }
      }
      else if (v34 < v36)
      {
        uint64_t v60 = (void *)(v144 + 8 * v34);
        uint64_t v61 = v159 + 8 * v34;
        uint64_t v62 = (void *)(v16 + 8 * v34);
        do
        {
          if (*v62)
          {
            if (!v159) {
              [v156 valueForKey:*v60];
            }
            _PF_CopyOnWrite_Snapshot((id)a2);
            _NSSetUsingKeyValueSetter();
          }
          ++v60;
          v61 += 8;
          ++v62;
          --v35;
        }
        while (v35);
      }
    }
    goto LABEL_88;
  }
  if (HasCustomPrimitiveProperties)
  {
    if (v32)
    {
      if (v34 < v36)
      {
        do
        {
          uint64_t v45 = *(void **)(v160 + 8 * v34);
          if ([v45 _propertyType] == 7) {
            uint64_t v46 = (void *)[v45 _buildDefaultValue];
          }
          else {
            uint64_t v46 = (void *)[v45 defaultValue];
          }
          uint64_t v26 = (uint64_t)v46;
          if (v46) {
            _PF_Handler_Primitive_Internal_SetProperty((void *)a2, v34, v46, *(void *)(v16 + 8 * v34));
          }
          ++v34;
          --v35;
        }
        while (v35);
LABEL_88:
        unint64_t v58 = v161[12];
        uint64_t v63 = v161[13];
        unint64_t v59 = v63 + v58;
        char v64 = v155;
        if (!v156) {
          char v64 = 1;
        }
        if (v64) {
          goto LABEL_91;
        }
        uint64_t v70 = v153;
        int v71 = v158;
        if (v58 >= v59) {
          goto LABEL_138;
        }
        id v156 = (id)NSKeyValueCoding_NullValue;
        int v72 = v59 - 1;
        int v73 = (int)v58 >> 3;
        int v74 = v72 >> 3;
        unsigned int v75 = 0xFFu >> (8 - (v58 & 7));
        if (v72 >> 3 == (int)v58 >> 3)
        {
          int v76 = (510 << (v72 & 7)) | v75;
        }
        else
        {
          *(unsigned char *)(v39 + v73) &= v75;
          if (v73 + 1 < v74) {
            bzero((void *)(v73 + v39 + 1), (v74 - v73 - 2) + 1);
          }
          int v76 = 510 << (v72 & 7);
          int v73 = v72 >> 3;
        }
        *(unsigned char *)(v39 + v73) &= v76;
        if (!HasCustomPrimitiveProperties) {
          goto LABEL_138;
        }
        while (1)
        {
          uint64_t v83 = *(void *)(v16 + 8 * v58);
          if (v83) {
            int v84 = 1;
          }
          else {
            int v84 = v71;
          }
          if (v84 != 1) {
            goto LABEL_135;
          }
          uint64_t v85 = *(void *)(v160 + 8 * v58);
          if (!v159 || (id v86 = *(id *)(v159 + 8 * v58), v86 == v156))
          {
            -[NSManagedObjectContext lockObjectStore](v70);
            if (v70) {
              uint64_t v88 = *(void **)(v70 + 32);
            }
            else {
              uint64_t v88 = 0;
            }
            id v86 = (id)[v88 newValueForRelationship:v85 forObjectWithID:v146 withContext:v70 error:0];
            -[NSManagedObjectContext unlockObjectStore](v70);
            if (v86 == v156 || (int v87 = 1, !v86))
            {
LABEL_129:
              if (v147 == 5)
              {
                _PF_CopyOnWrite_Snapshot((id)a2);
                if (v83) {
                  _NSSetUsingKeyValueSetter();
                }
                else {
                  snapshot_set_value_as_object(*(char **)(a2 + 24), v58, 0, v89, v90, v91, v92, v93);
                }
              }
              goto LABEL_135;
            }
          }
          else
          {
            int v87 = 0;
            if (!v86) {
              goto LABEL_129;
            }
          }
          _PF_CopyOnWrite_Snapshot((id)a2);
          if (v83) {
            break;
          }
          id v94 = v86;
          snapshot_set_value_as_object(*(char **)(a2 + 24), v58, v94, v95, v96, v97, v98, v99);
          if (v87) {
            goto LABEL_133;
          }
LABEL_135:
          ++v58;
          --v63;
          int v71 = v158;
          if (!v63) {
            goto LABEL_138;
          }
        }
        _NSSetUsingKeyValueSetter();
        if (!v87) {
          goto LABEL_135;
        }
LABEL_133:

        goto LABEL_135;
      }
    }
    else if (v34 < v36)
    {
      do
      {
        if (*(void *)(v16 + 8 * v34))
        {
          uint64_t v56 = *(void **)(v160 + 8 * v34);
          uint64_t v57 = (void *)([v56 _propertyType] == 7
                       ? [v56 _buildDefaultValue]
                       : [v56 defaultValue]);
          uint64_t v26 = (uint64_t)v57;
          if (v57) {
            _PF_Handler_Primitive_Internal_SetProperty((void *)a2, v34, v57, *(void *)(v16 + 8 * v34));
          }
        }
        ++v34;
        --v35;
      }
      while (v35);
      goto LABEL_88;
    }
  }
  unint64_t v58 = v161[12];
  unint64_t v59 = v161[13] + v58;
LABEL_91:
  if (v58 < v59)
  {
    int v65 = v59 - 1;
    int v66 = (int)v58 >> 3;
    int v67 = 255 << (v58 & 7);
    if ((int)v58 >> 3 == ((int)v59 - 1) >> 3)
    {
      unsigned int v68 = (0xFFu >> (~(_BYTE)v65 & 7)) & v67;
      int v69 = v147;
    }
    else
    {
      *(unsigned char *)(v39 + v66) |= v67;
      int v69 = v147;
      if (v66 + 1 < v65 >> 3) {
        memset((void *)(v66 + v39 + 1), 255, ((v65 >> 3) - v66 - 2) + 1);
      }
      unsigned int v68 = 0xFFu >> (~(_BYTE)v65 & 7);
      int v66 = v65 >> 3;
    }
    *(unsigned char *)(v39 + v66) |= v68;
    if (v69 == 5)
    {
      do
      {
        uint64_t v77 = *(void *)(v16 + 8 * v58);
        _PF_CopyOnWrite_Snapshot((id)a2);
        if (v77) {
          _NSSetUsingKeyValueSetter();
        }
        else {
          snapshot_set_value_as_object(*(char **)(a2 + 24), v58, 0, v78, v79, v80, v81, v82);
        }
        ++v58;
      }
      while (v59 != v58);
    }
  }
LABEL_138:
  uint64_t v100 = 0;
  uint64_t v159 = v39 + 1;
  do
  {
    id v101 = &v161[2 * dword_18AE54118[v100]];
    unint64_t v102 = *v101;
    unint64_t v103 = v101[1];
    unint64_t v104 = v103 + *v101;
    if (v24)
    {
      if (v102 < v104)
      {
        do
        {
          Class Class = object_getClass(v24);
          uint64_t v106 = *(void **)&v24[*((unsigned int *)object_getIndexedIvars(Class) + v102 + 19)];
          if (v106)
          {
            uint64_t v107 = *(void *)(v16 + 8 * v102);
            _PF_CopyOnWrite_Snapshot((id)a2);
            if (v107)
            {
              _NSSetUsingKeyValueSetter();
            }
            else
            {
              id v110 = v106;
              snapshot_set_value_as_object(*(char **)(a2 + 24), v102, v110, v111, v112, v113, v114, v115);
            }
            int v108 = (int)v102 >> 3;
            int v109 = *(unsigned __int8 *)(v39 + ((int)v102 >> 3)) | (1 << (v102 & 7));
          }
          else
          {
            int v108 = (int)v102 >> 3;
            int v109 = *(unsigned __int8 *)(v39 + ((int)v102 >> 3)) & ~(1 << (v102 & 7));
          }
          *(unsigned char *)(v39 + v108) = v109;
          ++v102;
          --v103;
        }
        while (v103);
      }
    }
    else if (v102 < v104)
    {
      int v116 = v104 - 1;
      int v117 = (int)v102 >> 3;
      int v118 = v116 >> 3;
      unsigned int v119 = 0xFFu >> (8 - (v102 & 7));
      if (v116 >> 3 == (int)v102 >> 3)
      {
        int v120 = (510 << (v116 & 7)) | v119;
      }
      else
      {
        *(unsigned char *)(v39 + v117) &= v119;
        if (v117 + 1 < v118) {
          bzero((void *)(v159 + v117), (v118 - v117 - 2) + 1);
        }
        int v120 = 510 << (v116 & 7);
        int v117 = v116 >> 3;
      }
      *(unsigned char *)(v39 + v117) &= v120;
    }
    ++v100;
  }
  while (v100 != 3);
  unint64_t v121 = v161[10];
  uint64_t v122 = v161[11];
  unint64_t v123 = v122 + v121;
  if (HasCustomPrimitiveProperties)
  {
    char v124 = v158;
    if (v121 < v123)
    {
      do
      {
        int v125 = (1 << (v121 & 7)) & *(unsigned __int8 *)(v39 + (v121 >> 3));
        uint64_t v126 = *(void *)(v16 + 8 * v121);
        if (v125) {
          char v127 = 1;
        }
        else {
          char v127 = v124;
        }
        if ((v127 & 1) != 0 || v126)
        {
          if (v125)
          {
            snapshot_get_value_as_object((id *)v24, v121, v26, v27, v28, v29, v30, v31);
          }
          else
          {
            int v129 = *(void **)(v160 + 8 * v121);
            uint64_t v128 = (void *)([v129 _propertyType] == 7
                          ? [v129 _buildDefaultValue]
                          : [v129 defaultValue]);
          }
          uint64_t v26 = (uint64_t)v128;
          if (v128) {
            _PF_Handler_Primitive_Internal_SetProperty((void *)a2, v121, v128, v126);
          }
        }
        ++v121;
        --v122;
      }
      while (v122);
    }
  }
  else if (v121 < v123)
  {
    do
    {
      if ((*(unsigned __int8 *)(v39 + (v121 >> 3)) >> (v121 & 7)))
      {
        uint64_t v130 = *(void *)(v16 + 8 * v121);
        snapshot_get_value_as_object((id *)v24, v121, v26, v27, v28, v29, v30, v31);
        if (v131) {
          _PF_Handler_Primitive_Internal_SetProperty((void *)a2, v121, v131, v130);
        }
      }
      ++v121;
      --v122;
    }
    while (v122);
  }
  unint64_t v132 = v161[10];
  unint64_t v133 = v161[11] + v132;
  uint64_t v134 = v153;
  char v135 = v155;
  if (v132 < v133)
  {
    int v136 = v133 - 1;
    int v137 = (int)v132 >> 3;
    int v138 = v136 >> 3;
    int v139 = 255 << (v132 & 7);
    if (v136 >> 3 == (int)v132 >> 3)
    {
      unsigned int v140 = (0xFFu >> (~(_BYTE)v136 & 7)) & v139;
    }
    else
    {
      *(unsigned char *)(v39 + v137) |= v139;
      if (v137 + 1 < v138) {
        memset((void *)(v137 + v39 + 1), 255, (v138 - v137 - 2) + 1);
      }
      unsigned int v140 = 0xFFu >> (~(_BYTE)v136 & 7);
      int v137 = v136 >> 3;
    }
    *(unsigned char *)(v39 + v137) |= v140;
  }
  *(_DWORD *)(a2 + 16) &= 0xFFFC7FFF;
  if ((v148 & 1) == 0)
  {
    [(id)a2 _didChangeValuesForKeys:v145];
    *(_DWORD *)(a2 + 16) &= ~0x1000u;
    if (v134) {
      --*(_WORD *)(v134 + 46);
    }
  }
  if ((v149 & 0x100) == 0) {
    objc_msgSend((id)a2, "didFireFault", v26);
  }
  if (v150) {
    char v141 = v135;
  }
  else {
    char v141 = 1;
  }
  if ((v141 & 1) == 0)
  {
    *(_DWORD *)(a2 + 16) |= 0x1000u;
    objc_msgSend((id)a2, "awakeFromFetch", v26);
    *(_DWORD *)(a2 + 16) &= ~0x1000u;
  }
  if (v24) {

  }
  id v142 = v154;
  id v143 = 0;
}

uint64_t _kvcPropertysPrimitiveSetters(uint64_t a1)
{
  if (**(void **)(a1 + 152)) {
    return **(void **)(a1 + 152);
  }
  else {
    return _resolveForSelectorAndType((void *)a1, sel__createValuePrimitiveSetterWithContainerClassID_key_, (objc_class *)_MergedGlobals_71, 0);
  }
}

uint64_t _PF_HasCustomPrimitiveProperties(uint64_t a1)
{
  unsigned int v1 = (*(_DWORD *)(a1 + 120) >> 9) & 3;
  if (v1 <= 1)
  {
    uint64_t v3 = objc_msgSend((id)objc_msgSend((id)a1, "properties"), "count");
    unint64_t v4 = *(void **)(*(void *)(a1 + 152) + 8);
    if (v4)
    {
      if (!v3) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v4 = (void *)_resolveForSelectorAndType((void *)a1, sel__createValuePrimitiveGetterWithContainerClassID_key_, (objc_class *)qword_1EB270630, 1u);
      if (!v3)
      {
LABEL_9:
        uint64_t v6 = **(void ***)(a1 + 152);
        if (v6)
        {
          if (v3) {
            goto LABEL_11;
          }
          goto LABEL_13;
        }
        uint64_t v6 = (void *)_resolveForSelectorAndType((void *)a1, sel__createValuePrimitiveSetterWithContainerClassID_key_, (objc_class *)_MergedGlobals_71, 0);
        if (!v3)
        {
LABEL_13:
          unsigned int v7 = *(_DWORD *)(a1 + 120) & 0xFFFFF9FF | 0x400;
LABEL_15:
          *(_DWORD *)(a1 + 120) = v7;
          unsigned int v1 = (v7 >> 9) & 3;
          return v1 & 1;
        }
LABEL_11:
        while (!*v6)
        {
          ++v6;
          if (!--v3) {
            goto LABEL_13;
          }
        }
LABEL_14:
        unsigned int v7 = *(_DWORD *)(a1 + 120) | 0x600;
        goto LABEL_15;
      }
    }
    uint64_t v5 = v3;
    while (!*v4)
    {
      ++v4;
      if (!--v5) {
        goto LABEL_9;
      }
    }
    goto LABEL_14;
  }
  return v1 & 1;
}

id _PFFaultHandlerLookupRow(_DWORD *a1, uint64_t a2, id *a3, int a4, uint64_t a5)
{
  id v8 = a1;
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = a1[4];
  if (((v9 >> 15) & 3 | 4) != 5 && (v9 & 0x80) == 0) {
    return v8;
  }
  uint64_t v10 = (void *)*((void *)a1 + 5);
  values = v10;
  BOOL v11 = _PFEntityForManagedObject(a1);
  if (!v11) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"An NSManagedObject must have a valid NSEntityDescription." userInfo:0]);
  }
  int v12 = v11;
  int v13 = *((_DWORD *)v8 + 4);
  int v14 = [v10 isTemporaryID];
  char v15 = v14;
  int v98 = a4;
  if (v14)
  {
    if (!a2 || (unsigned __int8 v16 = atomic_load((unsigned __int8 *)(a2 + 48)), (v16 & 1) == 0))
    {
      unint64_t v17 = 0;
      int v18 = 0;
      int v19 = 0;
      id v100 = 0;
      goto LABEL_56;
    }
  }
  id v100 = 0;
  if ((v13 & 0x12) != 0)
  {
    unint64_t v17 = 0;
    int v18 = 0;
    int v19 = 0;
    goto LABEL_56;
  }
  uint64_t v20 = -[NSManagedObjectContext lockObjectStore](a2);
  if (a2)
  {
    uint64_t v21 = (void *)MEMORY[0x18C127630](v20);
    id v22 = (char *)[*(id *)(a2 + 32) newValuesForObjectWithID:values withContext:a2 error:&v100];
    id v23 = v100;
    if (v22)
    {
      if (*((unsigned char *)v8 + 17) & 2) != 0 || ([values isTemporaryID])
      {
        int v18 = 0;
        int v19 = 0;
      }
      else
      {
        long long v133 = 0u;
        long long v134 = 0u;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        long long v127 = 0u;
        long long v128 = 0u;
        long long v125 = 0u;
        long long v126 = 0u;
        long long v123 = 0u;
        long long v124 = 0u;
        long long v121 = 0u;
        long long v122 = 0u;
        long long v119 = 0u;
        long long v120 = 0u;
        long long v117 = 0u;
        long long v118 = 0u;
        long long v115 = 0u;
        long long v116 = 0u;
        long long v113 = 0u;
        long long v114 = 0u;
        long long v111 = 0u;
        long long v112 = 0u;
        long long v109 = 0u;
        long long v110 = 0u;
        long long v107 = 0u;
        long long v108 = 0u;
        long long v105 = 0u;
        long long v106 = 0u;
        memset(buf, 0, sizeof(buf));
        CFAllocatorRef v26 = _PFStackAllocatorCreate((unint64_t *)buf, 1024);
        CFArrayRef v27 = CFArrayCreate(v26, (const void **)&values, 1, 0);
        objc_msgSend(*(id *)(a2 + 32), "managedObjectContextDidRegisterObjectsWithIDs:generation:", v27, objc_msgSend((id)a2, "_queryGenerationToken"));
        if (*(void *)&buf[24] && v27) {
          CFRelease(v27);
        }
        int v18 = 0;
        int v19 = 0;
        *((_DWORD *)v8 + 4) |= 0x200u;
      }
      goto LABEL_53;
    }
  }
  if (v100 && [v100 code] != 133000)
  {
    if (objc_msgSend((id)objc_msgSend((id)a2, "persistentStoreCoordinator"), "delegate"))
    {
      [(id)a2 _setFaultingError:v100];
      uint64_t v24 = [(id)a2 persistentStoreCoordinator];
      uint64_t v25 = -[NSPersistentStoreCoordinator _handleFaultingError:fromContext:](v24, (uint64_t)v100, a2);
      if (v25 != 1)
      {
        if (v25 != 2) {
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:@"NSPersistentStoreCoordinatorDelegate returned an illegal NSPersistentStoreCoordinatorDelegateErrorAction" userInfo:0]);
        }
        goto LABEL_52;
      }
    }
    else
    {
      id v22 = (char *)getprogname();
      if (!v22)
      {
        int v19 = 0;
        goto LABEL_43;
      }
      if (!strncmp("avatarsd", v22, 8uLL) || !strncmp("CalendarAgent", v22, 0xDuLL)) {
        [(id)a2 _setFaultingError:v100];
      }
    }
    int v19 = 0;
    id v22 = 0;
LABEL_43:
    int v18 = 1;
    goto LABEL_53;
  }
  if ((v15 & 1) == 0 && (*((unsigned char *)v8 + 16) & 0x24) == 0)
  {
    if (a2)
    {
      if ((*(unsigned char *)(a2 + 41) & 0x10) != 0) {
        goto LABEL_52;
      }
      int v28 = a4;
      if (!a4) {
        goto LABEL_103;
      }
      uint64_t v29 = [(id)a2 _delegate];
    }
    else
    {
      int v28 = a4;
      if ((a4 & 1) == 0) {
        goto LABEL_103;
      }
      uint64_t v29 = [*((id *)v8 + 4) _delegate];
    }
    uint64_t v30 = (void *)v29;
    if (a5 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(v12[12] + 24 + 8 * a5);
    }
    if (v29 && (objc_opt_respondsToSelector() & 1) != 0)
    {
      unint64_t v32 = [v30 context:a2 shouldHandleInaccessibleFault:v8 forObjectID:values andTrigger:v31];
      if (v32 > 1)
      {
        if (v32 != 2)
        {
          if (v32 != 3) {
            objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:@"An NSManagedObjectContext delegate returned an illegal result" userInfo:0]);
          }
          int v39 = 1;
          _NSCoreDataLog(1, @"An NSManagedObjectContext delegate overrode fault handling behavior to silently substitute nil/0 for all property values for the object with ID '%@'.  This is very unwise.", v33, v34, v35, v36, v37, v38, (uint64_t)values);
          int v18 = 0;
          int v19 = 0;
          id v22 = 0;
          goto LABEL_54;
        }
        goto LABEL_52;
      }
LABEL_103:
      *((_DWORD *)v8 + 4) = *((_DWORD *)v8 + 4) & 0xFFFC7FFF | 0x8000;
      uint64_t v97 = @"NSAffectedObjectsErrorKey";
      int v84 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObject:", v8));
      if (v28)
      {
        id v94 = (__CFString *)values;
        if (!values) {
          id v94 = @"<UNKNOWN objectID>";
        }
        uint64_t v95 = [NSString stringWithFormat:@"CoreData could not fulfill a fault for '%@'", v94];
        id v96 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E4F28778], 133000, v95, v84);
        objc_exception_throw(v96);
      }
      if (a3)
      {
        if (v100)
        {

          id v100 = 0;
        }
        id v85 = objc_alloc(MEMORY[0x1E4F28C58]);
        id v86 = (void *)[v85 initWithDomain:*MEMORY[0x1E4F281F8] code:133000 userInfo:v84];
        int v18 = 0;
        int v19 = 0;
        int v39 = 0;
        id v22 = 0;
        id v100 = v86;
      }
      else
      {
        int v18 = 0;
        int v19 = 0;
        int v39 = 0;
        id v22 = 0;
      }
      goto LABEL_54;
    }
    if (([(id)a2 shouldHandleInaccessibleFault:v8 forObjectID:values triggeredByProperty:v31] & 1) == 0) {
      goto LABEL_103;
    }
LABEL_52:
    int v18 = 0;
    id v22 = 0;
    int v19 = 1;
    goto LABEL_53;
  }
  int v18 = 0;
  int v19 = 0;
  id v22 = 0;
LABEL_53:
  int v39 = 1;
LABEL_54:
  -[NSManagedObjectContext unlockObjectStore](a2);
  if (!v39)
  {
    int v42 = 0;
    BOOL v45 = 1;
    goto LABEL_80;
  }
  unint64_t v17 = v22;
LABEL_56:
  uint64_t v40 = [v17 knownKeyValuesPointer];
  if (v17) {
    BOOL v41 = v40 == 0;
  }
  else {
    BOOL v41 = 0;
  }
  if (v41)
  {
    uint64_t v40 = -[NSManagedObjectContext lockObjectStore](a2);
    int v42 = 1;
  }
  else
  {
    int v42 = 0;
  }
  if (v18) {
    int v43 = 1;
  }
  else {
    int v43 = v19;
  }
  if (v43 == 1)
  {
    int v44 = *((_DWORD *)v8 + 4);
    BOOL v45 = (v44 & 0x2000) == 0;
    if ((v44 & 0x2000) == 0)
    {
      v44 |= 0x2000u;
      *((_DWORD *)v8 + 4) = v44;
    }
    if ((v44 & 0x38000) == 0x28000) {
      -[NSFaultHandler turnObject:intoFaultWithContext:](_insertion_fault_handler, (uint64_t)v8, a2);
    }
  }
  else
  {
    BOOL v45 = 0;
  }
  _PFFaultHandlerFulfillFault(v40, (uint64_t)v8, a2, v17, v43 ^ 1);
  if (v43)
  {
    if (![v8 managedObjectContext]) {
      -[NSManagedObjectContext _forceRegisterLostFault:](a2, v8);
    }
    if (v19) {
      [(id)a2 deleteObject:v8];
    }
    if (v45)
    {
      BOOL v45 = 0;
      *((_DWORD *)v8 + 4) &= ~0x2000u;
    }
  }
  else
  {
    BOOL v45 = 0;
    int v18 = 0;
  }
  id v22 = v17;
LABEL_80:
  BOOL v46 = v42 != 0;
  if (v22) {

  }
  if (v46) {
    -[NSManagedObjectContext unlockObjectStore](a2);
  }
  id v47 = v100;
  if (v45 || v18 != 0)
  {
    id v48 = v100;
    if (v100)
    {
      if (a3)
      {
        *a3 = v100;
        goto LABEL_100;
      }
      if (!v98)
      {
        if ([v100 code] != 133000) {
          _NSCoreDataLog(1, @"Client ill advisedly ignored an I/O or unknown error from faulting: %@", v77, v78, v79, v80, v81, v82, (uint64_t)v100);
        }
        goto LABEL_100;
      }
      [v100 userInfo];
      _NSCoreDataLog(1, @"Unhandled error occurred during faulting: %@ (%@)", v60, v61, v62, v63, v64, v65, (uint64_t)v48);
      if ((objc_msgSend((id)objc_msgSend(v100, "domain"), "isEqual:", @"NSSQLiteErrorDomain") & 1) == 0
        && [v100 code] != 134071)
      {
        int v87 = NSString;
        uint64_t v88 = [v100 domain];
        uint64_t v89 = [v100 code];
        uint64_t v90 = [v87 stringWithFormat:@"Unhandled error (%@, %ld) occurred during faulting and was thrown: %@", v88, v89, v100];
        uint64_t v91 = [v100 code];
        uint64_t v102 = *MEMORY[0x1E4F28A50];
        id v103 = v100;
        uint64_t v92 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v103 forKeys:&v102 count:1];
        id v93 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E4F1C3B8], v91, v90, v92);
        -[_NSCoreDataException _setDomain:]((uint64_t)v93, (void *)[v100 domain]);
        objc_exception_throw(v93);
      }
      uint64_t v66 = [NSString stringWithUTF8String:"Unhandled error (%@, %ld) occurred during faulting and was ignored: %@"];
      uint64_t v67 = [v100 domain];
      [v100 code];
      _NSCoreDataLog(17, v66, v68, v69, v70, v71, v72, v73, v67);
      uint64_t v74 = __pflogFaultLog;
      if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
      {
        uint64_t v75 = [v100 domain];
        uint64_t v76 = [v100 code];
        *(_DWORD *)buf = 138412802;
        *(void *)&uint8_t buf[4] = v75;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v76;
        *(_WORD *)&buf[22] = 2112;
        *(void *)&buf[24] = v100;
        uint64_t v57 = "CoreData: Unhandled error (%@, %ld) occurred during faulting and was ignored: %@";
        unint64_t v58 = v74;
        uint32_t v59 = 32;
        goto LABEL_97;
      }
    }
    else if (a3)
    {
      uint64_t v49 = [NSString stringWithUTF8String:"faulting failed to record an error for an serious condition"];
      _NSCoreDataLog(17, v49, v50, v51, v52, v53, v54, v55, (uint64_t)v97);
      uint64_t v56 = __pflogFaultLog;
      if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v57 = "CoreData: faulting failed to record an error for an serious condition";
        unint64_t v58 = v56;
        uint32_t v59 = 2;
LABEL_97:
        _os_log_fault_impl(&dword_18AB82000, v58, OS_LOG_TYPE_FAULT, v57, buf, v59);
      }
    }
LABEL_100:
    if (v45) {
      return 0;
    }
  }
  return v8;
}

void sub_18AB9E7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, uint64_t a15, void *a16)
{
  if (a2)
  {
    if (a2 == 2)
    {
      int v18 = objc_begin_catch(exception_object);
      if (a14)
      {

        a16 = 0;
        objc_exception_rethrow();
      }
      if (a15 && !a16)
      {
        int v19 = v18;
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          -[NSManagedObjectContext _handleError:withError:](v17, v19, (uint64_t *)&a16);
          id v20 = a16;
        }
        else
        {
          id v21 = objc_alloc(MEMORY[0x1E4F1C9E8]);
          [MEMORY[0x1E4F1C978] arrayWithObject:v16];
          id v22 = (void *)[v21 initWithObjectsAndKeys:v19];
          id v23 = objc_alloc(MEMORY[0x1E4F28C58]);
          a16 = (void *)[v23 initWithDomain:*MEMORY[0x1E4F281F8] code:133000 userInfo:v22];
        }
      }
      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exception_object);
    }
    JUMPOUT(0x18AB9E2D0);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AB9E948(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AB9E95CLL);
  }
  JUMPOUT(0x18AB9E984);
}

void sub_18AB9E96C()
{
  if (v0) {
    JUMPOUT(0x18AB9E974);
  }
  JUMPOUT(0x18AB9E984);
}

void sub_18AB9E97C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AB9E980);
  }
  objc_terminate();
}

void sub_18AB9ECBC(_Unwind_Exception *a1)
{
}

BOOL _PFIsSerializedWithMainQueue()
{
  return pthread_main_np() || dispatch_get_specific("com.apple.CoreData.NSManagedObjectContext.mainQueue") != 0;
}

void sub_18AB9F02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_DWORD *snapshot_initialize_all_null(unsigned char *a1)
{
  Class Class = object_getClass(a1);
  uint64_t result = object_getIndexedIvars(Class);
  int v4 = result[16];
  unsigned int v5 = v4 - 1;
  if (v4 >= 1)
  {
    uint64_t v6 = a1 + 28;
    if (v4 >= 9)
    {
      unsigned int v7 = v5 >> 3;
      *uint64_t v6 = -1;
      if (v5 >= 0x10)
      {
        if (v7 <= 2) {
          int v8 = 2;
        }
        else {
          int v8 = v5 >> 3;
        }
        uint64_t result = memset(a1 + 29, 255, (v8 - 1));
      }
      LOBYTE(v5) = v5 & 7;
      v6 += v7;
    }
    *v6 |= 0xFFu >> (v5 ^ 7);
  }
  return result;
}

void *_PF_Handler_Primitive_Internal_SetProperty(void *a1, unsigned int a2, void *a3, uint64_t a4)
{
  _PF_CopyOnWrite_Snapshot(a1);
  if (a4)
  {
    return (void *)_NSSetUsingKeyValueSetter();
  }
  else
  {
    id v9 = a3;
    char v15 = (char *)a1[3];
    return snapshot_set_value_as_object(v15, a2, v9, v10, v11, v12, v13, v14);
  }
}

void snapshot_set_null(char *a1, unsigned int a2)
{
  Class Class = object_getClass(a1);
  IndexedIvars = object_getIndexedIvars(Class);
  a1[((unint64_t)a2 >> 3) + 28] |= 1 << (a2 & 7);
  uint64_t v6 = *((unsigned int *)IndexedIvars + a2 + 19);
  int v7 = *(char *)(IndexedIvars[7] + a2);
  switch(*(unsigned char *)(IndexedIvars[7] + a2))
  {
    case 'c':
      a1[v6] = 0;
      return;
    case 'd':
      goto LABEL_6;
    case 'e':
    case 'g':
    case 'h':
      goto LABEL_7;
    case 'f':
    case 'i':
      *(_DWORD *)&a1[v6] = 0;
      return;
    default:
      if (v7 == 113)
      {
LABEL_6:
        *(void *)&a1[v6] = 0;
      }
      else if (v7 == 115)
      {
        *(_WORD *)&a1[v6] = 0;
      }
      else
      {
LABEL_7:
        int v8 = *(void **)&a1[v6];
        *(void *)&a1[v6] = 0;
        if (v8)
        {
        }
      }
      return;
  }
}

uint64_t _sharedIMPL_vfk_core(id **a1, uint64_t a2, unint64_t a3)
{
  if (_PF_Threading_Debugging_level) {
    _PFAssertSafeMultiThreadedAccess_impl([a1 managedObjectContext], sel_valueForKey_);
  }
  unsigned int v5 = *((_DWORD *)a1 + 4);
  uint64_t v6 = _PFEntityForManagedObject(a1);
  uint64_t v7 = *(void *)(*(void *)(*(void *)(v6[12] + 16) + 40) + 8 * a3);
  uint64_t v14 = *(void *)(_kvcPropertysPrimitiveGetters(v6) + 8 * a3);
  if ((v5 & 0x40) != 0)
  {
    unsigned int v15 = *((_DWORD *)a1 + 4);
    if ((v15 & 0x4000) != 0)
    {
      id v23 = a1;
      unsigned int v15 = a1[2] & 0xFFFFBFFF;
      *((_DWORD *)a1 + 4) = v15;
    }
  }
  else
  {
    [a1 willAccessValueForKey:v7];
    unsigned int v15 = *((_DWORD *)a1 + 4);
  }
  uint64_t v16 = *((unsigned int *)a1 + 5);
  if (v16) {
    uint64_t v17 = (char *)a1 + v16;
  }
  else {
    uint64_t v17 = 0;
  }
  if (((v17[(a3 >> 3) - ((v15 >> 22) & 0x3FC)] >> (a3 & 7)) & 1) == 0) {
    _PF_FulfillDeferredFault(a1, a3);
  }
  int v18 = a1[3];
  if (v18)
  {
    if (v14) {
      uint64_t v19 = _NSGetUsingKeyValueGetter();
    }
    else {
      snapshot_get_value_as_object(v18, a3, v8, v9, v10, v11, v12, v13);
    }
    uint64_t v20 = v19;
    if ((v5 & 0x40) == 0) {
      [a1 didAccessValueForKey:v7];
    }
  }
  else
  {
    uint64_t v20 = 0;
    unsigned int v21 = *((_DWORD *)a1 + 4);
    if ((v21 & 0x38000) != 0x10000 && (v21 & 0x80) == 0)
    {
      _NSCoreDataLog(1, @"NULL _cd_rawData but the object is not being turned into a fault", v8, v9, v10, v11, v12, v13, v24);
      return 0;
    }
  }
  return v20;
}

void sub_18ABA1AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18ABA1C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

#error "18ABA1D84: call analysis failed (funcsize=25)"

void sub_18ABA1DD8(void *exc_buf)
{
  objc_begin_catch(exc_buf);
  os_unfair_lock_unlock(v1 + 12);
  objc_exception_rethrow();
}

void sub_18ABA1E08(_Unwind_Exception *a1)
{
}

void sub_18ABA636C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

id returnIdThing1(void *a1, const char *a2)
{
  uint64_t v3 = (void *)[a1 _underlyingProperty];

  return [v3 a2];
}

id returnUIntegerThing1(void *a1, const char *a2)
{
  uint64_t v3 = (void *)[a1 _underlyingProperty];

  return [v3 a2];
}

void _PF_Leopard_CFDictionaryDestroy(void *ptr)
{
  uint64_t v2 = ptr[1];
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      unint64_t v4 = ptr[8];
      unsigned int v5 = *(const void **)(ptr[9] + 8 * i);
      if ((const void *)v4 != v5 && v5 != (const void *)~v4)
      {
        CFRelease(v5);
        CFRelease(*(CFTypeRef *)(ptr[10] + 8 * i));
      }
    }
  }
  uint64_t v7 = (void *)ptr[9];
  if (v7)
  {
    uint64_t v8 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
    {
      uint64_t v8 = malloc_default_zone();
      uint64_t v7 = (void *)ptr[9];
    }
    malloc_zone_free(v8, v7);
  }
  uint64_t v9 = (void *)ptr[10];
  if (v9)
  {
    uint64_t v10 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
    {
      uint64_t v10 = malloc_default_zone();
      uint64_t v9 = (void *)ptr[10];
    }
    malloc_zone_free(v10, v9);
  }
  uint64_t v11 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v11 = malloc_default_zone();
  }

  malloc_zone_free(v11, ptr);
}

void _pvfk_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_23(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18ABAAEC0(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18ABAAC7CLL);
    }
    id v2 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ABAB074(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ABAB048);
  }
  JUMPOUT(0x18ABAAFB4);
}

CFAllocatorRef _PFStackAllocatorCreate(unint64_t *a1, uint64_t a2)
{
  unint64_t v3 = ((unint64_t)a1 + 47) & 0xFFFFFFFFFFFFFFF0;
  *a1 = v3;
  a1[1] = v3;
  a1[2] = (unint64_t)a1 + a2;
  a1[3] = 0;
  context.version = 0;
  context.info = a1;
  memset(&context.retain, 0, 24);
  context.allocate = (CFAllocatorAllocateCallBack)stack_allocate;
  context.reallocate = (CFAllocatorReallocateCallBack)stack_reallocate;
  context.deallocate = (CFAllocatorDeallocateCallBack)stack_deallocate;
  context.preferredSize = (CFAllocatorPreferredSizeCallBack)preferredSize;
  CFAllocatorRef result = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CFB8], &context);
  unint64_t v5 = (a1[1] + 15) & 0xFFFFFFFFFFFFFFF0;
  *a1 = v5;
  a1[1] = v5;
  return result;
}

uint64_t _newReadPFEncodedArrayFromData(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (objc_class *)_newReadPFEncodedArrayFromData_myArrayClass;
  if (!_newReadPFEncodedArrayFromData_myArrayClass)
  {
    uint64_t v11 = (objc_class *)objc_opt_class();
    _newReadPFEncodedArrayFromData_myArrayClass Class = (uint64_t)v11;
  }
  unint64_t v12 = (*a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = v12 + 24;
  if (v12 + 24 > a4) {
    return 0;
  }
  uint64_t v15 = a2 + v12;
  *(void *)(a2 + v12) = 0;
  object_setClass((id)(a2 + v12), v11);
  *(_DWORD *)(v15 + 16) = 0;
  unint64_t v16 = v12 + 20;
  *(_DWORD *)(v15 + 20) = bswap32(*(_DWORD *)(a2 + v16));
  if (*(int *)(a2 + v16) >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = a2 + v13;
    if (a6) {
      a5 = a6;
    }
    do
    {
      if (a6) {
        v13 += 8;
      }
      *(void *)(v18 + 8 * v17++) = *(id *)(a5 + 8 * bswap64(*(void *)(a2 + v13)));
      v13 += 8;
    }
    while (v17 < *(int *)(a2 + v16));
  }
  *a3 = v13;
  if (v13 <= a4) {
    return v15;
  }
  else {
    return 0;
  }
}

void *PF_CALLOC_SCANNED_BYTES(size_t size)
{
  id v2 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    id v2 = malloc_default_zone();
  }

  return malloc_type_zone_calloc(v2, 1uLL, size, 0x4D6EA17CuLL);
}

void makeBranchRow(CFArrayRef *a1, CFArrayRef *a2, uint64_t a3, const __CFDictionary *a4, int a5, signed int a6, uint64_t a7, int a8)
{
  __int16 Count = CFArrayGetCount(*a1);
  unsigned int v88 = a8 + 1;
  if ((a8 + 1) > 0x8000) {
LABEL_55:
  }
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"Recursion count exceeded" userInfo:0]);
  __int16 v16 = Count;
  ValueAtIndex = (const char *)CFArrayGetValueAtIndex(*a2, 0);
  uint64_t v86 = a3;
  unint64_t v87 = a3 - 1;
  CFArrayRef v18 = a2[a3 - 1];
  CFIndex v19 = CFArrayGetCount(v18);
  uint64_t v20 = (const char *)CFArrayGetValueAtIndex(v18, v19 - 1);
  unsigned int v21 = v20;
  key = v20;
  if (a5)
  {
    unsigned int v22 = ValueAtIndex[a6];
    if (v20[a6] <= 1u) {
      unsigned int v23 = 1;
    }
    else {
      unsigned int v23 = v20[a6];
    }
    if (a5 == 1)
    {
      int v89 = 0;
      int v24 = 8;
      goto LABEL_16;
    }
    uint64_t v26 = [NSString stringWithUTF8String:"Illegal branch data: operation"];
    _NSCoreDataLog(17, v26, v27, v28, v29, v30, v31, v32, v84);
    uint64_t v33 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_18AB82000, v33, OS_LOG_TYPE_FAULT, "CoreData: Illegal branch data: operation", buf, 2u);
    }
    if (byte_1EB270ABE) {
      goto LABEL_54;
    }
    int v24 = 0;
  }
  else
  {
    unsigned int v22 = strlen(ValueAtIndex);
    unsigned int v25 = strlen(v21);
    int v24 = 0;
    if (v25 <= 1) {
      unsigned int v23 = 1;
    }
    else {
      unsigned int v23 = v25;
    }
  }
  int v89 = 1;
LABEL_16:
  if (a6 >= 0x80000)
  {
    uint64_t v34 = [NSString stringWithUTF8String:"Illegal branch data: parameter"];
    _NSCoreDataLog(17, v34, v35, v36, v37, v38, v39, v40, v84);
    BOOL v41 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_18AB82000, v41, OS_LOG_TYPE_FAULT, "CoreData: Illegal branch data: parameter", buf, 2u);
    }
    if (byte_1EB270ABE) {
      goto LABEL_54;
    }
    a6 = 0;
  }
  if (a7 >= 0xFFFFFFFE)
  {
    uint64_t v42 = [NSString stringWithUTF8String:"Illegal branch data: offset"];
    _NSCoreDataLog(17, v42, v43, v44, v45, v46, v47, v48, v84);
    uint64_t v49 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_18AB82000, v49, OS_LOG_TYPE_FAULT, "CoreData: Illegal branch data: offset", buf, 2u);
    }
    if (byte_1EB270ABE) {
      goto LABEL_54;
    }
    a7 = 0;
  }
  if (v22 < 0xFFFE) {
    goto LABEL_31;
  }
  uint64_t v50 = [NSString stringWithUTF8String:"Illegal branch data: lower"];
  _NSCoreDataLog(17, v50, v51, v52, v53, v54, v55, v56, v84);
  uint64_t v57 = __pflogFaultLog;
  if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_18AB82000, v57, OS_LOG_TYPE_FAULT, "CoreData: Illegal branch data: lower", buf, 2u);
  }
  if (byte_1EB270ABE)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  unsigned int v22 = 0;
LABEL_31:
  if (v23 < 0xFFFF) {
    goto LABEL_36;
  }
  uint64_t v58 = [NSString stringWithUTF8String:"Illegal branch data: upper"];
  _NSCoreDataLog(17, v58, v59, v60, v61, v62, v63, v64, v84);
  uint64_t v65 = __pflogFaultLog;
  if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_18AB82000, v65, OS_LOG_TYPE_FAULT, "CoreData: Illegal branch data: upper", buf, 2u);
  }
  if (byte_1EB270ABE) {
    goto LABEL_54;
  }
  unsigned int v23 = 1;
LABEL_36:
  uint64_t v66 = PF_CALLOC_UNSCANNED_BYTES(2 * ((v23 + ~v22) & ~((int)(v23 + ~v22) >> 31)) + 16);
  *(void *)uint64_t v66 = v24 | (a6 << 13) | 1u | (unint64_t)(a7 << 32);
  uint64_t v67 = v22 + 1;
  v66[4] = v22 + 1;
  v66[6] = v23 - 1;
  CFArrayAppendValue(*a1, v66);
  CFIndex v68 = CFArrayGetCount(*a2);
  if (v68 == 1)
  {
    __int16 v69 = v16 + 1;
    v66[5] = (unsigned __int16)CFDictionaryGetValue(a4, ValueAtIndex);
  }
  else
  {
    uint64_t v92 = 0;
    *(void *)buf = 0;
    uint64_t v91 = 0;
    calculateNextBranchOperation(*a2, v68, (const void ***)buf, &v92, (_DWORD *)&v92 + 1, (_DWORD *)&v91 + 1, &v91);
    v66[5] = ~v16;
    uint64_t v70 = *(const void ***)buf;
    int v71 = v92;
    makeBranchRow(a1, *(void *)buf, (int)v92, a4, HIDWORD(v92), HIDWORD(v91), v91, v88);
    __int16 v69 = CFArrayGetCount(*a1);
    freeArrayOfCFObjects(v70, v71);
  }
  if (v86 == 1)
  {
    v66[7] = v66[5];
  }
  else
  {
    CFIndex v72 = CFArrayGetCount(a2[v87]);
    if (v72 == 1)
    {
      v66[7] = (unsigned __int16)CFDictionaryGetValue(a4, key);
    }
    else
    {
      uint64_t v92 = 0;
      *(void *)buf = 0;
      uint64_t v91 = 0;
      calculateNextBranchOperation(a2[v87], v72, (const void ***)buf, &v92, (_DWORD *)&v92 + 1, (_DWORD *)&v91 + 1, &v91);
      v66[7] = -v69;
      uint64_t v73 = *(const void ***)buf;
      int v74 = v92;
      makeBranchRow(a1, *(void *)buf, (int)v92, a4, HIDWORD(v92), HIDWORD(v91), v91, v88);
      __int16 v69 = CFArrayGetCount(*a1);
      freeArrayOfCFObjects(v73, v74);
    }
    if (v87 >= 2)
    {
      uint64_t v75 = a6;
      uint64_t v76 = v86 - 2;
      uint64_t v77 = a2 + 1;
      do
      {
        unsigned int v78 = CFArrayGetCount(*v77);
        uint64_t v79 = (const char *)CFArrayGetValueAtIndex(*v77, 0);
        uint64_t v80 = v79;
        if (v89) {
          size_t v81 = strlen(v79);
        }
        else {
          size_t v81 = v79[v75];
        }
        if (v78 == 1)
        {
          v66[v81 - v67 + 8] = (unsigned __int16)CFDictionaryGetValue(a4, v80);
        }
        else
        {
          uint64_t v92 = 0;
          *(void *)buf = 0;
          uint64_t v91 = 0;
          calculateNextBranchOperation(*v77, v78, (const void ***)buf, &v92, (_DWORD *)&v92 + 1, (_DWORD *)&v91 + 1, &v91);
          v66[v81 - v67 + 8] = -v69;
          uint64_t v82 = *(const void ***)buf;
          int v83 = v92;
          makeBranchRow(a1, *(void *)buf, (int)v92, a4, HIDWORD(v92), HIDWORD(v91), v91, v88);
          __int16 v69 = CFArrayGetCount(*a1);
          freeArrayOfCFObjects(v82, v83);
        }
        ++v77;
        --v76;
      }
      while (v76);
    }
  }
}

void *PF_CALLOC_UNSCANNED_BYTES(size_t size)
{
  id v2 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    id v2 = malloc_default_zone();
  }

  return malloc_type_zone_calloc(v2, 1uLL, size, 0x9640F75EuLL);
}

void calculateNextBranchOperation(const __CFArray *a1, CFIndex a2, const void ***a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  BOOL v41 = a3;
  uint64_t v42 = a4;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  *a7 = 0;
  *a5 = 1;
  CFIndex v10 = a2 - 1;
  if ((unint64_t)a2 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = a2;
  }
  if ((unint64_t)a2 >= 0x201) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = 8 * v12;
  MEMORY[0x1F4188790](a1);
  __int16 v16 = (const void **)((char *)&v41 - v15);
  size_t v17 = 8 * v14;
  if (v18 > 0x200) {
    __int16 v16 = (const void **)NSAllocateScannedUncollectable();
  }
  else {
    bzero((char *)&v41 - v15, 8 * v14);
  }
  v47.location = 0;
  v47.length = a2;
  CFArrayGetValues(a1, v47, v16);
  int64_t v19 = strlen((const char *)*v16);
  MEMORY[0x1F4188790](v19);
  uint64_t v20 = (uint64_t *)((char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((unint64_t)a2 > 0x200) {
    uint64_t v20 = (uint64_t *)NSAllocateScannedUncollectable();
  }
  else {
    bzero(v20, v17);
  }
  if (v19 < 1)
  {
    uint64_t v21 = 0;
    goto LABEL_35;
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 1;
  while (1)
  {
    if (a2 < 1)
    {
      CFMergeSortArray();
LABEL_25:
      uint64_t v28 = 1;
      goto LABEL_26;
    }
    uint64_t v24 = 0;
    do
    {
      v20[v24] = *((char *)v16[v24] + v22);
      ++v24;
    }
    while (a2 != v24);
    CFMergeSortArray();
    if (a2 < 2) {
      goto LABEL_25;
    }
    uint64_t v25 = *v20;
    uint64_t v26 = v20 + 1;
    CFIndex v27 = v10;
    uint64_t v28 = 1;
    do
    {
      uint64_t v30 = *v26++;
      uint64_t v29 = v30;
      if (v30 != v25) {
        ++v28;
      }
      uint64_t v25 = v29;
      --v27;
    }
    while (v27);
LABEL_26:
    if (v28 == a2) {
      break;
    }
    BOOL v31 = v23 < v28;
    if (v23 <= v28) {
      uint64_t v23 = v28;
    }
    if (v31) {
      uint64_t v21 = v22;
    }
    if (++v22 == v19) {
      goto LABEL_35;
    }
  }
  uint64_t v21 = v22;
LABEL_35:
  *a6 = v21;
  CFAllocatorRef v43 = (CFAllocatorRef)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(v43, 0, 0, 0);
  if (a2 >= 1)
  {
    uint64_t v33 = v16;
    CFIndex v34 = a2;
    do
    {
      uint64_t v35 = *v33;
      uint64_t v36 = (const void *)*((unsigned __int8 *)*v33 + v21);
      Value = (void *)CFDictionaryGetValue(Mutable, v36);
      if (!Value)
      {
        Value = CFArrayCreateMutable(v43, 0, 0);
        CFDictionarySetValue(Mutable, v36, Value);
      }
      CFArrayAppendValue((CFMutableArrayRef)Value, v35);
      ++v33;
      --v34;
    }
    while (v34);
  }
  CFIndex Count = CFDictionaryGetCount(Mutable);
  int v39 = Count;
  uint64_t v40 = (const void **)PF_ALLOCATE_OBJECT_ARRAY(Count);
  CFDictionaryGetKeysAndValues(Mutable, 0, v40);
  CFRelease(Mutable);
  uint64_t v44 = customCharAt;
  uint64_t v45 = v21;
  CFMergeSortArray();
  *BOOL v41 = v40;
  _DWORD *v42 = v39;
  if ((unint64_t)a2 >= 0x201)
  {
    NSZoneFree(0, v20);
    NSZoneFree(0, v16);
  }
}

void *PF_ALLOCATE_OBJECT_ARRAY(uint64_t a1)
{
  id v2 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    id v2 = malloc_default_zone();
  }

  return malloc_type_zone_malloc(v2, 8 * a1, 0xBC2F5D9BuLL);
}

void freeArrayOfCFObjects(const void **ptr, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v3 = a2;
    unint64_t v4 = ptr;
    do
    {
      unint64_t v5 = *v4++;
      CFRelease(v5);
      --v3;
    }
    while (v3);
  }

  PF_FREE_OBJECT_ARRAY(ptr);
}

BOOL PFUseToolchainBehaviors()
{
  return byte_1EB2706B1 != 0;
}

void _pvfk_32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_33(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18ABAE5DC(_Unwind_Exception *a1)
{
}

void sub_18ABAE644(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ABAE638);
  }
  JUMPOUT(0x18ABAE65CLL);
}

void sub_18ABAE668(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ABAE674);
  }
  JUMPOUT(0x18ABAE634);
}

void sub_18ABAE6B0(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ABAE68CLL);
  }
  JUMPOUT(0x18ABAE638);
}

void developerSubmittedBlockToNSManagedObjectContextPerform(void *a1)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void (**)(void))*a1;
  id v2 = (void *)a1[1];
  uint64_t v4 = a1[2];
  if ((v4 & 4) != 0)
  {
    unint64_t v5 = (void *)MEMORY[0x18C127630]();
    if ((v4 & 0x2000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unint64_t v5 = 0;
  if ((v4 & 0x2000) != 0) {
LABEL_5:
  }
    __dmb(0xBu);
LABEL_6:
  __int16 v81 = v4;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v6 = *(void **)(StatusReg + 712);
  uint64_t v7 = a1[3];
  p_info = NSKnownKeysMappingStrategy1.info;
  if (!v7)
  {
    unint64_t v12 = 0;
    if (v6 == v2)
    {
      char v24 = 1;
      if (!_PF_Threading_Debugging_level) {
        goto LABEL_23;
      }
      goto LABEL_70;
    }
    uint64_t v80 = v5;
    uint64_t v11 = *(void **)(StatusReg + 712);
    goto LABEL_20;
  }
  uint64_t v9 = *(NSObject **)(v7 + 16);
  if (v9) {
    BOOL v10 = _PF_Threading_Debugging_level < 2;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10) {
    dispatch_assert_queue_V2(v9);
  }
  if (v6 != v2)
  {
    uint64_t v80 = v5;
    uint64_t v11 = v6;
    unint64_t v12 = atomic_load((unint64_t *)(v7 + 8));
    unint64_t v13 = v12;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v7 + 8), &v13, (unint64_t)v2);
    if (v13 != v12)
    {
      do
      {
        uint64_t v14 = [NSString stringWithUTF8String:"Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)"];
        atomic_load((unint64_t *)(v7 + 8));
        _NSCoreDataLog(17, v14, v15, v16, v17, v18, v19, v20, v7);
        uint64_t v21 = __pflogFaultLog;
        if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
        {
          unint64_t v23 = atomic_load((unint64_t *)(v7 + 8));
          *(_DWORD *)buf = 134218752;
          uint64_t v84 = v7;
          __int16 v85 = 2048;
          unint64_t v86 = (unint64_t)v2;
          __int16 v87 = 2048;
          unint64_t v88 = v12;
          __int16 v89 = 2048;
          unint64_t v90 = v23;
          _os_log_fault_impl(&dword_18AB82000, v21, OS_LOG_TYPE_FAULT, "CoreData: Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)", buf, 0x2Au);
        }
        unint64_t v12 = atomic_load((unint64_t *)(v7 + 8));
        unint64_t v22 = v12;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v7 + 8), &v22, (unint64_t)v2);
      }
      while (v22 != v12);
    }
LABEL_20:
    char v24 = 0;
    *(void *)(StatusReg + 712) = v2;
    uint64_t v6 = v11;
    unint64_t v5 = v80;
    p_info = (__objc2_class_ro **)(NSKnownKeysMappingStrategy1 + 32);
    goto LABEL_22;
  }
  unint64_t v12 = 0;
  char v24 = 1;
LABEL_22:
  if (!*((unsigned char *)p_info + 2464)) {
    goto LABEL_23;
  }
LABEL_70:
  _PFAssertSafeMultiThreadedAccess_impl((uint64_t)v2, sel_performBlock_);
LABEL_23:
  v3[2](v3);
  if ((v4 & 0x1000) == 0)
  {
    if (v4) {
      _Block_release(v3);
    }
    if ((v4 & 2) != 0)
    {
      [v2 processPendingChanges];
    }
    else if ((v4 & 4) == 0)
    {
LABEL_57:
      if ((v24 & 1) == 0)
      {
        *(void *)(StatusReg + 712) = v6;
        if (v7)
        {
          uint64_t v57 = v2;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v7 + 8), (unint64_t *)&v57, v12);
          if (v57 != v2)
          {
            uint64_t v58 = [NSString stringWithUTF8String:"Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)"];
            atomic_load((unint64_t *)(v7 + 8));
            _NSCoreDataLog(17, v58, v59, v60, v61, v62, v63, v64, v7);
            uint64_t v65 = __pflogFaultLog;
            if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
            {
              unint64_t v79 = atomic_load((unint64_t *)(v7 + 8));
              *(_DWORD *)buf = 134218752;
              uint64_t v84 = v7;
              __int16 v85 = 2048;
              unint64_t v86 = v12;
              __int16 v87 = 2048;
              unint64_t v88 = (unint64_t)v2;
              __int16 v89 = 2048;
              unint64_t v90 = v79;
              _os_log_fault_impl(&dword_18AB82000, v65, OS_LOG_TYPE_FAULT, "CoreData: Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)", buf, 0x2Au);
            }
            unint64_t v66 = atomic_load((unint64_t *)(v7 + 8));
            unint64_t v67 = v66;
            atomic_compare_exchange_strong((atomic_ullong *volatile)(v7 + 8), &v67, v12);
            if (v67 != v66)
            {
              do
              {
                uint64_t v68 = [NSString stringWithUTF8String:"Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)"];
                atomic_load((unint64_t *)(v7 + 8));
                _NSCoreDataLog(17, v68, v69, v70, v71, v72, v73, v74, v7);
                uint64_t v75 = __pflogFaultLog;
                if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
                {
                  unint64_t v77 = atomic_load((unint64_t *)(v7 + 8));
                  *(_DWORD *)buf = 134218752;
                  uint64_t v84 = v7;
                  __int16 v85 = 2048;
                  unint64_t v86 = v12;
                  __int16 v87 = 2048;
                  unint64_t v88 = v66;
                  __int16 v89 = 2048;
                  unint64_t v90 = v77;
                  _os_log_fault_impl(&dword_18AB82000, v75, OS_LOG_TYPE_FAULT, "CoreData: Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)", buf, 0x2Au);
                }
                unint64_t v66 = atomic_load((unint64_t *)(v7 + 8));
                unint64_t v76 = v66;
                atomic_compare_exchange_strong((atomic_ullong *volatile)(v7 + 8), &v76, v12);
              }
              while (v76 != v66);
            }
          }
        }
      }
      LOWORD(v4) = v81;
      if (v81)
      {
        CFRelease(v2);
        free(a1);
      }
      else
      {
      }
      goto LABEL_66;
    }
    if (v5) {
    -[NSManagedObjectContext _processReferenceQueue:]((uint64_t)v2, 0);
    }
    goto LABEL_57;
  }
  if (v4)
  {
    _Block_release(v3);
    free(a1);
  }
  if ((v4 & 4) != 0 && v5) {
  if (v24)
  }
  {
    *(void *)(StatusReg + 712) = 0;
    if (!v7) {
      goto LABEL_66;
    }
    if ((void *)v12 != v2) {
      goto LABEL_66;
    }
    uint64_t v25 = v2;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v7 + 8), (unint64_t *)&v25, 0);
    if (v25 == v2) {
      goto LABEL_66;
    }
    uint64_t v26 = [NSString stringWithUTF8String:"Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)"];
    atomic_load((unint64_t *)(v7 + 8));
    _NSCoreDataLog(17, v26, v27, v28, v29, v30, v31, v32, v7);
    uint64_t v33 = __pflogFaultLog;
    if (!os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT)) {
      goto LABEL_66;
    }
    unint64_t v34 = atomic_load((unint64_t *)(v7 + 8));
    *(_DWORD *)buf = 134218752;
    uint64_t v84 = v7;
    __int16 v85 = 2048;
    unint64_t v86 = 0;
    __int16 v87 = 2048;
    unint64_t v88 = (unint64_t)v2;
    __int16 v89 = 2048;
    unint64_t v90 = v34;
    _os_log_fault_impl(&dword_18AB82000, v33, OS_LOG_TYPE_FAULT, "CoreData: Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)", buf, 0x2Au);
    if ((v4 & 0x2000) == 0) {
      return;
    }
    goto LABEL_67;
  }
  if ((void *)v12 == v2) {
    unint64_t v35 = 0;
  }
  else {
    unint64_t v35 = v12;
  }
  *(void *)(StatusReg + 712) = v6;
  if (!v7) {
    goto LABEL_66;
  }
  uint64_t v36 = v2;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(v7 + 8), (unint64_t *)&v36, v35);
  if (v36 == v2) {
    goto LABEL_66;
  }
  uint64_t v37 = [NSString stringWithUTF8String:"Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)"];
  atomic_load((unint64_t *)(v7 + 8));
  _NSCoreDataLog(17, v37, v38, v39, v40, v41, v42, v43, v7);
  uint64_t v44 = __pflogFaultLog;
  if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
  {
    unint64_t v78 = atomic_load((unint64_t *)(v7 + 8));
    *(_DWORD *)buf = 134218752;
    uint64_t v84 = v7;
    __int16 v85 = 2048;
    unint64_t v86 = v35;
    __int16 v87 = 2048;
    unint64_t v88 = (unint64_t)v2;
    __int16 v89 = 2048;
    unint64_t v90 = v78;
    _os_log_fault_impl(&dword_18AB82000, v44, OS_LOG_TYPE_FAULT, "CoreData: Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)", buf, 0x2Au);
  }
  unint64_t v45 = atomic_load((unint64_t *)(v7 + 8));
  unint64_t v46 = v45;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(v7 + 8), &v46, v35);
  if (v46 == v45)
  {
LABEL_66:
    if ((v4 & 0x2000) == 0) {
      return;
    }
    goto LABEL_67;
  }
  do
  {
    uint64_t v47 = [NSString stringWithUTF8String:"Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)"];
    atomic_load((unint64_t *)(v7 + 8));
    _NSCoreDataLog(17, v47, v48, v49, v50, v51, v52, v53, v7);
    uint64_t v54 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      unint64_t v56 = atomic_load((unint64_t *)(v7 + 8));
      *(_DWORD *)buf = 134218752;
      uint64_t v84 = v7;
      __int16 v85 = 2048;
      unint64_t v86 = v35;
      __int16 v87 = 2048;
      unint64_t v88 = v45;
      __int16 v89 = 2048;
      unint64_t v90 = v56;
      _os_log_fault_impl(&dword_18AB82000, v54, OS_LOG_TYPE_FAULT, "CoreData: Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)", buf, 0x2Au);
    }
    unint64_t v45 = atomic_load((unint64_t *)(v7 + 8));
    unint64_t v55 = v45;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v7 + 8), &v55, v35);
  }
  while (v55 != v45);
  if ((v4 & 0x2000) != 0) {
LABEL_67:
  }
    __dmb(0xBu);
}

void sub_18ABAEE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18ABAF4AC(_Unwind_Exception *a1)
{
}

void sub_18ABAF4C4(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18ABAF4D0);
}

void sub_18ABAF830(_Unwind_Exception *a1)
{
}

void _NSQLRow_dealloc_standard(id *obj)
{
  if (((_BYTE)obj[2] & 2) == 0)
  {

    obj[5] = 0;
  }
  id v2 = obj[3];
  if (v2)
  {
    obj[3] = 0;
    if ((void *)*v2 != v2)
    {
      uint64_t v3 = 0;
      do
      {
        uint64_t v4 = &v2[v3];

        v3 += 3;
      }
      while ((void *)v4[3] != v2);
      if (v3) {
        PF_FREE_OBJECT_ARRAY(v2);
      }
    }
  }
  if (((_BYTE)obj[2] & 2) == 0)
  {
    _PFDeallocateObject(obj);
  }
}

void _PFDeallocateObject(id obj)
{
  if (*MEMORY[0x1E4F28AE8])
  {
    _PFPerformDebugZombie(obj);
  }
  else
  {
    if (obj) {
      objc_destructInstance(obj);
    }
    id v2 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      id v2 = malloc_default_zone();
    }
    malloc_zone_free(v2, obj);
  }
}

void PF_FREE_OBJECT_ARRAY(void *ptr)
{
  id v2 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    id v2 = malloc_default_zone();
  }

  malloc_zone_free(v2, ptr);
}

void _PFCMT_RemoveValue(void *a1, void *a2)
{
  if (!a2) {
    return;
  }
  if ([a2 isTemporaryID])
  {
    uint64_t v4 = (__CFDictionary *)a1[2];
    if (!v4) {
      return;
    }
    goto LABEL_10;
  }
  unsigned int v5 = _PFModelMapSlotForEntity(a1[7], (void *)[a2 entity]);
  if ((v5 & 0x80000000) == 0 && (v6 = a1[4]) != 0 && (uint64_t v4 = *(__CFDictionary **)(v6 + 8 * v5)) != 0
    || (v7 = a1[3]) != 0 && (uint64_t v4 = *(__CFDictionary **)(v7 + 8 * (v5 & 0x7FFFFFFF))) != 0)
  {
LABEL_10:
    CFDictionaryRemoveValue(v4, a2);
  }
}

uint64_t __generateAccessor_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, void))(a1 + 32))(a2, 0, a3, *(void *)(a1 + 40));
}

CFIndex _PFCMT_GetCount(void *a1)
{
  if (!a1) {
    return 0;
  }
  CFDictionaryRef v2 = (const __CFDictionary *)a1[2];
  if (v2) {
    CFIndex Count = CFDictionaryGetCount(v2);
  }
  else {
    CFIndex Count = 0;
  }
  if (a1[3])
  {
    unint64_t v4 = a1[1];
    if (v4)
    {
      for (unint64_t i = 0; i < v4; ++i)
      {
        CFDictionaryRef v6 = *(const __CFDictionary **)(a1[3] + 8 * i);
        if (v6)
        {
          Count += CFDictionaryGetCount(v6);
          unint64_t v4 = a1[1];
        }
      }
    }
  }
  if (a1[4])
  {
    unint64_t v7 = a1[1];
    if (v7)
    {
      for (unint64_t j = 0; j < v7; ++j)
      {
        CFDictionaryRef v9 = *(const __CFDictionary **)(a1[4] + 8 * j);
        if (v9)
        {
          Count += CFDictionaryGetCount(v9);
          unint64_t v7 = a1[1];
        }
      }
    }
  }
  return Count;
}

void sub_18ABB1DC4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_18ABB1DD4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ABB1E94);
  }
  _Unwind_Resume(a1);
}

void sub_18ABB1E9C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x18ABB1EF8);
}

void sub_18ABB1F70(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18ABB1C88);
  }
  _Unwind_Resume(a1);
}

void sub_18ABB1F90(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ABB1F9CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18ABB2298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _PFCMT_RemoveAllValues(void *a1)
{
  if (a1)
  {
    CFDictionaryRef v2 = (__CFDictionary *)a1[2];
    if (v2) {
      CFDictionaryRemoveAllValues(v2);
    }
    if (a1[3])
    {
      unint64_t v3 = a1[1];
      if (v3)
      {
        for (unint64_t i = 0; i < v3; ++i)
        {
          unsigned int v5 = *(__CFDictionary **)(a1[3] + 8 * i);
          if (v5)
          {
            CFDictionaryRemoveAllValues(v5);
            unint64_t v3 = a1[1];
          }
        }
      }
    }
    if (a1[4])
    {
      unint64_t v6 = a1[1];
      if (v6)
      {
        for (unint64_t j = 0; j < v6; ++j)
        {
          uint64_t v8 = *(__CFDictionary **)(a1[4] + 8 * j);
          if (v8)
          {
            CFDictionaryRemoveAllValues(v8);
            unint64_t v6 = a1[1];
          }
        }
      }
    }
  }
}

void sub_18ABB39CC(_Unwind_Exception *a1)
{
}

void sub_18ABB39EC(void *a1)
{
}

void *_svfk_4(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 4uLL);
}

void sub_18ABB558C()
{
}

void sub_18ABB55EC()
{
}

uint64_t _sharedIMPL_pvfk_core_i(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  uint64_t result = _pvfk_header((unsigned int *)a1, a3, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v11 = *(char **)(a1 + 24);
    Class Class = object_getClass(v11);
    return *(unsigned int *)&v11[*((unsigned int *)object_getIndexedIvars(Class) + v8 + 19)];
  }
  return result;
}

void sub_18ABB6F24(_Unwind_Exception *a1)
{
}

void sub_18ABB6F3C(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18ABB6F48);
}

void sub_18ABB7D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _kvcPropertysPublicGetters(void *a1)
{
  if (*(void *)(a1[19] + 24)) {
    return *(void *)(a1[19] + 24);
  }
  else {
    return _resolveForSelectorAndType(a1, sel__createValueGetterWithContainerClassID_key_, (objc_class *)qword_1EB270630, 3u);
  }
}

unint64_t sortRawRowsForOrderedFaulting(id *a1, void **a2)
{
  CFDictionaryRef v2 = *a2;
  uint64_t v3 = objc_msgSend((id)objc_msgSend(*a1, "valueAtIndex:", 1), "longLongValue");
  uint64_t v4 = objc_msgSend((id)objc_msgSend(v2, "valueAtIndex:", 1), "longLongValue");
  return (v3 > v4) - (unint64_t)(v3 < v4);
}

void _PF_Handler_Primitive_GetProperty(id **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!_PF_Threading_Debugging_level)
  {
    if (a1) {
      goto LABEL_3;
    }
LABEL_6:
    unsigned int v11 = MEMORY[0x10];
    goto LABEL_7;
  }
  _PFAssertSafeMultiThreadedAccess_impl([a1 managedObjectContext], sel_valueForKey_);
  if (!a1) {
    goto LABEL_6;
  }
LABEL_3:
  unsigned int v11 = *((_DWORD *)a1 + 4);
  if ((v11 & 0x4000) != 0)
  {
    unint64_t v12 = a1;
    unsigned int v11 = a1[2] & 0xFFFFBFFF;
    *((_DWORD *)a1 + 4) = v11;
  }
LABEL_7:
  uint64_t v13 = *((unsigned int *)a1 + 5);
  if (v13) {
    uint64_t v14 = (char *)a1 + v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (((v14[(a2 >> 3) - ((v11 >> 22) & 0x3FC)] >> (a2 & 7)) & 1) == 0) {
    _PF_FulfillDeferredFault(a1, a2);
  }
  uint64_t v15 = a1[3];
  if (v15)
  {
    if (a4)
    {
      _NSGetUsingKeyValueGetter();
    }
    else
    {
      snapshot_get_value_as_object(v15, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  else
  {
    unsigned int v16 = *((_DWORD *)a1 + 4);
    if ((v16 & 0x38000) != 0x10000 && (v16 & 0x80) == 0) {
      _NSCoreDataLog(1, @"NULL _cd_rawData but the object is not being turned into a fault", a3, a4, a5, a6, a7, a8, v17);
    }
  }
}

uint64_t _resolveForSelectorAndType(void *a1, const char *a2, objc_class *a3, unsigned int a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = (void *)a1[13];
  uint64_t v9 = [v8 keys];
  uint64_t v10 = [v8 length];
  unsigned int v11 = (void **)PF_CALLOC_OBJECT_ARRAY(v10);
  unint64_t v12 = (objc_class *)_PFFastEntityClass((unint64_t)a1);
  Class Superclass = class_getSuperclass(v12);
  unint64_t v47 = v10;
  unsigned int v46 = a4;
  if (a4 <= 1) {
    unint64_t v47 = *(void *)(a1[14] + 24) + *(void *)(a1[14] + 16);
  }
  if (!v10)
  {
    uint64_t v42 = 0;
    uint64_t v43 = a1[19];
    uint64_t v38 = a1 + 19;
    uint64_t v39 = a4;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v43 + 8 * a4), (unint64_t *)&v42, (unint64_t)v11);
    if (v42) {
      goto LABEL_49;
    }
    return *(void *)(*v38 + 8 * v39);
  }
  unint64_t v14 = 0;
  unint64_t v45 = a1 + 19;
  do
  {
    id v15 = objc_msgSend(Superclass, a2, Superclass, *(void *)(v9 + 8 * v14));
    Class Class = object_getClass(v15);
    BOOL v17 = Class != 0;
    if (Class != a3 && Class != 0)
    {
      do
      {
        Class Class = class_getSuperclass(Class);
        BOOL v17 = Class != 0;
      }
      while (Class != a3 && Class);
    }
    if (v17)
    {

      goto LABEL_43;
    }
    uint64_t v19 = v11;
    if (v14 > v47 && !PFUseToolchainBehaviors())
    {
      uint64_t v20 = [a1 name];
      class_getName(Superclass);
      _NSCoreDataLog(2, @"Relationship properties should be @dynamic, not ivars (entity %@, class %s, property %@).  This will be an error in the future.", v21, v22, v23, v24, v25, v26, v20);
    }
    uint64_t v27 = *(void **)(a1[12] + 24 + 8 * v14);
    if (([v27 _propertyType] & 0xFFFFFFFFFFFFFFFBLL) == 2 && objc_msgSend(v27, "attributeType") == 900)
    {
      if (v46 == 3)
      {
        if (!v15) {
          goto LABEL_42;
        }
        uint64_t v30 = (objc_class *)[v15 containerClassID];
        if ((objc_opt_isKindOfClass() & 1) == 0
          && (objc_opt_isKindOfClass() & 1) != 0
          && (uint64_t v31 = (const char *)[v15 selector]) != 0
          && (InstanceMethod = class_getInstanceMethod(v30, v31)) != 0)
        {
          method_getReturnType(InstanceMethod, dst, 0x20uLL);
          int v33 = dst[0];
        }
        else
        {
          int v33 = 0;
        }
        if (v33 != 58 && (v33 - 65) > 0x34) {
          goto LABEL_42;
        }
        uint64_t v34 = *(void *)(*v45 + 72);
        char v35 = *(unsigned char *)(v34 + v14) | 0x10;
LABEL_41:
        *(unsigned char *)(v34 + v14) = v35;
        goto LABEL_42;
      }
      if (v46 != 2 || !v15) {
        goto LABEL_42;
      }
      if (objc_opt_isKindOfClass())
      {
        uint64_t v28 = (objc_ivar *)[v15 ivar];
        if (v28)
        {
          int v29 = *(unsigned __int8 *)ivar_getTypeEncoding(v28);
          goto LABEL_38;
        }
      }
      else if (objc_opt_isKindOfClass())
      {
        uint64_t v36 = (objc_method *)[v15 method];
        if (v36)
        {
          method_getArgumentType(v36, 2u, dst, 0x20uLL);
          int v29 = dst[0];
          goto LABEL_38;
        }
      }
      int v29 = 0;
LABEL_38:
      if (v29 != 58 && (v29 - 65) > 0x34) {
        goto LABEL_42;
      }
      uint64_t v34 = *(void *)(*v45 + 72);
      char v35 = *(unsigned char *)(v34 + v14) | 1;
      goto LABEL_41;
    }
LABEL_42:
    unsigned int v11 = v19;
    v19[v14] = v15;
LABEL_43:
    ++v14;
  }
  while (v14 != v10);
  uint64_t v37 = 0;
  uint64_t v38 = a1 + 19;
  uint64_t v39 = v46;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(*v45 + 8 * v46), (unint64_t *)&v37, (unint64_t)v11);
  if (v37)
  {
    uint64_t v40 = v11;
    do
    {
      uint64_t v41 = *v40++;

      --v10;
    }
    while (v10);
LABEL_49:
    PF_FREE_OBJECT_ARRAY(v11);
  }
  return *(void *)(*v38 + 8 * v39);
}

void *PF_CALLOC_OBJECT_ARRAY(uint64_t a1)
{
  CFDictionaryRef v2 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    CFDictionaryRef v2 = malloc_default_zone();
  }

  return malloc_type_zone_calloc(v2, 1uLL, 8 * a1, 0x65F61B88uLL);
}

void sub_18ABBC6AC(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(v2);
}

void sub_18ABBC6D8()
{
}

void _PFfastOidRelease(int a1, id a2)
{
  if (((unint64_t)a2 & 0x8000000000000000) != 0) {
    return;
  }
  Class Class = object_getClass(a2);
  if ((*((unsigned char *)object_getIndexedIvars(Class) + 4) & 1) == 0)
  {
    if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)a2 + 2, 0xFFFFFFFF, memory_order_relaxed) > 0) {
      return;
    }
    goto LABEL_15;
  }
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v4 = *((void *)a2 + 1);
        if ((v4 & 0x8000) != 0) {
          break;
        }
        uint64_t v5 = *((void *)a2 + 1);
        atomic_compare_exchange_strong((atomic_ullong *volatile)a2 + 1, (unint64_t *)&v5, v4 - 1);
        if (v5 == v4) {
          goto LABEL_14;
        }
      }
      os_unfair_lock_lock_with_options();
      unint64_t v6 = v4;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)a2 + 1, &v6, v4, memory_order_relaxed, memory_order_relaxed);
      if (v6 == v4) {
        break;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&_extraRetainsLock);
    }
    if (!NSDecrementExtraRefCountWasZero(a2)) {
      break;
    }
    unint64_t v7 = v4;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)a2 + 1, &v7, v4 ^ 0xFFFF, memory_order_relaxed, memory_order_relaxed);
    BOOL v8 = v7 == v4;
    os_unfair_lock_unlock((os_unfair_lock_t)&_extraRetainsLock);
    if (v8) {
      goto LABEL_14;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_extraRetainsLock);
LABEL_14:
  if (!(_WORD)v4)
  {
LABEL_15:
    Class v9 = object_getClass(a2);
    [a2 dealloc];
    _PFfastFactoryRelease1(v9);
  }
}

void _pvfk_39(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t _compareEntitiesByName(void *a1, void *a2)
{
  uint64_t v3 = (void *)[a1 name];
  uint64_t v4 = [a2 name];

  return [v3 compare:v4];
}

void sub_18ABC1C44(_Unwind_Exception *a1)
{
}

id _PFModelMapPathForEntity(void *a1)
{
  uint64_t v2 = objc_msgSend((id)objc_msgSend(a1, "managedObjectModel"), "_modelsReferenceIDOffset");
  if (v2 > 16049)
  {
    switch(v2)
    {
      case 16050:
        uint64_t v3 = NSString;
        uint64_t v4 = _PFPersistentHistoryFetchModel;
        return (id)[v3 stringWithFormat:@"%@/%@", -[__objc2_class ancillaryModelNamespace](v4, "ancillaryModelNamespace"), objc_msgSend(a1, "name")];
      case 17000:
        uint64_t v3 = NSString;
        uint64_t v4 = PFCloudKitMetadataModel;
        return (id)[v3 stringWithFormat:@"%@/%@", -[__objc2_class ancillaryModelNamespace](v4, "ancillaryModelNamespace"), objc_msgSend(a1, "name")];
      case 18000:
        uint64_t v3 = NSString;
        uint64_t v4 = NSSQLiteIndexTrackingModel;
        return (id)[v3 stringWithFormat:@"%@/%@", -[__objc2_class ancillaryModelNamespace](v4, "ancillaryModelNamespace"), objc_msgSend(a1, "name")];
    }
    goto LABEL_15;
  }
  if (v2)
  {
    if (v2 == 16000)
    {
      uint64_t v3 = NSString;
      uint64_t v4 = _PFPersistentHistoryModel;
      return (id)[v3 stringWithFormat:@"%@/%@", -[__objc2_class ancillaryModelNamespace](v4, "ancillaryModelNamespace"), objc_msgSend(a1, "name")];
    }
LABEL_15:
    unint64_t v7 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v8 = *MEMORY[0x1E4F1C3B8];
    Class v9 = NSString;
    uint64_t v10 = v2;
    unsigned int v11 = (objc_class *)objc_opt_class();
    unint64_t v12 = (void *)[v7 exceptionWithName:v8, objc_msgSend(v9, "stringWithFormat:", @"Managed object model with offset %lu is not known to %@", v10, NSStringFromClass(v11)), 0 reason userInfo];
    objc_exception_throw(v12);
  }
  id v6 = (id)[a1 name];

  return v6;
}

void sub_18ABC26B8()
{
}

void sub_18ABC2700()
{
}

void sub_18ABC270C()
{
}

void sub_18ABC2718()
{
  if (v0) {
    JUMPOUT(0x18ABC2720);
  }
  JUMPOUT(0x18ABC2724);
}

void sub_18ABC28AC()
{
}

void sub_18ABC28F4()
{
}

void sub_18ABC2900()
{
}

void sub_18ABC290C()
{
  if (v0) {
    JUMPOUT(0x18ABC2914);
  }
  JUMPOUT(0x18ABC2918);
}

void _perform(unint64_t a1, uint64_t a2)
{
  context[4] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 24);
    if (v2)
    {
      uint64_t v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 712);
      context[0] = a2;
      context[1] = a1;
      context[2] = 0;
      context[3] = v3;
      unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 49));
      if (v4)
      {
        if (_PFIsSerializedWithMainQueue())
        {
LABEL_25:
          internalBlockToNSManagedObjectContextPerform(context);
          return;
        }
      }
      else if (v3)
      {
        unint64_t v5 = 0;
        int v6 = 0;
        unint64_t v7 = v3;
        while (v7 != a1)
        {
          if (v7 == v5) {
            goto LABEL_15;
          }
          if (!v5) {
            unint64_t v5 = v7;
          }
          unint64_t v7 = atomic_load((unint64_t *)(v7 + 8));
          if (!v7) {
            goto LABEL_16;
          }
        }
        int v6 = 1;
LABEL_15:
        if (v6) {
          goto LABEL_25;
        }
LABEL_16:
        unint64_t v8 = 0;
        int v9 = 0;
        while (a1 != v3)
        {
          if (a1 == v8) {
            goto LABEL_24;
          }
          if (!v8) {
            unint64_t v8 = a1;
          }
          a1 = atomic_load((unint64_t *)(a1 + 8));
          if (!a1) {
            goto LABEL_26;
          }
        }
        int v9 = 1;
LABEL_24:
        if (v9) {
          goto LABEL_25;
        }
      }
LABEL_26:
      dispatch_sync_f(v2, context, (dispatch_function_t)internalBlockToNSManagedObjectContextPerform);
    }
  }
}

void _perform_0(unint64_t a1, void (**a2)(void))
{
  unint64_t v2 = a1;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(NSObject **)(a1 + 16);
  if (v3)
  {
    unsigned __int8 v4 = *(void (***)(void))(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 712);
    v12[0] = a2;
    v12[1] = (void (**)(void))v2;
    v12[2] = 0;
    v12[3] = v4;
    id v13 = 0;
    if (v4)
    {
      unint64_t v5 = 0;
      int v6 = 0;
      unint64_t v7 = (unint64_t)v4;
      while (v7 != v2)
      {
        if (v7 == v5) {
          goto LABEL_11;
        }
        if (!v5) {
          unint64_t v5 = v7;
        }
        unint64_t v7 = atomic_load((unint64_t *)(v7 + 8));
        if (!v7) {
          goto LABEL_12;
        }
      }
      int v6 = 1;
LABEL_11:
      if (v6)
      {
LABEL_21:
        gutsOfBlockToNSPersistentStoreCoordinatorPerform(v12);
        goto LABEL_23;
      }
LABEL_12:
      unint64_t v8 = 0;
      int v9 = 0;
      while ((void (**)(void))v2 != v4)
      {
        if (v2 == v8) {
          goto LABEL_20;
        }
        if (!v8) {
          unint64_t v8 = v2;
        }
        unint64_t v2 = atomic_load((unint64_t *)(v2 + 8));
        if (!v2) {
          goto LABEL_22;
        }
      }
      int v9 = 1;
LABEL_20:
      if (v9) {
        goto LABEL_21;
      }
    }
LABEL_22:
    dispatch_sync_f(v3, v12, (dispatch_function_t)internalBlockToNSPersistentStoreCoordinatorPerform);
LABEL_23:
    id v10 = v13;
    if (v13)
    {
      id v11 = v13;
      objc_exception_throw(v10);
    }
  }
}

_PFArray *newFetchedRowsForFetchPlan_MT(uint64_t a1)
{
  v188[4] = *MEMORY[0x1E4F143B8];
  if (a1) {
    uint64_t v2 = *(void *)(a1 + 136);
  }
  else {
    uint64_t v2 = 0;
  }
  int v148 = (void *)[(id)a1 fetchStatement];
  int v3 = -[NSSQLStoreRequestContext debugLogLevel](a1);
  int v4 = *(_DWORD *)(v2 + 72);
  if ((v4 & 2) != 0) {
    unsigned int v5 = 4096;
  }
  else {
    unsigned int v5 = 512;
  }
  int v173 = v3;
  if (v3 < 1)
  {
    double Current = 0.0;
    LOBYTE(v7) = *(_DWORD *)(v2 + 72);
  }
  else
  {
    double Current = CFAbsoluteTimeGetCurrent();
    int v7 = *(_DWORD *)(v2 + 72);
  }
  if (*(_DWORD *)(v2 + 16)) {
    unsigned int v8 = *(_DWORD *)(v2 + 16);
  }
  else {
    unsigned int v8 = -1;
  }
  uint64_t v147 = [*(id *)(v2 + 8) relationshipKeyPathsForPrefetching];
  BOOL v10 = (v4 & 2) == 0 && (*(_DWORD *)(v2 + 72) & 0x1C) == 12;
  BOOL v151 = v10;
  if (a1) {
    BOOL v150 = *(unsigned char *)(a1 + 202) != 0;
  }
  else {
    BOOL v150 = 0;
  }
  unsigned __int8 v187 = 1;
  BOOL v175 = (void *)[*(id *)(v2 + 8) _asyncResultHandle];
  id v11 = (void *)[v175 progress];
  v169 = v11;
  if (v11)
  {
    int v12 = [v11 totalUnitCount];
    int v161 = v12 & ~(v12 >> 31);
  }
  else
  {
    int v161 = 0;
  }
  uint64_t v171 = a1;
  uint64_t v174 = v2;
  id v13 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  id v167 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  CFRetain(v167);

  if (v151)
  {
    id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    CFRetain(v14);
    cf = v14;
  }
  else
  {
    cf = 0;
  }
  if (a1) {
    id v15 = *(void **)(a1 + 24);
  }
  else {
    id v15 = 0;
  }
  -[NSSQLiteConnection selectRowsWithStatement:cached:](v15, v148, v150);
  double v16 = CFAbsoluteTimeGetCurrent();
  uint64_t v149 = v13;
  uint64_t v158 = (uint64_t)v15;
  CFMutableArrayRef v159 = 0;
  int ptr = 0;
  uint64_t v17 = 0;
  char v153 = 0;
  CFArrayRef theArray = 0;
  uint64_t v18 = 0;
  unsigned int v19 = 0;
  int v163 = v7 & 3;
  if (v173 <= 0) {
    double v20 = 0.0;
  }
  else {
    double v20 = v16 - Current;
  }
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    Initialize = (double *)fetchResultSetAllocateInitialize(v19, (*(_DWORD *)(v2 + 72) >> 5) & 1);
    Initialize[1] = v16;
    value = Initialize;
    *(_DWORD *)Initialize = ptr;
    if (v8 >= v5) {
      unsigned int v22 = v5;
    }
    else {
      unsigned int v22 = v8;
    }
    if (v8 >= v5) {
      unsigned int v23 = v8 - v5;
    }
    else {
      unsigned int v23 = 0;
    }
    *(_DWORD *)(v174 + 16) = v22;
    if (v173 <= 0) {
      double v24 = 0.0;
    }
    else {
      double v24 = CFAbsoluteTimeGetCurrent();
    }
    if (v175 && [v175 _isCancelled])
    {
      ptr += v17;
      int v25 = ((_BYTE)value[6] & 1) == 0;
LABEL_45:
      v25 &= ~[v175 _isCancelled];
      goto LABEL_46;
    }
    int v26 = -[NSSQLiteConnection fetchResultSet:usingFetchPlan:](v158, (uint64_t)value, v174);
    uint64_t v17 = v26;
    ptr += v26;
    int v25 = ((_BYTE)value[6] & 1) == 0;
    if (v175) {
      goto LABEL_45;
    }
LABEL_46:
    if (v169 && ([v169 isCancelled] & 1) == 0)
    {
      int v27 = v161;
      int v28 = 2 * v161;
      if (ptr >= 2 * v161) {
        int v28 = ptr + 1;
      }
      BOOL v29 = v161 > 0 && ptr >= v161;
      if (v29) {
        int v27 = v28;
      }
      int v161 = v27;
      if (v171) {
        uint64_t v30 = *(void **)(v171 + 32);
      }
      else {
        uint64_t v30 = 0;
      }
      v183[0] = MEMORY[0x1E4F143A8];
      v183[1] = 3221225472;
      v183[2] = __newFetchedRowsForFetchPlan_MT_block_invoke;
      v183[3] = &unk_1E544E308;
      BOOL v186 = v29;
      v183[4] = v169;
      int v184 = v27;
      int v185 = ptr;
      [v30 performBlock:v183];
    }
    if (v18) {
      int v31 = 0;
    }
    else {
      int v31 = v25;
    }
    if (v31 == 1)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, 0);
      if (v163 != 2) {
        CFMutableArrayRef v159 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
      }
      int v33 = PF_CALLOC_UNSCANNED_BYTES(0x28uLL);
      *int v33 = v171;
      v33[1] = Mutable;
      v33[2] = v167;
      v33[3] = &v187;
      v33[4] = v159;
      if (v163 == 2) {
        uint64_t v34 = _prepareObjectIDsOnBackgroundThread;
      }
      else {
        uint64_t v34 = _prepareRowsOnBackgroundThreads;
      }
      uint64_t v18 = [[_PFTask alloc] initWithFunction:v34 withArgument:v33 andPriority:2];
      if (cf) {
        CFRelease(cf);
      }
      cf = 0;
      char v153 = 1;
      CFArrayRef theArray = Mutable;
    }
    if (v173 >= 1) {
      double v20 = v20 + CFAbsoluteTimeGetCurrent() - v24;
    }
    if (v17)
    {
      if (v18)
      {
        pthread_mutex_lock(&v18->lock);
        CFArrayAppendValue(theArray, value);
        pthread_mutex_unlock(&v18->lock);
        pthread_cond_signal(&v18->condition);
        goto LABEL_78;
      }
      v188[0] = 0;
      uint64_t v37 = (void *)_prepareResultsFromResultSet((uint64_t)value, v188, v171);
      [v167 addObject:v37];
      if (v188[0])
      {
        objc_msgSend(cf, "addObject:");
        uint64_t v38 = (void *)v188[0];
      }
      else
      {
        uint64_t v38 = 0;
      }

      int v35 = *((_DWORD *)value + 4);
      int v36 = *((_DWORD *)value + 5);
      fetchResultSetDeallocate((uint64_t)value);
    }
    else
    {
      int v35 = *((_DWORD *)value + 4);
      int v36 = *((_DWORD *)value + 5);
      fetchResultSetDeallocate((uint64_t)value);
    }
    unsigned int v19 = v36 * v35;
LABEL_78:
    if (v8 > v5) {
      char v39 = v25;
    }
    else {
      char v39 = 0;
    }
    unsigned int v8 = v23;
    uint64_t v2 = v174;
  }
  while ((v39 & 1) != 0);
  -[NSSQLiteConnection endFetchAndRecycleStatement:](v158, v150);
  if (v173 >= 1)
  {
    unsigned int v46 = @"sql connection fetch time: %.4fs";
    if (v171 && *(unsigned char *)(v171 + 80)) {
      unsigned int v46 = @"sql connection fetch time: \x1B[31m%.4f\x1B[0ms";
    }
    _NSCoreDataLog(4, (uint64_t)v46, v40, v41, v42, v43, v44, v45, *(uint64_t *)&v20);
  }
  if (v18)
  {
    pthread_mutex_lock(&v18->lock);
    atomic_store(0, &v187);
    if (!v18->isFinishedFlag) {
      pthread_cond_signal(&v18->condition);
    }
    while (!v18->isFinishedFlag)
      pthread_cond_wait(&v18->condition, &v18->lock);
    pthread_mutex_unlock(&v18->lock);
  }
  uint64_t v47 = [v167 count];
  char v48 = v151;
  if (!v159) {
    char v48 = 1;
  }
  if (v48)
  {
    CFArrayRef v49 = v159;
  }
  else
  {
    CFRelease(v159);
    CFArrayRef v49 = 0;
  }
  CFArrayRef v160 = v49;
  if (v175 && ([v175 _isCancelled] & 1) != 0)
  {
    int ptr = 0;
LABEL_109:
    CFAllocatorRef allocatora = 0;
    uint64_t v52 = v167;
    uint64_t v164 = (_PFArray *)(id)NSArray_EmptyArray;
    goto LABEL_147;
  }
  if (!v47) {
    goto LABEL_109;
  }
  if (v47 == 1)
  {
    uint64_t v50 = (_PFArray *)(id)[v167 objectAtIndex:0];
    if (v151)
    {
      if (cf)
      {
        CFAllocatorRef ValueAtIndex = (const __CFAllocator *)[cf objectAtIndex:0];
        if (!ValueAtIndex) {
          goto LABEL_145;
        }
      }
      else
      {
        if (!v160) {
          goto LABEL_145;
        }
        CFAllocatorRef ValueAtIndex = (const __CFAllocator *)CFArrayGetValueAtIndex(v160, 0);
        if (!ValueAtIndex) {
          goto LABEL_145;
        }
      }
      uint64_t v164 = v50;
      CFAllocatorRef allocatora = ValueAtIndex;
      uint64_t v52 = v167;
      CFRetain(ValueAtIndex);
      goto LABEL_147;
    }
LABEL_145:
    CFAllocatorRef allocatora = 0;
    uint64_t v164 = v50;
    goto LABEL_146;
  }
  uint64_t v53 = 0;
  for (uint64_t i = 0; i != v47; ++i)
    v53 += objc_msgSend((id)objc_msgSend(v167, "objectAtIndex:", i), "count");
  unint64_t v55 = (char *)PF_ALLOCATE_OBJECT_ARRAY(v53);
  if (v151) {
    unint64_t v56 = (char *)PF_ALLOCATE_OBJECT_ARRAY(v53);
  }
  else {
    unint64_t v56 = 0;
  }
  uint64_t v57 = [v167 objectAtIndex:0];
  if (v57) {
    int v58 = *(unsigned char *)(v57 + 32) & 0x3B;
  }
  else {
    int v58 = 0;
  }
  CFIndex v59 = 0;
  unsigned int v60 = v58 & 0xFFFFFFE7;
  unsigned int allocatorb = v58 & 0xFFFFFFE7 | 8;
  uint64_t v165 = v56;
  uint64_t v61 = v55;
  while (2)
  {
    uint64_t v62 = (unsigned char *)[v167 objectAtIndex:v59];
    [v62 getObjects:v55];
    uint64_t v63 = [v62 count];
    if (v62)
    {
      v62[32] &= ~2u;
      v62[32] &= ~4u;
    }
    if (v151)
    {
      if (cf)
      {
        uint64_t v64 = (void *)[cf objectAtIndex:v59];
        goto LABEL_125;
      }
      if (v160)
      {
        uint64_t v64 = (void *)CFArrayGetValueAtIndex(v160, v59);
LABEL_125:
        uint64_t v65 = v64;
      }
      else
      {
        uint64_t v65 = 0;
      }
      objc_msgSend(v65, "getObjects:range:", v56, 0, objc_msgSend(v65, "count"));
      v56 += 8 * [v65 count];
    }
    v55 += 8 * v63;
    if (v47 != ++v59) {
      continue;
    }
    break;
  }
  uint64_t v66 = 0;
  unsigned int v67 = (*(_DWORD *)(v174 + 72) >> 2) & 7;
  if (v67 > 5)
  {
    uint64_t v68 = v61;
    uint64_t v69 = v165;
    uint64_t v70 = allocatorb;
  }
  else
  {
    uint64_t v68 = v61;
    uint64_t v69 = v165;
    uint64_t v70 = allocatorb;
    if (((1 << v67) & 0x29) != 0)
    {
      if (v171) {
        uint64_t v66 = *(void *)(v171 + 32);
      }
      else {
        uint64_t v66 = 0;
      }
      uint64_t v70 = v60 | 0x28;
    }
  }
  uint64_t v164 = [[_PFArray alloc] initWithObjects:v68 count:v53 andFlags:v70 andContext:v66];
  if (v151)
  {
    uint64_t v71 = [_PFArray alloc];
    uint64_t v72 = v147 ? 11 : 8;
    uint64_t v73 = [(_PFArray *)v71 initWithObjects:v69 count:v53 andFlags:v72 andContext:0];
    CFAllocatorRef allocatora = (CFAllocatorRef)v73;
    if (v73)
    {
      uint64_t v52 = v167;
      CFRetain(v73);

      goto LABEL_147;
    }
  }
  CFAllocatorRef allocatora = 0;
LABEL_146:
  uint64_t v52 = v167;
LABEL_147:
  if (v52) {
    CFRelease(v52);
  }
  CFTypeRef v168 = [(_PFArray *)v164 count];
  if (v169 && ([v169 isCancelled] & 1) == 0)
  {
    if (v171) {
      uint64_t v80 = *(void **)(v171 + 32);
    }
    else {
      uint64_t v80 = 0;
    }
    int v81 = 2 * v161;
    if (ptr >= 2 * v161) {
      int v81 = ptr + 1;
    }
    v179[0] = MEMORY[0x1E4F143A8];
    v179[1] = 3221225472;
    v179[2] = __newFetchedRowsForFetchPlan_MT_block_invoke_70;
    v179[3] = &unk_1E544E308;
    BOOL v182 = v161 > 0 && ptr >= v161;
    v179[4] = v169;
    if (v182) {
      int v82 = v81;
    }
    else {
      int v82 = v161;
    }
    int v180 = v82;
    int v181 = ptr;
    [v80 performBlock:v179];
  }
  if (v168 != (CFTypeRef)ptr) {
    _NSCoreDataLog(1, @"result array has %lu entries, but we fetched %d rows", v74, v75, v76, v77, v78, v79, (uint64_t)v168);
  }
  if (v168)
  {
    if (v147)
    {
      unsigned int v83 = (*(_DWORD *)(v174 + 72) >> 2) & 7;
      if (v83 <= 5 && ((1 << v83) & 0x29) != 0)
      {
        [v149 drain];
        id v84 = objc_alloc_init(MEMORY[0x1E4F28B28]);
        if ((*(_DWORD *)(v174 + 72) & 0x1C) == 4)
        {
          __int16 v85 = 0;
          goto LABEL_168;
        }
        unint64_t v86 = (void *)+[_PFRoutines newArrayOfObjectIDsFromCollection:]((uint64_t)_PFRoutines, v164);
        __int16 v85 = v86;
        if ((*(_DWORD *)(v174 + 72) & 0x1C) == 4) {
LABEL_168:
        }
          unint64_t v86 = v164;
        _prefetchForFetchRequest(v86, 0, (void *)v171);

        uint64_t v149 = v84;
      }
    }
  }
  BOOL v87 = v151;
  if (!v168) {
    BOOL v87 = 0;
  }
  if (v87)
  {
    if (v153) {
      int active = +[_PFTask getNumActiveProcessors]();
    }
    else {
      int active = 1;
    }
    size_t v89 = [(_PFArray *)v164 count];
    unint64_t v90 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      unint64_t v90 = malloc_default_zone();
    }
    ptra = (unsigned __int8 *)malloc_type_zone_calloc(v90, 1uLL, v89, 0x100004077774924uLL);
    objc_opt_class();
    isKindOfClass Class = objc_opt_isKindOfClass();
    if (isKindOfClass)
    {
      uint64_t v91 = [(_PFArray *)v164 _objectsPointer];
    }
    else
    {
      uint64_t v92 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone) {
        uint64_t v92 = malloc_default_zone();
      }
      uint64_t v91 = (id *)malloc_type_zone_calloc(v92, 1uLL, 8 * v89, 0x80040B8603338uLL);
      -[_PFArray getObjects:range:](v164, "getObjects:range:", v91, 0, v89);
    }
    objc_opt_class();
    char v154 = objc_opt_isKindOfClass();
    if (v154)
    {
      id v93 = (void **)[(__CFAllocator *)allocatora _objectsPointer];
    }
    else
    {
      id v94 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone) {
        id v94 = malloc_default_zone();
      }
      id v93 = (void **)malloc_type_zone_calloc(v94, 1uLL, 8 * v89, 0x80040B8603338uLL);
      -[__CFAllocator getObjects:range:](allocatora, "getObjects:range:", v93, 0, [(__CFAllocator *)allocatora count]);
    }
    unint64_t v95 = v89 / active;
    unint64_t v96 = v89 % active;
    uint64_t v97 = active - 1;
    if (active == 1)
    {
      int v98 = 0;
    }
    else
    {
      int v98 = PF_CALLOC_SCANNED_BYTES(8 * v97);
      uint64_t v99 = 0;
      do
      {
        id v100 = PF_CALLOC_UNSCANNED_BYTES(0x30uLL);
        void *v100 = v171;
        v100[1] = v91;
        v100[2] = v93;
        v100[3] = v96 + (v99 + 1) * v95;
        v100[4] = v95;
        v100[5] = ptra;
        v98[v99++] = [[_PFTask alloc] initWithFunction:_fireFaultsOnBackgroundThread withArgument:v100 andPriority:2];
      }
      while (v97 != v99);
    }
    unint64_t v101 = v95 + v96;
    if (v171)
    {
      uint64_t v102 = *(void *)(v171 + 32);
      uint64_t v103 = *(void *)(v171 + 128);
    }
    else
    {
      uint64_t v102 = 0;
      uint64_t v103 = 0;
    }
    uint64_t v152 = v102;
    uint64_t v170 = v103;
    if (v101)
    {
      for (unint64_t j = 0; j < v101; ++j)
      {
        uint64_t v105 = (uint64_t)v91[j];
        if (((*(_DWORD *)(v105 + 16) >> 15) & 3 | 4) == 5)
        {
          long long v106 = *(void **)(v105 + 48);
          if (v106 && *v106)
          {
            char v107 = 3;
          }
          else
          {
            _PFFaultHandlerFulfillFault(v103, v105, v102, v93[j], 0);
            char v107 = 1;
          }
          ptra[j] = v107;
        }
      }
    }
    if (v98)
    {
      if (v97)
      {
        for (uint64_t k = 0; k != v97; ++k)
        {
          uint64_t v109 = v98[k];
          pthread_mutex_lock((pthread_mutex_t *)(v109 + 32));
          while (!*(_DWORD *)(v109 + 144))
            pthread_cond_wait((pthread_cond_t *)(v109 + 96), (pthread_mutex_t *)(v109 + 32));
          pthread_mutex_unlock((pthread_mutex_t *)(v109 + 32));
        }
      }
      PF_FREE_OBJECT_ARRAY(v98);
    }
    id v110 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (v89)
    {
      uint64_t v111 = MEMORY[0x1E4F1CC38];
      uint64_t v112 = MEMORY[0x1E4F1CC28];
      long long v113 = ptra;
      long long v114 = (uint64_t *)v91;
      long long v115 = v93;
      do
      {
        int v117 = *v113++;
        int v116 = v117;
        if (v117)
        {
          uint64_t v118 = v111;
          if (v116 != 1)
          {
            _PFFaultHandlerFulfillFault(v170, *v114, v152, *v115, 1);
            uint64_t v118 = v112;
          }
        }
        else
        {
          uint64_t v118 = v112;
        }
        [v110 addObject:v118];
        ++v115;
        ++v114;
        --v89;
      }
      while (v89);
    }
    -[NSSQLFetchRequestContext addFaultsThatWereFired:]((void *)v171, v110);

    long long v119 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      long long v119 = malloc_default_zone();
    }
    malloc_zone_free(v119, ptra);
    if ((isKindOfClass & 1) == 0)
    {
      long long v120 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone) {
        long long v120 = malloc_default_zone();
      }
      malloc_zone_free(v120, v91);
    }
    if ((v154 & 1) == 0)
    {
      long long v121 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone) {
        long long v121 = malloc_default_zone();
      }
      malloc_zone_free(v121, v93);
    }
  }
  if (allocatora) {
    CFRelease(allocatora);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v173 >= 2)
  {
    _NSCoreDataLog(4, @"fetch using %@ returned %lu rows", v74, v75, v76, v77, v78, v79, (uint64_t)v148);
    if (v173 >= 3)
    {
      if (v164) {
        _NSCoreDataLog(4, @" with values: %@", v122, v123, v124, v125, v126, v127, (uint64_t)v164);
      }
    }
  }
  [v149 drain];
  if (theArray) {
    CFRelease(theArray);
  }
  if (v160) {
    CFRelease(v160);
  }
  if (v175) {
    char v128 = [v175 _isCancelled];
  }
  else {
    char v128 = 0;
  }
  [*(id *)(v174 + 8) _setAsyncResultHandle:0];
  [0 drain];
  if (v173 >= 1)
  {
    if (v175) {
      char v129 = v128;
    }
    else {
      char v129 = 0;
    }
    if (v129)
    {
      if (v171 && *(unsigned char *)(v171 + 80))
      {
        double v136 = CFAbsoluteTimeGetCurrent();
        int v137 = @"Fetch cancelled.  Total fetch execution time: \x1B[31m%.4f\x1B[0ms.";
      }
      else
      {
        double v136 = CFAbsoluteTimeGetCurrent();
        int v137 = @"Fetch cancelled.  Total fetch execution time: %.4fs.";
      }
      _NSCoreDataLog(4, (uint64_t)v137, v130, v131, v132, v133, v134, v135, COERCE__INT64(v136 - Current));
    }
    else
    {
      if (v171 && *(unsigned char *)(v171 + 80))
      {
        double v138 = CFAbsoluteTimeGetCurrent();
        [(_PFArray *)v164 count];
        uint64_t v145 = @"total fetch execution time: \x1B[31m%.4f\x1B[0ms for %d rows.";
      }
      else
      {
        double v138 = CFAbsoluteTimeGetCurrent();
        [(_PFArray *)v164 count];
        uint64_t v145 = @"total fetch execution time: %.4fs for %d rows.";
      }
      _NSCoreDataLog(4, (uint64_t)v145, v139, v140, v141, v142, v143, v144, COERCE__INT64(v138 - Current));
      if ((int)-[NSSQLStoreRequestContext debugLogLevel](v171) >= 4) {
        -[NSSQLiteConnection logQueryPlanForStatement:](v158, v148);
      }
    }
  }
  return v164;
}

void sub_18ABC3EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *exc_buf, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(a1);
      if (!a25) {
        JUMPOUT(0x18ABC3CCCLL);
      }
      JUMPOUT(0x18ABC3CC4);
    }
    objc_begin_catch(a1);

    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_18ABC42C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ABC4280);
  }
  _Unwind_Resume(a1);
}

void sub_18ABC42DC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ABC42F0);
  }
  JUMPOUT(0x18ABC4448);
}

void sub_18ABC440C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *exc_buf, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18ABC3190);
  }
  _Unwind_Resume(a1);
}

void sub_18ABC4428(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ABC4460);
  }
  _Unwind_Resume(a1);
}

void sub_18ABC4440(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ABC4448);
  }
  objc_terminate();
}

void sub_18ABC4454(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ABC445CLL);
  }
  _Unwind_Resume(a1);
}

void gutsOfBlockToNSPersistentStoreCoordinatorPerform(void (***a1)(void))
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (unint64_t)a1[1];
  aBlocuint64_t k = *a1;
  int v3 = a1[2];
  if (_PF_Threading_Debugging_level >= 2) {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 16));
  }
  atomic_store(1u, (unsigned __int8 *)(v2 + 28));
  if ((v3 & 4) != 0)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F28B28]);
    if (((unsigned __int16)v3 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  id v4 = 0;
  if (((unsigned __int16)v3 & 0x2000) != 0) {
LABEL_7:
  }
    __dmb(0xBu);
LABEL_8:
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v6 = *(void *)(StatusReg + 712);
  uint64_t v7 = (uint64_t)a1[3];
  uint64_t v42 = a1;
  if (v6 == v2)
  {
    unint64_t v8 = 0;
  }
  else
  {
    if (v7)
    {
      unint64_t v8 = atomic_load((unint64_t *)(v7 + 8));
      unint64_t v9 = v8;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v7 + 8), &v9, v2);
      if (v9 != v8)
      {
        do
        {
          uint64_t v10 = [NSString stringWithUTF8String:"Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)"];
          atomic_load((unint64_t *)(v7 + 8));
          _NSCoreDataLog(17, v10, v11, v12, v13, v14, v15, v16, v7);
          uint64_t v17 = __pflogFaultLog;
          if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
          {
            unint64_t v19 = atomic_load((unint64_t *)(v7 + 8));
            *(_DWORD *)buf = 134218752;
            uint64_t v45 = v7;
            __int16 v46 = 2048;
            unint64_t v47 = v2;
            __int16 v48 = 2048;
            unint64_t v49 = v8;
            __int16 v50 = 2048;
            unint64_t v51 = v19;
            _os_log_fault_impl(&dword_18AB82000, v17, OS_LOG_TYPE_FAULT, "CoreData: Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)", buf, 0x2Au);
          }
          unint64_t v8 = atomic_load((unint64_t *)(v7 + 8));
          unint64_t v18 = v8;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v7 + 8), &v18, v2);
        }
        while (v18 != v8);
      }
    }
    else
    {
      unint64_t v8 = 0;
    }
    *(void *)(StatusReg + 712) = v2;
  }
  aBlock[2]();
  if (v3)
  {
    _Block_release(aBlock);
    CFRelease((CFTypeRef)v2);
    free(a1);
    uint64_t v42 = 0;
  }
  if ((v3 & 4) != 0) {
    [v4 drain];
  }
  if (v6 != v2)
  {
    *(void *)(StatusReg + 712) = v6;
    if (v7)
    {
      unint64_t v20 = v2;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v7 + 8), &v20, v8);
      if (v20 != v2)
      {
        uint64_t v21 = [NSString stringWithUTF8String:"Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)"];
        atomic_load((unint64_t *)(v7 + 8));
        _NSCoreDataLog(17, v21, v22, v23, v24, v25, v26, v27, v7);
        int v28 = __pflogFaultLog;
        if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
        {
          unint64_t v41 = atomic_load((unint64_t *)(v7 + 8));
          *(_DWORD *)buf = 134218752;
          uint64_t v45 = v7;
          __int16 v46 = 2048;
          unint64_t v47 = v8;
          __int16 v48 = 2048;
          unint64_t v49 = v2;
          __int16 v50 = 2048;
          unint64_t v51 = v41;
          _os_log_fault_impl(&dword_18AB82000, v28, OS_LOG_TYPE_FAULT, "CoreData: Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)", buf, 0x2Au);
        }
        unint64_t v29 = atomic_load((unint64_t *)(v7 + 8));
        unint64_t v30 = v29;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v7 + 8), &v30, v8);
        if (v30 != v29)
        {
          do
          {
            uint64_t v31 = [NSString stringWithUTF8String:"Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)"];
            atomic_load((unint64_t *)(v7 + 8));
            _NSCoreDataLog(17, v31, v32, v33, v34, v35, v36, v37, v7);
            uint64_t v38 = __pflogFaultLog;
            if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
            {
              unint64_t v40 = atomic_load((unint64_t *)(v7 + 8));
              *(_DWORD *)buf = 134218752;
              uint64_t v45 = v7;
              __int16 v46 = 2048;
              unint64_t v47 = v8;
              __int16 v48 = 2048;
              unint64_t v49 = v29;
              __int16 v50 = 2048;
              unint64_t v51 = v40;
              _os_log_fault_impl(&dword_18AB82000, v38, OS_LOG_TYPE_FAULT, "CoreData: Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)", buf, 0x2Au);
            }
            unint64_t v29 = atomic_load((unint64_t *)(v7 + 8));
            unint64_t v39 = v29;
            atomic_compare_exchange_strong((atomic_ullong *volatile)(v7 + 8), &v39, v8);
          }
          while (v39 != v29);
        }
      }
    }
  }
  if ((v3 & 1) == 0)
  {
    if (((unsigned __int16)v3 & 0x2000) == 0) {
      return;
    }
LABEL_32:
    __dmb(0xBu);
    return;
  }
  free(v42);
  if (((unsigned __int16)v3 & 0x2000) != 0) {
    goto LABEL_32;
  }
}

void sub_18ABC48AC()
{
}

void sub_18ABC48B4()
{
}

#error "18ABC4914: call analysis failed (funcsize=93)"

void sub_18ABC4A50(void *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18ABC49B0);
  }
  JUMPOUT(0x18ABC4B58);
}

#error "18ABC4AC0: call analysis failed (funcsize=26)"

void sub_18ABC4B10(void *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18ABC468CLL);
  }
  JUMPOUT(0x18ABC4B58);
}

void sub_18ABC4B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  if (v15) {
    objc_end_catch();
  }
  if (a15) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

_PFArray *_newFetchedRowsForRequest(uint64_t a1)
{
  v195[1] = *MEMORY[0x1E4F143B8];
  if (!a1 || !*(void *)(a1 + 120))
  {
LABEL_12:
    uint64_t v12 = NSArray_EmptyArray;
    return (_PFArray *)v12;
  }
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = [(id)a1 request];
  uint64_t v177 = a1;
  uint64_t v4 = [(id)a1 fetchStatement];
  if (!v4 || *(unsigned char *)(v4 + 40))
  {
    if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) >= 1)
    {
      if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) >= 2) {
        _NSCoreDataLog(4, @"logically false fetch request %@ short circuits.", v5, v6, v7, v8, v9, v10, v3);
      }
      if (*(unsigned char *)(a1 + 80)) {
        uint64_t v11 = @"total fetch execution time: \x1B[31m%.4f\x1B[0ms for %d rows.";
      }
      else {
        uint64_t v11 = @"total fetch execution time: %.4fs for %d rows.";
      }
      _NSCoreDataLog(4, (uint64_t)v11, v5, v6, v7, v8, v9, v10, 0);
    }
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 81))
  {
    if ((*(_DWORD *)(v2 + 72) & 1) == 0 && (*(_DWORD *)(v2 + 72) & 0x18) != 16)
    {
      return newFetchedRowsForFetchPlan_MT(a1);
    }
  }
  uint64_t v15 = *(void *)(a1 + 136);
  int v163 = (void *)[(id)a1 fetchStatement];
  uint64_t v174 = *(void **)(a1 + 24);
  uint64_t v179 = v15;
  if ((*(_DWORD *)(v15 + 72) & 2) != 0) {
    unsigned int v16 = 4096;
  }
  else {
    unsigned int v16 = 512;
  }
  if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) < 1) {
    double Current = 0.0;
  }
  else {
    double Current = CFAbsoluteTimeGetCurrent();
  }
  uint64_t v18 = v15;
  if (*(_DWORD *)(v15 + 16)) {
    int v19 = *(_DWORD *)(v15 + 16);
  }
  else {
    int v19 = -1;
  }
  uint64_t v20 = +[NSSQLCore bufferedAllocationsOverride];
  if (v20 < 1
    || (*(_DWORD *)(v179 + 72) & 0x1C) != 0x10
    || (uint64_t v21 = *(void *)(v179 + 40)) != 0 && (v18 = v179, *(_DWORD *)(v21 + 184) >> 3 >= 0x84Du))
  {
    BOOL v22 = [*(id *)(v18 + 8) allocationType] == 1 && (*(_DWORD *)(v18 + 72) & 0x1C) == 16;
  }
  else
  {
    BOOL v22 = 1;
  }
  self;
  if (v20 == 2 && (*(_DWORD *)(v179 + 72) & 0x1C) == 0x10)
  {
    uint64_t v23 = *(void *)(v179 + 40);
    if (v23)
    {
      int v170 = 1;
      if (_CoreData_debugVMBufferAllocations || *(_DWORD *)(v23 + 184) >> 3 < 0x84Du) {
        goto LABEL_50;
      }
      goto LABEL_48;
    }
  }
  else if (!_CoreData_debugVMBufferAllocations)
  {
LABEL_48:
    BOOL v24 = [*(id *)(v179 + 8) allocationType] == 2;
    goto LABEL_49;
  }
  BOOL v24 = 1;
LABEL_49:
  int v170 = v24;
LABEL_50:
  self;
  BOOL v31 = v20 != 3 && _CoreData_debugOneBufferAllocations == 0;
  int v32 = v31;
  if (!v31 && v170) {
    _NSCoreDataLog(1, @"VM Memory is already One Buffer Row that grows!!!", v25, v26, v27, v28, v29, v30, v158);
  }
  self;
  BOOL v39 = v20 != 4 && _CoreData_debuguseManyResultSetsAllocations == 0;
  int v40 = !v39;
  int v41 = v170;
  if (v39) {
    int v41 = 0;
  }
  if (v41 == 1) {
    _NSCoreDataLog(1, @"VM Memory does not support multiple result sets!!!", v33, v34, v35, v36, v37, v38, v158);
  }
  if ((*(_DWORD *)(v179 + 72) & 2) == 0 && (*(_DWORD *)(v179 + 72) & 0x18) != 0x10) {
    [*(id *)(v179 + 8) _disablePersistentStoreResultCaching];
  }
  int v166 = *(unsigned __int8 *)(v177 + 202);
  uint64_t v178 = (void *)[*(id *)(v179 + 8) _asyncResultHandle];
  uint64_t v42 = (void *)[v178 progress];
  uint64_t v43 = v42;
  if (v42)
  {
    int v44 = [v42 totalUnitCount];
    int v45 = v44 & ~(v44 >> 31);
  }
  else
  {
    int v45 = 0;
  }
  int v175 = v170 | v22;
  id v46 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  id v172 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if ((*(_DWORD *)(v179 + 72) & 0x1C) == 0xC) {
    id v169 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  }
  else {
    id v169 = 0;
  }
  -[NSSQLiteConnection selectRowsWithStatement:cached:](v174, v163, v166 != 0);
  double v47 = CFAbsoluteTimeGetCurrent();
  int v173 = v45;
  id v167 = v46;
  int v176 = 0;
  uint64_t v48 = 0;
  unsigned int v49 = 0;
  if ((int)-[NSSQLStoreRequestContext debugLogLevel](v177) <= 0) {
    double v50 = 0.0;
  }
  else {
    double v50 = v47 - Current;
  }
  int v51 = v40 | v175 ^ 1;
LABEL_82:
  int v180 = 0;
  unsigned int v52 = v19;
  do
  {
    if (v175)
    {
      Initialize = (double *)v180;
      if (!v180)
      {
        uint64_t v54 = *(void **)(v179 + 8);
        if (v170) {
          Initialize = (double *)bufferResultSetAllocateWithVMMemory([v54 allocationSize], objc_msgSend(*(id *)(v179 + 8), "purgeableResult"));
        }
        else {
          Initialize = (double *)bufferResultSetAllocateInitialize([v54 allocationSize], v179);
        }
        Initialize[1] = v47;
      }
    }
    else
    {
      Initialize = (double *)fetchResultSetAllocateInitialize(v49, (*(_DWORD *)(v179 + 72) >> 5) & 1);
      Initialize[1] = v47;
      *(_DWORD *)Initialize = v176;
    }
    int v180 = (unsigned int *)Initialize;
    if (v52 >= v16) {
      unsigned int v55 = v16;
    }
    else {
      unsigned int v55 = v52;
    }
    if (v52 >= v16) {
      int v19 = v52 - v16;
    }
    else {
      int v19 = 0;
    }
    *(_DWORD *)(v179 + 16) = v55;
    if ((int)-[NSSQLStoreRequestContext debugLogLevel](v177) < 1) {
      double v56 = 0.0;
    }
    else {
      double v56 = CFAbsoluteTimeGetCurrent();
    }
    if (v178 && [v178 _isCancelled])
    {
      v176 += v48;
      uint64_t v57 = 12;
      if (v175) {
        uint64_t v57 = 10;
      }
      int v58 = (v180[v57] & 1) == 0;
LABEL_110:
      v58 &= ~[v178 _isCancelled];
      goto LABEL_111;
    }
    if (v175) {
      int v59 = -[NSSQLiteConnection fetchBufferResultSet:usingFetchPlan:]((uint64_t)v174, (uint64_t)v180, v179);
    }
    else {
      int v59 = -[NSSQLiteConnection fetchResultSet:usingFetchPlan:]((uint64_t)v174, (uint64_t)v180, v179);
    }
    uint64_t v48 = v59;
    v176 += v59;
    uint64_t v60 = 12;
    if (v175) {
      uint64_t v60 = 10;
    }
    int v58 = (v180[v60] & 1) == 0;
    if (v178) {
      goto LABEL_110;
    }
LABEL_111:
    if (v43 && ([v43 isCancelled] & 1) == 0)
    {
      int v61 = v173;
      int v62 = 2 * v173;
      uint64_t v63 = *(void **)(v179 + 48);
      v190[0] = MEMORY[0x1E4F143A8];
      v190[1] = 3221225472;
      if (v176 >= 2 * v173) {
        int v62 = v176 + 1;
      }
      v190[2] = ___newFetchedRowsForFetchPlan_ST_block_invoke;
      v190[3] = &unk_1E544E308;
      BOOL v193 = v173 > 0 && v176 >= v173;
      v190[4] = v43;
      if (v193) {
        int v61 = v62;
      }
      int v173 = v61;
      int v191 = v61;
      int v192 = v176;
      [v63 performBlock:v190];
    }
    if ((int)-[NSSQLStoreRequestContext debugLogLevel](v177) >= 1) {
      double v50 = v50 + CFAbsoluteTimeGetCurrent() - v56;
    }
    if (v51)
    {
      if (v48)
      {
        v194[0] = 0;
        if (v175)
        {
          uint64_t v65 = _prepareLargeDictionaryResults(v180, v177, 1);
        }
        else if ((*(_DWORD *)(v179 + 72) & 0x18) == 0x10)
        {
          uint64_t v65 = _prepareDictionaryResults((uint64_t)v180, v177);
        }
        else
        {
          uint64_t v65 = _prepareResultsFromResultSet_0((uint64_t)v180, (uint64_t *)v194, v177);
        }
        uint64_t v66 = (void *)v65;
        [v172 addObject:v65];
        if (v194[0]) {
          objc_msgSend(v169, "addObject:");
        }

        if ((v175 & 1) == 0)
        {
LABEL_137:
          unsigned int v67 = v180[4];
          unsigned int v68 = v180[5];
          fetchResultSetDeallocate((uint64_t)v180);
          unsigned int v49 = v68 * v67;
        }
      }
      else if ((v175 & 1) == 0)
      {
        goto LABEL_137;
      }
      if (v52 > v16) {
        char v69 = v58;
      }
      else {
        char v69 = 0;
      }
      if ((v69 & 1) == 0)
      {
        int v180 = 0;
        goto LABEL_146;
      }
      goto LABEL_82;
    }
    if (v52 > v16) {
      char v64 = v58;
    }
    else {
      char v64 = 0;
    }
    unsigned int v52 = v19;
  }
  while ((v64 & 1) != 0);
  uint64_t v70 = _prepareLargeDictionaryResults(v180, v177, 1);
  uint64_t v71 = (void *)v70;
  if (((v32 | v170) & 1) == 0)
  {
    v195[0] = v70;
    uint64_t v72 = _prepareBufferedDictionaryResult((void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v195 count:1], v177);

    uint64_t v71 = (void *)v72;
  }
  [v172 addObject:v71];

LABEL_146:
  -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v174, v166 != 0);
  if ((int)-[NSSQLStoreRequestContext debugLogLevel](v177) >= 1)
  {
    if (*(unsigned char *)(v177 + 80)) {
      uint64_t v79 = @"sql connection fetch time: \x1B[31m%.4f\x1B[0ms";
    }
    else {
      uint64_t v79 = @"sql connection fetch time: %.4fs";
    }
    _NSCoreDataLog(4, (uint64_t)v79, v73, v74, v75, v76, v77, v78, *(uint64_t *)&v50);
  }
  uint64_t v80 = [v172 count];
  uint64_t v181 = *(void *)(v179 + 48);
  uint64_t v81 = *(void *)(v177 + 128);
  if (v178 && ([v178 _isCancelled] & 1) != 0)
  {
    int v176 = 0;
    goto LABEL_156;
  }
  uint64_t v165 = v43;
  if (v80 == 1)
  {
    long long v106 = (_PFArray *)(id)[v172 objectAtIndex:0];
    if (v169)
    {
      char v107 = (void *)[v169 objectAtIndex:0];
      int v82 = malloc_type_malloc([(_PFArray *)v106 count], 0x100004077774924uLL);
      long long v188 = 0u;
      long long v189 = 0u;
      long long v186 = 0u;
      long long v187 = 0u;
      uint64_t v108 = [(_PFArray *)v106 countByEnumeratingWithState:&v186 objects:v194 count:16];
      if (v108)
      {
        uint64_t v109 = 0;
        int v110 = 0;
        uint64_t v111 = *(void *)v187;
        do
        {
          for (uint64_t i = 0; i != v108; ++i)
          {
            if (*(void *)v187 != v111) {
              objc_enumerationMutation(v106);
            }
            uint64_t v113 = *(void *)(*((void *)&v186 + 1) + 8 * i);
            v82[(v110 + i)] = (*(_DWORD *)(v113 + 16) & 0x18000) == 0x8000;
            _PFFaultHandlerFulfillFault(v81, v113, v181, (void *)[v107 objectAtIndex:v109 + i], 0);
          }
          uint64_t v108 = [(_PFArray *)v106 countByEnumeratingWithState:&v186 objects:v194 count:16];
          v109 += i;
          v110 += i;
        }
        while (v108);
      }
      id v84 = v106;
      uint64_t v43 = v165;
    }
    else
    {
      int v82 = 0;
      id v84 = v106;
    }
  }
  else
  {
    if (!v80)
    {
LABEL_156:
      int v82 = 0;
      unsigned int v83 = (_PFArray *)(id)NSArray_EmptyArray;
      goto LABEL_157;
    }
    if (v175)
    {
      int v82 = 0;
      unsigned int v83 = (_PFArray *)_prepareBufferedDictionaryResult(v172, v177);
LABEL_157:
      id v84 = v83;
    }
    else
    {
      size_t v139 = 0;
      for (uint64_t j = 0; j != v80; ++j)
        v139 += objc_msgSend((id)objc_msgSend(v172, "objectAtIndex:", j), "count");
      uint64_t v141 = malloc_type_malloc(v139, 0x100004077774924uLL);
      uint64_t v142 = v139;
      uint64_t v143 = v141;
      uint64_t v160 = v142;
      int v161 = (char *)PF_ALLOCATE_OBJECT_ARRAY(v142);
      uint64_t v144 = [v172 objectAtIndex:0];
      unint64_t v145 = 0x1E911F000uLL;
      if (v144) {
        unsigned int v159 = *(unsigned char *)(v144 + 32) & 0x3B;
      }
      else {
        unsigned int v159 = 0;
      }
      int v146 = 0;
      uint64_t v147 = 0;
      int v148 = v161;
      uint64_t v162 = v80;
      do
      {
        uint64_t v149 = (void *)[v172 objectAtIndex:v147];
        [v149 getObjects:v148];
        uint64_t v150 = [v149 count];
        if (v149)
        {
          *((unsigned char *)v149 + *(int *)(v145 + 1916)) &= ~2u;
          *((unsigned char *)v149 + *(int *)(v145 + 1916)) &= ~4u;
        }
        if (v169)
        {
          uint64_t v168 = v150;
          uint64_t v171 = v148;
          BOOL v151 = (void *)[v169 objectAtIndex:v147];
          long long v188 = 0u;
          long long v189 = 0u;
          long long v186 = 0u;
          long long v187 = 0u;
          uint64_t v152 = [v149 countByEnumeratingWithState:&v186 objects:v194 count:16];
          if (v152)
          {
            uint64_t v164 = v147;
            uint64_t v153 = 0;
            uint64_t v154 = *(void *)v187;
            do
            {
              uint64_t v155 = 0;
              int v156 = v146;
              do
              {
                if (*(void *)v187 != v154) {
                  objc_enumerationMutation(v149);
                }
                uint64_t v157 = *(void *)(*((void *)&v186 + 1) + 8 * v155);
                v143[(v156 + v155)] = (*(_DWORD *)(v157 + 16) & 0x18000) == 0x8000;
                _PFFaultHandlerFulfillFault(v81, v157, v181, (void *)[v151 objectAtIndex:v153 + v155++], 0);
              }
              while (v152 != v155);
              uint64_t v152 = [v149 countByEnumeratingWithState:&v186 objects:v194 count:16];
              v153 += v155;
              int v146 = v156 + v155;
            }
            while (v152);
            int v146 = v156 + v155;
            uint64_t v147 = v164;
            uint64_t v43 = v165;
            uint64_t v80 = v162;
            unint64_t v145 = 0x1E911F000;
          }
          else
          {
            uint64_t v43 = v165;
            uint64_t v80 = v162;
          }
          int v148 = v171;
          uint64_t v150 = v168;
        }
        v148 += 8 * v150;
        ++v147;
      }
      while (v147 != v80);
      id v84 = [[_PFArray alloc] initWithObjects:v161 count:v160 andFlags:v159 andContext:v181];
      int v82 = v143;
    }
  }
  uint64_t v91 = [(_PFArray *)v84 count];
  if (v43 && ([v43 isCancelled] & 1) == 0)
  {
    int v92 = 2 * v173;
    if (v176 >= 2 * v173) {
      int v92 = v176 + 1;
    }
    id v93 = *(void **)(v179 + 48);
    v182[0] = MEMORY[0x1E4F143A8];
    v182[1] = 3221225472;
    v182[2] = ___newFetchedRowsForFetchPlan_ST_block_invoke_2;
    v182[3] = &unk_1E544E308;
    BOOL v185 = v173 > 0 && v176 >= v173;
    v182[4] = v43;
    if (v185) {
      int v94 = v92;
    }
    else {
      int v94 = v173;
    }
    int v183 = v94;
    int v184 = v176;
    [v93 performBlock:v182];
  }
  if (v91 != v176) {
    _NSCoreDataLog(1, @"result array has %lu entries, but we fetched %d rows", v85, v86, v87, v88, v89, v90, v91);
  }
  if ((int)-[NSSQLStoreRequestContext debugLogLevel](v177) >= 2)
  {
    id v95 = objc_alloc_init(MEMORY[0x1E4F28E78]);
    [v95 appendFormat:@"fetch using %@ returned %lu rows", v163, v91];
    if ((int)-[NSSQLStoreRequestContext debugLogLevel](v177) >= 3) {
      [v95 appendFormat:@" with values: %@", v84];
    }
    _NSCoreDataLog(4, @"%@", v96, v97, v98, v99, v100, v101, (uint64_t)v95);
  }
  uint64_t v102 = [*(id *)(v179 + 8) relationshipKeyPathsForPrefetching];
  unsigned int v103 = *(_DWORD *)(v179 + 72);
  if (v91)
  {
    if (v102)
    {
      unsigned int v104 = (v103 >> 2) & 7;
      if (v104 <= 5 && ((1 << v104) & 0x29) != 0)
      {
        if ((*(_DWORD *)(v179 + 72) & 0x1C) == 4)
        {
          uint64_t v105 = 0;
          goto LABEL_190;
        }
        long long v114 = (void *)+[_PFRoutines newArrayOfObjectIDsFromCollection:]((uint64_t)_PFRoutines, v84);
        uint64_t v105 = v114;
        if ((*(_DWORD *)(v179 + 72) & 0x1C) == 4) {
LABEL_190:
        }
          long long v114 = v84;
        _prefetchForFetchRequest(v114, 0, (void *)v177);

        unsigned int v103 = *(_DWORD *)(v179 + 72);
      }
    }
  }
  if ((v103 & 0x1C) == 0xC && v82)
  {
    long long v115 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", -[_PFArray count](v84, "count"));
    unint64_t v116 = 0;
    uint64_t v117 = MEMORY[0x1E4F1CC38];
    uint64_t v118 = MEMORY[0x1E4F1CC28];
    while (v116 < [(_PFArray *)v84 count])
    {
      if (v82[v116]) {
        uint64_t v119 = v117;
      }
      else {
        uint64_t v119 = v118;
      }
      [v115 addObject:v119];
      ++v116;
    }
    -[NSSQLFetchRequestContext addFaultsThatWereFired:]((void *)v177, v115);
  }
  [v167 drain];

  if (v178) {
    char v120 = [v178 _isCancelled];
  }
  else {
    char v120 = 0;
  }
  [*(id *)(v179 + 8) _setAsyncResultHandle:0];
  [0 drain];
  char v121 = v175;
  if (!v180) {
    char v121 = 1;
  }
  if ((v121 & 1) == 0) {
    fetchResultSetDeallocate((uint64_t)v180);
  }
  if (v82) {
    free(v82);
  }
  if ((int)-[NSSQLStoreRequestContext debugLogLevel](v177) >= 1)
  {
    if (v178) {
      char v122 = v120;
    }
    else {
      char v122 = 0;
    }
    if (v122)
    {
      if (*(unsigned char *)(v177 + 80))
      {
        double v129 = CFAbsoluteTimeGetCurrent();
        uint64_t v130 = @"Fetch cancelled.  Total fetch execution time: \x1B[31m%.4f\x1B[0ms.";
      }
      else
      {
        double v129 = CFAbsoluteTimeGetCurrent();
        uint64_t v130 = @"Fetch cancelled.  Total fetch execution time: %.4fs.";
      }
      _NSCoreDataLog(4, (uint64_t)v130, v123, v124, v125, v126, v127, v128, COERCE__INT64(v129 - Current));
    }
    else
    {
      if (*(unsigned char *)(v177 + 80))
      {
        double v131 = CFAbsoluteTimeGetCurrent();
        [(_PFArray *)v84 count];
        double v138 = @"total fetch execution time: \x1B[31m%.4f\x1B[0ms for %d rows.";
      }
      else
      {
        double v131 = CFAbsoluteTimeGetCurrent();
        [(_PFArray *)v84 count];
        double v138 = @"total fetch execution time: %.4fs for %d rows.";
      }
      _NSCoreDataLog(4, (uint64_t)v138, v132, v133, v134, v135, v136, v137, COERCE__INT64(v131 - Current));
      if ((int)-[NSSQLStoreRequestContext debugLogLevel](v177) >= 4) {
        -[NSSQLiteConnection logQueryPlanForStatement:]((uint64_t)v174, v163);
      }
    }
  }
  return v84;
}

void sub_18ABC60CC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18ABC5CC8);
    }
    objc_begin_catch(exc_buf);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ABC6250(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ABC6214);
  }
  JUMPOUT(0x18ABC6188);
}

void sub_18ABC64A8(_Unwind_Exception *a1)
{
}

void sub_18ABC64C8(void *a1)
{
}

void fetchResultSetDeallocate(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 20);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone) {
        uint64_t v5 = malloc_default_zone();
      }
      malloc_zone_free(v5, *(void **)(*(void *)(a1 + 64) + v3));
      v3 += 8;
    }
    while (v4 != v3);
  }
  uint64_t v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v6 = malloc_default_zone();
  }
  malloc_zone_free(v6, *(void **)(a1 + 64));
  uint64_t v7 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v7 = malloc_default_zone();
  }
  malloc_zone_free(v7, *(void **)(a1 + 72));
  uint64_t v8 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v8 = malloc_default_zone();
  }

  malloc_zone_free(v8, (void *)a1);
}

_DWORD *fetchResultSetAllocateInitialize(unsigned int a1, int a2)
{
  if (a1 >= 0x20000) {
    unsigned int v3 = 0x20000;
  }
  else {
    unsigned int v3 = a1;
  }
  if (a1) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = 15359;
  }
  uint64_t v5 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v5 = malloc_default_zone();
  }
  uint64_t v6 = malloc_type_zone_calloc(v5, 1uLL, 0x60uLL, 0x10800407186F754uLL);
  v6[4] = v4;
  v6[5] = 1;
  uint64_t v7 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v7 = malloc_default_zone();
  }
  uint64_t v8 = malloc_type_zone_malloc(v7, 0x10uLL, 0x80040B8603338uLL);
  *((void *)v6 + 8) = v8;
  v8[1] = 0;
  uint64_t v9 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (a2)
  {
    if (!_PF_Private_Malloc_Zone) {
      uint64_t v9 = malloc_default_zone();
    }
    uint64_t v10 = malloc_type_zone_calloc(v9, 1uLL, v4, 0xA3A3E3FEuLL);
  }
  else
  {
    if (!_PF_Private_Malloc_Zone) {
      uint64_t v9 = malloc_default_zone();
    }
    uint64_t v10 = malloc_type_zone_malloc(v9, v4, 0x6917FCE5uLL);
  }
  *((void *)v6 + 10) = v10;
  **((void **)v6 + 8) = v10;
  *((void *)v6 + 11) = *((void *)v6 + 10);
  v6[6] = 0;
  *((void *)v6 + 4) = 0;
  uint64_t v11 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v11 = malloc_default_zone();
  }
  uint64_t v12 = malloc_type_zone_malloc(v11, 0x10uLL, 0x100004000313F17uLL);
  *((void *)v6 + 9) = v12;
  *uint64_t v12 = v4;
  v12[1] = 0;
  uint64_t v13 = (void *)*((void *)v6 + 8);
  *((void *)v6 + 11) = *v13;
  uint64_t v14 = (_OWORD *)(v13[v6[6]] + *((void *)v6 + 4));
  _OWORD *v14 = 0u;
  v14[1] = 0u;
  v6[7] = -1;
  *(_DWORD *)uint64_t v14 = -1;
  if (a2) {
    int v15 = 4;
  }
  else {
    int v15 = 0;
  }
  v6[12] = v6[12] & 0xFFFFFFFB | v15;
  return v6;
}

void sub_18ABC6828(_Unwind_Exception *a1)
{
}

void sub_18ABC684C(void *a1)
{
}

void internalBlockToNSManagedObjectContextPerform(uint64_t *a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v4 = *(void *)(StatusReg + 712);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(v5 + 16);
    if (v6) {
      BOOL v7 = _PF_Threading_Debugging_level < 2;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      dispatch_assert_queue_V2(v6);
    }
    if (v4 != v2)
    {
      unint64_t v8 = atomic_load((unint64_t *)(v5 + 8));
      unint64_t v9 = v8;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v5 + 8), &v9, v2);
      if (v9 != v8)
      {
        do
        {
          uint64_t v10 = [NSString stringWithUTF8String:"Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)"];
          atomic_load((unint64_t *)(v5 + 8));
          _NSCoreDataLog(17, v10, v11, v12, v13, v14, v15, v16, v5);
          uint64_t v17 = __pflogFaultLog;
          if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
          {
            unint64_t v19 = atomic_load((unint64_t *)(v5 + 8));
            *(_DWORD *)buf = 134218752;
            uint64_t v44 = v5;
            __int16 v45 = 2048;
            unint64_t v46 = v2;
            __int16 v47 = 2048;
            unint64_t v48 = v8;
            __int16 v49 = 2048;
            unint64_t v50 = v19;
            _os_log_fault_impl(&dword_18AB82000, v17, OS_LOG_TYPE_FAULT, "CoreData: Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)", buf, 0x2Au);
          }
          unint64_t v8 = atomic_load((unint64_t *)(v5 + 8));
          unint64_t v18 = v8;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v5 + 8), &v18, v2);
        }
        while (v18 != v8);
      }
      goto LABEL_14;
    }
    unint64_t v8 = 0;
LABEL_16:
    char v20 = 1;
    goto LABEL_17;
  }
  unint64_t v8 = 0;
  if (v4 == v2) {
    goto LABEL_16;
  }
LABEL_14:
  char v20 = 0;
  *(void *)(StatusReg + 712) = v2;
LABEL_17:
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  if ((v20 & 1) == 0)
  {
    *(void *)(StatusReg + 712) = v4;
    if (v5)
    {
      unint64_t v21 = v2;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v5 + 8), &v21, v8);
      if (v21 != v2)
      {
        uint64_t v22 = [NSString stringWithUTF8String:"Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)"];
        atomic_load((unint64_t *)(v5 + 8));
        _NSCoreDataLog(17, v22, v23, v24, v25, v26, v27, v28, v5);
        uint64_t v29 = __pflogFaultLog;
        if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
        {
          unint64_t v42 = atomic_load((unint64_t *)(v5 + 8));
          *(_DWORD *)buf = 134218752;
          uint64_t v44 = v5;
          __int16 v45 = 2048;
          unint64_t v46 = v8;
          __int16 v47 = 2048;
          unint64_t v48 = v2;
          __int16 v49 = 2048;
          unint64_t v50 = v42;
          _os_log_fault_impl(&dword_18AB82000, v29, OS_LOG_TYPE_FAULT, "CoreData: Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)", buf, 0x2Au);
        }
        unint64_t v30 = atomic_load((unint64_t *)(v5 + 8));
        unint64_t v31 = v30;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v5 + 8), &v31, v8);
        if (v31 != v30)
        {
          do
          {
            uint64_t v32 = [NSString stringWithUTF8String:"Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)"];
            atomic_load((unint64_t *)(v5 + 8));
            _NSCoreDataLog(17, v32, v33, v34, v35, v36, v37, v38, v5);
            BOOL v39 = __pflogFaultLog;
            if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
            {
              unint64_t v41 = atomic_load((unint64_t *)(v5 + 8));
              *(_DWORD *)buf = 134218752;
              uint64_t v44 = v5;
              __int16 v45 = 2048;
              unint64_t v46 = v8;
              __int16 v47 = 2048;
              unint64_t v48 = v30;
              __int16 v49 = 2048;
              unint64_t v50 = v41;
              _os_log_fault_impl(&dword_18AB82000, v39, OS_LOG_TYPE_FAULT, "CoreData: Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)", buf, 0x2Au);
            }
            unint64_t v30 = atomic_load((unint64_t *)(v5 + 8));
            unint64_t v40 = v30;
            atomic_compare_exchange_strong((atomic_ullong *volatile)(v5 + 8), &v40, v8);
          }
          while (v40 != v30);
        }
      }
    }
  }
}

void sub_18ABC6BD4(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18ABC71F4(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18ABC7208(_Unwind_Exception *a1)
{
}

void sub_18ABC739C(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18ABC73B0(_Unwind_Exception *a1)
{
}

void sub_18ABC7550(_Unwind_Exception *a1)
{
}

void sub_18ABC7570(void *a1)
{
}

void sub_18ABC76E8(void *a1)
{
}

uint64_t _prepareRowCacheOnBackgroundThread(uint64_t a1)
{
  values[128] = *(void **)MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void **)(a1 + 24);
  if (*v2) {
    uint64_t v3 = *(void *)(*v2 + 136);
  }
  else {
    uint64_t v3 = 0;
  }
  CFArrayRef theArray = (const __CFArray *)v2[1];
  uint64_t v26 = v2[3];
  PF_FREE_OBJECT_ARRAY(v2);
  *(void *)(a1 + 24) = 0;
  if ((*(_DWORD *)(v3 + 72) & 2) == 0 && (*(_DWORD *)(v3 + 72) & 0x18) != 0x10) {
    [*(id *)(v3 + 8) _disablePersistentStoreResultCaching];
  }
  char v4 = objc_msgSend(*(id *)(v3 + 8), "_disablePersistentStoreResultCaching", v26);
  int v5 = *(_DWORD *)(v3 + 72) & 0x1C;
  uint64_t v6 = *(void *)(v3 + 56);
  uint64_t v28 = (pthread_cond_t *)(a1 + 96);
  uint64_t v29 = (pthread_mutex_t *)(a1 + 32);
  do
  {
LABEL_7:
    while (2)
    {
      pthread_mutex_lock(v29);
      do
      {
        CFIndex Count = CFArrayGetCount(theArray);
        unint64_t v8 = Count;
        if (Count >= 1)
        {
          if (Count >= 128) {
            CFIndex v13 = 128;
          }
          else {
            CFIndex v13 = Count;
          }
          v32.location = 0;
          v32.length = v13;
          CFArrayGetValues(theArray, v32, (const void **)values);
          if (v8 > 0x7F)
          {
            v33.location = 0;
            v33.length = v13;
            CFArrayReplaceValues(theArray, v33, 0, 0);
          }
          else
          {
            CFArrayRemoveAllValues(theArray);
          }
          atomic_load(v27);
          pthread_mutex_unlock(v29);
          uint64_t v14 = 0;
          do
          {
            CFIndex v15 = v13;
            uint64_t v16 = values[v14];
            uint64_t v17 = (id *)[v16 _objectsPointer];
            uint64_t v18 = [v16 count];
            if (v18)
            {
              uint64_t v19 = v18;
              do
              {
                id v20 = *v17;
                uint64_t v21 = [*v17 objectID];
                if (v4)
                {
                  if (v5 != 8)
                  {
                    [v20 knownKeyValuesPointer];
                    uint64_t v22 = (void *)[v20 _snapshot];
                    id v23 = v22;
                    id *v17 = v22;
                  }
                }
                else
                {
                  uint64_t v24 = (void *)v21;
                  [v20 knownKeyValuesPointer];
                  -[NSPersistentStoreCache registerRow:forObjectID:options:](v6, (uint64_t)v20, v24, 0);
                }
                ++v17;
                --v19;
              }
              while (v19);
            }
            if (v16) {
              CFRelease(v16);
            }
            ++v14;
            CFIndex v13 = v15;
          }
          while (v14 != v15);
          goto LABEL_7;
        }
        unsigned __int8 v9 = atomic_load(v27);
        if (v9) {
          pthread_cond_wait(v28, v29);
        }
        unsigned __int8 v10 = atomic_load(v27);
      }
      while ((v10 & 1) != 0);
      unsigned __int8 v11 = atomic_load(v27);
      if (v8 || (v11 & 1) != 0)
      {
        pthread_mutex_unlock(v29);
        continue;
      }
      break;
    }
    CFIndex v12 = CFArrayGetCount(theArray);
    pthread_mutex_unlock(v29);
  }
  while (v12);
  return 0;
}

NSSQLFetchRequestContext *_executeObjectFaultRequest(uint64_t a1)
{
  v58[2] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (void *)MEMORY[0x18C127630]();
  if (!a1 || (uint64_t v3 = *(void **)(a1 + 88)) == 0)
  {
    uint64_t v5 = [NSString stringWithUTF8String:"_executeObjectFaultRequest passed a nil objectID"];
    _NSCoreDataLog(17, v5, v6, v7, v8, v9, v10, v11, v52);
    CFIndex v12 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_18AB82000, v12, OS_LOG_TYPE_FAULT, "CoreData: _executeObjectFaultRequest passed a nil objectID", buf, 2u);
    }
    goto LABEL_13;
  }
  if ([*(id *)(a1 + 88) isTemporaryID]) {
    goto LABEL_13;
  }
  if (PFInstrumentsRecordingEnabled())
  {
    v53[0] = MEMORY[0x1E4F143A8];
    v53[1] = 3221225472;
    v53[2] = ___executeObjectFaultRequest_block_invoke;
    v53[3] = &unk_1E544CC90;
    v53[4] = v3;
    os_signpost_id_t v4 = ___executeObjectFaultRequest_block_invoke((uint64_t)v53);
  }
  else
  {
    os_signpost_id_t v4 = 0;
  }
  Request = -[NSSQLObjectFaultRequestContext createFetchRequestContext]((NSSQLFetchRequestContext *)a1);
  -[NSSQLStoreRequestContext setConnection:]((uint64_t)Request, *(void **)(a1 + 24));
  uint64_t v14 = (const void *)-[NSSQLCore entityForObjectID:](*(void *)(a1 + 8), v3);
  if (!v14)
  {
LABEL_13:
    return 0;
  }
  CFIndex v15 = -[NSSQLiteConnection statementCacheForEntity:](*(void *)(a1 + 24), v14);
  uint64_t v16 = v15;
  if (v15)
  {
    p_isa = &v15->_faultingStatementCache->super.isa;
    uint64_t v18 = [v3 _referenceData64];
    if (p_isa)
    {
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(p_isa, "bindVariables"), "objectAtIndex:", 0), "setInt64:", v18);
      [(NSSQLFetchRequestContext *)Request setFetchStatement:p_isa];
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v18 = [v3 _referenceData64];
  }
  uint64_t v20 = [(NSSQLFetchRequestContext *)Request fetchStatement];
  p_isa = (void *)v20;
  if (v20) {
    [*(id *)(v20 + 16) removeAllObjects];
  }
  uint64_t v21 = [[NSSQLBindVariable alloc] initWithInt64:v18 sqlType:2];
  -[NSSQLiteStatement addBindVariable:]((uint64_t)p_isa, v21);

  -[NSSQLiteStatementCache cacheFaultingStatement:](v16, p_isa);
LABEL_18:
  if (!Request)
  {
    unint64_t v48 = p_isa;
    __break(1u);
    goto LABEL_45;
  }
  Request->_isUsingCachedStatement = 1;
  uint64_t v22 = p_isa;
  int v23 = 0;
  uint64_t v24 = 0;
  Request->_fetchPlan->flags = ($C6D29F7D67899FE11DE7F8953A7C3E5F)(*(_DWORD *)&Request->_fetchPlan->flags & 0xFFFFFFE3 | 8);
  while (!v24 && v23 != 1)
  {
    uint64_t v24 = _newFetchedRowsForRequest((uint64_t)Request);
    -[NSSQLStoreRequestContext setConnection:]((uint64_t)Request, 0);

    Request = 0;
    ++v23;
  }

  uint64_t v25 = [(_PFArray *)v24 count];
  Request = (NSSQLFetchRequestContext *)[(_PFArray *)v24 lastObject];
  uint64_t v26 = Request;

  if (Request) {
    [(NSSQLFetchRequestContext *)Request knownKeyValuesPointer];
  }
  if (!v25)
  {

    uint64_t v43 = (void *)MEMORY[0x1E4F28C58];
    unsigned int v55 = @"objectID";
    double v56 = v3;
    uint64_t v44 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v56 forKeys:&v55 count:1];
    __int16 v45 = (void *)[v43 errorWithDomain:*MEMORY[0x1E4F281F8] code:133000 userInfo:v44];
    objc_setProperty_nonatomic((id)a1, v46, v45, 40);
    goto LABEL_30;
  }
  if (v25 != 1)
  {
    if (!v4) {
      goto LABEL_44;
    }
    if (PFInstrumentsGetLog_logtoken == -1)
    {
LABEL_41:
      if (v4 != -1)
      {
        __int16 v49 = PFInstrumentsGetLog_coreDataInstrumentsLog;
        if (os_signpost_enabled((os_log_t)PFInstrumentsGetLog_coreDataInstrumentsLog))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_18AB82000, v49, OS_SIGNPOST_INTERVAL_END, v4, "Fault", (const char *)&unk_18AEC651A, buf, 2u);
        }
      }
LABEL_44:
      _NSCoreDataLog(1, @"Asked to fault objectID %@ but database returned multiple rows", v27, v28, v29, v30, v31, v32, (uint64_t)v3);

      uint64_t v50 = [NSString stringWithFormat:@"failed to resolve fault to exactly one object for %@", v3];
      id v51 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E4F1C3B8], 134071, v50, 0);
      objc_exception_throw(v51);
    }
LABEL_45:
    dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_25);
    goto LABEL_41;
  }
  if ((objc_msgSend((id)-[NSSQLFetchRequestContext objectID](Request, "objectID"), "isEqual:", v3) & 1) == 0)
  {
    [(NSSQLFetchRequestContext *)Request objectID];
    _NSCoreDataLog(1, @"Asked to fault objectID %@ but database returned row with different objectID %@", v33, v34, v35, v36, v37, v38, (uint64_t)v3);
    BOOL v39 = (void *)MEMORY[0x1E4F28C58];
    v57[0] = @"objectID";
    v57[1] = @"message";
    v58[0] = v3;
    v58[1] = [NSString stringWithFormat:@"Database appears corrupt.  Asked to fault objectID %@ but database returned row with different objectID %@", v3, -[NSSQLFetchRequestContext objectID](Request, "objectID")];
    uint64_t v40 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v58 forKeys:v57 count:2];
    unint64_t v41 = (void *)[v39 errorWithDomain:*MEMORY[0x1E4F281F8] code:134071 userInfo:v40];
    objc_setProperty_nonatomic((id)a1, v42, v41, 40);

LABEL_30:
    Request = 0;
  }
  if (v4)
  {
    if (PFInstrumentsGetLog_logtoken != -1) {
      dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_25);
    }
    if (v4 != -1)
    {
      __int16 v47 = PFInstrumentsGetLog_coreDataInstrumentsLog;
      if (os_signpost_enabled((os_log_t)PFInstrumentsGetLog_coreDataInstrumentsLog))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_18AB82000, v47, OS_SIGNPOST_INTERVAL_END, v4, "Fault", (const char *)&unk_18AEC651A, buf, 2u);
      }
    }
  }
  return Request;
}

void sub_18ABC8B10(_Unwind_Exception *a1)
{
}

void sub_18ABC8B28(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18ABC8B34);
}

id _executeNewValuesForRelationshipFaultRequest(uint64_t *a1)
{
  v113[6] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v111 = (void *)a1[12];
    unint64_t v2 = (void *)a1[11];
    uint64_t v3 = (void *)a1[4];
  }
  else
  {
    unint64_t v2 = 0;
    uint64_t v111 = 0;
    uint64_t v3 = 0;
  }
  uint64_t v4 = [v2 name];
  if ([v2 isToMany])
  {
    [v3 stalenessInterval];
    double v6 = v5;
    double Current = CFAbsoluteTimeGetCurrent();
    double v8 = Current - v6;
    if (v6 <= 0.0) {
      double v8 = *(double *)&NSSQLDistantPastTimeInterval;
    }
    if (v6 == 0.0) {
      double v9 = *(double *)&NSSQLDistantFutureTimeInterval;
    }
    else {
      double v9 = v8;
    }
    uint64_t v10 = (void *)-[NSPersistentStoreCache toManyInformationForSourceObjectID:forProperty:afterTimestamp:](objc_msgSend(a1, "rowCache", v8), v111, v2, v9);
    if (v10)
    {
      return v10;
    }
    int v108 = [v2 isOrdered];
    id v109 = objc_alloc_init(MEMORY[0x1E4F28B28]);
    if (a1)
    {
      uint64_t v17 = (void *)a1[12];
      if (([v17 isTemporaryID] & 1) == 0)
      {
        uint64_t v18 = (id *)-[NSSQLCore entityForObjectID:](a1[1], v17);
        if (v18)
        {
          uint64_t v19 = (void *)a1[11];
          goto LABEL_21;
        }
      }
    }
    else if (([0 isTemporaryID] & 1) == 0)
    {
      uint64_t v18 = (id *)-[NSSQLCore entityForObjectID:](0, 0);
      uint64_t v17 = 0;
      uint64_t v19 = 0;
      double v56 = 0;
      if (!v18) {
        goto LABEL_107;
      }
LABEL_21:
      uint64_t v20 = objc_msgSend(v18[5], "objectForKey:", objc_msgSend(v19, "name"));
      if (PFInstrumentsRecordingEnabled())
      {
        v113[0] = MEMORY[0x1E4F143A8];
        v113[1] = 3221225472;
        v113[2] = ___newFetchedPKsForRelationshipFaultRequest_block_invoke;
        v113[3] = &unk_1E544FA00;
        v113[4] = v17;
        v113[5] = v19;
        os_signpost_id_t v106 = ___newFetchedPKsForRelationshipFaultRequest_block_invoke((uint64_t)v113);
      }
      else
      {
        os_signpost_id_t v106 = 0;
      }
      if (a1) {
        uint64_t v23 = a1[3];
      }
      else {
        uint64_t v23 = 0;
      }
      char v107 = -[NSSQLiteConnection statementCacheForEntity:](v23, v18);
      if (v107) {
        uint64_t v24 = (void *)-[NSMutableDictionary objectForKey:](v107->_toManyRelationshipStatementCache, "objectForKey:", [(id)v20 name]);
      }
      else {
        uint64_t v24 = 0;
      }
      if ((unint64_t)[v24 count] >= 2)
      {
        uint64_t v25 = [v24 objectAtIndex:0];
        if (v25)
        {
          int v110 = (NSFetchRequest *)[v24 objectAtIndex:1];
          uint64_t v26 = v110;
          objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)v25, "bindVariables"), "objectAtIndex:", 0), "setInt64:", objc_msgSend(v17, "_referenceData64"));
          uint64_t v27 = *(void *)(v25 + 48);
          BOOL v28 = v27 != 0;
          [(NSFetchRequest *)v110 setIncludesPropertyValues:v27 != 0];
          id v29 = (id)v25;
          uint64_t v30 = 0;
          int v31 = 0;
LABEL_71:
          LODWORD(v105) = v31;
          int v55 = 0;
          double v56 = 0;
          char v107 = 0;
          unsigned int v104 = (__CFString *)sel_userInfo;
          while (1)
          {
            if (v56 || v55 == 1)
            {

              if (((v105 | !v28) & 1) == 0)
              {
                uint64_t v66 = [(_PFArray *)v56 count];
                CFIndex v67 = v66;
                if (v66)
                {
                  unsigned int v68 = (const void **)PF_ALLOCATE_OBJECT_ARRAY(v66);
                  v115.location = 0;
                  v115.length = v67;
                  CFArrayGetValues((CFArrayRef)v56, v115, v68);
                  CFMergeSortArray();
                  char v69 = [[_PFArray alloc] initWithObjects:v68 count:v67 andFlags:11];

                  double v56 = v69;
                }
              }
              if (v106)
              {
                if (PFInstrumentsGetLog_logtoken != -1) {
                  dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_25);
                }
                if (v106 != -1)
                {
                  uint64_t v70 = PFInstrumentsGetLog_coreDataInstrumentsLog;
                  if (os_signpost_enabled((os_log_t)PFInstrumentsGetLog_coreDataInstrumentsLog))
                  {
                    *(_WORD *)buf = 0;
                    _os_signpost_emit_with_name_impl(&dword_18AB82000, v70, OS_SIGNPOST_INTERVAL_END, v106, "RelationshipFault", (const char *)&unk_18AEC651A, buf, 2u);
                  }
                }
              }
LABEL_107:
              if ([(_PFArray *)v56 count])
              {
                uint64_t v71 = v56;
                if (v108)
                {
                  unint64_t v72 = [(_PFArray *)v56 count];
                  int v110 = (NSFetchRequest *)v103;
                  unint64_t v73 = MEMORY[0x1F4188790](v72);
                  uint64_t v76 = (char *)v103 - v75;
                  size_t v77 = 8 * v74;
                  if (v73 >= 0x201)
                  {
                    uint64_t v76 = (char *)NSAllocateScannedUncollectable();
                    uint64_t v79 = (char *)NSAllocateScannedUncollectable();
                  }
                  else
                  {
                    bzero((char *)v103 - v75, 8 * v74);
                    MEMORY[0x1F4188790](v78);
                    uint64_t v79 = (char *)v103 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
                    bzero(v79, v77);
                    if (!v72)
                    {
LABEL_123:
                      int v82 = (void *)[objc_alloc(MEMORY[0x1E4F1C978]) initWithObjects:v79 count:v72];
                      id v81 = (id)[objc_alloc(MEMORY[0x1E4F1C978]) initWithObjects:v76 count:v72];
                      if (v72 >= 0x201)
                      {
                        NSZoneFree(0, v76);
                        NSZoneFree(0, v79);
                      }
LABEL_125:
                      if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)a1) < 2)
                      {
                        if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)a1) >= 1)
                        {
                          uint64_t v94 = [v2 name];
                          [(_PFArray *)v56 count];
                          _NSCoreDataLog(4, @"to-many relationship fault \"%@\" for objectID %@ fulfilled from database.  Got %d rows", v95, v96, v97, v98, v99, v100, v94);
                        }
                      }
                      else
                      {
                        uint64_t v87 = [v2 name];
                        [(_PFArray *)v56 count];
                        _NSCoreDataLog(4, @"to-many relationship fault \"%@\" for objectID %@ fulfilled from database.  Got %d rows with values: %@", v88, v89, v90, v91, v92, v93, v87);
                      }

                      uint64_t v101 = [a1 rowCache];
                      if (v101) {
                        -[NSPersistentStoreCache registerToMany:withOrderKeys:forSourceObjectID:forProperty:options:andTimestamp:](v101, v81, v82, v111, v2, Current);
                      }
                      [v109 drain];
                      id v102 = 0;
                      id v22 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", v81, v82, 0);

                      return v22;
                    }
                  }
                  uint64_t v83 = 0;
                  do
                  {
                    id v84 = [(_PFArray *)v56 objectAtIndex:v83];
                    *(void *)&v76[8 * v83] = [v84 valueAtIndex:0];
                    uint64_t v85 = [v84 valueAtIndex:1];
                    if (v85) {
                      uint64_t v86 = (void *)v85;
                    }
                    else {
                      uint64_t v86 = &unk_1ED7E2C68;
                    }
                    *(void *)&v79[8 * v83++] = v86;
                  }
                  while (v72 != v83);
                  goto LABEL_123;
                }
              }
              else
              {
                if (v108) {
                  uint64_t v80 = &NSOrderedSet_EmptyOrderedSet;
                }
                else {
                  uint64_t v80 = &NSSet_EmptySet;
                }
                uint64_t v71 = (void *)*v80;
              }
              id v81 = v71;
              int v82 = 0;
              goto LABEL_125;
            }
            if (v30) {
              goto LABEL_79;
            }
            uint64_t v57 = [NSSQLFetchRequestContext alloc];
            uint64_t v58 = a1 ? a1[1] : 0;
            int v59 = [(NSSQLFetchRequestContext *)v57 initWithRequest:v110 context:0 sqlCore:v58];
            [(NSSQLFetchRequestContext *)v59 setIsFaultRequest:1];
            [(NSSQLFetchRequestContext *)v59 setFetchStatement:v25];
            if (v59) {
              break;
            }
            uint64_t v30 = 0;
            if (a1)
            {
LABEL_80:
              uint64_t v60 = (void *)a1[3];
              goto LABEL_81;
            }
LABEL_93:
            uint64_t v60 = 0;
LABEL_81:
            -[NSSQLStoreRequestContext setConnection:](v30, v60);
            if (v30) {
              uint64_t v61 = *(void *)(v30 + 136);
            }
            else {
              uint64_t v61 = 0;
            }
            unsigned int v62 = *(_DWORD *)(v61 + 72) & 0xFFFFFFE3;
            if (v28)
            {
              int v63 = v62 | 0x10;
              *(_DWORD *)(v61 + 72) = v63;
              if (v25) {
                uint64_t v64 = *(void *)(v25 + 48);
              }
              else {
                uint64_t v64 = 0;
              }
              *(void *)(v61 + 40) = v64;
              unsigned int v65 = v63 & 0xFFFFFFF2;
            }
            else
            {
              unsigned int v65 = v62 | 4;
            }
            *(_DWORD *)(v61 + 72) = v65;
            double v56 = _newFetchedRowsForRequest(v30);
            -[NSSQLStoreRequestContext setConnection:](v30, 0);

            uint64_t v30 = 0;
            ++v55;
          }
          v59->_isUsingCachedStatement = 1;
          uint64_t v30 = (uint64_t)v59;
LABEL_79:
          if (a1) {
            goto LABEL_80;
          }
          goto LABEL_93;
        }
      }
      int v110 = objc_alloc_init(NSFetchRequest);
      -[NSFetchRequest setEntity:](v110, "setEntity:", objc_msgSend((id)objc_msgSend((id)v20, "destinationEntity"), "entityDescription"));
      [(NSFetchRequest *)v110 setIncludesPropertyValues:0];
      uint64_t v105 = [v17 _referenceData64];
      if (v20 && *(unsigned char *)(v20 + 24) == 9)
      {
        uint64_t v32 = objc_msgSend(objc_alloc(MEMORY[0x1E4F28DA0]), "initWithObject:", objc_msgSend(*(id *)(v20 + 56), "name"));
        uint64_t v33 = (void *)[objc_alloc(MEMORY[0x1E4F28D98]) initWithKeyPath:v32];

        uint64_t v34 = (void *)[objc_alloc(MEMORY[0x1E4F28BC0]) initWithObject:v17];
        uint64_t v35 = [objc_alloc(MEMORY[0x1E4F28B98]) initWithLeftExpression:v34 rightExpression:v33 modifier:0 type:10 options:0];
      }
      else
      {
        uint64_t v36 = [v17 _referenceData64];
        id v37 = objc_alloc(MEMORY[0x1E4F28DA0]);
        if (v20) {
          uint64_t v38 = *(void **)(v20 + 56);
        }
        else {
          uint64_t v38 = 0;
        }
        BOOL v39 = objc_msgSend(v37, "initWithObject:", objc_msgSend((id)objc_msgSend(v38, "foreignKey"), "name"));
        uint64_t v34 = (void *)[objc_alloc(MEMORY[0x1E4F28D98]) initWithKeyPath:v39];

        uint64_t v40 = (void *)[objc_alloc(NSNumber) initWithLongLong:v36];
        uint64_t v33 = (void *)[objc_alloc(MEMORY[0x1E4F28BC0]) initWithObject:v40];

        uint64_t v35 = [objc_alloc(MEMORY[0x1E4F28B98]) initWithLeftExpression:v34 rightExpression:v33 modifier:0 type:4 options:0];
      }
      unint64_t v41 = (void *)v35;

      [(NSFetchRequest *)v110 setPredicate:v41];
      if (v20)
      {
        if (objc_msgSend((id)objc_msgSend((id)v20, "propertyDescription"), "isOrdered"))
        {
          int v42 = *(unsigned __int8 *)(v20 + 24);
          if (v42 == 9)
          {
            if (*(void *)(v20 + 56) == v20)
            {
              *(void *)buf = objc_msgSend(objc_alloc(MEMORY[0x1E4F29008]), "initWithKey:ascending:", objc_msgSend(*(id *)(v20 + 56), "name"), 1);
              uint64_t v43 = (void *)[objc_alloc(MEMORY[0x1E4F1C978]) initWithObjects:buf count:1];

              [(NSFetchRequest *)v110 setSortDescriptors:v43];
              int v42 = *(unsigned __int8 *)(v20 + 24);
              int v31 = 1;
            }
            else
            {
              int v31 = 0;
              int v42 = 9;
            }
          }
          else
          {
            int v31 = 0;
          }
          BOOL v44 = v42 == 9;
          goto LABEL_52;
        }
        BOOL v28 = 0;
        int v31 = 0;
      }
      else
      {
        int v31 = 0;
        BOOL v44 = 0;
        BOOL v28 = 0;
        if ([0 isOrdered])
        {
LABEL_52:
          __int16 v45 = objc_alloc_init(NSExpressionDescription);
          [(NSPropertyDescription *)v45 setName:@"objectID"];
          [(NSExpressionDescription *)v45 setExpressionResultType:2000];
          -[NSExpressionDescription setExpression:](v45, "setExpression:", [MEMORY[0x1E4F28C68] expressionForEvaluatedObject]);
          if (v44)
          {
            unsigned int v104 = -[NSSQLManyToMany inverseOrderColumnName]((__CFString *)v20);
            SEL v46 = objc_alloc_init(NSExpressionDescription);
            [(NSPropertyDescription *)v46 setName:@"orderKey"];
            [(NSExpressionDescription *)v46 setExpressionResultType:200];
            -[NSExpressionDescription setExpression:](v46, "setExpression:", objc_msgSend(MEMORY[0x1E4F28C68], "expressionForFunction:arguments:", NSStringFromSelector(sel_inverseOrderKey_), objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObject:", objc_msgSend(MEMORY[0x1E4F28C68], "expressionForConstantValue:", v104))));
          }
          else
          {
            if (v20 && (uint64_t v47 = *(void *)(v20 + 56)) != 0) {
              unsigned int v104 = *(__CFString **)(v47 + 80);
            }
            else {
              unsigned int v104 = 0;
            }
            SEL v46 = objc_alloc_init(NSExpressionDescription);
            [(NSPropertyDescription *)v46 setName:@"orderKey"];
            [(NSExpressionDescription *)v46 setExpressionResultType:200];
            v103[1] = MEMORY[0x1E4F28C68];
            -[NSExpressionDescription setExpression:](v46, "setExpression:", objc_msgSend(MEMORY[0x1E4F28C68], "expressionForFunction:arguments:", NSStringFromSelector(sel_inverseOrderKey_), objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObject:", objc_msgSend(MEMORY[0x1E4F28C68], "expressionForConstantValue:", -[__CFString columnName](v104, "columnName")))));
          }
          -[NSFetchRequest setPropertiesToFetch:](v110, "setPropertiesToFetch:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", v45, v46, 0));

          [(NSFetchRequest *)v110 setResultType:2];
          BOOL v28 = 1;
          [(NSFetchRequest *)v110 setIncludesPropertyValues:1];
        }
      }
      unint64_t v48 = [NSSQLFetchRequestContext alloc];
      if (a1) {
        uint64_t v49 = a1[1];
      }
      else {
        uint64_t v49 = 0;
      }
      uint64_t v30 = [(NSSQLFetchRequestContext *)v48 initWithRequest:v110 context:0 sqlCore:v49];
      [(id)v30 setIsFaultRequest:1];
      uint64_t v50 = (void *)[(id)v30 fetchStatement];
      uint64_t v25 = (uint64_t)v50;
      if (v30) {
        *(unsigned char *)(v30 + 202) = 1;
      }
      if (!v28)
      {
        id v51 = _rawSQLForToManyFaultStatement(v50, 0, 0);
        if (v25)
        {
          uint64_t v52 = v51;
          uint64_t v53 = *(void **)(v25 + 32);
          if (v53 != v51)
          {

            *(void *)(v25 + 32) = [v52 copy];
          }
        }
        [(id)v30 setFetchStatement:v25];
      }
      if (v25) {
        [*(id *)(v25 + 16) removeAllObjects];
      }
      uint64_t v54 = [[NSSQLBindVariable alloc] initWithInt64:v105 sqlType:2];
      -[NSSQLiteStatement addBindVariable:](v25, v54);

      -[NSSQLiteStatementCache cacheFaultingStatement:andFetchRequest:forRelationship:]((uint64_t)v107, (void *)v25, (uint64_t)v110, (void *)v20);
      goto LABEL_71;
    }
    double v56 = 0;
    goto LABEL_107;
  }
  uint64_t v12 = -[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:]((uint64_t)a1, (uint64_t)v111);
  CFIndex v13 = (void *)v12;
  if (a1) {
    uint64_t v14 = (void *)a1[3];
  }
  else {
    uint64_t v14 = 0;
  }
  -[NSSQLStoreRequestContext setConnection:](v12, v14);
  id v16 = _executeNewRowValuesForObjectFaultRequest(v13);
  if (!v16)
  {
    if (v13)
    {
      uint64_t v21 = (void *)v13[5];
      if (!a1)
      {
LABEL_26:
        id v16 = 0;
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v21 = 0;
      if (!a1) {
        goto LABEL_26;
      }
    }
    objc_setProperty_nonatomic(a1, v15, v21, 40);
    goto LABEL_26;
  }
LABEL_27:
  -[NSSQLStoreRequestContext setConnection:]((uint64_t)v13, 0);

  id v22 = (id)[v16 valueForKey:v4];
  if (!v22) {
    return v22;
  }
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", v22, 0);
}

void sub_18ABC9C20(_Unwind_Exception *a1)
{
}

void sub_18ABC9C4C(_Unwind_Exception *a1)
{
}

void sub_18ABC9C78(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ABC9C7CLL);
  }
  objc_terminate();
}

void sub_18ABC9C88(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ABC8E30);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ABC9CA4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x18ABC9CF8);
}

void sub_18ABC9CB4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (v2) {
      JUMPOUT(0x18ABC9CC4);
    }
    JUMPOUT(0x18ABC9CF0);
  }
  _Unwind_Resume(a1);
}

void sub_18ABC9CCC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ABC9CD0);
  }
  JUMPOUT(0x18ABC9C80);
}

void sub_18ABC9CD4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x18ABC9CF0);
}

void sub_18ABC9CE4(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 == 3)
    {
      uint64_t v3 = (void *)[objc_begin_catch(exc_buf) errorObjectWithUserInfo:0];
      if (v2) {
        objc_setProperty_nonatomic(v2, v4, v3, 40);
      }
      objc_end_catch();
      JUMPOUT(0x18ABC9B14);
    }
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18ABC9B1CLL);
    }
    id v5 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ABC9D64(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ABC9D38);
  }
  _Unwind_Resume(a1);
}

void sub_18ABCA5D4(_Unwind_Exception *a1)
{
}

void sub_18ABCA5F4(void *a1)
{
}

void sub_18ABCB3B4(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18ABCB380);
}

void sub_18ABCB3C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *exc_buf, int a17, char a18)
{
  if (a2)
  {
    objc_begin_catch(a1);
    if (a18) {
      JUMPOUT(0x18ABCB068);
    }
    JUMPOUT(0x18ABCB3A0);
  }
  JUMPOUT(0x18ABCB380);
}

void sub_18ABCB3D8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18)
{
  if (a2)
  {
    objc_begin_catch(a1);
    if (a18) {
      JUMPOUT(0x18ABCB068);
    }
    JUMPOUT(0x18ABCB3A0);
  }
  JUMPOUT(0x18ABCB380);
}

uint64_t PFInstrumentsRecordingEnabled()
{
  uint64_t result = kdebug_is_enabled();
  if (result)
  {
    if (PFInstrumentsGetLog_logtoken != -1) {
      dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_25);
    }
    char v1 = PFInstrumentsGetLog_coreDataInstrumentsLog;
    return os_signpost_enabled(v1);
  }
  return result;
}

void sub_18ABCB78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_18ABCBB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

os_signpost_id_t ___newFetchedPKsForRelationshipFaultRequest_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (PFInstrumentsGetLog_logtoken != -1) {
    dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_25);
  }
  os_signpost_id_t v2 = os_signpost_id_generate((os_log_t)PFInstrumentsGetLog_coreDataInstrumentsLog);
  if (PFInstrumentsGetLog_logtoken != -1) {
    dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_25);
  }
  uint64_t v3 = PFInstrumentsGetLog_coreDataInstrumentsLog;
  kdebug_trace();
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = [*(id *)(a1 + 40) name];
    int v7 = 138412546;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_signpost_emit_with_name_impl(&dword_18AB82000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "RelationshipFault", "%@ - %@", (uint8_t *)&v7, 0x16u);
  }
  return v2;
}

os_signpost_id_t ___executeObjectFaultRequest_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (PFInstrumentsGetLog_logtoken != -1) {
    dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_25);
  }
  os_signpost_id_t v2 = os_signpost_id_generate((os_log_t)PFInstrumentsGetLog_coreDataInstrumentsLog);
  if (PFInstrumentsGetLog_logtoken != -1) {
    dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_25);
  }
  uint64_t v3 = PFInstrumentsGetLog_coreDataInstrumentsLog;
  kdebug_trace();
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_signpost_emit_with_name_impl(&dword_18AB82000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "Fault", "%@", (uint8_t *)&v6, 0xCu);
  }
  return v2;
}

void sub_18ABCC3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *_svfk_0(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0);
}

CFComparisonResult _NSCoreDataDoStringCompare(int a1, const UniChar *a2, int a3, const UniChar *a4, CFStringCompareFlags a5)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  CFAllocatorRef v10 = _PFStackAllocatorCreate((unint64_t *)&v17, 1024);
  CFIndex v11 = (uint64_t)a1 >> 1;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  CFStringRef v13 = CFStringCreateWithCharactersNoCopy(v10, a2, v11, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  CFStringRef v14 = CFStringCreateWithCharactersNoCopy(v10, a4, (uint64_t)a3 >> 1, v12);
  v50.location = 0;
  v50.length = v11;
  CFComparisonResult v15 = CFStringCompareWithOptions(v13, v14, v50, a5);
  if (*((void *)&v18 + 1))
  {
    if (v13) {
      CFRelease(v13);
    }
    if (v14) {
      CFRelease(v14);
    }
  }
  return v15;
}

void *_PF_Leopard_CFDictionaryCreate()
{
  int v0 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    int v0 = malloc_default_zone();
  }
  char v1 = (char *)malloc_type_zone_calloc(v0, 1uLL, 0x58uLL, 0x109004026750248uLL);
  os_signpost_id_t v2 = v1;
  if (v1)
  {
    *(void *)char v1 = 0;
    *((void *)v1 + 2) = 0;
    *((void *)v1 + 5) = 0;
    *((void *)v1 + 6) = 0;
    *((void *)v1 + 4) = 1;
    *(_OWORD *)(v1 + 56) = xmmword_18AE54640;
    *((void *)v1 + 3) = 3 << flsl(0);
    v2[1] = 0;
    v2[9] = 0;
    v2[10] = 0;
  }
  return v2;
}

void PF_Tiger_CFDictionarySetValue(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  unsigned int v6 = _PF_TigerHashCFString(a2);
  uint64_t v7 = *(void *)(a1 + 40);
  unint64_t v8 = *(void *)(a1 + 16);
  int v9 = v6 % *(_DWORD *)(a1 + 8);
  unsigned int v38 = -1;
  CFAllocatorRef v10 = &v38;
  signed int v11 = v9;
  while (1)
  {
    CFStringRef v12 = *(const __CFString **)(v7 + 8 * v11);
    if ((const __CFString *)v8 == v12)
    {
      if (v10) {
        *CFAllocatorRef v10 = v11;
      }
      goto LABEL_17;
    }
    if ((const __CFString *)~v8 == v12)
    {
      if (v10)
      {
        *CFAllocatorRef v10 = v11;
        CFAllocatorRef v10 = 0;
      }
      goto LABEL_8;
    }
    if (v12 == a2 || CFEqual(v12, a2)) {
      break;
    }
LABEL_8:
    int v13 = v11 + 1;
    int v14 = *(_DWORD *)(a1 + 8);
    if (v14 <= v11 + 1) {
      int v15 = *(_DWORD *)(a1 + 8);
    }
    else {
      int v15 = 0;
    }
    signed int v11 = v13 - v15;
    if (v9 == v13 - v15) {
      goto LABEL_18;
    }
  }
  if (v11 != -1)
  {
    *(void *)(*(void *)(a1 + 48) + 8 * v11) = a3;
    return;
  }
LABEL_17:
  int v14 = *(_DWORD *)(a1 + 8);
LABEL_18:
  CFStringRef v16 = *(const __CFString **)(a1 + 16);
  unint64_t v17 = ~(unint64_t)v16;
  if (v16 == a2 || v17 == (void)a2)
  {
    CFStringRef v19 = (const __CFString *)((char *)v16 - 1);
    if (v14 >= 1)
    {
      long long v20 = *(const __CFString ***)(a1 + 40);
      uint64_t v21 = v14;
      CFStringRef v22 = *(const __CFString **)(a1 + 16);
LABEL_25:
      uint64_t v23 = -(uint64_t)v22;
      CFStringRef v22 = v19;
      uint64_t v24 = v14;
      long long v25 = *(const __CFString ***)(a1 + 40);
      do
      {
        if (v22 == *v25 || v23 == (void)*v25)
        {
          CFStringRef v19 = (const __CFString *)((char *)v22 - 1);
          goto LABEL_25;
        }
        ++v25;
        --v24;
      }
      while (v24);
      do
      {
        CFStringRef v27 = v22;
        if (v16 == *v20 || (CFStringRef v27 = (const __CFString *)v23, (const __CFString *)v17 == *v20)) {
          uint64_t *v20 = v27;
        }
        ++v20;
        --v21;
      }
      while (v21);
      CFStringRef v19 = v22;
    }
    *(void *)(a1 + 16) = v19;
  }
  uint64_t v28 = v38;
  if ((v38 & 0x80000000) != 0 || (int)v38 >= v14)
  {
    uint64_t v29 = [NSString stringWithUTF8String:"illegal OOB dictionary calculation"];
    _NSCoreDataLog(17, v29, v30, v31, v32, v33, v34, v35, v37);
    long long v36 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v37) = 0;
      _os_log_fault_impl(&dword_18AB82000, v36, OS_LOG_TYPE_FAULT, "CoreData: illegal OOB dictionary calculation", (uint8_t *)&v37, 2u);
    }
  }
  else
  {
    *(void *)(*(void *)(a1 + 40) + 8 * v38) = a2;
    *(void *)(*(void *)(a1 + 48) + 8 * v28) = a3;
  }
  ++*(_DWORD *)a1;
}

uint64_t _PF_TigerHashCFString(const __CFString *a1)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFStringGetLength(a1);
  int v3 = MEMORY[0x1F4188790](Length);
  uint64_t v5 = (UniChar *)((char *)v13 - ((v4 + 15) & 0x3FFFFFFF0));
  uint64_t v6 = v3;
  v14.location = 0;
  v14.length = v3;
  CFStringGetCharacters(a1, v14, v5);
  if ((int)Length > 23)
  {
    CFAllocatorRef v10 = &v5[(Length - 16)];
    int v8 = 16974593 * v10[12]
       + 66049 * v10[13]
       + 257 * v10[14]
       + v10[15]
       + 67503105
       * (16974593 * v10[8]
        + 66049 * v10[9]
        + 257 * v10[10]
        + v10[11]
        + 67503105
        * (16974593 * v10[4]
         + 66049 * v10[5]
         + 257 * v10[6]
         + v10[7]
         + 67503105
         * (16974593 * *v10
          + 66049 * v10[1]
          + 67503105
          * (16974593 * v5[4]
           + 67503105 * (67503105 * Length + 16974593 * *v5 + 66049 * v5[1] + 257 * v5[2] + v5[3])
           + 66049 * v5[5]
           + 257 * v5[6]
           + v5[7])
          + 257 * v10[2]
          + v10[3])));
  }
  else
  {
    uint64_t v7 = &v5[v6];
    if ((int)(Length & 0xFFFFFFFC) < 1)
    {
      int v8 = Length;
    }
    else
    {
      int v8 = Length;
      int v9 = &v5[Length & 0xFFFFFFFC];
      do
      {
        int v8 = 67503105 * v8 + 16974593 * *v5 + 66049 * v5[1] + 257 * v5[2] + v5[3];
        v5 += 4;
      }
      while (v5 < v9);
    }
    while (v5 < v7)
    {
      int v11 = *v5++;
      int v8 = 257 * v8 + v11;
    }
  }
  return ((v8 << Length) + v8);
}

uint64_t _PF_Leopard_CFDictionaryGetValue(void *a1, __CFString *a2)
{
  if (a1[2])
  {
    int v4 = _PF_Leopard_CFStringHashNSString(a2);
    unsigned int v5 = (1264676453 - v4) ^ ((v4 - 1) << 8);
    unsigned int v6 = (2 - v4 - v5) ^ (v5 >> 13);
    int v7 = (v4 - 1 - v5 - v6) ^ (v6 >> 12);
    unsigned int v8 = (v5 - v6 - v7) ^ (v7 << 16);
    unsigned int v9 = (v6 - v7 - v8) ^ (v8 >> 5);
    int v10 = (v7 - v8 - v9) ^ (v9 >> 3);
    unsigned int v11 = (v9 - v10 - ((v8 - v9 - v10) ^ (v10 << 10))) ^ (((v8 - v9 - v10) ^ (v10 << 10)) >> 15);
    unint64_t v13 = a1[8];
    uint64_t v12 = a1[9];
    uint64_t v14 = a1[1];
    uint64_t v15 = (v14 - 1) & v11;
    uint64_t v16 = v15;
    do
    {
      unint64_t v17 = *(__CFString **)(v12 + 8 * v16);
      if ((__CFString *)v13 == v17) {
        break;
      }
      if (v17 != (__CFString *)~v13)
      {
        if (v17 == a2 || CFEqual(v17, a2))
        {
          if (v16 == -1) {
            return 0;
          }
          return *(void *)(a1[10] + 8 * v16);
        }
        uint64_t v14 = a1[1];
      }
      uint64_t v18 = v16 + 1;
      if (v14 <= v16 + 1) {
        uint64_t v19 = v14;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v16 = v18 - v19;
    }
    while (v15 != v18 - v19);
  }
  return 0;
}

CFTypeRef _PF_Leopard_CFDictionarySetValue(void *a1, __CFString *a2, const void *a3)
{
  uint64_t v6 = a1[2];
  int v7 = (__CFString **)a1[9];
  if (v6 == a1[3] || !v7)
  {
    unsigned int v8 = (void *)a1[10];
    uint64_t v9 = a1[1];
    char v10 = flsl(v6 / 3);
    a1[3] = 3 << v10;
    uint64_t v11 = 4 << flsl(((3 << v10) - 1) / 3);
    a1[1] = v11;
    a1[5] = 0;
    uint64_t v12 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
    {
      uint64_t v12 = malloc_default_zone();
      uint64_t v11 = a1[1];
    }
    a1[9] = malloc_type_zone_calloc(v12, 1uLL, 8 * v11, 0x100004000313F17uLL);
    unint64_t v13 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      unint64_t v13 = malloc_default_zone();
    }
    uint64_t v14 = malloc_type_zone_calloc(v13, 1uLL, 8 * a1[1], 0x100004000313F17uLL);
    a1[10] = v14;
    uint64_t v15 = a1[1];
    if (v15 >= 1)
    {
      uint64_t v16 = (void *)a1[9];
      do
      {
        *v16++ = a1[8];
        *v14++ = 0;
        --v15;
      }
      while (v15);
    }
    if (v7)
    {
      if (v9 >= 1)
      {
        unint64_t v17 = v7;
        uint64_t v18 = v8;
        do
        {
          uint64_t v19 = *v17;
          long long v20 = (__CFString *)a1[8];
          if (v20 != *v17 && v19 != (__CFString *)~(unint64_t)v20)
          {
            uint64_t v40 = 0;
            _PF_Leopard_CFDictionaryFindBuckets2((uint64_t)a1, v19, &v41, &v40);
            if (v40 != -1)
            {
              *(void *)(a1[9] + 8 * v40) = *v17;
              *(void *)(a1[10] + 8 * v40) = *v18;
            }
          }
          ++v18;
          ++v17;
          --v9;
        }
        while (v9);
      }
      CFStringRef v22 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone) {
        CFStringRef v22 = malloc_default_zone();
      }
      malloc_zone_free(v22, v7);
      uint64_t v23 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone) {
        uint64_t v23 = malloc_default_zone();
      }
      malloc_zone_free(v23, v8);
    }
  }
  ++a1[4];
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  _PF_Leopard_CFDictionaryFindBuckets2((uint64_t)a1, a2, &v41, &v40);
  uint64_t v24 = v41;
  if (v41 == -1)
  {
    uint64_t v27 = a1[8];
    uint64_t v26 = a1[9];
    if ((__CFString *)v27 == a2 || (unint64_t v28 = ~v27, (__CFString *)~v27 == a2))
    {
      uint64_t v29 = a1[1];
      uint64_t v30 = (__CFString *)(v27 - 1);
      if (v29 >= 1)
      {
LABEL_30:
        uint64_t v31 = -v27;
        uint64_t v27 = (uint64_t)v30;
        uint64_t v32 = a1[1];
        uint64_t v33 = (__CFString **)a1[9];
        do
        {
          uint64_t v35 = *v33++;
          uint64_t v34 = v35;
          if ((__CFString *)v27 == v35 || v34 == (__CFString *)v31)
          {
            uint64_t v30 = (__CFString *)(v27 - 1);
            goto LABEL_30;
          }
          --v32;
        }
        while (v32);
        uint64_t v37 = (uint64_t *)a1[9];
        do
        {
          uint64_t v38 = a1[8];
          uint64_t v39 = v27;
          if (v38 == *v37 || (uint64_t v39 = v31, *v37 == ~v38)) {
            *uint64_t v37 = v39;
          }
          ++v37;
          --v29;
        }
        while (v29);
        uint64_t v30 = (__CFString *)v27;
      }
      a1[8] = v30;
      unint64_t v28 = ~(unint64_t)v30;
    }
    if (*(void *)(v26 + 8 * v40) == v28) {
      --a1[5];
    }
    CFRetain(a2);
    CFTypeRef result = CFRetain(a3);
    *(void *)(a1[9] + 8 * v40) = a2;
    *(void *)(a1[10] + 8 * v40) = a3;
    ++a1[2];
    ++*a1;
  }
  else
  {
    CFRelease(*(CFTypeRef *)(a1[10] + 8 * v41));
    CFTypeRef result = CFRetain(a3);
    *(void *)(a1[10] + 8 * v24) = a3;
  }
  return result;
}

__CFString *_PF_Leopard_CFDictionaryFindBuckets2(uint64_t a1, __CFString *a2, void *a3, void *a4)
{
  int v8 = _PF_Leopard_CFStringHashNSString(a2);
  unsigned int v9 = (1264676453 - v8) ^ ((v8 - 1) << 8);
  unsigned int v10 = (2 - v8 - v9) ^ (v9 >> 13);
  int v11 = (v8 - 1 - v9 - v10) ^ (v10 >> 12);
  unsigned int v12 = (v9 - v10 - v11) ^ (v11 << 16);
  unsigned int v13 = (v10 - v11 - v12) ^ (v12 >> 5);
  int v14 = (v11 - v12 - v13) ^ (v13 >> 3);
  unint64_t v16 = *(void *)(a1 + 64);
  uint64_t v15 = *(void *)(a1 + 72);
  uint64_t v17 = (*(_DWORD *)(a1 + 8) - 1) & ((v13 - v14 - ((v12 - v13 - v14) ^ (v14 << 10))) ^ (((v12 - v13 - v14) ^ (v14 << 10)) >> 15));
  *a3 = -1;
  *a4 = -1;
  uint64_t v18 = v17;
  while (1)
  {
    CFTypeRef result = *(__CFString **)(v15 + 8 * v18);
    if ((__CFString *)v16 == result) {
      break;
    }
    if (result == (__CFString *)~v16)
    {
      if (a4)
      {
        *a4 = v18;
        a4 = 0;
      }
    }
    else if (result == a2 || (CFTypeRef result = (__CFString *)CFEqual(result, a2), result))
    {
      a4 = a3;
      goto LABEL_15;
    }
    uint64_t v20 = v18 + 1;
    uint64_t v21 = *(void *)(a1 + 8);
    if (v21 > v18 + 1) {
      uint64_t v21 = 0;
    }
    uint64_t v18 = v20 - v21;
    if (v17 == v20 - v21) {
      return result;
    }
  }
  if (!a4) {
    return result;
  }
LABEL_15:
  *a4 = v18;
  return result;
}

uint64_t _PF_Leopard_CFStringHashNSString(__CFString *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFStringGetLength(a1);
  int v3 = v9;
  if (Length >= 97)
  {
    -[__CFString getCharacters:range:](a1, "getCharacters:range:", v9, 0, 32);
    -[__CFString getCharacters:range:](a1, "getCharacters:range:", &v10, ((unint64_t)Length >> 1) - 16, 32);
    -[__CFString getCharacters:range:](a1, "getCharacters:range:", &v11, Length - 32, 32);
    int v4 = (unsigned __int16 *)&v12;
    unsigned int v5 = (unsigned __int16 *)&v12;
LABEL_5:
    int v3 = v9;
    int v6 = Length;
    do
    {
      int v6 = 67503105 * v6 + 16974593 * *v3 + 66049 * v3[1] + 257 * v3[2] + v3[3];
      v3 += 4;
    }
    while (v3 < v5);
    goto LABEL_10;
  }
  -[__CFString getCharacters:range:](a1, "getCharacters:range:", v9, 0, Length);
  int v4 = &v9[Length];
  if ((uint64_t)(Length & 0xFFFFFFFFFFFFFFFCLL) >= 1)
  {
    unsigned int v5 = &v9[Length & 0xFFFFFFFFFFFFFFFCLL];
    goto LABEL_5;
  }
  int v6 = Length;
LABEL_10:
  while (v3 < v4)
  {
    int v7 = *v3++;
    int v6 = 257 * v6 + v7;
  }
  return ((v6 << Length) + v6);
}

uint64_t PF_Tiger_CFDictionaryGetKeysAndValues(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(result + 16);
    uint64_t v6 = 8 * v3;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(result + 40) + v4);
      if (v5 != v7 && ~v5 != v7)
      {
        if (a2) {
          *a2++ = v7;
        }
        if (a3) {
          *a3++ = *(void *)(*(void *)(result + 48) + v4);
        }
      }
      v4 += 8;
    }
    while (v6 != v4);
  }
  return result;
}

void PF_Tiger_CFDictionaryDestroy(void *ptr)
{
  os_signpost_id_t v2 = (void *)ptr[5];
  if (v2)
  {
    uint64_t v3 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
    {
      uint64_t v3 = malloc_default_zone();
      os_signpost_id_t v2 = (void *)ptr[5];
    }
    malloc_zone_free(v3, v2);
  }
  uint64_t v4 = (void *)ptr[6];
  if (v4)
  {
    uint64_t v5 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
    {
      uint64_t v5 = malloc_default_zone();
      uint64_t v4 = (void *)ptr[6];
    }
    malloc_zone_free(v5, v4);
  }
  uint64_t v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v6 = malloc_default_zone();
  }

  malloc_zone_free(v6, ptr);
}

void *PF_Tiger_CFDictionaryCreate(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v5 = malloc_default_zone();
  }
  uint64_t v6 = malloc_type_zone_calloc(v5, 1uLL, 0x38uLL, 0x1080040AA4A4051uLL);
  uint64_t v7 = v6;
  *(_DWORD *)uint64_t v6 = 0;
  v6[3] = 0;
  v6[4] = 0;
  v6[2] = 2712781267;
  if (a3)
  {
    for (uint64_t i = 0; i != 42; ++i)
    {
      if (__CFDictionaryCapacities[i] >= a2) {
        break;
      }
    }
    uint64_t v9 = 0;
    unsigned int v10 = __CFDictionaryCapacities[i];
    *((_DWORD *)v6 + 1) = v10;
    do
    {
      if (__CFDictionaryCapacities[v9] >= v10) {
        break;
      }
      ++v9;
    }
    while (v9 != 42);
  }
  else
  {
    uint64_t v9 = 0;
    *((_DWORD *)v6 + 1) = a2;
    do
    {
      if (__CFDictionaryCapacities[v9] >= a2) {
        break;
      }
      ++v9;
    }
    while (v9 != 42);
  }
  int v11 = __CFDictionaryBuckets[v9];
  *((_DWORD *)v6 + 2) = v11;
  uint64_t v12 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
  {
    uint64_t v12 = malloc_default_zone();
    int v11 = *((_DWORD *)v7 + 2);
  }
  v7[5] = malloc_type_zone_calloc(v12, v11, 8uLL, 0x80040B8603338uLL);
  unsigned int v13 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    unsigned int v13 = malloc_default_zone();
  }
  v7[6] = malloc_type_zone_calloc(v13, *((int *)v7 + 2), 8uLL, 0x80040B8603338uLL);
  uint64_t v14 = *((int *)v7 + 2);
  if (v14)
  {
    uint64_t v15 = v14 - 1;
    do
      *(void *)(v7[5] + 8 * v15) = 2712781267;
    while (v15--);
  }
  return v7;
}

void sub_18ABD0B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void (*a12)(char *))
{
}

void sub_18ABD178C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,void (*a41)(char *))
{
}

void sub_18ABD27FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void (*a26)(char *))
{
}

uint64_t _kvcPropertysPublicSetters(void *a1)
{
  if (*(void *)(a1[19] + 16)) {
    return *(void *)(a1[19] + 16);
  }
  else {
    return _resolveForSelectorAndType(a1, sel__createValueSetterWithContainerClassID_key_, (objc_class *)_MergedGlobals_71, 2u);
  }
}

void _pvfk_31(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t vars8;

  char v1 = *(void (**)(uint64_t))(a1 + 32);
  os_signpost_id_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t _sIg_Ieg_TRTA_0()
{
  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t partial apply for closure #1 in closure #1 in NSManagedObjectContext._rethrowsHelper_performAndWait<A>(fn:execute:rescue:)()
{
  return closure #1 in closure #1 in NSManagedObjectContext._rethrowsHelper_performAndWait<A>(fn:execute:rescue:)(*(void *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 16));
}

uint64_t closure #1 in closure #1 in NSManagedObjectContext._rethrowsHelper_performAndWait<A>(fn:execute:rescue:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v14 - v11;
  a2(v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v12, 0, 1, a5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 40))(a1, v12, v8);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error)()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t _sxs5Error_pIgrzo_xsAA_pIegrzo_lTRTA_0()
{
  return thunk for @callee_guaranteed () -> (@out A, @error @owned Error)(*(uint64_t (**)(void))(v0 + 24));
}

uint64_t thunk for @callee_guaranteed () -> (@out A, @error @owned Error)(uint64_t (*a1)(void))
{
  return a1();
}

void rawIntegerRowsRelease(int a1, void *ptr)
{
  uint64_t v3 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v3 = malloc_default_zone();
  }

  malloc_zone_free(v3, ptr);
}

uint64_t _readEntityIntoShellFromData(void *a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9, uint64_t a10, void *a11, uint64_t a12, unint64_t **a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t **a17, uint64_t *a18)
{
  uint64_t v18 = a18;
  v258[1] = *MEMORY[0x1E4F143B8];
  unint64_t v19 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v20 = v19 + 4;
  if (v19 + 4 > a4 || (uint64_t v21 = a2, *(_DWORD *)(a2 + v19) != -335614502))
  {
    if (!a18) {
      return 0;
    }
    uint64_t v31 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v32 = *MEMORY[0x1E4F281F8];
    uint64_t v33 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v34 = @"Can't read entity into shell: Missing entity frontside delimiter";
    goto LABEL_7;
  }
  uint64_t v22 = a8;
  uint64_t v23 = a7;
  uint64_t v25 = a5;
  uint64_t v26 = a3;
  uint64_t v27 = a1;
  unint64_t v28 = (v19 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v29 = v28 + 4;
  if (v28 + 4 <= a4)
  {
    unsigned int v30 = bswap32(*(_DWORD *)(a2 + v28));
    unint64_t v20 = v29;
  }
  else
  {
    unsigned int v30 = 0;
  }
  unint64_t v37 = v20 + v30;
  if (v37 > a4)
  {
    if (!a18) {
      return 0;
    }
    uint64_t v31 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v32 = *MEMORY[0x1E4F281F8];
    uint64_t v33 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v34 = @"Can't read entity: Not enough bytes left";
    goto LABEL_7;
  }
  uint64_t v38 = a13;
  unint64_t v39 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v40 = v39 + 4;
  if (v39 + 4 <= v37)
  {
    unsigned int v41 = *(_DWORD *)(a2 + v39);
    if (v41)
    {
      long long v42 = a13[bswap32(v41)];
      uint64_t v256 = (uint64_t)a18;
      unint64_t v46 = v37;
      CFRange v50 = v42;
      uint64_t v38 = a13;
      uint64_t v25 = a5;
      uint64_t v22 = a8;
      uint64_t v23 = a7;
      unint64_t v37 = v46;
      uint64_t v26 = a3;
      uint64_t v21 = a2;
      uint64_t v18 = a18;
      uint64_t v27 = a1;
      *(void *)(v25 + 24) = v50;
    }
    unint64_t v20 = v40;
  }
  unint64_t v51 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v52 = v51 + 4;
  if (v51 + 4 > v37 || (unsigned int v53 = *(_DWORD *)(v21 + v51), v258[0] = v51 + 4, !v53))
  {
    if (!v18) {
      return 0;
    }
    uint64_t v31 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v32 = *MEMORY[0x1E4F281F8];
    uint64_t v33 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v34 = @"Can't read entity: Missing version hash value";
    goto LABEL_7;
  }
  v253 = v38;
  v254 = v27;
  uint64_t v256 = a12;
  uint64_t v252 = a14;
  atomic_store((unint64_t)*(id *)(a14 + 8 * bswap32(v53)), (unint64_t *)(v25 + 32));
  unint64_t v54 = (v51 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v55 = v54 + 4;
  if (v54 + 4 <= v37)
  {
    unsigned int v56 = *(_DWORD *)(v21 + v54);
    if (v56) {
      *(void *)(v25 + 48) = *(id *)(v256 + 8 * bswap32(v56));
    }
    unint64_t v52 = v55;
  }
  uint64_t v255 = a6;
  unint64_t v57 = (v52 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v58 = v57 + 4;
  if (v57 + 4 > v37 || (unsigned int v59 = *(_DWORD *)(v21 + v57), v258[0] = v57 + 4, !v59))
  {
    if (!v18) {
      return 0;
    }
    uint64_t v31 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v32 = *MEMORY[0x1E4F281F8];
    uint64_t v33 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v34 = @"Can't read entity: Missing entity name";
    goto LABEL_7;
  }
  uint64_t v251 = a15;
  *(void *)(v25 + 64) = *(id *)(v256 + 8 * bswap32(v59));
  unint64_t v60 = v57 + 5;
  if (v57 + 5 <= v37)
  {
    int v62 = *(unsigned __int8 *)(v21 + v58);
    v258[0] = v57 + 5;
    uint64_t v61 = v255;
    if (v62)
    {
      unint64_t v63 = (v52 + 11) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v64 = v63 + 4;
      uint64_t v65 = v251;
      if (v63 + 4 <= v37)
      {
        unsigned int v66 = bswap32(*(_DWORD *)(v21 + v63));
        v258[0] = v64;
        unint64_t v60 = v64;
      }
      else
      {
        unsigned int v66 = 0;
      }
      *(void *)(v25 + 80) = *(void *)(v251 + 8 * v66);
      unint64_t v58 = v60;
      goto LABEL_37;
    }
    unint64_t v58 = v60;
  }
  else
  {
    uint64_t v61 = v255;
  }
  uint64_t v65 = v251;
LABEL_37:
  unint64_t v67 = (v58 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v68 = v67 + 4;
  if (v67 + 4 <= v37)
  {
    unsigned int v69 = bswap32(*(_DWORD *)(v21 + v67));
    v258[0] = v68;
    unint64_t v58 = v68;
  }
  else
  {
    unsigned int v69 = 0;
  }
  *(void *)(v25 + 72) = *(void *)(v65 + 8 * v69);
  unint64_t v70 = v58 + 1;
  if (v58 + 1 <= v37)
  {
    int v71 = *(unsigned __int8 *)(v21 + v58);
    v258[0] = v58 + 1;
    if (v71)
    {
      if ((v58 & 0xFFFFFFFFFFFFFFFCLL) + 8 <= v37)
      {
        unsigned int v72 = bswap32(*(_DWORD *)((v58 & 0xFFFFFFFFFFFFFFFCLL) + v21 + 4));
        v258[0] = (v58 & 0xFFFFFFFFFFFFFFFCLL) + 8;
        unint64_t v70 = v258[0];
      }
      else
      {
        unsigned int v72 = 0;
      }
      unint64_t v73 = *(void **)(v61 + 8 * v72);
      *(void *)(v25 + 88) = v73;
      if ([v73 count])
      {
        if (!v18) {
          return 0;
        }
        uint64_t v31 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v32 = *MEMORY[0x1E4F281F8];
        uint64_t v33 = (void *)MEMORY[0x1E4F1C9E8];
        uint64_t v34 = @"Cant' read entity: Miswired subentities dictionary";
        goto LABEL_7;
      }
      unint64_t v74 = (v70 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      if (v74 + 4 <= v37)
      {
        unsigned int v75 = bswap32(*(_DWORD *)(v21 + v74));
        v258[0] = v74 + 4;
        unint64_t v70 = v74 + 4;
      }
      else
      {
        unsigned int v75 = 0;
      }
      if (objc_msgSend((id)objc_msgSend(*(id *)(v25 + 88), "mapping"), "length") != v75)
      {
        if (!v18) {
          return 0;
        }
        uint64_t v31 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v32 = *MEMORY[0x1E4F281F8];
        uint64_t v33 = (void *)MEMORY[0x1E4F1C9E8];
        uint64_t v34 = @"Cant' read entity: Mismatched subentity count";
        goto LABEL_7;
      }
      uint64_t v76 = v75;
      unint64_t v77 = (v70 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v78 = v21 + v77;
      if (v75)
      {
        uint64_t v79 = (void *)(v21 + v77);
        uint64_t v80 = v251;
        do
        {
          unint64_t v81 = (v70 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v82 = v81 + 8;
          if (v81 + 8 <= v37)
          {
            unint64_t v83 = bswap64(*(void *)(v21 + v81));
            v258[0] = v82;
            unint64_t v70 = v82;
          }
          else
          {
            unint64_t v83 = 0;
          }
          *v79++ = *(void *)(v80 + 8 * v83);
          --v76;
        }
        while (v76);
      }
      [*(id *)(v25 + 88) _setValues:v78 retain:1];
    }
    unint64_t v58 = v70;
  }
  unint64_t v84 = (v58 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v85 = v84 + 4;
  if (v84 + 4 <= v37)
  {
    unsigned int v86 = bswap32(*(_DWORD *)(v21 + v84));
    v258[0] = v85;
    unint64_t v58 = v85;
  }
  else
  {
    unsigned int v86 = 0;
  }
  uint64_t v87 = *(void **)(v61 + 8 * v86);
  *(void *)(v25 + 96) = v87;
  if ([v87 count])
  {
    if (!v18) {
      return 0;
    }
    uint64_t v31 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v32 = *MEMORY[0x1E4F281F8];
    uint64_t v33 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v34 = @"Cant' read entity: Properties dictionary has content";
    goto LABEL_7;
  }
  uint64_t v88 = (void *)[*(id *)(v25 + 96) mapping];
  *(void *)(v25 + 104) = v88;
  uint64_t v89 = [v88 length];
  unint64_t v250 = (v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v89)
  {
    uint64_t v90 = v89;
    uint64_t v91 = v89;
    do
    {
      unint64_t v92 = (v58 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v93 = v92 + 8;
      if (v92 + 8 <= v37)
      {
        uint64_t v94 = *(void *)(v21 + v92);
        v258[0] = v93;
        unint64_t v58 = v93;
        if (v94)
        {
          if (!v18) {
            return 0;
          }
          uint64_t v31 = (void *)MEMORY[0x1E4F28C58];
          uint64_t v32 = *MEMORY[0x1E4F281F8];
          uint64_t v33 = (void *)MEMORY[0x1E4F1C9E8];
          uint64_t v34 = @"Cant' read entity: Properties buffer has content";
          goto LABEL_7;
        }
      }
      --v91;
    }
    while (v91);
    unint64_t v95 = v250;
    do
    {
      unint64_t v96 = (v258[0] + 3) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v97 = v96 + 4;
      if (v96 + 4 <= v37)
      {
        int v98 = *(_DWORD *)(v21 + v96);
        v258[0] = v96 + 4;
        if (v98)
        {
          PropertyProxyFromBytes = _newReadPropertyProxyFromBytes(v254, v21, v258, v37, v25, v23);
          *(void *)(v21 + v95) = PropertyProxyFromBytes;
          if ([PropertyProxyFromBytes entity] != v25)
          {
            if (!v18) {
              return 0;
            }
            uint64_t v31 = (void *)MEMORY[0x1E4F28C58];
            uint64_t v32 = *MEMORY[0x1E4F281F8];
            uint64_t v33 = (void *)MEMORY[0x1E4F1C9E8];
            uint64_t v34 = @"Cant' read entity: Property entity does not match entity being decoded (2)";
            goto LABEL_7;
          }
          goto LABEL_81;
        }
        unint64_t v96 = (v96 + 7) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v97 = v96 + 4;
      }
      if (v97 <= v37)
      {
        unsigned int v100 = bswap32(*(_DWORD *)(v21 + v96));
        v258[0] = v97;
      }
      else
      {
        unsigned int v100 = 0;
      }
      uint64_t v101 = *(void **)(v23 + 8 * v100);
      *(void *)(v21 + v95) = v101;
      if ([v101 entity] != v25)
      {
        if (!v18) {
          return 0;
        }
        uint64_t v31 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v32 = *MEMORY[0x1E4F281F8];
        uint64_t v33 = (void *)MEMORY[0x1E4F1C9E8];
        uint64_t v34 = @"Cant' read entity: Property entity does not match entity being decoded (1)";
        goto LABEL_7;
      }
LABEL_81:
      v95 += 8;
      --v90;
    }
    while (v90);
  }
  [*(id *)(v25 + 96) _setValues:v21 + v250 retain:0];
  if (a17 == (unint64_t **)1)
  {
    id v102 = (unint64_t *)malloc_type_malloc(0x120uLL, 0x1000040451B5BE8uLL);
    uint64_t v103 = 0;
    unint64_t v104 = v258[0];
    uint64_t v105 = v102 + 1;
    do
    {
      switch((int)v103)
      {
        case 8:
          v102[16] = 0;
          v102[17] = 0;
          break;
        case 9:
          *((_OWORD *)v102 + 9) = *((_OWORD *)v102 + 7);
          break;
        case 12:
          v102[24] = 0;
          v102[25] = 0;
          break;
        case 13:
          *((_OWORD *)v102 + 13) = *((_OWORD *)v102 + 11);
          break;
        default:
          unint64_t v106 = (v104 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v107 = v106 + 8;
          if (v106 + 8 <= v37)
          {
            unint64_t v108 = bswap64(*(void *)(v21 + v106));
            v258[0] = v106 + 8;
            unint64_t v106 = (v106 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v109 = v106 + 8;
            unint64_t v104 = v107;
          }
          else
          {
            unint64_t v108 = 0;
            unint64_t v109 = v106 + 8;
          }
          *(v105 - 1) = v108;
          if (v109 <= v37)
          {
            unint64_t v110 = bswap64(*(void *)(v21 + v106));
            v258[0] = v109;
            unint64_t v104 = v109;
          }
          else
          {
            unint64_t v110 = 0;
          }
          *uint64_t v105 = v110;
          break;
      }
      ++v103;
      v105 += 2;
    }
    while (v103 != 17);
  }
  else
  {
    uint64_t v111 = 0;
    unint64_t v104 = v258[0];
    id v102 = (unint64_t *)(v21 + ((v258[0] + 7) & 0xFFFFFFFFFFFFFFF8));
    do
    {
      unint64_t v112 = (v104 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v113 = v112 + 8;
      if (v112 + 8 <= v37)
      {
        unint64_t v114 = bswap64(*(void *)(v21 + v112));
        v258[0] = v112 + 8;
        unint64_t v112 = (v112 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v115 = v112 + 8;
        unint64_t v104 = v113;
      }
      else
      {
        unint64_t v114 = 0;
        unint64_t v115 = v112 + 8;
      }
      v102[v111] = v114;
      if (v115 <= v37)
      {
        unint64_t v116 = bswap64(*(void *)(v21 + v112));
        v258[0] = v115;
        unint64_t v104 = v115;
      }
      else
      {
        unint64_t v116 = 0;
      }
      v102[v111 + 1] = v116;
      v111 += 2;
    }
    while (v111 != 36);
  }
  uint64_t v117 = a11;
  uint64_t v118 = a9;
  *(void *)(v25 + 112) = v102;
  unint64_t v119 = (v104 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v120 = v119 + 4;
  if (v119 + 4 <= v37)
  {
    unsigned int v121 = bswap32(*(_DWORD *)(v21 + v119));
    v258[0] = v120;
    unint64_t v104 = v120;
  }
  else
  {
    unsigned int v121 = 0;
  }
  uint64_t v244 = a10;
  if (a17 != (unint64_t **)1) {
    v121 |= 0x80u;
  }
  *(_DWORD *)(v25 + 120) = v121;
  int v122 = 8;
  do
  {
    if (((v104 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v37)
    {
      v258[0] = ((v104 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      unint64_t v104 = v258[0];
    }
    --v122;
  }
  while (v122);
  uint64_t v123 = v104 + v21 - 64;
  *(void *)(v25 + 128) = v123;
  unint64_t v124 = (v104 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v125 = v124 + 8;
  if (v124 + 8 <= v37)
  {
    unint64_t v126 = (unint64_t)*(unsigned int *)(v21 + v124 + 4) << 32;
    v258[0] = v125;
    unint64_t v104 = v125;
    if (v126)
    {
      uint64_t v127 = v253[bswap64(v126)];
      v253 = a17;
      id v102 = v127;
      uint64_t v118 = a9;
      uint64_t v117 = a11;
      uint64_t v123 = *(void *)(v25 + 128);
      *(void *)uint64_t v123 = v102;
      unint64_t v104 = v258[0];
    }
  }
  if ((unint64_t)a17 >= 0xB)
  {
    unint64_t v128 = (v104 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v129 = v128 + 8;
    if (v128 + 8 <= v37)
    {
      unint64_t v130 = (unint64_t)*(unsigned int *)(v21 + v128 + 4) << 32;
      v258[0] = v129;
      unint64_t v104 = v129;
      if (v130)
      {
        v239 = v118;
        v240 = v117;
        v253 = *(unint64_t ***)(v252 + 8 * bswap64(v130));
        uint64_t v257 = 0;
        unint64_t v250 = (unint64_t)_PFRoutines;
        double v131 = (void *)MEMORY[0x1E4F1CAD0];
        uint64_t v132 = objc_opt_class();
        uint64_t v133 = objc_msgSend(v131, "setWithObjects:", v132, objc_opt_class(), 0);
        uint64_t v134 = +[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v133, (uint64_t)v253, (uint64_t)&v257);
        if (!v134)
        {
          uint64_t v237 = [(id)v25 name];
          _NSCoreDataLog(1, @"Can't decode coreSpotlightDisplayNameExpression for entity %", v224, v225, v226, v227, v228, v229, v237);
          goto LABEL_211;
        }
        uint64_t v135 = (void *)v134;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          uint64_t v238 = objc_opt_class();
          _NSCoreDataLog(1, @"Can't decode coreSpotlightDisplayNameExpression - wrong class decoded - %@", v230, v231, v232, v233, v234, v235, v238);
          goto LABEL_211;
        }
        id v102 = v135;
        uint64_t v123 = *(void *)(v25 + 128);
        *(void *)(v123 + 32) = v102;
        unint64_t v104 = v258[0];
        uint64_t v61 = v255;
        uint64_t v118 = v239;
        uint64_t v117 = v240;
      }
    }
  }
  unint64_t v136 = (v104 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v137 = v136 + 8;
  if (v136 + 8 > v37)
  {
    unint64_t v138 = 0;
    uint64_t v139 = 0;
    id v140 = 0;
    goto LABEL_179;
  }
  unint64_t v141 = (unint64_t)*(unsigned int *)(v21 + v136 + 4) << 32;
  v258[0] = v136 + 8;
  if (!v141)
  {
    unint64_t v138 = 0;
    uint64_t v139 = 0;
    id v140 = 0;
    unint64_t v104 = v137;
LABEL_179:
    *(void *)(v123 + 40) = v140;
    *(_DWORD *)(v123 + 48) = 0;
    *uint64_t v118 = v138;
    *uint64_t v117 = v139;
    unint64_t v177 = (v104 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v178 = v177 + 8;
    if (v177 + 8 <= v37)
    {
      unint64_t v179 = (unint64_t)*(unsigned int *)(v21 + v177 + 4) << 32;
      v258[0] = v178;
      unint64_t v104 = v178;
      if (v179)
      {
        v253 = &v239;
        unint64_t v180 = bswap64(v179);
        MEMORY[0x1F4188790](v102);
        BOOL v182 = (void **)((char *)&v239 - ((v181 + 15) & 0xFFFFFFFF0));
        uint64_t v183 = 0;
        uint64_t v184 = v256;
        uint64_t v185 = (uint64_t)v254;
        do
          v182[v183++] = (void *)_newReadPFEncodedArrayFromData(v185, v21, v258, v37, v184, 0);
        while (v180 != v183);
        uint64_t v186 = [objc_alloc(MEMORY[0x1E4F1C978]) initWithObjects:v182 count:v180];
        do
        {
          long long v187 = *v182++;

          --v180;
        }
        while (v180);
        *(void *)(*(void *)(v25 + 128) + 24) = v186;
        unint64_t v104 = v258[0];
        uint64_t v61 = v255;
      }
    }
    unint64_t v188 = (v104 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v189 = v188 + 4;
    if (v188 + 4 > v37) {
      goto LABEL_190;
    }
    unsigned int v190 = *(_DWORD *)(v21 + v188);
    v258[0] = v189;
    unint64_t v104 = v189;
    if (!v190) {
      goto LABEL_190;
    }
    uint64_t v191 = *(void *)(v252 + 8 * bswap32(v190));
    uint64_t v257 = 0;
    uint64_t v192 = +[_PFRoutines plistClassesForSecureCoding]();
    BOOL v193 = (void *)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v192, v191, (uint64_t)&v257);
    if (v193)
    {
      *(void *)(v25 + 136) = v193;
      unint64_t v104 = v258[0];
LABEL_190:
      unint64_t v194 = (v104 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v195 = v194 + 4;
      if (v194 + 4 <= v37)
      {
        int v196 = *(_DWORD *)(v21 + v194);
        v258[0] = v195;
        unint64_t v104 = v195;
        if (v196)
        {
          PFEncodedArrayFromData = (void *)_newReadPFEncodedArrayFromData((uint64_t)v254, v21, v258, v37, v251, 0);
          v198 = (const void **)[PFEncodedArrayFromData _values];
          *(void *)(v25 + 144) = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v198, [PFEncodedArrayFromData count], 0);

          unint64_t v104 = v258[0];
        }
      }
      unint64_t v199 = (v104 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v200 = v199 + 4;
      if (v199 + 4 <= v37)
      {
        uint64_t v201 = bswap32(*(_DWORD *)(v21 + v199));
        v258[0] = v200;
      }
      else
      {
        uint64_t v201 = 0;
      }
      *(void *)(v25 + 160) = v201;
      v202 = *(void **)(v25 + 104);
      uint64_t v203 = objc_msgSend(v202, "keys", v239, v240);
      size_t v204 = [v202 length];
      *(void *)(v25 + 152) = PF_CALLOC_SCANNED_BYTES(0x50uLL);
      *(void *)(*(void *)(v25 + 152) + 48) = [objc_alloc(MEMORY[0x1E4F1CAD0]) initWithObjects:v203 count:v204];
      uint64_t v205 = [*(id *)(v25 + 96) values];
      uint64_t v206 = v205;
      unint64_t v207 = (v258[0] + 3) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v208 = v207 + 4;
      if (v207 + 4 <= v37)
      {
        uint64_t v209 = bswap32(*(_DWORD *)(v21 + v207));
        v258[0] = v208;
      }
      else
      {
        uint64_t v209 = 0;
      }
      v210 = *(void **)(v61 + 8 * v209);
      [v210 setValues:v205 + 8 * *(void *)(*(void *)(v25 + 112) + 16)];
      *(void *)(*(void *)(v25 + 152) + 56) = v210;
      unint64_t v211 = (v258[0] + 3) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v212 = v211 + 4;
      if (v211 + 4 <= v37)
      {
        uint64_t v213 = bswap32(*(_DWORD *)(v21 + v211));
        v258[0] = v212;
      }
      else
      {
        uint64_t v213 = 0;
      }
      v214 = *(void **)(v61 + 8 * v213);
      [v214 setValues:v206 + 8 * *(void *)(*(void *)(v25 + 112) + 32)];
      *(void *)(*(void *)(v25 + 152) + 64) = v214;
      *(void *)(*(void *)(v25 + 152) + 72) = PF_CALLOC_UNSCANNED_BYTES(v204);
      unint64_t v215 = (v258[0] + 3) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v216 = v215 + 4;
      if (v215 + 4 <= v37)
      {
        int v217 = *(_DWORD *)(v21 + v215);
        v258[0] = v216;
        if (v217 == -335614502)
        {
          -[NSEntityDescription _commonCachesAndOptimizedState]((id)v25);
          *uint64_t v26 = v258[0];
          return 1;
        }
      }
      uint64_t v31 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v32 = *MEMORY[0x1E4F281F8];
      uint64_t v33 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v34 = @"Can't read entity into shell: Missing entity back-end delimiter";
LABEL_7:
      uint64_t v35 = objc_msgSend(v31, "errorWithDomain:code:userInfo:", v32, 134060, objc_msgSend(v33, "dictionaryWithObject:forKey:", v34, @"Root cause", v239, v240));
      uint64_t result = 0;
      uint64_t *v18 = v35;
      return result;
    }
    uint64_t v236 = [(id)v25 name];
    _NSCoreDataLog(1, @"Unable to decode userInfo for entity '%@' : %@", v218, v219, v220, v221, v222, v223, v236);
LABEL_211:
    if (v18) {
      uint64_t *v18 = v257;
    }
    return 0;
  }
  unint64_t v142 = bswap64(v141);
  if (*v118 < v142)
  {
    if (!v18) {
      return 0;
    }
    uint64_t v31 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v32 = *MEMORY[0x1E4F281F8];
    uint64_t v33 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v34 = @"Cant' read entity: Mismatched number of fetch indexes";
    goto LABEL_7;
  }
  v239 = v118;
  v240 = v117;
  unint64_t v241 = *v117;
  unint64_t v245 = v142;
  id v246 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v142];
  unint64_t v250 = 0;
  uint64_t v243 = 0;
  while (1)
  {
    unint64_t v143 = (v258[0] + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v144 = v143 + 8;
    if (v143 + 8 <= v37)
    {
      unint64_t v145 = *(void *)(v21 + v143);
      v258[0] = v143 + 8;
      uint64_t v248 = v145 ? *(void *)(v256 + 8 * bswap64(v145)) : 0;
    }
    else
    {
      uint64_t v248 = 0;
      unint64_t v144 = v258[0];
    }
    int v146 = *(void **)(v22 + 8 * v250);
    unint64_t v147 = (v144 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v147 + 8 <= v37)
    {
      uint64_t v148 = *(void *)(v21 + v147);
      v258[0] = v147 + 8;
      if (v148)
      {
        unint64_t v149 = (v147 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v150 = v149 + 8;
        if (v149 + 8 <= v37)
        {
          unint64_t v151 = bswap64(*(void *)(v21 + v149));
          v258[0] = v150;
        }
        else
        {
          unint64_t v151 = 0;
        }
        v253 = *(unint64_t ***)(v252 + 8 * v151);
        uint64_t v152 = (void *)MEMORY[0x1E4F1CAD0];
        uint64_t v153 = objc_opt_class();
        uint64_t v154 = objc_msgSend(v152, "setWithObjects:", v153, objc_opt_class(), 0);
        uint64_t v247 = +[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v154, (uint64_t)v253, 0);
        unint64_t v144 = v258[0];
      }
      else
      {
        uint64_t v247 = 0;
        unint64_t v144 = v147 + 8;
      }
    }
    else
    {
      uint64_t v247 = 0;
    }
    unint64_t v155 = (v144 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v156 = v155 + 8;
    id v249 = v146;
    if (v155 + 8 <= v37)
    {
      unint64_t v157 = *(void *)(v21 + v155);
      v258[0] = v156;
      if (v157) {
        break;
      }
    }
    uint64_t v160 = (unint64_t **)objc_alloc_init(MEMORY[0x1E4F1CA48]);
LABEL_177:
    int v176 = v160;
    objc_msgSend(v249, "initWithName:predicate:elements:entity:", v248, v247, v160, v25, v239, v240);

    [v246 addObject:v249];
    if (++v250 == v245)
    {
      uint64_t v123 = *(void *)(v25 + 128);
      unint64_t v104 = v258[0];
      uint64_t v118 = v239;
      uint64_t v117 = v240;
      unint64_t v138 = v245;
      id v140 = v246;
      uint64_t v139 = v243;
      uint64_t v61 = v255;
      goto LABEL_179;
    }
  }
  uint64_t v158 = bswap64(v157);
  if (v241 >= v158)
  {
    unsigned int v159 = (unint64_t **)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v158];
    uint64_t v160 = v159;
    if (v158 >= 1)
    {
      v253 = v159;
      uint64_t v242 = v158 + v243;
      int v161 = (void **)(v244 + 8 * v243);
      do
      {
        unint64_t v162 = (v258[0] + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v163 = v162 + 8;
        if (v162 + 8 <= v37)
        {
          unint64_t v165 = *(void *)(v21 + v162);
          v258[0] = v162 + 8;
          if (v165) {
            uint64_t v164 = *(void **)(v256 + 8 * bswap64(v165));
          }
          else {
            uint64_t v164 = 0;
          }
        }
        else
        {
          uint64_t v164 = 0;
          unint64_t v163 = v258[0];
        }
        unint64_t v166 = (v163 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v167 = v166 + 8;
        if (v166 + 8 <= v37)
        {
          uint64_t v168 = bswap64(*(void *)(v21 + v166));
          v258[0] = v166 + 8;
          unint64_t v166 = (v166 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v167 = v166 + 8;
        }
        else
        {
          uint64_t v168 = 0;
        }
        if (v167 <= v37)
        {
          unint64_t v169 = bswap64(*(void *)(v21 + v166));
          v258[0] = v167;
          unint64_t v166 = (v167 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v167 = v166 + 8;
        }
        else
        {
          unint64_t v169 = 0;
        }
        if (v167 <= v37 && (uint64_t v170 = *(void *)(v21 + v166), v258[0] = v167, v170))
        {
          unint64_t v171 = (v167 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v172 = v171 + 8;
          if (v171 + 8 <= v37)
          {
            unint64_t v173 = bswap64(*(void *)(v21 + v171));
            v258[0] = v172;
          }
          else
          {
            unint64_t v173 = 0;
          }
          uint64_t v174 = *(void **)(v23 + 8 * v173);
        }
        else
        {
          uint64_t v174 = 0;
        }
        int v175 = *v161++;
        -[NSFetchIndexElementDescription initWithPropertyName:property:collationType:ascending:](v175, v164, v174, v168, v169 != 0);
        [v253 addObject:v175];

        --v158;
      }
      while (v158);
      uint64_t v243 = v242;
      uint64_t v160 = v253;
    }
    goto LABEL_177;
  }
  if (v18) {
    uint64_t *v18 = objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", *MEMORY[0x1E4F281F8], 134060, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObject:forKey:", @"Cant' read entity: Mismatched number of fetch index elements", @"Root cause"));
  }

  return 0;
}

void *_newReadPropertyProxyFromBytes(void *a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (objc_class *)_newReadPropertyProxyFromBytes_myProxyClass;
  if (!_newReadPropertyProxyFromBytes_myProxyClass)
  {
    uint64_t v12 = (objc_class *)objc_opt_class();
    _newReadPropertyProxyFromBytes_myProxyClass Class = (uint64_t)v12;
  }
  unint64_t v13 = (*a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = v13 + 36;
  if (v13 + 36 > a4) {
    return 0;
  }
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = *(void *)(a6 + 8 * bswap32(*(_DWORD *)(a2 + v13)));
  unsigned int v17 = *(_DWORD *)(a2 + (v13 | 4));
  *uint64_t v15 = 0;
  object_setClass(v15, v12);
  v15[1] = a1;
  v15[2] = v16;
  v15[3] = a5;
  *((_DWORD *)v15 + 8) = bswap32(v17);
  *a3 = v14;
  return v15;
}

id *_PF_ObjectIDsForDeferredFault(id **a1, unint64_t a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (_PF_Threading_Debugging_level) {
    _PFAssertSafeMultiThreadedAccess_impl([a1 managedObjectContext], sel_fulfillFault_withContext_forIndex_);
  }
  if ((a1[2] & 0x30000) == 0x10000 || (a1[2] & 0x80) != 0) {
    return 0;
  }
  uint64_t v5 = (uint64_t)a1[4];
  uint64_t v6 = _PFEntityForManagedObject(a1);
  uint64_t v7 = (void *)v6[14];
  unint64_t v8 = v7[2];
  BOOL v10 = a2 >= v8;
  unint64_t v9 = a2 - v8;
  BOOL v10 = !v10 || v9 >= v7[3];
  int v11 = !v10;
  if ((a1[2] & 0x38000) == 0x8000 || v11 != 0) {
    [(id)_insertion_fault_handler fulfillFault:a1 withContext:v5 forIndex:a2];
  }
  if (v11) {
    return 0;
  }
  unint64_t v15 = v7[12];
  BOOL v10 = a2 >= v15;
  unint64_t v16 = a2 - v15;
  int v18 = v10 && v16 < v7[13];
  uint64_t v25 = *(void *)(_kvcPropertysPrimitiveGetters(v6) + 8 * a2);
  if (v25) {
    uint64_t v26 = (void *)_NSGetUsingKeyValueGetter();
  }
  else {
    snapshot_get_value_as_object(a1[3], a2, v19, v20, v21, v22, v23, v24);
  }
  uint64_t v27 = v26;
  if (v18)
  {
    if (!v5) {
      return 0;
    }
    if (v26 == (void *)_CD_ScalarNull)
    {
      [(id)_insertion_fault_handler fulfillFault:a1 withContext:v5 forIndex:a2];
      uint64_t result = a1[3];
      if (!result)
      {
        __break(1u);
        return result;
      }
      if (v25) {
        uint64_t v34 = _NSGetUsingKeyValueGetter();
      }
      else {
        snapshot_get_value_as_object(result, a2, v28, v29, v30, v31, v32, v33);
      }
      uint64_t v27 = (void *)v34;
    }
    if (!v27) {
      return 0;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v27 = (void *)[v27 objectID];
      if (!v27) {
        return 0;
      }
    }
    long long v44 = (void *)MEMORY[0x1E4F1C978];
    return (id *)[v44 arrayWithObject:v27];
  }
  else
  {
    if (v26 && ([v26 isFault] & 1) == 0)
    {
      unint64_t v13 = (void *)[MEMORY[0x1E4F1CA48] array];
      long long v49 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      uint64_t v40 = [v27 countByEnumeratingWithState:&v49 objects:v54 count:16];
      if (v40)
      {
        uint64_t v41 = v40;
        uint64_t v42 = *(void *)v50;
        do
        {
          for (uint64_t i = 0; i != v41; ++i)
          {
            if (*(void *)v50 != v42) {
              objc_enumerationMutation(v27);
            }
            objc_msgSend(v13, "addObject:", objc_msgSend(*(id *)(*((void *)&v49 + 1) + 8 * i), "objectID"));
          }
          uint64_t v41 = [v27 countByEnumeratingWithState:&v49 objects:v54 count:16];
        }
        while (v41);
      }
      return (id *)v13;
    }
    id v35 = -[NSFaultHandler retainedFulfillAggregateFaultForObject:andRelationship:withContext:](_insertion_fault_handler, a1, *(void **)(v6[12] + 24 + 8 * a2), v5);
    if (![v35 isNSArray])
    {
      unint64_t v13 = (void *)[MEMORY[0x1E4F1CA48] array];
      long long v45 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      uint64_t v36 = [v35 countByEnumeratingWithState:&v45 objects:v53 count:16];
      if (v36)
      {
        uint64_t v37 = v36;
        uint64_t v38 = *(void *)v46;
        do
        {
          for (uint64_t j = 0; j != v37; ++j)
          {
            if (*(void *)v46 != v38) {
              objc_enumerationMutation(v35);
            }
            [v13 addObject:*(void *)(*((void *)&v45 + 1) + 8 * j)];
          }
          uint64_t v37 = [v35 countByEnumeratingWithState:&v45 objects:v53 count:16];
        }
        while (v37);
      }

      return (id *)v13;
    }
    return (id *)v35;
  }
}

id static NSManagedObject.fetchRequest()()
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(ObjCClassFromMetadata, sel_entity);
  if (v1)
  {
    os_signpost_id_t v2 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSFetchRequest);
    uint64_t v3 = (objc_class *)swift_getObjCClassFromMetadata();
    id v4 = v2;
    id v5 = objc_msgSend(objc_allocWithZone(v3), sel_init);
    objc_msgSend(v5, sel_setEntity_, v4);

    return v5;
  }
  else
  {
    id v7 = objc_msgSend(ObjCClassFromMetadata, sel_entityName);
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSFetchRequest);
    return NSFetchRequest.__allocating_init(entityName:)(v8, v10);
  }
}

id _PFEntityForClass(void *a1)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [a1 _PFMOClassFactoryData];
  if (!v2 || (id v3 = *(id *)(v2 + 8)) == 0)
  {
    Name = class_getName((Class)a1);
    if (!strncmp(Name, "NSManagedObject", 0xFuLL)) {
      return 0;
    }
    id AssociatedObject = objc_getAssociatedObject(a1, PFEntityDescriptionAssociationKey);
    if (![AssociatedObject count]) {
      goto LABEL_18;
    }
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    uint64_t v12 = [AssociatedObject countByEnumeratingWithState:&v80 objects:v87 count:16];
    if (!v12) {
      goto LABEL_18;
    }
    uint64_t v13 = v12;
    id v3 = 0;
    uint64_t v14 = *(void *)v81;
    while (2)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v81 != v14) {
          objc_enumerationMutation(AssociatedObject);
        }
        uint64_t v16 = *(void *)(*((void *)&v80 + 1) + 8 * i);
        if (v16)
        {
          id WeakRetained = objc_loadWeakRetained((id *)(v16 + 8));
          if (WeakRetained)
          {
            if (v3 && WeakRetained != v3)
            {

              os_unfair_lock_lock_with_options();
              CFStringRef v25 = CFStringCreateWithCString(0, Name, 0x8000100u);
              CFSetRef Mutable = (const __CFSet *)qword_1EB270690;
              if (!qword_1EB270690)
              {
                CFSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
                qword_1EB270690 = (uint64_t)Mutable;
              }
              int v27 = CFSetContainsValue(Mutable, v25);
              if (v27)
              {
                CFRelease(v25);
                os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB270670);
              }
              else
              {
                CFSetAddValue((CFMutableSetRef)qword_1EB270690, v25);
                CFRelease(v25);
                os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB270670);
                _NSCoreDataLog(2, @"Multiple NSEntityDescriptions claim the NSManagedObject subclass '%s' so +entity is unable to disambiguate.", v28, v29, v30, v31, v32, v33, (uint64_t)Name);
              }
              long long v78 = 0u;
              long long v79 = 0u;
              long long v76 = 0u;
              long long v77 = 0u;
              uint64_t v34 = [AssociatedObject countByEnumeratingWithState:&v76 objects:v86 count:16];
              if (v34)
              {
                uint64_t v35 = v34;
                uint64_t v36 = *(void *)v77;
                do
                {
                  for (uint64_t j = 0; j != v35; ++j)
                  {
                    if (*(void *)v77 != v36) {
                      objc_enumerationMutation(AssociatedObject);
                    }
                    uint64_t v38 = *(void *)(*((void *)&v76 + 1) + 8 * j);
                    if (v38)
                    {
                      id v39 = objc_loadWeakRetained((id *)(v38 + 8));
                      if (v39)
                      {
                        uint64_t v40 = v39;
                        if (!v27)
                        {
                          uint64_t v41 = [v39 name];
                          [v40 managedObjectModel];
                          _NSCoreDataLog(2, @" \t '%@' (%p) from NSManagedObjectModel (%p) claims '%s'.", v42, v43, v44, v45, v46, v47, v41);
                        }
                      }
                    }
                  }
                  uint64_t v35 = [AssociatedObject countByEnumeratingWithState:&v76 objects:v86 count:16];
                }
                while (v35);
              }
              char v24 = 1;
              goto LABEL_37;
            }
            id v3 = WeakRetained;
          }
        }
      }
      uint64_t v13 = [AssociatedObject countByEnumeratingWithState:&v80 objects:v87 count:16];
      if (v13) {
        continue;
      }
      break;
    }
    if (!v3)
    {
LABEL_18:
      _NSCoreDataLog(1, @"No NSEntityDescriptions in any model claim the NSManagedObject subclass '%s' so +entity is confused.  Have you loaded your NSManagedObjectModel yet ?", v6, v7, v8, v9, v10, v11, (uint64_t)Name);
      char v24 = 0;
LABEL_37:
      long long v48 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 712);
      if (v48)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v49 = objc_msgSend((id)objc_msgSend(v48, "persistentStoreCoordinator"), "managedObjectModel");
          if (v49)
          {
            unsigned int v56 = (void *)v49;
            unint64_t v57 = (void *)[NSString stringWithUTF8String:Name];
            long long v72 = 0u;
            long long v73 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            uint64_t v58 = [v56 countByEnumeratingWithState:&v72 objects:v85 count:16];
            if (v58)
            {
              uint64_t v59 = v58;
              id v3 = 0;
              uint64_t v60 = *(void *)v73;
              while (2)
              {
                for (uint64_t k = 0; k != v59; ++k)
                {
                  if (*(void *)v73 != v60) {
                    objc_enumerationMutation(v56);
                  }
                  int v62 = *(void **)(*((void *)&v72 + 1) + 8 * k);
                  uint64_t v63 = [v62 managedObjectClassName];
                  if (v63 && [v57 isEqualToString:v63])
                  {
                    if (v3)
                    {
                      [v62 name];
                      [v3 name];
                      _NSCoreDataLog(1, @"Multiple NSEntityDescriptions in NSManagedObjectModel (%p) claim the NSManagedObject subclass '%s' so +entity is unable to disambiguate.  Both entities '%@' (%p) and '%@' (%p)", v65, v66, v67, v68, v69, v70, (uint64_t)v56);
                      goto LABEL_59;
                    }
                    id v3 = v62;
                  }
                }
                uint64_t v59 = [v56 countByEnumeratingWithState:&v72 objects:v85 count:16];
                if (v59) {
                  continue;
                }
                break;
              }
              if (v3) {
                char v64 = v24;
              }
              else {
                char v64 = 1;
              }
              if ((v64 & 1) == 0)
              {
                id v84 = +[_PFWeakReference weakReferenceWithObject:]((uint64_t)_PFWeakReference, (uint64_t)v3);
                objc_setAssociatedObject(a1, PFEntityDescriptionAssociationKey, (id)[MEMORY[0x1E4F1C978] arrayWithObjects:&v84 count:1], (void *)0x303);
                return v3;
              }
              if (v3) {
                return v3;
              }
            }
          }
          else
          {
            _NSCoreDataLog(1, @"This NSManagedObjectContext (%p) does not have a coordinator and model assigned yet so +entity on '%s' is sad.", v50, v51, v52, v53, v54, v55, (uint64_t)v48);
          }
        }
      }
LABEL_59:
      _NSCoreDataLog(1, @"+[%s entity] Failed to find a unique match for an NSEntityDescription to a managed object subclass", v18, v19, v20, v21, v22, v23, (uint64_t)Name);
      return 0;
    }
  }
  return v3;
}

void _deallocateFetchEntityPlan(CFTypeRef *ptr)
{
  if (ptr)
  {
    uint64_t v2 = *((unsigned int *)ptr + 1);
    if (v2)
    {
      id v3 = ptr + 3;
      do
      {
        if (*v3) {
          CFRelease(*v3);
        }
        v3 += 3;
        --v2;
      }
      while (v2);
    }
    id v4 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      id v4 = malloc_default_zone();
    }
    malloc_zone_free(v4, ptr);
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void sub_18ABDA3E8(_Unwind_Exception *a1)
{
}

void sub_18ABDA630(_Unwind_Exception *a1)
{
}

void sub_18ABDA650(void *a1)
{
}

void sub_18ABDBB58(_Unwind_Exception *a1)
{
}

void sub_18ABDBB88(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ABDBA90);
  }
  JUMPOUT(0x18ABDBB80);
}

void sub_18ABDBDC8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void _pvfk_45(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_47(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _pvfk_41(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sortRawRowsForPrefetching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 8);
  uint64_t v4 = *(void *)(*(void *)a2 + 8);
  if (v3 > v4) {
    return 1;
  }
  if (v3 < v4) {
    return -1;
  }
  if (!*(unsigned char *)(a3 + 1)) {
    return 0;
  }
  uint64_t v6 = *(unsigned __int8 *)(a3 + 2);
  uint64_t v7 = *(void *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *(void *)(*(void *)a2 + 8 * v6);
  if (v7 > v8) {
    return 1;
  }
  if (v7 >= v8) {
    return 0;
  }
  else {
    return -1;
  }
}

void stack_deallocate(void *ptr, void *a2)
{
  if (*a2 > (unint64_t)ptr || a2[2] <= (unint64_t)ptr)
  {
    --a2[3];
    uint64_t v3 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      uint64_t v3 = malloc_default_zone();
    }
    malloc_zone_free(v3, ptr);
  }
}

uint64_t _prepareRowsOnBackgroundThreads(uint64_t a1)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)(a1 + 24);
  uint64_t v3 = *v2;
  if (*v2) {
    uint64_t v4 = *(void *)(v3 + 136);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v54 = (__CFArray *)v2[2];
  uint64_t v5 = v2[4];
  uint64_t v50 = (unsigned __int8 *)v2[3];
  CFArrayRef v51 = (const __CFArray *)v2[1];
  int v56 = (*(_DWORD *)(v4 + 72) >> 2) & 7;
  char v6 = [*(id *)(v4 + 8) _disablePersistentStoreResultCaching];
  PF_FREE_OBJECT_ARRAY(*(void **)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  if (v3) {
    uint64_t v59 = (void *)[*(id *)(v3 + 8) objectIDFactoryForSQLEntity:*(void *)(v4 + 40)];
  }
  else {
    uint64_t v59 = 0;
  }
  uint64_t v57 = v4;
  int v7 = *(_DWORD *)(v4 + 72);
  unsigned __int8 v65 = 1;
  __dmb(0xBu);
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  unsigned int v62 = v56 - 1;
  if ((v56 - 1) >= 2)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v8, 0, 0);
    uint64_t v10 = PF_CALLOC_UNSCANNED_BYTES(0x28uLL);
    *uint64_t v10 = v3;
    v10[1] = Mutable;
    CFArrayRef theArray = Mutable;
    v10[2] = v54;
    v10[3] = &v65;
    v10[4] = v5;
    uint64_t v47 = [[_PFTask alloc] initWithFunction:_prepareFaultsOnBackgroundThread withArgument:v10 andPriority:2];
  }
  else
  {
    CFArrayRef theArray = 0;
    uint64_t v47 = 0;
  }
  char v64 = 1;
  if (v6)
  {
    CFMutableArrayRef v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    CFMutableArrayRef v11 = CFArrayCreateMutable(v8, 0, 0);
    uint64_t v13 = PF_CALLOC_UNSCANNED_BYTES(0x28uLL);
    *uint64_t v13 = v3;
    v13[1] = v11;
    void v13[2] = 0;
    v13[3] = &v64;
    uint64_t v12 = [[_PFTask alloc] initWithFunction:_prepareRowCacheOnBackgroundThread withArgument:v13 andPriority:2];
  }
  uint64_t v14 = CFArrayCreateMutable(v8, 0, 0);
  unint64_t v15 = PF_CALLOC_UNSCANNED_BYTES(0x40uLL);
  *unint64_t v15 = v3;
  v15[1] = v14;
  v15[2] = 0;
  v15[3] = &v65;
  if ((v6 & 1) == 0)
  {
    v15[4] = v12;
    v15[5] = v11;
    v15[6] = &v64;
  }
  uint64_t v45 = v12;
  CFMutableArrayRef v46 = v11;
  uint64_t v16 = [[_PFTask alloc] initWithFunction:_populateRowValuesOnBackgroundThread withArgument:v15 andPriority:2];
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v48 = (pthread_cond_t *)(a1 + 96);
  uint64_t v49 = (pthread_mutex_t *)(a1 + 32);
  long long v70 = 0u;
  long long v71 = 0u;
  p_condition = &v47->condition;
  p_locuint64_t k = &v47->lock;
  uint64_t v44 = v16;
  uint64_t v60 = &v16->condition;
  uint64_t v61 = &v16->lock;
  long long v68 = 0u;
  long long v69 = 0u;
  *(_OWORD *)values = 0u;
  long long v67 = 0u;
  char v58 = v7;
  do
  {
LABEL_14:
    while (1)
    {
      pthread_mutex_lock(v49);
      do
      {
        CFIndex Count = CFArrayGetCount(v51);
        unint64_t v18 = Count;
        if (Count >= 1)
        {
          if (Count >= 128) {
            CFIndex v23 = 128;
          }
          else {
            CFIndex v23 = Count;
          }
          v99.location = 0;
          v99.length = v23;
          CFArrayGetValues(v51, v99, (const void **)values);
          if (v18 > 0x7F)
          {
            v100.location = 0;
            v100.length = v23;
            CFArrayReplaceValues(v51, v100, 0, 0);
          }
          else
          {
            CFArrayRemoveAllValues(v51);
          }
          atomic_load(v50);
          pthread_mutex_unlock(v49);
          uint64_t v24 = 0;
          CFIndex v63 = v23;
          while (1)
          {
            CFStringRef v25 = values[v24];
            if (v25[1] <= 0x40000000u) {
              unsigned int v26 = v25[1];
            }
            else {
              unsigned int v26 = 0;
            }
            int v27 = PF_ALLOCATE_OBJECT_ARRAY((int)v26);
            if (v27) {
              uint64_t v28 = v26;
            }
            else {
              uint64_t v28 = 0;
            }
            uint64_t v29 = PF_ALLOCATE_OBJECT_ARRAY((int)v28);
            if (v29)
            {
              if ((v7 & 1) == 0) {
                goto LABEL_40;
              }
            }
            else
            {
              PF_FREE_OBJECT_ARRAY(v27);
              uint64_t v28 = 0;
              int v27 = 0;
              if ((v7 & 1) == 0)
              {
LABEL_40:
                uint64_t v30 = v14;
                uint64_t v31 = **((void **)v25 + 8);
                if (v28 == [v59 allocateBatch:v27 count:v28]) {
                  uint64_t v28 = v28;
                }
                else {
                  uint64_t v28 = 0;
                }
                if ((int)v28 >= 1)
                {
                  for (uint64_t i = 0; i != v28; ++i)
                  {
                    while ((*(_DWORD *)v31 & 0x80000000) != 0)
                    {
                      uint64_t v33 = *(unsigned int *)(v31 + 4);
                      if ((v33 & 0x80000000) != 0) {
                        uint64_t v31 = 0;
                      }
                      else {
                        uint64_t v31 = *(void *)(*((void *)v25 + 8) + 8 * v33) + *(void *)(v31 + 16);
                      }
                    }
                    uint64_t v34 = (void *)*((void *)v27 + i);
                    unint64_t v35 = _PFSetPrimaryKey((unint64_t)v34, *(void *)(v31 + 24));
                    if (v34 != (void *)v35)
                    {
                      unint64_t v36 = v35;

                      *((void *)v27 + i) = v36;
                    }
                    uint64_t v37 = *(unsigned int *)(v31 + 4);
                    if ((v37 & 0x80000000) != 0) {
                      break;
                    }
                    uint64_t v38 = *(void *)(*((void *)v25 + 8) + 8 * v37);
                    if (!v38) {
                      break;
                    }
                    uint64_t v31 = v38 + *(void *)(v31 + 16);
                  }
                }
                uint64_t v14 = v30;
                if (v28)
                {
                  if (v28 == +[NSSQLRow newBatchRowAllocation:v29 count:v28 forSQLEntity:*(void *)(v57 + 40) withOwnedObjectIDs:v27 andTimestamp:*((double *)v25 + 1)])uint64_t v28 = v28; {
                  else
                  }
                    uint64_t v28 = 0;
                }
                LOBYTE(v7) = v58;
              }
            }
            id v39 = [[_PFArray alloc] initWithObjects:v27 count:v28 andFlags:(v56 == 1) | 8u];
            uint64_t v40 = [[_PFArray alloc] initWithObjects:v29 count:v28 andFlags:10 andContext:0];
            uint64_t v41 = v40;
            if (v28 && v39 && v40)
            {
              if (v62 >= 2)
              {
                pthread_mutex_lock(p_lock);
                CFRetain(v39);
                CFRetain(v41);
                CFArrayAppendValue(theArray, v39);
                CFArrayAppendValue(theArray, v41);
                pthread_mutex_unlock(p_lock);
                pthread_cond_signal(p_condition);
              }
              else
              {
                if (v56 == 1) {
                  uint64_t v42 = v39;
                }
                else {
                  uint64_t v42 = v40;
                }
                CFArrayAppendValue(v54, v42);
              }
              pthread_mutex_lock(v61);
              CFRetain(v41);
              CFArrayAppendValue(v14, v25);
              CFArrayAppendValue(v14, v41);
              pthread_mutex_unlock(v61);
              pthread_cond_signal(v60);
            }

            if (++v24 == v63) {
              goto LABEL_14;
            }
          }
        }
        unsigned __int8 v19 = atomic_load(v50);
        if (v19) {
          pthread_cond_wait(v48, v49);
        }
        unsigned __int8 v20 = atomic_load(v50);
      }
      while ((v20 & 1) != 0);
      unsigned __int8 v21 = atomic_load(v50);
      if (!v18 && (v21 & 1) == 0) {
        break;
      }
      pthread_mutex_unlock(v49);
    }
    CFIndex v22 = CFArrayGetCount(v51);
    pthread_mutex_unlock(v49);
  }
  while (v22);
  atomic_store(0, &v65);
  __dmb(0xBu);
  if (v62 >= 2)
  {
    pthread_mutex_lock(p_lock);
    if (!v47->isFinishedFlag)
    {
      pthread_cond_signal(p_condition);
      while (!v47->isFinishedFlag)
        pthread_cond_wait(p_condition, p_lock);
    }
    pthread_mutex_unlock(p_lock);
  }
  pthread_mutex_lock(v61);
  if (!v44->isFinishedFlag)
  {
    pthread_cond_signal(v60);
    while (!v44->isFinishedFlag)
      pthread_cond_wait(v60, v61);
  }
  pthread_mutex_unlock(v61);
  if (v45)
  {
    pthread_mutex_lock(&v45->lock);
    if (!v45->isFinishedFlag)
    {
      pthread_cond_signal(&v45->condition);
      while (!v45->isFinishedFlag)
        pthread_cond_wait(&v45->condition, &v45->lock);
    }
    pthread_mutex_unlock(&v45->lock);
  }

  if (theArray) {
    CFRelease(theArray);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v46) {
    CFRelease(v46);
  }
  return 0;
}

void minion_duties2(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  (*(void (**)(uint64_t))(a1 + 16))(a1);
  [v2 drain];
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  *(_DWORD *)(a1 + 144) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(a1 + 96));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
  CFRelease((CFTypeRef)a1);
}

uint64_t _prepareFaultsOnBackgroundThread(uint64_t a1)
{
  values[128] = *(void **)MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 24);
  uint64_t v3 = (void *)*v2;
  if (*v2) {
    uint64_t v4 = v3[17];
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v36 = (void *)v2[2];
  CFArrayRef v30 = (const __CFArray *)v2[1];
  CFArrayRef theArray = (__CFArray *)v2[4];
  char v35 = objc_msgSend(*(id *)(v4 + 8), "_isAsyncRequest", v2[3]);
  PF_FREE_OBJECT_ARRAY(*(void **)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  int v5 = *(_DWORD *)(v4 + 72);
  if (!v3)
  {
    char v6 = 0;
    goto LABEL_8;
  }
  char v6 = (void *)v3[4];
  if ((*(_DWORD *)(v4 + 72) & 0x1C) != 0xC)
  {
LABEL_8:
    uint64_t v34 = 0;
    goto LABEL_9;
  }
  uint64_t v34 = v3[16];
LABEL_9:
  uint64_t v32 = v4;
  char v33 = [*(id *)(v4 + 8) _disablePersistentStoreResultCaching];
  unint64_t v7 = 0;
  uint64_t v28 = (pthread_cond_t *)(a1 + 96);
  uint64_t v29 = (pthread_mutex_t *)(a1 + 32);
  char v8 = 1;
  do
  {
LABEL_10:
    while (2)
    {
      pthread_mutex_lock(v29);
      do
      {
        CFIndex Count = CFArrayGetCount(v30);
        unint64_t v10 = Count;
        if (Count >= 1)
        {
          if (Count >= 128) {
            CFIndex v15 = 128;
          }
          else {
            CFIndex v15 = Count;
          }
          v43.location = 0;
          v43.length = v15;
          CFArrayGetValues(v30, v43, (const void **)values);
          if (v10 > 0x7F)
          {
            v44.location = 0;
            v44.length = v15;
            CFArrayReplaceValues(v30, v44, 0, 0);
          }
          else
          {
            CFArrayRemoveAllValues(v30);
          }
          atomic_load(v27);
          pthread_mutex_unlock(v29);
          uint64_t v16 = 0;
          LODWORD(v17) = 0;
          do
          {
            CFIndex v18 = v15;
            unsigned __int8 v19 = values[v16];
            if ((v5 & 2) != 0)
            {
              unsigned __int8 v20 = 0;
            }
            else
            {
              uint64_t v17 = (int)v17 + 1;
              unsigned __int8 v20 = values[v17];
            }
            uint64_t v21 = [v19 count];
            v7 += v21;
            if (!((v7 < 0x2711 || (v8 & 1) == 0) | v35 & 1))
            {
              uint64_t v22 = [v6 persistentStoreCoordinator];
              if (v22) {
                uint64_t v23 = *(void *)(v22 + 96);
              }
              else {
                uint64_t v23 = 0;
              }
              _PFModelMapSlotForEntity(v23, (void *)[*(id *)(v32 + 40) entityDescription]);
              char v8 = 0;
            }
            uint64_t v24 = PF_ALLOCATE_OBJECT_ARRAY(v21);
            v37[0] = MEMORY[0x1E4F143A8];
            v37[1] = 3221225472;
            v37[2] = ___prepareFaultsOnBackgroundThread_block_invoke;
            void v37[3] = &unk_1E544E330;
            v37[7] = v20;
            v37[8] = v24;
            int v38 = v21;
            v37[4] = v6;
            v37[5] = v19;
            BOOL v39 = (v5 & 0x1C) == 12;
            BOOL v40 = (v5 & 2) == 0;
            char v41 = v33;
            v37[6] = v34;
            ___prepareFaultsOnBackgroundThread_block_invoke((uint64_t)v37);
            CFStringRef v25 = [[_PFArray alloc] initWithObjects:v24 count:v21 andFlags:46 andContext:v6];
            [v36 addObject:v25];

            if ((v5 & 2) == 0) {
              CFArrayAppendValue(theArray, v20);
            }
            if (v20) {
              CFRelease(v20);
            }
            if (v19) {
              CFRelease(v19);
            }
            LODWORD(v17) = v17 + 1;
            uint64_t v16 = (int)v17;
            CFIndex v15 = v18;
          }
          while (v18 > (int)v17);
          goto LABEL_10;
        }
        unsigned __int8 v11 = atomic_load(v27);
        if (v11) {
          pthread_cond_wait(v28, v29);
        }
        unsigned __int8 v12 = atomic_load(v27);
      }
      while ((v12 & 1) != 0);
      unsigned __int8 v13 = atomic_load(v27);
      if (v10 || (v13 & 1) != 0)
      {
        pthread_mutex_unlock(v29);
        continue;
      }
      break;
    }
    CFIndex v14 = CFArrayGetCount(v30);
    pthread_mutex_unlock(v29);
  }
  while (v14);
  return 0;
}

uint64_t ___prepareFaultsOnBackgroundThread_block_invoke(uint64_t a1)
{
  uint64_t result = -[NSManagedObjectContext _batchRetainedObjects:forCount:withIDs:optionalHandler:withInlineStorage:](*(void *)(a1 + 32), *(void *)(a1 + 64), *(unsigned int *)(a1 + 72), (id *)[*(id *)(a1 + 40) _objectsPointer], *(void *)(a1 + 48));
  if (*(unsigned char *)(a1 + 77))
  {
    if (!*(unsigned char *)(a1 + 78))
    {
      uint64_t result = [*(id *)(a1 + 56) _objectsPointer];
      if (*(_DWORD *)(a1 + 72))
      {
        for (unint64_t i = 0; i < *(unsigned int *)(a1 + 72); ++i)
        {
          uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8 * i);
          uint64_t v5 = *(void *)(result + 8 * i);
          int v6 = *(_DWORD *)(v4 + 16);
          if ((v6 & 0x200) != 0)
          {
            if (!v5 || (int)atomic_fetch_add((atomic_uint *volatile)(v5 + 12), 0) >= 1) {
              continue;
            }
          }
          else
          {
            *(_DWORD *)(v4 + 16) = v6 | 0x200;
            if (!v5) {
              continue;
            }
          }
          atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 12), 1u, memory_order_relaxed);
        }
      }
    }
  }
  return result;
}

uint64_t _prepareObjectIDsOnBackgroundThread(uint64_t a1)
{
  v65[129] = *MEMORY[0x1E4F143B8];
  id v2 = *(uint64_t **)(a1 + 24);
  uint64_t v3 = *v2;
  if (*v2) {
    uint64_t v4 = *(void *)(v3 + 136);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = (void *)v2[1];
  id v55 = (id)v2[2];
  int v6 = (unsigned __int8 *)v2[3];
  PF_FREE_OBJECT_ARRAY(v2);
  *(void *)(a1 + 24) = 0;
  if (v3)
  {
    unint64_t v7 = (void *)[*(id *)(v3 + 8) objectIDFactoryForSQLEntity:*(void *)(v4 + 40)];
    uint64_t v52 = *(void *)(v3 + 112);
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v52 = 0;
  }
  int v59 = *(_DWORD *)(v4 + 72);
  memset(v65, 0, 512);
  unsigned __int8 v64 = 1;
  int v60 = v59 & 0x1C;
  uint64_t v50 = v6;
  CFArrayRef v51 = v5;
  uint64_t v57 = v3;
  id v62 = v7;
  if (v60 == 4)
  {
    CFMutableArrayRef v56 = 0;
    char v8 = 0;
  }
  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
    unint64_t v10 = PF_CALLOC_UNSCANNED_BYTES(0x28uLL);
    *unint64_t v10 = v3;
    v10[1] = Mutable;
    CFMutableArrayRef v56 = Mutable;
    v10[2] = v55;
    v10[3] = &v64;
    v10[4] = 0;
    char v8 = [[_PFTask alloc] initWithFunction:_prepareFaultsOnBackgroundThread withArgument:v10 andPriority:2];
  }
  unsigned __int8 v11 = 0;
  long long v48 = (pthread_cond_t *)(a1 + 96);
  uint64_t v49 = (pthread_mutex_t *)(a1 + 32);
  uint64_t v47 = v8;
  p_condition = &v8->condition;
  p_locuint64_t k = &v8->lock;
LABEL_9:
  unsigned __int8 v13 = v50;
  unsigned __int8 v12 = v51;
  CFIndex v15 = v48;
  CFIndex v14 = v49;
  do
  {
    while (1)
    {
      pthread_mutex_lock(v14);
      do
      {
        uint64_t v16 = [v12 count];
        if (v16 > 0)
        {
          objc_msgSend(v12, "getObjects:range:", v65, 0, v16);
          [v12 removeAllObjects];
          atomic_load(v13);
          uint64_t v21 = pthread_mutex_unlock(v14);
          uint64_t v22 = 0;
          uint64_t v61 = v16;
          while (1)
          {
            uint64_t v23 = v65[v22];
            unsigned int v24 = *(_DWORD *)(v23 + 4) <= 0x40000000u ? *(_DWORD *)(v23 + 4) : 0;
            MEMORY[0x1F4188790](v21);
            int v27 = (char *)&v46 - v26;
            uint64_t v63 = v28;
            if (v24 > 0x200) {
              int v27 = (char *)NSAllocateScannedUncollectable();
            }
            else {
              bzero((char *)&v46 - v26, 8 * v25);
            }
            uint64_t v29 = v27 ? v24 : 0;
            uint64_t v30 = **(void **)(v23 + 64);
            if (v59) {
              break;
            }
            if (v29 == [v62 allocateBatch:v27 count:v29])
            {
              uint64_t v31 = v11;
LABEL_39:
              if ((int)v29 < 1)
              {
                unsigned __int8 v11 = v31;
              }
              else
              {
                char v58 = v31;
                for (uint64_t i = 0; i != v29; ++i)
                {
                  while ((*(_DWORD *)v30 & 0x80000000) != 0)
                  {
                    uint64_t v34 = *(unsigned int *)(v30 + 4);
                    if ((v34 & 0x80000000) != 0) {
                      uint64_t v30 = 0;
                    }
                    else {
                      uint64_t v30 = *(void *)(*(void *)(v23 + 64) + 8 * v34) + *(void *)(v30 + 16);
                    }
                  }
                  char v35 = *(void **)&v27[8 * i];
                  unint64_t v36 = _PFSetPrimaryKey((unint64_t)v35, *(void *)(v30 + 24));
                  if (v35 != (void *)v36)
                  {
                    unint64_t v37 = v36;

                    *(void *)&v27[8 * i] = v37;
                  }
                  uint64_t v38 = *(unsigned int *)(v30 + 4);
                  if ((v38 & 0x80000000) != 0) {
                    break;
                  }
                  uint64_t v39 = *(void *)(*(void *)(v23 + 64) + 8 * v38);
                  if (!v39) {
                    break;
                  }
                  uint64_t v30 = v39 + *(void *)(v30 + 16);
                }
                unsigned __int8 v11 = v58;
              }
              goto LABEL_53;
            }
            uint64_t v29 = 0;
LABEL_53:
            BOOL v40 = [[_PFArray alloc] initWithObjects:v27 count:v29 andFlags:30];
            if (v24 >= 0x201) {
              NSZoneFree(0, v27);
            }
            fetchResultSetDeallocate(v23);
            if (v60 == 4)
            {
              [v55 addObject:v40];
            }
            else
            {
              char v41 = p_lock;
              pthread_mutex_lock(p_lock);
              CFRetain(v40);
              CFArrayAppendValue(v56, v40);
              pthread_mutex_unlock(v41);
              pthread_cond_signal(p_condition);
            }

            if (++v22 == v61) {
              goto LABEL_9;
            }
          }
          uint64_t v31 = _sqlEntityForEntityID(v52, *(unsigned int *)(v30 + 8));
          id v32 = v62;
          if (v31 != v11) {
            id v32 = 0;
          }
          if (v57 && v31 != v11) {
            id v32 = (id)[*(id *)(v57 + 8) objectIDFactoryForSQLEntity:v31];
          }
          id v62 = v32;
          [v32 allocateBatch:v27 count:v29];
          goto LABEL_39;
        }
        unsigned __int8 v17 = atomic_load(v13);
        if (v17) {
          pthread_cond_wait(v15, v14);
        }
        unsigned __int8 v18 = atomic_load(v13);
      }
      while ((v18 & 1) != 0);
      unsigned __int8 v19 = atomic_load(v13);
      if (!v16 && (v19 & 1) == 0) {
        break;
      }
      pthread_mutex_unlock(v14);
    }
    uint64_t v20 = [v12 count];
    pthread_mutex_unlock(v14);
  }
  while (v20);
  if (v60 != 4)
  {
    atomic_store(0, &v64);
    __dmb(0xBu);
    uint64_t v42 = p_lock;
    pthread_mutex_lock(p_lock);
    CFRange v43 = v47;
    CFRange v44 = p_condition;
    if (!v47->isFinishedFlag)
    {
      pthread_cond_signal(p_condition);
      while (!v43->isFinishedFlag)
        pthread_cond_wait(v44, v42);
    }
    pthread_mutex_unlock(v42);

    if (v56) {
      CFRelease(v56);
    }
  }
  return 0;
}

unint64_t _PFSetPrimaryKey(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  if ((a1 & 0x8000000000000000) == 0)
  {
    Class Class = object_getClass((id)a1);
    if (*((unsigned char *)object_getIndexedIvars(Class) + 4))
    {
      if (HIWORD(a2))
      {
        id v11 = objc_alloc(_PFFallbackFactoryForOID((void *)v3));
        goto LABEL_17;
      }
      *(void *)(v3 + 8) |= a2 << 16;
    }
    else
    {
      *(void *)(v3 + 16) = a2;
    }
    return v3;
  }
  if (a2 <= 0x3FFFFFFFFFFLL)
  {
    if ((~a1 & 0xC000000000000007) != 0) {
      int v4 = *MEMORY[0x1E4FBA8E0];
    }
    else {
      int v4 = 7;
    }
    unint64_t v3 = (v4 ^ a1) & 0x1FFFF0 | (unint64_t)(a2 << 21) | 0x8000000000000005;
    unint64_t v5 = v3 ^ *MEMORY[0x1E4FBA8E0];
    if ((~v5 & 0xC000000000000007) != 0) {
      return v5 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(MEMORY[0x1E4FBA8D0] + (v5 & 7));
    }
    return v3;
  }
  int v7 = *MEMORY[0x1E4FBA8E0];
  if ((~a1 & 0xC000000000000007) == 0) {
    int v7 = 7;
  }
  char v8 = (unint64_t *)(_PFTaggedPointersPool + 32 * (((unint64_t)(v7 ^ a1) >> 4) & 0x1FFFF));
  uint64_t v9 = (void *)atomic_load(v8);
  unint64_t v10 = atomic_load(v8 + 1);
  id v11 = (id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v9, "objectIDFactoryForEntity:", v10), "_fallbackFactory"), "alloc");
LABEL_17:

  return [v11 initWithPK64:a2];
}

uint64_t PFVectorHash(const __CFBitVector *a1)
{
  *(void *)bytes = 0;
  uint64_t Count = CFBitVectorGetCount(a1);
  if (Count >= 64) {
    v3.length = 64;
  }
  else {
    v3.length = Count;
  }
  v3.location = 0;
  CFBitVectorGetBits(a1, v3, bytes);
  return *(void *)bytes;
}

uint64_t _computeVersionHashesOnBackgroundThread(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x18C127630]();
  CFRange v3 = *(void **)(a1 + 24);
  int v4 = (void *)[v3 entitiesByName];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend((id)objc_msgSend(v4, "objectForKey:", *(void *)(*((void *)&v10 + 1) + 8 * i)), "versionHash");
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(a1 + 24) = 0;
  return 0;
}

#error "18ABDF37C: call analysis failed (funcsize=64)"

#error "18ABE06CC: call analysis failed (funcsize=66)"

void sub_18ABE071C(void *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    os_unfair_lock_unlock(&stru_1EB27066C);
    objc_exception_rethrow();
  }
  JUMPOUT(0x18ABE0774);
}

void sub_18ABE0760()
{
}

void sub_18ABE076C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    sub_18ABE0770(a1);
  }
  objc_terminate();
}

void sub_18ABE0770(_Unwind_Exception *exception_object)
{
}

void sub_18ABE1390()
{
}

void sub_18ABE139C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ABE13A0);
  }
  objc_terminate();
}

void sub_18ABE3B10(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18ABE4F80()
{
}

void sub_18ABE505C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ABE5024);
  }
  _Unwind_Resume(a1);
}

void sub_18ABE5078(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ABE5080);
  }
  objc_terminate();
}

unsigned char *destructiveInjectEnumTag for NSManagedObjectContext.ScheduledTaskType(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

void sub_18ABE7008(_Unwind_Exception *a1)
{
}

void sub_18ABE7100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
}

void sub_18ABE750C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  BOOL v5 = v3 != 0;
  if (a2 == 3)
  {
    id v6 = objc_begin_catch(exception_object);
    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    id v6 = objc_begin_catch(exception_object);
    if (a2 != 2)
    {
      char v8 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:@"Caught a non-object exception in the connectionManager" userInfo:0];
      if (v2) {
        objc_setProperty_nonatomic(v2, v9, v8, 48);
      }
      objc_end_catch();
      JUMPOUT(0x18ABE73E8);
    }
    if (!v2)
    {
LABEL_8:
      objc_end_catch();
      if (!v5) {
        JUMPOUT(0x18ABE740CLL);
      }
      JUMPOUT(0x18ABE73F4);
    }
  }
  objc_setProperty_nonatomic(v2, v7, v6, 48);
  goto LABEL_8;
}

void sub_18ABE90AC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2)
  {
    if (v12) {
      objc_end_catch();
    }
    if (v13) {
      objc_end_catch();
    }
    objc_begin_catch(exc_buf);
    *(_DWORD *)(v11 + 312) &= ~0x80u;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ABE923C(_Unwind_Exception *a1)
{
}

void sub_18ABE9248(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ABE924CLL);
  }
  objc_terminate();
}

void sub_18ABE9684()
{
}

void sub_18ABE970C()
{
}

void sub_18ABEACAC(_Unwind_Exception *a1)
{
}

void sub_18ABEACCC(void *exc_buf, int a2)
{
  if (a2 == 2)
  {
    id v3 = objc_begin_catch(exc_buf);
    if (v2) {
      objc_setProperty_nonatomic(v2, v4, v3, 48);
    }
    objc_end_catch();
    JUMPOUT(0x18ABEAC70);
  }
  objc_begin_catch(exc_buf);
  JUMPOUT(0x18ABEAC74);
}

uint64_t readMagicWordFromDBHandle(sqlite3 *a1)
{
  *(void *)&v10[15] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0;
  int v2 = sqlite3_file_control(a1, 0, 7, &v9);
  if (v9) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3) {
    return 92;
  }
  if (*(void *)v9)
  {
    int v5 = (*(uint64_t (**)(void))(*(void *)v9 + 16))();
    if (!v5)
    {
      if (*(void *)v10 ^ 0x66206574694C5153 | *(void *)&v10[7] ^ 0x332074616D726F66) {
        return 92;
      }
      else {
        return 0;
      }
    }
  }
  else
  {
    int v5 = 1;
  }
  unsigned int v8 = 0;
  int v6 = sqlite3_file_control(a1, 0, 4, &v8);
  if (v6) {
    unsigned int v7 = v6;
  }
  else {
    unsigned int v7 = 92;
  }
  if (v5 == 522) {
    unsigned int v7 = 0;
  }
  if (v8) {
    return v8;
  }
  else {
    return v7;
  }
}

uint64_t NSSQLiteRegisterFunctions(sqlite3 *a1, void **a2)
{
  if (a2) {
    int v4 = a2 + 31;
  }
  else {
    int v4 = 0;
  }
  uint64_t function = sqlite3_create_function(a1, "NSCoreDataNow", 0, 5, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataNow, 0, 0);
  if (!function)
  {
    uint64_t function = sqlite3_create_function(a1, "NSCoreDataPrependExternalReferenceMarker", 2, 5, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataPrependExternalReferenceMarker, 0, 0);
    if (function)
    {
LABEL_42:
      sqlite3_create_function(a1, "NSCoreDataNow", 0, 5, 0, 0, 0, 0);
      return function;
    }
    uint64_t function = sqlite3_create_function(a1, "NSCoreDataLike", 3, 1, *v4, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataLikeBridge, 0, 0);
    if (function)
    {
LABEL_41:
      sqlite3_create_function(a1, "NSCoreDataPrependExternalReferenceMarker", 0, 5, 0, 0, 0, 0);
      goto LABEL_42;
    }
    uint64_t function = sqlite3_create_function(a1, "NSCoreDataStringSearch", 4, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataStringSearch, 0, 0);
    if (function)
    {
LABEL_40:
      sqlite3_create_function(a1, "NSCoreDataLike", 0, 1, 0, 0, 0, 0);
      goto LABEL_41;
    }
    uint64_t function = sqlite3_create_function(a1, "NSCoreDataToUpper", 1, 4, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataToUpper, 0, 0);
    if (function)
    {
LABEL_39:
      sqlite3_create_function(a1, "NSCoreDataStringSearch", 0, 1, 0, 0, 0, 0);
      goto LABEL_40;
    }
    uint64_t function = sqlite3_create_function(a1, "NSCoreDataToLower", 1, 4, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataToLower, 0, 0);
    if (function)
    {
LABEL_38:
      sqlite3_create_function(a1, "NSCoreToUpper", 0, 4, 0, 0, 0, 0);
      goto LABEL_39;
    }
    uint64_t function = sqlite3_create_function(a1, "NSCoreDataCanonical", 1, 4, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataCanonical, 0, 0);
    if (function)
    {
LABEL_37:
      sqlite3_create_function(a1, "NSCoreDataToLower", 0, 4, 0, 0, 0, 0);
      goto LABEL_38;
    }
    uint64_t function = sqlite3_create_function(a1, "NSCoreDataMatches", 3, 1, v4[4], (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataMatchesBridge, 0, 0);
    if (function)
    {
LABEL_36:
      sqlite3_create_function(a1, "NSCoreCanonical", 0, 4, 0, 0, 0, 0);
      goto LABEL_37;
    }
    uint64_t function = sqlite3_create_function(a1, "NSCoreDataStringCompare", 5, 4, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataStringCompareWithFlags, 0, 0);
    if (function)
    {
LABEL_35:
      sqlite3_create_function(a1, "NSCoreDataMatches", 0, 1, 0, 0, 0, 0);
      goto LABEL_36;
    }
    uint64_t function = sqlite3_create_collation(a1, "NSCollateNoCase", 4, 0, (int (__cdecl *)(void *, int, const void *, int, const void *))_NSCoreDataCollateNoCaseBridge);
    if (function)
    {
LABEL_34:
      sqlite3_create_function(a1, "NSCoreDataStringCompare", 0, 4, 0, 0, 0, 0);
      goto LABEL_35;
    }
    uint64_t function = sqlite3_create_collation(a1, "NSCollateNumericallyNoCase", 4, 0, (int (__cdecl *)(void *, int, const void *, int, const void *))_NSCoreDataCollateNumericallyNoCaseBridge);
    if (function)
    {
LABEL_33:
      sqlite3_create_collation(a1, "NSCollateNoCase", 4, 0, 0);
      goto LABEL_34;
    }
    uint64_t function = sqlite3_create_collation(a1, "NSCollateLocaleSensitive", 4, 0, (int (__cdecl *)(void *, int, const void *, int, const void *))_NSCoreDataCollateLocaleSensitiveBridge);
    if (function)
    {
LABEL_32:
      sqlite3_create_collation(a1, "NSCollateNumericallyNoCase", 4, 0, 0);
      goto LABEL_33;
    }
    uint64_t function = sqlite3_create_collation(a1, "NSCollateLocaleSensitiveNoCase", 4, 0, (int (__cdecl *)(void *, int, const void *, int, const void *))_NSCoreDataCollateLocaleSensitiveCaseInsensitiveBridge);
    if (function)
    {
LABEL_31:
      sqlite3_create_collation(a1, "NSCollateLocaleSensitive", 4, 0, 0);
      goto LABEL_32;
    }
    uint64_t function = sqlite3_create_collation(a1, "NSCollateFinderlike", 4, 0, (int (__cdecl *)(void *, int, const void *, int, const void *))_NSCoreDataCollateFinderlikeBridge);
    if (function)
    {
LABEL_30:
      sqlite3_create_collation(a1, "NSCollateLocaleSensitiveNoCase", 4, 0, 0);
      goto LABEL_31;
    }
    uint64_t function = sqlite3_create_function(a1, "NSCoreDataTriggerUpdateAffectedObjectValue", 5, 2052, a2, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataTriggerUpdateAffectedObjectValue, 0, 0);
    if (function)
    {
LABEL_29:
      sqlite3_create_function(a1, "NSCollateFinderlike", 0, 4, 0, 0, 0, 0);
      goto LABEL_30;
    }
    uint64_t function = sqlite3_create_function(a1, "NSCoreDataDATriggerInsertUpdatedAffectedObjectValue", 5, 2052, a2, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataDATriggerInsertUpdatedAffectedObjectValue, 0, 0);
    if (function)
    {
LABEL_28:
      sqlite3_create_function(a1, "NSCoreDataTriggerUpdateAffectedObjectValue", 0, 4, 0, 0, 0, 0);
      goto LABEL_29;
    }
    uint64_t function = sqlite3_create_function(a1, "NSCoreDataDATriggerUpdatedAffectedObjectValue", 5, 2052, a2, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataDATriggerUpdatedAffectedObjectValue, 0, 0);
    if (function)
    {
LABEL_27:
      sqlite3_create_function(a1, "NSCoreDataDATriggerInsertUpdatedAffectedObjectValue", 0, 4, 0, 0, 0, 0);
      goto LABEL_28;
    }
    uint64_t function = sqlite3_create_function(a1, "NSPersistentHistoryBatchDeleteUpdateTrigger", -1, 2052, a2, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSPersistentHistoryBatchDeleteUpdateTrigger, 0, 0);
    if (function)
    {
LABEL_26:
      sqlite3_create_function(a1, "NSCoreDataDATriggerUpdatedAffectedObjectValue", 0, 4, 0, 0, 0, 0);
      goto LABEL_27;
    }
    uint64_t function = sqlite3_create_function(a1, "NSPersistentHistoryBatchDeleteUpdateTriggerDataBlobOperator", -1, 2052, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSPersistentHistoryBatchDeleteUpdateTriggerDataBlobOperator, 0, 0);
    if (function)
    {
LABEL_25:
      sqlite3_create_function(a1, "NSPersistentHistoryBatchDeleteUpdateTrigger", 0, 4, 0, 0, 0, 0);
      goto LABEL_26;
    }
    uint64_t function = sqlite3_create_function(a1, "NSCoreDataDATriggerMergeableString", 5, 2052, a2, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataDATriggerMergeableString, 0, 0);
    if (function)
    {
      sqlite3_create_function(a1, "NSCoreDataDATriggerMergeableString", 0, 4, 0, 0, 0, 0);
      goto LABEL_25;
    }
  }
  return function;
}

#error "18ABEBBC0: call analysis failed (funcsize=53)"

void sub_18ABEBC68()
{
}

void sub_18ABEBC80(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18ABEBB54);
}

#error "18ABEEAFC: call analysis failed (funcsize=54)"

void sub_18ABEEB88()
{
}

void sub_18ABEEB94(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(a1);
}

#error "18ABEEC84: call analysis failed (funcsize=81)"

void sub_18ABEED04(void *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18ABEECACLL);
  }
  JUMPOUT(0x18ABEF40CLL);
}

void sub_18ABEED30()
{
  if (v0) {
    JUMPOUT(0x18ABEED38);
  }
  JUMPOUT(0x18ABEF40CLL);
}

#error "18ABEF1CC: call analysis failed (funcsize=85)"

void sub_18ABEED50()
{
  if (v0) {
    JUMPOUT(0x18ABEED58);
  }
  JUMPOUT(0x18ABEF40CLL);
}

#error "18ABEEE48: call analysis failed (funcsize=82)"

void sub_18ABEEEC8(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ABEEE7CLL);
  }
  JUMPOUT(0x18ABEF40CLL);
}

void sub_18ABEEEE4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ABEEEF0);
  }
  JUMPOUT(0x18ABEF40CLL);
}

void sub_18ABEF04C(void *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18ABEEFF4);
  }
  JUMPOUT(0x18ABEF40CLL);
}

void sub_18ABEF078()
{
  if (v0) {
    JUMPOUT(0x18ABEF080);
  }
  JUMPOUT(0x18ABEF40CLL);
}

void sub_18ABEF088(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_18ABEF090()
{
}

void sub_18ABEF0B8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ABEF0BCLL);
  }
  _Unwind_Resume(a1);
}

void sub_18ABEF0C0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (v2) {
      JUMPOUT(0x18ABEF0D0);
    }
    JUMPOUT(0x18ABEF0D4);
  }
  JUMPOUT(0x18ABEF40CLL);
}

void sub_18ABEF0DC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_18ABEF0E4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ABEF0F0);
  }
  JUMPOUT(0x18ABEF40CLL);
}

void sub_18ABEF24C(void *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18ABEF1F4);
  }
  JUMPOUT(0x18ABEF40CLL);
}

void sub_18ABEF278()
{
  if (v0) {
    JUMPOUT(0x18ABEF280);
  }
  JUMPOUT(0x18ABEF40CLL);
}

void sub_18ABEF288(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_18ABEF290(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ABEF29CLL);
  }
  JUMPOUT(0x18ABEF40CLL);
}

void sub_18ABEF3E4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ABEF3F8);
  }
  JUMPOUT(0x18ABEF40CLL);
}

#error "18ABEF710: call analysis failed (funcsize=38)"

void *_sharedIMPL_setvfk_core_s(void *a1, uint64_t a2, __int16 a3, unint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___sharedIMPL_setvfk_core_s_block_invoke;
  v5[3] = &unk_1E544C278;
  v5[4] = a1;
  v5[5] = a4;
  __int16 v6 = a3;
  return _sharedIMPL_setvfk_core_scalar(a1, a4, (uint64_t)v5);
}

void *_sharedIMPL_setvfk_core_i(void *a1, uint64_t a2, int a3, unint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___sharedIMPL_setvfk_core_i_block_invoke;
  v5[3] = &unk_1E544C2A0;
  v5[4] = a1;
  v5[5] = a4;
  int v6 = a3;
  return _sharedIMPL_setvfk_core_scalar(a1, a4, (uint64_t)v5);
}

void *_sharedIMPL_setvfk_core_c(void *a1, uint64_t a2, char a3, unint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___sharedIMPL_setvfk_core_c_block_invoke;
  v5[3] = &unk_1E544C250;
  v5[4] = a1;
  v5[5] = a4;
  char v6 = a3;
  return _sharedIMPL_setvfk_core_scalar(a1, a4, (uint64_t)v5);
}

void _sharedIMPL_copying_setvfk_core(char **a1, uint64_t a2, void *a3, unint64_t a4)
{
  if (a3)
  {
    id v7 = (id)[a3 copy];
    _sharedIMPL_setvfk_core(a1, v6, v7, a4);
    if (v7)
    {
    }
  }
  else
  {
    _sharedIMPL_setvfk_core(a1, a2, 0, a4);
  }
}

void *_sharedIMPL_setvfk_core_q(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___sharedIMPL_setvfk_core_q_block_invoke;
  v5[3] = &unk_1E544C2C8;
  v5[4] = a1;
  v5[5] = a4;
  void v5[6] = a3;
  return _sharedIMPL_setvfk_core_scalar(a1, a4, (uint64_t)v5);
}

void *_sharedIMPL_setvfk_core_scalar(void *a1, unint64_t a2, uint64_t a3)
{
  if (_PF_Threading_Debugging_level) {
    _PFAssertSafeMultiThreadedAccess_impl([a1 managedObjectContext], sel_setValue_forKey_);
  }
  uint64_t v6 = _PFEntityForManagedObject(a1);
  uint64_t v7 = *(void *)(_kvcPropertysPrimitiveSetters((uint64_t)v6) + 8 * a2);
  uint64_t v8 = *(void *)(*(void *)(v6[12] + 16) + 40);
  uint64_t v9 = *(void *)(v8 + 8 * a2);
  int v10 = *((_DWORD *)a1 + 4);
  if ((v10 & 0x40000) != 0) {
    _PF_ManagedObject_WillChangeValueForKeyIndex((uint64_t)a1, (uint64_t)sel_willChangeValueForKey_, v9, a2, 0);
  }
  else {
    [a1 willChangeValueForKey:*(void *)(v8 + 8 * a2)];
  }
  _PF_CopyOnWrite_Snapshot(a1);
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v7);
  if ((v10 & 0x40000) != 0)
  {
    return _PF_ManagedObject_DidChangeValueForKeyIndex(a1, (uint64_t)sel_didChangeValueForKey_, v9, a2);
  }
  else
  {
    return (void *)[a1 didChangeValueForKey:v9];
  }
}

void *_sharedIMPL_setvfk_core(char **a1, uint64_t a2, void *a3, unint64_t a4)
{
  if (_PF_Threading_Debugging_level) {
    _PFAssertSafeMultiThreadedAccess_impl([a1 managedObjectContext], sel_setValue_forKey_);
  }
  uint64_t v20 = a3;
  uint64_t v7 = _PFEntityForManagedObject(a1);
  uint64_t v8 = *(void **)(v7[12] + 24 + 8 * a4);
  uint64_t v9 = *(void *)(_kvcPropertysPrimitiveSetters((uint64_t)v7) + 8 * a4);
  uint64_t v10 = *(void *)(*(void *)(v7[12] + 16) + 40);
  uint64_t v11 = *(void *)(v10 + 8 * a4);
  int v12 = *((_DWORD *)a1 + 4);
  if ((v12 & 0x40000) != 0) {
    _PF_ManagedObject_WillChangeValueForKeyIndex((uint64_t)a1, (uint64_t)sel_willChangeValueForKey_, v11, a4, 0);
  }
  else {
    [a1 willChangeValueForKey:*(void *)(v10 + 8 * a4)];
  }
  _PF_CopyOnWrite_Snapshot(a1);
  _PFManagedObject_coerceValueForKeyWithDescription((uint64_t)a1, &v20, v11, v8);
  if (v9)
  {
    _NSSetUsingKeyValueSetter();
    if ((v12 & 0x40000) != 0) {
      return _PF_ManagedObject_DidChangeValueForKeyIndex(a1, (uint64_t)sel_didChangeValueForKey_, v11, a4);
    }
  }
  else
  {
    id v13 = v20;
    snapshot_set_value_as_object(a1[3], a4, v13, v14, v15, v16, v17, v18);
    if ((v12 & 0x40000) != 0) {
      return _PF_ManagedObject_DidChangeValueForKeyIndex(a1, (uint64_t)sel_didChangeValueForKey_, v11, a4);
    }
  }
  return (void *)[a1 didChangeValueForKey:v11];
}

void _PF_ManagedObject_WillChangeValueForKeyIndex(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  int v9 = *(_DWORD *)(a1 + 16);
  uint64_t v10 = _PFEntityForManagedObject((id)a1);
  if (!v10)
  {
    uint64_t v11 = 0;
    if ((v9 & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_38:
    [(id)a1 willAccessValueForKey:a3];
    if (a4 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_4;
    }
    goto LABEL_6;
  }
  uint64_t v11 = (void *)v10[14];
  if ((v9 & 0x40) == 0) {
    goto LABEL_38;
  }
LABEL_3:
  if (a4 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_4:
    char v12 = 1;
    goto LABEL_12;
  }
  _PF_Handler_WillAccess_Property((id *)a1, (uint64_t)sel_willAccessValueForKey_, a4);
LABEL_6:
  char v12 = 0;
  unint64_t v13 = v11[10];
  BOOL v14 = a4 >= v13;
  unint64_t v15 = a4 - v13;
  if (!v14 || v15 >= v11[11])
  {
LABEL_12:
    uint64_t v17 = 0;
    int v20 = 0;
    int v19 = 0;
    if ((*(unsigned char *)(a1 + 17) & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_50;
  }
  uint64_t v16 = [(objc_class *)object_getClass((id)a1) _transientPropertiesChangesMask];
  uint64_t v17 = v16;
  unint64_t v18 = *(unsigned int *)(a1 + 16);
  int v19 = 1;
  if ((v18 & 0x8000) == 0)
  {
    char v12 = 0;
    if ((v9 & 0x1000) != 0) {
      goto LABEL_25;
    }
    goto LABEL_14;
  }
  uint64_t v34 = *(unsigned int *)(a1 + 20);
  if (v34) {
    uint64_t v35 = a1 + v34;
  }
  else {
    uint64_t v35 = 0;
  }
  int v36 = *(unsigned __int8 *)(v35 - ((v18 >> 22) & 0x3FC) + (a4 >> 3));
  int v37 = 1 << (a4 & 7);
  char v12 = 0;
  if ((v37 & v36) == 0 || v16 == 0)
  {
    int v20 = 1;
    goto LABEL_50;
  }
  int v20 = 1;
  if ((v37 & *(unsigned char *)(v16 + (a4 >> 3))) == 0)
  {
LABEL_50:
    [(id)_insertion_fault_handler fulfillFault:a1 withContext:*(void *)(a1 + 32) forIndex:a4];
    int v19 = v20;
    if ((v9 & 0x1000) != 0) {
      goto LABEL_25;
    }
    goto LABEL_14;
  }
LABEL_13:
  if ((v9 & 0x1000) != 0) {
    goto LABEL_25;
  }
LABEL_14:
  if ((v9 & 0x80) != 0)
  {
    uint64_t v21 = [(id)a1 objectID];
    _NSCoreDataLog(1, @"Mutating a managed object %@ (%p) after it has been removed from its context.", v22, v23, v24, v25, v26, v27, v21);
  }
  uint64_t v28 = *(void *)(a1 + 32);
  if (v28 && (v12 & ((*(void *)&v9 & 0x400000) != 0)) == 0)
  {
    int v29 = v17 ? v19 : 0;
    if (v29 != 1 || ((*(unsigned __int8 *)(v17 + (a4 >> 3)) >> (a4 & 7)) & 1) == 0) {
      _PFFastMOCObjectWillChange(v28, (_DWORD *)a1);
    }
  }
  *(_DWORD *)(a1 + 16) |= 0x800u;
LABEL_25:
  if ((v9 & 0x2000) == 0)
  {
    uint64_t v30 = *(void **)(a1 + 48);
    if (v30) {
      LOBYTE(v30) = *v30 != 0;
    }
    if ((v30 & 1) != 0
      || (a5 & 1) != 0
      || (unint64_t v31 = v11[4], v14 = a4 >= v31, v32 = a4 - v31, v14) && v32 < v11[5])
    {
      char v33 = (void (*)(uint64_t, char *, uint64_t))off_1EB270648;
      v33(a1, sel_willChangeValueForKey_, a3);
    }
  }
}

id *_PF_Handler_WillAccess_Property(id *result, uint64_t a2, unint64_t a3)
{
  int v4 = result;
  if (!_PF_Threading_Debugging_level)
  {
    if (result) {
      goto LABEL_3;
    }
LABEL_6:
    unsigned int v5 = MEMORY[0x10];
    goto LABEL_7;
  }
  uint64_t result = (id *)_PFAssertSafeMultiThreadedAccess_impl([result managedObjectContext], sel_willAccessValueForKey_);
  if (!v4) {
    goto LABEL_6;
  }
LABEL_3:
  unsigned int v5 = *((_DWORD *)v4 + 4);
  if ((v5 & 0x4000) != 0)
  {
    uint64_t result = v4;
    unsigned int v5 = v4[2] & 0xFFFFBFFF;
    *((_DWORD *)v4 + 4) = v5;
  }
LABEL_7:
  uint64_t v6 = *((unsigned int *)v4 + 5);
  if (v6) {
    uint64_t v7 = (char *)v4 + v6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (((v7[(a3 >> 3) - ((v5 >> 22) & 0x3FC)] >> (a3 & 7)) & 1) == 0)
  {
    return _PF_FulfillDeferredFault((id **)v4, a3);
  }
  return result;
}

void *_PF_ManagedObject_DidChangeValueForKeyIndex(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = result;
  int v6 = *((_DWORD *)result + 4);
  if ((v6 & 0x2000) == 0)
  {
    uint64_t result = _PFEntityForManagedObject(result);
    uint64_t v9 = result[14];
    unint64_t v10 = *(void *)(v9 + 32);
    unint64_t v11 = *(void *)(v9 + 40);
    char v12 = (void *)v5[6];
    if (v12)
    {
      if (*v12) {
        goto LABEL_8;
      }
    }
    BOOL v14 = a4 >= v10;
    unint64_t v13 = a4 - v10;
    BOOL v14 = !v14 || v13 >= v11;
    if (!v14) {
LABEL_8:
    }
      uint64_t result = (void *)_NSObjectDidChangeVFKImp(v5, a2, a3);
  }
  if ((v6 & 0x1000) == 0) {
    *((_DWORD *)v5 + 4) &= ~0x800u;
  }
  if ((v6 & 0x40) == 0)
  {
    return (void *)[v5 didAccessValueForKey:a3];
  }
  return result;
}

void _PFFastMOCObjectWillChange(uint64_t a1, _DWORD *a2)
{
  if (_PF_Threading_Debugging_level) {
    _PFAssertSafeMultiThreadedAccess_impl(a1, sel_objectWillChange_);
  }
  int v4 = a2[4];
  if ((v4 & 7) == 0)
  {
    if ((v4 & 0x80) != 0)
    {
      uint64_t v20 = [a2 objectID];
      _NSCoreDataLog(1, @"Mutating a managed object %@ (%p) after it has been removed from its context.", v6, v7, v8, v9, v10, v11, v20);
    }
    else if (a1)
    {
      if ((v4 & 0x80) != 0) {
        uint64_t v5 = 0;
      }
      else {
        uint64_t v5 = *((void *)a2 + 4);
      }
      if (v5 == a1)
      {
        -[NSManagedObjectContext _establishEventSnapshotsForObject:](a1, a2);
        int v19 = *(_DWORD *)(a1 + 40);
        if ((v19 & 0x200) != 0 && (v19 & 0x100) == 0)
        {
          _PFFaultLogExcessivePrepareForPendingChangesAttempts();
          int v19 = *(_DWORD *)(a1 + 40);
        }
        *(_DWORD *)(a1 + 40) = v19 | 0x100;
        [*(id *)(a1 + 56) addObject:a2];
        a2[4] |= 1u;
        -[NSManagedObjectContext _registerClearStateWithUndoManager](a1);
        -[NSManagedObjectContext _enqueueEndOfEventNotification](a1);
        if ((*(unsigned char *)(a1 + 41) & 4) == 0)
        {
          [(id)a1 willChangeValueForKey:@"hasChanges"];
          *(_DWORD *)(a1 + 40) |= 0x400u;
          [(id)a1 didChangeValueForKey:@"hasChanges"];
        }
      }
      else
      {
        uint64_t v12 = [a2 objectID];
        _NSCoreDataLog(1, @"Mutating a managed object %@ (%p) that has a different context %p than the receiver %p.", v13, v14, v15, v16, v17, v18, v12);
      }
    }
  }
}

uint64_t _PFManagedObject_coerceValueForKeyWithDescription(uint64_t a1, void **a2, uint64_t a3, void *a4)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a2;
  if ((void *)[MEMORY[0x1E4F1CA98] null] == v8) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = [a4 _propertyType];
  if (result != 4)
  {
    if (result != 2)
    {
      uint64_t v8 = v9;
      goto LABEL_88;
    }
    if (v9)
    {
      uint64_t v11 = [a4 attributeType];
      if (v11 > 699)
      {
        if (v11 > 899)
        {
          switch(v11)
          {
            case 900:
              uint64_t result = [v9 isNSDate];
              if (result) {
                return result;
              }
              break;
            case 1000:
              if ([a4 isFileBackedFuture])
              {
                objc_opt_class();
                uint64_t result = objc_opt_isKindOfClass();
                if (result) {
                  return result;
                }
              }
              else
              {
                uint64_t result = [v9 isNSData];
                if (result) {
                  return result;
                }
              }
              break;
            case 1800:
              if ([a4 usesMergeableStorage])
              {
                objc_opt_class();
                uint64_t result = objc_opt_respondsToSelector();
                if (result) {
                  return result;
                }
              }
              break;
          }
          goto LABEL_59;
        }
        if (v11 == 700)
        {
          uint64_t result = [v9 isNSString];
          if (result) {
            return result;
          }
          goto LABEL_59;
        }
        if (v11 != 800)
        {
LABEL_59:
          if (![a4 isFileBackedFuture])
          {
            if ([a4 usesMergeableStorage])
            {
              uint64_t v26 = (void *)MEMORY[0x1E4F1CA00];
              uint64_t v27 = *MEMORY[0x1E4F1C3C8];
              uint64_t v30 = [NSString stringWithFormat:@"Using mergeable storage with the attribute \"%@\" requires conformance to %@.", objc_msgSend(a4, "name"), NSStringFromProtocol((Protocol *)&unk_1ED7F0848)];
            }
            else
            {
              uint64_t v36 = [a4 _attributeValueClass];
              if (v36)
              {
                int v37 = (void *)v36;
                uint64_t result = objc_opt_isKindOfClass();
                if (result) {
                  goto LABEL_88;
                }
                uint64_t v38 = a3;
                if ([v9 isNSNumber]
                  && [v37 isSubclassOfClass:objc_opt_class()])
                {
                  uint64_t result = objc_msgSend(MEMORY[0x1E4F28C28], "decimalNumberWithString:", objc_msgSend(v9, "stringValue"));
                  uint64_t v8 = (void *)result;
                  goto LABEL_88;
                }
                uint64_t v26 = (void *)MEMORY[0x1E4F1CA00];
                uint64_t v27 = *MEMORY[0x1E4F1C3C8];
                uint64_t v56 = objc_msgSend(NSString, "stringWithFormat:", @"Unacceptable type of value for attribute: property = \"%@\"; desired type = %@; given type = %@; value = %@.",
                        a3,
                        [a4 attributeValueClassName],
                        objc_opt_class(),
                        v9);
                goto LABEL_110;
              }
              uint64_t result = [a4 isTransient];
              if (result) {
                goto LABEL_88;
              }
              uint64_t result = [a4 attributeType];
              if (result == 1800) {
                goto LABEL_88;
              }
              uint64_t v26 = (void *)MEMORY[0x1E4F1CA00];
              uint64_t v27 = *MEMORY[0x1E4F1C3B8];
              uint64_t v30 = objc_msgSend(NSString, "stringWithFormat:", @"Cannot set value for attribute with undefined type: property = \"%@\"; entity = \"%@\"; value = %@",
                      a3,
                      [a4 entity],
                      v9,
                      v58);
            }
LABEL_51:
            uint64_t v31 = v30;
            uint64_t v32 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", a3, @"key", v9, @"value", 0);
LABEL_52:
            uint64_t v33 = v32;
            uint64_t v34 = v26;
            uint64_t v35 = v27;
            goto LABEL_85;
          }
          CFArrayRef v51 = (void *)MEMORY[0x1E4F1CA00];
          uint64_t v52 = *MEMORY[0x1E4F1C3C8];
          uint64_t v53 = objc_msgSend(NSString, "stringWithFormat:", @"Unacceptable type of value for attribute: property = \"%@\"; desired type = %@; given type = %@; value = %@.",
                  a3,
                  @"A class implementing the NSFileBackedFuture protocol",
                  objc_opt_class(),
                  v9);
          goto LABEL_114;
        }
      }
      else if (v11 <= 299)
      {
        if (v11 != 100 && v11 != 200) {
          goto LABEL_59;
        }
      }
      else if (v11 != 300 && v11 != 500 && v11 != 600)
      {
        goto LABEL_59;
      }
      uint64_t result = [v9 isNSNumber];
      if (result) {
        return result;
      }
      goto LABEL_59;
    }
LABEL_23:
    uint64_t v8 = 0;
    goto LABEL_88;
  }
  uint64_t v12 = (void *)[a4 destinationEntity];
  uint64_t v13 = (objc_class *)_PFFastEntityClass((unint64_t)v12);
  class_getSuperclass(v13);
  uint64_t result = [a4 isToMany];
  if (!result)
  {
    if (v9)
    {
      uint64_t v16 = (void *)[v9 managedObjectContext];
      uint64_t v17 = v16;
      if (!a1 || (*(unsigned char *)(a1 + 16) & 0x80) != 0) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = *(void **)(a1 + 32);
      }
      if (([v16 _isSwiftBound] & 1) != 0
        || (char v24 = [v18 _isSwiftBound], v17 == v18)
        || (v24 & 1) != 0
        || (void *)[(id)a1 valueForKey:a3] == v9)
      {
        isKindOfClass Class = objc_opt_isKindOfClass();
        if (v12)
        {
          if (isKindOfClass)
          {
            uint64_t result = [v12 _subentitiesIncludes:_PFEntityForManagedObject(v9)];
            if (result) {
              goto LABEL_88;
            }
          }
        }
        uint64_t v26 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v27 = *MEMORY[0x1E4F1C3C8];
        uint64_t v28 = NSString;
        -[NSEntityDescription _entityClass]([a4 destinationEntity]);
        uint64_t v29 = objc_opt_class();
        uint64_t v30 = objc_msgSend(v28, "stringWithFormat:", @"Unacceptable type of value for to-one relationship: property = \"%@\"; desired type = %@; given type = %@; value = %@.",
                a3,
                v29,
                objc_opt_class(),
                v9);
        goto LABEL_51;
      }
      CFArrayRef v51 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v52 = *MEMORY[0x1E4F1C3C8];
      uint64_t v53 = [NSString stringWithFormat:@"Illegal attempt to establish a relationship '%@' between objects in different contexts (source = %@, destination = %@)", a3, a1, v9, v58];
LABEL_114:
      uint64_t v57 = v53;
      uint64_t v33 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", a3, @"key", v9, @"value", 0);
      uint64_t v34 = v51;
      uint64_t v35 = v52;
      uint64_t v50 = v57;
      goto LABEL_86;
    }
    goto LABEL_23;
  }
  if ([a4 isOrdered])
  {
    uint64_t v14 = objc_opt_class();
    Class v61 = (Class)objc_opt_class();
    if ([v9 isNSOrderedSet]) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v14 = objc_opt_class();
    Class v61 = (Class)objc_opt_class();
    if ([v9 isNSSet])
    {
LABEL_16:
      BOOL v15 = 1;
      if (!v9) {
        goto LABEL_41;
      }
      goto LABEL_33;
    }
  }
  BOOL v15 = [v9 count] == 0;
  if (!v9) {
    goto LABEL_41;
  }
LABEL_33:
  if (!v15)
  {
    uint64_t v26 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v27 = *MEMORY[0x1E4F1C3C8];
    uint64_t v54 = NSString;
    uint64_t v38 = a3;
    if ([a4 isOrdered]) {
      id v55 = @"ordered to-many";
    }
    else {
      id v55 = @"to-many";
    }
    uint64_t v56 = objc_msgSend(v54, "stringWithFormat:", @"Unacceptable type of value for %@ relationship: property = \"%@\"; desired type = %@; given type = %@; value = %@.",
            v55,
            v38,
            v14,
            objc_opt_class(),
            v9);
LABEL_110:
    uint64_t v31 = v56;
    uint64_t v32 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v38, @"key", v9, @"value", 0);
    goto LABEL_52;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
  {
    if ([v9 source] == a1)
    {
      uint64_t result = [v9 relationship];
      if ((void *)result == a4) {
        goto LABEL_88;
      }
    }
  }
  uint64_t v19 = [v9 count];
  if (!v19)
  {
LABEL_41:
    uint64_t v8 = (void *)[[v61 alloc] initWithSource:a1 forRelationship:a4 asFault:0];
    goto LABEL_42;
  }
  unint64_t v20 = v19;
  uint64_t v59 = (uint64_t)&v59;
  unint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v59 - v22;
  uint64_t v60 = a3;
  if (v21 > 0x200) {
    uint64_t v23 = (char *)NSAllocateScannedUncollectable();
  }
  else {
    bzero((char *)&v59 - v22, 8 * v21);
  }
  objc_msgSend(v9, "getObjects:", v23, v59);
  for (uint64_t i = 0; i != v20; ++i)
  {
    BOOL v40 = *(void **)&v23[8 * i];
    uint64_t v41 = [v40 managedObjectContext];
    if (!a1 || (*(unsigned char *)(a1 + 16) & 0x80) != 0) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = *(void *)(a1 + 32);
    }
    if (v41 != v42 && (objc_msgSend((id)objc_msgSend((id)a1, "valueForKey:", v60), "containsObject:", v40) & 1) == 0)
    {
      CFArrayRef v51 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v52 = *MEMORY[0x1E4F1C3C8];
      a3 = v60;
      uint64_t v53 = [NSString stringWithFormat:@"Illegal attempt to establish a relationship '%@' between objects in different contexts (source = %@, destination = %@)", v60, a1, v40, v58];
      goto LABEL_114;
    }
    char v43 = objc_opt_isKindOfClass();
    if (!v12
      || !v40
      || (v43 & 1) == 0
      || ([v12 _subentitiesIncludes:_PFEntityForManagedObject(v40)] & 1) == 0)
    {
      CFRange v44 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v45 = *MEMORY[0x1E4F1C3C8];
      uint64_t v46 = NSString;
      -[NSEntityDescription _entityClass]([a4 destinationEntity]);
      uint64_t v47 = objc_opt_class();
      uint64_t v48 = objc_opt_class();
      uint64_t v49 = v60;
      uint64_t v31 = objc_msgSend(v46, "stringWithFormat:", @"Unacceptable type of value in to-many relationship: property = \"%@\"; problem = %@; desired type = %@; given type = %@; value = %@.",
              v60,
              v9,
              v47,
              v48,
              v40);
      uint64_t v33 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v49, @"key", v9, @"value", 0);
      uint64_t v34 = v44;
      uint64_t v35 = v45;
LABEL_85:
      uint64_t v50 = v31;
LABEL_86:
      objc_exception_throw((id)[v34 exceptionWithName:v35 reason:v50 userInfo:v33]);
    }
  }
  uint64_t v8 = (void *)[[v61 alloc] initWithSource:a1 forRelationship:a4 asFault:0];
  if ([a4 isOrdered]) {
    [v8 addObjects:v23 count:v20];
  }
  else {
    [v8 setSet:v9];
  }
  if (v20 >= 0x201) {
    NSZoneFree(0, v23);
  }
LABEL_42:
  uint64_t result = v8;
LABEL_88:
  *a2 = v8;
  return result;
}

unsigned int *___sharedIMPL_setvfk_core_q_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [NSNumber numberWithLongLong:*(void *)(a1 + 48)];
    return (unsigned int *)_NSSetUsingKeyValueSetter();
  }
  else
  {
    BOOL v3 = *(char **)(*(void *)(a1 + 32) + 24);
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    return snapshot_set_int64(v3, v4, v5);
  }
}

unsigned int *___sharedIMPL_setvfk_core_c_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [NSNumber numberWithChar:*(char *)(a1 + 48)];
    return (unsigned int *)_NSSetUsingKeyValueSetter();
  }
  else
  {
    BOOL v3 = *(void **)(*(void *)(a1 + 32) + 24);
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    char v5 = *(unsigned char *)(a1 + 48);
    return snapshot_set_int8(v3, v4, v5);
  }
}

unsigned int *___sharedIMPL_setvfk_core_i_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
    return (unsigned int *)_NSSetUsingKeyValueSetter();
  }
  else
  {
    BOOL v3 = *(char **)(*(void *)(a1 + 32) + 24);
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    int v5 = *(_DWORD *)(a1 + 48);
    return snapshot_set_int32(v3, v4, v5);
  }
}

void sub_18ABF1524()
{
  if (v0) {
    JUMPOUT(0x18ABF152CLL);
  }
  JUMPOUT(0x18ABF1530);
}

void sub_18ABF1FB8()
{
}

void sub_18ABF20F8(_Unwind_Exception *a1)
{
}

void sub_18ABF210C(_Unwind_Exception *a1)
{
}

void sub_18ABF2124(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(a1);
}

unsigned int *___sharedIMPL_setvfk_core_d_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [NSNumber numberWithDouble:*(double *)(a1 + 48)];
    return (unsigned int *)_NSSetUsingKeyValueSetter();
  }
  else
  {
    BOOL v3 = *(char **)(*(void *)(a1 + 32) + 24);
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    double v5 = *(double *)(a1 + 48);
    return snapshot_set_double(v3, v4, v5);
  }
}

unsigned int *___sharedIMPL_setvfk_core_s_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [NSNumber numberWithShort:*(__int16 *)(a1 + 48)];
    return (unsigned int *)_NSSetUsingKeyValueSetter();
  }
  else
  {
    BOOL v3 = *(char **)(*(void *)(a1 + 32) + 24);
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    __int16 v5 = *(_WORD *)(a1 + 48);
    return snapshot_set_int16(v3, v4, v5);
  }
}

ValueMetadata *type metadata accessor for NSManagedObjectContext.ScheduledTaskType()
{
  return &type metadata for NSManagedObjectContext.ScheduledTaskType;
}

void sub_18ABF7074(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30)
{
  if (a2)
  {
    if (a2 != 4)
    {
      if (a2 == 3)
      {
        id v30 = objc_begin_catch(exc_buf);
        uint64_t v31 = v30;
        uint64_t v32 = *(void *)(a24[8] + 8);
        if (*(void *)(v32 + 40)) {
          *(void *)(v32 + 40) = 0;
        }
        uint64_t v33 = a24[7];
        if (!v33
          || (*(unsigned char *)(v33 + 43) & 1) == 0
          || (!v30
            ? (uint64_t v34 = 0)
            : *((void *)v30 + 6)
            ? (uint64_t v34 = (void *)*((void *)v30 + 6))
            : (uint64_t v34 = (void *)*MEMORY[0x1E4F281F8]),
              ![v34 isEqualToString:@"NSSQLiteErrorDomain"]))
        {
          if (a24[13])
          {
            *(void *)(*(void *)(a24[10] + 8) + 40) = objc_msgSend((id)objc_msgSend(v31, "userInfo"), "objectForKey:", @"NSCoreDataPrimaryError");
            if (!*(void *)(*(void *)(a24[10] + 8) + 40)) {
              *(void *)(*(void *)(a24[10] + 8) + 40) = [v31 errorObjectWithUserInfo:0];
            }
          }
          objc_end_catch();
          JUMPOUT(0x18ABF6630);
        }
        objc_exception_rethrow();
      }
      if (a2 != 2)
      {
        objc_begin_catch(exc_buf);
        JUMPOUT(0x18ABF6634);
      }
      objc_begin_catch(exc_buf);
      uint64_t v35 = *(void *)(a24[8] + 8);
      if (*(void *)(v35 + 40)) {
        *(void *)(v35 + 40) = 0;
      }
      objc_exception_rethrow();
    }
    objc_begin_catch(exc_buf);
    *(void *)(*(void *)(a24[8] + 8) + 40) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ABF75D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ABF7568);
  }
  _Unwind_Resume(a1);
}

void sub_18ABF7908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ABF96DC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ABF9634);
  }
  JUMPOUT(0x18ABF95BCLL);
}

void sub_18ABF9704(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ABF95B8);
  }
  JUMPOUT(0x18ABF9578);
}

void _pvfk_37(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

id @objc static NSManagedObject.fetchRequest()(id a1, SEL a2)
{
  swift_getObjCClassMetadata();
  id v2 = static NSManagedObject.fetchRequest()();

  return v2;
}

void sub_18ABF9CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  id v17 = objc_begin_catch(exception_object);
  if (v16) {
    objc_setProperty_nonatomic(v16, v18, v17, 48);
  }
  objc_end_catch();
}

void *_executeChangeRequest(void *a1, void *a2)
{
  v153[3] = *MEMORY[0x1E4F143B8];
  BOOL v3 = (void *)[a1 request];
  unsigned int v4 = v3;
  uint64_t v134 = 0;
  if (a1) {
    unsigned int v121 = (id *)a1[3];
  }
  else {
    unsigned int v121 = 0;
  }
  if (![v3 transactionNumber]
    || objc_msgSend((id)objc_msgSend(v4, "transactionNumber"), "integerValue") < 1)
  {
    if (objc_msgSend((id)objc_msgSend(v4, "fetchRequest"), "predicate"))
    {
      uint64_t v22 = -[_NSPersistentHistoryTransactionPredicateParser initWithPredicate:]([_NSPersistentHistoryTransactionPredicateParser alloc], "initWithPredicate:", objc_msgSend((id)objc_msgSend(v4, "fetchRequest"), "predicate"));
      *(void *)uint64_t v135 = 0;
      [(_NSPersistentHistoryTransactionPredicateParser *)v22 parse:v135];
      if (*(void *)v135)
      {
        int v21 = 0;
        if (a2) {
          *a2 = *(void *)v135;
        }
        goto LABEL_127;
      }
      id v33 = [(_NSPersistentHistoryTransactionPredicateParser *)v22 storeTokens];
      if (a1) {
        uint64_t v34 = (void *)a1[1];
      }
      else {
        uint64_t v34 = 0;
      }
      uint64_t v35 = objc_msgSend(v33, "objectForKey:", objc_msgSend(v34, "identifier"));
      if (v35)
      {
        if (a1) {
          uint64_t v36 = (void *)a1[4];
        }
        else {
          uint64_t v36 = 0;
        }
        int v37 = objc_msgSend((id)objc_msgSend(v36, "_queryGenerationToken"), "_isEnabled");
        if (v37)
        {
          int v21 = 1;
          -[NSSQLiteConnection beginReadTransaction]((uint64_t)v121);
          if (a1) {
            uint64_t v38 = (void *)a1[4];
          }
          else {
            uint64_t v38 = 0;
          }
          uint64_t v39 = [v38 _queryGenerationToken];
          if (a1) {
            BOOL v40 = (void *)a1[1];
          }
          else {
            BOOL v40 = 0;
          }
          uint64_t v41 = -[_NSQueryGenerationToken _generationalComponentForStore:](v39, v40);
          if (v41) {
            uint64_t v42 = *((void *)v41 + 3);
          }
          else {
            uint64_t v42 = 0;
          }
          uint64_t v43 = -[NSSQLiteConnection adoptQueryGenerationWithIdentifier:]((uint64_t)v121, v42);
          if (v43)
          {
            uint64_t v44 = [NSString stringWithUTF8String:"Persistent history request failed to adopt a query generation with error %d"];
            _NSCoreDataLog(17, v44, v45, v46, v47, v48, v49, v50, v43);
            CFArrayRef v51 = __pflogFaultLog;
            if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 67109120;
              int v151 = v43;
              _os_log_fault_impl(&dword_18AB82000, v51, OS_LOG_TYPE_FAULT, "CoreData: Persistent history request failed to adopt a query generation with error %d", buf, 8u);
            }
          }
        }
        else
        {
          int v21 = 0;
        }
        BOOL v87 = -[NSSQLiteConnection hasHistoryTransactionWithNumber:](v121, v35);
        if (!v87)
        {
          if (a1) {
            long long v88 = (void *)a1[1];
          }
          else {
            long long v88 = 0;
          }
          uint64_t v89 = [NSString stringWithFormat:@"Persistent History Token is expired for store at %@", objc_msgSend(v88, "URL")];
          long long v90 = (void *)MEMORY[0x1E4F28C58];
          v149[0] = v89;
          v148[0] = @"message";
          v148[1] = @"NSStoreUUID";
          if (a1) {
            long long v91 = (void *)a1[1];
          }
          else {
            long long v91 = 0;
          }
          v149[1] = [v91 identifier];
          v148[2] = *MEMORY[0x1E4F28328];
          if (a1) {
            long long v92 = (void *)a1[1];
          }
          else {
            long long v92 = 0;
          }
          v149[2] = objc_msgSend((id)objc_msgSend(v92, "URL"), "path");
          uint64_t v93 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v149 forKeys:v148 count:3];
          uint64_t v134 = [v90 errorWithDomain:*MEMORY[0x1E4F281F8] code:134301 userInfo:v93];
        }
        if (v37)
        {
          -[NSSQLiteConnection commitTransaction]((uint64_t)v121);
          int v21 = 0;
        }
        if (v87) {
          goto LABEL_51;
        }
LABEL_127:
        Request = 0;
        uint64_t v32 = 0;
        BOOL v30 = v21 != 0;
        goto LABEL_128;
      }
    }
    int v21 = 0;
    goto LABEL_51;
  }
  if (a1) {
    __int16 v5 = (void *)a1[4];
  }
  else {
    __int16 v5 = 0;
  }
  int v6 = objc_msgSend((id)objc_msgSend(v5, "_queryGenerationToken"), "_isEnabled");
  if (v6)
  {
    -[NSSQLiteConnection beginReadTransaction]((uint64_t)v121);
    if (a1) {
      uint64_t v7 = (void *)a1[4];
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = [v7 _queryGenerationToken];
    if (a1) {
      uint64_t v9 = (void *)a1[1];
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = -[_NSQueryGenerationToken _generationalComponentForStore:](v8, v9);
    if (v10) {
      uint64_t v11 = *((void *)v10 + 3);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = -[NSSQLiteConnection adoptQueryGenerationWithIdentifier:]((uint64_t)v121, v11);
    if (v12)
    {
      uint64_t v13 = [NSString stringWithUTF8String:"Persistent history request failed to adopt a query generation with error %d"];
      _NSCoreDataLog(17, v13, v14, v15, v16, v17, v18, v19, v12);
      unint64_t v20 = __pflogFaultLog;
      if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t v135 = 67109120;
        *(_DWORD *)&v135[4] = v12;
        _os_log_fault_impl(&dword_18AB82000, v20, OS_LOG_TYPE_FAULT, "CoreData: Persistent history request failed to adopt a query generation with error %d", v135, 8u);
      }
    }
    int v21 = 1;
  }
  else
  {
    int v21 = 0;
  }
  BOOL v23 = -[NSSQLiteConnection hasHistoryTransactionWithNumber:](v121, [v4 transactionNumber]);
  if (!v23)
  {
    if (a1) {
      char v24 = (void *)a1[1];
    }
    else {
      char v24 = 0;
    }
    uint64_t v25 = [NSString stringWithFormat:@"Persistent History Token is expired for store at %@", objc_msgSend(v24, "URL")];
    uint64_t v26 = (void *)MEMORY[0x1E4F28C58];
    v153[0] = v25;
    v152[0] = @"message";
    v152[1] = @"NSStoreUUID";
    if (a1) {
      uint64_t v27 = (void *)a1[1];
    }
    else {
      uint64_t v27 = 0;
    }
    v153[1] = [v27 identifier];
    v152[2] = *MEMORY[0x1E4F28328];
    if (a1) {
      uint64_t v28 = (void *)a1[1];
    }
    else {
      uint64_t v28 = 0;
    }
    v153[2] = objc_msgSend((id)objc_msgSend(v28, "URL"), "path");
    uint64_t v29 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v153 forKeys:v152 count:3];
    uint64_t v134 = [v26 errorWithDomain:*MEMORY[0x1E4F281F8] code:134301 userInfo:v29];
  }
  if (v6)
  {
    -[NSSQLiteConnection commitTransaction]((uint64_t)v121);
    int v21 = 0;
  }
  BOOL v30 = v21 != 0;
  if (!v23)
  {
    Request = 0;
    uint64_t v32 = 0;
LABEL_128:
    int v85 = 1;
    goto LABEL_180;
  }
LABEL_51:
  int v119 = v21;
  BOOL v30 = v21 != 0;
  if (![a1 isWritingRequest])
  {
    if ([v4 resultType] == 2 || objc_msgSend(v4, "resultType") == 6 || !objc_msgSend(v4, "resultType"))
    {
      if (a1) {
        long long v76 = (void *)a1[4];
      }
      else {
        long long v76 = 0;
      }
      if (objc_msgSend((id)objc_msgSend(v76, "_queryGenerationToken"), "_isEnabled"))
      {
        -[NSSQLiteConnection beginReadTransaction]((uint64_t)v121);
        if (a1) {
          long long v77 = (void *)a1[4];
        }
        else {
          long long v77 = 0;
        }
        uint64_t v78 = [v77 _queryGenerationToken];
        if (a1) {
          long long v79 = (void *)a1[1];
        }
        else {
          long long v79 = 0;
        }
        long long v80 = -[_NSQueryGenerationToken _generationalComponentForStore:](v78, v79);
        if (v80) {
          uint64_t v81 = *((void *)v80 + 3);
        }
        else {
          uint64_t v81 = 0;
        }
        uint64_t v82 = -[NSSQLiteConnection adoptQueryGenerationWithIdentifier:]((uint64_t)v121, v81);
        if (v82)
        {
          unint64_t v144 = @"NSSQLiteErrorDomain";
          uint64_t v145 = [NSNumber numberWithInt:v82];
          unint64_t v115 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v145 forKeys:&v144 count:1];
          id v116 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E4F1C3A8], (int)v82, @"Persistent history request failed to adopt query generation", v115);
          -[_NSCoreDataException _setDomain:]((uint64_t)v116, @"NSSQLiteErrorDomain");
          objc_exception_throw(v116);
        }
        int v119 = 1;
      }
      uint64_t v83 = [a1 createCountRequestContextForChanges];
      -[NSSQLStoreRequestContext setConnection:](v83, v121);
      Request = _executeCountRequest(v83);
      BOOL v30 = 0;
      if (v119)
      {
        -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v121, 0);
        -[NSSQLiteConnection commitTransaction]((uint64_t)v121);
      }
      -[NSSQLStoreRequestContext setConnection:](v83, 0);
      uint64_t v32 = 0;
      goto LABEL_179;
    }
    if (a1) {
      id v55 = (void *)a1[4];
    }
    else {
      id v55 = 0;
    }
    if (objc_msgSend((id)objc_msgSend(v55, "_queryGenerationToken"), "_isEnabled"))
    {
      -[NSSQLiteConnection beginReadTransaction]((uint64_t)v121);
      if (a1) {
        uint64_t v56 = (void *)a1[4];
      }
      else {
        uint64_t v56 = 0;
      }
      uint64_t v57 = [v56 _queryGenerationToken];
      if (a1) {
        uint64_t v58 = (void *)a1[1];
      }
      else {
        uint64_t v58 = 0;
      }
      uint64_t v59 = -[_NSQueryGenerationToken _generationalComponentForStore:](v57, v58);
      if (v59) {
        uint64_t v60 = *((void *)v59 + 3);
      }
      else {
        uint64_t v60 = 0;
      }
      uint64_t v61 = -[NSSQLiteConnection adoptQueryGenerationWithIdentifier:]((uint64_t)v121, v60);
      if (v61)
      {
        unint64_t v142 = @"NSSQLiteErrorDomain";
        uint64_t v143 = [NSNumber numberWithInt:v61];
        uint64_t v117 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v143 forKeys:&v142 count:1];
        id v118 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E4F1C3A8], (int)v61, @"Persistent history request failed to adopt query generation", v117);
        -[_NSCoreDataException _setDomain:]((uint64_t)v118, @"NSSQLiteErrorDomain");
        objc_exception_throw(v118);
      }
      int v119 = 1;
    }
    uint64_t v62 = [a1 fetchRequestContextForChanges];
    uint64_t v63 = (void *)v62;
    if (a1) {
      unsigned __int8 v64 = (void *)a1[3];
    }
    else {
      unsigned __int8 v64 = 0;
    }
    -[NSSQLStoreRequestContext setConnection:](v62, v64);
    Request = _executeFetchRequest((uint64_t)v63);
    if (v119)
    {
      -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v121, 0);
      -[NSSQLiteConnection commitTransaction]((uint64_t)v121);
    }
    int v119 = 0;
    -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v121, 0);
    -[NSSQLStoreRequestContext setConnection:]((uint64_t)v63, 0);
    if ([v4 resultType] != 5
      || (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v63, "request"), "entityName"), "isEqualToString:", @"CHANGE") & 1) != 0|| (objc_msgSend(a1, "shouldUseBatches") & 1) != 0|| !objc_msgSend(Request, "count"))
    {
      if (([v4 resultType] == 1 || objc_msgSend(v4, "resultType") == 4)
        && objc_msgSend((id)objc_msgSend((id)objc_msgSend(v63, "request"), "entityName"), "isEqualToString:", @"TRANSACTION"))
      {
        long long v94 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(Request, "count"));
        long long v128 = 0u;
        long long v129 = 0u;
        long long v126 = 0u;
        long long v127 = 0u;
        uint64_t v95 = [Request countByEnumeratingWithState:&v126 objects:v138 count:16];
        if (v95)
        {
          uint64_t v96 = *(void *)v127;
          do
          {
            for (uint64_t i = 0; i != v95; ++i)
            {
              if (*(void *)v127 != v96) {
                objc_enumerationMutation(Request);
              }
              uint64_t v98 = *(void **)(*((void *)&v126 + 1) + 8 * i);
              CFRange v99 = (void *)MEMORY[0x18C127630]();
              objc_msgSend(v94, "addObject:", objc_msgSend(v98, "objectForKey:", @"self"));
            }
            uint64_t v95 = [Request countByEnumeratingWithState:&v126 objects:v138 count:16];
          }
          while (v95);
        }
        if ([v94 count])
        {
          CFRange v100 = (void *)[a1 createRequestContextForChangesWithTransactionIDs:v94];
          objc_msgSend((id)objc_msgSend(v100, "request"), "setResultType:", objc_msgSend(v4, "resultType"));
          if (a1) {
            uint64_t v101 = (void *)a1[3];
          }
          else {
            uint64_t v101 = 0;
          }
          -[NSSQLStoreRequestContext setConnection:]((uint64_t)v100, v101);
          uint64_t v102 = _executeChangeRequest(v100, &v134);
          if (v102) {
            BOOL v103 = v134 == 0;
          }
          else {
            BOOL v103 = 0;
          }
          if (v103) {
            Request = (void *)v102;
          }
          else {
            Request = 0;
          }
        }
        else
        {
          CFRange v100 = 0;
          Request = (void *)MEMORY[0x1E4F1CBF0];
        }
        -[NSSQLStoreRequestContext setConnection:]((uint64_t)v100, 0);
      }
      else if (([v4 resultType] == 3 || objc_msgSend(v4, "resultType") == 5) {
             && objc_msgSend((id)objc_msgSend((id)objc_msgSend(v63, "request"), "entityName"), "isEqualToString:", @"CHANGE"))
      }
      {
        unint64_t v104 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(Request, "count"));
        long long v124 = 0u;
        long long v125 = 0u;
        long long v122 = 0u;
        long long v123 = 0u;
        uint64_t v105 = [Request countByEnumeratingWithState:&v122 objects:v137 count:16];
        if (v105)
        {
          uint64_t v106 = *(void *)v123;
          do
          {
            for (uint64_t j = 0; j != v105; ++j)
            {
              if (*(void *)v123 != v106) {
                objc_enumerationMutation(Request);
              }
              unint64_t v108 = *(void **)(*((void *)&v122 + 1) + 8 * j);
              unint64_t v109 = (void *)MEMORY[0x18C127630]();
              objc_msgSend(v104, "addObject:", objc_msgSend(v108, "objectForKey:", @"TRANSACTIONID"));
            }
            uint64_t v105 = [Request countByEnumeratingWithState:&v122 objects:v137 count:16];
          }
          while (v105);
        }
        if ([v104 count])
        {
          unint64_t v110 = (void *)[a1 createRequestContextForChangesWithTransactionIDs:v104];
          objc_msgSend((id)objc_msgSend(v110, "request"), "setResultType:", 3);
          if (a1) {
            uint64_t v111 = (void *)a1[3];
          }
          else {
            uint64_t v111 = 0;
          }
          -[NSSQLStoreRequestContext setConnection:]((uint64_t)v110, v111);
          uint64_t v112 = _executeChangeRequest(v110, &v134);
          if (v134 || (unint64_t v113 = (void *)v112) == 0)
          {
            Request = 0;
          }
          else if ([v4 resultType] == 5)
          {
            v136[0] = v113;
            v136[1] = Request;
            Request = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v136 count:2];
          }
          else
          {
            Request = v113;
          }
        }
        else
        {
          unint64_t v110 = 0;
          Request = (void *)MEMORY[0x1E4F1CBF0];
        }
        -[NSSQLStoreRequestContext setConnection:]((uint64_t)v110, 0);
      }
      goto LABEL_177;
    }
    unsigned __int8 v65 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(Request, "count"));
    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    uint64_t v66 = [Request countByEnumeratingWithState:&v130 objects:v141 count:16];
    if (v66)
    {
      uint64_t v67 = *(void *)v131;
      do
      {
        for (uint64_t k = 0; k != v66; ++k)
        {
          if (*(void *)v131 != v67) {
            objc_enumerationMutation(Request);
          }
          long long v69 = *(void **)(*((void *)&v130 + 1) + 8 * k);
          long long v70 = (void *)MEMORY[0x18C127630]();
          objc_msgSend(v65, "addObject:", objc_msgSend(v69, "objectForKey:", @"self"));
        }
        uint64_t v66 = [Request countByEnumeratingWithState:&v130 objects:v141 count:16];
      }
      while (v66);
    }
    if ([v65 count])
    {
      uint64_t v71 = [a1 createRequestContextForChangesWithTransactionIDs:v65];
      uint64_t v72 = v71;
      if (a1) {
        long long v73 = (void *)a1[3];
      }
      else {
        long long v73 = 0;
      }
      -[NSSQLStoreRequestContext setConnection:](v71, v73);
      uint64_t v74 = _executeChangeRequest(v72, &v134);
      if (!v134 && v74)
      {
        v140[0] = Request;
        v140[1] = v74;
        uint64_t v75 = [MEMORY[0x1E4F1C978] arrayWithObjects:v140 count:2];
LABEL_173:
        Request = (void *)v75;
        goto LABEL_176;
      }
      Request = 0;
    }
    else
    {
      uint64_t v72 = 0;
      if (Request)
      {
        v139[0] = Request;
        v139[1] = MEMORY[0x1E4F1CBF0];
        uint64_t v75 = [MEMORY[0x1E4F1C978] arrayWithObjects:v139 count:2];
        goto LABEL_173;
      }
    }
LABEL_176:
    -[NSSQLStoreRequestContext setConnection:](v72, 0);
LABEL_177:
    uint64_t v32 = 0;
LABEL_178:
    BOOL v30 = v119;
LABEL_179:
    int v85 = 0;
    goto LABEL_180;
  }
  if ([v4 isPercentageDelete]
    && (unint64_t v52 = -[NSSQLiteConnection percentageUsedByPersistentHistory]((uint64_t)v121),
        v52 <= [v4 percentageOfDB]))
  {
    -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v121, 0);
    uint64_t v147 = [NSNumber numberWithBool:0];
    int v85 = 1;
    uint64_t v32 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v147 count:1];
    char v86 = 0;
    uint64_t v53 = 0;
    Request = 0;
  }
  else
  {
    uint64_t v53 = (uint64_t *)[a1 createDeleteTransactionsRequestContext];
    -[NSSQLStoreRequestContext setConnection:]((uint64_t)v53, v121);
    uint64_t v54 = _executeBatchDeleteRequest(v53, &v134);
    if (v134)
    {
      Request = 0;
    }
    else
    {
      uint64_t v146 = [NSNumber numberWithBool:1];
      Request = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v146 count:1];
    }
    if ((int)objc_msgSend(-[NSBatchDeleteResult result](v54, "result"), "intValue") >= 1)
    {
      if (v53) {
        uint64_t v84 = v53[3];
      }
      else {
        uint64_t v84 = 0;
      }
      -[NSSQLiteConnection _performPostSaveTasks:andForceFullVacuum:](v84, objc_msgSend((id)objc_msgSend(a1, "request"), "_secureOperation"), 0);
    }
    int v85 = 0;
    uint64_t v32 = 0;
    char v86 = 1;
  }
  -[NSSQLStoreRequestContext setConnection:]((uint64_t)v53, 0);
  if (v86) {
    goto LABEL_178;
  }
LABEL_180:
  -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v121, 0);
  if (v30) {
    -[NSSQLiteConnection rollbackTransaction]((uint64_t)v121);
  }
  if (a2 && v134) {
    *a2 = v134;
  }
  if ((v85 | 4) == 4) {
    return Request;
  }
  return (void *)v32;
}

void sub_18ABFB764(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint8_t buf,int a43,int a44,__int16 a45)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ABFB4B0);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ABFBA9C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,long long a41)
{
  if (a2)
  {
    if (a2 == 4 || a2 == 3)
    {
      id v41 = objc_begin_catch(a1);
      [v41 errorObjectWithUserInfo:0];
      [v41 userInfo];
      _NSCoreDataLog(1, @"Unhandled error encountered during change request %@ with userInfo %@");
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        id v42 = objc_begin_catch(a1);
        uint64_t v43 = [NSString stringWithUTF8String:"Unhandled exception encountered during change request: %@ with userInfo %@"];
        [v42 userInfo];
        _NSCoreDataLog(17, v43);
        uint64_t v44 = __pflogFaultLog;
        if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
        {
          uint64_t v45 = [v42 userInfo];
          LODWORD(a41) = 138412546;
          *(void *)((char *)&a41 + 4) = v42;
          WORD6(a41) = 2112;
          *(void *)((char *)&a41 + 14) = v45;
          _os_log_fault_impl(&dword_18AB82000, v44, OS_LOG_TYPE_FAULT, "CoreData: Unhandled exception encountered during change request: %@ with userInfo %@", (uint8_t *)&a41, 0x16u);
        }
        objc_exception_rethrow();
      }
      objc_begin_catch(a1);
    }
    JUMPOUT(0x18ABFB4D0);
  }
  JUMPOUT(0x18ABFBA94);
}

void sub_18ABFBC0C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ABFBB4CLL);
  }
  JUMPOUT(0x18ABFBA94);
}

_PFArray *_executeFetchRequest(uint64_t a1)
{
  uint64_t v1 = (void *)a1;
  v12[1] = *MEMORY[0x1E4F143B8];
  id v2 = _newFetchedRowsForRequest(a1);
  if (v2 && [v1 shouldUseBatches])
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v3 = [(_PFArray *)v2 count];
      unint64_t v4 = v3;
      MEMORY[0x1F4188790](v3);
      uint64_t v7 = (char *)v12 - v6;
      if (v3 >= 0x201uLL) {
        uint64_t v7 = (char *)NSAllocateScannedUncollectable();
      }
      else {
        bzero((char *)v12 - v6, 8 * v5);
      }
      -[_PFArray getObjects:range:](v2, "getObjects:range:", v7, 0, v3);
      uint64_t v8 = [[_PFArray alloc] initWithObjects:v7 count:v3 andFlags:27];
      if (v4 >= 0x201) {
        NSZoneFree(0, v7);
      }

      id v2 = v8;
    }
    if (v1)
    {
      uint64_t v9 = v1[4];
      uint64_t v1 = (void *)v1[24];
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = [[_PFBatchFaultingArray alloc] initWithPFArray:v2 andRequest:v1 andContext:v9];

    id v2 = (_PFArray *)v10;
  }
  return v2;
}

id NSManagedObjectContext.fetch<A>(_:)(uint64_t a1)
{
  v10[1] = *(id *)MEMORY[0x1E4F143B8];
  v10[0] = 0;
  id v2 = objc_msgSend(v1, sel_executeRequest_error_, a1, v10);
  id v3 = v10[0];
  if (!v2)
  {
    id v9 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v9;
  }
  unint64_t v4 = v2;
  self;
  uint64_t v5 = (void *)swift_dynamicCastObjCClassUnconditional();
  id v6 = v3;
  id result = objc_msgSend(v5, sel_finalResult);
  if (result)
  {
    uint64_t v8 = result;
    id v9 = (id)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    return v9;
  }
  __break(1u);
  return result;
}

void sub_18ABFCEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void sub_18ABFCF74(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
  {
    if (a2 == 3)
    {
      uint64_t v28 = objc_begin_catch(exc_buf);
      +[NSManagedObjectContext _handleError:withError:]((uint64_t)NSManagedObjectContext, v28, &a28);
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        id v29 = objc_begin_catch(exc_buf);
        objc_exception_rethrow();
      }
      objc_begin_catch(exc_buf);
    }
    JUMPOUT(0x18ABFC61CLL);
  }
  JUMPOUT(0x18ABFD02CLL);
}

void sub_18ABFCFF8(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ABFCFC4);
  }
  JUMPOUT(0x18ABFD02CLL);
}

void sub_18ABFD018()
{
}

void sub_18ABFD034(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  sub_18ABFD018();
}

void sub_18ABFDBAC(_Unwind_Exception *a1)
{
}

BOOL isScalarTypeForKVCSetter(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (objc_opt_isKindOfClass())
  {
    id v2 = (objc_ivar *)[a1 ivar];
    if (v2)
    {
      int v3 = *(unsigned __int8 *)ivar_getTypeEncoding(v2);
      return v3 == 58 || (v3 - 65) < 0x35;
    }
  }
  else if (objc_opt_isKindOfClass())
  {
    unint64_t v4 = (objc_method *)[a1 method];
    if (v4)
    {
      method_getArgumentType(v4, 2u, dst, 0x20uLL);
      int v3 = dst[0];
      return v3 == 58 || (v3 - 65) < 0x35;
    }
  }
  int v3 = 0;
  return v3 == 58 || (v3 - 65) < 0x35;
}

void __internalBlockToDeallocNSManagedObjectContext_block_invoke(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  -[NSManagedObjectContext _dealloc__]((uint64_t)v2);
  MEMORY[0x18C128600]([v3 drain]);
  internal_PF_actor_clear_for_dealloc((uint64_t)v2);
  v2[3] = 0;
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 712) = 0;
  if (!*(_DWORD *)(a1 + 48)) {
    objc_destructInstance(v2);
  }
  dispatch_time_t v4 = dispatch_time(0, 3000000000);
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __internalBlockToDeallocNSManagedObjectContext_block_invoke_2;
  block[3] = &unk_1E544C6D8;
  int v8 = *(_DWORD *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 40);
  block[4] = *(void *)(a1 + 32);
  block[5] = v6;
  dispatch_after(v4, global_queue, block);
}

NSObject *createQueueForMOC(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  __str[0] = 0;
  id v2 = (id)[*(id *)(a1[21] + 168) copy];
  if (v2)
  {
    id v3 = v2;
    snprintf(__str, 0x1FFuLL, "NSManagedObjectContext %p: ", a1);
    [v3 UTF8String];
    __strlcat_chk();
  }
  else
  {
    snprintf(__str, 0x1FFuLL, "NSManagedObjectContext %p", a1);
  }
  dispatch_time_t v4 = dispatch_queue_create(__str, 0);
  dispatch_set_context(v4, a1);
  return v4;
}

void sub_18ABFF960(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18ABFF7BCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18ABFF9F4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ABFF9FCLL);
  }
  JUMPOUT(0x18ABFF9E8);
}

void sub_18ABFFA34(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ABFFA08);
  }
  JUMPOUT(0x18ABFF9E8);
}

void sub_18ABFFFF0(_Unwind_Exception *a1)
{
}

void sub_18AC00274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18AC009E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AC00DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18AC01358(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2 == 1)
  {
    id v28 = objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x18AC0127CLL);
  }
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 120), 8);
  _Unwind_Resume(exc_buf);
}

void sub_18AC013B4()
{
}

void sub_18AC01500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void NSManagedObjectContext.performAndWait<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v25 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v25);
  char v24 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v23 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))((char *)&v21 - v11, 1, 1, a3);
  uint64_t v33 = 0;
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a3;
  v13[3] = a1;
  v13[4] = a2;
  uint64_t v27 = a3;
  id v28 = v12;
  id v29 = _sxs5Error_pIgrzo_xsAA_pIegrzo_lTRTA_0;
  BOOL v30 = v13;
  uint64_t v31 = &v33;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for closure #1 in closure #1 in NSManagedObjectContext._rethrowsHelper_performAndWait<A>(fn:execute:rescue:);
  *(void *)(v14 + 24) = &v26;
  aBlock[4] = _sIg_Ieg_TRTA_0;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_0;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = v4;
  swift_retain();
  swift_release();
  objc_msgSend(v16, sel_performBlockAndWait_, v15);
  _Block_release(v15);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v15)
  {
    __break(1u);
    goto LABEL_9;
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
LABEL_9:
    __break(1u);
LABEL_10:

    __break(1u);
    return;
  }
  if (v33)
  {
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v25);

    return;
  }
  uint64_t v19 = v24;
  uint64_t v18 = v25;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v24, v12, v25);
  uint64_t v20 = v23;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v19, 1, a3) == 1) {
    goto LABEL_10;
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v22, v19, a3);
}

void sub_18AC020C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _pvfk_46(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

#error "18AC02B9C: call analysis failed (funcsize=64)"

void *_svfk_2(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 2uLL);
}

void sub_18AC03EC4()
{
}

void sub_18AC03FC4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18AC03E28);
  }
  _Unwind_Resume(a1);
}

void sub_18AC03FF0(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18AC03FF8);
  }
  _Unwind_Resume(a1);
}

void sub_18AC04000(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AC04008);
  }
  objc_terminate();
}

#error "18AC04194: call analysis failed (funcsize=25)"

void sub_18AC041E8(void *exc_buf)
{
  objc_begin_catch(exc_buf);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18AC04210(_Unwind_Exception *a1)
{
}

void sub_18AC04520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18AC0562C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (!a2) {
    _Unwind_Resume(exc_buf);
  }
  if (a2 != 2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AC050B4);
  }
  objc_begin_catch(exc_buf);

  objc_exception_rethrow();
}

void sub_18AC056EC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC056CCLL);
  }
  JUMPOUT(0x18AC05698);
}

void sub_18AC07218(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AC06F64);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t _readPFEncodedStringFromData(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v8 = (objc_class *)_readPFEncodedStringFromData_myStringClass;
  if (!_readPFEncodedStringFromData_myStringClass)
  {
    uint64_t v8 = (objc_class *)objc_opt_class();
    _readPFEncodedStringFromData_myStringClass Class = (uint64_t)v8;
  }
  unint64_t v9 = (*a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v9 + 24;
  if (v9 + 24 > a4) {
    return 0;
  }
  uint64_t v12 = a2 + v9;
  object_setClass((id)v12, v8);
  *(void *)(v12 + 16) = a1;
  unsigned int v13 = bswap32(*(_DWORD *)(v12 + 12));
  *(_DWORD *)(v12 + 12) = v13;
  unint64_t v14 = v10 + v13 + 1;
  *a3 = v14;
  if (v14 <= a4) {
    return v12;
  }
  else {
    return 0;
  }
}

uint64_t _readPropertyIntoShellFromBytes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, unint64_t *a18)
{
  uint64_t v18 = a3;
  uint64_t v19 = a2;
  uint64_t v20 = a18;
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  unint64_t v21 = *a3;
  unint64_t v22 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v23 = v22 + 4;
  if (v22 + 4 <= a4)
  {
    unsigned int v24 = bswap32(*(_DWORD *)(a2 + v22));
    unint64_t v21 = v23;
  }
  else
  {
    unsigned int v24 = 0;
  }
  unint64_t v25 = v21 + v24;
  if (v25 > a4)
  {
    if (a18)
    {
      char v26 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v27 = *MEMORY[0x1E4F281F8];
      id v28 = (void *)MEMORY[0x1E4F1C9E8];
      id v29 = @"Can't read property into shell: Not enough bytes left";
LABEL_36:
      uint64_t v61 = objc_msgSend(v26, "errorWithDomain:code:userInfo:", v27, 134060, objc_msgSend(v28, "dictionaryWithObject:forKey:", v29, @"Root cause"));
      a11 = 0;
      unint64_t *v20 = v61;
      return a11;
    }
    return 0;
  }
  unint64_t v30 = v25 - 4;
  unint64_t v31 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v32 = v31 + 4;
  if (v31 + 4 > v30)
  {
LABEL_8:
    if (a18)
    {
      char v26 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v27 = *MEMORY[0x1E4F281F8];
      id v28 = (void *)MEMORY[0x1E4F1C9E8];
      id v29 = @"Can't read property into shell: Unknown type";
      goto LABEL_36;
    }
    return 0;
  }
  unsigned int v33 = *(_DWORD *)(a2 + v31);
  unsigned int v34 = bswap32(v33) - 2;
  int v36 = 1;
  switch(v34)
  {
    case 0u:
      int v36 = 0;
      a11 = a8;
      break;
    case 1u:
      int v36 = 0;
      a11 = a13;
      break;
    case 2u:
      break;
    case 3u:
      int v36 = 0;
      a11 = a12;
      break;
    case 4u:
      int v36 = 0;
      a11 = a9;
      break;
    case 5u:
      int v36 = 0;
      a11 = a10;
      break;
    default:
      goto LABEL_8;
  }
  unint64_t v37 = (v31 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v38 = v37 + 4;
  if (v37 + 4 <= v30)
  {
    unsigned int v40 = bswap32(*(_DWORD *)(a2 + v37));
    unint64_t v155 = v37 + 4;
    *(_DWORD *)(a11 + 72) = v40;
    if (a17 <= 4 && (v40 & 0x100) != 0) {
      return 0;
    }
    uint64_t v147 = a7;
    uint64_t v149 = a1;
    unint64_t v37 = (v37 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v39 = v37 + 4;
  }
  else
  {
    uint64_t v147 = a7;
    uint64_t v149 = a1;
    *(_DWORD *)(a11 + 72) = 0;
    unint64_t v39 = v37 + 4;
    unint64_t v38 = v32;
  }
  uint64_t v41 = a15;
  if (v39 <= v30)
  {
    unsigned int v42 = *(_DWORD *)(a2 + v37);
    if (v42)
    {
      unint64_t v43 = v30;
      uint64_t v45 = a5;
      id v46 = *(id *)(a15 + 8 * bswap32(v42));
      uint64_t v41 = a15;
      a5 = v45;
      uint64_t v18 = a3;
      unint64_t v30 = v43;
      uint64_t v20 = a18;
      uint64_t v19 = a2;
      *(void *)(a11 + 8) = v46;
    }
    unint64_t v38 = v39;
  }
  unint64_t v47 = (v38 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v48 = v47 + 4;
  if (v47 + 4 <= v30)
  {
    unsigned int v49 = bswap32(*(_DWORD *)(v19 + v47));
    unint64_t v38 = v48;
  }
  else
  {
    unsigned int v49 = 0;
  }
  if (v33 != 83886080 && v49 == 0)
  {
    if (v20)
    {
      char v26 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v27 = *MEMORY[0x1E4F281F8];
      id v28 = (void *)MEMORY[0x1E4F1C9E8];
      id v29 = @"Can't read property into shell: Missing version hash value";
      goto LABEL_36;
    }
    return 0;
  }
  uint64_t v145 = v41;
  uint64_t v148 = a5;
  *(void *)(a11 + 16) = *(id *)(a16 + 8 * v49);
  unint64_t v57 = (v38 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v58 = v57 + 4;
  if (v57 + 4 <= v30)
  {
    unsigned int v62 = *(_DWORD *)(v19 + v57);
    uint64_t v60 = v148;
    if (v62 == -1) {
      goto LABEL_40;
    }
    unsigned int v59 = bswap32(v62);
  }
  else
  {
    unsigned int v59 = 0;
    unint64_t v58 = v38;
    uint64_t v60 = v148;
  }
  *(void *)(a11 + 24) = *(void *)(v60 + 8 * v59);
LABEL_40:
  unint64_t v63 = (v58 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v64 = v63 + 4;
  if (v63 + 4 > v30)
  {
LABEL_74:
    _NSCoreDataLog(1, @"Corrupted archive (missing property name).", v51, v52, v53, v54, v55, v56, v137);
    a11 = 0;
    unint64_t *v18 = v58;
    return a11;
  }
  unsigned int v65 = *(_DWORD *)(v19 + v63);
  unint64_t v155 = v63 + 4;
  if (!v65)
  {
    unint64_t v58 = v63 + 4;
    goto LABEL_74;
  }
  *(void *)(a11 + 32) = *(id *)(a14 + 8 * bswap32(v65));
  unint64_t v66 = (v63 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v67 = v66 + 4;
  uint64_t v68 = v149;
  if (v66 + 4 <= v30)
  {
    int v69 = *(_DWORD *)(v19 + v66);
    unint64_t v155 = v67;
    unint64_t v64 = v67;
    if (v69)
    {
      int v141 = v36;
      long long v70 = (void *)_newReadPFEncodedArrayFromData(v149, v19, &v155, v30, a16, 0);
      if (!v70)
      {
        if (v20)
        {
          char v26 = (void *)MEMORY[0x1E4F28C58];
          uint64_t v27 = *MEMORY[0x1E4F281F8];
          id v28 = (void *)MEMORY[0x1E4F1C9E8];
          id v29 = @"Can't read property into shell: Can't read validation predicates";
          goto LABEL_36;
        }
        return 0;
      }
      uint64_t v71 = v70;
      unsigned int v143 = v34;
      uint64_t v144 = [v70 count];
      if (v144)
      {
        uint64_t v72 = 0;
        while (1)
        {
          uint64_t v73 = [v71 objectAtIndex:v72];
          unint64_t v154 = 0;
          uint64_t v74 = [MEMORY[0x1E4F1CAD0] setWithObject:objc_opt_class()];
          uint64_t v75 = +[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v74, v73, (uint64_t)&v154);
          if (!v75) {
            break;
          }
          long long v76 = (void *)v75;
          if (!byte_1EB270ABE)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              [v76 allowEvaluation];
            }
          }
          [v71 _replaceObject:v76 atIndex:v72++];
          if (v144 == v72) {
            goto LABEL_52;
          }
        }
        uint64_t v139 = [(id)a11 name];
        _NSCoreDataLog(1, @"Unable to decode validation predicate for property %@ : %@", v121, v122, v123, v124, v125, v126, v139);
        goto LABEL_118;
      }
LABEL_52:
      *(void *)(a11 + 40) = v71;
      long long v150 = 0u;
      long long v151 = 0u;
      long long v152 = 0u;
      long long v153 = 0u;
      uint64_t v77 = [v71 countByEnumeratingWithState:&v150 objects:v156 count:16];
      if (v77)
      {
        uint64_t v78 = v77;
        uint64_t v79 = *(void *)v151;
        do
        {
          for (uint64_t i = 0; i != v78; ++i)
          {
            if (*(void *)v151 != v79) {
              objc_enumerationMutation(v71);
            }
            [*(id *)(*((void *)&v150 + 1) + 8 * i) allowEvaluation];
          }
          uint64_t v78 = [v71 countByEnumeratingWithState:&v150 objects:v156 count:16];
        }
        while (v78);
      }
      uint64_t v81 = _newReadPFEncodedArrayFromData(v149, v19, &v155, v30, v145, a16);
      if (!v81)
      {
        if (v20)
        {
          char v26 = (void *)MEMORY[0x1E4F28C58];
          uint64_t v27 = *MEMORY[0x1E4F281F8];
          id v28 = (void *)MEMORY[0x1E4F1C9E8];
          id v29 = @"Can't read property into shell: Can't read validation warnings";
          goto LABEL_36;
        }
        return 0;
      }
      uint64_t v82 = (void *)v81;
      if (v144)
      {
        for (uint64_t j = 0; v144 != j; ++j)
        {
          uint64_t v84 = (void *)[v82 objectAtIndex:j];
          if (([v84 isNSString] & 1) == 0)
          {
            unint64_t v154 = 0;
            int v85 = (void *)MEMORY[0x1E4F1CAD0];
            uint64_t v86 = objc_opt_class();
            uint64_t v87 = objc_msgSend(v85, "setWithObjects:", v86, objc_opt_class(), 0);
            uint64_t v88 = +[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v87, (uint64_t)v84, (uint64_t)&v154);
            if (!v88)
            {
              uint64_t v140 = [(id)a11 name];
              _NSCoreDataLog(1, @"Unable to decode validation warning for property %@ : %@", v130, v131, v132, v133, v134, v135, v140);
              goto LABEL_118;
            }
            [v82 _replaceObject:v88 atIndex:j];
            unsigned int v34 = v143;
          }
        }
      }
      *(void *)(a11 + 48) = v82;
      unint64_t v64 = v155;
      uint64_t v68 = v149;
      int v36 = v141;
    }
  }
  unint64_t v89 = (v64 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v90 = v89 + 4;
  if (v89 + 4 <= v30)
  {
    int v91 = *(_DWORD *)(v19 + v89);
    unint64_t v155 = v90;
    unint64_t v64 = v90;
    if (v91)
    {
      int v142 = v36;
      long long v92 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone) {
        long long v92 = malloc_default_zone();
      }
      BOOL v93 = 1;
      long long v94 = malloc_type_zone_calloc(v92, 1uLL, 0x28uLL, 0x108004046168151uLL);
      unint64_t v95 = (v155 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v64 = v95 + 4;
      if (v95 + 4 <= v30)
      {
        int v97 = *(_DWORD *)(v19 + v95);
        unint64_t v155 = v95 + 4;
        BOOL v93 = v97 == 0;
        unint64_t v95 = (v95 + 7) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v96 = v95 + 4;
      }
      else
      {
        unint64_t v96 = v95 + 4;
        unint64_t v64 = v155;
      }
      if (v96 <= v30)
      {
        uint64_t v98 = bswap32(*(_DWORD *)(v19 + v95));
        unint64_t v155 = v96;
        unint64_t v64 = v96;
      }
      else
      {
        uint64_t v98 = 0;
      }
      if (v93)
      {
        uint64_t v99 = 0;
      }
      else
      {
        uint64_t v99 = [*(id *)(v145 + 8 * v98) mutableCopy];
        unint64_t v64 = v155;
      }
      void *v94 = v99;
      unint64_t v100 = (v64 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v101 = v100 + 8;
      if (v100 + 8 <= v30)
      {
        unint64_t v102 = bswap64(*(void *)(v19 + v100));
        unint64_t v155 = v100 + 8;
        unint64_t v100 = (v100 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v103 = v100 + 8;
        unint64_t v64 = v101;
      }
      else
      {
        unint64_t v102 = 0;
        unint64_t v103 = v100 + 8;
      }
      v94[1] = v102;
      if (v103 <= v30)
      {
        unint64_t v104 = bswap64(*(void *)(v19 + v100));
        unint64_t v155 = v103;
        unint64_t v64 = v103;
      }
      else
      {
        unint64_t v104 = 0;
      }
      v94[2] = v104;
      atomic_store((unint64_t)v94, (unint64_t *)(a11 + 56));
      *(_WORD *)(a11 + 72) &= ~0x80u;
      int v36 = v142;
    }
  }
  unint64_t v105 = (v64 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v106 = v105 + 4;
  if (v105 + 4 <= v30)
  {
    unsigned int v107 = *(_DWORD *)(v19 + v105);
    unint64_t v155 = v106;
    unint64_t v64 = v106;
    if (v107)
    {
      uint64_t v108 = *(void *)(a16 + 8 * bswap32(v107));
      unint64_t v154 = 0;
      uint64_t v109 = +[_PFRoutines plistClassesForSecureCoding]();
      unint64_t v110 = (void *)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v109, v108, (uint64_t)&v154);
      if (!v110)
      {
        uint64_t v138 = [(id)a11 name];
        _NSCoreDataLog(1, @"Unable to decode userInfo for property %@ : %@", v115, v116, v117, v118, v119, v120, v138);
LABEL_118:
        if (v20) {
          unint64_t *v20 = v154;
        }
        return 0;
      }
      *(void *)(a11 + 64) = v110;
      unint64_t v64 = v155;
    }
  }
  unint64_t v111 = (v64 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v112 = v111 + 4;
  if (v111 + 4 <= v30)
  {
    __int16 v113 = bswap32(*(_DWORD *)(v19 + v111));
    unint64_t v155 = v112;
    unint64_t v64 = v112;
  }
  else
  {
    __int16 v113 = 0;
  }
  *(_WORD *)(a11 + 76) = v113;
  if (v36)
  {
    char v114 = _readRelationshipIntoShellFromBytes(v68, v19, &v155, v30, (void *)a11, v148);
LABEL_98:
    unint64_t *v18 = v155;
    if ((v114 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    switch(v34)
    {
      case 0u:
        char v114 = _readAttributeIntoShellFromBytes(v68, v19, &v155, v30, a11, a14, a16, v145, v20);
        goto LABEL_98;
      case 1u:
        unint64_t v127 = (v64 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v128 = v127 + 4;
        if (v127 + 4 <= v30)
        {
          uint64_t v129 = bswap32(*(_DWORD *)(v19 + v127));
          unint64_t v64 = v128;
        }
        else
        {
          uint64_t v129 = 0;
        }
        *(void *)(a11 + 96) = *(id *)(v147 + 8 * v129);
        break;
      case 3u:
        char v114 = _readExpressionDescriptionIntoShellFromBytes(v68, v19, &v155, v30, (void *)a11, a14, a16, v145, v20);
        goto LABEL_98;
      case 4u:
        char v114 = _readDerivedAttributeIntoShellFromBytes(v68, v19, &v155, v30, a11, a14, a16, v145, v20);
        goto LABEL_98;
      case 5u:
        char v114 = _readCompositeAttributeIntoShellFromBytes(v68, v19, &v155, v30, a11, a14, a16, v145, v20);
        goto LABEL_98;
      default:
        a11 = 0;
        break;
    }
    unint64_t *v18 = v64;
  }
  return a11;
}

unsigned int *_readPFEncodedDataFromData(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v8 = (objc_class *)_readPFEncodedDataFromData_myDataClass;
  if (!_readPFEncodedDataFromData_myDataClass)
  {
    uint64_t v8 = NSClassFromString((NSString *)@"_PFEncodedData");
    _readPFEncodedDataFromData_myDataClass Class = (uint64_t)v8;
  }
  unint64_t v9 = (*a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v9 + 24;
  if (v9 + 24 > a4) {
    return 0;
  }
  uint64_t v12 = (unsigned int *)(a2 + v9);
  *(void *)uint64_t v12 = 0;
  object_setClass(v12, v8);
  *((void *)v12 + 1) = a1;
  uint64_t v13 = bswap32(v12[4]);
  v12[4] = v13;
  unint64_t v14 = v10 + v13;
  *a3 = v14;
  if (v14 <= a4) {
    return v12;
  }
  else {
    return 0;
  }
}

uint64_t _readAttributeIntoShellFromBytes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9)
{
  unint64_t v16 = *a3;
  unint64_t v17 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v17 + 4 <= a4)
  {
    unint64_t v16 = v17 + 4;
    unsigned int v18 = *(_DWORD *)(a2 + v17);
    if (v18)
    {
      unsigned int v19 = bswap32(v18);
      uint64_t v20 = *(void **)(a8 + 8 * v19);
      if (v20)
      {
        if ([*(id *)(a8 + 8 * v19) isEqualToString:@"NSSecureUnarchiveFromDataTransformerName"])id v21 = (id)objc_msgSend((id)*MEMORY[0x1E4F288C0], "copy"); {
        else
        }
          id v21 = v20;
      }
      else
      {
        id v21 = 0;
      }
      *(void *)(a5 + 96) = v21;
    }
  }
  unint64_t v22 = (v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v23 = v22 + 4;
  if (v22 + 4 <= a4)
  {
    __int16 v24 = bswap32(*(_DWORD *)(a2 + v22));
    unint64_t v22 = (v22 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v25 = v22 + 4;
    unint64_t v16 = v23;
  }
  else
  {
    __int16 v24 = 0;
    unint64_t v25 = v22 + 4;
  }
  *(_WORD *)(a5 + 80) = v24;
  if (v25 <= a4)
  {
    unsigned int v26 = *(_DWORD *)(a2 + v22);
    if (v26) {
      *(void *)(a5 + 104) = *(id *)(a6 + 8 * bswap32(v26));
    }
    unint64_t v16 = v25;
  }
  unint64_t v27 = (v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v28 = v27 + 4;
  if (v27 + 4 > a4)
  {
LABEL_55:
    unint64_t v51 = (v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v52 = v51 + 4;
    if (v51 + 4 > a4)
    {
LABEL_65:
      *a3 = v16;
      return 1;
    }
    char v53 = bswap32(*(_DWORD *)(a2 + v51));
    if (v53)
    {
      *(_WORD *)(a5 + 72) |= 0x200u;
      if ((v53 & 2) == 0)
      {
LABEL_58:
        if ((v53 & 4) == 0) {
          goto LABEL_59;
        }
        goto LABEL_68;
      }
    }
    else if ((v53 & 2) == 0)
    {
      goto LABEL_58;
    }
    *(_WORD *)(a5 + 72) |= 0x400u;
    if ((v53 & 4) == 0)
    {
LABEL_59:
      if ((v53 & 8) == 0) {
        goto LABEL_60;
      }
      goto LABEL_69;
    }
LABEL_68:
    *(_WORD *)(a5 + 72) |= 0x800u;
    if ((v53 & 8) == 0)
    {
LABEL_60:
      if ((v53 & 0x10) == 0) {
        goto LABEL_61;
      }
      goto LABEL_70;
    }
LABEL_69:
    *(_WORD *)(a5 + 72) |= 0x2000u;
    if ((v53 & 0x10) == 0)
    {
LABEL_61:
      if ((v53 & 0x20) == 0) {
        goto LABEL_62;
      }
      goto LABEL_71;
    }
LABEL_70:
    *(_WORD *)(a5 + 72) |= 0x1000u;
    if ((v53 & 0x20) == 0)
    {
LABEL_62:
      if ((v53 & 0x40) == 0)
      {
LABEL_64:
        unint64_t v16 = v52;
        goto LABEL_65;
      }
LABEL_63:
      *(_WORD *)(a5 + 72) |= 0x8000u;
      goto LABEL_64;
    }
LABEL_71:
    *(_WORD *)(a5 + 72) |= 0x4000u;
    if ((v53 & 0x40) == 0) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (!*(_DWORD *)(a2 + v27))
  {
LABEL_54:
    unint64_t v16 = v28;
    goto LABEL_55;
  }
  unsigned int v29 = *(unsigned __int16 *)(a5 + 80);
  if (v29 <= 0x1F3)
  {
    if (*(unsigned __int16 *)(a5 + 80) > 0x12Bu)
    {
      if (v29 != 300)
      {
        if (v29 == 400)
        {
          unint64_t v40 = (v27 + 7) & 0xFFFFFFFFFFFFFFFCLL;
          if (v40 + 4 <= a4)
          {
            uint64_t v41 = bswap32(*(_DWORD *)(a2 + v40));
            unint64_t v28 = v40 + 4;
          }
          else
          {
            uint64_t v41 = 0;
          }
          CFNumberRef v50 = (CFNumberRef)[objc_alloc(MEMORY[0x1E4F28C28]) initWithString:*(void *)(a6 + 8 * v41)];
          goto LABEL_53;
        }
        goto LABEL_44;
      }
      unint64_t v45 = (v27 + 11) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v46 = v45 + 8;
      if (v45 + 8 <= a4)
      {
        unint64_t v47 = bswap64(*(void *)(a2 + v45));
        unint64_t v28 = v46;
      }
      else
      {
        unint64_t v47 = 0;
      }
      unint64_t valuePtr = v47;
      CFNumberType v42 = kCFNumberLongLongType;
LABEL_52:
      CFNumberRef v50 = CFNumberCreate(0, v42, &valuePtr);
LABEL_53:
      *(void *)(a5 + 112) = v50;
      goto LABEL_54;
    }
    if (v29 != 100 && v29 != 200) {
      goto LABEL_44;
    }
LABEL_28:
    unint64_t v33 = (v27 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v34 = v33 + 4;
    if (v33 + 4 <= a4)
    {
      unsigned int v35 = bswap32(*(_DWORD *)(a2 + v33));
      unint64_t v28 = v34;
    }
    else
    {
      unsigned int v35 = 0;
    }
    LODWORD(valuePtr) = v35;
    CFNumberType v42 = kCFNumberIntType;
    goto LABEL_52;
  }
  if (*(unsigned __int16 *)(a5 + 80) <= 0x2BBu)
  {
    if (v29 != 500)
    {
      if (v29 == 600)
      {
        unint64_t v36 = (v27 + 7) & 0xFFFFFFFFFFFFFFFCLL;
        unsigned int v37 = bswap32(*(_DWORD *)(a2 + v36));
        id v38 = objc_alloc(NSNumber);
        LODWORD(v39) = v37;
        *(void *)(a5 + 112) = [v38 initWithFloat:v39];
        unint64_t v16 = v36 + 4;
        goto LABEL_55;
      }
      goto LABEL_44;
    }
    unint64_t v43 = (v27 + 11) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v44 = [objc_alloc(NSNumber) initWithDouble:COERCE_DOUBLE(bswap64(*(void *)(a2 + v43)))];
LABEL_41:
    *(void *)(a5 + 112) = v44;
    unint64_t v16 = v43 + 8;
    goto LABEL_55;
  }
  switch(v29)
  {
    case 0x384u:
      unint64_t v43 = (v27 + 11) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v44 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:COERCE_DOUBLE(bswap64(*(void *)(a2 + v43)))];
      goto LABEL_41;
    case 0x320u:
      goto LABEL_28;
    case 0x2BCu:
      unint64_t v30 = (v27 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v31 = v30 + 4;
      if (v30 + 4 <= a4)
      {
        uint64_t v32 = bswap32(*(_DWORD *)(a2 + v30));
        unint64_t v28 = v31;
      }
      else
      {
        uint64_t v32 = 0;
      }
      CFNumberRef v50 = (CFNumberRef)*(id *)(a8 + 8 * v32);
      goto LABEL_53;
  }
LABEL_44:
  unint64_t v48 = (v27 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  if (v48 + 4 <= a4)
  {
    uint64_t v49 = bswap32(*(_DWORD *)(a2 + v48));
    unint64_t v28 = v48 + 4;
  }
  else
  {
    uint64_t v49 = 0;
  }
  unint64_t valuePtr = 0;
  uint64_t v55 = +[_PFRoutines attributeClassesForSecureCoding]();
  uint64_t v56 = (void *)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v55, *(void *)(a7 + 8 * v49), (uint64_t)&valuePtr);
  if (v56)
  {
    CFNumberRef v50 = v56;
    goto LABEL_53;
  }
  uint64_t v57 = [(id)a5 name];
  _NSCoreDataLog(1, @"Error decoding default value for %@ : %@", v58, v59, v60, v61, v62, v63, v57);
  if (a9) {
    *a9 = valuePtr;
  }
  return 0;
}

uint64_t _newReadKKDMappingStrategyFromByes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = (*a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((v5 | 4) > a4) {
    return 0;
  }
  unint64_t v10 = (objc_class *)_newReadKKDMappingStrategyFromByes_myKnownKeysMappingStrategy;
  if (!_newReadKKDMappingStrategyFromByes_myKnownKeysMappingStrategy)
  {
    unint64_t v10 = NSClassFromString((NSString *)@"NSKnownKeysMappingStrategy2");
    _newReadKKDMappingStrategyFromByes_myKnownKeysMappingStrategy = (uint64_t)v10;
  }
  *(void *)(a2 + v5) = 0;
  object_setClass((id)(a2 + v5), v10);
  unint64_t v15 = v5 + 8;
  if (v5 + 8 > a4) {
    unint64_t v15 = v5;
  }
  if (v15 + 8 <= a4) {
    v15 += 8;
  }
  if (v15 + 8 <= a4) {
    v15 += 8;
  }
  if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= a4) {
    unint64_t v15 = ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= a4) {
    unint64_t v16 = ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v16 = v15;
  }
  unint64_t v17 = (v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v18 = v17 + 4;
  if (v17 + 4 <= a4)
  {
    uint64_t v19 = bswap32(*(_DWORD *)(a2 + v17));
    unint64_t v17 = (v17 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v20 = v17 + 4;
  }
  else
  {
    uint64_t v19 = 0;
    unint64_t v20 = v17 + 4;
    unint64_t v18 = v16;
  }
  if (v20 > a4)
  {
    LODWORD(v17) = 0;
    id v21 = (void **)(a2 + v18);
    uint64_t v22 = 0xFFFFFFFFLL;
    goto LABEL_29;
  }
  LODWORD(v17) = *(_DWORD *)(a2 + v17);
  id v21 = (void **)(a2 + v20);
  if (!v17)
  {
    uint64_t v22 = 0xFFFFFFFFLL;
LABEL_28:
    unint64_t v18 = v20;
LABEL_29:
    uint64_t v25 = 0;
    unint64_t v20 = v18;
    while (1)
    {
      unint64_t v26 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v26 + 16 > a4) {
        break;
      }
      uint64_t v27 = a2 + v26;
      if ((v26 | 4) <= a4)
      {
        unsigned int v28 = bswap32(*(_DWORD *)v27);
        v26 |= 4uLL;
      }
      else
      {
        unsigned int v28 = 0;
      }
      unint64_t v29 = v28 & 0xFFFFE000 | ((unint64_t)*(unsigned int *)(v27 + 4) << 32) | v28 & 0x1FF8 | (unint64_t)(v28 & 7);
      *(void *)uint64_t v27 = v29;
      unint64_t v30 = (v26 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v31 = v30 + 4;
      if (v30 + 4 <= a4)
      {
        unint64_t v32 = (unint64_t)bswap32(*(_DWORD *)(a2 + v30)) << 32;
        unint64_t v26 = v31;
      }
      else
      {
        unint64_t v32 = 0;
      }
      *(void *)uint64_t v27 = v32 | v29;
      unint64_t v33 = (v26 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v34 = v33 + 2;
      if (v33 + 2 <= a4)
      {
        unsigned int v35 = bswap32(*(unsigned __int16 *)(a2 + v33)) >> 16;
        unint64_t v33 = (v33 + 3) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v36 = v33 + 2;
        unint64_t v26 = v34;
      }
      else
      {
        unsigned int v35 = 0;
        unint64_t v36 = v33 + 2;
      }
      *(_WORD *)(v27 + 8) = v35;
      if (v36 <= a4)
      {
        unsigned int v37 = bswap32(*(unsigned __int16 *)(a2 + v33)) >> 16;
        unint64_t v33 = (v36 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v38 = v33 + 2;
        unint64_t v26 = v36;
      }
      else
      {
        LOWORD(v37) = 0;
        unint64_t v38 = v36;
      }
      *(_WORD *)(v27 + 10) = v37;
      if (v38 <= a4)
      {
        unsigned int v39 = bswap32(*(unsigned __int16 *)(a2 + v33)) >> 16;
        unint64_t v33 = (v38 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v40 = v33 + 2;
        unint64_t v26 = v38;
      }
      else
      {
        unsigned int v39 = 0;
        unint64_t v40 = v38;
      }
      *(_WORD *)(v27 + 12) = v39;
      if (v40 <= a4)
      {
        unsigned int v41 = bswap32(*(unsigned __int16 *)(a2 + v33)) >> 16;
        unint64_t v26 = v40;
      }
      else
      {
        LOWORD(v41) = 0;
      }
      *(_WORD *)(v27 + 14) = v41;
      BOOL v42 = __OFSUB__(v39, v35);
      int v43 = v39 - v35;
      int v44 = v43 < 0 != v42 ? -1 : v43;
      uint64_t v45 = (v44 + 1);
      uint64_t v46 = (2 * v45);
      if (v20 + v46 > a4) {
        break;
      }
      if (v43 < 0)
      {
        unint64_t v20 = v26;
      }
      else
      {
        if (v45)
        {
          unint64_t v47 = (_WORD *)(v27 + 16);
          do
          {
            *unint64_t v47 = bswap32((unsigned __int16)*v47) >> 16;
            ++v47;
            --v45;
          }
          while (v45);
        }
        unint64_t v20 = v26 + v46;
      }
      v21[v25++] = (void *)v27;
      if (v25 == v22) {
        goto LABEL_60;
      }
    }
    uint64_t v55 = @"Corrupted archive (failed to read row).";
LABEL_71:
    _NSCoreDataLog(1, (uint64_t)v55, v11, v19, (uint64_t)v21, v12, v13, v14, v66);
    return 0;
  }
  unint64_t v17 = bswap32(v17);
  unint64_t v23 = v17;
  do
  {
    unint64_t v24 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v24 + 8 <= a4)
    {
      unint64_t v20 = v24 + 8;
      if (*(void *)(a2 + v24))
      {
        uint64_t v55 = @"Corrupted archive (unexpected data in pointer space).";
        goto LABEL_71;
      }
    }
    --v23;
  }
  while (v23);
  uint64_t v22 = (v17 - 1);
  if (v17 != 1) {
    goto LABEL_28;
  }
  uint64_t v22 = 0;
  LODWORD(v17) = 1;
LABEL_60:
  if (a2 && v17) {
    v21[v22] = 0;
  }
  unint64_t v48 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v49 = a2 + v48;
  if (v19)
  {
    CFNumberRef v50 = (void *)(a2 + v48);
    uint64_t v51 = v19;
    do
    {
      unint64_t v52 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v53 = v52 + 8;
      if (v52 + 8 <= a4)
      {
        unint64_t v54 = bswap64(*(void *)(a2 + v52));
        unint64_t v20 = v53;
      }
      else
      {
        unint64_t v54 = 0;
      }
      *v50++ = *(void *)(a5 + 8 * v54);
      --v51;
    }
    while (v51);
    *a3 = v20;
  }
  else
  {
    *a3 = v20;
    if (!a2) {
      goto LABEL_78;
    }
  }
  uint64_t v57 = *v21;
  if (*v21)
  {
    uint64_t v58 = v21 + 1;
    while ((*v57 & 7) == 1)
    {
      uint64_t v59 = (void *)*v58++;
      uint64_t v57 = v59;
      if (!v59) {
        goto LABEL_78;
      }
    }
    unint64_t v67 = descriptionForBranchRow((uint64_t)v57, 0xFFFFFFFFLL);
    _NSCoreDataLog(1, @"Corrupted branch row in optimized model detected:\n\t%@", v60, v61, v62, v63, v64, v65, (uint64_t)v67);
    return 0;
  }
LABEL_78:

  return objc_msgSend((id)(a2 + v5), "_setupForKeys:count:table:inData:", v49);
}

uint64_t _readRelationshipIntoShellFromBytes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, void *a5, uint64_t a6)
{
  unint64_t v10 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v11 = v10 + 4;
  if (v10 + 4 <= a4)
  {
    uint64_t v12 = bswap32(*(_DWORD *)(a2 + v10));
    unint64_t v10 = (v10 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v13 = v10 + 4;
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = v10 + 4;
    unint64_t v11 = *a3;
  }
  a5[12] = *(void *)(a6 + 8 * v12);
  if (v13 <= a4)
  {
    if (*(_DWORD *)(a2 + v10))
    {
      unint64_t v14 = (v10 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      if (v14 + 4 <= a4)
      {
        uint64_t v15 = bswap32(*(_DWORD *)(a2 + v14));
        unint64_t v13 = v14 + 4;
      }
      else
      {
        uint64_t v15 = 0;
      }
      a5[14] = (id)[NSNumber numberWithUnsignedInteger:v15];
    }
    unint64_t v11 = v13;
  }
  unint64_t v16 = (v11 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v16 + 4;
  if (v16 + 4 <= a4)
  {
    uint64_t v18 = bswap32(*(_DWORD *)(a2 + v16));
    unint64_t v16 = (v16 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v19 = v16 + 4;
    unint64_t v11 = v17;
  }
  else
  {
    uint64_t v18 = 0;
    unint64_t v19 = v16 + 4;
  }
  a5[16] = v18;
  if (v19 <= a4)
  {
    uint64_t v20 = bswap32(*(_DWORD *)(a2 + v16));
    unint64_t v16 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v21 = v16 + 4;
    unint64_t v11 = v19;
  }
  else
  {
    uint64_t v20 = 0;
    unint64_t v21 = v19;
  }
  a5[17] = v20;
  if (v21 <= a4)
  {
    uint64_t v22 = bswap32(*(_DWORD *)(a2 + v16));
    unint64_t v11 = v21;
  }
  else
  {
    uint64_t v22 = 0;
  }
  a5[18] = v22;
  *a3 = v11;
  return 1;
}

BOOL _readExpressionDescriptionIntoShellFromBytes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  unint64_t v11 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 + 4;
  if (v11 + 4 <= a4)
  {
    uint64_t v13 = bswap32(*(_DWORD *)(a2 + v11));
    unint64_t v11 = (v11 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v14 = v11 + 4;
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = v11 + 4;
    unint64_t v12 = *a3;
  }
  a5[20] = v13;
  if (v14 <= a4)
  {
    uint64_t v15 = bswap32(*(_DWORD *)(a2 + v11));
    unint64_t v12 = v14;
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void *)(a7 + 8 * v15);
  uint64_t v30 = 0;
  unint64_t v17 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v18 = objc_opt_class();
  uint64_t v19 = objc_msgSend(v17, "setWithObjects:", v18, objc_opt_class(), 0);
  uint64_t v20 = (void *)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v19, v16, (uint64_t)&v30);
  unint64_t v21 = v20;
  if (v20)
  {
    a5[19] = v20;
    *a3 = v12;
  }
  else
  {
    uint64_t v22 = [a5 name];
    _NSCoreDataLog(1, @"Unable to decode expression for expression description %@ : %@", v23, v24, v25, v26, v27, v28, v22);
    if (a9) {
      *a9 = v30;
    }
  }
  return v21 != 0;
}

uint64_t _readDerivedAttributeIntoShellFromBytes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9)
{
  uint64_t AttributeIntoShellFromBytes = _readAttributeIntoShellFromBytes(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (AttributeIntoShellFromBytes)
  {
    unint64_t v15 = *a3;
    unint64_t v16 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v17 = v16 + 4;
    if (v16 + 4 <= a4)
    {
      unsigned int v18 = *(_DWORD *)(a2 + v16);
      if (v18)
      {
        uint64_t v30 = *(void *)(a7 + 8 * bswap32(v18));
        uint64_t v19 = (void *)MEMORY[0x1E4F1CAD0];
        uint64_t v20 = objc_opt_class();
        uint64_t v21 = objc_msgSend(v19, "setWithObjects:", v20, objc_opt_class(), 0);
        *(void *)(a5 + 120) = (id)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v21, v30, (uint64_t)a9);
      }
      unint64_t v15 = v17;
    }
    unint64_t v22 = (v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v23 = v22 + 4;
    if (v22 + 4 <= a4)
    {
      unsigned int v24 = *(_DWORD *)(a2 + v22);
      if (v24)
      {
        uint64_t v25 = *(void *)(a7 + 8 * bswap32(v24));
        uint64_t v26 = (void *)MEMORY[0x1E4F1CAD0];
        uint64_t v27 = objc_opt_class();
        uint64_t v28 = objc_msgSend(v26, "setWithObjects:", v27, objc_opt_class(), 0);
        *(void *)(a5 + 128) = (id)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v28, v25, (uint64_t)a9);
      }
      unint64_t v15 = v23;
    }
    *a3 = v15;
  }
  return AttributeIntoShellFromBytes;
}

void sub_18AC0C6C4(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AC0C488);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t _PFLogGetErrorLog()
{
  if (qword_1EB2704B8 != -1) {
    dispatch_once(&qword_1EB2704B8, &__block_literal_global);
  }
  return __pflogFaultLog;
}

void sub_18AC112D0(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18AC112E4(_Unwind_Exception *a1)
{
}

void sub_18AC11540(_Unwind_Exception *a1)
{
}

void sub_18AC11560(void *a1)
{
}

void sub_18AC12928()
{
}

void sub_18AC129B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC12984);
  }
  _Unwind_Resume(a1);
}

void sub_18AC129D8(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18AC129E0);
  }
  _Unwind_Resume(a1);
}

void sub_18AC129E8(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AC129F4);
}

void sub_18AC13BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void *_svfk_5(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 5uLL);
}

id static NSManagedObjectContext.didSaveObjectsNotification.getter()
{
  return static NSManagedObjectContext.willSaveObjectsNotification.getter(&one-time initialization token for didSaveObjectsNotification, (void **)&static NSManagedObjectContext.didSaveObjectsNotification);
}

void *_svfk_6(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 6uLL);
}

void _NSCoreDataStringCompareWithFlags(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (a2 == 5)
  {
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    unint64_t v5 = sqlite3_value_text(*a3);
    uint64_t v6 = sqlite3_value_text(a3[1]);
    if (v5 && (uint64_t v7 = (const char *)v6) != 0)
    {
      CFAllocatorRef v8 = _PFStackAllocatorCreate((unint64_t *)&v23, 1024);
      int v9 = sqlite3_value_int(a3[2]);
      int v10 = sqlite3_value_int(a3[3]);
      int v11 = sqlite3_value_int(a3[4]);
      size_t v12 = strlen((const char *)v5);
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
      CFStringRef v14 = CFStringCreateWithBytesNoCopy(v8, v5, v12, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
      size_t v15 = strlen(v7);
      CFStringRef v16 = CFStringCreateWithBytesNoCopy(v8, (const UInt8 *)v7, v15, 0x8000100u, 0, v13);
      if (v11) {
        CFLocaleRef v17 = (const __CFLocale *)[MEMORY[0x1E4F28F60] retainedLocale];
      }
      else {
        CFLocaleRef v17 = 0;
      }
      v57.length = CFStringGetLength(v14);
      v57.location = 0;
      CFComparisonResult v18 = CFStringCompareWithOptionsAndLocale(v14, v16, v57, v10, v17);
      switch(v9)
      {
        case 1:
          BOOL v19 = v18 == kCFCompareLessThan;
          goto LABEL_24;
        case 2:
          BOOL v22 = (unint64_t)(v18 + 1) >= 2;
          goto LABEL_20;
        case 3:
          BOOL v19 = v18 == kCFCompareEqualTo;
          goto LABEL_24;
        case 4:
          BOOL v22 = (unint64_t)v18 >= 2;
LABEL_20:
          BOOL v21 = !v22;
          goto LABEL_28;
        case 5:
          BOOL v19 = v18 == kCFCompareGreaterThan;
LABEL_24:
          BOOL v21 = v19;
          goto LABEL_28;
        case 6:
          BOOL v21 = v18 != kCFCompareEqualTo;
LABEL_28:
          int v20 = 1;
          if (v17) {
            goto LABEL_29;
          }
          goto LABEL_30;
        default:
          sqlite3_result_error(a1, "NSCoreDataStringCompare: unknown operation type", 1);
          int v20 = 0;
          BOOL v21 = 0;
          if (!v17) {
            goto LABEL_30;
          }
LABEL_29:
          CFRelease(v17);
LABEL_30:
          if (*((void *)&v24 + 1))
          {
            if (v14) {
              CFRelease(v14);
            }
            if (v16) {
              CFRelease(v16);
            }
            if (v20) {
              goto LABEL_36;
            }
          }
          else
          {
            *((void *)&v23 + 1) = v23;
            if (v20)
            {
LABEL_36:
              sqlite3_result_int(a1, v21);
              return;
            }
          }
          break;
      }
    }
    else
    {
      sqlite3_result_int(a1, 0);
    }
  }
  else
  {
    sqlite3_result_error(a1, "NSCoreDataStringCompare: incorrect number of arguments", 1);
  }
}

void sub_18AC178DC(_Unwind_Exception *a1)
{
}

void sub_18AC178FC(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AC17920);
}

void sub_18AC17904(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18AC1790CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18AC199E8(void *a1)
{
}

void *_executeCountRequest(uint64_t a1)
{
  if (a1) {
    id v2 = *(void **)(a1 + 24);
  }
  else {
    id v2 = 0;
  }
  id v3 = (void *)[(id)a1 request];
  id v4 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) < 1) {
    double Current = 0.0;
  }
  else {
    double Current = CFAbsoluteTimeGetCurrent();
  }
  uint64_t v6 = [[NSSQLColumn alloc] initWithColumnName:@"COUNT(*)" sqlType:1];
  id v7 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", v6, 0);

  -[NSSQLiteConnection setColumnsToFetch:](v2, v7);
  CFAllocatorRef v8 = (unsigned char *)[(id)a1 fetchStatement];
  int v9 = -[NSSQLiteConnection selectCountWithStatement:]((uint64_t)v2, v8);
  -[NSSQLiteConnection setColumnsToFetch:](v2, v7);
  if (v9)
  {
    int v10 = -[NSSQLiteConnection newFetchedArray]((uint64_t)v2);
    unint64_t v11 = [v3 fetchLimit];
    unsigned int v12 = objc_msgSend((id)objc_msgSend(v10, "objectAtIndex:", 0), "unsignedIntValue");
    if (v11 && v11 < v12)
    {

      CFAllocatorRef v13 = (void *)[objc_alloc(NSNumber) initWithUnsignedLong:v11];
      int v10 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", v13, 0);
    }
  }
  else
  {
    CFStringRef v14 = (void *)[objc_alloc(NSNumber) initWithInt:0];
    int v10 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", v14, 0);
  }
  if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) >= 1)
  {
    objc_msgSend((id)objc_msgSend(v10, "objectAtIndex:", 0), "unsignedIntValue");
    if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) >= 2) {
      _NSCoreDataLog(4, @"count using %@ returned %d", v15, v16, v17, v18, v19, v20, (uint64_t)v8);
    }
    if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) >= 2)
    {
      if ((v9 & 1) == 0) {
        _NSCoreDataLog(4, @"logically false count request %@ short circuits.", v21, v22, v23, v24, v25, v26, (uint64_t)v3);
      }
      _NSCoreDataLog(4, @"count request %@ returned %d", v21, v22, v23, v24, v25, v26, (uint64_t)v3);
    }
    double v27 = 0.0;
    if (v9) {
      double v27 = CFAbsoluteTimeGetCurrent() - Current;
    }
    long long v28 = @"total count request execution time: %.4fs for count of %d.";
    if (a1 && *(unsigned char *)(a1 + 80)) {
      long long v28 = @"total count request execution time: \x1B[31m%.4f\x1B[0ms for count of %d.";
    }
    _NSCoreDataLog(4, (uint64_t)v28, v21, v22, v23, v24, v25, v26, *(uint64_t *)&v27);
  }
  -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v2, 0);
  [v4 drain];
  id v29 = v10;
  return v10;
}

void sub_18AC19D84()
{
}

void sub_18AC19E08()
{
}

void sub_18AC1A1E0(_Unwind_Exception *a1)
{
}

void sub_18AC1B558(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exception_object);
      JUMPOUT(0x18AC1B3B8);
    }
    id v2 = objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AC1B65C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC1B630);
  }
  JUMPOUT(0x18AC1B670);
}

id _prefetchForFetchRequest(void *a1, void *a2, void *a3)
{
  uint64_t v322 = *MEMORY[0x1E4F143B8];
  id result = (id)[a1 count];
  if (result)
  {
    uint64_t v6 = (void *)[a3 request];
    id result = (id)[v6 relationshipKeyPathsForPrefetching];
    if (a2
      || (size_t v204 = result) != 0
      && (id result = (id)[result count]) != 0
      && (id result = +[_PFRoutines _coalescedPrefetchKeypaths:]((uint64_t)_PFRoutines, v204),
          (a2 = result) != 0))
    {
      uint64_t v253 = (uint64_t)a3;
      id v205 = objc_alloc_init(MEMORY[0x1E4F28B28]);
      unint64_t v215 = (void *)[v6 entity];
      long long v277 = 0u;
      long long v278 = 0u;
      long long v279 = 0u;
      long long v280 = 0u;
      obuint64_t j = a2;
      uint64_t v208 = [a2 countByEnumeratingWithState:&v277 objects:v308 count:16];
      if (!v208) {
        return (id)[v205 drain];
      }
      uint64_t v206 = *(void *)v278;
LABEL_5:
      uint64_t v210 = 0;
      while (1)
      {
        if (*(void *)v278 != v206) {
          objc_enumerationMutation(obj);
        }
        uint64_t v220 = *(void *)(*((void *)&v277 + 1) + 8 * v210);
        unint64_t v207 = (void *)MEMORY[0x18C127630]();
        id v7 = (void *)[obj objectForKey:v220];
        CFAllocatorRef v8 = [v7 count] ? v7 : 0;
        unint64_t v211 = v8;
        id v221 = (id)[MEMORY[0x1E4F1CA60] dictionary];
        if (objc_msgSend((id)objc_msgSend(v215, "relationshipsByName"), "objectForKey:", v220)) {
          break;
        }
        if (objc_msgSend((id)objc_msgSend(v215, "subentitiesByName"), "count"))
        {
          id v255 = (id)objc_msgSend((id)objc_msgSend(v215, "subentities"), "mutableCopy");
          id v258 = (id)[MEMORY[0x1E4F1CA48] array];
          while ([v255 count])
          {
            int v9 = (void *)[v255 objectAtIndex:0];
            [v255 removeObjectAtIndex:0];
            if (objc_msgSend((id)objc_msgSend(v9, "relationshipsByName"), "objectForKey:", v220))
            {
              [v258 addObject:v9];
            }
            else if (objc_msgSend((id)objc_msgSend(v9, "subentitiesByName"), "count"))
            {
              objc_msgSend(v255, "addObjectsFromArray:", objc_msgSend(v9, "subentities"));
            }
          }
          if ([v258 count])
          {
            long long v275 = 0u;
            long long v276 = 0u;
            long long v273 = 0u;
            long long v274 = 0u;
            uint64_t v263 = [v258 countByEnumeratingWithState:&v273 objects:v307 count:16];
            if (v263)
            {
              int v10 = 0;
              uint64_t v260 = *(void *)v274;
              do
              {
                for (uint64_t i = 0; i != v263; ++i)
                {
                  if (*(void *)v274 != v260) {
                    objc_enumerationMutation(v258);
                  }
                  unsigned int v12 = *(void **)(*((void *)&v273 + 1) + 8 * i);
                  id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                  long long v271 = 0u;
                  long long v272 = 0u;
                  long long v269 = 0u;
                  long long v270 = 0u;
                  uint64_t v14 = [a1 countByEnumeratingWithState:&v269 objects:v306 count:16];
                  if (v14)
                  {
                    uint64_t v15 = *(void *)v270;
                    do
                    {
                      for (uint64_t j = 0; j != v14; ++j)
                      {
                        if (*(void *)v270 != v15) {
                          objc_enumerationMutation(a1);
                        }
                        uint64_t v17 = *(void **)(*((void *)&v269 + 1) + 8 * j);
                        uint64_t v18 = (void *)[v17 entity];
                        uint64_t v19 = v18;
                        BOOL v20 = v18 == v12 || v18 == v10;
                        if (v20 || [v18 isKindOfEntity:v12])
                        {
                          [v13 addObject:v17];
                          if (v19 != v12) {
                            int v10 = v19;
                          }
                        }
                      }
                      uint64_t v14 = [a1 countByEnumeratingWithState:&v269 objects:v306 count:16];
                    }
                    while (v14);
                  }
                  if ([v13 count]) {
                    objc_msgSend(v221, "setObject:forKey:", v13, objc_msgSend(v12, "name"));
                  }
                }
                uint64_t v263 = [v258 countByEnumeratingWithState:&v273 objects:v307 count:16];
              }
              while (v263);
            }
          }

LABEL_45:
          if ([v221 count])
          {
            long long v267 = 0u;
            long long v268 = 0u;
            long long v265 = 0u;
            long long v266 = 0u;
            uint64_t v214 = [v221 countByEnumeratingWithState:&v265 objects:v305 count:16];
            if (v214)
            {
              uint64_t v212 = *(void *)v266;
              do
              {
                uint64_t v224 = 0;
                do
                {
                  if (*(void *)v266 != v212) {
                    objc_enumerationMutation(v221);
                  }
                  uint64_t v21 = *(void *)(*((void *)&v265 + 1) + 8 * v224);
                  v240 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v215, "managedObjectModel"), "entitiesByName"), "objectForKey:", v21);
                  id v247 = (id)[v221 objectForKey:v21];
                  if (v253)
                  {
                    uint64_t v22 = *(void **)(v253 + 32);
                    uint64_t v23 = *(void **)(v253 + 8);
                  }
                  else
                  {
                    uint64_t v22 = 0;
                    uint64_t v23 = 0;
                  }
                  uint64_t v235 = _sqlCoreLookupSQLEntityForEntityDescription(v23, v240);
                  if (!v235) {
                    goto LABEL_357;
                  }
                  uint64_t v256 = (unsigned __int8 *)[*(id *)(v235 + 40) objectForKey:v220];
                  if (!v256) {
                    goto LABEL_357;
                  }
                  if (v253) {
                    id v259 = *(id *)(v253 + 128);
                  }
                  else {
                    id v259 = 0;
                  }
                  id v261 = -[NSEntityDescription _relationshipNamed:](v240, v220);
                  int v231 = [v256 isToMany];
                  int v254 = [v261 isOrdered];
                  uint64_t v229 = *((void *)v256 + 7);
                  if (objc_msgSend((id)objc_msgSend((id)v253, "request"), "resultType")) {
                    int v264 = 0;
                  }
                  else {
                    int v264 = objc_msgSend((id)objc_msgSend((id)v253, "request"), "returnsObjectsAsFaults") ^ 1;
                  }
                  int v213 = *(_DWORD *)(*(void *)(v253 + 136) + 72);
                  uint64_t v227 = (void *)[MEMORY[0x1E4F1CA80] set];
                  if (![v261 inverseRelationship]
                    && [v261 isToMany]
                    && (objc_msgSend((id)objc_msgSend((id)v235, "entityDescription"), "superentity")
                     || objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)v235, "entityDescription"), "subentities"), "count")))
                  {
                    id v247 = (id)[v247 sortedArrayUsingComparator:&__block_literal_global_322];
                    int v218 = 1;
                  }
                  else
                  {
                    int v218 = 0;
                  }
                  double Current = CFAbsoluteTimeGetCurrent();
                  if ((v231 & 1) != 0 || v256[24] == 9) {
                    [v227 addObjectsFromArray:v247];
                  }
                  if (v229 && *(unsigned char *)(v229 + 24) == 7)
                  {
                    unsigned int v222 = objc_msgSend((id)objc_msgSend((id)v229, "foreignKey"), "slot");
                    if ((v231 & v254) == 1) {
                      unsigned int v233 = [*(id *)(v229 + 80) slot];
                    }
                    else {
                      unsigned int v233 = -1;
                    }
                    uint64_t v217 = [(id)v253 inverseIsToOnePrefetchRequestForRelationshipNamed:v220 onEntity:v240];
                    *(void *)&long long v318 = @"destinations";
                    v317[0] = [MEMORY[0x1E4F28C68] expressionForConstantValue:v247];
                    long long v34 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v317 forKeys:&v318 count:1];
                    goto LABEL_132;
                  }
                  int v25 = v256[24];
                  if (v25 != 7)
                  {
                    if (v25 != 9) {
                      goto LABEL_357;
                    }
                    uint64_t v26 = [v247 objectAtIndex:0];
                    double v27 = objc_msgSend(objc_alloc(MEMORY[0x1E4F28DA0]), "initWithObject:", objc_msgSend(*((id *)v256 + 7), "name"));
                    long long v28 = (void *)[objc_alloc(MEMORY[0x1E4F28D98]) initWithKeyPath:v27];

                    id v29 = (void *)[objc_alloc(MEMORY[0x1E4F28BC0]) initWithObject:v26];
                    long long v30 = (void *)[objc_alloc(MEMORY[0x1E4F28B98]) initWithLeftExpression:v29 rightExpression:v28 modifier:0 type:10 options:0];

                    long long v31 = objc_alloc_init(NSFetchRequest);
                    -[NSFetchRequest setEntity:](v31, "setEntity:", objc_msgSend((id)objc_msgSend(v256, "destinationEntity"), "entityDescription"));
                    [(NSFetchRequest *)v31 setPredicate:v30];

                    long long v32 = v31;
                    if (v254)
                    {
                      if (*((unsigned __int8 **)v256 + 7) == v256) {
                        long long v33 = (__CFString *)*((void *)v256 + 10);
                      }
                      else {
                        long long v33 = -[NSSQLManyToMany inverseOrderColumnName]((__CFString *)v256);
                      }
                    }
                    else
                    {
                      long long v33 = 0;
                    }
                    long long v51 = (void *)[(id)v253 createChildContextForNestedFetchRequest:v31];
                    -[NSSQLStoreRequestContext setConnection:]((uint64_t)v51, *(void **)(v253 + 24));
                    id v251 = _newObjectIDSetsForRequest(v51, v247, (uint64_t)v33);
                    -[NSSQLStoreRequestContext setConnection:]((uint64_t)v51, 0);

                    if ((int)-[NSSQLStoreRequestContext debugLogLevel](v253) < 2)
                    {
                      if ((int)-[NSSQLStoreRequestContext debugLogLevel](v253) >= 1)
                      {
                        uint64_t v59 = [v256 name];
                        [v251 count];
                        _NSCoreDataLog(4, @"Prefetching from join table for many-to-many relationship \"%@\" from database.  Got %lu rows", v60, v61, v62, v63, v64, v65, v59);
                      }
                    }
                    else
                    {
                      uint64_t v52 = [v256 name];
                      [v251 count];
                      _NSCoreDataLog(4, @"Prefetching from join table for many-to-many relationship \"%@\" from database.  Got %lu rows with values: %@", v53, v54, v55, v56, v57, v58, v52);
                    }
                    unint64_t v237 = [v251 count];
                    uint64_t v243 = (void *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithCapacity:v237 + 256];
                    double Current = CFAbsoluteTimeGetCurrent();
                    if (v237)
                    {
                      uint64_t v66 = 0;
                      do
                      {
                        CFAllocatorContext context = (void *)MEMORY[0x18C127630]();
                        unint64_t v67 = (void *)[v251 objectAtIndex:v66];
                        uint64_t v68 = v66 + 1;
                        int v69 = (void *)[v251 objectAtIndex:v66 + 1];
                        id v70 = v69;
                        if (v254)
                        {
                          uint64_t v68 = v66 + 2;
                          uint64_t v71 = (void *)[v251 objectAtIndex:v66 + 2];
                        }
                        else
                        {
                          uint64_t v71 = 0;
                        }
                        uint64_t v72 = [(id)v253 rowCache];
                        if (v72) {
                          -[NSPersistentStoreCache registerToMany:withOrderKeys:forSourceObjectID:forProperty:options:andTimestamp:](v72, v70, v71, v67, v261, Current);
                        }
                        [v227 removeObject:v67];
                        if (v22) {
                          uint64_t v73 = (unsigned int *)_PFRetainedObjectIDCore((uint64_t)v22, v67, 0, 1);
                        }
                        else {
                          uint64_t v73 = 0;
                        }
                        uint64_t v74 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v70, "count"));
                        long long v320 = 0u;
                        long long v321 = 0u;
                        long long v318 = 0u;
                        long long v319 = 0u;
                        uint64_t v75 = [v70 countByEnumeratingWithState:&v318 objects:v317 count:16];
                        if (v75)
                        {
                          uint64_t v76 = *(void *)v319;
                          do
                          {
                            uint64_t v77 = 0;
                            do
                            {
                              if (*(void *)v319 != v76) {
                                objc_enumerationMutation(v70);
                              }
                              if (v22) {
                                id v78 = _PFRetainedObjectIDCore((uint64_t)v22, *(void **)(*((void *)&v318 + 1) + 8 * v77), 0, 1);
                              }
                              else {
                                id v78 = 0;
                              }
                              [v74 addObject:v78];

                              ++v77;
                            }
                            while (v75 != v77);
                            uint64_t v79 = [v70 countByEnumeratingWithState:&v318 objects:v317 count:16];
                            uint64_t v75 = v79;
                          }
                          while (v79);
                        }
                        long long v80 = off_1E544B1C0;
                        if (!v254) {
                          long long v80 = off_1E544B1C8;
                        }
                        uint64_t v81 = (void *)[objc_alloc(*v80) initWithSource:v73 destinations:v74 forRelationship:v261 inContext:v22];
                        _PFFaultHandlerPreconnectRelationship((int)v259, v73, v261, v81);

                        [v243 addObjectsFromArray:v69];
                        uint64_t v66 = v68 + 1;
                      }
                      while (v68 + 1 < v237);
                    }

                    if (![v243 count])
                    {
LABEL_359:

                      goto LABEL_357;
                    }
                    uint64_t v217 = [(id)v253 manyToManyPrefetchRequestsForRelationshipNamed:v220 onEntity:v240];
                    v315 = @"mtmObjects";
                    uint64_t v316 = [MEMORY[0x1E4F28C68] expressionForConstantValue:v243];
                    long long v34 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v316 forKeys:&v315 count:1];

                    goto LABEL_131;
                  }
                  uint64_t v35 = [v247 count];
                  uint64_t v243 = (void *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithCapacity:v35];
                  unsigned int v36 = [v256 slot];
                  if (v35)
                  {
                    uint64_t v37 = 0;
                    unint64_t v38 = *(void *)(v235 + 192) + v36;
                    while (1)
                    {
                      long long v39 = (void *)MEMORY[0x18C127630]();
                      long long v40 = (void *)[v247 objectAtIndex:v37];
                      long long v41 = (void *)[v40 entity];
                      unint64_t v42 = v38;
                      if (v41 != v240) {
                        unint64_t v42 = [v41 _offsetRelationshipIndex:v38 fromSuperEntity:v240 andIsToMany:0];
                      }
                      long long v43 = (os_unfair_lock_s *)[(id)v253 rowCache];
                      if (!v43) {
                        break;
                      }
                      long long v44 = -[NSPersistentStoreCache rowForObjectID:afterTimestamp:](v43, v40, *(double *)&NSSQLDistantPastTimeInterval);
                      long long v45 = v44;
                      if (!v44) {
                        break;
                      }
                      [(os_unfair_lock_s *)v44 knownKeyValuesPointer];
                      long long v46 = (char *)[(os_unfair_lock_s *)v45 _snapshot];
                      Class Class = object_getClass(v46);
                      if (*(void *)&v46[*((unsigned int *)object_getIndexedIvars(Class) + v42 + 19)]) {
                        goto LABEL_94;
                      }
LABEL_95:
                      if (v35 == ++v37) {
                        goto LABEL_96;
                      }
                    }
                    if ((*(_DWORD *)(*(void *)(v253 + 136) + 72) & 0x1C) != 0x14) {
                      goto LABEL_95;
                    }
                    long long v48 = (unsigned int *)[*(id *)(v253 + 32) objectRegisteredForID:v40];
                    if (!v48) {
                      goto LABEL_95;
                    }
                    v317[0] = 0;
                    int v49 = _PF_InternalToOneRelationshipForeignKeyCache(v48, v42, v317);
                    int v50 = v317[0] ? v49 : 0;
                    if (v50 != 1) {
                      goto LABEL_95;
                    }
LABEL_94:
                    objc_msgSend(v243, "addObject:");
                    goto LABEL_95;
                  }
LABEL_96:
                  if (![v243 count]) {
                    goto LABEL_359;
                  }
                  uint64_t v217 = [(id)v253 manyToOnePrefetchRequestForRelationshipNamed:v220 onEntity:v240];
                  *(void *)&long long v318 = @"objects";
                  v317[0] = [MEMORY[0x1E4F28C68] expressionForConstantValue:v243];
                  long long v34 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v317 forKeys:&v318 count:1];

LABEL_131:
                  unsigned int v233 = -1;
                  unsigned int v222 = -1;
LABEL_132:
                  if (v217)
                  {
                    uint64_t v82 = objc_msgSend((id)v253, "createChildContextForNestedFetchRequest:");
                    uint64_t v84 = v82;
                    if (v82) {
                      objc_setProperty_nonatomic(v82, v83, v34, 216);
                    }
                    -[NSSQLStoreRequestContext setConnection:]((uint64_t)v84, *(void **)(v253 + 24));
                    *(_DWORD *)(v84[17] + 72) = *(_DWORD *)(v84[17] + 72) & 0xFFFFFFE3 | 8;
                    id v252 = (id)_newFetchedRowsForRequest(v84);
                    -[NSSQLStoreRequestContext setConnection:]((uint64_t)v84, 0);

                    if ((int)-[NSSQLStoreRequestContext debugLogLevel](v253) < 3)
                    {
                      if ((int)-[NSSQLStoreRequestContext debugLogLevel](v253) >= 1)
                      {
                        [v252 count];
                        _NSCoreDataLog(4, @"Prefetching with key '%@'.  Got %lu rows.", v91, v92, v93, v94, v95, v96, v220);
                      }
                    }
                    else
                    {
                      [v252 count];
                      _NSCoreDataLog(4, @"Prefetching with request %@.  Got %lu rows with values: %@", v85, v86, v87, v88, v89, v90, v217);
                    }
                  }
                  else
                  {
                    id v252 = 0;
                  }
                  if (v256[24] == 7)
                  {
                    uint64_t v244 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v247, "count"));
                    uint64_t v238 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v247, "count"));
                    id v97 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
                    id contexta = objc_alloc_init(MEMORY[0x1E4F1CA60]);
                    long long v303 = 0u;
                    long long v304 = 0u;
                    long long v301 = 0u;
                    long long v302 = 0u;
                    uint64_t v98 = [v252 countByEnumeratingWithState:&v301 objects:v314 count:16];
                    if (v98)
                    {
                      uint64_t v99 = *(void *)v302;
                      do
                      {
                        for (uint64_t k = 0; k != v98; ++k)
                        {
                          if (*(void *)v302 != v99) {
                            objc_enumerationMutation(v252);
                          }
                          unint64_t v101 = *(void **)(*((void *)&v301 + 1) + 8 * k);
                          uint64_t v102 = [v101 objectID];
                          if (v102) {
                            [v97 setObject:v101 forKey:v102];
                          }
                          uint64_t v103 = *((void *)v256 + 7);
                          if (v103)
                          {
                            if (*(unsigned char *)(v103 + 24) == 7)
                            {
                              unint64_t v104 = objc_msgSend(v101, "newObjectIDForToOne:");
                              if (v104)
                              {
                                [contexta setObject:v101 forKey:v104];
                              }
                            }
                          }
                        }
                        uint64_t v98 = [v252 countByEnumeratingWithState:&v301 objects:v314 count:16];
                      }
                      while (v98);
                    }
                    long long v299 = 0u;
                    long long v300 = 0u;
                    long long v297 = 0u;
                    long long v298 = 0u;
                    uint64_t v105 = [v247 countByEnumeratingWithState:&v297 objects:v313 count:16];
                    if (v105)
                    {
                      uint64_t v106 = *(void *)v298;
                      do
                      {
                        uint64_t v107 = 0;
                        do
                        {
                          if (*(void *)v298 != v106) {
                            objc_enumerationMutation(v247);
                          }
                          uint64_t v108 = *(void **)(*((void *)&v297 + 1) + 8 * v107);
                          uint64_t v109 = (void *)MEMORY[0x18C127630]();
                          unint64_t v110 = (os_unfair_lock_s *)[(id)v253 rowCache];
                          unint64_t v111 = -[NSPersistentStoreCache rowForObjectID:afterTimestamp:](v110, v108, *(double *)&NSSQLDistantPastTimeInterval);
                          if (v111)
                          {
                            uint64_t v112 = [(os_unfair_lock_s *)v111 newObjectIDForToOne:v256];
                            char v114 = (void *)v112;
                            if (v22)
                            {
                              uint64_t v115 = (unsigned int *)_PFRetainedObjectIDCore((uint64_t)v22, v108, 0, 1);
                              if (v114)
                              {
                                uint64_t v116 = _PFRetainedObjectIDCore((uint64_t)v22, v114, 0, 1);
LABEL_163:
                                if (v264)
                                {
                                  if ([v116 isFault])
                                  {
                                    __int16 v113 = (void *)[v97 objectForKey:v114];
                                    if (v113)
                                    {
                                      _PFFaultHandlerFulfillFault((uint64_t)v259, (uint64_t)v116, (uint64_t)v22, v113, 0);
                                      [v238 addObject:v116];
                                    }
                                  }
                                }
                                if (v116)
                                {
                                  int v117 = v116[4];
                                  if ((v117 & 0x200) == 0)
                                  {
                                    v116[4] = v117 | 0x200;
                                    goto LABEL_170;
                                  }
                                }
                                else
                                {
LABEL_170:
                                  objc_msgSend(v244, "addObject:", v114, v113);
                                }
                                _PFFaultHandlerPreconnectRelationship((int)v259, v115, v261, v116);

LABEL_204:
                                goto LABEL_205;
                              }
                            }
                            else
                            {
                              uint64_t v115 = 0;
                              uint64_t v116 = 0;
                              if (v112) {
                                goto LABEL_163;
                              }
                            }
                            _PFFaultHandlerPreconnectRelationship((int)v259, v115, v261, 0);
                            goto LABEL_204;
                          }
                          if ((*(_DWORD *)(*(void *)(v253 + 136) + 72) & 0x1C) != 0x14) {
                            goto LABEL_205;
                          }
                          uint64_t v118 = *((void *)v256 + 7);
                          if (v118 && *(unsigned char *)(v118 + 24) == 7)
                          {
                            uint64_t v119 = (void *)[contexta objectForKey:v108];
                            uint64_t v120 = v119;
                            if (!v119) {
                              goto LABEL_205;
                            }
                            id v121 = (id)[v119 objectID];
                            if (v22)
                            {
                              uint64_t v122 = (unsigned int *)_PFRetainedObjectIDCore((uint64_t)v22, v108, 0, 1);
                              uint64_t v123 = _PFRetainedObjectIDCore((uint64_t)v22, v121, 0, 1);
                            }
                            else
                            {
                              uint64_t v122 = 0;
                              uint64_t v123 = 0;
                            }
                            if ([v123 isFault])
                            {
                              _PFFaultHandlerFulfillFault((uint64_t)v259, (uint64_t)v123, (uint64_t)v22, v120, 0);
                              [v238 addObject:v123];
                            }
                            if (v123)
                            {
                              int v124 = v123[4];
                              if ((v124 & 0x200) == 0)
                              {
                                v123[4] = v124 | 0x200;
                                goto LABEL_183;
                              }
                            }
                            else
                            {
LABEL_183:
                              [v244 addObject:v121];
                            }
                            _PFFaultHandlerPreconnectRelationship((int)v259, v122, v261, v123);

                            goto LABEL_205;
                          }
                          uint64_t v125 = (unsigned int *)[v22 objectRegisteredForID:v108];
                          if (v125)
                          {
                            unsigned int v126 = [v256 slot];
                            uint64_t v127 = *(void *)(v235 + 192);
                            unint64_t v128 = (void *)[v108 entity];
                            unint64_t v129 = v127 + v126;
                            if (v128 != v240) {
                              unint64_t v129 = objc_msgSend(v128, "_offsetRelationshipIndex:fromSuperEntity:andIsToMany:", v127 + v126);
                            }
                            v312[0] = 0;
                            int v130 = _PF_InternalToOneRelationshipForeignKeyCache(v125, v129, v312);
                            if (v312[0])
                            {
                              if (v22) {
                                uint64_t v132 = _PFRetainedObjectIDCore((uint64_t)v22, v312[0], 0, 1);
                              }
                              else {
                                uint64_t v132 = 0;
                              }
                              if (v264)
                              {
                                if ([v132 isFault])
                                {
                                  uint64_t v131 = (void *)[v97 objectForKey:v312[0]];
                                  if (v131)
                                  {
                                    _PFFaultHandlerFulfillFault((uint64_t)v259, (uint64_t)v132, (uint64_t)v22, v131, 0);
                                    [v238 addObject:v132];
                                  }
                                }
                              }
                              if (v132)
                              {
                                int v133 = v132[4];
                                if ((v133 & 0x200) == 0)
                                {
                                  v132[4] = v133 | 0x200;
                                  goto LABEL_198;
                                }
                              }
                              else
                              {
LABEL_198:
                                objc_msgSend(v244, "addObject:", v312[0], v131);
                              }
                              _PFFaultHandlerPreconnectRelationship((int)v259, v125, v261, v132);

                              goto LABEL_205;
                            }
                            if (v130) {
                              _PFFaultHandlerPreconnectRelationship((int)v259, v125, v261, 0);
                            }
                          }
LABEL_205:
                          ++v107;
                        }
                        while (v105 != v107);
                        uint64_t v134 = [v247 countByEnumeratingWithState:&v297 objects:v313 count:16];
                        uint64_t v105 = v134;
                      }
                      while (v134);
                    }

                    -[NSSQLFetchRequestContext addObjectIDsToRegister:](v253, (uint64_t)v244);
                    -[NSSQLFetchRequestContext addObjectsToAwaken:](v253, (uint64_t)v238);
                  }
                  uint64_t v232 = [v252 count];
                  if (v256[24] != 9) {
                    goto LABEL_231;
                  }
                  uint64_t v135 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v232];
                  unint64_t v136 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v232];
                  long long v295 = 0u;
                  long long v296 = 0u;
                  long long v293 = 0u;
                  long long v294 = 0u;
                  uint64_t v137 = [v252 countByEnumeratingWithState:&v293 objects:v312 count:16];
                  if (!v137) {
                    goto LABEL_230;
                  }
                  uint64_t v138 = *(void *)v294;
                  do
                  {
                    uint64_t v139 = 0;
                    do
                    {
                      if (*(void *)v294 != v138) {
                        objc_enumerationMutation(v252);
                      }
                      uint64_t v140 = *(void **)(*((void *)&v293 + 1) + 8 * v139);
                      int v141 = (void *)MEMORY[0x18C127630]();
                      int v142 = (void *)[v140 objectID];
                      if (v22) {
                        unsigned int v143 = _PFRetainedObjectIDCore((uint64_t)v22, v142, 0, 1);
                      }
                      else {
                        unsigned int v143 = 0;
                      }
                      if (v264 && [v143 isFault])
                      {
                        _PFFaultHandlerFulfillFault((uint64_t)v259, (uint64_t)v143, (uint64_t)v22, v140, 0);
                        [v136 addObject:v143];
                      }
                      if (v143)
                      {
                        int v144 = v143[4];
                        if ((v144 & 0x200) != 0) {
                          goto LABEL_226;
                        }
                        v143[4] = v144 | 0x200;
                      }
                      [v135 addObject:v142];
LABEL_226:

                      ++v139;
                    }
                    while (v137 != v139);
                    uint64_t v145 = [v252 countByEnumeratingWithState:&v293 objects:v312 count:16];
                    uint64_t v137 = v145;
                  }
                  while (v145);
LABEL_230:
                  -[NSSQLFetchRequestContext addObjectIDsToRegister:](v253, (uint64_t)v135);
                  -[NSSQLFetchRequestContext addObjectsToAwaken:](v253, (uint64_t)v136);

LABEL_231:
                  uint64_t v230 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v232];
                  id v257 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                  if (v254) {
                    id v225 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                  }
                  else {
                    id v225 = 0;
                  }
                  if (v232) {
                    double Current = CFAbsoluteTimeGetCurrent();
                  }
                  id contextb = objc_alloc_init(MEMORY[0x1E4F1CA60]);
                  id v219 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                  if (v232)
                  {
                    unint64_t v241 = 0;
                    uint64_t v245 = 0;
                    uint64_t v146 = 0;
                    uint64_t v147 = 0;
                    uint64_t v216 = v233;
                    while (2)
                    {
                      uint64_t v234 = (void *)MEMORY[0x18C127630]();
                      v239 = (_DWORD *)[v252 objectAtIndex:v241];
                      uint64_t v236 = [v239 objectID];
                      [v230 addObject:v236];
                      if (!v231 || !v229 || *(unsigned char *)(v229 + 24) != 7) {
                        goto LABEL_284;
                      }
                      [contextb setObject:v239 forKey:v236];
                      uint64_t v228 = -[NSSQLRow foreignKeyForSlot:]((uint64_t)v239, v222);
                      if (v228 == v147) {
                        goto LABEL_250;
                      }
                      if (!v147)
                      {
                        uint64_t v147 = v228;
                        uint64_t v146 = v239;
LABEL_250:
                        [v257 addObject:v236];
                        if (v254) {
                          goto LABEL_280;
                        }
                        goto LABEL_284;
                      }
                      if (v218)
                      {
                        do
                        {
                          uint64_t v148 = (void *)[v247 objectAtIndex:v245];
                          if ([v148 _referenceData64] == v147)
                          {
                            id v149 = v148;
                          }
                          else
                          {
                            id v149 = 0;
                            ++v245;
                          }
                        }
                        while (!v149);
                      }
                      else
                      {
                        id v149 = (id)[v146 newObjectIDForToOne:v229];
                      }
                      uint64_t v226 = v149;
                      uint64_t v150 = [(id)v253 rowCache];
                      if (v150) {
                        -[NSPersistentStoreCache registerToMany:withOrderKeys:forSourceObjectID:forProperty:options:andTimestamp:](v150, v257, v225, v226, v261, Current);
                      }
                      [v227 removeObject:v226];
                      if (v22) {
                        uint64_t v223 = (unsigned int *)_PFRetainedObjectIDCore((uint64_t)v22, v226, 0, 1);
                      }
                      else {
                        uint64_t v223 = 0;
                      }
                      id v151 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                      id v152 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                      id v153 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                      long long v291 = 0u;
                      long long v292 = 0u;
                      long long v289 = 0u;
                      long long v290 = 0u;
                      uint64_t v154 = [v257 countByEnumeratingWithState:&v289 objects:v311 count:16];
                      if (v154)
                      {
                        uint64_t v155 = *(void *)v290;
                        do
                        {
                          uint64_t v156 = 0;
                          do
                          {
                            if (*(void *)v290 != v155) {
                              objc_enumerationMutation(v257);
                            }
                            uint64_t v157 = *(void **)(*((void *)&v289 + 1) + 8 * v156);
                            unsigned int v159 = (void *)MEMORY[0x18C127630]();
                            if (v22) {
                              uint64_t v160 = _PFRetainedObjectIDCore((uint64_t)v22, v157, 0, 1);
                            }
                            else {
                              uint64_t v160 = 0;
                            }
                            if (v264)
                            {
                              if ([v160 isFault])
                              {
                                uint64_t v158 = (void *)[contextb objectForKey:v157];
                                if (v158)
                                {
                                  _PFFaultHandlerFulfillFault((uint64_t)v259, (uint64_t)v160, (uint64_t)v22, v158, 0);
                                  [v153 addObject:v160];
                                }
                              }
                            }
                            if (v160)
                            {
                              int v161 = v160[4];
                              if ((v161 & 0x200) != 0) {
                                goto LABEL_272;
                              }
                              v160[4] = v161 | 0x200;
                            }
                            objc_msgSend(v152, "addObject:", v157, v158);
LABEL_272:
                            objc_msgSend(v151, "addObject:", v160, v158);

                            ++v156;
                          }
                          while (v154 != v156);
                          uint64_t v162 = [v257 countByEnumeratingWithState:&v289 objects:v311 count:16];
                          uint64_t v154 = v162;
                        }
                        while (v162);
                      }
                      -[NSSQLFetchRequestContext addObjectIDsToRegister:](v253, (uint64_t)v152);
                      -[NSSQLFetchRequestContext addObjectsToAwaken:](v253, (uint64_t)v153);

                      unint64_t v163 = off_1E544B1C0;
                      if (!v254) {
                        unint64_t v163 = off_1E544B1C8;
                      }
                      uint64_t v164 = (void *)[objc_alloc(*v163) initWithSource:v223 destinations:v151 forRelationship:v261 inContext:v22];

                      _PFFaultHandlerPreconnectRelationship((int)v259, v223, v261, v164);
                      [v219 addObject:v226];

                      if (v254)
                      {

                        id v257 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                        id v225 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                        [v257 addObject:v236];
                        uint64_t v146 = v239;
                        uint64_t v147 = v228;
LABEL_280:
                        uint64_t v165 = v239
                             ? *(unsigned int *)((char *)&v239[v216] + _NSSQLRowInstanceSize + ((2 * v239[4]) & 0x1FFF8))
                             : 0;
                        objc_msgSend(v225, "addObject:", objc_msgSend(NSNumber, "numberWithUnsignedInteger:", v165));
                      }
                      else
                      {
                        id v257 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                        [v257 addObject:v236];
                        uint64_t v147 = v228;
                        uint64_t v146 = v239;
                      }
LABEL_284:
                      if (++v241 != (char *)v232) {
                        continue;
                      }
                      break;
                    }
                    if (v147)
                    {
                      if (v218)
                      {
                        do
                        {
                          unint64_t v166 = (void *)[v247 objectAtIndex:v245];
                          if ([v166 _referenceData64] == v147)
                          {
                            id v167 = v166;
                          }
                          else
                          {
                            id v167 = 0;
                            ++v245;
                          }
                        }
                        while (!v167);
                      }
                      else
                      {
                        id v167 = (id)[v146 newObjectIDForToOne:v229];
                      }
                      id v246 = v167;
                      uint64_t v168 = [(id)v253 rowCache];
                      if (v168) {
                        -[NSPersistentStoreCache registerToMany:withOrderKeys:forSourceObjectID:forProperty:options:andTimestamp:](v168, v257, v225, v246, v261, Current);
                      }
                      [v227 removeObject:v246];
                      if (v22) {
                        uint64_t v242 = (unsigned int *)_PFRetainedObjectIDCore((uint64_t)v22, v246, 0, 1);
                      }
                      else {
                        uint64_t v242 = 0;
                      }
                      id v169 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                      id v170 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                      id v171 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                      long long v287 = 0u;
                      long long v288 = 0u;
                      long long v285 = 0u;
                      long long v286 = 0u;
                      uint64_t v172 = [v257 countByEnumeratingWithState:&v285 objects:v310 count:16];
                      if (v172)
                      {
                        uint64_t v173 = *(void *)v286;
                        do
                        {
                          uint64_t v174 = 0;
                          do
                          {
                            if (*(void *)v286 != v173) {
                              objc_enumerationMutation(v257);
                            }
                            int v175 = *(void **)(*((void *)&v285 + 1) + 8 * v174);
                            unint64_t v177 = (void *)MEMORY[0x18C127630]();
                            if (v22) {
                              unint64_t v178 = _PFRetainedObjectIDCore((uint64_t)v22, v175, 0, 1);
                            }
                            else {
                              unint64_t v178 = 0;
                            }
                            if (v264)
                            {
                              if ([v178 isFault])
                              {
                                int v176 = (void *)[contextb objectForKey:v175];
                                if (v176)
                                {
                                  _PFFaultHandlerFulfillFault((uint64_t)v259, (uint64_t)v178, (uint64_t)v22, v176, 0);
                                  [v171 addObject:v178];
                                }
                              }
                            }
                            if (v178)
                            {
                              int v179 = v178[4];
                              if ((v179 & 0x200) != 0) {
                                goto LABEL_315;
                              }
                              v178[4] = v179 | 0x200;
                            }
                            objc_msgSend(v170, "addObject:", v175, v176);
LABEL_315:
                            objc_msgSend(v169, "addObject:", v178, v176);

                            ++v174;
                          }
                          while (v172 != v174);
                          uint64_t v180 = [v257 countByEnumeratingWithState:&v285 objects:v310 count:16];
                          uint64_t v172 = v180;
                        }
                        while (v180);
                      }
                      -[NSSQLFetchRequestContext addObjectIDsToRegister:](v253, (uint64_t)v170);
                      -[NSSQLFetchRequestContext addObjectsToAwaken:](v253, (uint64_t)v171);

                      uint64_t v181 = off_1E544B1C0;
                      if (!v254) {
                        uint64_t v181 = off_1E544B1C8;
                      }
                      BOOL v182 = (void *)[objc_alloc(*v181) initWithSource:v242 destinations:v169 forRelationship:v261 inContext:v22];

                      _PFFaultHandlerPreconnectRelationship((int)v259, v242, v261, v182);
                      [v219 addObject:v246];
                    }
                  }
                  if ([v227 count])
                  {
                    uint64_t v183 = (void *)[v227 allObjects];
                    uint64_t v184 = [v183 count];
                    if (v184)
                    {
                      for (uint64_t m = 0; m != v184; ++m)
                      {
                        uint64_t v186 = (void *)[v183 objectAtIndex:m];
                        uint64_t v187 = [(id)v253 rowCache];
                        if (v187)
                        {
                          if (v254) {
                            unint64_t v188 = NSArray_EmptyArray;
                          }
                          else {
                            unint64_t v188 = 0;
                          }
                          -[NSPersistentStoreCache registerToMany:withOrderKeys:forSourceObjectID:forProperty:options:andTimestamp:](v187, (void *)NSArray_EmptyArray, v188, v186, v261, Current);
                        }
                      }
                    }
                  }
                  if ([v219 count]) {
                    BOOL v189 = (v213 & 0x1C) != 20;
                  }
                  else {
                    BOOL v189 = 1;
                  }
                  if (!v189)
                  {
                    unsigned int v190 = (void *)[v247 arrayByExcludingObjectsInArray:v219];
                    long long v283 = 0u;
                    long long v284 = 0u;
                    long long v281 = 0u;
                    long long v282 = 0u;
                    uint64_t v191 = [v190 countByEnumeratingWithState:&v281 objects:v309 count:16];
                    if (v191)
                    {
                      uint64_t v192 = *(void *)v282;
                      do
                      {
                        uint64_t v193 = 0;
                        do
                        {
                          if (*(void *)v282 != v192) {
                            objc_enumerationMutation(v190);
                          }
                          if (v22) {
                            unint64_t v194 = (unsigned int *)_PFRetainedObjectIDCore((uint64_t)v22, *(void **)(*((void *)&v281 + 1) + 8 * v193), 0, 1);
                          }
                          else {
                            unint64_t v194 = 0;
                          }
                          unint64_t v195 = off_1E544B1C0;
                          if (!v254) {
                            unint64_t v195 = off_1E544B1C8;
                          }
                          id v196 = objc_alloc(*v195);
                          v197 = &NSOrderedSet_EmptyOrderedSet;
                          if (!v254) {
                            v197 = &NSSet_EmptySet;
                          }
                          v198 = (void *)[v196 initWithSource:v194 destinations:*v197 forRelationship:v261 inContext:v22];
                          _PFFaultHandlerPreconnectRelationship((int)v259, v194, v261, v198);

                          ++v193;
                        }
                        while (v191 != v193);
                        uint64_t v199 = [v190 countByEnumeratingWithState:&v281 objects:v309 count:16];
                        uint64_t v191 = v199;
                      }
                      while (v199);
                    }
                  }

                  if (v225) {
                  unint64_t v200 = (id *)[(id)v253 createChildContextForNestedFetchRequest:v217];
                  }
                  -[NSSQLStoreRequestContext setConnection:]((uint64_t)v200, *(void **)(v253 + 24));
                  _prefetchForFetchRequest(v230, v211, v200);
                  if (v200) {
                    uint64_t v201 = [v200[19] allObjects];
                  }
                  else {
                    uint64_t v201 = 0;
                  }
                  -[NSSQLFetchRequestContext addObjectIDsToRegister:](v253, v201);
                  if (v200) {
                    uint64_t v202 = [v200[20] allObjects];
                  }
                  else {
                    uint64_t v202 = 0;
                  }
                  -[NSSQLFetchRequestContext addObjectsToAwaken:](v253, v202);
                  -[NSSQLStoreRequestContext setConnection:]((uint64_t)v200, 0);

LABEL_357:
                  ++v224;
                }
                while (v224 != v214);
                uint64_t v203 = [v221 countByEnumeratingWithState:&v265 objects:v305 count:16];
                uint64_t v214 = v203;
              }
              while (v203);
            }
          }
        }
        if (++v210 == v208)
        {
          uint64_t v208 = [obj countByEnumeratingWithState:&v277 objects:v308 count:16];
          if (!v208) {
            return (id)[v205 drain];
          }
          goto LABEL_5;
        }
      }
      objc_msgSend(v221, "setObject:forKey:", a1, objc_msgSend(v215, "name"));
      goto LABEL_45;
    }
  }
  return result;
}

void sub_18AC1D994(_Unwind_Exception *a1)
{
}

void sub_18AC1D9AC(_Unwind_Exception *a1)
{
}

void sub_18AC1D9CC(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18AC1D9D4);
  }
  _Unwind_Resume(a1);
}

void sub_18AC1D9DC(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AC1D9E8);
}

void _PFFaultHandlerPreconnectRelationship(int a1, unsigned int *a2, void *a3, void *a4)
{
  id v7 = _PFEntityForManagedObject(a2);
  uint64_t v8 = [a3 entity];
  unint64_t v9 = [a3 _entitysReferenceID];
  uint64_t v10 = [a3 isToMany];
  if (v7 != (void *)v8) {
    unint64_t v9 = [v7 _offsetRelationshipIndex:v9 fromSuperEntity:v8 andIsToMany:v10];
  }
  uint64_t v11 = _kvcPropertysPrimitiveSetters((uint64_t)v7);
  uint64_t v12 = *(void *)(v11 + 8 * v9);
  unsigned int v13 = a2[4];
  if ((v13 & 0x38000) == 0x8000)
  {
    uint64_t v14 = (void *)*((void *)a2 + 6);
    if (v14)
    {
      uint64_t v15 = 0;
      if ((v13 & 0x2000) == 0 && *v14)
      {
        uint64_t v11 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", objc_msgSend(a3, "name"), 0);
        uint64_t v15 = (void *)v11;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    _PFFaultHandlerFulfillPartialFault(v11, a2, *((void *)a2 + 4), 0, (void *)NSArray_EmptyArray, (uint64_t)v15, MEMORY[0x1E4F1CBF0]);

    unsigned int v13 = a2[4];
  }
  uint64_t v16 = a2[5];
  if (v16) {
    uint64_t v17 = (char *)a2 + v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = &v17[-((v13 >> 22) & 0x3FC)];
  int v19 = v18[v9 >> 3];
  int v20 = 1 << (v9 & 7);
  if ((v20 & v19) == 0)
  {
    v18[v9 >> 3] = v19 | v20;
    if (v10)
    {
      [a3 isOrdered];
    }
    else
    {
      if ((a2[4] & 0x80) != 0 || !*((void *)a2 + 4)) {
        return;
      }
      if (!a4)
      {
        long long v28 = (char **)a2;
        unint64_t v29 = v9;
        long long v30 = 0;
        goto LABEL_19;
      }
    }
    long long v28 = (char **)a2;
    unint64_t v29 = v9;
    long long v30 = a4;
LABEL_19:
    _PF_Handler_Primitive_SetProperty(v28, v29, v30, 0, v12);
    return;
  }
  if (*(void *)(_kvcPropertysPrimitiveGetters(v7) + 8 * v9)) {
    double v27 = (void *)_NSGetUsingKeyValueGetter();
  }
  else {
    snapshot_get_value_as_object(*((id **)a2 + 3), v9, v21, v22, v23, v24, v25, v26);
  }
  long long v31 = v27;
  if (v10)
  {
    if (v27)
    {
      if ([v27 isFault]) {
        [v31 willReadWithContents:a4];
      }
      return;
    }
    uint64_t v39 = [a3 name];
    [a2 objectID];
    _NSCoreDataLog(1, @"During prefetching, materialized to-many relationship '%@' on object %@ was null", v40, v41, v42, v43, v44, v45, v39);
LABEL_34:
    __break(1u);
    return;
  }
  if (v27)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v32 = [a3 name];
      [a2 objectID];
      _NSCoreDataLog(1, @"During prefetching, materialized to-one relationship '%@' on object %@ was not a managed object but instead %@", v33, v34, v35, v36, v37, v38, v32);
      goto LABEL_34;
    }
  }
}

uint64_t _PF_Handler_Primitive_SetProperty(char **a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (_PF_Threading_Debugging_level) {
    _PFAssertSafeMultiThreadedAccess_impl([a1 managedObjectContext], sel_setValue_forKey_);
  }
  _PF_CopyOnWrite_Snapshot(a1);
  if (a5)
  {
    uint64_t result = _NSSetUsingKeyValueSetter();
  }
  else
  {
    id v10 = a3;
    uint64_t result = (uint64_t)snapshot_set_value_as_object(a1[3], a2, v10, v11, v12, v13, v14, v15);
  }
  uint64_t v16 = *((unsigned int *)a1 + 5);
  if (v16) {
    uint64_t v17 = (char *)a1 + v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = &v17[-(((unint64_t)*((unsigned int *)a1 + 4) >> 22) & 0x3FC)];
  v18[a2 >> 3] |= 1 << (a2 & 7);
  return result;
}

void _faultBatchAtIndex(uint64_t a1, unsigned int a2, int a3)
{
  v156[1] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = a2 / *(_DWORD *)(a1 + 48);
  uint64_t v4 = v3 >> 5;
  if ((*(_DWORD *)(*(void *)(a1 + 24) + 4 * v4) & (1 << ~(_BYTE)v3)) != 0) {
    return;
  }
  uint64_t v6 = a1;
  int v86 = 1 << ~(_BYTE)v3;
  uint64_t v7 = MEMORY[0x18C127630]();
  int v8 = *(_DWORD *)(v6 + 48);
  uint64_t v9 = v8 * v3;
  unsigned int v10 = v9 + v8;
  unsigned int v11 = *(_DWORD *)(v6 + 12);
  if (v10 < v11) {
    unsigned int v11 = v10;
  }
  unsigned int v99 = v11;
  uint64_t v12 = [*(id *)(v6 + 16) _objectsPointer];
  if (a3)
  {
    uint64_t v13 = *(unsigned __int8 *)(v6 + 64);
    uint64_t v14 = *(void *)(v6 + 56);
    unsigned int v15 = *(_DWORD *)(v14 + 4 * v13);
    *(_DWORD *)(v14 + 4 * v13) = v3;
    BOOL v16 = v15 == -1 || v15 == v3;
    int v17 = !v16;
    int v85 = v17;
    if (!v16) {
      _releaseStaleBatch(v6, v15);
    }
    *(unsigned char *)(v6 + 64) = ((int)v13 + 1) % ((*(_DWORD *)(v6 + 64) >> 9) & 0x7FFu);
  }
  else
  {
    int v85 = 0;
  }
  uint64_t v18 = *(void **)(v6 + 40);
  uint64_t v19 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v18, "entity"), "managedObjectModel"), "_modelsReferenceIDOffset");
  uint64_t v92 = v19;
  uint64_t v20 = [v18 resultType];
  BOOL v21 = v20 == 2 && v19 != 16000;
  if (v19 == 16000 && v20 != 2)
  {
    [v18 setResultType:2];
    BOOL v21 = 0;
  }
  uint64_t v94 = v99 - v9;
  uint64_t v91 = v18;
  BOOL v93 = v21;
  uint64_t v89 = v3 >> 5;
  uint64_t v87 = v12;
  if (([v18 includesPropertyValues] & 1) != 0
    || objc_msgSend((id)objc_msgSend(v18, "relationshipKeyPathsForPrefetching"), "count")
    || objc_msgSend((id)objc_msgSend(v18, "propertiesToFetch"), "count"))
  {
    uint64_t v23 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:count:", objc_msgSend(*(id *)(v6 + 16), "_objectsPointer") + 8 * v9, v94);
    uint64_t v155 = @"batch";
    v156[0] = [MEMORY[0x1E4F28C68] expressionForConstantValue:v23];
    objc_msgSend(v18, "setSubstitutionVariables:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v156, &v155, 1));
    unint64_t v24 = [v23 count];

    id v114 = 0;
    uint64_t v26 = v9;
    if (v19 == 16000)
    {
      unint64_t v27 = 0x1EB269000uLL;
      uint64_t v25 = [*(id *)(v6 + 32) _allowAncillaryEntities];
      if (v25)
      {
        int v28 = 0;
      }
      else
      {
        int v28 = 1;
        uint64_t v25 = [*(id *)(v6 + 32) _setAllowAncillaryEntities:1];
      }
    }
    else
    {
      int v28 = 0;
      unint64_t v27 = 0x1EB269000;
    }
    unint64_t v29 = (void *)MEMORY[0x18C127630](v25);
    long long v30 = *(void **)(v6 + *(int *)(v27 + 3908));
    uint64_t v18 = v91;
    long long v31 = (void *)[v30 executeFetchRequest:v91 error:&v114];
    id v153 = @"batch";
    uint64_t v154 = [MEMORY[0x1E4F28C68] expressionForConstantValue:NSArray_EmptyArray];
    objc_msgSend(v91, "setSubstitutionVariables:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v154, &v153, 1));
    id v32 = v31;
    id v33 = v114;
    id v34 = v31;
    id v35 = v114;
    if (v28) {
      [*(id *)(v6 + 32) _setAllowAncillaryEntities:0];
    }
    if (!v31)
    {
      id v36 = v114;
      [v114 userInfo];
      _NSCoreDataLog(1, @"batched fetch array received an error %@ with userInfo %@", v37, v38, v39, v40, v41, v42, (uint64_t)v36);
      long long v31 = 0;
    }
    uint64_t v9 = v26;
    uint64_t v12 = v87;
  }
  else
  {
    unint64_t v24 = 0;
    long long v31 = 0;
    id v114 = 0;
  }
  uint64_t v43 = v92;
  if ([v31 count] > v24)
  {
    [v31 count];
    _NSCoreDataLog(1, @" batched fetch request asked to fetch %d objects but received %d objects as %@", v44, v45, v46, v47, v48, v49, v24);
  }
  CFAllocatorContext context = (void *)v7;
  obuint64_t j = v31;
  long long v152 = 0u;
  long long v151 = 0u;
  long long v150 = 0u;
  long long v149 = 0u;
  long long v148 = 0u;
  long long v147 = 0u;
  long long v146 = 0u;
  long long v145 = 0u;
  long long v144 = 0u;
  long long v143 = 0u;
  long long v142 = 0u;
  long long v141 = 0u;
  long long v140 = 0u;
  long long v139 = 0u;
  long long v138 = 0u;
  long long v137 = 0u;
  long long v136 = 0u;
  long long v135 = 0u;
  long long v134 = 0u;
  long long v133 = 0u;
  long long v132 = 0u;
  long long v131 = 0u;
  long long v130 = 0u;
  long long v129 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  CFAllocatorRef v50 = _PFStackAllocatorCreate((unint64_t *)&v121, 1024);
  memset(&keyCallBacks, 0, 24);
  *(_OWORD *)&keyCallBacks.copyDescription = *(_OWORD *)(MEMORY[0x1E4F1D530] + 24);
  keyCallBacks.hash = *(CFDictionaryHashCallBack *)(MEMORY[0x1E4F1D530] + 40);
  int v51 = v92 == 16000 || v21;
  id v97 = @"self";
  if (v51 == 1)
  {
    uint64_t v52 = @"self";
    if (!objc_msgSend((id)objc_msgSend((id)objc_msgSend(v18, "propertiesToFetch"), "valueForKey:", @"name"), "containsObject:", @"self"))uint64_t v52 = @"objectID"; {
    id v97 = v52;
    }
  }
  CFDictionaryRef v53 = (const __CFDictionary *)[obj count];
  if (v53)
  {
    uint64_t v54 = CFDictionaryCreateMutable(v50, [obj count], &keyCallBacks, 0);
    if (v51)
    {
      long long v111 = 0uLL;
      long long v112 = 0uLL;
      long long v109 = 0uLL;
      long long v110 = 0uLL;
      uint64_t v55 = [obj countByEnumeratingWithState:&v109 objects:v120 count:16];
      if (v55)
      {
        uint64_t v56 = v55;
        uint64_t v57 = *(void *)v110;
        uint64_t v58 = context;
        do
        {
          for (uint64_t i = 0; i != v56; ++i)
          {
            if (*(void *)v110 != v57) {
              objc_enumerationMutation(obj);
            }
            CFDictionaryAddValue(v54, (const void *)[*(id *)(*((void *)&v109 + 1) + 8 * i) objectForKey:v97], *(const void **)(*((void *)&v109 + 1) + 8 * i));
          }
          uint64_t v56 = [obj countByEnumeratingWithState:&v109 objects:v120 count:16];
        }
        while (v56);
LABEL_63:
        uint64_t v18 = v91;
        BOOL v21 = v93;
LABEL_65:
        CFDictionaryRef v53 = v54;
        uint64_t v4 = v89;
        goto LABEL_66;
      }
    }
    else
    {
      long long v107 = 0uLL;
      long long v108 = 0uLL;
      long long v105 = 0uLL;
      long long v106 = 0uLL;
      uint64_t v60 = [obj countByEnumeratingWithState:&v105 objects:v119 count:16];
      if (v60)
      {
        uint64_t v61 = v60;
        uint64_t v62 = *(void *)v106;
        uint64_t v58 = context;
        do
        {
          for (uint64_t j = 0; j != v61; ++j)
          {
            if (*(void *)v106 != v62) {
              objc_enumerationMutation(obj);
            }
            CFDictionaryAddValue(v54, (const void *)[*(id *)(*((void *)&v105 + 1) + 8 * j) objectID], *(const void **)(*((void *)&v105 + 1) + 8 * j));
          }
          uint64_t v61 = [obj countByEnumeratingWithState:&v105 objects:v119 count:16];
        }
        while (v61);
        goto LABEL_63;
      }
    }
    uint64_t v58 = context;
    goto LABEL_65;
  }
  uint64_t v58 = context;
LABEL_66:
  if (v99 > v9)
  {
    unint64_t v64 = 0;
    CFDictionaryRef theDict = v53;
    while (1)
    {
      unint64_t v96 = v64;
      uint64_t v65 = *(void **)(v12 + 8 * v9);
      if (v21)
      {
        uint64_t v66 = *(void **)(v12 + 8 * v9);
        if (!v53 || (Value = CFDictionaryGetValue(theDict, v65)) == 0)
        {
          if ([obj count] <= v96)
          {
            v117[0] = v97;
            v117[1] = @"isDeleted";
            v118[0] = v66;
            v118[1] = MEMORY[0x1E4F1CC38];
            Value = (_DWORD *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v118 forKeys:v117 count:2];
          }
          else
          {
            Value = (id)objc_msgSend(obj, "objectAtIndexedSubscript:");
          }
          if (!Value) {
            goto LABEL_98;
          }
        }
        goto LABEL_97;
      }
      if (v43 == 16000) {
        break;
      }
      if (!v53 || (Value = CFDictionaryGetValue(v53, *(const void **)(v12 + 8 * v9))) == 0) {
        Value = (_DWORD *)[*(id *)(v6 + 32) objectWithID:v65];
      }
      uint64_t v66 = v65;
      Value[4] |= 0x4000u;
LABEL_97:
      *(void *)(v12 + 8 * v9) = Value;
LABEL_98:

      ++v9;
      CFDictionaryRef v53 = theDict;
      unint64_t v64 = v96 + 1;
      if (v94 == v96 + 1) {
        goto LABEL_107;
      }
    }
    if (!v53 || (uint64_t v68 = (void *)CFDictionaryGetValue(v53, *(const void **)(v12 + 8 * v9)), (v69 = v68) == 0))
    {
      uint64_t v68 = (void *)[*(id *)(v6 + 32) objectWithID:v65];
      int v69 = v68;
      if (v68)
      {
        uint64_t v90 = v65;
        unint64_t v100 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend((id)objc_msgSend(v18, "propertiesToFetch"), "count"));
        uint64_t v68 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v69, "entity"), "name"), "isEqualToString:", @"TRANSACTION");
        if (v68)
        {
          v116[0] = @"AUTHORTS";
          v116[1] = @"BUNDLEIDTS";
          v116[2] = @"CONTEXTNAMETS";
          v116[3] = @"PROCESSIDTS";
          id v70 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v116 count:4];
          long long v101 = 0u;
          long long v102 = 0u;
          long long v103 = 0u;
          long long v104 = 0u;
          uint64_t v71 = (void *)[v18 propertiesToFetch];
          uint64_t v68 = (void *)[v71 countByEnumeratingWithState:&v101 objects:v115 count:16];
          if (v68)
          {
            uint64_t v72 = v68;
            uint64_t v83 = v9;
            uint64_t v84 = v6;
            uint64_t v73 = *(void *)v102;
            while (1)
            {
              uint64_t v74 = 0;
              do
              {
                if (*(void *)v102 != v73) {
                  objc_enumerationMutation(v71);
                }
                uint64_t v75 = *(void **)(*((void *)&v101 + 1) + 8 * (void)v74);
                uint64_t v76 = (void *)MEMORY[0x18C127630]();
                int v77 = objc_msgSend(v70, "containsObject:", objc_msgSend(v75, "name"));
                id v78 = objc_msgSend(v69, "valueForKey:", objc_msgSend(v75, "name"));
                uint64_t v79 = (uint64_t)v78;
                if (!v77)
                {
                  if (!v78) {
                    goto LABEL_88;
                  }
LABEL_87:
                  objc_msgSend(v100, "setValue:forKey:", v79, objc_msgSend(v75, "name"));
                  goto LABEL_88;
                }
                uint64_t v79 = [v78 valueForKey:@"NAME"];
                if (v79) {
                  goto LABEL_87;
                }
LABEL_88:
                uint64_t v74 = (char *)v74 + 1;
              }
              while (v72 != v74);
              uint64_t v68 = (void *)[v71 countByEnumeratingWithState:&v101 objects:v115 count:16];
              uint64_t v72 = v68;
              if (!v68)
              {
                int v69 = v100;
                uint64_t v9 = v83;
                uint64_t v6 = v84;
                uint64_t v58 = context;
                uint64_t v4 = v89;
                uint64_t v12 = v87;
                goto LABEL_101;
              }
            }
          }
          int v69 = v100;
LABEL_101:
          uint64_t v18 = v91;
          uint64_t v43 = v92;
        }
        uint64_t v65 = v90;
      }
    }
    uint64_t v66 = v65;
    uint64_t v80 = ancillaryModelObjectBlock_block_invoke((uint64_t)v68, v18, *(void **)(v6 + 32), v69, v65);
    BOOL v21 = v93;
    if (v80)
    {
      uint64_t v81 = (void *)v80;
      *(void *)(v12 + 8 * v9) = v80;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        if ([(id)v6 transaction]) {
          objc_msgSend(v81, "_setTransaction:", objc_msgSend((id)v6, "transaction"));
        }
      }
    }
    goto LABEL_98;
  }
LABEL_107:
  if (*((void *)&v122 + 1))
  {
    unint64_t v82 = 0x1EB269000;
    if (v53) {
      CFRelease(v53);
    }
  }
  else
  {
    *((void *)&v121 + 1) = v121;
    unint64_t v82 = 0x1EB269000uLL;
  }
  *(_DWORD *)(*(void *)(v6 + 24) + 4 * v4) |= v86;
  if ((_MergedGlobals_37 & 1) == 0 && ((v85 ^ 1) & 1) == 0) {
    -[NSManagedObjectContext _processReferenceQueue:](*(void *)(v6 + *(int *)(v82 + 3908)), 0);
  }
}

uint64_t ancillaryModelObjectBlock_block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  v61[1] = *MEMORY[0x1E4F143B8];
  if (objc_msgSend(@"TRANSACTION", "isEqualToString:", objc_msgSend(a2, "entityName")))
  {
    uint64_t v9 = [[_NSPersistentHistoryTransaction alloc] initWithDictionary:a4 andObjectID:a5];
    if (objc_msgSend((id)objc_msgSend(a2, "relationshipKeyPathsForPrefetching"), "count") && v9)
    {
      unsigned int v10 = [NSPersistentHistoryChangeRequest alloc];
      v61[0] = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(a5, "_referenceData64"));
      unsigned int v11 = -[NSPersistentHistoryChangeRequest initWithTransactionIDs:](v10, "initWithTransactionIDs:", [MEMORY[0x1E4F1C978] arrayWithObjects:v61 count:1]);
      -[NSPersistentHistoryChangeRequest setFetchBatchSize:](v11, "setFetchBatchSize:", [a2 fetchLimit]);
      if (objc_msgSend((id)objc_msgSend(a2, "affectedStores"), "count")) {
        -[NSPersistentStoreRequest setAffectedStores:](v11, "setAffectedStores:", [a2 affectedStores]);
      }
      id v12 = objc_alloc_init(MEMORY[0x1E4F28B28]);
      id v56 = 0;
      uint64_t v19 = objc_msgSend((id)objc_msgSend(a3, "executeRequest:error:", v11, &v56), "result");
      if (!v19)
      {
        _NSCoreDataLog(1, @"Batched history request: %@ encountered an error", v13, v14, v15, v16, v17, v18, (uint64_t)v11);
        _NSCoreDataLog(1, @" \t error: %@", v39, v40, v41, v42, v43, v44, (uint64_t)v56);
        uint64_t v45 = [NSString stringWithUTF8String:"Batched history request encountered error %@"];
        _NSCoreDataLog(17, v45, v46, v47, v48, v49, v50, v51, (uint64_t)v56);
        uint64_t v52 = __pflogFaultLog;
        if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v60 = v56;
          _os_log_fault_impl(&dword_18AB82000, v52, OS_LOG_TYPE_FAULT, "CoreData: Batched history request encountered error %@", buf, 0xCu);
        }
        uint64_t v53 = [v56 code];
        uint64_t v57 = *MEMORY[0x1E4F28A50];
        id v58 = v56;
        uint64_t v54 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v58 forKeys:&v57 count:1];
        id v55 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E4F1C3B8], v53, @"Batched persistent history request encountered an error", v54);
        -[_NSCoreDataException _setDomain:]((uint64_t)v55, (void *)[v56 domain]);
        objc_exception_throw(v55);
      }
      if (v56)
      {
        uint64_t v20 = [NSString stringWithUTF8String:"Batched persistent history request returned a result AND an error %@"];
        _NSCoreDataLog(17, v20, v21, v22, v23, v24, v25, v26, (uint64_t)v56);
        unint64_t v27 = __pflogFaultLog;
        if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v60 = v56;
          _os_log_fault_impl(&dword_18AB82000, v27, OS_LOG_TYPE_FAULT, "CoreData: Batched persistent history request returned a result AND an error %@", buf, 0xCu);
        }
      }
      if ([v19 count])
      {
        [v19 _setTransaction:v9];
        -[_NSPersistentHistoryTransaction _setChanges:](v9, v19);
      }

      [v12 drain];
      id v28 = 0;
    }
    return (uint64_t)v9;
  }
  if (!objc_msgSend(@"CHANGE", "isEqualToString:", objc_msgSend(a2, "entityName")))
  {
    uint64_t v32 = [a2 entityName];
    _NSCoreDataLog(9, @"Error attempted to convert unknown Ancillary Entity: %@", v33, v34, v35, v36, v37, v38, v32);
    return 0;
  }
  int v29 = [a4 isNSDictionary];
  long long v30 = [_NSPersistentHistoryChange alloc];
  if (v29)
  {
    return (uint64_t)[(_NSPersistentHistoryChange *)v30 initWithDictionary:a4 andChangeObjectID:a5];
  }
  else
  {
    return (uint64_t)[(_NSPersistentHistoryChange *)v30 initWithManagedObject:a4];
  }
}

void sub_18AC209B0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exception_object);
      JUMPOUT(0x18AC20700);
    }
    id v3 = objc_begin_catch(exception_object);

    id v4 = v3;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AC20A3C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC209F8);
  }
  JUMPOUT(0x18AC20A50);
}

void sub_18AC21DB0(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18AC21DC4(_Unwind_Exception *a1)
{
}

id NSManagedObjectContext.count<A>(for:)(uint64_t a1)
{
  v4[1] = *(id *)MEMORY[0x1E4F143B8];
  v4[0] = 0;
  id v2 = objc_msgSend(v1, sel_countForFetchRequest_error_, a1, v4);
  if (v4[0])
  {
    v4[0];
    swift_willThrow();
  }
  return v2;
}

void sub_18AC227DC(_Unwind_Exception *a1)
{
}

void sub_18AC227E4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    if (a2 == 3)
    {
      uint64_t v66 = objc_begin_catch(a1);
      +[NSManagedObjectContext _handleError:withError:]((uint64_t)NSManagedObjectContext, v66, &a66);
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        id v67 = objc_begin_catch(a1);
        objc_exception_rethrow();
      }
      objc_begin_catch(a1);
    }
    JUMPOUT(0x18AC2234CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18AC2286C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC22834);
  }
  _Unwind_Resume(a1);
}

void sub_18AC2288C(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18AC22894);
  }
  _Unwind_Resume(a1);
}

void sub_18AC2289C(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AC228A8);
}

void sub_18AC24384(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC24288);
  }
  JUMPOUT(0x18AC2424CLL);
}

void sub_18AC24394(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC24260);
  }
  JUMPOUT(0x18AC2424CLL);
}

void sub_18AC243B8(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AC24248);
}

void sub_18AC243E0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AC243E8);
  }
  JUMPOUT(0x18AC2424CLL);
}

#error "18AC24A74: call analysis failed (funcsize=107)"

void sub_18AC24AF0(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC24948);
  }
  JUMPOUT(0x18AC248FCLL);
}

void sub_18AC25558(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC2533CLL);
  }
  JUMPOUT(0x18AC25314);
}

void sub_18AC2558C()
{
}

void sub_18AC255A4(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AC25310);
}

uint64_t _writeInt16IntoData(void *a1, unsigned int a2)
{
  int v4 = [a1 length];
  if ((int)(((v4 + 1) & 0xFFFFFFFE) - v4) >= 1)
  {
    uint64_t v7 = 0;
    objc_msgSend(a1, "appendBytes:length:", &v7);
  }
  __int16 v6 = __rev16(a2);
  return [a1 appendBytes:&v6 length:2];
}

uint64_t _writeInt64IntoData(void *a1, unint64_t a2)
{
  int v4 = [a1 length];
  if ((int)(((v4 + 7) & 0xFFFFFFF8) - v4) >= 1)
  {
    unint64_t v6 = 0;
    objc_msgSend(a1, "appendBytes:length:", &v6);
  }
  unint64_t v6 = bswap64(a2);
  return [a1 appendBytes:&v6 length:8];
}

id _rawRowDataForXPCRequest(uint64_t a1)
{
  v99[1] = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA58]);
  if ([*(id *)(*(void *)(a1 + 136) + 8) allocationType] != 3
    && [*(id *)(*(void *)(a1 + 136) + 8) allocationType])
  {
    *(_DWORD *)(*(void *)(a1 + 136) + 72) |= 0x20u;
    uint64_t v3 = [(id)a1 request];
    if (*(void *)(a1 + 120))
    {
      uint64_t v4 = v3;
      uint64_t v5 = [(id)a1 fetchStatement];
      if (v5 && !*(unsigned char *)(v5 + 40))
      {
        id v60 = (void *)[(id)a1 fetchStatement];
        int v61 = *(unsigned __int8 *)(a1 + 202);
        uint64_t v62 = *(void *)(a1 + 136);
        uint64_t v63 = *(void **)(a1 + 24);
        if (+[NSSQLCore debugDefault] > 0
          || +[NSXPCStoreServer debugDefault])
        {
          double Current = CFAbsoluteTimeGetCurrent();
          int v65 = 1;
        }
        else
        {
          int v65 = 0;
          double Current = 0.0;
        }
        id v66 = objc_alloc_init(MEMORY[0x1E4F28B28]);
        if (v65)
        {
          uint64_t v67 = [v60 sqlString];
          _NSCoreDataLog(8, @"sql connection fetch statement: '%@'", v68, v69, v70, v71, v72, v73, v67);
        }
        -[NSSQLiteConnection selectRowsWithStatement:cached:](v63, v60, v61 != 0);
        double v74 = CFAbsoluteTimeGetCurrent();
        BOOL v93 = v66;
        Initialize = 0;
        unint64_t v76 = 0;
        if (v65) {
          double v77 = v74 - Current;
        }
        else {
          double v77 = 0.0;
        }
        do
        {
          if (!Initialize)
          {
            Initialize = (double *)bufferResultSetAllocateInitialize(v76, v62);
            Initialize[1] = v74;
            *(_DWORD *)Initialize = 0;
            *((_DWORD *)Initialize + 10) |= 2u;
          }
          *(_DWORD *)(v62 + 16) = 0x7FFFFFFF;
          double v78 = 0.0;
          if (v65) {
            double v78 = CFAbsoluteTimeGetCurrent();
          }
          -[NSSQLiteConnection fetchBufferResultSet:usingFetchPlan:]((uint64_t)v63, (uint64_t)Initialize, v62);
          uint64_t v79 = *((unsigned int *)Initialize + 8);
          if (v79)
          {
            uint64_t v80 = (unsigned int **)*((void *)Initialize + 6);
            unint64_t v76 = 80;
            do
            {
              uint64_t v81 = *v80++;
              v76 += v81[1] + 4 * *v81;
              --v79;
            }
            while (v79);
          }
          else
          {
            unint64_t v76 = 80;
          }
          int v82 = *((_DWORD *)Initialize + 10);
          if (v65) {
            double v77 = v77 + CFAbsoluteTimeGetCurrent() - v78;
          }
        }
        while ((v82 & 1) == 0);
        -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v63, v61 != 0);
        uint64_t v83 = (void *)_prepareLargeDictionaryResults((unsigned int *)Initialize, a1, 1);
        v99[0] = v83;
        uint64_t v84 = _prepareBufferedDictionaryResult((void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v99 count:1], a1);

        id v12 = (void *)v84;
        if (v65) {
          _NSCoreDataLog(8, @"sql connection fetch time: %.4fs", v85, v86, v87, v88, v89, v90, *(uint64_t *)&v77);
        }
        [v93 drain];
        [0 drain];
        goto LABEL_9;
      }
      if (+[NSXPCStoreServer debugDefault]) {
        _NSCoreDataLog(8, @"logically false fetch request %@ short circuits.", v6, v7, v8, v9, v10, v11, v4);
      }
    }
    id v12 = 0;
LABEL_9:
    uint64_t v95 = 1;
    [v2 appendBytes:&v95 length:8];
    uint64_t v13 = 0;
    if ([v12 count] && v12) {
      uint64_t v13 = v12[3];
    }
    v99[0] = 0;
    unint64_t v97 = 2882400171;
    [v2 appendBytes:&v97 length:8];
    if (v13 && *(_DWORD *)v13)
    {
      [v2 appendBytes:v13 length:4];
      [v2 appendBytes:v99 length:4];
      uint64_t v96 = *(void *)(v13 + 16);
      [v2 appendBytes:&v96 length:8];
      [v2 appendBytes:**(void **)(v13 + 48) length:v96];
    }
    else
    {
      [v2 appendBytes:v99 length:4];
    }
    goto LABEL_41;
  }
  *(_DWORD *)(*(void *)(a1 + 136) + 72) |= 0x20u;
  uint64_t v14 = [(id)a1 request];
  if (*(void *)(a1 + 120))
  {
    uint64_t v15 = v14;
    uint64_t v16 = [(id)a1 fetchStatement];
    if (v16 && !*(unsigned char *)(v16 + 40))
    {
      uint64_t v34 = (void *)[(id)a1 fetchStatement];
      int v35 = *(unsigned __int8 *)(a1 + 202);
      uint64_t v36 = *(void *)(a1 + 136);
      uint64_t v37 = *(void **)(a1 + 24);
      if (+[NSSQLCore debugDefault] > 0
        || +[NSXPCStoreServer debugDefault])
      {
        double v38 = CFAbsoluteTimeGetCurrent();
        int v39 = 1;
      }
      else
      {
        int v39 = 0;
        double v38 = 0.0;
      }
      id v92 = objc_alloc_init(MEMORY[0x1E4F28B28]);
      if (v39)
      {
        uint64_t v40 = [v34 sqlString];
        _NSCoreDataLog(8, @"sql connection fetch statement: '%@'", v41, v42, v43, v44, v45, v46, v40);
      }
      -[NSSQLiteConnection selectRowsWithStatement:cached:](v37, v34, v35 != 0);
      double v47 = CFAbsoluteTimeGetCurrent();
      int v91 = v35;
      uint64_t v23 = 0;
      unsigned int v48 = 0;
      if (v39) {
        double v49 = v47 - v38;
      }
      else {
        double v49 = 0.0;
      }
      do
      {
        if (v23) {
          fetchResultSetDeallocate((uint64_t)v23);
        }
        uint64_t v23 = fetchResultSetAllocateInitialize(v48, (*(_DWORD *)(v36 + 72) >> 5) & 1);
        *((double *)v23 + 1) = v47;
        *uint64_t v23 = 0;
        *(_DWORD *)(v36 + 16) = 0x7FFFFFFF;
        double v50 = 0.0;
        if (v39) {
          double v50 = CFAbsoluteTimeGetCurrent();
        }
        -[NSSQLiteConnection fetchResultSet:usingFetchPlan:]((uint64_t)v37, (uint64_t)v23, v36);
        int v51 = v23[12];
        int v53 = v23[4];
        int v52 = v23[5];
        if (v39) {
          double v49 = v49 + CFAbsoluteTimeGetCurrent() - v50;
        }
        unsigned int v48 = v52 * v53;
      }
      while ((v51 & 1) == 0);
      -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v37, v91 != 0);
      if (v39) {
        _NSCoreDataLog(8, @"sql connection fetch time: %.4fs", v54, v55, v56, v57, v58, v59, *(uint64_t *)&v49);
      }
      [v92 drain];
      [0 drain];
      goto LABEL_21;
    }
    if (+[NSXPCStoreServer debugDefault]) {
      _NSCoreDataLog(8, @"logically false fetch request %@ short circuits.", v17, v18, v19, v20, v21, v22, v15);
    }
  }
  uint64_t v23 = 0;
LABEL_21:
  uint64_t v94 = 1;
  [v2 appendBytes:&v94 length:8];
  v99[0] = 0;
  uint64_t v96 = 2882400171;
  [v2 appendBytes:&v96 length:8];
  if (v23 && *v23)
  {
    [v2 appendBytes:v23 length:4];
    uint64_t v24 = v23 + 5;
    [v2 appendBytes:v23 + 5 length:4];
    [v2 appendBytes:&v96 length:8];
    int v98 = *v23;
    [v2 appendBytes:&v98 length:4];
    int v98 = v23[1];
    [v2 appendBytes:&v98 length:4];
    unint64_t v97 = (unint64_t)*((double *)v23 + 1);
    [v2 appendBytes:&v97 length:8];
    int v98 = v23[4];
    [v2 appendBytes:&v98 length:4];
    int v98 = v23[5];
    [v2 appendBytes:&v98 length:4];
    int v98 = v23[6];
    [v2 appendBytes:&v98 length:4];
    int v98 = v23[7];
    [v2 appendBytes:&v98 length:4];
    unint64_t v97 = *((void *)v23 + 4);
    [v2 appendBytes:&v97 length:8];
    unint64_t v97 = *((void *)v23 + 5);
    [v2 appendBytes:&v97 length:8];
    int v98 = v23[12];
    [v2 appendBytes:&v98 length:4];
    [v2 appendBytes:v99 length:4];
    [v2 appendBytes:v99 length:8];
    [v2 appendBytes:v99 length:8];
    [v2 appendBytes:v99 length:8];
    [v2 appendBytes:v99 length:8];
    [v2 appendBytes:v99 length:8];
    int v25 = [v2 length];
    if ((int)(((v25 + 7) & 0xFFFFFFF8) - v25) >= 1) {
      objc_msgSend(v2, "appendBytes:length:", v99);
    }
    uint64_t v26 = *v24;
    if (v26)
    {
      int v27 = *v24;
      do
      {
        [v2 appendBytes:v99 length:8];
        --v27;
      }
      while (v27);
      [v2 appendBytes:&v96 length:8];
      uint64_t v28 = 0;
      uint64_t v29 = 8 * v26;
      do
      {
        uint64_t v95 = 0;
        uint64_t v95 = *(void *)(*((void *)v23 + 9) + v28);
        [v2 appendBytes:&v95 length:8];
        v28 += 8;
      }
      while (v29 != v28);
      uint64_t v30 = [v2 length];
      do
      {
        [v2 appendBytes:v99 length:8];
        LODWORD(v26) = v26 - 1;
      }
      while (v26);
      uint64_t v31 = 0;
      do
      {
        int v32 = [v2 length];
        if ((int)(((v32 + 7) & 0xFFFFFFF8) - v32) >= 1) {
          objc_msgSend(v2, "appendBytes:length:", v99);
        }
        uint64_t v95 = 0;
        uint64_t v95 = [v2 length];
        objc_msgSend(v2, "replaceBytesInRange:withBytes:", v30 + v31, 8, &v95);
        [v2 appendBytes:*(void *)(*((void *)v23 + 8) + v31) length:*(void *)(*((void *)v23 + 9) + v31)];
        v31 += 8;
      }
      while (v29 != v31);
    }
    else
    {
      [v2 appendBytes:&v96 length:8];
      [v2 length];
    }
  }
  else
  {
    [v2 appendBytes:v99 length:4];
  }
  id v12 = 0;
  if (v23) {
    fetchResultSetDeallocate((uint64_t)v23);
  }
LABEL_41:
  if (v12) {

  }
  return v2;
}

void sub_18AC27184(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exc_buf);
  }
  if (a2 != 2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AC27134);
  }
  id v11 = objc_begin_catch(exc_buf);
  id v12 = v11;
  objc_exception_throw(v11);
}

void sub_18AC2734C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC27314);
  }
  JUMPOUT(0x18AC2728CLL);
}

void sub_18AC27368(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AC2728CLL);
  }
  JUMPOUT(0x18AC273E4);
}

void sub_18AC27374(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AC27380);
  }
  JUMPOUT(0x18AC2728CLL);
}

void sub_18AC273CC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC27394);
  }
  JUMPOUT(0x18AC2728CLL);
}

void sub_18AC273DC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AC273E8);
  }
  JUMPOUT(0x18AC2728CLL);
}

void sub_18AC27568(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC27588);
  }
  JUMPOUT(0x18AC2728CLL);
}

void sub_18AC28570(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AC28358);
  }
  _Unwind_Resume(exc_buf);
}

void *bufferResultSetIngestRow(uint64_t a1, const void *a2, size_t a3)
{
  v99[1] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (a3 & 7) + a3;
  unint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = v6 >> 1;
  size_t v8 = v5 + 8;
  uint64_t v9 = *(unsigned char **)(a1 + 72);
  uint64_t v10 = *(unsigned int **)(a1 + 64);
  int64_t v11 = v9 - (unsigned char *)v10;
  if (v5 >= v6 >> 1) {
    size_t v12 = v5 + 8;
  }
  else {
    size_t v12 = (a3 & 7) + a3;
  }
  size_t v13 = 4 * *v10;
  unsigned int v14 = v13 + 4;
  if (v5 < v6 >> 1 && v6 - v11 >= v5 + v14)
  {
    uint64_t v18 = (char *)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    unint64_t v19 = v12 + v13;
    if (v6 <= v12 + v13)
    {
      uint64_t v20 = v19 + v6;
    }
    else if (v6 <= 0x7EFF81 || v19 >= 0x7EFF81)
    {
      uint64_t v20 = 2 * v6;
    }
    else
    {
      uint64_t v20 = v6 + 8322945;
    }
    int v27 = getpagesize();
    vm_size_t v28 = (v20 + v27 - 1) / (unint64_t)v27 * v27;
    *(void *)address = 0;
    uint64_t v29 = (vm_map_t *)MEMORY[0x1E4F14960];
    if (vm_allocate(*MEMORY[0x1E4F14960], (vm_address_t *)address, v28, 754974721))
    {
      vm_size_t v30 = v12 + v14 + *(void *)(a1 + 16);
      uint64_t v31 = vm_allocate(*v29, (vm_address_t *)address, v30, 754974721);
      if (v31)
      {
        uint64_t v77 = v31;
        _NSCoreDataLog(1, @"*** vm_allocate(size=%lld) failed (error code=%d)\n", v32, v33, v34, v35, v36, v37, v30);
        uint64_t v78 = *MEMORY[0x1E4F1C3B8];
        int v98 = @"VMErrorCode";
        v99[0] = [NSNumber numberWithInt:v77];
        uint64_t v79 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v99 forKeys:&v98 count:1];
        unint64_t v76 = @"Unable to allocate VM Memory";
        uint64_t v75 = v78;
        goto LABEL_81;
      }
    }
    vm_copy(*v29, *(void *)(a1 + 64), *(void *)(a1 + 16), *(vm_address_t *)address);
    MEMORY[0x18C128580](*v29, *(void *)(a1 + 64), *(void *)(a1 + 16));
    uint64_t v38 = *(void *)address;
    *(void *)(a1 + 64) = *(void *)address;
    *(void *)(*(void *)(a1 + 48) + 8 * (*(_DWORD *)(a1 + 32) - 1)) = v38;
    uint64_t v10 = *(unsigned int **)(a1 + 64);
    uint64_t v18 = (char *)v10 + v11;
    *(void *)(a1 + 72) = (char *)v10 + v11;
    *(_DWORD *)a1 = *v10;
    *(void *)(a1 + 16) = v28;
  }
  else
  {
    memcpy(v9, *(const void **)(a1 + 56), v13);
    *(_DWORD *)(*(void *)(a1 + 64) + 4) = v11;
    bzero(*(void **)(a1 + 56), v13);
    BOOL v15 = v5 >= v7 && v11 == 8;
    if (v15 && v12 > *(void *)(a1 + 16))
    {
      uint64_t v16 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone) {
        uint64_t v16 = malloc_default_zone();
      }
      uint64_t v17 = malloc_type_zone_realloc(v16, *(void **)(a1 + 64), v12 + 8, 0xF296BB30uLL);
      *(void *)(a1 + 64) = v17;
      *(void *)(*(void *)(a1 + 48) + 8 * (*(_DWORD *)(a1 + 32) - 1)) = v17;
      uint64_t v10 = *(unsigned int **)(a1 + 64);
      *(void *)(a1 + 72) = v10;
      if (v10)
      {
        *(void *)uint64_t v10 = 0;
        uint64_t v18 = (char *)(v10 + 2);
        *(void *)(a1 + 72) = v10 + 2;
        goto LABEL_43;
      }
      uint64_t v88 = [NSString stringWithUTF8String:"PF_REALLOC failed to allocate buffer to %ld bytes"];
      _NSCoreDataLog(17, v88, v89, v90, v91, v92, v93, v94, v12 + 8);
      uint64_t v87 = __pflogFaultLog;
      if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)address = 134217984;
        *(void *)&address[4] = v12 + 8;
        goto LABEL_78;
      }
      goto LABEL_79;
    }
    int v21 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v21 + 1;
    if (v5 < v7) {
      size_t v8 = *(void *)(a1 + 16);
    }
    unsigned int v22 = *(_DWORD *)(a1 + 24);
    if (v21 + 1 >= v22)
    {
      uint64_t v23 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone) {
        uint64_t v23 = malloc_default_zone();
      }
      uint64_t v24 = malloc_type_zone_realloc(v23, *(void **)(a1 + 48), 8 * (v22 + 512), 0x80040B8603338uLL);
      if (!v24)
      {
        uint64_t v80 = [NSString stringWithUTF8String:"PF_REALLOC failed to allocate buffer to %ld bytes"];
        _NSCoreDataLog(17, v80, v81, v82, v83, v84, v85, v86, 8 * (v22 + 512));
        uint64_t v87 = __pflogFaultLog;
        if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)address = 134217984;
          *(void *)&address[4] = 8 * (v22 + 512);
LABEL_78:
          _os_log_fault_impl(&dword_18AB82000, v87, OS_LOG_TYPE_FAULT, "CoreData: PF_REALLOC failed to allocate buffer to %ld bytes", address, 0xCu);
        }
LABEL_79:
        uint64_t v75 = *MEMORY[0x1E4F1C4A0];
        unint64_t v76 = @"realloc failed";
        goto LABEL_80;
      }
      *(void *)(a1 + 48) = v24;
      v24[v22 + 511] = 0;
      *(_DWORD *)(a1 + 24) = v22 + 512;
    }
    int v25 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if ((*(unsigned char *)(a1 + 40) & 4) != 0)
    {
      if (!_PF_Private_Malloc_Zone) {
        int v25 = malloc_default_zone();
      }
      uint64_t v26 = malloc_type_zone_calloc(v25, 1uLL, v8, 0x8075834uLL);
    }
    else
    {
      if (!_PF_Private_Malloc_Zone) {
        int v25 = malloc_default_zone();
      }
      uint64_t v26 = malloc_type_zone_malloc(v25, v8, 0xC5AA1654uLL);
    }
    *(void *)(a1 + 64) = v26;
    *(void *)(*(void *)(a1 + 48) + 8 * v21) = v26;
    uint64_t v10 = *(unsigned int **)(a1 + 64);
    *(void *)(a1 + 72) = v10;
    if (!v10)
    {
      uint64_t v60 = [NSString stringWithUTF8String:"PF_MALLOC failed to allocate buffer to %ld bytes"];
      _NSCoreDataLog(17, v60, v61, v62, v63, v64, v65, v66, v8);
      uint64_t v67 = __pflogFaultLog;
      if (!os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
      {
LABEL_72:
        uint64_t v75 = *MEMORY[0x1E4F1C4A0];
        unint64_t v76 = @"malloc failed";
LABEL_80:
        uint64_t v79 = 0;
LABEL_81:
        id v95 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, v75, 134183, (uint64_t)v76, v79);
        objc_exception_throw(v95);
      }
      *(_DWORD *)address = 134217984;
      *(void *)&address[4] = v8;
LABEL_71:
      _os_log_fault_impl(&dword_18AB82000, v67, OS_LOG_TYPE_FAULT, "CoreData: PF_MALLOC failed to allocate buffer to %ld bytes", address, 0xCu);
      goto LABEL_72;
    }
    *(void *)uint64_t v10 = 0;
    uint64_t v18 = (char *)(v10 + 2);
    *(void *)(a1 + 72) = v10 + 2;
    *(_DWORD *)(a1 + 36) = v21;
  }
LABEL_43:
  unsigned int v39 = *(_DWORD *)(a1 + 28);
  if (*v10 >= v39)
  {
    if ((*(unsigned char *)(a1 + 40) & 8) != 0)
    {
      uint64_t v42 = v39 + 0x4000;
      *(void *)address = 0;
      uint64_t v43 = (vm_map_t *)MEMORY[0x1E4F14960];
      if (vm_allocate(*MEMORY[0x1E4F14960], (vm_address_t *)address, 4 * v42, 754974721)) {
        _NSCoreDataLog(2, @"*** vm_allocate(size=%lld) failed (error code=%d)\n", v44, v45, v46, v47, v48, v49, v42);
      }
      vm_copy(*v43, *(void *)(a1 + 56), 4 * *(unsigned int *)(a1 + 28), *(vm_address_t *)address);
      MEMORY[0x18C128580](*v43, *(void *)(a1 + 56), 4 * *(unsigned int *)(a1 + 28));
      uint64_t v50 = *(void *)address;
      *(void *)(a1 + 56) = *(void *)address;
      *(_DWORD *)(v50 + 4 * v42 - 4) = 0;
      *(_DWORD *)(a1 + 28) = v42;
      uint64_t v18 = *(char **)(a1 + 72);
    }
    else
    {
      uint64_t v40 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone) {
        uint64_t v40 = malloc_default_zone();
      }
      uint64_t v41 = malloc_type_zone_realloc(v40, *(void **)(a1 + 56), 4 * (v39 + 512), 0x100004052888210uLL);
      *(void *)(a1 + 56) = v41;
      v41[v39 + 511] = 0;
      *(_DWORD *)(a1 + 28) = v39 + 512;
    }
  }
  uint64_t result = memcpy(v18, a2, a3);
  *(void *)(a1 + 72) += a3;
  int v52 = *(_DWORD **)(a1 + 64);
  *(_DWORD *)(*(void *)(a1 + 56) + 4 * (*v52)++) = a3;
  ++*(_DWORD *)a1;
  if (v5 >= v7 && (*(unsigned char *)(a1 + 40) & 8) == 0)
  {
    v52[1] = a3 + 8;
    int v53 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v53 + 1;
    size_t v54 = *(void *)(a1 + 16);
    unsigned int v55 = *(_DWORD *)(a1 + 24);
    if (v53 + 1 >= v55)
    {
      uint64_t v56 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone) {
        uint64_t v56 = malloc_default_zone();
      }
      uint64_t v57 = malloc_type_zone_realloc(v56, *(void **)(a1 + 48), 8 * (v55 + 512), 0x80040B8603338uLL);
      *(void *)(a1 + 48) = v57;
      v57[v55 + 511] = 0;
      *(_DWORD *)(a1 + 24) = v55 + 512;
    }
    uint64_t v58 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if ((*(unsigned char *)(a1 + 40) & 4) != 0)
    {
      if (!_PF_Private_Malloc_Zone) {
        uint64_t v58 = malloc_default_zone();
      }
      uint64_t result = malloc_type_zone_calloc(v58, 1uLL, v54, 0x4FAE3C7uLL);
    }
    else
    {
      if (!_PF_Private_Malloc_Zone) {
        uint64_t v58 = malloc_default_zone();
      }
      uint64_t result = malloc_type_zone_malloc(v58, v54, 0x614D6F68uLL);
    }
    *(void *)(a1 + 64) = result;
    *(void *)(*(void *)(a1 + 48) + 8 * v53) = result;
    uint64_t v59 = *(void **)(a1 + 64);
    *(void *)(a1 + 72) = v59;
    if (v59)
    {
      void *v59 = 0;
      *(void *)(a1 + 72) = v59 + 1;
      *(_DWORD *)(a1 + 36) = v53;
      return result;
    }
    uint64_t v68 = [NSString stringWithUTF8String:"PF_MALLOC failed to allocate buffer to %ld bytes"];
    _NSCoreDataLog(17, v68, v69, v70, v71, v72, v73, v74, v54);
    uint64_t v67 = __pflogFaultLog;
    if (!os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT)) {
      goto LABEL_72;
    }
    *(_DWORD *)address = 134217984;
    *(void *)&address[4] = v54;
    goto LABEL_71;
  }
  return result;
}

void *bufferResultSetAllocateInitialize(unint64_t a1, uint64_t a2)
{
  if (a1 <= 0x800) {
    size_t v2 = 0x4000;
  }
  else {
    size_t v2 = a1;
  }
  unsigned int v3 = *(_DWORD *)(a2 + 72) & 0x20;
  uint64_t v4 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v4 = malloc_default_zone();
  }
  unint64_t v5 = malloc_type_zone_calloc(v4, 1uLL, 0x50uLL, 0x10900404577C156uLL);
  v5[2] = v2;
  *((_DWORD *)v5 + 6) = 512;
  *((_DWORD *)v5 + 8) = 1;
  unint64_t v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    unint64_t v6 = malloc_default_zone();
  }
  unint64_t v7 = malloc_type_zone_malloc(v6, 0x1000uLL, 0x80040B8603338uLL);
  void v5[6] = v7;
  v7[511] = 0;
  size_t v8 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (v3)
  {
    if (!_PF_Private_Malloc_Zone) {
      size_t v8 = malloc_default_zone();
    }
    uint64_t v9 = malloc_type_zone_calloc(v8, 1uLL, v2, 0x548BBA05uLL);
  }
  else
  {
    if (!_PF_Private_Malloc_Zone) {
      size_t v8 = malloc_default_zone();
    }
    uint64_t v9 = malloc_type_zone_malloc(v8, v2, 0x57E6EBC6uLL);
  }
  v5[8] = v9;
  *(void *)void v5[6] = v9;
  uint64_t v10 = (void *)v5[8];
  *uint64_t v10 = 0;
  v5[9] = v10 + 1;
  *((_DWORD *)v5 + 9) = 0;
  int64_t v11 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    int64_t v11 = malloc_default_zone();
  }
  size_t v12 = malloc_type_zone_calloc(v11, 1uLL, 0x800uLL, 0xB0160FCFuLL);
  void v5[7] = v12;
  v12[511] = 0;
  *size_t v12 = 0;
  *((_DWORD *)v5 + 10) = v5[5] & 0xFFFFFFFB | (v3 >> 3);
  *(_DWORD *)unint64_t v5 = 0;
  return v5;
}

uint64_t _prepareBufferedDictionaryResult(void *a1, uint64_t a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (![a1 count]) {
    return NSArray_EmptyArray;
  }
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v4 = [a1 countByEnumeratingWithState:&v48 objects:v53 count:16];
  if (!v4) {
    return NSArray_EmptyArray;
  }
  uint64_t v5 = v4;
  unsigned int v6 = 0;
  unsigned int v7 = 0;
  uint64_t v8 = *(void *)v49;
  unint64_t v9 = 0x1E911F000uLL;
  do
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (*(void *)v49 != v8) {
        objc_enumerationMutation(a1);
      }
      uint64_t v11 = *(void *)(*(void *)(*((void *)&v48 + 1) + 8 * i) + 24);
      uint64_t v12 = *(unsigned int *)(v11 + 32);
      if (!v12) {
        goto LABEL_14;
      }
      size_t v13 = *(_DWORD ***)(v11 + 48);
      uint64_t v14 = *(unsigned int *)(v11 + 32);
      do
      {
        BOOL v15 = *v13++;
        v7 += *v15;
        --v14;
      }
      while (v14);
      if (v11)
      {
        int v16 = 0;
        uint64_t v17 = *(uint64_t **)(v11 + 48);
        do
        {
          uint64_t v18 = *v17++;
          int v16 = v16 + *(_DWORD *)(v18 + 4) - 8;
          --v12;
        }
        while (v12);
      }
      else
      {
LABEL_14:
        int v16 = 0;
      }
      v6 += v16;
    }
    uint64_t v5 = [a1 countByEnumeratingWithState:&v48 objects:v53 count:16];
  }
  while (v5);
  if (!v7) {
    return NSArray_EmptyArray;
  }
  unint64_t v19 = v6 + 8 + 4 * v7;
  if (v19 <= 0x400) {
    unint64_t v19 = 1024;
  }
  uint64_t v39 = (v19 + 7) & 0xFFFFFFFF8;
  uint64_t v40 = a2;
  uint64_t v20 = PF_CALLOC_SCANNED_BYTES(v39);
  _DWORD *v20 = v7;
  v20[1] = v6 + 8;
  uint64_t v41 = (uint64_t)v20;
  obuint64_t j = a1;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  uint64_t v21 = [a1 countByEnumeratingWithState:&v44 objects:v52 count:16];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = (char *)(v41 + 8);
    uint64_t v24 = (_DWORD *)(v41 + v6 + 8);
    uint64_t v43 = *(void *)v45;
    do
    {
      uint64_t v25 = 0;
      do
      {
        if (*(void *)v45 != v43) {
          objc_enumerationMutation(obj);
        }
        uint64_t v26 = *(void *)(*((void *)&v44 + 1) + 8 * v25);
        if (v26) {
          uint64_t v27 = *(void *)(v26 + *(int *)(v9 + 1464));
        }
        else {
          uint64_t v27 = 0;
        }
        unint64_t v28 = v9;
        if (*(_DWORD *)(v27 + 32))
        {
          unint64_t v29 = 0;
          do
          {
            vm_size_t v30 = *(int **)(*(void *)(v27 + 48) + 8 * v29);
            int v31 = *v30;
            size_t v32 = (v30[1] - 8);
            uint64_t v33 = v30 + 2;
            memcpy(v23, v30 + 2, v32);
            if (v31 == 1)
            {
              *uint64_t v24 = v32;
              size_t v34 = 4;
            }
            else
            {
              uint64_t v35 = (char *)v33 + v32;
              size_t v34 = (4 * v31);
              memcpy(v24, v35, v34);
            }
            v23 += v32;
            uint64_t v24 = (_DWORD *)((char *)v24 + v34);
            ++v29;
          }
          while (v29 < *(unsigned int *)(v27 + 32));
        }
        ++v25;
        unint64_t v9 = v28;
      }
      while (v25 != v22);
      uint64_t v36 = [obj countByEnumeratingWithState:&v44 objects:v52 count:16];
      uint64_t v22 = v36;
    }
    while (v36);
  }
  uint64_t v37 = (unsigned int *)bufferResultSetAllocateWithBuffer(v39, v41);
  return _prepareLargeDictionaryResults(v37, v40, 0);
}

void bufferResultSetDeallocate(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 8 * v2;
    uint64_t v5 = (unsigned int *)MEMORY[0x1E4F14960];
    do
    {
      if ((*(unsigned char *)(a1 + 40) & 8) != 0)
      {
        MEMORY[0x18C128580](*v5, *(void *)(a1 + 64), *(void *)(a1 + 16));
      }
      else
      {
        unsigned int v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
        if (!_PF_Private_Malloc_Zone) {
          unsigned int v6 = malloc_default_zone();
        }
        malloc_zone_free(v6, *(void **)(*(void *)(a1 + 48) + v3));
      }
      v3 += 8;
    }
    while (v4 != v3);
  }
  unsigned int v7 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    unsigned int v7 = malloc_default_zone();
  }
  malloc_zone_free(v7, *(void **)(a1 + 48));
  if ((*(unsigned char *)(a1 + 40) & 8) == 0 && *(_DWORD *)(a1 + 28))
  {
    uint64_t v8 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      uint64_t v8 = malloc_default_zone();
    }
    malloc_zone_free(v8, *(void **)(a1 + 56));
  }
  unint64_t v9 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    unint64_t v9 = malloc_default_zone();
  }

  malloc_zone_free(v9, (void *)a1);
}

void *bufferResultSetAllocateWithBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v4 = malloc_default_zone();
  }
  uint64_t v5 = malloc_type_zone_calloc(v4, 1uLL, 0x50uLL, 0x10900404577C156uLL);
  v5[2] = a1;
  *((_DWORD *)v5 + 6) = 2;
  *((_DWORD *)v5 + 8) = 1;
  unsigned int v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    unsigned int v6 = malloc_default_zone();
  }
  unsigned int v7 = malloc_type_zone_malloc(v6, 0x10uLL, 0x80040B8603338uLL);
  void v5[6] = v7;
  v7[1] = 0;
  v5[8] = a2;
  *(void *)void v5[6] = a2;
  uint64_t v8 = (_DWORD *)v5[8];
  v5[9] = v8;
  *((_DWORD *)v5 + 9) = 0;
  *(_DWORD *)uint64_t v5 = *v8;
  return v5;
}

void _writeStringIntoData(void *a1, void *a2, void *a3)
{
  uint64_t v10 = 0;
  int v6 = [a2 length];
  if ((int)(((v6 + 3) & 0xFFFFFFFC) - v6) >= 1) {
    objc_msgSend(a2, "appendBytes:length:", &v10);
  }
  uint64_t v7 = 2 * [a1 length];
  unsigned int v9 = bswap32(v7);
  [a2 appendBytes:&v9 length:4];
  [a2 appendBytes:&v10 length:4];
  if (v7)
  {
    uint64_t v8 = a3;
    if (v7 >= 0x400) {
      uint64_t v8 = malloc_type_malloc(v7 | 1, 0xA8527ED4uLL);
    }
    [a1 getCharacters:v8];
    [a2 appendBytes:v8 length:v7];
    if (v8 != a3) {
      free(v8);
    }
  }
}

uint64_t _writeInt32IntoData(void *a1, unsigned int a2)
{
  int v4 = [a1 length];
  if ((int)(((v4 + 3) & 0xFFFFFFFC) - v4) >= 1)
  {
    uint64_t v7 = 0;
    objc_msgSend(a1, "appendBytes:length:", &v7);
  }
  unsigned int v6 = bswap32(a2);
  return [a1 appendBytes:&v6 length:4];
}

NSBatchUpdateResult *_executeBatchUpdateRequest(void *a1, uint64_t *a2)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v68 = (void *)[a1 request];
  if (a1) {
    int v4 = (sqlite3 **)a1[3];
  }
  else {
    int v4 = 0;
  }
  int v67 = objc_msgSend((id)objc_msgSend(a1, "request"), "_secureOperation");
  uint64_t v65 = a2;
  if (a1 && (uint64_t v5 = a1[1]) != 0) {
    int v6 = (*(unsigned __int8 *)(v5 + 201) >> 2) & 1;
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = [v68 resultType];
  uint64_t v8 = objc_msgSend((id)objc_msgSend(v68, "propertiesToUpdate"), "count");
  if (v8) {
    uint64_t v14 = &unk_1ED7E2708;
  }
  else {
    uint64_t v14 = &unk_1ED7E26E0;
  }
  if (!a1 || !v8) {
    goto LABEL_17;
  }
  uint64_t v15 = a1[12];
  if (!v15)
  {
    uint64_t v14 = &unk_1ED7E2708;
LABEL_17:
    uint64_t v18 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:134030 userInfo:v14];
    uint64_t v63 = 0;
    unint64_t v19 = 0;
    int v64 = 1;
    BOOL v20 = 0;
    goto LABEL_74;
  }
  if (*(unsigned char *)(v15 + 40))
  {
    _NSCoreDataLog(6, @"Short-circuiting batch update: impossible condition in where clause (2)", v9, v10, (uint64_t)v14, v11, v12, v13, v62);
    uint64_t v16 = [v68 resultType];
    if (v16 == 1)
    {
      uint64_t v28 = [MEMORY[0x1E4F1C978] array];
    }
    else
    {
      if (v16 == 2)
      {
        uint64_t v17 = &unk_1ED7E2C68;
LABEL_37:
        unint64_t v19 = -[NSBatchUpdateResult initWithResultType:andObject:]([NSBatchUpdateResult alloc], "initWithResultType:andObject:", [v68 resultType], v17);
        uint64_t v18 = 0;
        BOOL v20 = 0;
        uint64_t v63 = 0;
        int v64 = 1;
        goto LABEL_74;
      }
      uint64_t v28 = [NSNumber numberWithBool:0];
    }
    uint64_t v17 = (void *)v28;
    goto LABEL_37;
  }
  if (v67) {
    -[NSSQLiteConnection setSecureDeleteMode:]((uint64_t)v4, 1);
  }
  uint64_t v21 = a1[1];
  if (v21) {
    [*(id *)(v21 + 216) lock];
  }
  -[NSSQLiteConnection beginTransaction]((uint64_t)v4);
  if (v7 == 1) {
    int v22 = 1;
  }
  else {
    int v22 = v6;
  }
  uint64_t v66 = v7;
  if (v22 == 1)
  {
    uint64_t v23 = (void *)-[NSSQLBatchOperationRequestContext createObjectIDCaptureStatementsForDrop:]((uint64_t)a1, 0);
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    uint64_t v24 = [v23 countByEnumeratingWithState:&v77 objects:v85 count:16];
    if (v24)
    {
      uint64_t v25 = *(void *)v78;
      do
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          if (*(void *)v78 != v25) {
            objc_enumerationMutation(v23);
          }
          -[NSSQLiteConnection prepareAndExecuteSQLStatement:]((uint64_t)v4, *(void **)(*((void *)&v77 + 1) + 8 * i));
          int v27 = 1;
        }
        uint64_t v24 = [v23 countByEnumeratingWithState:&v77 objects:v85 count:16];
      }
      while (v24);
    }
    else
    {
      int v27 = 0;
    }
    int v22 = 1;
  }
  else
  {
    int v27 = 0;
  }
  -[NSSQLiteConnection prepareAndExecuteSQLStatement:]((uint64_t)v4, (void *)v15);
  if (v4)
  {
    int v29 = sqlite3_changes(v4[9]);
    if (v22) {
      goto LABEL_43;
    }
  }
  else
  {
    int v29 = 0;
    if (v22)
    {
LABEL_43:
      vm_size_t v30 = (void *)-[NSSQLiteConnection gatherObjectIDsFromTable:]((uint64_t)v4, a1[11]);
      uint64_t v31 = (uint64_t)v30;
      if (v6 && [v30 count])
      {
        size_t v32 = objc_msgSend((id)-[NSSQLiteConnection gatherHistoryChangesFromTable:]((uint64_t)v4, a1[11]), "valueForKey:", @"updates");
        -[NSSQLiteConnection processUpdateRequest:withOIDs:forAttributes:]((uint64_t)v4, a1, v32, objc_msgSend((id)objc_msgSend(v68, "propertiesToUpdate"), "allKeys"));
        uint64_t v33 = (void *)a1[9];
      }
      else
      {
        uint64_t v33 = 0;
      }
      size_t v34 = (void *)-[NSSQLBatchOperationRequestContext createObjectIDCaptureStatementsForDrop:]((uint64_t)a1, 1);
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      uint64_t v35 = [v34 countByEnumeratingWithState:&v73 objects:v84 count:16];
      if (v35)
      {
        uint64_t v36 = *(void *)v74;
        do
        {
          for (uint64_t j = 0; j != v35; ++j)
          {
            if (*(void *)v74 != v36) {
              objc_enumerationMutation(v34);
            }
            -[NSSQLiteConnection prepareAndExecuteSQLStatement:]((uint64_t)v4, *(void **)(*((void *)&v73 + 1) + 8 * j));
          }
          uint64_t v35 = [v34 countByEnumeratingWithState:&v73 objects:v84 count:16];
        }
        while (v35);
      }
      int v27 = 0;
      uint64_t v63 = v31;
      goto LABEL_59;
    }
  }
  uint64_t v33 = 0;
  uint64_t v63 = 0;
LABEL_59:
  -[NSSQLiteConnection commitTransaction]((uint64_t)v4);
  unint64_t v19 = (NSBatchUpdateResult *)v29;
  uint64_t v38 = a1[1];
  if (v38)
  {
    if (atomic_load((unint64_t *)(v38 + 208)))
    {
      if (v29)
      {
        uint64_t v40 = [v4 registerCurrentQueryGenerationWithStore:a1[1]];
        if (v40)
        {
          uint64_t v41 = [NSString stringWithUTF8String:"Batch update failed to generate a post transaction query generation with error %d"];
          _NSCoreDataLog(17, v41, v42, v43, v44, v45, v46, v47, v40);
          long long v48 = __pflogFaultLog;
          if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 67109120;
            int v83 = v40;
            _os_log_fault_impl(&dword_18AB82000, v48, OS_LOG_TYPE_FAULT, "CoreData: Batch update failed to generate a post transaction query generation with error %d", buf, 8u);
          }
        }
      }
      else if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)a1) >= 1)
      {
        _NSCoreDataLog(6, @"Batch update did not affect any rows, not registering a query generation", v49, v50, v51, v52, v53, v54, v62);
      }
    }
  }
  if (v66 == 2) {
    uint64_t v63 = [NSNumber numberWithUnsignedInteger:v19];
  }
  if (![v68 resultType]) {
    uint64_t v63 = [NSNumber numberWithBool:1];
  }
  -[NSSQLiteConnection _performPostSaveTasks:andForceFullVacuum:](a1[3], v67, 0);
  uint64_t v55 = a1[1];
  if (v55)
  {
    [*(id *)(v55 + 216) unlock];
    uint64_t v56 = a1[1];
  }
  else
  {
    uint64_t v56 = 0;
  }
  -[NSSQLCore _postChangeNotificationWithTransactionID:](v56, v33);
  uint64_t v18 = 0;
  int v64 = 0;
  BOOL v20 = v27 != 0;
LABEL_74:
  -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v4, 0);
  if (v20)
  {
    uint64_t v57 = a1
        ? (void *)-[NSSQLBatchOperationRequestContext createObjectIDCaptureStatementsForDrop:]((uint64_t)a1, 1)
        : 0;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    uint64_t v58 = [v57 countByEnumeratingWithState:&v69 objects:v81 count:16];
    if (v58)
    {
      uint64_t v59 = *(void *)v70;
      do
      {
        for (uint64_t k = 0; k != v58; ++k)
        {
          if (*(void *)v70 != v59) {
            objc_enumerationMutation(v57);
          }
          -[NSSQLiteConnection prepareAndExecuteSQLStatement:]((uint64_t)v4, *(void **)(*((void *)&v69 + 1) + 8 * k));
        }
        uint64_t v58 = [v57 countByEnumeratingWithState:&v69 objects:v81 count:16];
      }
      while (v58);
    }
  }
  if (v67) {
    -[NSSQLiteConnection setSecureDeleteMode:]((uint64_t)v4, 0);
  }
  if (v65 && v18) {
    *uint64_t v65 = v18;
  }
  if ((v64 | 4) == 4)
  {
    if (v63) {
      return -[NSBatchUpdateResult initWithResultType:andObject:]([NSBatchUpdateResult alloc], "initWithResultType:andObject:", [v68 resultType], v63);
    }
    else {
      return 0;
    }
  }
  return v19;
}

void sub_18AC2A074(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15)
{
  if (a2)
  {
    if (a2 == 4 || a2 == 3)
    {
      [objc_begin_catch(exc_buf) errorObjectWithUserInfo:0];
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        objc_begin_catch(exc_buf);
        objc_exception_rethrow();
      }
      objc_begin_catch(exc_buf);
    }
    JUMPOUT(0x18AC29EACLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AC2A278(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC2A248);
  }
  JUMPOUT(0x18AC2A18CLL);
}

void sub_18AC2A2C8()
{
}

void sub_18AC2A3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  id v13 = objc_begin_catch(exception_object);
  if (v12) {
    objc_setProperty_nonatomic(v12, v14, v13, 48);
  }
  objc_end_catch();
}

NSBatchDeleteResult *_executeBatchDeleteRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  int v4 = (void *)[a1 request];
  uint64_t v5 = v4;
  if (a1) {
    uint64_t v87 = (void *)a1[3];
  }
  else {
    uint64_t v87 = 0;
  }
  long long v73 = a2;
  uint64_t v76 = [v4 resultType];
  int v6 = objc_msgSend((id)objc_msgSend(a1, "request"), "_secureOperation");
  long long v75 = v5;
  if (!a1)
  {
    BOOL v74 = 0;
    uint64_t v7 = 0;
    BOOL v82 = 0;
LABEL_11:
    unsigned int v70 = 0;
    goto LABEL_17;
  }
  uint64_t v7 = a1[15];
  if (!v7)
  {
    uint64_t v7 = -[NSSQLBatchDeleteRequestContext _createFetchRequestContextForObjectsToDelete]((uint64_t)a1);
    a1[15] = v7;
  }
  uint64_t v8 = (void *)a1[16];
  uint64_t v9 = a1[1];
  if (!v9)
  {
    BOOL v74 = 0;
    if (v8) {
      goto LABEL_8;
    }
LABEL_13:
    BOOL v82 = 0;
    goto LABEL_14;
  }
  unint64_t v10 = atomic_load((unint64_t *)(v9 + 208));
  BOOL v74 = v10 != 0;
  if (!v8) {
    goto LABEL_13;
  }
LABEL_8:
  BOOL v82 = [v8 count] != 0;
LABEL_14:
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v11 = *(void *)(v7 + 120);
  if (!v11) {
    goto LABEL_11;
  }
  unsigned int v70 = *(_DWORD *)(v11 + 184);
LABEL_17:
  int v79 = v6;
  if (v6) {
    -[NSSQLiteConnection setSecureDeleteMode:]((uint64_t)v87, 1);
  }
  if (a1)
  {
    uint64_t v12 = a1[1];
    if (v12) {
      [*(id *)(v12 + 216) lock];
    }
  }
  char v13 = 1;
  -[NSSQLiteConnection beginTransaction]((uint64_t)v87);
  if (v76 == 1)
  {
    if (a1) {
      uint64_t v14 = (void *)a1[3];
    }
    else {
      uint64_t v14 = 0;
    }
    -[NSSQLStoreRequestContext setConnection:](v7, v14);
    Request = _executeFetchRequest(v7);
    -[NSSQLStoreRequestContext setConnection:](v7, 0);
    if (!a1)
    {
      BOOL v34 = 0;
      uint64_t v17 = 0;
      long long v80 = 0;
      BOOL v83 = 0;
      uint64_t v72 = 0;
      uint64_t v37 = 0;
      BOOL v35 = 0;
      uint64_t v36 = 0;
      int v38 = 1;
      char v13 = 1;
      goto LABEL_62;
    }
    objc_setProperty_nonatomic(a1, v16, Request, 112);
    uint64_t v77 = a1[14];
  }
  else
  {
    uint64_t v17 = 0;
    if (!a1)
    {
      BOOL v34 = 0;
      long long v80 = 0;
      BOOL v83 = 0;
      BOOL v35 = 0;
      int v38 = 1;
      uint64_t v72 = 0;
      uint64_t v37 = 0;
      int v78 = 1;
      uint64_t v36 = 0;
      goto LABEL_96;
    }
    uint64_t v77 = 0;
  }
  if (a1[13])
  {
    uint64_t v84 = (void *)a1[13];
    long long v80 = (void *)a1[16];
    goto LABEL_33;
  }
  char v13 = 1;
  -[NSSQLBatchDeleteRequestContext _createDeleteStatements]((uint64_t)a1);
  long long v80 = (void *)a1[16];
  if (!a1[13])
  {
    BOOL v34 = 0;
    uint64_t v17 = 0;
    uint64_t v72 = 0;
    BOOL v83 = 0;
    BOOL v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = a1[5];
    int v38 = 1;
LABEL_62:
    int v78 = 1;
    goto LABEL_96;
  }
  uint64_t v84 = (void *)a1[13];
LABEL_33:
  if ([v84 count] == 3)
  {
    _executeBatchDeleteStatements((void *)[v84 objectAtIndexedSubscript:0], (uint64_t)v87);
    if (v74)
    {
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      uint64_t v18 = (void *)[v84 objectAtIndexedSubscript:1];
      uint64_t v19 = [v18 countByEnumeratingWithState:&v88 objects:v100 count:16];
      if (v19)
      {
        uint64_t v20 = *(void *)v89;
        do
        {
          for (uint64_t i = 0; i != v19; ++i)
          {
            if (*(void *)v89 != v20) {
              objc_enumerationMutation(v18);
            }
            uint64_t v22 = *(void *)(*((void *)&v88 + 1) + 8 * i);
            if (v22) {
              *(unsigned char *)(v22 + 41) = 1;
            }
          }
          uint64_t v19 = [v18 countByEnumeratingWithState:&v88 objects:v100 count:16];
        }
        while (v19);
      }
    }
    if (v82)
    {
      _executeBatchDeleteStatements((void *)[v80 objectAtIndexedSubscript:0], (uint64_t)v87);
      int v81 = 1;
    }
    else
    {
      int v81 = 0;
    }
    uint64_t v27 = a1[1];
    if (v27 && (*(unsigned char *)(v27 + 201) & 4) != 0)
    {
      uint64_t v25 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v87, "adapter"), "sqlCore"), "ancillarySQLModels"), "objectForKey:", @"NSPersistentHistoryTrackingKey"), "entityNamed:", @"CHANGE");
      uint64_t v28 = (NSSQLiteStatement *)[v87 adapter];
      uint64_t v29 = -[NSSQLEntity tempTableName](v25);
      vm_size_t v30 = -[NSSQLiteAdapter newDropTableStatementForTableNamed:](v28, v29);
      unsigned int v99 = v30;
      _executeBatchDeleteStatements((void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v99 count:1], (uint64_t)v87);

      uint64_t v31 = (__CFString *)[v87 adapter];
      if (v25)
      {
        v97[0] = [*(id *)(v25 + 40) objectForKey:@"ENTITY"];
        uint64_t v32 = [*(id *)(v25 + 40) objectForKey:@"ENTITYPK"];
      }
      else
      {
        uint64_t v32 = 0;
        v97[0] = 0;
      }
      v97[1] = v32;
      uint64_t v98 = [MEMORY[0x1E4F1C978] arrayWithObjects:v97 count:2];
      uint64_t v33 = -[NSSQLiteAdapter newCreateTempTableStatementForEntity:withAttributesToConstrain:](v31, v25, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v98 count:1]);
      uint64_t v96 = v33;
      _executeBatchDeleteStatements((void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v96 count:1], (uint64_t)v87);

      int v85 = 1;
    }
    else
    {
      int v85 = 0;
      uint64_t v25 = 0;
    }
    int v71 = _executeBatchDeleteStatements((void *)[v84 objectAtIndexedSubscript:1], (uint64_t)v87);
    switch(v76)
    {
      case 2:
        uint64_t v77 = [NSNumber numberWithInteger:v71];
        break;
      case 1:
        uint64_t v77 = a1[14];
        break;
      case 0:
        uint64_t v77 = [NSNumber numberWithBool:1];
        break;
    }
    int v26 = v81;
    if (v82)
    {
      _executeBatchDeleteStatements((void *)[v80 objectAtIndexedSubscript:1], (uint64_t)v87);
      int v26 = 0;
    }
    _executeBatchDeleteStatements((void *)[v84 objectAtIndexedSubscript:2], (uint64_t)v87);
    int v24 = v85;
    goto LABEL_73;
  }
  uint64_t v23 = [v75 resultType];
  if (!v23)
  {
    uint64_t v25 = 0;
    uint64_t v77 = [NSNumber numberWithBool:0];
    goto LABEL_65;
  }
  if (v23 == 2)
  {
    uint64_t v25 = 0;
    uint64_t v77 = [NSNumber numberWithInteger:0];
LABEL_65:
    int v24 = 0;
    int v71 = 0;
LABEL_67:
    int v26 = 0;
    int v81 = 0;
    goto LABEL_73;
  }
  if (v23 != 1)
  {
    int v24 = 0;
    int v71 = 0;
    uint64_t v25 = 0;
    goto LABEL_67;
  }
  int v24 = 0;
  int v71 = 0;
  uint64_t v25 = 0;
  int v26 = 0;
  int v81 = 0;
  uint64_t v77 = MEMORY[0x1E4F1CBF0];
LABEL_73:
  BOOL v39 = v26 != 0;
  uint64_t v36 = -[NSBatchDeleteResult initWithResultType:andObject:]([NSBatchDeleteResult alloc], "initWithResultType:andObject:", [v75 resultType], v77);
  -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v87, 0);
  if (v82)
  {
    -[NSSQLiteConnection processExternalDataReferenceFilesDeletedByRequest:]((uint64_t)v87, a1);
    uint64_t v40 = (void *)a1[17];
    if (v40) {
      _deleteExternalDataReferences(v40);
    }
    uint64_t v41 = (void *)a1[18];
    if (v41) {
      _deleteFileBackedFutures(v41);
    }
    _executeBatchDeleteStatements((void *)[v80 objectAtIndexedSubscript:3], (uint64_t)v87);
    int v81 = 0;
  }
  BOOL v35 = v81 != 0;
  uint64_t v42 = a1[1];
  if (v42 && (*(unsigned char *)(v42 + 201) & 4) != 0)
  {
    -[NSSQLiteConnection processDeleteRequest:]((uint64_t)v87, (uint64_t)a1);
    uint64_t v43 = (void *)a1[9];
    if (v25)
    {
      uint64_t v44 = (NSSQLiteStatement *)[v87 adapter];
      uint64_t v45 = -[NSSQLEntity tempTableName](v25);
      uint64_t v46 = -[NSSQLiteAdapter newDropTableStatementForTableNamed:](v44, v45);
      id v95 = v46;
      _executeBatchDeleteStatements((void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v95 count:1], (uint64_t)v87);

      int v24 = 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
  }
  BOOL v86 = v24 != 0;
  -[NSSQLiteConnection commitTransaction]((uint64_t)v87);
  if (v74)
  {
    if (v71 < 1)
    {
      if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)a1) >= 1) {
        _NSCoreDataLog(6, @"Batch delete did not affect any rows, not registering a query generation", v56, v57, v58, v59, v60, v61, v69);
      }
    }
    else
    {
      uint64_t v47 = [v87 registerCurrentQueryGenerationWithStore:a1[1]];
      if (v47)
      {
        uint64_t v48 = [NSString stringWithUTF8String:"Batch delete failed to generate a post transaction query generation with error %d"];
        _NSCoreDataLog(17, v48, v49, v50, v51, v52, v53, v54, v47);
        uint64_t v55 = __pflogFaultLog;
        if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67109120;
          int v94 = v47;
          _os_log_fault_impl(&dword_18AB82000, v55, OS_LOG_TYPE_FAULT, "CoreData: Batch delete failed to generate a post transaction query generation with error %d", buf, 8u);
        }
      }
    }
  }
  -[NSSQLiteConnection _performPostSaveTasks:andForceFullVacuum:](a1[3], v79, 0);
  uint64_t v62 = a1[1];
  if (v62) {
    [*(id *)(v62 + 216) unlock];
  }
  if (v70 <= 0x3A98) {
    -[NSSQLCore _postChangeNotificationWithTransactionID:](a1[1], v43);
  }
  int v38 = 0;
  uint64_t v37 = 0;
  char v13 = 0;
  BOOL v83 = v39;
  int v78 = 0;
  uint64_t v72 = v25;
  uint64_t v17 = v84;
  BOOL v34 = v86;
LABEL_96:
  -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v87, 0);
  if (v17 && [v17 count] == 3)
  {
    if (v83)
    {
      _executeBatchDeleteStatements((void *)[v80 objectAtIndexedSubscript:1], (uint64_t)v87);
      -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v87, 0);
    }
    if (v35)
    {
      _executeBatchDeleteStatements((void *)[v80 objectAtIndexedSubscript:3], (uint64_t)v87);
      -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v87, 0);
    }
  }
  if (v34)
  {
    uint64_t v63 = (NSSQLiteStatement *)[v87 adapter];
    uint64_t v64 = -[NSSQLEntity tempTableName](v72);
    uint64_t v65 = -[NSSQLiteAdapter newDropTableStatementForTableNamed:](v63, v64);
    uint64_t v92 = v65;
    _executeBatchDeleteStatements((void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v92 count:1], (uint64_t)v87);

    -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v87, 0);
  }
  if (v38) {
    -[NSSQLiteConnection rollbackTransaction]((uint64_t)v87);
  }
  char v66 = v13 ^ 1;
  if (!a1) {
    char v66 = 1;
  }
  if ((v66 & 1) == 0)
  {
    uint64_t v67 = a1[1];
    if (v67) {
      [*(id *)(v67 + 216) unlock];
    }
  }
  if (v79) {
    -[NSSQLiteConnection setSecureDeleteMode:]((uint64_t)v87, 0);
  }
  if (v73 && v37) {
    *long long v73 = v37;
  }
  if ((v78 | 4) != 4) {
    return 0;
  }
  return v36;
}

void sub_18AC2B2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,uint64_t a23,int a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint8_t buf)
{
  if (a21) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_18AC2B648(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AC2B654);
  }
  JUMPOUT(0x18AC2B638);
}

#error "18AC2B78C: call analysis failed (funcsize=91)"

void sub_18AC2B7E8(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC2B740);
  }
  JUMPOUT(0x18AC2B638);
}

void sub_18AC2BC34()
{
}

void sub_18AC2BCAC()
{
}

uint64_t _executeBatchDeleteStatements(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v4 = [a1 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)v14;
  do
  {
    uint64_t v8 = 0;
    do
    {
      if (*(void *)v14 != v7) {
        objc_enumerationMutation(a1);
      }
      uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8 * v8);
      -[NSSQLiteConnection prepareAndExecuteSQLStatement:](a2, (void *)v9);
      if (v9 && *(unsigned char *)(v9 + 41))
      {
        if (a2) {
          int v10 = sqlite3_changes(*(sqlite3 **)(a2 + 72));
        }
        else {
          int v10 = 0;
        }
        uint64_t v6 = (v10 + v6);
      }
      ++v8;
    }
    while (v5 != v8);
    uint64_t v11 = [a1 countByEnumeratingWithState:&v13 objects:v17 count:16];
    uint64_t v5 = v11;
  }
  while (v11);
  return v6;
}

void sub_18AC2C240(_Unwind_Exception *a1)
{
}

void sub_18AC2D1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_unfair_lock_t lock)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(lock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

double _sharedIMPL_pvfk_core_f(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  if (!_pvfk_header((unsigned int *)a1, a3, a3, a4, a5, a6, a7, a8)) {
    return 0.0;
  }
  int v10 = *(char **)(a1 + 24);
  Class Class = object_getClass(v10);
  LODWORD(result) = *(_DWORD *)&v10[*((unsigned int *)object_getIndexedIvars(Class) + v8 + 19)];
  return result;
}

void *_svfk_7(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 7uLL);
}

void *_svfk_1(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 1uLL);
}

uint64_t _resolveValidationMethods(unint64_t a1)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 104);
  uint64_t v3 = (id *)[v2 keys];
  uint64_t v4 = [v2 length];
  v17[0] = (unint64_t)PF_CALLOC_OBJECT_ARRAY(v4);
  uint64_t v5 = (objc_class *)_PFFastEntityClass(a1);
  Class Superclass = class_getSuperclass(v5);
  if (v4)
  {
    Class v7 = Superclass;
    unsigned int v8 = (Method *)v17[0];
    do
    {
      CFStringRef v9 = (const __CFString *)*v3;
      uint64_t v10 = objc_msgSend(*v3, "length", v17[0]);
      MEMORY[0x1F4188790](v10);
      uint64_t v12 = (char *)v17 - v11;
      CFStringGetCString(v9, (char *)v17 - v11, v13, 0x8000100u);
      if (v10) {
        *uint64_t v12 = __toupper(*v12);
      }
      *v8++ = _PFKeyValueMethodForPattern(v7, "validate%s:error:", v12);
      ++v3;
      --v4;
    }
    while (v4);
  }
  uint64_t v14 = 0;
  long long v15 = (void *)v17[0];
  atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 152) + 32), (unint64_t *)&v14, v17[0]);
  if (v14) {
    PF_FREE_OBJECT_ARRAY(v15);
  }
  return *(void *)(*(void *)(a1 + 152) + 32);
}

Method _PFKeyValueMethodForPattern(void *a1, char *__s, const char *a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  strlen(__s);
  size_t v6 = strlen(a3);
  MEMORY[0x1F4188790](v6);
  unsigned int v8 = (char *)v12 - v7;
  snprintf((char *)v12 - v7, v9, __s, a3, a3);
  if (([a1 _classShouldAlwaysRegisterSelectorNamed:v8] & 1) != 0 || !BYTE2(dword_1EB270AB8)) {
    uint64_t v10 = sel_registerName(v8);
  }
  else {
    uint64_t v10 = (const char *)sel_lookUpByName();
  }
  return class_getInstanceMethod((Class)a1, v10);
}

void _pvfk_40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t _sharedIMPL_addSet_core(_DWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = [*(id *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4) name];
  int v8 = a1[4];
  if ((v8 & 0x200000) != 0) {
    _PF_ManagedObject_WillChangeValueForKeywithSetMutation(a1, (uint64_t)sel_willChangeValueForKey_withSetMutation_usingObjects_, v7, 1, a3, a4);
  }
  else {
    [a1 willChangeValueForKey:v7 withSetMutation:1 usingObjects:a3];
  }
  _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
  [v15 unionSet:a3];
  if ((v8 & 0x200000) != 0)
  {
    return _PF_ManagedObject_DidChangeValueForKeywithSetMutation((uint64_t)a1, (uint64_t)sel_didChangeValueForKey_withSetMutation_usingObjects_, v7);
  }
  else
  {
    return [a1 didChangeValueForKey:v7 withSetMutation:1 usingObjects:a3];
  }
}

void _sharedIMPL_addObjectToSet_core(_DWORD *a1, uint64_t a2, void *a3, unint64_t a4)
{
  values = a3;
  uint64_t v6 = [*(id *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4) name];
  int v7 = a1[4];
  CFSetRef v8 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D548]);
  if ((v7 & 0x200000) != 0) {
    _PF_ManagedObject_WillChangeValueForKeywithSetMutation(a1, (uint64_t)sel_willChangeValueForKey_withSetMutation_usingObjects_, v6, 1, (uint64_t)v8, a4);
  }
  else {
    [a1 willChangeValueForKey:v6 withSetMutation:1 usingObjects:v8];
  }
  _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
  [v15 addObject:values];
  if ((v7 & 0x200000) != 0)
  {
    _PF_ManagedObject_DidChangeValueForKeywithSetMutation((uint64_t)a1, (uint64_t)sel_didChangeValueForKey_withSetMutation_usingObjects_, v6);
    if (!v8) {
      return;
    }
    goto LABEL_8;
  }
  [a1 didChangeValueForKey:v6 withSetMutation:1 usingObjects:v8];
  if (v8) {
LABEL_8:
  }
    CFRelease(v8);
}

uint64_t _PF_Handler_Public_SetProperty(unsigned int *a1, unint64_t a2, void *a3, uint64_t a4, void *a5)
{
  if (a5)
  {
    uint64_t v10 = *(void *)(*((void *)_PFEntityForManagedObject(a1) + 19) + 72);
    if (v10 && a3 && (*(unsigned char *)(v10 + a2) & 1) != 0 && [a3 isNSDate])
    {
      uint64_t v11 = NSNumber;
      [a3 timeIntervalSinceReferenceDate];
      objc_msgSend(v11, "numberWithDouble:");
    }
    if (*a5 == _NSKeyValueIvarSetterClass)
    {
      [a1 willChangeValueForKey:a4];
      _NSSetUsingKeyValueSetter();
      uint64_t result = [a1 didChangeValueForKey:a4];
    }
    else
    {
      uint64_t result = _NSSetUsingKeyValueSetter();
    }
    uint64_t v13 = a1[5];
    if (v13) {
      uint64_t v14 = (char *)a1 + v13;
    }
    else {
      uint64_t v14 = 0;
    }
    id v15 = &v14[-(((unint64_t)a1[4] >> 22) & 0x3FC)];
    v15[a2 >> 3] |= 1 << (a2 & 7);
  }
  else
  {
    return [a1 _setGenericValue:a3 forKey:a4 withIndex:a2 flags:1];
  }
  return result;
}

void _PF_ManagedObject_WillChangeValueForKeywithSetMutation(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int v12 = a1[4];
  if ((v12 & 0x40) != 0)
  {
    if (a6 != 0x7FFFFFFFFFFFFFFFLL) {
      _PF_Handler_WillAccess_Property((id *)a1, (uint64_t)sel_willAccessValueForKey_, a6);
    }
  }
  else
  {
    [a1 willAccessValueForKey:a3];
  }
  if ((*((unsigned char *)a1 + 17) & 0x80) != 0)
  {
    [(id)_insertion_fault_handler fulfillFault:a1 withContext:*((void *)a1 + 4) forIndex:a6];
    if ((v12 & 0x1000) != 0)
    {
LABEL_6:
      if ((v12 & 0x2000) != 0) {
        return;
      }
      goto LABEL_7;
    }
  }
  else if ((v12 & 0x1000) != 0)
  {
    goto LABEL_6;
  }
  if (a6 != 0x7FFFFFFFFFFFFFFFLL || (v12 & 0x400000) == 0) {
    _PFFastMOCObjectWillChange(*((void *)a1 + 4), a1);
  }
  a1[4] |= 0x800u;
  if ((v12 & 0x2000) == 0)
  {
LABEL_7:
    uint64_t v13 = (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t))off_1EB270650;
    v13(a1, a2, a3, a4, a5);
  }
}

uint64_t _PF_ManagedObject_DidChangeValueForKeywithSetMutation(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (_DWORD *)result;
  int v5 = *(_DWORD *)(result + 16);
  if ((v5 & 0x2000) != 0)
  {
    if ((v5 & 0x1000) != 0) {
      goto LABEL_3;
    }
LABEL_6:
    v4[4] &= ~0x800u;
    if ((v5 & 0x40) != 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = _NSObjectDidChangeForKeywithSetMutationImp(result, a2, a3);
  if ((v5 & 0x1000) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x40) != 0) {
    return result;
  }
LABEL_7:

  return [v4 didAccessValueForKey:a3];
}

uint64_t _kvcPropertysPublicRelationshipMutators(void *a1)
{
  uint64_t result = *(void *)(a1[19] + 40);
  if (!result)
  {
    uint64_t v3 = (void *)a1[13];
    uint64_t v4 = [v3 keys];
    uint64_t v5 = [v3 length];
    uint64_t v6 = (void **)PF_CALLOC_OBJECT_ARRAY(v5);
    int v7 = (objc_class *)_PFFastEntityClass((unint64_t)a1);
    Class Superclass = class_getSuperclass(v7);
    uint64_t v9 = (void *)a1[14];
    uint64_t v10 = objc_opt_class();
    if (v5 && Superclass != (Class)v10)
    {
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v9[14];
        if (v12 <= v11 && v11 - v12 < v9[15]) {
          break;
        }
        unint64_t v14 = v9[22];
        if (v14 <= v11 && v11 - v14 < v9[23]) {
          break;
        }
        unint64_t v16 = v9[16];
        BOOL v17 = v16 > v11 || v11 - v16 >= v9[17];
        if (!v17 || (unint64_t v18 = v9[24], v18 <= v11) && v11 - v18 < v9[25])
        {
          uint64_t v19 = _NSFaultingMutableOrderedSetMutationMethods;
          goto LABEL_24;
        }
LABEL_26:
        if (v5 == ++v11) {
          goto LABEL_27;
        }
      }
      uint64_t v19 = _NSFaultingMutableSetMutationMethods;
LABEL_24:
      uint64_t v20 = [(__objc2_class *)v19 _createMutationMethodsForClass:Superclass forKey:*(void *)(v4 + 8 * v11)];
      if (v20) {
        v6[v11] = (void *)v20;
      }
      goto LABEL_26;
    }
LABEL_27:
    uint64_t v21 = 0;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(a1[19] + 40), (unint64_t *)&v21, (unint64_t)v6);
    if (v21)
    {
      if (v5)
      {
        uint64_t v22 = v6;
        do
        {
          uint64_t v23 = *v22++;

          --v5;
        }
        while (v5);
      }
      PF_FREE_OBJECT_ARRAY(v6);
    }
    return *(void *)(a1[19] + 40);
  }
  return result;
}

void _NSCoreDataLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v11 = "unknown";
  unint64_t v12 = (void *)MEMORY[0x18C127630]();
  unint64_t v13 = a1 - 1;
  switch(a1)
  {
    case 1:
    case 2:
    case 17:
      if (qword_1EB2704B8 == -1) {
        goto LABEL_7;
      }
      int v26 = &qword_1EB2704B8;
      uint64_t v27 = &__block_literal_global;
      break;
    case 3:
      if (qword_1EB2704F0 != -1) {
        dispatch_once(&qword_1EB2704F0, &__block_literal_global_6);
      }
      unint64_t v11 = "warning";
      goto LABEL_21;
    case 4:
    case 5:
      if (qword_1EB2704F8 == -1) {
        goto LABEL_7;
      }
      int v26 = &qword_1EB2704F8;
      uint64_t v27 = &__block_literal_global_9;
      break;
    case 6:
    case 7:
      if (qword_1EB270500 == -1) {
        goto LABEL_7;
      }
      int v26 = &qword_1EB270500;
      uint64_t v27 = &__block_literal_global_12;
      break;
    case 8:
      if (qword_1EB270508 != -1) {
        dispatch_once(&qword_1EB270508, &__block_literal_global_15);
      }
      unint64_t v11 = "XPC";
      goto LABEL_21;
    case 9:
      if (qword_1EB270518 != -1) {
        dispatch_once(&qword_1EB270518, &__block_literal_global_21);
      }
      unint64_t v11 = "debug";
      goto LABEL_21;
    case 16:
      if (qword_1EB270510 != -1) {
        dispatch_once(&qword_1EB270510, &__block_literal_global_18);
      }
      unint64_t v11 = "CloudKit";
      goto LABEL_21;
    default:
      goto LABEL_21;
  }
  dispatch_once(v26, v27);
LABEL_7:
  if (v13 <= 0x10) {
    unint64_t v11 = off_1E544B540[v13];
  }
LABEL_21:
  if (_pflogging_enable_oslog >= 1)
  {
    if (_pflogging_catastrophic_mode) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = a1;
    }
    switch(v14)
    {
      case 1:
      case 17:
        goto LABEL_40;
      case 2:
        if (!os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_ERROR)) {
          goto LABEL_31;
        }
        goto LABEL_40;
      case 3:
        id v15 = qword_1EB2704C0;
        goto LABEL_38;
      case 4:
      case 5:
        id v15 = qword_1EB2704C8;
        goto LABEL_38;
      case 6:
      case 7:
        id v15 = qword_1EB2704D0;
        goto LABEL_35;
      case 8:
        id v15 = qword_1EB2704D8;
        goto LABEL_38;
      case 9:
        id v15 = qword_1EB2704E8;
LABEL_35:
        os_log_type_t v18 = OS_LOG_TYPE_INFO;
        goto LABEL_39;
      case 16:
        id v15 = qword_1EB2704E0;
        goto LABEL_38;
      default:
        id v15 = MEMORY[0x1E4F14500];
LABEL_38:
        os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
LABEL_39:
        if (!os_log_type_enabled(v15, v18))
        {
LABEL_31:
          BOOL v17 = 0;
          goto LABEL_70;
        }
LABEL_40:
        BOOL v17 = (void *)[[NSString alloc] initWithFormat:a2 arguments:&a9];
        unint64_t v16 = (const char *)[v17 UTF8String];
        if (_pflogging_catastrophic_mode) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = a1;
        }
        switch(v19)
        {
          case 1:
            uint64_t v22 = __pflogFaultLog;
            if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_ERROR)) {
              goto LABEL_72;
            }
            break;
          case 2:
            uint64_t v22 = __pflogFaultLog;
            if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_ERROR)) {
              goto LABEL_72;
            }
            break;
          case 3:
            uint64_t v20 = qword_1EB2704C0;
            if (os_log_type_enabled((os_log_t)qword_1EB2704C0, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_61;
            }
            break;
          case 4:
          case 5:
            uint64_t v20 = qword_1EB2704C8;
            if (os_log_type_enabled((os_log_t)qword_1EB2704C8, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_61;
            }
            break;
          case 6:
          case 7:
            uint64_t v21 = qword_1EB2704D0;
            if (os_log_type_enabled((os_log_t)qword_1EB2704D0, OS_LOG_TYPE_INFO)) {
              goto LABEL_57;
            }
            break;
          case 8:
            uint64_t v20 = qword_1EB2704D8;
            if (os_log_type_enabled((os_log_t)qword_1EB2704D8, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_61;
            }
            break;
          case 9:
            uint64_t v21 = qword_1EB2704E8;
            if (os_log_type_enabled((os_log_t)qword_1EB2704E8, OS_LOG_TYPE_INFO))
            {
LABEL_57:
              *(_DWORD *)buf = 136446466;
              uint64_t v29 = v11;
              __int16 v30 = 2082;
              uint64_t v31 = v16;
              uint64_t v23 = "%{public}s: %{public}s\n";
              int v24 = v21;
              os_log_type_t v25 = OS_LOG_TYPE_INFO;
              goto LABEL_63;
            }
            break;
          case 16:
            uint64_t v20 = qword_1EB2704E0;
            if (os_log_type_enabled((os_log_t)qword_1EB2704E0, OS_LOG_TYPE_DEFAULT))
            {
LABEL_61:
              *(_DWORD *)buf = 136446466;
              uint64_t v29 = v11;
              __int16 v30 = 2082;
              uint64_t v31 = v16;
              uint64_t v23 = "%{public}s: %{public}s\n";
              int v24 = v20;
              goto LABEL_62;
            }
            break;
          case 17:
            uint64_t v22 = __pflogFaultLog;
            if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_ERROR))
            {
LABEL_72:
              *(_DWORD *)buf = 136446466;
              uint64_t v29 = v11;
              __int16 v30 = 2082;
              uint64_t v31 = v16;
              _os_log_error_impl(&dword_18AB82000, v22, OS_LOG_TYPE_ERROR, "%{public}s: %{public}s\n", buf, 0x16u);
            }
            break;
          default:
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v29 = v11;
              __int16 v30 = 2082;
              uint64_t v31 = v16;
              int v24 = MEMORY[0x1E4F14500];
              uint64_t v23 = "CoreData: %{public}s: %{public}s\n";
LABEL_62:
              os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
LABEL_63:
              _os_log_impl(&dword_18AB82000, v24, v25, v23, buf, 0x16u);
            }
            break;
        }
        if (_pflogging_enable_stderr <= 0) {
          goto LABEL_70;
        }
        if (!v17) {
          goto LABEL_66;
        }
        goto LABEL_67;
    }
  }
  unint64_t v16 = 0;
  BOOL v17 = 0;
  if (_pflogging_enable_stderr > 0)
  {
LABEL_66:
    BOOL v17 = (void *)[[NSString alloc] initWithFormat:a2 arguments:&a9];
LABEL_67:
    if (!v16) {
      unint64_t v16 = (const char *)[v17 UTF8String];
    }
    os_unfair_lock_lock_with_options();
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CoreData: %s: %s\n", v11, v16);
    os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_63);
  }
LABEL_70:
}

void *_svfk_3(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 3uLL);
}

void *_svfk_11(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0xBuLL);
}

uint64_t PFVectorEqual(const __CFBitVector *a1, const __CFBitVector *a2)
{
  CFIndex Count = CFBitVectorGetCount(a1);
  if (Count == CFBitVectorGetCount(a2))
  {
    if (Count < 1) {
      return 1;
    }
    CFIndex v5 = 0;
    while (1)
    {
      CFBit BitAtIndex = CFBitVectorGetBitAtIndex(a1, v5);
      if (BitAtIndex != CFBitVectorGetBitAtIndex(a2, v5)) {
        break;
      }
      if (Count == ++v5) {
        return 1;
      }
    }
  }
  return 0;
}

id _PFExampleClass.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _PFExampleClass();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for _PFExampleClass()
{
  return self;
}

void sub_18AC35B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18AC36E0C(void *a1)
{
  objc_begin_catch(a1);
  -[NSSQLiteConnection _executeSQLString:](v1, @"ROLLBACK");
  objc_exception_rethrow();
}

void sub_18AC36E28(_Unwind_Exception *a1)
{
}

id _executeSaveChangesRequest(uint64_t a1)
{
  uint64_t v262 = *MEMORY[0x1E4F143B8];
  id result = objc_alloc_init(MEMORY[0x1E4F28B28]);
  uint64_t v201 = result;
  if (!a1 || !*(void *)(a1 + 24))
  {
    __break(1u);
    return result;
  }
  uint64_t v202 = *(void **)(a1 + 96);
  int v203 = objc_msgSend((id)objc_msgSend((id)a1, "persistentStoreRequest"), "_secureOperation");
  self = (id)a1;
  -[NSSQLiteConnection _setSaveRequest:](*(id **)(a1 + 24), (void *)a1);
  if (v203) {
    -[NSSQLiteConnection setSecureDeleteMode:](*(void *)(a1 + 24), 1);
  }
  uint64_t v3 = (void *)a1;
  if (!*(void *)(a1 + 88))
  {
    uint64_t v4 = *(void *)(a1 + 96);
    if (!v4)
    {
      int v204 = 0;
      goto LABEL_117;
    }
    uint64_t v3 = self;
    if ((*(unsigned char *)(v4 + 148) & 2) == 0)
    {
      int v204 = 0;
      goto LABEL_23;
    }
  }
  uint64_t v5 = v3[1];
  if (v5) {
    [*(id *)(v5 + 216) lock];
  }
  uint64_t v6 = *((void *)self + 12);
  if (v6 && (int v7 = *(void **)(v6 + 8)) != 0) {
    uint64_t v8 = [v7 persistentStoreRequest];
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *((void *)self + 3);
  if (v9)
  {
    if (*(unsigned char *)(v9 + 40))
    {
      uint64_t v192 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v193 = objc_msgSend(NSString, "stringWithFormat:", @"SaveChanges: NSSQLCore: %p Transactions cannot be nested\n", *((void *)self + 1));
      objc_exception_throw((id)[v192 exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v193 userInfo:0]);
    }
    -[NSSQLiteConnection beginTransaction](v9);
  }
  else
  {
    -[NSSQLiteConnection beginTransaction](0);
  }
  uint64_t v10 = *((void *)self + 1);
  uint64_t v11 = (void *)MEMORY[0x1E4F28EA0];
  unint64_t v12 = (void *)MEMORY[0x1E4F1C9E8];
  uint64_t v13 = [NSNumber numberWithInt:1];
  if (v6)
  {
    uint64_t v14 = atomic_load((unsigned int *)(v6 + 144));
    uint64_t v15 = [NSNumber numberWithInt:v14];
    uint64_t v16 = *(void *)(v6 + 8);
    if (v16) {
      uint64_t v16 = *(void *)(v16 + 32);
    }
  }
  else
  {
    uint64_t v15 = [NSNumber numberWithInt:0];
    uint64_t v16 = 0;
  }
  uint64_t v17 = objc_msgSend(v11, "notificationWithName:object:userInfo:", @"_NSSQLCoreTransactionStateChangeNotification", v10, objc_msgSend(v12, "dictionaryWithObjectsAndKeys:", v13, @"_NSSQLCoreTransactionType", v15, @"_NSSQLCoreTransientSequenceNumber", v8, @"_NSSQLCoreActiveSaveRequest", v16, @"_NSSQLCoreActiveSavingContext", self, @"requestContext", 0));
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "postNotification:", v17);
  uint64_t v4 = *((void *)self + 12);
  os_log_type_t v18 = (__CFString *)*((void *)self + 11);
  if (v18) {
    -[NSSQLiteConnection saveMetadata:](*((void **)self + 3), v18);
  }
  int v204 = 1;
  if (v4)
  {
LABEL_23:
    if ((*(unsigned char *)(v4 + 148) & 2) != 0)
    {
      uint64_t v19 = -[NSSQLSavePlan newObjectsForFastLockConflictDetection](*((void **)self + 12));
      uint64_t v20 = *((void *)self + 3);
      if ([v19 count]
        && (uint64_t v21 = (void *)+[_PFRoutines _groupObjectsByRootEntity:]((uint64_t)_PFRoutines, v19),
            (uint64_t v22 = [v21 count]) != 0))
      {
        uint64_t v23 = 0;
        v197 = v21;
        uint64_t v199 = v20;
        id v196 = (char *)v22;
        while (1)
        {
          id v210 = (id)objc_msgSend((id)objc_msgSend(v21, "objectAtIndex:", v23), "sortedArrayUsingFunction:context:", compareManagedObjectsBySQLPKs, 0);
          CFArrayRef v24 = _rowsForConflictDetection(*((void **)self + 1), v210, v20);
          int Count = CFArrayGetCount(v24);
          uint64_t v26 = [v210 count];
          uint64_t v27 = v26;
          if (Count - 1 != v26)
          {
            if (v24) {
              CFRelease(v24);
            }
            goto LABEL_117;
          }
          obuint64_t j = v23;
          if (v26) {
            break;
          }
LABEL_41:
          uint64_t v23 = obj + 1;
          uint64_t v21 = v197;
          uint64_t v20 = v199;
          if (obj + 1 == v196)
          {
            if (v24) {
              CFRelease(v24);
            }
            goto LABEL_44;
          }
        }
        CFIndex v28 = 1;
        while (1)
        {
          uint64_t v29 = (void *)MEMORY[0x18C127630]();
          CFAllocatorRef ValueAtIndex = CFArrayGetValueAtIndex(v24, v28);
          CFIndex v31 = v28 - 1;
          uint64_t v32 = objc_msgSend((id)objc_msgSend(v210, "objectAtIndex:", v28 - 1), "objectID");
          uint64_t v33 = -[NSSQLSaveChangesRequestContext originalRowForObjectID:]((uint64_t)self, v32);
          if (!v33)
          {
            BOOL v34 = (id *)-[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:]((uint64_t)self, (uint64_t)v32);
            -[NSSQLStoreRequestContext setConnection:]((uint64_t)v34, *((void **)self + 3));
            -[NSSQLStoreRequestContext setQueryGenerationToken:](v34, 0);
            uint64_t v33 = _executeObjectFaultRequest((uint64_t)v34);
            if (v33) {
              [*((id *)self + 17) setObject:v33 forKey:v32];
            }
            -[NSSQLStoreRequestContext setConnection:]((uint64_t)v34, 0);
          }
          if ([v32 _referenceData64] != *ValueAtIndex) {
            break;
          }
          uint64_t v35 = v33 ? *(unsigned int *)(v33[5] + 12) : 0;
          if (v35 != ValueAtIndex[1]) {
            break;
          }
          CFIndex v28 = v31 + 2;
          if (v31 + 1 == v27) {
            goto LABEL_41;
          }
        }
        CFRelease(v24);
      }
      else
      {
LABEL_44:
        uint64_t v36 = *((void *)self + 3);
        uint64_t v37 = *((void *)self + 12);
        id v211 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        if (v37) {
          id obja = *(id *)(v37 + 40);
        }
        else {
          id obja = 0;
        }
        uint64_t v200 = v37;
        long long v236 = 0u;
        long long v237 = 0u;
        long long v234 = 0u;
        long long v235 = 0u;
        uint64_t v38 = [obja countByEnumeratingWithState:&v234 objects:buf count:16];
        if (v38)
        {
          uint64_t v39 = *(void *)v235;
          do
          {
            for (uint64_t i = 0; i != v38; ++i)
            {
              if (*(void *)v235 != v39) {
                objc_enumerationMutation(obja);
              }
              uint64_t v41 = *(void **)(*((void *)&v234 + 1) + 8 * i);
              uint64_t v42 = (void *)MEMORY[0x18C127630]();
              if ((-[NSSQLiteConnection deleteRow:forRequestContext:](v36, (uint64_t)v41, (uint64_t)self) & 1) == 0)
              {
                uint64_t v43 = [v41 objectID];
                uint64_t v44 = (id *)-[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:]((uint64_t)self, [v41 objectID]);
                -[NSSQLStoreRequestContext setConnection:]((uint64_t)v44, *((void **)self + 3));
                -[NSSQLStoreRequestContext setQueryGenerationToken:](v44, 0);
                uint64_t v45 = _executeObjectFaultRequest((uint64_t)v44);
                -[NSSQLStoreRequestContext setConnection:]((uint64_t)v44, 0);

                if (v45)
                {
                  if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)self) < 2)
                  {
                    if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)self) >= 1) {
                      _NSCoreDataLog(4, @"Optimistic locking failure for %@.  During write changes, deletion failed.  Row was updated.", v184, v185, v186, v187, v188, v189, v43);
                    }
                  }
                  else
                  {
                    _NSCoreDataLog(4, @"Optimistic locking failure for %@.  During write changes, deletion failed.  Row was updated.  Original row = %@ New Row = %@", v178, v179, v180, v181, v182, v183, v43);
                  }
                  id v249 = @"_NSCoreDataOptimisticLockingFailureConflictsKey";
                  uint64_t v248 = v43;
                  uint64_t v250 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v248 count:1];
                  uint64_t v190 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v250 forKeys:&v249 count:1];
                  objc_exception_throw(+[_NSCoreDataOptimisticLockingException exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:@"optimistic locking failure" userInfo:v190]);
                }
              }
            }
            uint64_t v38 = [obja countByEnumeratingWithState:&v234 objects:buf count:16];
          }
          while (v38);
        }
        v198 = (void *)[MEMORY[0x1E4F1CA80] set];
        long long v232 = 0u;
        long long v233 = 0u;
        long long v230 = 0u;
        long long v231 = 0u;
        CFArrayRef theArray = (CFArrayRef)-[NSSQLSavePlan newInsertedRows](v200);
        uint64_t v46 = [(__CFArray *)theArray countByEnumeratingWithState:&v230 objects:v259 count:16];
        if (v46)
        {
          uint64_t v47 = *(void *)v231;
          do
          {
            for (uint64_t j = 0; j != v46; ++j)
            {
              if (*(void *)v231 != v47) {
                objc_enumerationMutation(theArray);
              }
              uint64_t v49 = *(void *)(*((void *)&v230 + 1) + 8 * j);
              uint64_t v50 = (void *)MEMORY[0x18C127630]();
              if (!v49 || (*(unsigned char *)(v49 + 16) & 1) != 0) {
                uint64_t v51 = 0;
              }
              else {
                uint64_t v51 = (void *)[*(id *)(*(void *)(v49 + 40) + 16) _storeInfo1];
              }
              if (-[NSEntityDescription _hasUniqueProperties]([v51 entityDescription])) {
                [v211 addObject:v49];
              }
              -[NSSQLiteConnection insertRow:](v36, v49);
            }
            uint64_t v46 = [(__CFArray *)theArray countByEnumeratingWithState:&v230 objects:v259 count:16];
          }
          while (v46);
        }
        if (v200) {
          uint64_t v52 = (void *)[*(id *)(v200 + 48) mutableCopy];
        }
        else {
          uint64_t v52 = 0;
        }
        long long v228 = 0u;
        long long v229 = 0u;
        long long v226 = 0u;
        long long v227 = 0u;
        uint64_t v53 = v52;
        uint64_t v54 = [v52 countByEnumeratingWithState:&v226 objects:&v255 count:16];
        if (v54)
        {
          uint64_t v55 = *(void *)v227;
          do
          {
            for (uint64_t k = 0; k != v54; ++k)
            {
              if (*(void *)v227 != v55) {
                objc_enumerationMutation(v53);
              }
              uint64_t v57 = *(void *)(*((void *)&v226 + 1) + 8 * k);
              uint64_t v58 = (void *)MEMORY[0x18C127630]();
              if (!v57 || (*(unsigned char *)(v57 + 16) & 1) != 0) {
                uint64_t v59 = 0;
              }
              else {
                uint64_t v59 = (void *)[*(id *)(*(void *)(v57 + 40) + 16) _storeInfo1];
              }
              if (-[NSEntityDescription _hasUniqueProperties]([v59 entityDescription]))
              {
                uint64_t v60 = -[NSSQLSaveChangesRequestContext originalRowForObjectID:]((uint64_t)self, (const void *)[(id)v57 objectID]);
                if (-[NSSQLRow hasUniqueConstraintDiffFrom:]((const __CFBitVector *)v57, (uint64_t)v60)) {
                  [v211 addObject:v57];
                }
              }
              -[NSSQLiteConnection updateRow:forRequestContext:](v36, v57, (uint64_t)self);
            }
            uint64_t v54 = [v53 countByEnumeratingWithState:&v226 objects:&v255 count:16];
          }
          while (v54);
        }
        if (v200) {
          uint64_t v61 = (void *)[*(id *)(v200 + 56) mutableCopy];
        }
        else {
          uint64_t v61 = 0;
        }
        long long v224 = 0u;
        long long v225 = 0u;
        long long v222 = 0u;
        long long v223 = 0u;
        uint64_t v62 = [v61 countByEnumeratingWithState:&v222 objects:&v251 count:16];
        if (v62)
        {
          uint64_t v63 = *(void *)v223;
          do
          {
            for (uint64_t m = 0; m != v62; ++m)
            {
              if (*(void *)v223 != v63) {
                objc_enumerationMutation(v61);
              }
              uint64_t v65 = *(void *)(*((void *)&v222 + 1) + 8 * m);
              char v66 = (void *)MEMORY[0x18C127630]();
              if (!v65 || (*(unsigned char *)(v65 + 16) & 1) != 0) {
                uint64_t v67 = 0;
              }
              else {
                uint64_t v67 = (void *)[*(id *)(*(void *)(v65 + 40) + 16) _storeInfo1];
              }
              if (-[NSEntityDescription _hasUniqueProperties]([v67 entityDescription]))
              {
                uint64_t v68 = -[NSSQLSaveChangesRequestContext originalRowForObjectID:]((uint64_t)self, (const void *)[(id)v65 objectID]);
                if (-[NSSQLRow hasUniqueConstraintDiffFrom:]((const __CFBitVector *)v65, (uint64_t)v68)) {
                  [v211 addObject:v65];
                }
              }
              -[NSSQLiteConnection updateRow:forRequestContext:](v36, v65, (uint64_t)self);
            }
            uint64_t v62 = [v61 countByEnumeratingWithState:&v222 objects:&v251 count:16];
          }
          while (v62);
        }
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        uint64_t v69 = [v211 countByEnumeratingWithState:&v218 objects:&v244 count:16];
        if (v69)
        {
          uint64_t v70 = *(void *)v219;
          do
          {
            for (uint64_t n = 0; n != v69; ++n)
            {
              if (*(void *)v219 != v70) {
                objc_enumerationMutation(v211);
              }
              uint64_t v72 = *(void *)(*((void *)&v218 + 1) + 8 * n);
              long long v73 = (void *)MEMORY[0x18C127630]();
              -[NSSQLiteConnection updateConstrainedValuesForRow:](v36, v72);
            }
            uint64_t v69 = [v211 countByEnumeratingWithState:&v218 objects:&v244 count:16];
          }
          while (v69);
        }
        if ([v198 count])
        {
          uint64_t v242 = @"_NSCoreDataOptimisticLockingFailureConflictsKey";
          uint64_t v243 = v198;
          uint64_t v195 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v243 forKeys:&v242 count:1];
          objc_exception_throw(+[_NSCoreDataConstraintViolationException exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"Constraint violation" userInfo:v195]);
        }
        BOOL v74 = (void *)-[NSSQLSavePlan newCorrelationTableUpdates](v200);
        long long v216 = 0u;
        long long v217 = 0u;
        long long v214 = 0u;
        long long v215 = 0u;
        uint64_t v75 = [v74 countByEnumeratingWithState:&v214 objects:&v238 count:16];
        if (v75)
        {
          uint64_t v76 = *(void *)v215;
          do
          {
            for (iuint64_t i = 0; ii != v75; ++ii)
            {
              if (*(void *)v215 != v76) {
                objc_enumerationMutation(v74);
              }
              uint64_t v78 = *(void *)(*((void *)&v214 + 1) + 8 * ii);
              int v79 = (void *)MEMORY[0x18C127630]();
              -[NSSQLiteConnection writeCorrelationChangesFromTracker:](v36, v78);
            }
            uint64_t v75 = [v74 countByEnumeratingWithState:&v214 objects:&v238 count:16];
          }
          while (v75);
        }
      }
    }
  }
LABEL_117:
  if (v202)
  {
    long long v80 = (void *)v202[14];
    if (v80)
    {
      int v81 = (void *)[MEMORY[0x1E4F1CA48] array];
      long long v258 = 0u;
      long long v257 = 0u;
      long long v256 = 0u;
      long long v255 = 0u;
      uint64_t v82 = [v80 countByEnumeratingWithState:&v255 objects:buf count:16];
      if (v82)
      {
        uint64_t v83 = *(void *)v256;
        do
        {
          for (juint64_t j = 0; jj != v82; ++jj)
          {
            if (*(void *)v256 != v83) {
              objc_enumerationMutation(v80);
            }
            [*(id *)(*((void *)&v255 + 1) + 8 * jj) _copyToInterimLocation];
          }
          uint64_t v82 = [v80 countByEnumeratingWithState:&v255 objects:buf count:16];
        }
        while (v82);
      }
      long long v253 = 0u;
      long long v254 = 0u;
      long long v251 = 0u;
      long long v252 = 0u;
      uint64_t v85 = [v80 countByEnumeratingWithState:&v251 objects:v259 count:16];
      if (v85)
      {
        uint64_t v86 = *(void *)v252;
        do
        {
          for (kuint64_t k = 0; kk != v85; ++kk)
          {
            if (*(void *)v252 != v86) {
              objc_enumerationMutation(v80);
            }
            long long v88 = *(void **)(*((void *)&v251 + 1) + 8 * kk);
            [v88 _moveToPermanentLocation];
            [v81 addObject:v88];
          }
          uint64_t v85 = [v80 countByEnumeratingWithState:&v251 objects:v259 count:16];
        }
        while (v85);
      }
    }
    long long v89 = (void *)v202[12];
    if (v89)
    {
      long long v90 = (void *)[MEMORY[0x1E4F1CA48] array];
      long long v258 = 0u;
      long long v257 = 0u;
      long long v256 = 0u;
      long long v255 = 0u;
      uint64_t v91 = [v89 countByEnumeratingWithState:&v255 objects:buf count:16];
      if (v91)
      {
        uint64_t v92 = *(void *)v256;
        do
        {
          for (muint64_t m = 0; mm != v91; ++mm)
          {
            if (*(void *)v256 != v92) {
              objc_enumerationMutation(v89);
            }
            [*(id *)(*((void *)&v255 + 1) + 8 * mm) _writeExternalReferenceToInterimLocation];
          }
          uint64_t v91 = [v89 countByEnumeratingWithState:&v255 objects:buf count:16];
        }
        while (v91);
      }
      long long v253 = 0u;
      long long v254 = 0u;
      long long v251 = 0u;
      long long v252 = 0u;
      uint64_t v94 = [v89 countByEnumeratingWithState:&v251 objects:v259 count:16];
      if (v94)
      {
        uint64_t v95 = *(void *)v252;
        do
        {
          for (nuint64_t n = 0; nn != v94; ++nn)
          {
            if (*(void *)v252 != v95) {
              objc_enumerationMutation(v89);
            }
            unint64_t v97 = *(void **)(*((void *)&v251 + 1) + 8 * nn);
            [v97 _moveExternalReferenceToPermanentLocation];
            [v90 addObject:v97];
          }
          uint64_t v94 = [v89 countByEnumeratingWithState:&v251 objects:v259 count:16];
        }
        while (v94);
      }
    }
  }
  uint64_t v98 = *((void *)self + 1);
  if (v98 && (*(unsigned char *)(v98 + 201) & 4) != 0)
  {
    uint64_t v100 = *((void *)self + 3);
    if (!v100 || !*(unsigned char *)(v100 + 40))
    {
      id v194 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E4F1C3B8], 134030, @"Missing transaction scope for change tracking of changes.", 0);
      objc_exception_throw(v194);
    }
    -[NSSQLiteConnection processSaveRequest:](v100, (uint64_t)self);
    unsigned int v99 = self;
    id objb = (id)*((void *)self + 9);
  }
  else
  {
    id objb = 0;
    unsigned int v99 = self;
  }
  uint64_t v101 = v99[12];
  if (v101) {
    long long v102 = *(void **)(v101 + 136);
  }
  else {
    long long v102 = 0;
  }
  if ([v102 count]) {
    +[NSSQLiteIndexTrackingModel updateIndexStatistics:usingConnection:model:]((uint64_t)NSSQLiteIndexTrackingModel, v102, *((void *)self + 3), objc_msgSend((id)objc_msgSend(*((id *)self + 1), "ancillarySQLModels"), "objectForKey:", @"NSPersistentStoreTrackIndexUseOptionKey"));
  }
  uint64_t v103 = *((void *)self + 3);
  uint64_t v104 = *((void *)self + 12);
  uint64_t v105 = [self rowCache];
  if (!v103 || !*(unsigned char *)(v103 + 40))
  {
    id v191 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E4F1C3B8], 134030, @"Missing transaction scope for commit changes.", 0);
    objc_exception_throw(v191);
  }
  uint64_t v106 = v105;
  CFArrayRef theArraya = (CFArrayRef)*((void *)self + 23);
  uint64_t v107 = *((void *)self + 12);
  if (v107 && (long long v108 = *(void **)(v107 + 8)) != 0) {
    id v212 = (id)[v108 persistentStoreRequest];
  }
  else {
    id v212 = 0;
  }
  uint64_t v109 = *((void *)self + 1);
  long long v110 = (void *)MEMORY[0x1E4F28EA0];
  long long v111 = (void *)MEMORY[0x1E4F1C9E8];
  uint64_t v112 = [NSNumber numberWithInt:2];
  if (v107)
  {
    uint64_t v113 = atomic_load((unsigned int *)(v107 + 144));
    uint64_t v114 = [NSNumber numberWithInt:v113];
    uint64_t v115 = *(void *)(v107 + 8);
    if (v115) {
      uint64_t v115 = *(void *)(v115 + 32);
    }
    uint64_t v116 = *(void *)(v107 + 104);
  }
  else
  {
    uint64_t v114 = [NSNumber numberWithInt:0];
    uint64_t v115 = 0;
    uint64_t v116 = 0;
  }
  uint64_t v117 = objc_msgSend(v110, "notificationWithName:object:userInfo:", @"_NSSQLCoreTransactionStateChangeNotification", v109, objc_msgSend(v111, "dictionaryWithObjectsAndKeys:", v112, @"_NSSQLCoreTransactionType", v114, @"_NSSQLCoreTransientSequenceNumber", v212, @"_NSSQLCoreActiveSaveRequest", v115, @"_NSSQLCoreActiveSavingContext", v116, @"_NSSQLCoreTransactionExternalDataReferencesToDelete", self, @"requestContext",
             0));
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "postNotification:", v117);
  uint64_t v118 = (unsigned char *)*((void *)self + 3);
  if (v118)
  {
    if (v118[40])
    {
      -[NSSQLiteConnection commitTransaction](*((void *)self + 3));
      uint64_t v119 = *((void *)self + 1);
      if (v119)
      {
        if (atomic_load((unint64_t *)(v119 + 208)))
        {
          uint64_t v121 = [v118 registerCurrentQueryGenerationWithStore:*((void *)self + 1)];
          if (v121)
          {
            uint64_t v122 = [NSString stringWithUTF8String:"Save changes failed to generate a post transaction query generation with error %d"];
            _NSCoreDataLog(17, v122, v123, v124, v125, v126, v127, v128, v121);
            long long v129 = __pflogFaultLog;
            if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 67109120;
              int v261 = v121;
              _os_log_fault_impl(&dword_18AB82000, v129, OS_LOG_TYPE_FAULT, "CoreData: Save changes failed to generate a post transaction query generation with error %d", buf, 8u);
            }
          }
        }
      }
    }
  }
  uint64_t v130 = *((void *)self + 1);
  long long v131 = (void *)MEMORY[0x1E4F28EA0];
  long long v132 = (void *)MEMORY[0x1E4F1C9E8];
  uint64_t v133 = [NSNumber numberWithInt:3];
  if (v107)
  {
    uint64_t v134 = atomic_load((unsigned int *)(v107 + 144));
    uint64_t v135 = [NSNumber numberWithInt:v134];
    uint64_t v136 = *(void *)(v107 + 8);
    if (v136) {
      uint64_t v136 = *(void *)(v136 + 32);
    }
    uint64_t v137 = *(void *)(v107 + 104);
  }
  else
  {
    uint64_t v135 = [NSNumber numberWithInt:0];
    uint64_t v136 = 0;
    uint64_t v137 = 0;
  }
  uint64_t v138 = objc_msgSend(v131, "notificationWithName:object:userInfo:", @"_NSSQLCoreTransactionStateChangeNotification", v130, objc_msgSend(v132, "dictionaryWithObjectsAndKeys:", v133, @"_NSSQLCoreTransactionType", v135, @"_NSSQLCoreTransientSequenceNumber", v212, @"_NSSQLCoreActiveSaveRequest", v136, @"_NSSQLCoreActiveSavingContext", v137, @"_NSSQLCoreTransactionExternalDataReferencesToDelete", self, @"requestContext",
             0));
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "postNotification:", v138);
  if (v104) {
    id v139 = *(id *)(v104 + 40);
  }
  else {
    id v139 = 0;
  }
  long long v246 = 0u;
  long long v247 = 0u;
  long long v244 = 0u;
  long long v245 = 0u;
  uint64_t v140 = [v139 countByEnumeratingWithState:&v244 objects:buf count:16];
  if (v140)
  {
    uint64_t v141 = *(void *)v245;
    do
    {
      for (uint64_t i1 = 0; i1 != v140; ++i1)
      {
        if (*(void *)v245 != v141) {
          objc_enumerationMutation(v139);
        }
        -[NSPersistentStoreCache forgetRowForObjectID:](v106, (const void *)[*(id *)(*((void *)&v244 + 1) + 8 * i1) objectID]);
      }
      uint64_t v140 = [v139 countByEnumeratingWithState:&v244 objects:buf count:16];
    }
    while (v140);
  }

  if (v104) {
    id v143 = *(id *)(v104 + 64);
  }
  else {
    id v143 = 0;
  }
  long long v240 = 0u;
  long long v241 = 0u;
  long long v238 = 0u;
  long long v239 = 0u;
  uint64_t v144 = [v143 countByEnumeratingWithState:&v238 objects:v259 count:16];
  if (v144)
  {
    uint64_t v145 = *(void *)v239;
    BOOL v147 = (CFArrayRef)v106 == theArraya || theArraya == 0;
    do
    {
      for (uint64_t i2 = 0; i2 != v144; ++i2)
      {
        if (*(void *)v239 != v145) {
          objc_enumerationMutation(v143);
        }
        long long v149 = *(void **)(*((void *)&v238 + 1) + 8 * i2);
        long long v150 = (void *)[v149 objectID];
        if (v147) {
          -[NSPersistentStoreCache registerRow:forObjectID:options:](v106, (uint64_t)v149, v150, 4);
        }
        else {
          -[NSPersistentStoreCache forgetRowForObjectID:](v106, v150);
        }
      }
      uint64_t v144 = [v143 countByEnumeratingWithState:&v238 objects:v259 count:16];
    }
    while (v144);
  }

  if (v104) {
    id v151 = *(id *)(v104 + 72);
  }
  else {
    id v151 = 0;
  }
  long long v236 = 0u;
  long long v237 = 0u;
  long long v234 = 0u;
  long long v235 = 0u;
  uint64_t v152 = [v151 countByEnumeratingWithState:&v234 objects:&v255 count:16];
  if (v152)
  {
    uint64_t v153 = *(void *)v235;
    do
    {
      for (uint64_t i3 = 0; i3 != v152; ++i3)
      {
        if (*(void *)v235 != v153) {
          objc_enumerationMutation(v151);
        }
        -[NSPersistentStoreCache forgetRowForObjectID:](v106, *(const void **)(*((void *)&v234 + 1) + 8 * i3));
      }
      uint64_t v152 = [v151 countByEnumeratingWithState:&v234 objects:&v255 count:16];
    }
    while (v152);
  }

  if (v104) {
    uint64_t v155 = (void *)[*(id *)(v104 + 56) mutableCopy];
  }
  else {
    uint64_t v155 = 0;
  }
  if ([v155 count]) {
    id v156 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  }
  else {
    id v156 = 0;
  }
  long long v232 = 0u;
  long long v233 = 0u;
  long long v230 = 0u;
  long long v231 = 0u;
  uint64_t v157 = [v155 countByEnumeratingWithState:&v230 objects:&v251 count:16];
  if (v157)
  {
    uint64_t v158 = *(void *)v231;
    BOOL v160 = (CFArrayRef)v106 == theArraya || theArraya == 0;
    do
    {
      for (uint64_t i4 = 0; i4 != v157; ++i4)
      {
        if (*(void *)v231 != v158) {
          objc_enumerationMutation(v155);
        }
        uint64_t v162 = *(void **)(*((void *)&v230 + 1) + 8 * i4);
        unint64_t v163 = (void *)[v162 objectID];
        if (v160) {
          -[NSPersistentStoreCache registerRow:forObjectID:options:](v106, (uint64_t)v162, v163, 4);
        }
        else {
          -[NSPersistentStoreCache forgetRowForObjectID:](v106, v163);
        }
        objc_msgSend(v156, "addObject:", objc_msgSend(v162, "objectID"));
      }
      uint64_t v157 = [v155 countByEnumeratingWithState:&v230 objects:&v251 count:16];
    }
    while (v157);
  }

  if (v156)
  {
    if (v104 && (uint64_t v164 = *(void *)(v104 + 8)) != 0) {
      uint64_t v165 = *(void **)(v164 + 32);
    }
    else {
      uint64_t v165 = 0;
    }
    -[NSManagedObjectContext _persistentStoreDidUpdateAdditionalRows:](v165, v156);
  }
  uint64_t v166 = *((void *)self + 12);
  if (v166)
  {
    uint64_t v168 = *(void *)(v166 + 80);
    uint64_t v167 = *(void *)(v166 + 88);
  }
  else
  {
    uint64_t v168 = 0;
    uint64_t v167 = 0;
  }
  if (v168 | v167)
  {
    id v169 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v170 = v169;
    if (v168) {
      [v169 setObject:v168 forKey:@"addedOrUpdated"];
    }
    if (v167) {
      [v170 setObject:v167 forKey:@"deleted"];
    }
    uint64_t v171 = [MEMORY[0x1E4F28EA0] notificationWithName:@"NSPersistentStoreOrderKeyUpdateNotification" object:*((void *)self + 1) userInfo:v170];

    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "postNotification:", v171);
  }
  -[NSSQLiteConnection _performPostSaveTasks:andForceFullVacuum:](*((void *)self + 3), objc_msgSend((id)objc_msgSend(self, "persistentStoreRequest"), "_secureOperation"), 0);
  int v172 = v204;
  if (v204)
  {
    uint64_t v173 = *((void *)self + 1);
    if (v173) {
      [*(id *)(v173 + 216) unlock];
    }
    int v172 = 0;
  }
  if (v202)
  {
    uint64_t v174 = (void *)v202[13];
    if (v174) {
      _deleteExternalDataReferences(v174);
    }
    int v175 = (void *)v202[15];
    if (v175) {
      _deleteFileBackedFutures(v175);
    }
  }
  -[NSSQLCore _postChangeNotificationWithTransactionID:](*((void *)self + 1), objb);
  if (v172)
  {
    uint64_t v176 = *((void *)self + 1);
    if (v176) {
      [*(id *)(v176 + 216) unlock];
    }
  }
  uint64_t v177 = *((void *)self + 3);
  -[NSSQLiteConnection endFetchAndRecycleStatement:](v177, 0);
  if (v203) {
    -[NSSQLiteConnection setSecureDeleteMode:](v177, 0);
  }
  -[NSSQLiteConnection _clearSaveGeneratedCachedStatements](v177);
  if (v177)
  {

    *(void *)(v177 + 192) = 0;
  }
  [v201 drain];
  return (id)NSArray_EmptyArray;
}

void sub_18AC3926C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC38F74);
  }
  JUMPOUT(0x18AC38F20);
}

void sub_18AC397C4()
{
}

uint64_t readFileSizeFromJournalHandle(sqlite3 *a1)
{
  uint64_t v1 = -1;
  uint64_t v3 = 0;
  uint64_t v4 = -1;
  if (!sqlite3_file_control(a1, 0, 28, &v3) && v3 && *(void *)v3)
  {
    if ((*(unsigned int (**)(void))(*(void *)v3 + 48))()) {
      return -1;
    }
    else {
      return v4;
    }
  }
  return v1;
}

void sub_18AC3A47C(_Unwind_Exception *a1)
{
}

void sub_18AC3A49C(void *a1)
{
}

id static NSManagedObjectContext.willSaveObjectsNotification.getter(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;

  return v3;
}

void sub_18AC3D180(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

NSManagedObjectModel *_newReadModelFromBytes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, NSMutableDictionary *a5, NSMutableDictionary *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  unint64_t v135 = *a3;
  unint64_t v17 = v135;
  os_log_type_t v18 = objc_alloc_init(NSManagedObjectModel);
  uint64_t v19 = v18;
  unint64_t v20 = (v135 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 + 4;
  uint64_t v22 = a2;
  if (v20 + 4 <= a4)
  {
    unsigned int v23 = bswap32(*(_DWORD *)(a2 + v20));
    unint64_t v135 = v21;
    unint64_t v17 = v21;
  }
  else
  {
    unsigned int v23 = 0;
  }
  v18->_managedObjectModelFlags = (__managedObjectModelFlags)(v23 & 0xFFFFFFFB);
  entities = v18->_entities;
  if (entities) {

  }
  v19->_entities = a5;
  uint64_t v25 = objc_msgSend((id)-[NSMutableDictionary mapping](a5, "mapping"), "length");
  unint64_t v32 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v33 = v32 + 4;
  if (v32 + 4 <= a4)
  {
    unsigned int v34 = bswap32(*(_DWORD *)(a2 + v32));
    unint64_t v135 = v33;
    unint64_t v17 = v33;
  }
  else
  {
    unsigned int v34 = 0;
  }
  if (v25 != v34)
  {
    _NSCoreDataLog(1, @"Mismatch: strategy has %lu length, archive has %u values", v26, v27, v28, v29, v30, v31, v25);
    goto LABEL_75;
  }
  uint64_t v116 = v25;
  [(NSMutableDictionary *)a5 _setValues:a7 retain:0];
  unint64_t v41 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v42 = v41 + 4;
  uint64_t v113 = a5;
  if (v41 + 4 <= a4)
  {
    unsigned int v44 = *(_DWORD *)(a2 + v41);
    unsigned int v43 = bswap32(v44);
    unint64_t v135 = v42;
    if (!a6)
    {
      if (!v44) {
        goto LABEL_27;
      }
      _NSCoreDataLog(1, @"Mismatch: frt strategy has %d length, archive has %u values", v35, v36, v37, v38, v39, v40, 0);
      goto LABEL_75;
    }
    unint64_t v17 = v42;
LABEL_16:
    fetchRequestTemplates = v19->_fetchRequestTemplates;
    if (fetchRequestTemplates) {

    }
    v19->_fetchRequestTemplates = a6;
    uint64_t v46 = (void *)[(NSMutableDictionary *)a6 mapping];
    if ([v46 length] == v43)
    {
      unint64_t v47 = v22 + ((v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43)
      {
        uint64_t v48 = v43;
        uint64_t v49 = (void *)(v22 + ((v17 + 7) & 0xFFFFFFFFFFFFFFF8));
        do
        {
          unint64_t v50 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v51 = v50 + 8;
          if (v50 + 8 <= a4)
          {
            unint64_t v52 = bswap64(*(void *)(v22 + v50));
            unint64_t v135 = v51;
            unint64_t v17 = v51;
          }
          else
          {
            unint64_t v52 = 0;
          }
          *v49++ = *(void *)(a8 + 8 * v52);
          --v48;
        }
        while (v48);
      }
      [(NSMutableDictionary *)a6 _setValues:v47 retain:1];
      goto LABEL_26;
    }
    uint64_t v112 = [v46 length];
    _NSCoreDataLog(1, @"Mismatch: frt strategy has %lu length, archive has %u values", v55, v56, v57, v58, v59, v60, v112);
LABEL_75:

    return 0;
  }
  if (a6)
  {
    unsigned int v43 = 0;
    goto LABEL_16;
  }
LABEL_26:
  unint64_t v42 = v17;
LABEL_27:
  unint64_t v53 = (v42 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v121 = v19;
  if (v53 + 4 <= a4)
  {
    unsigned int v54 = bswap32(*(_DWORD *)(v22 + v53));
    unint64_t v135 = v53 + 4;
  }
  else
  {
    unsigned int v54 = 0;
  }
  for (uint64_t i = (NSMutableDictionary *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:v116]; v54; --v54)
  {
    unint64_t v62 = (v135 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (v62 + 4 <= a4)
    {
      unsigned int v63 = bswap32(*(_DWORD *)(v22 + v62));
      unint64_t v135 = v62 + 4;
    }
    else
    {
      unsigned int v63 = 0;
    }
    uint64_t v64 = (void *)_newReadPFEncodedArrayFromData(a1, v22, &v135, a4, a7, 0);
    [(NSMutableDictionary *)i setObject:v64 forKey:*(void *)(a9 + 8 * v63)];
  }
  uint64_t v118 = v22;
  unint64_t v114 = a4;
  uint64_t v115 = (_PFVMData *)a1;
  uint64_t v65 = v19;
  v19->_configurations = i;
  *((void *)v19->_additionalPrivateIvars + 3) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  obuint64_t j = (id)[(NSMutableDictionary *)i allKeys];
  uint64_t v66 = [obj countByEnumeratingWithState:&v131 objects:v139 count:16];
  if (v66)
  {
    uint64_t v67 = v66;
    uint64_t v68 = *(void *)v132;
    do
    {
      for (uint64_t j = 0; j != v67; ++j)
      {
        if (*(void *)v132 != v68) {
          objc_enumerationMutation(obj);
        }
        uint64_t v70 = *(void *)(*((void *)&v131 + 1) + 8 * j);
        int v71 = (void *)[MEMORY[0x1E4F1CA80] set];
        long long v127 = 0u;
        long long v128 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        uint64_t v72 = (void *)[(NSMutableDictionary *)i objectForKeyedSubscript:v70];
        uint64_t v73 = [v72 countByEnumeratingWithState:&v127 objects:v138 count:16];
        if (v73)
        {
          uint64_t v74 = v73;
          uint64_t v75 = *(void *)v128;
          do
          {
            for (uint64_t k = 0; k != v74; ++k)
            {
              if (*(void *)v128 != v75) {
                objc_enumerationMutation(v72);
              }
              objc_msgSend(v71, "addObject:", objc_msgSend(*(id *)(*((void *)&v127 + 1) + 8 * k), "name"));
            }
            uint64_t v74 = [v72 countByEnumeratingWithState:&v127 objects:v138 count:16];
          }
          while (v74);
        }
        uint64_t v65 = v121;
        [v121->_additionalPrivateIvars[3] setObject:v71 forKeyedSubscript:v70];
      }
      uint64_t v67 = [obj countByEnumeratingWithState:&v131 objects:v139 count:16];
    }
    while (v67);
  }
  id obja = (id)_newReadPFEncodedArrayFromData((uint64_t)v115, v118, &v135, v114, a10, 0);
  versionIdentifiers = v65->_versionIdentifiers;
  if (versionIdentifiers) {

  }
  uint64_t v78 = (NSSet *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithCapacity:v116];
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  uint64_t v79 = [obja countByEnumeratingWithState:&v123 objects:v137 count:16];
  if (v79)
  {
    uint64_t v80 = v79;
    uint64_t v81 = *(void *)v124;
    while (2)
    {
      for (uint64_t m = 0; m != v80; ++m)
      {
        if (*(void *)v124 != v81) {
          objc_enumerationMutation(obja);
        }
        uint64_t v83 = *(void *)(*((void *)&v123 + 1) + 8 * m);
        uint64_t v122 = 0;
        uint64_t v84 = (void *)MEMORY[0x1E4F1CAD0];
        v136[0] = objc_opt_class();
        v136[1] = objc_opt_class();
        void v136[2] = objc_opt_class();
        uint64_t v85 = +[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, objc_msgSend(v84, "setWithArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v136, 3)), v83, (uint64_t)&v122);
        if (!v85)
        {
          _NSCoreDataLog(1, @"Unable to decode versionIdentifiers for model: %@", v86, v87, v88, v89, v90, v91, v122);

          return 0;
        }
        [(NSSet *)v78 addObject:v85];
      }
      uint64_t v80 = [obja countByEnumeratingWithState:&v123 objects:v137 count:16];
      if (v80) {
        continue;
      }
      break;
    }
  }
  uint64_t v19 = v121;
  v121->_versionIdentifiers = v78;

  unint64_t v92 = (v135 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v93 = [(NSMutableDictionary *)v113 count];
  uint64_t v100 = v118;
  uint64_t v101 = v115;
  if (v93)
  {
    uint64_t v102 = v93;
    unint64_t v103 = v135;
    uint64_t v104 = v93;
    do
    {
      unint64_t v105 = (v103 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v106 = v105 + 8;
      if (v105 + 8 <= v114)
      {
        uint64_t v107 = *(void *)(v118 + v105);
        unint64_t v135 = v106;
        unint64_t v103 = v106;
        if (v107)
        {
          _NSCoreDataLog(1, @"Corrupted archive (missing pointer space).", v94, v95, v96, v97, v98, v99, v111);
          goto LABEL_75;
        }
      }
      --v104;
    }
    while (v104);
    unint64_t v108 = v92;
    uint64_t v100 = v118;
    do
    {
      *(void *)(v118 + v108) = _newReadPFEncodedArrayFromData((uint64_t)v115, v118, &v135, v114, a9, 0);
      v108 += 8;
      --v102;
    }
    while (v102);
  }
  v121->_optimizationHints = (id *)(v100 + v92);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v109 = v115;
  }
  else {
    uint64_t v101 = [[_PFVMData alloc] initWithBytes:[(_PFVMData *)v115 bytes] length:[(_PFVMData *)v115 length]];
  }
  v121->_dataForOptimizatiouint64_t n = v101;
  *a3 = v135;
  return v19;
}

void sub_18AC3F204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  if (a2 == 1)
  {
    id v16 = objc_begin_catch(exception_object);

    objc_exception_throw(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AC3F27C()
{
}

void sub_18AC3FEA0(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AC3FE50);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AC407C8(void *a1)
{
}

void sub_18AC41454(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18AC40F48);
    }
    id v2 = objc_begin_catch(exc_buf);

    id v3 = v2;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AC41584(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC41540);
  }
  JUMPOUT(0x18AC41504);
}

void sub_18AC42188(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (!a2) {
    _Unwind_Resume(exc_buf);
  }
  if (a2 == 3)
  {
    uint64_t v48 = objc_begin_catch(exc_buf);
    if (v47) {
      +[NSManagedObjectContext _handleError:withError:]((uint64_t)NSManagedObjectContext, v48, &a47);
    }
    objc_end_catch();
  }
  else
  {
    if (a2 == 2)
    {
      id v49 = objc_begin_catch(exc_buf);
      objc_exception_rethrow();
    }
    objc_begin_catch(exc_buf);
  }
  JUMPOUT(0x18AC41F90);
}

void sub_18AC421A0(_Unwind_Exception *a1)
{
}

void sub_18AC421E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC42214);
  }
  _Unwind_Resume(a1);
}

void sub_18AC42200(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (a2)
  {
    if (v47) {
      JUMPOUT(0x18AC42210);
    }
    if (a2 == 3)
    {
      id v48 = objc_begin_catch(a1);
      if (v46) {
        +[NSManagedObjectContext _handleError:withError:](NSManagedObjectContext, v48, &a46);
      }
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        id v49 = objc_begin_catch(a1);
        objc_exception_rethrow();
      }
      objc_begin_catch(a1);
    }
    JUMPOUT(0x18AC41F90);
  }
  _Unwind_Resume(a1);
}

void sub_18AC42294(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC42268);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18AC422B4(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  return sub_18AC421F4();
}

void sub_18AC4261C(void *a1)
{
}

void sub_18AC43344(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  objc_terminate();
}

void sub_18AC4335C(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18AC43364);
  }
  _Unwind_Resume(a1);
}

void sub_18AC43650(_Unwind_Exception *a1)
{
}

void sub_18AC43670(void *a1)
{
}

void sub_18AC4372C(_Unwind_Exception *a1)
{
}

void sub_18AC4374C(void *a1)
{
}

void sub_18AC437FC(_Unwind_Exception *a1)
{
}

void sub_18AC4381C(void *a1)
{
}

#error "18AC48D58: call analysis failed (funcsize=91)"

BOOL _objectIDEntityAffectsResults(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)[*(id *)(a1 + 8) entity];
  int v5 = *(_DWORD *)(a1 + 72);
  uint64_t v6 = (void *)[*(id *)(a1 + 8) affectedStores];
  BOOL result = 0;
  if (!v6 || objc_msgSend(v6, "indexOfObjectIdenticalTo:", objc_msgSend(a2, "persistentStore")) != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v7 = [a2 entity];
    if (void *)v7 == v4 || (v5 & 0x20) != 0 && ([v4 _subentitiesIncludes:v7]) {
      return 1;
    }
  }
  return result;
}

void sub_18AC498B4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

ValueMetadata *type metadata accessor for NSPersistentStore.StoreType()
{
  return &type metadata for NSPersistentStore.StoreType;
}

os_log_t __PFInstrumentsGetLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coredata", "instruments");
  PFInstrumentsGetLog_coreDataInstrumentsLog = (uint64_t)result;
  return result;
}

void *_svfk_8(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 8uLL);
}

void *_svfk_20(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x14uLL);
}

void *_svfk_15(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0xFuLL);
}

void *_svfk_10(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0xAuLL);
}

uint64_t isTypeEncodingObject(char *a1)
{
  int v1 = *a1;
  if (v1 == 64) {
    return 1;
  }
  if (v1 != 94) {
    return 0;
  }
  int v2 = a1[1];
  if (v2 == 35) {
    return 1;
  }
  if (v2 != 123) {
    return 0;
  }
  uint64_t result = (uint64_t)strchr(a1, 61);
  if (result) {
    return *(unsigned __int8 *)(result + 1) == 35;
  }
  return result;
}

IMP generateAccessor(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __generateAccessor_block_invoke;
  v3[3] = &__block_descriptor_48_e8__16__0_8l;
  v3[4] = a1;
  v3[5] = a2;
  return imp_implementationWithBlock(v3);
}

IMP generateAccessorType(int a1, uint64_t a2, int a3)
{
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  if (a1)
  {
    id v3 = __generateAccessor_block_invoke_2;
    BOOL v4 = a3 == 0;
    int v5 = _sharedIMPL_setvfk_core;
    uint64_t v6 = _sharedIMPL_setPvfk_core;
    uint64_t v7 = &__block_descriptor_48_e11__24__0_8_16l;
  }
  else
  {
    id v3 = __generateAccessor_block_invoke;
    BOOL v4 = a3 == 0;
    int v5 = _sharedIMPL_vfk_core;
    uint64_t v6 = _sharedIMPL_pvfk_core;
    uint64_t v7 = &__block_descriptor_48_e8__16__0_8l;
  }
  id v10[2] = v3;
  v10[3] = v7;
  if (v4) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v6;
  }
  v10[4] = v8;
  v10[5] = a2;
  return imp_implementationWithBlock(v10);
}

IMP generateAccessorWithFunctionPtr3(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __generateAccessor_block_invoke_2;
  v3[3] = &__block_descriptor_48_e11__24__0_8_16l;
  v3[4] = a1;
  v3[5] = a2;
  return imp_implementationWithBlock(v3);
}

void sub_18AC4EB90()
{
}

void sub_18AC4EBD8()
{
}

void sub_18AC4EBE4()
{
  if (v0) {
    JUMPOUT(0x18AC4EBECLL);
  }
  JUMPOUT(0x18AC4EBF0);
}

void sub_18AC4EC58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AC507A4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(exception_object);
    JUMPOUT(0x18AC50568);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AC507C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18AC50350);
  }
  _Unwind_Resume(a1);
}

void sub_18AC507E8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (a2)
  {
    if (a2 == 2)
    {
      uint64_t v19 = objc_begin_catch(exc_buf);
      if (a16[12])
      {
        unint64_t v20 = v19;
        unint64_t v21 = (void *)[(id)objc_opt_class() metadataForPersistentStoreOfType:v16 URL:v17 options:a16[4] error:0];
        if (v21 && (objc_msgSend(v16, "isEqual:", objc_msgSend(v21, "objectForKey:", @"NSStoreType")) & 1) == 0)
        {
          uint64_t v22 = (void *)MEMORY[0x1E4F28C58];
          uint64_t v23 = [v20 userInfo];
          *(void *)(*(void *)(a16[9] + 8) + 40) = [v22 errorWithDomain:*MEMORY[0x1E4F281F8] code:134010 userInfo:v23];
        }
        else
        {
          +[NSManagedObjectContext _handleError:withError:]((uint64_t)NSManagedObjectContext, v20, (uint64_t *)(*(void *)(a16[9] + 8) + 40));
        }
      }
      uint64_t v24 = *(void *)(*(void *)v18 + 8);
      if (*(void *)(v24 + 40)) {
        *(void *)(v24 + 40) = 0;
      }
      objc_end_catch();
      JUMPOUT(0x18AC50158);
    }
    if (a2 == 3)
    {
      id v25 = objc_begin_catch(exc_buf);
      objc_exception_rethrow();
    }
    objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AC50980(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18AC50568);
  }
  _Unwind_Resume(a1);
}

void sub_18AC50994(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18AC50568);
  }
  _Unwind_Resume(a1);
}

void sub_18AC50C2C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18AC50568);
  }
  _Unwind_Resume(a1);
}

void sub_18AC50C38(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AC50C48);
  }
  JUMPOUT(0x18AC50C58);
}

void sub_18AC50C60(_Unwind_Exception *a1)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_18AC50C78(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_18AC50D5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AC50FCC()
{
}

void sub_18AC510DC()
{
}

void sub_18AC510EC()
{
}

void sub_18AC51668(void *a1)
{
}

void sub_18AC518D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AC521B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_18AC52574()
{
}

void sub_18AC526DC()
{
}

void sub_18AC52844(_Unwind_Exception *a1)
{
}

void sub_18AC52B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18AC5331C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void (*a12)(char *))
{
}

uint64_t destroy for NSPersistentStore.StoreType()
{
  return swift_bridgeObjectRelease();
}

void sub_18AC5373C(_Unwind_Exception *a1)
{
}

void sub_18AC53778(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AC53744);
}

void sub_18AC53B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AC53E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AC542D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id NSPersistentStoreCoordinator.addPersistentStore(type:configuration:at:options:)(void *a1, uint64_t a2, void *a3, uint64_t a4, Class isa)
{
  v17[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v10 = (void *)MEMORY[0x18C126250](*a1, a1[1]);
  if (a3) {
    a3 = (void *)MEMORY[0x18C126250](a2, a3);
  }
  URL._bridgeToObjectiveC()(v9);
  unint64_t v12 = v11;
  if (isa) {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  v17[0] = 0;
  id v13 = objc_msgSend(v5, sel_addPersistentStoreWithType_configuration_URL_options_error_, v10, a3, v12, isa, v17);

  if (v13)
  {
    id v14 = v17[0];
  }
  else
  {
    id v15 = v17[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v13;
}

void sub_18AC548F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18AC54CF0()
{
}

void sub_18AC54CFC()
{
}

void sub_18AC55040(_Unwind_Exception *a1)
{
}

void sub_18AC55060(void *a1)
{
}

void sub_18AC5560C(_Unwind_Exception *a1)
{
}

void sub_18AC5563C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AC55630);
  }
  JUMPOUT(0x18AC55654);
}

void sub_18AC55648(void *a1, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(a1);
      JUMPOUT(0x18AC553F0);
    }
    id v2 = objc_begin_catch(a1);
    objc_exception_rethrow();
  }
  JUMPOUT(0x18AC55630);
}

void sub_18AC5568C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC55660);
  }
  JUMPOUT(0x18AC55630);
}

void sub_18AC55BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 192), 8);
  _Block_object_dispose((const void *)(v39 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_18AC561A8()
{
}

void sub_18AC56218()
{
}

void sub_18AC56224()
{
  if (v0) {
    JUMPOUT(0x18AC5622CLL);
  }
  JUMPOUT(0x18AC56230);
}

void sub_18AC56698(_Unwind_Exception *a1)
{
}

void sub_18AC566B8(void *a1)
{
}

void sub_18AC57324(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v4 = objc_begin_catch(exception_object);
    -[NSSQLiteConnection disconnect](v3);
    if (v2) {
      objc_setProperty_nonatomic(v2, v5, v4, 48);
    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void _performRunLoopAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return;
  }
  id v4 = (os_unfair_lock_s *)(a3 + 12);
  os_unfair_lock_lock_with_options();
  if ((*(_DWORD *)(a3 + 20) & 0x80000000) == 0)
  {
    *(_DWORD *)(a3 + 20) = 0;
    os_unfair_lock_unlock(v4);
    os_unfair_lock_lock_with_options();
    v6 = *(void *)(a3 + 24) && (CFArrayRef v5 = *(const __CFArray **)(a3 + 32)) != 0 && CFArrayGetCount(v5) > 0;
    os_unfair_lock_unlock(v4);
    uint64_t v7 = *(void *)(a3 + 24);
    if (!v7 || *(_DWORD *)(v7 + 16) || (int v8 = *(_DWORD *)(v7 + 40), (v8 & 8) != 0))
    {
      int v9 = 0;
    }
    else
    {
      if ((v8 & 0x100) != 0)
      {
        int v9 = 1;
LABEL_14:
        id v10 = objc_alloc_init(MEMORY[0x1E4F28B28]);
        id WeakRetained = (id *)+[_PFWeakReference weakReferenceWithObject:]((uint64_t)_PFWeakReference, v7);
        if (WeakRetained) {
          id WeakRetained = (id *)objc_loadWeakRetained(WeakRetained + 1);
        }
        unint64_t v12 = WeakRetained;
        if (v12
          && (id v13 = v12, !*((_DWORD *)v12 + 4))
          && (v9 & ([v12 _isDeallocating] ^ 1) & 1) != 0
          && ((_PF_USE_IOS_PLATFORM & 1) != 0
           || !objc_msgSend((id)objc_msgSend(v13, "undoManager"), "groupsByEvent")))
        {
          [v13 processPendingChanges];
        }
        else
        {
          -[_PFManagedObjectReferenceQueue _processReferenceQueue:](a3, 0);
        }
        [v10 drain];
        return;
      }
      int v9 = *(_DWORD *)(v7 + 40) & 1;
    }
    if ((v6 | v9) != 1) {
      return;
    }
    goto LABEL_14;
  }

  os_unfair_lock_unlock(v4);
}

void sub_18AC58B0C()
{
}

void sub_18AC58BD8(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC58BA8);
  }
  JUMPOUT(0x18AC58B70);
}

void sub_18AC599FC(_Unwind_Exception *a1)
{
}

void sub_18AC5A7D4(_Unwind_Exception *a1)
{
}

void sub_18AC5C658()
{
}

void sub_18AC5C670(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AC5C57CLL);
}

void sub_18AC5D2E8(_Unwind_Exception *a1)
{
}

void sub_18AC5E180(_Unwind_Exception *a1)
{
}

void sub_18AC5E1C4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AC5E1CCLL);
  }
  JUMPOUT(0x18AC5E1B8);
}

void sub_18AC5E208(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC5E1D8);
  }
  JUMPOUT(0x18AC5E1B8);
}

void sub_18AC5E724(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18AC5E468);
    }
    id v15 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AC5E7EC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC5E7B8);
  }
  JUMPOUT(0x18AC5E790);
}

void sub_18AC5EA64(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18AC5E968);
    }
    id v2 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AC5EAEC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC5EABCLL);
  }
  JUMPOUT(0x18AC5EA9CLL);
}

void sub_18AC5FC5C(_Unwind_Exception *a1)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_18AC5FC74(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AC5FC80);
}

uint64_t _prepareLargeDictionaryResults(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  if (v3 >= 0x40000001) {
    return NSArray_EmptyArray;
  }
  int v8 = (void *)[*(id *)(*(void *)(a2 + 136) + 8) propertiesToFetch];
  int v34 = a3;
  if (![v8 count])
  {
    int v9 = (void *)MEMORY[0x1E4F1C978];
    uint64_t v10 = *(void *)(*(void *)(a2 + 136) + 40);
    uint64_t v11 = v10 ? *(void **)(v10 + 240) : 0;
    uint64_t v12 = [v11 keys];
    uint64_t v13 = *(void *)(*(void *)(a2 + 136) + 40);
    id v14 = v13 ? *(void **)(v13 + 240) : 0;
    id v15 = objc_msgSend(v9, "arrayWithObjects:count:", v12, objc_msgSend(v14, "length"));
    int v8 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v15, "count"));
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    uint64_t v16 = [v15 countByEnumeratingWithState:&v35 objects:v39 count:16];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v36 != v18) {
            objc_enumerationMutation(v15);
          }
          uint64_t v20 = *(void *)(*(void *)(a2 + 136) + 40);
          if (v20)
          {
            unint64_t v21 = (void *)[*(id *)(v20 + 40) objectForKey:*(void *)(*((void *)&v35 + 1) + 8 * i)];
            if (v21) {
              objc_msgSend(v8, "addObject:", objc_msgSend(v21, "propertyDescription"));
            }
          }
        }
        uint64_t v17 = [v15 countByEnumeratingWithState:&v35 objects:v39 count:16];
      }
      while (v17);
    }
  }
  unint64_t v22 = [v8 count];
  unint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = &v33[-v25];
  if (v23 > 0x200) {
    uint64_t v26 = (unsigned char *)NSAllocateScannedUncollectable();
  }
  else {
    bzero(&v33[-v25], 8 * v24);
  }
  if ([v8 count])
  {
    unint64_t v27 = 0;
    do
    {
      *(void *)&v26[8 * v27] = [v8 objectAtIndexedSubscript:v27];
      ++v27;
    }
    while ([v8 count] > v27);
  }
  uint64_t v28 = [NSKnownKeysDictionary alloc];
  uint64_t v29 = *(void *)(*(void *)(a2 + 136) + 40);
  if (v29) {
    uint64_t v30 = *(void *)(v29 + 240);
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v31 = [(NSKnownKeysDictionary *)v28 initWithSearchStrategy:v30];
  [(NSKnownKeysDictionary *)v31 setValues:v26];
  if (v22 >= 0x201) {
    NSZoneFree(0, v26);
  }
  if (v34) {
    bufferResultSetPack((uint64_t)a1);
  }
  id v4 = [[_PFResultArray alloc] initWithObjects:a1 count:v3 store:*(void *)(a2 + 8) metadata:v31];

  return (uint64_t)v4;
}

void bufferResultSetPack(uint64_t a1)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 72);
  uint64_t v3 = *(unsigned int **)(a1 + 64);
  int v4 = v2 - v3;
  size_t v5 = 4 * *v3;
  memcpy(v2, *(const void **)(a1 + 56), v5);
  uint64_t v6 = *(void *)(a1 + 64);
  *(_DWORD *)(v6 + 4) = v4;
  if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    size_t v9 = *(void *)(a1 + 72) + v5;
    *(void *)(a1 + 72) = v9;
    uint64_t v10 = v9 - v6;
    int v11 = getpagesize();
    unint64_t v12 = (v10 + v11 - 1) / (unint64_t)v11 * v11;
    uint64_t v13 = (unsigned int *)MEMORY[0x1E4F14960];
    if (*(void *)(a1 + 16) > v12)
    {
      *(void *)(a1 + 72) = v9 + v12 - v10;
      uint64_t v14 = MEMORY[0x18C128580](*v13);
      if (v14)
      {
        uint64_t v28 = v14;
        _NSCoreDataLog(1, @"*** vm_deallocate(size=%lld) oldSize= %lld, failed (error code=%d)\n", v15, v16, v17, v18, v19, v20, v10);
        uint64_t v29 = *MEMORY[0x1E4F1C3B8];
        uint64_t v31 = @"VMErrorCode";
        v32[0] = [NSNumber numberWithInt:v28];
        id v30 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, v29, 134183, @"Unable to deallocate VM Memory", (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:&v31 count:1]);
        objc_exception_throw(v30);
      }
    }
    uint64_t v21 = 4 * *(unsigned int *)(a1 + 28);
    if (MEMORY[0x18C128580](*v13, *(void *)(a1 + 56), v21)) {
      _NSCoreDataLog(2, @"*** vm_deallocate(size=%lld), failed (error code=%d)\n", v22, v23, v24, v25, v26, v27, v21);
    }
    *(void *)(a1 + 16) = v10;
  }
  else
  {
    *(_DWORD *)(a1 + 28) = 0;
    uint64_t v7 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      uint64_t v7 = malloc_default_zone();
    }
    int v8 = *(void **)(a1 + 56);
    malloc_zone_free(v7, v8);
  }
}

void snapshot_set_objectID(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 16);
  if (v3 != a2)
  {
    id v4 = v3;
    *(void *)(a1 + 16) = a2;
    if (v4)
    {
    }
  }
}

void _PFfastFactoryRelease2(void *a1)
{
  IndexedIvars = object_getIndexedIvars(a1);
  if (!atomic_fetch_add_explicit((atomic_uint *volatile)IndexedIvars, 0xFFFFFFFF, memory_order_relaxed))
  {
    id v2 = IndexedIvars;
    uint64_t v3 = (const void *)IndexedIvars[2];
    if (v3)
    {
      CFRelease(v3);
      v2[2] = 0;
    }
    v2[1] = 0;
    __dmb(0xBu);
  }
}

void __internalBlockToDeallocNSManagedObjectContext_block_invoke_2(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  if (!*(_DWORD *)(a1 + 48))
  {
    id v2 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      id v2 = malloc_default_zone();
    }
    uint64_t v3 = *(void **)(a1 + 40);
    malloc_zone_free(v2, v3);
  }
}

__CFString *NSSQLiteAdapter_typeStringForSQLType(int a1)
{
  if ((a1 - 1) > 0x10) {
    return @"UNDEFINED";
  }
  else {
    return off_1E544DEB8[(char)(a1 - 1)];
  }
}

id _newObjectIDSetsForRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (a1) {
    uint64_t v6 = a1[3];
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v71 = v6;
  uint64_t v7 = (void *)[a1 fetchStatement];
  uint64_t v72 = a3;
  unint64_t v62 = a1;
  uint64_t v65 = [v7 entity];
  if (a1) {
    uint64_t v61 = a1[14];
  }
  else {
    uint64_t v61 = 0;
  }
  int v8 = (void *)[a2 sortedArrayUsingFunction:compareObjectIDsByPKs context:0];
  size_t v9 = _rawSQLForToManyFaultStatement(v7, 1, 1);
  uint64_t v10 = (void *)[MEMORY[0x1E4F28E78] string];
  uint64_t v11 = [v9 rangeOfString:@" FROM " options:6];
  uint64_t v12 = [v9 rangeOfString:@" WHERE " options:6];
  uint64_t v70 = v13;
  uint64_t v14 = stripEmptyStringsFromArray(objc_msgSend((id)objc_msgSend(v9, "substringToIndex:", v11), "componentsSeparatedByString:", @" "));
  uint64_t v15 = stripEmptyStringsFromArray(objc_msgSend((id)objc_msgSend(v9, "substringFromIndex:", v12), "componentsSeparatedByString:", @" "));
  uint64_t v16 = objc_msgSend((id)objc_msgSend(v15, "objectAtIndex:", 1), "stringByReplacingOccurrencesOfString:withString:", @"("), &stru_1ED787880;
  unint64_t v17 = [v14 count];
  objc_msgSend(v10, "appendString:", objc_msgSend(v14, "objectAtIndex:", 0));
  [v10 appendFormat:@" %@, %@", objc_msgSend((id)objc_msgSend(v14, "objectAtIndex:", 1), "stringByReplacingOccurrencesOfString:withString:", @",", &stru_1ED787880), v16];
  if (v17 >= 3) {
    [v10 appendFormat:@", %@", objc_msgSend(v14, "objectAtIndex:", 2)];
  }
  uint64_t v18 = v72;
  if (v72) {
    [v10 appendFormat:@", %@.%@", objc_msgSend((id)objc_msgSend(v16, "componentsSeparatedByString:", @".", "objectAtIndex:", 0), v72];
  }
  objc_msgSend(v10, "appendString:", objc_msgSend(v9, "substringWithRange:", v11, &v70[v12 - v11]));
  objc_msgSend(v10, "appendFormat:", @"%@ IN("), v16;
  uint64_t v19 = [v8 count];
  uint64_t v20 = v19 - 1;
  if (v19 != 1)
  {
    uint64_t v21 = 0;
    do
      [v10 appendFormat:@"%qu, ", objc_msgSend((id)objc_msgSend(v8, "objectAtIndex:", v21++), "_referenceData64")];
    while (v20 != v21);
  }
  [v10 appendFormat:@"%qu "], objc_msgSend((id)objc_msgSend(v8, "objectAtIndex:", v20), "_referenceData64"));
  unint64_t v22 = [v15 count];
  if (v22 >= 5)
  {
    unint64_t v23 = v22;
    [v10 appendString:@"AND "];
    if ([(id)objc_msgSend(v15 objectAtIndex:v23 - 1), "hasSuffix:", @""])) {
      objc_msgSend(v10, "appendString:", @"(");
    }
    if (v23 >= 6)
    {
      for (uint64_t i = 5; i != v23; ++i)
      {
        objc_msgSend(v10, "appendString:", objc_msgSend(v15, "objectAtIndex:", i));
        [v10 appendString:@" "];
      }
    }
  }
  CFArrayRef v25 = -[NSSQLiteConnection copyRawIntegerRowsForSQL:](v71, v10);
  uint64_t v26 = v65;
  -[NSSQLiteConnection endFetchAndRecycleStatement:](v71, 0);
  if (v65)
  {
    uint64_t v27 = *(void **)(v65 + 152);
    unsigned int v28 = 2;
    if (v27)
    {
      uint64_t v29 = [v27 count];
      BOOL v30 = v29 != 0;
      if (v29) {
        unsigned int v28 = 3;
      }
      else {
        unsigned int v28 = 2;
      }
    }
    else
    {
      BOOL v30 = 0;
    }
  }
  else
  {
    BOOL v30 = 0;
    unsigned int v28 = 2;
  }
  BOOL v73 = v30;
  BOOL v74 = v72 != 0;
  char v75 = v28;
  if (v25)
  {
    unint64_t Count = CFArrayGetCount(v25);
    if (Count < 2)
    {
      id v67 = (id)NSArray_EmptyArray;
LABEL_66:
      CFRelease(v25);
      return v67;
    }
    BOOL v66 = v30;
    v58[1] = v58;
    unint64_t v32 = MEMORY[0x1F4188790](Count);
    long long v35 = (char *)v58 - v33;
    unint64_t v59 = v32;
    CFArrayRef v60 = v25;
    CFIndex v69 = v34;
    if (v32 >= 0x202)
    {
      long long v36 = NSAllocateScannedUncollectable();
    }
    else
    {
      bzero((char *)v58 - v33, 8 * v34);
      long long v36 = v35;
    }
    BOOL v37 = v18 != 0;
    v77.locatiouint64_t n = 1;
    v77.length = v69;
    uint64_t v68 = v36;
    CFArrayGetValues(v60, v77, (const void **)v36);
    CFMergeSortArray();
    id v38 = objc_alloc(MEMORY[0x1E4F1CA48]);
    uint64_t v39 = [v8 count];
    uint64_t v40 = 2;
    if (v18) {
      uint64_t v40 = 3;
    }
    id v67 = (id)[v38 initWithCapacity:v39 * v40];
    id v41 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (v37) {
      uint64_t v70 = (char *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
    }
    else {
      uint64_t v70 = 0;
    }
    if (v62)
    {
      unint64_t v42 = (objc_class *)[(id)v62[1] objectIDFactoryForSQLEntity:v26];
      if (v26)
      {
LABEL_38:
        uint64_t v64 = *(unsigned int *)(v26 + 184);
        goto LABEL_39;
      }
    }
    else
    {
      unint64_t v42 = 0;
      if (v26) {
        goto LABEL_38;
      }
    }
    uint64_t v64 = 0;
LABEL_39:
    uint64_t v65 = 0;
    unsigned int v43 = 0;
    uint64_t v71 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = -1;
    uint64_t v63 = 8 * v28;
    do
    {
      uint64_t v46 = (void *)v68[v44];
      if (v66)
      {
        uint64_t v47 = v46[2];
        if (v64 != v47)
        {
          BOOL v48 = v62 == 0;
          id v49 = _sqlEntityForEntityID(v61, v46[2]);
          if (v48) {
            unint64_t v42 = 0;
          }
          else {
            unint64_t v42 = (objc_class *)[(id)v62[1] objectIDFactoryForSQLEntity:v49];
          }
          uint64_t v64 = v47;
        }
      }
      unint64_t v50 = (void *)[[v42 alloc] initWithPK64:*v46];
      uint64_t v51 = v46[1];
      uint64_t v52 = v45;
      if (v51 != v71)
      {
        uint64_t v52 = v45;
        do
          unsigned int v43 = (void *)[v8 objectAtIndex:++v52];
        while (v51 != [v43 _referenceData64]);
        uint64_t v71 = v51;
      }
      if (v45 != v52)
      {
        if ([v41 count])
        {
          BOOL v53 = v72 != 0;
          [v67 addObject:v65];
          [v67 addObject:v41];
          if (v53)
          {
            [v67 addObject:v70];

            uint64_t v70 = (char *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
          }

          id v41 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        }
        uint64_t v65 = (uint64_t)v43;
      }
      BOOL v54 = v72 != 0;
      [v41 addObject:v50];
      if (v54)
      {
        uint64_t v55 = [NSNumber numberWithUnsignedInteger:LODWORD(v46[(unint64_t)v63 / 8])];
        [v70 addObject:v55];
      }

      ++v44;
      uint64_t v45 = v52;
    }
    while (v44 != v69);
    if ([v41 count])
    {
      BOOL v56 = v72 != 0;
      [v67 addObject:v65];
      [v67 addObject:v41];

      if (v56)
      {
        [v67 addObject:v70];
      }
    }
    if (v59 >= 0x202) {
      NSZoneFree(0, v68);
    }
    CFArrayRef v25 = v60;
    goto LABEL_66;
  }
  return 0;
}

void sub_18AC64B64(_Unwind_Exception *a1)
{
}

void sub_18AC64B7C(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AC64BD0);
}

void sub_18AC64B84(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18AC6471CLL);
    }
    objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AC64BBC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC64B94);
  }
  _Unwind_Resume(a1);
}

void *_rawSQLForToManyFaultStatement(void *a1, int a2, int a3)
{
  uint64_t v6 = (void *)[a1 sqlString];
  uint64_t v7 = [v6 rangeOfString:@" FROM " options:6];
  uint64_t v9 = v8;
  uint64_t v10 = [v6 rangeOfString:@" WHERE " options:6];
  uint64_t v12 = stripEmptyStringsFromArray(objc_msgSend((id)objc_msgSend(v6, "substringWithRange:", v7 + 1, v10 - v7 + v11 - 2), "componentsSeparatedByString:", @" "));
  if ((unint64_t)[v12 count] < 4) {
    uint64_t v13 = &stru_1ED787880;
  }
  else {
    uint64_t v13 = (__CFString *)objc_msgSend((id)objc_msgSend(v12, "objectAtIndex:", 2), "stringByAppendingString:", @".");
  }
  if ((unint64_t)[v12 count] < 6)
  {
    uint64_t v15 = objc_msgSend(MEMORY[0x1E4F28E78], "stringWithString:", objc_msgSend(v6, "substringFromIndex:", v7 + v9));
  }
  else
  {
    uint64_t v14 = objc_msgSend(v12, "subarrayWithRange:", 6, objc_msgSend(v12, "count") - 7);
    uint64_t v15 = [MEMORY[0x1E4F28E78] stringWithFormat:@"%@ %@ JOIN %@ %@ %@%@", objc_msgSend(v12, "objectAtIndex:", 4), objc_msgSend(v12, "objectAtIndex:", 5), objc_msgSend(v12, "objectAtIndex:", 1), objc_msgSend(v12, "objectAtIndex:", 2), objc_msgSend(v14, "componentsJoinedByString:", @" ", objc_msgSend(v6, "substringFromIndex:", v10)];
  }
  uint64_t v16 = (void *)v15;
  uint64_t v17 = [a1 entity];
  if (!v17 || (uint64_t v18 = *(void **)(v17 + 152)) == 0)
  {
    uint64_t v20 = NSString;
LABEL_13:
    if (a3) {
      uint64_t v23 = [v20 stringWithFormat:@"SELECT %@%@ FROM ", v13, @"Z_PK", v29, v30];
    }
    else {
      uint64_t v23 = [v20 stringWithFormat:@"SELECT 0, %@%@ FROM ", v13, @"Z_PK", v29, v30];
    }
    goto LABEL_18;
  }
  uint64_t v19 = [v18 count];
  uint64_t v20 = NSString;
  if (!v19) {
    goto LABEL_13;
  }
  if (a3)
  {
    uint64_t v21 = @"Z_PK";
    unint64_t v22 = NSSQLEntityColumnName;
  }
  else
  {
    uint64_t v21 = @"Z_ENT";
    unint64_t v22 = NSSQLPKColumnName;
  }
  uint64_t v23 = [NSString stringWithFormat:@"SELECT %@%@, %@%@ FROM ", v13, v21, v13, *v22];
LABEL_18:
  [v16 insertString:v23 atIndex:0];
  if (a2 && objc_msgSend((id)objc_msgSend(a1, "bindVariables"), "count"))
  {
    uint64_t v24 = (void *)[v16 componentsSeparatedByString:@" ?"];
    uint64_t v16 = objc_msgSend(MEMORY[0x1E4F28E78], "stringWithCapacity:", objc_msgSend(v16, "length"));
    uint64_t v25 = [v24 count];
    uint64_t v26 = v25 - 1;
    if (v25 != 1)
    {
      uint64_t v27 = 0;
      do
      {
        objc_msgSend(v16, "appendString:", objc_msgSend(v24, "objectAtIndex:", v27));
        objc_msgSend(v16, "appendFormat:", @" %qi", objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "bindVariables"), "objectAtIndex:", v27++), "int64"));
      }
      while (v26 != v27);
    }
    objc_msgSend(v16, "appendString:", objc_msgSend(v24, "objectAtIndex:", v26));
  }
  return v16;
}

void *stripEmptyStringsFromArray(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(a1);
        }
        uint64_t v7 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        if ([v7 length]) {
          [v2 addObject:v7];
        }
      }
      uint64_t v4 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
  return v2;
}

void sub_18AC66FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t partial apply for closure #1 in closure #1 in NSManagedObjectContext._rethrowsHelper_perform_enqueued<A>(_:rescue:)()
{
  return closure #1 in closure #1 in NSManagedObjectContext._rethrowsHelper_perform_enqueued<A>(_:rescue:)(*(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 16));
}

uint64_t closure #1 in closure #1 in NSManagedObjectContext._rethrowsHelper_perform_enqueued<A>(_:rescue:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a3;
  uint64_t v31 = a1;
  uint64_t v32 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v32 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v32);
  uint64_t v29 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  long long v10 = (void (*)(uint64_t))((char *)&v26 - v9);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v26 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = *(void *)(a4 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v18 = v17((char *)&v26 - v14, 1, 1, a4);
  v31(v18);
  uint64_t v31 = v10;
  uint64_t v19 = v32;
  uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v28 = v5 + 8;
  v27(v15, v32);
  v17(v13, 0, 1, a4);
  uint64_t v20 = v13;
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v21(v15, v20, v19);
  unint64_t v22 = v29;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v29, v15, v19);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v22, 1, a4);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v24 = (char *)v31;
    (*(void (**)(void (*)(uint64_t), char *, uint64_t))(v16 + 32))(v31, v22, a4);
    v17(v24, 0, 1, a4);
    uint64_t v25 = v32;
    v21(*(char **)(*(void *)(v30 + 64) + 40), v24, v32);
    swift_continuation_throwingResume();
    return ((uint64_t (*)(char *, uint64_t))v27)(v15, v25);
  }
  return result;
}

uint64_t sortColumnsByType(void *a1, void *a2)
{
  int v4 = [a1 sqlType];
  int v5 = [a2 sqlType];
  int v6 = [a1 propertyType];
  switch(v6)
  {
    case 2:
      uint64_t v7 = 0;
      break;
    case 6:
      uint64_t v7 = 2;
      break;
    case 5:
      uint64_t v7 = 1;
      break;
    default:
      if ((v4 - 1) > 0x10) {
        uint64_t v7 = 140;
      }
      else {
        uint64_t v7 = qword_18AE542D0[(char)(v4 - 1)];
      }
      break;
  }
  int v8 = [a2 propertyType];
  switch(v8)
  {
    case 2:
      uint64_t v9 = 0;
      break;
    case 6:
      uint64_t v9 = -2;
      break;
    case 5:
      uint64_t v9 = -1;
      break;
    default:
      if ((v5 - 1) > 0x10) {
        uint64_t v9 = -140;
      }
      else {
        uint64_t v9 = qword_18AE54358[(char)(v5 - 1)];
      }
      break;
  }
  return v9 + v7;
}

void sub_18AC67E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18AC67B9CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AC6879C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  objc_end_catch();
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18AC683ECLL);
  }
  id v32 = objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_18AC68848()
{
}

void sub_18AC68858(void *a1)
{
}

void sub_18AC68864()
{
  if (v0) {
    JUMPOUT(0x18AC6886CLL);
  }
  JUMPOUT(0x18AC68870);
}

void sub_18AC6975C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AC68E58);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t NSManagedObjectContext.perform<A>(schedule:_:)()
{
  int v1 = *(void **)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 352) = v2;
  if (v2)
  {
    swift_willThrow();
    uint64_t v3 = NSManagedObjectContext.perform<A>(schedule:_:);
  }
  else
  {
    uint64_t v5 = v1[36];
    uint64_t v4 = v1[37];
    uint64_t v6 = v1[33];
    uint64_t v7 = v1[34];
    int v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
    v1[45] = v8;
    v1[46] = (v7 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v8(v4, v5, v6);
    uint64_t v3 = NSManagedObjectContext.perform<A>(schedule:_:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  int v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[45];
  uint64_t v2 = v0[43];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[38];
  uint64_t v6 = v0[34];
  uint64_t v5 = v0[35];
  uint64_t v7 = v0[33];
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v16 = v0[31];
  v15(v4, v7);
  v1(v4, v3, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v7);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v5, 1, v16);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = v0[43];
    uint64_t v10 = v0[41];
    uint64_t v11 = v0[35];
    uint64_t v12 = v0[31];
    uint64_t v13 = v0[28];
    v15(v0[38], v0[33]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v13, v11, v12);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  return result;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  const void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v14;

  int v1 = v0;
  uint64_t v2 = v0;
  uint64_t v3 = v0 + 2;
  uint64_t v4 = v0 + 10;
  uint64_t v5 = v0[36];
  uint64_t v6 = (void *)v0[32];
  uint64_t v7 = v1[30];
  int v8 = v1[31];
  uint64_t v9 = v1[29];
  v1[2] = v2;
  v1[7] = v5;
  v1[3] = NSManagedObjectContext.perform<A>(schedule:_:);
  uint64_t v10 = swift_continuation_init();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v8;
  v11[3] = v9;
  v11[4] = v7;
  v11[5] = v10;
  v1[14] = partial apply for closure #1 in closure #1 in NSManagedObjectContext._rethrowsHelper_perform_enqueued<A>(_:rescue:);
  v1[15] = v11;
  v1[10] = MEMORY[0x1E4F143A8];
  v1[11] = 1107296256;
  v1[12] = thunk for @escaping @callee_guaranteed () -> ();
  v1[13] = &block_descriptor_9_0;
  uint64_t v12 = _Block_copy(v4);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_performBlock_, v12);
  _Block_release(v12);
  return MEMORY[0x1F41881E8](v3);
}

{
  void *v0;
  uint64_t (*v1)();
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  id *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;

  if (*((unsigned char *)v0 + 376) == 1)
  {
    int v1 = 0;
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(v0[31] - 8);
    goto LABEL_8;
  }
  long long v35 = (id)v0[32];
  uint64_t v5 = v0[30];
  uint64_t v4 = v0[31];
  uint64_t v6 = v0[29];
  uint64_t v7 = swift_allocBox();
  uint64_t v3 = *(void *)(v4 - 8);
  id v32 = v3;
  CFIndex v34 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v4);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0;
  uint64_t v33 = (id *)(v9 + 16);
  uint64_t v2 = (void *)swift_allocObject();
  v2[2] = v4;
  v2[3] = v6;
  v2[4] = v5;
  v2[5] = v7;
  v2[6] = v9;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = partial apply for closure #1 in NSManagedObjectContext.perform<A>(schedule:_:);
  *(void *)(v10 + 24) = v2;
  v0[20] = thunk for @callee_guaranteed () -> ()partial apply;
  v0[21] = v10;
  v0[16] = MEMORY[0x1E4F143A8];
  v0[17] = 1107296256;
  v0[18] = thunk for @escaping @callee_guaranteed () -> ();
  v0[19] = &block_descriptor_23;
  uint64_t v11 = _Block_copy(v0 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v12 = objc_msgSend(v35, sel__performImmediate_, v11);
  _Block_release(v11);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t v13 = swift_release();
  if (v5)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (!v12)
  {
    swift_release();
    swift_release();
    swift_release();
    int v1 = partial apply for closure #1 in NSManagedObjectContext.perform<A>(schedule:_:);
LABEL_8:
    v0[41] = v1;
    v0[42] = v2;
    uint64_t v25 = v0[38];
    v0[43] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 56))(v25, 1, 1);
    uint64_t v13 = (uint64_t)NSManagedObjectContext.perform<A>(schedule:_:);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    return MEMORY[0x1F4188298](v13, v14, v15);
  }
  uint64_t v16 = v0[40];
  uint64_t v17 = v0[33];
  uint64_t v18 = v0[34];
  swift_beginAccess();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  v19(v16, v34, v17);
  swift_beginAccess();
  uint64_t v20 = v0[40];
  if (!*v33)
  {
    uint64_t v26 = v0[39];
    uint64_t v27 = v0[31];
    v19(v26, v0[40], v0[33]);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v26, 1, v27);
    if (v13 != 1)
    {
      uint64_t v28 = v0[40];
      uint64_t v29 = v0[33];
      uint64_t v30 = v0[34];
      (*(void (**)(void, void, void))(v32 + 32))(v0[28], v0[39], v0[31]);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
      swift_release_n();
      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v24 = (uint64_t (*)(void))v0[1];
      goto LABEL_13;
    }
LABEL_17:
    __break(1u);
    return MEMORY[0x1F4188298](v13, v14, v15);
  }
  uint64_t v21 = v0[33];
  unint64_t v22 = v0[34];
  uint64_t v23 = *v33;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  swift_release_n();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*)(void))v0[1];
LABEL_13:
  return v24();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  int v1 = v0[41];
  uint64_t v2 = v0[38];
  uint64_t v3 = v0[33];
  uint64_t v4 = v0[34];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t NSManagedObjectContext.perform<A>(schedule:_:)(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 248) = a5;
  *(void *)(v6 + 256) = v5;
  *(void *)(v6 + 232) = a3;
  *(void *)(v6 + 240) = a4;
  *(void *)(v6 + 224) = a1;
  uint64_t v8 = type metadata accessor for Optional();
  *(void *)(v6 + 264) = v8;
  *(void *)(v6 + 272) = *(void *)(v8 - 8);
  *(void *)(v6 + 280) = swift_task_alloc();
  *(void *)(v6 + 288) = swift_task_alloc();
  *(void *)(v6 + 296) = swift_task_alloc();
  *(void *)(v6 + 304) = swift_task_alloc();
  *(void *)(v6 + 312) = swift_task_alloc();
  *(void *)(v6 + 320) = swift_task_alloc();
  *(unsigned char *)(v6 + 376) = *a2;
  return MEMORY[0x1F4188298](NSManagedObjectContext.perform<A>(schedule:_:), 0, 0);
}

id NSCustomMigrationStage.willMigrateHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v8 = v6;
  if (a1)
  {
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = a1;
    *(void *)(v13 + 24) = a2;
    v17[4] = a4;
    v17[5] = v13;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 1107296256;
    id v17[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
    v17[3] = a5;
    uint64_t v14 = _Block_copy(v17);
    swift_retain();
    swift_release();
    objc_msgSend(v8, *a6, v14);
    _Block_release(v14);
    return (id)outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
  }
  else
  {
    uint64_t v16 = *a6;
    return objc_msgSend(v6, v16, 0);
  }
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

void sub_18AC6ACF4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 232), 8);
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18AC6AC34);
  }
  id v38 = objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_18AC6ADA4()
{
}

void sub_18AC6ADB0()
{
  if (v0) {
    JUMPOUT(0x18AC6ADB8);
  }
  JUMPOUT(0x18AC6ADBCLL);
}

void sub_18AC6DCE4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (a2 != 4)
    {
      objc_begin_catch(a1);
      JUMPOUT(0x18AC6D610);
    }
    id v2 = objc_begin_catch(a1);
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_18AC6E534(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC6E504);
  }
  JUMPOUT(0x18AC6E268);
}

NSStagedMigrationManager __swiftcall NSStagedMigrationManager.init(_:)(Swift::OpaquePointer a1)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for NSMigrationStage();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v3 = (objc_class *)objc_msgSend(v1, sel_initWithMigrationStages_, isa);

  uint64_t v6 = v3;
  result._container = v5;
  result._stages = v4;
  result.super.Class isa = v6;
  return result;
}

unint64_t type metadata accessor for NSMigrationStage()
{
  unint64_t result = lazy cache variable for type metadata for NSMigrationStage;
  if (!lazy cache variable for type metadata for NSMigrationStage)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMigrationStage);
  }
  return result;
}

void sub_18AC6F7C8(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v3 = objc_begin_catch(exception_object);

    objc_exception_throw(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AC6F80C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x18AC6F7E8);
}

void sub_18AC6F818(_Unwind_Exception *a1)
{
}

#error "18AC6FC84: call analysis failed (funcsize=97)"

void sub_18AC6FD08(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC6FB74);
  }
  JUMPOUT(0x18AC6FD28);
}

void sub_18AC6FE54(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v3 = objc_begin_catch(exception_object);
    v2[2] = 0;

    objc_exception_throw(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AC703E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AC71540()
{
}

void sub_18AC71570(_Unwind_Exception *a1)
{
}

void sub_18AC71674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AC7183C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AC71C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_18AC72FE4(void *a1)
{
}

void sub_18AC72FF0(_Unwind_Exception *a1)
{
}

void sub_18AC741E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t CoreSpotlightCSPrivateSearchableIndexFunction()
{
  return qword_1EB2707E8;
}

#error "18AC7478C: call analysis failed (funcsize=65)"

void sub_18AC762DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18AC76488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

#error "18AC76538: call analysis failed (funcsize=63)"

Class initCoreSpotlightCSPrivateSearchableIndex()
{
  if (_MergedGlobals_88 != -1) {
    dispatch_once(&_MergedGlobals_88, &__block_literal_global_38);
  }
  Class result = objc_getClass("CSPrivateSearchableIndex");
  qword_1EB2707E8 = (uint64_t)result;
  getCoreSpotlightCSPrivateSearchableIndexClass Class = CoreSpotlightCSPrivateSearchableIndexFunction;
  return result;
}

void sub_18AC76D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

void _pvfk_48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

objc_class *_PFFastStoreTemporaryIDClass(uint64_t a1)
{
  Class result = *(objc_class **)(a1 + 64);
  if (!result)
  {
    Class result = +[NSTemporaryObjectID classForStore:a1];
    uint64_t v3 = 0;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 64), (unint64_t *)&v3, (unint64_t)result);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 64);

      return (objc_class *)v4;
    }
  }
  return result;
}

id _newReadStringFromBytes(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3 = (*a2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v3 + 4 > a3) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(a1 + v3);
  uint64_t v5 = bswap32(v4);
  unint64_t v6 = v3 + 8;
  if (v6 + v5 > a3) {
    return 0;
  }
  *a2 = v6 + v5;
  if (v4)
  {
    uint64_t v8 = v5 >> 1;
    uint64_t v9 = a1 + v6;
    id v10 = [NSString alloc];
    return (id)[v10 initWithCharactersNoCopy:v9 length:v8 freeWhenDone:0];
  }
  else
  {
    uint64_t v11 = (objc_class *)NSString;
    return objc_alloc_init(v11);
  }
}

void sub_18AC7BD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,void (*a56)(char *))
{
}

uint64_t one-time initialization function for didSaveObjectsNotification()
{
  uint64_t result = MEMORY[0x18C126250](0xD00000000000002BLL, 0x800000018AE54D00);
  static NSManagedObjectContext.didSaveObjectsNotificatiouint64_t n = result;
  return result;
}

#error "18AC7C6EC: call analysis failed (funcsize=31)"

void sub_18AC7CA84(_Unwind_Exception *a1)
{
}

void sub_18AC7CBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AC7D0E4()
{
}

void sub_18AC7D1C4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC7D190);
  }
  JUMPOUT(0x18AC7D16CLL);
}

void sub_18AC7D4D8(_Unwind_Exception *a1)
{
}

void sub_18AC7E304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t static NSPersistentStore.StoreType.sqlite.getter@<X0>(void *a1@<X8>)
{
  return static NSPersistentStore.StoreType.sqlite.getter(&one-time initialization token for sqlite, &static NSPersistentStore.StoreType.sqlite, &qword_1E91214B0, a1);
}

void sub_18AC7EAE8(_Unwind_Exception *a1)
{
}

void sub_18AC7F038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void (*a24)(char *))
{
}

void sub_18AC805C4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18AC807B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AC813C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AC815A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AC836C0(_Unwind_Exception *a1)
{
}

void sub_18AC83764(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_18AC83B58(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18AC839F8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t static NSPersistentStore.StoreType.sqlite.getter@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = *a3;
  *a4 = *a2;
  a4[1] = v7;

  return swift_bridgeObjectRetain();
}

__CFDictionary *_executeGenerateObjectIDRequest(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = a1[3];
    unint64_t v3 = (void *)a1[11];
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
  }
  CFIndex v4 = [v3 count];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, v4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (a1)
  {
    uint64_t v6 = a1[1];
    if (v6) {
      [*(id *)(v6 + 216) lock];
    }
  }
  -[NSSQLiteConnection beginTransaction](v2);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v7 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v18 != v8) {
          objc_enumerationMutation(v3);
        }
        id v10 = *(const void **)(*((void *)&v17 + 1) + 8 * i);
        sqlite3_int64 v11 = -[NSSQLiteConnection generatePrimaryKeysForEntity:batch:](v2, (uint64_t)v10, objc_msgSend((id)objc_msgSend(v3, "objectForKey:", v10), "unsignedIntegerValue"));
        if (!v11)
        {
          id v16 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E4F1C3B8], 134030, @"unable to generate primary keys", 0);
          objc_exception_throw(v16);
        }
        CFDictionarySetValue(Mutable, v10, (const void *)[NSNumber numberWithLongLong:v11]);
      }
      uint64_t v7 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v7);
  }
  -[NSSQLiteConnection commitTransaction](v2);
  if (a1)
  {
    uint64_t v12 = a1[1];
    if (v12) {
      [*(id *)(v12 + 216) unlock];
    }
  }
  -[NSSQLiteConnection endFetchAndRecycleStatement:](v2, 0);
  if (Mutable)
  {
    uint64_t v13 = Mutable;
    CFRelease(Mutable);
  }
  uint64_t v14 = Mutable;
  return Mutable;
}

void sub_18AC849BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    objc_end_catch();
  }
  if (v11) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AC84A5C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AC84A50);
  }
  JUMPOUT(0x18AC84A7CLL);
}

void sub_18AC84A84(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AC84AA4);
  }
  JUMPOUT(0x18AC84A4CLL);
}

void sub_18AC84AD0(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC84AACLL);
  }
  JUMPOUT(0x18AC84A50);
}

void sub_18AC85C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18AC869C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AC86BC4(_Unwind_Exception *a1)
{
}

void sub_18AC86C2C(void *a1)
{
}

void sub_18AC87244(_Unwind_Exception *a1)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_18AC8725C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AC87264);
  }
  objc_terminate();
}

id static NSManagedObjectContext.didChangeObjectsNotification.getter()
{
  return static NSManagedObjectContext.willSaveObjectsNotification.getter(&one-time initialization token for didChangeObjectsNotification, (void **)&static NSManagedObjectContext.didChangeObjectsNotification);
}

id static NSManagedObjectContext.didMergeChangesObjectIDsNotification.getter()
{
  return static NSManagedObjectContext.willSaveObjectsNotification.getter(&one-time initialization token for didMergeChangesObjectIDsNotification, (void **)&static NSManagedObjectContext.didMergeChangesObjectIDsNotification);
}

os_log_t ___pflogInitialize_block_invoke_2()
{
  os_log_t result = os_log_create("com.apple.coredata", "annotation");
  qword_1EB2704C8 = (uint64_t)result;
  return result;
}

id NSCustomMigrationStage.didMigrateHandler.setter(uint64_t a1, uint64_t a2)
{
  return NSCustomMigrationStage.willMigrateHandler.setter(a1, a2, (uint64_t)&unk_1ED786F98, (uint64_t)partial apply for closure #1 in NSCustomMigrationStage.didMigrateHandler.setter, (uint64_t)&block_descriptor_41, (SEL *)&selRef_setDidMigrateHandler_);
}

uint64_t one-time initialization function for sqlite()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSPersistentStore.StoreType.sqlite = result;
  unk_1E91214B0 = v1;
  return result;
}

void sub_18AC886A4()
{
}

void sub_18AC88710()
{
}

uint64_t one-time initialization function for didChangeObjectsNotification()
{
  uint64_t result = MEMORY[0x18C126250](0xD00000000000002DLL, 0x800000018AE54CD0);
  static NSManagedObjectContext.didChangeObjectsNotificatiouint64_t n = result;
  return result;
}

uint64_t one-time initialization function for didMergeChangesObjectIDsNotification()
{
  uint64_t result = MEMORY[0x18C126250](0xD00000000000003ALL, 0x800000018AE54C50);
  static NSManagedObjectContext.didMergeChangesObjectIDsNotificatiouint64_t n = result;
  return result;
}

void __swiftcall NSCustomMigrationStage.init(migratingFrom:to:)(NSCustomMigrationStage *__return_ptr retstr, NSManagedObjectModelReference *migratingFrom, NSManagedObjectModelReference *to)
{
}

#error "18AC89538: call analysis failed (funcsize=45)"

void sub_18AC89AC4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + *(int *)(v3 + 3692)));
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AC89BC4(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18AC89BD8(_Unwind_Exception *a1)
{
}

void sub_18AC8A1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AC8A248(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AC8A094);
  }
  JUMPOUT(0x18AC8A234);
}

void sub_18AC8A258(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AC8A260);
  }
  JUMPOUT(0x18AC8A234);
}

void sub_18AC8C58C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18AC8C4DCLL);
    }
    id v20 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AC8C6E4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC8C6B8);
  }
  JUMPOUT(0x18AC8C658);
}

void sub_18AC8C81C(void *a1)
{
}

void sub_18AC8C830(_Unwind_Exception *a1)
{
}

void __LoadCoreSpotlight_block_invoke()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  LoadCoreSpotlight_frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/CoreSpotlight.framework/CoreSpotlight", 2);
  if (!LoadCoreSpotlight_frameworkLibrary && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    int v0 = 136315138;
    uint64_t v1 = dlerror();
    _os_log_fault_impl(&dword_18AB82000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "### Failed to Soft Link: /System/Library/Frameworks/CoreSpotlight.framework/CoreSpotlight\n%s", (uint8_t *)&v0, 0xCu);
  }
}

void sub_18AC8EBF8(_Unwind_Exception *a1)
{
}

void sub_18AC8EC28(void *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18AC8EB90);
  }
  JUMPOUT(0x18AC8EC1CLL);
}

void sub_18AC8EFD4(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AC8F894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void (*a26)(char *))
{
}

void sub_18AC93BC4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AC93AB8);
  }
  _Unwind_Resume(a1);
}

void sub_18AC93BD4(_Unwind_Exception *a1)
{
}

void sub_18AC93BF0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AC93BF4);
  }
  objc_terminate();
}

void sub_18AC94924(_Unwind_Exception *a1)
{
}

NSManagedObjectID_optional __swiftcall NSPersistentStoreCoordinator.managedObjectID(for:)(Swift::String a1)
{
  Swift::String v6 = a1;
  id v2 = v1;
  swift_bridgeObjectRetain();
  uint64_t v3 = (objc_class *)specialized String.withUTF8<A>(_:)(&v6._countAndFlagsBits, v2);

  swift_bridgeObjectRelease();
  uint64_t v5 = v3;
  result.value.super.Class isa = v5;
  result.is_nil = v4;
  return result;
}

void static NSPersistentStoreCoordinator.registerStoreClass(_:type:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (a1) {
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  }
  else {
    uint64_t ObjCClassFromMetadata = 0;
  }
  uint64_t v5 = (void *)swift_getObjCClassFromMetadata();
  id v6 = (id)MEMORY[0x18C126250](v2, v3);
  objc_msgSend(v5, sel_registerStoreClass_forStoreType_, ObjCClassFromMetadata, v6);
}

id static NSPersistentStoreCoordinator.metadataForPersistentStore(type:at:options:)(void *a1, uint64_t a2, Class isa)
{
  v13[1] = *(id *)MEMORY[0x1E4F143B8];
  Swift::Bool v4 = (void *)MEMORY[0x18C126250](*a1, a1[1]);
  URL._bridgeToObjectiveC()(v5);
  uint64_t v7 = v6;
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  v13[0] = 0;
  id v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_metadataForPersistentStoreOfType_URL_options_error_, v4, v7, isa, v13);

  id v9 = v13[0];
  if (v8)
  {
    id v10 = (id)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v11 = v9;
  }
  else
  {
    id v10 = v13[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v10;
}

id static NSPersistentStoreCoordinator.setMetadata(_:type:at:options:)(uint64_t a1, uint64_t *a2, uint64_t a3, Class isa)
{
  v15[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (a1) {
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v7.super.Class isa = 0;
  }
  id v8 = (void *)MEMORY[0x18C126250](v5, v6);
  URL._bridgeToObjectiveC()(v9);
  id v11 = v10;
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  v15[0] = 0;
  unsigned int v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_setMetadata_forPersistentStoreOfType_URL_options_error_, v7.super.isa, v8, v11, isa, v15);

  if (v12) {
    return v15[0];
  }
  id v14 = v15[0];
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

id NSPersistentStoreCoordinator.migratePersistentStore(_:to:options:type:)(uint64_t a1, uint64_t a2, Class isa, uint64_t *a4)
{
  uint64_t v5 = v4;
  long long v18 = (NSURL *)*MEMORY[0x1E4F143B8];
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  URL._bridgeToObjectiveC()(v18);
  id v11 = v10;
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  unsigned int v12 = (void *)MEMORY[0x18C126250](v8, v9);
  id v17 = 0;
  id v13 = objc_msgSend(v5, sel_migratePersistentStore_toURL_options_withType_error_, a1, v11, isa, v12, &v17);

  if (v13)
  {
    id v14 = v17;
  }
  else
  {
    id v15 = v17;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v13;
}

id NSPersistentStoreCoordinator.destroyPersistentStore(at:type:options:)(uint64_t a1, uint64_t *a2, Class isa)
{
  Swift::Bool v4 = v3;
  id v15 = (NSURL *)*MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  URL._bridgeToObjectiveC()(v15);
  uint64_t v9 = v8;
  id v10 = (void *)MEMORY[0x18C126250](v6, v7);
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  id v14 = 0;
  unsigned int v11 = objc_msgSend(v4, sel_destroyPersistentStoreAtURL_withType_options_error_, v9, v10, isa, &v14);

  if (v11) {
    return v14;
  }
  id v13 = v14;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

id NSPersistentStoreCoordinator.replacePersistentStore(at:destinationOptions:withPersistentStoreFrom:sourceOptions:type:)(uint64_t a1, Class isa, uint64_t a3, Class a4, uint64_t *a5)
{
  uint64_t v6 = v5;
  uint64_t v21 = (NSURL *)*MEMORY[0x1E4F143B8];
  uint64_t v9 = *a5;
  uint64_t v10 = a5[1];
  URL._bridgeToObjectiveC()(v21);
  id v13 = v12;
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  URL._bridgeToObjectiveC()(v11);
  id v15 = v14;
  if (a4) {
    a4 = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  id v16 = (void *)MEMORY[0x18C126250](v9, v10);
  id v20 = 0;
  unsigned int v17 = objc_msgSend(v6, sel_replacePersistentStoreAtURL_destinationOptions_withPersistentStoreFromURL_sourceOptions_storeType_error_, v13, isa, v15, a4, v16, &v20);

  if (v17) {
    return v20;
  }
  id v19 = v20;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_performAndWait<A>(fn:execute:rescue:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  unsigned int v12 = (char *)&v14 - v11;
  a2(v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v12, 0, 1, a5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 40))(a1, v12, v8);
}

uint64_t closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_perform<A>(_:rescue:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a3;
  uint64_t v31 = a1;
  uint64_t v32 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v32 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v32);
  uint64_t v29 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (void (*)(uint64_t))((char *)&v26 - v9);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  id v13 = (char *)&v26 - v12;
  MEMORY[0x1F4188790](v11);
  id v15 = (char *)&v26 - v14;
  uint64_t v16 = *(void *)(a4 - 8);
  unsigned int v17 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v18 = v17((char *)&v26 - v14, 1, 1, a4);
  v31(v18);
  uint64_t v31 = v10;
  uint64_t v19 = v32;
  uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v28 = v5 + 8;
  v27(v15, v32);
  v17(v13, 0, 1, a4);
  id v20 = v13;
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v21(v15, v20, v19);
  uint64_t v22 = v29;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v29, v15, v19);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v22, 1, a4);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v24 = (char *)v31;
    (*(void (**)(void (*)(uint64_t), char *, uint64_t))(v16 + 32))(v31, v22, a4);
    v17(v24, 0, 1, a4);
    uint64_t v25 = v32;
    v21(*(char **)(*(void *)(v30 + 64) + 40), v24, v32);
    swift_continuation_throwingResume();
    return ((uint64_t (*)(char *, uint64_t))v27)(v15, v25);
  }
  return result;
}

void NSPersistentStoreCoordinator.performAndWait<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v25 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v25);
  uint64_t v24 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v23 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))((char *)&v21 - v11, 1, 1, a3);
  uint64_t v33 = 0;
  id v13 = (void *)swift_allocObject();
  id v13[2] = a3;
  v13[3] = a1;
  v13[4] = a2;
  uint64_t v27 = a3;
  uint64_t v28 = v12;
  uint64_t v29 = partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error);
  uint64_t v30 = v13;
  uint64_t v31 = &v33;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_performAndWait<A>(fn:execute:rescue:);
  *(void *)(v14 + 24) = &v26;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor;
  id v15 = _Block_copy(aBlock);
  id v16 = v4;
  swift_retain();
  swift_release();
  objc_msgSend(v16, sel_performBlockAndWait_, v15);
  _Block_release(v15);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v15)
  {
    __break(1u);
    goto LABEL_9;
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
LABEL_9:
    __break(1u);
LABEL_10:

    __break(1u);
    return;
  }
  if (v33)
  {
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v25);

    return;
  }
  uint64_t v19 = v24;
  uint64_t v18 = v25;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v24, v12, v25);
  uint64_t v20 = v23;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v19, 1, a3) == 1) {
    goto LABEL_10;
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v22, v19, a3);
}

uint64_t NSPersistentStoreCoordinator.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  uint64_t v6 = type metadata accessor for Optional();
  v5[21] = v6;
  v5[22] = *(void *)(v6 - 8);
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  return MEMORY[0x1F4188298](NSPersistentStoreCoordinator.perform<A>(_:), 0, 0);
}

uint64_t NSPersistentStoreCoordinator.perform<A>(_:)()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = *(void *)(v0[19] - 8);
  v0[27] = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 56))(v1, 1, 1);
  return MEMORY[0x1F4188298](NSPersistentStoreCoordinator.perform<A>(_:), 0, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  const void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v14;

  uint64_t v1 = v0;
  uint64_t v2 = v0;
  uint64_t v3 = v0 + 2;
  uint64_t v4 = v0 + 10;
  uint64_t v5 = v0[24];
  uint64_t v6 = (void *)v0[20];
  uint64_t v7 = v1[18];
  uint64_t v8 = v1[19];
  uint64_t v9 = v1[17];
  v1[2] = v2;
  v1[7] = v5;
  v1[3] = NSPersistentStoreCoordinator.perform<A>(_:);
  uint64_t v10 = swift_continuation_init();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v8;
  v11[3] = v9;
  v11[4] = v7;
  v11[5] = v10;
  v1[14] = partial apply for closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_perform<A>(_:rescue:);
  v1[15] = v11;
  v1[10] = MEMORY[0x1E4F143A8];
  v1[11] = 1107296256;
  v1[12] = thunk for @escaping @callee_guaranteed () -> ();
  v1[13] = &block_descriptor_9;
  uint64_t v12 = _Block_copy(v4);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_performBlock_, v12);
  _Block_release(v12);
  return MEMORY[0x1F41881E8](v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 224) = v2;
  if (v2)
  {
    swift_willThrow();
    uint64_t v3 = NSPersistentStoreCoordinator.perform<A>(_:);
  }
  else
  {
    uint64_t v5 = v1[24];
    uint64_t v4 = v1[25];
    uint64_t v6 = v1[21];
    uint64_t v7 = v1[22];
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
    v1[29] = v8;
    v1[30] = (v7 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v8(v4, v5, v6);
    uint64_t v3 = NSPersistentStoreCoordinator.perform<A>(_:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[29];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[25];
  uint64_t v6 = v0[22];
  uint64_t v5 = v0[23];
  uint64_t v7 = v0[21];
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  id v15 = v0[19];
  v14(v2, v7);
  v1(v2, v4, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v2, v7);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v15);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = v0[27];
    uint64_t v10 = v0[23];
    uint64_t v11 = v0[19];
    uint64_t v12 = v0[16];
    v14(v0[26], v0[21]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v12, v10, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  return result;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[26];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[22];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSManagedObjectContextConcurrencyType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NSAttributeType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSManagedObjectContextConcurrencyType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NSAttributeType(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance NSAttributeType@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NSAttributeType(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x18C126270);
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v13 = MEMORY[0x18C126270](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x18C126270]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

uint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return MEMORY[0x1F4183AA8](a1, a2, a3, a4);
  }
  __break(1u);
  return MEMORY[0x1F4183AA8](a1, a2, a3, a4);
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  id v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x18C1262A0](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

id specialized String.withUTF8<A>(_:)(uint64_t *a1, id a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    v13[0] = v3;
    v13[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    id v7 = objc_msgSend(a2, sel_managedObjectIDFromUTF8String_length_, v13, HIBYTE(v4) & 0xF);
    return v7;
  }
  uint64_t v3 = static String._copying(_:)();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v10;
  unint64_t v4 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    id v5 = (id)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
LABEL_5:
    id v7 = objc_msgSend(a2, sel_managedObjectIDFromUTF8String_length_, v5, v6);
    return v7;
  }
  id result = (id)_StringObject.sharedUTF8.getter();
  if (result)
  {
    id v5 = result;
    uint64_t v6 = v12;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_18AC98B58()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_performAndWait<A>(fn:execute:rescue:)()
{
  return closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_performAndWait<A>(fn:execute:rescue:)(*(void *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 16));
}

uint64_t sub_18AC98B78()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18AC98B88()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_perform<A>(_:rescue:)()
{
  return closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_perform<A>(_:rescue:)(*(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 16));
}

void type metadata accessor for NSAttributeType(uint64_t a1)
{
}

void type metadata accessor for NSManagedObjectContextConcurrencyType(uint64_t a1)
{
}

void type metadata accessor for NSAttributeType(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t base witness table accessor for Equatable in NSManagedObjectContextConcurrencyType()
{
  return lazy protocol witness table accessor for type NSManagedObjectContextConcurrencyType and conformance NSManagedObjectContextConcurrencyType(&lazy protocol witness table cache variable for type NSManagedObjectContextConcurrencyType and conformance NSManagedObjectContextConcurrencyType, type metadata accessor for NSManagedObjectContextConcurrencyType);
}

uint64_t base witness table accessor for Equatable in NSAttributeType()
{
  return lazy protocol witness table accessor for type NSManagedObjectContextConcurrencyType and conformance NSManagedObjectContextConcurrencyType((unint64_t *)&lazy protocol witness table cache variable for type NSAttributeType and conformance NSAttributeType, type metadata accessor for NSAttributeType);
}

uint64_t lazy protocol witness table accessor for type NSManagedObjectContextConcurrencyType and conformance NSManagedObjectContextConcurrencyType(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id NSMigrationManager.migrateStore(from:type:options:mapping:to:type:options:)(uint64_t a1, uint64_t *a2, Class isa, uint64_t a4, uint64_t a5, uint64_t *a6, Class a7)
{
  uint64_t v26 = (NSURL *)*MEMORY[0x1E4F143B8];
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v11 = *a6;
  uint64_t v12 = a6[1];
  URL._bridgeToObjectiveC()(v26);
  uint64_t v14 = v13;
  uint64_t v16 = (void *)MEMORY[0x18C126250](v10, v9);
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  URL._bridgeToObjectiveC()(v15);
  unint64_t v18 = v17;
  char v19 = (void *)MEMORY[0x18C126250](v11, v12);
  if (a7) {
    a7 = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  id v25 = 0;
  unsigned int v20 = objc_msgSend(v23, sel_migrateStoreFromURL_type_options_withMappingModel_toDestinationURL_destinationType_destinationOptions_error_, v14, v16, isa, a4, v18, v19, a7, &v25);

  if (v20) {
    return v25;
  }
  id v22 = v25;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

id NSExpressionDescription.resultType.getter@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(v1, sel_expressionResultType);
  *a1 = result;
  return result;
}

id NSExpressionDescription.resultType.setter(void *a1)
{
  return objc_msgSend(v1, sel_setExpressionResultType_, *a1);
}

id (*NSExpressionDescription.resultType.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = objc_msgSend(v1, sel_expressionResultType);
  return NSExpressionDescription.resultType.modify;
}

id NSExpressionDescription.resultType.modify(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), sel_setExpressionResultType_, *(void *)a1);
}

id sub_18AC98F88@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_expressionResultType);
  *a2 = result;
  return result;
}

id sub_18AC98FBC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setExpressionResultType_, *a1);
}

NSLightweightMigrationStage __swiftcall NSLightweightMigrationStage.init(_:)(Swift::OpaquePointer a1)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v3 = (objc_class *)objc_msgSend(v1, sel_initWithVersionChecksums_, isa);

  id v7 = v3;
  result._subsequentStage = v6;
  result._versionChecksums = v5;
  result.super._label = v4;
  result.super.super.Class isa = v7;
  return result;
}

char *NSManagedObjectContext.fetch(_:)(uint64_t a1)
{
  v11[1] = *(id *)MEMORY[0x1E4F143B8];
  v11[0] = 0;
  id v2 = objc_msgSend(v1, sel_executeRequest_error_, a1, v11);
  uint64_t v3 = (char *)v11[0];
  if (!v2)
  {
    id v10 = v11[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v3;
  }
  uint64_t v4 = v2;
  self;
  id v5 = (void *)swift_dynamicCastObjCClassUnconditional();
  uint64_t v6 = v3;
  NSLightweightMigrationStage result = (char *)objc_msgSend(v5, sel_finalResult);
  if (result)
  {
    unint64_t v8 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSFetchRequestResult);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v3 = specialized _arrayForceCast<A, B>(_:)(v9);
    swift_bridgeObjectRelease();
    return v3;
  }
  __break(1u);
  return result;
}

char *specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return (char *)v3;
  }
  uint64_t v12 = MEMORY[0x1E4FBC860];
  NSLightweightMigrationStage result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      uint64_t v3 = v12;
      do
      {
        MEMORY[0x18C126330](v5, a1);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSFetchRequestResult);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v12;
        }
        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
          uint64_t v3 = v12;
        }
        ++v5;
        *(void *)(v3 + 16) = v7 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v7 + 32));
      }
      while (v2 != v5);
    }
    else
    {
      unint64_t v8 = a1 + 32;
      uint64_t v3 = v12;
      do
      {
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSFetchRequestResult);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v12;
        }
        unint64_t v10 = *(void *)(v3 + 16);
        unint64_t v9 = *(void *)(v3 + 24);
        if (v10 >= v9 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
          uint64_t v3 = v12;
        }
        *(void *)(v3 + 16) = v10 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v10 + 32));
        v8 += 8;
        --v2;
      }
      while (v2);
    }
    return (char *)v3;
  }
  __break(1u);
  return result;
}

uint64_t one-time initialization function for willSaveObjectsNotification()
{
  uint64_t result = MEMORY[0x18C126250](0xD00000000000002CLL, 0x800000018AE54D30);
  static NSManagedObjectContext.willSaveObjectsNotificatiouint64_t n = result;
  return result;
}

id static NSManagedObjectContext.willSaveObjectsNotification.getter()
{
  return static NSManagedObjectContext.willSaveObjectsNotification.getter(one-time initialization token for willSaveObjectsNotification, (void **)&static NSManagedObjectContext.willSaveObjectsNotification);
}

uint64_t one-time initialization function for didSaveObjectIDsNotification()
{
  uint64_t result = MEMORY[0x18C126250](0xD000000000000032, 0x800000018AE54C90);
  static NSManagedObjectContext.didSaveObjectIDsNotificatiouint64_t n = result;
  return result;
}

id static NSManagedObjectContext.didSaveObjectIDsNotification.getter()
{
  return static NSManagedObjectContext.willSaveObjectsNotification.getter(one-time initialization token for didSaveObjectIDsNotification, (void **)&static NSManagedObjectContext.didSaveObjectIDsNotification);
}

uint64_t NSManagedObjectContext.NotificationKey.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NSManagedObjectContext.NotificationKey.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  char v7 = 12;
  if (v5 < 0xC) {
    char v7 = v5;
  }
  *a2 = v7;
  return result;
}

uint64_t NSManagedObjectContext.NotificationKey.rawValue.getter()
{
  uint64_t result = 0xD000000000000012;
  switch(*v0)
  {
    case 1:
    case 6:
      uint64_t result = 0x6164696C61766E69;
      break;
    case 2:
      uint64_t result = 0x6465747265736E69;
      break;
    case 3:
      unsigned int v2 = 1633972341;
      goto LABEL_5;
    case 4:
      unsigned int v2 = 1701602660;
LABEL_5:
      uint64_t result = v2 | 0x64657400000000;
      break;
    case 5:
      uint64_t result = 0x6568736572666572;
      break;
    case 7:
      uint64_t result = 0xD000000000000012;
      break;
    case 8:
    case 9:
      uint64_t result = 0xD000000000000011;
      break;
    case 0xA:
      uint64_t result = 0xD000000000000013;
      break;
    case 0xB:
      uint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSManagedObjectContext.NotificationKey()
{
  return specialized == infix<A>(_:_:)();
}

uint64_t specialized == infix<A>(_:_:)()
{
  uint64_t v0 = NSManagedObjectContext.NotificationKey.rawValue.getter();
  uint64_t v2 = v1;
  if (v0 == NSManagedObjectContext.NotificationKey.rawValue.getter() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSManagedObjectContext.NotificationKey()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSManagedObjectContext.NotificationKey()
{
  NSManagedObjectContext.NotificationKey.rawValue.getter();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSManagedObjectContext.NotificationKey()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NSManagedObjectContext.NotificationKey@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return NSManagedObjectContext.NotificationKey.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSManagedObjectContext.NotificationKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NSManagedObjectContext.NotificationKey.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t NSManagedObjectContext.ConcurrencyType.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static NSManagedObjectContext.ConcurrencyType.privateQueue.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static NSManagedObjectContext.ConcurrencyType.mainQueue.getter(void *a1@<X8>)
{
  *a1 = 2;
}

uint64_t NSManagedObjectContext.ConcurrencyType.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t NSManagedObjectContext.ConcurrencyType.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*NSManagedObjectContext.ConcurrencyType.rawValue.modify())()
{
  return NSManagedObjectContext.ConcurrencyType.rawValue.modify;
}

BOOL static NSManagedObjectContext.ScheduledTaskType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void NSManagedObjectContext.ScheduledTaskType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int NSManagedObjectContext.ScheduledTaskType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NSManagedObjectContext.ScheduledTaskType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSManagedObjectContext.ScheduledTaskType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NSManagedObjectContext.ScheduledTaskType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSManagedObjectContext.ScheduledTaskType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id NSManagedObjectContext.init(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return objc_msgSend(v2, sel_initWithConcurrencyType_, v1);
}

uint64_t sub_18AC99A38()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_18AC99A48()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18AC99B3C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_18AC99B74()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t closure #1 in NSManagedObjectContext.perform<A>(schedule:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v15[-v10];
  uint64_t v12 = swift_projectBox();
  unint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a5;
  v13[3] = a1;
  v13[4] = a2;
  swift_retain();
  partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error)();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v11, 0, 1, a5);
  swift_beginAccess();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v9 + 40))(v12, v11, v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v8) {
    __break(1u);
  }
  return result;
}

uint64_t sub_18AC99D80()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in NSManagedObjectContext.perform<A>(schedule:_:)()
{
  return closure #1 in NSManagedObjectContext.perform<A>(schedule:_:)(v0[3], v0[4], v0[5], v0[6], v0[2]);
}

uint64_t sub_18AC99DD8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type NSManagedObjectContext.NotificationKey and conformance NSManagedObjectContext.NotificationKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSManagedObjectContext.NotificationKey and conformance NSManagedObjectContext.NotificationKey;
  if (!lazy protocol witness table cache variable for type NSManagedObjectContext.NotificationKey and conformance NSManagedObjectContext.NotificationKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSManagedObjectContext.NotificationKey and conformance NSManagedObjectContext.NotificationKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSManagedObjectContext.ConcurrencyType and conformance NSManagedObjectContext.ConcurrencyType()
{
  unint64_t result = lazy protocol witness table cache variable for type NSManagedObjectContext.ConcurrencyType and conformance NSManagedObjectContext.ConcurrencyType;
  if (!lazy protocol witness table cache variable for type NSManagedObjectContext.ConcurrencyType and conformance NSManagedObjectContext.ConcurrencyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSManagedObjectContext.ConcurrencyType and conformance NSManagedObjectContext.ConcurrencyType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSManagedObjectContext.ScheduledTaskType and conformance NSManagedObjectContext.ScheduledTaskType()
{
  unint64_t result = lazy protocol witness table cache variable for type NSManagedObjectContext.ScheduledTaskType and conformance NSManagedObjectContext.ScheduledTaskType;
  if (!lazy protocol witness table cache variable for type NSManagedObjectContext.ScheduledTaskType and conformance NSManagedObjectContext.ScheduledTaskType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSManagedObjectContext.ScheduledTaskType and conformance NSManagedObjectContext.ScheduledTaskType);
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NSManagedObjectContext.NotificationKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NSManagedObjectContext.NotificationKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AC9A058);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for NSManagedObjectContext.NotificationKey(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for NSManagedObjectContext.NotificationKey(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NSManagedObjectContext.NotificationKey()
{
  return &type metadata for NSManagedObjectContext.NotificationKey;
}

ValueMetadata *type metadata accessor for NSManagedObjectContext.ConcurrencyType()
{
  return &type metadata for NSManagedObjectContext.ConcurrencyType;
}

uint64_t getEnumTagSinglePayload for NSManagedObjectContext.ScheduledTaskType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NSManagedObjectContext.ScheduledTaskType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AC9A20CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_18AC9A234()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *int v3 = result;
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t static CocoaError.Code.coreData.getter()
{
  return MEMORY[0x1F40E2DD8](134060);
}

uint64_t static CocoaError.Code.managedObjectValidationError.getter()
{
  return MEMORY[0x1F40E2DD8](1550);
}

uint64_t static CocoaError.Code.validationMultipleErrorsError.getter()
{
  return MEMORY[0x1F40E2DD8](1560);
}

uint64_t static CocoaError.Code.validationMissingMandatoryPropertyError.getter()
{
  return MEMORY[0x1F40E2DD8](1570);
}

uint64_t static CocoaError.Code.validationRelationshipLacksMinimumCountError.getter()
{
  return MEMORY[0x1F40E2DD8](1580);
}

uint64_t static CocoaError.Code.validationRelationshipExceedsMaximumCountError.getter()
{
  return MEMORY[0x1F40E2DD8](1590);
}

uint64_t static CocoaError.Code.validationRelationshipDeniedDeleteError.getter()
{
  return MEMORY[0x1F40E2DD8](1600);
}

uint64_t static CocoaError.Code.validationNumberTooLargeError.getter()
{
  return MEMORY[0x1F40E2DD8](1610);
}

uint64_t static CocoaError.Code.validationNumberTooSmallError.getter()
{
  return MEMORY[0x1F40E2DD8](1620);
}

uint64_t static CocoaError.Code.validationDateTooLateError.getter()
{
  return MEMORY[0x1F40E2DD8](1630);
}

uint64_t static CocoaError.Code.validationDateTooSoonError.getter()
{
  return MEMORY[0x1F40E2DD8](1640);
}

uint64_t static CocoaError.Code.validationInvalidDateError.getter()
{
  return MEMORY[0x1F40E2DD8](1650);
}

uint64_t static CocoaError.Code.validationStringTooLongError.getter()
{
  return MEMORY[0x1F40E2DD8](1660);
}

uint64_t static CocoaError.Code.validationStringTooShortError.getter()
{
  return MEMORY[0x1F40E2DD8](1670);
}

uint64_t static CocoaError.Code.validationStringPatternMatchingError.getter()
{
  return MEMORY[0x1F40E2DD8](1680);
}

uint64_t static CocoaError.Code.managedObjectContextLockingError.getter()
{
  return MEMORY[0x1F40E2DD8](132000);
}

uint64_t static CocoaError.Code.persistentStoreCoordinatorLockingError.getter()
{
  return MEMORY[0x1F40E2DD8](132010);
}

uint64_t static CocoaError.Code.managedObjectReferentialIntegrityError.getter()
{
  return MEMORY[0x1F40E2DD8](133000);
}

uint64_t static CocoaError.Code.managedObjectExternalRelationshipError.getter()
{
  return MEMORY[0x1F40E2DD8](133010);
}

uint64_t static CocoaError.Code.managedObjectMergeError.getter()
{
  return MEMORY[0x1F40E2DD8](133020);
}

uint64_t static CocoaError.Code.managedObjectConstraintMergeError.getter()
{
  return MEMORY[0x1F40E2DD8](133021);
}

uint64_t static CocoaError.Code.persistentStoreInvalidTypeError.getter()
{
  return MEMORY[0x1F40E2DD8](134000);
}

uint64_t static CocoaError.Code.persistentStoreTypeMismatchError.getter()
{
  return MEMORY[0x1F40E2DD8](134010);
}

uint64_t static CocoaError.Code.persistentStoreIncompatibleSchemaError.getter()
{
  return MEMORY[0x1F40E2DD8](134020);
}

uint64_t static CocoaError.Code.persistentStoreSaveError.getter()
{
  return MEMORY[0x1F40E2DD8](134030);
}

uint64_t static CocoaError.Code.persistentStoreIncompleteSaveError.getter()
{
  return MEMORY[0x1F40E2DD8](134040);
}

uint64_t static CocoaError.Code.persistentStoreSaveConflictsError.getter()
{
  return MEMORY[0x1F40E2DD8](134050);
}

uint64_t static CocoaError.Code.persistentStoreOperationError.getter()
{
  return MEMORY[0x1F40E2DD8](134070);
}

uint64_t static CocoaError.Code.persistentStoreOpenError.getter()
{
  return MEMORY[0x1F40E2DD8](134080);
}

uint64_t static CocoaError.Code.persistentStoreTimeoutError.getter()
{
  return MEMORY[0x1F40E2DD8](134090);
}

uint64_t static CocoaError.Code.persistentStoreUnsupportedRequestTypeError.getter()
{
  return MEMORY[0x1F40E2DD8](134091);
}

uint64_t static CocoaError.Code.persistentStoreIncompatibleVersionHashError.getter()
{
  return MEMORY[0x1F40E2DD8](134100);
}

uint64_t static CocoaError.Code.migrationError.getter()
{
  return MEMORY[0x1F40E2DD8](134110);
}

uint64_t static CocoaError.Code.migrationCancelledError.getter()
{
  return MEMORY[0x1F40E2DD8](134120);
}

uint64_t static CocoaError.Code.migrationMissingSourceModelError.getter()
{
  return MEMORY[0x1F40E2DD8](134130);
}

uint64_t static CocoaError.Code.migrationMissingMappingModelError.getter()
{
  return MEMORY[0x1F40E2DD8](134140);
}

uint64_t static CocoaError.Code.migrationManagerSourceStoreError.getter()
{
  return MEMORY[0x1F40E2DD8](134150);
}

uint64_t static CocoaError.Code.migrationManagerDestinationStoreError.getter()
{
  return MEMORY[0x1F40E2DD8](134160);
}

uint64_t static CocoaError.Code.entityMigrationPolicyError.getter()
{
  return MEMORY[0x1F40E2DD8](134170);
}

uint64_t static CocoaError.Code.sqliteError.getter()
{
  return MEMORY[0x1F40E2DD8](134180);
}

uint64_t static CocoaError.Code.inferredMappingModelError.getter()
{
  return MEMORY[0x1F40E2DD8](134190);
}

uint64_t static CocoaError.Code.externalRecordImportError.getter()
{
  return MEMORY[0x1F40E2DD8](134200);
}

uint64_t CocoaError.validationObject.getter@<X0>(_OWORD *a1@<X8>)
{
  return CocoaError.validationObject.getter(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t vars8;

  type metadata accessor for CocoaError();
  lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  long long v2 = _BridgedStoredNSError.userInfo.getter();
  int v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v2 + 16) && (char v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v5, (uint64_t)a1);
  }
  else
  {
    *a1 = 0u;
    a1[1] = 0u;
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type CocoaError and conformance CocoaError()
{
  unint64_t result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    type metadata accessor for CocoaError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }
  return result;
}

uint64_t CocoaError.validationKey.getter()
{
  type metadata accessor for CocoaError();
  lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  uint64_t v0 = _BridgedStoredNSError.userInfo.getter();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(v0 + 16) || (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v2), (v4 & 1) == 0))
  {
    long long v7 = 0u;
    long long v8 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined init with copy of Any(*(void *)(v0 + 56) + 32 * v3, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v8 + 1))
  {
LABEL_9:
    outlined destroy of Any?((uint64_t)&v7);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t CocoaError.validationPredicate.getter()
{
  type metadata accessor for CocoaError();
  lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  uint64_t v0 = _BridgedStoredNSError.userInfo.getter();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(v0 + 16) || (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v2), (v4 & 1) == 0))
  {
    long long v7 = 0u;
    long long v8 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with copy of Any(*(void *)(v0 + 56) + 32 * v3, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v8 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v7);
    return 0;
  }
  type metadata accessor for NSPredicate();
  if (swift_dynamicCast()) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t CocoaError.validationValue.getter@<X0>(_OWORD *a1@<X8>)
{
  return CocoaError.validationObject.getter(a1);
}

uint64_t CocoaError.affectedStores.getter()
{
  return CocoaError.affectedStores.getter((uint64_t)&NSAffectedStoresErrorKey, &demangling cache variable for type metadata for [Swift.AnyObject]);
}

uint64_t CocoaError.affectedObjects.getter()
{
  return CocoaError.affectedStores.getter((uint64_t)&NSAffectedObjectsErrorKey, &demangling cache variable for type metadata for [Swift.AnyObject]);
}

uint64_t CocoaError.persistentStoreSaveConflicts.getter()
{
  return CocoaError.affectedStores.getter((uint64_t)&NSPersistentStoreSaveConflictsErrorKey, &demangling cache variable for type metadata for [NSMergeConflict]);
}

uint64_t CocoaError.affectedStores.getter(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for CocoaError();
  lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  uint64_t v3 = _BridgedStoredNSError.userInfo.getter();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(v3 + 16) || (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5), (v7 & 1) == 0))
  {
    long long v10 = 0u;
    long long v11 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v6, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v11 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v10);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  if (swift_dynamicCast()) {
    return v9;
  }
  else {
    return 0;
  }
}

void static CocoaError.ManagedObjectValidationError.getter()
{
}

void static CocoaError.ValidationMultipleErrorsError.getter()
{
}

void static CocoaError.ValidationMissingMandatoryPropertyError.getter()
{
}

void static CocoaError.ValidationRelationshipLacksMinimumCountError.getter()
{
}

void static CocoaError.ValidationRelationshipExceedsMaximumCountError.getter()
{
}

void static CocoaError.ValidationRelationshipDeniedDeleteError.getter()
{
}

void static CocoaError.ValidationNumberTooLargeError.getter()
{
}

void static CocoaError.ValidationNumberTooSmallError.getter()
{
}

void static CocoaError.ValidationDateTooLateError.getter()
{
}

void static CocoaError.ValidationDateTooSoonError.getter()
{
}

void static CocoaError.ValidationInvalidDateError.getter()
{
}

void static CocoaError.ValidationStringTooLongError.getter()
{
}

void static CocoaError.ValidationStringTooShortError.getter()
{
}

void static CocoaError.ValidationStringPatternMatchingError.getter()
{
}

void static CocoaError.ManagedObjectContextLockingError.getter()
{
}

void static CocoaError.PersistentStoreCoordinatorLockingError.getter()
{
}

void static CocoaError.ManagedObjectReferentialIntegrityError.getter()
{
}

void static CocoaError.ManagedObjectExternalRelationshipError.getter()
{
}

void static CocoaError.ManagedObjectMergeError.getter()
{
}

void static CocoaError.ManagedObjectConstraintMergeError.getter()
{
}

void static CocoaError.PersistentStoreInvalidTypeError.getter()
{
}

void static CocoaError.PersistentStoreTypeMismatchError.getter()
{
}

void static CocoaError.PersistentStoreIncompatibleSchemaError.getter()
{
}

void static CocoaError.PersistentStoreSaveError.getter()
{
}

void static CocoaError.PersistentStoreIncompleteSaveError.getter()
{
}

void static CocoaError.PersistentStoreSaveConflictsError.getter()
{
}

void static CocoaError.CoreDataError.getter()
{
}

void static CocoaError.PersistentStoreOperationError.getter()
{
}

void static CocoaError.PersistentStoreOpenError.getter()
{
}

void static CocoaError.PersistentStoreTimeoutError.getter()
{
}

void static CocoaError.PersistentStoreUnsupportedRequestTypeError.getter()
{
}

void static CocoaError.PersistentStoreIncompatibleVersionHashError.getter()
{
}

void static CocoaError.MigrationError.getter()
{
}

void static CocoaError.MigrationCancelledError.getter()
{
}

void static CocoaError.MigrationMissingSourceModelError.getter()
{
}

void static CocoaError.MigrationMissingMappingModelError.getter()
{
}

void static CocoaError.MigrationManagerSourceStoreError.getter()
{
}

void static CocoaError.MigrationManagerDestinationStoreError.getter()
{
}

void static CocoaError.EntityMigrationPolicyError.getter()
{
}

void static CocoaError.SQLiteError.getter()
{
}

void static CocoaError.InferredMappingModelError.getter()
{
}

void static CocoaError.ExternalRecordImportError.getter()
{
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for NSPredicate()
{
  unint64_t result = lazy cache variable for type metadata for NSPredicate;
  if (!lazy cache variable for type metadata for NSPredicate)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSPredicate);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    long long v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t one-time initialization function for indexDidUpdateNotification()
{
  uint64_t result = MEMORY[0x18C126250](0xD000000000000039, 0x800000018AE54E10);
  static NSCoreDataCoreSpotlightDelegate.indexDidUpdateNotificatiouint64_t n = result;
  return result;
}

id static NSCoreDataCoreSpotlightDelegate.indexDidUpdateNotification.getter()
{
  if (one-time initialization token for indexDidUpdateNotification != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static NSCoreDataCoreSpotlightDelegate.indexDidUpdateNotification;

  return v0;
}

uint64_t NSPersistentStore.StoreType.rawValue.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NSPersistentStore.StoreType.rawValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*NSPersistentStore.StoreType.rawValue.modify())()
{
  return NSManagedObjectContext.ConcurrencyType.rawValue.modify;
}

uint64_t NSPersistentStore.StoreType.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSPersistentStore.StoreType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSPersistentStore.StoreType()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSPersistentStore.StoreType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSPersistentStore.StoreType(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance NSPersistentStore.StoreType@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSPersistentStore.StoreType@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for binary()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSPersistentStore.StoreType.binary = result;
  *(void *)algn_1E9121658 = v1;
  return result;
}

uint64_t static NSPersistentStore.StoreType.binary.getter@<X0>(void *a1@<X8>)
{
  return static NSPersistentStore.StoreType.sqlite.getter(&one-time initialization token for binary, &static NSPersistentStore.StoreType.binary, (uint64_t *)algn_1E9121658, a1);
}

uint64_t one-time initialization function for inMemory()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSPersistentStore.StoreType.inMemory = result;
  *(void *)algn_1E9121668 = v1;
  return result;
}

uint64_t static NSPersistentStore.StoreType.inMemory.getter@<X0>(void *a1@<X8>)
{
  return static NSPersistentStore.StoreType.sqlite.getter(&one-time initialization token for inMemory, &static NSPersistentStore.StoreType.inMemory, (uint64_t *)algn_1E9121668, a1);
}

uint64_t one-time initialization function for xpc()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSPersistentStore.StoreType.xpc = result;
  *(void *)algn_1E9121678 = v1;
  return result;
}

uint64_t static NSPersistentStore.StoreType.xpc.getter@<X0>(void *a1@<X8>)
{
  return static NSPersistentStore.StoreType.sqlite.getter(&one-time initialization token for xpc, &static NSPersistentStore.StoreType.xpc, (uint64_t *)algn_1E9121678, a1);
}

unint64_t lazy protocol witness table accessor for type NSPersistentStore.StoreType and conformance NSPersistentStore.StoreType()
{
  unint64_t result = lazy protocol witness table cache variable for type NSPersistentStore.StoreType and conformance NSPersistentStore.StoreType;
  if (!lazy protocol witness table cache variable for type NSPersistentStore.StoreType and conformance NSPersistentStore.StoreType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSPersistentStore.StoreType and conformance NSPersistentStore.StoreType);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for NSPersistentStore.StoreType(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NSPersistentStore.StoreType(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for NSPersistentStore.StoreType(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NSPersistentStore.StoreType(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSPersistentStore.StoreType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

id NSFetchRequest.__allocating_init(entityName:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v5 = (void *)MEMORY[0x18C126250](a1, a2);
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithEntityName_, v5);

  return v6;
}

id NSManagedObject.objectWillChange.getter()
{
  if (objc_msgSend(v0, sel_bindableObjectPublisher))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of Any?((uint64_t)v4);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
    outlined destroy of Any?((uint64_t)v4);
    type metadata accessor for ObservableObjectPublisher();
    swift_allocObject();
    objc_msgSend(v0, sel_setBindableObjectPublisher_, ObservableObjectPublisher.init()());
    swift_release();
  }
  id result = objc_msgSend(v0, sel_bindableObjectPublisher);
  if (result)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v3, v4);
    type metadata accessor for ObservableObjectPublisher();
    swift_dynamicCast();
    return (id)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id protocol witness for ObservableObject.objectWillChange.getter in conformance NSManagedObject@<X0>(void *a1@<X8>)
{
  id result = NSManagedObject.objectWillChange.getter();
  *a1 = result;
  return result;
}

double NSManagedObject.subscript.getter@<D0>(_OWORD *a1@<X8>)
{
  long long v3 = (void *)MEMORY[0x18C126250]();
  id v4 = objc_msgSend(v1, sel_valueForKey_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

double key path getter for NSManagedObject.subscript(_:) : NSManagedObject@<D0>(void **a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  id v4 = *a1;
  uint64_t v5 = (void *)MEMORY[0x18C126250](*a2, a2[1]);
  id v6 = objc_msgSend(v4, sel_valueForKey_, v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t key path setter for NSManagedObject.subscript(_:) : NSManagedObject(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = a3[1];
  outlined init with copy of Any?(a1, (uint64_t)v6);
  swift_bridgeObjectRetain();
  return NSManagedObject.subscript.setter((uint64_t)v6, v4, v3);
}

uint64_t NSManagedObject.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of Any?(a1, (uint64_t)v15);
  uint64_t v7 = v16;
  if (v16)
  {
    long long v8 = __swift_project_boxed_opaque_existential_0(v15, v16);
    uint64_t v9 = *(void *)(v7 - 8);
    MEMORY[0x1F4188790](v8);
    BOOL v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v9 + 16))(v11);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
  }
  else
  {
    uint64_t v12 = 0;
  }
  unint64_t v13 = (void *)MEMORY[0x18C126250](a2, a3);
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setValue_forKey_, v12, v13);
  swift_unknownObjectRelease();

  return outlined destroy of Any?(a1);
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *__swift_project_boxed_opaque_existential_0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void (*NSManagedObject.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v4 = v3;
  long long v8 = (char *)malloc(0x58uLL);
  *a1 = v8;
  uint64_t v9 = v8 + 32;
  *((void *)v8 + 9) = a3;
  *((void *)v8 + 10) = v4;
  *((void *)v8 + 8) = a2;
  uint64_t v10 = (void *)MEMORY[0x18C126250](a2, a3);
  id v11 = objc_msgSend(v4, sel_valueForKey_, v10);

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    _OWORD *v9 = 0u;
    *((_OWORD *)v8 + 3) = 0u;
  }
  outlined init with take of Any?((uint64_t)v9, (uint64_t)v8);
  return NSManagedObject.subscript.modify;
}

void NSManagedObject.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    uint64_t v3 = v2[9];
    uint64_t v4 = v2[8];
    outlined init with copy of Any?(*a1, (uint64_t)(v2 + 4));
    swift_bridgeObjectRetain();
    NSManagedObject.subscript.setter((uint64_t)(v2 + 4), v4, v3);
    outlined destroy of Any?((uint64_t)v2);
  }
  else
  {
    uint64_t v5 = v2[9];
    uint64_t v6 = v2[8];
    swift_bridgeObjectRetain();
    NSManagedObject.subscript.setter((uint64_t)v2, v6, v5);
  }

  free(v2);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in NSManagedObject()
{
  return MEMORY[0x1E4F1ABE8];
}

uint64_t sub_18AC9CB4C()
{
  return 0;
}

uint64_t (*NSCustomMigrationStage.willMigrateHandler.getter())(uint64_t a1, uint64_t a2)
{
  double result = (uint64_t (*)(uint64_t, uint64_t))objc_msgSend(v0, sel_willMigrateHandler);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSStagedMigrationManager, @unowned NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
    *(void *)(v4 + 24) = v3;
    return partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter;
  }
  return result;
}

void *key path getter for NSCustomMigrationStage.willMigrateHandler : NSCustomMigrationStage@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  double result = objc_msgSend(*a1, sel_willMigrateHandler);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = thunk for @escaping @callee_unowned @convention(block) (@unowned NSStagedMigrationManager, @unowned NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)partial apply;
    *(void *)(v6 + 24) = v5;
    double result = (void *)swift_allocObject();
    result[2] = partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter;
    result[3] = v6;
    uint64_t v7 = thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage) -> (@error @owned Error)partial apply;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

id key path setter for NSCustomMigrationStage.willMigrateHandler : NSCustomMigrationStage(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed NSStagedMigrationManager, @in_guaranteed NSCustomMigrationStage) -> (@out (), @error @owned Error);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  _sxq_q0_s5Error_pRi_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lySo24NSStagedMigrationManagerCSo08NSCustomC5StageCytIsegnnrzo_SgWOy(v1);
  return NSCustomMigrationStage.willMigrateHandler.setter((uint64_t)v4, v3);
}

id NSCustomMigrationStage.willMigrateHandler.setter(uint64_t a1, uint64_t a2)
{
  return NSCustomMigrationStage.willMigrateHandler.setter(a1, a2, (uint64_t)&unk_1ED786E80, (uint64_t)closure #1 in NSCustomMigrationStage.willMigrateHandler.setterpartial apply, (uint64_t)&block_descriptor_1, (SEL *)&selRef_setWillMigrateHandler_);
}

uint64_t sub_18AC9CD90()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSStagedMigrationManager, @unowned NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter(a1, a2);
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v2 + 16))(a1, a2, 0);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t (**)(id, id, uint64_t))(a1 + 32);
  swift_retain();
  id v8 = a2;
  id v9 = a3;
  LOBYTE(a4) = v7(v8, v9, a4);
  swift_release();

  return a4 & 1;
}

void (*NSCustomMigrationStage.willMigrateHandler.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[8] = v1;
  uint64_t v4 = objc_msgSend(v1, sel_willMigrateHandler);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    uint64_t v4 = (void *)swift_allocObject();
    _OWORD v4[2] = thunk for @escaping @callee_unowned @convention(block) (@unowned NSStagedMigrationManager, @unowned NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)partial apply;
    v4[3] = v6;
    uint64_t v7 = partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter;
  }
  else
  {
    uint64_t v7 = 0;
  }
  void v3[6] = v7;
  v3[7] = v4;
  return NSCustomMigrationStage.willMigrateHandler.modify;
}

void NSCustomMigrationStage.willMigrateHandler.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 64);
  if (a2)
  {
    if (v3)
    {
      uint64_t v5 = v2[7];
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v3;
      *(void *)(v6 + 24) = v5;
      v2[4] = closure #1 in NSCustomMigrationStage.willMigrateHandler.setterpartial apply;
      v2[5] = v6;
      *uint64_t v2 = MEMORY[0x1E4F143A8];
      v2[1] = 1107296256;
      v2[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
      v2[3] = &block_descriptor_13;
      uint64_t v7 = _Block_copy(v2);
      swift_retain_n();
      swift_release();
      objc_msgSend(v4, sel_setWillMigrateHandler_, v7);
      _Block_release(v7);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v3);
    }
    else
    {
      objc_msgSend(*(id *)(*(void *)a1 + 64), sel_setWillMigrateHandler_, 0);
    }
    uint64_t v11 = v2[6];
    goto LABEL_8;
  }
  if (v3)
  {
    uint64_t v8 = v2[7];
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v3;
    *(void *)(v9 + 24) = v8;
    v2[4] = closure #1 in NSCustomMigrationStage.willMigrateHandler.setterpartial apply;
    v2[5] = v9;
    *uint64_t v2 = MEMORY[0x1E4F143A8];
    v2[1] = 1107296256;
    v2[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
    v2[3] = &block_descriptor_20;
    uint64_t v10 = _Block_copy(v2);
    swift_retain();
    swift_release();
    objc_msgSend(v4, sel_setWillMigrateHandler_, v10);
    _Block_release(v10);
    uint64_t v11 = v3;
LABEL_8:
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
    goto LABEL_10;
  }
  objc_msgSend(*(id *)(*(void *)a1 + 64), sel_setWillMigrateHandler_, 0);
LABEL_10:

  free(v2);
}

uint64_t sub_18AC9D184()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t (*NSCustomMigrationStage.didMigrateHandler.getter())(uint64_t a1, uint64_t a2)
{
  double result = (uint64_t (*)(uint64_t, uint64_t))objc_msgSend(v0, sel_didMigrateHandler);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = thunk for @escaping @callee_unowned @convention(block) (@unowned NSStagedMigrationManager, @unowned NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)partial apply;
    *(void *)(v4 + 24) = v3;
    return partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter;
  }
  return result;
}

void *key path getter for NSCustomMigrationStage.didMigrateHandler : NSCustomMigrationStage@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  double result = objc_msgSend(*a1, sel_didMigrateHandler);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = thunk for @escaping @callee_unowned @convention(block) (@unowned NSStagedMigrationManager, @unowned NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)partial apply;
    *(void *)(v6 + 24) = v5;
    double result = (void *)swift_allocObject();
    result[2] = partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter;
    result[3] = v6;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage) -> (@error @owned Error);
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

id key path setter for NSCustomMigrationStage.didMigrateHandler : NSCustomMigrationStage(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed NSStagedMigrationManager, @in_guaranteed NSCustomMigrationStage) -> (@out (), @error @owned Error);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  _sxq_q0_s5Error_pRi_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lySo24NSStagedMigrationManagerCSo08NSCustomC5StageCytIsegnnrzo_SgWOy(v1);
  return NSCustomMigrationStage.didMigrateHandler.setter((uint64_t)v4, v3);
}

uint64_t closure #1 in NSCustomMigrationStage.willMigrateHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return 1;
}

uint64_t partial apply for closure #1 in NSCustomMigrationStage.didMigrateHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in NSCustomMigrationStage.willMigrateHandler.setter(a1, a2, a3, *(void (**)(void))(v3 + 16)) & 1;
}

void (*NSCustomMigrationStage.didMigrateHandler.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[8] = v1;
  uint64_t v4 = objc_msgSend(v1, sel_didMigrateHandler);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    uint64_t v4 = (void *)swift_allocObject();
    _OWORD v4[2] = thunk for @escaping @callee_unowned @convention(block) (@unowned NSStagedMigrationManager, @unowned NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)partial apply;
    v4[3] = v6;
    uint64_t v7 = partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter;
  }
  else
  {
    uint64_t v7 = 0;
  }
  void v3[6] = v7;
  v3[7] = v4;
  return NSCustomMigrationStage.didMigrateHandler.modify;
}

void NSCustomMigrationStage.didMigrateHandler.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 64);
  if (a2)
  {
    if (v3)
    {
      uint64_t v5 = v2[7];
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v3;
      *(void *)(v6 + 24) = v5;
      v2[4] = closure #1 in NSCustomMigrationStage.willMigrateHandler.setterpartial apply;
      v2[5] = v6;
      *uint64_t v2 = MEMORY[0x1E4F143A8];
      v2[1] = 1107296256;
      v2[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
      v2[3] = &block_descriptor_49;
      uint64_t v7 = _Block_copy(v2);
      swift_retain_n();
      swift_release();
      objc_msgSend(v4, sel_setDidMigrateHandler_, v7);
      _Block_release(v7);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v3);
    }
    else
    {
      objc_msgSend(*(id *)(*(void *)a1 + 64), sel_setDidMigrateHandler_, 0);
    }
    uint64_t v11 = v2[6];
    goto LABEL_8;
  }
  if (v3)
  {
    uint64_t v8 = v2[7];
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v3;
    *(void *)(v9 + 24) = v8;
    v2[4] = closure #1 in NSCustomMigrationStage.willMigrateHandler.setterpartial apply;
    v2[5] = v9;
    *uint64_t v2 = MEMORY[0x1E4F143A8];
    v2[1] = 1107296256;
    v2[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
    v2[3] = &block_descriptor_56;
    uint64_t v10 = _Block_copy(v2);
    swift_retain();
    swift_release();
    objc_msgSend(v4, sel_setDidMigrateHandler_, v10);
    _Block_release(v10);
    uint64_t v11 = v3;
LABEL_8:
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
    goto LABEL_10;
  }
  objc_msgSend(*(id *)(*(void *)a1 + 64), sel_setDidMigrateHandler_, 0);
LABEL_10:

  free(v2);
}

uint64_t _sxq_q0_s5Error_pRi_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lySo24NSStagedMigrationManagerCSo08NSCustomC5StageCytIsegnnrzo_SgWOy(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed NSStagedMigrationManager, @in_guaranteed NSCustomMigrationStage) -> (@out (), @error @owned Error)(uint64_t a1, uint64_t a2)
{
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed NSStagedMigrationManager, @in_guaranteed NSCustomMigrationStage) -> (@out (), @error @owned Error)(a1, a2);
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *, uint64_t *);
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = a2;
  uint64_t v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  uint64_t v6 = a1;
  return v3(&v6, &v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage) -> (@error @owned Error)(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

unint64_t type metadata accessor for NSError()
{
  unint64_t result = lazy cache variable for type metadata for NSError;
  if (!lazy cache variable for type metadata for NSError)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSError);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage) -> (@error @owned Error)partial apply(void *a1, void *a2)
{
  return partial apply for thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage) -> (@error @owned Error)(a1, a2);
}

void static NSPersistentContainer.defaultDirectoryURL.getter()
{
  id v0 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_defaultDirectoryURL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t NSPersistentContainer.performBackgroundTask<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  void v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for Optional();
  void v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  v5[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](NSPersistentContainer.performBackgroundTask<A>(_:), 0, 0);
}

uint64_t NSPersistentContainer.performBackgroundTask<A>(_:)()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 48);
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  *(void *)(v0 + 96) = v4;
  uint64_t v8 = v4 + 56;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  *(void *)(v0 + 104) = v7;
  *(void *)(v0 + 112) = v8 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v7(v1, 1, 1, v2);
  id v9 = objc_msgSend(v3, sel_newBackgroundContext);
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = (void *)swift_allocObject();
  *(void *)(v0 + 128) = v10;
  id v10[2] = v2;
  v10[3] = v6;
  v10[4] = v5;
  v10[5] = v9;
  *(unsigned char *)(v0 + 152) = 0;
  swift_retain();
  v9;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v11;
  void *v11 = v0;
  v11[1] = NSPersistentContainer.performBackgroundTask<A>(_:);
  uint64_t v12 = *(void *)(v0 + 80);
  uint64_t v13 = *(void *)(v0 + 40);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v12, (unsigned char *)(v0 + 152), (uint64_t)partial apply for closure #1 in NSPersistentContainer._rethrowsHelper_performTask<A>(execute:rescue:), (uint64_t)v10, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = NSPersistentContainer.performBackgroundTask<A>(_:);
  }
  else {
    uint64_t v2 = NSPersistentContainer.performBackgroundTask<A>(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[13];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v5 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[8];
  uint64_t v8 = v0[5];
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v16(v2, v6);
  v1(v4, 0, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v2, v4, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v2, v6);
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v8);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = (void *)v0[15];
    uint64_t v11 = v0[12];
    uint64_t v12 = v0[9];
    uint64_t v13 = v0[5];
    BOOL v14 = v0[2];
    v16(v0[11], v0[7]);

    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14, v12, v13);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  return result;
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = (void *)v0[15];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[7];
  uint64_t v6 = v1;
  swift_willThrow();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_18AC9DFB8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

id partial apply for closure #1 in NSPersistentContainer._rethrowsHelper_performTask<A>(execute:rescue:)()
{
  uint64_t v2 = *(void **)(v0 + 40);
  id result = (id)(*(uint64_t (**)(void *))(v0 + 24))(v2);
  if (!v1) {
    return objc_msgSend(v2, sel_reset);
  }
  return result;
}

uint64_t NSAttributeDescription.AttributeType.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t NSAttributeDescription.AttributeType.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t NSAttributeDescription.AttributeType.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*NSAttributeDescription.AttributeType.rawValue.modify())()
{
  return NSManagedObjectContext.ConcurrencyType.rawValue.modify;
}

id NSAttributeDescription.type.getter@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(v1, sel_attributeType);
  *a1 = result;
  return result;
}

id NSAttributeDescription.type.setter(void *a1)
{
  return objc_msgSend(v1, sel_setAttributeType_, *a1);
}

id (*NSAttributeDescription.type.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = objc_msgSend(v1, sel_attributeType);
  return NSAttributeDescription.type.modify;
}

id NSAttributeDescription.type.modify(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), sel_setAttributeType_, *(void *)a1);
}

void static NSAttributeDescription.AttributeType.undefined.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static NSAttributeDescription.AttributeType.integer16.getter(void *a1@<X8>)
{
  *a1 = 100;
}

void static NSAttributeDescription.AttributeType.integer32.getter(void *a1@<X8>)
{
  *a1 = 200;
}

void static NSAttributeDescription.AttributeType.integer64.getter(void *a1@<X8>)
{
  *a1 = 300;
}

void static NSAttributeDescription.AttributeType.decimal.getter(void *a1@<X8>)
{
  *a1 = 400;
}

void static NSAttributeDescription.AttributeType.double.getter(void *a1@<X8>)
{
  *a1 = 500;
}

void static NSAttributeDescription.AttributeType.float.getter(void *a1@<X8>)
{
  *a1 = 600;
}

void static NSAttributeDescription.AttributeType.string.getter(void *a1@<X8>)
{
  *a1 = 700;
}

void static NSAttributeDescription.AttributeType.BOOLean.getter(void *a1@<X8>)
{
  *a1 = 800;
}

void static NSAttributeDescription.AttributeType.date.getter(void *a1@<X8>)
{
  *a1 = 900;
}

void static NSAttributeDescription.AttributeType.binaryData.getter(void *a1@<X8>)
{
  *a1 = 1000;
}

void static NSAttributeDescription.AttributeType.uuid.getter(void *a1@<X8>)
{
  *a1 = 1100;
}

void static NSAttributeDescription.AttributeType.uri.getter(void *a1@<X8>)
{
  *a1 = 1200;
}

void static NSAttributeDescription.AttributeType.transformable.getter(void *a1@<X8>)
{
  *a1 = 1800;
}

void static NSAttributeDescription.AttributeType.objectID.getter(void *a1@<X8>)
{
  *a1 = 2000;
}

void static NSAttributeDescription.AttributeType.composite.getter(void *a1@<X8>)
{
  *a1 = 2100;
}

unint64_t lazy protocol witness table accessor for type NSAttributeDescription.AttributeType and conformance NSAttributeDescription.AttributeType()
{
  unint64_t result = lazy protocol witness table cache variable for type NSAttributeDescription.AttributeType and conformance NSAttributeDescription.AttributeType;
  if (!lazy protocol witness table cache variable for type NSAttributeDescription.AttributeType and conformance NSAttributeDescription.AttributeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributeDescription.AttributeType and conformance NSAttributeDescription.AttributeType);
  }
  return result;
}

id sub_18AC9E244@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_attributeType);
  *a2 = result;
  return result;
}

id sub_18AC9E278(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAttributeType_, *a1);
}

ValueMetadata *type metadata accessor for NSAttributeDescription.AttributeType()
{
  return &type metadata for NSAttributeDescription.AttributeType;
}

void sub_18AC9E76C(_Unwind_Exception *a1)
{
}

void sub_18AC9E78C(void *a1)
{
}

void sub_18AC9E8F0(_Unwind_Exception *a1)
{
}

void sub_18AC9E910(void *a1)
{
}

void sub_18AC9F0B0(_Unwind_Exception *a1)
{
}

void sub_18AC9F0D0(void *a1)
{
}

void sub_18AC9F384(_Unwind_Exception *a1)
{
}

void sub_18AC9F6A8(_Unwind_Exception *a1)
{
}

void sub_18AC9F6C8(void *a1)
{
}

void sub_18AC9F7E8(_Unwind_Exception *a1)
{
}

void sub_18AC9F808(void *a1)
{
}

void sub_18AC9FD40(_Unwind_Exception *a1)
{
}

void sub_18AC9FD60(void *a1)
{
}

void sub_18ACA00B0(_Unwind_Exception *a1)
{
}

void sub_18ACA00D0(void *a1)
{
}

id _swizzleManifestTypeDataXPC(void *a1, void *a2)
{
  CFStringRef v4 = 0;
  int v5 = [a2 sqlType];
  switch(v5)
  {
    case 1:
      uint64_t v21 = [a1 bytes];
      uint64_t v8 = (void *)[[NSString alloc] initWithUTF8String:v21];
      uint64_t v9 = objc_msgSend(objc_alloc(NSNumber), "initWithInteger:", objc_msgSend(v8, "integerValue"));
      goto LABEL_20;
    case 2:
    case 3:
      uint64_t v7 = [a1 bytes];
      uint64_t v8 = (void *)[[NSString alloc] initWithUTF8String:v7];
      uint64_t v9 = objc_msgSend(objc_alloc(NSNumber), "initWithLongLong:", objc_msgSend(v8, "longLongValue"));
LABEL_20:
      uint64_t v16 = v9;

      goto LABEL_21;
    case 4:
    case 5:
    case 6:
    case 9:
    case 12:
      if (CFDataGetLength((CFDataRef)a1))
      {
        BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)a1);
        CFStringRef v4 = CFStringCreateWithCString(0, BytePtr, 0x8000100u);
      }
      else
      {
        CFStringRef v4 = &stru_1ED787880;
      }
      if (v5 == 12)
      {
        uint64_t v15 = (objc_class *)MEMORY[0x1E4F1CB10];
      }
      else
      {
        if (v5 != 4) {
          goto LABEL_28;
        }
        uint64_t v15 = (objc_class *)MEMORY[0x1E4F28C28];
      }
      uint64_t v16 = [[v15 alloc] initWithString:v4];
      CFRelease(v4);
LABEL_21:
      id result = (id)v16;
      break;
    case 7:
    case 8:
      uint64_t v10 = [a1 bytes];
      uint64_t v11 = (void *)[[NSString alloc] initWithUTF8String:v10];
      if (v5 == 7)
      {
        uint64_t v12 = objc_msgSend((id)objc_msgSend(a2, "propertyDescription"), "attributeType");
        id v13 = objc_alloc(NSNumber);
        if (v12 == 600)
        {
          [v11 floatValue];
          uint64_t v14 = objc_msgSend(v13, "initWithFloat:");
        }
        else
        {
          [v11 doubleValue];
          uint64_t v14 = objc_msgSend(v13, "initWithDouble:");
        }
      }
      else
      {
        id v20 = objc_alloc(MEMORY[0x1E4F1C9C8]);
        [v11 doubleValue];
        uint64_t v14 = objc_msgSend(v20, "initWithTimeIntervalSinceReferenceDate:");
      }
      CFStringRef v4 = (CFStringRef)v14;

      goto LABEL_28;
    case 11:
      if ([a1 length] == 16)
      {
        id v17 = objc_alloc(MEMORY[0x1E4F29128]);
        uint64_t v18 = [a1 bytes];
        id result = (id)[v17 initWithUUIDBytes:v18];
      }
      else
      {
        CFStringRef v4 = 0;
LABEL_28:
        id result = (id)v4;
      }
      break;
    case 15:
      id v22 = (void *)[a2 propertyDescription];
      return +[_PFRoutines retainedDecodeValue:forTransformableAttribute:]((uint64_t)_PFRoutines, (uint64_t)a1, v22);
    default:
      goto LABEL_28;
  }
  return result;
}

void sub_18ACA0AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ACA0CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ACA0EC4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18ACA115C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

os_log_t ___pflogInitialize_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coredata", "warning");
  qword_1EB2704C0 = (uint64_t)result;
  return result;
}

os_log_t ___pflogInitialize_block_invoke_3()
{
  os_log_t result = os_log_create("com.apple.coredata", "sql");
  qword_1EB2704D0 = (uint64_t)result;
  return result;
}

os_log_t ___pflogInitialize_block_invoke_4()
{
  os_log_t result = os_log_create("com.apple.coredata", "XPC");
  qword_1EB2704D8 = (uint64_t)result;
  return result;
}

os_log_t ___pflogInitialize_block_invoke_5()
{
  os_log_t result = os_log_create("com.apple.coredata", "CloudKit");
  qword_1EB2704E0 = (uint64_t)result;
  return result;
}

os_log_t ___pflogInitialize_block_invoke_6()
{
  os_log_t result = os_log_create("com.apple.coredata", "debug");
  qword_1EB2704E8 = (uint64_t)result;
  return result;
}

void sub_18ACA8044(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18ACA9550(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18ACA9684(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18ACA9794(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18ACAAF10()
{
  objc_end_catch();
  _Block_object_dispose(&v0, 8);
  _Block_object_dispose(&v1, 8);
  _Block_object_dispose(&v2, 8);
  _Block_object_dispose(&v3, 8);
  JUMPOUT(0x18ACAAFB0);
}

void sub_18ACAAF38()
{
}

#error "18ACAB3F8: call analysis failed (funcsize=76)"

void sub_18ACAB9BC(_Unwind_Exception *a1)
{
}

void sub_18ACAB9D4(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18ACAB9E0);
}

void sub_18ACABC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

#error "18ACAC050: call analysis failed (funcsize=79)"

void sub_18ACB1C3C(_Unwind_Exception *a1)
{
}

void sub_18ACB1C58(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ACB1C5CLL);
  }
  objc_terminate();
}

#error "18ACB2148: call analysis failed (funcsize=46)"

void sub_18ACB29CC(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18ACB28ACLL);
    }
    objc_begin_catch(exc_buf);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ACB2A4C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ACB2A24);
  }
  JUMPOUT(0x18ACB2A04);
}

void sub_18ACB31F0(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ACB3168);
  }
  JUMPOUT(0x18ACB310CLL);
}

void sub_18ACB3200()
{
}

void sub_18ACB3218(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18ACB3108);
}

void sub_18ACB3B98(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ACB3A44);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ACB4390(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ACB42B0);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ACB48F4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ACB47ECLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ACB4D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 != 2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18ACB4CACLL);
  }
  objc_begin_catch(exception_object);

  objc_exception_rethrow();
}

void sub_18ACB4E18(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ACB4DF0);
  }
  JUMPOUT(0x18ACB4DD8);
}

void sub_18ACB8298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18ACB85A8(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ACB8558);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ACB9374()
{
}

void sub_18ACB93D0()
{
}

void sub_18ACB93DC()
{
  if (v0) {
    JUMPOUT(0x18ACB93E4);
  }
  JUMPOUT(0x18ACB93E8);
}

void sub_18ACB959C(_Unwind_Exception *exc_buf, int a2)
{
  if (!a2) {
    _Unwind_Resume(exc_buf);
  }
  if (a2 != 2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ACB951CLL);
  }
  id v2 = objc_begin_catch(exc_buf);
  objc_exception_rethrow();
}

void sub_18ACB9630(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ACB9600);
  }
  JUMPOUT(0x18ACB95D4);
}

void sub_18ACB9ABC(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18ACB9A20);
    }
    id v2 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ACB9B54(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ACB9B24);
  }
  JUMPOUT(0x18ACB9B04);
}

void sub_18ACB9CC4()
{
}

void sub_18ACB9D24()
{
}

void sub_18ACB9D30()
{
  if (v0) {
    JUMPOUT(0x18ACB9D38);
  }
  JUMPOUT(0x18ACB9D3CLL);
}

void sub_18ACBC218(_Unwind_Exception *a1)
{
}

void sub_18ACBEF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 176), 8);
  _Block_object_dispose((const void *)(v33 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_18ACBF53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __CFString *a10, uint64_t a11, uint64_t a12, __CFString *a13)
{
  if (a2 == 1)
  {
    id v14 = objc_begin_catch(exception_object);
    *(unsigned char *)(*(void *)(*(void *)(v13 + 64) + 8) + 24) = 0;
    id v15 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v16 = *MEMORY[0x1E4F28588];
    a10 = @"NSUnderlyingException";
    a11 = v16;
    a12 = (uint64_t)v14;
    a13 = @"Import failed because creating the zone query hit an unhandled exception.";
    uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a12 forKeys:&a10 count:2];
    *(void *)(*(void *)(*(void *)(v13 + 72) + 8) + 40) = [v15 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v17];
    objc_end_catch();
    JUMPOUT(0x18ACBF4FCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18ACBFB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __CFString *a10, uint64_t a11, uint64_t a12, __CFString *a13)
{
  if (a2 == 1)
  {
    id v14 = objc_begin_catch(exception_object);
    *(unsigned char *)(*(void *)(*(void *)(v13 + 64) + 8) + 24) = 0;
    id v15 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v16 = *MEMORY[0x1E4F28588];
    a10 = @"NSUnderlyingException";
    a11 = v16;
    a12 = (uint64_t)v14;
    a13 = @"Import failed because applying the zone query metadata changes hit an unhandled exception.";
    uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a12 forKeys:&a10 count:2];
    *(void *)(*(void *)(*(void *)(v13 + 56) + 8) + 40) = [v15 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v17];
    objc_end_catch();
    JUMPOUT(0x18ACBFB44);
  }
  _Unwind_Resume(exception_object);
}

void __LoadCoreAnalytics_block_invoke()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  _MergedGlobals_67 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics", 2);
  if (!_MergedGlobals_67 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    int v0 = 136315138;
    uint64_t v1 = dlerror();
    _os_log_fault_impl(&dword_18AB82000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "### Failed to Soft Link: /System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics\n%s", (uint8_t *)&v0, 0xCu);
  }
}

uint64_t (*initAnalyticsSendEvent())()
{
  if (qword_1EB270568 != -1) {
    dispatch_once(&qword_1EB270568, &__block_literal_global_3);
  }
  os_log_t result = (uint64_t (*)())dlsym((void *)_MergedGlobals_67, "AnalyticsSendEvent");
  softLinkAnalyticsSendEvent[0] = result;
  return result;
}

void _PFInvokeMutationMethodForEachMemberOfSet(uint64_t a1, uint64_t a2, void *a3)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [a3 count];
  if (v4)
  {
    unint64_t v5 = v4;
    unint64_t v6 = MEMORY[0x1F4188790](v4);
    uint64_t v8 = (char *)v10 - v7;
    if (v6 > 0x200) {
      uint64_t v8 = (char *)NSAllocateScannedUncollectable();
    }
    else {
      bzero((char *)v10 - v7, 8 * v6);
    }
    [a3 getObjects:v8];
    for (uint64_t i = 0; i != v5; ++i)
      method_invoke();
    if (v5 >= 0x201) {
      NSZoneFree(0, v8);
    }
  }
}

void _releaseStaleBatch(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a2 >> 5;
  int v3 = 1 << ~(_BYTE)a2;
  if ((*(_DWORD *)(*(void *)(a1 + 24) + 4 * v2) & v3) != 0)
  {
    int v5 = *(_DWORD *)(a1 + 48);
    unsigned int v6 = v5 * a2;
    unsigned int v7 = v5 * a2 + v5;
    if (v7 >= *(_DWORD *)(a1 + 12)) {
      unsigned int v8 = *(_DWORD *)(a1 + 12);
    }
    else {
      unsigned int v8 = v7;
    }
    uint64_t v9 = [*(id *)(a1 + 16) _objectsPointer];
    int v10 = v8 - v6;
    if (v8 > v6)
    {
      uint64_t v11 = (void **)(v9 + 8 * v6);
      do
      {
        uint64_t v12 = *v11;
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v13 = (void *)[v12 objectID];
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass())) {
            uint64_t v13 = (void *)[v12 _backingObjectID];
          }
          else {
            uint64_t v13 = (void *)[v12 objectForKey:@"objectID"];
          }
        }
        id v14 = v13;
        id v15 = v13;
        *v11++ = v14;

        --v10;
      }
      while (v10);
    }
    *(_DWORD *)(*(void *)(a1 + 24) + 4 * v2) &= ~v3;
  }
}

void sub_18ACC1BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ACC1D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _PFPerformDebugZombie(void *a1)
{
  if (a1)
  {
    Class Class = object_getClass(a1);
    if (Class)
    {
      name = 0;
      int v3 = class_getName(Class);
      asprintf(&name, "_NSZombie_%s", v3);
      uint64_t v4 = objc_lookUpClass(name);
      if (!v4)
      {
        int v5 = objc_lookUpClass("_NSZombie_");
        uint64_t v4 = objc_duplicateClass(v5, name, 0);
        if (!v4) {
          uint64_t v4 = objc_lookUpClass(name);
        }
      }
      if (name) {
        free(name);
      }
      objc_destructInstance(a1);
      object_setClass(a1, v4);
    }
    if (*MEMORY[0x1E4F28218])
    {
      unsigned int v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone) {
        unsigned int v6 = malloc_default_zone();
      }
      malloc_zone_free(v6, a1);
    }
  }
}

void _PFDeallocateObjects(void **to_be_freed, unsigned int num)
{
  int v3 = to_be_freed;
  if (*MEMORY[0x1E4F28AE8])
  {
    if (num)
    {
      uint64_t v7 = num;
      do
      {
        if (*v3) {
          _PFPerformDebugZombie(*v3);
        }
        ++v3;
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    if (num)
    {
      uint64_t v4 = num;
      int v5 = to_be_freed;
      do
      {
        if (*v5) {
          objc_destructInstance(*v5);
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    unsigned int v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone) {
      unsigned int v6 = malloc_default_zone();
    }
    malloc_zone_batch_free(v6, v3, num);
  }
}

void *stack_reallocate(void *ptr, size_t size, uint64_t a3, void *a4)
{
  if (*a4 <= (unint64_t)ptr && a4[2] > (unint64_t)ptr) {
    return 0;
  }
  uint64_t v7 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v7 = malloc_default_zone();
  }

  return malloc_type_zone_realloc(v7, ptr, size, 0x9E58463uLL);
}

void sub_18ACC94A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ACC9860(_Unwind_Exception *a1)
{
}

void sub_18ACC9DC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _PFCeateStubFileAtPath(char *a1, int a2)
{
  if (!a2) {
    return open(a1, 2562, 420);
  }
  uint64_t result = open_dprotected_np(a1, 2562, a2, 0, 420);
  if (result != -1) {
    return result;
  }
  if (*__error() != 45) {
    return 0xFFFFFFFFLL;
  }
  else {
    return open(a1, 2562, 420);
  }
}

void _writePFEncodedStringShapeIntoData(void *a1, void *a2, unsigned char *a3)
{
  uint64_t v10 = 0;
  int v6 = [a1 length];
  if ((int)(((v6 + 7) & 0xFFFFFFF8) - v6) >= 1) {
    objc_msgSend(a1, "appendBytes:length:", &v10);
  }
  unsigned int v7 = [a2 length];
  [a1 appendBytes:&v10 length:8];
  [a1 appendBytes:&v10 length:4];
  unsigned int v9 = bswap32(v7);
  [a1 appendBytes:&v9 length:4];
  [a1 appendBytes:&v10 length:8];
  if (v7)
  {
    unsigned int v8 = a3;
    if (v7 >= 0x401) {
      unsigned int v8 = malloc_type_malloc(v7 + 1, 0x1605E1DCuLL);
    }
    objc_msgSend(a2, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v8, 0, v7, 0);
    v8[v7] = 0;
    [a1 appendBytes:v8 length:v7 + 1];
    if (v8 != a3) {
      free(v8);
    }
  }
  else
  {
    [a1 appendBytes:&v10 length:1];
  }
}

uint64_t _writeDataIntoData(void *a1, void *a2)
{
  uint64_t v8 = 0;
  int v4 = [a2 length];
  if ((int)(((v4 + 3) & 0xFFFFFFFC) - v4) >= 1) {
    objc_msgSend(a2, "appendBytes:length:", &v8);
  }
  unsigned int v5 = [a1 length];
  unsigned int v7 = bswap32(v5);
  [a2 appendBytes:&v7 length:4];
  uint64_t result = [a2 appendBytes:&v8 length:4];
  if (v5) {
    return [a2 appendData:a1];
  }
  return result;
}

id _newReadDataFromBytes(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3 = (*a2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v3 + 4 > a3) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(a1 + v3);
  uint64_t v5 = bswap32(v4);
  unint64_t v6 = v3 + 8;
  if (v6 + v5 > a3) {
    return 0;
  }
  *a2 = v6 + v5;
  if (v4)
  {
    uint64_t v8 = a1 + v6;
    id v9 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    return (id)[v9 initWithBytesNoCopy:v8 length:v5 freeWhenDone:0];
  }
  else
  {
    uint64_t v10 = (objc_class *)MEMORY[0x1E4F1C9B8];
    return objc_alloc_init(v10);
  }
}

uint64_t _writePFEncodedDataShapeIntoData(void *a1, void *a2)
{
  uint64_t v8 = 0;
  int v4 = [a1 length];
  if ((int)(((v4 + 7) & 0xFFFFFFF8) - v4) >= 1) {
    objc_msgSend(a1, "appendBytes:length:", &v8);
  }
  [a1 appendBytes:&v8 length:8];
  [a1 appendBytes:&v8 length:8];
  unsigned int v5 = [a2 length];
  unsigned int v7 = bswap32(v5);
  [a1 appendBytes:&v7 length:4];
  [a1 appendBytes:&v8 length:4];
  return objc_msgSend(a1, "appendBytes:length:", objc_msgSend(a2, "bytes"), v5);
}

uint64_t _writePFEncodedArrayShapeIntoData(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = 0;
  int v8 = [a1 length];
  if ((int)(((v8 + 7) & 0xFFFFFFF8) - v8) >= 1) {
    objc_msgSend(a1, "appendBytes:length:", &v23);
  }
  [a1 appendBytes:&v23 length:8];
  [a1 appendBytes:&v23 length:8];
  [a1 appendBytes:&v23 length:4];
  unsigned int v22 = bswap32([a2 count]);
  [a1 appendBytes:&v22 length:4];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v18 objects:v24 count:16];
  if (result)
  {
    unint64_t v10 = result;
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)v19;
    for (uint64_t i = *(void *)v19; ; uint64_t i = *(void *)v19)
    {
      if (i != v12) {
        objc_enumerationMutation(a2);
      }
      id v14 = *(void **)(*((void *)&v18 + 1) + 8 * v11);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        break;
      }
      unint64_t v15 = objc_msgSend(a3, "indexForKey:", objc_msgSend(v14, "name"));
      unint64_t v17 = 0;
      if (a4) {
        goto LABEL_15;
      }
LABEL_17:
      unint64_t v17 = bswap64(v15);
      [a1 appendBytes:&v17 length:8];
      if (++v11 >= v10)
      {
        uint64_t result = [a2 countByEnumeratingWithState:&v18 objects:v24 count:16];
        if (!result) {
          return result;
        }
        unint64_t v10 = result;
        uint64_t v11 = 0;
      }
    }
    if (!a4)
    {
      unint64_t v15 = objc_msgSend((id)objc_msgSend(a3, "objectForKey:", v14), "unsignedIntegerValue");
      goto LABEL_17;
    }
    if ([v14 isNSNumber])
    {
      unint64_t v15 = objc_msgSend((id)objc_msgSend(a4, "objectForKey:", v14), "unsignedIntegerValue");
      unint64_t v17 = 0x100000000000000;
      uint64_t v16 = &v17;
    }
    else
    {
      unint64_t v15 = objc_msgSend((id)objc_msgSend(a3, "objectForKey:", v14), "unsignedIntegerValue");
      unint64_t v17 = 0;
LABEL_15:
      uint64_t v16 = (unint64_t *)&v23;
    }
    [a1 appendBytes:v16 length:8];
    goto LABEL_17;
  }
  return result;
}

uint64_t _writeNSPropertyProxyIntoData(void *a1, void *a2, void *a3)
{
  uint64_t v9 = 0;
  unsigned int v5 = objc_msgSend((id)objc_msgSend(a3, "objectForKey:", objc_msgSend(a2, "_underlyingProperty")), "unsignedIntegerValue");
  int v6 = [a1 length];
  if ((int)(((v6 + 7) & 0xFFFFFFF8) - v6) >= 1) {
    objc_msgSend(a1, "appendBytes:length:", &v9);
  }
  unsigned int v8 = bswap32(v5);
  [a1 appendBytes:&v8 length:4];
  unsigned int v8 = bswap32([a2 _entitysReferenceID]);
  [a1 appendBytes:&v8 length:4];
  [a1 appendBytes:&v9 length:8];
  [a1 appendBytes:&v9 length:8];
  [a1 appendBytes:&v9 length:8];
  return [a1 appendBytes:&v9 length:4];
}

uint64_t _writeKKDRow2IntoData(void *a1, uint64_t a2)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  int v4 = [a1 length];
  if ((int)(((v4 + 7) & 0xFFFFFFF8) - v4) >= 1)
  {
    v14[0] = 0;
    objc_msgSend(a1, "appendBytes:length:", v14);
  }
  _writeInt32IntoData(a1, *(_DWORD *)a2);
  _writeInt32IntoData(a1, *(unsigned __int16 *)(a2 + 4));
  unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
  _writeInt16IntoData(a1, v5);
  _writeInt16IntoData(a1, *(unsigned __int16 *)(a2 + 10));
  unsigned int v6 = *(unsigned __int16 *)(a2 + 12);
  _writeInt16IntoData(a1, v6);
  uint64_t result = _writeInt16IntoData(a1, *(unsigned __int16 *)(a2 + 14));
  if (((v6 - v5) & 0x80000000) == 0)
  {
    MEMORY[0x1F4188790](result);
    if (v8)
    {
      unint64_t v10 = (unsigned __int16 *)(a2 + 16);
      uint64_t v11 = (_WORD *)((char *)v14 - v9);
      uint64_t v12 = v8;
      do
      {
        unsigned int v13 = *v10++;
        *v11++ = bswap32(v13) >> 16;
        --v12;
      }
      while (v12);
    }
    return objc_msgSend(a1, "appendBytes:length:");
  }
  return result;
}

uint64_t _writeKKDMappingStrategyIntoData(void *a1, void *a2, void *a3)
{
  uint64_t v16 = 0;
  int v6 = [a1 length];
  if ((int)(((v6 + 7) & 0xFFFFFFF8) - v6) >= 1) {
    objc_msgSend(a1, "appendBytes:length:", &v16);
  }
  LODWORD(v7) = [a2 length];
  uint64_t v8 = (uint64_t *)[a2 keys];
  [a1 appendBytes:&v16 length:8];
  [a1 appendBytes:&v16 length:8];
  [a1 appendBytes:&v16 length:8];
  [a1 appendBytes:&v16 length:8];
  [a1 appendBytes:&v16 length:8];
  uint64_t v9 = (uint64_t *)a2[2];
  if (*v9)
  {
    unsigned int v10 = 1;
    while (v9[v10++])
      ;
  }
  else
  {
    unsigned int v10 = 1;
  }
  _writeInt32IntoData(a1, v7);
  for (uint64_t result = _writeInt32IntoData(a1, v10); v10; --v10)
    uint64_t result = [a1 appendBytes:&v16 length:8];
  uint64_t v13 = *v9;
  if (*v9)
  {
    unsigned int v14 = 1;
    do
    {
      uint64_t result = _writeKKDRow2IntoData(a1, v13);
      uint64_t v13 = v9[v14++];
    }
    while (v13);
  }
  uint64_t v7 = v7;
  if (v7)
  {
    do
    {
      uint64_t v15 = *v8++;
      uint64_t result = _writeInt64IntoData(a1, objc_msgSend((id)objc_msgSend(a3, "objectForKey:", v15), "unsignedIntegerValue"));
      --v7;
    }
    while (v7);
  }
  return result;
}

void _PFResultsObjectCFDeallocator_deallocate(uint64_t a1)
{
}

void *_PFfastFactoryRelease1(void *a1)
{
  uint64_t result = object_getIndexedIvars(a1);
  if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)result, 0xFFFFFFFF, memory_order_relaxed) <= 0)
  {
    uint64_t v2 = result;
    unint64_t v3 = (const void *)result[5];
    if (v3)
    {
      CFRelease(v3);
      v2[5] = 0;
    }
    v2[6] = 0;
    v2[2] = 0;
    uint64_t result = (void *)v2[3];
    if (result)
    {
      uint64_t result = (void *)_PFfastFactoryRelease1();
      v2[3] = 0;
    }
    if (v2[1]) {
      v2[1] = 0;
    }
    __dmb(0xBu);
  }
  return result;
}

objc_class *_PFFallbackFactoryForOID(void *a1)
{
  Class Class = object_getClass(a1);
  IndexedIvars = object_getIndexedIvars(Class);
  int v4 = (objc_class *)*((void *)IndexedIvars + 3);
  if (!v4)
  {
    unsigned int v5 = (atomic_ullong *)IndexedIvars;
    int v6 = (void *)[a1 persistentStore];
    uint64_t v7 = (void *)[a1 entity];
    int v4 = +[_NSCoreManagedObjectID classWithStore:v6 andEntity:v7];
    if (![(objc_class *)v4 _storeInfo1])
    {
      uint64_t v8 = 0;
      if (v6 && v7) {
        uint64_t v8 = _sqlCoreLookupSQLEntityForEntityDescription(v6, v7);
      }
      [(objc_class *)v4 _setStoreInfo1:v8];
    }
    uint64_t v9 = 0;
    atomic_compare_exchange_strong(v5 + 3, (unint64_t *)&v9, (unint64_t)v4);
    if (v9)
    {
      atomic_ullong v10 = v5[3];

      return (objc_class *)v10;
    }
  }
  return v4;
}

void sub_18ACD0CE8(_Unwind_Exception *a1)
{
}

void sub_18ACD0D54(void *a1)
{
}

int8x8_t SetHostHeaderWithBigHeader(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(int8x8_t *)(a1 + _Block_object_dispose(&STACK[0x450], 8) = vrev32_s8(*(int8x8_t *)(a2 + 8));
  *(int8x16_t *)(a1 + 16) = vrev64q_s8(*(int8x16_t *)(a2 + 16));
  *(int8x16_t *)(a1 + 32) = vrev64q_s8(*(int8x16_t *)(a2 + 32));
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x450], 8) = bswap64(*(void *)(a2 + 48));
  int8x8_t result = vrev32_s8(*(int8x8_t *)(a2 + 56));
  *(int8x8_t *)(a1 + 56) = result;
  return result;
}

void sub_18ACD1B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v16 = objc_begin_catch(exception_object);
      if (v14)
      {
        if (!a14)
        {
          unint64_t v17 = (void *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithObjectsAndKeys:v15];
          [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:259 userInfo:v17];
        }
      }
      id v18 = v16;
      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exception_object);
    }
    JUMPOUT(0x18ACD1934);
  }
  _Unwind_Resume(exception_object);
}

void sub_18ACD1FF0()
{
}

void sub_18ACD2104(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ACD20D8);
  }
  _Unwind_Resume(a1);
}

void sub_18ACD2114(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18ACD211CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18ACD2124(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ACD212CLL);
  }
  objc_terminate();
}

void sub_18ACD272C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exception_object);
      JUMPOUT(0x18ACD25C8);
    }
    id v15 = objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18ACD2884(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ACD2840);
  }
  _Unwind_Resume(a1);
}

void sub_18ACD2894(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18ACD289CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18ACD28A4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ACD28ACLL);
  }
  objc_terminate();
}

void sub_18ACD2BD0(_Unwind_Exception *a1)
{
}

void sub_18ACD2C14(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ACD2C20);
  }
  JUMPOUT(0x18ACD2BF8);
}

void sub_18ACD2C58(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ACD2C2CLL);
  }
  JUMPOUT(0x18ACD2BF8);
}

void sub_18ACD31E4()
{
}

void sub_18ACD327C()
{
}

void sub_18ACD42CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_18ACD504C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ACD4FA4);
  }
  JUMPOUT(0x18ACD4F88);
}

void sub_18ACD505C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ACD4F44);
  }
  JUMPOUT(0x18ACD4F88);
}

void sub_18ACD507C(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18ACD4F84);
}

void sub_18ACD63D8(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18ACD640C()
{
}

void sub_18ACD6854(_Unwind_Exception *a1)
{
}

void sub_18ACD68A8(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ACD66D4);
  }
  JUMPOUT(0x18ACD6898);
}

void sub_18ACD765C(_Unwind_Exception *a1)
{
}

void sub_18ACD767C(void *a1)
{
}

void sub_18ACD808C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18ACD94CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ACD9680(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _PF_Handler_SetNilValueForKeyIndex(char **a1, uint64_t a2, uint64_t a3)
{
  id v5 = _PFEntityForManagedObject(a1);
  int v6 = *(void **)(_kvcPropertysPrimitiveSetters((uint64_t)v5) + 8 * a3);
  _PF_CopyOnWrite_Snapshot(a1);
  uint64_t result = (uint64_t)snapshot_set_value_as_object(a1[3], a3, 0, v7, v8, v9, v10, v11);
  if (v6)
  {
    uint64_t result = isScalarTypeForKVCSetter(v6);
    if (result)
    {
      return _NSSetUsingKeyValueSetter();
    }
  }
  return result;
}

uint64_t _PF_InternalToOneRelationshipForeignKeyCache(unsigned int *a1, unint64_t a2, void *a3)
{
  if (a3) {
    *a3 = 0;
  }
  if ((a1[4] & 0x30000) == 0x10000 || (a1[4] & 0x80) != 0) {
    return 0;
  }
  uint64_t v7 = *((void *)a1 + 4);
  uint64_t v8 = _PFEntityForManagedObject(a1);
  uint64_t v9 = v8[14];
  uint64_t v10 = a1[5];
  uint64_t v11 = v10 ? (char *)a1 + v10 : 0;
  unint64_t v13 = *(void *)(v9 + 96);
  unint64_t v12 = *(void *)(v9 + 104);
  BOOL v15 = a2 >= v13;
  unint64_t v14 = a2 - v13;
  BOOL v15 = !v15 || v14 >= v12;
  if (v15 || v7 == 0) {
    return 0;
  }
  unint64_t v17 = a1[4];
  if (*(void *)(_kvcPropertysPrimitiveGetters(v8) + 8 * a2)) {
    uint64_t v24 = (void *)_NSGetUsingKeyValueGetter();
  }
  else {
    snapshot_get_value_as_object(*((id **)a1 + 3), a2, v18, v19, v20, v21, v22, v23);
  }
  if (v24 == (void *)_CD_ScalarNull) {
    return 0;
  }
  if ((v11[(a2 >> 3) - ((v17 >> 22) & 0x3FC)] >> (a2 & 7)))
  {
    if (a3)
    {
      uint64_t v24 = (void *)[v24 objectID];
LABEL_27:
      *a3 = v24;
    }
  }
  else if (a3)
  {
    goto LABEL_27;
  }
  return 1;
}

void _PFFaultHandlerFixRelationshipsPostMigration(int a1, id **a2, uint64_t a3, const __CFDictionary *a4)
{
  int v4 = (*((_DWORD *)a2 + 4) >> 15) & 7;
  if (v4 == 5 || v4 == 0)
  {
    uint64_t v8 = _PFEntityForManagedObject(a2);
    uint64_t v9 = (uint64_t)v8;
    if (v8) {
      uint64_t v37 = v8[14];
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v10 = _kvcPropertysPrimitiveGetters(v8);
    uint64_t v38 = _kvcPropertysPrimitiveSetters(v9);
    uint64_t v17 = 0;
    uint64_t v18 = *((unsigned int *)a2 + 5);
    if (v18) {
      uint64_t v19 = (char *)a2 + v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = &v19[-(((unint64_t)*((unsigned int *)a2 + 4) >> 22) & 0x3FC)];
    char v21 = 1;
    do
    {
      char v22 = v21;
      uint64_t v23 = (unint64_t *)(v37
                               + 16
                               * *((int *)&__const__PFFaultHandlerFixRelationshipsPostMigration_rangeIndices + v17));
      unint64_t v25 = *v23;
      unint64_t v24 = v23[1];
      if (*v23 < v24 + *v23)
      {
        do
        {
          if (((v20[v25 >> 3] >> (v25 & 7)) & 1) == 0)
          {
            if (*(void *)(v10 + 8 * v25)) {
              uint64_t v26 = (const void *)_NSGetUsingKeyValueGetter();
            }
            else {
              snapshot_get_value_as_object(a2[3], v25, v11, v12, v13, v14, v15, v16);
            }
            if (v26) {
              BOOL v27 = v26 == (const void *)_CD_ScalarNull;
            }
            else {
              BOOL v27 = 1;
            }
            if (!v27)
            {
              Value = (void *)CFDictionaryGetValue(a4, v26);
              if (Value)
              {
                uint64_t v29 = Value;
                uint64_t v30 = *(void *)(v38 + 8 * v25);
                _PF_CopyOnWrite_Snapshot(a2);
                if (v30)
                {
                  _NSSetUsingKeyValueSetter();
                }
                else
                {
                  id v31 = v29;
                  snapshot_set_value_as_object((char *)a2[3], v25, v31, v32, v33, v34, v35, v36);
                }
              }
            }
          }
          ++v25;
          --v24;
        }
        while (v24);
      }
      char v21 = 0;
      uint64_t v17 = 1;
    }
    while ((v22 & 1) != 0);
  }
}

uint64_t _readFetchRequestIntoShellFromData(void *a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  unint64_t v14 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v15 = v14 + 4;
  if (v14 + 4 > a4) {
    goto LABEL_120;
  }
  int v17 = *(_DWORD *)(a2 + v14);
  unint64_t v142 = v14 + 4;
  if (v17 != -20254786) {
    goto LABEL_120;
  }
  uint64_t v18 = a8;
  uint64_t v20 = a5;
  char v22 = a3;
  unint64_t v23 = (v14 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v24 = v23 + 4;
  if (v23 + 4 <= a4)
  {
    unsigned int v25 = bswap32(*(_DWORD *)(a2 + v23));
    unint64_t v142 = v24;
    unint64_t v15 = v24;
  }
  else
  {
    unsigned int v25 = 0;
  }
  if (v15 + v25 > a4)
  {
    if (a14)
    {
      uint64_t v26 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v27 = *MEMORY[0x1E4F281F8];
      uint64_t v28 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v29 = @"Can't read entity: Not enough bytes left";
      goto LABEL_122;
    }
    return 0;
  }
  unint64_t v30 = (v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v31 = v30 + 4;
  if (v30 + 4 <= a4)
  {
    unsigned int v32 = *(_DWORD *)(a2 + v30);
    unint64_t v142 = v30 + 4;
    if (!v32)
    {
      unint64_t v15 = v30 + 4;
      goto LABEL_39;
    }
    CFIndex v33 = bswap32(v32);
    values = (void **)(a2 + ((v30 + 11) & 0xFFFFFFFFFFFFFFF8));
    CFIndex v34 = v33;
    while (1)
    {
      unint64_t v35 = (v31 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v36 = v35 + 8;
      if (v35 + 8 <= a4)
      {
        uint64_t v37 = *(void *)(a2 + v35);
        unint64_t v142 = v36;
        unint64_t v31 = v36;
        if (v37) {
          break;
        }
      }
      if (!--v34)
      {
        uint64_t v39 = values;
        CFIndex v40 = v33;
        while (1)
        {
          unint64_t v41 = (v142 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v42 = v41 + 4;
          if (v41 + 4 <= a4)
          {
            unsigned int v44 = bswap32(*(_DWORD *)(a2 + v41));
            unint64_t v142 = v41 + 4;
            if (v44 == 2)
            {
              unint64_t v46 = (v41 + 7) & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v47 = v46 + 4;
              if (v46 + 4 <= a4)
              {
                unsigned int v48 = bswap32(*(_DWORD *)(a2 + v46));
                unint64_t v142 = v47;
              }
              else
              {
                unsigned int v48 = 0;
              }
              uint64_t v45 = *(void **)(a7 + 8 * v48);
              goto LABEL_25;
            }
            if (v44 == 1)
            {
              unint64_t v49 = (v41 + 7) & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v50 = v49 + 4;
              if (v49 + 4 <= a4)
              {
                unsigned int v51 = bswap32(*(_DWORD *)(a2 + v49));
                unint64_t v142 = v50;
              }
              else
              {
                unsigned int v51 = 0;
              }
              uint64_t v45 = *(void **)(a8 + 8 * v51);
              goto LABEL_25;
            }
            if (v44)
            {
              if (a14)
              {
                uint64_t v26 = (void *)MEMORY[0x1E4F28C58];
                uint64_t v27 = *MEMORY[0x1E4F281F8];
                uint64_t v28 = (void *)MEMORY[0x1E4F1C9E8];
                uint64_t v29 = @"Invalid groupByProperty type in archive";
                goto LABEL_122;
              }
              goto LABEL_26;
            }
            unint64_t v41 = (v41 + 7) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v42 = v41 + 4;
          }
          if (v42 <= a4)
          {
            unsigned int v43 = bswap32(*(_DWORD *)(a2 + v41));
            unint64_t v142 = v42;
          }
          else
          {
            unsigned int v43 = 0;
          }
          uint64_t v45 = _newReadPropertyProxyFromBytes(a1, a2, &v142, a4, *(void *)(a11 + 8 * v43), a7);
LABEL_25:
          void *v39 = v45;
LABEL_26:
          ++v39;
          if (!--v40)
          {
            callBacks.versiouint64_t n = 0;
            *(_OWORD *)&callBacks.retaiuint64_t n = *(_OWORD *)(MEMORY[0x1E4F1D510] + 8);
            callBacks.copyDescriptiouint64_t n = *(CFArrayCopyDescriptionCallBack *)(MEMORY[0x1E4F1D510] + 24);
            callBacks.equal = 0;
            uint64_t v20 = a5;
            *(void *)(a5 + 16) = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, v33, &callBacks);
            unint64_t v15 = v142;
            uint64_t v18 = a8;
            goto LABEL_39;
          }
        }
      }
    }
LABEL_77:
    if (a14)
    {
      uint64_t v26 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v27 = *MEMORY[0x1E4F281F8];
      uint64_t v28 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v29 = @"Cant' read entity: Properties buffer has content";
LABEL_122:
      uint64_t v129 = objc_msgSend(v26, "errorWithDomain:code:userInfo:", v27, 134060, objc_msgSend(v28, "dictionaryWithObject:forKey:", v29, @"Root cause"));
      uint64_t result = 0;
      *a14 = v129;
      return result;
    }
    return 0;
  }
LABEL_39:
  unint64_t v52 = (v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v53 = v52 + 4;
  if (v52 + 4 <= a4)
  {
    unsigned int v54 = *(_DWORD *)(a2 + v52);
    unint64_t v142 = v53;
    if (v54)
    {
      uint64_t v55 = v20;
      uint64_t v134 = *(void *)(a10 + 8 * bswap32(v54));
      callBacks.versiouint64_t n = 0;
      BOOL v56 = (void *)MEMORY[0x1E4F1CAD0];
      uint64_t v57 = objc_opt_class();
      uint64_t v131 = objc_opt_class();
      uint64_t v58 = (void *)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, [v56 setWithObjects:v57], v134, (uint64_t)&callBacks);
      if (!v58) {
        goto LABEL_123;
      }
      uint64_t v20 = v55;
      *(void *)(v55 + 24) = v58;
    }
  }
  uint64_t v65 = *(void **)(v20 + 32);
  if (!v65)
  {
    uint64_t v65 = PF_CALLOC_OBJECT_ARRAY(3);
    *(void *)(v20 + 32) = v65;
  }
  unint64_t v66 = (v142 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v67 = v66 + 8;
  if (v66 + 8 <= a4)
  {
    unint64_t v68 = bswap64(*(void *)(a2 + v66));
    unint64_t v142 = v67;
  }
  else
  {
    unint64_t v68 = 0;
  }
  *uint64_t v65 = v68;
  unint64_t v69 = v142;
  unint64_t v70 = (v142 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v71 = v70 + 4;
  if (v70 + 4 <= a4)
  {
    unsigned int v72 = *(_DWORD *)(a2 + v70);
    unint64_t v142 = v70 + 4;
    if (v72)
    {
      CFIndex v73 = bswap32(v72);
      BOOL v74 = (void **)(a2 + ((v70 + 11) & 0xFFFFFFFFFFFFFFF8));
      CFIndex v75 = v73;
      do
      {
        unint64_t v76 = (v71 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v77 = v76 + 8;
        if (v76 + 8 <= a4)
        {
          uint64_t v78 = *(void *)(a2 + v76);
          unint64_t v142 = v77;
          unint64_t v71 = v77;
          if (v78) {
            goto LABEL_77;
          }
        }
        --v75;
      }
      while (v75);
      uint64_t v135 = v20;
      uint64_t v137 = v74;
      uint64_t v79 = v74;
      CFIndex v80 = v73;
      while (1)
      {
        unint64_t v81 = (v142 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v82 = v81 + 4;
        if (v81 + 4 > a4) {
          goto LABEL_60;
        }
        unsigned int v83 = bswap32(*(_DWORD *)(a2 + v81));
        unint64_t v142 = v81 + 4;
        if (v83 == 2)
        {
          unint64_t v86 = (v81 + 7) & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v87 = v86 + 4;
          if (v86 + 4 <= a4)
          {
            unsigned int v88 = bswap32(*(_DWORD *)(a2 + v86));
            unint64_t v142 = v87;
          }
          else
          {
            unsigned int v88 = 0;
          }
          uint64_t v85 = *(void **)(a7 + 8 * v88);
          goto LABEL_64;
        }
        if (v83 == 1) {
          break;
        }
        if (!v83)
        {
          unint64_t v81 = (v81 + 7) & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v82 = v81 + 4;
LABEL_60:
          if (v82 <= a4)
          {
            unsigned int v84 = bswap32(*(_DWORD *)(a2 + v81));
            unint64_t v142 = v82;
          }
          else
          {
            unsigned int v84 = 0;
          }
          uint64_t v85 = _newReadPropertyProxyFromBytes(a1, a2, &v142, a4, *(void *)(a11 + 8 * v84), a7);
LABEL_64:
          *uint64_t v79 = v85;
          goto LABEL_65;
        }
        if (a14)
        {
          uint64_t v26 = (void *)MEMORY[0x1E4F28C58];
          uint64_t v27 = *MEMORY[0x1E4F281F8];
          uint64_t v28 = (void *)MEMORY[0x1E4F1C9E8];
          uint64_t v29 = @"Invalid propertyToFetch type in archive";
          goto LABEL_122;
        }
LABEL_65:
        ++v79;
        if (!--v80)
        {
          callBacks.versiouint64_t n = 0;
          *(_OWORD *)&callBacks.retaiuint64_t n = *(_OWORD *)(MEMORY[0x1E4F1D510] + 8);
          callBacks.copyDescriptiouint64_t n = *(CFArrayCopyDescriptionCallBack *)(MEMORY[0x1E4F1D510] + 24);
          callBacks.equal = 0;
          uint64_t v20 = v135;
          *(void *)(v135 + 40) = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v137, v73, &callBacks);
          unint64_t v69 = v142;
          goto LABEL_80;
        }
      }
      unint64_t v89 = (v81 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v90 = v89 + 4;
      if (v89 + 4 <= a4)
      {
        unsigned int v91 = bswap32(*(_DWORD *)(a2 + v89));
        unint64_t v142 = v90;
      }
      else
      {
        unsigned int v91 = 0;
      }
      uint64_t v85 = *(void **)(v18 + 8 * v91);
      goto LABEL_64;
    }
    unint64_t v69 = v70 + 4;
  }
LABEL_80:
  unint64_t v92 = (v69 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v93 = v92 + 4;
  if (v92 + 4 <= a4)
  {
    unsigned int v94 = bswap32(*(_DWORD *)(a2 + v92));
    unint64_t v142 = v92 + 4;
    unint64_t v92 = (v92 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v95 = v92 + 4;
    unint64_t v69 = v93;
  }
  else
  {
    unsigned int v94 = 0;
    unint64_t v95 = v92 + 4;
  }
  if (v95 <= a4)
  {
    unsigned int v96 = bswap32(*(_DWORD *)(a2 + v92));
    unint64_t v142 = v95;
    unint64_t v69 = v95;
  }
  else
  {
    unsigned int v96 = 0;
  }
  if (v94)
  {
    id v97 = *(id *)(a11 + 8 * v96);
  }
  else
  {
    id v97 = *(id *)(v18 + 8 * v96);
    unint64_t v69 = v142;
  }
  *(void *)(v20 + 4_Block_object_dispose(&STACK[0x450], 8) = v97;
  unint64_t v98 = (v69 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v99 = v98 + 4;
  if (v98 + 4 > a4) {
    goto LABEL_96;
  }
  unsigned int v100 = *(_DWORD *)(a2 + v98);
  unint64_t v142 = v99;
  unint64_t v69 = v99;
  if (!v100) {
    goto LABEL_96;
  }
  uint64_t v138 = (void **)v18;
  uint64_t v101 = *(void *)(a10 + 8 * bswap32(v100));
  callBacks.versiouint64_t n = 0;
  uint64_t v102 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v103 = objc_opt_class();
  uint64_t v131 = objc_opt_class();
  uint64_t v104 = +[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, [v102 setWithObjects:v103], v101, (uint64_t)&callBacks);
  if (!v104)
  {
LABEL_123:
    long long v130 = @"Can't decode predicate for fetch request";
LABEL_125:
    _NSCoreDataLog(1, (uint64_t)v130, v59, v60, v61, v62, v63, v64, v131);
    if (a14) {
      *a14 = callBacks.version;
    }
    return 0;
  }
  unint64_t v105 = (void *)v104;
  if (!byte_1EB270ABE)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [v105 allowEvaluation];
    }
  }
  *(void *)(v20 + 56) = v105;
  unint64_t v69 = v142;
  uint64_t v18 = (uint64_t)v138;
LABEL_96:
  unint64_t v106 = (v69 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v107 = v106 + 4;
  if (v106 + 4 <= a4)
  {
    unsigned int v108 = *(_DWORD *)(a2 + v106);
    unint64_t v142 = v107;
    unint64_t v69 = v107;
    if (v108)
    {
      uint64_t v136 = v20;
      long long v132 = v22;
      uint64_t v109 = bswap32(v108);
      long long v110 = (void *)_newReadPFEncodedArrayFromData((uint64_t)a1, a2, &v142, a4, a10, 0);
      uint64_t v111 = 0;
      while (1)
      {
        uint64_t v112 = [v110 objectAtIndex:v111];
        callBacks.versiouint64_t n = 0;
        uint64_t v113 = [MEMORY[0x1E4F1CAD0] setWithObject:objc_opt_class()];
        uint64_t v114 = +[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v113, v112, (uint64_t)&callBacks);
        if (!v114) {
          break;
        }
        uint64_t v115 = (void *)v114;
        if (!byte_1EB270ABE)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            [v115 allowEvaluation];
          }
        }
        [v110 _replaceObject:v115 atIndex:v111++];
        if (v109 == v111)
        {
          char v22 = v132;
          uint64_t v20 = v136;
          *(void *)(v136 + 64) = v110;
          unint64_t v69 = v142;
          goto LABEL_105;
        }
      }
      long long v130 = @"Can't decode sortDescriptor for fetch request";
      goto LABEL_125;
    }
  }
LABEL_105:
  unint64_t v116 = (v69 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v117 = v116 + 8;
  if (v116 + 8 <= a4)
  {
    unint64_t v118 = bswap64(*(void *)(a2 + v116));
    unint64_t v142 = v116 + 8;
    unint64_t v116 = (v116 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v119 = v116 + 8;
    unint64_t v69 = v117;
  }
  else
  {
    unint64_t v118 = 0;
    unint64_t v119 = v116 + 8;
  }
  *(void *)(v20 + 72) = v118;
  if (v119 <= a4)
  {
    unint64_t v120 = bswap64(*(void *)(a2 + v116));
    unint64_t v142 = v119;
    unint64_t v69 = v119;
  }
  else
  {
    unint64_t v120 = 0;
  }
  *(void *)(v20 + 80) = v120;
  unint64_t v121 = (v69 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v122 = v121 + 4;
  if (v121 + 4 <= a4)
  {
    int v123 = *(_DWORD *)(a2 + v121);
    unint64_t v142 = v122;
    unint64_t v69 = v122;
    if (v123)
    {
      *(void *)(v20 + 96) = _newReadPFEncodedArrayFromData((uint64_t)a1, a2, &v142, a4, v18, 0);
      unint64_t v69 = v142;
    }
  }
  unint64_t v124 = (v69 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v125 = v124 + 4;
  if (v124 + 4 <= a4)
  {
    unsigned int v126 = bswap32(*(_DWORD *)(a2 + v124));
    unint64_t v142 = v124 + 4;
    unint64_t v124 = (v124 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v125 = v124 + 4;
  }
  else
  {
    unsigned int v126 = 0;
  }
  *(_DWORD *)(v20 + 104) = v126;
  *(_DWORD *)(v20 + 104) &= ~0x100u;
  if (v125 <= a4)
  {
    int v127 = *(_DWORD *)(a2 + v124);
    unint64_t v142 = v125;
    if (v127 == -20254786)
    {
      unint64_t *v22 = v125;
      return 1;
    }
  }
LABEL_120:
  if (a14)
  {
    uint64_t v26 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v27 = *MEMORY[0x1E4F281F8];
    uint64_t v28 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v29 = @"Can't read entity into shell: Missing entity frontside delimiter";
    goto LABEL_122;
  }
  return 0;
}

void sub_18ACE04C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18ACE0AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

#error "18ACE0FD4: call analysis failed (funcsize=54)"

void sub_18ACE12C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
}

void sub_18ACE138C(void *a1)
{
}

void sub_18ACE13BC()
{
  if (v0) {
    JUMPOUT(0x18ACE13C4);
  }
  JUMPOUT(0x18ACE13C8);
}

void sub_18ACE14BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18ACE1A34(void *a1)
{
}

__CFString *descriptionForBranchRow(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return @"branch row pointer is NULL";
  }
  uint64_t v4 = (*(__int16 *)(a1 + 14) - *(__int16 *)(a1 + 10));
  if ((int)v4 < 1)
  {
    id v5 = 0;
  }
  else
  {
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    int v6 = (__int16 *)(a1 + 16);
    do
    {
      unsigned int v7 = *v6++;
      objc_msgSend(v5, "addObject:", objc_msgSend(NSNumber, "numberWithShort:", v7));
      --v4;
    }
    while (v4);
  }
  if ((a2 & 0x80000000) != 0) {
    uint64_t v9 = &stru_1ED787880;
  }
  else {
    uint64_t v9 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"[%d]", a2);
  }
  uint64_t v10 = [NSString stringWithFormat:@"branch row pointer%@ = %p flags.size = %d flags.operation = %d flags.parameter = %d flags.offset = %d lowerBound = %d lowerSlot = %d upperBound = %d upperSlot = %d generalSlots pointer = %p with contents = %@", v9, a1, *(void *)a1 & 7, (*(void *)a1 >> 3) & 0x3FF, *(void *)a1 >> 13, HIDWORD(*(void *)a1), *(unsigned __int16 *)(a1 + 8), *(__int16 *)(a1 + 10), *(unsigned __int16 *)(a1 + 12), *(__int16 *)(a1 + 14), a1 + 16, v5];

  return (__CFString *)v10;
}

Class override_class_superclass(objc_class *a1)
{
  Class Superclass = class_getSuperclass(a1);

  return class_getSuperclass(Superclass);
}

void *_sharedIMPL_setPvfk_core(char **a1, uint64_t a2, void *a3, unint64_t a4)
{
  if (_PF_Threading_Debugging_level) {
    _PFAssertSafeMultiThreadedAccess_impl([a1 managedObjectContext], sel_setPrimitiveValue_forKey_);
  }
  uint64_t v19 = a3;
  uint64_t v7 = *((void *)_PFEntityForManagedObject(a1) + 12);
  uint64_t v8 = *(void **)(v7 + 24 + 8 * a4);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(v7 + 16) + 40) + 8 * a4);
  _PF_CopyOnWrite_Snapshot(a1);
  _PFManagedObject_coerceValueForKeyWithDescription((uint64_t)a1, &v19, v9, v8);
  uint64_t v10 = *((unsigned int *)a1 + 5);
  if (v10) {
    uint64_t v11 = (char *)a1 + v10;
  }
  else {
    uint64_t v11 = 0;
  }
  v11[(a4 >> 3) - (((unint64_t)*((unsigned int *)a1 + 4) >> 22) & 0x3FC)] |= 1 << (a4 & 7);
  id v12 = v19;
  return snapshot_set_value_as_object(a1[3], a4, v12, v13, v14, v15, v16, v17);
}

void *_spvfk_0(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0);
}

void *_spvfk_1(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 1uLL);
}

void *_spvfk_2(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 2uLL);
}

void *_spvfk_3(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 3uLL);
}

void *_spvfk_4(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 4uLL);
}

void *_spvfk_5(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 5uLL);
}

void *_spvfk_6(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 6uLL);
}

void *_spvfk_7(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 7uLL);
}

void *_spvfk_8(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 8uLL);
}

void *_spvfk_9(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 9uLL);
}

void *_spvfk_10(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0xAuLL);
}

void *_spvfk_11(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0xBuLL);
}

void *_spvfk_12(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0xCuLL);
}

void *_spvfk_13(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0xDuLL);
}

void *_spvfk_14(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0xEuLL);
}

void *_spvfk_15(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0xFuLL);
}

void *_spvfk_16(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x10uLL);
}

void *_spvfk_17(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x11uLL);
}

void *_spvfk_18(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x12uLL);
}

void *_spvfk_19(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x13uLL);
}

void *_spvfk_20(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x14uLL);
}

void *_spvfk_21(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x15uLL);
}

void *_spvfk_22(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x16uLL);
}

void *_spvfk_23(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x17uLL);
}

void *_spvfk_24(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x18uLL);
}

void *_spvfk_25(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x19uLL);
}

void *_spvfk_26(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x1AuLL);
}

void *_spvfk_27(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x1BuLL);
}

void *_spvfk_28(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x1CuLL);
}

void *_spvfk_29(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x1DuLL);
}

void *_spvfk_30(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x1EuLL);
}

void *_spvfk_31(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x1FuLL);
}

void *_spvfk_32(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x20uLL);
}

void *_spvfk_33(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x21uLL);
}

void *_spvfk_34(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x22uLL);
}

void *_spvfk_35(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x23uLL);
}

void *_spvfk_36(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x24uLL);
}

void *_spvfk_37(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x25uLL);
}

void *_spvfk_38(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x26uLL);
}

void *_spvfk_39(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x27uLL);
}

void *_spvfk_40(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x28uLL);
}

void *_spvfk_41(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x29uLL);
}

void *_spvfk_42(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x2AuLL);
}

void *_spvfk_43(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x2BuLL);
}

void *_spvfk_44(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x2CuLL);
}

void *_spvfk_45(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x2DuLL);
}

void *_spvfk_46(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x2EuLL);
}

void *_spvfk_47(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x2FuLL);
}

void *_spvfk_48(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x30uLL);
}

void *_spvfk_49(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setPvfk_core(a1, a2, a3, 0x31uLL);
}

void _pvfk_44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void *_svfk_9(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 9uLL);
}

void *_svfk_12(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0xCuLL);
}

void *_svfk_13(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0xDuLL);
}

void *_svfk_14(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0xEuLL);
}

void *_svfk_16(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x10uLL);
}

void *_svfk_17(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x11uLL);
}

void *_svfk_18(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x12uLL);
}

void *_svfk_19(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x13uLL);
}

void *_svfk_21(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x15uLL);
}

void *_svfk_22(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x16uLL);
}

void *_svfk_23(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x17uLL);
}

void *_svfk_24(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x18uLL);
}

void *_svfk_25(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x19uLL);
}

void *_svfk_26(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x1AuLL);
}

void *_svfk_27(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x1BuLL);
}

void *_svfk_28(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x1CuLL);
}

void *_svfk_29(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x1DuLL);
}

void *_svfk_30(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x1EuLL);
}

void *_svfk_31(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x1FuLL);
}

void *_svfk_32(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x20uLL);
}

void *_svfk_33(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x21uLL);
}

void *_svfk_34(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x22uLL);
}

void *_svfk_35(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x23uLL);
}

void *_svfk_36(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x24uLL);
}

void *_svfk_37(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x25uLL);
}

void *_svfk_38(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x26uLL);
}

void *_svfk_39(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x27uLL);
}

void *_svfk_40(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x28uLL);
}

void *_svfk_41(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x29uLL);
}

void *_svfk_42(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x2AuLL);
}

void *_svfk_43(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x2BuLL);
}

void *_svfk_44(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x2CuLL);
}

void *_svfk_45(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x2DuLL);
}

void *_svfk_46(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x2EuLL);
}

void *_svfk_47(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x2FuLL);
}

void *_svfk_48(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x30uLL);
}

void *_svfk_49(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x31uLL);
}

void _sharedIMPL_addObjectToOrderedSet_core(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a3)
  {
    uint64_t v7 = [*(id *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4) name];
    _PF_Handler_WillAccess_Property((id *)a1, v8, a4);
    _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
    uint64_t v16 = v15;
    int v17 = [v15 containsObject:a3];
    char v18 = v17;
    id v19 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F28D60]), "initWithIndexesInRange:", objc_msgSend(v16, "count"), v17 ^ 1u);
    objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 2);
    if ((v18 & 1) == 0) {
      [v16 addObject:a3];
    }
    [a1 didChange:2 valuesAtIndexes:v19 forKey:v7];
  }
}

void _sharedIMPL_addOrderedSet_core(void *a1, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = [a3 count];
  if (v7)
  {
    unint64_t v8 = v7;
    uint64_t v28 = [*(id *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4) name];
    _PF_Handler_WillAccess_Property((id *)a1, v9, a4);
    _sharedIMPL_pvfk_core((uint64_t)a1, v10, a4, v11, v12, v13, v14, v15);
    int v17 = v16;
    uint64_t v29 = &v28;
    MEMORY[0x1F4188790](v16);
    id v19 = (char *)&v28 - v18;
    if (v8 > 0x200) {
      id v19 = (char *)NSAllocateScannedUncollectable();
    }
    else {
      bzero((char *)&v28 - v18, 8 * v8);
    }
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    long long v30 = 0u;
    uint64_t v20 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v30, v34, 16, v28, v29);
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = 0;
      uint64_t v23 = *(void *)v31;
      do
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          if (*(void *)v31 != v23) {
            objc_enumerationMutation(a3);
          }
          uint64_t v25 = *(void *)(*((void *)&v30 + 1) + 8 * i);
          if (([v17 containsObject:v25] & 1) == 0) {
            *(void *)&v19[8 * v22++] = v25;
          }
        }
        uint64_t v21 = [a3 countByEnumeratingWithState:&v30 objects:v34 count:16];
      }
      while (v21);
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v26 = objc_msgSend(objc_alloc(MEMORY[0x1E4F28D60]), "initWithIndexesInRange:", objc_msgSend(v17, "count"), v22);
    uint64_t v27 = v28;
    [a1 willChange:2 valuesAtIndexes:v26 forKey:v28];
    [v17 addObjects:v19 count:v22];
    [a1 didChange:2 valuesAtIndexes:v26 forKey:v27];

    if (v8 >= 0x201) {
      NSZoneFree(0, v19);
    }
  }
}

void _sharedIMPL_removeObjectFromOrderedSet_core(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a3)
  {
    uint64_t v7 = [*(id *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4) name];
    _PF_Handler_WillAccess_Property((id *)a1, v8, a4);
    _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
    uint64_t v16 = v15;
    id v18 = objc_alloc_init(MEMORY[0x1E4F28E60]);
    uint64_t v17 = [v16 indexOfObject:a3];
    if (v17 != 0x7FFFFFFFFFFFFFFFLL) {
      [v18 addIndex:v17];
    }
    [a1 willChange:3 valuesAtIndexes:v18 forKey:v7];
    [v16 removeObjectsAtIndexes:v18];
    [a1 didChange:3 valuesAtIndexes:v18 forKey:v7];
  }
}

void _sharedIMPL_removeObjectFromSet_core(_DWORD *a1, uint64_t a2, void *a3, unint64_t a4)
{
  values = a3;
  uint64_t v6 = [*(id *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4) name];
  int v7 = a1[4];
  CFSetRef v8 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D548]);
  if ((v7 & 0x200000) != 0) {
    _PF_ManagedObject_WillChangeValueForKeywithSetMutation(a1, (uint64_t)sel_willChangeValueForKey_withSetMutation_usingObjects_, v6, 2, (uint64_t)v8, a4);
  }
  else {
    [a1 willChangeValueForKey:v6 withSetMutation:2 usingObjects:v8];
  }
  _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
  [v15 removeObject:values];
  if ((v7 & 0x200000) != 0)
  {
    _PF_ManagedObject_DidChangeValueForKeywithSetMutation((uint64_t)a1, (uint64_t)sel_didChangeValueForKey_withSetMutation_usingObjects_, v6);
    if (!v8) {
      return;
    }
    goto LABEL_8;
  }
  [a1 didChangeValueForKey:v6 withSetMutation:2 usingObjects:v8];
  if (v8) {
LABEL_8:
  }
    CFRelease(v8);
}

void _sharedIMPL_removeObjectFromOrderedSetAtIndex_core(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = [*(id *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4) name];
  _PF_Handler_WillAccess_Property((id *)a1, v8, a4);
  _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
  uint64_t v16 = v15;
  id v17 = objc_alloc_init(MEMORY[0x1E4F28E60]);
  id v18 = v17;
  id v19 = v17;
  if (a3 != 0x7FFFFFFFFFFFFFFFLL)
  {
    [v17 addIndex:a3];
    id v18 = v19;
  }
  [a1 willChange:3 valuesAtIndexes:v18 forKey:v7];
  [v16 removeObjectsAtIndexes:v19];
  [a1 didChange:3 valuesAtIndexes:v19 forKey:v7];
}

uint64_t _sharedIMPL_removeOrderedSetAtIndexes_core(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = [*(id *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4) name];
  _PF_Handler_WillAccess_Property((id *)a1, v8, a4);
  _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
  uint64_t v16 = v15;
  [a1 willChange:3 valuesAtIndexes:a3 forKey:v7];
  [v16 removeObjectsAtIndexes:a3];

  return [a1 didChange:3 valuesAtIndexes:a3 forKey:v7];
}

void _sharedIMPL_removeOrderedSet_core(void *a1, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if ([a3 count])
  {
    uint64_t v7 = [*(id *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4) name];
    _PF_Handler_WillAccess_Property((id *)a1, v8, a4);
    _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
    uint64_t v16 = v15;
    id v17 = objc_alloc_init(MEMORY[0x1E4F28E60]);
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v18 = [a3 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = *(void *)v24;
      do
      {
        uint64_t v21 = 0;
        do
        {
          if (*(void *)v24 != v20) {
            objc_enumerationMutation(a3);
          }
          uint64_t v22 = [v16 indexOfObject:*(void *)(*((void *)&v23 + 1) + 8 * v21)];
          if (v22 != 0x7FFFFFFFFFFFFFFFLL) {
            [v17 addIndex:v22];
          }
          ++v21;
        }
        while (v19 != v21);
        uint64_t v19 = [a3 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v19);
    }
    [a1 willChange:3 valuesAtIndexes:v17 forKey:v7];
    [v16 removeObjectsAtIndexes:v17];
    [a1 didChange:3 valuesAtIndexes:v17 forKey:v7];
  }
}

uint64_t _sharedIMPL_removeSet_core(_DWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = [*(id *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4) name];
  int v8 = a1[4];
  if ((v8 & 0x200000) != 0) {
    _PF_ManagedObject_WillChangeValueForKeywithSetMutation(a1, (uint64_t)sel_willChangeValueForKey_withSetMutation_usingObjects_, v7, 2, a3, a4);
  }
  else {
    [a1 willChangeValueForKey:v7 withSetMutation:2 usingObjects:a3];
  }
  _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
  [v15 minusSet:a3];
  if ((v8 & 0x200000) != 0)
  {
    return _PF_ManagedObject_DidChangeValueForKeywithSetMutation((uint64_t)a1, (uint64_t)sel_didChangeValueForKey_withSetMutation_usingObjects_, v7);
  }
  else
  {
    return [a1 didChangeValueForKey:v7 withSetMutation:2 usingObjects:a3];
  }
}

void _sharedIMPL_insertObjectToOrderedSetAtIndex_core(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a3)
  {
    uint64_t v9 = [*(id *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a5) name];
    _PF_Handler_WillAccess_Property((id *)a1, v10, a5);
    _sharedIMPL_pvfk_core((uint64_t)a1, v11, a5, v12, v13, v14, v15, v16);
    uint64_t v18 = v17;
    int v19 = [v17 containsObject:a3];
    char v20 = v19;
    id v21 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F28D60]), "initWithIndexesInRange:", a4, v19 ^ 1u);
    objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 2);
    if ((v20 & 1) == 0) {
      [v18 insertObject:a3 atIndex:a4];
    }
    [a1 didChange:2 valuesAtIndexes:v21 forKey:v9];
  }
}

void _sharedIMPL_insertOrderedSetAtIndexes_core(void *a1, uint64_t a2, void *a3, void *a4, unint64_t a5)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = [a3 count];
  if (v9)
  {
    unint64_t v10 = v9;
    uint64_t v42 = [*(id *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a5) name];
    _PF_Handler_WillAccess_Property((id *)a1, v11, a5);
    _sharedIMPL_pvfk_core((uint64_t)a1, v12, a5, v13, v14, v15, v16, v17);
    int v19 = v18;
    id v20 = objc_alloc_init(MEMORY[0x1E4F28E60]);
    id v21 = v20;
    unsigned int v43 = &v41;
    if (v10 >= 0x201) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v10;
    }
    uint64_t v23 = 8 * v22;
    MEMORY[0x1F4188790](v20);
    long long v25 = (char *)&v41 - v24;
    if (v10 > 0x200) {
      long long v25 = (char *)NSAllocateScannedUncollectable();
    }
    else {
      bzero((char *)&v41 - v24, 8 * v10);
    }
    uint64_t v26 = [a4 lastIndex];
    v49[0] = 0;
    v49[1] = v26;
    uint64_t v27 = [a4 getIndexes:v25 maxCount:v10 inIndexRange:v49];
    MEMORY[0x1F4188790](v27);
    uint64_t v28 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v10 > 0x200) {
      uint64_t v28 = (char *)NSAllocateScannedUncollectable();
    }
    else {
      bzero((char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), 8 * v10);
    }
    id v44 = a1;
    long long v48 = 0u;
    long long v47 = 0u;
    long long v46 = 0u;
    long long v45 = 0u;
    uint64_t v29 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v45, v50, 16, v10);
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = 0;
      uint64_t v32 = *(void *)v46;
      do
      {
        for (uint64_t i = 0; i != v30; ++i)
        {
          if (*(void *)v46 != v32) {
            objc_enumerationMutation(a3);
          }
          uint64_t v34 = *(void *)(*((void *)&v45 + 1) + 8 * i);
          if (([v19 containsObject:v34] & 1) == 0)
          {
            *(void *)&v28[8 * v31] = v34;
            [v21 addIndex:*(void *)&v25[8 * v31++]];
          }
        }
        uint64_t v30 = [a3 countByEnumeratingWithState:&v45 objects:v50 count:16];
      }
      while (v30);
    }
    else
    {
      uint64_t v31 = 0;
    }
    if (v41 >= 0x201)
    {
      NSZoneFree(0, v25);
      uint64_t v38 = (void *)[objc_alloc(MEMORY[0x1E4F1C978]) initWithObjects:v28 count:v31];
      id v39 = v44;
      uint64_t v40 = v42;
      [v44 willChange:2 valuesAtIndexes:v21 forKey:v42];
      [v19 insertObjects:v38 atIndexes:v21];
      [v39 didChange:2 valuesAtIndexes:v21 forKey:v40];

      NSZoneFree(0, v28);
    }
    else
    {
      uint64_t v35 = (void *)[objc_alloc(MEMORY[0x1E4F1C978]) initWithObjects:v28 count:v31];
      id v36 = v44;
      uint64_t v37 = v42;
      [v44 willChange:2 valuesAtIndexes:v21 forKey:v42];
      [v19 insertObjects:v35 atIndexes:v21];
      [v36 didChange:2 valuesAtIndexes:v21 forKey:v37];
    }
  }
}

void _sharedIMPL_replaceObjectInOrderedSetAtIndex_core(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v22 = a4;
  if (a4)
  {
    uint64_t v9 = [*(id *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a5) name];
    _PF_Handler_WillAccess_Property((id *)a1, v10, a5);
    _sharedIMPL_pvfk_core((uint64_t)a1, v11, a5, v12, v13, v14, v15, v16);
    uint64_t v18 = v17;
    int v19 = [v17 containsObject:a4];
    char v20 = v19;
    id v21 = objc_msgSend(objc_alloc(MEMORY[0x1E4F28D60]), "initWithIndexesInRange:", a3, v19 ^ 1u);
    [a1 willChange:4 valuesAtIndexes:v21 forKey:v9];
    if ((v20 & 1) == 0) {
      objc_msgSend(v18, "replaceObjectsInRange:withObjects:count:", a3, 1, &v22, 1);
    }
    [a1 didChange:4 valuesAtIndexes:v21 forKey:v9];
  }
}

void _sharedIMPL_replaceOrderedSetAtIndexes_core(void *a1, uint64_t a2, void *a3, void *a4, unint64_t a5)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = [a3 count];
  if (v9)
  {
    unint64_t v10 = v9;
    uint64_t v42 = [*(id *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a5) name];
    _PF_Handler_WillAccess_Property((id *)a1, v11, a5);
    _sharedIMPL_pvfk_core((uint64_t)a1, v12, a5, v13, v14, v15, v16, v17);
    int v19 = v18;
    id v20 = objc_alloc_init(MEMORY[0x1E4F28E60]);
    id v21 = v20;
    unsigned int v43 = &v41;
    if (v10 >= 0x201) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v10;
    }
    uint64_t v23 = 8 * v22;
    MEMORY[0x1F4188790](v20);
    long long v25 = (char *)&v41 - v24;
    if (v10 > 0x200) {
      long long v25 = (char *)NSAllocateScannedUncollectable();
    }
    else {
      bzero((char *)&v41 - v24, 8 * v10);
    }
    uint64_t v26 = [a4 lastIndex];
    v49[0] = 0;
    v49[1] = v26;
    uint64_t v27 = [a4 getIndexes:v25 maxCount:v10 inIndexRange:v49];
    MEMORY[0x1F4188790](v27);
    uint64_t v28 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v10 > 0x200) {
      uint64_t v28 = (char *)NSAllocateScannedUncollectable();
    }
    else {
      bzero((char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), 8 * v10);
    }
    id v44 = a1;
    long long v48 = 0u;
    long long v47 = 0u;
    long long v46 = 0u;
    long long v45 = 0u;
    uint64_t v29 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v45, v50, 16, v10);
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = 0;
      uint64_t v32 = *(void *)v46;
      do
      {
        for (uint64_t i = 0; i != v30; ++i)
        {
          if (*(void *)v46 != v32) {
            objc_enumerationMutation(a3);
          }
          uint64_t v34 = *(void *)(*((void *)&v45 + 1) + 8 * i);
          if (([v19 containsObject:v34] & 1) == 0)
          {
            *(void *)&v28[8 * v31] = v34;
            [v21 addIndex:*(void *)&v25[8 * v31++]];
          }
        }
        uint64_t v30 = [a3 countByEnumeratingWithState:&v45 objects:v50 count:16];
      }
      while (v30);
    }
    else
    {
      uint64_t v31 = 0;
    }
    if (v41 >= 0x201)
    {
      NSZoneFree(0, v25);
      uint64_t v38 = (void *)[objc_alloc(MEMORY[0x1E4F1C978]) initWithObjects:v28 count:v31];
      id v39 = v44;
      uint64_t v40 = v42;
      [v44 willChange:4 valuesAtIndexes:v21 forKey:v42];
      [v19 replaceObjectsAtIndexes:v21 withObjects:v38];
      [v39 didChange:4 valuesAtIndexes:v21 forKey:v40];

      NSZoneFree(0, v28);
    }
    else
    {
      uint64_t v35 = (void *)[objc_alloc(MEMORY[0x1E4F1C978]) initWithObjects:v28 count:v31];
      id v36 = v44;
      uint64_t v37 = v42;
      [v44 willChange:4 valuesAtIndexes:v21 forKey:v42];
      [v19 replaceObjectsAtIndexes:v21 withObjects:v35];
      [v36 didChange:4 valuesAtIndexes:v21 forKey:v37];
    }
  }
}

void _sharedIMPL_wcvfk_core(id a1, uint64_t a2, unint64_t a3)
{
  if (_PF_Threading_Debugging_level) {
    _PFAssertSafeMultiThreadedAccess_impl([a1 managedObjectContext], sel_willChangeValueForKey_);
  }
  uint64_t v5 = *(void *)(*(void *)(*(void *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 16) + 40) + 8 * a3);

  _PF_ManagedObject_WillChangeValueForKeyIndex((uint64_t)a1, (uint64_t)sel_willChangeValueForKey_, v5, a3, 0);
}

void *_sharedIMPL_dcvfk_core(void *a1, uint64_t a2, unint64_t a3)
{
  if (_PF_Threading_Debugging_level) {
    _PFAssertSafeMultiThreadedAccess_impl([a1 managedObjectContext], sel_didChangeValueForKey_);
  }
  uint64_t v5 = *(void *)(*(void *)(*(void *)(*((void *)_PFEntityForManagedObject(a1) + 12) + 16) + 40) + 8 * a3);

  return _PF_ManagedObject_DidChangeValueForKeyIndex(a1, (uint64_t)sel_didChangeValueForKey_, v5, a3);
}

void generateAccessorWithFunctionPtrSignature(const char *a1, uint64_t a2, uint64_t a3)
{
  if (!strcmp(a1, "v@:Q"))
  {
    uint64_t v12 = v21;
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    uint64_t v13 = &__block_descriptor_48_e11__24__0_8Q16l;
    uint64_t v14 = __generateAccessorWithFunctionPtrSignature_block_invoke;
    goto LABEL_15;
  }
  if (!strcmp(a1, "v@:I"))
  {
    uint64_t v12 = v20;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    uint64_t v13 = &__block_descriptor_48_e11__20__0_8I16l;
    uint64_t v14 = __generateAccessorWithFunctionPtrSignature_block_invoke_2;
    goto LABEL_15;
  }
  if (!strcmp(a1, "v@:Q@"))
  {
    uint64_t v12 = v19;
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    uint64_t v13 = &__block_descriptor_48_e14__32__0_8Q16_24l;
    uint64_t v14 = __generateAccessorWithFunctionPtrSignature_block_invoke_3;
    goto LABEL_15;
  }
  if (!strcmp(a1, "v@:I@"))
  {
    uint64_t v12 = v18;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    uint64_t v13 = &__block_descriptor_48_e14__28__0_8I16_20l;
    uint64_t v14 = __generateAccessorWithFunctionPtrSignature_block_invoke_4;
    goto LABEL_15;
  }
  if (!strcmp(a1, "v@:@Q"))
  {
    uint64_t v12 = v17;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    uint64_t v13 = &__block_descriptor_48_e14__32__0_8_16Q24l;
    uint64_t v14 = __generateAccessorWithFunctionPtrSignature_block_invoke_5;
    goto LABEL_15;
  }
  if (!strcmp(a1, "v@:@I"))
  {
    uint64_t v12 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    uint64_t v13 = &__block_descriptor_48_e14__28__0_8_16I24l;
    uint64_t v14 = __generateAccessorWithFunctionPtrSignature_block_invoke_6;
    goto LABEL_15;
  }
  if (!strcmp(a1, "v@:@@"))
  {
    uint64_t v12 = v15;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    uint64_t v13 = &__block_descriptor_48_e14__32__0_8_16_24l;
    uint64_t v14 = __generateAccessorWithFunctionPtrSignature_block_invoke_7;
LABEL_15:
    void v12[2] = v14;
    v12[3] = v13;
    v12[4] = a2;
    v12[5] = a3;
    imp_implementationWithBlock(v12);
    return;
  }
  _NSCoreDataLog(1, @"generateAccessorWithFunctionPtrSignature failed with unknown signature '%s'", v6, v7, v8, v9, v10, v11, (uint64_t)a1);
  __break(1u);
}

void *_sharedIMPL_setvfk_core_i2q(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___sharedIMPL_setvfk_core_i2q_block_invoke;
  v5[3] = &unk_1E544C2C8;
  v5[4] = a1;
  v5[5] = a4;
  void v5[6] = a3;
  return _sharedIMPL_setvfk_core_scalar(a1, a4, (uint64_t)v5);
}

uint64_t _sharedIMPL_pvfk_core_i2q(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  if (!_pvfk_header((unsigned int *)a1, a3, a3, a4, a5, a6, a7, a8)) {
    return 0;
  }
  uint64_t v10 = *(char **)(a1 + 24);
  Class Class = object_getClass(v10);
  return *(int *)&v10[*((unsigned int *)object_getIndexedIvars(Class) + v8 + 19)];
}

uint64_t __generateAccessorWithFunctionPtrSignature_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, void))(a1 + 32))(a2, 0, a3, *(void *)(a1 + 40));
}

uint64_t __generateAccessorWithFunctionPtrSignature_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, void))(a1 + 32))(a2, 0, a3, *(void *)(a1 + 40));
}

uint64_t __generateAccessorWithFunctionPtrSignature_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, void))(a1 + 32))(a2, 0, a3, a4, *(void *)(a1 + 40));
}

uint64_t __generateAccessorWithFunctionPtrSignature_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, void))(a1 + 32))(a2, 0, a3, a4, *(void *)(a1 + 40));
}

uint64_t __generateAccessorWithFunctionPtrSignature_block_invoke_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, void))(a1 + 32))(a2, 0, a3, a4, *(void *)(a1 + 40));
}

uint64_t __generateAccessorWithFunctionPtrSignature_block_invoke_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, void))(a1 + 32))(a2, 0, a3, a4, *(void *)(a1 + 40));
}

uint64_t __generateAccessorWithFunctionPtrSignature_block_invoke_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, void))(a1 + 32))(a2, 0, a3, a4, *(void *)(a1 + 40));
}

unsigned int *___sharedIMPL_setvfk_core_i2q_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
    return (unsigned int *)_NSSetUsingKeyValueSetter();
  }
  else
  {
    unint64_t v3 = *(char **)(*(void *)(a1 + 32) + 24);
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    int v5 = *(_DWORD *)(a1 + 48);
    return snapshot_set_int32(v3, v4, v5);
  }
}

unsigned int *___sharedIMPL_setvfk_core_f_block_invoke(uint64_t a1, uint64_t a2, double a3)
{
  if (a2)
  {
    LODWORD(a3) = *(_DWORD *)(a1 + 48);
    [NSNumber numberWithFloat:a3];
    return (unsigned int *)_NSSetUsingKeyValueSetter();
  }
  else
  {
    unsigned int v4 = *(char **)(*(void *)(a1 + 32) + 24);
    unsigned int v5 = *(_DWORD *)(a1 + 40);
    float v6 = *(float *)(a1 + 48);
    return snapshot_set_float(v4, v5, v6);
  }
}

uint64_t _deallocateContextBackgroundThread(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  -[NSManagedObjectContext _dispose:]((uint64_t)v2);
  _PFDeallocateObject(v2);
  *(void *)(a1 + 24) = 0;
  return 0;
}

void sub_18ACEA518(_Unwind_Exception *a1)
{
}

void sub_18ACEA538(void *a1)
{
}

void internal_PF_actor_clear_for_dealloc(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v3 = *(void *)(StatusReg + 712);
  if (v3 == a1)
  {
    *(void *)(StatusReg + 712) = 0;
  }
  else if (v3)
  {
    unint64_t v4 = atomic_load((unint64_t *)(v3 + 8));
    if (v4 == a1)
    {
      unint64_t v5 = v4;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 8), &v5, 0);
      if (v5 != v4)
      {
        uint64_t v6 = [NSString stringWithUTF8String:"Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)"];
        atomic_load((unint64_t *)(v3 + 8));
        _NSCoreDataLog(17, v6, v7, v8, v9, v10, v11, v12, v3);
        uint64_t v13 = __pflogFaultLog;
        if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
        {
          unint64_t v14 = atomic_load((unint64_t *)(v3 + 8));
          *(_DWORD *)buf = 134218752;
          uint64_t v29 = v3;
          __int16 v30 = 2048;
          uint64_t v31 = 0;
          __int16 v32 = 2048;
          unint64_t v33 = v4;
          __int16 v34 = 2048;
          unint64_t v35 = v14;
          _os_log_fault_impl(&dword_18AB82000, v13, OS_LOG_TYPE_FAULT, "CoreData: Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)", buf, 0x2Au);
        }
      }
    }
  }
  if (a1)
  {
    unint64_t v15 = atomic_load((unint64_t *)(a1 + 8));
    unint64_t v16 = v15;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 8), &v16, 0);
    if (v16 != v15)
    {
      do
      {
        uint64_t v17 = [NSString stringWithUTF8String:"Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)"];
        uint64_t v18 = (unint64_t *)(a1 + 8);
        atomic_load((unint64_t *)(a1 + 8));
        _NSCoreDataLog(17, v17, v19, v20, v21, v22, v23, v24, a1);
        long long v25 = __pflogFaultLog;
        if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
        {
          unint64_t v27 = atomic_load(v18);
          *(_DWORD *)buf = 134218752;
          uint64_t v29 = a1;
          __int16 v30 = 2048;
          uint64_t v31 = 0;
          __int16 v32 = 2048;
          unint64_t v33 = v15;
          __int16 v34 = 2048;
          unint64_t v35 = v27;
          _os_log_fault_impl(&dword_18AB82000, v25, OS_LOG_TYPE_FAULT, "CoreData: Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)", buf, 0x2Au);
        }
        unint64_t v15 = atomic_load(v18);
        unint64_t v26 = v15;
        atomic_compare_exchange_strong((atomic_ullong *volatile)v18, &v26, 0);
      }
      while (v26 != v15);
    }
  }
  __dmb(0xBu);
}

void sub_18ACEAC60(_Unwind_Exception *a1)
{
}

void sub_18ACEAC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    if (a2 == 3)
    {
      uint64_t v10 = objc_begin_catch(exception_object);
      +[NSManagedObjectContext _handleError:withError:]((uint64_t)NSManagedObjectContext, v10, &a10);
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        id v11 = objc_begin_catch(exception_object);
        objc_exception_rethrow();
      }
      objc_begin_catch(exception_object);
    }
    JUMPOUT(0x18ACEAB38);
  }
  _Unwind_Resume(exception_object);
}

void sub_18ACEACEC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ACEACB8);
  }
  _Unwind_Resume(a1);
}

void sub_18ACEAD14()
{
}

void sub_18ACEAD2C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18ACEABB4);
  }
  _Unwind_Resume(a1);
}

void sub_18ACEAD40()
{
  if (v0) {
    JUMPOUT(0x18ACEAD48);
  }
  JUMPOUT(0x18ACEAD4CLL);
}

void sub_18ACEAD54(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_18ACEAF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
}

void sub_18ACEB47C()
{
}

void sub_18ACEB504()
{
}

void sub_18ACEB514()
{
  if (v0) {
    JUMPOUT(0x18ACEB51CLL);
  }
  JUMPOUT(0x18ACEB520);
}

void sub_18ACEC384()
{
}

void sub_18ACEC42C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ACEC408);
  }
  JUMPOUT(0x18ACEC3D4);
}

void sub_18ACEC4D4()
{
}

void sub_18ACEC51C()
{
}

void sub_18ACEC528()
{
  if (v0) {
    JUMPOUT(0x18ACEC530);
  }
  JUMPOUT(0x18ACEC534);
}

void sub_18ACEC5D4()
{
}

void sub_18ACEC61C()
{
}

void sub_18ACEC628()
{
  if (v0) {
    JUMPOUT(0x18ACEC630);
  }
  JUMPOUT(0x18ACEC634);
}

BOOL _PF_actor_set_owner(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (unint64_t *)(a2 + 8);
  uint64_t v4 = a1;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a2 + 8), (unint64_t *)&v4, a3);
  BOOL v5 = v4 == a1;
  if (v4 != a1)
  {
    uint64_t v9 = [NSString stringWithUTF8String:"Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)"];
    atomic_load(v3);
    _NSCoreDataLog(17, v9, v10, v11, v12, v13, v14, v15, a2);
    unint64_t v16 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      unint64_t v18 = atomic_load((unint64_t *)(a2 + 8));
      *(_DWORD *)buf = 134218752;
      uint64_t v20 = a2;
      __int16 v21 = 2048;
      unint64_t v22 = a3;
      __int16 v23 = 2048;
      uint64_t v24 = a1;
      __int16 v25 = 2048;
      unint64_t v26 = v18;
      _os_log_fault_impl(&dword_18AB82000, v16, OS_LOG_TYPE_FAULT, "CoreData: Failed to set actor (%p) new owner (%p).  Expected previous (%p) is now (%p)", buf, 0x2Au);
    }
  }
  return v5;
}

void _PFFaultLogExcessivePrepareForPendingChangesAttempts()
{
  uint64_t v0 = [NSString stringWithUTF8String:"About to exceed _prepareForPushChanges limit. Set a breakpoint on _PFFaultLogExcessivePrepareForPendingChangesAttempts to stop here in the debugger."];
  _NSCoreDataLog(17, v0, v1, v2, v3, v4, v5, v6, v8);
  uint64_t v7 = __pflogFaultLog;
  if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
  {
    LOWORD(v_Block_object_dispose(&STACK[0x450], 8) = 0;
    _os_log_fault_impl(&dword_18AB82000, v7, OS_LOG_TYPE_FAULT, "CoreData: About to exceed _prepareForPushChanges limit. Set a breakpoint on _PFFaultLogExcessivePrepareForPendingChangesAttempts to stop here in the debugger.", (uint8_t *)&v8, 2u);
  }
}

void sub_18ACEE6E4()
{
}

void sub_18ACEE72C()
{
}

void sub_18ACEE738()
{
  if (v0) {
    JUMPOUT(0x18ACEE740);
  }
  JUMPOUT(0x18ACEE744);
}

void sub_18ACEE980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _PFRetainedObjectForMappedChildObjectIDInParentContext(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (*(void *)(*(void *)(a2 + 168) + 8))
  {
    if ([a1 isTemporaryID])
    {
      uint64_t v4 = [**(id **)(*(void *)(a2 + 168) + 8) objectForKey:v3];
      if (v4) {
        uint64_t v3 = (void *)v4;
      }
    }
  }

  return _PFRetainedObjectIDCore(a2, v3, 0, 1);
}

void sub_18ACEF57C()
{
}

void sub_18ACEF63C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ACEF610);
  }
  JUMPOUT(0x18ACEF5D8);
}

void sub_18ACEF7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18ACEFB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Block_object_dispose((const void *)(v29 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18ACF0068(_Unwind_Exception *a1)
{
}

void sub_18ACF0070(_Unwind_Exception *a1)
{
}

void sub_18ACF0078(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 == 3)
    {
      uint64_t v3 = objc_begin_catch(exc_buf);
      if (v2[4]) {
        +[NSManagedObjectContext _handleError:withError:]((uint64_t)NSManagedObjectContext, v3, (uint64_t *)(*(void *)(v2[10] + 8) + 40));
      }
      *(unsigned char *)(*(void *)(v2[9] + 8) + 24) = 0;
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        *(void *)(*(void *)(v2[11] + 8) + 40) = objc_begin_catch(exc_buf);
        objc_exception_rethrow();
      }
      objc_begin_catch(exc_buf);
    }
    JUMPOUT(0x18ACEFDC0);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ACF0104(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ACF00D4);
  }
  _Unwind_Resume(a1);
}

void sub_18ACF0118(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18ACF0120);
  }
  _Unwind_Resume(a1);
}

void sub_18ACF0128(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ACEFE60);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ACF0140(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18ACF0148);
  }
  _Unwind_Resume(a1);
}

void sub_18ACF0150(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18ACF015CLL);
}

void sub_18ACF04E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18ACF35A0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exception_object);
      JUMPOUT(0x18ACF34A0);
    }
    id v2 = objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18ACF3614(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ACF35E8);
  }
  _Unwind_Resume(a1);
}

void sub_18ACF3624(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18ACF362CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18ACF3634(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ACF363CLL);
  }
  objc_terminate();
}

void sub_18ACF8CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_18ACF9AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Unwind_Resume(a1);
}

void sub_18ACFB334(_Unwind_Exception *a1)
{
}

void sub_18ACFDDA8()
{
}

void sub_18ACFDDF0()
{
}

void sub_18ACFDDFC()
{
  if (v0) {
    JUMPOUT(0x18ACFDE04);
  }
  JUMPOUT(0x18ACFDE08);
}

void sub_18ACFE978()
{
}

void sub_18ACFE9D0()
{
}

void sub_18AD00878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD01BE4()
{
}

void sub_18AD024EC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD02C38(_Unwind_Exception *a1)
{
}

void sub_18AD02C4C(_Unwind_Exception *a1)
{
}

void sub_18AD02C64(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_18AD03564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

void sub_18AD057F8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id *a25)
{
  if (!a2) {
    _Unwind_Resume(exc_buf);
  }
  if (a2 != 3)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD05594);
  }
  id v25 = objc_begin_catch(exc_buf);
  -[NSMigrationManager _doCleanupOnFailure:](a25);
  id v26 = v25;
  objc_exception_rethrow();
}

void sub_18AD05878(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD058C0);
}

void sub_18AD05880(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (v2) {
      JUMPOUT(0x18AD0588CLL);
    }
    JUMPOUT(0x18AD059ACLL);
  }
  _Unwind_Resume(a1);
}

void sub_18AD05894(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD058C0);
}

void sub_18AD0589C(_Unwind_Exception *a1)
{
}

void sub_18AD058D8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id *a25)
{
  if (a2)
  {
    objc_end_catch();
    if (a2 != 3)
    {
      objc_begin_catch(a1);
      JUMPOUT(0x18AD05594);
    }
    id v27 = objc_begin_catch(a1);
    -[NSMigrationManager _doCleanupOnFailure:](a25);
    id v28 = v27;
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_18AD05934(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD058C0);
}

void sub_18AD05994(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD05958);
  }
  _Unwind_Resume(a1);
}

void sub_18AD07114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

#error "18AD07430: call analysis failed (funcsize=45)"

void sub_18AD075CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

#error "18AD07924: call analysis failed (funcsize=45)"

void sub_18AD07B88(_Unwind_Exception *a1)
{
}

#error "18AD07C50: call analysis failed (funcsize=40)"

void sub_18AD07C5C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD07B2CLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD07C94(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD07C9CLL);
  }
  objc_terminate();
}

void sub_18AD09494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD096DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD0A330(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD0A2D0);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD0A938(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  objc_begin_catch(exception_object);
  JUMPOUT(0x18AD0A808);
}

void sub_18AD0A9E0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AD0A9F0);
  }
  JUMPOUT(0x18AD0A99CLL);
}

void sub_18AD0B190(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AD0B21C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AD0B87C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18AD0B7C8);
    }
    id v12 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD0B944(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD0B914);
  }
  JUMPOUT(0x18AD0B8DCLL);
}

void sub_18AD0BC90(_Unwind_Exception *a1)
{
}

void sub_18AD0C9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18AD0CC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD0CD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD0CF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18AD0D738(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD0D88CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18AD0D744(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  if (a2)
  {
    _Block_object_dispose((const void *)(v17 - 232), 8);
    if (a2 == 3)
    {
      uint64_t v20 = objc_begin_catch(a1);
      +[NSManagedObjectContext _handleError:withError:]((uint64_t)NSManagedObjectContext, v20, (uint64_t *)va);

      *(void *)(*(void *)(*(void *)(v15 + 80) + 8) + 40) = 0;
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        id v21 = objc_begin_catch(a1);

        id v22 = v21;
        objc_exception_rethrow();
      }
      objc_begin_catch(a1);
    }
    JUMPOUT(0x18AD0D374);
  }
  _Unwind_Resume(a1);
}

void sub_18AD0D7F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD0D7B4);
  }
  _Unwind_Resume(a1);
}

void sub_18AD0D818(_Unwind_Exception *a1)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_18AD0D83C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (v2) {
      JUMPOUT(0x18AD0D848);
    }
    JUMPOUT(0x18AD0D88CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18AD0D850(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD0D858);
  }
  objc_terminate();
}

void sub_18AD0D86C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18AD0D6B4);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD0E4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18AD0EF50(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void sub_18AD0FC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

void sub_18AD0FF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18AD106B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_18AD10858(_Unwind_Exception *a1)
{
}

void sub_18AD10AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18AD10B44(_Unwind_Exception *a1)
{
}

void sub_18AD10B64(void *a1)
{
}

void sub_18AD10F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_18AD1151C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD113A0);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD11C2C()
{
}

void sub_18AD11C48(_Unwind_Exception *a1)
{
}

void sub_18AD11EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_18AD12228(void *a1)
{
}

void sub_18AD12464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18AD1261C(_Unwind_Exception *a1)
{
}

void sub_18AD12640(void *a1)
{
}

void sub_18AD12960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_18AD12B04(_Unwind_Exception *a1)
{
}

void sub_18AD12B24(void *a1)
{
}

void sub_18AD12C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18AD130A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18AD133F8(_Unwind_Exception *a1)
{
}

void sub_18AD13428(void *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18AD13308);
    }
    id v2 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  JUMPOUT(0x18AD1341CLL);
}

void sub_18AD1346C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD1343CLL);
  }
  JUMPOUT(0x18AD1341CLL);
}

void sub_18AD1437C()
{
}

void sub_18AD143DC()
{
}

void sub_18AD14DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18AD155E4(_Unwind_Exception *exception_object)
{
}

void sub_18AD15614(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD15514);
  }
  JUMPOUT(0x18AD15608);
}

void sub_18AD16024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_18AD1656C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD16F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD177A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_18AD18450(_Unwind_Exception *a1)
{
}

void sub_18AD1847C(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD1830CLL);
  }
  JUMPOUT(0x18AD18470);
}

void sub_18AD18A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,uint64_t a24,char a25)
{
  _Block_object_dispose((const void *)(v25 - 184), 8);
  _Block_object_dispose((const void *)(v25 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_18AD197A8(_Unwind_Exception *a1)
{
}

void sub_18AD197D4(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD19638);
  }
  JUMPOUT(0x18AD197C8);
}

void sub_18AD1A01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a58, 8);
  _Block_object_dispose(&a64, 8);
  _Unwind_Resume(a1);
}

void sub_18AD1A5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_18AD1AD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_18AD1B0FC(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 == 2)
    {
      *(void *)(*(void *)(*(void *)(v2 + 56) + 8) + 40) = objc_begin_catch(exc_buf);
      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exc_buf);
    }
    JUMPOUT(0x18AD1B0A0);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD1BC48(_Unwind_Exception *a1)
{
}

void sub_18AD1D454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18AD1DC70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

__darwin_time_t stat_path_for_modication_time(void *a1)
{
  memset(&v7, 0, sizeof(v7));
  memset(&v6.st_mtimespec, 0, 96);
  if ((objc_msgSend(a1, "isFileURL", 0, 0, 0, 0, 0, 0) & 1) == 0)
  {
    v7.st_mtimespec.tv_sec = 0;
    v7.st_mtimespec.tv_nsec = 0;
LABEL_7:
    v6.st_mtimespec = 0uLL;
    goto LABEL_8;
  }
  uint64_t v2 = (void *)[a1 path];
  uint64_t v3 = (void *)[v2 stringByAppendingString:@"-wal"];
  LODWORD(v2) = stat((const char *)[v2 fileSystemRepresentation], &v7);
  int v4 = stat((const char *)[v3 fileSystemRepresentation], &v6);
  if (v2)
  {
    v7.st_mtimespec.tv_sec = 0;
    v7.st_mtimespec.tv_nsec = 0;
  }
  if (v4) {
    goto LABEL_7;
  }
LABEL_8:
  if (v7.st_mtimespec.tv_sec > v6.st_mtimespec.tv_sec) {
    return v7.st_mtimespec.tv_sec;
  }
  else {
    return v6.st_mtimespec.tv_sec;
  }
}

void sub_18AD21AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_18AD227A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose((const void *)(v15 - 256), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD234F4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_18AD24148(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_18AD24938(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_18AD25C88(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD25C20);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD2667C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18AD265DCLL);
    }
    id v3 = objc_begin_catch(exc_buf);

    objc_exception_throw(v3);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD26718(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD266E8);
  }
  JUMPOUT(0x18AD266A4);
}

const void *_sqlCoreLookupSQLEntityForEntityID(void *a1, unint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v4 = _sqlEntityForEntityID([a1 model], a2);
  if (!v4)
  {
    id v5 = (id)[a1 ancillarySQLModels];
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v13;
      while (2)
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = _sqlEntityForEntityID([v5 objectForKey:*(void *)(*((void *)&v12 + 1) + 8 * i)], a2);
          if (v10)
          {
            int v4 = v10;
            goto LABEL_12;
          }
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
    int v4 = 0;
LABEL_12:
  }
  return v4;
}

void sub_18AD28E2C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD28CC4);
  }
  JUMPOUT(0x18AD28E64);
}

void sub_18AD28E44()
{
}

void sub_18AD28E5C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    sub_18AD28E60(a1);
  }
  objc_terminate();
}

void sub_18AD28E60(_Unwind_Exception *exception_object)
{
}

void sub_18AD2912C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18AD290A8);
    }
    id v2 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD291EC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD291C8);
  }
  JUMPOUT(0x18AD29160);
}

#error "18AD29484: call analysis failed (funcsize=15)"

void sub_18AD295B0(_Unwind_Exception *a1)
{
}

void sub_18AD295D0(void *a1)
{
}

void sub_18AD297D0(_Unwind_Exception *a1)
{
}

void sub_18AD297F0(void *a1)
{
}

void sub_18AD299F8()
{
}

void sub_18AD29A6C(_Unwind_Exception *a1)
{
}

void sub_18AD29A8C(void *a1)
{
}

void sub_18AD29D30(void *a1)
{
}

void sub_18AD2A1E4(_Unwind_Exception *a1)
{
}

void sub_18AD2A4F4(_Unwind_Exception *a1)
{
}

void sub_18AD2A7C8(void *a1)
{
}

void sub_18AD2ADE0(void *a1)
{
}

void sub_18AD2AF8C(_Unwind_Exception *a1)
{
}

void sub_18AD2AFAC(void *a1)
{
}

void sub_18AD2B12C(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + *(int *)(v2 + 4072)));
  objc_exception_rethrow();
}

void sub_18AD2B140()
{
}

void sub_18AD2B188()
{
}

void sub_18AD2B528(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v4 = objc_begin_catch(exception_object);
    -[NSSQLiteConnection disconnect](v3);
    if (v2) {
      objc_setProperty_nonatomic(v2, v5, v4, 48);
    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD2BAD8(_Unwind_Exception *a1)
{
}

void sub_18AD2BAF8(void *a1)
{
}

void sub_18AD2BB70(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v4 = objc_begin_catch(exception_object);
    -[NSSQLiteConnection disconnect](v3);
    if (v2) {
      objc_setProperty_nonatomic(v2, v5, v4, 48);
    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD2BD60(_Unwind_Exception *a1)
{
}

void sub_18AD2BD80(void *a1)
{
}

void sub_18AD2BF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD2C0B0(_Unwind_Exception *a1)
{
}

void sub_18AD2C0D4(void *a1)
{
}

void sub_18AD2C1B4(_Unwind_Exception *a1)
{
}

void sub_18AD2C1D8(void *a1)
{
}

void sub_18AD2C2B8(_Unwind_Exception *a1)
{
}

void sub_18AD2C2DC(void *a1)
{
}

void sub_18AD2C418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD2C558(_Unwind_Exception *a1)
{
}

void sub_18AD2C57C(void *a1)
{
}

void sub_18AD2C6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD2C7EC(_Unwind_Exception *a1)
{
}

void sub_18AD2C810(void *a1)
{
}

void sub_18AD2C94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD2CBE0(_Unwind_Exception *a1)
{
}

void sub_18AD2CC00(void *a1)
{
}

void sub_18AD2CE3C(_Unwind_Exception *a1)
{
}

void sub_18AD2D0CC(_Unwind_Exception *a1)
{
}

void sub_18AD2D124(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AD2D12CLL);
  }
  JUMPOUT(0x18AD2D104);
}

void sub_18AD2D16C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD2D138);
  }
  JUMPOUT(0x18AD2D104);
}

void sub_18AD2D5D0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18AD2D438);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD2DC00(void *exc_buf, int a2)
{
  if (a2 != 2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD2DB8CLL);
  }
  objc_begin_catch(exc_buf);

  objc_exception_rethrow();
}

void sub_18AD2DC78()
{
}

void sub_18AD2DD04(_Unwind_Exception *a1)
{
}

void sub_18AD2E2DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD2E184);
  }
  _Unwind_Resume(a1);
}

void sub_18AD2E2EC(_Unwind_Exception *a1)
{
}

void sub_18AD2E638(_Unwind_Exception *exc_buf, int a2)
{
  if (!a2) {
    _Unwind_Resume(exc_buf);
  }
  if (a2 == 2)
  {
    id v3 = objc_begin_catch(exc_buf);
    if (v2) {
      objc_setProperty_nonatomic(v2, v4, v3, 48);
    }
    objc_end_catch();
  }
  else
  {
    objc_begin_catch(exc_buf);
  }
  JUMPOUT(0x18AD2E594);
}

void sub_18AD2F134()
{
}

void sub_18AD2F21C()
{
}

void sub_18AD2F22C()
{
}

void sub_18AD2F29C()
{
}

void __cache_handle_memory_pressure_block_invoke(uint64_t a1, NSObject **a2)
{
  id v3 = (void *)MEMORY[0x18C127630]();
  -[NSSQLiteConnection _clearCachedStatements](a2);
}

void sub_18AD30608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,id location)
{
  objc_destroyWeak(v49);
  objc_destroyWeak(&location);
  _Block_object_dispose(&STACK[0x260], 8);
  _Block_object_dispose(&STACK[0x290], 8);
  _Block_object_dispose(&STACK[0x2C0], 8);
  _Unwind_Resume(a1);
}

void sub_18AD30964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __CFString *a12, uint64_t a13, uint64_t a14, __CFString *a15)
{
  if (a2 == 1)
  {
    id v16 = objc_begin_catch(exception_object);
    *(unsigned char *)(*(void *)(*(void *)(v15 + 72) + 8) + 24) = 0;
    id v17 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v18 = *MEMORY[0x1E4F28588];
    a12 = @"NSUnderlyingException";
    a13 = v18;
    a14 = (uint64_t)v16;
    a15 = @"Import failed because fetching the database metadata encountered an unhandled exception.";
    uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a14 forKeys:&a12 count:2];
    *(void *)(*(void *)(*(void *)(v15 + 64) + 8) + 40) = [v17 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v19];
    objc_end_catch();
    JUMPOUT(0x18AD3092CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD315DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_18AD3185C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__CFString *a21,uint64_t a22,uint64_t a23,__CFString *a24)
{
  if (a2 == 1)
  {
    id v25 = objc_begin_catch(exception_object);
    *(unsigned char *)(*(void *)(*(void *)(v24 + 56) + 8) + 24) = 0;
    id v26 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v27 = *MEMORY[0x1E4F28588];
    a21 = @"NSUnderlyingException";
    a22 = v27;
    a23 = (uint64_t)v25;
    a24 = @"Import failed because an unhandled exception was encountered while trying to process the results of the database fetch operation.";
    uint64_t v28 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a23 forKeys:&a21 count:2];
    *(void *)(*(void *)(*(void *)(v24 + 64) + 8) + 40) = [v26 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v28];
    objc_end_catch();
    JUMPOUT(0x18AD31824);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD31ACC(_Unwind_Exception *exception_object)
{
}

void sub_18AD31E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18AD32720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_18AD3298C(_Unwind_Exception *exception_object)
{
}

void sub_18AD361B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t buf,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose((const void *)(v65 - 256), 8);
  _Block_object_dispose((const void *)(v65 - 224), 8);
  _Block_object_dispose((const void *)(v65 - 176), 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_18AD36A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_18AD37CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__CFString *a21,uint64_t a22,uint64_t a23,__CFString *a24)
{
  if (a2 == 1)
  {
    id v25 = objc_begin_catch(exception_object);
    *(unsigned char *)(*(void *)(*(void *)(v24 + 64) + 8) + 24) = 0;
    id v26 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v27 = *MEMORY[0x1E4F28588];
    a21 = @"NSUnderlyingException";
    a22 = v27;
    a23 = (uint64_t)v25;
    a24 = @"An unhandled exception was caught during a fetch for zone in manatee identity loss recovery.";
    uint64_t v28 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a23 forKeys:&a21 count:2];
    *(void *)(*(void *)(*(void *)(v24 + 56) + 8) + 40) = [v26 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v28];
    objc_end_catch();
    JUMPOUT(0x18AD37C6CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD38218(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__CFString *a25,uint64_t a26,uint64_t a27,__CFString *a28)
{
  if (a2 == 1)
  {
    id v29 = objc_begin_catch(exc_buf);
    *(unsigned char *)(*(void *)(*(void *)(v28 + 72) + 8) + 24) = 0;
    id v30 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v31 = *MEMORY[0x1E4F28588];
    a25 = @"NSUnderlyingException";
    a26 = v31;
    a27 = (uint64_t)v29;
    a28 = @"An unhandled exception was caught during a fetch for zone in manatee identity loss recovery.";
    uint64_t v32 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a27 forKeys:&a25 count:2];
    *(void *)(*(void *)(*(void *)(v28 + 64) + 8) + 40) = [v30 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v32];
    objc_end_catch();
    JUMPOUT(0x18AD381DCLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD382DC()
{
}

void sub_18AD3866C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__CFString *a21,uint64_t a22,uint64_t a23,__CFString *a24)
{
  if (a2 == 1)
  {
    id v25 = objc_begin_catch(exception_object);
    *(unsigned char *)(*(void *)(*(void *)(v24 + 64) + 8) + 24) = 0;
    id v26 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v27 = *MEMORY[0x1E4F28588];
    a21 = @"NSUnderlyingException";
    a22 = v27;
    a23 = (uint64_t)v25;
    a24 = @"An unhandled exception was caught during a fetch for zone in manatee identity loss recovery.";
    uint64_t v28 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a23 forKeys:&a21 count:2];
    *(void *)(*(void *)(*(void *)(v24 + 56) + 8) + 40) = [v26 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v28];
    objc_end_catch();
    JUMPOUT(0x18AD38630);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD38BE8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__CFString *a25,uint64_t a26,uint64_t a27,__CFString *a28)
{
  if (a2 == 1)
  {
    id v29 = objc_begin_catch(exc_buf);
    *(unsigned char *)(*(void *)(*(void *)(v28 + 72) + 8) + 24) = 0;
    id v30 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v31 = *MEMORY[0x1E4F28588];
    a25 = @"NSUnderlyingException";
    a26 = v31;
    a27 = (uint64_t)v29;
    a28 = @"An unhandled exception was caught during a fetch for zone in manatee identity loss recovery.";
    uint64_t v32 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a27 forKeys:&a25 count:2];
    *(void *)(*(void *)(*(void *)(v28 + 64) + 8) + 40) = [v30 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v32];
    objc_end_catch();
    JUMPOUT(0x18AD38BACLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD38CAC()
{
}

void sub_18AD38F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __CFString *a10, uint64_t a11, uint64_t a12, __CFString *a13)
{
  if (a2 == 1)
  {
    id v14 = objc_begin_catch(exception_object);
    *(unsigned char *)(*(void *)(*(void *)(v13 + 64) + 8) + 24) = 0;
    id v15 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v16 = *MEMORY[0x1E4F28588];
    a10 = @"NSUnderlyingException";
    a11 = v16;
    a12 = (uint64_t)v14;
    a13 = @"Setup failed because an unhandled exception was caught during a fetch for zone creation.";
    uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a12 forKeys:&a10 count:2];
    *(void *)(*(void *)(*(void *)(v13 + 72) + 8) + 40) = [v15 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v17];
    objc_end_catch();
    JUMPOUT(0x18AD38EE4);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD39310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Block_object_dispose((const void *)(v31 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_18AD395E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18AD3B258(_Unwind_Exception *exception_object)
{
}

void sub_18AD3B9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __CFString *a9, uint64_t a10, uint64_t a11, __CFString *a12)
{
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(exception_object);
    *(unsigned char *)(*(void *)(*(void *)(v12 + 48) + 8) + 24) = 0;
    id v14 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v15 = *MEMORY[0x1E4F28588];
    a9 = @"NSUnderlyingException";
    a10 = v15;
    a11 = (uint64_t)v13;
    a12 = @"Setup failed because an unhandled exception was caught during event history truncation.";
    uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a11 forKeys:&a9 count:2];
    *(void *)(*(void *)(*(void *)(v12 + 40) + 8) + 40) = [v14 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v16];
    objc_end_catch();
    JUMPOUT(0x18AD3B97CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD3BBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18AD3BE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD3F464(_Unwind_Exception *a1)
{
}

void sub_18AD40264()
{
}

void sub_18AD40284()
{
  if (v0) {
    JUMPOUT(0x18AD4028CLL);
  }
  JUMPOUT(0x18AD40290);
}

void sub_18AD40CBC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18AD42FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (a2)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD4363C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a2)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD43BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a2)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD43C4C(_Unwind_Exception *a1)
{
}

void sub_18AD43C58(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD43C60);
  }
  objc_terminate();
}

void sub_18AD44784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void __Block_byref_object_copy__471(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__472(uint64_t a1)
{
}

void sub_18AD45DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (v7) {
    objc_end_catch();
  }
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD461D8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18AD46084);
  }
  _Unwind_Resume(a1);
}

void sub_18AD4621C(_Unwind_Exception *a1)
{
}

void sub_18AD46234(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD4623CLL);
  }
  objc_terminate();
}

void sub_18AD464CC(_Unwind_Exception *a1)
{
}

void sub_18AD464EC(void *a1)
{
}

void sub_18AD46830(_Unwind_Exception *a1)
{
}

void sub_18AD46B2C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD46AC4);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD4708C(void *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18AD47038);
  }
  JUMPOUT(0x18AD470C4);
}

void sub_18AD470A4()
{
}

void sub_18AD470BC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD470C0);
  }
  objc_terminate();
}

void sub_18AD470D0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AD470F4);
  }
  JUMPOUT(0x18AD470C4);
}

void sub_18AD470E0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AD470E8);
  }
  JUMPOUT(0x18AD470C4);
}

void sub_18AD470F0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AD470F4);
  }
  _Unwind_Resume(a1);
}

void sub_18AD47470(_Unwind_Exception *a1)
{
}

void sub_18AD47488(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD47494);
}

__CFString *_NSSQLiteConnectionLockProxyValueFromPragmas(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v2 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v13;
    uint64_t v5 = *MEMORY[0x1E4F1C3C8];
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v13 != v4) {
          objc_enumerationMutation(a1);
        }
        char v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if (objc_msgSend(@"lock_proxy_file", "isEqualToString:", objc_msgSend(v7, "lowercaseString")))
        {
          uint64_t v8 = (void *)[a1 objectForKey:v7];
          if (v8 == (void *)[MEMORY[0x1E4F1CA98] null]) {
            return 0;
          }
          if ([v8 isNSString]) {
            return (__CFString *)v8;
          }
          uint64_t v9 = (void *)MEMORY[0x1E4F1CA00];
          uint64_t v10 = (objc_class *)objc_opt_class();
          [v9 raise:v5, @"Invalid class type '%@' for lock_proxy_file pragma value, must be an NSNull or NSString", NSStringFromClass(v10) format];
        }
      }
      uint64_t v3 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  return @":auto:";
}

void sub_18AD496B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18AD49BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18AD49FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18AD4A410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18AD4A848(_Unwind_Exception *a1)
{
}

void sub_18AD4A868(void *a1)
{
}

void sub_18AD4ACB8(_Unwind_Exception *a1)
{
}

void sub_18AD4B2FC(_Unwind_Exception *a1)
{
}

void sub_18AD4B348(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD4B340);
  }
  JUMPOUT(0x18AD4B360);
}

void sub_18AD4B358(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AD4B360);
  }
  JUMPOUT(0x18AD4B340);
}

void sub_18AD4B390(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD4B368);
  }
  JUMPOUT(0x18AD4B340);
}

void sub_18AD4B9FC(_Unwind_Exception *a1)
{
}

void sub_18AD4BA14(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD4BA20);
}

void sub_18AD4D184(_Unwind_Exception *a1)
{
  if (v1) {
    objc_end_catch();
  }
  if (v2) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_18AD4D1AC(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD4D1B8);
}

void sub_18AD4D684(_Unwind_Exception *a1)
{
}

void sub_18AD4DA1C(_Unwind_Exception *exception_object)
{
}

void sub_18AD4DA58(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AD4DA60);
  }
  JUMPOUT(0x18AD4DA4CLL);
}

void sub_18AD4DA9C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD4DA6CLL);
  }
  JUMPOUT(0x18AD4DA4CLL);
}

#error "18AD4DE60: call analysis failed (funcsize=43)"

void sub_18AD4E3BC(_Unwind_Exception *a1)
{
}

void sub_18AD4E3D4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD4E3DCLL);
  }
  objc_terminate();
}

void sub_18AD4E8E0()
{
}

void sub_18AD4E958()
{
}

void sub_18AD4F4F8(_Unwind_Exception *a1)
{
}

void sub_18AD4F8C4(_Unwind_Exception *a1)
{
}

void sub_18AD4F8DC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD4F8E4);
  }
  objc_terminate();
}

void sub_18AD4FC9C(_Unwind_Exception *a1)
{
}

void sub_18AD4FCB4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD4FCBCLL);
  }
  objc_terminate();
}

void sub_18AD50034(_Unwind_Exception *a1)
{
}

void sub_18AD50238(_Unwind_Exception *a1)
{
}

void sub_18AD507D8(_Unwind_Exception *a1)
{
}

void sub_18AD50DB8()
{
  objc_end_catch();
  _Unwind_Resume(v0);
}

void sub_18AD50DD4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD50DDCLL);
  }
  objc_terminate();
}

void sub_18AD513A8()
{
  objc_end_catch();
  _Unwind_Resume(v0);
}

void sub_18AD513C4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD513CCLL);
  }
  objc_terminate();
}

void sub_18AD51568(_Unwind_Exception *a1)
{
}

void sub_18AD518F4(_Unwind_Exception *a1)
{
}

void sub_18AD51A98(_Unwind_Exception *a1)
{
}

void sub_18AD52DD4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD52CE8);
  }
  JUMPOUT(0x18AD52CA4);
}

void sub_18AD52DE4()
{
}

void sub_18AD52DFC(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD52CA0);
}

void sub_18AD534A8()
{
}

void sub_18AD535D4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD535B0);
  }
  JUMPOUT(0x18AD53574);
}

void sub_18AD53CE4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD53C48);
  }
  JUMPOUT(0x18AD53BE4);
}

void sub_18AD53CF4()
{
}

void sub_18AD53D0C(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD53BE0);
}

uint64_t sqlite3Callback(void *a1, uint64_t a2, void *a3)
{
  if (*a3)
  {
    uint64_t v4 = (void *)[[NSString alloc] initWithCString:*a3 encoding:1];
    if (v4) {
      [a1 addObject:v4];
    }
  }
  return 0;
}

void sub_18AD54F98(_Unwind_Exception *a1)
{
}

void sub_18AD55610()
{
  if (v0) {
    objc_end_catch();
  }
  JUMPOUT(0x18AD5563CLL);
}

void sub_18AD55634(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD55638);
  }
  objc_terminate();
}

void sub_18AD5591C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD559F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD56204(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD5615CLL);
  }
  JUMPOUT(0x18AD56138);
}

void sub_18AD56214()
{
}

void sub_18AD56230(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD56134);
}

void sub_18AD56F44(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD56EA4);
  }
  _Unwind_Resume(a1);
}

void sub_18AD56F54(_Unwind_Exception *a1)
{
}

void sub_18AD56F6C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD56F74);
  }
  objc_terminate();
}

void sub_18AD57330(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12)
{
}

void sub_18AD5741C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD573F8);
  }
  JUMPOUT(0x18AD57394);
}

void sub_18AD579F0(_Unwind_Exception *a1)
{
}

void sub_18AD57A2C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD57A1CLL);
  }
  JUMPOUT(0x18AD57A48);
}

void sub_18AD57A3C(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD57964);
  }
  JUMPOUT(0x18AD57A1CLL);
}

void sub_18AD57C5C(_Unwind_Exception *a1)
{
}

void sub_18AD57C98(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD57C88);
  }
  JUMPOUT(0x18AD57CB4);
}

void sub_18AD57CA8(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD57BD0);
  }
  JUMPOUT(0x18AD57C88);
}

#error "18AD57F4C: call analysis failed (funcsize=35)"

void sub_18AD58C24(_Unwind_Exception *a1)
{
}

void sub_18AD58C98(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AD58CA8);
  }
  JUMPOUT(0x18AD58C8CLL);
}

void sub_18AD58CB4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AD58CBCLL);
  }
  JUMPOUT(0x18AD58C8CLL);
}

void sub_18AD58CC4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AD58CDCLL);
  }
  JUMPOUT(0x18AD58C8CLL);
}

void sub_18AD58CE8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AD58CF8);
  }
  JUMPOUT(0x18AD58C8CLL);
}

void sub_18AD58DA0(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD58D00);
  }
  JUMPOUT(0x18AD58C8CLL);
}

void sub_18AD5924C(_Unwind_Exception *a1)
{
}

void _NSCoreDataNow(sqlite3_context *a1, int a2)
{
  if (a2)
  {
    sqlite3_result_error(a1, "NSCoreDataNow: requires no arguments", 1);
  }
  else
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "date"), "timeIntervalSinceReferenceDate");
    sqlite3_result_double(a1, v3);
  }
}

void _NSCoreDataPrependExternalReferenceMarker(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 == 2)
  {
    int v5 = sqlite3_value_int(*a3);
    uint64_t v6 = sqlite3_value_blob(a3[1]);
    char v7 = sqlite3_malloc(v5 + 1);
    if (v7)
    {
      uint64_t v8 = v7;
      *char v7 = 1;
      memcpy(v7 + 1, v6, v5);
      uint64_t v9 = (void (__cdecl *)(void *))MEMORY[0x1E4FBA970];
      sqlite3_result_blob(a1, v8, v5 + 1, v9);
      return;
    }
    uint64_t v10 = "NSCoreDataPrependExternalReferenceMarker: malloc failure";
  }
  else
  {
    uint64_t v10 = "NSCoreDataPrependExternalReferenceMarker: wrong number of parameters";
  }

  sqlite3_result_error(a1, v10, 1);
}

void _NSCoreDataLikeBridge(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (a2 != 3)
  {
    uint64_t v6 = "NSCoreDataLike: requres 3 arguments (value, pattern, variant)";
    goto LABEL_5;
  }
  unsigned int v5 = sqlite3_value_int(a3[2]);
  if (v5 >= 4)
  {
    uint64_t v6 = "NSCoreDataLike: variant must be an integer in the range [0,3]";
LABEL_5:
    sqlite3_result_error(a1, v6, 1);
    return;
  }
  unsigned int v7 = v5;
  uint64_t v8 = sqlite3_value_text(*a3);
  uint64_t v9 = sqlite3_value_text(a3[1]);
  if (v8 && (uint64_t v10 = (const char *)v9) != 0)
  {
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    CFAllocatorRef v11 = _PFStackAllocatorCreate((unint64_t *)&v16, 1024);
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    CFStringRef v13 = CFStringCreateWithCStringNoCopy(v11, (const char *)v8, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    CFStringRef v14 = CFStringCreateWithCStringNoCopy(v11, v10, 0x8000100u, v12);
    uint64_t v15 = sqlite3_user_data(a1);
    if (!*v15)
    {
      *uint64_t v15 = (id)[MEMORY[0x1E4F28F70] operatorWithType:7 modifier:0 options:0];
      v15[1] = (id)[MEMORY[0x1E4F28F70] operatorWithType:7 modifier:0 options:1];
      id v15[2] = (id)[MEMORY[0x1E4F28F70] operatorWithType:7 modifier:0 options:2];
      void v15[3] = (id)[MEMORY[0x1E4F28F70] operatorWithType:7 modifier:0 options:3];
    }
    sqlite3_result_int(a1, [(id)v15[v7] performOperationUsingObject:v13 andObject:v14]);
    if (*((void *)&v17 + 1))
    {
      if (v13) {
        CFRelease(v13);
      }
      if (v14) {
        CFRelease(v14);
      }
    }
  }
  else
  {
    sqlite3_result_int(a1, 0);
  }
}

void _NSCoreDataStringSearch(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (a2 == 4)
  {
    unsigned int v5 = sqlite3_value_text(*a3);
    uint64_t v6 = sqlite3_value_text(a3[1]);
    int v7 = sqlite3_value_int(a3[2]);
    if (sqlite3_value_int(a3[3]))
    {
      CFLocaleRef v8 = (const __CFLocale *)[MEMORY[0x1E4F28F60] retainedLocale];
      if (!v5) {
        goto LABEL_15;
      }
    }
    else
    {
      CFLocaleRef v8 = 0;
      if (!v5) {
        goto LABEL_15;
      }
    }
    if (v6)
    {
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      CFAllocatorRef v9 = _PFStackAllocatorCreate((unint64_t *)&v14, 1024);
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
      CFStringRef v11 = CFStringCreateWithCStringNoCopy(v9, (const char *)v5, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
      CFStringRef v12 = CFStringCreateWithCStringNoCopy(v9, (const char *)v6, 0x8000100u, v10);
      v48.length = CFStringGetLength(v11);
      v48.locatiouint64_t n = 0;
      BOOL v13 = CFStringFindWithOptionsAndLocale(v11, v12, v48, v7, v8, 0) != 0;
      sqlite3_result_int(a1, v13);
      if (*((void *)&v15 + 1))
      {
        if (v11) {
          CFRelease(v11);
        }
        if (v12) {
          CFRelease(v12);
        }
      }
      goto LABEL_16;
    }
LABEL_15:
    sqlite3_result_int(a1, 0);
LABEL_16:
    if (v8) {
      CFRelease(v8);
    }
    return;
  }

  sqlite3_result_error(a1, "NSCoreStringSearch: requires 4 arguments (string1, string2, flags, localized)", 1);
}

void _NSCoreDataToUpper(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
}

void _NSCoreDataToLower(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
}

void _NSCoreDataCanonical(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 == 1)
  {
    uint64_t v4 = sqlite3_value_text(*a3);
    if (v4)
    {
      id v5 = (id)-[objc_class newStringFrom:usingUnicodeTransforms:](NSClassFromString((NSString *)@"_NSPredicateOperatorUtilities"), "newStringFrom:usingUnicodeTransforms:", [NSString stringWithUTF8String:v4], 387);
      sqlite3_result_text(a1, (const char *)[v5 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      sqlite3_result_null(a1);
    }
  }
  else
  {
    sqlite3_result_error(a1, "NSCoreDataCanonical: requires one argument", 1);
  }
}

void _NSCoreDataMatchesBridge(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (a2 != 3)
  {
    uint64_t v6 = "NSCoreDataMatches: requres 3 arguments (value, pattern, variant)";
    goto LABEL_5;
  }
  unsigned int v5 = sqlite3_value_int(a3[2]);
  if (v5 >= 4)
  {
    uint64_t v6 = "NSCoreDataMatches: variant must be an integer in the range [0,3]";
LABEL_5:
    sqlite3_result_error(a1, v6, 1);
    return;
  }
  unsigned int v7 = v5;
  CFLocaleRef v8 = sqlite3_value_text(*a3);
  CFAllocatorRef v9 = sqlite3_value_text(a3[1]);
  if (v8 && (CFAllocatorRef v10 = (const char *)v9) != 0)
  {
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    CFAllocatorRef v11 = _PFStackAllocatorCreate((unint64_t *)&v16, 1024);
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    CFStringRef v13 = CFStringCreateWithCStringNoCopy(v11, (const char *)v8, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    CFStringRef v14 = CFStringCreateWithCStringNoCopy(v11, v10, 0x8000100u, v12);
    long long v15 = sqlite3_user_data(a1);
    if (!*v15)
    {
      *long long v15 = (id)[MEMORY[0x1E4F28F70] operatorWithType:6 modifier:0 options:0];
      v15[1] = (id)[MEMORY[0x1E4F28F70] operatorWithType:6 modifier:0 options:1];
      id v15[2] = (id)[MEMORY[0x1E4F28F70] operatorWithType:6 modifier:0 options:2];
      void v15[3] = (id)[MEMORY[0x1E4F28F70] operatorWithType:6 modifier:0 options:3];
    }
    sqlite3_result_int(a1, [(id)v15[v7] performOperationUsingObject:v13 andObject:v14]);
    if (*((void *)&v17 + 1))
    {
      if (v13) {
        CFRelease(v13);
      }
      if (v14) {
        CFRelease(v14);
      }
    }
  }
  else
  {
    sqlite3_result_int(a1, 0);
  }
}

CFComparisonResult _NSCoreDataCollateNoCaseBridge(uint64_t a1, int a2, const UniChar *a3, int a4, const UniChar *a5)
{
  return _NSCoreDataDoStringCompare(a2, a3, a4, a5, 1uLL);
}

CFComparisonResult _NSCoreDataCollateNumericallyNoCaseBridge(uint64_t a1, int a2, const UniChar *a3, int a4, const UniChar *a5)
{
  return _NSCoreDataDoStringCompare(a2, a3, a4, a5, 0x41uLL);
}

CFComparisonResult _NSCoreDataCollateLocaleSensitiveBridge(uint64_t a1, int a2, const UniChar *a3, int a4, const UniChar *a5)
{
  return _NSCoreDataDoStringCompare(a2, a3, a4, a5, 0x20uLL);
}

CFComparisonResult _NSCoreDataCollateLocaleSensitiveCaseInsensitiveBridge(uint64_t a1, int a2, const UniChar *a3, int a4, const UniChar *a5)
{
  return _NSCoreDataDoStringCompare(a2, a3, a4, a5, 0x21uLL);
}

void _NSCoreDataTriggerUpdateAffectedObjectValue(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 == 5)
  {
    unsigned int v5 = sqlite3_value_text(*a3);
    sqlite3_int64 v6 = sqlite3_value_int64(a3[1]);
    sqlite3_int64 v7 = sqlite3_value_int64(a3[2]);
    CFLocaleRef v8 = sqlite3_value_text(a3[3]);
    sqlite3_value_int64(a3[4]);
    if (v5)
    {
      if (v8)
      {
        CFAllocatorRef v9 = sqlite3_user_data(a1);
        -[NSSQLiteConnection triggerUpdatedRowInTable:withEntityID:primaryKey:columnName:newValue:]((uint64_t)v9, (uint64_t)v5, v6, v7);
      }
    }
  }
}

void _NSCoreDataDATriggerInsertUpdatedAffectedObjectValue(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 != 5) {
    return;
  }
  uint64_t v4 = sqlite3_user_data(a1);
  if (!v4) {
    return;
  }
  uint64_t v5 = (uint64_t)v4;
  if (!v4[24]) {
    return;
  }
  sqlite3_int64 v6 = sqlite3_value_text(*a3);
  sqlite3_int64 v7 = sqlite3_value_int64(a3[1]);
  sqlite3_int64 v8 = sqlite3_value_int64(a3[2]);
  CFAllocatorRef v9 = sqlite3_value_text(a3[3]);
  if (!v6) {
    return;
  }
  uint64_t v10 = (uint64_t)v9;
  if (!v9) {
    return;
  }
  int v11 = sqlite3_value_type(a3[4]);
  switch(v11)
  {
    case 3:
      uint64_t v12 = [[NSString alloc] initWithUTF8String:sqlite3_value_text(a3[4])];
      break;
    case 2:
      uint64_t v12 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:sqlite3_value_double(a3[4])];
      break;
    case 1:
      uint64_t v12 = [objc_alloc(NSNumber) initWithLongLong:sqlite3_value_int64(a3[4])];
      break;
    default:
      uint64_t v13 = 0;
      goto LABEL_15;
  }
  uint64_t v13 = v12;
LABEL_15:
  id v14 = (id)v13;
  -[NSSQLiteConnection derivedAttributeUpdatedInsertedRowInTable:withEntityID:primaryKey:columnName:newValue:](v5, (uint64_t)v6, v7, v8, v10, v13);
}

void _NSCoreDataDATriggerUpdatedAffectedObjectValue(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 != 5) {
    return;
  }
  uint64_t v4 = sqlite3_user_data(a1);
  if (!v4) {
    return;
  }
  uint64_t v5 = (uint64_t)v4;
  if (!v4[24]) {
    return;
  }
  sqlite3_int64 v6 = sqlite3_value_text(*a3);
  sqlite3_int64 v7 = sqlite3_value_int64(a3[1]);
  sqlite3_int64 v8 = sqlite3_value_int64(a3[2]);
  CFAllocatorRef v9 = sqlite3_value_text(a3[3]);
  if (!v6) {
    return;
  }
  uint64_t v10 = (uint64_t)v9;
  if (!v9) {
    return;
  }
  int v11 = sqlite3_value_type(a3[4]);
  switch(v11)
  {
    case 3:
      uint64_t v12 = [[NSString alloc] initWithUTF8String:sqlite3_value_text(a3[4])];
      break;
    case 2:
      uint64_t v12 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:sqlite3_value_double(a3[4])];
      break;
    case 1:
      uint64_t v12 = [objc_alloc(NSNumber) initWithLongLong:sqlite3_value_int64(a3[4])];
      break;
    default:
      uint64_t v13 = 0;
      goto LABEL_15;
  }
  uint64_t v13 = v12;
LABEL_15:
  id v14 = (id)v13;
  -[NSSQLiteConnection derivedAttributeUpdatedRowInTable:withEntityID:primaryKey:columnName:newValue:](v5, (uint64_t)v6, v7, v8, v10, v13);
}

void _NSPersistentHistoryBatchDeleteUpdateTrigger(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  uint64_t v5 = sqlite3_user_data(a1);
  sqlite3_int64 v6 = sqlite3_value_int64(*a3);
  sqlite3_int64 v7 = sqlite3_value_text(a3[1]);
  sqlite3_int64 v8 = (void *)_sqlCoreLookupSQLEntityForEntityID(objc_msgSend((id)objc_msgSend(v5, "adapter"), "sqlCore"), v6);
  CFAllocatorRef v9 = +[_NSPersistentHistoryChange _propertyDataForEntity:withSetOfPropertyNames:]((uint64_t)_NSPersistentHistoryChange, v8, objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObject:", objc_msgSend(NSString, "stringWithUTF8String:", v7)));
  uint64_t v10 = [v9 length];
  int v11 = sqlite3_malloc(v10);
  if (!v11) {
    sqlite3_result_error(a1, "NSPersistentHistoryBatchDeleteUpdateTrigger: malloc failure", 1);
  }
  [v9 getBytes:v11 length:v10];

  uint64_t v12 = (void (__cdecl *)(void *))MEMORY[0x1E4FBA970];

  sqlite3_result_blob(a1, v11, v10, v12);
}

void _NSPersistentHistoryBatchDeleteUpdateTriggerDataBlobOperator(sqlite3_context *a1, int a2, uint64_t a3)
{
  if (a2 < 1)
  {
    sqlite3_int64 v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    sqlite3_int64 v6 = 0;
    uint64_t v7 = 8 * a2;
    do
    {
      if (sqlite3_value_type(*(sqlite3_value **)(a3 + v5)) == 4)
      {
        id v8 = objc_alloc(MEMORY[0x1E4F1C9B8]);
        CFAllocatorRef v9 = sqlite3_value_blob(*(sqlite3_value **)(a3 + v5));
        uint64_t v10 = (void *)[v8 initWithBytes:v9 length:sqlite3_value_bytes(*(sqlite3_value **)(a3 + v5))];
        int v11 = v10;
        if (v5)
        {
          id v12 = +[_NSPersistentHistoryChange _mergeOldMask:andNewMask:]((uint64_t)_NSPersistentHistoryChange, v6, v10);

          sqlite3_int64 v6 = v12;
        }
        else
        {
          sqlite3_int64 v6 = v10;
        }
      }
      v5 += 8;
    }
    while (v7 != v5);
  }
  uint64_t v13 = [v6 length];
  id v14 = sqlite3_malloc(v13);
  if (!v14) {
    sqlite3_result_error(a1, "_NSPersistentHistoryBatchDeleteUpdateTriggerDataBlobOperator: malloc failure", 1);
  }
  [v6 getBytes:v14 length:v13];

  long long v15 = (void (__cdecl *)(void *))MEMORY[0x1E4FBA970];

  sqlite3_result_blob(a1, v14, v13, v15);
}

void _NSCoreDataDATriggerMergeableString(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  v43[1] = *MEMORY[0x1E4F143B8];
  if (a2 != 5)
  {
    long long v33 = "_NSCoreDataDATriggerMergeableString: requires five arguments";
LABEL_19:
    sqlite3_result_error(a1, v33, 1);
    return;
  }
  if (sqlite3_value_type(a3[4]) != 4)
  {
    if (sqlite3_value_type(a3[4]) == 5)
    {
      sqlite3_result_null(a1);
      return;
    }
    long long v33 = "_NSCoreDataDATriggerMergeableString: requires a transformable blob";
    goto LABEL_19;
  }
  uint64_t v5 = sqlite3_user_data(a1);
  sqlite3_int64 v6 = sqlite3_value_text(*a3);
  sqlite3_int64 v7 = sqlite3_value_int64(a3[1]);
  id v8 = sqlite3_value_text(a3[3]);
  if (v6)
  {
    CFAllocatorRef v9 = v8;
    if (v8)
    {
      id v10 = objc_alloc(MEMORY[0x1E4F1C9B8]);
      int v11 = sqlite3_value_blob(a3[4]);
      id v12 = (void *)[v10 initWithBytes:v11 length:sqlite3_value_bytes(a3[4])];
      uint64_t v41 = 0;
      uint64_t v13 = _sqlCoreLookupSQLEntityForEntityID(objc_msgSend((id)objc_msgSend(v5, "adapter"), "sqlCore"), v7);
      id v14 = v13;
      if (v13) {
        long long v15 = (void *)v13[5];
      }
      else {
        long long v15 = 0;
      }
      uint64_t v16 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v15, "objectForKey:", objc_msgSend(NSString, "stringWithUTF8String:", v9)), "propertyDescription"), "derivationExpression"), "keyPath");
      if (v14) {
        long long v17 = (void *)v14[5];
      }
      else {
        long long v17 = 0;
      }
      uint64_t v18 = -[objc_class transformedValueClass](NSClassFromString((NSString *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "objectForKey:", v16), "propertyDescription"), "valueTransformerName")), "transformedValueClass");
      if (v18)
      {
        id v25 = (id)objc_msgSend((id)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObject:", v18), (uint64_t)v12, (uint64_t)&v41), "computedValue");
        if (!v41)
        {
          long long v32 = v25;
          sqlite3_result_text(a1, (const char *)[v25 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

          return;
        }
        _NSCoreDataLog(1, @"Mergeable transformer failed with an error while trying to save a mergeable value, %@.", v26, v27, v28, v29, v30, v31, v41);
        long long v38 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v39 = *MEMORY[0x1E4F1C3B8];
        uint64_t v42 = *MEMORY[0x1E4F28A50];
        v43[0] = v41;
        uint64_t v37 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v43 forKeys:&v42 count:1];
        long long v36 = @"Mergeable transformer failed with an error while trying to save a mergeable value.";
        long long v34 = v38;
        uint64_t v35 = v39;
      }
      else
      {
        _NSCoreDataLog(1, @"Mergeable transformer class name is nil while trying to save a mergeable value.", v19, v20, v21, v22, v23, v24, v40);
        long long v34 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v35 = *MEMORY[0x1E4F1C3B8];
        long long v36 = @"Mergeable transformer class name is nil while trying to save a mergeable value.";
        uint64_t v37 = 0;
      }
      objc_exception_throw((id)[v34 exceptionWithName:v35 reason:v36 userInfo:v37]);
    }
  }
}

uint64_t NSSQLiteRegisterMigrationFunctions(sqlite3 *a1, void *pApp)
{
  uint64_t function = sqlite3_create_function(a1, "NSPersistentHistoryMigrateUpdates", -1, 2052, pApp, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSPersistentHistoryMigrateUpdates, 0, 0);
  if (function) {
    sqlite3_create_function(a1, "NSPersistentHistoryMigrateUpdates", 0, 4, 0, 0, 0, 0);
  }
  return function;
}

void _NSPersistentHistoryMigrateUpdates(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  uint64_t v5 = sqlite3_user_data(a1);
  sqlite3_int64 v6 = sqlite3_value_int64(a3[1]);
  sqlite3_int64 v7 = sqlite3_value_int64(a3[2]);
  id v8 = objc_alloc(MEMORY[0x1E4F1C9B8]);
  CFAllocatorRef v9 = sqlite3_value_blob(a3[3]);
  id v10 = (void *)[v8 initWithBytes:v9 length:sqlite3_value_bytes(a3[3])];
  if (v5)
  {
    int v11 = (void *)*((void *)v5 + 25);
    id v12 = (void *)[*((id *)v5 + 3) entityForID:v7];
    uint64_t v13 = (void *)*((void *)v5 + 2);
  }
  else
  {
    id v12 = (void *)[0 entityForID:v7];
    int v11 = 0;
    uint64_t v13 = 0;
  }
  id v14 = (void *)[v13 entityForID:v6];
  long long v15 = objc_msgSend(v11, "objectForKey:", objc_msgSend(v12, "name"));
  if (v15)
  {
    id v16 = v15;
    id v17 = (id)[v15 objectForKey:v10];
    if (v17) {
      goto LABEL_13;
    }
  }
  else
  {
    id v16 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    objc_msgSend(v11, "setObject:forKey:", v16, objc_msgSend(v12, "name"));
  }
  CFMutableSetRef v18 = +[_NSPersistentHistoryChange _updatedPropertiesForEntity:andData:]((uint64_t)_NSPersistentHistoryChange, v12, v10);
  if ([(__CFSet *)v18 count]) {
    uint64_t v19 = (void *)[(__CFSet *)v18 valueForKey:@"name"];
  }
  else {
    uint64_t v19 = 0;
  }
  id v17 = +[_NSPersistentHistoryChange _propertyDataForEntity:withSetOfPropertyNames:]((uint64_t)_NSPersistentHistoryChange, v14, v19);
  if ((unint64_t)[v16 count] >= 0x3E9) {
    [v16 removeAllObjects];
  }
  [v16 setObject:v17 forKey:v10];

LABEL_13:
  uint64_t v20 = [v17 length];
  uint64_t v21 = sqlite3_malloc(v20);
  if (!v21) {
    sqlite3_result_error(a1, "NSPersistentHistoryMigrateUpdates: malloc failure", 1);
  }
  [v17 getBytes:v21 length:v20];

  uint64_t v22 = (void (__cdecl *)(void *))MEMORY[0x1E4FBA970];

  sqlite3_result_blob(a1, v21, v20, v22);
}

void _NSCoreDataCaseSwitch(sqlite3_context *a1, int a2, sqlite3_value **a3, int a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a2 == 1)
  {
    sqlite3_int64 v6 = sqlite3_value_text(*a3);
    if (v6)
    {
      sqlite3_int64 v7 = (const char *)v6;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      CFAllocatorRef v8 = _PFStackAllocatorCreate((unint64_t *)&v17, 1024);
      CFMutableStringRef Mutable = CFStringCreateMutable(v8, 0);
      CFStringAppendCString(Mutable, v7, 0x8000100u);
      if (a4) {
        CFStringUppercase(Mutable, 0);
      }
      else {
        CFStringLowercase(Mutable, 0);
      }
      uint64_t v10 = [(__CFString *)Mutable lengthOfBytesUsingEncoding:4];
      CFIndex v11 = v10 + 1;
      CFIndex Length = CFStringGetLength(Mutable);
      if (v10 + 1 >= 1024) {
        p_UInt8 buffer = (UInt8 *)malloc_type_malloc(v10 + 2, 0x1A47FDFBuLL);
      }
      else {
        p_UInt8 buffer = &buffer;
      }
      usedBufLeuint64_t n = 0;
      v51.locatiouint64_t n = 0;
      v51.length = Length;
      CFStringGetBytes(Mutable, v51, 0x8000100u, 0, 0, p_buffer, v11, &usedBufLen);
      CFIndex v14 = usedBufLen;
      if (usedBufLen >= v11) {
        CFIndex v14 = v11;
      }
      p_buffer[v14] = 0;
      sqlite3_result_text(a1, (const char *)p_buffer, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
      if (*((void *)&v18 + 1))
      {
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      else
      {
        *((void *)&v17 + 1) = v17;
      }
      if (v11 >= 1024) {
        free(p_buffer);
      }
    }
    else
    {
      sqlite3_result_null(a1);
    }
  }
  else
  {
    sqlite3_result_error(a1, "NSCoreDataTo(Uppercase|Lowercase): requires one argument", 1);
  }
}

void sub_18AD5BB7C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18AD5BA90);
  }
  _Unwind_Resume(a1);
}

void sub_18AD5BEB8(_Unwind_Exception *a1)
{
}

void sub_18AD5C168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __CFString *a18, uint64_t a19, uint64_t a20,__CFString *a21)
{
  if (a2 == 1)
  {
    id v22 = objc_begin_catch(exception_object);
    *(unsigned char *)(*(void *)(*(void *)(v21 + 80) + 8) + 24) = 0;
    id v23 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v24 = *MEMORY[0x1E4F28588];
    a18 = @"NSUnderlyingException";
    a19 = v24;
    a20 = (uint64_t)v22;
    a21 = @"Record fetch failed because fetching the record metadata hit an unhandled exception.";
    uint64_t v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a20 forKeys:&a18 count:2];
    *(void *)(*(void *)(*(void *)(v21 + 72) + 8) + 40) = [v23 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v25];
    objc_end_catch();
    JUMPOUT(0x18AD5C12CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD5E080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD5F3A8(_Unwind_Exception *a1)
{
}

void sub_18AD5F3D4(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD5F2B4);
  }
  JUMPOUT(0x18AD5F3CCLL);
}

void sub_18AD5F84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_18AD60C28(_Unwind_Exception *a1)
{
}

void sub_18AD61258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18AD62020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18AD62720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18AD631E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void *bufferResultSetRealloc(void *ptr, unint64_t *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) <= 0x4000) {
    unint64_t v4 = 0x4000;
  }
  else {
    unint64_t v4 = (*a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v5 = malloc_default_zone();
  }
  uint64_t result = malloc_type_zone_realloc(v5, ptr, v4, 0x61531DD2uLL);
  if (!result)
  {
    uint64_t v7 = [NSString stringWithUTF8String:"bufferResultSetRealloc failed to realloc buffer to %ld bytes"];
    _NSCoreDataLog(17, v7, v8, v9, v10, v11, v12, v13, v4);
    CFIndex v14 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      unint64_t v17 = v4;
      _os_log_fault_impl(&dword_18AB82000, v14, OS_LOG_TYPE_FAULT, "CoreData: bufferResultSetRealloc failed to realloc buffer to %ld bytes", buf, 0xCu);
    }
    id v15 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E4F1C4A0], 134183, @"realloc failed", 0);
    objc_exception_throw(v15);
  }
  *a2 = v4;
  return result;
}

void *bufferResultSetAllocateWithVMMemory(unint64_t a1, int a2)
{
  if (a1 <= 0x800) {
    vm_size_t v3 = 0xFFFFLL;
  }
  else {
    vm_size_t v3 = a1;
  }
  unint64_t v4 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    unint64_t v4 = malloc_default_zone();
  }
  uint64_t v5 = malloc_type_zone_calloc(v4, 1uLL, 0x50uLL, 0x10900404577C156uLL);
  v5[2] = v3;
  *((_DWORD *)v5 + 6) = 2;
  *((_DWORD *)v5 + _Block_object_dispose(&STACK[0x310], 8) = 1;
  sqlite3_int64 v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    sqlite3_int64 v6 = malloc_default_zone();
  }
  uint64_t v7 = malloc_type_zone_malloc(v6, 0x10uLL, 0x80040B8603338uLL);
  void v5[6] = v7;
  v7[1] = 0;
  vm_address_t address = 0;
  uint64_t v8 = (vm_map_t *)MEMORY[0x1E4F14960];
  if (a2) {
    int v9 = 754974723;
  }
  else {
    int v9 = 754974721;
  }
  if (vm_allocate(*MEMORY[0x1E4F14960], &address, v3, v9)
    || (vm_address_t v16 = address,
        v5[8] = address,
        *(void *)void v5[6] = v16,
        unint64_t v17 = (void *)v5[8],
        v5[9] = v17,
        void *v17 = 0,
        vm_address_t address = 0,
        vm_allocate(*v8, &address, 0x800uLL, 754974721)))
  {
    _NSCoreDataLog(1, @"*** vm_allocate(size=%lld) failed (error code=%d)\n", v10, v11, v12, v13, v14, v15, v3);
    return 0;
  }
  else
  {
    long long v19 = (_DWORD *)address;
    void v5[7] = address;
    v19[511] = 0;
    *long long v19 = 0;
    *((_DWORD *)v5 + 7) = 512;
    int v20 = *((_DWORD *)v5 + 10);
    *((_DWORD *)v5 + 10) = v20 | 8;
    if (a2)
    {
      *((_DWORD *)v5 + 10) = v20 | 0x18;
      bufferResultSetNonPurgeable((uint64_t)v5);
    }
    *((_DWORD *)v5 + 9) = 0;
    *(_DWORD *)uint64_t v5 = 0;
    v5[9] += 8;
  }
  return v5;
}

BOOL bufferResultSetNonPurgeable(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 40) & 0x10) == 0) {
    return 0;
  }
  int v11 = 0;
  int v3 = MEMORY[0x18C128590](*MEMORY[0x1E4F14960], *(void *)(a1 + 64), 0, &v11);
  BOOL v1 = v3 == 0;
  if (v3) {
    _NSCoreDataLog(1, @"%@ bufferResultSetNonPurgeable failed to set vm buffer as non-purgeable: %d", v4, v5, v6, v7, v8, v9, a1);
  }
  else {
    *(_DWORD *)(a1 + 40) &= ~0x20u;
  }
  return v1;
}

BOOL bufferResultSetPurgeable(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 40) & 0x50) != 0x10) {
    return 0;
  }
  int v11 = 1;
  int v2 = MEMORY[0x18C128590](*MEMORY[0x1E4F14960], *(void *)(a1 + 64), 0, &v11);
  BOOL v9 = v2 == 0;
  if (v2) {
    _NSCoreDataLog(1, @"%@ bufferResultSetPurgeable failed to set vm buffer as purgeable: %d", v3, v4, v5, v6, v7, v8, a1);
  }
  else {
    *(_DWORD *)(a1 + 40) |= 0x20u;
  }
  return v9;
}

void setMultiColumnValueDictionary(char *a1, id *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(unsigned int *)a2;
  Class Class = object_getClass(a1);
  uint64_t v8 = *(NSKnownKeysDictionary **)&a1[*((unsigned int *)object_getIndexedIvars(Class) + v6 + 19)];
  BOOL v9 = v8;
  uint64_t v10 = (__CFString *)[a2[2] propertyDescription];
  if (!v8)
  {
    id v22 = v10;
    int v11 = objc_msgSend((id)objc_msgSend(a2[2], "propertyDescription"), "superCompositeAttribute");
    if (v11)
    {
      do
      {
        uint64_t v12 = v11;
        int v11 = (void *)[v11 superCompositeAttribute];
      }
      while (v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    id v13 = -[NSKnownKeysMappingStrategy initForKeys:]([NSKnownKeysMappingStrategy alloc], "initForKeys:", objc_msgSend((id)objc_msgSend(v12, "elements"), "valueForKeyPath:", @"name"));
    uint64_t v8 = [[NSKnownKeysDictionary alloc] initWithSearchStrategy:v13];

    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v14 = (void *)[v12 elements];
    uint64_t v15 = [v14 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v24;
      do
      {
        uint64_t v18 = 0;
        do
        {
          if (*(void *)v24 != v17) {
            objc_enumerationMutation(v14);
          }
          long long v19 = *(__CFString **)(*((void *)&v23 + 1) + 8 * v18);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            _createKnownKeysDictionaryForMultiColumnValue(v19, v8);
          }
          ++v18;
        }
        while (v16 != v18);
        uint64_t v16 = [v14 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v16);
    }
    uint64_t v10 = v22;
  }
  int v20 = -[NSPropertyDescription _elementPath](v10);
  if (*((unsigned char *)a2 + 12) == 8)
  {
    uint64_t v21 = (void *)MEMORY[0x1E4F1C9C8];
    [a3 doubleValue];
    a3 = objc_msgSend(v21, "dateWithTimeIntervalSinceReferenceDate:");
  }
  [(NSKnownKeysDictionary *)v8 setValue:a3 forKeyPath:v20];
  snapshot_set_object(a1, *(_DWORD *)a2, (uint64_t)v8);
}

void setMultiColumnValueNullFlag(char *a1, _DWORD *a2)
{
  uint64_t v4 = *a2;
  Class Class = object_getClass(a1);
  id v7 = *(id *)&a1[*((unsigned int *)object_getIndexedIvars(Class) + v4 + 19)];
  id v6 = v7;
  if (!v7) {
    a1[((unint64_t)*a2 >> 3) + 28] |= 1 << (*a2 & 7);
  }
}

uint64_t _createKnownKeysDictionaryForMultiColumnValue(__CFString *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v5 = (void *)[(__CFString *)a1 elements];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v23;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v5);
        }
        objc_msgSend(v4, "addObject:", objc_msgSend(*(id *)(*((void *)&v22 + 1) + 8 * v9++), "name"));
      }
      while (v7 != v9);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v22 objects:v27 count:16];
    }
    while (v7);
  }
  if ([v4 count])
  {
    id v10 = [[NSKnownKeysMappingStrategy alloc] initForKeys:v4];
    int v11 = [[NSKnownKeysDictionary alloc] initWithSearchStrategy:v10];

    [a2 setValue:v11 forKeyPath:-[NSPropertyDescription _elementPath](a1)];
  }

  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v12 = (void *)[(__CFString *)a1 elements];
  uint64_t result = [v12 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (result)
  {
    uint64_t v14 = result;
    uint64_t v15 = *(void *)v19;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v19 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = *(void *)(*((void *)&v18 + 1) + 8 * v16);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          _createKnownKeysDictionaryForMultiColumnValue(v17, a2);
        }
        ++v16;
      }
      while (v14 != v16);
      uint64_t result = [v12 countByEnumeratingWithState:&v18 objects:v26 count:16];
      uint64_t v14 = result;
    }
    while (result);
  }
  return result;
}

uint64_t _fireFaultsOnBackgroundThread(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 24);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  unint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  PF_FREE_OBJECT_ARRAY(v2);
  *(void *)(a1 + 24) = 0;
  if (v3)
  {
    uint64_t v9 = *(void *)(v3 + 32);
    uint64_t v3 = *(void *)(v3 + 128);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v6 < v7 + v6)
  {
    id v10 = (char *)(v8 + v6);
    int v11 = (void **)(v5 + 8 * v6);
    uint64_t v12 = (uint64_t *)(v4 + 8 * v6);
    do
    {
      uint64_t v13 = *v12;
      if (((*(_DWORD *)(*v12 + 16) >> 15) & 3 | 4) == 5)
      {
        uint64_t v14 = *(void **)(v13 + 48);
        if (v14 && *v14)
        {
          char v15 = 3;
        }
        else
        {
          _PFFaultHandlerFulfillFault(v3, v13, v9, *v11, 0);
          char v15 = 1;
        }
        *id v10 = v15;
      }
      ++v10;
      ++v11;
      ++v12;
      --v7;
    }
    while (v7);
  }
  return 0;
}

#error "18AD647A8: call analysis failed (funcsize=68)"

uint64_t _deallocateSQLRowCacheOnBackgroundThread(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void **)v2;
  unint64_t v4 = *(void *)(v2 + 8);
  if (v4)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      uint64_t v7 = v3[v5];

      *(void *)(v7 + 40) = 0;
      uint64_t v5 = v6;
      BOOL v8 = v4 > v6++;
    }
    while (v8);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  while (!*(void *)(v2 + 16))
    pthread_cond_wait((pthread_cond_t *)(a1 + 96), (pthread_mutex_t *)(a1 + 32));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
  if (v4)
  {
    uint64_t v9 = 0;
    unsigned int v10 = 1;
    do
    {
      _PFDeallocateObject((id)v3[v9]);
      uint64_t v9 = v10;
      BOOL v8 = v4 > v10++;
    }
    while (v8);
  }
  int v11 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    int v11 = malloc_default_zone();
  }
  malloc_zone_free(v11, v3);
  uint64_t v12 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone) {
    uint64_t v12 = malloc_default_zone();
  }
  malloc_zone_free(v12, *(void **)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  return 0;
}

void sub_18AD68498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
  {
    objc_destroyWeak(v33);
    objc_destroyWeak((id *)(v34 - 96));
    objc_begin_catch(exception_object);
    JUMPOUT(0x18AD68314);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD68704(_Unwind_Exception *a1)
{
}

void sub_18AD68744(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD68724);
}

void sub_18AD68CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location,__CFString *a30,uint64_t a31,uint64_t a32,__CFString *a33)
{
  objc_destroyWeak(v33);
  objc_destroyWeak(&location);
  if (a2 == 1)
  {
    id v36 = objc_begin_catch(a1);
    *(unsigned char *)(*(void *)(*(void *)(a15 + 72) + 8) + 24) = 0;
    id v37 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v38 = *MEMORY[0x1E4F28588];
    a30 = @"NSUnderlyingException";
    a31 = v38;
    a32 = (uint64_t)v36;
    a33 = @"Export encountered an unhandled exception while analyzing history in the store.";
    uint64_t v39 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a32 forKeys:&a30 count:2];
    *(void *)(*(void *)(*(void *)(a15 + 64) + 8) + 40) = [v37 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v39];
    objc_end_catch();
    JUMPOUT(0x18AD68CA0);
  }
  _Unwind_Resume(a1);
}

void sub_18AD68DEC()
{
}

void sub_18AD68FC8(_Unwind_Exception *a1)
{
}

void sub_18AD69024(void *a1)
{
}

void sub_18AD6928C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_18AD692CC(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD692C4);
}

void sub_18AD6973C(_Unwind_Exception *a1)
{
}

void sub_18AD69764(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD69744);
}

void sub_18AD6976C(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD6964CLL);
  }
  JUMPOUT(0x18AD6975CLL);
}

void sub_18AD6A6AC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,__CFString *a26,uint64_t a27,uint64_t a28,__CFString *a29)
{
  if (a2 == 3)
  {
    id v29 = objc_begin_catch(exc_buf);
    *(unsigned char *)(*(void *)(*(void *)(a18 + 56) + 8) + 24) = 0;
    id v30 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v31 = *MEMORY[0x1E4F28588];
    a26 = @"NSUnderlyingException";
    a27 = v31;
    a28 = (uint64_t)v29;
    a29 = @"Export encountered an unhandled exception while analyzing history in the store.";
    uint64_t v32 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a28 forKeys:&a26 count:2];
    *(void *)(*(void *)(*(void *)(a18 + 64) + 8) + 40) = [v30 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v32];
    objc_end_catch();
    JUMPOUT(0x18AD6A09CLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD6A980()
{
}

void sub_18AD6AC38(_Unwind_Exception *a1)
{
}

void sub_18AD6AC94(void *a1)
{
}

void sub_18AD6AFD0(_Unwind_Exception *a1)
{
}

void sub_18AD6B6F0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD6B5A8);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD6BB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18AD6BBA0(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD6BB98);
}

void sub_18AD6BBB0(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD6B9B0);
  }
  JUMPOUT(0x18AD6BB98);
}

void sub_18AD6BD8C(_Unwind_Exception *a1)
{
}

void sub_18AD6BDCC(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD6BDACLL);
}

void sub_18AD6BFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __CFString *a18, uint64_t a19, uint64_t a20,__CFString *a21)
{
  if (a2 == 1)
  {
    id v22 = objc_begin_catch(exception_object);
    *(unsigned char *)(*(void *)(*(void *)(v21 + 72) + 8) + 24) = 0;
    id v23 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v24 = *MEMORY[0x1E4F28588];
    a18 = @"NSUnderlyingException";
    a19 = v24;
    a20 = (uint64_t)v22;
    a21 = @"Export encountered an unhandled exception while analyzing history in the store.";
    uint64_t v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a20 forKeys:&a18 count:2];
    *(void *)(*(void *)(*(void *)(v21 + 64) + 8) + 40) = [v23 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v25];
    objc_end_catch();
    JUMPOUT(0x18AD6BF84);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD6C2C4(_Unwind_Exception *a1)
{
}

void sub_18AD6C320(void *a1)
{
}

uint64_t _PFModelMapTotalEntityCountForModel(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v2 = +[_PFModelMap ancillaryModelFactoryClasses];
  uint64_t v3 = objc_msgSend((id)objc_msgSend(a1, "entities"), "count");
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v2);
        }
        v3 += [*(id *)(*((void *)&v9 + 1) + 8 * v7++) ancillaryEntityCount];
      }
      while (v5 != v7);
      uint64_t v5 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }
  return v3;
}

void sub_18AD6F180(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD6F120);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t _PFCoreDataProcessInstanceUUID()
{
  uint64_t result = qword_1EB2704A0;
  if (!qword_1EB2704A0)
  {
    objc_opt_class();
    return qword_1EB2704A0;
  }
  return result;
}

Class override_class_superclass_0(objc_class *a1)
{
  Class Superclass = class_getSuperclass(a1);

  return class_getSuperclass(Superclass);
}

IMP generateReturnPointerMethod(uint64_t a1)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __generateReturnPointerMethod_block_invoke_0;
  aBlock[3] = &__block_descriptor_40_e9__v16__0_8l;
  aBlock[4] = a1;
  BOOL v1 = _Block_copy(aBlock);
  os_unfair_lock_lock_with_options();
  CFMutableStringRef Mutable = (__CFArray *)qword_1EB270770;
  if (!qword_1EB270770)
  {
    CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
    qword_1EB270770 = (uint64_t)Mutable;
  }
  CFArrayAppendValue(Mutable, v1);
  os_unfair_lock_unlock(&stru_1EB27076C);
  return imp_implementationWithBlock(v1);
}

void sub_18AD71DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2)
  {
    if (a2 == 3)
    {
      objc_begin_catch(exception_object);
      if (!a26 && +[NSMappingModel migrationDebugLevel] >= 1)
      {
        long long v27 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v28 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjectsAndKeys:@"Cannot migrate store in-place"];
        [v27 errorWithDomain:*MEMORY[0x1E4F281F8] code:134110 userInfo:v28];
      }
      if (a21)
      {
        id v29 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v30 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjectsAndKeys:@"Cannot migrate store in-place"];
        [v29 errorWithDomain:*MEMORY[0x1E4F281F8] code:134110 userInfo:v30];
      }
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        id v31 = objc_begin_catch(exception_object);
        objc_exception_rethrow();
      }
      objc_begin_catch(exception_object);
    }
    JUMPOUT(0x18AD716D4);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD71FAC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD71F7CLL);
  }
  JUMPOUT(0x18AD71FE8);
}

void sub_18AD71FE0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD71FE4);
  }
  objc_terminate();
}

void sub_18AD74A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD759B4(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD757C4);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD77D6C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  objc_begin_catch(a1);
  JUMPOUT(0x18AD77AA0);
}

void sub_18AD78650(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD785C0);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD796BC(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD79670);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD7A4A8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18AD7A434);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AD7CB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18AD83FE0()
{
}

void sub_18AD848F4(_Unwind_Exception *a1)
{
}

void sub_18AD8542C(void *a1)
{
}

void sub_18AD85440(_Unwind_Exception *a1)
{
}

void sub_18AD85688(void *a1)
{
}

void sub_18AD8569C(_Unwind_Exception *a1)
{
}

void sub_18AD881CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    if (a2 != 2)
    {
      objc_begin_catch(a1);
      JUMPOUT(0x18AD87FECLL);
    }
    objc_begin_catch(a1);

    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_18AD881E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18AD87FECLL);
  }
  objc_begin_catch(a1);

  objc_exception_rethrow();
}

void sub_18AD8822C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18AD87FECLL);
  }
  objc_begin_catch(a1);

  objc_exception_rethrow();
}

void sub_18AD88258()
{
}

void sub_18AD88260(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD882ACLL);
  }
  JUMPOUT(0x18AD882C0);
}

void sub_18AD88298(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD882ACLL);
}

void sub_18AD882B4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AD882C0);
  }
  JUMPOUT(0x18AD882ACLL);
}

void sub_18AD882F8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AD882C8);
  }
  _Unwind_Resume(a1);
}

void sub_18AD899A8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD89818);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD89E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18AD8C7D0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_18AD8C8C4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AD8C8CCLL);
  }
  _Unwind_Resume(a1);
}

void sub_18AD8EF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void (*a12)(char *))
{
}

id returnBoolThing1(void *a1, const char *a2)
{
  uint64_t v3 = (void *)[a1 _underlyingProperty];

  return [v3 a2];
}

void sub_18AD914E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AD918E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AD919F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AD91D70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AD91FD8(void *a1)
{
  objc_begin_catch(a1);
  free(v2);
  free(v1);
  objc_exception_rethrow();
}

void sub_18AD91FF4(_Unwind_Exception *a1)
{
}

uint64_t preserveOrderKeysByForwardSkip(unsigned int *a1, int a2, int a3, char a4)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  unsigned int v6 = 0;
  uint64_t v7 = a2;
  do
  {
    if (*a1)
    {
      if (*a1 <= v6)
      {
        if (a4)
        {
          if ((int)v7 + (int)result < a3) {
            return 0;
          }
        }
        else
        {
          *a1 = 0;
        }
      }
      else
      {
        uint64_t result = (result + 1);
        unsigned int v6 = *a1;
      }
    }
    else if (v6)
    {
      ++v6;
    }
    else
    {
      unsigned int v6 = 0;
    }
    ++a1;
    --v7;
  }
  while (v7);
  return result;
}

uint64_t preserveOrderKeysByReverseSkip(uint64_t a1, int a2, int a3, char a4)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  int v6 = 0;
  uint64_t v7 = a2;
  do
  {
    uint64_t v8 = v7 - 1;
    unsigned int v9 = *(_DWORD *)(a1 + 4 * (v7 - 1));
    if (v9)
    {
      if (v6 - 1 >= v9)
      {
        uint64_t result = (result + 1);
        int v6 = *(_DWORD *)(a1 + 4 * (v7 - 1));
      }
      else if (a4)
      {
        if ((int)v7 + (int)result - 1 < a3) {
          return 0;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 4 * (v7 - 1)) = 0;
      }
    }
    else if (v6-- == 0)
    {
      int v6 = 0;
    }
    --v7;
  }
  while ((unint64_t)(v8 + 1) > 1);
  return result;
}

unint64_t _PF_SnowLeopard_CFDictionaryCreateWithObjectsAndKeys(uint64_t *a1, __CFString **a2, unint64_t a3)
{
  int v6 = malloc_type_malloc(0x28uLL, 0x27066D77uLL);
  unint64_t v7 = (unint64_t)v6;
  *int v6 = 1;
  v6[4] = 0;
  *((void *)v6 + 1) = 0;
  *((_DWORD *)v6 + 4) = 0x10000;
  *((_WORD *)v6 + 1) |= 0x8000u;
  *((void *)v6 + 3) = 0;
  *((void *)v6 + 4) = 0;
  if (a3 < 5)
  {
    if (!a3) {
      return v7;
    }
  }
  else
  {
    *((_WORD *)v6 + 9) = 2;
    _PF_SnowLeopard_CFBasicHashRehash((uint64_t)v6, a3);
  }
  do
  {
    unsigned int v9 = *a2++;
    uint64_t v8 = v9;
    uint64_t v10 = *a1++;
    _PF_SnowLeopard_CFBasicHashSetValue(v7, v8, v10);
    --a3;
  }
  while (a3);
  return v7;
}

void _PF_SnowLeopard_CFDictionaryDestroy(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  free(*(void **)(a1 + 24));
  free(*(void **)(v2 + (((unint64_t)*(unsigned __int16 *)(a1 + 2) >> 12) & 8)));

  free((void *)a1);
}

uint64_t _PF_SnowLeopard_CFStringHashNSString(__CFString *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFStringGetLength(a1);
  uint64_t v3 = Length;
  uint64_t v4 = v9;
  if (Length >= 97)
  {
    -[__CFString getCharacters:range:](a1, "getCharacters:range:", v9, 0, 32);
    -[__CFString getCharacters:range:](a1, "getCharacters:range:", &v10, ((unint64_t)Length >> 1) - 16, 32);
    -[__CFString getCharacters:range:](a1, "getCharacters:range:", &v11, Length - 32, 32);
    uint64_t v5 = (unsigned __int16 *)&v12;
    int v6 = (unsigned __int16 *)&v12;
LABEL_5:
    uint64_t v4 = v9;
    do
    {
      uint64_t v3 = 16974593 * *v4 + 67503105 * v3 + 66049 * v4[1] + 257 * v4[2] + v4[3];
      v4 += 4;
    }
    while (v4 < v6);
    goto LABEL_9;
  }
  -[__CFString getCharacters:range:](a1, "getCharacters:range:", v9, 0, Length);
  uint64_t v5 = &v9[Length];
  if ((uint64_t)(Length & 0xFFFFFFFFFFFFFFFCLL) >= 1)
  {
    int v6 = &v9[Length & 0xFFFFFFFFFFFFFFFCLL];
    goto LABEL_5;
  }
LABEL_9:
  while (v4 < v5)
  {
    unsigned int v7 = *v4++;
    uint64_t v3 = 257 * v3 + v7;
  }
  return (v3 << (Length & 0x1F)) + v3;
}

unint64_t _PF_SnowLeopard_CFBasicHashFindBucket_NoCollision(uint64_t a1, __CFString *a2)
{
  if (!*(unsigned char *)(a1 + 4)) {
    return -1;
  }
  if (_PF_SnowLeopard_CFBasicHashTableSizes[*(unsigned __int8 *)(a1 + 4)] <= 1uLL) {
    unint64_t v3 = 1;
  }
  else {
    unint64_t v3 = _PF_SnowLeopard_CFBasicHashTableSizes[*(unsigned __int8 *)(a1 + 4)];
  }
  unint64_t result = _PF_SnowLeopard_CFStringHashNSString(a2) % v3;
  unint64_t v5 = v3;
  while (*(void *)(*(void *)(a1 + (((unint64_t)*(unsigned __int16 *)(a1 + 2) >> 12) & 8) + 24) + 8 * result))
  {
    if (v3 <= result + 1) {
      unint64_t v6 = v3;
    }
    else {
      unint64_t v6 = 0;
    }
    unint64_t result = result + 1 - v6;
    if (!--v5) {
      return -1;
    }
  }
  return result;
}

unint64_t _PF_SnowLeopard_CFBasicHashFindBucket@<X0>(unint64_t result@<X0>, __CFString *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(result + 4);
  if (!*(unsigned char *)(result + 4))
  {
    *(_OWORD *)a3 = xmmword_18AE54650;
    *(_OWORD *)(a3 + 16) = unk_18AE54660;
    return result;
  }
  unint64_t v5 = result;
  if (_PF_SnowLeopard_CFBasicHashTableSizes[v3] <= 1uLL) {
    unint64_t v6 = 1;
  }
  else {
    unint64_t v6 = _PF_SnowLeopard_CFBasicHashTableSizes[v3];
  }
  unint64_t result = _PF_SnowLeopard_CFStringHashNSString(a2);
  unint64_t v7 = result % v6;
  uint64_t v8 = *(void *)(v5 + (((unint64_t)*(unsigned __int16 *)(v5 + 2) >> 12) & 8) + 24);
  uint64_t v9 = -1;
  unint64_t v10 = v6;
  while (1)
  {
    uint64_t v11 = *(void *)(v8 + 8 * v7);
    if (v11 == -1)
    {
      if (v9 == -1) {
        uint64_t v9 = v7;
      }
      goto LABEL_18;
    }
    if (!v11) {
      break;
    }
    if (v11 == 2814029233) {
      uint64_t v11 = 0;
    }
    if (v11 == 2780474809) {
      uint64_t v12 = -1;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((__CFString *)v12 == a2)
    {
      uint64_t v12 = (uint64_t)a2;
LABEL_29:
      uint64_t v14 = a3;
      *(void *)a3 = v7;
      uint64_t v16 = *(void *)(*(void *)(v5 + 24) + 8 * v7);
      if (v16 == 2814029233)
      {
        uint64_t v16 = 0;
      }
      else if (v16 == 2780474809)
      {
        uint64_t v16 = -1;
      }
      *(void *)(a3 + _Block_object_dispose(&STACK[0x310], 8) = v12;
      *(void *)(a3 + 16) = v16;
      uint64_t v11 = 1;
      goto LABEL_34;
    }
    unint64_t result = [(id)v12 isEqual:a2];
    if (result) {
      goto LABEL_29;
    }
LABEL_18:
    if (v6 <= v7 + 1) {
      unint64_t v13 = v6;
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v7 = v7 + 1 - v13;
    if (!--v10)
    {
      uint64_t v11 = 0;
      uint64_t v14 = a3;
      *(void *)(a3 + _Block_object_dispose(&STACK[0x310], 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = v9;
      goto LABEL_34;
    }
  }
  uint64_t v14 = a3;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (v9 == -1) {
    uint64_t v15 = v7;
  }
  else {
    uint64_t v15 = v9;
  }
  *(void *)a3 = v15;
LABEL_34:
  *(void *)(v14 + 24) = v11;
  return result;
}

void _PF_SnowLeopard_CFBasicHashRehash(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 4);
  if (a2)
  {
    uint64_t v3 = 0;
    while (_PF_SnowLeopard_CFBasicHashTableCapacities[v3] < (unint64_t)*(unsigned int *)(a1 + 8) + a2)
    {
      if (++v3 == 64)
      {
        uint64_t v3 = 0;
        break;
      }
    }
  }
  uint64_t v4 = _PF_SnowLeopard_CFBasicHashTableSizes[v3];
  uint64_t v5 = _PF_SnowLeopard_CFBasicHashTableSizes[*(unsigned __int8 *)(a1 + 4)];
  if (v4 < 1)
  {
    unint64_t v7 = 0;
  }
  else
  {
    size_t v6 = 8 * v4;
    unint64_t v7 = malloc_type_malloc(8 * v4, 0x80040B8603338uLL);
    bzero(v7, v6);
    if (*(__int16 *)(a1 + 2) < 0)
    {
      uint64_t v8 = malloc_type_malloc(v6, 0x80040B8603338uLL);
      bzero(v8, v6);
      goto LABEL_11;
    }
  }
  uint64_t v8 = 0;
LABEL_11:
  *(unsigned char *)(a1 + 4) = v3;
  *(_WORD *)(a1 + 16) = 0;
  uint64_t v9 = *(uint64_t **)(a1 + 24);
  *(void *)(a1 + 24) = v7;
  if (*(__int16 *)(a1 + 2) < 0)
  {
    unint64_t v10 = *(uint64_t **)(a1 + 32);
    *(void *)(a1 + 32) = v8;
  }
  else
  {
    unint64_t v10 = 0;
  }
  if (v5 >= 1)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        if (v13 == 2814029233) {
          uint64_t v13 = 0;
        }
        if (v13 == 2780474809) {
          uint64_t v15 = -1;
        }
        else {
          uint64_t v15 = v13;
        }
        int v16 = *(__int16 *)(a1 + 2);
        if (v16 < 0 && v10)
        {
          if (*v12 == 2780474809) {
            uint64_t v17 = -1;
          }
          else {
            uint64_t v17 = *v12;
          }
          if (*v12 == 2814029233) {
            long long v18 = 0;
          }
          else {
            long long v18 = (__CFString *)v17;
          }
          Bucket_NoCollisiouint64_t n = _PF_SnowLeopard_CFBasicHashFindBucket_NoCollision(a1, v18);
          *(void *)(*(void *)(a1 + 24) + 8 * Bucket_NoCollision) = v15;
        }
        else
        {
          if (v16 < 0) {
            long long v18 = 0;
          }
          else {
            long long v18 = (__CFString *)v15;
          }
          Bucket_NoCollisiouint64_t n = _PF_SnowLeopard_CFBasicHashFindBucket_NoCollision(a1, v18);
          *(void *)(*(void *)(a1 + 24) + 8 * Bucket_NoCollision) = v15;
          if (!v10) {
            goto LABEL_36;
          }
        }
        *(void *)(*(void *)(a1 + (((unint64_t)*(unsigned __int16 *)(a1 + 2) >> 12) & 8) + 24)
                  + 8 * Bucket_NoCollision) = v18;
      }
LABEL_36:
      ++v12;
      --v5;
    }
    while (v5);
  }
  free(v9);

  free(v10);
}

unint64_t _PF_SnowLeopard_CFBasicHashAddValue(unint64_t result, unint64_t a2, __CFString *a3, uint64_t a4)
{
  uint64_t v6 = result;
  uint64_t v7 = 0;
  ++*(_WORD *)(result + 18);
  unint64_t v8 = *(unsigned int *)(result + 8);
  while (1)
  {
    unint64_t v9 = _PF_SnowLeopard_CFBasicHashTableCapacities[v7];
    if (v9 >= v8) {
      break;
    }
    if (++v7 == 64)
    {
      unint64_t v9 = 0;
      break;
    }
  }
  unint64_t v10 = (v8 + 1);
  if (v9 >= v10)
  {
    uint64_t v11 = *(void *)(result + 24);
    if (*(void *)(v11 + 8 * a2) == -1) {
      --*(_WORD *)(result + 16);
    }
  }
  else
  {
    _PF_SnowLeopard_CFBasicHashRehash(result, 1);
    unint64_t result = _PF_SnowLeopard_CFBasicHashFindBucket_NoCollision(v6, a3);
    a2 = result;
    uint64_t v11 = *(void *)(v6 + 24);
    LODWORD(v10) = *(_DWORD *)(v6 + 8) + 1;
  }
  *(void *)(v11 + 8 * a2) = a4;
  *(void *)(*(void *)(v6 + (((unint64_t)*(unsigned __int16 *)(v6 + 2) >> 12) & 8) + 24) + 8 * a2) = a3;
  *(_DWORD *)(v6 + _Block_object_dispose(&STACK[0x310], 8) = v10;
  return result;
}

unint64_t _PF_SnowLeopard_CFBasicHashSetValue(unint64_t a1, __CFString *a2, uint64_t a3)
{
  long long v10 = 0u;
  long long v11 = 0u;
  unint64_t result = _PF_SnowLeopard_CFBasicHashFindBucket(a1, a2, (uint64_t)&v10);
  unint64_t v7 = v10;
  if (*((void *)&v11 + 1))
  {
    uint64_t v9 = *(void *)(a1 + 24);
    unint64_t v8 = a1 + 24;
    ++*(_WORD *)(v8 - 6);
    *(void *)(v9 + 8 * v7) = a3;
    *(void *)(*(void *)(v8 + (((unint64_t)*(unsigned __int16 *)(v8 - 22) >> 12) & 8)) + 8 * v7) = a2;
  }
  else
  {
    return _PF_SnowLeopard_CFBasicHashAddValue(a1, v7, a2, a3);
  }
  return result;
}

uint64_t _PF_SnowLeopard_CFBasicHashGetBucket@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a2;
  uint64_t v3 = a3 + 1;
  uint64_t v4 = *(void *)(*(void *)(result + 24) + 8 * a2);
  if ((unint64_t)(v4 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    *uint64_t v3 = 0;
    a3[2] = 0;
    a3[3] = 0;
  }
  else
  {
    uint64_t v5 = -1;
    if (v4 != 2780474809) {
      uint64_t v5 = *(void *)(*(void *)(result + 24) + 8 * a2);
    }
    if (v4 == 2814029233) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
    a3[2] = v6;
    a3[3] = 1;
    uint64_t v7 = *(void *)(*(void *)(result + (((unint64_t)*(unsigned __int16 *)(result + 2) >> 12) & 8) + 24)
                   + 8 * a2);
    if (v7 == 2814029233)
    {
      uint64_t v7 = 0;
    }
    else if (v7 == 2780474809)
    {
      uint64_t v7 = -1;
    }
    *uint64_t v3 = v7;
  }
  return result;
}

uint64_t _PF_SnowLeopard_CFDictionaryGetValues(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  uint64_t v3 = _PF_SnowLeopard_CFBasicHashTableSizes[*(unsigned __int8 *)(result + 4)];
  if (v2) {
    BOOL v4 = v3 < 1;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      long long v12 = 0u;
      long long v13 = 0u;
      unint64_t result = _PF_SnowLeopard_CFBasicHashGetBucket(v6, v7, &v12);
      if (*((void *)&v13 + 1))
      {
        --v2;
        if (v8 < v3)
        {
          uint64_t v9 = v13;
          uint64_t v10 = *((void *)&v13 + 1) - 1;
          do
          {
            *(void *)(a2 + 8 * v8++) = v9;
            BOOL v11 = v10-- != 0;
          }
          while (v11 && v8 < v3);
        }
      }
      if (v2 < 1) {
        break;
      }
      ++v7;
    }
    while (v7 < v3);
  }
  return result;
}

#error "18AD961F4: call analysis failed (funcsize=66)"

void sub_18AD962A0(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AD96260);
}

void sub_18AD9B574(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AD9B4A8);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AD9CDE8()
{
}

void sub_18AD9CDF0(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18AD9CDF8);
  }
  _Unwind_Resume(a1);
}

void sub_18AD9CE00(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AD9CE08);
  }
  objc_terminate();
}

void sub_18AD9EA6C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    long long v35 = objc_begin_catch(a1);
    if (+[PFUbiquityLogging canLogMessageAtLevel:2]) {
      NSLog((NSString *)@"%s(%d): CoreData: Ubiquity:  Import operation interrupted during import: %@");
    }
    if (v35 && v35[5] == 134304)
    {
      [v34[38] reset];
      if (a29 && (uint64_t v36 = *(void *)(a29 + 8)) != 0) {
        id v37 = *(void **)(v36 + 8);
      }
      else {
        id v37 = 0;
      }
      [v37 reset];
      *((unsigned char *)v34 + a26) = 0;
      STACK[0x2B0] = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:134304 userInfo:0];
      uint64_t v38 = (void *)[v34 retainedDelegate];
      uint64_t v39 = v38;
      if (v38) {
        [v38 operationWasInterruptedDuringImport:v34];
      }
    }
    goto LABEL_32;
  }
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18AD9E590);
  }
  id v40 = objc_begin_catch(a1);
  [v34[38] reset];
  if (a29 && (uint64_t v41 = *(void *)(a29 + 8)) != 0) {
    long long v42 = *(void **)(v41 + 8);
  }
  else {
    long long v42 = 0;
  }
  [v42 reset];
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v40, "userInfo"), "objectForKey:", @"com.apple.coredata.ubiquity.eat"), "BOOLValue"))
  {
    if (+[PFUbiquityLogging canLogMessageAtLevel:2]) {
      NSLog((NSString *)@"%s(%d): CoreData: Ubiquity:  %@\nBailing because a required external data reference failed to download: %@");
    }
    *((unsigned char *)v34 + a26) = 0;
    long long v43 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v44 = [v40 userInfo];
    uint64_t v45 = [v43 errorWithDomain:*MEMORY[0x1E4F281F8] code:134302 userInfo:v44];
    STACK[0x2B0] = v45;
    -[_PFUbiquityRecordImportOperation notifyDelegateOfError:](v34, v45);
LABEL_32:
    objc_end_catch();
    JUMPOUT(0x18AD9E58CLL);
  }
  long long v46 = (void *)[v34[33] persistentStoreCoordinator];
  a30 = MEMORY[0x1E4F143A8];
  a31 = 3221225472;
  a32 = (uint64_t)__40___PFUbiquityRecordImportOperation_main__block_invoke_3;
  a33 = (uint64_t)&unk_1E544B868;
  a34 = (uint64_t)v34;
  [v46 performBlockAndWait:&a30];
  if (+[PFUbiquityLogging canLogMessageAtLevel:0])
  {
    [v40 userInfo];
    NSLog((NSString *)@"%s(%d): CoreData: Ubiquity:  Error importing transaction log: %@, exception: %@\n User Info: %@");
  }
  long long v47 = (void *)[v40 name];
  if ([v47 isEqualToString:*MEMORY[0x1E4F1C3B8]])
  {
    int v48 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v40, "userInfo"), "objectForKey:", @"PFUbiquitySetupDoFork"), "BOOLValue");
    uint64_t v49 = *MEMORY[0x1E4F281F8];
    if (v48)
    {
      unint64_t v50 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v51 = [v40 userInfo];
      uint64_t v52 = 134302;
LABEL_31:
      uint64_t v53 = [v50 errorWithDomain:v49 code:v52 userInfo:v51];
      STACK[0x2B0] = v53;
      -[_PFUbiquityRecordImportOperation notifyDelegateOfError:](v34, v53);
      *((unsigned char *)v34 + a26) = 0;
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v49 = *MEMORY[0x1E4F281F8];
  }
  uint64_t v52 = 134060;
  unint64_t v50 = (void *)MEMORY[0x1E4F28C58];
  if (v40) {
    uint64_t v51 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v40 forKey:@"exception"];
  }
  else {
    uint64_t v51 = 0;
  }
  goto LABEL_31;
}

void sub_18ADA11B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (v2) {
      objc_end_catch();
    }
    if (a2 != 2)
    {
      objc_begin_catch(a1);
      JUMPOUT(0x18ADA108CLL);
    }
    objc_begin_catch(a1);
    if (+[PFUbiquityLogging canLogMessageAtLevel:0]) {
      NSLog((NSString *)@"%s(%d): CoreData: Ubiquity:  An exception occurred during a log file export: %@ save notification contents: %@");
    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_18ADA1368(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ADA1304);
  }
  _Unwind_Resume(a1);
}

void sub_18ADA1BF0()
{
}

void sub_18ADA1C78(void *a1)
{
}

void sub_18ADA1C90(void *a1)
{
}

uint64_t compareScoreVectors_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && a2) {
    a2 = (void *)a2[45];
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && a3) {
    a3 = *(void *)(a3 + 360);
  }

  return [a2 compare:a3];
}

void sub_18ADA2C78(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADA2BD4);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADA3CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  objc_begin_catch(a1);
  JUMPOUT(0x18ADA344CLL);
}

void sub_18ADA3E44(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ADA3E64);
  }
  JUMPOUT(0x18ADA3D5CLL);
}

void sub_18ADA4068(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ADA4080);
  }
  JUMPOUT(0x18ADA3DB4);
}

void sub_18ADA466C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
  {
    _Block_object_dispose((const void *)(v12 - 160), 8);
    if (a2 != 2)
    {
      objc_begin_catch(exception_object);
      JUMPOUT(0x18ADA4530);
    }
    id v15 = objc_begin_catch(exception_object);
    if (+[PFUbiquityLogging canLogMessageAtLevel:0])
    {
      [v15 userInfo];
      NSLog((NSString *)@"%s(%d): CoreData: Ubiquity:  Exception while scanning for logs to import: %@\nuserInfo: %@");
    }
    id v16 = v15;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18ADA4780(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ADA4708);
  }
  JUMPOUT(0x18ADA46CCLL);
}

void sub_18ADA4A18(_Unwind_Exception *exception_object)
{
}

void sub_18ADA516C(_Unwind_Exception *a1)
{
}

void sub_18ADA51C8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ADA51F8);
  }
  JUMPOUT(0x18ADA51BCLL);
}

void sub_18ADA51E8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ADA51F0);
  }
  JUMPOUT(0x18ADA51BCLL);
}

void sub_18ADA5238(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ADA5204);
  }
  JUMPOUT(0x18ADA51BCLL);
}

void sub_18ADA55BC(void *a1)
{
}

void sub_18ADA55DC()
{
  if (v0) {
    JUMPOUT(0x18ADA55E4);
  }
  JUMPOUT(0x18ADA55E8);
}

void sub_18ADA5FE0(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADA5F60);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADA6474(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADA63CCLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADA6D40(_Unwind_Exception *a1)
{
}

void sub_18ADA6D60(void *a1)
{
}

void sub_18ADA6F78(_Unwind_Exception *exception_object)
{
}

void sub_18ADA7250(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ADA7258);
  }
  objc_terminate();
}

void sub_18ADA73C0(_Unwind_Exception *exception_object)
{
}

void sub_18ADA73F0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  sub_18ADA73C0(a1);
}

void sub_18ADA7A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADA8C94(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ADA8C9CLL);
  }
  objc_terminate();
}

void sub_18ADA9038(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18ADA908C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ADA90B4);
  }
  JUMPOUT(0x18ADA9080);
}

void sub_18ADA909C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ADA90B8);
  }
  JUMPOUT(0x18ADA9080);
}

void sub_18ADA90C0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ADA90C8);
  }
  JUMPOUT(0x18ADA907CLL);
}

void sub_18ADA9470(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADA9358);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADA9984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADA9D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint8_t buf)
{
  if (v27) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18ADA9DA8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,__int16 a27)
{
  if (a2)
  {
    id v29 = objc_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v30 = v29;
      _NSCoreDataLog(1, @"disconnectAllConnections failed with excception: %@");
      *(void *)(*(void *)(*(void *)(v27 + 40) + 8) + 40) = v30;
      objc_end_catch();
      JUMPOUT(0x18ADA9BDCLL);
    }
    _NSCoreDataLog(17, [NSString stringWithUTF8String:"disconnectAllConnections failed with unknown excception"]);
    id v31 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      a27 = 0;
      _os_log_fault_impl(&dword_18AB82000, v31, OS_LOG_TYPE_FAULT, "CoreData: disconnectAllConnections failed with unknown excception", (uint8_t *)&a27, 2u);
    }
    JUMPOUT(0x18ADA9E5CLL);
  }
  JUMPOUT(0x18ADA9E94);
}

void sub_18ADA9E60(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18ADA9BE0);
  }
  _Unwind_Resume(a1);
}

void sub_18ADA9E8C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ADA9E94);
  }
  objc_terminate();
}

void *standardizedURL(void *a1)
{
  int v1 = a1;
  if ([a1 isFileURL])
  {
    char v2 = realpath_DARWIN_EXTSN((const char *)objc_msgSend((id)objc_msgSend(v1, "path"), "UTF8String"), 0);
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = objc_msgSend(MEMORY[0x1E4F1CB10], "fileURLWithPath:isDirectory:", objc_msgSend(NSString, "stringWithUTF8String:", v2), 0);
LABEL_6:
      int v1 = (void *)v4;
      free(v3);
      return v1;
    }
    uint64_t v5 = [v1 lastPathComponent];
    uint64_t v6 = realpath_DARWIN_EXTSN((const char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "URLByDeletingLastPathComponent"), "path"), "UTF8String"), 0);
    if (v6)
    {
      uint64_t v3 = v6;
      uint64_t v4 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB10], "fileURLWithPath:isDirectory:", objc_msgSend(NSString, "stringWithUTF8String:", v6), 1), "URLByAppendingPathComponent:", v5);
      goto LABEL_6;
    }
  }
  return v1;
}

void sub_18ADAC070(_Unwind_Exception *a1)
{
}

void sub_18ADAE660(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v35 = objc_begin_catch(exc_buf);
      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exc_buf);
    }
    JUMPOUT(0x18ADADFC8);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADAFAA8()
{
}

void sub_18ADAFB18()
{
}

void sub_18ADAFB24()
{
  if (v0) {
    JUMPOUT(0x18ADAFB2CLL);
  }
  JUMPOUT(0x18ADAFB30);
}

void sub_18ADB189C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose(&STACK[0x280], 8);
  objc_begin_catch(a1);
  JUMPOUT(0x18ADB17E0);
}

void sub_18ADB23C8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADB22C4);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADB2794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18ADB2964(_Unwind_Exception *a1)
{
}

void sub_18ADB2984(void *a1)
{
}

void sub_18ADB3518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, uint64_t a20,void (*a21)(uint64_t a1),void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,__CFString *a27,__CFString *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  objc_destroyWeak(v34);
  if (a2 == 1)
  {
    id v40 = objc_begin_catch(a1);
    uint64_t v41 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v42 = *MEMORY[0x1E4F28588];
    *(void *)(v36 - 176) = @"CloudKit setup failed because it couldn't register a handler for the setup activity. There is another instance of this persistent store actively syncing with CloudKit in this process.";
    uint64_t v43 = *MEMORY[0x1E4F289D0];
    a25 = v42;
    a26 = v43;
    *(void *)(v36 - 16_Block_object_dispose(&STACK[0x310], 8) = [v33 URL];
    *(void *)(v36 - 160) = v40;
    a27 = @"NSUnderlyingException";
    a28 = @"activityIdentifier";
    *(void *)(v36 - 152) = *(void *)(v32 + 192);
    uint64_t v44 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v36 - 176 forKeys:&a25 count:4];
    uint64_t v45 = (void *)[v41 errorWithDomain:*MEMORY[0x1E4F281F8] code:134422 userInfo:v44];
    objc_end_catch();
    objc_destroyWeak(&location);
    -[NSCloudKitMirroringDelegate resetAfterError:andKeepContainer:](v32, v45);
    long long v46 = *(void **)(v35 + 24);
    [v45 domain];
    [v45 code];
    uint64_t v47 = [v46 stringWithFormat:@"Error %@:%ld"];
    locatiouint64_t n = (id)MEMORY[0x1E4F143A8];
    a20 = v37;
    a21 = __40__NSCloudKitMirroringDelegate_tearDown___block_invoke;
    a22 = &unk_1E544EC48;
    a23 = v32;
    a24 = v47;
    -[NSCloudKitMirroringDelegate _openTransactionWithLabel:assertionLabel:andExecuteWorkBlock:](v32, @"com.apple.coredata.cloudkit.teardown", @"CoreData: CloudKit Teardown", (uint64_t)&location);
    JUMPOUT(0x18ADB34D0);
  }
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18ADB4468(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18ADB49D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADB4DA8(_Unwind_Exception *exception_object)
{
}

void sub_18ADB59A4()
{
}

void sub_18ADB59EC()
{
}

void sub_18ADB59F8()
{
  if (v0) {
    JUMPOUT(0x18ADB5A00);
  }
  JUMPOUT(0x18ADB5A04);
}

void sub_18ADB77B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location,uint64_t a30,uint64_t a31,uint64_t a32,id a33,uint64_t a34)
{
  objc_destroyWeak(v34);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18ADB7C1C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18ADB7E00(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18ADB806C(_Unwind_Exception *a1)
{
}

void sub_18ADB81D0(_Unwind_Exception *a1)
{
}

void sub_18ADB81F0(void *a1)
{
}

void sub_18ADB88F4(_Unwind_Exception *a1)
{
}

void sub_18ADB8A60(_Unwind_Exception *a1)
{
}

void sub_18ADB8A80(void *a1)
{
}

void sub_18ADB8EA4(_Unwind_Exception *a1)
{
}

void sub_18ADB8ED0(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADB8E4CLL);
  }
  JUMPOUT(0x18ADB8EC4);
}

void sub_18ADB94C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  if (a2)
  {
    objc_destroyWeak(v24);
    objc_destroyWeak(&location);
    objc_begin_catch(exception_object);
    JUMPOUT(0x18ADB945CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18ADB97C4(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADB977CLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADB9A80(_Unwind_Exception *a1)
{
}

void sub_18ADB9BEC(_Unwind_Exception *a1)
{
}

void sub_18ADB9C0C(void *a1)
{
}

void sub_18ADB9DF0(_Unwind_Exception *a1)
{
}

void sub_18ADB9E10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  objc_begin_catch(a1);
  JUMPOUT(0x18ADB9D90);
}

void sub_18ADBA2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADBA568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_18ADBABF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADBB13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_18ADBB628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18ADBBEC0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18ADBCCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_18ADBDFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

#error "18ADBF3C8: call analysis failed (funcsize=29)"

void sub_18ADC0930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Block_object_dispose((const void *)(v17 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18ADC10F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18ADC1928(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,__CFString *a39,uint64_t a40,uint64_t a41,__CFString *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (!a2) {
    _Unwind_Resume(exc_buf);
  }
  if (a2 == 2)
  {
    id v47 = objc_begin_catch(exc_buf);
    *(unsigned char *)(*(void *)(*(void *)(v46 + 64) + 8) + 24) = 0;
    id v48 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v49 = *MEMORY[0x1E4F28588];
    a39 = @"NSUnderlyingException";
    a40 = v49;
    a41 = (uint64_t)v47;
    a42 = @"Attempt to schedule an import failed because of an unhandled exception.";
    uint64_t v50 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a41 forKeys:&a39 count:2];
    *(void *)(*(void *)(*(void *)(v46 + 72) + 8) + 40) = [v48 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v50];
    objc_end_catch();
    JUMPOUT(0x18ADC186CLL);
  }
  objc_begin_catch(exc_buf);
  JUMPOUT(0x18ADC1870);
}

void sub_18ADC2EA8(_Unwind_Exception *exception_object)
{
}

void sub_18ADC2EB4(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,__CFString *a23,uint64_t a24,uint64_t a25,__CFString *a26)
{
  if (a2 == 1)
  {
    id v27 = objc_begin_catch(exc_buf);
    *(unsigned char *)(*(void *)(*(void *)(v26 + 72) + 8) + 24) = 0;
    id v28 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v29 = *MEMORY[0x1E4F28588];
    a23 = @"NSUnderlyingException";
    a24 = v29;
    a25 = (uint64_t)v27;
    a26 = @"Encountered an unhandled exception while marking zones needing recovery from Manatee identity loss.";
    uint64_t v30 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a25 forKeys:&a23 count:2];
    *(void *)(*(void *)(*(void *)(v26 + 64) + 8) + 40) = [v28 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v30];
    objc_end_catch();
    JUMPOUT(0x18ADC2E30);
  }
  JUMPOUT(0x18ADC2EACLL);
}

void sub_18ADC2F70()
{
}

void sub_18ADC31E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18ADC3830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_18ADC420C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18ADC505C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    if (+[PFUbiquityLogging canLogMessageAtLevel:0]) {
      NSLog((NSString *)@"%s(%d): CoreData: Ubiquity:  Checking log level threw: %@");
    }
    objc_end_catch();
    JUMPOUT(0x18ADC5034);
  }
  _Unwind_Resume(exception_object);
}

void sub_18ADC6A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
}

void sub_18ADC6AB8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ADC6AC4);
  }
  JUMPOUT(0x18ADC6AACLL);
}

void sub_18ADC6AD4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ADC6B14);
  }
  JUMPOUT(0x18ADC6AACLL);
}

void sub_18ADC6AF4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ADC6AACLL);
  }
  JUMPOUT(0x18ADC6B0CLL);
}

void sub_18ADC6B04(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ADC6B0CLL);
  }
  JUMPOUT(0x18ADC6AACLL);
}

void sub_18ADC6B88(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ADC6B24);
  }
  JUMPOUT(0x18ADC6AACLL);
}

void sub_18ADC9644(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a2)
  {
    if (a2 != 3)
    {
      if (a2 != 2)
      {
        objc_begin_catch(exc_buf);
        JUMPOUT(0x18ADC9448);
      }
      id v28 = objc_begin_catch(exc_buf);
      if (+[PFUbiquityLogging canLogMessageAtLevel:1]) {
        NSLog((NSString *)@"%s(%d): CoreData: Ubiquity:  Unknown Exception encountered while performing setup for conflict: %@\n%@");
      }
      id v29 = v28;
      objc_exception_throw(v28);
    }
    id v26 = objc_begin_catch(exc_buf);
    if (+[PFUbiquityLogging canLogMessageAtLevel:1])
    {
      [v26 userInfo];
      NSLog((NSString *)@"%s(%d): CoreData: Ubiquity:  Exception encountered while performing setup for conflict: %@\n%@\nuserInfo: %@");
    }
    id v27 = v26;
    objc_exception_throw(v26);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADC9928(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ADC983CLL);
  }
  JUMPOUT(0x18ADC9744);
}

void sub_18ADCAA44(_Unwind_Exception *a1)
{
}

void sub_18ADCAA64(void *a1)
{
}

void sub_18ADCAC58(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADCABFCLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADCADDC(void *a1)
{
}

void sub_18ADCAEC0(_Unwind_Exception *a1)
{
}

void sub_18ADCAEF0(void *a1)
{
}

void sub_18ADCB030(_Unwind_Exception *a1)
{
}

void sub_18ADCB064(void *a1)
{
}

void sub_18ADCB1AC(_Unwind_Exception *a1)
{
}

void sub_18ADCB1E0(void *a1)
{
}

void sub_18ADCB56C(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18ADCB5BC(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADCB45CLL);
  }
  JUMPOUT(0x18ADCB5B0);
}

void sub_18ADCB658(_Unwind_Exception *a1)
{
}

void sub_18ADCB678(void *a1)
{
}

void sub_18ADCB924(_Unwind_Exception *exception_object)
{
}

void sub_18ADCB95C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ADCB984);
  }
  JUMPOUT(0x18ADCB950);
}

void sub_18ADCB978(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADCB890);
  }
  JUMPOUT(0x18ADCB950);
}

void sub_18ADCBDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
}

void sub_18ADCBE54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *exc_buf)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18ADCBD4CLL);
  }
  JUMPOUT(0x18ADCBE44);
}

void sub_18ADCBE70(void *a1, int a2)
{
  if (a2)
  {
    if (v2) {
      JUMPOUT(0x18ADCBE80);
    }
    objc_begin_catch(a1);
    JUMPOUT(0x18ADCBD44);
  }
  JUMPOUT(0x18ADCBE44);
}

void sub_18ADCBE90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *exc_buf)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18ADCBD1CLL);
  }
  JUMPOUT(0x18ADCBE44);
}

void sub_18ADCBEA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *exc_buf)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18ADCBD44);
  }
  JUMPOUT(0x18ADCBE44);
}

void sub_18ADCBEB8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ADCBEC0);
  }
  JUMPOUT(0x18ADCBE44);
}

void sub_18ADCC2C4(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADCC240);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADCC59C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADCC4ECLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADCC754(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18ADCD288(void *a1)
{
}

void sub_18ADCD614(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADCD5C4);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADCDEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18ADCDDE4);
  }
  id v24 = objc_begin_catch(a1);
  if (objc_opt_respondsToSelector()) {
    uint64_t v25 = (void *)[v24 userInfo];
  }
  else {
    uint64_t v25 = 0;
  }
  int v26 = objc_msgSend((id)objc_msgSend(v25, "objectForKey:", @"PFUbiquitySetupCheckForFork"), "BOOLValue");
  int v27 = objc_msgSend((id)objc_msgSend(v25, "objectForKey:", @"PFUbiquitySetupDoFork"), "BOOLValue");
  if (v26
    && (id v28 = (void *)[v24 name],
        [v28 isEqualToString:*MEMORY[0x1E4F1C3B8]]))
  {
    if (v23 && (uint64_t v29 = *(void *)(v23 + 88)) != 0) {
      uint64_t v30 = *(void **)(v29 + 56);
    }
    else {
      uint64_t v30 = 0;
    }
    id v31 = &a22;
    a22 = MEMORY[0x1E4F143A8];
    a23 = 3221225472;
    uint64_t v32 = __70__PFUbiquitySwitchboardEntry_filePresenterWasNotifiedTransactionLogs___block_invoke;
  }
  else
  {
    if (!v27
      || (long long v33 = (void *)[v24 name],
          ![v33 isEqualToString:*MEMORY[0x1E4F1C3B8]]))
    {
      if (+[PFUbiquityLogging canLogMessageAtLevel:0]) {
        NSLog((NSString *)@"%s(%d): CoreData: Ubiquity:  %@\nException encountered while processing transaction logs: %@ with userInfo: %@");
      }
LABEL_23:
      objc_exception_rethrow();
    }
    if (v23 && (uint64_t v34 = *(void *)(v23 + 88)) != 0) {
      uint64_t v30 = *(void **)(v34 + 56);
    }
    else {
      uint64_t v30 = 0;
    }
    id v31 = &a17;
    a17 = MEMORY[0x1E4F143A8];
    a18 = 3221225472;
    uint64_t v32 = __70__PFUbiquitySwitchboardEntry_filePresenterWasNotifiedTransactionLogs___block_invoke_2;
  }
  v31[2] = (uint64_t)v32;
  v31[3] = (uint64_t)&unk_1E544B868;
  v31[4] = v23;
  objc_msgSend(v30, "performBlockAndWait:");
  goto LABEL_23;
}

void sub_18ADCE128(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ADCDF6CLL);
  }
  JUMPOUT(0x18ADCDF24);
}

void sub_18ADCEFCC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (a2 == 3)
    {
      id v2 = objc_begin_catch(a1);
      if (+[PFUbiquityLogging canLogMessageAtLevel:0])
      {
        [v2 userInfo];
        NSLog((NSString *)@"%s(%d): CoreData: Ubiquity:  %@\nException encountered while trying to recover from account change: %@ (%@)");
      }
    }
    else
    {
      if (a2 != 2)
      {
        objc_begin_catch(a1);
        JUMPOUT(0x18ADCED74);
      }
      objc_begin_catch(a1);
      if (+[PFUbiquityLogging canLogMessageAtLevel:0]) {
        NSLog((NSString *)@"%s(%d): CoreData: Ubiquity:  %@\nException encountered while trying to recover from account change: %@");
      }
    }
    objc_end_catch();
    JUMPOUT(0x18ADCED70);
  }
  _Unwind_Resume(a1);
}

void sub_18ADCF1BC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ADCF1C0);
  }
  objc_terminate();
}

void sub_18ADCF5E8(_Unwind_Exception *a1)
{
}

void sub_18ADCF608(void *a1)
{
}

void sub_18ADD0CB0(_Unwind_Exception *a1)
{
}

void sub_18ADD0CDC(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADD0C6CLL);
  }
  JUMPOUT(0x18ADD0CD0);
}

#error "18ADD1498: call analysis failed (funcsize=50)"

void sub_18ADD17CC(_Unwind_Exception *exception_object)
{
}

void sub_18ADD17D8(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __CFString *a14, uint64_t a15, uint64_t a16, __CFString *a17)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(exc_buf);
    *(unsigned char *)(*(void *)(*(void *)(v17 + 64) + 8) + 24) = 0;
    id v19 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v20 = *MEMORY[0x1E4F28588];
    a14 = @"NSUnderlyingException";
    a15 = v20;
    a16 = (uint64_t)v18;
    a17 = @"Import failed because committing the metadata changes hit an unhandled exception.";
    uint64_t v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a16 forKeys:&a14 count:2];
    *(void *)(*(void *)(*(void *)(v17 + 56) + 8) + 40) = [v19 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v21];
    objc_end_catch();
    JUMPOUT(0x18ADD170CLL);
  }
  JUMPOUT(0x18ADD17D0);
}

void sub_18ADD1888()
{
}

void sub_18ADD1E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_18ADD2A94(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,__CFString *a45,uint64_t a46,uint64_t a47,__CFString *a48)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v49 = objc_begin_catch(exc_buf);
      *(unsigned char *)(*(void *)(*(void *)(v48 + 72) + 8) + 24) = 0;
      id v50 = objc_alloc(MEMORY[0x1E4F28C58]);
      uint64_t v51 = *MEMORY[0x1E4F28588];
      a45 = @"NSUnderlyingException";
      a46 = v51;
      a47 = (uint64_t)v49;
      a48 = @"Import failed because applying the accumulated changes hit an unhandled exception.";
      uint64_t v52 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a47 forKeys:&a45 count:2];
      *(void *)(*(void *)(*(void *)(v48 + 56) + 8) + 40) = [v50 initWithDomain:*MEMORY[0x1E4F281F8] code:134421 userInfo:v52];
      objc_end_catch();
      JUMPOUT(0x18ADD2838);
    }
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADD283CLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADD3D78(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18ADD3CA8);
    }
    id v21 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADD3E64(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ADD3E38);
  }
  JUMPOUT(0x18ADD3E10);
}

#error "18ADD4580: call analysis failed (funcsize=49)"

void sub_18ADD4E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18ADD4F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADD55E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADD5908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADD5A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADD5B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADD6A6C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_18ADD7764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADD817C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void sub_18ADD9048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void sub_18ADD9BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void sub_18ADDA338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_18ADDBAA4(_Unwind_Exception *a1)
{
}

void sub_18ADDBAAC(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18ADDB840);
    }
    id v2 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADDBB0C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ADDBADCLL);
  }
  _Unwind_Resume(a1);
}

void sub_18ADDBB1C(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18ADDBB24);
  }
  _Unwind_Resume(a1);
}

void sub_18ADDBB2C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ADDBB30);
  }
  objc_terminate();
}

void sub_18ADDC7C4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18ADDC3FCLL);
    }
    id v28 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADDC88C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ADDC85CLL);
  }
  JUMPOUT(0x18ADDC8B4);
}

void sub_18ADDC89C()
{
  if (v0) {
    JUMPOUT(0x18ADDC8A4);
  }
  JUMPOUT(0x18ADDC8A8);
}

void sub_18ADDC8BC(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18ADDC8B4);
}

void sub_18ADDD24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_18ADDDD64(_Unwind_Exception *a1)
{
}

void sub_18ADDDD7C(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18ADDDD88);
}

void sub_18ADDE1E4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18ADDE6D0(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADDE5C4);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADDF280(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18ADDF100);
    }
    objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADDF3A4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ADDF374);
  }
  JUMPOUT(0x18ADDF324);
}

void sub_18ADDF4B4(_Unwind_Exception *a1)
{
}

void sub_18ADDF4D4(void *a1)
{
}

void sub_18ADDF918(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADDF8B0);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADDFCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (v28) {
    objc_end_catch();
  }
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v29 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_18ADDFD14(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18ADDFD0CLL);
}

void sub_18ADDFD24(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    if (!*(unsigned char *)(*(void *)(v2 - 128) + 24)) {
      JUMPOUT(0x18ADDFBB4);
    }
    JUMPOUT(0x18ADDFB18);
  }
  JUMPOUT(0x18ADDFD0CLL);
}

void sub_18ADE0000(_Unwind_Exception *exception_object)
{
}

void sub_18ADE014C()
{
}

void sub_18ADE0188()
{
}

void sub_18ADE0194()
{
  if (v0) {
    JUMPOUT(0x18ADE019CLL);
  }
  JUMPOUT(0x18ADE01A0);
}

void sub_18ADE0D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, uint64_t a13)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18ADE0A64);
  }
  _Unwind_Resume(a1);
}

void sub_18ADE1FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

void sub_18ADE2018(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18ADE2010);
}

#error "18ADE2070: call analysis failed (funcsize=36)"

void sub_18ADE203C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18ADE2044);
  }
  JUMPOUT(0x18ADE2010);
}

void sub_18ADE20B8(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ADE20C4);
  }
  JUMPOUT(0x18ADE2010);
}

uint64_t globalObjectIDComparator_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

void sub_18ADE48A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
}

void sub_18ADE4E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18ADE5498(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_18ADE54E8(void *a1)
{
}

void sub_18ADE54FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a64, 8);
  _Block_object_dispose((const void *)(v64 - 232), 8);
  JUMPOUT(0x18ADE5518);
}

void sub_18ADE6DA8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADE6B94);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADE6EB8(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADE64A0);
  }
  JUMPOUT(0x18ADE6EA4);
}

void sub_18ADE8118()
{
}

void sub_18ADE8120(void *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18ADE7EC8);
    }
    objc_begin_catch(exc_buf);
    *(unsigned char *)(*(void *)(v2 - 120) + 24) = 0;
    objc_exception_rethrow();
  }
  JUMPOUT(0x18ADE81A4);
}

void sub_18ADE8158(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ADE8130);
  }
  JUMPOUT(0x18ADE81A4);
}

void sub_18ADE816C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18ADE81AC(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18ADE81A4);
}

void sub_18ADE9688(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_18ADE978C(void *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18ADE94A0);
  }
  JUMPOUT(0x18ADE9784);
}

void sub_18ADE9D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18ADEAA50(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADEA9C4);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADEAB6C(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADEA9E0);
  }
  JUMPOUT(0x18ADEAB40);
}

void sub_18ADEB468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADEB680(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18ADEBEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
}

void sub_18ADECC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t recordIDComparator_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(a2, "recordName"), "caseInsensitiveCompare:", objc_msgSend(a3, "recordName"));
  if (!result)
  {
    uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "zoneID"), "zoneName"), "caseInsensitiveCompare:", objc_msgSend((id)objc_msgSend(a3, "zoneID"), "zoneName"));
    if (!result)
    {
      uint64_t v6 = objc_msgSend((id)objc_msgSend(a2, "zoneID"), "ownerName");
      uint64_t v7 = objc_msgSend((id)objc_msgSend(a3, "zoneID"), "ownerName");
      return [v6 caseInsensitiveCompare:v7];
    }
  }
  return result;
}

void sub_18ADED648(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18ADEEE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_18ADF04B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

void sub_18ADF108C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Unwind_Resume(a1);
}

void sub_18ADF183C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_18ADF1E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void sub_18ADF4334(_Unwind_Exception *a1)
{
}

void sub_18ADF4354(void *a1)
{
}

void sub_18ADF43EC(_Unwind_Exception *a1)
{
}

void sub_18ADF440C(void *a1)
{
}

void sub_18ADF44A4(_Unwind_Exception *a1)
{
}

void sub_18ADF44C4(void *a1)
{
}

void sub_18ADF4544(_Unwind_Exception *a1)
{
}

void sub_18ADF4564(void *a1)
{
}

void sub_18ADF4F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
  {
    _Block_object_dispose((const void *)(v29 - 160), 8);
    if (a2 != 2)
    {
      objc_begin_catch(exception_object);
      JUMPOUT(0x18ADF4AECLL);
    }
    id v32 = objc_begin_catch(exception_object);
    objc_exception_throw(v32);
  }
  _Unwind_Resume(exception_object);
}

void sub_18ADF5060(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ADF5034);
  }
  _Unwind_Resume(a1);
}

void sub_18ADF5080(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ADF5088);
  }
  objc_terminate();
}

void sub_18ADF5374(void *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18ADF5214);
    }
    id v2 = objc_begin_catch(exc_buf);
    objc_exception_throw(v2);
  }
  JUMPOUT(0x18ADF53FCLL);
}

void sub_18ADF53D4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18ADF53A8);
  }
  JUMPOUT(0x18ADF53FCLL);
}

void sub_18ADF53E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18ADF5D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADF63E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a2)
  {
    _Block_object_dispose(&a33, 8);
    objc_begin_catch(exception_object);
    JUMPOUT(0x18ADF62F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_18ADF70CC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a2)
  {
    _Block_object_dispose(&STACK[0x2D0], 8);
    _Block_object_dispose(&STACK[0x250], 8);
    _Block_object_dispose(&a48, 8);
    objc_begin_catch(a1);
    JUMPOUT(0x18ADF6EE4);
  }
  _Unwind_Resume(a1);
}

void sub_18ADF8008(_Unwind_Exception *a1)
{
}

void sub_18ADF8020(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ADF8028);
  }
  objc_terminate();
}

void sub_18ADF82D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18ADF8324(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADF8338);
  }
  JUMPOUT(0x18ADF8318);
}

void sub_18ADF8340(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    if (v2) {
      JUMPOUT(0x18ADF81E8);
    }
    JUMPOUT(0x18ADF81C8);
  }
  JUMPOUT(0x18ADF8318);
}

void sub_18ADF9B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18ADFA278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADFA3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADFB3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADFB7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  if (v17) {
    objc_end_catch();
  }
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18ADFB850(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18ADFB848);
}

void sub_18ADFE374(_Unwind_Exception *a1)
{
}

void sub_18ADFE390(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18ADFE398);
  }
  JUMPOUT(0x18ADFE408);
}

void sub_18ADFE3A0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x18ADFE418);
}

void sub_18ADFE3C4(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18ADFE2E0);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18ADFF55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18AE02134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18AE01C78);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE02674(void *a1)
{
}

void sub_18AE026D4(_Unwind_Exception *a1)
{
}

void sub_18AE026DC()
{
}

void sub_18AE0274C()
{
}

void sub_18AE02758()
{
  if (v0) {
    JUMPOUT(0x18AE02760);
  }
  JUMPOUT(0x18AE02764);
}

void sub_18AE032FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18AE0324CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE03D5C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE03C44);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AE042C0(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE04220);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t _openFile(void *a1)
{
  memset(&v6, 0, sizeof(v6));
  int v1 = (const char *)[a1 fileSystemRepresentation];
  if (!stat(v1, &v6) && (v6.st_mode & 0xF000) == 0x8000 && v6.st_size >= 1)
  {
    int v3 = open(v1, 0, 511);
    if ((v3 & 0x80000000) == 0)
    {
      unsigned int v4 = v3;
      if (!fstat(v3, &v6) && (v6.st_mode & 0xF000) == 0x8000 && v6.st_size >= 1) {
        return v4;
      }
      close(v4);
    }
  }
  return -1;
}

uLong _crcFromBytes(const Bytef *a1, uInt a2)
{
  unsigned int v4 = crc32(0, 0, 0);
  return crc32(v4, a1, a2);
}

Class initCoreSpotlightCSSearchableIndex()
{
  if (_MergedGlobals_88 != -1) {
    dispatch_once(&_MergedGlobals_88, &__block_literal_global_38);
  }
  Class result = objc_getClass("CSSearchableIndex");
  qword_1EB2707E0 = (uint64_t)result;
  getCoreSpotlightCSSearchableIndexClass Class = CoreSpotlightCSSearchableIndexFunction;
  return result;
}

Class initCoreSpotlightCSSearchableItem()
{
  if (_MergedGlobals_88 != -1) {
    dispatch_once(&_MergedGlobals_88, &__block_literal_global_38);
  }
  Class result = objc_getClass("CSSearchableItem");
  qword_1EB2707F0 = (uint64_t)result;
  getCoreSpotlightCSSearchableItemClass Class = CoreSpotlightCSSearchableItemFunction;
  return result;
}

Class initCoreSpotlightCSSearchableItemAttributeSet()
{
  if (_MergedGlobals_88 != -1) {
    dispatch_once(&_MergedGlobals_88, &__block_literal_global_38);
  }
  Class result = objc_getClass("CSSearchableItemAttributeSet");
  qword_1EB2707F8 = (uint64_t)result;
  getCoreSpotlightCSSearchableItemAttributeSetClass Class = CoreSpotlightCSSearchableItemAttributeSetFunction;
  return result;
}

Class initCoreSpotlightCSCustomAttributeKey()
{
  if (_MergedGlobals_88 != -1) {
    dispatch_once(&_MergedGlobals_88, &__block_literal_global_38);
  }
  Class result = objc_getClass("CSCustomAttributeKey");
  qword_1EB270800 = (uint64_t)result;
  getCoreSpotlightCSCustomAttributeKeyClass Class = CoreSpotlightCSCustomAttributeKeyFunction;
  return result;
}

uint64_t CoreSpotlightCSSearchableIndexFunction()
{
  return qword_1EB2707E0;
}

uint64_t CoreSpotlightCSSearchableItemFunction()
{
  return qword_1EB2707F0;
}

uint64_t CoreSpotlightCSSearchableItemAttributeSetFunction()
{
  return qword_1EB2707F8;
}

uint64_t CoreSpotlightCSCustomAttributeKeyFunction()
{
  return qword_1EB270800;
}

void sub_18AE067F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

#error "18AE06B48: call analysis failed (funcsize=68)"

void sub_18AE070AC(_Unwind_Exception *a1)
{
}

void sub_18AE070D8(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __CFString *a12, uint64_t a13, uint64_t a14, __CFString *a15)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v16 = objc_begin_catch(exc_buf);
      *(unsigned char *)(*(void *)(*(void *)(v15 + 56) + 8) + 24) = 0;
      id v17 = objc_alloc(MEMORY[0x1E4F28C58]);
      uint64_t v18 = *MEMORY[0x1E4F28588];
      a12 = @"NSUnderlyingException";
      a13 = v18;
      a14 = (uint64_t)v16;
      a15 = @"Metadata migration failed due to an unhandled exception while fetching zone metadata.";
      uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a14 forKeys:&a12 count:2];
      *(void *)(*(void *)(*(void *)(v15 + 48) + 8) + 40) = [v17 initWithDomain:*MEMORY[0x1E4F281F8] code:134402 userInfo:v19];
      objc_end_catch();
      JUMPOUT(0x18AE07064);
    }
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE07068);
  }
  JUMPOUT(0x18AE070CCLL);
}

void sub_18AE08EB0()
{
}

void sub_18AE09898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_18AE09DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_18AE0A46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_18AE0CD94(_Unwind_Exception *a1)
{
}

#error "18AE0D794: call analysis failed (funcsize=86)"

void sub_18AE0D810(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AE0D7C8);
  }
  JUMPOUT(0x18AE0D66CLL);
}

NSAttributeDescription *makeAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = objc_alloc_init(NSAttributeDescription);
  [(NSPropertyDescription *)v4 setName:a1];
  [(NSAttributeDescription *)v4 setAttributeType:a2];

  return v4;
}

#error "18AE0F6AC: call analysis failed (funcsize=52)"

void sub_18AE111D0(_Unwind_Exception *a1)
{
}

void sub_18AE11A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AE11EB4()
{
}

void sub_18AE11EF4()
{
}

void sub_18AE11F00(_Unwind_Exception *a1)
{
}

void sub_18AE1205C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSBatchInsertResult *_executeBatchInsertRequest(uint64_t a1)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  char v2 = (void *)[(id)a1 persistentStoreRequest];
  int v3 = v2;
  unint64_t v69 = v2;
  if (!a1)
  {
    int v55 = [v2 _secureOperation];
    uint64_t v8 = [v3 resultType];
    id v56 = (id)[0 mergePolicy];
    unsigned int v4 = 0;
    int v7 = 0;
    int v68 = 0;
    BOOL v10 = v56 == NSMergeByPropertyObjectTrumpMergePolicy;
    if (!v55) {
      goto LABEL_10;
    }
    goto LABEL_5;
  }
  unsigned int v4 = *(void **)(a1 + 24);
  char v5 = [v2 _secureOperation];
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    int v7 = (*(unsigned __int8 *)(v6 + 201) >> 2) & 1;
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = [v3 resultType];
  id v9 = (id)[*(id *)(a1 + 32) mergePolicy];
  BOOL v10 = v9 == NSMergeByPropertyObjectTrumpMergePolicy;
  if (v5)
  {
LABEL_5:
    -[NSSQLiteConnection setSecureDeleteMode:]((uint64_t)v4, 1);
    int v68 = 1;
    if (!a1) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  int v68 = 0;
LABEL_8:
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11) {
    [*(id *)(v11 + 216) lock];
  }
LABEL_10:
  -[NSSQLiteConnection beginTransaction]((uint64_t)v4);
  if (v8 == 1) {
    int v12 = 1;
  }
  else {
    int v12 = v7;
  }
  uint64_t v67 = v8;
  if (v12 == 1
    && (!a1
      ? (uint64_t v13 = 0)
      : (uint64_t v13 = (void *)-[NSSQLBatchOperationRequestContext createObjectIDCaptureStatementsForDrop:](a1, 0)),
        long long v80 = 0u,
        long long v81 = 0u,
        long long v78 = 0u,
        long long v79 = 0u,
        (uint64_t v14 = [v13 countByEnumeratingWithState:&v78 objects:v88 count:16]) != 0))
  {
    uint64_t v15 = *(void *)v79;
    do
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        if (*(void *)v79 != v15) {
          objc_enumerationMutation(v13);
        }
        -[NSSQLiteConnection prepareAndExecuteSQLStatement:]((uint64_t)v4, *(void **)(*((void *)&v78 + 1) + 8 * i));
        int v17 = 1;
      }
      uint64_t v14 = [v13 countByEnumeratingWithState:&v78 objects:v88 count:16];
    }
    while (v14);
  }
  else
  {
    int v17 = 0;
  }
  if (a1) {
    uint64_t v18 = *(void **)(a1 + 8);
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = (id *)_sqlCoreLookupSQLEntityForEntityDescription(v18, (void *)[v69 entity]);
  if ([v69 objectsToInsert])
  {
    uint64_t v20 = -[NSSQLiteConnection insertArray:forEntity:includeOnConflict:]((uint64_t)v4, (void *)[v69 objectsToInsert], (uint64_t)v19, v10);
    goto LABEL_33;
  }
  if ([v69 dictionaryHandler])
  {
    uint64_t v20 = -[NSSQLiteConnection insertDictionaryBlock:forEntity:includeOnConflict:]((uint64_t)v4, [v69 dictionaryHandler], v19, v10);
    goto LABEL_33;
  }
  if ([v69 managedObjectHandler])
  {
    uint64_t v20 = -[NSSQLiteConnection insertManagedObjectBlock:forEntity:includeOnConflict:]((uint64_t)v4, [v69 managedObjectHandler], v19, v10);
LABEL_33:
    uint64_t v21 = v20;
    if (v12) {
      goto LABEL_34;
    }
LABEL_51:
    uint64_t v25 = 0;
    uint64_t v30 = 0;
    goto LABEL_52;
  }
  uint64_t v21 = 0;
  if (!v12) {
    goto LABEL_51;
  }
LABEL_34:
  if (a1) {
    uint64_t v22 = *(void *)(a1 + 88);
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = (void *)-[NSSQLiteConnection gatherObjectIDsFromTable:]((uint64_t)v4, v22);
  uint64_t v24 = (uint64_t)v23;
  if (v7 && [v23 count])
  {
    -[NSSQLiteConnection processInsertRequest:]((uint64_t)v4, (void *)a1);
    if (!a1)
    {
      uint64_t v25 = 0;
      int v26 = 0;
      goto LABEL_42;
    }
    uint64_t v25 = *(void **)(a1 + 72);
    goto LABEL_41;
  }
  uint64_t v25 = 0;
  int v26 = 0;
  if (a1) {
LABEL_41:
  }
    int v26 = (void *)-[NSSQLBatchOperationRequestContext createObjectIDCaptureStatementsForDrop:](a1, 1);
LABEL_42:
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  uint64_t v27 = [v26 countByEnumeratingWithState:&v74 objects:v87 count:16];
  if (v27)
  {
    uint64_t v28 = *(void *)v75;
    do
    {
      for (uint64_t j = 0; j != v27; ++j)
      {
        if (*(void *)v75 != v28) {
          objc_enumerationMutation(v26);
        }
        -[NSSQLiteConnection prepareAndExecuteSQLStatement:]((uint64_t)v4, *(void **)(*((void *)&v74 + 1) + 8 * j));
      }
      uint64_t v27 = [v26 countByEnumeratingWithState:&v74 objects:v87 count:16];
    }
    while (v27);
  }
  int v17 = 0;
  uint64_t v30 = v24;
LABEL_52:
  -[NSSQLiteConnection commitTransaction]((uint64_t)v4);
  if (a1)
  {
    uint64_t v31 = *(void *)(a1 + 8);
    if (v31)
    {
      if (atomic_load((unint64_t *)(v31 + 208)))
      {
        if (v21)
        {
          uint64_t v33 = [v4 registerCurrentQueryGenerationWithStore:*(void *)(a1 + 8)];
          if (v33)
          {
            uint64_t v34 = [NSString stringWithUTF8String:"Batch insert failed to generate a post transaction query generation with error %d"];
            _NSCoreDataLog(17, v34, v35, v36, v37, v38, v39, v40, v33);
            uint64_t v41 = __pflogFaultLog;
            if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v83) = v33;
              _os_log_fault_impl(&dword_18AB82000, v41, OS_LOG_TYPE_FAULT, "CoreData: Batch insert failed to generate a post transaction query generation with error %d", buf, 8u);
            }
          }
        }
        else if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) >= 1)
        {
          _NSCoreDataLog(6, @"Batch insert did not affect any rows, not registering a query generation", v42, v43, v44, v45, v46, v47, v66);
        }
      }
    }
  }
  if (v67 == 2) {
    uint64_t v30 = [NSNumber numberWithUnsignedInteger:v21];
  }
  if (![v69 resultType]) {
    uint64_t v30 = [NSNumber numberWithBool:1];
  }
  if (a1) {
    uint64_t v48 = *(void *)(a1 + 24);
  }
  else {
    uint64_t v48 = 0;
  }
  -[NSSQLiteConnection _performPostSaveTasks:andForceFullVacuum:](v48, v68, 0);
  if (a1 && (uint64_t v49 = *(void *)(a1 + 8)) != 0)
  {
    [*(id *)(v49 + 216) unlock];
    uint64_t v50 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v50 = 0;
  }
  -[NSSQLCore _postChangeNotificationWithTransactionID:](v50, v25);
  -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v4, 0);
  if (v17)
  {
    uint64_t v51 = a1 ? (void *)-[NSSQLBatchOperationRequestContext createObjectIDCaptureStatementsForDrop:](a1, 1) : 0;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    uint64_t v52 = [v51 countByEnumeratingWithState:&v70 objects:v86 count:16];
    if (v52)
    {
      uint64_t v53 = *(void *)v71;
      do
      {
        for (uint64_t k = 0; k != v52; ++k)
        {
          if (*(void *)v71 != v53) {
            objc_enumerationMutation(v51);
          }
          -[NSSQLiteConnection prepareAndExecuteSQLStatement:]((uint64_t)v4, *(void **)(*((void *)&v70 + 1) + 8 * k));
        }
        uint64_t v52 = [v51 countByEnumeratingWithState:&v70 objects:v86 count:16];
      }
      while (v52);
    }
  }
  if (v68) {
    -[NSSQLiteConnection setSecureDeleteMode:]((uint64_t)v4, 0);
  }
  if (v30) {
    return -[NSBatchInsertResult initWithResultType:andObject:]([NSBatchInsertResult alloc], "initWithResultType:andObject:", [v69 resultType], v30);
  }
  uint64_t v58 = [NSString stringWithUTF8String:"Illegal attempt to return an error without one in %s:%d"];
  _NSCoreDataLog(17, v58, v59, v60, v61, v62, v63, v64, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Persistence/sqlcore/NSSQLCore_Functions.m");
  uint64_t v65 = __pflogFaultLog;
  if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315394;
    unsigned int v83 = "/Library/Caches/com.apple.xbs/Sources/Persistence/sqlcore/NSSQLCore_Functions.m";
    __int16 v84 = 1024;
    int v85 = 750;
    _os_log_fault_impl(&dword_18AB82000, v65, OS_LOG_TYPE_FAULT, "CoreData: Illegal attempt to return an error without one in %s:%d", buf, 0x12u);
  }
  return 0;
}

void sub_18AE12D50(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AE12D08);
  }
  _Unwind_Resume(a1);
}

void sub_18AE12D64(_Unwind_Exception *a1)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_18AE12D94(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AE12DA0);
}

uint64_t _deleteExternalDataReferences(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(a1);
        }
        [*(id *)(*((void *)&v6 + 1) + 8 * v5++) _deleteExternalReferenceFromPermanentLocation];
      }
      while (v3 != v5);
      uint64_t result = [a1 countByEnumeratingWithState:&v6 objects:v10 count:16];
      uint64_t v3 = result;
    }
    while (result);
  }
  return result;
}

uint64_t _deleteFileBackedFutures(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v10;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(a1);
        }
        uint64_t v6 = *(void *)(*((void *)&v9 + 1) + 8 * v5);
        if (v6) {
          long long v7 = *(void **)(v6 + 8);
        }
        else {
          long long v7 = 0;
        }
        uint64_t v8 = [v7 path];
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "removeItemAtPath:error:", v8, 0);
        ++v5;
      }
      while (v3 != v5);
      uint64_t result = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
      uint64_t v3 = result;
    }
    while (result);
  }
  return result;
}

CFMutableArrayRef _rowsForConflictDetection(void *a1, void *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend((id)objc_msgSend(a2, "objectAtIndex:", 0), "entity");
  if (v5)
  {
    if ((*(unsigned char *)(v5 + 120) & 4) != 0)
    {
      uint64_t v6 = *(void **)(v5 + 72);
    }
    else
    {
      do
      {
        uint64_t v6 = (void *)v5;
        uint64_t v5 = [(id)v5 superentity];
      }
      while (v5);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v15 = objc_msgSend((id)_sqlCoreLookupSQLEntityForEntityDescription(a1, v6), "tableName");
  long long v7 = (void *)[MEMORY[0x1E4F28E78] string];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v8 = [a2 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v18;
    long long v11 = @"%qi";
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(a2);
        }
        uint64_t v13 = objc_msgSend([NSString alloc], "initWithFormat:", v11, objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v17 + 1) + 8 * v12), "objectID"), "_referenceData64"));
        [v7 appendString:v13];

        ++v12;
        long long v11 = @", %qi";
      }
      while (v9 != v12);
      uint64_t v9 = [a2 countByEnumeratingWithState:&v17 objects:v21 count:16];
      long long v11 = @", %qi";
    }
    while (v9);
  }
  return -[NSSQLiteConnection copyRawIntegerRowsForSQL:](a3, (void *)[NSString stringWithFormat:@"SELECT %@,%@ FROM %@ WHERE %@ IN (%@) ORDER BY %@", @"Z_PK", @"Z_OPT", v15, @"Z_PK", v7, @"Z_PK"]);
}

uint64_t compareManagedObjectsBySQLPKs(void *a1, void *a2)
{
  uint64_t v3 = objc_msgSend((id)objc_msgSend(a1, "objectID"), "_referenceData64");
  uint64_t v4 = objc_msgSend((id)objc_msgSend(a2, "objectID"), "_referenceData64");
  uint64_t v5 = -1;
  if (v3 >= v4) {
    uint64_t v5 = 1;
  }
  if (v3 == v4) {
    return 0;
  }
  else {
    return v5;
  }
}

NSKnownKeysDictionary *_newObjectGraphStyleForSQLRow(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v4 = [a2 entity];
    uint64_t v5 = (void **)[a2 managedObjectContext];
    if (a2) {
      uint64_t v6 = _insertion_fault_handler;
    }
    else {
      uint64_t v6 = 0;
    }
    long long v7 = [NSKnownKeysDictionary alloc];
    if (v4) {
      uint64_t v8 = *(void *)(v4 + 104);
    }
    else {
      uint64_t v8 = 0;
    }
    long long v11 = [(NSKnownKeysDictionary *)v7 initWithSearchStrategy:v8];
    uint64_t v12 = [(NSKnownKeysDictionary *)v11 values];
    uint64_t v13 = [a1 knownKeyValuesPointer];
    uint64_t v33 = v11;
    uint64_t v14 = [(NSKnownKeysMappingStrategy *)[(NSKnownKeysDictionary *)v11 mapping] keys];
    uint64_t v15 = [MEMORY[0x1E4F1CA98] null];
    id v16 = *(void **)(v4 + 112);
    unint64_t v17 = v16[6];
    uint64_t v18 = v16[7];
    if (v17 < v18 + v17)
    {
      uint64_t v31 = v14;
      uint64_t v32 = v12;
      long long v19 = (void *)(v12 + 8 * v17);
      long long v20 = (void *)(v14 + 8 * v17);
      uint64_t v21 = (void **)(v13 + 8 * v17);
      do
      {
        if (v13) {
          uint64_t v22 = *v21;
        }
        else {
          uint64_t v22 = (void *)[a1 valueForKey:*v20];
        }
        id v23 = (id)v15;
        if (v22) {
          id v23 = v22;
        }
        *v19++ = v23;
        ++v20;
        ++v21;
        --v18;
      }
      while (v18);
      id v16 = *(void **)(v4 + 112);
      uint64_t v14 = v31;
      uint64_t v12 = v32;
    }
    unint64_t v24 = v16[12];
    uint64_t v25 = v16[13];
    if (v24 < v25 + v24)
    {
      int v26 = (void *)(v12 + 8 * v24);
      uint64_t v27 = (void *)(v14 + 8 * v24);
      uint64_t v28 = (void **)(v13 + 8 * v24);
      do
      {
        if (v13) {
          uint64_t v29 = *v28;
        }
        else {
          uint64_t v29 = (void *)[a1 valueForKey:*v27];
        }
        id v30 = (id)v15;
        if (v29)
        {
          if ((_BYTE)z9dsptsiQ80etb9782fsrs98bfdle88) {
            id v30 = v29;
          }
          else {
            id v30 = -[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:](v5, v29, v6);
          }
        }
        *v26++ = v30;
        ++v27;
        ++v28;
        --v25;
      }
      while (v25);
    }
    return v33;
  }
  else
  {
    uint64_t v9 = (objc_class *)MEMORY[0x1E4F1C9E8];
    return (NSKnownKeysDictionary *)objc_alloc_init(v9);
  }
}

uint64_t _newConflictRecordForObject(void *a1, void *a2, unint64_t a3, int a4)
{
  uint64_t v8 = _newObjectGraphStyleForSQLRow(a2, a1);
  uint64_t v9 = _newObjectGraphStyleForSQLRow((void *)a3, a1);
  uint64_t v10 = [NSMergeConflict alloc];
  if (a3) {
    a3 = [(id)a3 _versionNumber];
  }
  if (a2) {
    uint64_t v11 = [a2 _versionNumber];
  }
  else {
    uint64_t v11 = 0;
  }
  if (a4) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v9;
  }
  uint64_t v13 = [(NSMergeConflict *)v10 initWithSource:a1 newVersion:a3 oldVersion:v11 cachedSnapshot:v8 persistedSnapshot:v12];

  return v13;
}

void *_performExhaustiveOptimisticLockingDetectionForSaveRequest(uint64_t a1, void *a2, int a3)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v70 = a1;
  if (a1 && (a1 = *(void *)(a1 + 96)) != 0 && (uint64_t v4 = *(void *)(a1 + 8)) != 0) {
    uint64_t v5 = *(void **)(v4 + 32);
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = -[NSSQLSavePlan newObjectsForExhaustiveLockConflictDetection](a1);
  if (v5)
  {
    if ([a2 count])
    {
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      uint64_t v7 = [a2 countByEnumeratingWithState:&v75 objects:v80 count:16];
      if (v7)
      {
        uint64_t v8 = *(void *)v76;
        do
        {
          for (uint64_t i = 0; i != v7; ++i)
          {
            if (*(void *)v76 != v8) {
              objc_enumerationMutation(a2);
            }
            objc_msgSend(v6, "addObject:", objc_msgSend(v5, "objectWithID:", *(void *)(*((void *)&v75 + 1) + 8 * i)));
          }
          uint64_t v7 = [a2 countByEnumeratingWithState:&v75 objects:v80 count:16];
        }
        while (v7);
      }
    }
  }
  int v68 = (void *)[MEMORY[0x1E4F1CA80] set];
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  uint64_t v10 = [a2 countByEnumeratingWithState:&v71 objects:v79 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v72;
    do
    {
      for (uint64_t j = 0; j != v10; ++j)
      {
        if (*(void *)v72 != v11) {
          objc_enumerationMutation(a2);
        }
        uint64_t v13 = *(void **)(*((void *)&v71 + 1) + 8 * j);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          uint64_t v13 = (void *)[v13 objectID];
        }
        if (v13) {
          [v68 addObject:v13];
        }
      }
      uint64_t v10 = [a2 countByEnumeratingWithState:&v71 objects:v79 count:16];
    }
    while (v10);
  }
  uint64_t v64 = [(id)v70 rowCache];
  if (v70) {
    uint64_t v58 = *(void *)(v70 + 24);
  }
  else {
    uint64_t v58 = 0;
  }
  uint64_t v14 = [v6 count];
  uint64_t v62 = (void *)[MEMORY[0x1E4F1CA48] array];
  if (v14)
  {
    uint64_t v60 = (void *)+[_PFRoutines _groupObjectsByRootEntity:]((uint64_t)_PFRoutines, v6);
    uint64_t v59 = [v60 count];
    if (v59)
    {
      uint64_t v15 = 0;
      CFMutableArrayRef cf = 0;
      while (1)
      {
        uint64_t v67 = objc_msgSend((id)objc_msgSend(v60, "objectAtIndex:", v15), "sortedArrayUsingFunction:context:", compareManagedObjectsBySQLPKs, 0);
        if (cf) {
          CFRelease(cf);
        }
        id v16 = v70 ? *(void **)(v70 + 8) : 0;
        CFMutableArrayRef cf = _rowsForConflictDetection(v16, v67, v58);
        unint64_t Count = CFArrayGetCount(cf);
        uint64_t v66 = [v67 count];
        if (v66) {
          break;
        }
LABEL_75:
        if (++v15 == v59)
        {
          if (cf) {
            CFRelease(cf);
          }
          goto LABEL_80;
        }
      }
      uint64_t v17 = 0;
      unint64_t idx = 1;
      while (1)
      {
        uint64_t v18 = (void *)MEMORY[0x18C127630]();
        if (idx >= Count) {
          CFAllocatorRef ValueAtIndex = 0;
        }
        else {
          CFAllocatorRef ValueAtIndex = CFArrayGetValueAtIndex(cf, idx);
        }
        long long v20 = (void *)[v67 objectAtIndex:v17];
        uint64_t v21 = (void *)[v20 objectID];
        uint64_t v22 = -[NSSQLSaveChangesRequestContext originalRowForObjectID:](v70, v21);
        if (!v22)
        {
          uint64_t v23 = -[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:](v70, (uint64_t)v21);
          unint64_t v24 = (id *)v23;
          if (v23) {
            *(unsigned char *)(v23 + 104) = 1;
          }
          if (v70) {
            uint64_t v25 = *(void **)(v70 + 24);
          }
          else {
            uint64_t v25 = 0;
          }
          -[NSSQLStoreRequestContext setConnection:](v23, v25);
          -[NSSQLStoreRequestContext setQueryGenerationToken:](v24, 0);
          int v26 = _executeObjectFaultRequest((uint64_t)v24);
          uint64_t v22 = (os_unfair_lock_s *)v26;
          if (v70 && v26) {
            [*(id *)(v70 + 136) setObject:v26 forKey:v21];
          }
          -[NSSQLStoreRequestContext setConnection:]((uint64_t)v24, 0);
        }
        if (!ValueAtIndex || [v21 _referenceData64] != *ValueAtIndex) {
          break;
        }
        if (v22) {
          uint64_t v27 = *(unsigned int *)(*(void *)&v22[10]._os_unfair_lock_opaque + 12);
        }
        else {
          uint64_t v27 = 0;
        }
        if (v27 != ValueAtIndex[1]
          || objc_msgSend(v68, "containsObject:", -[os_unfair_lock_s objectID](v22, "objectID")))
        {
          uint64_t v28 = -[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:](v70, (uint64_t)v21);
          uint64_t v29 = (id *)v28;
          if (v28) {
            *(unsigned char *)(v28 + 104) = 1;
          }
          if (v70) {
            id v30 = *(void **)(v70 + 24);
          }
          else {
            id v30 = 0;
          }
          -[NSSQLStoreRequestContext setConnection:](v28, v30);
          -[NSSQLStoreRequestContext setQueryGenerationToken:](v29, 0);
          uint64_t v31 = _executeObjectFaultRequest((uint64_t)v29);
          -[NSSQLStoreRequestContext setConnection:]((uint64_t)v29, 0);

          uint64_t v32 = (void *)_newConflictRecordForObject(v20, v22, (unint64_t)v31, a3);
          if ((int)-[NSSQLStoreRequestContext debugLogLevel](v70) < 2)
          {
            if ((int)-[NSSQLStoreRequestContext debugLogLevel](v70) >= 1) {
              _NSCoreDataLog(4, @"Optimistic locking failure for %@.  Row was updated.", v51, v52, v53, v54, v55, v56, (uint64_t)v21);
            }
          }
          else
          {
            _NSCoreDataLog(4, @"Optimistic locking failure for %@.  Row was updated.  Original row = %@ New Row = %@", v33, v34, v35, v36, v37, v38, (uint64_t)v21);
          }
          goto LABEL_65;
        }
LABEL_67:
        ++idx;
LABEL_68:
        if (v66 == ++v17) {
          goto LABEL_75;
        }
      }
      uint64_t v32 = (void *)_newConflictRecordForObject(v20, v22, 0, 0);
      -[NSPersistentStoreCache forgetRowForObjectID:](v64, v21);
      if ((int)-[NSSQLStoreRequestContext debugLogLevel](v70) < 2)
      {
        if ((int)-[NSSQLStoreRequestContext debugLogLevel](v70) >= 1) {
          _NSCoreDataLog(4, @"Optimistic locking failure for %@.  Row was deleted.", v45, v46, v47, v48, v49, v50, (uint64_t)v21);
        }
      }
      else
      {
        _NSCoreDataLog(4, @"Optimistic locking failure for %@.  Row was deleted.  Original row = %@ New Row = <deleted>", v39, v40, v41, v42, v43, v44, (uint64_t)v21);
      }
      uint64_t v31 = 0;
LABEL_65:
      if (v32)
      {
        [v62 addObject:v32];

        if (!v31) {
          goto LABEL_68;
        }
      }
      goto LABEL_67;
    }
  }
LABEL_80:
  if ([v62 count]) {
    return v62;
  }
  else {
    return 0;
  }
}

void sub_18AE13B1C()
{
}

void sub_18AE13B3C()
{
  if (v0) {
    JUMPOUT(0x18AE13B44);
  }
  JUMPOUT(0x18AE13B58);
}

void sub_18AE13B4C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(a1);
}

id faultRowWithObjectID(uint64_t a1, void *a2)
{
  uint64_t v3 = -[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:]((uint64_t)a2, a1);
  uint64_t v4 = (void *)v3;
  if (v3) {
    *(unsigned char *)(v3 + 104) = 1;
  }
  if (a2) {
    uint64_t v5 = (void *)a2[3];
  }
  else {
    uint64_t v5 = 0;
  }
  -[NSSQLStoreRequestContext setConnection:](v3, v5);
  id v7 = _executeNewRowValuesForObjectFaultRequest(v4);
  if (!v7)
  {
    if (v4)
    {
      uint64_t v8 = (void *)v4[5];
      if (a2)
      {
LABEL_8:
        objc_setProperty_nonatomic(a2, v6, v8, 40);
        id v7 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v8 = 0;
      if (a2) {
        goto LABEL_8;
      }
    }
    id v7 = 0;
  }
LABEL_9:
  -[NSSQLStoreRequestContext setConnection:]((uint64_t)v4, 0);

  return v7;
}

void sub_18AE13C24(_Unwind_Exception *a1)
{
}

void sub_18AE13C44(void *a1)
{
}

id _performExhaustiveUniquenessConflictDetectionForSaveRequest(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  uint64_t v247 = *MEMORY[0x1E4F143B8];
  if (a1) {
    a1 = *(void *)(a1 + 96);
  }
  id v146 = -[NSSQLSavePlan newObjectsForUniquenessConflictDetectionGivenReportedFailures:](a1, a2);
  obuint64_t j = (id)+[_PFRoutines _rootEntityGroupsForObjects:passingBlock:]((uint64_t)_PFRoutines, v146, (uint64_t)&__block_literal_global_39);
  id v147 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  uint64_t v205 = v2;
  if (v2)
  {
    uint64_t v154 = *(void *)(v2 + 24);
    uint64_t v164 = *(void **)(v2 + 32);
    uint64_t v171 = [*(id *)(v2 + 8) model];
    uint64_t v166 = *(void **)(v2 + 8);
  }
  else
  {
    uint64_t v171 = 0;
    uint64_t v154 = 0;
    uint64_t v164 = 0;
    uint64_t v166 = 0;
  }
  uint64_t v201 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v210 = 0u;
  long long v211 = 0u;
  long long v212 = 0u;
  long long v213 = 0u;
  uint64_t v160 = [obj countByEnumeratingWithState:&v210 objects:v245 count:16];
  if (v160)
  {
    id v158 = *(id *)v211;
LABEL_7:
    id v173 = 0;
    while (1)
    {
      if (*(id *)v211 != v158) {
        objc_enumerationMutation(obj);
      }
      id v168 = *(id *)(*((void *)&v210 + 1) + 8 * (void)v173);
      uint64_t v3 = objc_msgSend((id)objc_msgSend(v168, "lastObject"), "entity");
      if (v3)
      {
        if ((*(unsigned char *)(v3 + 120) & 4) != 0)
        {
          uint64_t v4 = *(void **)(v3 + 72);
        }
        else
        {
          do
          {
            uint64_t v4 = (void *)v3;
            uint64_t v3 = [(id)v3 superentity];
          }
          while (v3);
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      uint64_t v184 = (void *)_sqlCoreLookupSQLEntityForEntityDescription(v166, v4);
      uint64_t v179 = objc_msgSend((id)objc_msgSend(v4, "subentities"), "count");
      if (v184) {
        uint64_t v5 = (void *)v184[26];
      }
      else {
        uint64_t v5 = 0;
      }
      id v199 = v5;
      if (![v5 count]) {
        goto LABEL_121;
      }
      id v6 = objc_alloc_init(MEMORY[0x1E4F28B28]);
      id v7 = +[NSSQLiteAdapter generateStatementForCheckingUniqueProperties:onObjects:usingSQLCore:]((uint64_t)NSSQLiteAdapter, v199, v168, v166);
      uint64_t v8 = v7;
      [v6 drain];
      uint64_t v9 = v7;
      id v10 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v11 = v10;
      if (!v184) {
        break;
      }
      [v10 addObject:v184[16]];
      if (v179)
      {
        uint64_t v12 = v184[17];
LABEL_21:
        [v11 addObject:v12];
      }
LABEL_22:
      uint64_t v175 = [v11 count];
      long long v239 = 0u;
      long long v240 = 0u;
      *(_OWORD *)long long v237 = 0u;
      long long v238 = 0u;
      uint64_t v13 = [v199 countByEnumeratingWithState:v237 objects:v244 count:16];
      if (v13)
      {
        uint64_t v14 = *(void *)v238;
        do
        {
          for (uint64_t i = 0; i != v13; ++i)
          {
            if (*(void *)v238 != v14) {
              objc_enumerationMutation(v199);
            }
            uint64_t v16 = *(void *)(*(void *)&v237[8] + 8 * i);
            if (v16)
            {
              int v17 = *(unsigned __int8 *)(v16 + 24);
              if (v17 == 7 || v17 == 1) {
                objc_msgSend(v11, "addObject:");
              }
            }
          }
          uint64_t v13 = [v199 countByEnumeratingWithState:v237 objects:v244 count:16];
        }
        while (v13);
      }
      id v177 = -[NSSQLiteConnection executeAttributeUniquenessCheckSQLStatement:returningColumns:](v154, v7, v11);

      uint64_t v19 = [v177 count];
      id v162 = objc_alloc_init(MEMORY[0x1E4F28B28]);
      if (!v19) {
        goto LABEL_120;
      }
      long long v235 = 0u;
      long long v236 = 0u;
      long long v233 = 0u;
      long long v234 = 0u;
      uint64_t v156 = [v168 countByEnumeratingWithState:&v233 objects:v243 count:16];
      if (!v156) {
        goto LABEL_120;
      }
      long long v20 = *(void **)v234;
      long long v149 = *(void **)v234;
LABEL_39:
      uint64_t v21 = 0;
LABEL_40:
      if (*(void **)v234 != v20)
      {
        uint64_t v22 = v21;
        objc_enumerationMutation(v168);
        uint64_t v21 = v22;
      }
      uint64_t v151 = v21;
      id v203 = *(id *)(*((void *)&v233 + 1) + 8 * v21);
      uint64_t v195 = _sqlCoreLookupSQLEntityForEntityDescription(v166, (void *)[v203 entity]);
      long long v231 = 0u;
      long long v232 = 0u;
      long long v229 = 0u;
      long long v230 = 0u;
      uint64_t v186 = [v177 countByEnumeratingWithState:&v229 objects:&v225 count:16];
      if (v186)
      {
        uint64_t v181 = *(void *)v230;
        while (1)
        {
          uint64_t v23 = 0;
          do
          {
            if (*(void *)v230 != v181)
            {
              uint64_t v24 = v23;
              objc_enumerationMutation(v177);
              uint64_t v23 = v24;
            }
            uint64_t v188 = v23;
            uint64_t v192 = *(void **)(*((void *)&v229 + 1) + 8 * v23);
            CFAllocatorContext context = (void *)MEMORY[0x18C127630]();
            id v197 = (id)[MEMORY[0x1E4F1CA48] array];
            long long v216 = 0u;
            long long v217 = 0u;
            long long v214 = 0u;
            long long v215 = 0u;
            uint64_t v25 = [v199 countByEnumeratingWithState:&v214 objects:v246 count:16];
            if (v25)
            {
              uint64_t v26 = *(void *)v215;
              uint64_t v27 = v175;
              do
              {
                uint64_t v28 = 0;
                do
                {
                  if (*(void *)v215 != v26) {
                    objc_enumerationMutation(v199);
                  }
                  uint64_t v29 = *(void *)(*((void *)&v214 + 1) + 8 * v28);
                  if (![(id)-[NSSQLEntity properties](v195) containsObject:v29]) {
                    goto LABEL_73;
                  }
                  if (v29)
                  {
                    id v30 = (void *)v29;
                    if (*(unsigned char *)(v29 + 24) == 7) {
                      id v30 = (void *)[(id)v29 propertyDescription];
                    }
                  }
                  else
                  {
                    id v30 = 0;
                  }
                  uint64_t v31 = objc_msgSend(v203, "valueForKey:", objc_msgSend(v30, "name"));
                  if ([v31 isNSString]) {
                    uint64_t v31 = (void *)+[_PFRoutines sanitize:]((uint64_t)_PFRoutines, v31);
                  }
                  if (!v29) {
                    goto LABEL_62;
                  }
                  int v32 = *(unsigned __int8 *)(v29 + 24);
                  if (v32 != 7)
                  {
                    if (v32 == 1)
                    {
                      id v33 = (id)[v192 objectAtIndex:v27];
                      goto LABEL_72;
                    }
LABEL_62:
                    uint64_t v34 = [NSString stringWithUTF8String:"Unsupported unique attribute type: %@"];
                    _NSCoreDataLog(17, v34, v35, v36, v37, v38, v39, v40, v29);
                    uint64_t v41 = __pflogFaultLog;
                    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
                    {
                      *(_DWORD *)buf = 138412290;
                      uint64_t v242 = v29;
                      _os_log_fault_impl(&dword_18AB82000, v41, OS_LOG_TYPE_FAULT, "CoreData: Unsupported unique attribute type: %@", buf, 0xCu);
                    }
                    id v33 = 0;
                    goto LABEL_72;
                  }
                  uint64_t v42 = (void *)[v192 objectAtIndex:v27];
                  uint64_t v43 = [(id)v29 destinationEntity];
                  if (*(void *)(v29 + 72))
                  {
                    uint64_t v44 = (void *)[v192 objectAtIndex:++v27];
                    if (v205) {
                      uint64_t v45 = *(void **)(v205 + 8);
                    }
                    else {
                      uint64_t v45 = 0;
                    }
                    uint64_t v43 = objc_msgSend((id)objc_msgSend(v45, "model"), "entityForID:", objc_msgSend(v44, "longValue"));
                  }
                  uint64_t v46 = v43;
                  uint64_t v47 = [v42 longLongValue];
                  if (v205) {
                    uint64_t v48 = (void *)[*(id *)(v205 + 8) newObjectIDForEntity:v46 pk:v47];
                  }
                  else {
                    uint64_t v48 = 0;
                  }
                  id v33 = v48;
                  uint64_t v31 = (void *)[v31 objectID];
LABEL_72:
                  if ([v33 isEqual:v31])
                  {
                    objc_msgSend(v197, "addObject:", objc_msgSend((id)v29, "name"));
                    goto LABEL_81;
                  }
LABEL_73:
                  ++v27;
                  ++v28;
                }
                while (v25 != v28);
                uint64_t v49 = [v199 countByEnumeratingWithState:&v214 objects:v246 count:16];
                uint64_t v25 = v49;
              }
              while (v49);
            }
LABEL_81:
            if ([v197 count])
            {
              uint64_t v50 = (void *)[v203 objectID];
              uint64_t v51 = objc_msgSend((id)objc_msgSend(v192, "objectAtIndex:", 0), "unsignedIntegerValue");
              uint64_t v52 = v184;
              if (v179) {
                uint64_t v52 = _sqlEntityForEntityID(v171, objc_msgSend((id)objc_msgSend(v192, "objectAtIndex:", 1), "unsignedIntegerValue"));
              }
              if (v205)
              {
                uint64_t v193 = (void *)[*(id *)(v205 + 8) newObjectIDForEntity:v52 pk:v51];
                char v53 = [v50 isEqual:v193];
              }
              else
              {
                uint64_t v193 = 0;
                char v53 = [v50 isEqual:0];
              }
              if ((v53 & 1) == 0)
              {
                id v182 = faultRowWithObjectID((uint64_t)v193, (void *)v205);
                if (v182)
                {
                  uint64_t v54 = (void *)[v164 objectWithID:v193];
                  if ([v203 isInserted])
                  {
                    uint64_t v55 = 0;
                  }
                  else
                  {
                    id v56 = faultRowWithObjectID((uint64_t)v50, (void *)v205);
                    uint64_t v57 = v56;
                    if (v56)
                    {
                      uint64_t v55 = _newObjectGraphStyleForSQLRow(v56, v203);
                    }
                    else
                    {
                      uint64_t v201 = 0;
                      uint64_t v55 = 0;
                    }
                  }
                  if (v201)
                  {
                    uint64_t v58 = _newObjectGraphStyleForSQLRow(v182, v54);
                    long long v208 = 0u;
                    long long v209 = 0u;
                    long long v206 = 0u;
                    long long v207 = 0u;
                    uint64_t v59 = [v197 countByEnumeratingWithState:&v206 objects:&v221 count:16];
                    if (v59)
                    {
                      uint64_t v60 = *(void *)v207;
                      do
                      {
                        for (uint64_t j = 0; j != v59; ++j)
                        {
                          if (*(void *)v207 != v60) {
                            objc_enumerationMutation(v197);
                          }
                          uint64_t v62 = *(void *)(*((void *)&v206 + 1) + 8 * j);
                          uint64_t v63 = [NSConstraintConflict alloc];
                          uint64_t v220 = v62;
                          uint64_t v64 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v220 count:1];
                          id v219 = v203;
                          uint64_t v65 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v219 count:1];
                          uint64_t v66 = (uint64_t)v55;
                          if (!v55) {
                            uint64_t v66 = [MEMORY[0x1E4F1CA98] null];
                          }
                          uint64_t v218 = v66;
                          uint64_t v67 = -[NSConstraintConflict initWithConstraint:databaseObject:databaseSnapshot:conflictingObjects:conflictingSnapshots:](v63, "initWithConstraint:databaseObject:databaseSnapshot:conflictingObjects:conflictingSnapshots:", v64, v54, v58, v65, [MEMORY[0x1E4F1C978] arrayWithObjects:&v218 count:1]);
                          [v201 addObject:v67];
                        }
                        uint64_t v59 = [v197 countByEnumeratingWithState:&v206 objects:&v221 count:16];
                      }
                      while (v59);
                    }
                  }
                }
                else
                {
                  uint64_t v201 = 0;
                }
              }
            }
            if (!v201) {
              goto LABEL_119;
            }
            uint64_t v23 = v188 + 1;
          }
          while (v188 + 1 != v186);
          uint64_t v68 = [v177 countByEnumeratingWithState:&v229 objects:&v225 count:16];
          uint64_t v186 = v68;
          if (!v68)
          {
LABEL_116:
            long long v20 = v149;
            uint64_t v21 = v151 + 1;
            if (v151 + 1 == v156)
            {
              uint64_t v156 = [v168 countByEnumeratingWithState:&v233 objects:v243 count:16];
              long long v20 = v149;
              if (!v156) {
                goto LABEL_120;
              }
              goto LABEL_39;
            }
            goto LABEL_40;
          }
        }
      }
      if (v201) {
        goto LABEL_116;
      }
LABEL_119:
      uint64_t v201 = 0;
LABEL_120:
      [v162 drain];
LABEL_121:
      uint64_t v2 = v205;
      if (!v201)
      {
        id v70 = 0;
        goto LABEL_132;
      }
      id v173 = (char *)v173 + 1;
      if (v173 == (id)v160)
      {
        uint64_t v69 = [obj countByEnumeratingWithState:&v210 objects:v245 count:16];
        uint64_t v160 = v69;
        uint64_t v2 = v205;
        if (!v69) {
          goto LABEL_131;
        }
        goto LABEL_7;
      }
    }
    [v10 addObject:0];
    if (!v179) {
      goto LABEL_22;
    }
    uint64_t v12 = 0;
    goto LABEL_21;
  }
LABEL_131:
  id v70 = v201;
LABEL_132:
  uint64_t v167 = v70;
  [v147 drain];
  if (v2)
  {
    if (*(void *)(v2 + 40))
    {

      goto LABEL_135;
    }
    id v148 = objc_alloc_init(MEMORY[0x1E4F28B28]);
    uint64_t v161 = *(void *)(v2 + 24);
    uint64_t v183 = *(void **)(v2 + 32);
    uint64_t v189 = [*(id *)(v2 + 8) model];
    id v170 = *(void **)(v2 + 8);
  }
  else
  {
    id v148 = objc_alloc_init(MEMORY[0x1E4F28B28]);
    uint64_t v189 = 0;
    uint64_t v161 = 0;
    uint64_t v183 = 0;
    id v170 = 0;
  }
  uint64_t v185 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v225 = 0u;
  long long v226 = 0u;
  long long v227 = 0u;
  long long v228 = 0u;
  uint64_t v157 = [obj countByEnumeratingWithState:&v225 objects:v246 count:16];
  if (!v157) {
    goto LABEL_250;
  }
  uint64_t v152 = *(void *)v226;
  do
  {
    uint64_t v155 = 0;
    do
    {
      if (*(void *)v226 != v152) {
        objc_enumerationMutation(obj);
      }
      id v174 = *(id *)(*((void *)&v225 + 1) + 8 * v155);
      long long v150 = (void *)MEMORY[0x18C127630]();
      uint64_t v73 = objc_msgSend((id)objc_msgSend(v174, "lastObject"), "entity");
      if (v73)
      {
        if ((*(unsigned char *)(v73 + 120) & 4) != 0)
        {
          long long v74 = *(void **)(v73 + 72);
        }
        else
        {
          do
          {
            long long v74 = (void *)v73;
            uint64_t v73 = [(id)v73 superentity];
          }
          while (v73);
        }
      }
      else
      {
        long long v74 = 0;
      }
      id v196 = (void *)_sqlCoreLookupSQLEntityForEntityDescription(v170, v74);
      uint64_t v194 = objc_msgSend((id)objc_msgSend(v74, "subentities"), "count");
      if (v196) {
        long long v75 = (void *)v196[27];
      }
      else {
        long long v75 = 0;
      }
      long long v223 = 0u;
      long long v224 = 0u;
      long long v221 = 0u;
      long long v222 = 0u;
      id v159 = v75;
      id v169 = (id)[v75 countByEnumeratingWithState:&v221 objects:v245 count:16];
      if (v169)
      {
        uint64_t v165 = *(void *)v222;
        do
        {
          uint64_t v76 = 0;
          do
          {
            if (*(void *)v222 != v165)
            {
              uint64_t v77 = v76;
              objc_enumerationMutation(v159);
              uint64_t v76 = v77;
            }
            uint64_t v172 = v76;
            id v204 = *(id *)(*((void *)&v221 + 1) + 8 * v76);
            id v78 = objc_alloc_init(MEMORY[0x1E4F28B28]);
            long long v79 = +[NSSQLiteAdapter generateStatementForCheckingMulticolumnConstraint:onObjects:usingSQLCore:]((uint64_t)NSSQLiteAdapter, v204, v174, v170);
            long long v80 = v79;
            [v78 drain];
            uint64_t v81 = v79;
            if (!v79) {
              goto LABEL_240;
            }
            id v163 = objc_alloc_init(MEMORY[0x1E4F28B28]);
            uint64_t v82 = [v204 count];
            uint64_t v187 = [v204 valueForKey:@"name"];
            id v83 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
            __int16 v84 = v83;
            if (!v196)
            {
              [v83 addObject:0];
              if (!v194) {
                goto LABEL_160;
              }
              uint64_t v85 = 0;
              goto LABEL_159;
            }
            [v83 addObject:v196[16]];
            if (v194)
            {
              uint64_t v85 = v196[17];
LABEL_159:
              [v84 addObject:v85];
            }
LABEL_160:
            id contexta = (char *)[v84 count];
            long long v216 = 0u;
            long long v217 = 0u;
            long long v214 = 0u;
            long long v215 = 0u;
            uint64_t v86 = [v204 countByEnumeratingWithState:&v214 objects:v244 count:16];
            if (v86)
            {
              uint64_t v87 = *(void *)v215;
              do
              {
                for (uint64_t k = 0; k != v86; ++k)
                {
                  if (*(void *)v215 != v87) {
                    objc_enumerationMutation(v204);
                  }
                  uint64_t v89 = *(void *)(*((void *)&v214 + 1) + 8 * k);
                  if (v89)
                  {
                    int v90 = *(unsigned __int8 *)(v89 + 24);
                    if (v90 == 7 || v90 == 1) {
                      objc_msgSend(v84, "addObject:");
                    }
                  }
                }
                uint64_t v86 = [v204 countByEnumeratingWithState:&v214 objects:v244 count:16];
              }
              while (v86);
            }
            uint64_t v202 = -[NSSQLiteConnection executeMulticolumnUniquenessCheckSQLStatement:returningColumns:](v161, v79, v84);

            id v198 = (id)[v202 count];
            if ([v202 count])
            {
              long long v212 = 0u;
              long long v213 = 0u;
              long long v210 = 0u;
              long long v211 = 0u;
              id v178 = (id)[v174 countByEnumeratingWithState:&v210 objects:v243 count:16];
              if (v178)
              {
                uint64_t v176 = *(void *)v211;
                do
                {
                  for (uint64_t m = 0; m != v178; uint64_t m = (char *)m + 1)
                  {
                    if (*(void *)v211 != v176) {
                      objc_enumerationMutation(v174);
                    }
                    if (v198)
                    {
                      uint64_t v92 = 0;
                      unint64_t v93 = *(void **)(*((void *)&v210 + 1) + 8 * (void)m);
                      while (1)
                      {
                        id v200 = (id)MEMORY[0x18C127630]();
                        uint64_t v94 = [v202 objectAtIndex:v92];
                        if (v82) {
                          break;
                        }
LABEL_209:
                        uint64_t v118 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v202, "objectAtIndex:", v92), "objectAtIndex:", 0), "unsignedIntegerValue");
                        unint64_t v119 = v196;
                        if (v194) {
                          unint64_t v119 = _sqlEntityForEntityID(v189, objc_msgSend((id)objc_msgSend((id)objc_msgSend(v202, "objectAtIndex:", v92), "objectAtIndex:", 1), "unsignedIntegerValue"));
                        }
                        if (v205) {
                          unint64_t v120 = (void *)[*(id *)(v205 + 8) newObjectIDForEntity:v119 pk:v118];
                        }
                        else {
                          unint64_t v120 = 0;
                        }
                        unint64_t v121 = (void *)[v93 objectID];
                        if (([v121 isEqual:v120] & 1) == 0)
                        {
                          uint64_t v122 = -[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:](v205, (uint64_t)v120);
                          int v123 = (id *)v122;
                          if (v122) {
                            *(unsigned char *)(v122 + 104) = 1;
                          }
                          if (v205) {
                            unint64_t v124 = *(void **)(v205 + 24);
                          }
                          else {
                            unint64_t v124 = 0;
                          }
                          -[NSSQLStoreRequestContext setConnection:](v122, v124);
                          -[NSSQLStoreRequestContext setQueryGenerationToken:](v123, 0);
                          unint64_t v125 = _executeObjectFaultRequest((uint64_t)v123);
                          -[NSSQLStoreRequestContext setConnection:]((uint64_t)v123, 0);

                          if ([v93 isInserted])
                          {
                            unsigned int v126 = 0;
                          }
                          else
                          {
                            uint64_t v127 = -[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:](v205, (uint64_t)v121);
                            long long v128 = (id *)v127;
                            if (v127) {
                              *(unsigned char *)(v127 + 104) = 1;
                            }
                            if (v205) {
                              uint64_t v129 = *(void **)(v205 + 24);
                            }
                            else {
                              uint64_t v129 = 0;
                            }
                            -[NSSQLStoreRequestContext setConnection:](v127, v129);
                            -[NSSQLStoreRequestContext setQueryGenerationToken:](v128, 0);
                            unsigned int v126 = _executeObjectFaultRequest((uint64_t)v128);
                            -[NSSQLStoreRequestContext setConnection:]((uint64_t)v128, 0);
                          }
                          long long v130 = (void *)[v183 objectWithID:v120];
                          uint64_t v131 = _newObjectGraphStyleForSQLRow(v125, v130);
                          if ([v93 isInserted]) {
                            long long v132 = 0;
                          }
                          else {
                            long long v132 = _newObjectGraphStyleForSQLRow(v126, v93);
                          }
                          long long v133 = [NSConstraintConflict alloc];
                          *(void *)&long long v233 = v93;
                          uint64_t v134 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v233 count:1];
                          uint64_t v135 = (uint64_t)v132;
                          if (!v132) {
                            uint64_t v135 = [MEMORY[0x1E4F1CA98] null];
                          }
                          *(void *)&long long v229 = v135;
                          uint64_t v136 = -[NSConstraintConflict initWithConstraint:databaseObject:databaseSnapshot:conflictingObjects:conflictingSnapshots:](v133, "initWithConstraint:databaseObject:databaseSnapshot:conflictingObjects:conflictingSnapshots:", v187, v130, v131, v134, [MEMORY[0x1E4F1C978] arrayWithObjects:&v229 count:1]);
                          [v185 addObject:v136];
                        }
LABEL_232:
                        if ((id)++v92 == v198) {
                          goto LABEL_237;
                        }
                      }
                      unint64_t v95 = (void *)v94;
                      uint64_t v96 = 0;
                      id v97 = contexta;
                      while (2)
                      {
                        unint64_t v98 = (unsigned char *)[v204 objectAtIndex:v96];
                        uint64_t v99 = (uint64_t)v98;
                        if (v98)
                        {
                          if (v98[24] == 7) {
                            unint64_t v98 = (unsigned char *)[v98 propertyDescription];
                          }
                        }
                        else
                        {
                          unint64_t v98 = 0;
                        }
                        unsigned int v100 = objc_msgSend(v93, "valueForKey:", objc_msgSend(v98, "name"));
                        if ([v100 isNSString]) {
                          unsigned int v100 = (void *)+[_PFRoutines sanitize:]((uint64_t)_PFRoutines, v100);
                        }
                        if (!v99) {
                          goto LABEL_193;
                        }
                        int v101 = *(unsigned __int8 *)(v99 + 24);
                        if (v101 == 7)
                        {
                          uint64_t v111 = (void *)[v95 objectAtIndex:v97];
                          uint64_t v112 = [(id)v99 destinationEntity];
                          if (*(void *)(v99 + 72))
                          {
                            uint64_t v113 = (void *)[v95 objectAtIndex:++v97];
                            if (v205) {
                              uint64_t v114 = *(void **)(v205 + 8);
                            }
                            else {
                              uint64_t v114 = 0;
                            }
                            uint64_t v112 = objc_msgSend((id)objc_msgSend(v114, "model"), "entityForID:", objc_msgSend(v113, "longValue"));
                          }
                          uint64_t v115 = v112;
                          uint64_t v116 = [v111 longLongValue];
                          if (v205) {
                            unint64_t v117 = (void *)[*(id *)(v205 + 8) newObjectIDForEntity:v115 pk:v116];
                          }
                          else {
                            unint64_t v117 = 0;
                          }
                          id v102 = v117;
                          unsigned int v100 = (void *)[v100 objectID];
                        }
                        else
                        {
                          if (v101 == 1)
                          {
                            id v102 = (id)[v95 objectAtIndex:v97];
                            goto LABEL_203;
                          }
LABEL_193:
                          uint64_t v103 = [NSString stringWithUTF8String:"Unsupported unique attribute type: %@"];
                          _NSCoreDataLog(17, v103, v104, v105, v106, v107, v108, v109, v99);
                          long long v110 = __pflogFaultLog;
                          if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
                          {
                            *(_DWORD *)long long v237 = 138412290;
                            *(void *)&v237[4] = v99;
                            _os_log_fault_impl(&dword_18AB82000, v110, OS_LOG_TYPE_FAULT, "CoreData: Unsupported unique attribute type: %@", v237, 0xCu);
                          }
                          id v102 = 0;
                        }
LABEL_203:
                        if (![v100 isEqual:v102]) {
                          goto LABEL_232;
                        }
                        ++v97;
                        if (v82 == ++v96) {
                          goto LABEL_209;
                        }
                        continue;
                      }
                    }
LABEL_237:
                    ;
                  }
                  id v178 = (id)[v174 countByEnumeratingWithState:&v210 objects:v243 count:16];
                }
                while (v178);
              }
            }

LABEL_240:
            uint64_t v76 = v172 + 1;
          }
          while ((id)(v172 + 1) != v169);
          uint64_t v137 = [v159 countByEnumeratingWithState:&v221 objects:v245 count:16];
          id v169 = (id)v137;
        }
        while (v137);
      }
      ++v155;
    }
    while (v155 != v157);
    uint64_t v138 = [obj countByEnumeratingWithState:&v225 objects:v246 count:16];
    uint64_t v157 = v138;
  }
  while (v138);
LABEL_250:
  id v139 = v185;
  [v148 drain];
  if (!v205 || !*(void *)(v205 + 40))
  {
    uint64_t v140 = v167;
    if (v167 && (v141 = [v167 count], uint64_t v140 = v167, v141))
    {
      if (v139)
      {
        uint64_t v142 = [v139 count];
        uint64_t v140 = v167;
        if (v142)
        {
          id v143 = v167;
          id v71 = (id)[v167 mutableCopy];
          [v71 addObjectsFromArray:v139];
          id v144 = v71;
          goto LABEL_261;
        }
      }
      id v143 = v140;
      id v145 = v140;
    }
    else
    {
      id v143 = v140;
      id v145 = v139;
    }
    id v71 = v145;
LABEL_261:

    if (v146) {
    return v71;
    }
  }

LABEL_135:
  return 0;
}

void sub_18AE15154(_Unwind_Exception *a1)
{
}

void sub_18AE1516C(_Unwind_Exception *a1)
{
}

void sub_18AE15184(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AE15190);
}

BOOL ___performExhaustiveUniquenessConflictDetectionForSaveRequest_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 entity];

  return -[NSEntityDescription _hasUniqueProperties](v2);
}

uint64_t _rollbackTransactionForSaveRequest(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[3];
    uint64_t v3 = a1[12];
    if (v2 && *(unsigned char *)(v2 + 40)) {
      -[NSSQLiteConnection rollbackTransaction](v2);
    }
    uint64_t v4 = a1[1];
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v5 = (void *)MEMORY[0x1E4F28EA0];
  id v6 = (void *)MEMORY[0x1E4F1C9E8];
  uint64_t v7 = [NSNumber numberWithInt:4];
  if (!v3)
  {
    uint64_t v9 = [NSNumber numberWithInt:0];
    id v10 = 0;
    goto LABEL_15;
  }
  uint64_t v8 = atomic_load((unsigned int *)(v3 + 144));
  uint64_t v9 = [NSNumber numberWithInt:v8];
  id v10 = *(void **)(v3 + 8);
  if (!v10)
  {
LABEL_15:
    uint64_t v11 = 0;
    goto LABEL_10;
  }
  id v10 = (void *)[v10 persistentStoreRequest];
  uint64_t v11 = *(void *)(v3 + 8);
  if (v11) {
    uint64_t v11 = *(void *)(v11 + 32);
  }
LABEL_10:
  uint64_t v12 = objc_msgSend(v5, "notificationWithName:object:userInfo:", @"_NSSQLCoreTransactionStateChangeNotification", v4, objc_msgSend(v6, "dictionaryWithObjectsAndKeys:", v7, @"_NSSQLCoreTransactionType", v9, @"_NSSQLCoreTransientSequenceNumber", v10, @"_NSSQLCoreActiveSaveRequest", v11, @"_NSSQLCoreActiveSavingContext", a1, @"requestContext", 0));
  uint64_t v13 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];

  return [v13 postNotification:v12];
}

uint64_t ___prefetchRelationshipKeys_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = [a2 _referenceData64];
  if (v4 < [a3 _referenceData64]) {
    return -1;
  }
  else {
    return 1;
  }
}

void setMultiColumnValueDictionary_0(char *a1, id *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(unsigned int *)a2;
  Class Class = object_getClass(a1);
  uint64_t v8 = *(NSKnownKeysDictionary **)&a1[*((unsigned int *)object_getIndexedIvars(Class) + v6 + 19)];
  uint64_t v9 = v8;
  id v10 = (__CFString *)[a2[2] propertyDescription];
  if (!v8)
  {
    uint64_t v11 = objc_msgSend((id)objc_msgSend(a2[2], "propertyDescription"), "superCompositeAttribute");
    uint64_t v20 = a3;
    if (v11)
    {
      do
      {
        uint64_t v12 = v11;
        uint64_t v11 = (void *)[v11 superCompositeAttribute];
      }
      while (v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    id v13 = -[NSKnownKeysMappingStrategy initForKeys:]([NSKnownKeysMappingStrategy alloc], "initForKeys:", objc_msgSend((id)objc_msgSend(v12, "elements"), "valueForKeyPath:", @"name"));
    uint64_t v8 = [[NSKnownKeysDictionary alloc] initWithSearchStrategy:v13];

    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    uint64_t v14 = (void *)[v12 elements];
    uint64_t v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v22;
      do
      {
        uint64_t v18 = 0;
        do
        {
          if (*(void *)v22 != v17) {
            objc_enumerationMutation(v14);
          }
          uint64_t v19 = *(__CFString **)(*((void *)&v21 + 1) + 8 * v18);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            _createKnownKeysDictionaryForMultiColumnValue(v19, v8);
          }
          ++v18;
        }
        while (v16 != v18);
        uint64_t v16 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
      }
      while (v16);
    }
    a3 = v20;
  }
  -[NSKnownKeysDictionary setValue:forKeyPath:](v8, "setValue:forKeyPath:", a3, -[NSPropertyDescription _elementPath](v10));
  snapshot_set_object(a1, *(_DWORD *)a2, (uint64_t)v8);
}

void sub_18AE16A9C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE166BCLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AE17604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (v43) {
    objc_end_catch();
  }
  _Block_object_dispose(&STACK[0x218], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void sub_18AE176C0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (v2) {
      JUMPOUT(0x18AE176CCLL);
    }
    JUMPOUT(0x18AE176D0);
  }
  _Unwind_Resume(a1);
}

void sub_18AE176FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  objc_terminate();
}

void sub_18AE18A20(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2 != 2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE18210);
  }
  id v16 = objc_begin_catch(exc_buf);
  if (+[PFUbiquityLogging canLogMessageAtLevel:0])
  {
    [v16 userInfo];
    NSLog((NSString *)@"%s(%d): CoreData: Ubiquity:  Exception encountered while trying to clean up baseline: %@\nException: %@\nuserInfo: %@");
  }
  objc_exception_rethrow();
}

void sub_18AE18AE8()
{
}

void __LoadCloudKit_block_invoke()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  _MergedGlobals_90 = (uint64_t)dlopen("/System/Library/Frameworks/CloudKit.framework/CloudKit", 2);
  if (!_MergedGlobals_90 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    int v0 = 136315138;
    int v1 = dlerror();
    _os_log_fault_impl(&dword_18AB82000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "### Failed to Soft Link: /System/Library/Frameworks/CloudKit.framework/CloudKit\n%s", (uint8_t *)&v0, 0xCu);
  }
}

Class initCloudKitCKContainer()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKContainer");
  qword_1EB270828 = (uint64_t)result;
  getCloudKitCKContainerClass[0] = CloudKitCKContainerFunction;
  return result;
}

Class initCloudKitCKContainerOptions()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKContainerOptions");
  qword_1EB270830 = (uint64_t)result;
  getCloudKitCKContainerOptionsClass Class = CloudKitCKContainerOptionsFunction;
  return result;
}

Class initCloudKitCKRecordZone()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKRecordZone");
  qword_1EB270838 = (uint64_t)result;
  getCloudKitCKRecordZoneClass Class = CloudKitCKRecordZoneFunction;
  return result;
}

Class initCloudKitCKRecordZoneID()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKRecordZoneID");
  qword_1EB270840 = (uint64_t)result;
  getCloudKitCKRecordZoneIDClass[0] = CloudKitCKRecordZoneIDFunction;
  return result;
}

Class initCloudKitCKRecord()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKRecord");
  qword_1EB270848 = (uint64_t)result;
  getCloudKitCKRecordClass[0] = CloudKitCKRecordFunction;
  return result;
}

Class initCloudKitCKRecordID()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKRecordID");
  qword_1EB270850 = (uint64_t)result;
  getCloudKitCKRecordIDClass[0] = CloudKitCKRecordIDFunction;
  return result;
}

Class initCloudKitCKAcceptSharesOperation()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKAcceptSharesOperation");
  qword_1EB270858 = (uint64_t)result;
  getCloudKitCKAcceptSharesOperationClass Class = CloudKitCKAcceptSharesOperationFunction;
  return result;
}

Class initCloudKitCKFetchDatabaseChangesOperation()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKFetchDatabaseChangesOperation");
  qword_1EB270860 = (uint64_t)result;
  getCloudKitCKFetchDatabaseChangesOperationClass Class = CloudKitCKFetchDatabaseChangesOperationFunction;
  return result;
}

Class initCloudKitCKModifyRecordZonesOperation()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKModifyRecordZonesOperation");
  qword_1EB270868 = (uint64_t)result;
  getCloudKitCKModifyRecordZonesOperationClass Class = CloudKitCKModifyRecordZonesOperationFunction;
  return result;
}

Class initCloudKitCKModifyRecordsOperation()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKModifyRecordsOperation");
  qword_1EB270870 = (uint64_t)result;
  getCloudKitCKModifyRecordsOperationClass Class = CloudKitCKModifyRecordsOperationFunction;
  return result;
}

Class initCloudKitCKFetchRecordZonesOperation()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKFetchRecordZonesOperation");
  qword_1EB270878 = (uint64_t)result;
  getCloudKitCKFetchRecordZonesOperationClass Class = CloudKitCKFetchRecordZonesOperationFunction;
  return result;
}

Class initCloudKitCKFetchRecordsOperation()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKFetchRecordsOperation");
  qword_1EB270880 = (uint64_t)result;
  getCloudKitCKFetchRecordsOperationClass Class = CloudKitCKFetchRecordsOperationFunction;
  return result;
}

Class initCloudKitCKDatabaseSubscription()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKDatabaseSubscription");
  qword_1EB270888 = (uint64_t)result;
  getCloudKitCKDatabaseSubscriptionClass[0] = CloudKitCKDatabaseSubscriptionFunction;
  return result;
}

Class initCloudKitCKModifySubscriptionsOperation()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKModifySubscriptionsOperation");
  qword_1EB270890 = (uint64_t)result;
  getCloudKitCKModifySubscriptionsOperationClass Class = CloudKitCKModifySubscriptionsOperationFunction;
  return result;
}

Class initCloudKitCKAsset()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKAsset");
  qword_1EB270898 = (uint64_t)result;
  getCloudKitCKAssetClass Class = CloudKitCKAssetFunction;
  return result;
}

Class initCloudKitCKFetchRecordZoneChangesConfiguration()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKFetchRecordZoneChangesConfiguration");
  qword_1EB2708A8 = (uint64_t)result;
  getCloudKitCKFetchRecordZoneChangesConfigurationClass Class = CloudKitCKFetchRecordZoneChangesConfigurationFunction;
  return result;
}

Class initCloudKitCKFetchRecordZoneChangesOperation()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKFetchRecordZoneChangesOperation");
  qword_1EB2708B0 = (uint64_t)result;
  getCloudKitCKFetchRecordZoneChangesOperationClass Class = CloudKitCKFetchRecordZoneChangesOperationFunction;
  return result;
}

Class initCloudKitCKServerChangeToken()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKServerChangeToken");
  qword_1EB2708B8 = (uint64_t)result;
  getCloudKitCKServerChangeTokenClass[0] = CloudKitCKServerChangeTokenFunction;
  return result;
}

Class initCloudKitCKNotificationInfo()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKNotificationInfo");
  qword_1EB2708C0 = (uint64_t)result;
  getCloudKitCKNotificationInfoClass[0] = CloudKitCKNotificationInfoFunction;
  return result;
}

Class initCloudKitCKEncryptedData()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKEncryptedData");
  qword_1EB2708C8 = (uint64_t)result;
  getCloudKitCKEncryptedDataClass Class = CloudKitCKEncryptedDataFunction;
  return result;
}

Class initCloudKitCKOperationConfiguration()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKOperationConfiguration");
  qword_1EB2708D0 = (uint64_t)result;
  getCloudKitCKOperationConfigurationClass[0] = CloudKitCKOperationConfigurationFunction;
  return result;
}

Class initCloudKitCKScheduler()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKScheduler");
  qword_1EB2708D8 = (uint64_t)result;
  getCloudKitCKSchedulerClass[0] = CloudKitCKSchedulerFunction;
  return result;
}

Class initCloudKitCKSchedulerActivity()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKSchedulerActivity");
  qword_1EB2708E0 = (uint64_t)result;
  getCloudKitCKSchedulerActivityClass Class = CloudKitCKSchedulerActivityFunction;
  return result;
}

Class initCloudKitCKNotificationListener()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKNotificationListener");
  qword_1EB2708E8 = (uint64_t)result;
  getCloudKitCKNotificationListenerClass[0] = CloudKitCKNotificationListenerFunction;
  return result;
}

Class initCloudKitCKShare()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKShare");
  qword_1EB2708F0 = (uint64_t)result;
  getCloudKitCKShareClass[0] = CloudKitCKShareFunction;
  return result;
}

Class initCloudKitCKFetchShareParticipantsOperation()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKFetchShareParticipantsOperation");
  qword_1EB2708F8 = (uint64_t)result;
  getCloudKitCKFetchShareParticipantsOperationClass Class = CloudKitCKFetchShareParticipantsOperationFunction;
  return result;
}

Class initCloudKitCKFetchShareMetadataOperation()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKFetchShareMetadataOperation");
  qword_1EB270900 = (uint64_t)result;
  getCloudKitCKFetchShareMetadataOperationClass Class = CloudKitCKFetchShareMetadataOperationFunction;
  return result;
}

Class initCloudKitCKQueryOperation()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKQueryOperation");
  qword_1EB270908 = (uint64_t)result;
  getCloudKitCKQueryOperationClass Class = CloudKitCKQueryOperationFunction;
  return result;
}

Class initCloudKitCKQuery()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKQuery");
  qword_1EB270910 = (uint64_t)result;
  getCloudKitCKQueryClass Class = CloudKitCKQueryFunction;
  return result;
}

Class initCloudKitCKQueryCursor()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKQueryCursor");
  qword_1EB270918 = (uint64_t)result;
  getCloudKitCKQueryCursorClass[0] = CloudKitCKQueryCursorFunction;
  return result;
}

Class initCloudKitCKSystemSharingUIObserver()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  Class result = objc_getClass("CKSystemSharingUIObserver");
  qword_1EB270920 = (uint64_t)result;
  getCloudKitCKSystemSharingUIObserverClass Class = CloudKitCKSystemSharingUIObserverFunction;
  return result;
}

uint64_t initCloudKitCKCurrentUserDefaultName()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  uint64_t result = *(void *)dlsym((void *)_MergedGlobals_90, "CKCurrentUserDefaultName");
  qword_1EB270928 = result;
  getCloudKitCKCurrentUserDefaultName[0] = CKCurrentUserDefaultNameCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKErrorDomain()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  uint64_t result = *(void *)dlsym((void *)_MergedGlobals_90, "CKErrorDomain");
  qword_1EB270930 = result;
  getCloudKitCKErrorDomain[0] = CKErrorDomainCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKPartialErrorsByItemIDKey()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  uint64_t result = *(void *)dlsym((void *)_MergedGlobals_90, "CKPartialErrorsByItemIDKey");
  qword_1EB270938 = result;
  getCloudKitCKPartialErrorsByItemIDKey = CKPartialErrorsByItemIDKeyCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKRecordChangedErrorServerRecordKey()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  uint64_t result = *(void *)dlsym((void *)_MergedGlobals_90, "CKRecordChangedErrorServerRecordKey");
  qword_1EB270940 = result;
  getCloudKitCKRecordChangedErrorServerRecordKey = CKRecordChangedErrorServerRecordKeyCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKAccountChangedNotification()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  uint64_t result = *(void *)dlsym((void *)_MergedGlobals_90, "CKAccountChangedNotification");
  qword_1EB270948 = result;
  getCloudKitCKAccountChangedNotification[0] = CKAccountChangedNotificationCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKIdentityUpdateNotification()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  uint64_t result = *(void *)dlsym((void *)_MergedGlobals_90, "CKIdentityUpdateNotification");
  qword_1EB270950 = result;
  getCloudKitCKIdentityUpdateNotification[0] = CKIdentityUpdateNotificationCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKErrorRetryAfterKey()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  uint64_t result = *(void *)dlsym((void *)_MergedGlobals_90, "CKErrorRetryAfterKey");
  qword_1EB270958 = result;
  getCloudKitCKErrorRetryAfterKey = CKErrorRetryAfterKeyCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKRecordZoneDefaultName()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  uint64_t result = *(void *)dlsym((void *)_MergedGlobals_90, "CKRecordZoneDefaultName");
  qword_1EB270960 = result;
  getCloudKitCKRecordZoneDefaultName[0] = CKRecordZoneDefaultNameCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKRecordTypeShare()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  uint64_t result = *(void *)dlsym((void *)_MergedGlobals_90, "CKRecordTypeShare");
  qword_1EB270968 = result;
  getCloudKitCKRecordTypeShare = CKRecordTypeShareCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKRecordNameZoneWideShare()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  uint64_t result = *(void *)dlsym((void *)_MergedGlobals_90, "CKRecordNameZoneWideShare");
  qword_1EB270970 = result;
  getCloudKitCKRecordNameZoneWideShare = CKRecordNameZoneWideShareCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKErrorUserDidResetEncryptedDataKey()
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  uint64_t result = *(void *)dlsym((void *)_MergedGlobals_90, "CKErrorUserDidResetEncryptedDataKey");
  qword_1EB270978 = result;
  getCloudKitCKErrorUserDidResetEncryptedDataKey = CKErrorUserDidResetEncryptedDataKeyCloudKitFunction;
  return result;
}

uint64_t initCKDatabaseScopeString(uint64_t a1)
{
  if (qword_1EB270820 != -1) {
    dispatch_once(&qword_1EB270820, &__block_literal_global_40);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)_MergedGlobals_90, "CKDatabaseScopeString");
  softLinkCKDatabaseScopeString = v2;

  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t CloudKitCKContainerFunction()
{
  return qword_1EB270828;
}

uint64_t CloudKitCKContainerOptionsFunction()
{
  return qword_1EB270830;
}

uint64_t CloudKitCKRecordZoneFunction()
{
  return qword_1EB270838;
}

uint64_t CloudKitCKRecordZoneIDFunction()
{
  return qword_1EB270840;
}

uint64_t CloudKitCKRecordFunction()
{
  return qword_1EB270848;
}

uint64_t CloudKitCKRecordIDFunction()
{
  return qword_1EB270850;
}

uint64_t CloudKitCKAcceptSharesOperationFunction()
{
  return qword_1EB270858;
}

uint64_t CloudKitCKFetchDatabaseChangesOperationFunction()
{
  return qword_1EB270860;
}

uint64_t CloudKitCKModifyRecordZonesOperationFunction()
{
  return qword_1EB270868;
}

uint64_t CloudKitCKModifyRecordsOperationFunction()
{
  return qword_1EB270870;
}

uint64_t CloudKitCKFetchRecordZonesOperationFunction()
{
  return qword_1EB270878;
}

uint64_t CloudKitCKFetchRecordsOperationFunction()
{
  return qword_1EB270880;
}

uint64_t CloudKitCKDatabaseSubscriptionFunction()
{
  return qword_1EB270888;
}

uint64_t CloudKitCKModifySubscriptionsOperationFunction()
{
  return qword_1EB270890;
}

uint64_t CloudKitCKAssetFunction()
{
  return qword_1EB270898;
}

uint64_t CloudKitCKFetchRecordZoneChangesConfigurationFunction()
{
  return qword_1EB2708A8;
}

uint64_t CloudKitCKFetchRecordZoneChangesOperationFunction()
{
  return qword_1EB2708B0;
}

uint64_t CloudKitCKServerChangeTokenFunction()
{
  return qword_1EB2708B8;
}

uint64_t CloudKitCKNotificationInfoFunction()
{
  return qword_1EB2708C0;
}

uint64_t CloudKitCKEncryptedDataFunction()
{
  return qword_1EB2708C8;
}

uint64_t CloudKitCKOperationConfigurationFunction()
{
  return qword_1EB2708D0;
}

uint64_t CloudKitCKSchedulerFunction()
{
  return qword_1EB2708D8;
}

uint64_t CloudKitCKSchedulerActivityFunction()
{
  return qword_1EB2708E0;
}

uint64_t CloudKitCKNotificationListenerFunction()
{
  return qword_1EB2708E8;
}

uint64_t CloudKitCKShareFunction()
{
  return qword_1EB2708F0;
}

uint64_t CloudKitCKFetchShareParticipantsOperationFunction()
{
  return qword_1EB2708F8;
}

uint64_t CloudKitCKFetchShareMetadataOperationFunction()
{
  return qword_1EB270900;
}

uint64_t CloudKitCKQueryOperationFunction()
{
  return qword_1EB270908;
}

uint64_t CloudKitCKQueryFunction()
{
  return qword_1EB270910;
}

uint64_t CloudKitCKQueryCursorFunction()
{
  return qword_1EB270918;
}

uint64_t CloudKitCKSystemSharingUIObserverFunction()
{
  return qword_1EB270920;
}

uint64_t CKCurrentUserDefaultNameCloudKitFunction()
{
  return qword_1EB270928;
}

uint64_t CKErrorDomainCloudKitFunction()
{
  return qword_1EB270930;
}

uint64_t CKPartialErrorsByItemIDKeyCloudKitFunction()
{
  return qword_1EB270938;
}

uint64_t CKRecordChangedErrorServerRecordKeyCloudKitFunction()
{
  return qword_1EB270940;
}

uint64_t CKAccountChangedNotificationCloudKitFunction()
{
  return qword_1EB270948;
}

uint64_t CKIdentityUpdateNotificationCloudKitFunction()
{
  return qword_1EB270950;
}

uint64_t CKErrorRetryAfterKeyCloudKitFunction()
{
  return qword_1EB270958;
}

uint64_t CKRecordZoneDefaultNameCloudKitFunction()
{
  return qword_1EB270960;
}

uint64_t CKRecordTypeShareCloudKitFunction()
{
  return qword_1EB270968;
}

uint64_t CKRecordNameZoneWideShareCloudKitFunction()
{
  return qword_1EB270970;
}

uint64_t CKErrorUserDidResetEncryptedDataKeyCloudKitFunction()
{
  return qword_1EB270978;
}

void sub_18AE1C5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (v28) {
    objc_end_catch();
  }
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_18AE1C628(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AE1C620);
}

void sub_18AE1C638(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  if (a2)
  {
    _Block_object_dispose(va, 8);
    _Block_object_dispose((const void *)(v17 - 128), 8);
    JUMPOUT(0x18AE1C658);
  }
  JUMPOUT(0x18AE1C620);
}

void sub_18AE1CB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (v30) {
    objc_end_catch();
  }
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v31 - 168), 8);
  _Block_object_dispose((const void *)(v31 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18AE1CB90(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AE1CB88);
}

void sub_18AE1CBA0(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE1C9FCLL);
  }
  JUMPOUT(0x18AE1CB88);
}

void sub_18AE1D184(void *a1)
{
}

void sub_18AE1D190(_Unwind_Exception *a1)
{
}

void sub_18AE1E124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18AE1DD18);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE1E7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AE1F2C4()
{
}

void sub_18AE1F340()
{
}

uint64_t _readCompositeAttributeIntoShellFromBytes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9)
{
  uint64_t AttributeIntoShellFromBytes = _readAttributeIntoShellFromBytes(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (AttributeIntoShellFromBytes)
  {
    unint64_t v15 = *a3;
    unint64_t v16 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v17 = v16 + 4;
    if (v16 + 4 <= a4)
    {
      unsigned int v18 = *(_DWORD *)(a2 + v16);
      if (v18)
      {
        uint64_t v25 = *(void *)(a7 + 8 * bswap32(v18));
        uint64_t v19 = (void *)MEMORY[0x1E4F1CAD0];
        uint64_t v20 = objc_opt_class();
        uint64_t v21 = objc_opt_class();
        uint64_t v22 = objc_opt_class();
        uint64_t v23 = objc_msgSend(v19, "setWithObjects:", v20, v21, v22, objc_opt_class(), 0);
        *(void *)(a5 + 120) = (id)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v23, v25, (uint64_t)a9);
      }
      unint64_t v15 = v17;
    }
    *a3 = v15;
  }
  return AttributeIntoShellFromBytes;
}

void sub_18AE21420(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *exc_buf, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (!a2) {
    _Unwind_Resume(v42);
  }
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18AE21270);
  }
  id v41 = objc_begin_catch(a1);
  objc_exception_throw(v41);
}

void sub_18AE2168C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AE21698);
  }
  _Unwind_Resume(v2);
}

void sub_18AE216C4()
{
  if (v0) {
    JUMPOUT(0x18AE216CCLL);
  }
  _Unwind_Resume(v1);
}

void sub_18AE21744(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AE21710);
  }
  _Unwind_Resume(v2);
}

void sub_18AE21754(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *exc_buf, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18AE20724);
  }
  _Unwind_Resume(v20);
}

void sub_18AE225EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18AE229EC(_Unwind_Exception *a1)
{
}

void sub_18AE22AF8(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AE22B04);
  }
  JUMPOUT(0x18AE22A30);
}

void sub_18AE239F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *exc_buf, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a2)
  {
    _Block_object_dispose(&a26, 8);
    if (a2 != 2)
    {
      objc_begin_catch(a1);
      JUMPOUT(0x18AE236E8);
    }
    id v35 = objc_begin_catch(a1);
    uint64_t v36 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v37 = [v35 userInfo];
    a32 = [v36 errorWithDomain:*MEMORY[0x1E4F281F8] code:134308 userInfo:v37];
    uint64_t v38 = (void *)[v33 retainedDelegate];
    if (v38) {
      [v38 rollResponseOperation:v33 encounteredAnError:a32 whileTryingToAdoptBaseline:v32];
    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_18AE23B3C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AE23AC4);
  }
  JUMPOUT(0x18AE23B64);
}

void sub_18AE23B4C()
{
  if (v0) {
    JUMPOUT(0x18AE23B54);
  }
  JUMPOUT(0x18AE23B64);
}

void sub_18AE261C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE26220(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE260B0);
  }
  JUMPOUT(0x18AE26214);
}

void sub_18AE26238(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE26268);
  }
  JUMPOUT(0x18AE26214);
}

void sub_18AE26F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AE26F3C(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AE26F34);
}

void sub_18AE26F4C(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE26E18);
  }
  JUMPOUT(0x18AE26F34);
}

void sub_18AE28144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 != 2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18AE27020);
  }
  id v14 = objc_begin_catch(exception_object);
  uint64_t v15 = (void *)[v14 userInfo];
  if ([(id)(v13 + 2024) canLogMessageAtLevel:0])
  {
    [v14 userInfo];
    NSLog((NSString *)@"%s(%d): CoreData: Ubiquity:  CoreData: error: Caught Exception %@ with userInfo %@ in -finishSetupForSet:error:");
  }
  int v16 = objc_msgSend((id)objc_msgSend(v15, "objectForKey:", @"PFUbiquitySetupCheckForFork"), "BOOLValue");
  int v17 = objc_msgSend((id)objc_msgSend(v15, "objectForKey:", @"PFUbiquitySetupDoFork"), "BOOLValue");
  if (v16
    && (unsigned int v18 = (void *)[v14 name], (objc_msgSend(v18, "isEqualToString:", *MEMORY[0x1E4F1C3B8]) & 1) != 0))
  {
    uint64_t v19 = @"PFUbiquitySetupCheckForFork";
  }
  else
  {
    if (!v17
      || (uint64_t v20 = (void *)[v14 name],
          ![v20 isEqualToString:*MEMORY[0x1E4F1C3B8]]))
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        objc_exception_rethrow();
      }
LABEL_13:
      objc_end_catch();
      JUMPOUT(0x18AE27B54);
    }
    uint64_t v19 = @"PFUbiquitySetupDoFork";
  }
  [*(id *)(v12 + 56) setObject:MEMORY[0x1E4F1CC38] forKey:v19];
  goto LABEL_13;
}

void sub_18AE28290(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AE282A4);
  }
  _Unwind_Resume(a1);
}

void sub_18AE282B8()
{
}

void sub_18AE282C4(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18AE282CCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18AE282D4(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  return sub_18AE282D8();
}

void sub_18AE286CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_18AE286F8(void *a1)
{
}

void sub_18AE28704()
{
}

void sub_18AE29514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
}

void sub_18AE2A890(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18AE2A740);
  }
  id v2 = objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_18AE2AA34(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AE2AA08);
  }
  JUMPOUT(0x18AE2A958);
}

void sub_18AE2B5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18AE2D5CC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18AE2D488);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE2D710(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE2D720);
  }
  JUMPOUT(0x18AE2D704);
}

void sub_18AE2D964(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE2D9B8(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    if (!v2) {
      JUMPOUT(0x18AE2D8D4);
    }
    JUMPOUT(0x18AE2D86CLL);
  }
  JUMPOUT(0x18AE2D9ACLL);
}

void sub_18AE2DCD8(_Unwind_Exception *exception_object)
{
}

void sub_18AE2DD08(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE2DBD8);
  }
  JUMPOUT(0x18AE2DCFCLL);
}

void sub_18AE2E294(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    if (v19) {
      JUMPOUT(0x18AE2E1E0);
    }
    JUMPOUT(0x18AE2E168);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AE2E754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_18AE2E7AC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AE2E7B4);
  }
  JUMPOUT(0x18AE2E790);
}

void sub_18AE2EAAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE2EAE4(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE2E950);
  }
  JUMPOUT(0x18AE2EAD8);
}

void sub_18AE2F0E4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AE2F0ECLL);
  }
  objc_terminate();
}

void sub_18AE31724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  objc_end_catch();
  _Block_object_dispose(&a72, 8);
  _Block_object_dispose(&STACK[0x228], 8);
  JUMPOUT(0x18AE31750);
}

void sub_18AE31758(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  objc_terminate();
}

void sub_18AE317E0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x18AE317FCLL);
}

void sub_18AE320A4(_Unwind_Exception *a1)
{
}

void sub_18AE320C8(void *a1)
{
}

void sub_18AE327F4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 2)
  {
    id v2 = objc_begin_catch(exception_object);
    objc_end_catch();
  }
  else
  {
    objc_begin_catch(exception_object);
  }
  JUMPOUT(0x18AE3262CLL);
}

void sub_18AE33358(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE33398(void *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18AE33220);
  }
  JUMPOUT(0x18AE3338CLL);
}

void sub_18AE336B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AE33B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a2)
  {
    _Block_object_dispose(&a24, 8);
    objc_begin_catch(exception_object);
    JUMPOUT(0x18AE33B3CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE33D9C(void *a1)
{
}

void sub_18AE33DB0(_Unwind_Exception *a1)
{
}

void sub_18AE3411C(_Unwind_Exception *a1)
{
}

void sub_18AE3413C(void *a1)
{
}

void sub_18AE342E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18AE34A94(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18AE34984);
    }
    objc_begin_catch(exc_buf);

    *(void *)(*(void *)(*(void *)(a20 + 56) + 8) + 40) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AE34B94(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AE34B50);
  }
  JUMPOUT(0x18AE34AF8);
}

void sub_18AE35174(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE3519C(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE35054);
  }
  JUMPOUT(0x18AE35190);
}

void sub_18AE35240(_Unwind_Exception *a1)
{
}

void sub_18AE35260(void *a1)
{
}

void sub_18AE3549C(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE354EC(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE35408);
  }
  JUMPOUT(0x18AE354E0);
}

void sub_18AE357B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE357F8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AE35800);
  }
  JUMPOUT(0x18AE357ECLL);
}

void sub_18AE35944(_Unwind_Exception *a1)
{
}

void sub_18AE35964(void *a1)
{
}

void sub_18AE359E4(_Unwind_Exception *a1)
{
}

void sub_18AE35A04(void *a1)
{
}

void sub_18AE37238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a2)
  {
    _Block_object_dispose(&a30, 8);
    _Block_object_dispose((const void *)(v30 - 128), 8);
    objc_begin_catch(exception_object);
    JUMPOUT(0x18AE37074);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE37AC0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18AE37A38);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE386E0()
{
}

void sub_18AE386E8(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x18AE386F0);
  }
  _Unwind_Resume(a1);
}

void sub_18AE386F8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AE38700);
  }
  objc_terminate();
}

void sub_18AE39D0C(_Unwind_Exception *a1)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_18AE39D30(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AE39D38);
  }
  objc_terminate();
}

void sub_18AE3A434(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    [*(id *)(v2 + 24) unlock];
    if (!v3) {
      JUMPOUT(0x18AE3A344);
    }
    JUMPOUT(0x18AE3A41CLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AE3A55C(_Unwind_Exception *a1)
{
}

void sub_18AE3A57C(void *a1)
{
}

void sub_18AE3A704(_Unwind_Exception *a1)
{
}

void sub_18AE3A730(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE3A6B4);
  }
  JUMPOUT(0x18AE3A724);
}

void sub_18AE3BA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void (*a12)(char *))
{
}

void sub_18AE3C210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exception_object);
      JUMPOUT(0x18AE3C07CLL);
    }
    id v13 = objc_begin_catch(exception_object);
    objc_exception_throw(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE3C2A4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18AE3C270);
  }
  _Unwind_Resume(a1);
}

void sub_18AE3C2C4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18AE3C2CCLL);
  }
  objc_terminate();
}

void sub_18AE3CB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (v39) {
    objc_end_catch();
  }
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_18AE3CC68(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AE3CC60);
}

void sub_18AE3CC90(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AE3CC98);
  }
  JUMPOUT(0x18AE3CC60);
}

void sub_18AE3CF98(_Unwind_Exception *a1)
{
}

void sub_18AE3D1A0(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE3D0A4);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18AE3D440(void *a1)
{
}

void sub_18AE3D574(_Unwind_Exception *a1)
{
}

void sub_18AE3D594(void *a1)
{
}

void sub_18AE3DB78(void *a1)
{
}

void sub_18AE3DB88(_Unwind_Exception *a1)
{
}

void sub_18AE3DD14(void *a1)
{
}

void sub_18AE3DE44(void *a1)
{
}

void sub_18AE3E380(void *a1)
{
}

void sub_18AE3E38C(_Unwind_Exception *a1)
{
}

void sub_18AE3E5EC(_Unwind_Exception *exception_object)
{
}

void sub_18AE3E7B0(void *a1)
{
}

void sub_18AE3EFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_18AE3F03C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18AE3F048);
  }
  JUMPOUT(0x18AE3F030);
}

void sub_18AE3F47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  if (v13) {
    objc_end_catch();
  }
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v14 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18AE3F4D8(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AE3F4D0);
}

void sub_18AE3F724(_Unwind_Exception *exception_object)
{
}

void sub_18AE3FF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  if (v11) {
    objc_end_catch();
  }
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18AE3FF48(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18AE3FF40);
}

void sub_18AE3FF58(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18AE3FDE4);
  }
  JUMPOUT(0x18AE3FF40);
}

uint64_t type metadata accessor for CocoaError()
{
  return MEMORY[0x1F40E2E08]();
}

uint64_t _BridgedStoredNSError.userInfo.getter()
{
  return MEMORY[0x1F40E44E0]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x1F40E4550]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E4A70]();
}

Swift::Void __swiftcall ObservableObjectPublisher.send()()
{
}

uint64_t ObservableObjectPublisher.init()()
{
  return MEMORY[0x1F40D6AB8]();
}

uint64_t type metadata accessor for ObservableObjectPublisher()
{
  return MEMORY[0x1F40D6AC0]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x1F40E6000]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6030]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1F40E6190]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x1F4183958]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x1F4183A88]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x1F4183AB0]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x1F4183B10]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x1F4183BA0]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x1F40E6338]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1F4184640]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1F4184978]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1F41852A0]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1F4185350]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1F41854C8](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x1F4185A30]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t print(_:separator:terminator:)()
{
  return MEMORY[0x1F4185E90]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1F4185EB0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1F4185EF8]();
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9778](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9780](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9788](c, data, *(void *)&len);
}

int CC_SHA512_Final(unsigned __int8 *md, CC_SHA512_CTX *c)
{
  return MEMORY[0x1F40C97B8](md, c);
}

int CC_SHA512_Init(CC_SHA512_CTX *c)
{
  return MEMORY[0x1F40C97C0](c);
}

int CC_SHA512_Update(CC_SHA512_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C97C8](c, data, *(void *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1F40D70F8](allocator, context);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D71C8](theArray, range.location, range.length, value);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

Boolean CFBitVectorContainsBit(CFBitVectorRef bv, CFRange range, CFBit value)
{
  return MEMORY[0x1F40D73A0](bv, range.location, range.length, *(void *)&value);
}

CFBitVectorRef CFBitVectorCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex numBits)
{
  return (CFBitVectorRef)MEMORY[0x1F40D73A8](allocator, bytes, numBits);
}

CFBit CFBitVectorGetBitAtIndex(CFBitVectorRef bv, CFIndex idx)
{
  return MEMORY[0x1F40D73C8](bv, idx);
}

void CFBitVectorGetBits(CFBitVectorRef bv, CFRange range, UInt8 *bytes)
{
}

CFIndex CFBitVectorGetCount(CFBitVectorRef bv)
{
  return MEMORY[0x1F40D73D8](bv);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D7898](allocator, at);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B68](cf);
}

uint64_t CFHashBytes()
{
  return MEMORY[0x1F40D7BA8]();
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D7CA0](cf);
}

uint64_t CFMergeSortArray()
{
  return MEMORY[0x1F40D7CA8]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B8]();
}

CFRunLoopObserverRef CFRunLoopObserverCreate(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context)
{
  return (CFRunLoopObserverRef)MEMORY[0x1F40D80D8](allocator, activities, repeats, order, callout, context);
}

void CFRunLoopObserverInvalidate(CFRunLoopObserverRef observer)
{
}

void CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D81F8](theSet, value);
}

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
{
  return (CFSetRef)MEMORY[0x1F40D8200](allocator, values, numValues, callBacks);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1F40D8220](theSet);
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x1F40D8238](theSet, value);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8390](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFComparisonResult CFStringCompareWithOptionsAndLocale(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions, CFLocaleRef locale)
{
  return MEMORY[0x1F40D8398](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions, locale);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1F40D83D0](alloc, theString, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8418](alloc, chars, numChars, capacity, externalCharactersAllocator);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8440](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8458](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1F40D8460](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8470](alloc, chars, numChars, contentsDeallocator);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

uint64_t CFStringEncodingUnicodeToBytes()
{
  return MEMORY[0x1F40D84C0]();
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.length = v4;
  result.locatiouint64_t n = v3;
  return result;
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84E0](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringFindWithOptionsAndLocale(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFLocaleRef locale, CFRange *result)
{
  return MEMORY[0x1F40D84E8](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, locale, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1F40D8540](theString);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1F40D8568](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1F40D85E0]();
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

CFURLRef CFURLCreateAbsoluteURLWithBytes(CFAllocatorRef alloc, const UInt8 *relativeURLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL, Boolean useCompatibilityMode)
{
  return (CFURLRef)MEMORY[0x1F40D87D8](alloc, relativeURLBytes, length, *(void *)&encoding, baseURL, useCompatibilityMode);
}

CFIndex CFURLGetBytes(CFURLRef url, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1F40D8900](url, buffer, bufferLength);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1F40D8988](alloc);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1F40D89A0](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

id NSAllocateObject(Class aClass, NSUInteger extraBytes, NSZone *zone)
{
  return (id)MEMORY[0x1F40E6FF0](aClass, extraBytes, zone);
}

uint64_t NSAllocateScannedUncollectable()
{
  return MEMORY[0x1F40E6FF8]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

void NSDeallocateObject(id object)
{
}

BOOL NSDecrementExtraRefCountWasZero(id object)
{
  return MEMORY[0x1F40E7080](object);
}

void NSIncrementExtraRefCount(id object)
{
}

void NSLog(NSString *format, ...)
{
}

void *__cdecl NSMapGet(NSMapTable *table, const void *key)
{
  return (void *)MEMORY[0x1F40E7180](table, key);
}

void NSMapInsert(NSMapTable *table, const void *key, const void *value)
{
}

void NSMapRemove(NSMapTable *table, const void *key)
{
}

uint64_t NSRecordAllocationEvent()
{
  return MEMORY[0x1F40E7218]();
}

uint64_t NSRequestConcreteImplementation()
{
  return MEMORY[0x1F40E7228]();
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1F40E7248](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  return (NSString *)MEMORY[0x1F40E7298](proto);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

NSString *NSUserName(void)
{
  return (NSString *)MEMORY[0x1F40E72F0]();
}

void NSZoneFree(NSZone *zone, void *ptr)
{
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return (CFStringRef)MEMORY[0x1F40F6D68](*(void *)&status, reserved);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DE0](query, result);
}

CFDictionaryRef SecTaskCopyValuesForEntitlements(SecTaskRef task, CFArrayRef entitlements, CFErrorRef *error)
{
  return (CFDictionaryRef)MEMORY[0x1F40F7150](task, entitlements, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1F40F7168](allocator, token);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFDictionarySetCapacity()
{
  return MEMORY[0x1F40D8D58]();
}

uint64_t _CFExecutableLinkedOnOrAfter()
{
  return MEMORY[0x1F40D8DB8]();
}

uint64_t _CFURLIsItemPromiseAtURL()
{
  return MEMORY[0x1F40D9350]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1F40D9438]();
}

uint64_t _NSGetUsingKeyValueGetter()
{
  return MEMORY[0x1F40E7360]();
}

uint64_t _NSKeyValueCreateImplicitObservationInfo()
{
  return MEMORY[0x1F40E7368]();
}

uint64_t _NSKeyValueGetterForClassAndKey()
{
  return MEMORY[0x1F40E7370]();
}

uint64_t _NSKeyValueMutableSetGetterForClassAndKey()
{
  return MEMORY[0x1F40E7378]();
}

uint64_t _NSKeyValuePrimitiveGetterForClassAndKey()
{
  return MEMORY[0x1F40E7380]();
}

uint64_t _NSKeyValuePrimitiveSetterForClassAndKey()
{
  return MEMORY[0x1F40E7388]();
}

uint64_t _NSKeyValueSetterForClassAndKey()
{
  return MEMORY[0x1F40E7390]();
}

uint64_t _NSMethodExceptionProem()
{
  return MEMORY[0x1F40E7398]();
}

uint64_t _NSSetUsingKeyValueSetter()
{
  return MEMORY[0x1F40E73B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t __CFSetLastAllocationEventName()
{
  return MEMORY[0x1F40D95A0]();
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __memmove_chk()
{
  return MEMORY[0x1F40C9C30]();
}

int __snprintf_chk(char *a1, size_t a2, int a3, size_t a4, const char *a5, ...)
{
  return MEMORY[0x1F40C9C98](a1, a2, *(void *)&a3, a4, a5);
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x1F40C9CD0]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

const mach_header *__cdecl _dyld_get_image_header(uint32_t image_index)
{
  return (const mach_header *)MEMORY[0x1F40C9E08](*(void *)&image_index);
}

const char *__cdecl _dyld_get_image_name(uint32_t image_index)
{
  return (const char *)MEMORY[0x1F40C9E10](*(void *)&image_index);
}

uint32_t _dyld_image_count(void)
{
  return MEMORY[0x1F40C9E60]();
}

uint64_t _getprivatesystemidentifier()
{
  return MEMORY[0x1F40C9F50]();
}

uint64_t _objc_registerTaggedPointerClass()
{
  return MEMORY[0x1F4181438]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sqlite3_db_clone()
{
  return MEMORY[0x1F4181F28]();
}

void abort(void)
{
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1F40CA210](a1, *(void *)&a2);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1F40CA440](a1, a2);
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x1F40CA578](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

BOOL class_addIvar(Class cls, const char *name, size_t size, uint8_t alignment, const char *types)
{
  return MEMORY[0x1F41814C0](cls, name, size, alignment, types);
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1F41814C8](cls, name, imp, types);
}

BOOL class_conformsToProtocol(Class cls, Protocol *protocol)
{
  return MEMORY[0x1F41814E0](cls, protocol);
}

Protocol **__cdecl class_copyProtocolList(Class cls, unsigned int *outCount)
{
  return (Protocol **)MEMORY[0x1F4181508](cls, outCount);
}

Method class_getClassMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181518](cls, name);
}

const char *__cdecl class_getImageName(Class cls)
{
  return (const char *)MEMORY[0x1F4181520](cls);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181528](cls, name);
}

size_t class_getInstanceSize(Class cls)
{
  return MEMORY[0x1F4181530](cls);
}

Ivar class_getInstanceVariable(Class cls, const char *name)
{
  return (Ivar)MEMORY[0x1F4181538](cls, name);
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return (IMP)MEMORY[0x1F4181540](cls, name);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1F4181548](cls);
}

objc_property_t class_getProperty(Class cls, const char *name)
{
  return (objc_property_t)MEMORY[0x1F4181550](cls, name);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1F4181558](cls);
}

BOOL class_isMetaClass(Class cls)
{
  return MEMORY[0x1F4181568](cls);
}

BOOL class_respondsToSelector(Class cls, SEL sel)
{
  return MEMORY[0x1F4181580](cls, sel);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return MEMORY[0x1F417F0C0](stream);
}

compression_status compression_stream_init(compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0D0](stream, *(void *)&operation, *(void *)&algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return MEMORY[0x1F417F0E0](stream, *(void *)&flags);
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x1F40CB880](from, to, state, *(void *)&flags);
}

copyfile_state_t copyfile_state_alloc(void)
{
  return (copyfile_state_t)MEMORY[0x1F40CB888]();
}

int copyfile_state_free(copyfile_state_t a1)
{
  return MEMORY[0x1F40CB890](a1);
}

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
  return MEMORY[0x1F4182BC0](crc, buf, *(void *)&len);
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1F4182BD0](strm, *(void *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182BE0](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x1F4182BE8](strm, *(void *)&level, *(void *)&method, *(void *)&windowBits, *(void *)&memLevel, *(void *)&strategy, version, *(void *)&stream_size);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

void *__cdecl dispatch_get_context(dispatch_object_t object)
{
  return (void *)MEMORY[0x1F40CBA50](object);
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBA58]();
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1F40CBA68](key);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void *__cdecl dispatch_queue_get_specific(dispatch_queue_t queue, const void *key)
{
  return (void *)MEMORY[0x1F40CBBE8](queue, key);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x1F40CBD40](when, delta);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1F40CBDA8](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x1F40CBE28]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1F40CBEC8]();
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

int flsl(uint64_t a1)
{
  return MEMORY[0x1F40CC180](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1F40CC1F0](a1, a2);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1F40CC2F0](*(void *)&a1, a2);
}

uid_t geteuid(void)
{
  return MEMORY[0x1F40CC3B8]();
}

int getpagesize(void)
{
  return MEMORY[0x1F40CC480]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1F40CC4C0]();
}

IMP imp_implementationWithBlock(id block)
{
  return (IMP)MEMORY[0x1F4181598](block);
}

BOOL imp_removeBlock(IMP anImp)
{
  return MEMORY[0x1F41815A8](anImp);
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1F4182CB0](strm, *(void *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182CB8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1F4182CC8](strm, *(void *)&windowBits, version, *(void *)&stream_size);
}

ptrdiff_t ivar_getOffset(Ivar v)
{
  return MEMORY[0x1F41815C0](v);
}

const char *__cdecl ivar_getTypeEncoding(Ivar v)
{
  return (const char *)MEMORY[0x1F41815C8](v);
}

uint64_t kdebug_is_enabled()
{
  return MEMORY[0x1F40CC6F0]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

malloc_zone_t *malloc_default_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCB30]();
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBB8](zone, count, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBC0](zone, size, type_id);
}

void *__cdecl malloc_type_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBD8](zone, ptr, size, type_id);
}

void malloc_zone_batch_free(malloc_zone_t *zone, void **to_be_freed, unsigned int num)
{
}

unsigned int malloc_zone_batch_malloc(malloc_zone_t *zone, size_t size, void **results, unsigned int num_requested)
{
  return MEMORY[0x1F40CCBF0](zone, size, results, *(void *)&num_requested);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern8(void *__b, const void *__pattern8, size_t __len)
{
}

void method_getArgumentType(Method m, unsigned int index, char *dst, size_t dst_len)
{
}

objc_method_description *__cdecl method_getDescription(Method m)
{
  return (objc_method_description *)MEMORY[0x1F41815F0](m);
}

IMP method_getImplementation(Method m)
{
  return (IMP)MEMORY[0x1F41815F8](m);
}

unsigned int method_getNumberOfArguments(Method m)
{
  return MEMORY[0x1F4181608](m);
}

void method_getReturnType(Method m, char *dst, size_t dst_len)
{
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return (const char *)MEMORY[0x1F4181618](m);
}

void method_invoke(void)
{
}

char *__cdecl mkdtemp(char *a1)
{
  return (char *)MEMORY[0x1F40CCDE0](a1);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int mprotect(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCE58](a1, a2, *(void *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1F40CD058](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1F40CD088](*(void *)&token, state64);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)
{
  return (Class)MEMORY[0x1F4181650](superclass, name, extraBytes);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

id objc_constructInstance(Class cls, void *bytes)
{
  return (id)MEMORY[0x1F4181690](cls, bytes);
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void *__cdecl objc_destructInstance(id obj)
{
  return (void *)MEMORY[0x1F41816D8](obj);
}

void objc_disposeClassPair(Class cls)
{
}

Class objc_duplicateClass(Class original, const char *name, size_t extraBytes)
{
  return (Class)MEMORY[0x1F41816E8](original, name, extraBytes);
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1F4181778](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

Class objc_lookUpClass(const char *name)
{
  return (Class)MEMORY[0x1F4181788](name);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_registerClassPair(Class cls)
{
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

id objc_storeWeakOrNil(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A20](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

void objc_terminate(void)
{
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1F4181A58](a1);
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x1F4181A60](a1);
}

void *__cdecl object_getIndexedIvars(id a1)
{
  return (void *)MEMORY[0x1F4181A68](a1);
}

id object_getIvar(id a1, Ivar a2)
{
  return (id)MEMORY[0x1F4181A78](a1, a2);
}

uint64_t object_getMethodImplementation()
{
  return MEMORY[0x1F4181A80]();
}

Class object_setClass(id a1, Class a2)
{
  return (Class)MEMORY[0x1F4181A90](a1, a2);
}

Ivar object_setInstanceVariableWithStrongDefault(id obj, const char *name, void *value)
{
  return (Ivar)MEMORY[0x1F4181AA0](obj, name, value);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1F40CD0F0](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_lock_lock_with_options()
{
  return MEMORY[0x1F40CD5E8]();
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1F40CD648]();
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CD830](*(void *)&__fd, __buf, __nbyte, a4);
}

const char *__cdecl property_getAttributes(objc_property_t property)
{
  return (const char *)MEMORY[0x1F4181AC8](property);
}

objc_method_description protocol_getMethodDescription(Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod)
{
  CFIndex v4 = (const char *)MEMORY[0x1F4181B08](p, aSel, isRequiredMethod, isInstanceMethod);
  result.types = v5;
  result.name = v4;
  return result;
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD978](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD980](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1F40CD988](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD990](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

uint64_t pthread_key_init_np()
{
  return MEMORY[0x1F40CDA50]();
}

int pthread_main_np(void)
{
  return MEMORY[0x1F40CDA68]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA90](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA8](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1F40CDAC0](a1, *(void *)&a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

void pthread_yield_np(void)
{
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CDBC0](*(void *)&__fd, __buf, __nbyte, a4);
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1F40CDC98](a1, a2);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1F4181B28](sel);
}

uint64_t sel_lookUpByName()
{
  return MEMORY[0x1F4181B40]();
}

SEL sel_registerName(const char *str)
{
  return (SEL)MEMORY[0x1F4181B48](str);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1F40CE078](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181F90](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

uint64_t sqlite3_bind_blob_b()
{
  return MEMORY[0x1F4181FA0]();
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1F4181FA8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1F4181FB0](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1F4181FB8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1F4181FC0](a1, *(void *)&a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FE8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return MEMORY[0x1F4182048](a1, *(void *)&ms);
}

int sqlite3_changes(sqlite3 *a1)
{
  return MEMORY[0x1F4182050](a1);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return MEMORY[0x1F4182058](a1);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return MEMORY[0x1F4182068](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1F4182070](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F4182078](a1, *(void *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F4182088](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  MEMORY[0x1F4182098](a1, *(void *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A0](a1, *(void *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A8](a1, *(void *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1F41820C8](a1, *(void *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820D8](a1, *(void *)&iCol);
}

int sqlite3_create_collation(sqlite3 *a1, const char *zName, int eTextRep, void *pArg, int (__cdecl *xCompare)(void *, int, const void *, int, const void *))
{
  return MEMORY[0x1F4182108](a1, zName, *(void *)&eTextRep, pArg, xCompare);
}

int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *))
{
  return MEMORY[0x1F4182118](db, zFunctionName, *(void *)&nArg, *(void *)&eTextRep, pApp, xFunc, xStep, xFinal);
}

int sqlite3_db_config(sqlite3 *a1, int op, ...)
{
  return MEMORY[0x1F4182148](a1, *(void *)&op);
}

int sqlite3_db_status(sqlite3 *a1, int op, int *pCur, int *pHiwtr, int resetFlg)
{
  return MEMORY[0x1F4182178](a1, *(void *)&op, pCur, pHiwtr, *(void *)&resetFlg);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1F4182198](a1);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return (const char *)MEMORY[0x1F41821A0](*(void *)&a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1F41821A8](a1, sql, callback, a4, errmsg);
}

uint64_t sqlite3_exec_b()
{
  return MEMORY[0x1F41821B0]();
}

int sqlite3_extended_result_codes(sqlite3 *a1, int onoff)
{
  return MEMORY[0x1F41821C8](a1, *(void *)&onoff);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return MEMORY[0x1F41821D0](a1, zDbName, *(void *)&op, a4);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41821D8](pStmt);
}

void sqlite3_free(void *a1)
{
}

uint64_t sqlite3_intarray_bind()
{
  return MEMORY[0x1F4182210]();
}

uint64_t sqlite3_intarray_create()
{
  return MEMORY[0x1F4182218]();
}

uint64_t sqlite3_key_v2()
{
  return MEMORY[0x1F4182228]();
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return MEMORY[0x1F4182230](a1);
}

void *__cdecl sqlite3_malloc(int a1)
{
  return (void *)MEMORY[0x1F4182248](*(void *)&a1);
}

char *sqlite3_mprintf(const char *a1, ...)
{
  return (char *)MEMORY[0x1F4182258](a1);
}

sqlite3_stmt *__cdecl sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)
{
  return (sqlite3_stmt *)MEMORY[0x1F4182270](pDb, pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1F4182280](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182290](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182298](db, zSql, *(void *)&nByte, *(void *)&prepFlags, ppStmt, pzTail);
}

uint64_t sqlite3_rekey_v2()
{
  return MEMORY[0x1F41822B0]();
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41822C0](pStmt);
}

void sqlite3_result_blob(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
}

void sqlite3_result_double(sqlite3_context *a1, double a2)
{
}

void sqlite3_result_error(sqlite3_context *a1, const char *a2, int a3)
{
}

void sqlite3_result_int(sqlite3_context *a1, int a2)
{
}

void sqlite3_result_null(sqlite3_context *a1)
{
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
}

int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2)
{
  return MEMORY[0x1F4182370](p1, p2);
}

void sqlite3_snapshot_free(sqlite3_snapshot *a1)
{
}

int sqlite3_snapshot_get(sqlite3 *db, const char *zSchema, sqlite3_snapshot **ppSnapshot)
{
  return MEMORY[0x1F4182380](db, zSchema, ppSnapshot);
}

int sqlite3_snapshot_open(sqlite3 *db, const char *zSchema, sqlite3_snapshot *pSnapshot)
{
  return MEMORY[0x1F4182388](db, zSchema, pSnapshot);
}

int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb)
{
  return MEMORY[0x1F4182390](db, zDb);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1F41823B0](a1);
}

int sqlite3_stmt_status(sqlite3_stmt *a1, int op, int resetFlg)
{
  return MEMORY[0x1F41823C8](a1, *(void *)&op, *(void *)&resetFlg);
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  return (void *)MEMORY[0x1F4182408](a1);
}

const void *__cdecl sqlite3_value_blob(sqlite3_value *a1)
{
  return (const void *)MEMORY[0x1F4182410](a1);
}

int sqlite3_value_bytes(sqlite3_value *a1)
{
  return MEMORY[0x1F4182418](a1);
}

double sqlite3_value_double(sqlite3_value *a1)
{
  MEMORY[0x1F4182428](a1);
  return result;
}

int sqlite3_value_int(sqlite3_value *a1)
{
  return MEMORY[0x1F4182440](a1);
}

sqlite3_int64 sqlite3_value_int64(sqlite3_value *a1)
{
  return MEMORY[0x1F4182448](a1);
}

const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *a1)
{
  return (const unsigned __int8 *)MEMORY[0x1F4182458](a1);
}

int sqlite3_value_type(sqlite3_value *a1)
{
  return MEMORY[0x1F4182468](a1);
}

int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
{
  return MEMORY[0x1F4182490](db, zDb, *(void *)&eMode, pnLog, pnCkpt);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1F40CE118](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1A8](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1E8](__s1, __s2, __n);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1F40CE210](__big, __little, __len);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  return (char *)MEMORY[0x1F40CE238](__stringp, __delim);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE258](__s1, __s2);
}

unint64_t strtouq(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE308](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1F41881F0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1F4188200]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1F4188208]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1F41864E8]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1F41866C8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1F4186730]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

int utimes(const char *a1, const timeval *a2)
{
  return MEMORY[0x1F40CE620](a1, a2);
}

void uuid_generate_random(uuid_t out)
{
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1F40CE660](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1F40CE6A8](*(void *)&target_task, address, size, *(void *)&flags);
}

kern_return_t vm_copy(vm_map_t target_task, vm_address_t source_address, vm_size_t size, vm_address_t dest_address)
{
  return MEMORY[0x1F40CE6B8](*(void *)&target_task, source_address, size, dest_address);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1F40CE6C0](*(void *)&target_task, address, size);
}

kern_return_t vm_purgable_control(vm_map_t target_task, vm_address_t address, vm_purgable_t control, int *state)
{
  return MEMORY[0x1F40CE6E0](*(void *)&target_task, address, *(void *)&control, state);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1F40CEB18](xBOOL);
}

uint64_t xpc_copy_entitlement_for_self()
{
  return MEMORY[0x1F40CED30]();
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF188](value);
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1F40CF290](string);
}

void xpc_transaction_begin(void)
{
}

void xpc_transaction_end(void)
{
}