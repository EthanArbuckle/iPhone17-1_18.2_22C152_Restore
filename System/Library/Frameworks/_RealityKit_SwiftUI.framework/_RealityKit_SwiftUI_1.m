float specialized static ExperimentSettings.loadPostProcessBloomSigma(default:)(float a1)
{
  return specialized static ExperimentSettings.loadDepthHazeStartPercent(default:)(0xD000000000000030, 0x80000002466C26C0, a1);
}

float specialized static ExperimentSettings.loadDepthHazeFloor(default:)(float a1)
{
  return specialized static ExperimentSettings.loadDepthHazeStartPercent(default:)(0xD000000000000029, 0x80000002466C2690, a1);
}

uint64_t specialized static ExperimentSettings.loadDepthHazeDisabled(default:)(unsigned __int8 a1)
{
  return specialized static ExperimentSettings.loadIsSoundEnabled(default:)(a1, 0xD00000000000002CLL, 0x80000002466C2660);
}

uint64_t specialized static ExperimentSettings.loadOcclusionHazeDisabled(default:)(unsigned __int8 a1)
{
  return specialized static ExperimentSettings.loadIsSoundEnabled(default:)(a1, 0xD000000000000030, 0x80000002466C2620);
}

uint64_t specialized static ExperimentSettings.loadDebugBoxSeedEnabled(default:)(unsigned __int8 a1)
{
  return specialized static ExperimentSettings.loadIsSoundEnabled(default:)(a1, 0xD000000000000027, 0x80000002466C25F0);
}

uint64_t specialized static ExperimentSettings.loadMobileSFMDisabled(default:)(unsigned __int8 a1)
{
  return specialized static ExperimentSettings.loadIsSoundEnabled(default:)(a1, 0xD00000000000002CLL, 0x80000002466C2460);
}

float specialized static ExperimentSettings.loadAutomaticBoundingBoxPadding(default:)(float a1)
{
  return specialized static ExperimentSettings.loadDepthHazeStartPercent(default:)(0xD000000000000036, 0x80000002466C2390, a1);
}

uint64_t specialized static ExperimentSettings.loadCaptureCircleOccupyCriteria(default:)(char a1)
{
  v1._rawValue = &outlined read-only object #0 of CaptureCircle.OccupyCriteria.init(rawValue:);
  return specialized static ExperimentSettings.loadCaptureCircleOccupyCriteria(default:)(a1, 0xD000000000000036, 0x80000002466C2420, v1);
}

float specialized static ExperimentSettings.loadCaptureCircleVerticalExclusionAngleDegs(default:)(float a1)
{
  return specialized static ExperimentSettings.loadDepthHazeStartPercent(default:)(0xD000000000000042, 0x80000002466C23D0, a1);
}

float specialized static ExperimentSettings.loadCaptureCircleBinShotNeighborThreshDegs(default:)(float a1)
{
  return specialized static ExperimentSettings.loadDepthHazeStartPercent(default:)(0xD000000000000041, 0x80000002466C2290, a1);
}

uint64_t specialized static ExperimentSettings.loadFreeformDynamicScanVolumeDebugDraw(default:)(unsigned __int8 a1)
{
  return specialized static ExperimentSettings.loadIsSoundEnabled(default:)(a1, 0xD00000000000003DLL, 0x80000002466C24D0);
}

uint64_t specialized static ExperimentSettings.loadFreeformDynamicScanVolumeBoxViz(default:)(unsigned __int8 a1)
{
  return specialized static ExperimentSettings.loadIsSoundEnabled(default:)(a1, 0xD00000000000003ALL, 0x80000002466C2490);
}

uint64_t specialized static ExperimentSettings.loadIsSoundEnabled(default:)(unsigned __int8 a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = specialized static ExperimentSettings.loadDefaults(forKey:)(a2, a3);
  if (v7)
  {
    uint64_t v8 = v6;
    unint64_t v9 = v7;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)logger);
    swift_bridgeObjectRetain();
    v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v18 = v14;
      *(_DWORD *)uint64_t v13 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2465C2000, v11, v12, "Found key \"%s\" = \"%s\"", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v14, -1, -1);
      MEMORY[0x24C5348D0](v13, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v15 = objc_msgSend(self, sel_standardUserDefaults);
    v16 = (void *)MEMORY[0x24C533410](a2, a3);
    a1 = objc_msgSend(v15, sel_BOOLForKey_, v16);
  }
  return a1 & 1;
}

double specialized static ExperimentSettings.loadMotionFilterDurationSecs(default:)(double a1)
{
  uint64_t v2 = specialized static ExperimentSettings.loadDefaults(forKey:)(0xD00000000000002CLL, 0x80000002466C2550);
  if (v3)
  {
    uint64_t v4 = v2;
    unint64_t v5 = v3;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)logger);
    swift_bridgeObjectRetain();
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v15 = v10;
      *(_DWORD *)uint64_t v9 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, 0x80000002466C25B0, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2465C2000, v7, v8, "Found key \"%s\" = \"%s\"", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v10, -1, -1);
      MEMORY[0x24C5348D0](v9, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v11 = objc_msgSend(self, sel_standardUserDefaults);
    os_log_type_t v12 = (void *)MEMORY[0x24C533410](0xD000000000000033, 0x80000002466C25B0);
    objc_msgSend(v11, sel_doubleForKey_, v12);
    a1 = v13;
  }
  return a1;
}

float specialized static ExperimentSettings.loadMinBadMotionScore(default:)(float a1)
{
  return specialized static ExperimentSettings.loadDepthHazeStartPercent(default:)(0xD00000000000002CLL, 0x80000002466C2580, a1);
}

float specialized static ExperimentSettings.loadMaxBadMotionScore(default:)(float a1)
{
  return specialized static ExperimentSettings.loadDepthHazeStartPercent(default:)(0xD00000000000002CLL, 0x80000002466C2550, a1);
}

uint64_t specialized static ExperimentSettings.loadPointCloudRenderStyle(default:)(char a1)
{
  v1._rawValue = &outlined read-only object #0 of ExperimentSettings.PointCloudRenderStyle.init(rawValue:);
  return specialized static ExperimentSettings.loadCaptureCircleOccupyCriteria(default:)(a1, 0xD000000000000030, 0x80000002466C2510, v1);
}

uint64_t specialized static ExperimentSettings.loadCaptureCircleOccupyCriteria(default:)(char a1, uint64_t a2, unint64_t a3, Swift::OpaquePointer a4)
{
  uint64_t v7 = a1 & 1;
  uint64_t v8 = specialized static ExperimentSettings.loadDefaults(forKey:)(a2, a3);
  if (v9)
  {
    uint64_t v10 = v8;
    id v11 = v9;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)logger);
    swift_bridgeObjectRetain_n();
    double v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v20 = v16;
      *(_DWORD *)uint64_t v15 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, (unint64_t)v11, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2465C2000, v13, v14, "Found key \"%s\" = \"%s\"", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v16, -1, -1);
      MEMORY[0x24C5348D0](v15, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v17._countAndFlagsBits = v10;
    v17._object = v11;
    Swift::Int v18 = _findStringSwitchCase(cases:string:)(a4, v17);
    swift_bridgeObjectRelease();
    if (v18)
    {
      if (v18 == 1) {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

float specialized static ExperimentSettings.loadCaptureCircleDepthHazeFloor(default:)(float a1)
{
  return specialized static ExperimentSettings.loadDepthHazeStartPercent(default:)(0xD000000000000036, 0x80000002466C2320, a1);
}

float specialized static ExperimentSettings.loadCaptureCircleDepthHazeDistancePower(default:)(float a1)
{
  return specialized static ExperimentSettings.loadDepthHazeStartPercent(default:)(0xD00000000000003ELL, 0x80000002466C22E0, a1);
}

float specialized static ExperimentSettings.loadDepthHazeStartPercent(default:)(uint64_t a1, unint64_t a2, float a3)
{
  uint64_t v6 = specialized static ExperimentSettings.loadDefaults(forKey:)(a1, a2);
  if (v7)
  {
    uint64_t v8 = v6;
    unint64_t v9 = v7;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)logger);
    swift_bridgeObjectRetain();
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v19 = v14;
      *(_DWORD *)uint64_t v13 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2465C2000, v11, v12, "Found key \"%s\" = \"%s\"", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v14, -1, -1);
      MEMORY[0x24C5348D0](v13, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v15 = objc_msgSend(self, sel_standardUserDefaults);
    uint64_t v16 = (void *)MEMORY[0x24C533410](a1, a2);
    objc_msgSend(v15, sel_floatForKey_, v16);
    a3 = v17;
  }
  return a3;
}

uint64_t specialized static ExperimentSettings.loadReticleDeltaFilterType(default:)(uint64_t a1, uint64_t a2)
{
  return specialized static ExperimentSettings.loadCaptureSoundModuleType(default:)(a1, a2, 0xD00000000000002FLL, 0x80000002466C2360);
}

uint64_t specialized static ExperimentSettings.loadCaptureSoundModuleType(default:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = specialized static ExperimentSettings.loadDefaults(forKey:)(a3, a4);
  if (v8)
  {
    uint64_t v9 = v7;
    unint64_t v10 = v8;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)logger);
    swift_bridgeObjectRetain_n();
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v17 = v15;
      *(_DWORD *)uint64_t v14 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2465C2000, v12, v13, "Found key \"%s\" = \"%s\"", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v15, -1, -1);
      MEMORY[0x24C5348D0](v14, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    return a1;
  }
  return v9;
}

ValueMetadata *type metadata accessor for DeadzoneFilter()
{
  return &type metadata for DeadzoneFilter;
}

uint64_t CircularDeadzoneFilter.apply(to:)(float32x2_t a1, float a2)
{
  if (sqrtf(vaddv_f32(vmul_f32(a1, a1))) <= a2) {
    return specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CircularDeadzoneFilter.apply(to:));
  }
  return result;
}

uint64_t protocol witness for Filter2D.apply(to:) in conformance CircularDeadzoneFilter(float32x2_t a1)
{
  return CircularDeadzoneFilter.apply(to:)(a1, *v1);
}

double SigmoidalDerivativeFilter.apply(to:)(double a1, float a2)
{
  float v2 = *((float *)&a1 + 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B7740;
  float v13 = tanhf(*(float *)&a1 / a2);
  float v4 = tanhf(v2 / a2);
  __asm { FMOV            V2.2S, #1.0 }
  *(float32x2_t *)(inited + 32) = vmul_f32(vmul_f32(vmul_n_f32((float32x2_t)vand_s8(vbsl_s8((int8x8_t)0x8000000080000000, _D2, *(int8x8_t *)&a1), vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)&a1), (int8x8_t)vcgtz_f32(*(float32x2_t *)&a1))), a2), *(float32x2_t *)&a1), (float32x2_t)__PAIR64__(LODWORD(v4), LODWORD(v13)));
  specialized SIMD.init<A>(_:)(inited);
  double v11 = v10;
  swift_setDeallocating();
  return v11;
}

double protocol witness for Filter2D.apply(to:) in conformance SigmoidalDerivativeFilter(double a1)
{
  return SigmoidalDerivativeFilter.apply(to:)(a1, *v1);
}

uint64_t protocol witness for Filter2D.apply(to:) in conformance ComposedFilter2D(double a1)
{
  uint64_t v3 = v1[8];
  uint64_t v4 = v1[9];
  __swift_project_boxed_opaque_existential_1(v1 + 5, v3);
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v5);
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 16))(v5, v6, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
}

void static Filter2DFactory.create(factoryString:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)logger);
  swift_bridgeObjectRetain_n();
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    double v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    v80[0] = v11;
    *(_DWORD *)double v10 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2465C2000, v8, v9, "Filter2DFactory: factoryString= \"%{public}s\"", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v11, -1, -1);
    MEMORY[0x24C5348D0](v10, -1, -1);
  }
  else
  {

    uint64_t v12 = swift_bridgeObjectRelease_n();
  }
  v80[0] = 32;
  v80[1] = 0xE100000000000000;
  MEMORY[0x270FA5388](v12);
  v73[2] = v80;
  swift_bridgeObjectRetain();
  float v13 = (void *)specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v73, a1, a2);
  uint64_t v14 = v13;
  if (v13[2])
  {
    unint64_t v79 = v13[2];
    unint64_t v16 = v13[4];
    unint64_t v15 = v13[5];
    uint64_t v17 = v13[6];
    uint64_t v18 = v13[7];
    swift_bridgeObjectRetain_n();
    uint64_t v78 = v7;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v77 = a3;
    if (v21)
    {
      unint64_t v76 = v15;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v75 = v17;
      v23 = (uint8_t *)v22;
      uint64_t v24 = swift_slowAlloc();
      v80[0] = v24;
      *(_DWORD *)v23 = 136446210;
      v74 = v23 + 4;
      swift_bridgeObjectRetain();
      unint64_t v25 = v16;
      uint64_t v26 = MEMORY[0x24C5334C0](v16, v76, v75, v18);
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      uint64_t v29 = v26;
      unint64_t v16 = v25;
      uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      unint64_t v15 = v76;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v19, v20, "typeName: %{public}s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v24, -1, -1);
      v30 = v23;
      uint64_t v17 = v75;
      MEMORY[0x24C5348D0](v30, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v35 = v79;
    if (v79 >= 2)
    {
      swift_bridgeObjectRetain_n();
      v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v75 = v17;
        unint64_t v76 = v15;
        v74 = (uint8_t *)v16;
        uint64_t v38 = v18;
        v39 = (uint8_t *)swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        v80[0] = v40;
        *(_DWORD *)v39 = 136446210;
        if (v14[2] < 2uLL)
        {
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        uint64_t v41 = v40;
        v73[4] = v39 + 4;
        uint64_t v42 = v14[8];
        uint64_t v43 = v14[9];
        uint64_t v45 = v14[10];
        uint64_t v44 = v14[11];
        swift_bridgeObjectRetain();
        uint64_t v46 = MEMORY[0x24C5334C0](v42, v43, v45, v44);
        unint64_t v48 = v47;
        swift_bridgeObjectRelease();
        uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v36, v37, "argList[1]: %{public}s", v39, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v41, -1, -1);
        MEMORY[0x24C5348D0](v39, -1, -1);

        uint64_t v18 = v38;
        unint64_t v16 = (unint64_t)v74;
        uint64_t v17 = v75;
        unint64_t v15 = v76;
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      unint64_t v35 = v79;
    }
    char v49 = specialized static StringProtocol.== infix<A>(_:_:)(v16, v15, v17, v18, 0xD000000000000010, 0x80000002466BE340);
    uint64_t v50 = v77;
    if (v49)
    {
      swift_bridgeObjectRelease();
      LODWORD(v81) = 1045220557;
      if (v35 < 2)
      {
        swift_bridgeObjectRelease();
        double v53 = 0.200000003;
LABEL_33:
        v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v57, v58))
        {
          v59 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v59 = 134349056;
          *(double *)v80 = v53;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_2465C2000, v57, v58, "Using CircularDeadzoneFilter radius = %{public}f", v59, 0xCu);
          MEMORY[0x24C5348D0](v59, -1, -1);
        }

        swift_beginAccess();
        v60 = &type metadata for CircularDeadzoneFilter;
        int v61 = v81;
        v62 = &protocol witness table for CircularDeadzoneFilter;
LABEL_42:
        *(void *)(v50 + 24) = v60;
        *(void *)(v50 + 32) = v62;
        *(_DWORD *)uint64_t v50 = v61;
        return;
      }
      if (v14[2] >= 2uLL)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v51 = Float.init(_:)();
        float v52 = *(float *)&v51;
        if ((v51 & 0x100000000) != 0) {
          float v52 = 0.2;
        }
        *(float *)&uint64_t v81 = v52;
        double v53 = v52;
        goto LABEL_33;
      }
      goto LABEL_48;
    }
    if (specialized static StringProtocol.== infix<A>(_:_:)(v16, v15, v17, v18, 0xD000000000000013, 0x80000002466BE360))
    {
      swift_bridgeObjectRelease();
      LODWORD(v81) = 0x40000000;
      if (v35 < 2)
      {
        swift_bridgeObjectRelease();
        double v56 = 2.0;
      }
      else
      {
        if (v14[2] < 2uLL)
        {
LABEL_49:
          __break(1u);
          return;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v54 = Float.init(_:)();
        float v55 = *(float *)&v54;
        if ((v54 & 0x100000000) != 0) {
          float v55 = 2.0;
        }
        *(float *)&uint64_t v81 = v55;
        double v56 = v55;
      }
      v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v65 = 134349056;
        *(double *)v80 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_2465C2000, v63, v64, "Using SigmoidalDerivativeFilter mu = %{public}f", v65, 0xCu);
        MEMORY[0x24C5348D0](v65, -1, -1);
      }

      swift_beginAccess();
      v60 = &type metadata for SigmoidalDerivativeFilter;
      int v61 = v81;
      v62 = &protocol witness table for SigmoidalDerivativeFilter;
      goto LABEL_42;
    }
    if (specialized static StringProtocol.== infix<A>(_:_:)(v16, v15, v17, v18, 0x6465736F706D6F43, 0xEE007265746C6946))
    {
      swift_bridgeObjectRelease();
      static Filter2DFactory.parseComposedFilter(argList:)(v14, v50);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v66, v67))
      {
        v68 = (uint8_t *)swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        *(_DWORD *)v68 = 136446210;
        unint64_t v79 = (unint64_t)(v68 + 4);
        v80[0] = v69;
        swift_bridgeObjectRetain();
        uint64_t v70 = MEMORY[0x24C5334C0](v16, v15, v17, v18);
        unint64_t v72 = v71;
        swift_bridgeObjectRelease();
        uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v66, v67, "Unknown Filter2D type: \"%{public}s\"", v68, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v69, -1, -1);
        MEMORY[0x24C5348D0](v68, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      *(void *)(v50 + 32) = 0;
      *(_OWORD *)uint64_t v50 = 0u;
      *(_OWORD *)(v50 + 16) = 0u;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v80[0] = v34;
      *(_DWORD *)v33 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2465C2000, v31, v32, "Got no args for Filter2D factory string= \"%{public}s\"", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v34, -1, -1);
      MEMORY[0x24C5348D0](v33, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

void static Filter2DFactory.parseComposedFilter(argList:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v7 = a1[2];
  if (v7 < 2)
  {
    __break(1u);
LABEL_43:
    swift_once();
LABEL_15:
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)logger);
    swift_bridgeObjectRetain_n();
    v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      unint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(void *)&long long v75 = v36;
      *(_DWORD *)unint64_t v35 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v37 = MEMORY[0x24C5334C0](v4, v5, v6, v2);
      unint64_t v39 = v38;
      swift_bridgeObjectRelease();
      *(void *)&long long v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, (uint64_t *)&v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v33, v34, "Expected first filter name but got: %{public}s", v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v36, -1, -1);
      MEMORY[0x24C5348D0](v35, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
LABEL_22:
    *(void *)(v3 + 32) = 0;
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    return;
  }
  uint64_t v3 = a2;
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  uint64_t v2 = a1[11];
  swift_bridgeObjectRetain();
  uint64_t v9 = MEMORY[0x24C5334C0](v4, v5, v6, v2);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  LOBYTE(v9) = specialized Sequence<>.contains(_:)(v9, v11, outlined read-only object #0 of static Filter2DFactory.parseComposedFilter(argList:));
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
  {
    swift_arrayDestroy();
    if (one-time initialization token for logger == -1) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }
  uint64_t v12 = a1 + 4;
  uint64_t v13 = specialized Collection.firstIndex(where:)((uint64_t)(a1 + 4), 2, (2 * v7) | 1, outlined read-only object #0 of static Filter2DFactory.parseComposedFilter(argList:));
  char v15 = v14;
  swift_arrayDestroy();
  if (v15)
  {
    if (one-time initialization token for logger == -1)
    {
LABEL_18:
      uint64_t v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)logger);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = v3;
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v44 = 0;
        _os_log_impl(&dword_2465C2000, v41, v42, "Can't find the second filter index!", v44, 2u);
        uint64_t v45 = v44;
        uint64_t v3 = v43;
        MEMORY[0x24C5348D0](v45, -1, -1);
      }

      goto LABEL_22;
    }
LABEL_46:
    swift_once();
    goto LABEL_18;
  }
  if (v13 < 1)
  {
    __break(1u);
    goto LABEL_45;
  }
  if (v7 < v13)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  *(void *)&long long v75 = a1;
  *((void *)&v75 + 1) = a1 + 4;
  uint64_t v76 = 1;
  uint64_t v77 = (2 * v13) | 1;
  uint64_t v66 = (2 * v7) | 1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Substring>);
  lazy protocol witness table accessor for type ArraySlice<Substring> and conformance ArraySlice<A>();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v16 = Sequence<>.joined(separator:)();
  uint64_t v17 = a1;
  unint64_t v19 = v18;
  static Filter2DFactory.create(factoryString:)(&v72);
  if (!v74)
  {
    outlined destroy of Filter2D?((uint64_t)&v72);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)logger);
    swift_bridgeObjectRetain();
    unint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      char v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(void *)&long long v75 = v50;
      *(_DWORD *)char v49 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)&long long v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v19, (uint64_t *)&v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2465C2000, v47, v48, "Can't parse the first filter from factory string: \"%{public}s\"", v49, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v50, -1, -1);
      MEMORY[0x24C5348D0](v49, -1, -1);
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  outlined init with take of Animation(&v72, (uint64_t)&v75);
  *(void *)&long long v72 = v17;
  *((void *)&v72 + 1) = v12;
  uint64_t v73 = v13;
  uint64_t v74 = v66;
  swift_bridgeObjectRetain();
  uint64_t v20 = Sequence<>.joined(separator:)();
  unint64_t v22 = v21;
  static Filter2DFactory.create(factoryString:)(&v69);
  if (!v71)
  {
    outlined destroy of Filter2D?((uint64_t)&v69);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    __swift_project_value_buffer(v51, (uint64_t)logger);
    swift_bridgeObjectRetain();
    float v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      *(void *)&long long v72 = v55;
      *(_DWORD *)uint64_t v54 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)&long long v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, (uint64_t *)&v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2465C2000, v52, v53, "Can't parse the second filter from factory string: \"%{public}s\"", v54, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v55, -1, -1);
      MEMORY[0x24C5348D0](v54, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRelease_n();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  outlined init with take of Animation(&v69, (uint64_t)&v72);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)logger);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl(&dword_2465C2000, v24, v25, "Making composed filter...", v26, 2u);
    MEMORY[0x24C5348D0](v26, -1, -1);
  }

  swift_bridgeObjectRetain_n();
  unint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    uint64_t v68 = v65;
    *(void *)&long long v69 = v17;
    *(_DWORD *)uint64_t v29 = 136446210;
    *((void *)&v69 + 1) = v12;
    uint64_t v70 = 1;
    uint64_t v71 = (2 * v13) | 1;
    uint64_t v30 = Sequence<>.joined(separator:)();
    *(void *)&long long v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v27, v28, "First filter: \"%{public}s\"", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v65, -1, -1);
    MEMORY[0x24C5348D0](v29, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain_n();
  double v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v56, v57))
  {
    os_log_type_t v58 = (uint8_t *)swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    uint64_t v68 = v67;
    *(_DWORD *)os_log_type_t v58 = 136446210;
    *(void *)&long long v69 = v17;
    *((void *)&v69 + 1) = v12;
    uint64_t v70 = v13;
    uint64_t v71 = v66;
    uint64_t v59 = Sequence<>.joined(separator:)();
    *(void *)&long long v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v56, v57, "Second filter: \"%{public}s\"", v58, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v67, -1, -1);
    MEMORY[0x24C5348D0](v58, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  int v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v63 = 0;
    _os_log_impl(&dword_2465C2000, v61, v62, "... done making composed filter.", v63, 2u);
    MEMORY[0x24C5348D0](v63, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *(void *)(v3 + 24) = &type metadata for ComposedFilter2D;
  *(void *)(v3 + 32) = &protocol witness table for ComposedFilter2D;
  uint64_t v64 = swift_allocObject();
  *(void *)uint64_t v3 = v64;
  outlined init with take of Animation(&v75, v64 + 16);
  outlined init with take of Animation(&v72, v64 + 56);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x263F8EE78];
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = String.index(after:)();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  }
  unint64_t v27 = v13[2];
  unint64_t v26 = v13[3];
  if (v27 >= v26 >> 1) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v13);
  }
  v13[2] = v27 + 1;
  os_log_type_t v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = String.index(after:)();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = String.subscript.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    }
    unint64_t v39 = v13[2];
    unint64_t v38 = v13[3];
    if (v39 >= v38 >> 1) {
      uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v13);
    }
    v13[2] = v39 + 1;
    uint64_t v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t specialized static StringProtocol.== infix<A>(_:_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v6 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (a3 == a5 && a4 == a6 && !(a1 >> 16) && a2 >> 16 == v6) {
    return 1;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
  }
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t result, uint64_t a2, unint64_t a3, void *a4)
{
  int64_t v4 = a3 >> 1;
  if (a3 >> 1 == a2)
  {
    return 0;
  }
  else
  {
    uint64_t v5 = a2;
    uint64_t v6 = a4[2];
    uint64_t v22 = a4 + 7;
    uint64_t v24 = result;
    while (v5 < v4)
    {
      unint64_t v7 = (uint64_t *)(result + 32 * v5);
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      uint64_t v11 = v7[2];
      uint64_t v10 = v7[3];
      swift_bridgeObjectRetain();
      uint64_t v12 = MEMORY[0x24C5334C0](v8, v9, v11, v10);
      uint64_t v14 = v13;
      if (v6)
      {
        uint64_t v15 = v12;
        BOOL v16 = a4[4] == v12 && a4[5] == v13;
        if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_23:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v5;
        }
        if (v6 != 1)
        {
          uint64_t v17 = v22;
          uint64_t v18 = 1;
          while (1)
          {
            uint64_t v19 = v18 + 1;
            if (__OFADD__(v18, 1)) {
              break;
            }
            if (*(v17 - 1) == v15 && *v17 == v14) {
              goto LABEL_23;
            }
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if (result) {
              goto LABEL_23;
            }
            v17 += 2;
            ++v18;
            if (v19 == v6) {
              goto LABEL_20;
            }
          }
          __break(1u);
          break;
        }
      }
LABEL_20:
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (__OFADD__(v5++, 1)) {
        goto LABEL_27;
      }
      uint64_t result = v24;
      if (v5 == v4) {
        return 0;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<Substring> and conformance ArraySlice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<Substring>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t outlined destroy of Filter2D?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Filter2D?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_246666B78()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t sub_246666BB8()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_246666BF0()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t destroy for ComposedFilter2D(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

uint64_t initializeWithCopy for ComposedFilter2D(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for ComposedFilter2D(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for ComposedFilter2D(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ComposedFilter2D(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ComposedFilter2D(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ComposedFilter2D()
{
  return &type metadata for ComposedFilter2D;
}

ValueMetadata *type metadata accessor for CircularDeadzoneFilter()
{
  return &type metadata for CircularDeadzoneFilter;
}

ValueMetadata *type metadata accessor for SigmoidalDerivativeFilter()
{
  return &type metadata for SigmoidalDerivativeFilter;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed MTLCommandBuffer) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

id one-time initialization function for mtlDevice()
{
  id result = MTLCreateSystemDefaultDevice();
  if (result) {
    static FullscreenCoveragePointsRenderer.mtlDevice = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

{
  id result;

  id result = MTLCreateSystemDefaultDevice();
  if (result) {
    static VoxelRenderer.mtlDevice = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

id one-time initialization function for mtlLibrary()
{
  id result = closure #1 in variable initialization expression of static FullscreenCoveragePointsRenderer.mtlLibrary();
  static FullscreenCoveragePointsRenderer.mtlLibrary = (uint64_t)result;
  return result;
}

{
  id result;

  id result = closure #1 in variable initialization expression of static VoxelRenderer.mtlLibrary();
  static VoxelRenderer.mtlLibrary = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static FullscreenCoveragePointsRenderer.mtlLibrary()
{
  v6[1] = *(id *)MEMORY[0x263EF8340];
  if (one-time initialization token for mtlDevice != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static FullscreenCoveragePointsRenderer.mtlDevice;
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  v6[0] = 0;
  id v1 = objc_msgSend(v0, sel_newDefaultLibraryWithBundle_error_, static FullscreenCoveragePointsRenderer.bundle, v6);
  if (v1)
  {
    id v2 = v6[0];
  }
  else
  {
    id v3 = v6[0];
    long long v4 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v1;
}

uint64_t FullscreenCoveragePointsRenderer.voxelRenderer.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer____lazy_storage___voxelRenderer;
  uint64_t v2 = *(void *)(v0
                 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer____lazy_storage___voxelRenderer);
  uint64_t v3 = v2;
  if (v2 == 1)
  {
    uint64_t v3 = closure #1 in FullscreenCoveragePointsRenderer.voxelRenderer.getter(v0);
    uint64_t v4 = *(void *)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    swift_retain();
    outlined consume of PlatterRenderer??(v4);
  }
  outlined copy of PlatterRenderer??(v2);
  return v3;
}

uint64_t closure #1 in FullscreenCoveragePointsRenderer.voxelRenderer.getter(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_view);
  type metadata accessor for VoxelRenderer();
  swift_allocObject();
  return VoxelRenderer.init(view:)(v1);
}

void FullscreenCoveragePointsRenderer.init(pointCloud:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = &v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_coveragePointCloud];
  uint64_t v6 = type metadata accessor for CoveragePointCloud();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = &v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_coveragePoints];
  uint64_t v8 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  int v9 = &v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_objectToWorld];
  long long v10 = *MEMORY[0x263EF89A8];
  long long v11 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  long long v12 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
  long long v13 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
  *(_OWORD *)int v9 = *MEMORY[0x263EF89A8];
  *((_OWORD *)v9 + 1) = v11;
  *((_OWORD *)v9 + 2) = v12;
  *((_OWORD *)v9 + 3) = v13;
  uint64_t v14 = &v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_objectToWorldUnscaled];
  *(_OWORD *)uint64_t v14 = v10;
  *((_OWORD *)v14 + 1) = v11;
  *((_OWORD *)v14 + 2) = v12;
  *((_OWORD *)v14 + 3) = v13;
  uint64_t v15 = &v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewToWorld];
  *(_OWORD *)uint64_t v15 = v10;
  *((_OWORD *)v15 + 1) = v11;
  *((_OWORD *)v15 + 2) = v12;
  *((_OWORD *)v15 + 3) = v13;
  BOOL v16 = &v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_projection];
  *(_OWORD *)BOOL v16 = v10;
  *((_OWORD *)v16 + 1) = v11;
  *((_OWORD *)v16 + 2) = v12;
  *((_OWORD *)v16 + 3) = v13;
  *(void *)&v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_lookAtBoxWorldProvider] = 0;
  *(void *)&v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_commandQueue] = 0;
  *(void *)&v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_renderPrimitivePointsPipeline] = 0;
  *(void *)&v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer____lazy_storage___voxelRenderer] = 1;
  *(void *)&v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraFrustumRenderer] = 0;
  uint64_t v17 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_renderStyle;
  uint64_t v18 = v1;
  v1[v17] = specialized static ExperimentSettings.loadPointCloudRenderStyle(default:)(0) & 1;
  uint64_t v19 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_inFlightQueue;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InFlightQueue<FullscreenCoveragePointsRenderer.ResourceEntry>);
  uint64_t v20 = (void *)swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = 0;
  uint64_t v22 = MEMORY[0x263F8EE78];
  v20[2] = v21;
  v20[3] = 0;
  v20[4] = v22;
  *(void *)&v18[v19] = v20;
  uint64_t v23 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_inFlightLock;
  uint64_t v24 = swift_allocObject();
  *(_DWORD *)(v24 + 16) = 0;
  *(void *)&v18[v23] = v24;
  *(void *)&v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_depthStencilState] = 0;
  *(void *)&v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_baseRenderer] = 0;
  *(int64x2_t *)&v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize] = vdupq_n_s64(0x4059000000000000uLL);
  *(void *)&v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_turnTableCameraControl] = 0;
  *(void *)&v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_dragGesture] = 0;
  *(void *)&v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_transformProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v25 = &v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor];
  *(_OWORD *)uint64_t v25 = 0u;
  *((_OWORD *)v25 + 1) = 0u;
  *(_DWORD *)&v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportFOVDegs] = 1114636288;
  *(_DWORD *)&v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_sphereRadiusGain] = 1045220557;
  *(void *)&v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_localTime] = 0;
  unint64_t v26 = &v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_colorScheme];
  uint64_t v27 = *MEMORY[0x263F18508];
  uint64_t v28 = type metadata accessor for ColorScheme();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104))(v26, v27, v28);
  *(void *)&v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraPathRenderer] = 0;
  v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_showShotLocations] = 0;
  if (one-time initialization token for mtlDevice != -1) {
    swift_once();
  }
  uint64_t v29 = static FullscreenCoveragePointsRenderer.mtlDevice;
  *(void *)&v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_device] = static FullscreenCoveragePointsRenderer.mtlDevice;
  id v30 = objc_allocWithZone(MEMORY[0x263F12D90]);
  swift_unknownObjectRetain();
  id v31 = objc_msgSend(v30, sel_initWithFrame_device_, v29, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_view] = v31;
  id v32 = v31;

  v48.receiver = v18;
  v48.super_class = (Class)type metadata accessor for FullscreenCoveragePointsRenderer(0);
  uint64_t v33 = (char *)objc_msgSendSuper2(&v48, sel_init);
  FullscreenCoveragePointsRenderer.initPointPrimitiveRenderPipeline()();
  if (v3)
  {
    outlined destroy of URL?(a1, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);

    return;
  }
  uint64_t v49 = a1;
  objc_msgSend(*(id *)&v33[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_view], sel_setDelegate_, v33);
  uint64_t v34 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_device;
  uint64_t v35 = *(void **)&v33[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_device];
  type metadata accessor for BaseRenderer();
  uint64_t v36 = (void *)swift_allocObject();
  v36[3] = 0;
  v36[4] = 0;
  v36[2] = v35;
  id v37 = objc_allocWithZone(MEMORY[0x263F128A0]);
  swift_unknownObjectRetain_n();
  id v38 = objc_msgSend(v37, sel_init);
  objc_msgSend(v38, sel_setDepthCompareFunction_, 1);
  objc_msgSend(v38, sel_setDepthWriteEnabled_, 1);
  id v39 = objc_msgSend(v35, sel_newDepthStencilStateWithDescriptor_, v38);

  if (v39)
  {
    v36[3] = v39;
    BaseRenderer.updateDepthAttachmentTexture(width:height:)(100, 100);
    swift_unknownObjectRelease();
    uint64_t v40 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_baseRenderer;
    *(void *)&v33[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_baseRenderer] = v36;
    swift_release();
    if (*(void *)&v33[v40])
    {
      uint64_t v41 = *(void **)&v33[v34];
      id v42 = objc_allocWithZone(MEMORY[0x263F128A0]);
      swift_retain();
      swift_unknownObjectRetain();
      id v43 = objc_msgSend(v42, sel_init);
      objc_msgSend(v43, sel_setDepthCompareFunction_, 1);
      objc_msgSend(v43, sel_setDepthWriteEnabled_, 1);
      id v44 = objc_msgSend(v41, sel_newDepthStencilStateWithDescriptor_, v43);
      swift_release();
      swift_unknownObjectRelease();

      *(void *)&v33[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_depthStencilState] = v44;
      swift_unknownObjectRelease();
      id v45 = objc_msgSend(v32, sel_layer);
      objc_msgSend(v45, sel_setOpaque_, 0);

      uint64_t v46 = (uint64_t)&v33[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_coveragePointCloud];
      swift_beginAccess();
      uint64_t v47 = v49;
      outlined assign with copy of CoveragePointCloud?(v49, v46);
      swift_endAccess();
      FullscreenCoveragePointsRenderer.prepareTurnTable()();

      outlined destroy of URL?(v47, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id FullscreenCoveragePointsRenderer.__deallocating_deinit()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_dragGesture];
  *(void *)&v0[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_dragGesture] = 0;

  *(void *)&v0[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_transformProvider + 8] = 0;
  swift_unknownObjectWeakAssign();
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for FullscreenCoveragePointsRenderer(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t ObjC metadata update function for FullscreenCoveragePointsRenderer()
{
  return type metadata accessor for FullscreenCoveragePointsRenderer(0);
}

uint64_t type metadata accessor for FullscreenCoveragePointsRenderer(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for FullscreenCoveragePointsRenderer);
}

void FullscreenCoveragePointsRenderer.colorScheme.didset()
{
  uint64_t v1 = type metadata accessor for ColorScheme();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)logger);
  v14[0] = v0;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v15 = v9;
    long long v10 = (char *)v14[0] + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_colorScheme;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v10, v1);
    uint64_t v11 = String.init<A>(describing:)();
    v14[1] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v6, v7, "colorScheme = %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v9, -1, -1);
    MEMORY[0x24C5348D0](v8, -1, -1);
  }
  else
  {

    id v13 = v14[0];
  }
}

void FullscreenCoveragePointsRenderer.setRenderPointCloud(pointCloud:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for CoveragePointCloud();
  uint64_t v7 = *(void *)(v25 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v25);
  long long v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v12 = (char *)&v22 - v11;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)logger);
  outlined init with copy of CoveragePointCloud(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v23 = v17;
    *(_DWORD *)uint64_t v16 = 141558274;
    uint64_t v26 = 1752392040;
    v27[0] = v17;
    uint64_t v24 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2080;
    outlined init with copy of CoveragePointCloud((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
    uint64_t v18 = String.init<A>(describing:)();
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v27);
    a1 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s19_RealityKit_SwiftUI18CoveragePointCloudVWOhTm_0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
    _os_log_impl(&dword_2465C2000, v14, v15, "Setting renderPointCloud: %{mask.hash}s", (uint8_t *)v16, 0x16u);
    uint64_t v20 = v23;
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v20, -1, -1);
    MEMORY[0x24C5348D0](v16, -1, -1);
  }
  else
  {
    _s19_RealityKit_SwiftUI18CoveragePointCloudVWOhTm_0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  }

  if (CoveragePointCloud.isValid()())
  {
    outlined init with copy of CoveragePointCloud(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v6, 0, 1, v25);
    uint64_t v21 = v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_coveragePointCloud;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)v6, v21, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
    swift_endAccess();
    FullscreenCoveragePointsRenderer.updateInternal()();
  }
}

uint64_t FullscreenCoveragePointsRenderer.setCameraFrustumRenderer(to:)(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraFrustumRenderer;
  *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraFrustumRenderer) = a1;
  swift_retain();
  uint64_t result = swift_release();
  if (*(void *)(v1 + v3))
  {
    uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_device);
    uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_view);
    swift_retain();
    CameraFrustumRenderer.setup(device:pixelFormat:)(v5, (uint64_t)objc_msgSend(v6, sel_colorPixelFormat));
    uint64_t result = swift_release();
  }
  if (a1) {
    char v7 = *(unsigned char *)(a1 + 24);
  }
  else {
    char v7 = 0;
  }
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_showShotLocations) = v7;
  return result;
}

Swift::Void __swiftcall FullscreenCoveragePointsRenderer.mtkView(_:drawableSizeWillChange:)(MTKView _, CGSize drawableSizeWillChange)
{
  uint64_t v3 = v2;
  CGFloat height = drawableSizeWillChange.height;
  CGFloat width = drawableSizeWillChange.width;
  type metadata accessor for NSObject();
  if (static NSObject.== infix(_:_:)())
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)logger);
    char v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v18 = v10;
      *(_DWORD *)uint64_t v9 = 136446210;
      type metadata accessor for CGSize(0);
      uint64_t v11 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v7, v8, "mtkView: size changed!  newSize=%{public}s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v10, -1, -1);
      MEMORY[0x24C5348D0](v9, -1, -1);
    }

    uint64_t v13 = (CGFloat *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize);
    *uint64_t v13 = width;
    v13[1] = height;
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_2465C2000, oslog, v15, "mtkView delegate expected a different view.  Ignoring...", v16, 2u);
      MEMORY[0x24C5348D0](v16, -1, -1);
    }
  }
}

uint64_t FullscreenCoveragePointsRenderer.prepareTurnTable()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Prepare turntable camera control!", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of FullscreenCoveragePointsRenderer.prepareTurnTable());
  __n128 v17 = v6;
  type metadata accessor for TurnTableCameraControl();
  swift_allocObject();
  uint64_t v7 = specialized TurnTableCameraControl.init(startTransformProvider:radius:lookAtWorld:gainX:gainY:)(1.0, v17, 0.01, 0.01, 0, 0);
  uint64_t v8 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_turnTableCameraControl;
  *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_turnTableCameraControl) = v7;
  uint64_t result = swift_release();
  if (*(void *)(v1 + v8))
  {
    uint64_t v10 = (char *)objc_allocWithZone((Class)type metadata accessor for DragGestureRecognizer());
    uint64_t v11 = swift_retain();
    id v12 = specialized DragGestureRecognizer.init(draggable:)(v11, v10);
    uint64_t v13 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_dragGesture;
    if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_dragGesture))
    {
      objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_view), sel_removeGestureRecognizer_);
      uint64_t v14 = *(void **)(v1 + v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    *(void *)(v1 + v13) = v12;
    id v15 = v12;

    if (*(void *)(v1 + v13)) {
      objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_view), sel_addGestureRecognizer_);
    }

    uint64_t v16 = &protocol witness table for TurnTableCameraControl;
    if (!*(void *)(v1 + v8)) {
      uint64_t v16 = 0;
    }
    *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_transformProvider + 8) = v16;
    return swift_unknownObjectWeakAssign();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void FullscreenCoveragePointsRenderer.updateInternal()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  v133.i64[0] = (uint64_t)&v126 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v126 - v6;
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v126 - v9;
  MEMORY[0x270FA5388](v8);
  id v12 = (char *)&v126 - v11;
  uint64_t v13 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_coveragePointCloud;
  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v13, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  uint64_t v14 = type metadata accessor for CoveragePointCloud();
  id v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  int v16 = v15(v12, 1, v14);
  outlined destroy of URL?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  if (v16 == 1) {
    return;
  }
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v13, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  if (v15(v10, 1, v14) == 1) {
    goto LABEL_34;
  }
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  MEMORY[0x270FA5388](v17 - 8);
  unint64_t v19 = (char *)&v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v10, (uint64_t)v19, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  _s19_RealityKit_SwiftUI18CoveragePointCloudVWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  uint64_t v20 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_coveragePoints;
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)v19, v20, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  swift_endAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v13, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  if (v15(v7, 1, v14) == 1)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  *(double *)v21.i64 = CoveragePointCloud.bboxWorld.getter();
  float32x4_t v132 = v21;
  float32x4_t v131 = v22;
  float32x4_t v130 = v23;
  float32x4_t v129 = v24;
  _s19_RealityKit_SwiftUI18CoveragePointCloudVWOhTm_0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  Transform.init(matrix:)();
  float32x4_t v28 = v27;
  double v29 = *(double *)v26.i64;
  uint64_t v30 = v133.i64[0];
  if (one-time initialization token for automaticBoundingBoxPaddingFactor != -1)
  {
    float32x4_t v132 = v25;
    float32x4_t v131 = v26;
    float32x4_t v130 = v28;
    swift_once();
    double v29 = *(double *)v131.i64;
    float32x4_t v25 = v132;
  }
  *(double *)v31.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(v29, v25);
  id v32 = (float32x4_t *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_objectToWorld);
  *id v32 = v31;
  v32[1] = v33;
  v32[2] = v34;
  v32[3] = v35;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v13, v30, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  if (v15((char *)v30, 1, v14) == 1) {
    goto LABEL_36;
  }
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  MEMORY[0x270FA5388](v36 - 8);
  id v38 = (char *)&v126 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v30 + *(int *)(v14 + 20), (uint64_t)v38, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  uint64_t v39 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39) == 1)
  {
    outlined destroy of URL?((uint64_t)v38, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
    float32x4_t v129 = *(float32x4_t *)MEMORY[0x263EF89A8];
    float32x4_t v128 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 16);
    float32x4_t v127 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 32);
    float32x4_t v126 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 48);
  }
  else
  {
    ObjectCaptureSession.Frame.Object.transform.getter();
    float32x4_t v129 = v41;
    float32x4_t v128 = v42;
    float32x4_t v127 = v43;
    float32x4_t v126 = v44;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
  }
  *(double *)v45.i64 = CoveragePointCloud.objectToInitialBoxWorld.getter();
  float32x4_t v132 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v129, v45.f32[0]), v128, *(float32x2_t *)v45.f32, 1), v127, v45, 2), v126, v45, 3);
  float32x4_t v131 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v129, v46.f32[0]), v128, *(float32x2_t *)v46.f32, 1), v127, v46, 2), v126, v46, 3);
  float32x4_t v130 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v129, v47.f32[0]), v128, *(float32x2_t *)v47.f32, 1), v127, v47, 2), v126, v47, 3);
  float32x4_t v129 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v129, v48.f32[0]), v128, *(float32x2_t *)v48.f32, 1), v127, v48, 2), v126, v48, 3);
  _s19_RealityKit_SwiftUI18CoveragePointCloudVWOhTm_0(v30, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  uint64_t v49 = (float32x4_t *)(v1
                      + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_objectToWorldUnscaled);
  float32x4_t v50 = v131;
  *uint64_t v49 = v132;
  v49[1] = v50;
  float32x4_t v51 = v129;
  v49[2] = v130;
  v49[3] = v51;
  float32x4_t v52 = *v32;
  float32x4_t v132 = v32[1];
  float32x4_t v133 = v52;
  float32x4_t v131 = v32[2];
  float32x4_t v130 = v32[3];
  uint64_t v53 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraFrustumRenderer;
  uint64_t v54 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraFrustumRenderer);
  if (v54)
  {
    if (*(unsigned char *)(v54 + 24) == 1)
    {
      uint64_t v55 = MEMORY[0x24C5349C0](v54 + 16);
      if (v55)
      {
        double v56 = (void *)v55;
        uint64_t v57 = v55 + OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_cameraPosesBoundingBox;
        swift_beginAccess();
        uint64_t v59 = *(void *)v57;
        uint64_t v58 = *(void *)(v57 + 8);
        uint64_t v61 = *(void *)(v57 + 16);
        uint64_t v60 = *(void *)(v57 + 24);
        LOBYTE(v57) = *(unsigned char *)(v57 + 32);
        swift_retain();

        if ((v57 & 1) == 0)
        {
          v62.i64[0] = v59;
          v62.i64[1] = v58;
          float32x4_t v129 = v62;
          v62.i64[0] = v61;
          v62.i64[1] = v60;
          float32x4_t v128 = v62;
          specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of FullscreenCoveragePointsRenderer.updateInternal());
          float32x4_t v127 = v63;
          specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of FullscreenCoveragePointsRenderer.updateInternal());
          BoundingBox.init(min:max:)();
          BoundingBox.transformed(by:)();
          BoundingBox.union(_:)();
          *(double *)v66.i64 = specialized static BoundingBoxHelpers.asSRTMatrix(box:)(v64, v65);
          float32x4_t v132 = v67;
          float32x4_t v133 = v66;
          float32x4_t v131 = v68;
          float32x4_t v130 = v69;
        }
        swift_release();
      }
    }
  }
  uint64_t v70 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_lookAtBoxWorldProvider;
  uint64_t v71 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_lookAtBoxWorldProvider);
  if (!v71)
  {
    Transform.init(matrix:)();
    float32x4_t v128 = v84;
    float32x4_t v127 = v85;
    float32x4_t v129 = v86;
    uint64_t v87 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_localTime);
    type metadata accessor for AnimatedTargetTransformProvider();
    uint64_t v88 = swift_allocObject();
    *(_OWORD *)(v88 + 208) = 0u;
    *(_OWORD *)(v88 + 224) = 0u;
    *(_OWORD *)(v88 + 240) = 0u;
    *(void *)(v88 + 192) = 0x3FC999999999999ALL;
    *(void *)(v88 + 256) = 0;
    *(unsigned char *)(v88 + 264) = 1;
    float32x4_t v89 = v128;
    float32x4_t v90 = v127;
    *(float32x4_t *)(v88 + 96) = v128;
    *(float32x4_t *)(v88 + 112) = v90;
    *(int64x2_t *)(v88 + 32) = vdupq_n_s64(0xFFF0000000000000);
    *(float32x4_t *)(v88 + 48) = v89;
    float32x4_t v91 = v129;
    *(float32x4_t *)(v88 + 64) = v90;
    *(float32x4_t *)(v88 + 80) = v91;
    *(float32x4_t *)(v88 + 128) = v91;
    *(float32x4_t *)(v88 + 144) = v89;
    *(float32x4_t *)(v88 + 160) = v90;
    *(float32x4_t *)(v88 + 176) = v91;
    *(void *)(v88 + 24) = v87;
    *(void *)(v88 + 16) = 0x4000000000000000;
    *(void *)(v1 + v70) = v88;
LABEL_22:
    swift_release();
    goto LABEL_23;
  }
  uint64_t v72 = *(void *)(v1 + v53);
  if (!v72) {
    goto LABEL_24;
  }
  int v73 = *(unsigned __int8 *)(v72 + 24);
  if (*(unsigned __int8 *)(v1
                          + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_showShotLocations) != v73)
  {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_showShotLocations) = v73;
    uint64_t v74 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_localTime;
    double v75 = *(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_localTime);
    if (*(double *)(v71 + 24) > v75)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    *(double *)(v71 + 24) = v75;
    swift_retain();
    swift_retain();
    AnimatedTargetTransformProvider.updateAnimation()();
    float32x4_t v129 = *(float32x4_t *)(v71 + 48);
    float32x4_t v128 = *(float32x4_t *)(v71 + 64);
    float32x4_t v127 = *(float32x4_t *)(v71 + 80);
    swift_release();
    specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v127.i64, v128);
    Transform.init(matrix:)();
    float32x4_t v128 = v76;
    float32x4_t v127 = v77;
    float32x4_t v129 = v78;
    uint64_t v79 = *(void *)(v1 + v74);
    type metadata accessor for AnimatedTargetTransformProvider();
    uint64_t v80 = swift_allocObject();
    *(_OWORD *)(v80 + 208) = 0u;
    *(_OWORD *)(v80 + 224) = 0u;
    *(_OWORD *)(v80 + 240) = 0u;
    *(void *)(v80 + 192) = 0x3FC999999999999ALL;
    *(void *)(v80 + 256) = 0;
    *(unsigned char *)(v80 + 264) = 1;
    float32x4_t v81 = v128;
    float32x4_t v82 = v127;
    *(float32x4_t *)(v80 + 96) = v128;
    *(float32x4_t *)(v80 + 112) = v82;
    *(int64x2_t *)(v80 + 32) = vdupq_n_s64(0xFFF0000000000000);
    *(float32x4_t *)(v80 + 48) = v81;
    float32x4_t v83 = v129;
    *(float32x4_t *)(v80 + 64) = v82;
    *(float32x4_t *)(v80 + 80) = v83;
    *(float32x4_t *)(v80 + 128) = v83;
    *(float32x4_t *)(v80 + 144) = v81;
    *(float32x4_t *)(v80 + 160) = v82;
    *(float32x4_t *)(v80 + 176) = v83;
    *(void *)(v80 + 24) = v79;
    *(void *)(v80 + 16) = 0x4000000000000000;
    *(void *)(v1 + v70) = v80;
    swift_release();
    goto LABEL_22;
  }
LABEL_23:
  uint64_t v71 = *(void *)(v1 + v70);
  if (!v71)
  {
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
LABEL_24:
  swift_retain();
  Transform.init(matrix:)();
  uint64_t v92 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_localTime;
  double v93 = *(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_localTime);
  *(_OWORD *)(v71 + 208) = v94;
  *(_OWORD *)(v71 + 224) = v95;
  *(_OWORD *)(v71 + 240) = v96;
  *(double *)(v71 + 256) = v93 + 0.5;
  *(unsigned char *)(v71 + 264) = 0;
  AnimatedTargetTransformProvider.updateAnimation()();
  swift_release();
  uint64_t v97 = *(void *)(v1 + v70);
  if (!v97)
  {
LABEL_37:
    __break(1u);
    return;
  }
  double v98 = *(double *)(v1 + v92);
  if (*(double *)(v97 + 24) > v98) {
    goto LABEL_32;
  }
  *(double *)(v97 + 24) = v98;
  swift_retain();
  AnimatedTargetTransformProvider.updateAnimation()();
  float32x4_t v99 = *(float32x4_t *)(v97 + 48);
  float32x4_t v132 = *(float32x4_t *)(v97 + 64);
  float32x4_t v133 = v99;
  float32x4_t v131 = *(float32x4_t *)(v97 + 80);
  swift_release();
  *(double *)v100.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v131.i64, v132);
  float32x4_t v132 = v101;
  float32x4_t v133 = v100;
  float32x4_t v131 = v102;
  float32x4_t v130 = v103;
  *id v32 = v100;
  v32[1] = v101;
  v32[2] = v102;
  v32[3] = v103;
  float v104 = (float)(*(float *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportFOVDegs)
               * 3.1416)
       / 180.0;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static BoundingBoxHelpers.getBoundingSphere(boxWorld:));
  Transform.init(matrix:)();
  Transform.init(matrix:)();
  float32x4_t v132 = v106;
  float32x4_t v133 = v105;
  float32x4_t v131 = v107;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B7740;
  *(float *)(inited + 32) = v104;
  *(float *)(inited + 36) = v104;
  specialized SIMD.init<A>(_:)(inited);
  double v110 = v109;
  swift_setDeallocating();
  specialized static MathHelpers.computeCameraDistanceToContainSphere(boxWorld:cameraFovRadians:nearPlaneDistance:boxPadding:)(v133, v110, 0.001, 1.1);
  *(double *)v111.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v131.i64, v132);
  float32x4_t v132 = v112;
  float32x4_t v133 = v111;
  float32x4_t v131 = v113;
  float32x4_t v130 = v114;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static BoundingBoxHelpers.getBoundingSphere(boxWorld:));
  Transform.init(matrix:)();
  float v115 = *(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize)
       / *(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize + 8);
  v116.f32[0] = specialized static MathHelpers.computePerspectiveMatrix(fovRadians:aspectRatio:nearZ:farZ:)(v104, v115);
  v117 = (float32x4_t *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_projection);
  float32x4_t *v117 = v116;
  v117[1] = v118;
  v117[2] = v119;
  v117[3] = v120;
  FullscreenCoveragePointsRenderer.updateTurnTable()();
  if (*(void *)(v1 + v53))
  {
    Swift::Double v121 = *(double *)(v1 + v92);
    simd_float4x4 v134 = __invert_f4(*(simd_float4x4 *)(v1
                                        + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewToWorld));
    float32x4_t v132 = (float32x4_t)v134.columns[1];
    float32x4_t v133 = (float32x4_t)v134.columns[0];
    float32x4_t v131 = (float32x4_t)v134.columns[2];
    float32x4_t v130 = (float32x4_t)v134.columns[3];
    float32x4_t v129 = *v117;
    float32x4_t v128 = v117[1];
    float32x4_t v127 = v117[2];
    float32x4_t v126 = v117[3];
    v122 = (simd_float4x4 *)swift_retain();
    CameraFrustumRenderer.update(time:worldToView:viewToClip:)(v121, v122, v123);
    swift_release();
  }
  if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraPathRenderer))
  {
    simd_float4x4 v135 = __invert_f4(*(simd_float4x4 *)(v1
                                        + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewToWorld));
    float32x4_t v132 = (float32x4_t)v135.columns[1];
    float32x4_t v133 = (float32x4_t)v135.columns[0];
    float32x4_t v131 = (float32x4_t)v135.columns[2];
    float32x4_t v130 = (float32x4_t)v135.columns[3];
    float32x4_t v129 = *v117;
    float32x4_t v128 = v117[1];
    float32x4_t v127 = v117[2];
    float32x4_t v126 = v117[3];
    v124 = (simd_float4x4 *)swift_retain();
    CameraPathRenderer.update(worldToView:viewToClip:)(v124, v125);
    swift_release();
  }
}

void FullscreenCoveragePointsRenderer.updateTurnTable()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (float32x4_t *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_objectToWorld);
  Transform.init(matrix:)();
  float32x4_t v50 = v4;
  float32x4_t v51 = v3;
  double v49 = v5;
  uint64_t v6 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_projection;
  float v7 = *(float *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_projection);
  float v8 = *(float *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_projection + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B7740;
  float v10 = atanf(1.0 / v7);
  *(float *)(inited + 32) = v10 + v10;
  float v11 = atanf(1.0 / v8);
  *(float *)(inited + 36) = v11 + v11;
  specialized SIMD.init<A>(_:)(inited);
  swift_setDeallocating();
  float32x4_t v53 = *v2;
  float32x4_t v55 = v2[1];
  float32x4_t v57 = v2[2];
  float32x4_t v59 = v2[3];
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of FullscreenCoveragePointsRenderer.updateTurnTable());
  float32x4_t v60 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v53, v12.f32[0]), v55, *(float32x2_t *)v12.f32, 1), v57, v12, 2), v59, v12, 3);
  uint64_t v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_2466B5DE0;
  *(void *)(v13 + 32) = v60.i64[0];
  *(_DWORD *)(v13 + 40) = v60.i32[2];
  specialized SIMD.init<A>(_:)(v13);
  float32x4_t v61 = (float32x4_t)v14;
  swift_setDeallocating();
  uint64_t v15 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_turnTableCameraControl;
  int v16 = *(__n128 **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_turnTableCameraControl);
  if (!v16)
  {
    __break(1u);
    goto LABEL_14;
  }
  v16[5] = (__n128)v61;
  swift_retain();
  TurnTableCameraControl.update()();
  swift_release();
  uint64_t v17 = *(float **)(v1 + v15);
  if (!v17)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  float v18 = v17[15];
  float v19 = fminf(v17[16], 1.0);
  if (v19 > v18) {
    float v18 = v19;
  }
  v17[14] = v18;
  swift_retain();
  TurnTableCameraControl.update()();
  swift_release();
  float32x4_t v28 = *(float32x2_t **)(v1 + v15);
  if (!v28) {
    goto LABEL_15;
  }
  *(float32x2_t *)v27.f32 = vsub_f32(v28[24], *(float32x2_t *)v61.f32);
  v27.f32[2] = v28[25].f32[0] - v61.f32[2];
  int32x4_t v29 = (int32x4_t)vmulq_f32(v27, v27);
  v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
  float32x2_t v30 = vrsqrte_f32((float32x2_t)v29.u32[0]);
  float32x2_t v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v30, v30)));
  float32x4_t v32 = vmulq_n_f32(v27, vmul_f32(v31, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v31, v31))).f32[0]);
  *(float32x2_t *)v33.f32 = vsub_f32(0, *(float32x2_t *)v32.f32);
  v33.f32[2] = 0.0 - v32.f32[2];
  v33.i32[3] = 0;
  specialized static MathHelpers.computeCameraMatrixForConstrainedLookAt(box:boxPadding:lookAtPoint:lookAtDir:projection:useBoundingSphere:)(1, v51, v50, v49, 1.1, (__n128)v61, v33, COERCE_FLOAT(*(_OWORD *)v6), *(double *)(v6 + 16), v20, v21, v22, v23, v24, v25, v26, *(float32x4_t *)(v6 + 32), *(float32x4_t *)(v6 + 48));
  float32x4_t v52 = v34;
  float32x4_t v54 = v35;
  float32x4_t v56 = v36;
  float32x4_t v58 = v37;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of FullscreenCoveragePointsRenderer.updateTurnTable());
  uint64_t v39 = *(float **)(v1 + v15);
  if (!v39)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  float32x4_t v40 = vsubq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v52, v38.f32[0]), v54, *(float32x2_t *)v38.f32, 1), v56, v38, 2), v58, v38, 3), v61);
  float32x4_t v41 = vmulq_f32(v40, v40);
  float v42 = sqrtf(v41.f32[2] + vaddv_f32(*(float32x2_t *)v41.f32));
  if (v39[16] < v42) {
    float v42 = v39[16];
  }
  if (v42 <= v39[15]) {
    float v42 = v39[15];
  }
  v39[14] = v42;
  swift_retain();
  TurnTableCameraControl.update()();
  swift_release();
  uint64_t v43 = *(void *)(v1 + v15);
  if (v43)
  {
    *(double *)&long long v44 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)(v43 + 192), *(float32x4_t *)(v43 + 176));
    float32x4_t v45 = (_OWORD *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewToWorld);
    *float32x4_t v45 = v44;
    v45[1] = v46;
    v45[2] = v47;
    v45[3] = v48;
    return;
  }
LABEL_17:
  __break(1u);
}

Swift::Void __swiftcall FullscreenCoveragePointsRenderer.draw(in:)(MTKView in)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  MEMORY[0x270FA5388](v3 - 8);
  double v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_coveragePointCloud;
  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v6, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  uint64_t v7 = type metadata accessor for CoveragePointCloud();
  LODWORD(v6) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7);
  outlined destroy of URL?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  if (v6 == 1)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      float v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float v11 = 0;
      _os_log_impl(&dword_2465C2000, v9, v10, "draw() has nil coveragePointCloud!  Not drawing...", v11, 2u);
      MEMORY[0x24C5348D0](v11, -1, -1);
    }
  }
  else if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_renderStyle))
  {
    FullscreenCoveragePointsRenderer.drawCubes(in:)(in.super.super.super.isa);
  }
  else
  {
    FullscreenCoveragePointsRenderer.drawPointPrimitives(in:)(in.super.super.super.isa);
  }
}

void FullscreenCoveragePointsRenderer.drawPointPrimitives(in:)(void *a1)
{
  uint64_t v2 = v1;
  id v85 = a1;
  uint64_t v3 = type metadata accessor for ColorScheme();
  uint64_t v81 = *(void *)(v3 - 8);
  uint64_t v82 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  float32x4_t v83 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  float32x4_t v84 = (char *)&v70 - v6;
  uint64_t v7 = (int *)type metadata accessor for FullscreenCoveragePointsRenderer.ResourceEntry(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (uint64_t *)((char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_inFlightLock;
  float v11 = *(os_unfair_lock_s **)&v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_inFlightLock];
  swift_retain();
  os_unfair_lock_lock(v11 + 4);
  swift_release();
  FullscreenCoveragePointsRenderer.updateInternal()();
  uint64_t v12 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  MEMORY[0x270FA5388](v16 - 8);
  float v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_coveragePoints];
  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v19, (uint64_t)v18, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v12) == 1)
  {
    outlined destroy of URL?((uint64_t)v18, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)logger);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_2465C2000, v21, v22, "No coverage points -- can't render preview!", v23, 2u);
      MEMORY[0x24C5348D0](v23, -1, -1);
    }

    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v18, v12);
  uint64_t v24 = ObjectCaptureSession.Frame.PointCloud.points.getter();
  uint64_t v25 = FullscreenCoveragePointsRenderer.createUniformsForPointPrimitiveRenderPass(pointCloud:)();
  uint64_t v26 = (char *)v9 + v7[5];
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v15, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v26, 0, 1, v12);
  swift_unknownObjectRetain();
  uint64_t v27 = dispatch thunk of OCDataBuffer.asMTLBuffer(from:)();
  *uint64_t v9 = v25;
  uint64_t v28 = v7[6];
  float32x4_t v78 = (void *)v27;
  *(uint64_t *)((char *)v9 + v28) = v27;
  *(uint64_t *)((char *)v9 + v7[7]) = 0;
  uint64_t v29 = specialized InFlightQueue.retain(_:)((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for InFlightQueue<FullscreenCoveragePointsRenderer.ResourceEntry>.Entry, type metadata accessor for FullscreenCoveragePointsRenderer.ResourceEntry, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  float32x2_t v30 = *(void **)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_commandQueue];
  if (!v30) {
    goto LABEL_45;
  }
  id v79 = objc_msgSend(v30, sel_commandBuffer);
  if (!v79)
  {
LABEL_36:
    swift_unknownObjectRelease();
    goto LABEL_37;
  }
  id v31 = objc_msgSend(v85, sel_currentRenderPassDescriptor);
  if (!v31)
  {
    swift_unknownObjectRelease();
    goto LABEL_36;
  }
  id v32 = v31;
  uint64_t v74 = v29;
  uint64_t v77 = v25;
  uint64_t v76 = v24;
  id v33 = objc_msgSend(v31, sel_colorAttachments);
  float32x4_t v34 = v32;
  id v35 = objc_msgSend(v33, sel_objectAtIndexedSubscript_, 0);

  if (!v35)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  objc_msgSend(v35, sel_setLoadAction_, 2);

  uint64_t v80 = v34;
  id v36 = objc_msgSend(v34, sel_colorAttachments);
  id v37 = objc_msgSend(v36, sel_objectAtIndexedSubscript_, 0);

  if (!v37)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  objc_msgSend(v37, sel_setClearColor_, *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor], *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor + 8], *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor + 16], *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor + 24]);

  uint64_t v38 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_baseRenderer;
  if (!*(void *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_baseRenderer])
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v39 = (double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize];
  double v40 = *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize];
  if ((~*(void *)&v40 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v40 <= -9.22337204e18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v40 >= 9.22337204e18)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  double v41 = v39[1];
  if ((~*(void *)&v41 & 0x7FF0000000000000) == 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v41 <= -9.22337204e18)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v75 = v10;
  if (v41 >= 9.22337204e18)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  Swift::Int v42 = (uint64_t)v40;
  Swift::Int v43 = (uint64_t)v41;
  swift_retain();
  BaseRenderer.updateDepthAttachmentTexture(width:height:)(v42, v43);
  swift_release();
  id v44 = objc_msgSend(v80, sel_depthAttachment);
  if (!v44)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v45 = *(void *)&v2[v38];
  uint64_t v10 = v75;
  uint64_t v46 = v77;
  long long v47 = v79;
  if (!v45)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (!*(void *)(v45 + 32))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  long long v48 = v44;
  objc_msgSend(v44, sel_setTexture_);

  id v49 = objc_msgSend(v47, sel_renderCommandEncoderWithDescriptor_, v80);
  if (!v49)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  float32x4_t v50 = v49;
  uint64_t aBlock = 0;
  uint64_t v87 = 0;
  long long v88 = *(_OWORD *)v39;
  long long v89 = xmmword_2466B7BA0;
  objc_msgSend(v49, sel_setViewport_, &aBlock);
  objc_msgSend(v50, sel_setDepthStencilState_, *(void *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_depthStencilState]);
  if (!*(void *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_renderPrimitivePointsPipeline])
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  objc_msgSend(v50, sel_setRenderPipelineState_);
  objc_msgSend(v50, sel_setVertexBuffer_offset_atIndex_, v46, 0, 0);
  objc_msgSend(v50, sel_setVertexBuffer_offset_atIndex_, v78, 0, 1);
  objc_msgSend(v50, sel_drawPrimitives_vertexStart_vertexCount_, 0, 0, dispatch thunk of OCDataBuffer.count.getter());
  float32x4_t v78 = v50;
  objc_msgSend(v50, sel_endEncoding);
  uint64_t v51 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraFrustumRenderer;
  if (*(void *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraFrustumRenderer])
  {
    swift_retain();
    CameraFrustumRenderer.render(into:desc:)(v47, v80);
    swift_release();
  }
  uint64_t v52 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraPathRenderer;
  uint64_t v53 = *(void *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraPathRenderer];
  if (v53)
  {
    uint64_t v54 = *(void *)&v2[v51];
    if (v54) {
      LOBYTE(v54) = *(unsigned char *)(v54 + 24);
    }
    char v55 = *(unsigned char *)(v53 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_enabled);
    *(unsigned char *)(v53 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_enabled) = v54;
    swift_retain();
    CameraPathRenderer.enabled.didset(v55);
    swift_release();
    uint64_t v73 = *(void *)&v2[v52];
    if (v73)
    {
      float32x4_t v56 = &v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_colorScheme];
      uint64_t v72 = v52;
      swift_beginAccess();
      uint64_t v57 = v81;
      uint64_t v58 = v82;
      float32x4_t v59 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
      v59(v84, v56, v82);
      float32x4_t v60 = (char *)(v73 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_colorScheme);
      swift_beginAccess();
      v59(v83, v60, v58);
      swift_beginAccess();
      uint64_t v71 = *(void (**)(uint64_t, char *, uint64_t))(v57 + 24);
      swift_retain();
      v71((uint64_t)v60, v84, v58);
      swift_endAccess();
      float32x4_t v61 = v83;
      CameraPathRenderer.colorScheme.didset();
      float32x4_t v62 = *(void (**)(char *, uint64_t))(v57 + 8);
      v62(v84, v58);
      uint64_t v63 = v58;
      uint64_t v10 = v75;
      v62(v61, v63);
      long long v47 = v79;
      swift_release();
      if (*(void *)&v2[v72])
      {
        swift_retain();
        specialized CameraPathRenderer.render(into:viewport:renderPassDescriptor:)(v47, v80);
        swift_release();
      }
    }
  }
  id v64 = objc_msgSend(v85, sel_currentDrawable);
  if (v64)
  {
    objc_msgSend(v47, sel_presentDrawable_, v64);
    swift_unknownObjectRelease();
    uint64_t v65 = swift_allocObject();
    uint64_t v66 = v74;
    *(void *)(v65 + 16) = v2;
    *(void *)(v65 + 24) = v66;
    *(void *)&long long v89 = partial apply for closure #1 in FullscreenCoveragePointsRenderer.drawCubes(in:);
    *((void *)&v89 + 1) = v65;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v87 = 1107296256;
    *(void *)&long long v88 = thunk for @escaping @callee_guaranteed (@guaranteed MTLCommandBuffer) -> ();
    *((void *)&v88 + 1) = &block_descriptor_90;
    float32x4_t v67 = _Block_copy(&aBlock);
    float32x4_t v68 = v2;
    swift_release();
    objc_msgSend(v47, sel_addCompletedHandler_, v67);
    _Block_release(v67);
    objc_msgSend(v47, sel_commit);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

LABEL_37:
    swift_release();
    _s19_RealityKit_SwiftUI18CoveragePointCloudVWOhTm_0((uint64_t)v9, type metadata accessor for FullscreenCoveragePointsRenderer.ResourceEntry);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
LABEL_38:
    float32x4_t v69 = *(os_unfair_lock_s **)&v2[v10];
    swift_retain();
    os_unfair_lock_unlock(v69 + 4);
    swift_release();
    return;
  }
LABEL_54:
  __break(1u);
}

void FullscreenCoveragePointsRenderer.drawCubes(in:)(void *a1)
{
  uint64_t v2 = v1;
  id v80 = a1;
  uint64_t v3 = (int *)type metadata accessor for FullscreenCoveragePointsRenderer.ResourceEntry(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (uint64_t *)((char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v81 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_inFlightLock;
  uint64_t v6 = *(os_unfair_lock_s **)&v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_inFlightLock];
  swift_retain();
  os_unfair_lock_lock(v6 + 4);
  swift_release();
  FullscreenCoveragePointsRenderer.updateInternal()();
  uint64_t v7 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v79 = v9;
  uint64_t v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  uint64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (uint64_t)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_coveragePoints];
  swift_beginAccess();
  uint64_t v78 = v13;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v13, (uint64_t)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  uint64_t v14 = v8 + 48;
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v15((char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v7) == 1)
  {
    outlined destroy of URL?((uint64_t)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)logger);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_2465C2000, v17, v18, "No coverage points -- can't render preview!", v19, 2u);
      MEMORY[0x24C5348D0](v19, -1, -1);
    }

    goto LABEL_36;
  }
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v74 = v8 + 32;
  uint64_t v75 = v15;
  uint64_t v73 = v20;
  v20(v10, (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  uint64_t v21 = FullscreenCoveragePointsRenderer.createUniformsForPointPrimitiveRenderPass(pointCloud:)();
  os_log_type_t v22 = (char *)v5 + v3[5];
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v22, v10, v7);
  uint64_t v77 = v8;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v22, 0, 1, v7);
  swift_unknownObjectRetain();
  uint64_t v76 = v10;
  uint64_t v23 = v21;
  ObjectCaptureSession.Frame.PointCloud.points.getter();
  uint64_t v24 = dispatch thunk of OCDataBuffer.asMTLBuffer(from:)();
  swift_release();
  *uint64_t v5 = v23;
  *(uint64_t *)((char *)v5 + v3[6]) = v24;
  *(uint64_t *)((char *)v5 + v3[7]) = 0;
  uint64_t v25 = specialized InFlightQueue.retain(_:)((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for InFlightQueue<FullscreenCoveragePointsRenderer.ResourceEntry>.Entry, type metadata accessor for FullscreenCoveragePointsRenderer.ResourceEntry, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  uint64_t v26 = *(void **)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_commandQueue];
  if (!v26)
  {
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v27 = v7;
  id v28 = objc_msgSend(v26, sel_commandBuffer);
  id v29 = v80;
  if (!v28)
  {
LABEL_30:
    swift_unknownObjectRelease();
    char v55 = v76;
    uint64_t v14 = v77;
LABEL_35:
    _s19_RealityKit_SwiftUI18CoveragePointCloudVWOhTm_0((uint64_t)v5, type metadata accessor for FullscreenCoveragePointsRenderer.ResourceEntry);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v55, v27);
LABEL_36:
    uint64_t v65 = *(os_unfair_lock_s **)&v2[v81];
    swift_retain();
    os_unfair_lock_unlock(v65 + 4);
    swift_release();
    return;
  }
  float32x2_t v30 = v28;
  id v31 = objc_msgSend(v80, sel_currentRenderPassDescriptor);
  if (!v31)
  {
    swift_unknownObjectRelease();
    goto LABEL_30;
  }
  id v32 = v31;
  uint64_t v67 = v25;
  id v71 = v30;
  float32x4_t v68 = v5;
  id v33 = objc_msgSend(v31, sel_colorAttachments);
  id v34 = objc_msgSend(v33, sel_objectAtIndexedSubscript_, 0);

  if (!v34)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v69 = v27;
  objc_msgSend(v34, sel_setLoadAction_, 2);

  id v72 = v32;
  id v35 = objc_msgSend(v32, sel_colorAttachments);
  id v36 = objc_msgSend(v35, sel_objectAtIndexedSubscript_, 0);

  if (!v36)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  objc_msgSend(v36, sel_setClearColor_, *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor], *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor + 8], *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor + 16], *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor + 24]);

  uint64_t v27 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_baseRenderer;
  if (!*(void *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_baseRenderer])
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  id v37 = (double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize];
  double v38 = *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize];
  if ((~*(void *)&v38 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v38 <= -9.22337204e18)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v38 >= 9.22337204e18)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  double v39 = v37[1];
  if ((~*(void *)&v39 & 0x7FF0000000000000) == 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v39 <= -9.22337204e18)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v39 >= 9.22337204e18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  Swift::Int v40 = (uint64_t)v38;
  Swift::Int v41 = (uint64_t)v39;
  swift_retain();
  BaseRenderer.updateDepthAttachmentTexture(width:height:)(v40, v41);
  swift_release();
  id v42 = v72;
  id v43 = objc_msgSend(v72, sel_depthAttachment);
  if (!v43)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v44 = *(void *)&v2[v27];
  if (!v44)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v27 = v69;
  if (!*(void *)(v44 + 32))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v45 = v43;
  uint64_t v70 = v23;
  objc_msgSend(v43, sel_setTexture_);

  id v46 = objc_msgSend(v71, sel_renderCommandEncoderWithDescriptor_, v42);
  if (!v46)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  uint64_t aBlock = 0;
  uint64_t v83 = 0;
  long long v84 = *(_OWORD *)v37;
  long long v85 = xmmword_2466B7BA0;
  id v29 = v46;
  id v47 = objc_msgSend(v46, sel_setViewport_, &aBlock);
  uint64_t v48 = MEMORY[0x270FA5388](v47);
  float32x4_t v50 = (char *)&v66 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v48);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v78, (uint64_t)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  if (v75((char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v27) == 1)
  {
    outlined destroy of URL?((uint64_t)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    uint64_t v14 = v77;
    if (one-time initialization token for logger == -1)
    {
LABEL_25:
      uint64_t v51 = type metadata accessor for Logger();
      __swift_project_value_buffer(v51, (uint64_t)logger);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      BOOL v54 = os_log_type_enabled(v52, v53);
      uint64_t v5 = v68;
      char v55 = v76;
      if (v54)
      {
        float32x4_t v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)float32x4_t v56 = 0;
        _os_log_impl(&dword_2465C2000, v52, v53, "coveragePoints is nil!  Not able to render voxels.", v56, 2u);
        MEMORY[0x24C5348D0](v56, -1, -1);
      }

LABEL_33:
      id v58 = v80;
      objc_msgSend(v29, sel_endEncoding);
      id v59 = objc_msgSend(v58, sel_currentDrawable);
      if (v59)
      {
        id v60 = v71;
        objc_msgSend(v71, sel_presentDrawable_, v59);
        swift_unknownObjectRelease();
        uint64_t v61 = swift_allocObject();
        uint64_t v62 = v67;
        *(void *)(v61 + 16) = v2;
        *(void *)(v61 + 24) = v62;
        *(void *)&long long v85 = partial apply for closure #1 in FullscreenCoveragePointsRenderer.drawCubes(in:);
        *((void *)&v85 + 1) = v61;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v83 = 1107296256;
        *(void *)&long long v84 = thunk for @escaping @callee_guaranteed (@guaranteed MTLCommandBuffer) -> ();
        *((void *)&v84 + 1) = &block_descriptor_7;
        uint64_t v63 = _Block_copy(&aBlock);
        id v64 = v2;
        swift_release();
        objc_msgSend(v60, sel_addCompletedHandler_, v63);
        _Block_release(v63);
        objc_msgSend(v60, sel_commit);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        goto LABEL_35;
      }
      goto LABEL_52;
    }
LABEL_43:
    swift_once();
    goto LABEL_25;
  }
  v73(v50, (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v27);
  uint64_t v57 = FullscreenCoveragePointsRenderer.voxelRenderer.getter();
  uint64_t v14 = v77;
  if (v57)
  {
    VoxelRenderer.render(encoder:uniforms:pointCloud:)(v29, v70);
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v50, v27);
    uint64_t v5 = v68;
    char v55 = v76;
    goto LABEL_33;
  }
LABEL_53:
  __break(1u);
}

void FullscreenCoveragePointsRenderer.initPointPrimitiveRenderPipeline()()
{
  v18[1] = *(id *)MEMORY[0x263EF8340];
  if (one-time initialization token for mtlLibrary != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)static FullscreenCoveragePointsRenderer.mtlLibrary;
  if (!static FullscreenCoveragePointsRenderer.mtlLibrary)
  {
    lazy protocol witness table accessor for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error();
    swift_allocError();
    swift_willThrow();
    return;
  }
  swift_unknownObjectRetain();
  uint64_t v2 = (void *)MEMORY[0x24C533410](0xD00000000000002BLL, 0x80000002466C0B50);
  id v3 = objc_msgSend(v1, sel_newFunctionWithName_, v2);

  uint64_t v4 = (void *)MEMORY[0x24C533410](0xD00000000000002ELL, 0x80000002466BF510);
  id v5 = objc_msgSend(v1, sel_newFunctionWithName_, v4);

  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F129C0]), sel_init);
  objc_msgSend(v6, sel_setVertexFunction_, v3);
  objc_msgSend(v6, sel_setFragmentFunction_, v5);
  id v7 = objc_msgSend(v6, sel_colorAttachments);
  id v8 = objc_msgSend(v7, sel_objectAtIndexedSubscript_, 0);

  if (!v8)
  {
    __break(1u);
    goto LABEL_14;
  }
  objc_msgSend(v8, sel_setPixelFormat_, objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_view), sel_colorPixelFormat));

  id v9 = objc_msgSend(v6, sel_colorAttachments);
  id v10 = objc_msgSend(v9, sel_objectAtIndexedSubscript_, 0);

  if (!v10)
  {
LABEL_14:
    __break(1u);
    return;
  }
  objc_msgSend(v10, sel_setBlendingEnabled_, 0);

  objc_msgSend(v6, sel_setAlphaToCoverageEnabled_, 1);
  objc_msgSend(v6, sel_setDepthAttachmentPixelFormat_, 252);
  uint64_t v11 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_device);
  v18[0] = 0;
  id v12 = objc_msgSend(v11, sel_newRenderPipelineStateWithDescriptor_error_, v6, v18);
  id v13 = v18[0];
  if (v12)
  {
    *(void *)(v0
              + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_renderPrimitivePointsPipeline) = v12;
    id v14 = v13;
    swift_unknownObjectRelease();
    id v15 = objc_msgSend(v11, sel_newCommandQueue);
    if (v15)
    {
      *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_commandQueue) = v15;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      return;
    }
    lazy protocol witness table accessor for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error();
    swift_allocError();
    swift_willThrow();
  }
  else
  {
    id v16 = v18[0];
    uint64_t v17 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error();
    swift_allocError();
    swift_willThrow();
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
}

uint64_t FullscreenCoveragePointsRenderer.createUniformsForPointPrimitiveRenderPass(pointCloud:)()
{
  uint64_t v1 = v0;
  *(void *)&long long v69 = type metadata accessor for CoveragePointCloud();
  uint64_t v2 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  uint64_t v67 = (uint64_t)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  id v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  id v9 = (char *)&v63 - v8;
  id v10 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_device), sel_newBufferWithLength_options_, 784, 0);
  if (!v10) {
    goto LABEL_23;
  }
  uint64_t v11 = v10;
  id v12 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v13 = v11;
  ObjectCaptureSession.Frame.PointCloud.points.getter();
  unint64_t v14 = dispatch thunk of OCDataBuffer.count.getter();
  swift_release();
  if ((v14 & 0x8000000000000000) != 0 || HIDWORD(v14)) {
    goto LABEL_24;
  }
  *((_DWORD *)v12 + 135) = v14;
  uint64_t v15 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize;
  double v16 = *(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize);
  float v17 = v16;
  *((float *)v12 + 137) = v17 * 0.006;
  v12[552] = 0;
  if ((~*(void *)&v16 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v16 <= -1.0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v16 >= 4294967300.0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  *((_DWORD *)v12 + 132) = v16;
  double v18 = *(double *)(v15 + 8);
  if ((~*(void *)&v18 & 0x7FF0000000000000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v18 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v18 >= 4294967300.0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  id v68 = v13;
  *((_DWORD *)v12 + 133) = v18;
  ObjectCaptureSession.Frame.PointCloud.transform.getter();
  *(_OWORD *)id v12 = v19;
  *((_OWORD *)v12 + 1) = v20;
  *((_OWORD *)v12 + 2) = v21;
  *((_OWORD *)v12 + 3) = v22;
  long long v23 = *(_OWORD *)(v1
                  + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_objectToWorldUnscaled
                  + 16);
  long long v24 = *(_OWORD *)(v1
                  + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_objectToWorldUnscaled
                  + 32);
  long long v25 = *(_OWORD *)(v1
                  + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_objectToWorldUnscaled
                  + 48);
  *((_OWORD *)v12 + 8) = *(_OWORD *)(v1
                                   + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_objectToWorldUnscaled);
  *((_OWORD *)v12 + 9) = v23;
  *((_OWORD *)v12 + 10) = v24;
  *((_OWORD *)v12 + 11) = v25;
  uint64_t v26 = (simd_float4x4 *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewToWorld);
  *((simd_float4x4 *)v12 + 3) = __invert_f4(*(simd_float4x4 *)(v1
                                                             + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewToWorld));
  simd_float4x4 v75 = __invert_f4(*v26);
  *((simd_float4x4 *)v12 + 4) = __invert_f4(v75);
  simd_float4x4 v76 = *(simd_float4x4 *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_projection);
  *((simd_float4x4 *)v12 + 5) = v76;
  *(simd_float4x4 *)(v12 + 464) = __invert_f4(v76);
  uint64_t v27 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_coveragePointCloud;
  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v27, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  id v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 48);
  uint64_t v29 = v69;
  int v30 = v28(v9, 1, v69);
  if (v30)
  {
    outlined destroy of URL?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
    long long v31 = 0uLL;
    long long v32 = 0uLL;
    long long v33 = 0uLL;
    long long v34 = 0uLL;
  }
  else
  {
    uint64_t v35 = v67;
    outlined init with copy of CoveragePointCloud((uint64_t)v9, v67, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
    outlined destroy of URL?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
    *(double *)&long long v36 = CoveragePointCloud.bboxWorld.getter();
    long long v65 = v37;
    long long v66 = v36;
    long long v63 = v39;
    long long v64 = v38;
    uint64_t v40 = v35;
    uint64_t v29 = v69;
    _s19_RealityKit_SwiftUI18CoveragePointCloudVWOhTm_0(v40, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
    long long v34 = v63;
    long long v33 = v64;
    long long v32 = v65;
    long long v31 = v66;
  }
  v73[0] = v31;
  v73[1] = v32;
  v73[2] = v33;
  v73[3] = v34;
  BOOL v74 = v30 != 0;
  __n128 v41 = specialized static BoundingBoxHelpers.getBoundingSphere(boxWorld:)((uint64_t)v73);
  v41.n128_u32[2] = v42;
  *((__n128 *)v12 + 35) = v41;
  *((_DWORD *)v12 + 144) = v43;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v27, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  int v44 = v28(v7, 1, v29);
  if (v44)
  {
    outlined destroy of URL?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
    long long v45 = 0uLL;
    long long v46 = 0uLL;
    long long v47 = 0uLL;
    long long v48 = 0uLL;
  }
  else
  {
    uint64_t v49 = v67;
    outlined init with copy of CoveragePointCloud((uint64_t)v7, v67, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
    outlined destroy of URL?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
    *(double *)&long long v50 = CoveragePointCloud.bboxWorld.getter();
    long long v69 = v50;
    long long v65 = v52;
    long long v66 = v51;
    long long v64 = v53;
    _s19_RealityKit_SwiftUI18CoveragePointCloudVWOhTm_0(v49, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
    long long v48 = v64;
    long long v47 = v65;
    long long v46 = v66;
    long long v45 = v69;
  }
  id v54 = v68;
  v71[0] = v45;
  v71[1] = v46;
  v71[2] = v47;
  v71[3] = v48;
  BOOL v72 = v44 != 0;
  specialized static BoundingBoxHelpers.getFadingClipEllipsoid(boxWorld:startFadeRadius:endFadeRadius:shouldClipBottom:)((uint64_t)v71, 1, (uint64_t)v70, 1.5, 2.0);
  long long v55 = v70[3];
  *((_OWORD *)v12 + 39) = v70[2];
  *((_OWORD *)v12 + 40) = v55;
  long long v56 = v70[5];
  *((_OWORD *)v12 + 41) = v70[4];
  *((_OWORD *)v12 + 42) = v56;
  long long v57 = v70[1];
  *((_OWORD *)v12 + 37) = v70[0];
  *((_OWORD *)v12 + 38) = v57;
  v12[688] = 0;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of FullscreenCoveragePointsRenderer.createUniformsForPointPrimitiveRenderPass(pointCloud:));
  *((void *)v12 + 56) = v58;
  long long v59 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  long long v60 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
  long long v61 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
  *((_OWORD *)v12 + 24) = *MEMORY[0x263EF89A8];
  *((_OWORD *)v12 + 25) = v59;
  *((_OWORD *)v12 + 26) = v60;
  *((_OWORD *)v12 + 27) = v61;
  *((_DWORD *)v12 + 114) = 1065353216;
  v12[689] = 0;
  return (uint64_t)v54;
}

void type metadata completion function for FullscreenCoveragePointsRenderer()
{
  type metadata accessor for CoveragePointCloud?(319, &lazy cache variable for type metadata for CoveragePointCloud?, (void (*)(uint64_t))type metadata accessor for CoveragePointCloud);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CoveragePointCloud?(319, &lazy cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?, MEMORY[0x270FB2638]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for ColorScheme();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void type metadata accessor for CoveragePointCloud?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for FullscreenCoveragePointsRenderer.ResourceEntry(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    id v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    id v7 = a1;
    uint64_t v8 = a3[5];
    id v9 = (char *)a1 + v8;
    id v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
    uint64_t v12 = *(void *)(v11 - 8);
    id v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_unknownObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v15 = a3[7];
    *(uint64_t *)((char *)v7 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v7 + v15) = *(uint64_t *)((char *)a2 + v15);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
  }
  return v7;
}

uint64_t destroy for FullscreenCoveragePointsRenderer.ResourceEntry(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

void *initializeWithCopy for FullscreenCoveragePointsRenderer.ResourceEntry(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  id v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for FullscreenCoveragePointsRenderer.ResourceEntry(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v6 = a3[5];
  id v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

void *initializeWithTake for FullscreenCoveragePointsRenderer.ResourceEntry(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  id v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  return a1;
}

void *assignWithTake for FullscreenCoveragePointsRenderer.ResourceEntry(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  uint64_t v6 = a3[5];
  id v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_unknownObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FullscreenCoveragePointsRenderer.ResourceEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24666C89C);
}

uint64_t sub_24666C89C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    int v12 = (char *)a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for FullscreenCoveragePointsRenderer.ResourceEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24666C970);
}

void *sub_24666C970(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for FullscreenCoveragePointsRenderer.ResourceEntry(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, type metadata singleton initialization cache for FullscreenCoveragePointsRenderer.ResourceEntry);
}

void type metadata completion function for FullscreenCoveragePointsRenderer.ResourceEntry()
{
  type metadata accessor for CoveragePointCloud?(319, &lazy cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?, MEMORY[0x270FB2638]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t specialized InFlightQueue.retain(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (os_unfair_lock_s *)(v3[2] + 16);
  os_unfair_lock_lock(v9);
  uint64_t v10 = v3[3];
  if (__OFADD__(v10, 1))
  {
    __break(1u);
  }
  else
  {
    v3[3] = v10 + 1;
    uint64_t v4 = v3 + 4;
    swift_beginAccess();
    int v5 = (void *)v3[4];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v3[4] = v5;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_3;
    }
  }
  int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  *uint64_t v4 = v5;
LABEL_3:
  unint64_t v13 = v5[2];
  unint64_t v12 = v5[3];
  if (v13 >= v12 >> 1)
  {
    int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v5);
    *uint64_t v4 = v5;
  }
  v5[2] = v13 + 1;
  uint64_t v14 = &v5[4 * v13];
  v14[4] = v10;
  v14[5] = a1;
  v14[6] = a2;
  v14[7] = a3;
  swift_endAccess();
  os_unfair_lock_unlock(v9);
  return v10;
}

uint64_t specialized InFlightQueue.retain(_:)(uint64_t a1)
{
  return specialized InFlightQueue.retain(_:)(a1, &demangling cache variable for type metadata for InFlightQueue<CoveragePointRenderer.ResourceEntry>.Entry, type metadata accessor for CoveragePointRenderer.ResourceEntry, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized InFlightQueue.retain(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(BOOL, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v13 = (os_unfair_lock_s *)(v4[2] + 16);
  os_unfair_lock_lock(v13);
  uint64_t v14 = v4[3];
  if (__OFADD__(v14, 1))
  {
    __break(1u);
  }
  else
  {
    v4[3] = v14 + 1;
    outlined init with copy of CoveragePointCloud(a1, (uint64_t)v12 + *(int *)(v9 + 28), a3);
    *unint64_t v12 = v14;
    a3 = (uint64_t (*)(void))(v4 + 4);
    swift_beginAccess();
    a1 = v4[4];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v4[4] = a1;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_3;
    }
  }
  a1 = a4(0, *(void *)(a1 + 16) + 1, 1, a1);
  *(void *)a3 = a1;
LABEL_3:
  unint64_t v17 = *(void *)(a1 + 16);
  unint64_t v16 = *(void *)(a1 + 24);
  if (v17 >= v16 >> 1)
  {
    a1 = a4(v16 > 1, v17 + 1, 1, a1);
    *(void *)a3 = a1;
  }
  *(void *)(a1 + 16) = v17 + 1;
  outlined init with take of Animation?((uint64_t)v12, a1+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v17, a2);
  swift_endAccess();
  os_unfair_lock_unlock(v13);
  return v14;
}

void specialized InFlightQueue.release(id:)(uint64_t a1)
{
  int v3 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  uint64_t v4 = *(void **)(v1 + 32);
  unint64_t v5 = v4[2];
  if (!v5) {
    goto LABEL_8;
  }
  if (v4[4] == a1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    if (v5 == 1)
    {
      uint64_t v6 = 1;
      goto LABEL_30;
    }
    long long v21 = v4 + 8;
    uint64_t v6 = 1;
    while (1)
    {
      uint64_t v22 = *v21;
      v21 += 4;
      if (v22 == a1) {
        break;
      }
      uint64_t v23 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_34;
      }
      ++v6;
      if (v23 == v5)
      {
        uint64_t v6 = v4[2];
        goto LABEL_30;
      }
    }
  }
  uint64_t v7 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    long long v24 = v3;
    if (v7 == v5)
    {
LABEL_6:
      int v3 = v24;
      if ((uint64_t)v5 >= v6)
      {
LABEL_30:
        specialized Array.replaceSubrange<A>(_:with:)(v6, v5);
        swift_endAccess();
        os_unfair_lock_unlock(v3);
        return;
      }
      __break(1u);
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_30;
    }
    uint64_t v8 = 32 * v6 + 88;
    unint64_t v9 = v6 + 1;
    uint64_t v25 = v6 + 1;
    uint64_t v26 = a1;
    uint64_t v27 = v1 + 32;
    while ((v7 & 0x8000000000000000) == 0)
    {
      if (v9 >= v5) {
        goto LABEL_32;
      }
      uint64_t v12 = *(void *)((char *)v4 + v8 - 24);
      if (v12 != a1)
      {
        if (v9 != v6)
        {
          if (v6 >= v5) {
            goto LABEL_35;
          }
          unint64_t v13 = &v4[4 * v6 + 4];
          uint64_t v28 = *v13;
          uint64_t v15 = v13[2];
          uint64_t v14 = v13[3];
          uint64_t v16 = *(void *)((char *)v4 + v8 - 16);
          uint64_t v17 = *(void *)((char *)v4 + v8 - 8);
          uint64_t v18 = *(void *)((char *)v4 + v8);
          uint64_t v29 = v13[1];
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)uint64_t v27 = v4;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
            *(void *)uint64_t v27 = v4;
          }
          long long v20 = &v4[4 * v6];
          v20[4] = v12;
          v20[5] = v16;
          v20[6] = v17;
          v20[7] = v18;
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          if (v9 >= *(void *)(*(void *)v27 + 16)) {
            goto LABEL_36;
          }
          uint64_t v10 = (void *)(*(void *)v27 + v8);
          *(v10 - 3) = v28;
          *(v10 - 2) = v29;
          *(v10 - 1) = v15;
          *uint64_t v10 = v14;
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v4 = *(void **)v27;
          uint64_t v7 = v25;
          a1 = v26;
        }
        if (__OFADD__(v6++, 1)) {
          goto LABEL_33;
        }
        unint64_t v5 = v4[2];
      }
      ++v9;
      v8 += 32;
      if (v9 == v5) {
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
}

{
  specialized InFlightQueue.release(id:)(a1, &demangling cache variable for type metadata for InFlightQueue<CoveragePointRenderer.ResourceEntry>.Entry, (void (*)(void, void))specialized Array.replaceSubrange<A>(_:with:), (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

void specialized InFlightQueue.release(id:)(uint64_t a1, uint64_t *a2, void (*a3)(void, void), uint64_t (*a4)(uint64_t))
{
  long long v34 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v39 = (uint64_t)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v40 = (uint64_t)&v34 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (uint64_t *)((char *)&v34 - v14);
  uint64_t v16 = (os_unfair_lock_s *)(*(void *)(v4 + 16) + 16);
  os_unfair_lock_lock(v16);
  uint64_t v17 = (uint64_t *)(v4 + 32);
  swift_beginAccess();
  uint64_t v18 = *(void *)(v4 + 32);
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v35 = v16;
    long long v36 = a3;
    unint64_t v20 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v21 = *(void *)(v9 + 72);
    swift_bridgeObjectRetain();
    unint64_t v22 = 0;
    unint64_t v38 = v20;
    while (1)
    {
      outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v18 + v20, (uint64_t)v15, a2);
      uint64_t v23 = *v15;
      outlined destroy of URL?((uint64_t)v15, a2);
      if (v23 == a1) {
        break;
      }
      ++v22;
      v20 += v21;
      if (v19 == v22)
      {
        swift_bridgeObjectRelease();
        uint64_t v24 = *(void *)(*v17 + 16);
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v24 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      goto LABEL_37;
    }
    uint64_t v25 = *v17;
    unint64_t v26 = *(void *)(*v17 + 16);
    if (v24 != v26)
    {
      uint64_t v27 = v21 + v20;
      unint64_t v28 = v22 + 1;
      uint64_t v37 = a1;
      while (v28 < v26)
      {
        outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v25 + v27, (uint64_t)v15, a2);
        uint64_t v29 = *v15;
        outlined destroy of URL?((uint64_t)v15, a2);
        if (v29 != a1)
        {
          if (v28 != v22)
          {
            if ((v22 & 0x8000000000000000) != 0) {
              goto LABEL_31;
            }
            uint64_t v30 = *v17;
            unint64_t v31 = *(void *)(*v17 + 16);
            if (v22 >= v31) {
              goto LABEL_32;
            }
            outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v30 + v38 + v22 * v21, v40, a2);
            if (v28 >= v31) {
              goto LABEL_33;
            }
            outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v30 + v27, v39, a2);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *uint64_t v17 = v30;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t v30 = v34(v30);
              *uint64_t v17 = v30;
            }
            if (v22 >= *(void *)(v30 + 16)) {
              goto LABEL_34;
            }
            outlined assign with take of Cancellable?(v39, v30 + v38 + v22 * v21, a2);
            if (v28 >= *(void *)(*v17 + 16)) {
              goto LABEL_35;
            }
            outlined assign with take of Cancellable?(v40, *v17 + v27, a2);
            a1 = v37;
          }
          if (__OFADD__(v22++, 1)) {
            goto LABEL_30;
          }
        }
        uint64_t v24 = v28 + 1;
        if (__OFADD__(v28, 1)) {
          goto LABEL_29;
        }
        uint64_t v25 = *v17;
        unint64_t v26 = *(void *)(*v17 + 16);
        ++v28;
        v27 += v21;
        if (v24 == v26) {
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
LABEL_9:
    uint64_t v19 = v22;
LABEL_10:
    uint64_t v16 = v35;
    a3 = v36;
    if (v24 >= v19) {
      goto LABEL_11;
    }
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  else
  {
    uint64_t v24 = 0;
LABEL_11:
    a3(v19, v24);
    swift_endAccess();
    os_unfair_lock_unlock(v16);
  }
}

id specialized DragGestureRecognizer.init(draggable:)(uint64_t a1, char *a2)
{
  int v3 = &a2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21DragGestureRecognizer_startPoint];
  *(void *)int v3 = 0;
  *((void *)v3 + 1) = 0;
  v3[16] = 1;
  *(void *)&a2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21DragGestureRecognizer_draggable + 8] = 0;
  *(void *)(swift_unknownObjectWeakInit() + 8) = &protocol witness table for TurnTableCameraControl;
  swift_unknownObjectWeakAssign();
  v7.receiver = a2;
  v7.super_class = (Class)type metadata accessor for DragGestureRecognizer();
  id v4 = objc_msgSendSuper2(&v7, sel_initWithTarget_action_, 0, 0);
  objc_msgSend(v4, sel_addTarget_action_, v4, sel_onPanInternal_);
  objc_msgSend(v4, sel_setMaximumNumberOfTouches_, 1);
  id v5 = v4;
  objc_msgSend(v5, sel_setDelegate_, v5);

  swift_release();
  return v5;
}

id specialized DragGestureRecognizer.init(draggable:)(void *a1, char *a2)
{
  id v4 = &a2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21DragGestureRecognizer_startPoint];
  *(void *)id v4 = 0;
  *((void *)v4 + 1) = 0;
  v4[16] = 1;
  *(void *)&a2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21DragGestureRecognizer_draggable + 8] = 0;
  *(void *)(swift_unknownObjectWeakInit() + 8) = &protocol witness table for InteractiveCameraTransformManager;
  swift_unknownObjectWeakAssign();
  v8.receiver = a2;
  v8.super_class = (Class)type metadata accessor for DragGestureRecognizer();
  id v5 = objc_msgSendSuper2(&v8, sel_initWithTarget_action_, 0, 0);
  objc_msgSend(v5, sel_addTarget_action_, v5, sel_onPanInternal_);
  objc_msgSend(v5, sel_setMaximumNumberOfTouches_, 1);
  id v6 = v5;
  objc_msgSend(v6, sel_setDelegate_, v6);

  return v6;
}

unint64_t lazy protocol witness table accessor for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error;
  if (!lazy protocol witness table cache variable for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error;
  if (!lazy protocol witness table cache variable for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error);
  }
  return result;
}

uint64_t _s19_RealityKit_SwiftUI18CoveragePointCloudVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24666D714()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t outlined init with copy of CoveragePointCloud(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void partial apply for closure #1 in FullscreenCoveragePointsRenderer.drawCubes(in:)()
{
  specialized InFlightQueue.release(id:)(*(void *)(v0 + 24), (uint64_t *)&demangling cache variable for type metadata for InFlightQueue<FullscreenCoveragePointsRenderer.ResourceEntry>.Entry, (void (*)(void, void))specialized Array.replaceSubrange<A>(_:with:), (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t outlined assign with copy of CoveragePointCloud?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for FullscreenCoveragePointsRenderer.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24666D974);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FullscreenCoveragePointsRenderer.Error()
{
  return &type metadata for FullscreenCoveragePointsRenderer.Error;
}

uint64_t type metadata completion function for InFlightQueue()
{
  return swift_initClassMetadata2();
}

uint64_t InFlightQueue.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InFlightQueue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for InFlightQueue.Entry()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for InFlightQueue.Entry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 8) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 8) & ~v5, ((unint64_t)a2 + v5 + 8) & ~v5);
  }
  return v3;
}

uint64_t destroy for InFlightQueue.Entry(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

void *initializeWithCopy for InFlightQueue.Entry(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *assignWithCopy for InFlightQueue.Entry(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *assignWithTake for InFlightQueue.Entry(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for InFlightQueue.Entry(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for InFlightQueue.Entry(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 8) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x24666E194);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 8] & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t type metadata accessor for InFlightQueue.Entry()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for KeyframeAnimation()
{
  return swift_initClassMetadata2();
}

uint64_t KeyframeAnimation.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KeyframeAnimation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for KeyframeAnimation.Keyframe()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *assignWithCopy for KeyframeAnimation.Keyframe(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *assignWithTake for KeyframeAnimation.Keyframe(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyframeAnimation.Keyframe(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for KeyframeAnimation.Keyframe(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 8) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x24666E82CLL);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 8] & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t type metadata accessor for KeyframeAnimation.Keyframe()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for KeyframeAnimation.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24666E938);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for KeyframeAnimation.Error()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in KeyframeAnimation<A>.Error()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ManualTimer()
{
  return self;
}

uint64_t *initializeBufferWithCopyOfBuffer for FreeformFullView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    unsigned int v7 = (uint64_t *)((char *)a1 + v6);
    uint64_t v8 = (uint64_t *)((char *)a2 + v6);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *unsigned int v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for FreeformFullView(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

void *initializeWithCopy for FreeformFullView(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (void *)((char *)a1 + v5);
  unsigned int v7 = (void *)((char *)a2 + v5);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    *uint64_t v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for FreeformFullView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
    unsigned int v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    outlined destroy of Environment<ColorScheme>.Content((uint64_t)a1 + v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *unsigned int v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of Environment<ColorScheme>.Content(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *initializeWithTake for FreeformFullView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for FreeformFullView(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    outlined destroy of Environment<ColorScheme>.Content((uint64_t)a1 + v7);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FreeformFullView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24666EF88);
}

uint64_t sub_24666EF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for FreeformFullView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24666F050);
}

uint64_t sub_24666F050(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for FreeformFullView()
{
  uint64_t result = type metadata singleton initialization cache for FreeformFullView;
  if (!type metadata singleton initialization cache for FreeformFullView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for FreeformFullView()
{
  type metadata accessor for Environment<ColorScheme>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t associated type witness table accessor for View.Body : View in FreeformFullView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t FreeformFullView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FreeformFullView();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  uint64_t v8 = v19;
  if (v19)
  {
    static Color.clear.getter();
    uint64_t v17 = Color.opacity(_:)();
    swift_release();
    int v16 = static Edge.Set.all.getter();
    uint64_t v9 = static SafeAreaRegions.all.getter();
    char v10 = static Edge.Set.all.getter();
    outlined init with copy of FreeformFullView(v1, (uint64_t)&v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    unint64_t v11 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v12 = swift_allocObject();
    outlined init with take of FreeformFullView((uint64_t)v6, v12 + v11);
    outlined init with copy of FreeformFullView(v1, (uint64_t)v6);
    uint64_t v13 = swift_allocObject();
    uint64_t result = outlined init with take of FreeformFullView((uint64_t)v6, v13 + v11);
    char v18 = 0;
    uint64_t v14 = v17;
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v14;
    *(unsigned char *)(a1 + 16) = v16;
    *(void *)(a1 + 24) = v9;
    *(unsigned char *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = 0;
    *(_WORD *)(a1 + 48) = 257;
    *(void *)(a1 + 56) = 0x3FF0000000000000;
    *(unsigned char *)(a1 + 64) = 0;
    *(_WORD *)(a1 + 65) = 1;
    *(unsigned char *)(a1 + 67) = 0;
    *(void *)(a1 + 72) = partial apply for closure #1 in FreeformFullView.body.getter;
    *(void *)(a1 + 80) = v12;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(void *)(a1 + 120) = partial apply for closure #2 in FreeformFullView.body.getter;
    *(void *)(a1 + 128) = v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void closure #1 in FreeformFullView.body.getter()
{
  uint64_t v0 = type metadata accessor for ColorScheme();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v8;
  if (v8)
  {
    v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_isFullViewEnabled] = 1;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v5 = v8;
  if (v8)
  {
    type metadata accessor for FreeformFullView();
    specialized Environment.wrappedValue.getter((uint64_t)v3);
    uint64_t v6 = &v5[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_colorScheme];
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v1 + 24))(v6, v3, v0);
    swift_endAccess();
    FreeformCloudRenderer.colorScheme.didset();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
}

void closure #2 in FreeformFullView.body.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (v0)
  {
    v0[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_isFullViewEnabled] = 0;
  }
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance FreeformFullViewWrapper()
{
  id result = *(id *)(*v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view);
  if (result) {
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FreeformFullViewWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper();

  return MEMORY[0x270F01780](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance FreeformFullViewWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper();

  return MEMORY[0x270F01718](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance FreeformFullViewWrapper()
{
}

uint64_t key path getter for DataModel.freeformCloudRenderer : DataModel@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for DataModel.freeformCloudRenderer : DataModel(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v1;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t outlined init with copy of FreeformFullView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FreeformFullView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of FreeformFullView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FreeformFullView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in FreeformFullView.body.getter()
{
  return partial apply for closure #1 in FreeformFullView.body.getter((uint64_t (*)(uint64_t))closure #1 in FreeformFullView.body.getter);
}

uint64_t objectdestroyTm_3()
{
  uint64_t v1 = (int *)(type metadata accessor for FreeformFullView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();
  uint64_t v5 = v0 + v3 + v1[7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #2 in FreeformFullView.body.getter()
{
  return partial apply for closure #1 in FreeformFullView.body.getter((uint64_t (*)(uint64_t))closure #2 in FreeformFullView.body.getter);
}

uint64_t partial apply for closure #1 in FreeformFullView.body.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for FreeformFullView() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

void *type metadata accessor for FreeformFullViewWrapper()
{
  return &unk_26FACFEF0;
}

uint64_t sub_24666FB80()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier>, _AppearanceActionModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>, &demangling cache variable for type metadata for _ClipEffect<Rectangle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>);
    lazy protocol witness table accessor for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper();
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper()
{
  unint64_t result = lazy protocol witness table cache variable for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper;
  if (!lazy protocol witness table cache variable for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper;
  if (!lazy protocol witness table cache variable for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper);
  }
  return result;
}

uint64_t specialized static MathHelpers.computeSampleMeanAndCovarianceMatrix(data:)@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  if ((unint64_t)v2 < 2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static MathHelpers.computeSampleMeanAndCovarianceMatrix(data:));
    float v6 = 1.0 / (float)v2;
    uint64_t v7 = (float *)(v3 + 40);
    uint64_t v8 = v2;
    do
    {
      float32x2_t v9 = vadd_f32(*(float32x2_t *)&v5, vmul_n_f32(*(float32x2_t *)(v7 - 2), v6));
      float v10 = *((float *)&v5 + 2) + (float)(v6 * *v7);
      *(float32x2_t *)&long long v5 = v9;
      *((float *)&v5 + 2) = v10;
      HIDWORD(v5) = 0;
      v7 += 4;
      --v8;
    }
    while (v8);
    long long v31 = v5;
    float v29 = v10;
    float32x2_t v30 = v9;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of static MathHelpers.computeSampleMeanAndCovarianceMatrix(data:));
    float32x4_t v28 = v11;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of static MathHelpers.computeSampleMeanAndCovarianceMatrix(data:));
    float32x4_t v27 = v12;
    unint64_t result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #3 of static MathHelpers.computeSampleMeanAndCovarianceMatrix(data:));
    float32x4_t v16 = v27;
    float32x4_t v15 = v28;
    float v17 = 1.0 / (float)(v2 - 1);
    char v18 = (float *)(v3 + 40);
    do
    {
      __int32 v19 = v15.i32[3];
      __int32 v20 = v16.i32[3];
      float v21 = *v18 - v29;
      float32x2_t v22 = vsub_f32(*(float32x2_t *)(v18 - 2), v30);
      int32x2_t v23 = (int32x2_t)vmul_f32(v22, v22);
      *(float32x2_t *)v14.f32 = vmul_n_f32(v22, v21);
      *(float32x2_t *)v24.f32 = vmul_lane_f32(v22, v22, 1);
      *(int32x2_t *)v25.f32 = vzip1_s32(v23, *(int32x2_t *)v24.f32);
      v25.i64[1] = v14.i64[0];
      __int32 v26 = v13.i32[3];
      *(int32x2_t *)&v24.u32[2] = vdup_lane_s32(*(int32x2_t *)v14.f32, 1);
      v14.f32[2] = v21 * v21;
      float32x4_t v15 = vaddq_f32(v15, vmulq_n_f32(v25, v17));
      float32x4_t v16 = vaddq_f32(v16, vmulq_n_f32(v24, v17));
      float32x4_t v13 = vaddq_f32(v13, vmulq_n_f32(v14, v17));
      v15.i32[3] = v19;
      v16.i32[3] = v20;
      v18 += 4;
      v13.i32[3] = v26;
      --v2;
    }
    while (v2);
    *a2 = v31;
    a2[1] = v15;
    a2[2] = v16;
    a2[3] = v13;
  }
  return result;
}

void specialized static MathHelpers.computeEigenvectorsOfSymmetric2x2Matrix(_:)(double a1, double a2)
{
  if (vabds_f32(*((float *)&a1 + 1), *(float *)&a2) >= 0.001)
  {
    __break(1u);
  }
  else
  {
    *(float *)&a2 = sqrtf((float)((float)(*(float *)&a1 + *((float *)&a2 + 1)) * (float)(*(float *)&a1 + *((float *)&a2 + 1)))+ (float)((float)(vmuls_lane_f32(*(float *)&a1, *(float32x2_t *)&a2, 1)- (float)(*((float *)&a1 + 1) * *(float *)&a2))* -4.0));
    float v2 = (float)((float)(*(float *)&a1 + *((float *)&a2 + 1)) + *(float *)&a2) * 0.5;
    float v3 = (float)((float)(*(float *)&a1 + *((float *)&a2 + 1)) - *(float *)&a2) * 0.5;
    float v4 = (float)(v2 - *(float *)&a1) / *((float *)&a1 + 1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2466B7740;
    *(_DWORD *)(inited + 32) = 1065353216;
    *(float *)(inited + 36) = v4;
    specialized SIMD.init<A>(_:)(inited);
    float32x2_t v7 = v6;
    swift_setDeallocating();
    float32x2_t v8 = vmul_f32(v7, v7);
    v8.i32[0] = vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1)).u32[0];
    float32x2_t v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
    float32x2_t v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
    float32x2_t v13 = vmul_n_f32(v7, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]);
    uint64_t v11 = swift_initStackObject();
    *(_OWORD *)(v11 + 16) = xmmword_2466B7740;
    *(_DWORD *)(v11 + 32) = v13.i32[1];
    *(float *)(v11 + 36) = -v13.f32[0];
    specialized SIMD.init<A>(_:)(v11);
    swift_setDeallocating();
    uint64_t v12 = swift_initStackObject();
    *(_OWORD *)(v12 + 16) = xmmword_2466B7740;
    *(float *)(v12 + 32) = v2;
    *(float *)(v12 + 36) = v3;
    specialized SIMD.init<A>(_:)(v12);
    swift_setDeallocating();
  }
}

float32x4_t specialized static MathHelpers.minAndMaxOver(points:)(float32x4_t *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
  *(void *)(inited + 32) = 0x7F0000007FLL;
  *(_DWORD *)(inited + 40) = -8388608;
  specialized SIMD.init<A>(_:)(inited);
  float32x4_t v14 = v3;
  swift_setDeallocating();
  uint64_t v4 = swift_initStackObject();
  *(_OWORD *)(v4 + 16) = xmmword_2466B5DE0;
  *(int32x2_t *)(v4 + 32) = vdup_n_s32(0x7F800000u);
  *(_DWORD *)(v4 + 40) = 2139095040;
  specialized SIMD.init<A>(_:)(v4);
  float32x4_t v13 = v5;
  swift_setDeallocating();
  uint64_t v7 = a1[1].i64[0];
  if (v7)
  {
    float32x2_t v8 = a1 + 2;
    float32x4_t result = v13;
    float32x4_t v10 = v14;
    do
    {
      float32x4_t v11 = *v8++;
      float32x4_t v12 = v11;
      v12.i32[3] = 0;
      v10.i32[3] = 0;
      float32x4_t v10 = vmaxnmq_f32(v12, v10);
      result.i32[3] = 0;
      float32x4_t result = vminnmq_f32(v12, result);
      result.i32[3] = v6;
      --v7;
    }
    while (v7);
  }
  else
  {
    return v13;
  }
  return result;
}

float specialized static MathHelpers.computeCameraDistanceToContainSphere(boxWorld:cameraFovRadians:nearPlaneDistance:boxPadding:)(float32x4_t a1, double a2, float a3, float a4)
{
  float32x4_t v5 = vmulq_f32(a1, a1);
  float v6 = sqrtf(v5.f32[2] + vaddv_f32(*(float32x2_t *)v5.f32));
  float v7 = *((float *)&a2 + 1);
  if (*((float *)&a2 + 1) >= *(float *)&a2) {
    float v7 = *(float *)&a2;
  }
  return (float)((float)((float)(v6 * 0.5) * a4) / tanf(v7 * 0.5)) + a3;
}

float specialized static MathHelpers.computePerspectiveMatrix(fovRadians:aspectRatio:nearZ:farZ:)(float a1, float a2)
{
  return (float)(1.0 / tanf(a1 * 0.5)) / a2;
}

void specialized static MathHelpers.angleBetween(_:_:)(float32x4_t a1, float32x4_t a2)
{
  int32x4_t v2 = (int32x4_t)vmulq_f32(a1, a1);
  int32x4_t v3 = (int32x4_t)vmulq_f32(a2, a2);
  float v4 = sqrtf(*(float *)&v3.i32[2] + vaddv_f32(*(float32x2_t *)v3.i8));
  if (sqrtf(*(float *)&v2.i32[2] + vaddv_f32(*(float32x2_t *)v2.i8)) <= 0.0001 || v4 <= 0.0001)
  {
    lazy protocol witness table accessor for type MathHelpers.Error and conformance MathHelpers.Error();
    swift_allocError();
    *float v6 = 0;
    v6[1] = 0;
    swift_willThrow();
  }
  else
  {
    unsigned __int32 v7 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v2, 2), vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1))).u32[0];
    float32x2_t v8 = vrsqrte_f32((float32x2_t)v7);
    float32x2_t v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7, vmul_f32(v8, v8)));
    float32x4_t v10 = vmulq_n_f32(a1, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7, vmul_f32(v9, v9))).f32[0]);
    unsigned __int32 v11 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
    float32x2_t v12 = vrsqrte_f32((float32x2_t)v11);
    float32x2_t v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11, vmul_f32(v12, v12)));
    float32x4_t v14 = vmulq_f32(v10, vmulq_n_f32(a2, vmul_f32(v13, vrsqrts_f32((float32x2_t)v11, vmul_f32(v13, v13))).f32[0]));
    float v15 = v14.f32[2] + vaddv_f32(*(float32x2_t *)v14.f32);
    if (v15 <= -1.0) {
      float v15 = -1.0;
    }
    if (v15 > 1.0) {
      float v15 = 1.0;
    }
    acosf(v15);
  }
}

void specialized static MathHelpers.computeCameraDistanceToContainProjectedBox(boxWorld:boxToCameraDirWorld:cameraUpWorld:cameraFovRadians:nearPlaneDistance:boxPadding:)(float32x4_t a1, float32x4_t a2, double a3, float32x2_t a4, double a5, double a6)
{
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static MathHelpers.computeCameraDistanceToContainProjectedBox(boxWorld:boxToCameraDirWorld:cameraUpWorld:cameraFovRadians:nearPlaneDistance:boxPadding:));
  Transform.init(matrix:)();
  float32x4_t v6 = vabsq_f32(a1);
  *(double *)v13.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&a3, vmul_n_f32(a4, fmaxf(fmaxf(v6.f32[0], v6.f32[2]), v6.f32[1]) * 5.0))), v7);
  __invert_f4(v13);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of static MathHelpers.computeCameraDistanceToContainProjectedBox(boxWorld:boxToCameraDirWorld:cameraUpWorld:cameraFovRadians:nearPlaneDistance:boxPadding:));
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of static MathHelpers.computeCameraDistanceToContainProjectedBox(boxWorld:boxToCameraDirWorld:cameraUpWorld:cameraFovRadians:nearPlaneDistance:boxPadding:));
  BoundingBox.init(min:max:)();
  specialized simd_float4x4.init(translation:rotation:scale:)(a3, a2);
  BoundingBox.transformed(by:)();
  BoundingBox.extents.getter();
  BoundingBox.extents.getter();
  BoundingBox.extents.getter();
  tanf(0.5 * *(float *)&a6);
  tanf(vmuls_lane_f32(0.5, *(float32x2_t *)&a6, 1));
}

void specialized static MathHelpers.computeCameraMatrixForConstrainedLookAt(box:boxPadding:lookAtPoint:lookAtDir:projection:useBoundingSphere:)(char a1, float32x4_t a2, float32x4_t a3, double a4, float a5, __n128 a6, float32x4_t a7, float a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float32x4_t a17, float32x4_t a18)
{
  float v37 = *((float *)&a9 + 1);
  Transform.init()();
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static MathHelpers.computeCameraMatrixForConstrainedLookAt(box:boxPadding:lookAtPoint:lookAtDir:projection:useBoundingSphere:));
  float32x4_t v42 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B7740;
  float v22 = atanf(1.0 / a8);
  *(float *)(inited + 32) = v22 + v22;
  float v23 = atanf(1.0 / v37);
  *(float *)(inited + 36) = v23 + v23;
  specialized SIMD.init<A>(_:)(inited);
  double v39 = v24;
  swift_setDeallocating();
  LODWORD(v25) = vdivq_f32(a18, a17).i32[2];
  if (a1)
  {
    float32x4_t v26 = vmulq_f32(a2, a2);
    float v27 = sqrtf(v26.f32[2] + vaddv_f32(*(float32x2_t *)v26.f32));
    float v28 = *((float *)&v39 + 1);
    if (*((float *)&v39 + 1) >= *(float *)&v39) {
      float v28 = *(float *)&v39;
    }
    float v41 = v25 + (float)((float)((float)(v27 * 0.5) * a5) / tanf(v28 * 0.5));
    float v29 = a7.f32[2];
  }
  else
  {
    float v29 = a7.f32[2];
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of static MathHelpers.computeCameraMatrixForConstrainedLookAt(box:boxPadding:lookAtPoint:lookAtDir:projection:useBoundingSphere:));
    specialized static MathHelpers.computeCameraDistanceToContainProjectedBox(boxWorld:boxToCameraDirWorld:cameraUpWorld:cameraFovRadians:nearPlaneDistance:boxPadding:)(a2, a3, a4, vsub_f32(0, *(float32x2_t *)a7.f32), v30, v39);
    float v41 = v31;
  }
  *(double *)v32.i64 = simd_quaternion(v42, a7);
  float32x4_t v43 = v32;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of static MathHelpers.computeCameraMatrixForConstrainedLookAt(box:boxPadding:lookAtPoint:lookAtDir:projection:useBoundingSphere:));
  uint64_t v33 = swift_initStackObject();
  *(_OWORD *)(v33 + 16) = xmmword_2466B5DE0;
  *(float32x2_t *)(v33 + 32) = vsub_f32((float32x2_t)a6.n128_u64[0], vmul_n_f32(*(float32x2_t *)a7.f32, v41));
  *(float *)(v33 + 40) = a6.n128_f32[2] - (float)(v29 * v41);
  specialized SIMD.init<A>(_:)(v33);
  double v46 = v34;
  swift_setDeallocating();
  specialized simd_float4x4.init(translation:rotation:scale:)(v46, v43);
}

double specialized static MathHelpers.computeCameraLookAtRotation(pos:lookAt:up:)(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v4 = vsubq_f32(a2, a1);
  int32x4_t v5 = (int32x4_t)vmulq_f32(v4, v4);
  v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 2), vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1))).u32[0];
  float32x2_t v6 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  float32x2_t v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v6, v6)));
  float32x4_t v8 = vmulq_n_f32(v4, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v7, v7))).f32[0]);
  v18.columns[2].i64[0] = vnegq_f32(v8).u64[0];
  v18.columns[2].f32[2] = -v8.f32[2];
  v18.columns[2].i32[3] = 0;
  int32x4_t v9 = (int32x4_t)vmulq_f32(a3, a3);
  v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
  *(float32x2_t *)v5.i8 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  *(float32x2_t *)v5.i8 = vmul_f32(*(float32x2_t *)v5.i8, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8)));
  float32x4_t v10 = vmulq_n_f32(a3, vmul_f32(*(float32x2_t *)v5.i8, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8))).f32[0]);
  float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18.columns[2], (int32x4_t)v18.columns[2]), (int8x16_t)v18.columns[2], 0xCuLL);
  float32x4_t v12 = vmlaq_f32(vmulq_f32(v11, vnegq_f32(v10)), (float32x4_t)v18.columns[2], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL));
  int32x4_t v13 = (int32x4_t)vmulq_f32(v12, v12);
  v13.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), *(float32x2_t *)v13.i8)).u32[0];
  *(float32x2_t *)v5.i8 = vrsqrte_f32((float32x2_t)v13.u32[0]);
  *(float32x2_t *)v5.i8 = vmul_f32(*(float32x2_t *)v5.i8, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8)));
  v18.columns[0] = (simd_float4)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vmul_f32(*(float32x2_t *)v5.i8, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8))).f32[0]);
  float32x4_t v14 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18.columns[0], (int32x4_t)v18.columns[0]), (int8x16_t)v18.columns[0], 0xCuLL), vnegq_f32((float32x4_t)v18.columns[2])), (float32x4_t)v18.columns[0], v11);
  v18.columns[3] = (simd_float4)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14);
  int32x4_t v15 = (int32x4_t)vmulq_f32(v14, v14);
  v15.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), *(float32x2_t *)v15.i8)).u32[0];
  float32x4_t v16 = (float32x4_t)vextq_s8((int8x16_t)v18.columns[3], (int8x16_t)v14, 0xCuLL);
  *(float32x2_t *)v18.columns[3].f32 = vrsqrte_f32((float32x2_t)v15.u32[0]);
  *(float32x2_t *)v18.columns[3].f32 = vmul_f32(*(float32x2_t *)v18.columns[3].f32, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(*(float32x2_t *)v18.columns[3].f32, *(float32x2_t *)v18.columns[3].f32)));
  *(float32x2_t *)v18.columns[3].f32 = vmul_f32(*(float32x2_t *)v18.columns[3].f32, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(*(float32x2_t *)v18.columns[3].f32, *(float32x2_t *)v18.columns[3].f32)));
  v18.columns[1] = (simd_float4)vmulq_n_f32(v16, v18.columns[3].f32[0]);
  return simd_quaternion(v18);
}

unint64_t lazy protocol witness table accessor for type MathHelpers.Error and conformance MathHelpers.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type MathHelpers.Error and conformance MathHelpers.Error;
  if (!lazy protocol witness table cache variable for type MathHelpers.Error and conformance MathHelpers.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathHelpers.Error and conformance MathHelpers.Error);
  }
  return result;
}

void specialized static MathHelpers.angleBetween(_:_:)(float32x2_t a1, float32x2_t a2)
{
  float32x2_t v2 = vmul_f32(a1, a1);
  float32x2_t v3 = vmul_f32(a2, a2);
  int32x2_t v4 = vcgt_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32((int32x2_t)v3, (int32x2_t)v2), (float32x2_t)vzip2_s32((int32x2_t)v3, (int32x2_t)v2))), (float32x2_t)vdup_n_s32(0x38D1B717u));
  if (v4.i32[1] & v4.i32[0])
  {
    unsigned __int32 v5 = vadd_f32(v2, (float32x2_t)vdup_lane_s32((int32x2_t)v2, 1)).u32[0];
    float32x2_t v6 = vrsqrte_f32((float32x2_t)v5);
    float32x2_t v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5, vmul_f32(v6, v6)));
    float32x2_t v8 = vmul_n_f32(a1, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5, vmul_f32(v7, v7))).f32[0]);
    unsigned __int32 v9 = vadd_f32(v3, (float32x2_t)vdup_lane_s32((int32x2_t)v3, 1)).u32[0];
    float32x2_t v10 = vrsqrte_f32((float32x2_t)v9);
    float32x2_t v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9, vmul_f32(v10, v10)));
    float v12 = vaddv_f32(vmul_f32(v8, vmul_n_f32(a2, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9, vmul_f32(v11, v11))).f32[0])));
    if (v12 <= -1.0) {
      float v12 = -1.0;
    }
    if (v12 > 1.0) {
      float v12 = 1.0;
    }
    acosf(v12);
  }
  else
  {
    lazy protocol witness table accessor for type MathHelpers.Error and conformance MathHelpers.Error();
    swift_allocError();
    *int32x4_t v13 = 0;
    v13[1] = 0;
    swift_willThrow();
  }
}

float specialized static MathHelpers.computeClippingPlanes(boxWorld:worldToCamera:flipZ:)(char a1)
{
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static MathHelpers.computeClippingPlanes(boxWorld:worldToCamera:flipZ:));
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of static MathHelpers.computeClippingPlanes(boxWorld:worldToCamera:flipZ:));
  BoundingBox.init(min:max:)();
  if (a1) {
    float32x2_t v2 = &outlined read-only object #2 of static MathHelpers.computeClippingPlanes(boxWorld:worldToCamera:flipZ:);
  }
  else {
    float32x2_t v2 = &outlined read-only object #3 of static MathHelpers.computeClippingPlanes(boxWorld:worldToCamera:flipZ:);
  }
  specialized SIMD.init<A>(_:)((uint64_t)v2);
  BoundingBox.transformed(by:)();
  return v3;
}

unint64_t destroy for MathHelpers.Error(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MathHelpers.Error(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for MathHelpers.Error(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MathHelpers.Error(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MathHelpers.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MathHelpers.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for MathHelpers.Error(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for MathHelpers.Error(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for MathHelpers.Error()
{
  return &type metadata for MathHelpers.Error;
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ()(uint64_t a1, void *a2)
{
  unint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t type metadata accessor for ResourceUsageHelper()
{
  return self;
}

Swift::Void __swiftcall ResourceTimedLogger.unrequestLogging()()
{
  uint64_t v2 = *(void *)(v1 + 32);
  BOOL v3 = __OFSUB__(v2, 1);
  uint64_t v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
LABEL_16:
    swift_once();
    goto LABEL_7;
  }
  uint64_t v0 = v1;
  *(void *)(v1 + 32) = v4;
  if ((v4 & 0x8000000000000000) == 0)
  {
    if (v4) {
      return;
    }
    unsigned int v5 = *(void **)(v1 + 24);
    if (!v5) {
      return;
    }
    goto LABEL_10;
  }
  if (one-time initialization token for logger != -1) {
    goto LABEL_16;
  }
LABEL_7:
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  float32x2_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unsigned __int32 v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned __int32 v9 = 0;
    _os_log_impl(&dword_2465C2000, v7, v8, "unrequestLogging() underflow!", v9, 2u);
    MEMORY[0x24C5348D0](v9, -1, -1);
  }

  *(void *)(v0 + 32) = 0;
  unsigned int v5 = *(void **)(v0 + 24);
  if (v5)
  {
LABEL_10:
    if (objc_msgSend(v5, sel_isValid))
    {
      ResourceTimedLogger.stopRunningTimer()();
    }
  }
}

void ResourceTimedLogger.stopRunningTimer()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  swift_retain();
  BOOL v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unsigned int v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unsigned int v5 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_2465C2000, v3, v4, "Use count=%ld went to 0... stopping the running resource logger.", v5, 0xCu);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v6 = *(void **)(v1 + 24);
  if (v6)
  {
    if (objc_msgSend(v6, sel_isValid))
    {
      objc_msgSend(*(id *)(v1 + 24), sel_invalidate);
      float32x2_t v7 = *(void **)(v1 + 24);
      *(void *)(v1 + 24) = 0;

      return;
    }
    __break(1u);
  }
  __break(1u);
}

void ResourceTimedLogger.startNewTimer()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 24);
  if (v2 && (objc_msgSend(v2, sel_isValid) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)logger);
    swift_retain();
    os_log_type_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 134217984;
      v11[0] = *(void *)(v1 + 32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_2465C2000, v4, v5, "Use count=%ld moved above 0... starting the running resource logger.", v6, 0xCu);
      MEMORY[0x24C5348D0](v6, -1, -1);
    }
    else
    {

      swift_release();
    }
    float32x2_t v7 = self;
    v11[4] = closure #1 in ResourceTimedLogger.startNewTimer();
    v11[5] = 0;
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 1107296256;
    v11[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
    v11[3] = &block_descriptor_8;
    os_log_type_t v8 = _Block_copy(v11);
    id v9 = objc_msgSend(v7, sel_scheduledTimerWithTimeInterval_repeats_block_, 1, v8, 5.0);
    _Block_release(v8);
    float32x2_t v10 = *(void **)(v1 + 24);
    *(void *)(v1 + 24) = v9;
  }
}

void closure #1 in ResourceTimedLogger.startNewTimer()()
{
  kern_return_t v7;
  BOOL v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  thread_act_t *v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  mach_msg_type_number_t act_listCnt[2];
  thread_act_array_t act_list[2];

  act_list[1] = *(thread_act_array_t *)MEMORY[0x263EF8340];
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 134349056;
    act_list[0] = (thread_act_array_t)specialized static ResourceUsageHelper.memoryUsage(in:)(2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v1, v2, "Memory usage: %{public}llu MB", v3, 0xCu);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }

  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134349056;
    act_list[0] = 0;
    act_listCnt[0] = 0;
    float32x2_t v7 = task_threads(*MEMORY[0x263EF8960], act_list, act_listCnt);
    if (act_list[0]) {
      os_log_type_t v8 = v7 == 0;
    }
    else {
      os_log_type_t v8 = 0;
    }
    id v9 = act_listCnt[0];
    if (!v8) {
      id v9 = -1;
    }
    act_list[0] = (thread_act_array_t)v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v4, v5, "Thread count: %{public}ld", v6, 0xCu);
    MEMORY[0x24C5348D0](v6, -1, -1);
  }

  float32x2_t v10 = Logger.logObject.getter();
  float32x2_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    float v12 = (uint8_t *)swift_slowAlloc();
    int32x4_t v13 = (thread_act_t *)swift_slowAlloc();
    act_list[0] = v13;
    *(_DWORD *)float v12 = 136446210;
    float32x4_t v14 = objc_msgSend(self, sel_processInfo);
    int32x4_t v15 = objc_msgSend(v14, sel_thermalState);

    *(void *)act_listCnt = v15;
    type metadata accessor for NSProcessInfoThermalState(0);
    float32x4_t v16 = String.init<A>(describing:)();
    *(void *)act_listCnt = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)act_list);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v10, v11, "Thermal state: %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v13, -1, -1);
    MEMORY[0x24C5348D0](v12, -1, -1);
  }
}

uint64_t ResourceTimedLogger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResourceTimedLogger()
{
  return self;
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

char *specialized static ResourceUsageHelper.memoryUsage(in:)(char a1)
{
  v31[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v2 - 8);
  int v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  memset(v15, 0, sizeof(v15));
  mach_msg_type_number_t v14 = 93;
  mach_error_t v3 = task_info(*MEMORY[0x263EF8960], 0x16u, v15, &v14);
  if (!v3) {
    return (char *)((unint64_t)v16 / qword_2466BBD28[a1]);
  }
  unint64_t result = mach_error_string(v3);
  if (result)
  {
    static String.Encoding.ascii.getter();
    uint64_t v5 = String.init(cString:encoding:)();
    if (v6) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = 0x206E776F6E6B6E55;
    }
    if (v6) {
      unint64_t v8 = v6;
    }
    else {
      unint64_t v8 = 0xED0000726F727245;
    }
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)logger);
    swift_bridgeObjectRetain();
    float32x2_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      float v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v31[0] = v13;
      *(_DWORD *)float v12 = 136446210;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2465C2000, v10, v11, "Error with task_info(): %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v13, -1, -1);
      MEMORY[0x24C5348D0](v12, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MeshToTextureRenderer.deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t MeshToTextureRenderer.__deallocating_deinit()
{
  MeshToTextureRenderer.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MeshToTextureRenderer()
{
  return self;
}

uint64_t descriptionString(for:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ObjectCaptureSession.State();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (MEMORY[0x263F368D8] && v6 == *MEMORY[0x263F368D8])
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = type metadata accessor for ObjectCaptureSession.Error();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void *)(v8 + 64);
    MEMORY[0x270FA5388](v7);
    unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))((char *)v17 - v10, v5, v7);
    v17[0] = 0x28726F727245;
    v17[1] = 0xE600000000000000;
    MEMORY[0x270FA5388](v11);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v17 - v10, (char *)v17 - v10, v7);
    v12._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 41;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    uint64_t v14 = v17[0];
    (*(void (**)(char *, uint64_t))(v8 + 8))((char *)v17 - v10, v7);
    return v14;
  }
  if (MEMORY[0x263F368C8] && v6 == *MEMORY[0x263F368C8]) {
    return 0x696C616974696E49;
  }
  if (MEMORY[0x263F368E8] && v6 == *MEMORY[0x263F368E8]) {
    return 0x676E696E6E7552;
  }
  if (MEMORY[0x263F368D0] && v6 == *MEMORY[0x263F368D0]) {
    return 0x7964616552;
  }
  if (MEMORY[0x263F368E0] && v6 == *MEMORY[0x263F368E0]) {
    return 0x646573756150;
  }
  if (MEMORY[0x263F36900] && v6 == *MEMORY[0x263F36900])
  {
    uint64_t v15 = 0x746365746544;
    return v15 & 0xFFFFFFFFFFFFLL | 0x6E69000000000000;
  }
  if (MEMORY[0x263F368F0] && v6 == *MEMORY[0x263F368F0]) {
    return 0x676E696E6E616353;
  }
  if (MEMORY[0x263F36908] && v6 == *MEMORY[0x263F36908])
  {
    uint64_t v15 = 0x6873696E6946;
    return v15 & 0xFFFFFFFFFFFFLL | 0x6E69000000000000;
  }
  if (MEMORY[0x263F368F8] && v6 == *MEMORY[0x263F368F8]) {
    return 0x6574656C706D6F43;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0xD000000000000023;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySsG_SSs5NeverOTg5012_sSsSSIeggo_f4SSs5D116OIegnrzr_TR93_s19_RealityKit_SwiftUI0A17ViewCameraContentV18updateDebugOptions0aB06ARViewC0iJ0VyFSSSshcfu_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v16;
    uint64_t v4 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v5 = *(v4 - 3);
      uint64_t v6 = *(v4 - 2);
      uint64_t v7 = *(v4 - 1);
      uint64_t v8 = *v4;
      swift_bridgeObjectRetain();
      uint64_t v9 = MEMORY[0x24C5334C0](v5, v6, v7, v8);
      uint64_t v11 = v10;
      swift_bridgeObjectRelease();
      unint64_t v13 = *(void *)(v16 + 16);
      unint64_t v12 = *(void *)(v16 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      }
      *(void *)(v16 + 16) = v13 + 1;
      uint64_t v14 = v16 + 16 * v13;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = v11;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t RealityView.init<A>(make:update:placeholder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, char *a6@<X8>)
{
  uint64_t v12 = *(void *)(a5 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16(v13);
  *(void *)a6 = a1;
  *((void *)a6 + 1) = a2;
  *((void *)a6 + 2) = a3;
  *((void *)a6 + 3) = a4;
  uint64_t v17 = type metadata accessor for RealityViewCameraContent.Body();
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(&a6[*(int *)(v17 + 40)], v15, a5);
  long long v19 = &a6[*(int *)(v17 + 44)];
  *(void *)long long v19 = implicit closure #2 in implicit closure #1 in variable initialization expression of RealityViewCameraContent.Body._strongModel;
  *((void *)v19 + 1) = 0;
  v19[16] = 0;
  return result;
}

uint64_t RealityView.init<>(make:update:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = result;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  *(void *)(a5 + 32) = implicit closure #2 in implicit closure #1 in variable initialization expression of RealityViewCameraContent.Body._strongModel;
  *(void *)(a5 + 40) = 0;
  *(unsigned char *)(a5 + 48) = 0;
  return result;
}

uint64_t RealityViewCameraContent.Body.strongModel.getter(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 44));
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = *((unsigned __int8 *)v2 + 16);
  uint64_t v6 = type metadata accessor for _RealityViewCameraModel(0);
  uint64_t v7 = lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type _RealityViewCameraModel and conformance _RealityViewCameraModel, (void (*)(uint64_t))type metadata accessor for _RealityViewCameraModel);

  return MEMORY[0x270EFF108](v3, v4, v5, v6, v7);
}

uint64_t implicit closure #2 in implicit closure #1 in variable initialization expression of RealityViewCameraContent.Body._strongModel()
{
  type metadata accessor for _RealityViewCameraModel(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content);
  id v2 = objc_allocWithZone((Class)type metadata accessor for ARView());
  uint64_t v3 = (void *)ARView.init(frame:forRealityView:)();
  RealityViewCameraContent.init(view:)(v3, v1);
  *(unsigned char *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_makeTaskBegun) = 0;
  Published.init(initialValue:)();
  return v0;
}

uint64_t RealityViewCameraContent.Body.body.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(v5 + 16) = *(void *)(a1 + 16);
  *(void *)(v5 + 24) = v6;
  (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v5 + v4, (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  type metadata accessor for _RealityViewImpl();
  swift_getWitnessTable();
  uint64_t v11 = GeometryReader.init(content:)();
  uint64_t v12 = v7;
  uint64_t v8 = type metadata accessor for GeometryReader();
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v11, v8, WitnessTable);
  swift_release();
  uint64_t v11 = v13;
  uint64_t v12 = v14;
  static ViewBuilder.buildExpression<A>(_:)(&v11, v8, WitnessTable);
  return swift_release();
}

uint64_t closure #1 in RealityViewCameraContent.Body.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v47 = a1;
  uint64_t v52 = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Image.DynamicRange?>);
  MEMORY[0x270FA5388](v8 - 8);
  long long v50 = (uint64_t *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<CameraControls>);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v49 = (uint64_t *)((char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for GeometryProxy();
  uint64_t v42 = *(void *)(v12 - 8);
  uint64_t v43 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  double v46 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a3;
  uint64_t v51 = a4;
  uint64_t v40 = type metadata accessor for _RealityViewImpl();
  uint64_t v48 = *(void *)(v40 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v40);
  int v44 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  long long v45 = (char *)&v39 - v21;
  uint64_t v22 = a2[1];
  uint64_t v41 = *a2;
  uint64_t v24 = a2[2];
  uint64_t v23 = a2[3];
  if (v24)
  {
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v24;
    *(void *)(v25 + 24) = v23;
    long long v26 = partial apply for thunk for @escaping @callee_guaranteed (@inout RealityViewCameraContent) -> ();
  }
  else
  {
    long long v26 = (uint64_t (*)())closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
    uint64_t v25 = 0;
  }
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v26;
  *(void *)(v27 + 24) = v25;
  uint64_t v28 = type metadata accessor for RealityViewCameraContent.Body();
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, (char *)a2 + *(int *)(v28 + 40), v18);
  uint64_t v29 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v46, v47, v43);
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v24);
  RealityViewCameraContent.Body.strongModel.getter(v28);
  int v30 = v49;
  default argument 5 of _RealityViewImpl.init(make:update:placeholder:proxy:model:cameraControls:dynamicRange:backgroundStyle:)(&demangling cache variable for type metadata for Environment<CameraControls>.Content, v49);
  float v31 = v50;
  default argument 5 of _RealityViewImpl.init(make:update:placeholder:proxy:model:cameraControls:dynamicRange:backgroundStyle:)(&demangling cache variable for type metadata for Environment<Image.DynamicRange?>.Content, v50);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v33 = v44;
  _RealityViewImpl.init(make:update:placeholder:proxy:model:cameraControls:dynamicRange:backgroundStyle:)(v41, v22, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@inout RealityViewCameraContent) -> (@out ()), v27, (uint64_t)v17, v29, (uint64_t)v30, v44, (uint64_t)v31, KeyPath, 0, v18);
  uint64_t v34 = v40;
  uint64_t WitnessTable = swift_getWitnessTable();
  long long v36 = v45;
  static ViewBuilder.buildExpression<A>(_:)(v33, v34, WitnessTable);
  float v37 = *(void (**)(char *, uint64_t))(v48 + 8);
  v37(v33, v34);
  static ViewBuilder.buildExpression<A>(_:)(v36, v34, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v37)(v36, v34);
}

uint64_t sub_246672C9C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for RealityViewCameraContent.Body();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(*(void *)(v2 - 8) + 64);
  swift_release();
  if (*(void *)(v0 + v4 + 16)) {
    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4 + *(int *)(v2 + 40), v1);
  outlined consume of StateObject<_RealityViewCameraModel>.Storage();

  return MEMORY[0x270FA0238](v0, v4 + v5, v3 | 7);
}

uint64_t type metadata accessor for RealityViewCameraContent.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined consume of StateObject<_RealityViewCameraModel>.Storage()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in RealityViewCameraContent.Body.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for RealityViewCameraContent.Body() - 8);
  uint64_t v8 = (uint64_t *)(v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));

  return closure #1 in RealityViewCameraContent.Body.body.getter(a1, v8, v5, v6, a2);
}

uint64_t type metadata accessor for _RealityViewImpl()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t default argument 5 of _RealityViewImpl.init(make:update:placeholder:proxy:model:cameraControls:dynamicRange:backgroundStyle:)@<X0>(uint64_t *a1@<X3>, uint64_t *a2@<X8>)
{
  *a2 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(a1);

  return swift_storeEnumTagMultiPayload();
}

uint64_t _RealityViewImpl.init(make:update:placeholder:proxy:model:cameraControls:dynamicRange:backgroundStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, char *a8@<X8>, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  *(void *)a8 = a1;
  *((void *)a8 + 1) = a2;
  *((void *)a8 + 2) = a3;
  *((void *)a8 + 3) = a4;
  uint64_t v16 = (int *)type metadata accessor for _RealityViewImpl();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(&a8[v16[10]], a5, a12);
  uint64_t v17 = &a8[v16[11]];
  uint64_t v18 = type metadata accessor for GeometryProxy();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a6, v18);
  swift_weakInit();
  swift_release();
  outlined init with take of Animation?(a7, (uint64_t)&a8[v16[13]], &demangling cache variable for type metadata for Environment<CameraControls>);
  uint64_t result = outlined init with take of Animation?(a9, (uint64_t)&a8[v16[14]], &demangling cache variable for type metadata for Environment<Image.DynamicRange?>);
  uint64_t v20 = &a8[v16[15]];
  *(void *)uint64_t v20 = a10;
  v20[8] = a11 & 1;
  return result;
}

void RealityViewCameraContent.init(view:)(void *a1@<X0>, void *a2@<X8>)
{
  long long v36 = a1;
  uint64_t v3 = type metadata accessor for ARView.RenderOptions();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v37[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v37[-1] - v8;
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  a2[1] = Entity.init()();
  uint64_t v10 = (int *)type metadata accessor for RealityViewCameraContent(0);
  uint64_t v11 = (char *)a2 + v10[6];
  uint64_t v12 = type metadata accessor for GeometryProxy();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = v10[7];
  type metadata accessor for RealityViewCameraContent.ContentStorage(0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v14 + 24) = 0;
  uint64_t v15 = v14 + OBJC_IVAR____TtCV19_RealityKit_SwiftUI24RealityViewCameraContent14ContentStorage_unavailableCapabilities;
  uint64_t v16 = type metadata accessor for SpatialTrackingSession.UnavailableCapabilities();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(void *)((char *)a2 + v13) = v14;
  uint64_t v17 = (void *)((char *)a2 + v10[8]);
  *uint64_t v17 = 0;
  uint64_t v18 = type metadata accessor for RealityViewCamera(0);
  static CameraControls.none.getter();
  *((unsigned char *)v17 + *(int *)(v18 + 24)) = 0;
  *(void *)((char *)a2 + v10[9]) = 0;
  *(void *)((char *)a2 + v10[10]) = 0;
  uint64_t v19 = (void *)((char *)a2 + v10[11]);
  uint64_t v20 = type metadata accessor for RealityViewRenderingEffects(0);
  v19[1] = 0;
  v19[2] = 0;
  *uint64_t v19 = 0;
  uint64_t v21 = (char *)v19 + *(int *)(v20 + 28);
  uint64_t v22 = *MEMORY[0x263F16710];
  uint64_t v23 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v21, v22, v23);
  *(void *)((char *)v19 + *(int *)(v20 + 32)) = 0;
  uint64_t v24 = v10[12];
  type metadata accessor for _proto_RealityViewCameraController_v1();
  swift_allocObject();
  _proto_RealityViewCameraController_v1.init()();
  *(void *)((char *)a2 + v24) = v25;
  *((unsigned char *)a2 + v10[13]) = 0;
  long long v26 = v36;
  *a2 = v36;
  id v27 = v26;
  static ARView.RenderOptions.disableFaceOcclusions.getter();
  uint64_t v28 = (void (*)(void *, void))ARView.renderOptions.modify();
  specialized OptionSet<>.insert(_:)(v9, (uint64_t)v7);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v4 + 8);
  v29(v7, v3);
  v29(v9, v3);
  v28(v37, 0);
  if (!dispatch thunk of ARView.realityFusionSession.getter())
  {
    __break(1u);
    goto LABEL_7;
  }
  int v30 = (void *)dispatch thunk of RealityFusionSession.serviceManager.getter();
  swift_release();
  if (!v30)
  {
LABEL_7:
    __break(1u);
    return;
  }
  type metadata accessor for SpatialTrackingManager();
  uint64_t v31 = type metadata accessor for ARSessionManager();
  swift_allocObject();
  id v32 = v27;
  id v33 = v30;
  uint64_t v34 = ARSessionManager.init(arView:)();
  v37[3] = v31;
  v37[4] = lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARSessionManager and conformance ARSessionManager, MEMORY[0x263F168A8]);
  v37[0] = v34;
  swift_allocObject();
  SpatialTrackingManager.init(serviceManager:arkitRunnable:)();
  static SpatialTrackingManager.shared.setter();
  swift_retain();
  Entity.coreEntity.getter();
  swift_release();
  REHideEntity();
  dispatch thunk of ARView.scene.getter();
  swift_retain();
  dispatch thunk of Scene.addAnchor(_:)();
  swift_release();
  swift_release();
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  uint64_t v35 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  if (MEMORY[0x24C5340E0](v35)) {
    REPhysicsSimulationServiceSetAnchorShouldHaveSharedSimulationByDefault();
  }
  $defer #1 () in RealityViewCameraContent.init(view:)((uint64_t)a2);
}

uint64_t _RealityViewCameraModel.makeTaskComplete.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t _RealityViewCameraModel.__deallocating_deinit()
{
  outlined destroy of RealityViewCameraContent(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content, type metadata accessor for RealityViewCameraContent);
  uint64_t v1 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel__makeTaskComplete;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance _RealityViewCameraModel@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for _RealityViewCameraModel(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t _RealityViewImpl.backgroundStyle.getter(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 60));
  uint64_t v3 = *v2;
  uint64_t v4 = *((unsigned __int8 *)v2 + 8);
  outlined copy of Environment<AnyShapeStyle?>.Content(*v2, v4);
  uint64_t v5 = specialized Environment.wrappedValue.getter(v3, v4);
  protocol witness for System.init(scene:) in conformance _RealityViewCameraControllerSystem(v3, v4);
  return v5;
}

uint64_t _RealityViewImpl.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v108 = a2;
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v103 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v99 = v9;
  float32x4_t v100 = (char *)v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
  uint64_t v109 = *(void *)(a1 + 16);
  uint64_t v113 = type metadata accessor for _ConditionalContent();
  uint64_t v10 = type metadata accessor for Group();
  uint64_t v102 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  float v104 = (char *)v91 - v11;
  type metadata accessor for _TaskModifier();
  uint64_t v114 = v10;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v91 - v17;
  uint64_t v112 = v19;
  uint64_t v111 = type metadata accessor for Optional();
  uint64_t v106 = *(void *)(v111 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v111);
  uint64_t v22 = (char *)v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  double v110 = (char *)v91 - v23;
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v107 = a1;
  float32x4_t v105 = v22;
  if (Strong)
  {
    uint64_t v25 = Strong;
    double v93 = v91;
    uint64_t v26 = MEMORY[0x270FA5388](Strong);
    v91[1] = &v91[-6];
    long long v96 = v8;
    uint64_t v27 = *(void *)(a1 + 24);
    v91[-4] = v109;
    v91[-3] = v27;
    v91[-2] = v26;
    v91[-1] = v3;
    uint64_t v92 = v3;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
    double v98 = v18;
    uint64_t v29 = v28;
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>>);
    long long v94 = v16;
    uint64_t v32 = v31;
    uint64_t v97 = v13;
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
    unint64_t v34 = lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>();
    uint64_t v95 = v5;
    unint64_t v35 = v34;
    uint64_t v36 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
    uint64_t v131 = v32;
    uint64_t v132 = v33;
    unint64_t v133 = v35;
    uint64_t v134 = v36;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v38 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<MagnifyGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
    uint64_t v131 = v29;
    uint64_t v132 = v30;
    unint64_t v133 = OpaqueTypeConformance2;
    uint64_t v134 = v38;
    uint64_t v118 = swift_getOpaqueTypeConformance2();
    uint64_t v119 = v27;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v40 = v104;
    Group<A>.init(content:)();
    uint64_t v41 = v101;
    uint64_t v42 = v100;
    (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v100, v92, a1);
    unint64_t v43 = (*(unsigned __int8 *)(v41 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    int v44 = (char *)swift_allocObject();
    *((void *)v44 + 2) = v109;
    *((void *)v44 + 3) = v27;
    *((void *)v44 + 4) = v25;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v44[v43], v42, a1);
    uint64_t v117 = WitnessTable;
    swift_retain();
    uint64_t v45 = v114;
    uint64_t v46 = swift_getWitnessTable();
    uint64_t v47 = v96;
    static TaskPriority.userInitiated.getter();
    uint64_t v48 = v94;
    View.task(priority:_:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v103 + 8))(v47, v95);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v40, v45);
    uint64_t v49 = lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type _TaskModifier and conformance _TaskModifier, MEMORY[0x263F189F8]);
    uint64_t v115 = v46;
    uint64_t v116 = v49;
    uint64_t v50 = v112;
    uint64_t v51 = swift_getWitnessTable();
    uint64_t v52 = v98;
    long long v53 = v48;
    static ViewBuilder.buildExpression<A>(_:)(v48, v50, v51);
    uint64_t v54 = v97;
    long long v55 = *(void (**)(char *, uint64_t))(v97 + 8);
    v55(v53, v50);
    long long v56 = v105;
    static ViewBuilder.buildExpression<A>(_:)(v52, v50, v51);
    v55(v52, v50);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v56, 0, 1, v50);
    uint64_t v57 = v106;
    uint64_t v58 = v111;
    (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v110, v56, v111);
    long long v59 = *(void (**)(char *, uint64_t))(v57 + 8);
    v59(v56, v58);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v22, 1, 1, v112);
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
    uint64_t v62 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>>);
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
    unint64_t v64 = lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>();
    uint64_t v65 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
    uint64_t v131 = v62;
    uint64_t v132 = v63;
    unint64_t v133 = v64;
    uint64_t v134 = v65;
    uint64_t v66 = swift_getOpaqueTypeConformance2();
    uint64_t v67 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<MagnifyGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
    uint64_t v131 = v60;
    uint64_t v132 = v61;
    unint64_t v133 = v66;
    uint64_t v134 = v67;
    uint64_t v68 = swift_getOpaqueTypeConformance2();
    uint64_t v69 = *(void *)(a1 + 24);
    uint64_t v129 = v68;
    uint64_t v130 = v69;
    uint64_t v128 = swift_getWitnessTable();
    uint64_t v70 = swift_getWitnessTable();
    uint64_t v71 = lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type _TaskModifier and conformance _TaskModifier, MEMORY[0x263F189F8]);
    uint64_t v126 = v70;
    uint64_t v127 = v71;
    swift_getWitnessTable();
    uint64_t v72 = v106;
    uint64_t v73 = v105;
    uint64_t v74 = v111;
    (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v110, v105, v111);
    long long v59 = *(void (**)(char *, uint64_t))(v72 + 8);
    v59(v73, v74);
  }
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>>);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
  unint64_t v79 = lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>();
  uint64_t v80 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
  uint64_t v131 = v77;
  uint64_t v132 = v78;
  unint64_t v133 = v79;
  uint64_t v134 = v80;
  uint64_t v81 = swift_getOpaqueTypeConformance2();
  uint64_t v82 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<MagnifyGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
  uint64_t v131 = v75;
  uint64_t v132 = v76;
  unint64_t v133 = v81;
  uint64_t v134 = v82;
  uint64_t v83 = swift_getOpaqueTypeConformance2();
  uint64_t v84 = *(void *)(v107 + 24);
  uint64_t v124 = v83;
  uint64_t v125 = v84;
  uint64_t v123 = swift_getWitnessTable();
  uint64_t v85 = swift_getWitnessTable();
  uint64_t v86 = lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type _TaskModifier and conformance _TaskModifier, MEMORY[0x263F189F8]);
  uint64_t v121 = v85;
  uint64_t v122 = v86;
  uint64_t v120 = swift_getWitnessTable();
  uint64_t v87 = v111;
  uint64_t v88 = swift_getWitnessTable();
  long long v89 = v110;
  static ViewBuilder.buildExpression<A>(_:)(v110, v87, v88);
  return ((uint64_t (*)(char *, uint64_t))v59)(v89, v87);
}

uint64_t closure #1 in _RealityViewImpl.body.getter@<X0>(char *a1@<X0>, uint64_t (*a2)(uint64_t a1)@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v157 = a2;
  uint64_t v167 = a5;
  v156 = (char *)*((void *)a3 - 1);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  v136 = (char *)&v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  simd_float4x4 v135 = (char *)&v125 - v10;
  uint64_t v146 = type metadata accessor for MagnifyGesture();
  uint64_t v145 = *(void *)(v146 - 8);
  MEMORY[0x270FA5388](v146);
  v144 = (char *)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ChangedGesture<MagnifyGesture>);
  uint64_t v148 = *(void *)(v149 - 8);
  MEMORY[0x270FA5388](v149);
  v147 = (char *)&v125 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
  uint64_t v150 = *(void *)(v166 - 8);
  MEMORY[0x270FA5388](v166);
  v163 = (char *)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for RealityViewCameraContent(0);
  uint64_t v152 = *(void *)(v134 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v134);
  uint64_t v131 = (char *)&v125 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v132 = (char *)&v125 - v16;
  uint64_t v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
  uint64_t v151 = *(void *)(v170 - 8);
  MEMORY[0x270FA5388](v170);
  uint64_t v159 = (uint64_t)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for LocalCoordinateSpace();
  uint64_t v137 = *(void *)(v138 - 8);
  MEMORY[0x270FA5388](v138);
  uint64_t v130 = (char *)&v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0);
  uint64_t v140 = *(void *)(v141 - 8);
  MEMORY[0x270FA5388](v141);
  v139 = (char *)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>>);
  MEMORY[0x270FA5388](v169);
  v158 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
  uint64_t v143 = *(void *)(v164 - 8);
  MEMORY[0x270FA5388](v164);
  v165 = (char *)&v125 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
  uint64_t v155 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  v154 = (char *)&v125 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  v142 = (char *)&v125 - v25;
  uint64_t v129 = type metadata accessor for CameraControls();
  uint64_t v128 = *(void (***)(uint64_t, uint64_t))(v129 - 8);
  MEMORY[0x270FA5388](v129);
  uint64_t v27 = (char *)&v125 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = a4;
  uint64_t v28 = type metadata accessor for _RealityViewImpl();
  uint64_t v133 = *(void *)(v28 - 8);
  uint64_t v29 = *(void *)(v133 + 64);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v125 - v31;
  uint64_t v160 = v22;
  uint64_t v33 = (uint64_t)a3;
  uint64_t v34 = type metadata accessor for _ConditionalContent();
  uint64_t v161 = *(void *)(v34 - 8);
  uint64_t v162 = v34;
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (char *)&v125 - v35;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v171 == 1)
  {
    uint64_t v125 = v27;
    uint64_t v126 = (char *)&v125 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v127 = v36;
    v136 = a3;
    simd_float4x4 v135 = a1;
    float v37 = &a1[OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content];
    swift_beginAccess();
    uint64_t v38 = v134;
    uint64_t v39 = *(int *)(v134 + 32);
    v156 = v37;
    char v40 = v37[v39 + *(int *)(type metadata accessor for RealityViewCamera(0) + 24)];
    uint64_t v41 = v133;
    uint64_t v42 = *(void (***)(uint64_t, uint64_t))(v133 + 16);
    unint64_t v43 = v157;
    ((void (*)(char *, uint64_t (*)(uint64_t), uint64_t))v42)(v32, v157, v28);
    uint64_t v44 = v38;
    uint64_t v45 = v41;
    if (v40)
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v28);
      LODWORD(v134) = 0;
    }
    else
    {
      uint64_t v59 = (uint64_t)v125;
      specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<CameraControls>.Content, MEMORY[0x263F165E8], 0x6F436172656D6143, 0xEE00736C6F72746ELL, (uint64_t)v125);
      uint64_t v60 = CameraControls.rawValue.getter();
      v128[1](v59, v129);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v32, v28);
      if (v60) {
        int v61 = 1;
      }
      else {
        int v61 = v156[*(int *)(v44 + 52)];
      }
      LODWORD(v134) = v61;
    }
    uint64_t v62 = v126;
    ((void (*)(char *, uint64_t (*)(uint64_t), uint64_t))v42)(v126, v43, v28);
    uint64_t v128 = v42;
    uint64_t v63 = *(unsigned __int8 *)(v45 + 80);
    uint64_t v129 = v63 | 7;
    unint64_t v64 = (char *)swift_allocObject();
    uint64_t v65 = v136;
    uint64_t v66 = v43;
    uint64_t v67 = v168;
    *((void *)v64 + 2) = v136;
    *((void *)v64 + 3) = v67;
    *((void *)v64 + 4) = v135;
    uint64_t v126 = v64;
    uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v68(&v64[(v63 + 40) & ~v63], v62, v28);
    ((void (*)(char *, uint64_t (*)(uint64_t), uint64_t))v128)(v62, v66, v28);
    uint64_t v69 = (v63 + 32) & ~v63;
    uint64_t v70 = swift_allocObject();
    *(void *)(v70 + 16) = v65;
    *(void *)(v70 + 24) = v67;
    v68((char *)(v70 + v69), v62, v28);
    *(void *)(v70 + ((v29 + v69 + 7) & 0xFFFFFFFFFFFFFFF8)) = v135;
    swift_retain_n();
    uint64_t v133 = v28;
    uint64_t v71 = _RealityViewImpl.backgroundStyle.getter(v28);
    uint64_t v72 = v66;
    if (!v71)
    {
      uint64_t v171 = static Color.clear.getter();
      uint64_t v71 = AnyShapeStyle.init<A>(_:)();
    }
    uint64_t v73 = v169;
    uint64_t v74 = (uint64_t)v132;
    uint64_t v75 = (uint64_t)v131;
    uint64_t v76 = v130;
    uint64_t v171 = (uint64_t)partial apply for closure #1 in closure #1 in _RealityViewImpl.body.getter;
    v172 = v126;
    v173 = partial apply for closure #2 in closure #1 in _RealityViewImpl.body.getter;
    uint64_t v174 = v70;
    __int16 v175 = 256;
    uint64_t v176 = v71;
    swift_retain();
    static CoordinateSpaceProtocol<>.local.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>();
    uint64_t v77 = v139;
    uint64_t v78 = v138;
    View.onContinuousHover<A>(coordinateSpace:perform:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v137 + 8))(v76, v78);
    swift_release();
    swift_release();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RealityViewCameraConvertible>);
    unint64_t v79 = (int *)(type metadata accessor for RealityViewCameraConvertible(0) - 8);
    unint64_t v80 = (*(unsigned __int8 *)(*(void *)v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v79 + 80);
    uint64_t v81 = swift_allocObject();
    *(_OWORD *)(v81 + 16) = xmmword_2466B5E00;
    uint64_t v82 = (void *)(v81 + v80);
    uint64_t v83 = v156;
    uint64_t v84 = *(void **)v156;
    uint64_t v85 = (uint64_t)v72 + *(int *)(v133 + 44);
    uint64_t v86 = (char *)v82 + v79[7];
    uint64_t v87 = type metadata accessor for GeometryProxy();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v87 - 8) + 16))(v86, v85, v87);
    *uint64_t v82 = v84;
    uint64_t v88 = v140;
    long long v89 = v158;
    uint64_t v90 = v141;
    (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v158, v77, v141);
    *(void *)&v89[*(int *)(v73 + 36)] = v81;
    float32x4_t v91 = *(void (**)(char *, uint64_t))(v88 + 8);
    id v92 = v84;
    v91(v77, v90);
    outlined init with copy of RealityViewCameraContent((uint64_t)v83, v74, type metadata accessor for RealityViewCameraContent);
    RealityViewCameraContent.cameraControlDragGesture()(v159);
    outlined destroy of RealityViewCameraContent(v74, type metadata accessor for RealityViewCameraContent);
    if (v134) {
      static GestureMask.all.getter();
    }
    else {
      static GestureMask.subviews.getter();
    }
    uint64_t v93 = v153;
    uint64_t v94 = v152;
    uint64_t v95 = v151;
    unint64_t v96 = lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>();
    uint64_t v97 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
    uint64_t v98 = v159;
    uint64_t v99 = v170;
    v157 = (uint64_t (*)(uint64_t))v96;
    uint64_t v153 = v97;
    uint64_t v100 = (uint64_t)v158;
    View.gesture<A>(_:including:)();
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v98, v99);
    outlined destroy of URL?(v100, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>>);
    outlined init with copy of RealityViewCameraContent((uint64_t)v156, v74, type metadata accessor for RealityViewCameraContent);
    uint64_t v101 = v144;
    MagnifyGesture.init(minimumScaleDelta:)();
    outlined init with copy of RealityViewCameraContent(v74, v75, type metadata accessor for RealityViewCameraContent);
    unint64_t v102 = (*(unsigned __int8 *)(v94 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
    uint64_t v159 = v102 + v93;
    uint64_t v103 = swift_allocObject();
    outlined init with take of RealityViewCameraContent(v75, v103 + v102);
    lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type MagnifyGesture and conformance MagnifyGesture, MEMORY[0x263F18B30]);
    lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type MagnifyGesture.Value and conformance MagnifyGesture.Value, MEMORY[0x263F18B18]);
    float v104 = v147;
    uint64_t v105 = v74;
    uint64_t v106 = v146;
    Gesture<>.onChanged(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v145 + 8))(v101, v106);
    outlined init with copy of RealityViewCameraContent(v105, v75, type metadata accessor for RealityViewCameraContent);
    uint64_t v107 = swift_allocObject();
    outlined init with take of RealityViewCameraContent(v75, v107 + v102);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _ChangedGesture<MagnifyGesture> and conformance _ChangedGesture<A>, &demangling cache variable for type metadata for _ChangedGesture<MagnifyGesture>);
    uint64_t v108 = v149;
    Gesture.onEnded(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v148 + 8))(v104, v108);
    outlined destroy of RealityViewCameraContent(v105, type metadata accessor for RealityViewCameraContent);
    if (v134) {
      static GestureMask.all.getter();
    }
    else {
      static GestureMask.subviews.getter();
    }
    uint64_t v56 = v166;
    uint64_t v109 = v155;
    double v110 = v154;
    uint64_t v58 = v169;
    uint64_t v171 = v169;
    v172 = (char *)v170;
    v173 = v157;
    uint64_t v174 = v153;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v112 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<MagnifyGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
    uint64_t v113 = v163;
    uint64_t v53 = v164;
    uint64_t v114 = v165;
    View.gesture<A>(_:including:)();
    (*(void (**)(char *, uint64_t))(v150 + 8))(v113, v56);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v114, v53);
    uint64_t v115 = (uint64_t)v142;
    uint64_t v116 = v160;
    (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v142, v110, v160);
    uint64_t v171 = v53;
    v172 = (char *)v56;
    v173 = (uint64_t (*)(uint64_t))OpaqueTypeConformance2;
    uint64_t v174 = v112;
    uint64_t v57 = v170;
    swift_getOpaqueTypeConformance2();
    uint64_t v36 = v127;
    uint64_t v47 = v168;
    static ViewBuilder.buildEither<A, B>(first:)(v115, v116);
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v115, v116);
  }
  else
  {
    uint64_t v46 = v135;
    uint64_t v47 = v168;
    static ViewBuilder.buildExpression<A>(_:)((char *)v157 + *(int *)(v28 + 40), a3, v168);
    uint64_t v48 = (uint64_t)v136;
    static ViewBuilder.buildExpression<A>(_:)(v46, a3, v47);
    unint64_t v49 = lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>();
    uint64_t v50 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
    uint64_t v171 = v169;
    v172 = (char *)v170;
    v173 = (uint64_t (*)(uint64_t))v49;
    uint64_t v174 = v50;
    uint64_t v51 = swift_getOpaqueTypeConformance2();
    uint64_t v52 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<MagnifyGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
    uint64_t v53 = v164;
    uint64_t v54 = v166;
    uint64_t v171 = v164;
    v172 = (char *)v166;
    v173 = (uint64_t (*)(uint64_t))v51;
    uint64_t v174 = v52;
    swift_getOpaqueTypeConformance2();
    static ViewBuilder.buildEither<A, B>(second:)(v48, v160, v33);
    long long v55 = (void (*)(uint64_t, uint64_t))*((void *)v156 + 1);
    v55(v48, v33);
    v55((uint64_t)v46, v33);
    uint64_t v56 = v54;
    uint64_t v58 = v169;
    uint64_t v57 = v170;
  }
  uint64_t v118 = v161;
  uint64_t v117 = v162;
  unint64_t v119 = lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>();
  uint64_t v120 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
  uint64_t v171 = v58;
  v172 = (char *)v57;
  v173 = (uint64_t (*)(uint64_t))v119;
  uint64_t v174 = v120;
  uint64_t v121 = swift_getOpaqueTypeConformance2();
  uint64_t v122 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<MagnifyGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
  uint64_t v171 = v53;
  v172 = (char *)v56;
  v173 = (uint64_t (*)(uint64_t))v121;
  uint64_t v174 = v122;
  uint64_t v177 = swift_getOpaqueTypeConformance2();
  uint64_t v178 = v47;
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v36, v117, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v118 + 8))(v36, v117);
}

Swift::Void __swiftcall RealityViewCameraContent.makeSettings()()
{
  uint64_t v1 = type metadata accessor for RealityViewCameraComponent(0);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Entity.ComponentSet();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Entity.components.getter();
  uint64_t v8 = type metadata accessor for RealityViewCameraContent(0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v0 + *(int *)(v8 + 24), (uint64_t)v3, &demangling cache variable for type metadata for GeometryProxy?);
  lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type RealityViewCameraComponent and conformance RealityViewCameraComponent, (void (*)(uint64_t))type metadata accessor for RealityViewCameraComponent);
  Entity.ComponentSet.set<A>(_:)();
  outlined destroy of RealityViewCameraContent((uint64_t)v3, type metadata accessor for RealityViewCameraComponent);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v9 = *v0;
  id v10 = objc_msgSend(*v0, sel_gestureRecognizers);
  if (v10)
  {
    uint64_t v11 = v10;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setGestureRecognizers_, isa);
  }
  else
  {
    objc_msgSend(v9, sel_setGestureRecognizers_, 0);
  }
}

uint64_t closure #2 in closure #1 in _RealityViewImpl.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v48 = type metadata accessor for RealityViewCameraContent(0);
  MEMORY[0x270FA5388](v48);
  uint64_t v49 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CameraControls();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v45 = (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ARView.EDRHeadroomPolicy();
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v41 = (_DWORD *)((char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image.DynamicRange?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Image.DynamicRange();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v40 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v40 - v21;
  uint64_t v23 = type metadata accessor for _RealityViewImpl();
  specialized Environment.wrappedValue.getter((uint64_t)v12);
  int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  uint64_t v44 = a3;
  if (v24 != 1)
  {
    uint64_t v40 = v23;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v22, v12, v13);
    uint64_t v25 = (void **)(a3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content);
    swift_beginAccess();
    uint64_t v26 = *v25;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v20, v22, v13);
    id v27 = v26;
    static Image.DynamicRange.high.getter();
    lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type Image.DynamicRange and conformance Image.DynamicRange, MEMORY[0x263F1B4A0]);
    LOBYTE(v25) = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v14 + 8);
    v28(v17, v13);
    if (v25)
    {
      v28(v20, v13);
      dispatch thunk of ARView.extendedDynamicRangeOutput.setter();
      uint64_t v29 = *MEMORY[0x263F16958];
      uint64_t v31 = v41;
      uint64_t v30 = v42;
    }
    else
    {
      static Image.DynamicRange.constrainedHigh.getter();
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      v28(v17, v13);
      v28(v20, v13);
      if ((v32 & 1) == 0)
      {
        dispatch thunk of ARView.extendedDynamicRangeOutput.setter();
        goto LABEL_9;
      }
      dispatch thunk of ARView.extendedDynamicRangeOutput.setter();
      uint64_t v31 = v41;
      uint64_t v30 = v42;
      *uint64_t v41 = 0x40000000;
      uint64_t v29 = *MEMORY[0x263F16950];
    }
    (*(void (**)(_DWORD *, uint64_t, uint64_t))(v30 + 104))(v31, v29, v43);
    dispatch thunk of ARView.edrHeadroomPolicy.setter();
LABEL_9:

    v28(v22, v13);
    goto LABEL_10;
  }
  outlined destroy of URL?((uint64_t)v12, &demangling cache variable for type metadata for Image.DynamicRange?);
LABEL_10:
  uint64_t v33 = *(void (**)(uint64_t))(a2 + 16);
  uint64_t v34 = v44 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content;
  swift_beginAccess();
  v33(v34);
  swift_endAccess();
  uint64_t v35 = v45;
  specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<CameraControls>.Content, MEMORY[0x263F165E8], 0x6F436172656D6143, 0xEE00736C6F72746ELL, v45);
  swift_beginAccess();
  uint64_t v36 = *(int *)(v48 + 32);
  uint64_t v37 = type metadata accessor for RealityViewCamera(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 40))(v34 + v36 + *(int *)(v37 + 20), v35, v47);
  RealityViewCameraContent.camera.didset();
  swift_endAccess();
  uint64_t v38 = v49;
  outlined init with copy of RealityViewCameraContent(v34, v49, type metadata accessor for RealityViewCameraContent);
  RealityViewCameraContent.updateSettings()();
  return outlined destroy of RealityViewCameraContent(v38, type metadata accessor for RealityViewCameraContent);
}

uint64_t (*RealityViewCameraContent.camera.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  type metadata accessor for RealityViewCameraContent(0);
  return RealityViewCameraContent.camera.modify;
}

uint64_t RealityViewCameraContent.camera.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return RealityViewCameraContent.camera.didset();
  }
  return result;
}

uint64_t type metadata accessor for RealityViewCameraContent(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for RealityViewCameraContent);
}

Swift::Void __swiftcall RealityViewCameraContent.updateSettings()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RealityViewCameraComponent(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Entity.ComponentSet();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ARView.DebugOptions();
  MEMORY[0x270FA5388](v9 - 8);
  RealityViewCameraContent.updateDebugOptions()((uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  dispatch thunk of ARView.debugOptions.setter();
  dispatch thunk of Entity.components.getter();
  uint64_t v11 = (int *)type metadata accessor for RealityViewCameraContent(0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v0 + v11[6], (uint64_t)v4, &demangling cache variable for type metadata for GeometryProxy?);
  lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type RealityViewCameraComponent and conformance RealityViewCameraComponent, (void (*)(uint64_t))type metadata accessor for RealityViewCameraComponent);
  Entity.ComponentSet.set<A>(_:)();
  outlined destroy of RealityViewCameraContent((uint64_t)v4, type metadata accessor for RealityViewCameraComponent);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v12 = (void *)(v0 + v11[8]);
  if ((*((unsigned char *)v12 + *(int *)(type metadata accessor for RealityViewCamera(0) + 24)) & 1) == 0)
  {
    if (CameraControls.rawValue.getter() && *v12)
    {
      uint64_t v13 = *(void *)(v0 + v11[12]);
      swift_retain();
      uint64_t v14 = v13;
LABEL_8:
      Entity.update(from:overrideDistance:)(v14, 0);
      swift_release();
      return;
    }
    if (*(unsigned char *)(v0 + v11[13]) == 1)
    {
      dispatch thunk of ARView.scene.getter();
      uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
      swift_release();
      if (active)
      {
        uint64_t v14 = *(void *)(v1 + v11[12]);
        goto LABEL_8;
      }
    }
  }
}

uint64_t closure #3 in closure #1 in _RealityViewImpl.body.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  char v7 = a3 & 1;
  uint64_t v8 = type metadata accessor for RealityViewCameraContent(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content;
  swift_beginAccess();
  outlined init with copy of RealityViewCameraContent(v11, (uint64_t)v10, type metadata accessor for RealityViewCameraContent);
  RealityViewCameraContent.hoverEffect(_:)(a1, a2, v7);
  return outlined destroy of RealityViewCameraContent((uint64_t)v10, type metadata accessor for RealityViewCameraContent);
}

uint64_t RealityViewCameraContent.hoverEffect(_:)(uint64_t a1, uint64_t a2, char a3)
{
  v24[2] = a2;
  v24[1] = a1;
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CollisionCastHit();
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v26 = v7;
  MEMORY[0x270FA5388](v7);
  v24[0] = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CollisionGroup();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Type = type metadata accessor for CollisionCastQueryType();
  uint64_t v14 = *(void *)(Type - 8);
  MEMORY[0x270FA5388](Type);
  uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  uint64_t v17 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  MEMORY[0x24C5340F0](v17);
  uint64_t result = MEMORY[0x24C5340C0]();
  if ((a3 & 1) == 0)
  {
    (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x263F16270], Type);
    static CollisionGroup.all.getter();
    uint64_t v19 = 1;
    uint64_t v20 = ARView.hitTest(_:requireInputTarget:query:mask:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, Type);
    uint64_t v22 = v25;
    uint64_t v21 = v26;
    if (*(void *)(v20 + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(v6, v20 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)), v26);
      uint64_t v19 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v6, v19, 1, v21);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v6, 1, v21) == 1)
    {
      return outlined destroy of URL?((uint64_t)v6, &demangling cache variable for type metadata for CollisionCastHit?);
    }
    else
    {
      uint64_t v23 = v24[0];
      (*(void (**)(void, char *, uint64_t))(v22 + 32))(v24[0], v6, v21);
      RERemoteEffectsServiceHoverEffectSettingsCreate();
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v27 = 0u;
      RERemoteEffectsServiceHitTestDataSetSource();
      CollisionCastHit.position.getter();
      RERemoteEffectsServiceHitTestDataSetLocation();
      CollisionCastHit.entity.getter();
      Entity.coreEntity.getter();
      swift_release();
      RERemoteEffectsServiceHitTestDataSetTargetEntity();
      RERemoteEffectsServiceAddHitTestData();
      RERelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v23, v21);
    }
  }
  return result;
}

uint64_t RealityViewCameraContent.cameraControlDragGesture()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v24 = a1;
  uint64_t v3 = type metadata accessor for RealityViewCameraContent(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LocalCoordinateSpace();
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = type metadata accessor for DragGesture();
  uint64_t v21 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ChangedGesture<DragGesture>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v22 = v11;
  uint64_t v23 = v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpaceProtocol<>.local.getter();
  DragGesture.init<A>(minimumDistance:coordinateSpace:)();
  outlined init with copy of RealityViewCameraContent(v2, (uint64_t)v6, type metadata accessor for RealityViewCameraContent);
  unint64_t v15 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = swift_allocObject();
  outlined init with take of RealityViewCameraContent((uint64_t)v6, v16 + v15);
  lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type DragGesture and conformance DragGesture, MEMORY[0x263F185B8]);
  lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type DragGesture.Value and conformance DragGesture.Value, MEMORY[0x263F18588]);
  Gesture<>.onChanged(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v8);
  outlined init with copy of RealityViewCameraContent(v20[1], (uint64_t)v6, type metadata accessor for RealityViewCameraContent);
  uint64_t v17 = swift_allocObject();
  outlined init with take of RealityViewCameraContent((uint64_t)v6, v17 + v15);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _ChangedGesture<DragGesture> and conformance _ChangedGesture<A>, &demangling cache variable for type metadata for _ChangedGesture<DragGesture>);
  uint64_t v18 = v22;
  Gesture.onEnded(_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v14, v18);
}

uint64_t closure #2 in _RealityViewImpl.body.getter(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  v2[9] = a2;
  type metadata accessor for RealityViewCameraContent(0);
  v2[10] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[11] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[12] = v4;
  v2[13] = v3;
  return MEMORY[0x270FA2498](closure #2 in _RealityViewImpl.body.getter, v4, v3);
}

uint64_t closure #2 in _RealityViewImpl.body.getter()
{
  uint64_t v1 = v0[8];
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_makeTaskBegun) == 1)
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v5 = (void *)v0[9];
    uint64_t v4 = v0[10];
    *(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_makeTaskBegun) = 1;
    uint64_t v6 = OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content;
    v0[14] = OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content;
    uint64_t v7 = v1 + v6;
    swift_beginAccess();
    outlined init with copy of RealityViewCameraContent(v7, v4, type metadata accessor for RealityViewCameraContent);
    uint64_t v10 = (uint64_t (*)(uint64_t))(*v5 + *(int *)*v5);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[15] = v8;
    *uint64_t v8 = v0;
    v8[1] = closure #2 in _RealityViewImpl.body.getter;
    uint64_t v9 = v0[10];
    return v10(v9);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 96);
  return MEMORY[0x270FA2498](closure #2 in _RealityViewImpl.body.getter, v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  swift_release();
  swift_beginAccess();
  outlined assign with copy of RealityViewCamera(v2, v3 + v1, type metadata accessor for RealityViewCameraContent);
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  *(unsigned char *)(v0 + 128) = 1;
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of RealityViewCameraContent(v2, type metadata accessor for RealityViewCameraContent);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t closure #1 in RealityViewCameraContent.ContentStorage.deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[7] = v6;
  v4[8] = v5;
  return MEMORY[0x270FA2498](closure #1 in RealityViewCameraContent.ContentStorage.deinit, v6, v5);
}

uint64_t closure #1 in RealityViewCameraContent.ContentStorage.deinit()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[9] = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[10] = v2;
    *uint64_t v2 = v0;
    v2[1] = closure #1 in RealityViewCameraContent.ContentStorage.deinit;
    return MEMORY[0x270EFCD98]();
  }
  else
  {
    swift_release();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 56);
  return MEMORY[0x270FA2498](closure #1 in RealityViewCameraContent.ContentStorage.deinit, v3, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RealityViewCameraContent.ContentStorage.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v7 = static MainActor.shared.getter();
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = MEMORY[0x263F8F500];
  v8[2] = v7;
  v8[3] = v9;
  v8[4] = v6;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in RealityViewCameraContent.ContentStorage.deinit, (uint64_t)v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of URL?(v1 + OBJC_IVAR____TtCV19_RealityKit_SwiftUI24RealityViewCameraContent14ContentStorage_unavailableCapabilities, &demangling cache variable for type metadata for SpatialTrackingSession.UnavailableCapabilities?);
  return swift_deallocClassInstance();
}

uint64_t RealityViewCameraContent.entities.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
  return swift_retain();
}

uint64_t key path setter for RealityViewCameraContent.entities : RealityViewCameraContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for RealityViewCameraContent(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RealityViewCameraContent(a2, (uint64_t)v5, type metadata accessor for RealityViewCameraContent);
  type metadata accessor for Entity();
  swift_retain();
  LOBYTE(a2) = static Entity.== infix(_:_:)();
  uint64_t result = swift_release();
  if (a2) {
    return outlined destroy of RealityViewCameraContent((uint64_t)v5, type metadata accessor for RealityViewCameraContent);
  }
  __break(1u);
  return result;
}

uint64_t RealityViewCameraContent.entities.setter()
{
  uint64_t v1 = type metadata accessor for RealityViewCameraContent(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RealityViewCameraContent(v0, (uint64_t)v3, type metadata accessor for RealityViewCameraContent);
  type metadata accessor for Entity();
  char v4 = static Entity.== infix(_:_:)();
  uint64_t result = swift_release();
  if (v4) {
    return outlined destroy of RealityViewCameraContent((uint64_t)v3, type metadata accessor for RealityViewCameraContent);
  }
  __break(1u);
  return result;
}

void (*RealityViewCameraContent.entities.modify(void *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = type metadata accessor for RealityViewCameraContent(0);
  a1[2] = malloc(*(void *)(*(void *)(v3 - 8) + 64));
  *a1 = *(void *)(v1 + 8);
  swift_retain();
  return RealityViewCameraContent.entities.modify;
}

void RealityViewCameraContent.entities.modify(uint64_t a1, char a2)
{
  outlined init with copy of RealityViewCameraContent(*(void *)(a1 + 8), *(void *)(a1 + 16), type metadata accessor for RealityViewCameraContent);
  type metadata accessor for Entity();
  if ((a2 & 1) == 0)
  {
    char v6 = static Entity.== infix(_:_:)();
    swift_release();
    if (v6)
    {
      uint64_t v5 = *(void **)(a1 + 16);
      outlined destroy of RealityViewCameraContent((uint64_t)v5, type metadata accessor for RealityViewCameraContent);
      goto LABEL_6;
    }
LABEL_10:
    __break(1u);
    return;
  }
  swift_retain();
  char v4 = static Entity.== infix(_:_:)();
  swift_release();
  if ((v4 & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = *(void **)(a1 + 16);
  outlined destroy of RealityViewCameraContent((uint64_t)v5, type metadata accessor for RealityViewCameraContent);
  swift_release();
LABEL_6:

  free(v5);
}

uint64_t static RealityViewCamera.virtual.getter@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = type metadata accessor for RealityViewCamera(0);
  uint64_t result = static CameraControls.none.getter();
  *((unsigned char *)a1 + *(int *)(v2 + 24)) = 0;
  return result;
}

uint64_t RealityViewCameraContent.camera.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RealityViewCameraContent(0);
  return outlined init with copy of RealityViewCameraContent(v1 + *(int *)(v3 + 32), a1, type metadata accessor for RealityViewCamera);
}

uint64_t key path setter for RealityViewCameraContent.camera : RealityViewCameraContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RealityViewCamera(0);
  MEMORY[0x270FA5388](v4 - 8);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RealityViewCameraContent(a1, (uint64_t)v6, type metadata accessor for RealityViewCamera);
  uint64_t v7 = type metadata accessor for RealityViewCameraContent(0);
  outlined assign with copy of RealityViewCamera((uint64_t)v6, a2 + *(int *)(v7 + 32), type metadata accessor for RealityViewCamera);
  RealityViewCameraContent.camera.didset();
  return outlined destroy of RealityViewCameraContent((uint64_t)v6, type metadata accessor for RealityViewCamera);
}

uint64_t RealityViewCameraContent.camera.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for RealityViewCameraContent(0);
  outlined assign with copy of RealityViewCamera(a1, v1 + *(int *)(v3 + 32), type metadata accessor for RealityViewCamera);
  RealityViewCameraContent.camera.didset();
  return outlined destroy of RealityViewCameraContent(a1, type metadata accessor for RealityViewCamera);
}

uint64_t RealityViewCameraContent.camera.didset()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v43 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ARView.Environment.Background();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = type metadata accessor for ARView.Environment();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v46 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v44 = (char *)&v42 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v42 - v10;
  uint64_t v12 = type metadata accessor for ARView.CameraMode();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of ARView.scene.getter();
  uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
  swift_release();
  uint64_t v47 = (int *)type metadata accessor for RealityViewCameraContent(0);
  uint64_t v48 = v0;
  uint64_t v17 = (uint64_t *)(v0 + v47[8]);
  swift_release();
  *uint64_t v17 = active;
  uint64_t v18 = type metadata accessor for RealityViewCamera(0);
  switch(CameraControls.rawValue.getter())
  {
    case 1:
      uint64_t v19 = *(void *)(v48 + v47[12]);
      swift_beginAccess();
      *(unsigned char *)(v19 + 16) = 0;
      break;
    case 2:
      uint64_t v20 = *(void *)(v48 + v47[12]);
      swift_beginAccess();
      char v21 = 5;
      goto LABEL_6;
    case 3:
      uint64_t v20 = *(void *)(v48 + v47[12]);
      swift_beginAccess();
      char v21 = 2;
      goto LABEL_6;
    case 4:
      uint64_t v20 = *(void *)(v48 + v47[12]);
      swift_beginAccess();
      char v21 = 6;
LABEL_6:
      *(unsigned char *)(v20 + 16) = v21;
      break;
    default:
      break;
  }
  uint64_t v22 = *(void (**)(char *, void, uint64_t))(v13 + 104);
  if (*((unsigned char *)v17 + *(int *)(v18 + 24)) == 1)
  {
    v22(v15, *MEMORY[0x263F168B0], v12);
    ARView.cameraMode.setter();
    dispatch thunk of ARView.environment.getter();
    static ARView.Environment.Background.cameraFeed(exposureCompensation:)();
    ARView.Environment.background.setter();
    uint64_t v23 = (void (*)(unsigned char *, void))ARView.Environment.lighting.modify();
    ARView.Environment.ImageBasedLight.resource.setter();
    v23(v49, 0);
    uint64_t v24 = v45;
    uint64_t v25 = v46;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v44, v11, v46);
    dispatch thunk of ARView.environment.setter();
    type metadata accessor for SpatialTrackingManager();
    if (static SpatialTrackingManager.shared.getter())
    {
      uint64_t v26 = type metadata accessor for TaskPriority();
      uint64_t v27 = (uint64_t)v43;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v43, 1, 1, v26);
      uint64_t v28 = swift_allocObject();
      swift_weakInit();
      type metadata accessor for MainActor();
      swift_retain();
      uint64_t v29 = static MainActor.shared.getter();
      long long v30 = (void *)swift_allocObject();
      uint64_t v31 = MEMORY[0x263F8F500];
      v30[2] = v29;
      v30[3] = v31;
      v30[4] = v28;
      swift_release();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v27, (uint64_t)&async function pointer to partial apply for closure #1 in RealityViewCameraContent.camera.didset, (uint64_t)v30);
      uint64_t v7 = v11;
LABEL_16:
      swift_release();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v7, v25);
    }
    uint64_t v7 = v11;
  }
  else
  {
    v22(v15, *MEMORY[0x263F168B8], v12);
    ARView.cameraMode.setter();
    dispatch thunk of ARView.environment.getter();
    if (*(void *)(v48 + v47[10]))
    {
      swift_retain();
      static ARView.Environment.Background.skybox(_:)();
      ARView.Environment.background.setter();
      swift_retain();
      uint64_t v32 = (void (*)(unsigned char *, void))ARView.Environment.lighting.modify();
      ARView.Environment.ImageBasedLight.resource.setter();
      v32(v49, 0);
      swift_release();
    }
    else
    {
      id v33 = objc_msgSend(self, sel_clearColor);
      static ARView.Environment.Background.color(_:)();

      ARView.Environment.background.setter();
      uint64_t v34 = (void (*)(unsigned char *, void))ARView.Environment.lighting.modify();
      ARView.Environment.ImageBasedLight.resource.setter();
      v34(v49, 0);
    }
    uint64_t v24 = v45;
    uint64_t v25 = v46;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v44, v7, v46);
    dispatch thunk of ARView.environment.setter();
    type metadata accessor for SpatialTrackingManager();
    if (static SpatialTrackingManager.shared.getter())
    {
      uint64_t v35 = type metadata accessor for TaskPriority();
      uint64_t v36 = (uint64_t)v43;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v43, 1, 1, v35);
      uint64_t v37 = swift_allocObject();
      swift_weakInit();
      type metadata accessor for MainActor();
      swift_retain();
      uint64_t v38 = static MainActor.shared.getter();
      uint64_t v39 = (void *)swift_allocObject();
      uint64_t v40 = MEMORY[0x263F8F500];
      v39[2] = v38;
      v39[3] = v40;
      v39[4] = v37;
      swift_release();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v36, (uint64_t)&async function pointer to partial apply for closure #2 in RealityViewCameraContent.camera.didset, (uint64_t)v39);
      goto LABEL_16;
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v7, v25);
}

uint64_t type metadata accessor for RealityViewCamera(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for RealityViewCamera);
}

uint64_t outlined init with copy of RealityViewCameraContent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of RealityViewCameraContent(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t closure #1 in RealityViewCameraContent.camera.didset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.UnavailableCapabilities?);
  v4[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  v4[10] = v5;
  v4[11] = *(void *)(v5 - 8);
  v4[12] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SpatialTrackingSession.Configuration();
  v4[13] = v6;
  v4[14] = *(void *)(v6 - 8);
  v4[15] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[16] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[17] = v8;
  v4[18] = v7;
  return MEMORY[0x270FA2498](closure #1 in RealityViewCameraContent.camera.didset, v8, v7);
}

uint64_t closure #1 in RealityViewCameraContent.camera.didset()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[19] = Strong;
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v4 = v0[11];
    uint64_t v3 = v0[12];
    uint64_t v17 = v0[10];
    type metadata accessor for SpatialTrackingSession();
    swift_allocObject();
    *(void *)(v2 + 24) = SpatialTrackingSession.init()();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
    type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_2466B6940;
    static SpatialTrackingSession.Configuration.AnchorCapability.camera.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
    specialized Set.init(_nonEmptyArrayLiteral:)(v5);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
    type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_2466B5DF0;
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    specialized Set.init(_nonEmptyArrayLiteral:)(v6);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, *MEMORY[0x263F16818], v17);
    SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
    uint64_t v7 = *(void *)(v2 + 24);
    v0[20] = v7;
    if (v7)
    {
      swift_retain();
      uint64_t v8 = (void *)swift_task_alloc();
      v0[21] = v8;
      *uint64_t v8 = v0;
      v8[1] = closure #1 in RealityViewCameraContent.camera.didset;
      uint64_t v9 = v0[15];
      uint64_t v10 = v0[9];
      return MEMORY[0x270EFCDA0](v10, v9);
    }
    uint64_t v11 = v0[9];
    (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
    swift_release();
    uint64_t v12 = type metadata accessor for SpatialTrackingSession.UnavailableCapabilities();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    uint64_t v13 = v0[9];
    uint64_t v14 = v0[19]
        + OBJC_IVAR____TtCV19_RealityKit_SwiftUI24RealityViewCameraContent14ContentStorage_unavailableCapabilities;
    swift_beginAccess();
    outlined assign with take of Cancellable?(v13, v14, &demangling cache variable for type metadata for SpatialTrackingSession.UnavailableCapabilities?);
    swift_endAccess();
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 144);
  uint64_t v3 = *(void *)(v1 + 136);
  return MEMORY[0x270FA2498](closure #1 in RealityViewCameraContent.camera.didset, v3, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[15];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[19] + OBJC_IVAR____TtCV19_RealityKit_SwiftUI24RealityViewCameraContent14ContentStorage_unavailableCapabilities;
  swift_beginAccess();
  outlined assign with take of Cancellable?(v4, v5, &demangling cache variable for type metadata for SpatialTrackingSession.UnavailableCapabilities?);
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t closure #2 in RealityViewCameraContent.camera.didset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[7] = v6;
  v4[8] = v5;
  return MEMORY[0x270FA2498](closure #2 in RealityViewCameraContent.camera.didset, v6, v5);
}

uint64_t closure #2 in RealityViewCameraContent.camera.didset()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[9] = Strong;
  if (Strong)
  {
    uint64_t v2 = *(void *)(Strong + 24);
    v0[10] = v2;
    if (v2)
    {
      swift_retain();
      uint64_t v3 = (void *)swift_task_alloc();
      v0[11] = v3;
      *uint64_t v3 = v0;
      v3[1] = closure #2 in RealityViewCameraContent.camera.didset;
      return MEMORY[0x270EFCDA8]();
    }
    swift_release();
  }
  swift_release();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 56);
  return MEMORY[0x270FA2498](closure #2 in RealityViewCameraContent.camera.didset, v3, v2);
}

uint64_t RealityViewCameraContent.cameraTarget.getter()
{
  type metadata accessor for RealityViewCameraContent(0);

  return swift_retain();
}

uint64_t key path setter for RealityViewCameraContent.cameraTarget : RealityViewCameraContent(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(int *)(type metadata accessor for RealityViewCameraContent(0) + 36);
  swift_retain_n();
  swift_release();
  *(void *)(a2 + v4) = v3;
  RealityViewCameraContent.cameraTarget.didset();

  return swift_release();
}

uint64_t RealityViewCameraContent.cameraTarget.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for RealityViewCameraContent(0) + 36);
  swift_retain();
  swift_release();
  *(void *)(v1 + v3) = a1;
  RealityViewCameraContent.cameraTarget.didset();

  return swift_release();
}

uint64_t RealityViewCameraContent.cameraTarget.didset()
{
  uint64_t v1 = type metadata accessor for RealityViewCameraContent(0);
  uint64_t v2 = *(void *)(v0 + *(int *)(v1 + 48));
  uint64_t v3 = *(void *)(v0 + *(int *)(v1 + 36));
  *(void *)(v2 + 416) = v3;
  swift_retain_n();
  uint64_t result = swift_release();
  if (v3)
  {
    type metadata accessor for Entity();
    swift_retain();
    HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)();
    __n128 v9 = v6;
    __n128 v10 = v5;
    uint64_t v7 = BoundingBox.center.getter();
    *(_OWORD *)(v2 + 96) = v8;
    *(float *)(v2 + 404) = MEMORY[0x24C530C60](v7, v10, v9);
    *(_OWORD *)(v2 + 112) = xmmword_2466B7750;
    if (*(void *)(v2 + 424))
    {
      swift_retain();
      Entity.update(from:overrideDistance:)(v2, 1);
      swift_release();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t (*RealityViewCameraContent.cameraTarget.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  type metadata accessor for RealityViewCameraContent(0);
  return RealityViewCameraContent.cameraTarget.modify;
}

uint64_t RealityViewCameraContent.cameraTarget.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return RealityViewCameraContent.cameraTarget.didset();
  }
  return result;
}

void static RealityViewEnvironment.default.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t RealityViewCameraContent.environment.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + *(int *)(type metadata accessor for RealityViewCameraContent(0) + 40));

  return swift_retain();
}

uint64_t key path setter for RealityViewCameraContent.environment : RealityViewCameraContent(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(int *)(type metadata accessor for RealityViewCameraContent(0) + 40);
  swift_retain();
  swift_release();
  *(void *)(a2 + v4) = v3;
  return RealityViewCameraContent.environment.didset();
}

uint64_t RealityViewCameraContent.environment.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(int *)(type metadata accessor for RealityViewCameraContent(0) + 40);
  swift_release();
  *(void *)(v1 + v3) = v2;

  return RealityViewCameraContent.environment.didset();
}

uint64_t RealityViewCameraContent.environment.didset()
{
  uint64_t v1 = type metadata accessor for ARView.Environment.Background();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = type metadata accessor for ARView.Environment();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  __n128 v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v4);
  long long v8 = &v13[-v7];
  dispatch thunk of ARView.environment.getter();
  if (*(void *)(v0 + *(int *)(type metadata accessor for RealityViewCameraContent(0) + 40)))
  {
    swift_retain();
    static ARView.Environment.Background.skybox(_:)();
    ARView.Environment.background.setter();
    swift_retain();
    __n128 v9 = (void (*)(unsigned char *, void))ARView.Environment.lighting.modify();
    ARView.Environment.ImageBasedLight.resource.setter();
    v9(v13, 0);
    swift_release();
  }
  else
  {
    id v10 = objc_msgSend(self, sel_clearColor);
    static ARView.Environment.Background.color(_:)();

    ARView.Environment.background.setter();
    uint64_t v11 = (void (*)(unsigned char *, void))ARView.Environment.lighting.modify();
    ARView.Environment.ImageBasedLight.resource.setter();
    v11(v13, 0);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 16))(v6, v8, v2);
  dispatch thunk of ARView.environment.setter();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t (*RealityViewCameraContent.environment.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  type metadata accessor for RealityViewCameraContent(0);
  return RealityViewCameraContent.environment.modify;
}

uint64_t RealityViewCameraContent.environment.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return RealityViewCameraContent.environment.didset();
  }
  return result;
}

uint64_t RealityViewCameraContent.audioListener.getter()
{
  return dispatch thunk of ARView.audioListener.getter();
}

uint64_t RealityViewCameraContent.audioListener.setter()
{
  return dispatch thunk of ARView.audioListener.setter();
}

uint64_t (*RealityViewCameraContent.audioListener.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = dispatch thunk of ARView.audioListener.getter();
  return RealityViewCameraContent.audioListener.modify;
}

uint64_t RealityViewCameraContent.audioListener.modify(uint64_t *a1, char a2)
{
  return RealityViewCameraContent.audioListener.modify(a1, a2, MEMORY[0x263F16930]);
}

uint64_t RealityViewCameraContent.renderingEffects.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RealityViewCameraContent(0);
  return outlined init with copy of RealityViewCameraContent(v1 + *(int *)(v3 + 44), a1, type metadata accessor for RealityViewRenderingEffects);
}

uint64_t type metadata accessor for RealityViewRenderingEffects(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for RealityViewRenderingEffects);
}

uint64_t key path setter for RealityViewCameraContent.renderingEffects : RealityViewCameraContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RealityViewRenderingEffects(0);
  MEMORY[0x270FA5388](v4 - 8);
  __n128 v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RealityViewCameraContent(a1, (uint64_t)v6, type metadata accessor for RealityViewRenderingEffects);
  uint64_t v7 = type metadata accessor for RealityViewCameraContent(0);
  outlined assign with copy of RealityViewCamera((uint64_t)v6, a2 + *(int *)(v7 + 44), type metadata accessor for RealityViewRenderingEffects);
  RealityViewCameraContent.renderingEffects.didset();
  return outlined destroy of RealityViewCameraContent((uint64_t)v6, type metadata accessor for RealityViewRenderingEffects);
}

uint64_t RealityViewCameraContent.renderingEffects.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for RealityViewCameraContent(0);
  outlined assign with copy of RealityViewCamera(a1, v1 + *(int *)(v3 + 44), type metadata accessor for RealityViewRenderingEffects);
  RealityViewCameraContent.renderingEffects.didset();
  return outlined destroy of RealityViewCameraContent(a1, type metadata accessor for RealityViewRenderingEffects);
}

uint64_t outlined assign with copy of RealityViewCamera(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t RealityViewCameraContent.renderingEffects.didset()
{
  uint64_t v1 = type metadata accessor for AntialiasingMode();
  uint64_t v135 = *(void *)(v1 - 8);
  uint64_t v136 = v1;
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  uint64_t v134 = (char *)&v115 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v133 = (char *)&v115 - v4;
  uint64_t v5 = type metadata accessor for ARView.RenderOptions();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v127 = (char *)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v129 = (char *)&v115 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v126 = (char *)&v115 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v128 = (char *)&v115 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v125 = (char *)&v115 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v132 = (char *)&v115 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v130 = (char *)&v115 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v131 = (char *)&v115 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v122 = (char *)&v115 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v124 = (char *)&v115 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v121 = (char *)&v115 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v123 = (char *)&v115 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  id v33 = (char *)&v115 - v32;
  uint64_t v34 = MEMORY[0x270FA5388](v31);
  uint64_t v36 = (char *)&v115 - v35;
  uint64_t v37 = MEMORY[0x270FA5388](v34);
  uint64_t v137 = (char *)&v115 - v38;
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v138 = (char *)&v115 - v40;
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  uint64_t v43 = (char *)&v115 - v42;
  MEMORY[0x270FA5388](v41);
  uint64_t v45 = (char *)&v115 - v44;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ARView.RenderOptions?);
  uint64_t v47 = MEMORY[0x270FA5388](v46 - 8);
  uint64_t v120 = (char *)&v115 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = MEMORY[0x270FA5388](v47);
  unint64_t v119 = (char *)&v115 - v50;
  uint64_t v51 = MEMORY[0x270FA5388](v49);
  uint64_t v118 = (char *)&v115 - v52;
  uint64_t v53 = MEMORY[0x270FA5388](v51);
  uint64_t v117 = (char *)&v115 - v54;
  uint64_t v55 = MEMORY[0x270FA5388](v53);
  uint64_t v116 = (char *)&v115 - v56;
  uint64_t v57 = MEMORY[0x270FA5388](v55);
  uint64_t v115 = (char *)&v115 - v58;
  uint64_t v59 = MEMORY[0x270FA5388](v57);
  int v61 = (char *)&v115 - v60;
  MEMORY[0x270FA5388](v59);
  uint64_t v63 = (char *)&v115 - v62;
  v139 = &v0[*(int *)(type metadata accessor for RealityViewCameraContent(0) + 44)];
  if (*(void *)v139 == 2)
  {
    uint64_t v66 = v0;
    uint64_t v67 = (uint64_t)v137;
    static ARView.RenderOptions.disableMotionBlur.getter();
    uint64_t v68 = (void (*)(unsigned char *, void))ARView.renderOptions.modify();
    uint64_t v69 = v138;
    specialized OptionSet<>.insert(_:)(v138, v67);
    uint64_t v70 = *(char **)(v6 + 8);
    ((void (*)(uint64_t, uint64_t))v70)(v67, v5);
    ((void (*)(char *, uint64_t))v70)(v69, v5);
    v68(v140, 0);
    uint64_t v71 = v139;
  }
  else if (*(void *)v139 == 1)
  {
    static ARView.RenderOptions.disableMotionBlur.getter();
    unint64_t v64 = (void (*)(unsigned char *, void))ARView.renderOptions.modify();
    (*(void (**)(char *))(v6 + 16))(v138);
    lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, MEMORY[0x263F16918]);
    dispatch thunk of SetAlgebra.intersection(_:)();
    if (dispatch thunk of SetAlgebra.isEmpty.getter())
    {
      uint64_t v65 = *(char **)(v6 + 8);
      ((void (*)(char *, uint64_t))v65)(v43, v5);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v63, 1, 1, v5);
    }
    else
    {
      dispatch thunk of SetAlgebra.subtract(_:)();
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v63, v43, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v63, 0, 1, v5);
      uint64_t v65 = *(char **)(v6 + 8);
    }
    ((void (*)(char *, uint64_t))v65)(v45, v5);
    outlined destroy of URL?((uint64_t)v63, &demangling cache variable for type metadata for ARView.RenderOptions?);
    v64(v140, 0);
    uint64_t v69 = v138;
    uint64_t v71 = v139;
    uint64_t v70 = v65;
    uint64_t v66 = v0;
  }
  else
  {
    static ARView.RenderOptions.disableMotionBlur.getter();
    uint64_t v72 = (void (*)(unsigned char *, void))ARView.renderOptions.modify();
    (*(void (**)(char *))(v6 + 16))(v138);
    lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, MEMORY[0x263F16918]);
    dispatch thunk of SetAlgebra.intersection(_:)();
    if (dispatch thunk of SetAlgebra.isEmpty.getter())
    {
      uint64_t v70 = *(char **)(v6 + 8);
      ((void (*)(char *, uint64_t))v70)(v33, v5);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v61, 1, 1, v5);
    }
    else
    {
      dispatch thunk of SetAlgebra.subtract(_:)();
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v61, v33, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v61, 0, 1, v5);
      uint64_t v70 = *(char **)(v6 + 8);
    }
    uint64_t v71 = v139;
    ((void (*)(char *, uint64_t))v70)(v36, v5);
    outlined destroy of URL?((uint64_t)v61, &demangling cache variable for type metadata for ARView.RenderOptions?);
    v72(v140, 0);
    uint64_t v66 = v0;
    uint64_t v69 = v138;
  }
  uint64_t v73 = *((void *)v71 + 1);
  if (v73 == 2)
  {
    uint64_t v79 = (uint64_t)v137;
    static ARView.RenderOptions.disableDepthOfField.getter();
    unint64_t v80 = (void (*)(unsigned char *, void))ARView.renderOptions.modify();
    specialized OptionSet<>.insert(_:)(v69, v79);
    ((void (*)(uint64_t, uint64_t))v70)(v79, v5);
    ((void (*)(char *, uint64_t))v70)(v69, v5);
    v80(v140, 0);
    uint64_t v77 = v139;
  }
  else if (v73 == 1)
  {
    uint64_t v138 = v70;
    uint64_t v74 = v123;
    static ARView.RenderOptions.disableDepthOfField.getter();
    uint64_t v124 = (char *)ARView.renderOptions.modify();
    (*(void (**)(char *))(v6 + 16))(v69);
    lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, MEMORY[0x263F16918]);
    uint64_t v75 = v121;
    dispatch thunk of SetAlgebra.intersection(_:)();
    if (dispatch thunk of SetAlgebra.isEmpty.getter())
    {
      uint64_t v70 = v138;
      ((void (*)(char *, uint64_t))v138)(v75, v5);
      uint64_t v76 = 1;
      uint64_t v77 = v139;
      uint64_t v78 = (uint64_t)v115;
    }
    else
    {
      dispatch thunk of SetAlgebra.subtract(_:)();
      uint64_t v78 = (uint64_t)v115;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v115, v75, v5);
      uint64_t v76 = 0;
      uint64_t v70 = v138;
      uint64_t v77 = v139;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v78, v76, 1, v5);
    ((void (*)(char *, uint64_t))v70)(v74, v5);
    outlined destroy of URL?(v78, &demangling cache variable for type metadata for ARView.RenderOptions?);
    ((void (*)(unsigned char *, void))v124)(v140, 0);
  }
  else
  {
    uint64_t v81 = v124;
    static ARView.RenderOptions.disableDepthOfField.getter();
    uint64_t v138 = (char *)ARView.renderOptions.modify();
    (*(void (**)(char *))(v6 + 16))(v69);
    lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, MEMORY[0x263F16918]);
    uint64_t v82 = v122;
    dispatch thunk of SetAlgebra.intersection(_:)();
    if (dispatch thunk of SetAlgebra.isEmpty.getter())
    {
      ((void (*)(char *, uint64_t))v70)(v82, v5);
      uint64_t v83 = 1;
      uint64_t v77 = v139;
      uint64_t v84 = (uint64_t)v116;
    }
    else
    {
      dispatch thunk of SetAlgebra.subtract(_:)();
      uint64_t v84 = (uint64_t)v116;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v116, v82, v5);
      uint64_t v83 = 0;
      uint64_t v77 = v139;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v84, v83, 1, v5);
    ((void (*)(char *, uint64_t))v70)(v81, v5);
    outlined destroy of URL?(v84, &demangling cache variable for type metadata for ARView.RenderOptions?);
    ((void (*)(unsigned char *, void))v138)(v140, 0);
  }
  uint64_t v85 = *((void *)v77 + 2);
  uint64_t v86 = v132;
  uint64_t v87 = v130;
  if (v85 == 2)
  {
    uint64_t v91 = (uint64_t)v137;
    static ARView.RenderOptions.disableCameraGrain.getter();
    id v92 = (void (*)(unsigned char *, void))ARView.renderOptions.modify();
    specialized OptionSet<>.insert(_:)(v69, v91);
    ((void (*)(uint64_t, uint64_t))v70)(v91, v5);
    ((void (*)(char *, uint64_t))v70)(v69, v5);
    v92(v140, 0);
    long long v89 = v139;
    goto LABEL_34;
  }
  if (v85 != 1)
  {
    static ARView.RenderOptions.disableCameraGrain.getter();
    uint64_t v138 = (char *)ARView.renderOptions.modify();
    (*(void (**)(char *))(v6 + 16))(v69);
    lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, MEMORY[0x263F16918]);
    uint64_t v87 = v125;
    dispatch thunk of SetAlgebra.intersection(_:)();
    if (dispatch thunk of SetAlgebra.isEmpty.getter())
    {
      ((void (*)(char *, uint64_t))v70)(v87, v5);
      uint64_t v88 = 1;
      long long v89 = v139;
      uint64_t v90 = (uint64_t)v118;
      goto LABEL_33;
    }
    dispatch thunk of SetAlgebra.subtract(_:)();
    uint64_t v93 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
    uint64_t v94 = &v142;
LABEL_32:
    uint64_t v90 = *(v94 - 32);
    v93(v90, v87, v5);
    uint64_t v88 = 0;
    long long v89 = v139;
    goto LABEL_33;
  }
  uint64_t v86 = v131;
  static ARView.RenderOptions.disableCameraGrain.getter();
  uint64_t v138 = (char *)ARView.renderOptions.modify();
  (*(void (**)(char *))(v6 + 16))(v69);
  lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, MEMORY[0x263F16918]);
  dispatch thunk of SetAlgebra.intersection(_:)();
  if ((dispatch thunk of SetAlgebra.isEmpty.getter() & 1) == 0)
  {
    dispatch thunk of SetAlgebra.subtract(_:)();
    uint64_t v93 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
    uint64_t v94 = &v141;
    goto LABEL_32;
  }
  ((void (*)(char *, uint64_t))v70)(v87, v5);
  uint64_t v88 = 1;
  long long v89 = v139;
  uint64_t v90 = (uint64_t)v117;
LABEL_33:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v90, v88, 1, v5);
  ((void (*)(char *, uint64_t))v70)(v86, v5);
  outlined destroy of URL?(v90, &demangling cache variable for type metadata for ARView.RenderOptions?);
  ((void (*)(unsigned char *, void))v138)(v140, 0);
LABEL_34:
  uint64_t v95 = type metadata accessor for RealityViewRenderingEffects(0);
  uint64_t v96 = *(void *)((char *)v89 + *(int *)(v95 + 32));
  if (v96 == 2)
  {
    uint64_t v138 = v66;
    uint64_t v99 = v128;
    static ARView.RenderOptions.disableHDR.getter();
    uint64_t v137 = (char *)ARView.renderOptions.modify();
    (*(void (**)(char *))(v6 + 16))(v69);
    lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, MEMORY[0x263F16918]);
    uint64_t v100 = v126;
    dispatch thunk of SetAlgebra.intersection(_:)();
    if (dispatch thunk of SetAlgebra.isEmpty.getter())
    {
      ((void (*)(char *, uint64_t))v70)(v100, v5);
      uint64_t v101 = 1;
      uint64_t v102 = (uint64_t)v119;
    }
    else
    {
      dispatch thunk of SetAlgebra.subtract(_:)();
      uint64_t v102 = (uint64_t)v119;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v119, v100, v5);
      uint64_t v101 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v102, v101, 1, v5);
    ((void (*)(char *, uint64_t))v70)(v99, v5);
    outlined destroy of URL?(v102, &demangling cache variable for type metadata for ARView.RenderOptions?);
    ((void (*)(unsigned char *, void))v137)(v140, 0);
  }
  else if (v96 == 1)
  {
    uint64_t v97 = (uint64_t)v137;
    static ARView.RenderOptions.disableHDR.getter();
    uint64_t v98 = (void (*)(unsigned char *, void))ARView.renderOptions.modify();
    specialized OptionSet<>.insert(_:)(v69, v97);
    ((void (*)(uint64_t, uint64_t))v70)(v97, v5);
    ((void (*)(char *, uint64_t))v70)(v69, v5);
    v98(v140, 0);
  }
  else
  {
    uint64_t v138 = v66;
    uint64_t v103 = v129;
    static ARView.RenderOptions.disableHDR.getter();
    float v104 = (void (*)(unsigned char *, void))ARView.renderOptions.modify();
    (*(void (**)(char *))(v6 + 16))(v69);
    lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, MEMORY[0x263F16918]);
    uint64_t v105 = v127;
    dispatch thunk of SetAlgebra.intersection(_:)();
    if (dispatch thunk of SetAlgebra.isEmpty.getter())
    {
      ((void (*)(char *, uint64_t))v70)(v105, v5);
      uint64_t v106 = 1;
      uint64_t v107 = (uint64_t)v120;
    }
    else
    {
      dispatch thunk of SetAlgebra.subtract(_:)();
      uint64_t v107 = (uint64_t)v120;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v120, v105, v5);
      uint64_t v106 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v107, v106, 1, v5);
    ((void (*)(char *, uint64_t))v70)(v103, v5);
    outlined destroy of URL?(v107, &demangling cache variable for type metadata for ARView.RenderOptions?);
    v104(v140, 0);
  }
  uint64_t v108 = &v139[*(int *)(v95 + 28)];
  uint64_t v110 = v135;
  uint64_t v109 = v136;
  uint64_t v111 = v133;
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v133, v108, v136);
  uint64_t v112 = (*(uint64_t (**)(char *, uint64_t))(v110 + 88))(v111, v109);
  if (v112 == *MEMORY[0x263F16718])
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v110 + 104))(v134, v112, v109);
    return dispatch thunk of ARView.antialiasingMode.setter();
  }
  else
  {
    uint64_t v114 = *(void (**)(char *, uint64_t, uint64_t))(v110 + 104);
    if (v112 == *MEMORY[0x263F16710])
    {
      v114(v134, v112, v109);
      return dispatch thunk of ARView.antialiasingMode.setter();
    }
    else
    {
      ((void (*)(char *))v114)(v134);
      dispatch thunk of ARView.antialiasingMode.setter();
      return (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v111, v109);
    }
  }
}

void static RealityViewDynamicRange.standard.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static RealityViewDynamicRange.highFixedTonemappingCurve.getter(void *a1@<X8>)
{
  *a1 = 2;
}

uint64_t (*RealityViewCameraContent.renderingEffects.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  type metadata accessor for RealityViewCameraContent(0);
  return RealityViewCameraContent.renderingEffects.modify;
}

uint64_t RealityViewCameraContent.renderingEffects.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return RealityViewCameraContent.renderingEffects.didset();
  }
  return result;
}

uint64_t $defer #1 () in RealityViewCameraContent.init(view:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ARView.Environment.Background();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v28 = type metadata accessor for ARView.Environment();
  uint64_t v3 = *(void *)(v28 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v28);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v27 - v7;
  uint64_t v9 = type metadata accessor for RealityViewRenderingEffects(0);
  uint64_t v10 = v9 - 8;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for RealityViewCamera(0);
  uint64_t v14 = v13 - 8;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (uint64_t *)((char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  void *v16 = 0;
  static CameraControls.none.getter();
  *((unsigned char *)v16 + *(int *)(v14 + 32)) = 0;
  uint64_t v17 = (int *)type metadata accessor for RealityViewCameraContent(0);
  outlined assign with copy of RealityViewCamera((uint64_t)v16, a1 + v17[8], type metadata accessor for RealityViewCamera);
  RealityViewCameraContent.camera.didset();
  outlined destroy of RealityViewCameraContent((uint64_t)v16, type metadata accessor for RealityViewCamera);
  v12[1] = 0;
  v12[2] = 0;
  *uint64_t v12 = 0;
  uint64_t v18 = (char *)v12 + *(int *)(v10 + 36);
  uint64_t v19 = *MEMORY[0x263F16710];
  uint64_t v20 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(v18, v19, v20);
  *(void *)((char *)v12 + *(int *)(v10 + 40)) = 0;
  outlined assign with copy of RealityViewCamera((uint64_t)v12, a1 + v17[11], type metadata accessor for RealityViewRenderingEffects);
  RealityViewCameraContent.renderingEffects.didset();
  outlined destroy of RealityViewCameraContent((uint64_t)v12, type metadata accessor for RealityViewRenderingEffects);
  uint64_t v21 = v17[10];
  swift_release();
  *(void *)(a1 + v21) = 0;
  dispatch thunk of ARView.environment.getter();
  if (*(void *)(a1 + v21))
  {
    swift_retain();
    static ARView.Environment.Background.skybox(_:)();
    ARView.Environment.background.setter();
    swift_retain();
    uint64_t v22 = (void (*)(unsigned char *, void))ARView.Environment.lighting.modify();
    ARView.Environment.ImageBasedLight.resource.setter();
    v22(v29, 0);
    swift_release();
  }
  else
  {
    id v23 = objc_msgSend(self, sel_clearColor);
    static ARView.Environment.Background.color(_:)();

    ARView.Environment.background.setter();
    uint64_t v24 = (void (*)(unsigned char *, void))ARView.Environment.lighting.modify();
    ARView.Environment.ImageBasedLight.resource.setter();
    v24(v29, 0);
  }
  uint64_t v25 = v28;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v28);
  dispatch thunk of ARView.environment.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v25);
}

uint64_t RealityViewCameraContent.subscribe<A>(to:on:componentType:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  v18[1] = a3;
  v18[0] = a2;
  uint64_t v6 = type metadata accessor for EventSubscription();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _StoredEventSubscription();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(a1, (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for EventSource?);
  swift_retain();
  uint64_t v10 = v18[2];
  _StoredEventSubscription.__allocating_init(to:on:componentType:_:)();
  swift_retain();
  EventSubscription.init(_:)();
  uint64_t v11 = *(void *)(v10 + *(int *)(type metadata accessor for RealityViewCameraContent(0) + 28));
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a4, v6);
  uint64_t v12 = (unint64_t *)(v11 + 16);
  swift_beginAccess();
  unint64_t v13 = *(void *)(v11 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v11 + 16) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1, v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<EventSubscription>, MEMORY[0x263F16740], MEMORY[0x263F16740]);
    *uint64_t v12 = v13;
  }
  unint64_t v16 = *(void *)(v13 + 16);
  unint64_t v15 = *(void *)(v13 + 24);
  if (v16 >= v15 >> 1)
  {
    unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1, v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<EventSubscription>, MEMORY[0x263F16740], MEMORY[0x263F16740]);
    *uint64_t v12 = v13;
  }
  *(void *)(v13 + 16) = v16 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v13+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v16, v9, v6);
  swift_endAccess();
  dispatch thunk of ARView.scene.getter();
  EventSubscription.subscribe(to:)();
  swift_release();
  return swift_release();
}

uint64_t RealityViewCameraContent.updateDebugOptions()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (inserted: Bool, memberAfterInsert: ARView.DebugOptions));
  uint64_t v2 = MEMORY[0x270FA5388](v178);
  uint64_t v4 = (char *)v140 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v2);
  uint64_t v7 = (char *)v140 - v6;
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)v140 - v9;
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  unint64_t v13 = (BOOL *)v140 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v160 = (BOOL *)v140 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v168 = (BOOL *)v140 - v17;
  MEMORY[0x270FA5388](v16);
  v165 = (BOOL *)v140 - v18;
  uint64_t v171 = type metadata accessor for CharacterSet();
  uint64_t v177 = *(uint64_t **)(v171 - 8);
  MEMORY[0x270FA5388](v171);
  uint64_t v170 = (char *)v140 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ARView.DebugOptions();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (BOOL *)v140 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  uint64_t v153 = (char *)v140 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v155 = (BOOL *)v140 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  v154 = (char *)v140 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  v157 = (BOOL *)v140 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  v156 = (char *)v140 - v34;
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  uint64_t v159 = (char *)v140 - v36;
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  v158 = (char *)v140 - v38;
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v162 = (char *)v140 - v40;
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  uint64_t v161 = (char *)v140 - v42;
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  v172 = (char *)v140 - v44;
  uint64_t v45 = MEMORY[0x270FA5388](v43);
  uint64_t v169 = (char *)v140 - v46;
  uint64_t v47 = MEMORY[0x270FA5388](v45);
  v163 = (char *)v140 - v48;
  MEMORY[0x270FA5388](v47);
  v173 = (char *)v140 - v49;
  static ARView.DebugOptions.none.getter();
  id v50 = objc_msgSend(self, sel_processInfo);
  id v51 = objc_msgSend(v50, sel_environment);

  uint64_t v52 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v52 + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001CLL, 0x80000002466C2E20), (v53 & 1) != 0))
  {
    v144 = v24;
    uint64_t v152 = v21;
    uint64_t v149 = v13;
    v147 = v10;
    uint64_t v146 = v7;
    uint64_t v145 = v4;
    uint64_t v150 = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    Swift::String v54 = String.lowercased()();
    swift_bridgeObjectRelease();
    uint64_t v55 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, v54._countAndFlagsBits, (unint64_t)v54._object);
    uint64_t v56 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySsG_SSs5NeverOTg5012_sSsSSIeggo_f4SSs5D116OIegnrzr_TR93_s19_RealityKit_SwiftUI0A17ViewCameraContentV18updateDebugOptions0aB06ARViewC0iJ0VyFSSSshcfu_Tf3nnnpf_nTf1cn_n(v55);
    swift_bridgeObjectRelease();
    uint64_t v151 = v56;
    uint64_t v58 = *(void *)(v56 + 16);
    uint64_t v59 = v163;
    if (v58)
    {
      uint64_t v167 = (void (**)(char *, uint64_t))(v177 + 1);
      uint64_t v60 = (void (**)(BOOL *, uint64_t))(v152 + 8);
      uint64_t v174 = (void (**)(BOOL *, char *, uint64_t))(v152 + 32);
      __int16 v175 = (void (**)(char *, char *, uint64_t))(v152 + 16);
      int v61 = (uint64_t *)(v151 + 40);
      uint64_t v143 = "REALITYKIT_VISUALIZE_OPTIONS";
      unint64_t v142 = 0x80000002466C2E40;
      *(void *)&long long v57 = 136315138;
      long long v141 = v57;
      v140[1] = MEMORY[0x263F8EE58] + 8;
      uint64_t v166 = (void (**)(char *, uint64_t))(v152 + 8);
      do
      {
        uint64_t v68 = *v61;
        v179[0] = *(v61 - 1);
        v179[1] = v68;
        swift_bridgeObjectRetain();
        uint64_t v69 = v170;
        static CharacterSet.whitespaces.getter();
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v70 = StringProtocol.trimmingCharacters(in:)();
        unint64_t v72 = v71;
        (*v167)(v69, v171);
        swift_bridgeObjectRelease();
        BOOL v73 = v70 == 0x73636973796870 && v72 == 0xE700000000000000;
        uint64_t v176 = v58;
        uint64_t v177 = v61;
        if (v73)
        {
          swift_bridgeObjectRelease();
          uint64_t v75 = v169;
          uint64_t v76 = v175;
          goto LABEL_15;
        }
        char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v75 = v169;
        uint64_t v76 = v175;
        if (v74)
        {
          swift_bridgeObjectRelease();
LABEL_15:
          static ARView.DebugOptions.showPhysics.getter();
          uint64_t v77 = *v76;
          uint64_t v78 = v172;
          (*v76)(v172, v173, v20);
          uint64_t v79 = (void (*)(uint64_t))MEMORY[0x263F168F8];
          uint64_t v80 = lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, MEMORY[0x263F168F8]);
          dispatch thunk of SetAlgebra.intersection(_:)();
          lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, v79);
          char v81 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v82 = &v165[*(int *)(v178 + 48)];
          uint64_t v83 = v75;
          BOOL v84 = (v81 & 1) == 0;
          BOOL *v165 = v84;
          if (v81)
          {
            uint64_t v62 = *v174;
            (*v174)(v82, v83, v20);
            uint64_t v60 = (void (**)(BOOL *, uint64_t))v166;
          }
          else
          {
            uint64_t v60 = (void (**)(BOOL *, uint64_t))v166;
            (*v166)(v83, v20);
            uint64_t v164 = v80;
            v77((char *)v82, v59, v20);
            v77(v78, v59, v20);
            dispatch thunk of SetAlgebra.formUnion(_:)();
            uint64_t v62 = *v174;
          }
          uint64_t v63 = v177;
          uint64_t v64 = *(int *)(v178 + 48);
          uint64_t v65 = v168;
          uint64_t v66 = &v168[v64];
          *uint64_t v168 = v84;
          v62(&v65[v64], (char *)v82, v20);
          uint64_t v67 = *v60;
          (*v60)(v66, v20);
          v67((BOOL *)v59, v20);
          uint64_t v58 = v176;
          goto LABEL_7;
        }
        BOOL v85 = v70 == 0x69726F646C726F77 && v72 == 0xEB000000006E6967;
        uint64_t v86 = v161;
        if (v85)
        {
          swift_bridgeObjectRelease();
          uint64_t v88 = v162;
          goto LABEL_24;
        }
        char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v88 = v162;
        if (v87)
        {
          swift_bridgeObjectRelease();
LABEL_24:
          static ARView.DebugOptions.showWorldOrigin.getter();
          long long v89 = *v76;
          uint64_t v90 = v172;
          (*v76)(v172, v173, v20);
          uint64_t v91 = (void (*)(uint64_t))MEMORY[0x263F168F8];
          lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, MEMORY[0x263F168F8]);
          dispatch thunk of SetAlgebra.intersection(_:)();
          lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, v91);
          char v92 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v93 = &v160[*(int *)(v178 + 48)];
          BOOL v94 = (v92 & 1) == 0;
          *uint64_t v160 = v94;
          if (v92)
          {
            uint64_t v95 = *v174;
            (*v174)(v93, v88, v20);
            uint64_t v58 = v176;
            uint64_t v60 = (void (**)(BOOL *, uint64_t))v166;
          }
          else
          {
            uint64_t v60 = (void (**)(BOOL *, uint64_t))v166;
            (*v166)(v88, v20);
            v89((char *)v93, v86, v20);
            v89(v90, v86, v20);
            dispatch thunk of SetAlgebra.formUnion(_:)();
            uint64_t v95 = *v174;
            uint64_t v58 = v176;
          }
          uint64_t v96 = *(int *)(v178 + 48);
          uint64_t v97 = v168;
          uint64_t v98 = &v168[v96];
          *uint64_t v168 = v94;
          v95(&v97[v96], (char *)v93, v20);
          uint64_t v99 = *v60;
          (*v60)(v98, v20);
          v99((BOOL *)v86, v20);
          uint64_t v59 = v163;
          uint64_t v63 = v177;
          goto LABEL_7;
        }
        if (v70 == 0x726F726F68636E61 && v72 == 0xED0000736E696769)
        {
          swift_bridgeObjectRelease();
          uint64_t v100 = v159;
          uint64_t v101 = v172;
        }
        else
        {
          char v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v100 = v159;
          uint64_t v101 = v172;
          if ((v102 & 1) == 0)
          {
            if (v70 == 0x6567726F68636E61 && v72 == 0xEE00797274656D6FLL)
            {
              swift_bridgeObjectRelease();
              uint64_t v109 = v157;
              goto LABEL_41;
            }
            char v110 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v109 = v157;
            if (v110)
            {
              swift_bridgeObjectRelease();
LABEL_41:
              uint64_t v103 = v156;
              static ARView.DebugOptions.showAnchorGeometry.getter();
              uint64_t v111 = *v175;
              uint64_t v112 = v172;
              (*v175)(v172, v173, v20);
              uint64_t v113 = (void (*)(uint64_t))MEMORY[0x263F168F8];
              uint64_t v114 = v109;
              uint64_t v148 = lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, MEMORY[0x263F168F8]);
              dispatch thunk of SetAlgebra.intersection(_:)();
              lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, v113);
              char v115 = dispatch thunk of static Equatable.== infix(_:_:)();
              char v116 = ~v115;
              uint64_t v117 = *(int *)(v178 + 48);
              uint64_t v118 = v179;
LABEL_54:
              uint64_t v127 = (BOOL *)*(v118 - 32);
              uint64_t v128 = &v127[v117];
              BOOL v107 = (v115 & 1) == 0;
              *uint64_t v127 = v107;
              uint64_t v164 = (uint64_t)&v127[v117];
              if (v116)
              {
                (*v60)(v114, v20);
                v111((char *)v128, v103, v20);
                v111(v112, v103, v20);
LABEL_57:
                dispatch thunk of SetAlgebra.formUnion(_:)();
                uint64_t v108 = *v174;
              }
              else
              {
                uint64_t v108 = *v174;
                (*v174)(v128, (char *)v114, v20);
              }
              uint64_t v63 = v177;
              goto LABEL_59;
            }
            if (v70 == 0x7065727574616566 && v72 == 0xED000073746E696FLL)
            {
              swift_bridgeObjectRelease();
              unint64_t v119 = v155;
            }
            else
            {
              char v120 = _stringCompareWithSmolCheck(_:_:expecting:)();
              unint64_t v119 = v155;
              if ((v120 & 1) == 0)
              {
                if (v70 == 0xD000000000000012 && v72 == v142)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v122 = v175;
                  uint64_t v123 = v173;
                }
                else
                {
                  char v124 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  uint64_t v122 = v175;
                  uint64_t v123 = v173;
                  if ((v124 & 1) == 0)
                  {
                    if (one-time initialization token for logger != -1) {
                      swift_once();
                    }
                    uint64_t v133 = type metadata accessor for Logger();
                    __swift_project_value_buffer(v133, (uint64_t)logger);
                    swift_bridgeObjectRetain();
                    uint64_t v134 = Logger.logObject.getter();
                    os_log_type_t v135 = static os_log_type_t.error.getter();
                    BOOL v136 = os_log_type_enabled(v134, v135);
                    uint64_t v63 = v177;
                    if (v136)
                    {
                      uint64_t v137 = swift_slowAlloc();
                      uint64_t v164 = swift_slowAlloc();
                      v179[0] = v164;
                      *(_DWORD *)uint64_t v137 = v141;
                      swift_bridgeObjectRetain();
                      *(void *)(v137 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, v179);
                      swift_bridgeObjectRelease_n();
                      _os_log_impl(&dword_2465C2000, v134, v135, "Unknown Visualization Option: %s", (uint8_t *)v137, 0xCu);
                      uint64_t v138 = v164;
                      swift_arrayDestroy();
                      MEMORY[0x24C5348D0](v138, -1, -1);
                      MEMORY[0x24C5348D0](v137, -1, -1);
                    }
                    else
                    {

                      swift_bridgeObjectRelease_n();
                    }
                    goto LABEL_7;
                  }
                  swift_bridgeObjectRelease();
                }
                uint64_t v103 = v153;
                static ARView.DebugOptions.showSceneUnderstanding.getter();
                uint64_t v111 = *v122;
                uint64_t v112 = v172;
                (*v122)(v172, v123, v20);
                uint64_t v125 = (void (*)(uint64_t))MEMORY[0x263F168F8];
                uint64_t v126 = lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, MEMORY[0x263F168F8]);
                uint64_t v114 = v144;
                uint64_t v148 = v126;
                dispatch thunk of SetAlgebra.intersection(_:)();
                lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, v125);
                char v115 = dispatch thunk of static Equatable.== infix(_:_:)();
                char v116 = ~v115;
                uint64_t v117 = *(int *)(v178 + 48);
                uint64_t v118 = (uint64_t *)&v177;
                goto LABEL_54;
              }
              swift_bridgeObjectRelease();
            }
            uint64_t v103 = v154;
            static ARView.DebugOptions.showFeaturePoints.getter();
            uint64_t v111 = *v175;
            uint64_t v112 = v172;
            (*v175)(v172, v173, v20);
            uint64_t v121 = (void (*)(uint64_t))MEMORY[0x263F168F8];
            uint64_t v114 = v119;
            uint64_t v148 = lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, MEMORY[0x263F168F8]);
            dispatch thunk of SetAlgebra.intersection(_:)();
            lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, v121);
            char v115 = dispatch thunk of static Equatable.== infix(_:_:)();
            char v116 = ~v115;
            uint64_t v117 = *(int *)(v178 + 48);
            uint64_t v118 = &v178;
            goto LABEL_54;
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v103 = v158;
        static ARView.DebugOptions.showAnchorOrigins.getter();
        float v104 = *v175;
        (*v175)(v101, v173, v20);
        uint64_t v105 = (void (*)(uint64_t))MEMORY[0x263F168F8];
        uint64_t v148 = lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, MEMORY[0x263F168F8]);
        dispatch thunk of SetAlgebra.intersection(_:)();
        lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, v105);
        char v106 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v164 = (uint64_t)&v149[*(int *)(v178 + 48)];
        BOOL v107 = (v106 & 1) == 0;
        *uint64_t v149 = v107;
        if ((v106 & 1) == 0)
        {
          uint64_t v60 = (void (**)(BOOL *, uint64_t))v166;
          (*v166)(v100, v20);
          v104((char *)v164, v103, v20);
          v104(v101, v103, v20);
          goto LABEL_57;
        }
        uint64_t v108 = *v174;
        (*v174)((BOOL *)v164, v100, v20);
        uint64_t v63 = v177;
        uint64_t v60 = (void (**)(BOOL *, uint64_t))v166;
LABEL_59:
        uint64_t v129 = *(int *)(v178 + 48);
        uint64_t v130 = v168;
        uint64_t v131 = &v168[v129];
        *uint64_t v168 = v107;
        v108(&v130[v129], (char *)v164, v20);
        uint64_t v132 = *v60;
        (*v60)(v131, v20);
        v132((BOOL *)v103, v20);
        uint64_t v59 = v163;
LABEL_7:
        int v61 = v63 + 2;
        --v58;
      }
      while (v58);
    }
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v152 + 32))(v150, v173, v20);
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(a1, v173, v20);
  }
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  if (a1 < 0) {
    goto LABEL_41;
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = MEMORY[0x263F8EE78];
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 15;
  uint64_t v9 = HIBYTE(a4) & 0xF;
  if (!a1 || ((a4 & 0x2000000000000000) != 0 ? (uint64_t v10 = HIBYTE(a4) & 0xF) : (uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL), !v10))
  {
    if ((a4 & 0x2000000000000000) == 0) {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v26 = 7;
    if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0) {
      uint64_t v26 = 11;
    }
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v26 | (v9 << 16), v8, a2 & 1, v7);
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void **)(v7 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return (uint64_t)v11;
  }
  uint64_t v38 = a1;
  unint64_t v41 = 4 * v10;
  uint64_t v11 = (void *)MEMORY[0x263F8EE78];
  unint64_t v12 = 15;
  unint64_t v13 = 15;
  uint64_t v39 = v7;
  do
  {
    if (String.subscript.getter() == 44 && v14 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
        unint64_t v12 = String.index(after:)();
        continue;
      }
    }
    if (v13 >> 14 == v12 >> 14 && (a2 & 1) != 0)
    {
      unint64_t v12 = String.index(after:)();
      *(void *)(v8 + 16) = v12;
      unint64_t v13 = v12;
      continue;
    }
    if (v12 >> 14 < v13 >> 14) {
      goto LABEL_40;
    }
    uint64_t v16 = String.subscript.getter();
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    }
    unint64_t v24 = v11[2];
    unint64_t v23 = v11[3];
    if (v24 >= v23 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v11);
    }
    v11[2] = v24 + 1;
    uint64_t v25 = &v11[4 * v24];
    v25[4] = v16;
    v25[5] = v18;
    v25[6] = v20;
    v25[7] = v22;
    *(void *)(v39 + 16) = v11;
    unint64_t v13 = String.index(after:)();
    *(void *)(v8 + 16) = v13;
    unint64_t v12 = v13;
    if (v11[2] == v38) {
      break;
    }
  }
  while (v41 != v12 >> 14);
  if (v41 == v13 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return (uint64_t)v11;
  }
  if (v41 >= v13 >> 14)
  {
    uint64_t v27 = String.subscript.getter();
    uint64_t v29 = v28;
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    }
    unint64_t v35 = v11[2];
    unint64_t v34 = v11[3];
    if (v35 >= v34 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v11);
    }
    v11[2] = v35 + 1;
    uint64_t v36 = &v11[4 * v35];
    v36[4] = v27;
    v36[5] = v29;
    v36[6] = v31;
    v36[7] = v33;
    *(void *)(v39 + 16) = v11;
    goto LABEL_38;
  }
LABEL_40:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_41:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double closure #1 in RealityViewCameraContent.cameraControlDragGesture()(uint64_t a1, id *a2)
{
  type metadata accessor for RealityViewCameraContent(0);
  objc_msgSend(*a2, sel_frame);
  v4.f64[0] = v3;
  return _proto_RealityViewCameraController_v1.onDragGestureChanged(_:viewport:)(v4, v5);
}

float32x2_t closure #2 in RealityViewCameraContent.cameraControlDragGesture()(uint64_t a1, id *a2)
{
  float64_t v3 = *(float32x2_t **)((char *)a2 + *(int *)(type metadata accessor for RealityViewCameraContent(0) + 48));
  objc_msgSend(*a2, sel_frame);
  v3[50].i8[2] = 0;
  if (v4 > v5) {
    double v6 = v4;
  }
  else {
    double v6 = v5;
  }
  *(float *)&double v6 = v6;
  int32x2_t v18 = *(int32x2_t *)&v6;
  DragGesture.Value.predictedEndLocation.getter();
  double v8 = v7;
  DragGesture.Value.location.getter();
  double v10 = (v8 - v9) * 4.0;
  DragGesture.Value.location.getter();
  float v11 = v10;
  float v17 = v11;
  DragGesture.Value.predictedEndLocation.getter();
  double v13 = v12;
  DragGesture.Value.location.getter();
  DragGesture.Value.location.getter();
  float v15 = (v13 - *(double *)&v14) * 4.0;
  v14.f32[0] = v17;
  v14.f32[1] = -v15;
  float32x2_t result = vdiv_f32(v14, (float32x2_t)vdup_lane_s32(v18, 0));
  v3[44] = result;
  return result;
}

uint64_t RealityViewCameraContent.snapshot(saveToHDR:completion:)()
{
  return dispatch thunk of ARView.snapshot(saveToHDR:completion:)();
}

uint64_t RealityViewCameraContent._proto_findEntity(named:)()
{
  dispatch thunk of ARView.scene.getter();
  uint64_t v0 = dispatch thunk of Scene.findEntity(named:)();
  swift_release();
  return v0;
}

uint64_t RealityViewCameraContent._proto_findEntity(id:)()
{
  dispatch thunk of ARView.scene.getter();
  uint64_t v0 = dispatch thunk of Scene.findEntity(id:)();
  swift_release();
  return v0;
}

uint64_t RealityViewCameraContent._proto_performQuery(_:)()
{
  dispatch thunk of ARView.scene.getter();
  Scene.performQuery(_:)();

  return swift_release();
}

uint64_t RealityViewCameraContent._proto_cameraController_v1.getter()
{
  type metadata accessor for RealityViewCameraContent(0);

  return swift_retain();
}

uint64_t RealityViewCameraContent._proto_cameraController_v1.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for RealityViewCameraContent(0) + 48);
  uint64_t result = swift_release();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*RealityViewCameraContent._proto_cameraController_v1.modify())(void)
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

uint64_t RealityViewCameraContent._proto_allowCameraControls_v1.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for RealityViewCameraContent(0) + 52));
}

uint64_t RealityViewCameraContent._proto_allowCameraControls_v1.setter(char a1)
{
  uint64_t result = type metadata accessor for RealityViewCameraContent(0);
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*RealityViewCameraContent._proto_allowCameraControls_v1.modify())(void)
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

uint64_t RealityViewCameraContent._proto_debugOptions_v1.getter()
{
  return dispatch thunk of ARView.debugOptions.getter();
}

uint64_t RealityViewCameraContent._proto_debugOptions_v1.setter(uint64_t a1)
{
  return RealityViewCameraContent._proto_debugOptions_v1.setter(a1, MEMORY[0x263F168F8], MEMORY[0x263F16910]);
}

void (*RealityViewCameraContent._proto_debugOptions_v1.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for ARView.DebugOptions();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  dispatch thunk of ARView.debugOptions.getter();
  return RealityViewCameraContent._proto_debugOptions_v1.modify;
}

void RealityViewCameraContent._proto_debugOptions_v1.modify(uint64_t a1, char a2)
{
}

uint64_t RealityViewCameraContent._proto_environment_v1.getter()
{
  return dispatch thunk of ARView.environment.getter();
}

uint64_t RealityViewCameraContent._proto_environment_v1.setter(uint64_t a1)
{
  return RealityViewCameraContent._proto_debugOptions_v1.setter(a1, MEMORY[0x263F168E8], MEMORY[0x263F168F0]);
}

void (*RealityViewCameraContent._proto_environment_v1.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for ARView.Environment();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  dispatch thunk of ARView.environment.getter();
  return RealityViewCameraContent._proto_environment_v1.modify;
}

void RealityViewCameraContent._proto_environment_v1.modify(uint64_t a1, char a2)
{
}

uint64_t RealityViewCameraContent.__proto_antialiasingMode_v1.getter()
{
  return dispatch thunk of ARView.__proto_antialiasingMode_v1.getter();
}

uint64_t RealityViewCameraContent.__proto_antialiasingMode_v1.setter(uint64_t a1)
{
  return RealityViewCameraContent._proto_debugOptions_v1.setter(a1, MEMORY[0x263F16880], MEMORY[0x263F16960]);
}

void (*RealityViewCameraContent.__proto_antialiasingMode_v1.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for _Proto_AntialiasingMode_v1();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  dispatch thunk of ARView.__proto_antialiasingMode_v1.getter();
  return RealityViewCameraContent.__proto_antialiasingMode_v1.modify;
}

void RealityViewCameraContent.__proto_antialiasingMode_v1.modify(uint64_t a1, char a2)
{
}

uint64_t RealityViewCameraContent._proto_physicsOrigin_v1.getter()
{
  return ARView.physicsOrigin.getter();
}

uint64_t RealityViewCameraContent._proto_physicsOrigin_v1.setter()
{
  return ARView.physicsOrigin.setter();
}

uint64_t (*RealityViewCameraContent._proto_physicsOrigin_v1.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = ARView.physicsOrigin.getter();
  return RealityViewCameraContent._proto_physicsOrigin_v1.modify;
}

uint64_t RealityViewCameraContent._proto_physicsOrigin_v1.modify(uint64_t *a1, char a2)
{
  return RealityViewCameraContent.audioListener.modify(a1, a2, MEMORY[0x263F16938]);
}

uint64_t (*RealityViewCameraContent._proto_audioListener_v1.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = dispatch thunk of ARView.audioListener.getter();
  return RealityViewCameraContent.audioListener.modify;
}

uint64_t RealityViewCameraContent.audioListener.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(*a1);
  }
  uint64_t v4 = swift_retain();
  a3(v4);

  return swift_release();
}

uint64_t RealityViewCameraContent._proto_cameraMode_v1.getter()
{
  return ARView.cameraMode.getter();
}

uint64_t RealityViewCameraContent._proto_cameraMode_v1.setter(uint64_t a1)
{
  return RealityViewCameraContent._proto_debugOptions_v1.setter(a1, MEMORY[0x263F168C0], MEMORY[0x263F168C8]);
}

void (*RealityViewCameraContent._proto_cameraMode_v1.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for ARView.CameraMode();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  ARView.cameraMode.getter();
  return RealityViewCameraContent._proto_cameraMode_v1.modify;
}

void RealityViewCameraContent._proto_cameraMode_v1.modify(uint64_t a1, char a2)
{
}

uint64_t RealityViewCameraContent._proto_renderOptions_v1.getter()
{
  return ARView.renderOptions.getter();
}

uint64_t key path setter for RealityViewCameraContent._proto_debugOptions_v1 : RealityViewCameraContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(char *))
{
  uint64_t v8 = a5(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  double v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  float32x2_t v14 = (char *)&v17 - v13;
  float v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15((char *)&v17 - v13, a1, v8);
  v15(v12, (uint64_t)v14, v8);
  a6(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
}

uint64_t RealityViewCameraContent._proto_renderOptions_v1.setter(uint64_t a1)
{
  return RealityViewCameraContent._proto_debugOptions_v1.setter(a1, MEMORY[0x263F16918], MEMORY[0x263F16940]);
}

uint64_t RealityViewCameraContent._proto_debugOptions_v1.setter(uint64_t a1, uint64_t (*a2)(void), void (*a3)(char *))
{
  uint64_t v5 = a2(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v10 - v7, a1, v5);
  a3(v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

void (*RealityViewCameraContent._proto_renderOptions_v1.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for ARView.RenderOptions();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  ARView.renderOptions.getter();
  return RealityViewCameraContent._proto_renderOptions_v1.modify;
}

void RealityViewCameraContent._proto_renderOptions_v1.modify(uint64_t a1, char a2)
{
}

void RealityViewCameraContent._proto_debugOptions_v1.modify(uint64_t a1, char a2, void (*a3)(void *))
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  size_t v6 = *(void **)(*(void *)a1 + 40);
  uint64_t v8 = *(void *)(*(void *)a1 + 16);
  uint64_t v7 = *(void **)(*(void *)a1 + 24);
  uint64_t v9 = *(void *)(*(void *)a1 + 8);
  if (a2)
  {
    uint64_t v10 = *(void (**)(void *, void *, uint64_t))(v8 + 16);
    v10(*(void **)(*(void *)a1 + 32), v6, v9);
    v10(v7, v5, v9);
    a3(v7);
    uint64_t v11 = *(void (**)(void *, uint64_t))(v8 + 8);
    v11(v5, v9);
    v11(v6, v9);
  }
  else
  {
    (*(void (**)(void, void *, uint64_t))(v8 + 16))(*(void *)(*(void *)a1 + 32), v6, v9);
    a3(v5);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v9);
  }
  free(v6);
  free(v5);
  free(v7);

  free(v4);
}

uint64_t protocol witness for RealityViewContentProtocol.entities.getter in conformance RealityViewCameraContent@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
  return swift_retain();
}

uint64_t protocol witness for RealityViewContentProtocol.entities.setter in conformance RealityViewCameraContent(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RealityViewCameraContent(v1, (uint64_t)v3, type metadata accessor for RealityViewCameraContent);
  type metadata accessor for Entity();
  char v4 = static Entity.== infix(_:_:)();
  uint64_t result = swift_release();
  if (v4) {
    return outlined destroy of RealityViewCameraContent((uint64_t)v3, type metadata accessor for RealityViewCameraContent);
  }
  __break(1u);
  return result;
}

void (*protocol witness for RealityViewContentProtocol.entities.modify in conformance RealityViewCameraContent(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = RealityViewCameraContent.entities.modify(v2);
  return protocol witness for RealityViewContentProtocol.entities.modify in conformance RealityViewCameraContent;
}

void protocol witness for RealityViewContentProtocol.entities.modify in conformance RealityViewCameraContent(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

Swift::UInt32 __swiftcall RealityViewCameraContent.getLayerHandle()()
{
  return ARView.getLayerHandle()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RealityViewCameraConvertible()
{
  return static NSObject.== infix(_:_:)() & 1;
}

void one-time initialization function for defaultValue()
{
  static RealityViewCameraConvertibleKey.defaultValue = MEMORY[0x263F8EE78];
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance RealityViewCameraConvertibleKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static RealityViewCameraConvertibleKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance RealityViewCameraConvertibleKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance RealityViewCameraConvertibleKey()
{
  return MEMORY[0x270EFF888]();
}

uint64_t protocol witness for static PreferenceKey._isReadableByHost.getter in conformance RealityViewCameraConvertibleKey()
{
  return MEMORY[0x270EFF888]();
}

uint64_t View.realityViewCameraControls(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();

  return swift_release();
}

uint64_t EnvironmentValues.realityViewCameraControls.getter()
{
  lazy protocol witness table accessor for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey();

  return EnvironmentValues.subscript.getter();
}

uint64_t key path getter for EnvironmentValues.realityViewCameraControls : EnvironmentValues()
{
  return EnvironmentValues.subscript.getter();
}

uint64_t key path setter for EnvironmentValues.realityViewCameraControls : EnvironmentValues(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CameraControls();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  lazy protocol witness table accessor for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey();
  EnvironmentValues.subscript.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t EnvironmentValues.realityViewCameraControls.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CameraControls();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  lazy protocol witness table accessor for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey();
  EnvironmentValues.subscript.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*EnvironmentValues.realityViewCameraControls.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for CameraControls();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  v3[6] = lazy protocol witness table accessor for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey();
  EnvironmentValues.subscript.getter();
  return EnvironmentValues.realityViewCameraControls.modify;
}

void EnvironmentValues.realityViewCameraControls.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 16) + 16);
  v4(*(void *)(*(void *)a1 + 32), v3[5], v3[1]);
  uint64_t v5 = (void *)v3[5];
  uint64_t v7 = (void *)v3[3];
  size_t v6 = (void *)v3[4];
  uint64_t v8 = v3[1];
  uint64_t v9 = v3[2];
  if (a2)
  {
    v4(v3[3], v3[4], v3[1]);
    EnvironmentValues.subscript.setter();
    uint64_t v10 = *(void (**)(void *, uint64_t))(v9 + 8);
    v10(v6, v8);
    v10(v5, v8);
  }
  else
  {
    EnvironmentValues.subscript.setter();
    (*(void (**)(void *, uint64_t))(v9 + 8))(v5, v8);
  }
  free(v5);
  free(v6);
  free(v7);

  free(v3);
}

uint64_t one-time initialization function for defaultValue()
{
  uint64_t v0 = type metadata accessor for CameraControls();
  __swift_allocate_value_buffer(v0, static EnvironmentValues.CameraControlsKey.defaultValue);
  __swift_project_value_buffer(v0, (uint64_t)static EnvironmentValues.CameraControlsKey.defaultValue);
  return static CameraControls.none.getter();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.CameraControlsKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for CameraControls();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static EnvironmentValues.CameraControlsKey.defaultValue);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.CameraControlsKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type CameraControls and conformance CameraControls, MEMORY[0x263F165E8]);

  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, v8);
}

uint64_t static RealityViewCamera.spatialTracking.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for RealityViewCamera(0);
  uint64_t result = static CameraControls.none.getter();
  *a1 = 0;
  *((unsigned char *)a1 + *(int *)(v2 + 24)) = 1;
  return result;
}

uint64_t static RealityViewEnvironment.skybox(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return swift_retain();
}

void RealityViewRenderingEffects.motionBlur.getter(void *a1@<X8>)
{
  *a1 = *v1;
}

void *RealityViewRenderingEffects.motionBlur.setter(void *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*RealityViewRenderingEffects.motionBlur.modify())()
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

void RealityViewRenderingEffects.depthOfField.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

void *RealityViewRenderingEffects.depthOfField.setter(void *result)
{
  *(void *)(v1 + 8) = *result;
  return result;
}

uint64_t (*RealityViewRenderingEffects.depthOfField.modify())()
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

void RealityViewRenderingEffects.cameraGrain.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

void *RealityViewRenderingEffects.cameraGrain.setter(void *result)
{
  *(void *)(v1 + 16) = *result;
  return result;
}

uint64_t (*RealityViewRenderingEffects.cameraGrain.modify())()
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

uint64_t RealityViewRenderingEffects.antialiasing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for RealityViewRenderingEffects(0) + 28);
  uint64_t v4 = type metadata accessor for AntialiasingMode();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t RealityViewRenderingEffects.antialiasing.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for RealityViewRenderingEffects(0) + 28);
  uint64_t v4 = type metadata accessor for AntialiasingMode();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*RealityViewRenderingEffects.antialiasing.modify())(void)
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

void static RealityViewDynamicRange.default.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t RealityViewRenderingEffects.dynamicRange.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = type metadata accessor for RealityViewRenderingEffects(0);
  *a1 = *(void *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t RealityViewRenderingEffects.dynamicRange.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = type metadata accessor for RealityViewRenderingEffects(0);
  *(void *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

uint64_t (*RealityViewRenderingEffects.dynamicRange.modify())(void)
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

void static RealityViewDynamicRange._hdrRendering.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void RealityViewDynamicRange.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static RealityViewDynamicRange.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int RealityViewRenderingEffectMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance RealityViewDynamicRange()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RealityViewRenderingEffectMode()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  return specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, MEMORY[0x263F18520], 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_log_type_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  void v18[3];
  uint64_t v19;

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Image.DynamicRange?>.Content);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v2, (uint64_t)v10, &demangling cache variable for type metadata for Environment<Image.DynamicRange?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return outlined init with take of Animation?((uint64_t)v10, a1, &demangling cache variable for type metadata for Image.DynamicRange?);
  }
  double v12 = static os_log_type_t.fault.getter();
  uint64_t v13 = static Log.runtimeIssuesLog.getter();
  float32x2_t v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    float v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v18[1] = a1;
    uint64_t v17 = v16;
    uint64_t v19 = v16;
    *(_DWORD *)float v15 = 136315138;
    id v18[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x80000002466C2EC0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v17, -1, -1);
    MEMORY[0x24C5348D0](v15, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v9 = v5;
  uint64_t v11 = type metadata accessor for EnvironmentValues();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  float32x2_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    uint64_t v21 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v21, v20))
    {
      unint64_t v26 = a4;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v27 = a5;
      unint64_t v23 = (uint8_t *)v22;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v30 = v24;
      *(_DWORD *)unint64_t v23 = 136315138;
      uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v26, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2465C2000, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v24, -1, -1);
      MEMORY[0x24C5348D0](v23, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  if ((a2 & 1) == 0)
  {
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    uint64_t v9 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v15 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000002466C2E00, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2465C2000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v12, -1, -1);
      MEMORY[0x24C5348D0](v11, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    protocol witness for System.init(scene:) in conformance _RealityViewCameraControllerSystem(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v15;
  }
  return a1;
}

uint64_t key path getter for _RealityViewCameraModel.makeTaskComplete : _RealityViewCameraModel@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for _RealityViewCameraModel.makeTaskComplete : _RealityViewCameraModel()
{
  return static Published.subscript.setter();
}

uint64_t key path setter for EnvironmentValues.allowedDynamicRange : EnvironmentValues(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image.DynamicRange?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for Image.DynamicRange?);
  return EnvironmentValues.allowedDynamicRange.setter();
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    id v14[2] = v17 + 1;
    uint64_t v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Float>>);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<KeyframeAnimation<PlatterAnimVar>.Keyframe>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CameraPathManager.PoseSample>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4]) {
          memmove(v12, a4 + 4, 96 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DynamicScanVolumeEstimator.SphereSample>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FreeformCloudRenderer.AnchorMetalResource>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 95;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 7);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<geom_interpolating_key_3f>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TubeGenerator<CameraPathVertex>.CurvePoint>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InFlightQueue<FreeformCloudRenderer.ResourceEntry>.Entry>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContinuousShotCircle.ShotData>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ObjectCaptureCubeVertex>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CoveragePointCloud>, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<InFlightQueue<CoveragePointRenderer.ResourceEntry>.Entry>, &demangling cache variable for type metadata for InFlightQueue<CoveragePointRenderer.ResourceEntry>.Entry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<InFlightQueue<FullscreenCoveragePointsRenderer.ResourceEntry>.Entry>, (uint64_t *)&demangling cache variable for type metadata for InFlightQueue<FullscreenCoveragePointsRenderer.ResourceEntry>.Entry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RealityViewCameraConvertible>, type metadata accessor for RealityViewCameraConvertible, type metadata accessor for RealityViewCameraConvertible);
}

uint64_t sub_24667F7D8()
{
  return EnvironmentValues.subscript.getter();
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in RealityViewCameraContent.Body<A>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type RealityViewRenderingEffectMode and conformance RealityViewRenderingEffectMode()
{
  unint64_t result = lazy protocol witness table cache variable for type RealityViewRenderingEffectMode and conformance RealityViewRenderingEffectMode;
  if (!lazy protocol witness table cache variable for type RealityViewRenderingEffectMode and conformance RealityViewRenderingEffectMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityViewRenderingEffectMode and conformance RealityViewRenderingEffectMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RealityViewDynamicRange and conformance RealityViewDynamicRange()
{
  unint64_t result = lazy protocol witness table cache variable for type RealityViewDynamicRange and conformance RealityViewDynamicRange;
  if (!lazy protocol witness table cache variable for type RealityViewDynamicRange and conformance RealityViewDynamicRange)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityViewDynamicRange and conformance RealityViewDynamicRange);
  }
  return result;
}

uint64_t sub_24667F9BC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 8);
  return swift_retain();
}

uint64_t sub_24667F9CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for RealityViewCameraContent(0);
  return outlined init with copy of RealityViewCameraContent(a1 + *(int *)(v4 + 32), a2, type metadata accessor for RealityViewCamera);
}

uint64_t sub_24667FA20@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + *(int *)(type metadata accessor for RealityViewCameraContent(0) + 36));

  return swift_retain();
}

uint64_t sub_24667FA6C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + *(int *)(type metadata accessor for RealityViewCameraContent(0) + 40));

  return swift_retain();
}

uint64_t sub_24667FAB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of ARView.audioListener.getter();
  *a1 = result;
  return result;
}

uint64_t sub_24667FAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_15Tm(a1, a2, a3, a4, MEMORY[0x263F16930]);
}

uint64_t sub_24667FAFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for RealityViewCameraContent(0);
  return outlined init with copy of RealityViewCameraContent(a1 + *(int *)(v4 + 44), a2, type metadata accessor for RealityViewRenderingEffects);
}

uint64_t sub_24667FB50()
{
  return dispatch thunk of ARView.debugOptions.getter();
}

uint64_t sub_24667FB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RealityViewCameraContent._proto_debugOptions_v1 : RealityViewCameraContent(a1, a2, a3, a4, MEMORY[0x263F168F8], MEMORY[0x263F16910]);
}

uint64_t sub_24667FBB4()
{
  return dispatch thunk of ARView.environment.getter();
}

uint64_t sub_24667FBD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RealityViewCameraContent._proto_debugOptions_v1 : RealityViewCameraContent(a1, a2, a3, a4, MEMORY[0x263F168E8], MEMORY[0x263F168F0]);
}

uint64_t sub_24667FC18()
{
  return dispatch thunk of ARView.__proto_antialiasingMode_v1.getter();
}

uint64_t sub_24667FC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RealityViewCameraContent._proto_debugOptions_v1 : RealityViewCameraContent(a1, a2, a3, a4, MEMORY[0x263F16880], MEMORY[0x263F16960]);
}

uint64_t sub_24667FC7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ARView.physicsOrigin.getter();
  *a1 = result;
  return result;
}

uint64_t sub_24667FCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_15Tm(a1, a2, a3, a4, MEMORY[0x263F16938]);
}

uint64_t sub_24667FCC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_15Tm(a1, a2, a3, a4, MEMORY[0x263F16930]);
}

uint64_t keypath_set_15Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = swift_retain();
  return a5(v6);
}

uint64_t sub_24667FD0C()
{
  return ARView.cameraMode.getter();
}

uint64_t sub_24667FD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RealityViewCameraContent._proto_debugOptions_v1 : RealityViewCameraContent(a1, a2, a3, a4, MEMORY[0x263F168C0], MEMORY[0x263F168C8]);
}

uint64_t sub_24667FD70()
{
  return ARView.renderOptions.getter();
}

uint64_t sub_24667FD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RealityViewCameraContent._proto_debugOptions_v1 : RealityViewCameraContent(a1, a2, a3, a4, MEMORY[0x263F16918], MEMORY[0x263F16940]);
}

uint64_t type metadata completion function for RealityViewCameraContent.Body()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for RealityViewCameraContent.Body(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  uint64_t v8 = *a2;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + ((v6 + 32) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    *a1 = v8;
    a1 = (void *)(v8 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v11 = ~v6;
    uint64_t v12 = a2[1];
    *a1 = v8;
    a1[1] = v12;
    unint64_t v13 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v14 = (unint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v15 = *v14;
    swift_retain();
    if (v15 < 0xFFFFFFFF)
    {
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
    }
    else
    {
      unint64_t v16 = v14[1];
      *(void *)unint64_t v13 = v15;
      *(void *)(v13 + 8) = v16;
      swift_retain();
    }
    unint64_t v17 = (char *)v14 + v6;
    uint64_t v18 = (v13 + v6 + 16) & v11;
    uint64_t v19 = (unint64_t)(v17 + 16) & v11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v18, v19, v4);
    unint64_t v20 = (v7 + v18) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = (v7 + v19) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    LOBYTE(v19) = *(unsigned char *)(v21 + 16);
    outlined copy of StateObject<_RealityViewCameraModel>.Storage();
    *(void *)unint64_t v20 = v22;
    *(void *)(v20 + 8) = v23;
    *(unsigned char *)(v20 + 16) = v19;
  }
  return a1;
}

uint64_t outlined copy of StateObject<_RealityViewCameraModel>.Storage()
{
  return swift_retain();
}

uint64_t destroy for RealityViewCameraContent.Body(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = (void *)((a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v4 >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(((unint64_t)v4
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));

  return outlined consume of StateObject<_RealityViewCameraModel>.Storage();
}

void *initializeWithCopy for RealityViewCameraContent.Body(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  unint64_t v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = (unint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = *v7;
  swift_retain();
  if (v8 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v6 = *(_OWORD *)v7;
  }
  else
  {
    unint64_t v9 = v7[1];
    *(void *)unint64_t v6 = v8;
    *(void *)(v6 + 8) = v9;
    swift_retain();
  }
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 16;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v6 + v12 + 16) & ~v12;
  uint64_t v14 = ((unint64_t)v7 + v12 + 16) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 48) + 7;
  unint64_t v16 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v15 + v14) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = *(void *)v17;
  uint64_t v19 = *(void *)(v17 + 8);
  char v20 = *(unsigned char *)(v17 + 16);
  outlined copy of StateObject<_RealityViewCameraModel>.Storage();
  *(void *)unint64_t v16 = v18;
  *(void *)(v16 + 8) = v19;
  *(unsigned char *)(v16 + 16) = v20;
  return a1;
}

void *assignWithCopy for RealityViewCameraContent.Body(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (unint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v11 = v8[1];
      *uint64_t v7 = v9;
      v7[1] = v11;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
    goto LABEL_8;
  }
  if (v9 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v10 = v8[1];
  *uint64_t v7 = v9;
  v7[1] = v10;
  swift_retain();
  swift_release();
LABEL_8:
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12 + 24;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = ((unint64_t)v7 + v14 + 16) & ~v14;
  uint64_t v16 = ((unint64_t)v8 + v14 + 16) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v15, v16);
  uint64_t v17 = *(void *)(v13 + 40) + 7;
  unint64_t v18 = (v17 + v15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v17 + v16) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  uint64_t v21 = *(void *)(v19 + 8);
  char v22 = *(unsigned char *)(v19 + 16);
  outlined copy of StateObject<_RealityViewCameraModel>.Storage();
  *(void *)unint64_t v18 = v20;
  *(void *)(v18 + 8) = v21;
  *(unsigned char *)(v18 + 16) = v22;
  outlined consume of StateObject<_RealityViewCameraModel>.Storage();
  return a1;
}

_OWORD *initializeWithTake for RealityViewCameraContent.Body(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v5 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v4 = *(_OWORD *)v5;
  }
  else
  {
    uint64_t v6 = *(void *)(v5 + 8);
    *(void *)unint64_t v4 = *(void *)v5;
    *(void *)(v4 + 8) = v6;
  }
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v4 + v9 + 16) & ~v9;
  uint64_t v11 = (v5 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 32) + 7;
  unint64_t v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  char v15 = *(unsigned char *)(v14 + 16);
  *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  *(unsigned char *)(v13 + 16) = v15;
  return a1;
}

_OWORD *assignWithTake for RealityViewCameraContent.Body(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 23;
  *a1 = *a2;
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (unint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = *v7;
  if (*v6 < 0xFFFFFFFFuLL)
  {
    if (v8 >= 0xFFFFFFFF)
    {
      unint64_t v10 = v7[1];
      *uint64_t v6 = v8;
      v6[1] = v10;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
    goto LABEL_8;
  }
  if (v8 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v9 = v7[1];
  *uint64_t v6 = v8;
  v6[1] = v9;
  swift_release();
LABEL_8:
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = v11 + 40;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = ((unint64_t)v6 + v13 + 16) & ~v13;
  uint64_t v15 = ((unint64_t)v7 + v13 + 16) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v14, v15);
  uint64_t v16 = *(void *)(v12 + 24) + 7;
  unint64_t v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  char v19 = *(unsigned char *)(v18 + 16);
  *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
  *(unsigned char *)(v17 + 16) = v19;
  outlined consume of StateObject<_RealityViewCameraModel>.Storage();
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityViewCameraContent.Body(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 32) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 17;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2466806D0);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 32) & ~v6) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8)
  }
                                                                  + v6
                                                                  + 16) & ~v6);
  uint64_t v17 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for RealityViewCameraContent.Body(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 32) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 17;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_47;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v20 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 16) & ~v9;
              uint64_t v21 = *(void (**)(unint64_t))(v6 + 56);
              v21(v20);
            }
            else
            {
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v19 = a2 ^ 0x80000000;
                *((void *)a1 + 1) = 0;
              }
              else
              {
                uint64_t v19 = a2 - 1;
              }
              *(void *)a1 = v19;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = (~v8 + a2) >> v11;
  if (v10 < 4) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (v10 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v17;
      break;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x246680908);
    case 4:
      *(_DWORD *)&a1[v10] = v17;
      break;
    default:
      return;
  }
}

uint64_t ObjC metadata update function for _RealityViewCameraModel()
{
  return type metadata accessor for _RealityViewCameraModel(0);
}

uint64_t type metadata accessor for _RealityViewCameraModel(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for _RealityViewCameraModel);
}

void type metadata completion function for _RealityViewCameraModel()
{
  type metadata accessor for RealityViewCameraContent(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Bool>();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for Published<Bool>()
{
  if (!lazy cache variable for type metadata for Published<Bool>)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>);
    }
  }
}

char *initializeBufferWithCopyOfBuffer for RealityViewCameraContent(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unsigned int v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    unsigned int v7 = a1;
    *((void *)a1 + 1) = a2[1];
    uint64_t v8 = a3[6];
    __dst = &a1[v8];
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = type metadata accessor for GeometryProxy();
    uint64_t v11 = *(void *)(v10 - 8);
    unsigned int v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    unsigned int v13 = v4;
    swift_retain();
    if (v12(v9, 1, v10))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
      memcpy(__dst, v9, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
    }
    uint64_t v15 = a3[8];
    *(void *)&v7[a3[7]] = *(char **)((char *)a2 + a3[7]);
    unsigned int v16 = &v7[v15];
    uint64_t v17 = (uint64_t)a2 + v15;
    *(void *)&v7[v15] = *(char **)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for RealityViewCamera(0);
    uint64_t v19 = *(int *)(v18 + 20);
    uint64_t v32 = v17 + v19;
    __dsta = &v16[v19];
    uint64_t v20 = type metadata accessor for CameraControls();
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16);
    swift_retain();
    swift_retain();
    v30(__dsta, v32, v20);
    v16[*(int *)(v18 + 24)] = *(unsigned char *)(v17 + *(int *)(v18 + 24));
    uint64_t v21 = a3[10];
    *(void *)&v7[a3[9]] = *(char **)((char *)a2 + a3[9]);
    *(void *)&v7[v21] = *(char **)((char *)a2 + v21);
    uint64_t v22 = a3[11];
    uint64_t v23 = &v7[v22];
    uint64_t v24 = (uint64_t)a2 + v22;
    *(_OWORD *)uint64_t v23 = *(_OWORD *)((char *)a2 + v22);
    *((void *)v23 + 2) = *(char **)((char *)a2 + v22 + 16);
    uint64_t v25 = type metadata accessor for RealityViewRenderingEffects(0);
    uint64_t v26 = *(int *)(v25 + 28);
    uint64_t v33 = v24 + v26;
    __dstb = &v23[v26];
    uint64_t v27 = type metadata accessor for AntialiasingMode();
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16);
    swift_retain();
    swift_retain();
    v31(__dstb, v33, v27);
    *(void *)&v23[*(int *)(v25 + 32)] = *(void *)(v24 + *(int *)(v25 + 32));
    uint64_t v28 = a3[13];
    *(void *)&v7[a3[12]] = *(char **)((char *)a2 + a3[12]);
    v7[v28] = *((unsigned char *)a2 + v28);
  }
  swift_retain();
  return v7;
}

uint64_t destroy for RealityViewCameraContent(id *a1, int *a2)
{
  swift_release();
  uint64_t v4 = (char *)a1 + a2[6];
  uint64_t v5 = type metadata accessor for GeometryProxy();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_release();
  unsigned int v7 = (char *)a1 + a2[8];
  swift_release();
  uint64_t v8 = &v7[*(int *)(type metadata accessor for RealityViewCamera(0) + 20)];
  uint64_t v9 = type metadata accessor for CameraControls();
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_release();
  swift_release();
  uint64_t v10 = (char *)a1 + a2[11];
  uint64_t v11 = &v10[*(int *)(type metadata accessor for RealityViewRenderingEffects(0) + 28)];
  uint64_t v12 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);

  return swift_release();
}

void *initializeWithCopy for RealityViewCameraContent(void *a1, uint64_t a2, int *a3)
{
  unsigned int v7 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  uint64_t v8 = a3[6];
  __dst = (char *)a1 + v8;
  uint64_t v9 = (const void *)(a2 + v8);
  uint64_t v10 = type metadata accessor for GeometryProxy();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  id v13 = v7;
  swift_retain();
  if (v12(v9, 1, v10))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(__dst, v9, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v11 + 16))(__dst, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  uint64_t v15 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)(a2 + a3[7]);
  unsigned int v16 = (char *)a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)((char *)a1 + v15) = *(void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for RealityViewCamera(0);
  uint64_t v19 = *(int *)(v18 + 20);
  uint64_t v33 = v17 + v19;
  __dsta = &v16[v19];
  uint64_t v20 = type metadata accessor for CameraControls();
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16);
  uint64_t v21 = a3;
  swift_retain();
  swift_retain();
  v31(__dsta, v33, v20);
  v16[*(int *)(v18 + 24)] = *(unsigned char *)(v17 + *(int *)(v18 + 24));
  uint64_t v22 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)((char *)a1 + v22) = *(void *)(a2 + v22);
  uint64_t v23 = a3[11];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = a2 + v23;
  *(_OWORD *)uint64_t v24 = *(_OWORD *)(a2 + v23);
  *((void *)v24 + 2) = *(void *)(a2 + v23 + 16);
  uint64_t v26 = type metadata accessor for RealityViewRenderingEffects(0);
  uint64_t v27 = *(int *)(v26 + 28);
  uint64_t v34 = v25 + v27;
  __dstb = &v24[v27];
  uint64_t v28 = type metadata accessor for AntialiasingMode();
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16);
  swift_retain();
  swift_retain();
  v32(__dstb, v34, v28);
  *(void *)&v24[*(int *)(v26 + 32)] = *(void *)(v25 + *(int *)(v26 + 32));
  uint64_t v29 = v21[13];
  *(void *)((char *)a1 + v21[12]) = *(void *)(a2 + v21[12]);
  *((unsigned char *)a1 + v29) = *(unsigned char *)(a2 + v29);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RealityViewCameraContent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  unsigned int v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for GeometryProxy();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  uint64_t v18 = a3[8];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  swift_retain();
  swift_release();
  uint64_t v21 = type metadata accessor for RealityViewCamera(0);
  uint64_t v22 = *(int *)(v21 + 20);
  uint64_t v23 = v19 + v22;
  uint64_t v24 = v20 + v22;
  uint64_t v25 = type metadata accessor for CameraControls();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  *(unsigned char *)(v19 + *(int *)(v21 + 24)) = *(unsigned char *)(v20 + *(int *)(v21 + 24));
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_retain();
  swift_release();
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = a2 + v26;
  *uint64_t v27 = *(void *)(a2 + v26);
  v27[1] = *(void *)(a2 + v26 + 8);
  v27[2] = *(void *)(a2 + v26 + 16);
  uint64_t v29 = type metadata accessor for RealityViewRenderingEffects(0);
  uint64_t v30 = *(int *)(v29 + 28);
  uint64_t v31 = (char *)v27 + v30;
  uint64_t v32 = v28 + v30;
  uint64_t v33 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 24))(v31, v32, v33);
  *(void *)((char *)v27 + *(int *)(v29 + 32)) = *(void *)(v28 + *(int *)(v29 + 32));
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

_OWORD *initializeWithTake for RealityViewCameraContent(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  unsigned int v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for GeometryProxy();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for RealityViewCamera(0);
  uint64_t v16 = *(int *)(v15 + 20);
  uint64_t v17 = &v13[v16];
  uint64_t v18 = &v14[v16];
  uint64_t v19 = type metadata accessor for CameraControls();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
  uint64_t v20 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);
  uint64_t v21 = a3[11];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  *(_OWORD *)uint64_t v22 = *(_OWORD *)((char *)a2 + v21);
  *((void *)v22 + 2) = *(void *)((char *)a2 + v21 + 16);
  uint64_t v24 = type metadata accessor for RealityViewRenderingEffects(0);
  uint64_t v25 = *(int *)(v24 + 28);
  uint64_t v26 = &v22[v25];
  uint64_t v27 = &v23[v25];
  uint64_t v28 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
  *(void *)&v22[*(int *)(v24 + 32)] = *(void *)&v23[*(int *)(v24 + 32)];
  uint64_t v29 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *((unsigned char *)a1 + v29) = *((unsigned char *)a2 + v29);
  return a1;
}

uint64_t assignWithTake for RealityViewCameraContent(uint64_t a1, void *a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  swift_release();
  uint64_t v7 = a3[6];
  id v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for GeometryProxy();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *(void *)(a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_release();
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *(void *)(a1 + v16) = *(void *)((char *)a2 + v16);
  swift_release();
  uint64_t v19 = type metadata accessor for RealityViewCamera(0);
  uint64_t v20 = *(int *)(v19 + 20);
  uint64_t v21 = v17 + v20;
  uint64_t v22 = &v18[v20];
  uint64_t v23 = type metadata accessor for CameraControls();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v23 - 8) + 40))(v21, v22, v23);
  *(unsigned char *)(v17 + *(int *)(v19 + 24)) = v18[*(int *)(v19 + 24)];
  *(void *)(a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_release();
  *(void *)(a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_release();
  uint64_t v24 = a3[11];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)((char *)a2 + v24);
  *(void *)(v25 + 16) = *(void *)((char *)a2 + v24 + 16);
  uint64_t v27 = type metadata accessor for RealityViewRenderingEffects(0);
  uint64_t v28 = *(int *)(v27 + 28);
  uint64_t v29 = v25 + v28;
  uint64_t v30 = &v26[v28];
  uint64_t v31 = type metadata accessor for AntialiasingMode();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v31 - 8) + 40))(v29, v30, v31);
  *(void *)(v25 + *(int *)(v27 + 32)) = *(void *)&v26[*(int *)(v27 + 32)];
  *(void *)(a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  swift_release();
  *(unsigned char *)(a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityViewCameraContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246681A40);
}

uint64_t sub_246681A40(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    int v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v13(&a1[v11], a2, v9);
  }
  uint64_t v12 = type metadata accessor for RealityViewCamera(0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_9;
  }
  uint64_t v14 = type metadata accessor for RealityViewRenderingEffects(0);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = &a1[a3[11]];

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for RealityViewCameraContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246681BD0);
}

char *sub_246681BD0(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    int v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = type metadata accessor for RealityViewCamera(0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for RealityViewRenderingEffects(0);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = &v5[a4[11]];

  return (char *)v15(v17, a2, a2, v16);
}

void type metadata completion function for RealityViewCameraContent()
{
  type metadata accessor for GeometryProxy?(319, &lazy cache variable for type metadata for GeometryProxy?, MEMORY[0x263F18910], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for RealityViewCamera(319);
    if (v1 <= 0x3F)
    {
      type metadata accessor for RealityViewRenderingEffects(319);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t ObjC metadata update function for RealityViewCameraContent.ContentStorage()
{
  return type metadata accessor for RealityViewCameraContent.ContentStorage(0);
}

uint64_t type metadata accessor for RealityViewCameraContent.ContentStorage(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for RealityViewCameraContent.ContentStorage);
}

void type metadata completion function for RealityViewCameraContent.ContentStorage()
{
  type metadata accessor for GeometryProxy?(319, &lazy cache variable for type metadata for SpatialTrackingSession.UnavailableCapabilities?, MEMORY[0x263F16820], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void *initializeBufferWithCopyOfBuffer for RealityViewCamera(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for CameraControls();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    *((unsigned char *)v7 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return v7;
}

uint64_t destroy for RealityViewCamera(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for CameraControls();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for RealityViewCamera(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CameraControls();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithCopy for RealityViewCamera(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CameraControls();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *initializeWithTake for RealityViewCamera(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CameraControls();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for RealityViewCamera(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CameraControls();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityViewCamera(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2466823E0);
}

uint64_t sub_2466823E0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for CameraControls();
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = (char *)a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for RealityViewCamera(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2466824B0);
}

void *sub_2466824B0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for CameraControls();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for RealityViewCamera()
{
  uint64_t result = type metadata accessor for CameraControls();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for RealityViewEnvironment(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for RealityViewEnvironment()
{
  return swift_release();
}

void *assignWithCopy for RealityViewEnvironment(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for RealityViewEnvironment(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityViewEnvironment(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RealityViewEnvironment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RealityViewEnvironment()
{
  return &type metadata for RealityViewEnvironment;
}

uint64_t *initializeBufferWithCopyOfBuffer for RealityViewRenderingEffects(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v4 = *a2;
    int v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for AntialiasingMode();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 32));
  }
  return v4;
}

uint64_t destroy for RealityViewRenderingEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = type metadata accessor for AntialiasingMode();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t initializeWithCopy for RealityViewRenderingEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for AntialiasingMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 32)) = *(void *)(a2 + *(int *)(a3 + 32));
  return a1;
}

void *assignWithCopy for RealityViewRenderingEffects(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 32)) = *(void *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t initializeWithTake for RealityViewRenderingEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for AntialiasingMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 32)) = *(void *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for RealityViewRenderingEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for AntialiasingMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 32)) = *(void *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityViewRenderingEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246682B50);
}

uint64_t sub_246682B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = type metadata accessor for AntialiasingMode();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for RealityViewRenderingEffects(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246682BD4);
}

uint64_t sub_246682BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = type metadata accessor for AntialiasingMode();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for RealityViewRenderingEffects()
{
  uint64_t result = type metadata accessor for AntialiasingMode();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RealityViewRenderingEffectMode()
{
  return &type metadata for RealityViewRenderingEffectMode;
}

ValueMetadata *type metadata accessor for RealityViewDynamicRange()
{
  return &type metadata for RealityViewDynamicRange;
}

uint64_t sub_246682D08()
{
  type metadata accessor for _RealityViewImpl();
  swift_getWitnessTable();
  type metadata accessor for GeometryReader();

  return swift_getWitnessTable();
}

uint64_t sub_246682D88()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for EnvironmentValues.CameraControlsKey()
{
  return &unk_26FAD0120;
}

uint64_t type metadata instantiation function for _RealityViewImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 48);
}

void type metadata completion function for _RealityViewImpl()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for GeometryProxy();
    if (v1 <= 0x3F)
    {
      type metadata accessor for GeometryProxy?(319, &lazy cache variable for type metadata for Environment<CameraControls>.Content, MEMORY[0x263F165E8], MEMORY[0x263F185C8]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Environment<Image.DynamicRange?>.Content();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for _RealityViewImpl(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 80);
  int v6 = *(_DWORD *)(*(void *)(type metadata accessor for GeometryProxy() - 8) + 80);
  int v7 = *(_DWORD *)(*(void *)(type metadata accessor for CameraControls() - 8) + 80);
  char v8 = *(_DWORD *)(*(void *)(type metadata accessor for Image.DynamicRange() - 8) + 80);
  uint64_t v9 = *a2;
  *a1 = *a2;
  uint64_t v10 = ((v6 | v7 | v8) | v5) & 0xF8 | 7u;
  uint64_t v11 = v9 + ((v10 + 16) & ~v10);
  swift_retain();
  return v11;
}

uint64_t destroy for _RealityViewImpl(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v8 = type metadata accessor for GeometryProxy();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9 + 8;
  unint64_t v11 = (v6 + v7 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v11, v8);
  unint64_t v12 = (*(void *)(v10 + 56) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_weakDestroy();
  uint64_t v13 = type metadata accessor for CameraControls();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  uint64_t v16 = (unsigned __int8 *)((v12 + v15 + 8) & ~v15);
  if (*(void *)(v14 + 64) <= 8uLL) {
    uint64_t v17 = 8;
  }
  else {
    uint64_t v17 = *(void *)(v14 + 64);
  }
  unsigned int v18 = v16[v17];
  unsigned int v19 = v18 - 2;
  if (v18 >= 2)
  {
    if (v17 <= 3) {
      uint64_t v20 = v17;
    }
    else {
      uint64_t v20 = 4;
    }
    switch(v20)
    {
      case 1:
        int v21 = *v16;
        goto LABEL_13;
      case 2:
        int v21 = *(unsigned __int16 *)v16;
        goto LABEL_13;
      case 3:
        int v21 = *(unsigned __int16 *)v16 | (v16[2] << 16);
        goto LABEL_13;
      case 4:
        int v21 = *(_DWORD *)v16;
LABEL_13:
        int v22 = (v21 | (v19 << (8 * v17))) + 2;
        unsigned int v18 = v21 + 2;
        if (v17 < 4) {
          unsigned int v18 = v22;
        }
        break;
      default:
        break;
    }
  }
  if (v18 == 1) {
    (*(void (**)(unsigned __int8 *, uint64_t))(v14 + 8))(v16, v13);
  }
  else {
    swift_release();
  }
  uint64_t v23 = &v16[v17];
  uint64_t v24 = type metadata accessor for Image.DynamicRange();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(_DWORD *)(v25 + 80) & 0xF8 | 7;
  uint64_t v27 = (unsigned __int8 *)((unint64_t)&v23[v26 + 1] & ~v26);
  unint64_t v28 = *(void *)(v25 + 64);
  if (!*(_DWORD *)(v25 + 84)) {
    ++v28;
  }
  if (v28 <= 8) {
    uint64_t v29 = 8;
  }
  else {
    uint64_t v29 = v28;
  }
  unsigned int v30 = v27[v29];
  unsigned int v31 = v30 - 2;
  if (v30 >= 2)
  {
    if (v29 <= 3) {
      uint64_t v32 = v29;
    }
    else {
      uint64_t v32 = 4;
    }
    switch(v32)
    {
      case 1:
        int v33 = *v27;
        goto LABEL_32;
      case 2:
        int v33 = *(unsigned __int16 *)v27;
        goto LABEL_32;
      case 3:
        int v33 = *(unsigned __int16 *)v27 | (v27[2] << 16);
        goto LABEL_32;
      case 4:
        int v33 = *(_DWORD *)v27;
LABEL_32:
        int v34 = (v33 | (v31 << (8 * v29))) + 2;
        unsigned int v30 = v33 + 2;
        if (v29 < 4) {
          unsigned int v30 = v34;
        }
        break;
      default:
        break;
    }
  }
  if (v30 == 1)
  {
    if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48))(v27, 1, v24)) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v25 + 8))(v27, v24);
    }
  }
  else
  {
    swift_release();
  }
  unint64_t v35 = (unint64_t)&v27[v29 + 8] & 0xFFFFFFFFFFFFFFF8;
  uint64_t v36 = *(void *)v35;
  uint64_t v37 = *(unsigned __int8 *)(v35 + 8);

  return protocol witness for System.init(scene:) in conformance _RealityViewCameraControllerSystem(v36, v37);
}

void *initializeWithCopy for _RealityViewImpl(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = v6[1];
  *uint64_t v5 = *v6;
  v5[1] = v7;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  uint64_t v10 = *(void *)(v8 - 8) + 16;
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v8 - 8) + 80);
  uint64_t v12 = ((unint64_t)v5 + v11 + 16) & ~v11;
  uint64_t v13 = ((unint64_t)v6 + v11 + 16) & ~v11;
  swift_retain();
  swift_retain();
  v9(v12, v13, v8);
  uint64_t v14 = *(void *)(v10 + 48);
  uint64_t v15 = type metadata accessor for GeometryProxy();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v16 + 16;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = v14 + v18;
  uint64_t v20 = (v14 + v18 + v12) & ~v18;
  uint64_t v21 = (v19 + v13) & ~v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v20, v21, v15);
  uint64_t v22 = *(void *)(v17 + 48) + 7;
  unint64_t v23 = (v22 + v20) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v22 + v21) & 0xFFFFFFFFFFFFFFF8;
  swift_weakCopyInit();
  uint64_t v25 = type metadata accessor for CameraControls();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(_DWORD *)(v26 + 80) & 0xF8;
  uint64_t v28 = v27 + 15;
  unint64_t v29 = v27 + 15 + v23;
  unint64_t v30 = ~v27 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v31 = (void *)(v29 & v30);
  uint64_t v32 = (unsigned __int8 *)((v28 + v24) & v30);
  if (*(void *)(v26 + 64) <= 8uLL) {
    uint64_t v33 = 8;
  }
  else {
    uint64_t v33 = *(void *)(*(void *)(v25 - 8) + 64);
  }
  unsigned int v34 = v32[v33];
  unsigned int v35 = v34 - 2;
  if (v34 >= 2)
  {
    if (v33 <= 3) {
      uint64_t v36 = v33;
    }
    else {
      uint64_t v36 = 4;
    }
    switch(v36)
    {
      case 1:
        int v37 = *v32;
        goto LABEL_13;
      case 2:
        int v37 = *(unsigned __int16 *)v32;
        goto LABEL_13;
      case 3:
        int v37 = *(unsigned __int16 *)v32 | (v32[2] << 16);
        goto LABEL_13;
      case 4:
        int v37 = *(_DWORD *)v32;
LABEL_13:
        int v38 = (v37 | (v35 << (8 * v33))) + 2;
        unsigned int v34 = v37 + 2;
        if (v33 < 4) {
          unsigned int v34 = v38;
        }
        break;
      default:
        break;
    }
  }
  if (v34 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v26 + 16))(v31, v32, v25);
    char v39 = 1;
  }
  else
  {
    void *v31 = *(void *)v32;
    swift_retain();
    char v39 = 0;
  }
  *((unsigned char *)v31 + v33) = v39;
  uint64_t v40 = v33 + 1;
  uint64_t v41 = type metadata accessor for Image.DynamicRange();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(_DWORD *)(v42 + 80) & 0xF8 | 7;
  unint64_t v44 = (unint64_t)&v32[v40 + v43];
  unint64_t v45 = ((unint64_t)v31 + v40 + v43) & ~v43;
  uint64_t v46 = v44 & ~v43;
  if (*(_DWORD *)(v42 + 84)) {
    size_t v47 = *(void *)(v42 + 64);
  }
  else {
    size_t v47 = *(void *)(v42 + 64) + 1;
  }
  if (v47 <= 8) {
    uint64_t v48 = 8;
  }
  else {
    uint64_t v48 = v47;
  }
  unsigned int v49 = *(unsigned __int8 *)(v46 + v48);
  unsigned int v50 = v49 - 2;
  if (v49 >= 2)
  {
    if (v48 <= 3) {
      uint64_t v51 = v48;
    }
    else {
      uint64_t v51 = 4;
    }
    switch(v51)
    {
      case 1:
        int v52 = *(unsigned __int8 *)v46;
        goto LABEL_33;
      case 2:
        int v52 = *(unsigned __int16 *)v46;
        goto LABEL_33;
      case 3:
        int v52 = *(unsigned __int16 *)v46 | (*(unsigned __int8 *)(v46 + 2) << 16);
        goto LABEL_33;
      case 4:
        int v52 = *(_DWORD *)v46;
LABEL_33:
        int v53 = (v52 | (v50 << (8 * v48))) + 2;
        unsigned int v49 = v52 + 2;
        if (v48 < 4) {
          unsigned int v49 = v53;
        }
        break;
      default:
        break;
    }
  }
  if (v49 == 1)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v46, 1, v41))
    {
      memcpy((void *)v45, (const void *)v46, v47);
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v42 + 16))(v45, v46, v41);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v42 + 56))(v45, 0, 1, v41);
    }
    *(unsigned char *)(v45 + v48) = 1;
  }
  else
  {
    *(void *)unint64_t v45 = *(void *)v46;
    *(unsigned char *)(v45 + v48) = 0;
    swift_retain();
  }
  unint64_t v54 = ((v45 | 7) + v48 + 1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v55 = ((v46 | 7) + v48 + 1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v56 = *(void *)v55;
  unsigned __int8 v57 = *(unsigned char *)(v55 + 8);
  outlined copy of Environment<AnyShapeStyle?>.Content(*(void *)v55, v57);
  *(void *)unint64_t v54 = v56;
  *(unsigned char *)(v54 + 8) = v57;
  return a1;
}

void *assignWithCopy for _RealityViewImpl(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v7 + v12 + 16) & ~v12;
  uint64_t v14 = ((unint64_t)v8 + v12 + 16) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = type metadata accessor for GeometryProxy();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = v17 + 24;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = (v15 + v19 + v13) & ~v19;
  uint64_t v21 = (v15 + v19 + v14) & ~v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 24))(v20, v21, v16);
  uint64_t v22 = *(void *)(v18 + 40) + 7;
  unint64_t v23 = (v22 + v20) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v22 + v21) & 0xFFFFFFFFFFFFFFF8;
  swift_weakCopyAssign();
  uint64_t v25 = type metadata accessor for CameraControls();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(_DWORD *)(v26 + 80) & 0xF8;
  uint64_t v28 = v27 + 15;
  unint64_t v29 = v27 + 15 + v23;
  unint64_t v30 = ~v27 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v31 = (unsigned __int8 *)(v29 & v30);
  uint64_t v32 = (unsigned __int8 *)((v28 + v24) & v30);
  if (*(void *)(v26 + 64) <= 8uLL) {
    uint64_t v33 = 8;
  }
  else {
    uint64_t v33 = *(void *)(*(void *)(v25 - 8) + 64);
  }
  if (v31 != v32)
  {
    uint64_t v34 = v25;
    unsigned int v35 = v31[v33];
    unsigned int v36 = v35 - 2;
    if (v35 >= 2)
    {
      if (v33 <= 3) {
        uint64_t v37 = v33;
      }
      else {
        uint64_t v37 = 4;
      }
      switch(v37)
      {
        case 1:
          int v38 = *v31;
          goto LABEL_14;
        case 2:
          int v38 = *(unsigned __int16 *)v31;
          goto LABEL_14;
        case 3:
          int v38 = *(unsigned __int16 *)(v29 & v30) | (*(unsigned __int8 *)((v29 & v30) + 2) << 16);
          goto LABEL_14;
        case 4:
          int v38 = *(_DWORD *)v31;
LABEL_14:
          int v39 = (v38 | (v36 << (8 * v33))) + 2;
          unsigned int v35 = v38 + 2;
          if (v33 < 4) {
            unsigned int v35 = v39;
          }
          break;
        default:
          break;
      }
    }
    if (v35 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v26 + 8))(v31, v25);
    }
    else {
      swift_release();
    }
    unsigned int v40 = v32[v33];
    unsigned int v41 = v40 - 2;
    if (v40 >= 2)
    {
      if (v33 <= 3) {
        uint64_t v42 = v33;
      }
      else {
        uint64_t v42 = 4;
      }
      switch(v42)
      {
        case 1:
          int v43 = *v32;
          goto LABEL_28;
        case 2:
          int v43 = *(unsigned __int16 *)v32;
          goto LABEL_28;
        case 3:
          int v43 = *(unsigned __int16 *)v32 | (v32[2] << 16);
          goto LABEL_28;
        case 4:
          int v43 = *(_DWORD *)v32;
LABEL_28:
          int v44 = (v43 | (v41 << (8 * v33))) + 2;
          unsigned int v40 = v43 + 2;
          if (v33 < 4) {
            unsigned int v40 = v44;
          }
          break;
        default:
          break;
      }
    }
    if (v40 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 16))(v31, v32, v34);
      v31[v33] = 1;
    }
    else
    {
      *(void *)unsigned int v31 = *(void *)v32;
      v31[v33] = 0;
      swift_retain();
    }
  }
  uint64_t v45 = type metadata accessor for Image.DynamicRange();
  uint64_t v46 = *(void *)(v45 - 8);
  int v47 = *(_DWORD *)(v46 + 84);
  uint64_t v48 = *(_DWORD *)(v46 + 80) & 0xF8 | 7;
  uint64_t v49 = v33 + v48 + 1;
  unint64_t v50 = (unint64_t)&v31[v49];
  unint64_t v51 = (unint64_t)&v32[v49];
  int v52 = (unsigned __int8 *)(v50 & ~v48);
  uint64_t v53 = v51 & ~v48;
  unint64_t v54 = *(void *)(v46 + 64);
  if (v52 != (unsigned __int8 *)v53)
  {
    uint64_t v55 = v45;
    if (v47) {
      size_t v56 = *(void *)(v46 + 64);
    }
    else {
      size_t v56 = v54 + 1;
    }
    if (v56 <= 8) {
      uint64_t v57 = 8;
    }
    else {
      uint64_t v57 = v56;
    }
    unsigned int v58 = v52[v57];
    unsigned int v59 = v58 - 2;
    if (v58 >= 2)
    {
      if (v57 <= 3) {
        uint64_t v60 = v57;
      }
      else {
        uint64_t v60 = 4;
      }
      switch(v60)
      {
        case 1:
          int v61 = *v52;
          goto LABEL_49;
        case 2:
          int v61 = *(unsigned __int16 *)v52;
          goto LABEL_49;
        case 3:
          int v61 = *(unsigned __int16 *)v52 | (v52[2] << 16);
          goto LABEL_49;
        case 4:
          int v61 = *(_DWORD *)v52;
LABEL_49:
          int v62 = (v61 | (v59 << (8 * v57))) + 2;
          unsigned int v58 = v61 + 2;
          if (v57 < 4) {
            unsigned int v58 = v62;
          }
          break;
        default:
          break;
      }
    }
    if (v58 == 1)
    {
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v46 + 48))(v52, 1, v45)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v46 + 8))(v52, v55);
      }
    }
    else
    {
      swift_release();
    }
    unsigned int v63 = *(unsigned __int8 *)(v53 + v57);
    unsigned int v64 = v63 - 2;
    if (v63 >= 2)
    {
      if (v57 <= 3) {
        uint64_t v65 = v57;
      }
      else {
        uint64_t v65 = 4;
      }
      switch(v65)
      {
        case 1:
          int v66 = *(unsigned __int8 *)v53;
          goto LABEL_64;
        case 2:
          int v66 = *(unsigned __int16 *)v53;
          goto LABEL_64;
        case 3:
          int v66 = *(unsigned __int16 *)v53 | (*(unsigned __int8 *)(v53 + 2) << 16);
          goto LABEL_64;
        case 4:
          int v66 = *(_DWORD *)v53;
LABEL_64:
          int v67 = (v66 | (v64 << (8 * v57))) + 2;
          unsigned int v63 = v66 + 2;
          if (v57 < 4) {
            unsigned int v63 = v67;
          }
          break;
        default:
          break;
      }
    }
    if (v63 == 1)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v53, 1, v55))
      {
        memcpy(v52, (const void *)v53, v56);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v46 + 16))(v52, v53, v55);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v46 + 56))(v52, 0, 1, v55);
      }
      v52[v57] = 1;
    }
    else
    {
      *(void *)int v52 = *(void *)v53;
      v52[v57] = 0;
      swift_retain();
    }
  }
  if (v47) {
    unint64_t v68 = v54;
  }
  else {
    unint64_t v68 = v54 + 1;
  }
  if (v68 <= 8) {
    unint64_t v68 = 8;
  }
  unint64_t v69 = v68 + 1;
  unint64_t v70 = (((unint64_t)v52 | 7) + v69) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v71 = ((v53 | 7) + v69) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v72 = *(void *)v71;
  unsigned __int8 v73 = *(unsigned char *)(v71 + 8);
  outlined copy of Environment<AnyShapeStyle?>.Content(*(void *)v71, v73);
  uint64_t v74 = *(void *)v70;
  uint64_t v75 = *(unsigned __int8 *)(v70 + 8);
  *(void *)unint64_t v70 = v72;
  *(unsigned char *)(v70 + 8) = v73;
  protocol witness for System.init(scene:) in conformance _RealityViewCameraControllerSystem(v74, v75);
  return a1;
}

_OWORD *initializeWithTake for _RealityViewImpl(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)v4 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)v5 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 32);
  uint64_t v12 = type metadata accessor for GeometryProxy();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13 + 32;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v11 + v15 + v9) & ~v15;
  uint64_t v17 = (v11 + v15 + v10) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v16, v17, v12);
  uint64_t v18 = *(void *)(v14 + 32) + 7;
  unint64_t v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  swift_weakTakeInit();
  uint64_t v21 = type metadata accessor for CameraControls();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(_DWORD *)(v22 + 80) & 0xF8;
  uint64_t v24 = v23 + 15;
  unint64_t v25 = v23 + 15 + v19;
  unint64_t v26 = ~v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = (void *)(v25 & v26);
  uint64_t v28 = (unsigned __int8 *)((v24 + v20) & v26);
  if (*(void *)(v22 + 64) <= 8uLL) {
    uint64_t v29 = 8;
  }
  else {
    uint64_t v29 = *(void *)(*(void *)(v21 - 8) + 64);
  }
  unsigned int v30 = v28[v29];
  unsigned int v31 = v30 - 2;
  if (v30 >= 2)
  {
    if (v29 <= 3) {
      uint64_t v32 = v29;
    }
    else {
      uint64_t v32 = 4;
    }
    switch(v32)
    {
      case 1:
        int v33 = *v28;
        goto LABEL_13;
      case 2:
        int v33 = *(unsigned __int16 *)v28;
        goto LABEL_13;
      case 3:
        int v33 = *(unsigned __int16 *)v28 | (v28[2] << 16);
        goto LABEL_13;
      case 4:
        int v33 = *(_DWORD *)v28;
LABEL_13:
        int v34 = (v33 | (v31 << (8 * v29))) + 2;
        unsigned int v30 = v33 + 2;
        if (v29 < 4) {
          unsigned int v30 = v34;
        }
        break;
      default:
        break;
    }
  }
  if (v30 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v22 + 32))(v27, v28, v21);
    char v35 = 1;
  }
  else
  {
    char v35 = 0;
    *uint64_t v27 = *(void *)v28;
  }
  *((unsigned char *)v27 + v29) = v35;
  uint64_t v36 = v29 + 1;
  uint64_t v37 = type metadata accessor for Image.DynamicRange();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(_DWORD *)(v38 + 80) & 0xF8 | 7;
  unint64_t v40 = (unint64_t)&v28[v36 + v39];
  unint64_t v41 = ((unint64_t)v27 + v36 + v39) & ~v39;
  uint64_t v42 = v40 & ~v39;
  if (*(_DWORD *)(v38 + 84)) {
    size_t v43 = *(void *)(v38 + 64);
  }
  else {
    size_t v43 = *(void *)(v38 + 64) + 1;
  }
  if (v43 <= 8) {
    uint64_t v44 = 8;
  }
  else {
    uint64_t v44 = v43;
  }
  unsigned int v45 = *(unsigned __int8 *)(v42 + v44);
  unsigned int v46 = v45 - 2;
  if (v45 >= 2)
  {
    if (v44 <= 3) {
      uint64_t v47 = v44;
    }
    else {
      uint64_t v47 = 4;
    }
    switch(v47)
    {
      case 1:
        int v48 = *(unsigned __int8 *)v42;
        goto LABEL_33;
      case 2:
        int v48 = *(unsigned __int16 *)v42;
        goto LABEL_33;
      case 3:
        int v48 = *(unsigned __int16 *)v42 | (*(unsigned __int8 *)(v42 + 2) << 16);
        goto LABEL_33;
      case 4:
        int v48 = *(_DWORD *)v42;
LABEL_33:
        int v49 = (v48 | (v46 << (8 * v44))) + 2;
        unsigned int v45 = v48 + 2;
        if (v44 < 4) {
          unsigned int v45 = v49;
        }
        break;
      default:
        break;
    }
  }
  if (v45 == 1)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v42, 1, v37))
    {
      memcpy((void *)v41, (const void *)v42, v43);
      char v50 = 1;
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v38 + 32))(v41, v42, v37);
      char v50 = 1;
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v38 + 56))(v41, 0, 1, v37);
    }
  }
  else
  {
    char v50 = 0;
    *(void *)unint64_t v41 = *(void *)v42;
  }
  *(unsigned char *)(v41 + v44) = v50;
  unint64_t v51 = ((v42 | 7) + v44 + 1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v52 = *(void *)v51;
  unint64_t v53 = ((v41 | 7) + v44 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v53 + 8) = *(unsigned char *)(v51 + 8);
  *(void *)unint64_t v53 = v52;
  return a1;
}

_OWORD *assignWithTake for _RealityViewImpl(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 23;
  *a1 = *a2;
  swift_release();
  uint64_t v6 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v6 = *(_OWORD *)v5;
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)v6 + v9 + 16) & ~v9;
  uint64_t v11 = (v9 + 16 + v5) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24);
  uint64_t v13 = type metadata accessor for GeometryProxy();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v12 + v16 + v10) & ~v16;
  uint64_t v18 = (v12 + v16 + v11) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(v17, v18, v13);
  uint64_t v19 = *(void *)(v15 + 24) + 7;
  unint64_t v20 = (v19 + v17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (v19 + v18) & 0xFFFFFFFFFFFFFFF8;
  swift_weakTakeAssign();
  uint64_t v22 = type metadata accessor for CameraControls();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(_DWORD *)(v23 + 80) & 0xF8;
  uint64_t v25 = v24 + 15;
  unint64_t v26 = v24 + 15 + v20;
  unint64_t v27 = ~v24 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = (unsigned __int8 *)(v26 & v27);
  uint64_t v29 = (unsigned __int8 *)((v25 + v21) & v27);
  if (*(void *)(v23 + 64) <= 8uLL) {
    uint64_t v30 = 8;
  }
  else {
    uint64_t v30 = *(void *)(*(void *)(v22 - 8) + 64);
  }
  if (v28 != v29)
  {
    uint64_t v31 = v22;
    unsigned int v32 = v28[v30];
    unsigned int v33 = v32 - 2;
    if (v32 >= 2)
    {
      if (v30 <= 3) {
        uint64_t v34 = v30;
      }
      else {
        uint64_t v34 = 4;
      }
      switch(v34)
      {
        case 1:
          int v35 = *v28;
          goto LABEL_14;
        case 2:
          int v35 = *(unsigned __int16 *)v28;
          goto LABEL_14;
        case 3:
          int v35 = *(unsigned __int16 *)(v26 & v27) | (*(unsigned __int8 *)((v26 & v27) + 2) << 16);
          goto LABEL_14;
        case 4:
          int v35 = *(_DWORD *)v28;
LABEL_14:
          int v36 = (v35 | (v33 << (8 * v30))) + 2;
          unsigned int v32 = v35 + 2;
          if (v30 < 4) {
            unsigned int v32 = v36;
          }
          break;
        default:
          break;
      }
    }
    if (v32 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v23 + 8))(v28, v22);
    }
    else {
      swift_release();
    }
    unsigned int v37 = v29[v30];
    unsigned int v38 = v37 - 2;
    if (v37 >= 2)
    {
      if (v30 <= 3) {
        uint64_t v39 = v30;
      }
      else {
        uint64_t v39 = 4;
      }
      switch(v39)
      {
        case 1:
          int v40 = *v29;
          goto LABEL_28;
        case 2:
          int v40 = *(unsigned __int16 *)v29;
          goto LABEL_28;
        case 3:
          int v40 = *(unsigned __int16 *)v29 | (v29[2] << 16);
          goto LABEL_28;
        case 4:
          int v40 = *(_DWORD *)v29;
LABEL_28:
          int v41 = (v40 | (v38 << (8 * v30))) + 2;
          unsigned int v37 = v40 + 2;
          if (v30 < 4) {
            unsigned int v37 = v41;
          }
          break;
        default:
          break;
      }
    }
    if (v37 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(v28, v29, v31);
      char v42 = 1;
    }
    else
    {
      char v42 = 0;
      *(void *)uint64_t v28 = *(void *)v29;
    }
    v28[v30] = v42;
  }
  uint64_t v43 = type metadata accessor for Image.DynamicRange();
  uint64_t v44 = *(void *)(v43 - 8);
  int v45 = *(_DWORD *)(v44 + 84);
  uint64_t v46 = *(_DWORD *)(v44 + 80) & 0xF8 | 7;
  uint64_t v47 = v30 + v46 + 1;
  unint64_t v48 = (unint64_t)&v28[v47];
  unint64_t v49 = (unint64_t)&v29[v47];
  char v50 = (unsigned __int8 *)(v48 & ~v46);
  uint64_t v51 = v49 & ~v46;
  unint64_t v52 = *(void *)(v44 + 64);
  if (v50 != (unsigned __int8 *)v51)
  {
    uint64_t v53 = v43;
    if (v45) {
      size_t v54 = *(void *)(v44 + 64);
    }
    else {
      size_t v54 = v52 + 1;
    }
    if (v54 <= 8) {
      uint64_t v55 = 8;
    }
    else {
      uint64_t v55 = v54;
    }
    unsigned int v56 = v50[v55];
    unsigned int v57 = v56 - 2;
    if (v56 >= 2)
    {
      if (v55 <= 3) {
        uint64_t v58 = v55;
      }
      else {
        uint64_t v58 = 4;
      }
      switch(v58)
      {
        case 1:
          int v59 = *v50;
          goto LABEL_50;
        case 2:
          int v59 = *(unsigned __int16 *)v50;
          goto LABEL_50;
        case 3:
          int v59 = *(unsigned __int16 *)v50 | (v50[2] << 16);
          goto LABEL_50;
        case 4:
          int v59 = *(_DWORD *)v50;
LABEL_50:
          int v60 = (v59 | (v57 << (8 * v55))) + 2;
          unsigned int v56 = v59 + 2;
          if (v55 < 4) {
            unsigned int v56 = v60;
          }
          break;
        default:
          break;
      }
    }
    if (v56 == 1)
    {
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v44 + 48))(v50, 1, v43)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v44 + 8))(v50, v53);
      }
    }
    else
    {
      swift_release();
    }
    unsigned int v61 = *(unsigned __int8 *)(v51 + v55);
    unsigned int v62 = v61 - 2;
    if (v61 >= 2)
    {
      if (v55 <= 3) {
        uint64_t v63 = v55;
      }
      else {
        uint64_t v63 = 4;
      }
      switch(v63)
      {
        case 1:
          int v64 = *(unsigned __int8 *)v51;
          goto LABEL_65;
        case 2:
          int v64 = *(unsigned __int16 *)v51;
          goto LABEL_65;
        case 3:
          int v64 = *(unsigned __int16 *)v51 | (*(unsigned __int8 *)(v51 + 2) << 16);
          goto LABEL_65;
        case 4:
          int v64 = *(_DWORD *)v51;
LABEL_65:
          int v65 = (v64 | (v62 << (8 * v55))) + 2;
          unsigned int v61 = v64 + 2;
          if (v55 < 4) {
            unsigned int v61 = v65;
          }
          break;
        default:
          break;
      }
    }
    if (v61 == 1)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v51, 1, v53))
      {
        memcpy(v50, (const void *)v51, v54);
        char v66 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v44 + 32))(v50, v51, v53);
        char v66 = 1;
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v44 + 56))(v50, 0, 1, v53);
      }
    }
    else
    {
      char v66 = 0;
      *(void *)char v50 = *(void *)v51;
    }
    v50[v55] = v66;
  }
  if (v45) {
    unint64_t v67 = v52;
  }
  else {
    unint64_t v67 = v52 + 1;
  }
  if (v67 <= 8) {
    unint64_t v67 = 8;
  }
  unint64_t v68 = v67 + 1;
  unint64_t v69 = (((unint64_t)v50 | 7) + v68) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v70 = ((v51 | 7) + v68) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v71 = *(void *)v70;
  LOBYTE(v70) = *(unsigned char *)(v70 + 8);
  uint64_t v72 = *(void *)v69;
  uint64_t v73 = *(unsigned __int8 *)(v69 + 8);
  *(void *)unint64_t v69 = v71;
  *(unsigned char *)(v69 + 8) = v70;
  protocol witness for System.init(scene:) in conformance _RealityViewCameraControllerSystem(v72, v73);
  return a1;
}

uint64_t getEnumTagSinglePayload for _RealityViewImpl(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v33 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v33 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v32 = type metadata accessor for GeometryProxy();
  uint64_t v6 = *(void *)(v32 - 8);
  unsigned int v31 = *(_DWORD *)(v6 + 84);
  if (v5 <= v31) {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v7 = v5;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(void *)(type metadata accessor for CameraControls() - 8);
  unint64_t v10 = *(void *)(v9 + 64);
  if (v10 <= 8) {
    unint64_t v10 = 8;
  }
  unint64_t v34 = v10;
  uint64_t v11 = *(void *)(type metadata accessor for Image.DynamicRange() - 8);
  unint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v14 = *(void *)(v4 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v6 + 80);
  if (!*(_DWORD *)(v11 + 84)) {
    ++v12;
  }
  if (v12 <= 8) {
    unint64_t v12 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    uint64_t v16 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
    uint64_t v17 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
    unint64_t v18 = ((v12
          + ((v34
            + v17
            + ((v16
              + ((*(void *)(v6 + 64) + ((v14 + v15 + ((v13 + 32) & ~v13)) & ~v15) + 7) & 0xFFFFFFFFFFFFFFF8)
              + 8) & ~v16)
            + 1) & ~v17)
          + 8) & 0xFFFFFFFFFFFFFFF8)
        + 9;
    if (v18 < 4) {
      unsigned int v19 = ((a2 - v8 + 255) >> (8 * v18)) + 1;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v19 >= 0x10000) {
      unsigned int v20 = 4;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v19 < 0x100) {
      unsigned int v20 = 1;
    }
    if (v19 >= 2) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    switch(v21)
    {
      case 1:
        int v22 = a1[v18];
        if (!a1[v18]) {
          break;
        }
        goto LABEL_31;
      case 2:
        int v22 = *(unsigned __int16 *)&a1[v18];
        if (*(_WORD *)&a1[v18]) {
          goto LABEL_31;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x246684D6CLL);
      case 4:
        int v22 = *(_DWORD *)&a1[v18];
        if (!v22) {
          break;
        }
LABEL_31:
        int v24 = (v22 - 1) << (8 * v18);
        if (v18 >= 4) {
          int v24 = 0;
        }
        if (v18 == 1) {
          int v25 = *a1;
        }
        else {
          int v25 = *(_DWORD *)a1;
        }
        return v8 + (v25 | v24) + 1;
      default:
        break;
    }
  }
  if ((v7 & 0x80000000) != 0)
  {
    unint64_t v27 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v13 + 16) & ~v13;
    if (v5 == v8)
    {
      uint64_t v28 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
      uint64_t v29 = v5;
      uint64_t v30 = v33;
    }
    else
    {
      unint64_t v27 = (v27 + v14 + v15) & ~v15;
      uint64_t v28 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
      uint64_t v29 = v31;
      uint64_t v30 = v32;
    }
    return v28(v27, v29, v30);
  }
  else
  {
    uint64_t v26 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v26) = -1;
    }
    return (v26 + 1);
  }
}

void storeEnumTagSinglePayload for _RealityViewImpl(void *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v32 = v5;
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(type metadata accessor for GeometryProxy() - 8);
  unsigned int v31 = v6;
  if (v6 <= *(_DWORD *)(v7 + 84)) {
    unsigned int v8 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v8 = v6;
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = *(void *)(type metadata accessor for CameraControls() - 8);
  if (*(void *)(v10 + 64) <= 8uLL) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = *(void *)(v10 + 64);
  }
  uint64_t v12 = *(void *)(type metadata accessor for Image.DynamicRange() - 8);
  unint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v15 = *(void *)(v5 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  uint64_t v18 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  unint64_t v19 = (v11
       + v18
       + ((v17 + ((*(void *)(v7 + 64) + ((v15 + v16 + ((v14 + 32) & ~v14)) & ~v16) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v17)
       + 1) & ~v18;
  if (!*(_DWORD *)(v12 + 84)) {
    ++v13;
  }
  if (v13 <= 8) {
    unint64_t v13 = 8;
  }
  size_t v20 = ((v13 + v19 + 8) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v21 = 8 * v20;
  if (v9 >= a3)
  {
    int v24 = 0;
  }
  else
  {
    if (v20 <= 3) {
      unsigned int v22 = ((a3 - v9 + 255) >> v21) + 1;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v22 >= 0x10000) {
      int v23 = 4;
    }
    else {
      int v23 = 2;
    }
    if (v22 < 0x100) {
      int v23 = 1;
    }
    if (v22 >= 2) {
      int v24 = v23;
    }
    else {
      int v24 = 0;
    }
  }
  if (v9 < a2)
  {
    unsigned int v25 = (~v9 + a2) >> v21;
    if (v20 < 4) {
      int v26 = v25 + 1;
    }
    else {
      int v26 = 1;
    }
    if (v20 >= 4) {
      int v27 = ~v9 + a2;
    }
    else {
      int v27 = (~(_BYTE)v9 + a2);
    }
    bzero(a1, v20);
    if (v20 == 1) {
      *(unsigned char *)a1 = v27;
    }
    else {
      *(_DWORD *)a1 = v27;
    }
    switch(v24)
    {
      case 1:
        *((unsigned char *)a1 + v20) = v26;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v20) = v26;
        return;
      case 3:
        goto LABEL_61;
      case 4:
        *(_DWORD *)((char *)a1 + v20) = v26;
        return;
      default:
        return;
    }
  }
  switch(v24)
  {
    case 1:
      *((unsigned char *)a1 + v20) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_44;
    case 2:
      *(_WORD *)((char *)a1 + v20) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_44;
    case 3:
LABEL_61:
      __break(1u);
      JUMPOUT(0x24668519CLL);
    case 4:
      *(_DWORD *)((char *)a1 + v20) = 0;
      goto LABEL_43;
    default:
LABEL_43:
      if (a2)
      {
LABEL_44:
        if ((v8 & 0x80000000) != 0)
        {
          unint64_t v29 = ((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v14 + 16) & ~v14;
          if (v31 == v9)
          {
            uint64_t v30 = *(void (**)(unint64_t))(v32 + 56);
          }
          else
          {
            unint64_t v29 = (v29 + v15 + v16) & ~v16;
            uint64_t v30 = *(void (**)(unint64_t))(v7 + 56);
          }
          v30(v29);
        }
        else
        {
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v28 = a2 ^ 0x80000000;
            a1[1] = 0;
          }
          else
          {
            uint64_t v28 = a2 - 1;
          }
          *a1 = v28;
        }
      }
      return;
  }
}

void type metadata accessor for GeometryProxy?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for Environment<Image.DynamicRange?>.Content()
{
  if (!lazy cache variable for type metadata for Environment<Image.DynamicRange?>.Content)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Image.DynamicRange?);
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<Image.DynamicRange?>.Content);
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in _RealityViewImpl<A>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>>);
    type metadata accessor for LocalCoordinateSpace();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>();
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _PreferenceWritingModifier<RealityViewCameraConvertibleKey> and conformance _PreferenceWritingModifier<A>, &demangling cache variable for type metadata for _PreferenceWritingModifier<RealityViewCameraConvertibleKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>>);
    lazy protocol witness table accessor for type ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EnvironmentBackgroundStyleModifier<AnyShapeStyle> and conformance _EnvironmentBackgroundStyleModifier<A>, &demangling cache variable for type metadata for _EnvironmentBackgroundStyleModifier<AnyShapeStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type ViewAdaptor<ARView> and conformance ViewAdaptor<A>, &demangling cache variable for type metadata for ViewAdaptor<ARView>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle> and conformance _InsettableBackgroundShapeModifier<A, B>, &demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in _RealityViewImpl.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in _RealityViewImpl.body.getter(*(char **)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40), *(char **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #2 in _RealityViewImpl.body.getter()
{
  uint64_t v2 = *(void *)(type metadata accessor for _RealityViewImpl() - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in static ObjectCaptureSession.stopResourceLogging();
  return closure #2 in _RealityViewImpl.body.getter(v3, v4);
}

uint64_t objectdestroy_73Tm()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)type metadata accessor for _RealityViewImpl();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(*((void *)v2 - 1) + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4 + v2[10], v1);
  uint64_t v7 = v0 + v4 + v2[11];
  uint64_t v8 = type metadata accessor for GeometryProxy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_weakDestroy();
  uint64_t v9 = v0 + v4 + v2[13];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<CameraControls>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for CameraControls();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  uint64_t v11 = v6 + v2[14];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Image.DynamicRange?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for Image.DynamicRange();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
  }
  else
  {
    swift_release();
  }
  protocol witness for System.init(scene:) in conformance _RealityViewCameraControllerSystem(*(void *)(v6 + v2[15]), *(unsigned __int8 *)(v6 + v2[15] + 8));

  return MEMORY[0x270FA0238](v0, v4 + v5, v3 | 7);
}

id partial apply for closure #1 in closure #1 in _RealityViewImpl.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for _RealityViewImpl() - 8);
  uint64_t v2 = (void *)specialized closure #1 in closure #1 in _RealityViewImpl.body.getter(*(void *)(v0 + 32), v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));

  return v2;
}

uint64_t sub_246685958()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)type metadata accessor for _RealityViewImpl();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v6 = v0 + v4;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4 + v2[10], v1);
  uint64_t v7 = v0 + v4 + v2[11];
  uint64_t v8 = type metadata accessor for GeometryProxy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_weakDestroy();
  uint64_t v9 = v0 + v4 + v2[13];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<CameraControls>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for CameraControls();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  uint64_t v11 = v6 + v2[14];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Image.DynamicRange?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for Image.DynamicRange();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
  }
  else
  {
    swift_release();
  }
  protocol witness for System.init(scene:) in conformance _RealityViewCameraControllerSystem(*(void *)(v6 + v2[15]), *(unsigned __int8 *)(v6 + v2[15] + 8));
  swift_release();

  return MEMORY[0x270FA0238](v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t partial apply for closure #2 in closure #1 in _RealityViewImpl.body.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for _RealityViewImpl() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #2 in closure #1 in _RealityViewImpl.body.getter(a1, v1 + v4, v5);
}

uint64_t partial apply for closure #3 in closure #1 in _RealityViewImpl.body.getter(uint64_t a1, uint64_t a2, char a3)
{
  return closure #3 in closure #1 in _RealityViewImpl.body.getter(a1, a2, a3 & 1, v3);
}

uint64_t type metadata accessor for RealityViewCameraConvertible(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for RealityViewCameraConvertible);
}

uint64_t outlined init with take of RealityViewCameraContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RealityViewCameraContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in RealityViewCameraContent.cameraControlMagnifyGesture()()
{
  return _proto_RealityViewCameraController_v1.onMagnifyGestureChanged(_:)();
}

uint64_t lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t objectdestroy_90Tm()
{
  uint64_t v1 = (int *)type metadata accessor for RealityViewCameraContent(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;

  swift_release();
  uint64_t v6 = v0 + v3 + v1[6];
  uint64_t v7 = type metadata accessor for GeometryProxy();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v9 = v2 | 7;
  swift_release();
  uint64_t v10 = v5 + v1[8];
  swift_release();
  uint64_t v11 = v10 + *(int *)(type metadata accessor for RealityViewCamera(0) + 20);
  uint64_t v12 = type metadata accessor for CameraControls();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  swift_release();
  swift_release();
  uint64_t v13 = v1[11];
  uint64_t v14 = v5 + v13 + *(int *)(type metadata accessor for RealityViewRenderingEffects(0) + 28);
  uint64_t v15 = type metadata accessor for AntialiasingMode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  swift_release();

  return MEMORY[0x270FA0238](v0, v3 + v4, v9);
}

uint64_t partial apply for closure #2 in RealityViewCameraContent.cameraControlMagnifyGesture()()
{
  uint64_t v1 = type metadata accessor for RealityViewCameraContent(0);
  uint64_t v3 = *(void *)(v1 - 8);
  uint64_t result = v1 - 8;
  *(void *)(*(void *)(v0
                        + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
                        + *(int *)(result + 56))
            + 432) = 0xBFF0000000000000;
  return result;
}

uint64_t partial apply for closure #1 in RealityViewCameraContent.cameraControlDragGesture()(uint64_t a1)
{
  return partial apply for closure #1 in RealityViewCameraContent.cameraControlDragGesture()(a1, (uint64_t (*)(uint64_t, uint64_t))closure #1 in RealityViewCameraContent.cameraControlDragGesture());
}

uint64_t partial apply for closure #2 in RealityViewCameraContent.cameraControlDragGesture()(uint64_t a1)
{
  return partial apply for closure #1 in RealityViewCameraContent.cameraControlDragGesture()(a1, (uint64_t (*)(uint64_t, uint64_t))closure #2 in RealityViewCameraContent.cameraControlDragGesture());
}

uint64_t partial apply for closure #1 in RealityViewCameraContent.cameraControlDragGesture()(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for RealityViewCameraContent(0) - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if (a1)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    BOOL v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  BOOL v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  id v18[2] = v13;
  void v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t type metadata accessor for RealityViewCameraComponent(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for RealityViewCameraComponent);
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DynamicScanVolumeEstimator.SphereSample>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    memcpy(v12, v13, 48 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DeviceMotionEstimator.SpeedSample>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DeviceMotionEstimator.DerivativeRecord>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  uint64_t v15 = v8 << 6;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DeviceMotionEstimator.FrameRecord>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    memcpy(v12, v13, 48 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t vars8;

  Swift::Int v2 = static Hasher._hash(seed:_:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  Swift::Int v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

uint64_t sub_246687EB0()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_246687EE8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = v2 + 64;
  unint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (uint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            uint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  size_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  unint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v9 = a2 & ~v8;
  char v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    char v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      uint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 48 * a1 + 32);
    size_t v6 = 48 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + (a1 << 6) + 32);
    size_t v6 = v4 << 6;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 96 * a1 + 32);
    size_t v6 = 96 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 7) + 32;
    unint64_t v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for InFlightQueue<FreeformCloudRenderer.ResourceEntry>.Entry);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in closure #1 in _RealityViewImpl.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RealityViewCameraContent(0);
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a2 + *(int *)(type metadata accessor for _RealityViewImpl() + 44);
  uint64_t v12 = type metadata accessor for GeometryProxy();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  uint64_t v14 = a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content;
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)v10, v14 + *(int *)(v5 + 32), &demangling cache variable for type metadata for GeometryProxy?);
  swift_endAccess();
  outlined init with copy of RealityViewCameraContent(v14, (uint64_t)v7, type metadata accessor for RealityViewCameraContent);
  RealityViewCameraContent.makeSettings()();
  outlined destroy of RealityViewCameraContent((uint64_t)v7, type metadata accessor for RealityViewCameraContent);
  return *(void *)v14;
}

uint64_t sub_2466892A0()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in RealityViewCameraContent.ContentStorage.deinit(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in nonisolated_PrivateTearDown(of:);
  return closure #1 in RealityViewCameraContent.ContentStorage.deinit(a1, v4, v5, v6);
}

uint64_t partial apply for closure #2 in RealityViewCameraContent.camera.didset(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in nonisolated_PrivateTearDown(of:);
  return closure #2 in RealityViewCameraContent.camera.didset(a1, v4, v5, v6);
}

uint64_t objectdestroy_111Tm()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in RealityViewCameraContent.camera.didset(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in nonisolated_PrivateTearDown(of:);
  return closure #1 in RealityViewCameraContent.camera.didset(a1, v4, v5, v6);
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  unsigned int v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    int v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    unsigned int v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x263F167E8]);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x263F167E8]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          int v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        unsigned int v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v31)(unint64_t, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;

  uint64_t v2 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  unsigned int v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    int v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    unsigned int v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x263F16800]);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x263F16800]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          int v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        unsigned int v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t sub_246689B70()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@inout RealityViewCameraContent) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_246689BD0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.backgroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t sub_246689BFC()
{
  return EnvironmentValues.backgroundStyle.setter();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@inout RealityViewCameraContent) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_246689C50()
{
  return EnvironmentValues.allowedDynamicRange.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for RealityViewCameraComponent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?)
                 - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for GeometryProxy();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for RealityViewCameraComponent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GeometryProxy();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for RealityViewCameraComponent(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for GeometryProxy();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for RealityViewCameraComponent(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for GeometryProxy();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for RealityViewCameraComponent(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for GeometryProxy();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for RealityViewCameraComponent(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for GeometryProxy();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityViewCameraComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24668A3CC);
}

uint64_t sub_24668A3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for RealityViewCameraComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24668A450);
}

uint64_t sub_24668A450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void type metadata completion function for RealityViewCameraComponent()
{
  type metadata accessor for GeometryProxy?(319, &lazy cache variable for type metadata for GeometryProxy?, MEMORY[0x263F18910], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void **initializeBufferWithCopyOfBuffer for RealityViewCameraConvertible(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    int v7 = (char *)a1 + v6;
    int v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for GeometryProxy();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    uint64_t v11 = v4;
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for RealityViewCameraConvertible(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for GeometryProxy();
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void **initializeWithCopy for RealityViewCameraConvertible(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  int v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for GeometryProxy();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  id v10 = v4;
  v9(v6, v7, v8);
  return a1;
}

void **assignWithCopy for RealityViewCameraConvertible(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  int v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  id v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for GeometryProxy();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

void *initializeWithTake for RealityViewCameraConvertible(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for GeometryProxy();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void **assignWithTake for RealityViewCameraConvertible(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for GeometryProxy();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityViewCameraConvertible(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24668A918);
}

uint64_t sub_24668A918(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for GeometryProxy();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for RealityViewCameraConvertible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24668A9DC);
}

void *sub_24668A9DC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for GeometryProxy();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for RealityViewCameraConvertible()
{
  uint64_t result = type metadata accessor for GeometryProxy();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RealityViewCameraConvertibleKey()
{
  return &type metadata for RealityViewCameraConvertibleKey;
}

uint64_t sub_24668AB30()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for _TaskModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>>);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
  lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<MagnifyGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
  swift_getOpaqueTypeConformance2();
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type _TaskModifier and conformance _TaskModifier, MEMORY[0x263F189F8]);
  swift_getWitnessTable();
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Component in RealityViewCameraComponent()
{
  return lazy protocol witness table accessor for type _TaskModifier and conformance _TaskModifier(&lazy protocol witness table cache variable for type RealityViewCameraComponent and conformance RealityViewCameraComponent, (void (*)(uint64_t))type metadata accessor for RealityViewCameraComponent);
}

BOOL specialized static ObjectCaptureSharedSymbols.isNonExistentOrEmptyDirectory(_:)()
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if ((URL.isFileURL.getter() & 1) == 0) {
    return 0;
  }
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08850]), sel_init);
  char v15 = 0;
  uint64_t v1 = URL.path.getter();
  uint64_t v2 = (void *)MEMORY[0x24C533410](v1);
  swift_bridgeObjectRelease();
  unsigned __int8 v3 = objc_msgSend(v0, sel_fileExistsAtPath_isDirectory_, v2, &v15);

  if ((v3 & 1) == 0)
  {

    return 1;
  }
  if (v15)
  {
    uint64_t v4 = URL.path.getter();
    uint64_t v5 = (void *)MEMORY[0x24C533410](v4);
    swift_bridgeObjectRelease();
    id v14 = 0;
    id v6 = objc_msgSend(v0, sel_contentsOfDirectoryAtPath_error_, v5, &v14);

    id v7 = v14;
    if (v6)
    {
      uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v9 = v7;

      uint64_t v10 = *(void *)(v8 + 16);
      swift_bridgeObjectRelease();
      return v10 == 0;
    }
    id v12 = v14;
    uint64_t v13 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    return 1;
  }

  return 0;
}

uint64_t destroy for ARFreeformCapturingView()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ARFreeformCapturingView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ARFreeformCapturingView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ARFreeformCapturingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ARFreeformCapturingView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ARFreeformCapturingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ARFreeformCapturingView()
{
  return &type metadata for ARFreeformCapturingView;
}

uint64_t associated type witness table accessor for View.Body : View in ARFreeformCapturingView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in ARFreeformCapturingView.body.getter@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = static Alignment.center.getter();
  uint64_t v12 = v11;
  closure #1 in closure #1 in ARFreeformCapturingView.body.getter(a1, (char *)a2, (uint64_t *)v27);
  long long v26 = *a2;
  swift_beginAccess();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  swift_endAccess();
  outlined release of ReticleCenterView((uint64_t)&v26);
  v25[0] = *(long long *)((char *)a2 + 24);
  uint64_t v13 = swift_allocObject();
  long long v14 = a2[1];
  *(_OWORD *)(v13 + 16) = *a2;
  *(_OWORD *)(v13 + 32) = v14;
  *(void *)(v13 + 48) = *((void *)a2 + 4);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriptionView<Published<Bool>.Publisher, ZStack<TupleView<(ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>>);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(a3 + *(int *)(v15 + 52), v9, v6);
  long long v16 = v27[9];
  long long v17 = v27[10];
  long long v18 = v27[7];
  *(_OWORD *)(a3 + 144) = v27[8];
  *(_OWORD *)(a3 + 160) = v16;
  *(_OWORD *)(a3 + 176) = v17;
  long long v19 = v27[5];
  long long v20 = v27[6];
  *(_OWORD *)(a3 + 80) = v27[4];
  *(_OWORD *)(a3 + 96) = v19;
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v12;
  *(void *)(a3 + 192) = v28;
  *(_OWORD *)(a3 + 112) = v20;
  *(_OWORD *)(a3 + 128) = v18;
  long long v21 = v27[1];
  *(_OWORD *)(a3 + 16) = v27[0];
  *(_OWORD *)(a3 + 32) = v21;
  long long v22 = v27[3];
  *(_OWORD *)(a3 + 48) = v27[2];
  *(_OWORD *)(a3 + 64) = v22;
  char v23 = (uint64_t (**)())(a3 + *(int *)(v15 + 56));
  unsigned __int8 *v23 = partial apply for closure #2 in closure #1 in ARFreeformCapturingView.body.getter;
  v23[1] = (uint64_t (*)())v13;
  outlined retain of ReticleCenterView((uint64_t)&v26);
  outlined retain of ReticleCenterView((uint64_t)v25);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t closure #1 in closure #1 in ARFreeformCapturingView.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v58 = a3;
  uint64_t v59 = type metadata accessor for OpacityTransition();
  uint64_t v5 = *(void *)(v59 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v59);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unsigned int v57 = (char *)&v52 - v9;
  GeometryProxy.size.getter();
  double v11 = v10;
  uint64_t v52 = a1;
  GeometryProxy.size.getter();
  double v13 = v12;
  long long v75 = *(_OWORD *)a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined release of ReticleCenterView((uint64_t)&v75);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v66 = 0;
  int v65 = 0;
  int v64 = 0;
  uint64_t v63 = 0;
  unint64_t v67 = 0;
  unsigned int v62 = 0;
  long long v17 = 0;
  long long v18 = 0;
  unsigned int v61 = 0;
  uint64_t v19 = 0;
  uint64_t v60 = 0;
  if (LOBYTE(v69[0]) == 1)
  {
    double v20 = *((double *)a2 + 2);
    uint64_t v56 = (uint64_t)a2;
    long long v74 = *(_OWORD *)(a2 + 24);
    swift_retain();
    outlined retain of ReticleCenterView((uint64_t)&v75);
    outlined retain of ReticleCenterView((uint64_t)&v74);
    type metadata accessor for DataModel(0);
    _s19_RealityKit_SwiftUI9DataModelCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, (void (*)(uint64_t))type metadata accessor for DataModel);
    uint64_t v14 = ObservedObject.init(wrappedValue:)();
    uint64_t v15 = v21;
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain_n();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t result = outlined release of ReticleCenterView((uint64_t)&v75);
    char v23 = v69[0];
    if (!v69[0])
    {
      __break(1u);
      return result;
    }
    if (v13 >= v11) {
      double v24 = v11;
    }
    else {
      double v24 = v13;
    }
    *(double *)&uint64_t v25 = v24 * v20;
    specialized FreeformMiniView.init(model:renderer:)(v69[0], v69);
    char v66 = v69[0];
    int v65 = v69[1];
    int v64 = v69[2];
    uint64_t v63 = v69[3];
    unint64_t v67 = v69[4];
    long long v17 = (char *)v69[6];
    unsigned int v62 = v69[5];
    long long v18 = v69[7];
    unsigned int v61 = v69[8];

    outlined release of ReticleCenterView((uint64_t)&v75);
    outlined release of ReticleCenterView((uint64_t)&v74);
    outlined release of ReticleCenterView((uint64_t)&v75);
    long long v26 = v57;
    OpacityTransition.init()();
    uint64_t v27 = v59;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v26, v59);
    _s19_RealityKit_SwiftUI9DataModelCAC7Combine16ObservableObjectAAWlTm_0(&lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition, MEMORY[0x263F196B8]);
    uint64_t v60 = AnyTransition.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v26, v27);
    uint64_t v16 = v25;
    uint64_t v19 = 0x4034000000000000;
    a2 = (char *)v56;
  }
  uint64_t v55 = v19;
  long long v70 = *(_OWORD *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  uint64_t v59 = v15;
  unsigned int v57 = v17;
  uint64_t v56 = (uint64_t)v18;
  if (v68 == 1)
  {
    type metadata accessor for DataModel(0);
    _s19_RealityKit_SwiftUI9DataModelCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, (void (*)(uint64_t))type metadata accessor for DataModel);
    swift_retain();
    uint64_t v28 = ObservedObject.init(wrappedValue:)();
    uint64_t v30 = v29;
    unsigned __int8 v31 = static Edge.Set.all.getter();
    GeometryProxy.size.getter();
    GeometryProxy.size.getter();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v33 = v30;
    uint64_t v32 = v28;
    uint64_t v35 = v70;
    uint64_t v36 = BYTE8(v70);
    uint64_t v37 = v71;
    uint64_t v38 = v72;
    uint64_t v34 = v31;
    uint64_t v15 = v59;
    long long v39 = v73;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    long long v39 = 0uLL;
  }
  uint64_t v40 = (uint64_t)v66;
  uint64_t v41 = (uint64_t)v65;
  char v42 = v58;
  *uint64_t v58 = v14;
  v42[1] = v15;
  uint64_t v53 = v14;
  uint64_t v43 = v15;
  v42[2] = v16;
  v42[3] = v40;
  uint64_t v44 = v16;
  uint64_t v54 = v16;
  uint64_t v45 = (uint64_t)v64;
  v42[4] = v41;
  v42[5] = v45;
  uint64_t v46 = (uint64_t)v63;
  uint64_t v47 = v67;
  v42[6] = (uint64_t)v63;
  v42[7] = (uint64_t)v47;
  unint64_t v67 = v47;
  unint64_t v48 = v62;
  unint64_t v49 = v57;
  v42[8] = (uint64_t)v62;
  v42[9] = (uint64_t)v49;
  uint64_t v50 = (uint64_t)v61;
  v42[10] = v56;
  v42[11] = v50;
  uint64_t v51 = v60;
  v42[12] = v55;
  v42[13] = v51;
  v42[14] = v32;
  v42[15] = v33;
  v42[16] = v34;
  v42[17] = v35;
  v42[18] = v36;
  v42[19] = v37;
  v42[20] = v38;
  *(_OWORD *)(v42 + 21) = v39;
  outlined copy of ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?(v14, v43, v44, v40, v41, v45, v46, (uint64_t)v47, v48);
  return outlined consume of ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?(v53, v59, v54, v40, v41, v45, v46, (uint64_t)v67, v48);
}

uint64_t closure #2 in closure #1 in ARFreeformCapturingView.body.getter()
{
  return swift_release();
}

uint64_t protocol witness for View.body.getter in conformance ARFreeformCapturingView@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  *(void *)&v6[16] = *((void *)v1 + 4);
  *(_OWORD *)uint64_t v6 = v1[1];
  long long v7 = *v1;
  long long v8 = *(_OWORD *)&v6[8];
  uint64_t v3 = swift_allocObject();
  long long v4 = v1[1];
  *(_OWORD *)(v3 + 16) = *v1;
  *(_OWORD *)(v3 + 32) = v4;
  *(void *)(v3 + 48) = *((void *)v1 + 4);
  *a1 = partial apply for closure #1 in ARFreeformCapturingView.body.getter;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v3;
  outlined retain of ReticleCenterView((uint64_t)&v7);
  return outlined retain of ReticleCenterView((uint64_t)&v8);
}

uint64_t partial apply for closure #1 in ARFreeformCapturingView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in ARFreeformCapturingView.body.getter(a1, (long long *)(v2 + 16), a2);
}

uint64_t objectdestroyTm_4()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #2 in closure #1 in ARFreeformCapturingView.body.getter()
{
  return closure #2 in closure #1 in ARFreeformCapturingView.body.getter();
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in ARFreeformCapturingView.body.getter()
{
  return State.wrappedValue.setter();
}

void outlined copy of ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v9 = a9;
  }
}

uint64_t outlined consume of ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t _s19_RealityKit_SwiftUI9DataModelCAC7Combine16ObservableObjectAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeometryReader<SubscriptionView<Published<Bool>.Publisher, ZStack<TupleView<(ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>>> and conformance GeometryReader<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GeometryReader<SubscriptionView<Published<Bool>.Publisher, ZStack<TupleView<(ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>>> and conformance GeometryReader<A>;
  if (!lazy protocol witness table cache variable for type GeometryReader<SubscriptionView<Published<Bool>.Publisher, ZStack<TupleView<(ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>>> and conformance GeometryReader<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for GeometryReader<SubscriptionView<Published<Bool>.Publisher, ZStack<TupleView<(ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryReader<SubscriptionView<Published<Bool>.Publisher, ZStack<TupleView<(ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>>> and conformance GeometryReader<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShakeModifier()
{
  return &type metadata for ShakeModifier;
}

ValueMetadata *type metadata accessor for ObjectSelectionView()
{
  return &type metadata for ObjectSelectionView;
}

double closure #1 in ObjectSelectionView.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = static VerticalAlignment.center.getter();
  double v7 = a3 * 0.9;
  uint64_t v8 = *(void *)(a1 + 32);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) = 1;
  *(double *)(a2 + 56) = v7;
  *(double *)(a2 + 64) = v7;
  *(void *)(a2 + 72) = v8;
  *(void *)(a2 + 80) = v10;
  *(unsigned char *)(a2 + 88) = v11;
  *(void *)(a2 + 96) = v12;
  *(unsigned char *)(a2 + 104) = v13;
  double result = *(double *)&v14;
  *(_OWORD *)(a2 + 112) = v14;
  *(void *)(a2 + 128) = 0;
  *(unsigned char *)(a2 + 136) = 1;
  *(void *)(a2 + 144) = 0;
  *(unsigned char *)(a2 + 152) = 1;
  return result;
}

double protocol witness for View.body.getter in conformance ObjectSelectionView@<D0>(uint64_t a1@<X8>)
{
  long long v3 = *v1;
  long long v16 = v1[1];
  long long v15 = v3;
  uint64_t v17 = *((void *)v1 + 4);
  if (*((double *)&v16 + 1) >= *(double *)&v16) {
    double v4 = *(double *)&v16;
  }
  else {
    double v4 = *((double *)&v16 + 1);
  }
  uint64_t v5 = static HorizontalAlignment.center.getter();
  closure #1 in ObjectSelectionView.body.getter((uint64_t)&v15, (uint64_t)v12, v4);
  *(_OWORD *)&v14[119] = v12[7];
  *(_OWORD *)&v14[103] = v12[6];
  *(_OWORD *)&v14[55] = v12[3];
  *(_OWORD *)&v14[39] = v12[2];
  *(_OWORD *)&v14[135] = v13[0];
  *(_OWORD *)&v14[144] = *(_OWORD *)((char *)v13 + 9);
  *(_OWORD *)&v14[71] = v12[4];
  *(_OWORD *)&v14[87] = v12[5];
  *(_OWORD *)&v14[7] = v12[0];
  *(_OWORD *)&v14[23] = v12[1];
  long long v6 = *(_OWORD *)&v14[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v14[96];
  *(_OWORD *)(a1 + 129) = v6;
  long long v7 = *(_OWORD *)&v14[144];
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v14[128];
  *(_OWORD *)(a1 + 161) = v7;
  long long v8 = *(_OWORD *)&v14[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v14[32];
  *(_OWORD *)(a1 + 65) = v8;
  long long v9 = *(_OWORD *)&v14[80];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v14[64];
  *(_OWORD *)(a1 + 97) = v9;
  double result = *(double *)v14;
  long long v11 = *(_OWORD *)&v14[16];
  *(_OWORD *)(a1 + 17) = *(_OWORD *)v14;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 33) = v11;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance ObjectSelectionView(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

uint64_t associated type witness table accessor for View.Body : View in ObjectSelectionView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ShakeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ReticleView.Corner.segments.getter(char a1, double a2)
{
  switch(a1)
  {
    case 1:
      double v4 = a2 * 0.42 + 0.08;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Segment>);
      uint64_t result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_2466B5DE0;
      *(double *)(result + 32) = 1.0 - v4;
      long long v6 = xmmword_2466B7BA0;
      *(_OWORD *)(result + 40) = xmmword_2466B7BA0;
      goto LABEL_6;
    case 2:
      double v5 = a2 * 0.42 + 0.08;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Segment>);
      uint64_t result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_2466B5DE0;
      *(double *)(result + 32) = v5;
      long long v6 = xmmword_2466BC550;
      *(_OWORD *)(result + 40) = xmmword_2466BC550;
      double v4 = 1.0 - v5;
LABEL_6:
      *(_OWORD *)(result + 56) = v6;
      break;
    case 3:
      double v7 = a2 * 0.42 + 0.08;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Segment>);
      uint64_t result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_2466B5DE0;
      double v4 = 1.0;
      *(void *)(result + 32) = 0x3FF0000000000000;
      *(double *)(result + 40) = 1.0 - v7;
      __asm { FMOV            V1.2D, #1.0 }
      *(_OWORD *)(result + 48) = _Q1;
      *(double *)(result + 64) = 1.0 - v7;
      break;
    default:
      double v2 = a2 * 0.42 + 0.08;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Segment>);
      uint64_t result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_2466B5DE0;
      *(void *)(result + 32) = 0;
      *(double *)(result + 40) = v2;
      *(void *)(result + 48) = 0;
      *(void *)(result + 56) = 0;
      *(double *)(result + 64) = v2;
      double v4 = 0.0;
      break;
  }
  *(double *)(result + 72) = v4;
  return result;
}

void closure #1 in ReticleView.Corner.path(in:)(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, char a7)
{
  uint64_t v13 = ReticleView.Corner.segments.getter(a7, a1);
  if (!*(void *)(v13 + 16))
  {
    __break(1u);
    goto LABEL_9;
  }
  double v14 = *(double *)(v13 + 32);
  swift_bridgeObjectRelease();
  v28.origin.x = a2;
  v28.origin.y = a3;
  v28.size.CGFloat width = a4;
  v28.size.CGFloat height = a5;
  CGFloat Width = CGRectGetWidth(v28);
  uint64_t v16 = ReticleView.Corner.segments.getter(a7, a1);
  if (!*(void *)(v16 + 16))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  double v17 = *(double *)(v16 + 40);
  swift_bridgeObjectRelease();
  v29.origin.x = a2;
  v29.origin.y = a3;
  v29.size.CGFloat width = a4;
  v29.size.CGFloat height = a5;
  double Height = CGRectGetHeight(v29);
  if (*(void *)(ReticleView.Corner.segments.getter(a7, a1) + 16) < 2uLL)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  v30.origin.x = a2;
  v30.origin.y = a3;
  v30.size.CGFloat width = a4;
  v30.size.CGFloat height = a5;
  CGRectGetWidth(v30);
  if (*(void *)(ReticleView.Corner.segments.getter(a7, a1) + 16) < 2uLL)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  v31.origin.x = a2;
  v31.origin.y = a3;
  v31.size.CGFloat width = a4;
  v31.size.CGFloat height = a5;
  CGRectGetHeight(v31);
  uint64_t v18 = ReticleView.Corner.segments.getter(a7, a1);
  if (*(void *)(v18 + 16) < 3uLL)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  double v25 = Width;
  double v26 = v14;
  double v19 = *(double *)(v18 + 64);
  swift_bridgeObjectRelease();
  v32.origin.x = a2;
  v32.origin.y = a3;
  v32.size.CGFloat width = a4;
  v32.size.CGFloat height = a5;
  double v20 = CGRectGetWidth(v32);
  uint64_t v21 = ReticleView.Corner.segments.getter(a7, a1);
  if (*(void *)(v21 + 16) >= 3uLL)
  {
    *(double *)&unint64_t v24 = v19 * v20;
    double v22 = *(double *)(v21 + 72);
    swift_bridgeObjectRelease();
    v33.origin.x = a2;
    v33.origin.y = a3;
    v33.size.CGFloat width = a4;
    v33.size.CGFloat height = a5;
    *(double *)&unint64_t v23 = v22 * CGRectGetHeight(v33);
    Path.move(to:)((CGPoint)__PAIR128__(v17 * Height, v26 * v25));
    v34.origin.x = a2;
    v34.origin.y = a3;
    v34.size.CGFloat width = a4;
    v34.size.CGFloat height = a5;
    CGRectGetWidth(v34);
    Path.addArc(tangent1End:tangent2End:radius:transform:)();
    Path.addLine(to:)((CGPoint)__PAIR128__(v23, v24));
    return;
  }
LABEL_13:
  __break(1u);
}

double protocol witness for Shape.path(in:) in conformance ReticleView.Corner@<D0>(uint64_t a1@<X8>)
{
  Path.init(_:)();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t protocol witness for static Shape.role.getter in conformance ReticleView.Corner()
{
  return MEMORY[0x270F047E8]();
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance ReticleView.Corner()
{
  return MEMORY[0x270F047D8]();
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance ReticleView.Corner()
{
  return MEMORY[0x270F047C8]();
}

double protocol witness for Animatable.animatableData.getter in conformance ReticleView.Corner@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance ReticleView.Corner(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

double (*protocol witness for Animatable.animatableData.modify in conformance ReticleView.Corner(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *(void *)(v1 + 8);
  return protocol witness for Animatable.animatableData.modify in conformance ReticleView.Corner;
}

double protocol witness for Animatable.animatableData.modify in conformance ReticleView.Corner(uint64_t a1)
{
  double result = *(double *)a1;
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)a1;
  return result;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ReticleView.Corner()
{
  return MEMORY[0x270EFEBD0]();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ReticleView.Corner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ReticleView.Corner and conformance ReticleView.Corner();

  return MEMORY[0x270F04808](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ReticleView.Corner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ReticleView.Corner and conformance ReticleView.Corner();

  return MEMORY[0x270F047D0](a1, a2, a3, v6);
}

uint64_t protocol witness for View.body.getter in conformance ReticleView.Corner(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ReticleView.Corner and conformance ReticleView.Corner();

  return MEMORY[0x270F047E0](a1, v2);
}

uint64_t closure #1 in ReticleView.body.getter@<X0>(uint64_t a1@<X8>, double a2@<D2>)
{
  uint64_t v4 = static Color.white.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v5 = static Alignment.center.getter();
  uint64_t v20 = v6;
  uint64_t v21 = v5;
  uint64_t v7 = static Color.white.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v8 = static Alignment.center.getter();
  uint64_t v17 = v9;
  uint64_t v18 = v8;
  uint64_t v19 = static Color.white.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v10 = static Alignment.center.getter();
  uint64_t v12 = v11;
  uint64_t v13 = static Color.white.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v14 = static Alignment.center.getter();
  *(unsigned char *)a1 = 0;
  *(double *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = v22;
  *(void *)(a1 + 24) = v23;
  *(void *)(a1 + 32) = v24;
  *(void *)(a1 + 40) = v25;
  *(void *)(a1 + 48) = v26;
  *(void *)(a1 + 56) = v4;
  *(_WORD *)(a1 + 64) = 256;
  *(void *)(a1 + 72) = v21;
  *(void *)(a1 + 80) = v20;
  *(unsigned char *)(a1 + 88) = 1;
  *(double *)(a1 + 96) = a2;
  *(void *)(a1 + 104) = v27;
  *(void *)(a1 + 112) = v28;
  *(void *)(a1 + 120) = v29;
  *(void *)(a1 + 128) = v30;
  *(void *)(a1 + 136) = v31;
  *(void *)(a1 + 144) = v7;
  *(_WORD *)(a1 + 152) = 256;
  *(void *)(a1 + 160) = v18;
  *(void *)(a1 + 168) = v17;
  *(unsigned char *)(a1 + 176) = 2;
  *(double *)(a1 + 184) = a2;
  *(void *)(a1 + 192) = v32;
  *(void *)(a1 + 200) = v33;
  *(void *)(a1 + 208) = v34;
  *(void *)(a1 + 216) = v35;
  *(void *)(a1 + 224) = v36;
  *(void *)(a1 + 232) = v19;
  *(_WORD *)(a1 + 240) = 256;
  *(void *)(a1 + 248) = v10;
  *(void *)(a1 + 256) = v12;
  *(unsigned char *)(a1 + 264) = 3;
  *(double *)(a1 + 272) = a2;
  *(void *)(a1 + 280) = v37;
  *(void *)(a1 + 288) = v38;
  *(void *)(a1 + 296) = v39;
  *(void *)(a1 + 304) = v40;
  *(void *)(a1 + 312) = v41;
  *(void *)(a1 + 320) = v13;
  *(_WORD *)(a1 + 328) = 256;
  *(void *)(a1 + 336) = v14;
  *(void *)(a1 + 344) = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ReticleView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type ReticleView and conformance ReticleView();

  return MEMORY[0x270F03278](a1, a2, a3, v8, a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ReticleView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type ReticleView and conformance ReticleView();

  return MEMORY[0x270F03280](a1, a2, a3, v8, a4);
}

double protocol witness for View.body.getter in conformance ReticleView@<D0>(uint64_t a1@<X8>)
{
  double v3 = *(double *)(v1 + 16);
  uint64_t v4 = static Alignment.center.getter();
  uint64_t v6 = v5;
  closure #1 in ReticleView.body.getter((uint64_t)__src, v3);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  memcpy((void *)(a1 + 16), __src, 0x160uLL);
  *(void *)(a1 + 368) = v8;
  *(unsigned char *)(a1 + 376) = v9;
  *(void *)(a1 + 384) = v10;
  *(unsigned char *)(a1 + 392) = v11;
  double result = *(double *)&v12;
  *(_OWORD *)(a1 + 400) = v12;
  return result;
}

double protocol witness for Animatable.animatableData.getter in conformance ReticleView@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 16);
  *a1 = result;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance ReticleView(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 16) = *a1;
  return result;
}

double (*protocol witness for Animatable.animatableData.modify in conformance ReticleView(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *(void *)(v1 + 16);
  return protocol witness for Animatable.animatableData.modify in conformance ReticleView;
}

double protocol witness for Animatable.animatableData.modify in conformance ReticleView(uint64_t a1)
{
  double result = *(double *)a1;
  *(void *)(*(void *)(a1 + 8) + 16) = *(void *)a1;
  return result;
}

double protocol witness for Animatable.animatableData.getter in conformance ShakeModifier@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance ShakeModifier(double *a1)
{
  double result = *a1;
  *uint64_t v1 = *(void *)a1;
  return result;
}

double (*protocol witness for Animatable.animatableData.modify in conformance ShakeModifier(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance ShakeModifier;
}

double protocol witness for Animatable.animatableData.modify in conformance ShakeModifier(uint64_t a1)
{
  double result = *(double *)a1;
  **(void **)(a1 + 8) = *(void *)a1;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ShakeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type ShakeModifier and conformance ShakeModifier();

  return MEMORY[0x270F01128](a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ShakeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type ShakeModifier and conformance ShakeModifier();

  return MEMORY[0x270F01120](a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ShakeModifier()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ShakeModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v5 = v2[1];
  long double v6 = v5 * sin((*v2 * v2[2] + *v2 * v2[2]) * 3.14159265);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ViewModifier_Content<ShakeModifier>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ShakeModifier>, _OffsetEffect>);
  uint64_t v9 = a2 + *(int *)(result + 36);
  *(long double *)uint64_t v9 = v6;
  *(void *)(v9 + 8) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShakeModifier and conformance ShakeModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier;
  if (!lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier;
  if (!lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier;
  if (!lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier);
  }
  return result;
}

void *type metadata accessor for ReticleView()
{
  return &unk_26FAD0680;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ShakeModifier>, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ShakeModifier>, _OffsetEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ShakeModifier>, _OffsetEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ShakeModifier>, _OffsetEffect>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<ShakeModifier> and conformance _ViewModifier_Content<A>, &demangling cache variable for type metadata for _ViewModifier_Content<ShakeModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ShakeModifier>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_24668CF98()
{
  return lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(Spacer, HStack<TupleView<(Spacer, ModifiedContent<ReticleView, _FrameLayout>, Spacer)>>, Spacer)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(Spacer, HStack<TupleView<(Spacer, ModifiedContent<ReticleView, _FrameLayout>, Spacer)>>, Spacer)>>);
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in ReticleView()
{
  return MEMORY[0x263F1BB20];
}

uint64_t associated type witness table accessor for View.Body : View in ReticleView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ReticleView and conformance ReticleView()
{
  unint64_t result = lazy protocol witness table cache variable for type ReticleView and conformance ReticleView;
  if (!lazy protocol witness table cache variable for type ReticleView and conformance ReticleView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReticleView and conformance ReticleView);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReticleView.Corner(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[16]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ReticleView.Corner(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 3;
    }
  }
  return result;
}

void *type metadata accessor for ReticleView.Corner()
{
  return &unk_26FAD0708;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ZStack<TupleView<(StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>)>>, _FrameLayout>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type ZStack<TupleView<(StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ReticleView.Corner()
{
  return lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _ShapeView<ReticleView.Corner, ForegroundStyle> and conformance _ShapeView<A, B>, &demangling cache variable for type metadata for _ShapeView<ReticleView.Corner, ForegroundStyle>);
}

unint64_t lazy protocol witness table accessor for type ReticleView.Corner and conformance ReticleView.Corner()
{
  unint64_t result = lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner;
  if (!lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner;
  if (!lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner;
  if (!lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner);
  }
  return result;
}

void partial apply for closure #1 in ReticleView.Corner.path(in:)(uint64_t a1)
{
  closure #1 in ReticleView.Corner.path(in:)(*(double *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48), *(CGFloat *)(v1 + 56), a1, *(unsigned char *)(v1 + 16));
}

void *type metadata accessor for Segment()
{
  return &unk_26FAD0788;
}

unsigned char *storeEnumTagSinglePayload for ReticleView.Corner.Placement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24668D3B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ReticleView.Corner.Placement()
{
  return &unk_26FAD0820;
}

unint64_t lazy protocol witness table accessor for type ReticleView.Corner.Placement and conformance ReticleView.Corner.Placement()
{
  unint64_t result = lazy protocol witness table cache variable for type ReticleView.Corner.Placement and conformance ReticleView.Corner.Placement;
  if (!lazy protocol witness table cache variable for type ReticleView.Corner.Placement and conformance ReticleView.Corner.Placement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReticleView.Corner.Placement and conformance ReticleView.Corner.Placement);
  }
  return result;
}

id PostProcessRenderManager.mpsGaussianBlur.getter()
{
  uint64_t v1 = *(void **)(v0 + 64);
  if (v1)
  {
    id v2 = *(id *)(v0 + 64);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    int v4 = *(_DWORD *)(v0 + 40);
    id v5 = objc_allocWithZone(MEMORY[0x263F13288]);
    LODWORD(v6) = v4;
    id v7 = objc_msgSend(v5, sel_initWithDevice_sigma_, v3, v6);
    uint64_t v8 = *(void **)(v0 + 64);
    *(void *)(v0 + 64) = v7;
    id v2 = v7;

    uint64_t v1 = 0;
  }
  id v9 = v1;
  return v2;
}

id PostProcessRenderManager.mpsAddImages.getter()
{
  uint64_t v1 = *(void **)(v0 + 72);
  if (v1)
  {
    id v2 = *(id *)(v0 + 72);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F13228]), sel_initWithDevice_, *(void *)(v0 + 16));
    int v4 = *(void **)(v0 + 72);
    *(void *)(v0 + 72) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

id PostProcessRenderManager.mpsConverter.getter()
{
  uint64_t v1 = *(void **)(v0 + 80);
  if (v1)
  {
    id v2 = *(id *)(v0 + 80);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F13260]), sel_initWithDevice_, *(void *)(v0 + 16));
    int v4 = *(void **)(v0 + 80);
    *(void *)(v0 + 80) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

id PostProcessRenderManager.frameUniformsBuffer.getter()
{
  if (*(void *)(v0 + 88))
  {
    id v1 = *(id *)(v0 + 88);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  id result = objc_msgSend(*(id *)(v0 + 16), sel_newBufferWithLength_options_, 160, 0);
  if (result)
  {
    id v1 = result;
    *(void *)(v0 + 88) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t PostProcessRenderManager.init(device:)(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  v26[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<UIInterfaceOrientation>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_weakInit();
  swift_unknownObjectWeakInit();
  *(float *)(v4 + 40) = specialized static ExperimentSettings.loadPostProcessBloomSigma(default:)(9.0);
  *(unsigned char *)(v4 + 44) = 1;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = 0x3F4CCCCD3E4CCCCDLL;
  *(float *)(v4 + 128) = specialized static ExperimentSettings.loadDepthHazeFloor(default:)(0.025);
  *(unsigned char *)(v4 + 132) = 2;
  *(void *)(v4 + 136) = 0xFFF0000000000000;
  *(void *)(v4 + 144) = 0;
  *(void *)(v4 + 152) = 0x3FE0000000000000;
  uint64_t v10 = v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager__uiOrientation;
  v26[0] = (id)1;
  type metadata accessor for UIInterfaceOrientation(0);
  Atomic.init(wrappedValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v10, v9, v6);
  uint64_t v11 = OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager_useDepthHaze;
  *(unsigned char *)(v4 + v11) = (specialized static ExperimentSettings.loadDepthHazeDisabled(default:)(0) & 1) == 0;
  uint64_t v12 = OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager_useOcclusionHaze;
  *(unsigned char *)(v4 + v12) = (specialized static ExperimentSettings.loadOcclusionHazeDisabled(default:)(1u) & 1) == 0;
  uint64_t v13 = (id (**)(int, id, void *))(v4
                                            + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager_mpsCopyAllocator);
  *uint64_t v13 = closure #1 in variable initialization expression of PostProcessRenderManager.mpsCopyAllocator;
  v13[1] = 0;
  *(void *)(v4 + 16) = a1;
  uint64_t v14 = one-time initialization token for bundle;
  swift_unknownObjectRetain();
  if (v14 != -1) {
    swift_once();
  }
  v26[0] = 0;
  id v15 = objc_msgSend(a1, sel_newDefaultLibraryWithBundle_error_, static PostProcessRenderManager.bundle, v26);
  if (v15)
  {
    uint64_t v16 = v15;
    id v17 = v26[0];
    PostProcessRenderManager.makeCompositingPipeline(library:)(v16);
    if (v3)
    {
      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {
      PostProcessRenderManager.makeOcclusionHazePipeline(library:)(v16);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    id v18 = v26[0];
    swift_release();
    uint64_t v19 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)logger);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_2465C2000, v21, v22, "Can't get default Metal library for PostProcessRenderManager!", v23, 2u);
      MEMORY[0x24C5348D0](v23, -1, -1);
    }

    lazy protocol witness table accessor for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error();
    swift_allocError();
    *uint64_t v24 = 2;
    swift_willThrow();
  }
  swift_unknownObjectRelease();
  return v4;
}

uint64_t PostProcessRenderManager.attach(to:frameProcessor:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (uint64_t *)&v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for OS_dispatch_queue();
  *id v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  char v6 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    swift_unknownObjectWeakAssign();
    swift_weakAssign();
    *(unsigned char *)(v1 + 44) = dispatch thunk of ARView.__disableComposition.getter() & 1;
    dispatch thunk of ARView.__disableComposition.setter();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    uint64_t v8 = (void (*)(unsigned char *, void))ARView.renderCallbacks.modify();
    ARView.RenderCallbacks.postProcess.setter();
    v8(v9, 0);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in PostProcessRenderManager.attach(to:frameProcessor:)(void *a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    PostProcessRenderManager.render(context:)(a1);
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall PostProcessRenderManager.detach()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (uint64_t *)&v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for OS_dispatch_queue();
  *id v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  char v6 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    uint64_t v7 = MEMORY[0x24C5349C0](v1 + 32);
    if (v7)
    {
      uint64_t v8 = (void *)v7;
      id v9 = (void (*)(unsigned char *, void))ARView.renderCallbacks.modify();
      ARView.RenderCallbacks.postProcess.setter();
      v9(v12, 0);
    }
    uint64_t v10 = MEMORY[0x24C5349C0](v1 + 32);
    if (v10)
    {
      uint64_t v11 = (void *)v10;
      dispatch thunk of ARView.__disableComposition.setter();
    }
    swift_weakAssign();
    swift_unknownObjectWeakAssign();
  }
  else
  {
    __break(1u);
  }
}

id closure #1 in variable initialization expression of PostProcessRenderManager.mpsCopyAllocator(int a1, id a2, void *a3)
{
  id v4 = objc_msgSend(a2, sel_device);
  id v5 = objc_msgSend(a3, sel_width);
  id v6 = objc_msgSend(a3, sel_height);
  id v7 = objc_msgSend(a3, sel_pixelFormat);
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F12A50]), sel_init);
  objc_msgSend(v8, sel_setPixelFormat_, v7);
  objc_msgSend(v8, sel_setWidth_, v5);
  objc_msgSend(v8, sel_setHeight_, v6);
  objc_msgSend(v8, sel_setUsage_, 7);
  id v9 = objc_msgSend(v4, sel_newTextureWithDescriptor_, v8);
  swift_unknownObjectRelease();

  if (v9) {
    return v9;
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PostProcessRenderManager.makeCompositingPipeline(library:)(void *a1)
{
  v15[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v3 = (void *)MEMORY[0x24C533410](0xD000000000000021, 0x80000002466C3280);
  id v4 = objc_msgSend(a1, sel_newFunctionWithName_, v3);

  if (v4)
  {
    id v5 = *(void **)(v1 + 16);
    v15[0] = 0;
    id v6 = objc_msgSend(v5, sel_newComputePipelineStateWithFunction_error_, v4, v15);
    id v7 = v15[0];
    if (v6)
    {
      swift_unknownObjectRelease();
      *(void *)(v1 + 48) = v6;
    }
    else
    {
      uint64_t v14 = v7;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_2465C2000, v9, v10, "⚠️ Cannot create compositing pipeline ⚠️", v11, 2u);
      MEMORY[0x24C5348D0](v11, -1, -1);
    }

    lazy protocol witness table accessor for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error();
    swift_allocError();
    *uint64_t v12 = 0;
    return swift_willThrow();
  }
}

uint64_t PostProcessRenderManager.makeOcclusionHazePipeline(library:)(void *a1)
{
  v15[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v3 = (void *)MEMORY[0x24C533410](0xD000000000000023, 0x80000002466C3250);
  id v4 = objc_msgSend(a1, sel_newFunctionWithName_, v3);

  if (v4)
  {
    id v5 = *(void **)(v1 + 16);
    v15[0] = 0;
    id v6 = objc_msgSend(v5, sel_newComputePipelineStateWithFunction_error_, v4, v15);
    id v7 = v15[0];
    if (v6)
    {
      swift_unknownObjectRelease();
      *(void *)(v1 + 56) = v6;
    }
    else
    {
      uint64_t v14 = v7;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_2465C2000, v9, v10, "⚠️ Cannot create occlusion haze pipeline ⚠️", v11, 2u);
      MEMORY[0x24C5348D0](v11, -1, -1);
    }

    lazy protocol witness table accessor for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error();
    swift_allocError();
    *uint64_t v12 = 1;
    return swift_willThrow();
  }
}

void PostProcessRenderManager.render(context:)(void *a1)
{
  id v65 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<UIInterfaceOrientation>);
  uint64_t v64 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ARView.PostProcessContext();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v70 = 0;
  id v71 = 0;
  uint64_t v66 = v1;
  uint64_t v69 = 0;
  if (!swift_weakLoadStrong()) {
    goto LABEL_8;
  }
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = swift_weakInit();
  MEMORY[0x270FA5388](v10);
  *(&v61 - 4) = (uint8_t *)v9;
  *(&v61 - 3) = (uint8_t *)&v71;
  *(&v61 - 2) = (uint8_t *)&v69;
  *(&v61 - 1) = (uint8_t *)&v70;
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  swift_release();
  id v11 = v71;
  if (!v71 || !v69)
  {
LABEL_8:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)logger);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_2465C2000, v23, v24, "Can't pop the arFrame and camera frame!", v25, 2u);
      MEMORY[0x24C5348D0](v25, -1, -1);
    }

    goto LABEL_13;
  }
  double v12 = *(double *)(v66 + 136);
  uint64_t v63 = v69;
  if (v12 > -INFINITY)
  {
    id v13 = v71;
    swift_unknownObjectRetain();
    uint64_t v15 = (uint64_t)v65;
    uint64_t v14 = v66;
    int v16 = *(unsigned __int8 *)(v66 + 132);
    if (*(unsigned char *)(v66 + 132)) {
      goto LABEL_6;
    }
LABEL_26:
    uint64_t v58 = v11;
    id v59 = objc_msgSend((id)ARView.PostProcessContext.commandBuffer.getter(), sel_blitCommandEncoder);
    swift_unknownObjectRelease();
    if (v59)
    {
      swift_unknownObjectRetain();
      uint64_t v60 = ARView.PostProcessContext.sourceColorTexture.getter();
      objc_msgSend(v59, sel_copyFromTexture_toTexture_, v60, ARView.PostProcessContext.targetColorTexture.getter());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      objc_msgSend((id)swift_unknownObjectRetain(), sel_endEncoding);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();
    }
    else
    {
      swift_unknownObjectRelease();
    }

    goto LABEL_13;
  }
  uint64_t v26 = one-time initialization token for logger;
  id v27 = v71;
  swift_unknownObjectRetain();
  uint64_t v15 = (uint64_t)v65;
  if (v26 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v15, v5);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    unsigned int v62 = v29;
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 134349056;
    unsigned int v61 = v31 + 4;
    ARView.PostProcessContext.time.getter();
    uint64_t v29 = v62;
    uint64_t v68 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    _os_log_impl(&dword_2465C2000, v29, v30, "Got first ARFrame in compositor at time = %{public}f", v31, 0xCu);
    uint64_t v33 = v31;
    uint64_t v15 = (uint64_t)v65;
    MEMORY[0x24C5348D0](v33, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  ARView.PostProcessContext.time.getter();
  double v56 = v55;
  uint64_t v14 = v66;
  *(double *)(v66 + 136) = v55;
  type metadata accessor for RampAnimation();
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 64) = 0xFFF0000000000000;
  *(unsigned char *)(v57 + 24) = 0;
  *(void *)(v57 + 16) = 0x3FE0000000000000;
  *(_DWORD *)(v57 + 72) = 0;
  *(void *)(v57 + 32) = 0;
  *(void *)(v57 + 40) = 0;
  *(double *)(v57 + 48) = v56;
  *(double *)(v57 + 56) = v56 + 0.5;
  *(void *)(v14 + 144) = v57;
  swift_release();
  int v16 = *(unsigned __int8 *)(v14 + 132);
  if (!*(unsigned char *)(v14 + 132)) {
    goto LABEL_26;
  }
LABEL_6:
  if (v16 == 1)
  {
    id v17 = (void *)ARView.PostProcessContext.targetColorTexture.getter();
    ARView.PostProcessContext.projection.getter();
    uint64_t v18 = v14 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager__uiOrientation;
    swift_beginAccess();
    uint64_t v19 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v4, v18, v2);
    Atomic.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v2);
    specialized PostProcessRenderManager.updateUniforms(context:arFrame:arFrameTexture:viewportTexture:sceneProjection:viewOrientation:)(v15, v11, v17, v67);
    swift_unknownObjectRelease();
    uint64_t v20 = ARView.PostProcessContext.sourceColorTexture.getter();
    uint64_t v21 = ARView.PostProcessContext.targetColorTexture.getter();
    PostProcessRenderManager.executeCompositing(context:colorTexture:sourceTexture:destinationTexture:)(v15, v63, v20, v21);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

LABEL_13:
    swift_unknownObjectRelease();
LABEL_14:
    swift_unknownObjectRelease();

    return;
  }
  uint64_t v34 = (void *)ARView.PostProcessContext.targetColorTexture.getter();
  ARView.PostProcessContext.projection.getter();
  uint64_t v35 = v14 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager__uiOrientation;
  swift_beginAccess();
  uint64_t v36 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v4, v35, v2);
  Atomic.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v2);
  id v65 = v11;
  specialized PostProcessRenderManager.updateUniforms(context:arFrame:arFrameTexture:viewportTexture:sceneProjection:viewOrientation:)(v15, v11, v34, v67);
  swift_unknownObjectRelease();
  uint64_t v37 = (void *)ARView.PostProcessContext.targetColorTexture.getter();
  uint64_t v38 = *(void **)(v14 + 16);
  id v39 = objc_msgSend(v37, sel_width);
  id v40 = objc_msgSend(v37, sel_height);
  id v41 = objc_msgSend(v37, sel_pixelFormat);
  char v42 = (id *)(v66 + 96);
  swift_beginAccess();
  specialized static ARFrameProcessor.updateTexture(_:metalDevice:width:height:usage:pixelFormat:)(v42, v38, v39, v40, (id)7, v41);
  swift_endAccess();
  id v43 = objc_msgSend(v37, sel_width);
  id v44 = objc_msgSend(v37, sel_height);
  uint64_t v45 = v66;
  id v46 = objc_msgSend(v37, sel_pixelFormat);
  swift_beginAccess();
  specialized static ARFrameProcessor.updateTexture(_:metalDevice:width:height:usage:pixelFormat:)((id *)(v45 + 104), v38, v43, v44, (id)7, v46);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v47 = v70;
  swift_unknownObjectRetain();
  uint64_t v48 = ARView.PostProcessContext.sourceColorTexture.getter();
  swift_beginAccess();
  if (!*(void *)(v45 + 104))
  {
    __break(1u);
    goto LABEL_31;
  }
  PostProcessRenderManager.executeOcclusionHaze(context:arDepthTexture:sourceTexture:destinationTexture:)(v15, v47, v48, (void *)(v45 + 104));
  swift_endAccess();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v49 = ARView.PostProcessContext.commandBuffer.getter();
  uint64_t v50 = *(void *)(v45 + 104);
  if (!v50)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v51 = v49;
  swift_beginAccess();
  uint64_t v52 = v65;
  if (!*v42)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  swift_unknownObjectRetain();
  PostProcessRenderManager.executeBloom(commandBuffer:sourceTexture:destinationTexture:)(v51, v50, v42);
  swift_endAccess();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v53 = *(void *)(v45 + 96);
  if (v53)
  {
    swift_unknownObjectRetain();
    uint64_t v54 = ARView.PostProcessContext.targetColorTexture.getter();
    PostProcessRenderManager.executeCompositing(context:colorTexture:sourceTexture:destinationTexture:)(v15, v63, v53, v54);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    goto LABEL_14;
  }
LABEL_33:
  __break(1u);
}

float PostProcessRenderManager.getCameraFeedGain(at:)(Swift::Double a1)
{
  float v3 = 0.0;
  if (*(double *)(v1 + 136) > -INFINITY)
  {
    uint64_t v4 = v1;
    uint64_t v5 = *(void *)(v1 + 144);
    if (v5)
    {
      swift_retain();
      float v3 = RampAnimation.update(time:)(a1);
      double v7 = *(double *)(v5 + 56);
      double v6 = *(double *)(v5 + 64);
      swift_release();
      if (v7 < v6)
      {
        *(void *)(v4 + 144) = 0;
        swift_release();
      }
    }
    else
    {
      return 1.0;
    }
  }
  return v3;
}

void PostProcessRenderManager.executeBloom(commandBuffer:sourceTexture:destinationTexture:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = PostProcessRenderManager.mpsGaussianBlur.getter();
  objc_msgSend(v7, sel_encodeToCommandBuffer_sourceTexture_destinationTexture_, a1, a2, *a3);

  id v8 = PostProcessRenderManager.mpsAddImages.getter();
  uint64_t v9 = *(void *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager_mpsCopyAllocator);
  uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager_mpsCopyAllocator + 8);
  v12[4] = v9;
  v12[5] = v10;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed MPSKernel, @guaranteed MTLCommandBuffer, @guaranteed MTLTexture) -> (@owned MTLTexture);
  v12[3] = &block_descriptor_9;
  id v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_encodeToCommandBuffer_primaryTexture_inPlaceSecondaryTexture_fallbackCopyAllocator_, a1, a2, a3, v11);
  _Block_release(v11);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed MPSKernel, @guaranteed MTLCommandBuffer, @guaranteed MTLTexture) -> (@owned MTLTexture)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = *(uint64_t (**)(id, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  id v8 = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v9 = v7(v8, a3, a4);
  swift_release();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

uint64_t PostProcessRenderManager.executeCompositing(context:colorTexture:sourceTexture:destinationTexture:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = objc_msgSend((id)ARView.PostProcessContext.commandBuffer.getter(), sel_computeCommandEncoder);
  uint64_t result = swift_unknownObjectRelease();
  if (v8)
  {
    uint64_t v10 = *(void **)(v4 + 48);
    if (v10)
    {
      swift_unknownObjectRetain();
      objc_msgSend(v8, sel_setComputePipelineState_, v10);
      objc_msgSend(v8, sel_setBuffer_offset_atIndex_, PostProcessRenderManager.frameUniformsBuffer.getter(), 0, 0);
      swift_unknownObjectRelease();
      objc_msgSend(v8, sel_setTexture_atIndex_, a3, 0);
      objc_msgSend(v8, sel_setTexture_atIndex_, a2, 1);
      objc_msgSend(v8, sel_setTexture_atIndex_, a4, 2);
      id v11 = objc_msgSend((id)ARView.PostProcessContext.sourceColorTexture.getter(), sel_width);
      swift_unknownObjectRelease();
      id v12 = objc_msgSend((id)ARView.PostProcessContext.sourceColorTexture.getter(), sel_height);
      swift_unknownObjectRelease();
      uint64_t v13 = (uint64_t)objc_msgSend(v10, sel_threadExecutionWidth);
      uint64_t result = (uint64_t)objc_msgSend(v10, sel_maxTotalThreadsPerThreadgroup);
      if (v13)
      {
        if (result != 0x8000000000000000 || v13 != -1)
        {
          MTLSizeMake(v13, result / v13, &v18);
          uint64_t v14 = v19;
          long long v15 = v18;
          *(void *)&long long v18 = v11;
          *((void *)&v18 + 1) = v12;
          uint64_t v19 = 1;
          long long v16 = v15;
          uint64_t v17 = v14;
          objc_msgSend(v8, sel_dispatchThreads_threadsPerThreadgroup_, &v18, &v16);
          objc_msgSend(v8, sel_endEncoding);
          swift_unknownObjectRelease();
          return swift_unknownObjectRelease();
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t PostProcessRenderManager.executeOcclusionHaze(context:arDepthTexture:sourceTexture:destinationTexture:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  if (a2)
  {
    uint64_t v9 = *(void **)(v4 + 16);
    id v10 = objc_msgSend((id)swift_unknownObjectRetain(), sel_width);
    id v11 = objc_msgSend(a2, sel_height);
    swift_beginAccess();
    specialized static ARFrameProcessor.updateTexture(_:metalDevice:width:height:usage:pixelFormat:)((id *)(v5 + 112), v9, v10, v11, (id)3, (id)0x19);
    swift_endAccess();
    uint64_t result = ARView.PostProcessContext.commandBuffer.getter();
    uint64_t v13 = *(void *)(v5 + 112);
    if (!v13) {
      goto LABEL_14;
    }
    uint64_t v14 = result;
    swift_unknownObjectRetain();
    id v15 = PostProcessRenderManager.mpsConverter.getter();
    objc_msgSend(v15, sel_encodeToCommandBuffer_sourceTexture_destinationTexture_, v14, a2, v13);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  id v16 = objc_msgSend((id)ARView.PostProcessContext.commandBuffer.getter(), sel_computeCommandEncoder);
  uint64_t result = swift_unknownObjectRelease();
  if (!v16) {
    return result;
  }
  uint64_t v17 = *(void **)(v5 + 56);
  if (v17)
  {
    swift_unknownObjectRetain();
    objc_msgSend(v16, sel_setComputePipelineState_, v17);
    objc_msgSend(v16, sel_setBuffer_offset_atIndex_, PostProcessRenderManager.frameUniformsBuffer.getter(), 0, 0);
    swift_unknownObjectRelease();
    objc_msgSend(v16, sel_setTexture_atIndex_, a3, 0);
    objc_msgSend(v16, sel_setTexture_atIndex_, ARView.PostProcessContext.sourceDepthTexture.getter(), 1);
    swift_unknownObjectRelease();
    swift_beginAccess();
    objc_msgSend(v16, sel_setTexture_atIndex_, *(void *)(v5 + 112), 2);
    long long v18 = (void *)*a4;
    objc_msgSend(v16, sel_setTexture_atIndex_, *a4, 3);
    id v19 = objc_msgSend(v18, sel_width);
    id v20 = objc_msgSend(v18, sel_height);
    uint64_t v21 = (uint64_t)objc_msgSend(v17, sel_threadExecutionWidth);
    uint64_t result = (uint64_t)objc_msgSend(v17, sel_maxTotalThreadsPerThreadgroup);
    if (v21)
    {
      if (result != 0x8000000000000000 || v21 != -1)
      {
        MTLSizeMake(v21, result / v21, &v26);
        uint64_t v22 = v27;
        long long v23 = v26;
        *(void *)&long long v26 = v19;
        *((void *)&v26 + 1) = v20;
        uint64_t v27 = 1;
        long long v24 = v23;
        uint64_t v25 = v22;
        objc_msgSend(v16, sel_dispatchThreads_threadsPerThreadgroup_, &v26, &v24);
        objc_msgSend(v16, sel_endEncoding);
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  return swift_unknownObjectRelease();
}

id *PostProcessRenderManager.deinit()
{
  swift_unknownObjectRelease();
  swift_weakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager__uiOrientation;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<UIInterfaceOrientation>);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t PostProcessRenderManager.__deallocating_deinit()
{
  PostProcessRenderManager.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PostProcessRenderManager()
{
  return type metadata accessor for PostProcessRenderManager();
}

uint64_t type metadata accessor for PostProcessRenderManager()
{
  uint64_t result = type metadata singleton initialization cache for PostProcessRenderManager;
  if (!type metadata singleton initialization cache for PostProcessRenderManager) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for PostProcessRenderManager()
{
  type metadata accessor for Atomic<UIInterfaceOrientation>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for Atomic<UIInterfaceOrientation>()
{
  if (!lazy cache variable for type metadata for Atomic<UIInterfaceOrientation>)
  {
    type metadata accessor for UIInterfaceOrientation(255);
    unint64_t v0 = type metadata accessor for Atomic();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Atomic<UIInterfaceOrientation>);
    }
  }
}

ValueMetadata *type metadata accessor for PostProcessRenderManager.Technique()
{
  return &type metadata for PostProcessRenderManager.Technique;
}

unint64_t lazy protocol witness table accessor for type PostProcessRenderManager.Technique and conformance PostProcessRenderManager.Technique()
{
  unint64_t result = lazy protocol witness table cache variable for type PostProcessRenderManager.Technique and conformance PostProcessRenderManager.Technique;
  if (!lazy protocol witness table cache variable for type PostProcessRenderManager.Technique and conformance PostProcessRenderManager.Technique)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PostProcessRenderManager.Technique and conformance PostProcessRenderManager.Technique);
  }
  return result;
}

uint64_t MTLSizeMake@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  a3[2] = 1;
  return result;
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t sub_24668F878()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in FrameCache.pop(arFrame:textureYCbCr:textureDepth:)@<X0>(char *a1@<X8>)
{
  return closure #1 in FrameCache.pop(arFrame:textureYCbCr:textureDepth:)(*(void ***)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), a1);
}

float specialized PostProcessRenderManager.updateUniforms(context:arFrame:arFrameTexture:viewportTexture:sceneProjection:viewOrientation:)(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  id v9 = PostProcessRenderManager.frameUniformsBuffer.getter();
  id v10 = (char *)objc_msgSend(v9, sel_contents);
  id v11 = v9;
  id v12 = objc_msgSend(a3, sel_width);
  double v13 = (double)(uint64_t)objc_msgSend(a3, sel_height);
  ARView.PostProcessContext.time.getter();
  *((float *)v10 + 28) = PostProcessRenderManager.getCameraFeedGain(at:)(v14);
  objc_msgSend(a2, sel_displayTransformForOrientation_viewportSize_, a4, (double)(uint64_t)v12, v13);
  CGAffineTransformInvert(&v23, &v24);
  CGAffineTransform v24 = v23;
  specialized simd_float3x3.init(cgTransform:vectorType:)(&v24.a, 0, (int32x4_t *)&v23);
  long long v15 = *(_OWORD *)&v23.c;
  *(_OWORD *)id v10 = *(_OWORD *)&v23.a;
  *((_OWORD *)v10 + 1) = v15;
  *((_OWORD *)v10 + 2) = *(_OWORD *)&v23.tx;
  ARView.PostProcessContext.projection.getter();
  *((_OWORD *)v10 + 3) = v16;
  *((_OWORD *)v10 + 4) = v17;
  *((_OWORD *)v10 + 5) = v18;
  *((_OWORD *)v10 + 6) = v19;
  char v20 = *(unsigned char *)(v5 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager_useDepthHaze);
  float result = *(float *)(v5 + 128);
  char v22 = *(unsigned char *)(v5 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager_useOcclusionHaze);
  *(void *)&long long v17 = *(void *)(v5 + 120);
  *(_OWORD *)(v10 + 116) = xmmword_2466BC920;
  *((float *)v10 + 33) = result;
  *((void *)v10 + 17) = v17;
  v10[144] = v22;
  v10[145] = 1;
  v10[146] = v20;
  return result;
}

unint64_t lazy protocol witness table accessor for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error;
  if (!lazy protocol witness table cache variable for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error;
  if (!lazy protocol witness table cache variable for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error);
  }
  return result;
}

uint64_t partial apply for closure #1 in PostProcessRenderManager.attach(to:frameProcessor:)(void *a1)
{
  return closure #1 in PostProcessRenderManager.attach(to:frameProcessor:)(a1);
}

unsigned char *storeEnumTagSinglePayload for PostProcessRenderManager.Technique(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24668FB70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostProcessRenderManager.Error()
{
  return &type metadata for PostProcessRenderManager.Error;
}

void CameraFrustumRenderer.showShotLocations.didset(char a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v7 = 67109120;
    LODWORD(v25[0]) = *(unsigned __int8 *)(v2 + 24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_2465C2000, v5, v6, "Set showShotLocations to %{BOOL}d", v7, 8u);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }
  else
  {

    swift_release();
  }
  int v8 = *(unsigned __int8 *)(v2 + 24);
  if (v8 != (a1 & 1))
  {
    if (v8)
    {
      char v9 = 0;
    }
    else
    {
      *(void *)(v2 + 208) = 0;
      *(void *)(v2 + 56) = 0;
      swift_unknownObjectRelease();
      char v9 = *(unsigned char *)(v2 + 24) ^ 1;
    }
    swift_beginAccess();
    outlined init with copy of Animation?(v2 + 216, (uint64_t)v25);
    uint64_t v10 = *((void *)&v25[1] + 1);
    if (*((void *)&v25[1] + 1))
    {
      outlined init with copy of Cancellable((uint64_t)v25, (uint64_t)v23);
      outlined destroy of Animation?((uint64_t)v25);
      __swift_project_boxed_opaque_existential_1(v23, v24);
      uint64_t v11 = COERCE_UNSIGNED_INT(RampAnimation.update(time:)(*(Swift::Double *)(v2 + 72)));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    }
    else
    {
      outlined destroy of Animation?((uint64_t)v25);
      uint64_t v11 = 0;
    }
    BOOL v12 = v10 == 0;
    uint64_t v13 = type metadata accessor for RampAnimation();
    swift_allocObject();
    LOBYTE(v25[0]) = v12;
    uint64_t v14 = RampAnimation.init(type:duration:target:startValue:)(v9 & 1, 0, 0, v11 | ((unint64_t)v12 << 32), 0.5);
    *((void *)&v25[1] + 1) = v13;
    *(void *)&_OWORD v25[2] = &protocol witness table for RampAnimation;
    *(void *)&v25[0] = v14;
    outlined init with take of Animation?((uint64_t)v25, (uint64_t)v23);
    swift_beginAccess();
    outlined assign with take of Animation?((uint64_t)v23, v2 + 216);
    swift_endAccess();
    outlined init with copy of Animation?(v2 + 216, (uint64_t)v23);
    if (v24)
    {
      outlined init with copy of Cancellable((uint64_t)v23, (uint64_t)v21);
      outlined destroy of Animation?((uint64_t)v23);
      long long v20 = v22;
      long long v15 = __swift_project_boxed_opaque_existential_1(v21, v22);
      double v16 = *(double *)(v2 + 72);
      *(_OWORD *)((char *)&v25[1] + 8) = v20;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v25);
      uint64_t v18 = *v15;
      double v19 = v16 + *(double *)(*v15 + 16);
      *(double *)(v18 + 48) = v16;
      *(double *)(v18 + 56) = v19;
      uint64_t *boxed_opaque_existential_1 = v18;
      swift_retain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    }
    else
    {
      outlined destroy of Animation?((uint64_t)v23);
      memset(v25, 0, 40);
    }
    outlined destroy of Animation?((uint64_t)v25);
  }
}

void CameraFrustumRenderer.setup(device:pixelFormat:)(void *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)logger);
  int v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_2465C2000, v8, v9, "Setting up CameraFrustumRenderer!", v10, 2u);
    MEMORY[0x24C5348D0](v10, -1, -1);
  }

  v4[4] = a1;
  swift_unknownObjectRetain_n();
  swift_unknownObjectRelease();
  type metadata accessor for CameraFrustumMesh();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_DWORD *)(v11 + 64) = 1000593162;
  *(_OWORD *)(v11 + 72) = xmmword_2466BCBC0;
  *(void *)(v11 + 88) = 0x3CA3D70A3CF5C28FLL;
  *(void *)(v11 + 96) = 32;
  *(void *)(v11 + 104) = 0x3CA3D70A3C75C28FLL;
  *(_DWORD *)(v11 + 112) = 981668463;
  *(void *)(v11 + 120) = 32;
  CameraFrustumMesh.setConeMTLBuffer(device:coneHeight:coneBaseRadius:coneBaseSegments:)(a1, 32, 0.03, 0.02);
  CameraFrustumMesh.setHollowCylinderMTLBuffer(device:zOffset:innerRadius:outerRadius:height:circleSegments:)(a1, 32, -0.03, 0.015, 0.02, 0.001);
  CameraFrustumMesh.setSphereMTLBuffer(device:radius:radialSegments:verticalSegments:)((uint64_t *)a1, 16, 8uLL, 0.005);
  swift_unknownObjectRelease();
  v4[8] = v11;
  swift_release();
  CameraFrustumRenderer.initRenderPipeline(pixelFormat:)(a2);
  if (!v3)
  {
    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128A0]), sel_init);
    objc_msgSend(v12, sel_setDepthCompareFunction_, 1);
    objc_msgSend(v12, sel_setDepthWriteEnabled_, 1);
    id v13 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v12);

    if (v13)
    {
      v4[6] = v13;
      swift_unknownObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
}

void CameraFrustumRenderer.render(into:desc:)(void *a1, void *a2)
{
  if (*(float *)(v2 + 256) > 0.001)
  {
    if (*(void *)(v2 + 40))
    {
      uint64_t v5 = MEMORY[0x24C5349C0](v2 + 16);
      if (v5)
      {
        os_log_type_t v6 = (void *)v5;
        uint64_t v7 = v5 + OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_shots;
        swift_beginAccess();
        if (*(void *)(*(void *)v7 + 16))
        {
          CameraFrustumRenderer.createPosesMTLBufferIfNeeded()();
          id v8 = objc_msgSend(a2, sel_colorAttachments);
          id v9 = objc_msgSend(v8, sel_objectAtIndexedSubscript_, 0);

          if (!v9)
          {
            __break(1u);
            return;
          }
          objc_msgSend(v9, sel_setLoadAction_, 1);

          CameraFrustumRenderer.renderCone(into:desc:)(a1, (uint64_t)a2);
          CameraFrustumRenderer.renderHollowCylinder(into:desc:)(a1, (uint64_t)a2);
          CameraFrustumRenderer.renderSphere(into:desc:)(a1, (uint64_t)a2);
        }
      }
    }
  }
}

Swift::Void __swiftcall CameraFrustumRenderer.update(time:worldToView:viewToClip:)(Swift::Double time, simd_float4x4 *worldToView, simd_float4x4 *viewToClip)
{
  uint64_t v11 = v3;
  *(Swift::Double *)(v3 + 72) = time;
  *(_OWORD *)(v3 + 80) = v4;
  *(_OWORD *)(v3 + 96) = v5;
  *(_OWORD *)(v3 + 112) = v6;
  *(_OWORD *)(v3 + 128) = v7;
  *(_OWORD *)(v3 + 144) = v8;
  *(_OWORD *)(v3 + 160) = v9;
  *(_OWORD *)(v3 + 176) = v10;
  *(_OWORD *)(v3 + 192) = v21;
  uint64_t v13 = v3 + 216;
  swift_beginAccess();
  outlined init with copy of Animation?(v13, (uint64_t)&v16);
  if (*((void *)&v17 + 1))
  {
    outlined init with take of Animation(&v16, (uint64_t)v19);
    uint64_t v14 = __swift_project_boxed_opaque_existential_1(v19, v20);
    if (*(double *)(*v14 + 56) >= *(double *)(*v14 + 64))
    {
      __swift_project_boxed_opaque_existential_1(v19, v20);
      *(Swift::Float *)(v11 + 256) = RampAnimation.update(time:)(time);
    }
    else
    {
      float v15 = 0.0;
      if (*(unsigned char *)(v11 + 24)) {
        float v15 = 1.0;
      }
      *(float *)(v11 + 256) = v15;
      uint64_t v18 = 0;
      long long v16 = 0u;
      long long v17 = 0u;
      swift_beginAccess();
      outlined assign with take of Animation?((uint64_t)&v16, v13);
      swift_endAccess();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    outlined destroy of Animation?((uint64_t)&v16);
  }
}

void CameraFrustumRenderer.initRenderPipeline(pixelFormat:)(uint64_t a1)
{
  v35[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(v1 + 32);
  if (!v2) {
    __break(1u);
  }
  uint64_t v4 = one-time initialization token for bundle;
  swift_unknownObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  v35[0] = 0;
  id v5 = objc_msgSend(v2, sel_newDefaultLibraryWithBundle_error_, static BaseRenderer.bundle, v35);
  swift_unknownObjectRelease();
  if (!v5)
  {
    id v31 = v35[0];
    uint64_t v32 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error();
    swift_allocError();
    swift_willThrow();
    return;
  }
  id v6 = v35[0];
  long long v7 = (void *)MEMORY[0x24C533410](0xD000000000000028, 0x80000002466C34E0);
  id v8 = objc_msgSend(v5, sel_newFunctionWithName_, v7);

  long long v9 = (void *)MEMORY[0x24C533410](0xD000000000000026, 0x80000002466C3510);
  id v10 = objc_msgSend(v5, sel_newFunctionWithName_, v9);

  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F129C0]), sel_init);
  objc_msgSend(v11, sel_setVertexFunction_, v8);
  objc_msgSend(v11, sel_setFragmentFunction_, v10);
  objc_msgSend(v11, sel_setDepthAttachmentPixelFormat_, 252);
  id v12 = objc_msgSend(v11, sel_colorAttachments);
  id v13 = objc_msgSend(v12, sel_objectAtIndexedSubscript_, 0);

  if (!v13)
  {
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(v13, sel_setPixelFormat_, a1);

  id v14 = objc_msgSend(v11, sel_colorAttachments);
  id v15 = objc_msgSend(v14, sel_objectAtIndexedSubscript_, 0);

  if (!v15)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  objc_msgSend(v15, sel_setBlendingEnabled_, 1);

  id v16 = objc_msgSend(v11, sel_colorAttachments);
  id v17 = objc_msgSend(v16, sel_objectAtIndexedSubscript_, 0);

  if (!v17)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  objc_msgSend(v17, sel_setRgbBlendOperation_, 0);

  id v18 = objc_msgSend(v11, sel_colorAttachments);
  id v19 = objc_msgSend(v18, sel_objectAtIndexedSubscript_, 0);

  if (!v19)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  objc_msgSend(v19, sel_setAlphaBlendOperation_, 0);

  id v20 = objc_msgSend(v11, sel_colorAttachments);
  id v21 = objc_msgSend(v20, sel_objectAtIndexedSubscript_, 0);

  if (!v21)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  objc_msgSend(v21, sel_setSourceRGBBlendFactor_, 4);

  id v22 = objc_msgSend(v11, sel_colorAttachments);
  id v23 = objc_msgSend(v22, sel_objectAtIndexedSubscript_, 0);

  if (!v23)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  objc_msgSend(v23, sel_setSourceAlphaBlendFactor_, 4);

  id v24 = objc_msgSend(v11, sel_colorAttachments);
  id v25 = objc_msgSend(v24, sel_objectAtIndexedSubscript_, 0);

  if (!v25)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  objc_msgSend(v25, sel_setDestinationRGBBlendFactor_, 5);

  id v26 = objc_msgSend(v11, sel_colorAttachments);
  id v27 = objc_msgSend(v26, sel_objectAtIndexedSubscript_, 0);

  if (!v27)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  objc_msgSend(v27, sel_setDestinationAlphaBlendFactor_, 5);

  uint64_t v28 = *(void **)(v1 + 32);
  if (!v28)
  {
LABEL_27:
    __break(1u);
    return;
  }
  v35[0] = 0;
  id v29 = objc_msgSend(v28, sel_newRenderPipelineStateWithDescriptor_error_, v11, v35);
  id v30 = v35[0];
  if (v29)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    *(void *)(v1 + 40) = v29;
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v33 = v30;
    uint64_t v34 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error();
    swift_allocError();
    swift_willThrow();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
}

void CameraFrustumRenderer.createPosesMTLBufferIfNeeded()()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = MEMORY[0x24C5349C0](v0 + 16);
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      uint64_t v5 = v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_shots;
      swift_beginAccess();
      uint64_t v6 = *(void *)(*(void *)v5 + 16);
      if (!v6 || *(void *)(v0 + 208) == v6)
      {
LABEL_17:
      }
      else
      {
        uint64_t v7 = one-time initialization token for logger;
        swift_unknownObjectRetain();
        if (v7 != -1) {
          goto LABEL_20;
        }
        while (1)
        {
          uint64_t v8 = type metadata accessor for Logger();
          __swift_project_value_buffer(v8, (uint64_t)logger);
          long long v9 = Logger.logObject.getter();
          os_log_type_t v10 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v9, v10))
          {
            id v11 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v11 = 0;
            _os_log_impl(&dword_2465C2000, v9, v10, "Recreating MTLBuffer for camera poses!", v11, 2u);
            MEMORY[0x24C5348D0](v11, -1, -1);
          }

          unint64_t v12 = *(void *)(*(void *)v5 + 16);
          *(void *)(v2 + 208) = v12;
          if (v12 >> 57) {
            break;
          }
          id v13 = objc_msgSend(v1, sel_newBufferWithLength_options_, v12 << 6, 1);
          if (!v13) {
            goto LABEL_23;
          }
          *(void *)(v2 + 56) = v13;
          swift_unknownObjectRelease();
          id v14 = *(void **)(v2 + 56);
          if (!v14) {
            goto LABEL_24;
          }
          id v15 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
          id v16 = v14;
          uint64_t v17 = *(void *)(v2 + 208);
          if (v17 < 0) {
            goto LABEL_22;
          }
          if (!v17)
          {
LABEL_16:
            swift_unknownObjectRelease();
            goto LABEL_17;
          }
          uint64_t v18 = *(void *)(*(void *)v5 + 16);
          id v19 = v15 + 32;
          id v20 = (long long *)(*(void *)v5 + 96);
          while (v18)
          {
            long long v21 = *(v20 - 2);
            long long v22 = *(v20 - 1);
            long long v23 = *v20;
            *(v19 - 2) = *(v20 - 3);
            *(v19 - 1) = v21;
            *id v19 = v22;
            v19[1] = v23;
            v19 += 4;
            --v18;
            v20 += 6;
            if (!--v17) {
              goto LABEL_16;
            }
          }
          __break(1u);
LABEL_20:
          swift_once();
        }
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
    }
  }
}

id CameraFrustumRenderer.renderCone(into:desc:)(id result, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 64);
  if (!v3 || !*(void *)(v3 + 24)) {
    return result;
  }
  uint64_t v5 = result;
  swift_retain();
  unint64_t result = objc_msgSend(v5, sel_renderCommandEncoderWithDescriptor_, a2);
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!*(void *)(v2 + 40))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = result;
  objc_msgSend(result, sel_setRenderPipelineState_);
  objc_msgSend(v6, sel_setDepthStencilState_, *(void *)(v2 + 48));
  objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, *(void *)(v2 + 56), 0, 0);
  unint64_t result = *(id *)(v2 + 32);
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t result = objc_msgSend(result, sel_newBufferWithLength_options_, 144, 1);
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = result;
  uint64_t v8 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v9 = v7;
  long long v10 = *(_OWORD *)(v2 + 96);
  long long v11 = *(_OWORD *)(v2 + 112);
  long long v12 = *(_OWORD *)(v2 + 128);
  *uint64_t v8 = *(_OWORD *)(v2 + 80);
  v8[1] = v10;
  v8[2] = v11;
  v8[3] = v12;
  long long v13 = *(_OWORD *)(v2 + 160);
  long long v14 = *(_OWORD *)(v2 + 176);
  long long v15 = *(_OWORD *)(v2 + 192);
  v8[4] = *(_OWORD *)(v2 + 144);
  v8[5] = v13;
  v8[6] = v14;
  v8[7] = v15;
  *((_DWORD *)v8 + 32) = *(_DWORD *)(v2 + 256);
  unint64_t result = objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, v9, 0, 1);
  uint64_t v16 = *(void *)(v3 + 16);
  if (!v16)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, v16, 0, 2);
  objc_msgSend(v6, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, 3, 0, *(void *)(v3 + 24), *(void *)(v2 + 208));
  objc_msgSend(v6, sel_endEncoding);
  swift_release();
  swift_unknownObjectRelease();

  return (id)swift_unknownObjectRelease();
}

id CameraFrustumRenderer.renderHollowCylinder(into:desc:)(id result, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 64);
  if (!v3 || !*(void *)(v3 + 40)) {
    return result;
  }
  uint64_t v5 = result;
  swift_retain();
  unint64_t result = objc_msgSend(v5, sel_renderCommandEncoderWithDescriptor_, a2);
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!*(void *)(v2 + 40))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = result;
  objc_msgSend(result, sel_setRenderPipelineState_);
  objc_msgSend(v6, sel_setDepthStencilState_, *(void *)(v2 + 48));
  objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, *(void *)(v2 + 56), 0, 0);
  unint64_t result = *(id *)(v2 + 32);
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t result = objc_msgSend(result, sel_newBufferWithLength_options_, 144, 1);
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = result;
  uint64_t v8 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v9 = v7;
  long long v10 = *(_OWORD *)(v2 + 96);
  long long v11 = *(_OWORD *)(v2 + 112);
  long long v12 = *(_OWORD *)(v2 + 128);
  *uint64_t v8 = *(_OWORD *)(v2 + 80);
  v8[1] = v10;
  v8[2] = v11;
  v8[3] = v12;
  long long v13 = *(_OWORD *)(v2 + 160);
  long long v14 = *(_OWORD *)(v2 + 176);
  long long v15 = *(_OWORD *)(v2 + 192);
  v8[4] = *(_OWORD *)(v2 + 144);
  v8[5] = v13;
  v8[6] = v14;
  v8[7] = v15;
  *((_DWORD *)v8 + 32) = *(_DWORD *)(v2 + 256);
  unint64_t result = objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, v9, 0, 1);
  uint64_t v16 = *(void *)(v3 + 32);
  if (!v16)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, v16, 0, 2);
  objc_msgSend(v6, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, 3, 0, *(void *)(v3 + 40), *(void *)(v2 + 208));
  objc_msgSend(v6, sel_endEncoding);
  swift_release();
  swift_unknownObjectRelease();

  return (id)swift_unknownObjectRelease();
}

id CameraFrustumRenderer.renderSphere(into:desc:)(id result, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 64);
  if (!v3 || !*(void *)(v3 + 56)) {
    return result;
  }
  uint64_t v5 = result;
  swift_retain();
  unint64_t result = objc_msgSend(v5, sel_renderCommandEncoderWithDescriptor_, a2);
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!*(void *)(v2 + 40))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = result;
  objc_msgSend(result, sel_setRenderPipelineState_);
  objc_msgSend(v6, sel_setDepthStencilState_, *(void *)(v2 + 48));
  objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, *(void *)(v2 + 56), 0, 0);
  unint64_t result = *(id *)(v2 + 32);
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t result = objc_msgSend(result, sel_newBufferWithLength_options_, 144, 1);
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = result;
  uint64_t v8 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v9 = v7;
  long long v10 = *(_OWORD *)(v2 + 96);
  long long v11 = *(_OWORD *)(v2 + 112);
  long long v12 = *(_OWORD *)(v2 + 128);
  *uint64_t v8 = *(_OWORD *)(v2 + 80);
  v8[1] = v10;
  v8[2] = v11;
  v8[3] = v12;
  long long v13 = *(_OWORD *)(v2 + 160);
  long long v14 = *(_OWORD *)(v2 + 176);
  long long v15 = *(_OWORD *)(v2 + 192);
  v8[4] = *(_OWORD *)(v2 + 144);
  v8[5] = v13;
  v8[6] = v14;
  v8[7] = v15;
  *((_DWORD *)v8 + 32) = *(_DWORD *)(v2 + 256);
  unint64_t result = objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, v9, 0, 1);
  uint64_t v16 = *(void *)(v3 + 48);
  if (!v16)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, v16, 0, 2);
  objc_msgSend(v6, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, 3, 0, *(void *)(v3 + 56), *(void *)(v2 + 208));
  objc_msgSend(v6, sel_endEncoding);
  swift_release();
  swift_unknownObjectRelease();

  return (id)swift_unknownObjectRelease();
}

uint64_t CameraFrustumRenderer.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  outlined destroy of Animation?(v0 + 216);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CameraFrustumRenderer()
{
  return self;
}

float one-time initialization function for vertexColor()
{
  *(void *)&long long v0 = qword_26FACA620;
  *((void *)&v0 + 1) = unk_26FACA628;
  static CameraFrustumMesh.vertexColor = v0;
  return *(float *)&v0;
}

void *CameraFrustumMesh.setConeMTLBuffer(device:coneHeight:coneBaseRadius:coneBaseSegments:)(void *a1, uint64_t a2, float a3, float a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for logger != -1) {
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)logger);
    long long v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      long long v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v13 = 0;
      _os_log_impl(&dword_2465C2000, v11, v12, "Creating MTLBuffer for the cone!", v13, 2u);
      MEMORY[0x24C5348D0](v13, -1, -1);
    }

    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CameraFrustumMesh.setConeMTLBuffer(device:coneHeight:coneBaseRadius:coneBaseSegments:));
    long long v28 = v14;
    unint64_t result = (void *)specialized CameraFrustumMesh.createCircleVertices(zOffset:radius:circleSegments:)(a2, -a3, a4);
    uint64_t v16 = result[2];
    uint64_t v17 = 3 * v16;
    if ((unsigned __int128)(v16 * (__int128)3) >> 64 != (3 * v16) >> 63)
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    *((void *)v5 + 3) = v17;
    if ((unint64_t)(v17 - 0x400000000000000) >> 59 != 31) {
      goto LABEL_25;
    }
    a2 = (uint64_t)result;
    unint64_t result = objc_msgSend(a1, sel_newBufferWithLength_options_, 96 * v16, 1);
    if (!result) {
      goto LABEL_26;
    }
    *((void *)v5 + 2) = result;
    unint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v18 = (void *)*((void *)v5 + 2);
    if (!v18) {
      goto LABEL_27;
    }
    id v19 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v20 = v18;
    long long v21 = v28;
    if (!v16) {
      break;
    }
    uint64_t v22 = 0;
    a1 = (void *)(a2 + 32);
    uint64_t v5 = v19 + 48;
    float v23 = 1.0;
    while (1)
    {
      *((_OWORD *)v5 - 3) = v21;
      if (one-time initialization token for vertexColor != -1)
      {
        swift_once();
        float v23 = 1.0;
        long long v21 = v28;
      }
      long long v24 = static CameraFrustumMesh.vertexColor;
      HIDWORD(v24) = 0;
      long long v25 = v24;
      *((float *)&v25 + 3) = v23;
      uint64_t v26 = v22 + 1;
      *((_OWORD *)v5 - 2) = v25;
      unint64_t v27 = v16 - 1 == v22 ? 0 : v22 + 1;
      if (v27 >= *(void *)(a2 + 16)) {
        break;
      }
      HIDWORD(v24) = 1053609165;
      *((_OWORD *)v5 - 1) = *((_OWORD *)a1 + v27);
      *(_OWORD *)uint64_t v5 = v24;
      if (v22 == 0x2AAAAAAAAAAAAAAALL) {
        goto LABEL_22;
      }
      *((_OWORD *)v5 + 1) = *((_OWORD *)a1 + v22);
      *((_OWORD *)v5 + 2) = v24;
      v5 += 96;
      ++v22;
      if (v16 == v26) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    swift_once();
  }
LABEL_18:

  return (void *)swift_bridgeObjectRelease();
}

void *CameraFrustumMesh.setHollowCylinderMTLBuffer(device:zOffset:innerRadius:outerRadius:height:circleSegments:)(void *a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v7 = v6;
  if (one-time initialization token for logger != -1) {
    goto LABEL_43;
  }
  while (1)
  {
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)logger);
    long long v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_2465C2000, v15, v16, "Creating MTLBuffer for the concentric circles!", v17, 2u);
      MEMORY[0x24C5348D0](v17, -1, -1);
    }

    uint64_t v18 = specialized CameraFrustumMesh.createCircleVertices(zOffset:radius:circleSegments:)(a2, a3, a4);
    uint64_t v49 = specialized CameraFrustumMesh.createCircleVertices(zOffset:radius:circleSegments:)(a2, a3, a5);
    a6 = a3 + a6;
    uint64_t v48 = specialized CameraFrustumMesh.createCircleVertices(zOffset:radius:circleSegments:)(a2, a6, a4);
    unint64_t result = (void *)specialized CameraFrustumMesh.createCircleVertices(zOffset:radius:circleSegments:)(a2, a6, a5);
    unint64_t v20 = *(void *)(v18 + 16);
    if ((unsigned __int128)((uint64_t)v20 * (__int128)6) >> 64 != (uint64_t)(6 * v20) >> 63)
    {
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      return result;
    }
    uint64_t v21 = 18 * v20;
    if ((unsigned __int128)((uint64_t)(6 * v20) * (__int128)3) >> 64 != (uint64_t)(18 * v20) >> 63) {
      goto LABEL_45;
    }
    *((void *)v7 + 5) = v21;
    if ((unint64_t)(v21 - 0x400000000000000) >> 59 != 31) {
      goto LABEL_46;
    }
    id v46 = result;
    unint64_t v47 = v20;
    unint64_t result = objc_msgSend(a1, sel_newBufferWithLength_options_, 576 * v20, 1);
    if (!result) {
      goto LABEL_50;
    }
    *((void *)v7 + 4) = result;
    unint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v22 = (void *)*((void *)v7 + 4);
    if (!v22) {
      goto LABEL_51;
    }
    uint64_t v7 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v23 = v22;
    unint64_t v24 = v47;
    if (!v47) {
      break;
    }
    uint64_t v25 = v49;
    unint64_t result = v46;
    if (v47 > *(void *)(v49 + 16)) {
      goto LABEL_47;
    }
    if (v47 > v46[2]) {
      goto LABEL_48;
    }
    uint64_t v26 = v48;
    if (v47 > *(void *)(v48 + 16)) {
      goto LABEL_49;
    }
    uint64_t v27 = 0;
    uint64_t v28 = v18;
    uint64_t v29 = v18 + 32;
    uint64_t v30 = v49 + 32;
    uint64_t v31 = v48 + 32;
    a1 = v46 + 4;
    uint64_t v32 = v7 + 144;
    a2 = 8;
    unint64_t v33 = 0x268F90000uLL;
    uint64_t v34 = &unk_268F93000;
    while (1)
    {
      unint64_t v35 = v47 - 1 == v27 ? 0 : v27 + 1;
      if (v35 >= *(void *)(v28 + 16)) {
        break;
      }
      *(v32 - 9) = *(_OWORD *)(v29 + 16 * v35);
      if (*(void *)(v33 + 1136) != -1)
      {
        swift_once();
        uint64_t v34 = (_OWORD *)&unk_268F93000;
        unint64_t v33 = 0x268F90000;
        unint64_t result = v46;
        unint64_t v24 = v47;
        uint64_t v26 = v48;
        uint64_t v28 = v18;
        uint64_t v25 = v49;
      }
      long long v36 = v34[120];
      HIDWORD(v36) = 1061997773;
      *(v32 - 8) = v36;
      if (v35 >= *(void *)(v25 + 16)) {
        goto LABEL_34;
      }
      *(v32 - 7) = *(_OWORD *)(v30 + 16 * v35);
      *(v32 - 6) = v36;
      *(v32 - 5) = *(_OWORD *)(v30 + 16 * v27);
      *(v32 - 4) = v36;
      *(v32 - 3) = *(_OWORD *)(v29 + 16 * v35);
      *(v32 - 2) = v36;
      *(v32 - 1) = *(_OWORD *)(v30 + 16 * v27);
      *uint64_t v32 = v36;
      v32[1] = *(_OWORD *)(v29 + 16 * v27);
      v32[2] = v36;
      if (v35 >= *(void *)(v26 + 16)) {
        goto LABEL_35;
      }
      v32[3] = *(_OWORD *)(v31 + 16 * v35);
      v32[4] = v36;
      if (v35 >= result[2]) {
        goto LABEL_36;
      }
      v32[5] = *((_OWORD *)a1 + v35);
      v32[6] = v36;
      if (v27 == 0x71C71C71C71C71CLL) {
        goto LABEL_37;
      }
      v32[7] = *((_OWORD *)a1 + v27);
      v32[8] = v36;
      if (__OFADD__(a2, 1)) {
        goto LABEL_38;
      }
      uint64_t v37 = &v7[32 * a2 + 32];
      *(_OWORD *)uint64_t v37 = *(_OWORD *)(v31 + 16 * v35);
      *((_OWORD *)v37 + 1) = v36;
      uint64_t v38 = &v7[32 * a2 + 64];
      *(_OWORD *)uint64_t v38 = *((_OWORD *)a1 + v27);
      *((_OWORD *)v38 + 1) = v36;
      if (__OFADD__(a2 + 2, 1)) {
        goto LABEL_39;
      }
      id v39 = &v7[32 * a2 + 96];
      *(_OWORD *)id v39 = *(_OWORD *)(v31 + 16 * v27);
      *((_OWORD *)v39 + 1) = v36;
      id v40 = &v7[32 * a2 + 128];
      *(_OWORD *)id v40 = *((_OWORD *)a1 + v35);
      *((_OWORD *)v40 + 1) = v36;
      if (__OFADD__(a2 + 4, 1)) {
        goto LABEL_40;
      }
      id v41 = &v7[32 * a2 + 160];
      *(_OWORD *)id v41 = *(_OWORD *)(v30 + 16 * v35);
      *((_OWORD *)v41 + 1) = v36;
      char v42 = &v7[32 * a2 + 192];
      *(_OWORD *)char v42 = *(_OWORD *)(v30 + 16 * v27);
      *((_OWORD *)v42 + 1) = v36;
      if (__OFADD__(a2 + 6, 1)) {
        goto LABEL_41;
      }
      id v43 = &v7[32 * a2 + 224];
      *(_OWORD *)id v43 = *((_OWORD *)a1 + v35);
      *((_OWORD *)v43 + 1) = v36;
      id v44 = &v7[32 * a2 + 256];
      *(_OWORD *)id v44 = *(_OWORD *)(v30 + 16 * v27);
      *((_OWORD *)v44 + 1) = v36;
      if (__OFADD__(a2 + 8, 1)) {
        goto LABEL_42;
      }
      uint64_t v45 = &v7[32 * a2 + 288];
      *(_OWORD *)uint64_t v45 = *((_OWORD *)a1 + v27);
      *((_OWORD *)v45 + 1) = v36;
      a2 += 18;
      v32 += 36;
      if (v24 == ++v27) {
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    swift_once();
  }
LABEL_30:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return (void *)swift_bridgeObjectRelease();
}

uint64_t CameraFrustumMesh.setSphereMTLBuffer(device:radius:radialSegments:verticalSegments:)(uint64_t *a1, uint64_t a2, unint64_t a3, float a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for logger != -1) {
    goto LABEL_69;
  }
  while (1)
  {
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)logger);
    long long v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      long long v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v13 = 0;
      _os_log_impl(&dword_2465C2000, v11, v12, "Creating MTLBuffer for the sphere!", v13, 2u);
      MEMORY[0x24C5348D0](v13, -1, -1);
    }

    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CameraFrustumMesh.setSphereMTLBuffer(device:radius:radialSegments:verticalSegments:));
    uint64_t result = Sphere.createSurfaceSamples(radialSegments:verticalSegments:)(a2, a3, v14, a4);
    uint64_t v46 = result;
    if ((a3 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    uint64_t v41 = v5;
    char v42 = a1;
    if (!a3) {
      break;
    }
    uint64_t v45 = a2 + 1;
    if (__OFADD__(a2, 1)) {
      goto LABEL_72;
    }
    if (a2 < 0) {
      goto LABEL_73;
    }
    os_log_type_t v16 = 0;
    a1 = (uint64_t *)(a3 - 1);
    uint64_t v17 = (void *)MEMORY[0x263F8EE78];
    uint64_t v43 = a2;
    unint64_t v44 = a3;
    while (1)
    {
      if (v16 == (uint64_t *)a3) {
        goto LABEL_65;
      }
      uint64_t v5 = (void)v16 * v45;
      if ((unsigned __int128)((uint64_t)v16 * (__int128)v45) >> 64 != ((uint64_t)v16 * v45) >> 63) {
        break;
      }
      uint64_t v18 = v5 + a2;
      if (__OFADD__(v5, a2)) {
        goto LABEL_67;
      }
      uint64_t v19 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        goto LABEL_68;
      }
      for (; a2; --a2)
      {
        if (v16)
        {
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
            uint64_t v17 = (void *)result;
          }
          unint64_t v21 = v17[2];
          unint64_t v20 = v17[3];
          unint64_t v22 = v21 + 1;
          if (v21 >= v20 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v17);
            uint64_t v17 = (void *)result;
          }
          void v17[2] = v22;
          v17[v21 + 4] = v5;
          a3 = v5 + 1;
          if (__OFADD__(v5, 1)) {
            goto LABEL_60;
          }
          unint64_t v23 = v17[3];
          unint64_t v24 = v21 + 2;
          if (v22 >= v23 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v21 + 2, 1, v17);
            uint64_t v17 = (void *)result;
          }
          void v17[2] = v24;
          v17[v22 + 4] = a3;
          unint64_t v25 = v17[3];
          if ((uint64_t)(v21 + 3) > (uint64_t)(v25 >> 1))
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v21 + 3, 1, v17);
            uint64_t v17 = (void *)result;
          }
          void v17[2] = v21 + 3;
          v17[v24 + 4] = v19;
        }
        if (v16 == a1)
        {
          BOOL v26 = __OFADD__(v5++, 1);
          if (v26)
          {
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
            goto LABEL_66;
          }
          BOOL v26 = __OFADD__(v19++, 1);
          if (v26) {
            goto LABEL_59;
          }
        }
        else
        {
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
            uint64_t v17 = (void *)result;
          }
          unint64_t v28 = v17[2];
          unint64_t v27 = v17[3];
          unint64_t v29 = v28 + 1;
          if (v28 >= v27 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v17);
            uint64_t v17 = (void *)result;
          }
          void v17[2] = v29;
          v17[v28 + 4] = v19;
          BOOL v26 = __OFADD__(v5++, 1);
          if (v26) {
            goto LABEL_61;
          }
          unint64_t v30 = v17[3];
          int64_t v31 = v28 + 2;
          if (v29 >= v30 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31, 1, v17);
            uint64_t v17 = (void *)result;
          }
          void v17[2] = v31;
          v17[v29 + 4] = v5;
          if (__OFADD__(v19, 1)) {
            goto LABEL_62;
          }
          a3 = v17[2];
          unint64_t v32 = v17[3];
          if (a3 >= v32 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), a3 + 1, 1, v17);
            uint64_t v17 = (void *)result;
          }
          void v17[2] = a3 + 1;
          v17[a3 + 4] = v19 + 1;
          BOOL v26 = __OFADD__(v19++, 1);
          if (v26) {
            goto LABEL_59;
          }
        }
      }
      os_log_type_t v16 = (uint64_t *)((char *)v16 + 1);
      a2 = v43;
      a3 = v44;
      if (v16 == (uint64_t *)v44) {
        goto LABEL_45;
      }
    }
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    swift_once();
  }
  uint64_t v17 = (void *)MEMORY[0x263F8EE78];
LABEL_45:
  unint64_t v33 = v17[2];
  if (v33 >> 58) {
    goto LABEL_71;
  }
  uint64_t result = (uint64_t)objc_msgSend(v42, sel_newBufferWithLength_options_, 32 * v33, 1);
  if (!result)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  *(void *)(v41 + 48) = result;
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v34 = *(void **)(v41 + 48);
  if (!v34)
  {
LABEL_75:
    __break(1u);
    return result;
  }
  id v35 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v36 = v34;
  uint64_t v5 = v17[2];
  if (v5)
  {
    uint64_t v37 = v17 + 4;
    a2 = v46 + 32;
    a3 = (unint64_t)v35 + 16;
    a1 = &one-time initialization token for vertexColor;
    do
    {
      unint64_t v39 = *v37++;
      unint64_t v38 = v39;
      if ((v39 & 0x8000000000000000) != 0) {
        goto LABEL_63;
      }
      if (v38 >= *(void *)(v46 + 16)) {
        goto LABEL_64;
      }
      *(_OWORD *)(a3 - 16) = *(_OWORD *)(a2 + 16 * v38);
      if (one-time initialization token for vertexColor != -1) {
        swift_once();
      }
      long long v40 = static CameraFrustumMesh.vertexColor;
      HIDWORD(v40) = 1063675494;
      *(_OWORD *)a3 = v40;
      a3 += 32;
    }
    while (--v5);
  }
  swift_bridgeObjectRelease();
  *(void *)(v41 + 56) = v17[2];

  return swift_bridgeObjectRelease();
}

uint64_t CameraFrustumMesh.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CameraFrustumMesh()
{
  return self;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *type metadata accessor for CameraFrustumMesh.Descriptor()
{
  return &unk_26FAD0A30;
}

uint64_t specialized CameraFrustumRenderer.init(cameraPathManager:)()
{
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v0 + 24) = 0;
  uint64_t v1 = (long long *)MEMORY[0x263EF89A8];
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  long long v2 = *v1;
  long long v3 = v1[1];
  long long v4 = v1[2];
  long long v5 = v1[3];
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = v2;
  *(_OWORD *)(v0 + 96) = v3;
  *(_OWORD *)(v0 + 112) = v4;
  *(_OWORD *)(v0 + 128) = v5;
  *(_OWORD *)(v0 + 144) = v2;
  *(_OWORD *)(v0 + 160) = v3;
  *(_OWORD *)(v0 + 176) = v4;
  *(_OWORD *)(v0 + 192) = v5;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_DWORD *)(v0 + 256) = 0;
  swift_unknownObjectWeakAssign();
  return v0;
}

uint64_t specialized CameraFrustumMesh.createCircleVertices(zOffset:radius:circleSegments:)(uint64_t result, float a2, float a3)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    if (!result) {
      return MEMORY[0x263F8EE78];
    }
    long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    uint64_t v6 = 0;
    unint64_t v7 = v5[2];
    do
    {
      __float2 v8 = __sincosf_stret((float)(6.2832 / (float)v3) * (float)v6);
      unint64_t v9 = v5[3];
      if (v7 >= v9 >> 1) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v7 + 1, 1, v5);
      }
      *(float *)&long long v10 = v8.__cosval * a3;
      *((float *)&v10 + 1) = v8.__sinval * a3;
      *((void *)&v10 + 1) = LODWORD(a2);
      ++v6;
      v5[2] = v7 + 1;
      *(_OWORD *)&v5[2 * v7++ + 4] = v10;
    }
    while (v3 != v6);
    return (uint64_t)v5;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error;
  if (!lazy protocol witness table cache variable for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error;
  if (!lazy protocol witness table cache variable for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error);
  }
  return result;
}

uint64_t outlined init with take of Animation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Animation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for CameraFrustumRenderer.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x246692254);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraFrustumRenderer.Error()
{
  return &type metadata for CameraFrustumRenderer.Error;
}

float32x2_t Ray3D.point(t:)(float a1, float32x2_t a2, float32x2_t a3)
{
  return vadd_f32(a2, vmul_n_f32(a3, a1));
}

void specialized SIMD.subscript.getter(__n128 a1, double a2)
{
  unint64_t v2 = a1.n128_u8[0] & 3;
  if (a1.n128_i64[0] <= 0) {
    unint64_t v2 = -(-a1.n128_u64[0] & 3);
  }
  unint64_t v3 = a1.n128_u8[8] & 3;
  if (a1.n128_i64[1] <= 0) {
    unint64_t v3 = -(-a1.n128_u64[1] & 3);
  }
  uint64_t v4 = LOBYTE(a2) & 3;
  if (*(uint64_t *)&a2 <= 0) {
    uint64_t v4 = -(-*(void *)&a2 & 3);
  }
  if (((v2 | v4 | v3) & 0x8000000000000000) != 0) {
    __break(1u);
  }
}

uint64_t specialized static Ray3D.screenPointToPlane(within:screenPoint:plane:)(double a1, double a2, double a3, float32x4_t a4)
{
  ARView.ray(through:)();
  uint64_t result = outlined init with take of (origin: SIMD3<Float>, direction: SIMD3<Float>)?((uint64_t)v14, (uint64_t)&v15);
  if (v17)
  {
    lazy protocol witness table accessor for type Ray3D.Error and conformance Ray3D.Error();
    swift_allocError();
    *uint64_t v5 = 0xD000000000000031;
    uint64_t v6 = "can't get world ray from screepoint in this view!";
  }
  else
  {
    int32x4_t v7 = (int32x4_t)vmulq_f32(v16, v16);
    v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
    float32x2_t v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
    float32x2_t v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
    v7.i32[0] = vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).u32[0];
    int32x4_t v10 = (int32x4_t)vmulq_f32(a4, a4);
    float32x4_t v11 = vmulq_n_f32(v16, *(float *)v7.i32);
    v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
    *(float32x2_t *)v10.i8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
    *(float32x2_t *)v10.i8 = vmul_f32(*(float32x2_t *)v10.i8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8)));
    float32x4_t v12 = vmulq_f32(v11, vmulq_n_f32(a4, vmul_f32(*(float32x2_t *)v10.i8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8))).f32[0]));
    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]) >= 0.001)return result; {
    lazy protocol witness table accessor for type Ray3D.Error and conformance Ray3D.Error();
    }
    swift_allocError();
    *uint64_t v5 = 0xD00000000000002ALL;
    uint64_t v6 = "world ray and plane normal are orthogonal!";
  }
  v5[1] = (unint64_t)(v6 - 32) | 0x8000000000000000;
  return swift_willThrow();
}

double specialized static Ray3D.unproject(clipSpace:using:aspectRatio:)(double a1)
{
  Entity.coreEntity.getter();
  REPerspectiveCameraComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    REPerspectiveCameraComponentCalculateProjectionWithAspectRatio();
    REPerspectiveCameraComponentAdjustProjectionAspect();
    REProjectionClipSpaceNearZ();
    int v3 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
    *(double *)(inited + 32) = a1;
    *(_DWORD *)(inited + 40) = v3;
    specialized SIMD.init<A>(_:)(inited);
    swift_setDeallocating();
LABEL_5:
    REConvertProjectionToMatrix4x4();
    REProjectionUnprojectPoint();
    return result;
  }
  Entity.coreEntity.getter();
  RECustomMatrixCameraComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    RECustomMatrixCameraComponentCalculateProjection();
    RECustomMatrixCameraComponentAdjustProjectionAspect();
    REProjectionClipSpaceNearZ();
    int v6 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t v7 = swift_initStackObject();
    *(_OWORD *)(v7 + 16) = xmmword_2466B5DE0;
    *(double *)(v7 + 32) = a1;
    *(_DWORD *)(v7 + 40) = v6;
    specialized SIMD.init<A>(_:)(v7);
    swift_setDeallocating();
    goto LABEL_5;
  }
  return 0.0;
}

void specialized static Ray3D.worldRay(through:using:)(float32x4_t *a1@<X8>, double a2@<D0>)
{
  specialized static Ray3D.unproject(clipSpace:using:aspectRatio:)(a2);
  float32x4_t v3 = 0uLL;
  if (v4)
  {
    char v6 = 1;
    float32x4_t v12 = 0uLL;
  }
  else
  {
    Entity.coreEntity.getter();
    RETransformComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      RETransformComponentGetWorldMatrix4x4F();
      float32x4_t v13 = v5;
      simd_float4x4.transform(position:)();
      float32x4_t v3 = v13;
      char v6 = 0;
      float32x4_t v8 = vsubq_f32(v7, v13);
      v3.i32[3] = 0;
      int32x4_t v9 = (int32x4_t)vmulq_f32(v8, v8);
      v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
      float32x2_t v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
      float32x2_t v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
      float32x4_t v12 = vmulq_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
    }
    else
    {
      char v6 = 1;
      float32x4_t v12 = 0uLL;
      float32x4_t v3 = 0uLL;
    }
  }
  *a1 = v3;
  a1[1] = v12;
  a1[2].i8[0] = v6;
}

void specialized static Ray3D.closestPointParameter(to:along:)(double a1, float32x4_t a2, double a3, float32x4_t a4)
{
  float32x4_t v4 = vmulq_f32(a2, a2);
  float32x4_t v5 = vmulq_f32(a4, a4);
  float32x4_t v6 = vmulq_f32(a2, a4);
  float32x4_t v7 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1)));
  if (vsubq_f32(vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)))), vmulq_f32(v7, v7)).f32[0] <= 0.001)
  {
    lazy protocol witness table accessor for type Ray3D.Error and conformance Ray3D.Error();
    swift_allocError();
    *float32x4_t v8 = 0;
    v8[1] = 0;
    swift_willThrow();
  }
}

unint64_t lazy protocol witness table accessor for type Ray3D.Error and conformance Ray3D.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type Ray3D.Error and conformance Ray3D.Error;
  if (!lazy protocol witness table cache variable for type Ray3D.Error and conformance Ray3D.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ray3D.Error and conformance Ray3D.Error);
  }
  return result;
}

uint64_t outlined init with take of (origin: SIMD3<Float>, direction: SIMD3<Float>)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (origin: SIMD3<Float>, direction: SIMD3<Float>)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *initializeBufferWithCopyOfBuffer for Ray3D.Error(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Ray3D.Error()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for Ray3D.Error(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for Ray3D.Error(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Ray3D.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Ray3D.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Ray3D.Error()
{
  return &type metadata for Ray3D.Error;
}

ValueMetadata *type metadata accessor for Ray3D()
{
  return &type metadata for Ray3D;
}

uint64_t static ViewBuilder.buildEither<A, B>(second:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for _ConditionalContent.Storage();
  MEMORY[0x270FA5388](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t static ViewBuilder.buildEither<A, B>(first:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  MEMORY[0x270FA5388](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t Model3DPhase.model.getter@<X0>(uint64_t a1@<X8>)
{
  unsigned int v3 = *((unsigned __int8 *)v1 + 64);
  if (v3 > 0x3F)
  {
    uint64_t v11 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    char v10 = 0;
  }
  else
  {
    uint64_t v5 = v1[6];
    uint64_t v4 = v1[7];
    uint64_t v7 = v1[4];
    uint64_t v6 = v1[5];
    uint64_t v8 = v1[1];
    uint64_t v9 = v1[2];
    char v10 = v3 & 1;
    uint64_t v11 = *v1;
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v4;
  *(unsigned char *)(a1 + 64) = v10;
  return result;
}

id Model3DPhase.error.getter()
{
  if ((*(unsigned char *)(v0 + 64) & 0xC0) != 0x40) {
    return 0;
  }
  id v1 = *(id *)v0;
  id v2 = *(id *)v0;
  return v1;
}

uint64_t Model3D.init<>(url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Model3D<ResolvedModel3D>);
  uint64_t v5 = *(int *)(v4 + 36);
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  type metadata accessor for Model3DLocation();
  uint64_t result = swift_storeEnumTagMultiPayload();
  *(void *)(a2 + v5) = 0;
  uint64_t v8 = (void *)(a2 + *(int *)(v4 + 40));
  *uint64_t v8 = closure #1 in Model3D.init<>(url:);
  v8[1] = 0;
  return result;
}

uint64_t Model3D.init(url:transaction:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Model3D();
  uint64_t v11 = *(int *)(v10 + 36);
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a5, a1, v12);
  type metadata accessor for Model3DLocation();
  uint64_t result = swift_storeEnumTagMultiPayload();
  *(void *)(a5 + v11) = a2;
  __n128 v14 = (void *)(a5 + *(int *)(v10 + 40));
  *__n128 v14 = a3;
  v14[1] = a4;
  return result;
}

uint64_t type metadata accessor for Model3D()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Model3D.init<A, B>(url:content:placeholder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v18 = (void *)swift_allocObject();
  id v18[2] = a6;
  void v18[3] = a7;
  v18[4] = a8;
  v18[5] = a10;
  v18[6] = a2;
  v18[7] = a3;
  v18[8] = a4;
  v18[9] = a5;
  type metadata accessor for Model3DPlaceholderContent();
  swift_getWitnessTable();
  return Model3D.init(url:transaction:content:)(a1, 0, (uint64_t)partial apply for closure #1 in Model3D.init<A, B>(url:content:placeholder:), (uint64_t)v18, a9);
}

uint64_t type metadata accessor for Model3DPlaceholderContent()
{
  return swift_getGenericMetadata();
}

uint64_t Model3D.init<>(named:bundle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Model3D<ResolvedModel3D>);
  uint64_t v9 = *(int *)(v8 + 36);
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  type metadata accessor for Model3DLocation();
  uint64_t result = swift_storeEnumTagMultiPayload();
  *(void *)((char *)a4 + v9) = 0;
  uint64_t v11 = (void *)((char *)a4 + *(int *)(v8 + 40));
  void *v11 = closure #1 in Model3D.init<>(url:);
  v11[1] = 0;
  return result;
}

uint64_t closure #1 in Model3D.init<>(url:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = *((unsigned __int8 *)a1 + 64);
  if (v3 > 0x3F)
  {
    uint64_t result = BoundingBox.init()();
    char v7 = 0;
    uint64_t v4 = 0;
    uint64_t v6 = 0;
    unint64_t v5 = 0xE000000000000000;
  }
  else
  {
    unint64_t v5 = a1[1];
    uint64_t v4 = a1[2];
    uint64_t v6 = *a1;
    long long v12 = *((_OWORD *)a1 + 2);
    char v7 = v3 & 1;
    long long v11 = *((_OWORD *)a1 + 3);
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    long long v10 = v11;
    long long v9 = v12;
  }
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  *(unsigned char *)(a2 + 64) = v7;
  return result;
}

uint64_t Model3D.init(named:bundle:transaction:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v14 = type metadata accessor for Model3D();
  uint64_t v15 = *(int *)(v14 + 36);
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  type metadata accessor for Model3DLocation();
  uint64_t result = swift_storeEnumTagMultiPayload();
  *(void *)((char *)a7 + v15) = a4;
  char v17 = (void *)((char *)a7 + *(int *)(v14 + 40));
  *char v17 = a5;
  v17[1] = a6;
  return result;
}

uint64_t Model3D.init<A, B>(named:bundle:content:placeholder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18 = (void *)swift_allocObject();
  id v18[2] = a8;
  void v18[3] = a10;
  v18[4] = a11;
  v18[5] = a12;
  v18[6] = a4;
  v18[7] = a5;
  v18[8] = a6;
  v18[9] = a7;
  type metadata accessor for Model3DPlaceholderContent();
  swift_getWitnessTable();
  return Model3D.init(named:bundle:transaction:content:)(a1, a2, a3, 0, (uint64_t)partial apply for closure #1 in Model3D.init<A, B>(url:content:placeholder:), (uint64_t)v18, a9);
}

uint64_t closure #1 in Model3D.init<A, B>(url:content:placeholder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = a9;
  unsigned int v13 = *(unsigned __int8 *)(a1 + 64);
  if (v13 > 0x3F)
  {
    uint64_t v36 = 0;
    uint64_t v25 = 0;
    uint64_t v21 = 0;
    uint64_t v26 = 0;
    uint64_t v23 = 0;
    uint64_t v16 = 0;
    uint64_t v22 = 0;
    char v24 = 0;
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v36 = *(void *)a1;
    uint64_t v15 = *(void *)(a1 + 16);
    uint64_t v16 = *(void *)(a1 + 48);
    uint64_t v32 = *(void *)(a1 + 40);
    uint64_t v33 = *(void *)(a1 + 32);
    char v30 = v13 & 1;
    uint64_t v31 = *(void *)(a1 + 56);
    uint64_t v17 = a7;
    uint64_t v18 = a5;
    uint64_t v19 = a6;
    uint64_t v20 = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    a2 = v20;
    uint64_t v21 = v15;
    a6 = v19;
    a5 = v18;
    uint64_t v22 = v31;
    uint64_t v23 = v32;
    char v24 = v30;
    uint64_t v25 = v14;
    a7 = v17;
    uint64_t v26 = v33;
    uint64_t v12 = a9;
  }
  uint64_t v37 = v36;
  uint64_t v38 = v25;
  uint64_t v39 = v21;
  uint64_t v40 = 0;
  uint64_t v41 = v26;
  uint64_t v42 = v23;
  uint64_t v43 = v16;
  uint64_t v44 = v22;
  char v45 = v24;
  uint64_t v46 = a2;
  *(void *)&long long v47 = a3;
  *((void *)&v47 + 1) = a4;
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  uint64_t v50 = a7;
  uint64_t v51 = a8;
  uint64_t v52 = v12;
  uint64_t v35 = type metadata accessor for Model3DPlaceholderContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v37, v35, WitnessTable);
  swift_retain();
  swift_retain();
  outlined consume of ResolvedModel3D?(v36, v25);
  swift_release();
  swift_release();
  uint64_t v27 = v49;
  uint64_t v28 = v50;
  uint64_t v37 = v49;
  uint64_t v38 = v50;
  uint64_t v39 = v51;
  uint64_t v40 = v52;
  uint64_t v41 = v53;
  uint64_t v42 = v54;
  uint64_t v43 = v55;
  uint64_t v44 = v56;
  char v45 = v57;
  uint64_t v46 = v58;
  long long v47 = v59;
  uint64_t v48 = v60;
  static ViewBuilder.buildExpression<A>(_:)(&v37, v35, WitnessTable);
  outlined consume of ResolvedModel3D?(v27, v28);
  swift_release();
  return swift_release();
}

uint64_t objectdestroyTm_5()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t partial apply for closure #1 in Model3D.init<A, B>(url:content:placeholder:)(uint64_t a1)
{
  return closure #1 in Model3D.init<A, B>(url:content:placeholder:)(a1, v1[6], v1[7], v1[8], v1[9], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t Model3DPlaceholderContent.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v4 = *(void *)(a1[3] - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  char v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  long long v10 = (char *)&v36 - v9;
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v8);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v36 - v16;
  uint64_t v43 = v18;
  uint64_t v19 = type metadata accessor for _ConditionalContent();
  uint64_t v45 = *(void *)(v19 - 8);
  uint64_t v46 = v19;
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v44 = (char *)&v36 - v21;
  uint64_t v22 = *(void *)(v2 + 8);
  if (v22)
  {
    uint64_t v23 = *(void (**)(void *))(v2 + 72);
    int v39 = *(unsigned __int8 *)(v2 + 64);
    uint64_t v24 = *(void *)(v2 + 16);
    uint64_t v42 = *(void *)(v2 + 24);
    uint64_t v37 = *(void *)v2;
    uint64_t v25 = *(void *)(v2 + 40);
    uint64_t v38 = *(void *)(v2 + 32);
    uint64_t v36 = v25;
    uint64_t v26 = *(void *)(v2 + 56);
    uint64_t v40 = *(void *)(v2 + 48);
    uint64_t v41 = v26;
    v48[0] = v37;
    v48[1] = v22;
    v48[2] = v24;
    v48[4] = v38;
    v48[5] = v25;
    v48[6] = v40;
    v48[7] = v26;
    char v49 = v39 & 1;
    swift_retain();
    swift_bridgeObjectRetain();
    v23(v48);
    uint64_t v27 = a1[4];
    static ViewBuilder.buildExpression<A>(_:)(v15, v11, v27);
    uint64_t v28 = *(void (**)(char *, uint64_t))(v12 + 8);
    v28(v15, v11);
    static ViewBuilder.buildExpression<A>(_:)(v17, v11, v27);
    uint64_t v29 = a1[5];
    char v30 = v44;
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v15, v11);
    outlined consume of ResolvedModel3D?(v37, v22);
    v28(v15, v11);
    v28(v17, v11);
  }
  else
  {
    (*(void (**)(uint64_t))(v2 + 88))(v20);
    uint64_t v29 = a1[5];
    uint64_t v31 = v43;
    static ViewBuilder.buildExpression<A>(_:)(v7, v43, v29);
    uint64_t v32 = *(void (**)(char *, uint64_t))(v4 + 8);
    v32(v7, v31);
    static ViewBuilder.buildExpression<A>(_:)(v10, v31, v29);
    uint64_t v27 = a1[4];
    char v30 = v44;
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)v7, v11, v31);
    v32(v7, v31);
    v32(v10, v31);
  }
  uint64_t v50 = v27;
  uint64_t v51 = v29;
  uint64_t v33 = v46;
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v30, v33, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v30, v33);
}

uint64_t outlined consume of ResolvedModel3D?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in Model3D<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in Model3DPlaceholderContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

id outlined copy of Model3DPhase(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  int v9 = a9 >> 6;
  if (v9 == 1)
  {
    return result;
  }
  else if (!v9)
  {
    swift_retain();
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

void destroy for Model3DPhase(uint64_t a1)
{
}

void outlined consume of Model3DPhase(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  int v9 = a9 >> 6;
  if (v9 == 1)
  {
  }
  else if (!v9)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
}

uint64_t initializeWithCopy for Model3DPhase(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 64);
  outlined copy of Model3DPhase(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for Model3DPhase(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 64);
  outlined copy of Model3DPhase(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = *(void **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  unsigned __int8 v20 = *(unsigned char *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  outlined consume of Model3DPhase(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for Model3DPhase(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  unsigned __int8 v12 = *(unsigned char *)(a1 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 64) = v3;
  outlined consume of Model3DPhase(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Model3DPhase(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 24);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for Model3DPhase(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 56) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 64) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(unsigned char *)(a1 + 64) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for Model3DPhase(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 64);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveProjectEnumData for Model3DPhase(uint64_t result)
{
  *(unsigned char *)(result + 64) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for Model3DPhase(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    char v2 = *(unsigned char *)(result + 64) & 1 | ((_BYTE)a2 << 6);
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 64) = v2;
  }
  else
  {
    *(void *)double result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(void *)(result + 56) = 0;
    *(unsigned char *)(result + 64) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for Model3DPhase()
{
  return &type metadata for Model3DPhase;
}

uint64_t type metadata completion function for Model3D()
{
  uint64_t result = type metadata accessor for Model3DLocation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Model3D(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Model3DLocation();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v8 = a2[1];
        *uint64_t v4 = *a2;
        v4[1] = v8;
        uint64_t v9 = (void *)a2[2];
        v4[2] = v9;
        swift_bridgeObjectRetain();
        id v10 = v9;
        goto LABEL_9;
      case 1u:
        uint64_t v12 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v4, a2, v12);
        goto LABEL_9;
      case 2u:
        uint64_t v13 = type metadata accessor for AssetDescriptorRef();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v4, a2, v13);
        goto LABEL_9;
      case 3u:
        uint64_t v14 = a2[1];
        *uint64_t v4 = *a2;
        v4[1] = v14;
        v4[2] = a2[2];
        long long v15 = *((_OWORD *)a2 + 3);
        *((_OWORD *)v4 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)v4 + 3) = v15;
        *((unsigned char *)v4 + 64) = *((unsigned char *)a2 + 64);
        swift_bridgeObjectRetain();
        swift_retain();
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v4, a2, *(void *)(*(void *)(v7 - 8) + 64));
        break;
    }
    uint64_t v16 = *(int *)(a3 + 40);
    *(void *)((char *)v4 + *(int *)(a3 + 36)) = *(void *)((char *)a2 + *(int *)(a3 + 36));
    uint64_t v17 = (void *)((char *)v4 + v16);
    uint64_t v18 = (void *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Model3D(uint64_t a1)
{
  type metadata accessor for Model3DLocation();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();

      break;
    case 1u:
      uint64_t v2 = type metadata accessor for URL();
      goto LABEL_5;
    case 2u:
      uint64_t v2 = type metadata accessor for AssetDescriptorRef();
LABEL_5:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
      break;
    case 3u:
      swift_bridgeObjectRelease();
      swift_release();
      break;
    default:
      break;
  }
  swift_release();

  return swift_release();
}

void *initializeWithCopy for Model3D(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Model3DLocation();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = (void *)a2[2];
      a1[2] = v8;
      swift_bridgeObjectRetain();
      id v9 = v8;
      goto LABEL_7;
    case 1u:
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      goto LABEL_7;
    case 2u:
      uint64_t v11 = type metadata accessor for AssetDescriptorRef();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      goto LABEL_7;
    case 3u:
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      a1[2] = a2[2];
      long long v13 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v13;
      *((unsigned char *)a1 + 64) = *((unsigned char *)a2 + 64);
      swift_bridgeObjectRetain();
      swift_retain();
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  uint64_t v14 = *(int *)(a3 + 40);
  *(void *)((char *)a1 + *(int *)(a3 + 36)) = *(void *)((char *)a2 + *(int *)(a3 + 36));
  long long v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  *long long v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for Model3D(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Model3DLocation((uint64_t)a1);
    uint64_t v6 = type metadata accessor for Model3DLocation();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v7 = (void *)a2[2];
        a1[2] = v7;
        swift_bridgeObjectRetain();
        id v8 = v7;
        goto LABEL_8;
      case 1u:
        uint64_t v9 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        goto LABEL_8;
      case 2u:
        uint64_t v10 = type metadata accessor for AssetDescriptorRef();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        goto LABEL_8;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        long long v11 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v11;
        *((unsigned char *)a1 + 64) = *((unsigned char *)a2 + 64);
        swift_bridgeObjectRetain();
        swift_retain();
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
  }
  *(void *)((char *)a1 + *(int *)(a3 + 36)) = *(void *)((char *)a2 + *(int *)(a3 + 36));
  swift_retain();
  swift_release();
  uint64_t v12 = *(int *)(a3 + 40);
  long long v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *long long v13 = *v14;
  v13[1] = v15;
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for Model3D(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Model3DLocation();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v9 = type metadata accessor for AssetDescriptorRef();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v10 = *(int *)(a3 + 40);
  *(void *)&a1[*(int *)(a3 + 36)] = *(void *)&a2[*(int *)(a3 + 36)];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  return a1;
}

char *assignWithTake for Model3D(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Model3DLocation((uint64_t)a1);
    uint64_t v6 = type metadata accessor for Model3DLocation();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = type metadata accessor for AssetDescriptorRef();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(void *)&a1[*(int *)(a3 + 36)] = *(void *)&a2[*(int *)(a3 + 36)];
  swift_release();
  *(_OWORD *)&a1[*(int *)(a3 + 40)] = *(_OWORD *)&a2[*(int *)(a3 + 40)];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Model3D(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246694B34);
}

uint64_t sub_246694B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Model3DLocation();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 40));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Model3D(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246694C08);
}

uint64_t sub_246694C08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Model3DLocation();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  }
  return result;
}

uint64_t destroy for Model3DPlaceholderContent(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for Model3DPlaceholderContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    long long v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = v8;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Model3DPlaceholderContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_retain();
      swift_release();
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    }
    else
    {
      outlined destroy of ResolvedModel3D(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v7 = *(_OWORD *)(a2 + 32);
      long long v6 = *(_OWORD *)(a2 + 48);
      long long v8 = *(_OWORD *)(a2 + 16);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v8;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    long long v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    long long v9 = *(_OWORD *)(a2 + 16);
    long long v10 = *(_OWORD *)(a2 + 32);
    long long v11 = *(_OWORD *)(a2 + 48);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)(a1 + 48) = v11;
    *(_OWORD *)(a1 + 16) = v9;
  }
  uint64_t v12 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  swift_retain();
  swift_release();
  uint64_t v13 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of ResolvedModel3D(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy104_16(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Model3DPlaceholderContent(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of ResolvedModel3D(a1);
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
LABEL_6:
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Model3DPlaceholderContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Model3DPlaceholderContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_2466950CC()
{
  return MEMORY[0x263F1BA00];
}

uint64_t sub_2466950D8()
{
  return swift_getWitnessTable();
}

uint64_t specialized simd_float3x3.init(cgTransform:vectorType:)@<X0>(double *a1@<X0>, char a2@<W1>, int32x4_t *a3@<X8>)
{
  float v5 = *a1;
  float v6 = a1[1];
  float v7 = a1[2];
  float v8 = a1[3];
  float v9 = a1[4];
  float v10 = a1[5];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
  *(float *)(inited + 32) = v5;
  *(float *)(inited + 36) = v6;
  *(_DWORD *)(inited + 40) = 0;
  specialized SIMD.init<A>(_:)(inited);
  int32x4_t v24 = v12;
  swift_setDeallocating();
  uint64_t v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_2466B5DE0;
  *(float *)(v13 + 32) = v7;
  *(float *)(v13 + 36) = v8;
  *(_DWORD *)(v13 + 40) = 0;
  specialized SIMD.init<A>(_:)(v13);
  int32x4_t v23 = v14;
  swift_setDeallocating();
  uint64_t v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_2466B5DE0;
  *(float *)(v15 + 32) = v9;
  *(float *)(v15 + 36) = v10;
  *(_DWORD *)(v15 + 40) = 1065353216;
  specialized SIMD.init<A>(_:)(v15);
  int32x4_t v25 = v16;
  uint64_t result = swift_setDeallocating();
  if (a2)
  {
    int32x4_t v21 = vzip1q_s32(v24, v25);
    int32x4_t v22 = vzip1q_s32(v23, (int32x4_t)0);
    int32x4_t v19 = vzip1q_s32(v21, v22);
    int32x4_t v20 = vzip2q_s32(v21, v22);
    int32x4_t v18 = vzip1q_s32(vdupq_laneq_s32(v24, 2), vdupq_laneq_s32(v23, 2));
    v19.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v25, 0).i32[2];
    v20.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v25, 1).i32[2];
    v18.i32[2] = v25.i32[2];
  }
  else
  {
    int32x4_t v19 = v24;
    int32x4_t v18 = v25;
    int32x4_t v20 = v23;
  }
  *a3 = v19;
  a3[1] = v20;
  a3[2] = v18;
  return result;
}

uint64_t ARViewContainer.init(model:cameraFeedOverlay:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  type metadata accessor for DataModel(0);
  _s19_RealityKit_SwiftUI9DataModelCAC7Combine16ObservableObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, (void (*)(uint64_t))type metadata accessor for DataModel);
  *a3 = ObservedObject.init(wrappedValue:)();
  a3[1] = v6;
  float v7 = (char *)a3 + *(int *)(type metadata accessor for ARViewContainer() + 36);
  float v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v8(v7, a1, a2);
}

uint64_t type metadata accessor for ARViewContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for ARViewContainer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ARViewContainer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t destroy for ARViewContainer(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *initializeWithCopy for ARViewContainer(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  swift_retain();
  v6(v8, v9, v5);
  return a1;
}

void *assignWithCopy for ARViewContainer(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *initializeWithTake for ARViewContainer(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *assignWithTake for ARViewContainer(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ARViewContainer(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for ARViewContainer(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x246695CFCLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
          int32x4_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for View.Body : View in ARViewContainer<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ARViewContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v27 = type metadata accessor for ARViewContainer.ARViewContainer();
  uint64_t v28 = type metadata accessor for UUID();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v30 = _s19_RealityKit_SwiftUI9DataModelCAC7Combine16ObservableObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  type metadata accessor for IDView();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for ZStack();
  uint64_t v19 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v18 - v5;
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  BOOL v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  int v13 = (char *)&v18 - v12;
  uint64_t v22 = v3;
  uint64_t v23 = v2;
  uint64_t v24 = v20;
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  static Edge.Set.all.getter();
  uint64_t v14 = swift_getWitnessTable();
  View.edgesIgnoringSafeArea(_:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  uint64_t v25 = v14;
  uint64_t v26 = MEMORY[0x263F1A0B8];
  uint64_t v15 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11, v7, v15);
  unsigned int v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13, v7, v15);
  return ((uint64_t (*)(char *, uint64_t))v16)(v13, v7);
}

uint64_t closure #1 in ARViewContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v80 = a4;
  uint64_t v78 = type metadata accessor for ModifiedContent();
  uint64_t v79 = *(void *)(v78 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v78);
  uint64_t v76 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v77 = (char *)&v61 - v9;
  uint64_t v82 = a2;
  uint64_t v81 = a3;
  uint64_t v85 = type metadata accessor for ARViewContainer();
  uint64_t v74 = *(void *)(v85 - 8);
  uint64_t v75 = *(void *)(v74 + 64);
  MEMORY[0x270FA5388](v85);
  unsigned __int8 v72 = (char *)&v61 - v10;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v68 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ARViewContainer.ARViewContainer();
  uint64_t v65 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v64 = WitnessTable;
  uint64_t v63 = _s19_RealityKit_SwiftUI9DataModelCAC7Combine16ObservableObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v91 = v14;
  uint64_t v92 = v11;
  uint64_t v93 = WitnessTable;
  uint64_t v94 = v63;
  uint64_t v16 = type metadata accessor for IDView();
  uint64_t v66 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v61 - v17;
  uint64_t v67 = type metadata accessor for ModifiedContent();
  uint64_t v71 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  unsigned int v62 = (char *)&v61 - v19;
  uint64_t v70 = type metadata accessor for ModifiedContent();
  uint64_t v73 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v83 = (char *)&v61 - v20;
  uint64_t v84 = type metadata accessor for ModifiedContent();
  uint64_t v87 = *(void *)(v84 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v84);
  uint64_t v69 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v86 = (char *)&v61 - v23;
  type metadata accessor for DataModel(0);
  _s19_RealityKit_SwiftUI9DataModelCAC7Combine16ObservableObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, (void (*)(uint64_t))type metadata accessor for DataModel);
  swift_retain();
  uint64_t v91 = ObservedObject.init(wrappedValue:)();
  uint64_t v92 = v24;
  uint64_t v61 = a1;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  View.id<A>(_:)();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v13, v11);
  swift_release();
  static Edge.Set.all.getter();
  uint64_t v25 = swift_getWitnessTable();
  View.edgesIgnoringSafeArea(_:)();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v18, v16);
  uint64_t v26 = v74;
  uint64_t v68 = *(void *)(v74 + 16);
  uint64_t v27 = v72;
  uint64_t v28 = v85;
  ((void (*)(char *, uint64_t, uint64_t))v68)(v72, a1, v85);
  uint64_t v29 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v30 = (v29 + 32) & ~v29;
  v75 += v30;
  uint64_t v66 = v29 | 7;
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = v82;
  uint64_t v33 = v81;
  *(void *)(v31 + 16) = v82;
  *(void *)(v31 + 24) = v33;
  uint64_t v34 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 32);
  v34(v31 + v30, v27, v28);
  v90[8] = v25;
  v90[9] = MEMORY[0x263F1A0B8];
  uint64_t v65 = MEMORY[0x263F18E48];
  uint64_t v35 = v67;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v37 = v62;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v37, v35);
  uint64_t v38 = v85;
  ((void (*)(char *, uint64_t, uint64_t))v68)(v27, v61, v85);
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v32;
  uint64_t v40 = v81;
  *(void *)(v39 + 24) = v81;
  v34(v39 + v30, v27, v38);
  uint64_t v41 = MEMORY[0x263F1A240];
  v90[6] = v36;
  v90[7] = MEMORY[0x263F1A240];
  uint64_t v42 = v70;
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v44 = v69;
  uint64_t v45 = v83;
  View.onDisappear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v45, v42);
  v90[4] = v43;
  v90[5] = v41;
  uint64_t v46 = v84;
  uint64_t v75 = swift_getWitnessTable();
  uint64_t v47 = (uint64_t)v44;
  static ViewBuilder.buildExpression<A>(_:)(v44, v46, v75);
  uint64_t v48 = *(char **)(v87 + 8);
  uint64_t v74 = v87 + 8;
  uint64_t v83 = v48;
  ((void (*)(char *, uint64_t))v48)(v44, v46);
  char v49 = v76;
  View.allowsHitTesting(_:)();
  unint64_t v50 = lazy protocol witness table accessor for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier();
  v90[2] = v40;
  v90[3] = v50;
  uint64_t v51 = v78;
  uint64_t v52 = swift_getWitnessTable();
  uint64_t v53 = v77;
  static ViewBuilder.buildExpression<A>(_:)(v49, v51, v52);
  uint64_t v54 = v79;
  uint64_t v55 = *(void (**)(char *, uint64_t))(v79 + 8);
  v55(v49, v51);
  uint64_t v56 = v44;
  char v57 = v86;
  uint64_t v58 = v84;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v56, v86, v84);
  uint64_t v91 = v47;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v49, v53, v51);
  uint64_t v92 = (uint64_t)v49;
  v90[0] = v58;
  v90[1] = v51;
  uint64_t v88 = v75;
  uint64_t v89 = v52;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)&v91, 2uLL, (uint64_t)v90);
  v55(v53, v51);
  long long v59 = (uint64_t (*)(uint64_t, uint64_t))v83;
  ((void (*)(char *, uint64_t))v83)(v57, v58);
  v55(v49, v51);
  return v59(v47, v58);
}

uint64_t closure #1 in closure #1 in ARViewContainer.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, void (*a5)(uint64_t))
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)logger);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_2465C2000, v8, v9, a4, v10, 2u);
    MEMORY[0x24C5348D0](v10, -1, -1);
  }

  uint64_t v11 = swift_retain();
  a5(v11);

  return swift_release();
}

uint64_t ARViewContainer.ARViewContainer.ensureWorldAnchorExists()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)(a2 + 16);
  if (!v8)
  {
    __break(1u);
    goto LABEL_7;
  }
  id v9 = v8;
  dispatch thunk of ARView.scene.getter();

  dispatch thunk of Scene.anchors.getter();
  swift_release();
  uint64_t v10 = specialized Collection.first.getter();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v7, v3);
  uint64_t result = swift_release();
  if (v10) {
    return result;
  }
  type metadata accessor for AnchorEntity();
  uint64_t v12 = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of ARViewContainer.ARViewContainer.ensureWorldAnchorExists());
  uint64_t result = MEMORY[0x24C530D40](v12);
  int v13 = *(void **)(a2 + 16);
  if (!v13)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  id v14 = v13;
  dispatch thunk of ARView.scene.getter();

  dispatch thunk of Scene.anchors.getter();
  swift_release();
  swift_retain();
  Scene.AnchorCollection.append(_:)();
  swift_release_n();
  return ((uint64_t (*)(char *, uint64_t))v11)(v7, v3);
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance ARViewContainer<A>.ARViewContainer()
{
  return specialized ARViewContainer.ARViewContainer.makeUIView(context:)(*(id *)v0, *(void *)(v0 + 8));
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ARViewContainer<A>.ARViewContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F01780](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ARViewContainer<A>.ARViewContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F01718](a1, a2, a3, WitnessTable);
}

void protocol witness for View.body.getter in conformance ARViewContainer<A>.ARViewContainer()
{
}

uint64_t type metadata accessor for ARViewContainer.ARViewContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _s19_RealityKit_SwiftUI9DataModelCAC7Combine16ObservableObjectAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ARViewContainer.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ARViewContainer.body.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t partial apply for closure #1 in closure #1 in ARViewContainer.body.getter()
{
  return partial apply for closure #1 in closure #1 in ARViewContainer.body.getter("DataModel is resuming...", (void (*)(uint64_t))DataModel.resume());
}

uint64_t objectdestroyTm_6()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for ARViewContainer() - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(*(void *)v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = v0 + v4;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v7 + v2[11], v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #2 in closure #1 in ARViewContainer.body.getter()
{
  return partial apply for closure #1 in closure #1 in ARViewContainer.body.getter("DataModel is pausing...", (void (*)(uint64_t))DataModel.pause());
}

uint64_t partial apply for closure #1 in closure #1 in ARViewContainer.body.getter(const char *a1, void (*a2)(uint64_t))
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for ARViewContainer() - 8);
  return closure #1 in closure #1 in ARViewContainer.body.getter(v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v5, v6, a1, a2);
}

unint64_t lazy protocol witness table accessor for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier;
  if (!lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier);
  }
  return result;
}

uint64_t sub_246697210()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for View in ARViewContainer<A>.ARViewContainer()
{
  return swift_getWitnessTable();
}

id specialized ARViewContainer.ARViewContainer.makeUIView(context:)(id result, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = (uint64_t)result;
    uint64_t v5 = one-time initialization token for logger;
    id v6 = v2;
    if (v5 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    id v8 = v6;
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      os_log_type_t type = v10;
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v22 = v20;
      *(_DWORD *)uint64_t v11 = 136315138;
      buf = v11;
      id v12 = v8;
      uint64_t v13 = v4;
      uint64_t v14 = v3;
      id v15 = objc_msgSend(v12, sel_description);
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      uint64_t v3 = v14;
      uint64_t v4 = v13;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v9, type, "Got arView: %s", buf, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v20, -1, -1);
      MEMORY[0x24C5348D0](buf, -1, -1);
    }
    else
    {
    }
    ARViewContainer.ARViewContainer.ensureWorldAnchorExists()(v4, v3);
    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t one-time initialization function for captureSoundModuleType()
{
  uint64_t v0 = specialized static ExperimentSettings.loadCaptureSoundModuleType(default:)(0x6B6143726579616CLL, 0xE900000000000065);
  uint64_t v2 = v1;
  v3._countAndFlagsBits = v0;
  v3._object = v2;
  Swift::Int v4 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CaptureSoundModuleType.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  captureSoundModuleuint64_t Type = v4 != 0;
  return result;
}

uint64_t createCaptureSoundModule()@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for captureSoundModuleType != -1) {
    swift_once();
  }
  if (captureSoundModuleType)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)logger);
    Swift::String v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_2465C2000, v3, v4, "Using layered sound module.", v5, 2u);
      MEMORY[0x24C5348D0](v5, -1, -1);
    }

    uint64_t v6 = type metadata accessor for LayerCakeCaptureSoundModule();
    uint64_t result = swift_allocObject();
    uint64_t v8 = MEMORY[0x263F8EE78];
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v8;
    *(void *)(result + 32) = v8;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)(result + 72) = v8;
    *(_DWORD *)(result + 80) = 1048576000;
    *(void *)(result + 88) = 0x3FD3333333333333;
    *(void *)(result + 96) = &outlined read-only object #0 of LayerCakeCaptureSoundModule.init();
    *(void *)(result + 104) = 0xFFF0000000000000;
    if (qword_26FACA1D8)
    {
      id v9 = &protocol witness table for LayerCakeCaptureSoundModule;
      goto LABEL_14;
    }
    __break(1u);
    goto LABEL_16;
  }
  if (one-time initialization token for logger != -1) {
LABEL_16:
  }
    swift_once();
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)logger);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_2465C2000, v11, v12, "Using filter stack sound module.", v13, 2u);
    MEMORY[0x24C5348D0](v13, -1, -1);
  }

  uint64_t v6 = type metadata accessor for FilterPipeCaptureSoundModule();
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 5;
  *(_DWORD *)(result + 64) = 16843009;
  *(_OWORD *)(result + 68) = xmmword_2466BD0F0;
  *(_DWORD *)(result + 84) = 1150681088;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(_DWORD *)(result + 120) = 1048576000;
  id v9 = &protocol witness table for FilterPipeCaptureSoundModule;
LABEL_14:
  a1[3] = v6;
  a1[4] = (uint64_t)v9;
  *a1 = result;
  return result;
}

uint64_t one-time initialization function for isSoundEnabled()
{
  uint64_t result = specialized static ExperimentSettings.loadIsSoundEnabled(default:)(1u);
  static SoundManager.isSoundEnabled = result & 1;
  return result;
}

void *one-time initialization function for instance()
{
  createCaptureSoundModule()(v1);
  type metadata accessor for SoundManager();
  swift_allocObject();
  uint64_t result = SoundManager.init(module:)((uint64_t)v1);
  static SoundManager.instance = (uint64_t)result;
  return result;
}

void *SoundManager.init(module:)(uint64_t a1)
{
  uint64_t v19 = (void *)a1;
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  Swift::String v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v5 - 8);
  v16[1] = type metadata accessor for OS_dispatch_queue();
  unint64_t v20 = 0xD000000000000022;
  unint64_t v21 = 0x80000002466BE5F0;
  v6._object = (void *)0x80000002466C39D0;
  v6._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v6);
  static DispatchQoS.userInteractive.getter();
  unint64_t v20 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F8F130], v17);
  uint64_t v7 = v18;
  *(void *)(v7 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(unsigned char *)(v7 + 24) = 0;
  *(void *)(v7 + 72) = 0;
  *(void *)(v7 + 80) = 0;
  if (one-time initialization token for isSoundEnabled != -1) {
    swift_once();
  }
  if (static SoundManager.isSoundEnabled != 1)
  {
    uint64_t v8 = v19;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)logger);
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_2465C2000, v12, v13, "Sound is not enabled...  not creating the SoundManager singleton!", v14, 2u);
      MEMORY[0x24C5348D0](v14, -1, -1);
    }

    type metadata accessor for SoundManager();
    swift_deallocPartialClassInstance();
    uint64_t v7 = 0;
    goto LABEL_12;
  }
  uint64_t v8 = v19;
  outlined init with copy of Cancellable((uint64_t)v19, v7 + 32);
  uint64_t v9 = v8[3];
  uint64_t v10 = v8[4];
  __swift_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  SoundManager.initializeAudioEngine()();
  uint64_t result = *(void **)(v7 + 72);
  if (result)
  {
    objc_msgSend(result, sel_prepare);
    *(unsigned char *)(v7 + 24) = 4;
LABEL_12:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    return (void *)v7;
  }
  __break(1u);
  return result;
}

void *SoundManager.initializeAudioEngine()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  Swift::String v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Initializing audio engine...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF9360]), sel_init);
  uint64_t v7 = *(void **)(v1 + 72);
  *(void *)(v1 + 72) = v6;

  uint64_t result = *(void **)(v1 + 72);
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  id v9 = objc_msgSend(result, sel_mainMixerNode);
  uint64_t v10 = *(void **)(v1 + 80);
  *(void *)(v1 + 80) = v9;

  outlined init with copy of Cancellable(v1 + 32, (uint64_t)v15);
  uint64_t v11 = v15[4];
  uint64_t result = __swift_project_boxed_opaque_existential_1(v15, v15[3]);
  os_log_type_t v12 = *(void **)(v1 + 72);
  if (!v12)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  os_log_type_t v13 = *(void (**)(void))(v11 + 16);
  id v14 = v12;
  v13();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  uint64_t result = *(void **)(v1 + 72);
  if (result) {
    return objc_msgSend(result, sel_setAutoShutdownEnabled_, 0);
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t SoundManager.__deallocating_deinit()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_, v0);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 4));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SoundManager()
{
  return self;
}

void SoundManager.startEngineIfNeeded()()
{
  uint64_t v1 = v0;
  v44[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (id *)((char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v6 = *(void **)(v1 + 16);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    swift_once();
LABEL_5:
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)logger);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v12 = 0;
      _os_log_impl(&dword_2465C2000, v10, v11, "Starting audio engine...", v12, 2u);
      MEMORY[0x24C5348D0](v12, -1, -1);
    }

    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl(&dword_2465C2000, v13, v14, "Setting the audio session to soloAmbient and active...", v15, 2u);
      MEMORY[0x24C5348D0](v15, -1, -1);
    }

    id v16 = objc_msgSend(self, sel_sharedInstance);
    uint64_t v17 = *MEMORY[0x263EF9080];
    v44[0] = 0;
    unsigned int v18 = objc_msgSend(v16, sel_setCategory_error_, v17, v44);
    id v19 = v44[0];
    if (v18
      && (v44[0] = 0,
          id v20 = v19,
          unsigned __int8 v21 = objc_msgSend(v16, sel_setActive_withOptions_error_, 1, 0, v44),
          id v19 = v44[0],
          (v21 & 1) != 0))
    {
      id v22 = v44[0];

      uint64_t v23 = *(void **)(v1 + 72);
      if (!v23)
      {
        __break(1u);
        return;
      }
      v44[0] = 0;
      unsigned __int8 v24 = objc_msgSend(v23, sel_startAndReturnError_, v44);
      id v25 = v44[0];
      if (v24)
      {
        *(unsigned char *)(v1 + 24) = 1;
        uint64_t v26 = self;
        id v27 = v25;
        id v28 = objc_msgSend(v26, sel_defaultCenter);
        objc_msgSend(v28, sel_addObserver_selector_name_object_, v1, sel_handleEngineConfigChange_, *MEMORY[0x263EF9020], 0);

        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v31 = 0;
          _os_log_impl(&dword_2465C2000, v29, v30, "... done starting audio engine.", v31, 2u);
          MEMORY[0x24C5348D0](v31, -1, -1);
        }

        return;
      }
      id v42 = v44[0];
      uint64_t v33 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
    }
    else
    {
      id v32 = v19;
      uint64_t v33 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
    }
    id v34 = v33;
    id v35 = v33;
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 138543362;
      id v40 = v33;
      uint64_t v41 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v44[0] = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v39 = v41;

      _os_log_impl(&dword_2465C2000, v36, v37, "Can't start audio engine!  error=%{public}@", v38, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v39, -1, -1);
      MEMORY[0x24C5348D0](v38, -1, -1);
    }
    else
    {
    }
    return;
  }
  uint64_t v8 = *(void **)(v1 + 72);
  if (!v8) {
    __break(1u);
  }
  if ((objc_msgSend(v8, sel_isRunning) & 1) == 0)
  {
    if (one-time initialization token for logger == -1) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
}

Swift::Void __swiftcall SoundManager.start()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  id v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = *(void *)(v0 + 16);
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = partial apply for closure #1 in SoundManager.start();
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_165;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v12 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24C533830](0, v7, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v11);
  swift_release();
  swift_release();
}

uint64_t closure #1 in SoundManager.start()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    SoundManager.startEngineIfNeeded()();
    return swift_release();
  }
  return result;
}

id SoundManager.pauseEngine()()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 16);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F0E0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  id result = (id)(*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  id result = *(id *)(v0 + 72);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  id result = objc_msgSend(result, sel_isRunning);
  if (!result)
  {
LABEL_6:
    *(unsigned char *)(v0 + 24) = 3;
    return result;
  }
  id result = *(id *)(v0 + 72);
  if (result)
  {
    id result = objc_msgSend(result, sel_pause);
    goto LABEL_6;
  }
LABEL_9:
  __break(1u);
  return result;
}

Swift::Void __swiftcall SoundManager.requestStandby(after:)(Swift::Double after)
{
}

uint64_t closure #1 in SoundManager.requestStandby(after:)(double a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(v31 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v31);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  os_log_type_t v14 = (char *)v25 - v13;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v28 = v6;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    id v27 = v8;
    uint64_t v29 = v3;
    uint64_t v30 = v2;
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)logger);
    unsigned int v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v20 = 0;
      _os_log_impl(&dword_2465C2000, v18, v19, "requestStop()...", v20, 2u);
      MEMORY[0x24C5348D0](v20, -1, -1);
    }

    *(unsigned char *)(v16 + 24) = 2;
    v25[1] = *(void *)(v16 + 16);
    static DispatchTime.now()();
    MEMORY[0x24C533360](v12, a1);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v21 = v31;
    v26(v12, v31);
    aBlock[4] = partial apply for closure #1 in closure #1 in SoundManager.requestStandby(after:);
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_161;
    id v22 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v23 = v27;
    static DispatchQoS.unspecified.getter();
    uint64_t v33 = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v24 = v30;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x24C5337E0](v14, v23, v5, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v24);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v28);
    v26(v14, v21);
    swift_release();
    return swift_release();
  }
  return result;
}

void closure #1 in closure #1 in SoundManager.requestStandby(after:)(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) == 2)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)logger);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_2465C2000, v2, v3, "... requested standby reached, entering standby.", v4, 2u);
      MEMORY[0x24C5348D0](v4, -1, -1);
    }

    SoundManager.pauseEngine()();
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_2465C2000, oslog, v6, "... the requested standby was ignored since the request was overridden.", v7, 2u);
      MEMORY[0x24C5348D0](v7, -1, -1);
    }
  }
}

Swift::Void __swiftcall SoundManager.update(t:)(Swift::Double t)
{
}

uint64_t SoundManager.requestStandby(after:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  os_log_type_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(void *)(v4 + 16);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  *(double *)(v16 + 24) = a1;
  aBlock[4] = a3;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = a4;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v21 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24C533830](0, v14, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v20);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in SoundManager.update(t:)(double a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    outlined init with copy of Cancellable(result + 32, (uint64_t)v5);
    swift_release();
    uint64_t v3 = v6;
    uint64_t v4 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    (*(void (**)(uint64_t, uint64_t, double))(v4 + 64))(v3, v4, a1);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return result;
}

Swift::Void __swiftcall SoundManager.startLoop(playStartSound:)(Swift::Bool playStartSound)
{
}

void closure #1 in SoundManager.startLoop(playStartSound:)(uint64_t a1, char a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)logger);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 67240192;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2465C2000, v6, v7, "Starting the loop sound...  playStartSound=%{BOOL,public}d", v8, 8u);
      MEMORY[0x24C5348D0](v8, -1, -1);
    }

    SoundManager.startEngineIfNeeded()();
    uint64_t v9 = (void *)v4[9];
    if (v9)
    {
      if (objc_msgSend(v9, sel_isRunning))
      {
        uint64_t v10 = v4[7];
        uint64_t v11 = v4[8];
        __swift_project_boxed_opaque_existential_1(v4 + 4, v10);
        (*(void (**)(void, uint64_t, uint64_t))(v11 + 24))(a2 & 1, v10, v11);
      }
      else
      {
        uint64_t v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v12, v13))
        {
          os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v14 = 0;
          _os_log_impl(&dword_2465C2000, v12, v13, "Audio engine not running, not playing sound!", v14, 2u);
          MEMORY[0x24C5348D0](v14, -1, -1);
          swift_release();

          return;
        }
      }
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall SoundManager.stopLoop(playEndSound:)(Swift::Bool playEndSound)
{
}

uint64_t SoundManager.startLoop(playStartSound:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[0] = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  os_log_type_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(void *)(v4 + 16);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(unsigned char *)(v15 + 24) = a1;
  aBlock[4] = a3;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v18[0];
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v20 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24C533830](0, v13, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v19);
  swift_release();
  return swift_release();
}

void closure #1 in SoundManager.stopLoop(playEndSound:)(uint64_t a1, char a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    SoundManager.startEngineIfNeeded()();
    uint64_t v5 = (void *)v4[9];
    if (v5)
    {
      if (objc_msgSend(v5, sel_isRunning))
      {
        uint64_t v6 = v4[7];
        uint64_t v7 = v4[8];
        __swift_project_boxed_opaque_existential_1(v4 + 4, v6);
        (*(void (**)(void, uint64_t, uint64_t))(v7 + 32))(a2 & 1, v6, v7);
      }
      else
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        __swift_project_value_buffer(v8, (uint64_t)logger);
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v11 = 0;
          _os_log_impl(&dword_2465C2000, v9, v10, "Audio engine not running, not playing sound!", v11, 2u);
          MEMORY[0x24C5348D0](v11, -1, -1);
          swift_release();

          return;
        }
      }
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall SoundManager.playShutterSound(volume:)(Swift::Float volume)
{
}

void closure #1 in SoundManager.playShutterSound(volume:)(float a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    SoundManager.startEngineIfNeeded()();
    uint64_t v4 = (void *)v3[9];
    if (v4)
    {
      if (objc_msgSend(v4, sel_isRunning))
      {
        uint64_t v5 = v3[7];
        uint64_t v6 = v3[8];
        __swift_project_boxed_opaque_existential_1(v3 + 4, v5);
        (*(void (**)(uint64_t, uint64_t, float))(v6 + 40))(v5, v6, a1);
      }
      else
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v7 = type metadata accessor for Logger();
        __swift_project_value_buffer(v7, (uint64_t)logger);
        uint64_t v8 = Logger.logObject.getter();
        os_log_type_t v9 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v8, v9))
        {
          os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v10 = 0;
          _os_log_impl(&dword_2465C2000, v8, v9, "Audio engine not running, not playing sound!", v10, 2u);
          MEMORY[0x24C5348D0](v10, -1, -1);
          swift_release();

          return;
        }
      }
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall SoundManager.playCompletionSound(volume:)(Swift::Float volume)
{
}

uint64_t SoundManager.playShutterSound(volume:)(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(void *)(v4 + 16);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  *(float *)(v16 + 24) = a1;
  aBlock[4] = a3;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = a4;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v21 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24C533830](0, v14, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v20);
  swift_release();
  return swift_release();
}

void closure #1 in SoundManager.playCompletionSound(volume:)(float a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    SoundManager.startEngineIfNeeded()();
    uint64_t v4 = (void *)v3[9];
    if (v4)
    {
      if (objc_msgSend(v4, sel_isRunning))
      {
        uint64_t v5 = v3[7];
        uint64_t v6 = v3[8];
        __swift_project_boxed_opaque_existential_1(v3 + 4, v5);
        (*(void (**)(uint64_t, uint64_t, float))(v6 + 48))(v5, v6, a1);
      }
      else
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v7 = type metadata accessor for Logger();
        __swift_project_value_buffer(v7, (uint64_t)logger);
        uint64_t v8 = Logger.logObject.getter();
        os_log_type_t v9 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v8, v9))
        {
          uint64_t v10 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v10 = 0;
          _os_log_impl(&dword_2465C2000, v8, v9, "Audio engine not running, not playing sound!", v10, 2u);
          MEMORY[0x24C5348D0](v10, -1, -1);
          swift_release();

          return;
        }
      }
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall SoundManager.updateGoodnessScore(_:)(Swift::Float a1)
{
}

uint64_t closure #1 in SoundManager.updateGoodnessScore(_:)(float a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    outlined init with copy of Cancellable(result + 32, (uint64_t)v5);
    swift_release();
    uint64_t v3 = v6;
    uint64_t v4 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    (*(void (**)(uint64_t, uint64_t, float))(v4 + 56))(v3, v4, a1);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return result;
}

void FilterPipeCaptureSoundModule.loadSamples()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Loading capture sound samples...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  uint64_t v6 = specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6C5F6E6163735F31, 0xEB00000000706F6FLL);
  if (!v1)
  {
    uint64_t v7 = (void *)v0[12];
    v0[12] = v6;

    uint64_t v8 = specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6163735F6E65706FLL, 0xE90000000000006ELL);
    os_log_type_t v9 = (void *)v0[11];
    v0[11] = v8;

    uint64_t v10 = specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6D6F635F6E616373, 0xED00006574656C70);
    uint64_t v11 = (void *)v0[13];
    v0[13] = v10;

    uint64_t v12 = specialized static SoundManager.loadAudioFileFromBundle(named:)(0x65736C7570, 0xE500000000000000);
    uint64_t v13 = (void *)v0[14];
    v0[14] = v12;

    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_2465C2000, v14, v15, "... done loading capture sound samples.", v16, 2u);
      MEMORY[0x24C5348D0](v16, -1, -1);
    }
  }
}

void FilterPipeCaptureSoundModule.connectGraph(engine:)(void *a1)
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_2465C2000, v4, v5, "Creating loop playback node...", v6, 2u);
    MEMORY[0x24C5348D0](v6, -1, -1);
  }

  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF93C8]), sel_init);
  uint64_t v8 = (void *)v1[2];
  v1[2] = v7;

  if (!v1[2])
  {
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  objc_msgSend(a1, sel_attachNode_);
  os_log_type_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_2465C2000, v9, v10, "Creating an audio distortion node...", v11, 2u);
    MEMORY[0x24C5348D0](v11, -1, -1);
  }

  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF9450]), sel_init);
  uint64_t v13 = (void *)v1[3];
  v1[3] = v12;

  uint64_t v14 = (void *)v1[3];
  if (!v14) {
    goto LABEL_49;
  }
  objc_msgSend(v14, sel_loadFactoryPreset_, v1[7]);
  if (!v1[3])
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  objc_msgSend(a1, sel_attachNode_);
  os_log_type_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_2465C2000, v15, v16, "Creating a pitchshifter node...", v17, 2u);
    MEMORY[0x24C5348D0](v17, -1, -1);
  }

  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF9470]), sel_init);
  uint64_t v19 = (void *)v1[4];
  v1[4] = v18;

  if (!v1[4]) {
    goto LABEL_51;
  }
  objc_msgSend(a1, sel_attachNode_);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    id v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v22 = 0;
    _os_log_impl(&dword_2465C2000, v20, v21, "Creating a varispeed node...", v22, 2u);
    MEMORY[0x24C5348D0](v22, -1, -1);
  }

  id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF9478]), sel_init);
  uint64_t v24 = (void *)v1[5];
  uint64_t v1[5] = v23;

  if (!v1[5]) {
    goto LABEL_52;
  }
  objc_msgSend(a1, sel_attachNode_);
  id v25 = objc_msgSend(a1, sel_mainMixerNode);
  uint64_t v26 = (void *)v1[2];
  if (!v26)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  id v27 = (void *)v1[5];
  if (!v27)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v28 = (void *)v1[12];
  if (!v28)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v29 = v25;
  id v30 = v26;
  id v31 = v27;
  id v32 = objc_msgSend(v28, sel_format);
  objc_msgSend(a1, sel_connect_to_format_, v30, v31, v32);

  uint64_t v33 = (void *)v1[5];
  if (!v33)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  id v34 = (void *)v1[3];
  if (!v34)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  id v35 = (void *)v1[12];
  if (!v35)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  id v36 = v33;
  id v37 = v34;
  id v38 = objc_msgSend(v35, sel_format);
  objc_msgSend(a1, sel_connect_to_format_, v36, v37, v38);

  uint64_t v39 = (void *)v1[3];
  if (!v39)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  id v40 = (void *)v1[4];
  if (!v40)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v41 = (void *)v1[12];
  if (!v41)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  id v42 = v39;
  id v43 = v40;
  id v44 = objc_msgSend(v41, sel_format);
  objc_msgSend(a1, sel_connect_to_format_, v42, v43, v44);

  uint64_t v45 = (void *)v1[4];
  if (!v45)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v46 = (void *)v1[12];
  if (!v46)
  {
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  id v47 = v45;
  id v48 = objc_msgSend(v46, sel_format);
  objc_msgSend(a1, sel_connect_to_format_, v47, v29, v48);

  char v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v51 = 0;
    _os_log_impl(&dword_2465C2000, v49, v50, "... playback node connected.", v51, 2u);
    MEMORY[0x24C5348D0](v51, -1, -1);
  }

  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v54 = 0;
    _os_log_impl(&dword_2465C2000, v52, v53, "... speed node connected.", v54, 2u);
    MEMORY[0x24C5348D0](v54, -1, -1);
  }

  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v55, v56))
  {
    char v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v57 = 0;
    _os_log_impl(&dword_2465C2000, v55, v56, "... distortion node connected.", v57, 2u);
    MEMORY[0x24C5348D0](v57, -1, -1);
  }

  uint64_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v60 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v60 = 0;
    _os_log_impl(&dword_2465C2000, v58, v59, "... pitchshifter node connected.", v60, 2u);
    MEMORY[0x24C5348D0](v60, -1, -1);
  }

  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v63 = 0;
    _os_log_impl(&dword_2465C2000, v61, v62, "... done audio engine initializing.", v63, 2u);
    MEMORY[0x24C5348D0](v63, -1, -1);
  }

  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v66 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_2465C2000, v64, v65, "Creating the shutter playback node...", v66, 2u);
    MEMORY[0x24C5348D0](v66, -1, -1);
  }

  id v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF93C8]), sel_init);
  uint64_t v68 = (void *)v1[6];
  v1[6] = v67;

  if (!v1[6]) {
    goto LABEL_64;
  }
  objc_msgSend(a1, sel_attachNode_);
  uint64_t v69 = (void *)v1[6];
  if (!v69)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  uint64_t v70 = (void *)v1[14];
  if (!v70)
  {
LABEL_66:
    __break(1u);
    return;
  }
  id v71 = v69;
  id v72 = objc_msgSend(v70, sel_format);
  objc_msgSend(a1, sel_connect_to_format_, v71, v29, v72);

  oslog = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v73))
  {
    uint64_t v74 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v74 = 0;
    _os_log_impl(&dword_2465C2000, oslog, v73, "... connected shutter playback node.", v74, 2u);
    MEMORY[0x24C5348D0](v74, -1, -1);
    uint64_t v75 = v29;
  }
  else
  {
    uint64_t v75 = oslog;
    oslog = v29;
  }
}

id FilterPipeCaptureSoundModule.stopLoop(playEndSound:)(char a1)
{
  if (a1)
  {
    id result = *(id *)(v1 + 16);
    if (!result)
    {
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
    uint64_t v3 = *(void *)(v1 + 104);
    if (!v3)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 2, 0);
  }
  id result = *(id *)(v1 + 16);
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }

  return objc_msgSend(result, sel_stop);
}

id FilterPipeCaptureSoundModule.playShutterSound(volume:)(float a1)
{
  id result = *(id *)(v1 + 48);
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v3 = *(void *)(v1 + 112);
  if (!v3)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 0, 0);
  id result = *(id *)(v1 + 48);
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(float *)&double v5 = a1;
  objc_msgSend(result, sel_setVolume_, v5);
  id result = *(id *)(v1 + 48);
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  return objc_msgSend(result, sel_play);
}

id FilterPipeCaptureSoundModule.playCompletionSound(volume:)(float a1)
{
  id result = *(id *)(v1 + 48);
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v3 = *(void *)(v1 + 104);
  if (!v3)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 0, 0);
  id result = *(id *)(v1 + 48);
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(float *)&double v5 = a1;
  objc_msgSend(result, sel_setVolume_, v5);
  id result = *(id *)(v1 + 48);
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  return objc_msgSend(result, sel_play);
}

id FilterPipeCaptureSoundModule.updateGoodnessScore(_:)(double a1)
{
  float v2 = 0.0;
  if (*(float *)&a1 <= 0.0) {
    *(float *)&a1 = 0.0;
  }
  if (*(float *)&a1 > 1.0) {
    *(float *)&a1 = 1.0;
  }
  float v3 = vabds_f32(1.0, *(float *)&a1);
  if (v3 > 0.25) {
    float v2 = (float)((float)(1.0 - *(float *)&a1) + (float)((float)((float)(1.0 - *(float *)&a1) / v3) * -0.25)) / 0.75;
  }
  id result = (id)v1[2];
  if (!result)
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (*(float *)&a1 <= 0.2) {
    *(float *)&a1 = 0.2;
  }
  if (*(float *)&a1 > 0.8) {
    *(float *)&a1 = 0.8;
  }
  objc_msgSend(result, sel_setVolume_, a1);
  id result = (id)v1[3];
  if (!result) {
    goto LABEL_21;
  }
  *(float *)&double v5 = v2 * v2;
  if ((float)(v2 * v2) > 0.5) {
    *(float *)&double v5 = 0.5;
  }
  objc_msgSend(result, sel_setWetDryMix_, v5);
  id result = (id)v1[4];
  if (!result) {
    goto LABEL_22;
  }
  *(float *)&double v6 = v2 * -1200.0;
  objc_msgSend(result, sel_setPitch_, v6);
  id result = (id)v1[5];
  if (!result)
  {
LABEL_23:
    __break(1u);
    return result;
  }

  *(float *)&double v7 = (float)(v2 * -0.5) + 1.0;
  return objc_msgSend(result, sel_setRate_, v7);
}

id *FilterPipeCaptureSoundModule.deinit()
{
  return v0;
}

uint64_t FilterPipeCaptureSoundModule.__deallocating_deinit()
{
  FilterPipeCaptureSoundModule.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FilterPipeCaptureSoundModule()
{
  return self;
}

void protocol witness for CaptureSoundModule.loadSamples() in conformance FilterPipeCaptureSoundModule()
{
}

void protocol witness for CaptureSoundModule.connectGraph(engine:) in conformance FilterPipeCaptureSoundModule(void *a1)
{
}

id protocol witness for CaptureSoundModule.startLoop(playStartSound:) in conformance FilterPipeCaptureSoundModule()
{
  return specialized FilterPipeCaptureSoundModule.startLoop(playStartSound:)();
}

id protocol witness for CaptureSoundModule.stopLoop(playEndSound:) in conformance FilterPipeCaptureSoundModule(char a1)
{
  return FilterPipeCaptureSoundModule.stopLoop(playEndSound:)(a1);
}

id protocol witness for CaptureSoundModule.playShutterSound(volume:) in conformance FilterPipeCaptureSoundModule(float a1)
{
  return FilterPipeCaptureSoundModule.playShutterSound(volume:)(a1);
}

id protocol witness for CaptureSoundModule.playCompletionSound(volume:) in conformance FilterPipeCaptureSoundModule(float a1)
{
  return FilterPipeCaptureSoundModule.playCompletionSound(volume:)(a1);
}

id protocol witness for CaptureSoundModule.updateGoodnessScore(_:) in conformance FilterPipeCaptureSoundModule(double a1)
{
  return FilterPipeCaptureSoundModule.updateGoodnessScore(_:)(a1);
}

uint64_t Fader.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Fader()
{
  return self;
}

void LayerCakeCaptureSoundModule.loadSamples()()
{
  float v2 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    double v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v6 = 0;
    _os_log_impl(&dword_2465C2000, v4, v5, "Loading capture sound samples...", v6, 2u);
    MEMORY[0x24C5348D0](v6, -1, -1);
  }

  uint64_t v7 = specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6163735F6E65706FLL, 0xE90000000000006ELL);
  if (!v1)
  {
    uint64_t v8 = (void *)v2[6];
    v2[6] = v7;

    uint64_t v9 = specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6D6F635F6E616373, 0xED00006574656C70);
    os_log_type_t v10 = (void *)v2[7];
    v2[7] = v9;

    uint64_t v11 = specialized static SoundManager.loadAudioFileFromBundle(named:)(0x65736C7570, 0xE500000000000000);
    id v12 = (void *)v2[8];
    v2[8] = v11;

    specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6C5F6E6163735F31, 0xEB00000000706F6FLL);
    uint64_t v13 = v2 + 9;
    uint64_t v14 = swift_beginAccess();
    MEMORY[0x24C533580](v14);
    if (*(void *)((v2[9] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v2[9] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6C5F6E6163735F32, 0xEB00000000706F6FLL);
    uint64_t v15 = swift_beginAccess();
    MEMORY[0x24C533580](v15);
    if (*(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6C5F6E6163735F33, 0xEB00000000706F6FLL);
    uint64_t v16 = swift_beginAccess();
    MEMORY[0x24C533580](v16);
    if (*(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_2465C2000, v17, v18, "... done loading capture sound samples.", v19, 2u);
      MEMORY[0x24C5348D0](v19, -1, -1);
    }
  }
}

void LayerCakeCaptureSoundModule.connectGraph(engine:)(void *a1)
{
  unint64_t v6 = (unint64_t)v1;
  uint64_t v8 = v1 + 3;
  swift_beginAccess();
  unint64_t v9 = *(void *)(v6 + 24);
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v10) {
      goto LABEL_3;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    id v30 = (id)v4;
    swift_bridgeObjectRetain();
    id v15 = (id)MEMORY[0x24C533AF0](0, v5);
    swift_bridgeObjectRelease();
LABEL_8:
    id v16 = objc_msgSend(v15, sel_format);

    objc_msgSend(a1, sel_connect_to_format_, v4, v2, v16);
    uint64_t v10 = 0x263EF9000uLL;
    [objc_allocWithZone(MEMORY[0x263EF93C8]) *(SEL *)(v3 + 2144)];
    uint64_t v17 = swift_beginAccess();
    MEMORY[0x24C533580](v17);
    if (*(void *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_31:
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v10) {
    goto LABEL_32;
  }
LABEL_3:
  float v2 = objc_msgSend(a1, sel_mainMixerNode);
  uint64_t v3 = (uint64_t)&off_2651E2000;
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF9398]), sel_init);
  id v12 = *(void **)(v6 + 16);
  *(void *)(v6 + 16) = v11;

  if (!*(void *)(v6 + 16))
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  objc_msgSend(a1, sel_attachNode_);
  unint64_t v4 = *(void *)(v6 + 16);
  if (!v4)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  id v47 = (unint64_t *)(v6 + 72);
  swift_beginAccess();
  unint64_t v5 = *(void *)(v6 + 72);
  if ((v5 & 0xC000000000000001) != 0) {
    goto LABEL_33;
  }
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v13 = *(void **)(v5 + 32);
    id v14 = (id)v4;
    id v15 = v13;
    goto LABEL_8;
  }
  __break(1u);
LABEL_35:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_9:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  [objc_allocWithZone(*(Class *)(v10 + 968)) *(SEL *)(v3 + 2144)];
  uint64_t v18 = swift_beginAccess();
  MEMORY[0x24C533580](v18);
  if (*(void *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  [objc_allocWithZone(*(Class *)(v10 + 968)) *(SEL *)(v3 + 2144)];
  uint64_t v19 = swift_beginAccess();
  MEMORY[0x24C533580](v19);
  if (*(void *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  unint64_t v4 = *v8;
  uint64_t v45 = v2;
  if (*v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    if (v20)
    {
LABEL_15:
      uint64_t v8 = (unint64_t *)(v6 + 32);
      uint64_t v46 = v20;
      uint64_t v3 = 4;
      while (1)
      {
        if ((v4 & 0xC000000000000001) != 0) {
          os_log_type_t v21 = (void *)MEMORY[0x24C533AF0](v3 - 4, v4);
        }
        else {
          os_log_type_t v21 = *(id *)(v4 + 8 * v3);
        }
        unint64_t v5 = (unint64_t)v21;
        float v2 = (v3 - 3);
        if (__OFADD__(v3 - 4, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
        id v22 = a1;
        objc_msgSend(a1, sel_attachNode_, v21);
        a1 = *(void **)(v6 + 16);
        if (!a1) {
          break;
        }
        id v23 = (void *)v6;
        unint64_t v6 = *v47;
        if ((*v47 & 0xC000000000000001) != 0)
        {
          id v29 = a1;
          swift_bridgeObjectRetain();
          id v26 = (id)MEMORY[0x24C533AF0](0, v6);
          swift_bridgeObjectRelease();
        }
        else
        {
          if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_30;
          }
          uint64_t v24 = *(void **)(v6 + 32);
          id v25 = a1;
          id v26 = v24;
        }
        id v27 = objc_msgSend(v26, sel_format);

        objc_msgSend(v22, sel_connect_to_format_, v5, a1, v27);
        uint64_t v28 = swift_beginAccess();
        MEMORY[0x24C533580](v28);
        if (*(void *)(*v8 + 16) >= *(void *)(*v8 + 24) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();

        ++v3;
        a1 = v22;
        unint64_t v6 = (unint64_t)v23;
        if (v2 == v46) {
          goto LABEL_37;
        }
      }
      __break(1u);
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_15;
    }
  }
LABEL_37:
  swift_bridgeObjectRelease();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)logger);
  id v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    id v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v34 = 0;
    _os_log_impl(&dword_2465C2000, v32, v33, "Creating the shutter playback node...", v34, 2u);
    MEMORY[0x24C5348D0](v34, -1, -1);
  }

  id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF93C8]), sel_init);
  id v36 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v35;

  if (!*(void *)(v6 + 40)) {
    goto LABEL_51;
  }
  objc_msgSend(a1, sel_attachNode_);
  id v37 = *(void **)(v6 + 40);
  if (!v37)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  id v38 = *(void **)(v6 + 64);
  if (!v38)
  {
LABEL_53:
    __break(1u);
    return;
  }
  id v39 = v37;
  id v40 = objc_msgSend(v38, sel_format);
  objc_msgSend(a1, sel_connect_to_format_, v39, v45, v40);

  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    id v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v43 = 0;
    _os_log_impl(&dword_2465C2000, v41, v42, "... connected shutter playback node to mainMixer.", v43, 2u);
    MEMORY[0x24C5348D0](v43, -1, -1);
    id v44 = v45;
  }
  else
  {
    id v44 = v41;
    uint64_t v41 = v45;
  }
}

void LayerCakeCaptureSoundModule.startLoop(playStartSound:)(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_6;
  }
  float v2 = (void *)v1[5];
  if (!v2) {
    goto LABEL_29;
  }
  uint64_t v3 = v1[6];
  if (v3)
  {
    objc_msgSend(v2, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 0, 0);
    unint64_t v4 = (void *)v1[5];
    if (v4)
    {
      objc_msgSend(v4, sel_play);
LABEL_6:
      unint64_t v5 = v1 + 9;
      swift_beginAccess();
      unint64_t v6 = v1[9];
      if (v6 >> 62) {
        goto LABEL_27;
      }
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (1)
      {
        if (!v7) {
          return;
        }
        uint64_t v8 = v1 + 3;
        v1 += 4;
        swift_beginAccess();
        uint64_t v9 = -v7;
        uint64_t v10 = 4;
        while (1)
        {
          unint64_t v11 = v10 - 4;
          uint64_t v12 = *v8;
          if ((*v8 & 0xC000000000000001) == 0) {
            break;
          }
          swift_bridgeObjectRetain();
          id v13 = (id)MEMORY[0x24C533AF0](v10 - 4, v12);
          swift_bridgeObjectRelease();
LABEL_13:
          uint64_t v14 = *v5;
          if ((*v5 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            id v15 = (id)MEMORY[0x24C533AF0](v10 - 4, v14);
            swift_bridgeObjectRelease();
          }
          else
          {
            if (v11 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_25;
            }
            id v15 = *(id *)(v14 + 8 * v10);
          }
          objc_msgSend(v13, sel_scheduleBuffer_atTime_options_completionHandler_, v15, 0, 1, 0);
          objc_msgSend(v13, sel_setVolume_, 0.0);
          objc_msgSend(v13, sel_play);
          swift_beginAccess();
          uint64_t v16 = *v1;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v1 = v16;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _ArrayBuffer._consumeAndCreateNew()();
          }
          if (v11 >= *(void *)(v16 + 16)) {
            goto LABEL_26;
          }
          *(void *)(v16 + 8 * v10) = 0;
          swift_release();
          specialized Array._endMutation()();
          swift_endAccess();

          ++v10;
          if (v9 + v10 == 4) {
            return;
          }
        }
        if (v11 < *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          break;
        }
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        swift_bridgeObjectRetain();
        uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v7 < 0)
        {
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
      }
      id v13 = *(id *)(v12 + 8 * v10);
      goto LABEL_13;
    }
  }
  else
  {
LABEL_30:
    __break(1u);
  }
  __break(1u);
}

char *LayerCakeCaptureSoundModule.stopLoop(playEndSound:)(char a1)
{
  if (a1)
  {
    id result = (char *)v1[5];
    if (!result)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    uint64_t v3 = v1[7];
    if (!v3)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 0, 0);
    id result = (char *)v1[5];
    if (!result)
    {
LABEL_16:
      __break(1u);
      return result;
    }
    objc_msgSend(result, sel_play);
  }
  id result = (char *)swift_beginAccess();
  unint64_t v4 = v1[9];
  if (!(v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  id result = (char *)swift_bridgeObjectRelease();
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
LABEL_8:
  if (v5)
  {
    id result = 0;
    do
    {
      unint64_t v6 = result + 1;
      LayerCakeCaptureSoundModule.requestStop(layer:)((unint64_t)result);
      id result = v6;
    }
    while ((char *)v5 != v6);
  }
  return result;
}

id LayerCakeCaptureSoundModule.playShutterSound(volume:)(float a1)
{
  id result = *(id *)(v1 + 40);
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v3 = *(void *)(v1 + 64);
  if (!v3)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 0, 0);
  id result = *(id *)(v1 + 40);
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(float *)&double v5 = a1;
  objc_msgSend(result, sel_setVolume_, v5);
  id result = *(id *)(v1 + 40);
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  return objc_msgSend(result, sel_play);
}

id LayerCakeCaptureSoundModule.playCompletionSound(volume:)(float a1)
{
  id result = *(id *)(v1 + 40);
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v3 = *(void *)(v1 + 56);
  if (!v3)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 0, 0);
  id result = *(id *)(v1 + 40);
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(float *)&double v5 = a1;
  objc_msgSend(result, sel_setVolume_, v5);
  id result = *(id *)(v1 + 40);
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  return objc_msgSend(result, sel_play);
}

void LayerCakeCaptureSoundModule.adjustMixLevels(_:)(float a1)
{
  if (a1 < 0.0 || a1 > 1.0) {
    goto LABEL_30;
  }
  swift_beginAccess();
  unint64_t v4 = v1[9];
  if (v4 >> 62) {
    goto LABEL_31;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v5)
  {
    unint64_t v6 = v1 + 3;
    swift_beginAccess();
    unint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = v1[12];
      unint64_t v9 = *(void *)(v8 + 16);
      if (v7 >= v9) {
        break;
      }
      unint64_t v10 = v7 + 1;
      if (v7 + 1 >= v9) {
        goto LABEL_28;
      }
      float v11 = (float)(a1 - *(float *)(v8 + 4 * v7 + 32))
          / (float)(*(float *)(v8 + 4 * v7 + 36) - *(float *)(v8 + 4 * v7 + 32));
      if (v11 <= 0.0) {
        float v11 = 0.0;
      }
      if (v11 > 1.0) {
        float v11 = 1.0;
      }
      if (v11 <= 0.0) {
        float v11 = 0.0;
      }
      if (v11 <= 0.8) {
        float v12 = v11;
      }
      else {
        float v12 = 0.8;
      }
      uint64_t v13 = *v6;
      if ((*v6 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        id v14 = (id)MEMORY[0x24C533AF0](v7, v13);
        swift_bridgeObjectRelease();
      }
      else
      {
        if (v7 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_29;
        }
        id v14 = *(id *)(v13 + 8 * v7 + 32);
      }
      *(float *)&double v15 = v12;
      objc_msgSend(v14, sel_setVolume_, v15);

      unint64_t v7 = v10;
      if (v5 == v10) {
        return;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 < 0)
    {
      __break(1u);
      return;
    }
  }
}

uint64_t LayerCakeCaptureSoundModule.requestStop(layer:)(unint64_t a1)
{
  float v2 = v1;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v7 = 134349056;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v5, v6, "Requesting faded stop for layer %{public}ld...", v7, 0xCu);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  swift_beginAccess();
  uint64_t v8 = v2[3];
  if ((v8 & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      id v9 = *(id *)(v8 + 8 * a1 + 32);
      goto LABEL_9;
    }
    __break(1u);
LABEL_16:
    specialized _ArrayBuffer._consumeAndCreateNew()();
  }
  swift_bridgeObjectRetain();
  id v9 = (id)MEMORY[0x24C533AF0](a1, v8);
  swift_bridgeObjectRelease();
LABEL_9:
  uint64_t v10 = v2[13];
  type metadata accessor for Fader();
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v11 + 48) = 0;
  swift_unknownObjectWeakAssign();

  *(unsigned char *)(v11 + 24) = 1;
  *(void *)(v11 + 32) = v10;
  *(void *)(v11 + 40) = 0x3FD3333333333333;
  swift_beginAccess();
  uint64_t v12 = v2[4];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  v2[4] = v12;
  if ((result & 1) == 0) {
    goto LABEL_16;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v12 + 16) > a1)
  {
    *(void *)(v12 + 8 * a1 + 32) = v11;
    swift_release();
    specialized Array._endMutation()();
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

uint64_t LayerCakeCaptureSoundModule.updateFaders(at:)(double a1)
{
  uint64_t result = swift_beginAccess();
  unint64_t v4 = v1[9];
  if (v4 >> 62) {
    goto LABEL_39;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v5)
  {
    os_log_type_t v6 = v1 + 4;
    uint64_t result = swift_beginAccess();
    unint64_t v7 = 0;
    unint64_t v8 = 0x268F90000uLL;
    id v9 = logger;
    uint64_t v10 = &off_2651E2000;
    uint64_t v28 = v1 + 4;
    while (v5 != v7)
    {
      if (v7 >= *(void *)(*v6 + 16)) {
        goto LABEL_37;
      }
      uint64_t v11 = *(void *)(*v6 + 8 * v7 + 32);
      if (v11)
      {
        uint64_t v12 = MEMORY[0x24C5349C0](v11 + 16);
        if (v12)
        {
          uint64_t v1 = (void *)v12;
          double v13 = *(double *)(v11 + 32);
          swift_retain();
          if (v13 <= a1)
          {
            if (objc_msgSend(v1, sel_isPlaying))
            {
              double v14 = (a1 - v13) / 0.3;
              if (v14 <= 1.0) {
                double v15 = (a1 - v13) / 0.3;
              }
              else {
                double v15 = 1.0;
              }
              if (v14 > 0.0) {
                double v16 = v15;
              }
              else {
                double v16 = 0.0;
              }
              *(float *)&double v16 = v16;
              if (*(unsigned char *)(v11 + 24)) {
                *(float *)&double v16 = 1.0 - *(float *)&v16;
              }
              objc_msgSend(v1, sel_setVolume_, v16);
            }

            if (v13 + 0.3 < a1) {
              *(unsigned char *)(v11 + 48) = 1;
            }
          }
          else
          {
          }
        }
        else
        {
          swift_retain();
        }
        if (*(unsigned char *)(v11 + 48) == 1)
        {
          if (*(void *)(v8 + 1152) != -1) {
            swift_once();
          }
          uint64_t v17 = type metadata accessor for Logger();
          __swift_project_value_buffer(v17, (uint64_t)v9);
          uint64_t v18 = Logger.logObject.getter();
          os_log_type_t v19 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v18, v19))
          {
            uint64_t v20 = v5;
            os_log_type_t v21 = v10;
            id v22 = v9;
            unint64_t v23 = v8;
            uint64_t v24 = swift_slowAlloc();
            *(_DWORD *)uint64_t v24 = 134349056;
            *(void *)(v24 + 4) = v7;
            _os_log_impl(&dword_2465C2000, v18, v19, "Removing expired fader layer %{public}ld...", (uint8_t *)v24, 0xCu);
            uint64_t v25 = v24;
            unint64_t v8 = v23;
            id v9 = v22;
            uint64_t v10 = v21;
            uint64_t v5 = v20;
            os_log_type_t v6 = v28;
            MEMORY[0x24C5348D0](v25, -1, -1);
          }

          id v26 = (void *)MEMORY[0x24C5349C0](v11 + 16);
          [v26 (SEL)v10[430]];

          swift_beginAccess();
          uint64_t v1 = (void *)*v6;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *os_log_type_t v6 = v1;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _ArrayBuffer._consumeAndCreateNew()();
          }
          if (v7 >= v1[2]) {
            goto LABEL_38;
          }
          v1[v7 + 4] = 0;
          swift_release();
          uint64_t v1 = v6;
          specialized Array._endMutation()();
          swift_endAccess();
        }
        uint64_t result = swift_release();
      }
      if (v5 == ++v7) {
        return result;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v5 < 0)
    {
      __break(1u);
      return result;
    }
  }
  return result;
}

id *LayerCakeCaptureSoundModule.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LayerCakeCaptureSoundModule.__deallocating_deinit()
{
  LayerCakeCaptureSoundModule.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LayerCakeCaptureSoundModule()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for Fader.Direction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24669CD28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Fader.Direction()
{
  return &unk_26FAD0F18;
}

unsigned char *storeEnumTagSinglePayload for SoundManager.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24669CE2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SoundManager.State()
{
  return &unk_26FAD0FA8;
}

unint64_t lazy protocol witness table accessor for type SoundManager.State and conformance SoundManager.State()
{
  unint64_t result = lazy protocol witness table cache variable for type SoundManager.State and conformance SoundManager.State;
  if (!lazy protocol witness table cache variable for type SoundManager.State and conformance SoundManager.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SoundManager.State and conformance SoundManager.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Fader.Direction and conformance Fader.Direction()
{
  unint64_t result = lazy protocol witness table cache variable for type Fader.Direction and conformance Fader.Direction;
  if (!lazy protocol witness table cache variable for type Fader.Direction and conformance Fader.Direction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Fader.Direction and conformance Fader.Direction);
  }
  return result;
}

void protocol witness for CaptureSoundModule.loadSamples() in conformance LayerCakeCaptureSoundModule()
{
}

void protocol witness for CaptureSoundModule.connectGraph(engine:) in conformance LayerCakeCaptureSoundModule(void *a1)
{
}

void protocol witness for CaptureSoundModule.startLoop(playStartSound:) in conformance LayerCakeCaptureSoundModule(char a1)
{
}

char *protocol witness for CaptureSoundModule.stopLoop(playEndSound:) in conformance LayerCakeCaptureSoundModule(char a1)
{
  return LayerCakeCaptureSoundModule.stopLoop(playEndSound:)(a1);
}

id protocol witness for CaptureSoundModule.playShutterSound(volume:) in conformance LayerCakeCaptureSoundModule(float a1)
{
  return LayerCakeCaptureSoundModule.playShutterSound(volume:)(a1);
}

id protocol witness for CaptureSoundModule.playCompletionSound(volume:) in conformance LayerCakeCaptureSoundModule(float a1)
{
  return LayerCakeCaptureSoundModule.playCompletionSound(volume:)(a1);
}

void protocol witness for CaptureSoundModule.updateGoodnessScore(_:) in conformance LayerCakeCaptureSoundModule(float a1)
{
  if (a1 <= 0.0) {
    a1 = 0.0;
  }
  if (a1 > 1.0) {
    a1 = 1.0;
  }
  LayerCakeCaptureSoundModule.adjustMixLevels(_:)(a1);
}

uint64_t protocol witness for CaptureSoundModule.update(t:) in conformance LayerCakeCaptureSoundModule(double a1)
{
  uint64_t v3 = *v1;
  uint64_t result = LayerCakeCaptureSoundModule.updateFaders(at:)(a1);
  *(double *)(v3 + 104) = a1;
  return result;
}

id @nonobjc AVAudioFile.init(forReading:)(uint64_t a1)
{
  float v2 = v1;
  double v15 = (NSURL *)*MEMORY[0x263EF8340];
  URL._bridgeToObjectiveC()(v15);
  uint64_t v5 = v4;
  id v14 = 0;
  id v6 = objc_msgSend(v2, sel_initForReading_error_, v4, &v14);

  id v7 = v14;
  if (v6)
  {
    uint64_t v8 = type metadata accessor for URL();
    id v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    id v10 = v7;
    v9(a1, v8);
  }
  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t specialized static SoundManager.loadAudioFileFromBundle(named:)(uint64_t a1, unint64_t a2)
{
  v63[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  id v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v58 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  double v13 = (char *)&v53 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  double v16 = (char *)&v53 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v60 = (char *)&v53 - v17;
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  uint64_t v18 = (void *)static SoundManager.bundle;
  uint64_t v61 = a1;
  os_log_type_t v19 = (void *)MEMORY[0x24C533410](a1, a2);
  uint64_t v20 = (void *)MEMORY[0x24C533410](7758199, 0xE300000000000000);
  id v21 = objc_msgSend(v18, sel_URLForResource_withExtension_, v19, v20);

  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_10;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v22 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v22(v6, v16, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_10:
    outlined destroy of URL?((uint64_t)v6);
    lazy protocol witness table accessor for type SoundManager.Error and conformance SoundManager.Error();
    swift_allocError();
    *id v34 = v61;
    v34[1] = a2;
    swift_bridgeObjectRetain();
    swift_willThrow();
    return (uint64_t)v16;
  }
  unint64_t v23 = v60;
  v22(v60, v6, v7);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)logger);
  double v16 = (char *)(v8 + 16);
  char v57 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v57(v13, v23, v7);
  swift_bridgeObjectRetain_n();
  uint64_t v56 = v25;
  id v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  int v28 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v55 = (void *)swift_slowAlloc();
    v63[0] = v55;
    *(_DWORD *)uint64_t v29 = 136315394;
    int v54 = v28;
    swift_bridgeObjectRetain();
    uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, a2, (uint64_t *)v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v29 + 12) = 2080;
    uint64_t v53 = v29 + 14;
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v32 = *(void (**)(char *, uint64_t))(v8 + 8);
    v32(v13, v7);
    _os_log_impl(&dword_2465C2000, v26, (os_log_type_t)v54, "Got fileUrl for audio resource \"%s\" as \"%s\"", (uint8_t *)v29, 0x16u);
    os_log_type_t v33 = v55;
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v33, -1, -1);
    MEMORY[0x24C5348D0](v29, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    id v32 = *(void (**)(char *, uint64_t))(v8 + 8);
    v32(v13, v7);
  }

  uint64_t v36 = (uint64_t)v58;
  uint64_t v35 = v59;
  id v37 = v60;
  v57(v58, v60, v7);
  id v38 = objc_allocWithZone(MEMORY[0x263EF9380]);
  id v39 = @nonobjc AVAudioFile.init(forReading:)(v36);
  if (v35) {
    goto LABEL_13;
  }
  os_log_type_t v42 = v39;
  id v43 = objc_msgSend(v39, sel_processingFormat);
  unint64_t v44 = (unint64_t)objc_msgSend(v42, sel_length);
  if ((v44 & 0x8000000000000000) == 0 && !HIDWORD(v44))
  {
    uint64_t v45 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x263EF93B0]), sel_initWithPCMFormat_frameCapacity_, v43, v44);
    if (v45)
    {
      double v16 = v45;
      v63[0] = 0;
      if (objc_msgSend(v42, sel_readIntoBuffer_error_, v45, v63))
      {
        id v46 = v63[0];
        v32(v37, v7);

        return (uint64_t)v16;
      }
      id v52 = v63[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      id v40 = v60;
      goto LABEL_14;
    }
    id v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    double v16 = (char *)v48;
    if (os_log_type_enabled(v47, v48))
    {
      char v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v49 = 0;
      _os_log_impl(&dword_2465C2000, v47, (os_log_type_t)v16, "Can't create audio buffer!", v49, 2u);
      os_log_type_t v50 = v49;
      id v37 = v60;
      MEMORY[0x24C5348D0](v50, -1, -1);
    }

    lazy protocol witness table accessor for type SoundManager.Error and conformance SoundManager.Error();
    swift_allocError();
    *uint64_t v51 = v61;
    v51[1] = a2;
    swift_bridgeObjectRetain();
    swift_willThrow();

LABEL_13:
    id v40 = v37;
LABEL_14:
    v32(v40, v7);
    return (uint64_t)v16;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized SoundManager.handleEngineConfigChange(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v14 = v10;
    *(_DWORD *)uint64_t v9 = 136446210;
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type Notification and conformance Notification, MEMORY[0x263F06320]);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_2465C2000, v7, v8, ">> Received audio engine config change: %{public}s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v10, -1, -1);
    MEMORY[0x24C5348D0](v9, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

id specialized FilterPipeCaptureSoundModule.startLoop(playStartSound:)()
{
  id result = (id)v0[2];
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v2 = v0[11];
  if (!v2)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v2, 0, 0, 0);
  id result = (id)v0[2];
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v3 = v0[12];
  if (!v3)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 1, 0);
  id result = (id)v0[2];
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  LODWORD(v4) = 1.0;
  objc_msgSend(result, sel_setVolume_, v4);
  id result = (id)v0[2];
  if (!result)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  return objc_msgSend(result, sel_play);
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SoundManager.Error and conformance SoundManager.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type SoundManager.Error and conformance SoundManager.Error;
  if (!lazy protocol witness table cache variable for type SoundManager.Error and conformance SoundManager.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SoundManager.Error and conformance SoundManager.Error);
  }
  return result;
}

uint64_t sub_24669DE28()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_24669DE60()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 28, 7);
}

uint64_t partial apply for closure #1 in SoundManager.updateGoodnessScore(_:)()
{
  return closure #1 in SoundManager.updateGoodnessScore(_:)(*(float *)(v0 + 24));
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

void partial apply for closure #1 in SoundManager.playCompletionSound(volume:)()
{
  closure #1 in SoundManager.playCompletionSound(volume:)(*(float *)(v0 + 24));
}

void partial apply for closure #1 in SoundManager.playShutterSound(volume:)()
{
  closure #1 in SoundManager.playShutterSound(volume:)(*(float *)(v0 + 24));
}

uint64_t sub_24669DED4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 25, 7);
}

void partial apply for closure #1 in SoundManager.stopLoop(playEndSound:)()
{
  closure #1 in SoundManager.stopLoop(playEndSound:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void partial apply for closure #1 in SoundManager.startLoop(playStartSound:)()
{
  closure #1 in SoundManager.startLoop(playStartSound:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_24669DF24()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in SoundManager.update(t:)()
{
  return closure #1 in SoundManager.update(t:)(*(double *)(v0 + 24));
}

uint64_t partial apply for closure #1 in SoundManager.requestStandby(after:)()
{
  return closure #1 in SoundManager.requestStandby(after:)(*(double *)(v0 + 24));
}

void partial apply for closure #1 in closure #1 in SoundManager.requestStandby(after:)()
{
  closure #1 in closure #1 in SoundManager.requestStandby(after:)(v0);
}

uint64_t partial apply for closure #1 in SoundManager.start()()
{
  return closure #1 in SoundManager.start()();
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SoundManager.Error()
{
  return &type metadata for SoundManager.Error;
}

uint64_t type metadata completion function for StackableMiniView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StackableMiniView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + ((v6 + 24) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    unint64_t v12 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v12 = *v13;
    uint64_t v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    uint64_t v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    double v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v16(v14, v15, v4);
    *(void *)((v7 + v14) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v7 + v15) & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for StackableMiniView(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *initializeWithCopy for StackableMiniView(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  os_log_type_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 8) & ~v10;
  swift_retain();
  v8(v11, v12, v7);
  *(void *)((*(void *)(v9 + 48) + 7 + v11) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v9 + 48) + 7 + v12) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithCopy for StackableMiniView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  unint64_t v6 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 8) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  *(void *)((*(void *)(v9 + 40) + 7 + v11) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v9 + 40) + 7 + v12) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *initializeWithTake for StackableMiniView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)v4 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)v5 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v9, v10);
  *(void *)((*(void *)(v7 + 32) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 32) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for StackableMiniView(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  uint64_t v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v12, v13);
  *(void *)((*(void *)(v10 + 24) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v10 + 24)
                                                                                       + 7
                                                                                       + v13) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for StackableMiniView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 24) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24669E770);
      case 4:
        int v14 = *(_DWORD *)(a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *(_DWORD *)a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6);
  }
  unint64_t v17 = *(void *)(a1 + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for StackableMiniView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 24) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v18 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9;
              os_log_type_t v19 = *(void (**)(unint64_t))(v6 + 56);
              v19(v18);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              *(void *)a1 = a2 ^ 0x80000000;
              *((void *)a1 + 1) = 0;
            }
            else
            {
              *((void *)a1 + 1) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 24) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 24) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 24) & ~v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x24669E980);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for StackableMiniView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in StackableMiniView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t StackableMiniView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unsigned int v8 = (char *)&v15 - v7;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v17 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unsigned int v11 = (char *)&v15 - v10;
  uint64_t v16 = v2;
  static Alignment.center.getter();
  uint64_t v12 = *(void *)(a1 + 24);
  View.frame(width:height:alignment:)();
  uint64_t v26 = v12;
  uint64_t v27 = MEMORY[0x263F18860];
  uint64_t WitnessTable = swift_getWitnessTable();
  View.fixedSize()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v25 = 0;
  Transaction.disablesAnimations.setter();
  uint64_t v19 = v4;
  uint64_t v20 = v12;
  uint64_t v21 = v16;
  id v22 = v11;
  uint64_t v23 = WitnessTable;
  uint64_t v24 = MEMORY[0x263F190E0];
  swift_retain();
  swift_getWitnessTable();
  type metadata accessor for BottomCenterView();
  type metadata accessor for TopCenterView();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for LeftCenterView();
  type metadata accessor for RightCenterView();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  withTransaction<A>(_:_:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v11, v9);
}

uint64_t closure #1 in StackableMiniView.body.getter()
{
  return Group<A>.init(content:)();
}

uint64_t closure #1 in closure #1 in StackableMiniView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v103 = a5;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v105 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105);
  uint64_t v12 = (char *)&v96 - v11;
  int v13 = *(void **)(*(void *)(a1 + 8) + 16);
  uint64_t v14 = MEMORY[0x263F190E0];
  uint64_t v102 = a4;
  uint64_t v104 = v9;
  if (v13)
  {
    uint64_t v15 = a4;
    id v16 = v13;
    dispatch thunk of ARView.__interfaceOrientation.getter();

    a4 = v15;
    uint64_t v14 = MEMORY[0x263F190E0];
    switch(v104)
    {
      case 0:
      case 1:
        break;
      case 2:
        uint64_t v42 = *(void *)(a1 + *(int *)(type metadata accessor for StackableMiniView() + 44));
        uint64_t v43 = a2;
        uint64_t v44 = v105;
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v43, v105);
        unint64_t v45 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        uint64_t v46 = swift_allocObject();
        *(void *)(v46 + 16) = a3;
        *(void *)(v46 + 24) = a4;
        (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v46 + v45, v12, v44);
        uint64_t v124 = a4;
        uint64_t v125 = MEMORY[0x263F18860];
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t v123 = v14;
        swift_getWitnessTable();
        *(void *)&long long v176 = partial apply for closure #4 in closure #1 in closure #1 in StackableMiniView.body.getter;
        *((void *)&v176 + 1) = v46;
        *(void *)&long long v177 = v42;
        uint64_t v47 = type metadata accessor for TopCenterView();
        uint64_t v48 = swift_getWitnessTable();
        static ViewBuilder.buildExpression<A>(_:)(&v176, v47, v48);
        swift_release();
        *(void *)&long long v101 = *((void *)&v149 + 1);
        long long v176 = v149;
        *(void *)&long long v177 = v150;
        static ViewBuilder.buildExpression<A>(_:)(&v176, v47, v48);
        long long v138 = v173;
        uint64_t v139 = v174;
        uint64_t v49 = type metadata accessor for BottomCenterView();
        uint64_t v50 = swift_getWitnessTable();
        static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v138, v49, v47);
        swift_release();
        uint64_t v99 = *((void *)&v176 + 1);
        *(void *)&long long v100 = v176;
        LODWORD(v98) = BYTE8(v177);
        long long v138 = v176;
        uint64_t v139 = v177;
        LOBYTE(v140) = BYTE8(v177);
        uint64_t v51 = type metadata accessor for _ConditionalContent();
        type metadata accessor for LeftCenterView();
        type metadata accessor for RightCenterView();
        type metadata accessor for _ConditionalContent();
        uint64_t v120 = v50;
        uint64_t v121 = v48;
        uint64_t v97 = swift_getWitnessTable();
        uint64_t v52 = swift_getWitnessTable();
        uint64_t v53 = swift_getWitnessTable();
        uint64_t v118 = v52;
        uint64_t v119 = v53;
        uint64_t v54 = swift_getWitnessTable();
        static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v138, v51);
        outlined consume of StateObject<_RealityViewCameraModel>.Storage();
        long long v138 = v173;
        uint64_t v139 = v174;
        __int16 v140 = v175;
        uint64_t v55 = type metadata accessor for _ConditionalContent();
        uint64_t v116 = v97;
        uint64_t v117 = v54;
        swift_getWitnessTable();
        static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v138, v55);
        goto LABEL_10;
      case 3:
        uint64_t v56 = *(void *)(a1 + *(int *)(type metadata accessor for StackableMiniView() + 44));
        uint64_t v57 = a2;
        uint64_t v58 = v105;
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v57, v105);
        unint64_t v59 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        uint64_t v60 = swift_allocObject();
        *(void *)(v60 + 16) = a3;
        *(void *)(v60 + 24) = a4;
        (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v60 + v59, v12, v58);
        uint64_t v147 = a4;
        uint64_t v148 = MEMORY[0x263F18860];
        uint64_t v145 = swift_getWitnessTable();
        uint64_t v146 = v14;
        swift_getWitnessTable();
        *(void *)&long long v176 = partial apply for closure #4 in closure #1 in closure #1 in StackableMiniView.body.getter;
        *((void *)&v176 + 1) = v60;
        *(void *)&long long v177 = v56;
        uint64_t v61 = type metadata accessor for RightCenterView();
        uint64_t v62 = swift_getWitnessTable();
        static ViewBuilder.buildExpression<A>(_:)(&v176, v61, v62);
        swift_release();
        *(void *)&long long v101 = *((void *)&v149 + 1);
        long long v176 = v149;
        *(void *)&long long v177 = v150;
        static ViewBuilder.buildExpression<A>(_:)(&v176, v61, v62);
        long long v138 = v173;
        uint64_t v139 = v174;
        uint64_t v63 = type metadata accessor for LeftCenterView();
        uint64_t v64 = swift_getWitnessTable();
        static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v138, v63, v61);
        swift_release();
        *(void *)&long long v100 = v177;
        LODWORD(v99) = BYTE8(v177);
        long long v138 = v176;
        uint64_t v139 = v177;
        LOBYTE(v140) = BYTE8(v177);
        type metadata accessor for BottomCenterView();
        type metadata accessor for TopCenterView();
        uint64_t v65 = type metadata accessor for _ConditionalContent();
        uint64_t v66 = type metadata accessor for _ConditionalContent();
        uint64_t v67 = swift_getWitnessTable();
        uint64_t v68 = swift_getWitnessTable();
        uint64_t v143 = v67;
        uint64_t v144 = v68;
        uint64_t v98 = v65;
        uint64_t v69 = swift_getWitnessTable();
        uint64_t v141 = v64;
        uint64_t v142 = v62;
        uint64_t v70 = swift_getWitnessTable();
        static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v138, v65, v66);
        outlined consume of StateObject<_RealityViewCameraModel>.Storage();
        long long v138 = v173;
        uint64_t v139 = v174;
        __int16 v140 = v175;
        uint64_t v71 = type metadata accessor for _ConditionalContent();
        uint64_t v136 = v69;
        uint64_t v137 = v70;
        goto LABEL_9;
      case 4:
        uint64_t v72 = *(void *)(a1 + *(int *)(type metadata accessor for StackableMiniView() + 44));
        uint64_t v73 = a2;
        uint64_t v74 = v105;
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v73, v105);
        unint64_t v75 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        uint64_t v76 = swift_allocObject();
        *(void *)(v76 + 16) = a3;
        *(void *)(v76 + 24) = a4;
        (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v76 + v75, v12, v74);
        uint64_t v134 = a4;
        uint64_t v135 = MEMORY[0x263F18860];
        uint64_t v132 = swift_getWitnessTable();
        uint64_t v133 = v14;
        swift_getWitnessTable();
        *(void *)&long long v176 = partial apply for closure #4 in closure #1 in closure #1 in StackableMiniView.body.getter;
        *((void *)&v176 + 1) = v76;
        *(void *)&long long v177 = v72;
        uint64_t v77 = type metadata accessor for LeftCenterView();
        uint64_t v78 = swift_getWitnessTable();
        static ViewBuilder.buildExpression<A>(_:)(&v176, v77, v78);
        swift_release();
        *(void *)&long long v101 = *((void *)&v149 + 1);
        long long v176 = v149;
        *(void *)&long long v177 = v150;
        static ViewBuilder.buildExpression<A>(_:)(&v176, v77, v78);
        long long v138 = v173;
        uint64_t v139 = v174;
        type metadata accessor for RightCenterView();
        uint64_t v79 = swift_getWitnessTable();
        static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v138, v77);
        swift_release();
        *(void *)&long long v100 = v176;
        LODWORD(v99) = BYTE8(v177);
        long long v138 = v176;
        uint64_t v139 = v177;
        LOBYTE(v140) = BYTE8(v177);
        type metadata accessor for BottomCenterView();
        type metadata accessor for TopCenterView();
        uint64_t v80 = type metadata accessor for _ConditionalContent();
        uint64_t v81 = type metadata accessor for _ConditionalContent();
        uint64_t v82 = swift_getWitnessTable();
        uint64_t v83 = swift_getWitnessTable();
        uint64_t v130 = v82;
        uint64_t v131 = v83;
        uint64_t v98 = v80;
        uint64_t v84 = swift_getWitnessTable();
        uint64_t v128 = v78;
        uint64_t v129 = v79;
        uint64_t v85 = swift_getWitnessTable();
        static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v138, v80, v81);
        outlined consume of StateObject<_RealityViewCameraModel>.Storage();
        long long v138 = v173;
        uint64_t v139 = v174;
        __int16 v140 = v175;
        uint64_t v71 = type metadata accessor for _ConditionalContent();
        uint64_t v126 = v84;
        uint64_t v127 = v85;
LABEL_9:
        swift_getWitnessTable();
        static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v138, v71);
        goto LABEL_10;
      default:
        LocalizedStringKey.init(stringLiteral:)();
        uint64_t v99 = Text.init(_:tableName:bundle:comment:)();
        *(void *)&long long v100 = v30;
        *(void *)&long long v101 = v31;
        *(void *)&long long v173 = v99;
        *((void *)&v173 + 1) = v30;
        char v33 = v32 & 1;
        LOBYTE(v174) = v32 & 1;
        uint64_t v175 = v31;
        uint64_t v171 = v14;
        uint64_t v172 = MEMORY[0x263F18860];
        uint64_t v169 = swift_getWitnessTable();
        uint64_t v34 = MEMORY[0x263F190E0];
        uint64_t v170 = MEMORY[0x263F190E0];
        swift_getWitnessTable();
        type metadata accessor for BottomCenterView();
        type metadata accessor for TopCenterView();
        type metadata accessor for _ConditionalContent();
        type metadata accessor for LeftCenterView();
        type metadata accessor for RightCenterView();
        type metadata accessor for _ConditionalContent();
        uint64_t v35 = type metadata accessor for _ConditionalContent();
        uint64_t v36 = swift_getWitnessTable();
        uint64_t v37 = swift_getWitnessTable();
        uint64_t v167 = v36;
        uint64_t v168 = v37;
        uint64_t v38 = swift_getWitnessTable();
        uint64_t v39 = swift_getWitnessTable();
        uint64_t v40 = swift_getWitnessTable();
        uint64_t v165 = v39;
        uint64_t v166 = v40;
        uint64_t v41 = swift_getWitnessTable();
        uint64_t v163 = v38;
        uint64_t v164 = v41;
        swift_getWitnessTable();
        static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v173, v35, MEMORY[0x263F1A830]);
        outlined consume of Text.Storage(v99, v100, v33);
        swift_bridgeObjectRelease();
        goto LABEL_11;
    }
  }
  uint64_t v17 = *(void *)(a1 + *(int *)(type metadata accessor for StackableMiniView() + 44));
  uint64_t v18 = a2;
  uint64_t v19 = v105;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v18, v105);
  unint64_t v20 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a3;
  *(void *)(v21 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v21 + v20, v12, v19);
  uint64_t v114 = a4;
  uint64_t v115 = MEMORY[0x263F18860];
  uint64_t v112 = swift_getWitnessTable();
  uint64_t v113 = v14;
  swift_getWitnessTable();
  *(void *)&long long v176 = partial apply for closure #4 in closure #1 in closure #1 in StackableMiniView.body.getter;
  *((void *)&v176 + 1) = v21;
  *(void *)&long long v177 = v17;
  uint64_t v22 = type metadata accessor for BottomCenterView();
  uint64_t v23 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v176, v22, v23);
  swift_release();
  *(void *)&long long v101 = *((void *)&v149 + 1);
  long long v176 = v149;
  *(void *)&long long v177 = v150;
  static ViewBuilder.buildExpression<A>(_:)(&v176, v22, v23);
  long long v138 = v173;
  uint64_t v139 = v174;
  type metadata accessor for TopCenterView();
  uint64_t v24 = swift_getWitnessTable();
  static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v138, v22);
  swift_release();
  *(void *)&long long v100 = v176;
  LODWORD(v99) = BYTE8(v177);
  long long v138 = v176;
  uint64_t v139 = v177;
  LOBYTE(v140) = BYTE8(v177);
  uint64_t v25 = type metadata accessor for _ConditionalContent();
  type metadata accessor for LeftCenterView();
  type metadata accessor for RightCenterView();
  type metadata accessor for _ConditionalContent();
  uint64_t v110 = v23;
  uint64_t v111 = v24;
  uint64_t v98 = swift_getWitnessTable();
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v108 = v26;
  uint64_t v109 = v27;
  uint64_t v28 = swift_getWitnessTable();
  static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v138, v25);
  outlined consume of StateObject<_RealityViewCameraModel>.Storage();
  long long v138 = v173;
  uint64_t v139 = v174;
  __int16 v140 = v175;
  uint64_t v29 = type metadata accessor for _ConditionalContent();
  uint64_t v106 = v98;
  uint64_t v107 = v28;
  swift_getWitnessTable();
  static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v138, v29);
LABEL_10:
  uint64_t v34 = MEMORY[0x263F190E0];
  outlined consume of _ConditionalContent<_ConditionalContent<BottomCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, TopCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>, _ConditionalContent<LeftCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, RightCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>>.Storage<A>();
  swift_release();
LABEL_11:
  char v86 = v178;
  long long v100 = v176;
  long long v101 = v177;
  uint64_t v161 = v102;
  uint64_t v162 = MEMORY[0x263F18860];
  uint64_t v159 = swift_getWitnessTable();
  uint64_t v160 = v34;
  swift_getWitnessTable();
  type metadata accessor for BottomCenterView();
  type metadata accessor for TopCenterView();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for LeftCenterView();
  type metadata accessor for RightCenterView();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for _ConditionalContent();
  uint64_t v87 = type metadata accessor for _ConditionalContent();
  uint64_t v88 = swift_getWitnessTable();
  uint64_t v89 = swift_getWitnessTable();
  uint64_t v157 = v88;
  uint64_t v158 = v89;
  uint64_t v90 = swift_getWitnessTable();
  uint64_t v91 = swift_getWitnessTable();
  uint64_t v92 = swift_getWitnessTable();
  uint64_t v155 = v91;
  uint64_t v156 = v92;
  uint64_t v93 = swift_getWitnessTable();
  uint64_t v153 = v90;
  uint64_t v154 = v93;
  uint64_t v151 = swift_getWitnessTable();
  uint64_t v152 = MEMORY[0x263F1A820];
  uint64_t v94 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v176, v87, v94);
  return outlined consume of _ConditionalContent<_ConditionalContent<_ConditionalContent<BottomCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, TopCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>, _ConditionalContent<LeftCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, RightCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>>, Text>.Storage<A>(v100, *((uint64_t *)&v100 + 1), v101, *((uint64_t *)&v101 + 1), v86);
}

uint64_t closure #2 in closure #1 in closure #1 in StackableMiniView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ModifiedContent();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unsigned int v8 = (char *)v11 - v7;
  v11[2] = a3;
  v11[3] = MEMORY[0x263F18860];
  v11[0] = swift_getWitnessTable();
  v11[1] = MEMORY[0x263F190E0];
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(a1, v5, WitnessTable);
  static ViewBuilder.buildExpression<A>(_:)(v8, v5, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t partial apply for closure #1 in StackableMiniView.body.getter()
{
  return closure #1 in StackableMiniView.body.getter();
}

uint64_t type metadata accessor for BottomCenterView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TopCenterView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LeftCenterView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for RightCenterView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in closure #1 in StackableMiniView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in StackableMiniView.body.getter(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t outlined consume of _ConditionalContent<_ConditionalContent<_ConditionalContent<BottomCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, TopCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>, _ConditionalContent<LeftCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, RightCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>>, Text>.Storage<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if (a5)
  {
    outlined consume of Text.Storage(a1, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return outlined consume of _ConditionalContent<_ConditionalContent<BottomCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, TopCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>, _ConditionalContent<LeftCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, RightCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>>.Storage<A>();
  }
}

uint64_t outlined consume of _ConditionalContent<_ConditionalContent<BottomCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, TopCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>, _ConditionalContent<LeftCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, RightCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>>.Storage<A>()
{
  return outlined consume of StateObject<_RealityViewCameraModel>.Storage();
}

uint64_t partial apply for closure #4 in closure #1 in closure #1 in StackableMiniView.body.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  type metadata accessor for ModifiedContent();
  uint64_t v3 = *(void *)(type metadata accessor for ModifiedContent() - 8);
  return closure #2 in closure #1 in closure #1 in StackableMiniView.body.getter(v0 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), v1, v2);
}

uint64_t objectdestroyTm_7()
{
  uint64_t v1 = *(void *)(v0 + 16);
  type metadata accessor for ModifiedContent();
  uint64_t v2 = *(void *)(type metadata accessor for ModifiedContent() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t assignWithTake for TopCenterView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for RightCenterView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  return a1;
}

void *assignWithCopy for RightCenterView(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  return a1;
}

uint64_t sub_2466A083C()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in RightCenterView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t RightCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  v21[1] = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for VStack();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v21 - v16;
  v21[4] = a3;
  v21[5] = a4;
  v21[6] = a1;
  v21[7] = a2;
  *(double *)&v21[8] = a6;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v15, v11, WitnessTable);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v15, v11);
  static ViewBuilder.buildExpression<A>(_:)(v17, v11, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v11);
}

uint64_t closure #1 in RightCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  v21[1] = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for HStack();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v21 - v16;
  v21[4] = a3;
  v21[5] = a4;
  v21[6] = a1;
  v21[7] = a2;
  *(double *)&v21[8] = a6;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v15, v11, WitnessTable);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v15, v11);
  uint64_t v25 = 0;
  char v26 = 1;
  v27[0] = &v25;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  uint64_t v23 = 0;
  char v24 = 1;
  v27[1] = v15;
  v27[2] = &v23;
  v22[0] = MEMORY[0x263F1B6B0];
  v22[1] = v11;
  v22[2] = MEMORY[0x263F1B6B0];
  void v21[10] = MEMORY[0x263F1B698];
  v21[11] = WitnessTable;
  v21[12] = MEMORY[0x263F1B698];
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v27, 3uLL, (uint64_t)v22);
  v19(v17, v11);
  return ((uint64_t (*)(char *, uint64_t))v19)(v15, v11);
}

uint64_t closure #1 in closure #1 in RightCenterView.body.getter@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v26 = a1;
  uint64_t v28 = a4;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v27 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v25 = (char *)&v25 - v18;
  v26(v17);
  static Edge.Set.trailing.getter();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
  static Edge.Set.trailing.getter();
  uint64_t v19 = MEMORY[0x263F18C10];
  v34[4] = a3;
  v34[5] = MEMORY[0x263F18C10];
  uint64_t WitnessTable = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  v34[2] = WitnessTable;
  v34[3] = v19;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v22 = v25;
  static ViewBuilder.buildExpression<A>(_:)(v16, v12, v21);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v16, v12);
  uint64_t v32 = 0;
  char v33 = 1;
  v34[0] = &v32;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v22, v12);
  v34[1] = v16;
  v31[0] = MEMORY[0x263F1B6B0];
  v31[1] = v12;
  uint64_t v29 = MEMORY[0x263F1B698];
  uint64_t v30 = v21;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v34, 2uLL, (uint64_t)v31);
  v23(v22, v12);
  return ((uint64_t (*)(char *, uint64_t))v23)(v16, v12);
}

uint64_t protocol witness for View.body.getter in conformance RightCenterView<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance RightCenterView<A>(a1, a2, (uint64_t (*)(void, void, void, void, double))RightCenterView.body.getter);
}

uint64_t associated type witness table accessor for View.Body : View in LeftCenterView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t LeftCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  v21[1] = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for VStack();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v21 - v16;
  v21[4] = a3;
  v21[5] = a4;
  v21[6] = a1;
  v21[7] = a2;
  *(double *)&v21[8] = a6;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v15, v11, WitnessTable);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v15, v11);
  static ViewBuilder.buildExpression<A>(_:)(v17, v11, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v11);
}

uint64_t closure #1 in LeftCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  v21[1] = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for HStack();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v21 - v16;
  v21[4] = a3;
  v21[5] = a4;
  v21[6] = a1;
  v21[7] = a2;
  *(double *)&v21[8] = a6;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v15, v11, WitnessTable);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v15, v11);
  uint64_t v25 = 0;
  char v26 = 1;
  v27[0] = &v25;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  uint64_t v23 = 0;
  char v24 = 1;
  v27[1] = v15;
  v27[2] = &v23;
  v22[0] = MEMORY[0x263F1B6B0];
  v22[1] = v11;
  v22[2] = MEMORY[0x263F1B6B0];
  void v21[10] = MEMORY[0x263F1B698];
  v21[11] = WitnessTable;
  v21[12] = MEMORY[0x263F1B698];
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v27, 3uLL, (uint64_t)v22);
  v19(v17, v11);
  return ((uint64_t (*)(char *, uint64_t))v19)(v15, v11);
}

uint64_t closure #1 in closure #1 in LeftCenterView.body.getter@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v26 = a1;
  uint64_t v28 = a4;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v27 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v25 = (char *)&v25 - v18;
  v26(v17);
  static Edge.Set.leading.getter();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
  static Edge.Set.leading.getter();
  uint64_t v19 = MEMORY[0x263F18C10];
  v34[4] = a3;
  v34[5] = MEMORY[0x263F18C10];
  uint64_t WitnessTable = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  v34[2] = WitnessTable;
  v34[3] = v19;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v22 = v25;
  static ViewBuilder.buildExpression<A>(_:)(v16, v12, v21);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v16, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v22, v12);
  uint64_t v32 = 0;
  char v33 = 1;
  v34[0] = v16;
  v34[1] = &v32;
  v31[0] = v12;
  v31[1] = MEMORY[0x263F1B6B0];
  uint64_t v29 = v21;
  uint64_t v30 = MEMORY[0x263F1B698];
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v34, 2uLL, (uint64_t)v31);
  v23(v22, v12);
  return ((uint64_t (*)(char *, uint64_t))v23)(v16, v12);
}

uint64_t protocol witness for View.body.getter in conformance LeftCenterView<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance RightCenterView<A>(a1, a2, (uint64_t (*)(void, void, void, void, double))LeftCenterView.body.getter);
}

uint64_t associated type witness table accessor for View.Body : View in TopCenterView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t BottomCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  v21[1] = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for VStack();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v21 - v16;
  v21[4] = a3;
  v21[5] = a4;
  v21[6] = a1;
  v21[7] = a2;
  *(double *)&v21[8] = a6;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v15, v11, WitnessTable);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v15, v11);
  static ViewBuilder.buildExpression<A>(_:)(v17, v11, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v11);
}

uint64_t closure #1 in BottomCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  v21[1] = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for HStack();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v21 - v16;
  v21[4] = a3;
  v21[5] = a4;
  v21[6] = a1;
  v21[7] = a2;
  *(double *)&v21[8] = a6;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v15, v11, WitnessTable);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v15, v11);
  uint64_t v23 = 0;
  char v24 = 1;
  v25[0] = &v23;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  v25[1] = v15;
  v22[0] = MEMORY[0x263F1B6B0];
  v22[1] = v11;
  v21[9] = MEMORY[0x263F1B698];
  void v21[10] = WitnessTable;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v25, 2uLL, (uint64_t)v22);
  v19(v17, v11);
  return ((uint64_t (*)(char *, uint64_t))v19)(v15, v11);
}

uint64_t protocol witness for View.body.getter in conformance BottomCenterView<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance RightCenterView<A>(a1, a2, (uint64_t (*)(void, void, void, void, double))BottomCenterView.body.getter);
}

uint64_t TopCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  v21[1] = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for VStack();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v21 - v16;
  v21[4] = a3;
  v21[5] = a4;
  v21[6] = a1;
  v21[7] = a2;
  *(double *)&v21[8] = a6;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v15, v11, WitnessTable);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v15, v11);
  static ViewBuilder.buildExpression<A>(_:)(v17, v11, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v11);
}

uint64_t closure #1 in TopCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  v21[1] = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for HStack();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v21 - v16;
  v21[4] = a3;
  v21[5] = a4;
  v21[6] = a1;
  v21[7] = a2;
  *(double *)&v21[8] = a6;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v15, v11, WitnessTable);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v15, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  uint64_t v23 = 0;
  char v24 = 1;
  v25[0] = v15;
  v25[1] = &v23;
  v22[0] = v11;
  v22[1] = MEMORY[0x263F1B6B0];
  v21[9] = WitnessTable;
  void v21[10] = MEMORY[0x263F1B698];
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v25, 2uLL, (uint64_t)v22);
  v19(v17, v11);
  return ((uint64_t (*)(char *, uint64_t))v19)(v15, v11);
}

uint64_t closure #1 in closure #1 in BottomCenterView.body.getter@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void (*a4)(uint64_t)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v35 = a5;
  uint64_t v32 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v34 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v31 = (char *)&v30 - v19;
  uint64_t v20 = a1(v18);
  uint64_t v21 = a4;
  a4(v20);
  uint64_t v22 = v33;
  View.padding(_:_:)();
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v9, a2);
  v21(v23);
  uint64_t v24 = MEMORY[0x263F18C10];
  v44[5] = v22;
  v44[6] = MEMORY[0x263F18C10];
  uint64_t WitnessTable = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v10);
  v44[3] = WitnessTable;
  v44[4] = v24;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = v31;
  static ViewBuilder.buildExpression<A>(_:)(v17, v13, v26);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v14 + 8);
  v28(v17, v13);
  uint64_t v42 = 0;
  char v43 = 1;
  v44[0] = &v42;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v27, v13);
  uint64_t v40 = 0;
  char v41 = 1;
  v44[1] = v17;
  id v44[2] = &v40;
  v39[0] = MEMORY[0x263F1B6B0];
  v39[1] = v13;
  v39[2] = MEMORY[0x263F1B6B0];
  uint64_t v36 = MEMORY[0x263F1B698];
  uint64_t v37 = v26;
  uint64_t v38 = MEMORY[0x263F1B698];
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v44, 3uLL, (uint64_t)v39);
  v28(v27, v13);
  return ((uint64_t (*)(char *, uint64_t))v28)(v17, v13);
}

uint64_t protocol witness for View.body.getter in conformance TopCenterView<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance RightCenterView<A>(a1, a2, (uint64_t (*)(void, void, void, void, double))TopCenterView.body.getter);
}

uint64_t protocol witness for View.body.getter in conformance RightCenterView<A>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, double))
{
  return a3(*(void *)v3, *(void *)(v3 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(double *)(v3 + 16));
}

uint64_t associated type witness table accessor for View.Body : View in BottomCenterView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in BottomCenterView.body.getter()
{
  return partial apply for closure #1 in BottomCenterView.body.getter((uint64_t (*)(void, void, void, void, double))closure #1 in BottomCenterView.body.getter);
}

uint64_t partial apply for closure #1 in closure #1 in BottomCenterView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in closure #1 in TopCenterView.body.getter(MEMORY[0x263F1A590], a1);
}

uint64_t partial apply for closure #1 in closure #1 in TopCenterView.body.getter@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in BottomCenterView.body.getter(*(uint64_t (**)(uint64_t))(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24), a1, a2);
}

uint64_t partial apply for closure #1 in TopCenterView.body.getter()
{
  return partial apply for closure #1 in BottomCenterView.body.getter((uint64_t (*)(void, void, void, void, double))closure #1 in TopCenterView.body.getter);
}

uint64_t partial apply for closure #1 in BottomCenterView.body.getter(uint64_t (*a1)(void, void, void, void, double))
{
  return a1(*(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24), *(double *)(v1 + 48));
}

uint64_t partial apply for closure #1 in closure #1 in TopCenterView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in closure #1 in TopCenterView.body.getter(MEMORY[0x263F1A588], a1);
}

uint64_t partial apply for closure #1 in LeftCenterView.body.getter()
{
  return partial apply for closure #1 in BottomCenterView.body.getter((uint64_t (*)(void, void, void, void, double))closure #1 in LeftCenterView.body.getter);
}

uint64_t partial apply for closure #1 in closure #1 in LeftCenterView.body.getter()
{
  return partial apply for closure #1 in BottomCenterView.body.getter((uint64_t (*)(void, void, void, void, double))closure #1 in closure #1 in LeftCenterView.body.getter);
}

uint64_t partial apply for closure #1 in RightCenterView.body.getter()
{
  return partial apply for closure #1 in BottomCenterView.body.getter((uint64_t (*)(void, void, void, void, double))closure #1 in RightCenterView.body.getter);
}

uint64_t partial apply for closure #1 in closure #1 in RightCenterView.body.getter()
{
  return partial apply for closure #1 in BottomCenterView.body.getter((uint64_t (*)(void, void, void, void, double))closure #1 in closure #1 in RightCenterView.body.getter);
}

uint64_t sub_2466A2CC4()
{
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();

  return swift_getWitnessTable();
}

uint64_t sub_2466A2DE0()
{
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();

  return swift_getWitnessTable();
}

uint64_t sub_2466A2EFC()
{
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();

  return swift_getWitnessTable();
}

uint64_t sub_2466A3018()
{
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();

  return swift_getWitnessTable();
}

Swift::Void __swiftcall InteractiveCameraTransformManager.onStartDrag(pointView:)(CGPoint_optional pointView)
{
  Swift::Bool is_nil = pointView.is_nil;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection + 64) & 1) == 0)
  {
    if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl))
    {
      swift_retain();
      v9.Swift::Bool is_nil = is_nil;
      TurnTableCameraControl.onStartDrag(pointView:)(v9);
      swift_release();
      static DispatchTime.now()();
      uint64_t v6 = type metadata accessor for DispatchTime();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
      uint64_t v7 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_startTime;
      swift_beginAccess();
      outlined assign with take of DispatchTime?((uint64_t)v5, v7);
      swift_endAccess();
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall InteractiveCameraTransformManager.onDrag(pointView:)(CGPoint_optional pointView)
{
  Swift::Bool is_nil = pointView.is_nil;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl))
  {
    swift_retain();
    v9.Swift::Bool is_nil = is_nil;
    TurnTableCameraControl.onDrag(pointView:)(v9);
    swift_release();
    static DispatchTime.now()();
    uint64_t v6 = type metadata accessor for DispatchTime();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
    uint64_t v7 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_startTime;
    swift_beginAccess();
    outlined assign with take of DispatchTime?((uint64_t)v5, v7);
    swift_endAccess();
  }
  else
  {
    __break(1u);
  }
}

uint64_t InteractiveCameraTransformManager.init(radius:springDelay:springTime:)(float a1, double a2, double a3)
{
  *(void *)&v3[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_time] = 0;
  uint64_t v7 = &v3[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_arCameraTransform];
  uint64_t v8 = v3;
  Transform.init()();
  *(_OWORD *)uint64_t v7 = v9;
  *((_OWORD *)v7 + 1) = v10;
  *((_OWORD *)v7 + 2) = v11;
  uint64_t v12 = &v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_boundingBoxWorld];
  long long v13 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  long long v14 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
  long long v15 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
  *(_OWORD *)uint64_t v12 = *MEMORY[0x263EF89A8];
  *((_OWORD *)v12 + 1) = v13;
  *((_OWORD *)v12 + 2) = v14;
  *((_OWORD *)v12 + 3) = v15;
  uint64_t v16 = &v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection];
  *(_OWORD *)uint64_t v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  v16[64] = 1;
  *(void *)&v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl] = 0;
  *(void *)&v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_dragGesture] = 0;
  uint64_t v17 = &v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_startTime];
  uint64_t v18 = type metadata accessor for DispatchTime();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_ignoreARCameraTracking] = 0;
  *(_DWORD *)&v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_boxProjectionPadding] = 1066192077;
  if (a2 < 0.0)
  {
    __break(1u);
  }
  else
  {
    *(double *)&v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_springDelay] = a2;
    if (a3 > 0.0)
    {
      *(double *)&v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_springTime] = a3;

      v29.receiver = v8;
      v29.super_class = (Class)type metadata accessor for InteractiveCameraTransformManager();
      id v20 = objc_msgSendSuper2(&v29, sel_init);
      uint64_t v21 = (char *)objc_allocWithZone((Class)type metadata accessor for DragGestureRecognizer());
      uint64_t v22 = (char *)v20;
      id v23 = specialized DragGestureRecognizer.init(draggable:)(v22, v21);
      uint64_t v24 = *(void **)&v22[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_dragGesture];
      *(void *)&v22[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_dragGesture] = v23;

      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of InteractiveCameraTransformManager.init(radius:springDelay:springTime:));
      __n128 v28 = v25;
      type metadata accessor for TurnTableCameraControl();
      swift_allocObject();
      uint64_t v26 = v22;
      uint64_t v27 = specialized TurnTableCameraControl.init(startTransformProvider:radius:lookAtWorld:gainX:gainY:)(a1, v28, 0.01, 0.01, (uint64_t)v22, (uint64_t)&protocol witness table for InteractiveCameraTransformManager);

      *(void *)&v26[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl] = v27;
      swift_release();
      return (uint64_t)v26;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall InteractiveCameraTransformManager.updateTrackedCamera(at:viewToWorld:lookAtBoxWorld:projection:ignoreARCameraTracking:)(Swift::Double at, simd_float4x4 *viewToWorld, simd_float4x4 *lookAtBoxWorld, simd_float4x4 *projection, Swift::Bool ignoreARCameraTracking)
{
  uint64_t v13 = v5;
  char v14 = (char)viewToWorld;
  float32x4_t v54 = v12;
  float32x4_t v55 = v8;
  long long v52 = v11;
  float32x4_t v53 = v7;
  long long v50 = v10;
  long long v51 = v6;
  float32x4_t v56 = v9;
  int v16 = viewToWorld & 1;
  uint64_t v17 = type metadata accessor for DispatchTime();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  id v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x270FA5388](v21 - 8);
  id v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(Swift::Double *)(v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_time) = at;
  uint64_t v24 = OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_ignoreARCameraTracking;
  if (*(unsigned __int8 *)(v13
                          + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_ignoreARCameraTracking) != v16)
  {
    if (v14)
    {
      if (!*(void *)(v13
                      + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl))
      {
LABEL_16:
        __break(1u);
        return;
      }
      swift_retain();
      InteractiveCameraTransformManager.computeCurrentTransform()();
      TurnTableCameraControl.setFromCameraWorldPosition(cameraPositionWorld:)(v25);
      swift_release();
    }
    else
    {
      static DispatchTime.now()();
      MEMORY[0x24C533370](v20, *(double *)(v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_springDelay));
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v23, 0, 1, v17);
      uint64_t v26 = v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_startTime;
      swift_beginAccess();
      outlined assign with take of DispatchTime?((uint64_t)v23, v26);
      swift_endAccess();
    }
    *(unsigned char *)(v13 + v24) = v14 & 1;
  }
  uint64_t v27 = v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection;
  *(_OWORD *)uint64_t v27 = v58;
  *(_OWORD *)(v27 + 16) = v59;
  *(_OWORD *)(v27 + 32) = v60;
  *(_OWORD *)(v27 + 48) = v61;
  *(unsigned char *)(v27 + 64) = 0;
  uint64_t v28 = v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_boundingBoxWorld;
  long long v29 = v52;
  *(_OWORD *)uint64_t v28 = v50;
  *(_OWORD *)(v28 + 16) = v29;
  *(float32x4_t *)(v28 + 32) = v54;
  *(_OWORD *)(v28 + 48) = v57;
  Transform.init(matrix:)();
  uint64_t v30 = v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_arCameraTransform;
  *(_OWORD *)uint64_t v30 = v31;
  *(_OWORD *)(v30 + 16) = v32;
  *(_OWORD *)(v30 + 32) = v33;
  float32x4_t v34 = *(float32x4_t *)(v28 + 16);
  float32x4_t v53 = *(float32x4_t *)v28;
  float32x4_t v54 = v34;
  float32x4_t v35 = *(float32x4_t *)(v28 + 48);
  float32x4_t v55 = *(float32x4_t *)(v28 + 32);
  float32x4_t v56 = v35;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of InteractiveCameraTransformManager.updateTrackedCamera(at:viewToWorld:lookAtBoxWorld:projection:ignoreARCameraTracking:));
  v37.i32[3] = v56.i32[3];
  float32x2_t v38 = *(float32x2_t *)(v30 + 32);
  float32x4_t v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v53, v36.f32[0]), v54, *(float32x2_t *)v36.f32, 1), v55, v36, 2), v56, v36, 3);
  *(float32x2_t *)v37.f32 = vsub_f32(v38, *(float32x2_t *)v56.f32);
  v37.f32[2] = *(float *)(v30 + 40) - v56.f32[2];
  int32x4_t v39 = (int32x4_t)vmulq_f32(v37, v37);
  v39.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v39, 2), vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1))).u32[0];
  float32x2_t v40 = vrsqrte_f32((float32x2_t)v39.u32[0]);
  float32x2_t v41 = vmul_f32(v40, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v40, v40)));
  float v42 = InteractiveCameraTransformManager.computeRadiusToViewBox(boxToCameraDir:)((__n128)vmulq_n_f32(v37, vmul_f32(v41, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v41, v41))).f32[0]));
  uint64_t v43 = OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl;
  uint64_t v44 = *(float32x4_t **)(v13
                        + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl);
  if (!v44)
  {
    __break(1u);
    goto LABEL_15;
  }
  float v45 = v42;
  float32x4_t v46 = v56;
  v46.i32[3] = 0;
  v44[5] = v46;
  swift_retain();
  TurnTableCameraControl.update()();
  swift_release();
  uint64_t v47 = *(float **)(v13 + v43);
  if (!v47)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  float v48 = v47[15];
  float v49 = v47[16];
  if (v49 >= v45) {
    float v49 = v45;
  }
  if (v49 > v48) {
    float v48 = v49;
  }
  v47[14] = v48;
  swift_retain();
  TurnTableCameraControl.update()();
  swift_release();
}

float InteractiveCameraTransformManager.computeRadiusToViewBox(boxToCameraDir:)(__n128 a1)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection + 64)) {
    return 1.0;
  }
  float32x4_t v28 = *(float32x4_t *)(v2 + 32);
  LODWORD(v30) = *(void *)v2;
  double v29 = *(double *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v5 = *(void *)(v2 + 56);
  float32x4_t v32 = *(float32x4_t *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_boundingBoxWorld);
  float32x4_t v33 = *(float32x4_t *)(v1
                       + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_boundingBoxWorld
                       + 16);
  float32x4_t v34 = *(float32x4_t *)(v1
                       + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_boundingBoxWorld
                       + 32);
  float32x4_t v35 = *(float32x4_t *)(v1
                       + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_boundingBoxWorld
                       + 48);
  Transform.init(matrix:)();
  float32x4_t v25 = v7;
  float32x4_t v26 = v6;
  double v24 = v8;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of InteractiveCameraTransformManager.computeRadiusToViewBox(boxToCameraDir:));
  __n128 v10 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v9.f32[0]), v33, *(float32x2_t *)v9.f32, 1), v34, v9, 2), v35, v9, 3);
  v10.n128_u32[3] = 0;
  *(float32x2_t *)v11.f32 = vsub_f32(0, (float32x2_t)a1.n128_u64[0]);
  v11.f32[2] = 0.0 - a1.n128_f32[2];
  v11.i32[3] = 0;
  v23.i64[0] = v4;
  v23.i64[1] = v5;
  specialized static MathHelpers.computeCameraMatrixForConstrainedLookAt(box:boxPadding:lookAtPoint:lookAtDir:projection:useBoundingSphere:)(1, v26, v25, v24, 1.1, v10, v11, v30, v29, v12, v13, v14, v15, v16, v17, v18, v28, v23);
  specialized SIMD.subscript.getter((__n128)xmmword_2466B9060, COERCE_DOUBLE(2));
  float32x4_t v31 = v19;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of InteractiveCameraTransformManager.computeRadiusToViewBox(boxToCameraDir:));
  float32x4_t v21 = vsubq_f32(v31, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v20.f32[0]), v33, *(float32x2_t *)v20.f32, 1), v34, v20, 2), v35, v20, 3));
  float32x4_t v22 = vmulq_f32(v21, v21);
  return sqrtf(v22.f32[2] + vaddv_f32(*(float32x2_t *)v22.f32));
}

double InteractiveCameraTransformManager.computeCurrentTransform()()
{
  uint64_t v1 = type metadata accessor for DispatchTime();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transform.init()();
  Transform.init(matrix:)();
  float32x4_t v56 = v5;
  long long v52 = v7;
  float32x4_t v53 = v6;
  Transform.init()();
  long long v55 = v8;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of InteractiveCameraTransformManager.computeCurrentTransform());
  uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl);
  if (v10)
  {
    long long v11 = *(_OWORD *)(v10 + 160);
    float32x4_t v57 = *(float32x4_t *)(v10 + 192);
  }
  else
  {
    float32x4_t v57 = v9;
    long long v11 = v55;
  }
  long long v55 = v11;
  float v12 = 0.0;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_ignoreARCameraTracking))
  {
    float v13 = 0.0;
  }
  else
  {
    static DispatchTime.now()();
    InteractiveCameraTransformManager.interpolant(at:)();
    float v13 = v14;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    if (v13 > 0.0)
    {
      if (v13 <= 1.0) {
        float v12 = v13;
      }
      else {
        float v12 = 1.0;
      }
    }
  }
  float32x4_t v57 = vmlaq_n_f32(v57, vsubq_f32(*(float32x4_t *)(v0+ OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_arCameraTransform+ 32), v57), (float)(v12 * v12)/ (float)((float)((float)((float)(v12 * v12) - v13) + (float)((float)(v12 * v12) - v13)) + 1.0));
  float v15 = v57.f32[2];
  *(double *)v16.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v52, v53);
  float32x4_t v49 = v16;
  float32x4_t v50 = v17;
  float32x4_t v51 = v18;
  float32x4_t v54 = v19;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of InteractiveCameraTransformManager.computeCurrentTransform());
  float32x4_t v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, v20.f32[0]), v50, *(float32x2_t *)v20.f32, 1), v51, v20, 2), v54, v20, 3);
  v21.i32[3] = 0;
  *(float32x2_t *)v29.f32 = specialized static MiniViewHelpers.computeLookAt(cameraWorld:objectWorld:objectExtents:)(v57, v21, *(float32x2_t *)v56.f32);
  __n128 v30 = (__n128)v29;
  v29.i32[3] = v57.i32[3];
  *(float32x2_t *)v29.f32 = vsub_f32(*(float32x2_t *)v57.f32, (float32x2_t)v30.n128_u64[0]);
  float v31 = v30.n128_f32[2];
  v29.f32[2] = v15 - v30.n128_f32[2];
  int32x4_t v32 = (int32x4_t)vmulq_f32(v29, v29);
  v32.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v32, 2), vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1))).u32[0];
  float32x2_t v33 = vrsqrte_f32((float32x2_t)v32.u32[0]);
  float32x2_t v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v33, v33)));
  float32x4_t v35 = vmulq_n_f32(v29, vmul_f32(v34, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v34, v34))).f32[0]);
  char v36 = *(unsigned char *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection + 64);
  float32x4_t v54 = (float32x4_t)v30;
  float32x4_t v57 = v35;
  if (v36)
  {
    float32x4_t v37 = (float32x4_t *)MEMORY[0x263EF89A8];
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    float32x4_t v56 = v37[3];
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)logger);
    int32x4_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      float32x2_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float32x2_t v41 = 0;
      _os_log_impl(&dword_2465C2000, v39, v40, "Computing the view to world with a nil projection!", v41, 2u);
      MEMORY[0x24C5348D0](v41, -1, -1);
    }
  }
  else
  {
    *(float32x2_t *)v42.f32 = vsub_f32(0, *(float32x2_t *)v35.f32);
    v42.f32[2] = 0.0 - v35.f32[2];
    v42.i32[3] = 0;
    specialized static MathHelpers.computeCameraMatrixForConstrainedLookAt(box:boxPadding:lookAtPoint:lookAtDir:projection:useBoundingSphere:)(1, v56, v53, *(double *)&v52, 1.1, v30, v42, COERCE_FLOAT(*(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection)), *(double *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection + 16), *(void *)&v22, *(void *)&v23, *(void *)&v24, *(void *)&v25, *(void *)&v26, *(void *)&v27, *(void *)&v28, *(float32x4_t *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection + 32), *(float32x4_t *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection + 48));
  }
  specialized SIMD.subscript.getter((__n128)xmmword_2466B9060, COERCE_DOUBLE(2));
  float32x4_t v44 = vsubq_f32(v43, v54);
  float32x4_t v45 = vmulq_f32(v44, v44);
  v45.f32[0] = sqrtf(v45.f32[2] + vaddv_f32(*(float32x2_t *)v45.f32));
  *(float32x2_t *)v46.f32 = vadd_f32(*(float32x2_t *)v54.f32, vmul_n_f32(*(float32x2_t *)v57.f32, v45.f32[0]));
  v46.f32[2] = v31 + vmuls_lane_f32(v45.f32[0], v57, 2);
  v46.i32[3] = 0;
  float32x4_t v57 = v46;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of InteractiveCameraTransformManager.computeCurrentTransform());
  specialized static MathHelpers.computeCameraLookAtRotation(pos:lookAt:up:)(v57, v54, v47);
  return *(double *)&v55;
}

unint64_t InteractiveCameraTransformManager.interpolant(at:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_startTime;
  swift_beginAccess();
  outlined init with copy of DispatchTime?(v8, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1) {
    return outlined destroy of DispatchTime?((uint64_t)v3);
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  unint64_t v10 = DispatchTime.uptimeNanoseconds.getter();
  unint64_t result = DispatchTime.uptimeNanoseconds.getter();
  if (v10 >= result) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  __break(1u);
  return result;
}

id InteractiveCameraTransformManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InteractiveCameraTransformManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for InteractiveCameraTransformManager()
{
  return type metadata accessor for InteractiveCameraTransformManager();
}

uint64_t type metadata accessor for InteractiveCameraTransformManager()
{
  uint64_t result = type metadata singleton initialization cache for InteractiveCameraTransformManager;
  if (!type metadata singleton initialization cache for InteractiveCameraTransformManager) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for InteractiveCameraTransformManager()
{
  type metadata accessor for DispatchTime?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for DispatchTime?()
{
  if (!lazy cache variable for type metadata for DispatchTime?)
  {
    type metadata accessor for DispatchTime();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DispatchTime?);
    }
  }
}

void protocol witness for Draggable.onStartDrag(pointView:) in conformance InteractiveCameraTransformManager(CGPoint_optional pointView)
{
}

uint64_t protocol witness for Draggable.onEndDrag(pointView:) in conformance InteractiveCameraTransformManager()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  uint64_t result = MEMORY[0x270FA5388](v1 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl);
  if (v5)
  {
    *(void *)(v5 + 128) = 0;
    *(void *)(v5 + 136) = 0;
    *(unsigned char *)(v5 + 144) = 1;
    uint64_t v6 = type metadata accessor for DispatchTime();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
    uint64_t v7 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_startTime;
    swift_beginAccess();
    outlined assign with take of DispatchTime?((uint64_t)v4, v7);
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void protocol witness for Draggable.onDrag(pointView:) in conformance InteractiveCameraTransformManager(CGPoint_optional pointView)
{
}

uint64_t outlined assign with take of DispatchTime?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of DispatchTime?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DispatchTime?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Void __swiftcall TurnTableCameraControl.onStartDrag(pointView:)(CGPoint_optional pointView)
{
  char v4 = v2;
  uint64_t v5 = v1;
  uint64_t v6 = *(void *)&pointView.is_nil;
  if (MEMORY[0x24C5349C0](v3 + 16, (__n128)pointView.value, *(__n128 *)&pointView.value.y))
  {
    uint64_t v7 = *(void *)(v3 + 24);
    Objectuint64_t Type = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(ObjectType, v7);
    *(float32x2_t *)v10.f32 = vsub_f32(v9, *(float32x2_t *)(v3 + 80));
    v10.f32[2] = v11 - *(float *)(v3 + 88);
    v10.i32[3] = 0;
    specialized static TurnTableCameraControl.SphericalCoordinates.fromCartesian(pos:)((uint64_t)v13, v10);
    swift_unknownObjectRelease();
    *(_OWORD *)(v3 + 40) = *(_OWORD *)v13;
    *(_OWORD *)(v3 + 52) = *(_OWORD *)&v13[12];
  }
  int v12 = *(_DWORD *)(v3 + 64);
  *(_OWORD *)(v3 + 96) = *(_OWORD *)(v3 + 40);
  *(void *)(v3 + 112) = *(void *)(v3 + 56);
  *(_DWORD *)(v3 + 120) = v12;
  *(void *)(v3 + 128) = v6;
  *(void *)(v3 + 136) = v5;
  *(unsigned char *)(v3 + 144) = v4 & 1;
}

Swift::Void __swiftcall TurnTableCameraControl.onDrag(pointView:)(CGPoint_optional pointView)
{
  if (*(unsigned char *)(v3 + 144) & 1) != 0 || (v2)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      float32x4_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float32x4_t v10 = 0;
      _os_log_impl(&dword_2465C2000, oslog, v9, "Expected non-nil drag start point and current drag point!", v10, 2u);
      MEMORY[0x24C5348D0](v10, -1, -1);
    }
  }
  else
  {
    float v4 = *(double *)&pointView.is_nil - *(double *)(v3 + 128);
    float v5 = v1 - *(double *)(v3 + 136);
    float v6 = *(float *)(v3 + 96) - (float)(*(float *)(v3 + 32) * v4);
    float v7 = *(float *)(v3 + 100) - (float)(*(float *)(v3 + 36) * v5);
    if (*(float *)(v3 + 52) < v7) {
      float v7 = *(float *)(v3 + 52);
    }
    if (v7 <= *(float *)(v3 + 48)) {
      float v7 = *(float *)(v3 + 48);
    }
    *(float *)(v3 + 40) = v6;
    *(float *)(v3 + 44) = v7;
    TurnTableCameraControl.update()();
  }
}

float TurnTableCameraControl.setFromCameraWorldPosition(cameraPositionWorld:)(__n128 a1)
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    float v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v12 = v6;
    *(_DWORD *)float v5 = 136446210;
    v13[0] = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>();
    uint64_t v7 = SIMD.description.getter();
    v13[0].n128_u64[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v3, v4, "TurnTable: setting from worldPos= %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v6, -1, -1);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  *(float32x2_t *)v9.f32 = vsub_f32((float32x2_t)a1.n128_u64[0], *(float32x2_t *)(v1 + 80));
  v9.f32[2] = a1.n128_f32[2] - *(float *)(v1 + 88);
  v9.i32[3] = 0;
  specialized static TurnTableCameraControl.SphericalCoordinates.fromCartesian(pos:)((uint64_t)v13, v9);
  *(__n128 *)(v1 + 40) = v13[0];
  *(__n128 *)(v1 + 52) = *(__n128 *)((char *)v13 + 12);
  return TurnTableCameraControl.update()();
}

void one-time initialization function for minElevation()
{
  static TurnTableCameraControl.SphericalCoordinates.minElevation = -1077426131;
}

double TurnTableCameraControl.SphericalCoordinates.position()()
{
  float v1 = *(float *)v0;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of TurnTableCameraControl.SphericalCoordinates.position());
  float32x4_t v25 = v2;
  __float2 v3 = __sincosf_stret(v1 * 0.5);
  float32x4_t v26 = vmulq_n_f32(v25, v3.__sinval);
  float v4 = *(float *)(v0 + 4);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of TurnTableCameraControl.SphericalCoordinates.position());
  float32x4_t v24 = v5;
  __float2 v6 = __sincosf_stret(v4 * 0.5);
  float32x4_t v7 = vmulq_n_f32(v24, v6.__sinval);
  v7.i32[3] = LODWORD(v6.__cosval);
  int32x4_t v8 = (int32x4_t)vnegq_f32(v7);
  int8x16_t v9 = (int8x16_t)vtrn2q_s32((int32x4_t)v7, vtrn1q_s32((int32x4_t)v7, v8));
  float32x4_t v10 = (float32x4_t)vrev64q_s32((int32x4_t)v7);
  v10.i32[0] = v8.i32[1];
  v10.i32[3] = v8.i32[2];
  float32x4_t v28 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v7, v3.__cosval), v10, v26, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v8, 8uLL), *(float32x2_t *)v26.f32, 1), (float32x4_t)vextq_s8(v9, v9, 8uLL), v26.f32[0]));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
  *(void *)(inited + 32) = 0;
  *(_DWORD *)(inited + 40) = *(_DWORD *)(v0 + 16);
  specialized SIMD.init<A>(_:)(inited);
  float32x4_t v27 = v12;
  swift_setDeallocating();
  float32x4_t v13 = vmulq_f32(v28, (float32x4_t)xmmword_2466B7770);
  int32x4_t v14 = (int32x4_t)vnegq_f32(v13);
  int8x16_t v15 = (int8x16_t)vtrn2q_s32((int32x4_t)v13, vtrn1q_s32((int32x4_t)v13, v14));
  float32x4_t v16 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v14, 8uLL), *(float32x2_t *)v27.f32, 1);
  float32x4_t v17 = (float32x4_t)vrev64q_s32((int32x4_t)v13);
  v17.i32[0] = v14.i32[1];
  v17.i32[3] = v14.i32[2];
  float32x4_t v18 = vmlaq_laneq_f32(vmlaq_n_f32(v16, (float32x4_t)vextq_s8(v15, v15, 8uLL), v27.f32[0]), v17, v27, 2);
  int32x4_t v19 = (int32x4_t)vnegq_f32(v18);
  int8x16_t v20 = (int8x16_t)vtrn2q_s32((int32x4_t)v18, vtrn1q_s32((int32x4_t)v18, v19));
  float32x4_t v21 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 8uLL), *(float32x2_t *)v28.f32, 1), (float32x4_t)vextq_s8(v20, v20, 8uLL), v28.f32[0]);
  float32x4_t v22 = (float32x4_t)vrev64q_s32((int32x4_t)v18);
  v22.i32[0] = v19.i32[1];
  v22.i32[3] = v19.i32[2];
  *(void *)&double result = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v18, v28, 3), v22, v28, 2), v21).u64[0];
  return result;
}

float TurnTableCameraControl.update()()
{
  float32x4_t v6 = *(float32x4_t *)(v0 + 80);
  float32x4_t v7 = *(float32x4_t *)(v0 + 192);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of TurnTableCameraControl.update());
  *(double *)&long long v2 = specialized static MathHelpers.computeCameraLookAtRotation(pos:lookAt:up:)(v7, v6, v1);
  *(_OWORD *)(v0 + 176) = v2;
  *(float32x2_t *)&long long v3 = vadd_f32(COERCE_FLOAT32X2_T(TurnTableCameraControl.SphericalCoordinates.position()()), *(float32x2_t *)(v0 + 80));
  float result = v4 + *(float *)(v0 + 88);
  *((float *)&v3 + 2) = result;
  HIDWORD(v3) = 0;
  *(_OWORD *)(v0 + 192) = v3;
  return result;
}

uint64_t TurnTableCameraControl.__deallocating_deinit()
{
  outlined destroy of weak RangefinderDelegate?(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TurnTableCameraControl()
{
  return self;
}

__n128 __swift_memcpy28_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

void *type metadata accessor for TurnTableCameraControl.SphericalCoordinates()
{
  return &unk_26FAD1670;
}

void protocol witness for Draggable.onStartDrag(pointView:) in conformance TurnTableCameraControl(CGPoint_optional pointView)
{
}

void protocol witness for Draggable.onEndDrag(pointView:) in conformance TurnTableCameraControl()
{
  *(void *)(v0 + 128) = 0;
  *(void *)(v0 + 136) = 0;
  *(unsigned char *)(v0 + 144) = 1;
}

void protocol witness for Draggable.onDrag(pointView:) in conformance TurnTableCameraControl(CGPoint_optional pointView)
{
}

__n128 protocol witness for TransformProvider.transform.getter in conformance TurnTableCameraControl()
{
  return v0[10];
}

uint64_t specialized TurnTableCameraControl.init(startTransformProvider:radius:lookAtWorld:gainX:gainY:)(float a1, __n128 a2, float a3, float a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = 0;
  swift_unknownObjectWeakInit();
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of TurnTableCameraControl.init(startTransformProvider:radius:lookAtWorld:gainX:gainY:));
  *(_OWORD *)(v6 + 80) = v11;
  *(void *)(v6 + 128) = 0;
  *(void *)(v6 + 136) = 0;
  *(unsigned char *)(v6 + 144) = 1;
  uint64_t result = Transform.init()();
  *(_OWORD *)(v6 + 160) = v13;
  *(_OWORD *)(v6 + 176) = v14;
  *(_OWORD *)(v6 + 192) = v15;
  if (one-time initialization token for minElevation != -1) {
    uint64_t result = swift_once();
  }
  int v16 = static TurnTableCameraControl.SphericalCoordinates.minElevation;
  if (*(float *)&static TurnTableCameraControl.SphericalCoordinates.minElevation > 1.5608)
  {
    __break(1u);
  }
  else
  {
    float v17 = 0.0;
    if (*(float *)&static TurnTableCameraControl.SphericalCoordinates.minElevation < 0.0) {
      float v18 = 0.0;
    }
    else {
      float v18 = *(float *)&static TurnTableCameraControl.SphericalCoordinates.minElevation;
    }
    if (a1 > 0.0) {
      float v17 = a1;
    }
    *(_DWORD *)(v6 + 40) = 0;
    *(float *)(v6 + 44) = v18;
    *(_DWORD *)(v6 + 48) = v16;
    *(_DWORD *)(v6 + 52) = 1070057517;
    *(float *)(v6 + 56) = v17;
    *(void *)(v6 + 60) = 0x7F80000000000000;
    *(__n128 *)(v6 + 80) = a2;
    *(float *)(v6 + 32) = a3;
    *(float *)(v6 + 36) = a4;
    *(void *)(v6 + 24) = a6;
    swift_unknownObjectWeakAssign();
    int v19 = *(_DWORD *)(v6 + 64);
    *(_OWORD *)(v6 + 96) = *(_OWORD *)(v6 + 40);
    *(void *)(v6 + 112) = *(void *)(v6 + 56);
    *(_DWORD *)(v6 + 120) = v19;
    return v6;
  }
  return result;
}

void specialized static TurnTableCameraControl.SphericalCoordinates.fromCartesian(pos:)(uint64_t a1@<X8>, float32x4_t a2@<Q0>)
{
  if (one-time initialization token for minElevation != -1)
  {
    float32x4_t v13 = a2;
    swift_once();
    a2 = v13;
  }
  float v3 = *(float *)&static TurnTableCameraControl.SphericalCoordinates.minElevation;
  if (*(float *)&static TurnTableCameraControl.SphericalCoordinates.minElevation > 1.5608)
  {
    __break(1u);
  }
  else
  {
    float v4 = a2.f32[1];
    float v5 = sqrtf(vmuls_lane_f32(a2.f32[2], a2, 2)+ (float)(vmulq_f32(a2, a2).f32[0] + vmuls_lane_f32(a2.f32[1], *(float32x2_t *)a2.f32, 1)));
    float v6 = atan2f(a2.f32[0], a2.f32[2]);
    float v7 = v4 / v5;
    if ((float)(v4 / v5) <= -1.0) {
      float v7 = -1.0;
    }
    if (v7 > 1.0) {
      float v7 = 1.0;
    }
    float v8 = asinf(v7);
    float v9 = -v8;
    BOOL v10 = v8 < -1.5608;
    float v11 = 1.5608;
    if (!v10) {
      float v11 = v9;
    }
    if (v11 <= v3) {
      float v11 = v3;
    }
    float v12 = 0.0;
    if (v5 > 0.0) {
      float v12 = v5;
    }
    *(float *)a1 = v6;
    *(float *)(a1 + 4) = v11;
    *(float *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 12) = 1070057517;
    *(float *)(a1 + 16) = v12;
    *(void *)(a1 + 20) = 0x7F80000000000000;
  }
}

uint64_t UserFeedbackSystem.init()()
{
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of UserFeedbackSystem.init());
  *(void *)(v0 + 16) = v1;
  *(_DWORD *)(v0 + 24) = 953267991;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B7740;
  *(int32x2_t *)(inited + 32) = vdup_n_s32(0x7F800000u);
  specialized SIMD.init<A>(_:)(inited);
  uint64_t v4 = v3;
  swift_setDeallocating();
  *(void *)(v0 + 32) = v4;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 40) = 0;
  *(_OWORD *)(v0 + 64) = xmmword_2466BD840;
  return v0;
}

uint64_t UserFeedbackSystem.reticleAimScoreFilter.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v1 + 40, (uint64_t)v6, &demangling cache variable for type metadata for Filter2D??);
  if (v7 != 1) {
    return outlined init with take of Filter2D?((uint64_t)v6, a1);
  }
  outlined destroy of URL?((uint64_t)v6, &demangling cache variable for type metadata for Filter2D??);
  uint64_t v3 = specialized static ExperimentSettings.loadReticleDeltaFilterType(default:)(0xD00000000000003BLL, 0x80000002466C3CA0);
  static Filter2DFactory.create(factoryString:)(v3, v4, a1);
  swift_bridgeObjectRelease();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Filter2D?);
  swift_beginAccess();
  outlined assign with take of Filter2D??((uint64_t)v6, v1 + 40);
  return swift_endAccess();
}

uint64_t UserFeedbackSystem.__deallocating_deinit()
{
  outlined destroy of URL?(v0 + 40, &demangling cache variable for type metadata for Filter2D??);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UserFeedbackSystem()
{
  return self;
}

uint64_t outlined assign with take of Filter2D??(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Filter2D??);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Filter2D?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Filter2D?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized UserFeedbackSystem.update(at:arView:bboxWorld:)(void *a1, double a2, float32x4_t a3, double a4)
{
  uint64_t v5 = v4;
  *(void *)(v5 + 16) = *(void *)(v5 + 32);
  *(double *)v7.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(a4, a3);
  float32x4_t v51 = v7;
  float32x4_t v52 = v8;
  float32x4_t v53 = v9;
  *(_OWORD *)osloga = v10;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of UserFeedbackSystem.update(at:arView:bboxWorld:));
  float32x4_t oslogb = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, v11.f32[0]), v52, *(float32x2_t *)v11.f32, 1), v53, v11, 2), *(float32x4_t *)osloga, v11, 3);
  dispatch thunk of ARView.cameraTransform.getter();
  float32x4_t v13 = vsubq_f32(oslogb, v12);
  if (sqrtf(vmuls_lane_f32(v13.f32[2], v13, 2) + vaddv_f32(vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32))) <= 0.0001)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v25))
    {
      float32x4_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float32x4_t v26 = 0;
      _os_log_impl(&dword_2465C2000, oslog, v25, "cameraToBoxVector is too small to compute direction!", v26, 2u);
      MEMORY[0x24C5348D0](v26, -1, -1);
    }
  }
  else
  {
    int32x4_t v14 = (int32x4_t)vmulq_f32(v13, v13);
    v14.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1))).u32[0];
    float32x2_t v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
    float32x2_t v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
    float32x4_t v54 = vmulq_n_f32(v13, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).f32[0]);
    dispatch thunk of ARView.cameraTransform.getter();
    *(double *)v68.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(v18, v17);
    simd_float4x4 v50 = __invert_f4(v68);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2466B5DF0;
    *(void *)(inited + 32) = v54.i64[0];
    *(_DWORD *)(inited + 40) = v54.i32[2];
    *(_DWORD *)(inited + 44) = 0;
    specialized SIMD.init<A>(_:)(inited);
    float32x4_t v55 = v20;
    swift_setDeallocating();
    float32x4_t v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v50.columns[0], v55.f32[0]), (float32x4_t)v50.columns[1], *(float32x2_t *)v55.f32, 1), (float32x4_t)v50.columns[2], v55, 2), (float32x4_t)v50.columns[3], v55, 3);
    v21.i32[3] = 0;
    float32x4_t v56 = v21;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of UserFeedbackSystem.update(at:arView:bboxWorld:));
    specialized static MathHelpers.angleBetween(_:_:)(v56, v22);
    if (v23 < 1.5708)
    {
      *(double *)&uint64_t v27 = COERCE_DOUBLE(ARView.project(_:)());
      if (v29)
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v46 = type metadata accessor for Logger();
        __swift_project_value_buffer(v46, (uint64_t)logger);
        float32x4_t v47 = Logger.logObject.getter();
        os_log_type_t v48 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v47, v48))
        {
          float32x4_t v49 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)float32x4_t v49 = 0;
          _os_log_impl(&dword_2465C2000, v47, v48, "Can't project bbox center into the screen!", v49, 2u);
          MEMORY[0x24C5348D0](v49, -1, -1);
        }
      }
      else
      {
        double v30 = *(double *)&v27;
        double v31 = v28;
        uint64_t v32 = swift_initStackObject();
        *(_OWORD *)(v32 + 16) = xmmword_2466B7740;
        objc_msgSend(a1, sel_center);
        *(float *)&double v33 = v33 - v30;
        *(_DWORD *)(v32 + 32) = LODWORD(v33);
        objc_msgSend(a1, sel_center);
        float v35 = v34 - v31;
        *(float *)(v32 + 36) = v35;
        specialized SIMD.init<A>(_:)(v32);
        uint64_t v57 = v36;
        swift_setDeallocating();
        uint64_t v37 = swift_initStackObject();
        *(_OWORD *)(v37 + 16) = xmmword_2466B7740;
        objc_msgSend(a1, sel_bounds);
        float v38 = CGRectGetWidth(v69) * 0.5;
        *(float *)(v37 + 32) = *(float *)&v57 / v38;
        objc_msgSend(a1, sel_bounds);
        float v39 = CGRectGetHeight(v70) * 0.5;
        *(float *)(v37 + 36) = *((float *)&v57 + 1) / v39;
        specialized SIMD.init<A>(_:)(v37);
        uint64_t v41 = v40;
        swift_setDeallocating();
        *(void *)(v5 + 16) = v41;
        UserFeedbackSystem.reticleAimScoreFilter.getter((uint64_t)v66);
        outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v66, (uint64_t)&v64, (uint64_t *)&demangling cache variable for type metadata for Filter2D?);
        if (v65)
        {
          outlined init with take of Animation(&v64, (uint64_t)v61);
          uint64_t v42 = v62;
          uint64_t v43 = v63;
          __swift_project_boxed_opaque_existential_1(v61, v62);
          double v44 = *(double *)(v5 + 16);
          float32x4_t v45 = *(double (**)(uint64_t, uint64_t, double))(v43 + 16);
          swift_retain();
          *(double *)(v5 + 16) = v45(v42, v43, v44);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
          swift_release();
        }
        outlined destroy of URL?((uint64_t)v66, (uint64_t *)&demangling cache variable for type metadata for Filter2D?);
      }
    }
  }
}

uint64_t Gesture.targetedToAnyEntity()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  float32x4_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  long long v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v2, a1);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 1, 1, v12);
  uint64_t v13 = default argument 4 of TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)();
  return TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)((uint64_t)v10, (uint64_t)v8, (uint64_t)getEnumTag for FreeformCloudRenderer.Error, 0, v13, a2);
}

uint64_t default argument 4 of TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)()
{
  return TargetingEntityGesture.EntityTargetState.init()();
}

uint64_t TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(*(void *)a5 + 80) - 8) + 32))(a6, a1, *(void *)(*(void *)a5 + 80));
  long long v10 = (int *)type metadata accessor for TargetingEntityGesture();
  swift_weakInit();
  swift_release();
  outlined init with take of Animation?(a2, a6 + v10[10], &demangling cache variable for type metadata for QueryPredicate<Entity>?);
  uint64_t v11 = (void *)(a6 + v10[11]);
  void *v11 = a3;
  v11[1] = a4;
  uint64_t v12 = (uint64_t *)(a6 + v10[12]);
  uint64_t result = property wrapper backing initializer of TargetingEntityGesture.state();
  *uint64_t v12 = result;
  v12[1] = v14;
  return result;
}

uint64_t Gesture.targetedToEntity(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>?);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v11, v3, a1);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v9, 1, 1, v13);
  uint64_t v14 = default argument 4 of TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)();
  swift_retain();
  return TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)((uint64_t)v11, (uint64_t)v9, (uint64_t)getEnumTag for FreeformCloudRenderer.Error, 0, v14, a2);
}

uint64_t Gesture.targetedToEntity(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, v3, a2);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v10, a1, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
  uint64_t v16 = default argument 4 of TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)();
  return TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)((uint64_t)v12, (uint64_t)v10, (uint64_t)getEnumTag for FreeformCloudRenderer.Error, 0, v16, a3);
}

uint64_t specialized Gesture.targetedToInteraction(enabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v25 = a2;
  uint64_t v26 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v8;
  uint64_t v9 = type metadata accessor for TapGesture();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v4, v9);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 1, 1, v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>.EntityTargetState);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  swift_weakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(unsigned char *)(v14 + 96) = 1;
  uint64_t v15 = v14 + direct field offset for TargetingEntityGesture.EntityTargetState._ray;
  uint64_t v16 = type metadata accessor for CollisionCastHit();
  float32x4_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  v17(v15, 1, 1, v16);
  v17(v15, 1, 1, v16);
  uint64_t v18 = v25;
  swift_retain();
  ObservationRegistrar.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v12, v9);
  int v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>);
  swift_weakInit();
  outlined init with take of Animation?((uint64_t)v24, a3 + v19[10], &demangling cache variable for type metadata for QueryPredicate<Entity>?);
  float32x4_t v20 = (void *)(a3 + v19[11]);
  *float32x4_t v20 = v26;
  v20[1] = v18;
  float32x4_t v21 = (void *)(a3 + v19[12]);
  uint64_t v27 = v14;
  uint64_t result = State.init(wrappedValue:)();
  uint64_t v23 = v29;
  *float32x4_t v21 = v28;
  v21[1] = v23;
  return result;
}

uint64_t Gesture.targetedToInteraction(enabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, v5, a3);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v13, 1, 1, v17);
  swift_retain();
  uint64_t v18 = default argument 4 of TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)();
  return TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)((uint64_t)v15, (uint64_t)v13, a1, a2, v18, a4);
}

uint64_t TargetingEntityGesture.EntityTargetState.entity.getter()
{
  return swift_weakLoadStrong();
}

uint64_t TargetingEntityGesture.EntityTargetState.entity.setter()
{
  return swift_release();
}

uint64_t TargetingEntityGesture.EntityTargetState.view.getter()
{
  swift_getKeyPath();
  TargetingEntityGesture.EntityTargetState.access<A>(keyPath:)();
  swift_release();
  return MEMORY[0x24C5349C0](v0 + 24);
}

void TargetingEntityGesture.EntityTargetState.view.setter(void *a1)
{
}

__n128 TargetingEntityGesture.EntityTargetState.defaultPlane.getter@<Q0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  TargetingEntityGesture.EntityTargetState.access<A>(keyPath:)();
  swift_release();
  char v3 = *(unsigned char *)(v1 + 96);
  long long v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  __n128 result = *(__n128 *)(v1 + 64);
  long long v6 = *(_OWORD *)(v1 + 80);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 64) = v3;
  return result;
}

uint64_t TargetingEntityGesture.EntityTargetState.defaultPlane.setter()
{
  return swift_release();
}

uint64_t TargetingEntityGesture.EntityTargetState.ray.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  TargetingEntityGesture.EntityTargetState.access<A>(keyPath:)();
  swift_release();
  uint64_t v3 = v1 + direct field offset for TargetingEntityGesture.EntityTargetState._ray;
  swift_beginAccess();
  return outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v3, a1, &demangling cache variable for type metadata for CollisionCastHit?);
}

uint64_t key path setter for TargetingEntityGesture.EntityTargetState.ray : <A>TargetingEntityGesture<A>.EntityTargetState(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x270FA5388](v2 - 8);
  long long v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(a1, (uint64_t)v4, &demangling cache variable for type metadata for CollisionCastHit?);
  return TargetingEntityGesture.EntityTargetState.ray.setter((uint64_t)v4);
}

uint64_t TargetingEntityGesture.EntityTargetState.ray.setter(uint64_t a1)
{
  return outlined destroy of URL?(a1, &demangling cache variable for type metadata for CollisionCastHit?);
}

uint64_t closure #1 in TargetingEntityGesture.EntityTargetState.ray.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + direct field offset for TargetingEntityGesture.EntityTargetState._ray;
  swift_beginAccess();
  outlined assign with copy of CollisionCastHit?(a2, v3);
  return swift_endAccess();
}

uint64_t TargetingEntityGesture.EntityTargetState.access<A>(keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t TargetingEntityGesture.EntityTargetState.withMutation<A, B>(keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t TargetingEntityGesture.EntityTargetState.deinit()
{
  swift_weakDestroy();
  swift_unknownObjectWeakDestroy();
  outlined destroy of URL?(v0 + direct field offset for TargetingEntityGesture.EntityTargetState._ray, &demangling cache variable for type metadata for CollisionCastHit?);
  uint64_t v1 = v0 + direct field offset for TargetingEntityGesture.EntityTargetState._$observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t TargetingEntityGesture.EntityTargetState.__deallocating_deinit()
{
  TargetingEntityGesture.EntityTargetState.deinit();

  return swift_deallocClassInstance();
}

uint64_t TargetingEntityGesture.EntityTargetState.__allocating_init()()
{
  return TargetingEntityGesture.EntityTargetState.init()();
}

uint64_t TargetingEntityGesture.EntityTargetState.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_weakInit();
  swift_weakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  memset(v8, 0, sizeof(v8));
  char v9 = 1;
  outlined init with take of Animation?((uint64_t)v8, v0 + 32, &demangling cache variable for type metadata for simd_float4x4?);
  outlined init with take of Animation?((uint64_t)v8, v0 + 32, &demangling cache variable for type metadata for simd_float4x4?);
  uint64_t v4 = type metadata accessor for CollisionCastHit();
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  uint64_t v6 = (char *)(v0 + direct field offset for TargetingEntityGesture.EntityTargetState._ray);
  outlined init with take of Animation?((uint64_t)v3, v0 + direct field offset for TargetingEntityGesture.EntityTargetState._ray, &demangling cache variable for type metadata for CollisionCastHit?);
  v5(v6, 1, 1, v4);
  ObservationRegistrar.init()();
  return v0;
}

uint64_t property wrapper backing initializer of TargetingEntityGesture.state()
{
  type metadata accessor for TargetingEntityGesture.EntityTargetState();
  State.init(wrappedValue:)();
  return v1;
}

uint64_t TargetingEntityGesture.state.getter()
{
  type metadata accessor for TargetingEntityGesture.EntityTargetState();
  type metadata accessor for State();
  State.wrappedValue.getter();
  return v1;
}

uint64_t TargetingEntityGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = TargetingEntityGesture.buildTargetingEntityGesture()(a1);
  *a2 = result;
  return result;
}

uint64_t TargetingEntityGesture.buildTargetingEntityGesture()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  uint64_t v45 = *(void *)(v2 + 64);
  uint64_t v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = *(void *)(MEMORY[0x270FA5388](v3) + 24);
  simd_float4x4 v50 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = v9;
  uint64_t v41 = type metadata accessor for PlatformViewHitTestFilterGesture();
  uint64_t v48 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  float v39 = (char *)&v32 - v10;
  swift_getAssociatedTypeWitness();
  uint64_t v53 = type metadata accessor for EntityTargetValue();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v43 = type metadata accessor for _MapGesture();
  uint64_t v47 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  float32x4_t v52 = (char *)&v32 - v11;
  uint64_t v44 = swift_getWitnessTable();
  uint64_t v46 = type metadata accessor for _EndedGesture();
  MEMORY[0x270FA5388](v46);
  uint64_t v40 = (char *)&v32 - v12;
  uint64_t v13 = v54;
  uint64_t v14 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v50, v54, v6);
  float32x4_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  uint64_t v33 = a1;
  v49(v5, v13, a1);
  uint64_t v15 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v16 = (v15 + 32) & ~v15;
  uint64_t v35 = v15 | 7;
  v45 += v16;
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v14;
  *(void *)(v17 + 16) = v14;
  uint64_t v19 = v51;
  *(void *)(v17 + 24) = v51;
  uint64_t v38 = v16;
  uint64_t v20 = *(void (**)(uint64_t, char *, uint64_t))(v2 + 32);
  uint64_t v34 = v2 + 32;
  v20(v17 + v16, v5, a1);
  uint64_t v36 = v18;
  uint64_t v37 = v20;
  float32x4_t v21 = v39;
  uint64_t v22 = v18;
  uint64_t v23 = v19;
  PlatformViewHitTestFilterGesture.init(_:filter:)();
  uint64_t v24 = v33;
  v49(v5, v54, v33);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v22;
  *(void *)(v25 + 24) = v23;
  v20(v25 + v16, v5, v24);
  uint64_t v26 = v41;
  Gesture.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v21, v26);
  v49(v5, v54, v24);
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v51;
  *(void *)(v27 + 16) = v36;
  *(void *)(v27 + 24) = v28;
  v37(v27 + v38, v5, v24);
  uint64_t v29 = v43;
  double v30 = v52;
  Gesture.onEnded(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v30, v29);
  swift_getWitnessTable();
  return AnyGesture.init<A>(_:)();
}

uint64_t closure #1 in TargetingEntityGesture.buildTargetingEntityGesture()(void *a1, double a2, double a3)
{
  uint64_t v6 = type metadata accessor for TargetingEntityGesture();
  specialized TargetingEntityGesture.populateState(from:at:with:)(a1, *(uint64_t *)&a2, *(uint64_t *)&a3, 0, v6);
  TargetingEntityGesture.state.getter();
  uint64_t v7 = (void *)TargetingEntityGesture.EntityTargetState.view.getter();
  swift_release();

  if (!v7) {
    return 0;
  }
  TargetingEntityGesture.state.getter();
  uint64_t v8 = TargetingEntityGesture.EntityTargetState.entity.getter();
  swift_release();
  if (!v8) {
    return 0;
  }
  char v9 = TargetingEntityGesture.check(against:)(v8, v6);
  swift_release();
  return v9 & 1;
}

uint64_t TargetingEntityGesture.check(against:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v17 - v13;
  if (!swift_weakLoadStrong())
  {
    outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v2 + *(int *)(a2 + 40), (uint64_t)v7, &demangling cache variable for type metadata for QueryPredicate<Entity>?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
      uint64_t v18 = a1;
      char v15 = QueryPredicate.evaluate(value:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      return v15 & 1;
    }
    outlined destroy of URL?((uint64_t)v7, &demangling cache variable for type metadata for QueryPredicate<Entity>?);
    if (((*(uint64_t (**)(uint64_t))(v2 + *(int *)(a2 + 44)))(a1) & 1) == 0)
    {
      char v15 = 1;
      return v15 & 1;
    }
    dispatch thunk of Entity.scene.getter();
    type metadata accessor for Entity();
    static QueryPredicate.canInteract(on:)();
    swift_release();
    uint64_t v18 = a1;
    char v15 = QueryPredicate.evaluate(value:)();
    goto LABEL_8;
  }
  type metadata accessor for Entity();
  if ((static Entity.== infix(_:_:)() & 1) == 0)
  {
    static QueryPredicate.isDescendant(of:)();
    uint64_t v18 = a1;
    char v15 = QueryPredicate.evaluate(value:)();
    swift_release();
LABEL_8:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    return v15 & 1;
  }
  swift_release();
  char v15 = 1;
  return v15 & 1;
}

void closure #2 in TargetingEntityGesture.buildTargetingEntityGesture()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v11 - v6;
  type metadata accessor for TargetingEntityGesture();
  TargetingEntityGesture.state.getter();
  uint64_t v8 = TargetingEntityGesture.EntityTargetState.entity.getter();
  swift_release();
  if (v8)
  {
    TargetingEntityGesture.state.getter();
    uint64_t v9 = (void *)TargetingEntityGesture.EntityTargetState.view.getter();
    swift_release();
    if (v9)
    {
      type metadata accessor for PlatformViewHitTestFilterGesture.Value();
      PlatformViewHitTestFilterGesture.Value.gestureValue.getter();
      id v10 = v9;
      TargetingEntityGesture.state.getter();
      TargetingEntityGesture.EntityTargetState.defaultPlane.getter((uint64_t)v13);
      swift_release();
      TargetingEntityGesture.state.getter();
      TargetingEntityGesture.EntityTargetState.ray.getter((uint64_t)v4);
      swift_release();
      EntityTargetValue.init(gestureValue:entity:view:defaultPlane:ray:)((uint64_t)v7, v8, (uint64_t)v9, (uint64_t)v13, (uint64_t)v4, AssociatedTypeWitness, v12);

      return;
    }
    swift_release();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t EntityTargetValue.init(gestureValue:entity:view:defaultPlane:ray:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13 = (int *)type metadata accessor for EntityTargetValue();
  uint64_t v14 = v13[8];
  uint64_t v15 = a7 + v13[9];
  uint64_t v16 = a7 + v13[10];
  uint64_t v17 = type metadata accessor for CollisionCastHit();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7, a1, a6);
  *(void *)(a7 + v13[7]) = a2;
  *(void *)(a7 + v14) = a3;
  outlined init with take of Animation?(a4, v15, &demangling cache variable for type metadata for simd_float4x4?);

  return outlined assign with take of CollisionCastHit?(a5, v16);
}

uint64_t closure #3 in TargetingEntityGesture.buildTargetingEntityGesture()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TargetingEntityGesture();
  TargetingEntityGesture.state.getter();
  TargetingEntityGesture.EntityTargetState.entity.setter();
  swift_release();
  TargetingEntityGesture.state.getter();
  TargetingEntityGesture.EntityTargetState.view.setter(0);
  swift_release();
  TargetingEntityGesture.state.getter();
  memset(v5, 0, sizeof(v5));
  char v6 = 1;
  TargetingEntityGesture.EntityTargetState.defaultPlane.setter();
  swift_release();
  TargetingEntityGesture.state.getter();
  uint64_t v3 = type metadata accessor for CollisionCastHit();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  TargetingEntityGesture.EntityTargetState.ray.setter((uint64_t)v2);
  return swift_release();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance TargetingEntityGesture<A>()
{
  return MEMORY[0x270F04CD0]();
}

uint64_t EntityTargetValue.gestureValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t EntityTargetValue.gestureValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*EntityTargetValue.gestureValue.modify())()
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

uint64_t EntityTargetValue.entity.getter()
{
  return swift_retain();
}

uint64_t EntityTargetValue.entity.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 28);
  uint64_t result = swift_release();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*EntityTargetValue.entity.modify())()
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

uint64_t EntityTargetValue.subscript.getter()
{
  return swift_getAtKeyPath();
}

void EntityTapTriggerGesture.init()(uint64_t (**a1)()@<X8>)
{
  *a1 = protocol witness for static Equatable.== infix(_:_:) in conformance FreeformCloudRenderer.Error;
  a1[1] = 0;
}

uint64_t EntityTapTriggerGesture.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t EntityTapTriggerGesture.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v14 = a1;
  uint64_t v2 = type metadata accessor for TapGesture();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EndedGesture<TargetingEntityGesture<TapGesture>>);
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = *v1;
  uint64_t v11 = v1[1];
  TapGesture.init(count:)();
  specialized Gesture.targetedToInteraction(enabled:)(v10, v11, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type TargetingEntityGesture<TapGesture> and conformance TargetingEntityGesture<A>, &demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>);
  Gesture.onEnded(_:)();
  outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityTargetValue<()>);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<TargetingEntityGesture<TapGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<TargetingEntityGesture<TapGesture>>);
  uint64_t result = AnyGesture.init<A>(_:)();
  *uint64_t v14 = result;
  return result;
}

BOOL closure #1 in EntityTapTriggerGesture.body.getter()
{
  return Entity.applyTapForBehaviors()();
}

uint64_t protocol witness for Gesture.body.getter in conformance EntityTapTriggerGesture@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v14 = a1;
  uint64_t v2 = type metadata accessor for TapGesture();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EndedGesture<TargetingEntityGesture<TapGesture>>);
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = *v1;
  uint64_t v11 = v1[1];
  TapGesture.init(count:)();
  specialized Gesture.targetedToInteraction(enabled:)(v10, v11, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type TargetingEntityGesture<TapGesture> and conformance TargetingEntityGesture<A>, &demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>);
  Gesture.onEnded(_:)();
  outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityTargetValue<()>);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<TargetingEntityGesture<TapGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<TargetingEntityGesture<TapGesture>>);
  uint64_t result = AnyGesture.init<A>(_:)();
  *uint64_t v14 = result;
  return result;
}

uint64_t static EntityTargetValue<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EntityTargetValue();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if (v11)
  {
    type metadata accessor for Entity();
    char v13 = static Entity.== infix(_:_:)();
  }
  else
  {
    char v13 = 0;
  }
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v10, v4);
  v14(v8, v4);
  return v13 & 1;
}

uint64_t type metadata accessor for EntityTargetValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in EntityTapTriggerGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> EntityTargetValue<A>(uint64_t a1, uint64_t a2)
{
  return static EntityTargetValue<A>.== infix(_:_:)(a1, a2);
}

void type metadata completion function for TargetingEntityGesture.EntityTargetState()
{
  type metadata accessor for CollisionCastHit?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_initClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for TargetingEntityGesture.EntityTargetState()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for CollisionCastHit?()
{
  if (!lazy cache variable for type metadata for CollisionCastHit?)
  {
    type metadata accessor for CollisionCastHit();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CollisionCastHit?);
    }
  }
}

void type metadata completion function for EntityTargetValue()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CollisionCastHit?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for EntityTargetValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned __int8 v6 = *(_DWORD *)(*(void *)(type metadata accessor for CollisionCastHit() - 8) + 80);
  unsigned __int8 v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = *a2;
  *a1 = *a2;
  uint64_t v9 = (v7 | v6) & 0xF0 | 0xFu;
  uint64_t v10 = v8 + ((v9 + 16) & ~v9);
  swift_retain();
  return v10;
}

uint64_t destroy for EntityTargetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = ((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  v4 &= 0xFFFFFFFFFFFFFFF8;

  unint64_t v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = type metadata accessor for CollisionCastHit();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v7 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = v7;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(unint64_t, uint64_t))(v11 + 8);
    return v10(v8, v6);
  }
  return result;
}

uint64_t initializeWithCopy for EntityTargetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void **)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *v10;
  *uint64_t v9 = *v10;
  unint64_t v12 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
  LOBYTE(v10) = *(unsigned char *)(v13 + 0x40);
  long long v15 = *(_OWORD *)(v13 + 32);
  long long v14 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 16);
  *(_OWORD *)(v12 + 32) = v15;
  *(_OWORD *)(v12 + 48) = v14;
  *(unsigned char *)(v12 + 64) = (_BYTE)v10;
  uint64_t v16 = type metadata accessor for CollisionCastHit();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (void *)((v18 + 65 + v12) & ~v18);
  uint64_t v20 = (const void *)((v18 + 65 + v13) & ~v18);
  float32x4_t v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
  swift_retain();
  id v22 = v11;
  if (v21(v20, 1, v16))
  {
    if (*(_DWORD *)(v17 + 84)) {
      size_t v23 = *(void *)(v17 + 64);
    }
    else {
      size_t v23 = *(void *)(v17 + 64) + 1;
    }
    memcpy(v19, v20, v23);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v19, v20, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithCopy for EntityTargetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *uint64_t v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v10 = (void **)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 23;
  uint64_t v11 = *(void **)(v9 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = *v10;
  *uint64_t v10 = v11;
  id v14 = v11;

  unint64_t v15 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFF0;
  *(_OWORD *)unint64_t v15 = *(_OWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
  long long v17 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 0x10);
  long long v18 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 0x20);
  long long v19 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 0x30);
  *(unsigned char *)(v15 + 64) = *(unsigned char *)((v12 & 0xFFFFFFFFFFFFFFF0) + 0x40);
  *(_OWORD *)(v15 + 32) = v18;
  *(_OWORD *)(v15 + 48) = v19;
  *(_OWORD *)(v15 + 16) = v17;
  uint64_t v20 = type metadata accessor for CollisionCastHit();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  size_t v23 = (void *)((v22 + 65 + v15) & ~v22);
  uint64_t v24 = (void *)((v22 + 65 + v16) & ~v22);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v16) = v25(v23, 1, v20);
  int v26 = v25(v24, 1, v20);
  if (v16)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 16))(v23, v24, v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v23, 0, 1, v20);
      return a1;
    }
    int v27 = *(_DWORD *)(v21 + 84);
    size_t v28 = *(void *)(v21 + 64);
  }
  else
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 24))(v23, v24, v20);
      return a1;
    }
    double v30 = *(void (**)(void *, uint64_t))(v21 + 8);
    uint64_t v29 = v21 + 8;
    v30(v23, v20);
    int v27 = *(_DWORD *)(v29 + 76);
    size_t v28 = *(void *)(v29 + 56);
  }
  if (v27) {
    size_t v31 = v28;
  }
  else {
    size_t v31 = v28 + 1;
  }
  memcpy(v23, v24, v31);
  return a1;
}

uint64_t initializeWithTake for EntityTargetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  unint64_t v11 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v12 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
  LOBYTE(v10) = *(unsigned char *)(v12 + 0x40);
  long long v14 = *(_OWORD *)(v12 + 32);
  long long v13 = *(_OWORD *)(v12 + 48);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(v12 + 16);
  *(_OWORD *)(v11 + 32) = v14;
  *(_OWORD *)(v11 + 48) = v13;
  *(unsigned char *)(v11 + 64) = (_BYTE)v10;
  uint64_t v15 = type metadata accessor for CollisionCastHit();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  long long v18 = (void *)((v17 + 65 + v11) & ~v17);
  long long v19 = (const void *)((v17 + 65 + v12) & ~v17);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v19, 1, v15))
  {
    if (*(_DWORD *)(v16 + 84)) {
      size_t v20 = *(void *)(v16 + 64);
    }
    else {
      size_t v20 = *(void *)(v16 + 64) + 1;
    }
    memcpy(v18, v19, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v18, v19, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithTake for EntityTargetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  swift_release();
  unint64_t v9 = (void **)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void **)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = *v9;
  *unint64_t v9 = *v10;

  unint64_t v12 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
  long long v14 = *(_OWORD *)(v13 + 0x10);
  long long v15 = *(_OWORD *)(v13 + 0x20);
  long long v16 = *(_OWORD *)(v13 + 0x30);
  *(unsigned char *)(v12 + 64) = *(unsigned char *)(v13 + 0x40);
  *(_OWORD *)(v12 + 32) = v15;
  *(_OWORD *)(v12 + 48) = v16;
  *(_OWORD *)(v12 + 16) = v14;
  uint64_t v17 = type metadata accessor for CollisionCastHit();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  size_t v20 = (void *)((v19 + 65 + v12) & ~v19);
  uint64_t v21 = (void *)((v19 + 65 + v13) & ~v19);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v23 = v22(v20, 1, v17);
  int v24 = v22(v21, 1, v17);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v20, v21, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v17);
      return a1;
    }
    int v25 = *(_DWORD *)(v18 + 84);
    size_t v26 = *(void *)(v18 + 64);
  }
  else
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v20, v21, v17);
      return a1;
    }
    size_t v28 = *(void (**)(void *, uint64_t))(v18 + 8);
    uint64_t v27 = v18 + 8;
    v28(v20, v17);
    int v25 = *(_DWORD *)(v27 + 76);
    size_t v26 = *(void *)(v27 + 56);
  }
  if (v25) {
    size_t v29 = v26;
  }
  else {
    size_t v29 = v26 + 1;
  }
  memcpy(v20, v21, v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityTargetValue(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for CollisionCastHit();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  unsigned int v12 = v11 - 1;
  if (!v11) {
    unsigned int v12 = 0;
  }
  if (v7 <= v12) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = v7;
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = *(void *)(v6 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  if (v11) {
    uint64_t v17 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  else {
    uint64_t v17 = *(void *)(*(void *)(v8 - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v18 = v16 + 65;
  if (a2 <= v14) {
    goto LABEL_32;
  }
  unint64_t v19 = v17
      + ((v18 + ((((((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF0)) & ~v16);
  char v20 = 8 * v19;
  if (v19 > 3) {
    goto LABEL_15;
  }
  unsigned int v22 = ((a2 - v14 + ~(-1 << v20)) >> v20) + 1;
  if (HIWORD(v22))
  {
    int v21 = *(_DWORD *)((char *)a1 + v19);
    if (v21) {
      goto LABEL_22;
    }
LABEL_32:
    if (v7 == v14)
    {
      size_t v26 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
      return v26(a1, v7, v5);
    }
    size_t v28 = (uint64_t *)(((unint64_t)a1 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 0x80000000) == 0)
    {
      uint64_t v29 = *v28;
      if ((unint64_t)*v28 >= 0xFFFFFFFF) {
        LODWORD(v29) = -1;
      }
      return (v29 + 1);
    }
    if (v11 >= 2)
    {
      unsigned int v30 = (*(uint64_t (**)(unint64_t))(v10 + 48))((v18
                                                                    + (((((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 23) & 0xFFFFFFFFFFFFFFF0)) & ~v16);
      if (v30 >= 2) {
        return v30 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  if (v22 > 0xFF)
  {
    int v21 = *(unsigned __int16 *)((char *)a1 + v19);
    if (*(unsigned __int16 *)((char *)a1 + v19)) {
      goto LABEL_22;
    }
    goto LABEL_32;
  }
  if (v22 < 2) {
    goto LABEL_32;
  }
LABEL_15:
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_32;
  }
LABEL_22:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = v19;
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v14 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for EntityTargetValue(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v31 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  int v10 = 0;
  uint64_t v11 = *(void *)(type metadata accessor for CollisionCastHit() - 8);
  uint64_t v12 = v11;
  unsigned int v13 = *(_DWORD *)(v11 + 84);
  if (v13) {
    unsigned int v14 = v13 - 1;
  }
  else {
    unsigned int v14 = 0;
  }
  uint64_t v15 = *(void *)(v8 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v17 = *(void *)(v11 + 64);
  if (v9 <= v14) {
    unsigned int v18 = v14;
  }
  else {
    unsigned int v18 = v9;
  }
  if (v18 <= 0x7FFFFFFF) {
    unsigned int v19 = 0x7FFFFFFF;
  }
  else {
    unsigned int v19 = v18;
  }
  uint64_t v20 = v16 + 65;
  if (!v13) {
    ++v17;
  }
  size_t v21 = v17
      + ((v16 + 65 + ((((((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF0)) & ~v16);
  if (a3 <= v19) {
    goto LABEL_20;
  }
  if (v21 <= 3)
  {
    unsigned int v22 = ((a3 - v19 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
    if (HIWORD(v22))
    {
      int v10 = 4;
      if (v19 >= a2) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
    if (v22 >= 0x100) {
      int v10 = 2;
    }
    else {
      int v10 = v22 > 1;
    }
LABEL_20:
    if (v19 >= a2) {
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  int v10 = 1;
  if (v19 >= a2)
  {
LABEL_28:
    uint64_t v26 = ~v16;
    switch(v10)
    {
      case 1:
        a1[v21] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_33;
      case 2:
        *(_WORD *)&a1[v21] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_33;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v21] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v9 == v19)
          {
            uint64_t v27 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
            v27(a1, a2, v9, v7);
          }
          else
          {
            size_t v28 = (void *)((unint64_t)&a1[v15 + 7] & 0xFFFFFFFFFFFFFFF8);
            if ((v18 & 0x80000000) != 0)
            {
              if (v13 >= 2)
              {
                unsigned int v30 = *(void (**)(unint64_t, void))(v12 + 56);
                v30((v20 + (((((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF0)) & v26, (a2 + 1));
              }
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v29 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v29 = (a2 - 1);
              }
              *size_t v28 = v29;
            }
          }
        }
        break;
    }
    return;
  }
LABEL_21:
  unsigned int v23 = ~v19 + a2;
  if (v21 < 4)
  {
    int v24 = (v23 >> (8 * v21)) + 1;
    if (v21)
    {
      int v25 = v23 & ~(-1 << (8 * v21));
      bzero(a1, v21);
      if (v21 == 3)
      {
        *(_WORD *)a1 = v25;
        a1[2] = BYTE2(v25);
      }
      else if (v21 == 2)
      {
        *(_WORD *)a1 = v25;
      }
      else
      {
        *a1 = v25;
      }
    }
  }
  else
  {
    bzero(a1, v21);
    *(_DWORD *)a1 = v23;
    int v24 = 1;
  }
  switch(v10)
  {
    case 1:
      a1[v21] = v24;
      break;
    case 2:
      *(_WORD *)&a1[v21] = v24;
      break;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x2466A964CLL);
    case 4:
      *(_DWORD *)&a1[v21] = v24;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for EntityTapTriggerGesture()
{
  return &type metadata for EntityTapTriggerGesture;
}

uint64_t sub_2466A9684()
{
  type metadata accessor for TargetingEntityGesture();

  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TargetingEntityGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_2466A96E4()
{
  return lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type AnyGesture<EntityTargetValue<()>> and conformance AnyGesture<A>, &demangling cache variable for type metadata for AnyGesture<EntityTargetValue<()>>);
}

uint64_t type metadata instantiation function for TargetingEntityGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

void type metadata completion function for TargetingEntityGesture()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for QueryPredicate<Entity>?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for TargetingEntityGesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned __int8 v6 = *(_DWORD *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>)
                             - 8)
                 + 80);
  unsigned __int8 v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = *a2;
  *a1 = *a2;
  uint64_t v9 = (v7 | v6) & 0xF8 | 7u;
  uint64_t v10 = v8 + ((v9 + 16) & ~v9);
  swift_retain();
  return v10;
}

uint64_t destroy for TargetingEntityGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_weakDestroy();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  }
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for TargetingEntityGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  swift_weakCopyInit();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (void *)((v11 + 8 + v7) & ~v11);
  unsigned int v13 = (const void *)((v11 + 8 + v8) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
  {
    int v14 = *(_DWORD *)(v10 + 84);
    uint64_t v15 = *(void *)(v10 + 64);
    if (v14) {
      size_t v16 = *(void *)(v10 + 64);
    }
    else {
      size_t v16 = v15 + 1;
    }
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v12, v13, v9);
    unsigned int v18 = *(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56);
    uint64_t v17 = v10 + 56;
    v18(v12, 0, 1, v9);
    int v14 = *(_DWORD *)(v17 + 28);
    uint64_t v15 = *(void *)(v17 + 8);
  }
  if (v14) {
    uint64_t v19 = v15;
  }
  else {
    uint64_t v19 = v15 + 1;
  }
  uint64_t v20 = (void *)(((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  size_t v21 = (void *)(((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  unsigned int v23 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v24 = (void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v23 = *v24;
  v23[1] = v24[1];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TargetingEntityGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  swift_weakCopyAssign();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (void *)((v11 + 8 + v7) & ~v11);
  unsigned int v13 = (void *)((v11 + 8 + v8) & ~v11);
  int v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(v12, 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v12, v13, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_12;
    }
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v12, v13, v9);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  if (v17) {
    size_t v19 = v18;
  }
  else {
    size_t v19 = v18 + 1;
  }
  memcpy(v12, v13, v19);
LABEL_12:
  if (*(_DWORD *)(v10 + 84)) {
    uint64_t v20 = *(void *)(v10 + 64);
  }
  else {
    uint64_t v20 = *(void *)(v10 + 64) + 1;
  }
  size_t v21 = (void *)(((unint64_t)v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)(((unint64_t)v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = v22[1];
  *size_t v21 = *v22;
  v21[1] = v23;
  swift_retain();
  swift_release();
  int v24 = (void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v25 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  *int v24 = *v25;
  swift_retain();
  swift_release();
  v24[1] = v25[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for TargetingEntityGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  swift_weakTakeInit();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (void *)((v11 + 8 + v7) & ~v11);
  unsigned int v13 = (const void *)((v11 + 8 + v8) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
  {
    int v14 = *(_DWORD *)(v10 + 84);
    uint64_t v15 = *(void *)(v10 + 64);
    if (v14) {
      size_t v16 = *(void *)(v10 + 64);
    }
    else {
      size_t v16 = v15 + 1;
    }
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v12, v13, v9);
    size_t v18 = *(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56);
    uint64_t v17 = v10 + 56;
    v18(v12, 0, 1, v9);
    int v14 = *(_DWORD *)(v17 + 28);
    uint64_t v15 = *(void *)(v17 + 8);
  }
  if (v14) {
    uint64_t v19 = v15;
  }
  else {
    uint64_t v19 = v15 + 1;
  }
  uint64_t v20 = (_OWORD *)(((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  size_t v21 = (_OWORD *)(((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  *(_OWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TargetingEntityGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  swift_weakTakeAssign();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (void *)((v11 + 8 + v7) & ~v11);
  unsigned int v13 = (void *)((v11 + 8 + v8) & ~v11);
  int v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(v12, 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v12, v13, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_12;
    }
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v12, v13, v9);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  if (v17) {
    size_t v19 = v18;
  }
  else {
    size_t v19 = v18 + 1;
  }
  memcpy(v12, v13, v19);
LABEL_12:
  if (*(_DWORD *)(v10 + 84)) {
    uint64_t v20 = *(void *)(v10 + 64);
  }
  else {
    uint64_t v20 = *(void *)(v10 + 64) + 1;
  }
  size_t v21 = (_OWORD *)(((unint64_t)v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (uint64_t)v13 + v20 + 7;
  unint64_t v23 = (v22 & 0xFFFFFFFFFFFFFFF8) + 23;
  *size_t v21 = *(_OWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  int v24 = (void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  v23 &= 0xFFFFFFFFFFFFFFF8;
  *int v24 = *(void *)v23;
  swift_release();
  v24[1] = *(void *)(v23 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TargetingEntityGesture(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11) {
    unsigned int v12 = v11 - 1;
  }
  else {
    unsigned int v12 = 0;
  }
  if (v12 <= v7) {
    unsigned int v13 = v7;
  }
  else {
    unsigned int v13 = v12;
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  uint64_t v14 = *(void *)(v6 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = *(void *)(*(void *)(v8 - 8) + 64);
  if (!v11) {
    ++v16;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = v16 + 7;
  if (v13 < a2)
  {
    unint64_t v18 = ((((v17 + ((v15 + ((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    uint64_t v19 = v18 & 0xFFFFFFF8;
    if ((v18 & 0xFFFFFFF8) != 0) {
      unsigned int v20 = 2;
    }
    else {
      unsigned int v20 = a2 - v13 + 1;
    }
    if (v20 >= 0x10000) {
      unsigned int v21 = 4;
    }
    else {
      unsigned int v21 = 2;
    }
    if (v20 < 0x100) {
      unsigned int v21 = 1;
    }
    if (v20 >= 2) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    switch(v22)
    {
      case 1:
        int v23 = *((unsigned __int8 *)a1 + v18);
        if (!v23) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v23 = *(unsigned __int16 *)((char *)a1 + v18);
        if (v23) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2466AA4A0);
      case 4:
        int v23 = *(int *)((char *)a1 + v18);
        if (!v23) {
          break;
        }
LABEL_28:
        int v24 = v23 - 1;
        if (v19)
        {
          int v24 = 0;
          int v25 = *a1;
        }
        else
        {
          int v25 = 0;
        }
        return v13 + (v25 | v24) + 1;
      default:
        break;
    }
  }
  if (v7 == v13)
  {
    uint64_t v26 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v6 + 48);
    return v26(a1, v7, v5);
  }
  unint64_t v28 = ((((unint64_t)a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) + v15 + 8) & ~v15;
  if (v12 == v13)
  {
    if (v11 >= 2)
    {
      unsigned int v30 = (*(uint64_t (**)(unint64_t))(v10 + 48))(v28);
      if (v30 >= 2) {
        return v30 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  unint64_t v29 = *(void *)((v17 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29 >= 0xFFFFFFFF) {
    LODWORD(v29) = -1;
  }
  return (v29 + 1);
}

void storeEnumTagSinglePayload for TargetingEntityGesture(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v30 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  int v10 = 0;
  uint64_t v11 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>)
                  - 8);
  uint64_t v12 = v11;
  int v13 = *(_DWORD *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  uint64_t v15 = *(void *)(v8 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v17 = *(void *)(v11 + 64);
  if (v14 <= v9) {
    unsigned int v18 = v9;
  }
  else {
    unsigned int v18 = v14;
  }
  if (v18 <= 0x7FFFFFFF) {
    unsigned int v18 = 0x7FFFFFFF;
  }
  if (!v13) {
    ++v17;
  }
  uint64_t v19 = v17 + 7;
  unint64_t v20 = ((((v19 + ((v16 + ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v16)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v18 < a3)
  {
    if (((((v19 + ((v16 + ((v15 + 7) & 0xFFFFFFF8) + 8) & ~v16)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v21 = a3 - v18 + 1;
    }
    else {
      unsigned int v21 = 2;
    }
    if (v21 >= 0x10000) {
      int v22 = 4;
    }
    else {
      int v22 = 2;
    }
    if (v21 < 0x100) {
      int v22 = 1;
    }
    if (v21 >= 2) {
      int v10 = v22;
    }
    else {
      int v10 = 0;
    }
  }
  if (a2 > v18)
  {
    if (((((v19 + ((v16 + ((v15 + 7) & 0xFFFFFFF8) + 8) & ~v16)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v23 = a2 - v18;
    }
    else {
      int v23 = 1;
    }
    if (((((v19 + ((v16 + ((v15 + 7) & 0xFFFFFFF8) + 8) & ~v16)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v24 = ~v18 + a2;
      bzero(a1, ((((v19 + ((v16 + ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v16)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
      *a1 = v24;
    }
    switch(v10)
    {
      case 1:
        *((unsigned char *)a1 + v20) = v23;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v20) = v23;
        return;
      case 3:
        goto LABEL_52;
      case 4:
        *(_DWORD *)((char *)a1 + v20) = v23;
        return;
      default:
        return;
    }
  }
  switch(v10)
  {
    case 1:
      *((unsigned char *)a1 + v20) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 2:
      *(_WORD *)((char *)a1 + v20) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 3:
LABEL_52:
      __break(1u);
      JUMPOUT(0x2466AA7B0);
    case 4:
      *(_DWORD *)((char *)a1 + v20) = 0;
      goto LABEL_36;
    default:
LABEL_36:
      if (a2)
      {
LABEL_37:
        if (v9 == v18)
        {
          int v25 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v30 + 56);
          v25(a1, a2, v9, v7);
        }
        else
        {
          unint64_t v26 = ((((unint64_t)a1 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + v16 + 8) & ~v16;
          if (v14 == v18)
          {
            uint64_t v27 = *(void (**)(unint64_t, void))(v12 + 56);
            v27(v26, (a2 + 1));
          }
          else
          {
            unint64_t v28 = (void *)((v19 + v26) & 0xFFFFFFFFFFFFFFF8);
            if ((a2 & 0x80000000) != 0)
            {
              uint64_t v29 = a2 ^ 0x80000000;
              v28[1] = 0;
            }
            else
            {
              uint64_t v29 = (a2 - 1);
            }
            *unint64_t v28 = v29;
          }
        }
      }
      return;
  }
}

void type metadata accessor for QueryPredicate<Entity>?()
{
  if (!lazy cache variable for type metadata for QueryPredicate<Entity>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for QueryPredicate<Entity>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for QueryPredicate<Entity>?);
    }
  }
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in TargetingEntityGesture<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in TargetingEntityGesture.buildTargetingEntityGesture()(void *a1, double a2, double a3)
{
  type metadata accessor for TargetingEntityGesture();

  return closure #1 in TargetingEntityGesture.buildTargetingEntityGesture()(a1, a2, a3);
}

void partial apply for closure #2 in TargetingEntityGesture.buildTargetingEntityGesture()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for TargetingEntityGesture();

  closure #2 in TargetingEntityGesture.buildTargetingEntityGesture()(a1, a2);
}

uint64_t objectdestroyTm_8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for TargetingEntityGesture();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(*(void *)(v2 - 8) + 64);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4, v1);
  swift_weakDestroy();
  uint64_t v6 = v0 + v4 + *(int *)(v2 + 40);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, v4 + v5, v3 | 7);
}

uint64_t partial apply for closure #3 in TargetingEntityGesture.buildTargetingEntityGesture()()
{
  type metadata accessor for TargetingEntityGesture();

  return closure #3 in TargetingEntityGesture.buildTargetingEntityGesture()();
}

uint64_t outlined assign with take of CollisionCastHit?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double specialized simd_float4x4.init(translation:rotation:scale:)(double a1, float32x4_t a2)
{
  double v3 = simd_matrix4x4(a2);
  simd_float4x4.scale(_:)();
  SIMD4<>._xyz.getter();
  SIMD4<>._xyz.setter();
  return v3;
}

uint64_t specialized SIMD.init<A>(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    unint64_t v3 = 3;
    if ((unint64_t)(v1 - 1) < 3) {
      unint64_t v3 = v1 - 1;
    }
    long long v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      long long v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      long long v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  long long v4;
  int v5;
  long long v6;

  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    unint64_t v3 = 4;
    if ((unint64_t)(v1 - 1) < 4) {
      unint64_t v3 = v1 - 1;
    }
    long long v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 3)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      long long v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      long long v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 3) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    unint64_t v3 = 2;
    if ((unint64_t)(v1 - 1) < 2) {
      unint64_t v3 = v1 - 1;
    }
    long long v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 1)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      long long v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v2 & 1))) = v5;
      long long v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  long long v4;
  long long v5;
  uint64_t v6;
  long long v7;
  long long v8;

  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    unint64_t v3 = 3;
    if ((unint64_t)(v1 - 1) < 3) {
      unint64_t v3 = v1 - 1;
    }
    long long v4 = 0uLL;
    int v5 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      long long v6 = *(void *)(result + 32 + 8 * v2);
      uint64_t v7 = v4;
      uint64_t v8 = v5;
      *((void *)&v7 + (v2 & 3)) = v6;
      long long v4 = v7;
      int v5 = v8;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

void specialized TargetingEntityGesture.populateState(from:at:with:)(void *x0_0, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(void *)&long long v58 = a5;
  int v57 = a4;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  float32x4_t v52 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  int v10 = (char *)&v50 - v9;
  uint64_t v11 = type metadata accessor for CollisionGroup();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unsigned int v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Type = type metadata accessor for CollisionCastQueryType();
  uint64_t v16 = *(void *)(Type - 8);
  MEMORY[0x270FA5388](Type);
  unsigned int v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CollisionCastHit();
  uint64_t v54 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v53 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (x0_0)
  {
    type metadata accessor for ARView();
    uint64_t v21 = swift_dynamicCastClass();
    if (v21)
    {
      int v22 = (void *)v21;
      uint64_t v50 = v19;
      id v23 = x0_0;
      TargetingEntityGesture.state.getter();
      id v51 = v23;
      TargetingEntityGesture.EntityTargetState.view.setter(v22);
      swift_release();
      if (v57)
      {
        id v28 = v51;
      }
      else
      {
        (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x263F16270], Type);
        static CollisionGroup.all.getter();
        uint64_t v24 = ARView.hitTest(_:requireInputTarget:query:mask:)();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, Type);
        uint64_t v25 = v54;
        if (*(void *)(v24 + 16))
        {
          uint64_t v26 = v50;
          (*(void (**)(char *, unint64_t, uint64_t))(v54 + 16))(v10, v24 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80)), v50);
          uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
          v27(v10, 0, 1, v26);
        }
        else
        {
          uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56);
          uint64_t v26 = v50;
          v27(v10, 1, 1, v50);
        }
        uint64_t v29 = v53;
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v26) == 1)
        {

          outlined destroy of URL?((uint64_t)v10, &demangling cache variable for type metadata for CollisionCastHit?);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v29, v10, v26);
          TargetingEntityGesture.state.getter();
          CollisionCastHit.entity.getter();
          TargetingEntityGesture.EntityTargetState.entity.setter();
          swift_release();
          TargetingEntityGesture.state.getter();
          uint64_t v30 = (uint64_t)v52;
          (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v52, v29, v50);
          uint64_t v31 = v50;
          v27((char *)v30, 0, 1, v50);
          TargetingEntityGesture.EntityTargetState.ray.setter(v30);
          swift_release();
          dispatch thunk of ARView.scene.getter();
          uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
          swift_release();
          if (active)
          {
            TargetingEntityGesture.state.getter();
            specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of TargetingEntityGesture.populateState(from:at:with:));
            float32x4_t v59 = v33;
            type metadata accessor for Entity();
            HasTransform.transformMatrix(relativeTo:)();
            *(double *)v34.i64 = simd_quaternion(v66);
            int32x4_t v35 = (int32x4_t)vmulq_f32(v34, (float32x4_t)xmmword_2466B7770);
            int32x4_t v36 = (int32x4_t)vnegq_f32((float32x4_t)v35);
            int8x16_t v37 = (int8x16_t)vtrn2q_s32(v35, vtrn1q_s32(v35, v36));
            float32x4_t v38 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v36, 8uLL), (float32x4_t)0), (float32x4_t)0, (float32x4_t)vextq_s8(v37, v37, 8uLL));
            float32x4_t v39 = (float32x4_t)vrev64q_s32(v35);
            v39.i32[0] = v36.i32[1];
            v39.i32[3] = v36.i32[2];
            int32x4_t v40 = (int32x4_t)vaddq_f32(v39, v38);
            int32x4_t v41 = (int32x4_t)vnegq_f32((float32x4_t)v40);
            int8x16_t v42 = (int8x16_t)vtrn2q_s32(v40, vtrn1q_s32(v40, v41));
            float32x4_t v43 = (float32x4_t)vrev64q_s32(v40);
            v43.i32[0] = v41.i32[1];
            v43.i32[3] = v41.i32[2];
            *(double *)v44.i64 = simd_quaternion(v59, vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v40, v34, 3), v43, v34, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v40, (int8x16_t)v41, 8uLL), *(float32x2_t *)v34.f32, 1), (float32x4_t)vextq_s8(v42, v42, 8uLL), v34.f32[0])));
            float32x4_t v59 = v44;
            CollisionCastHit.position.getter();
            long long v58 = v45;
            static simd_quatf.identity.getter();
            *(double *)&long long v46 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v58, v59);
            long long v60 = v46;
            long long v61 = v47;
            long long v62 = v48;
            long long v63 = v49;
            char v64 = 0;
            TargetingEntityGesture.EntityTargetState.defaultPlane.setter();

            swift_release();
            swift_release();
            (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v31);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v31);
          }
        }
      }
    }
  }
}

uint64_t sub_2466AB508@<X0>(uint64_t a1@<X8>)
{
  return TargetingEntityGesture.EntityTargetState.ray.getter(a1);
}

uint64_t sub_2466AB530()
{
  return 16;
}

__n128 sub_2466AB53C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for closure #1 in TargetingEntityGesture.EntityTargetState.ray.setter()
{
  return closure #1 in TargetingEntityGesture.EntityTargetState.ray.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t outlined assign with copy of CollisionCastHit?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_2466AB5CC@<X0>(uint64_t a1@<X8>)
{
  TargetingEntityGesture.EntityTargetState.defaultPlane.getter((uint64_t)v3);
  return outlined init with take of Animation?((uint64_t)v3, a1, &demangling cache variable for type metadata for simd_float4x4?);
}

uint64_t sub_2466AB614(uint64_t a1)
{
  outlined init with take of Animation?(a1, (uint64_t)&v2, &demangling cache variable for type metadata for simd_float4x4?);
  return TargetingEntityGesture.EntityTargetState.defaultPlane.setter();
}

uint64_t sub_2466AB658()
{
  return 16;
}

__n128 sub_2466AB664(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for closure #1 in TargetingEntityGesture.EntityTargetState.defaultPlane.setter()
{
  return outlined init with take of Animation?(*(void *)(v0 + 24), *(void *)(v0 + 16) + 32, &demangling cache variable for type metadata for simd_float4x4?);
}

uint64_t sub_2466AB6A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TargetingEntityGesture.EntityTargetState.view.getter();
  *a1 = result;
  return result;
}

void sub_2466AB6D4(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  TargetingEntityGesture.EntityTargetState.view.setter(v1);
}

uint64_t sub_2466AB704()
{
  return 16;
}

__n128 sub_2466AB710(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for closure #1 in TargetingEntityGesture.EntityTargetState.view.setter()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_2466AB73C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TargetingEntityGesture.EntityTargetState.entity.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2466AB768()
{
  return TargetingEntityGesture.EntityTargetState.entity.setter();
}

uint64_t sub_2466AB794()
{
  return 16;
}

__n128 sub_2466AB7A0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for closure #1 in TargetingEntityGesture.EntityTargetState.entity.setter()
{
  return swift_weakAssign();
}

uint64_t sub_2466AB7CC()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for EntityTargetValue();
  type metadata accessor for AnyGesture();

  return swift_getWitnessTable();
}

id closure #1 in variable initialization expression of static VoxelRenderer.mtlLibrary()
{
  v6[1] = *(id *)MEMORY[0x263EF8340];
  if (one-time initialization token for mtlDevice != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static VoxelRenderer.mtlDevice;
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  v6[0] = 0;
  id v1 = objc_msgSend(v0, sel_newDefaultLibraryWithBundle_error_, static VoxelRenderer.bundle, v6);
  if (v1)
  {
    id v2 = v6[0];
  }
  else
  {
    id v3 = v6[0];
    uint64_t v4 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v1;
}

uint64_t VoxelRenderer.init(view:)(void *a1)
{
  uint64_t v3 = v1;
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(_OWORD *)(v1 + 48) = xmmword_2466BDBB0;
  *(_OWORD *)(v1 + 64) = xmmword_2466B9060;
  *(void *)(v1 + 80) = 2;
  if (one-time initialization token for mtlDevice != -1) {
    swift_once();
  }
  *(void *)(v1 + 16) = static VoxelRenderer.mtlDevice;
  swift_unknownObjectRetain();
  *(void *)(v1 + 40) = VoxelRenderer.makeCubePrimitive()();
  swift_unknownObjectRelease();
  if (*(void *)(v1 + 40))
  {
    VoxelRenderer.initRenderPipeline(colorPixelFormat:)((uint64_t)objc_msgSend(a1, sel_colorPixelFormat));
    if (v2) {
      swift_release();
    }
  }
  else
  {
    swift_release();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)logger);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_2465C2000, v6, v7, "Can't make cube primitive!", v8, 2u);
      MEMORY[0x24C5348D0](v8, -1, -1);
    }

    lazy protocol witness table accessor for type VoxelRenderer.Error and conformance VoxelRenderer.Error();
    swift_allocError();
    swift_willThrow();
  }

  return v3;
}

void VoxelRenderer.render(encoder:uniforms:pointCloud:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  ObjectCaptureSession.Frame.PointCloud.points.getter();
  uint64_t v6 = dispatch thunk of OCDataBuffer.count.getter();
  swift_release();
  if (v6 <= 0)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(oslog, v10)) {
      goto LABEL_16;
    }
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    uint64_t v12 = "No point cloud points, can't render!";
    goto LABEL_15;
  }
  ObjectCaptureSession.Frame.PointCloud.points.getter();
  uint64_t v7 = dispatch thunk of OCDataBuffer.asMTLBuffer(from:)();
  swift_release();
  if (v7)
  {
    uint64_t v8 = (void *)MEMORY[0x24C533410](0xD000000000000014, 0x80000002466C3ED0);
    objc_msgSend(a1, sel_pushDebugGroup_, v8);

    objc_msgSend(a1, sel_setCullMode_, 1);
    objc_msgSend(a1, sel_setDepthStencilState_, v3[4]);
    if (v3[3])
    {
      objc_msgSend(a1, sel_setRenderPipelineState_);
      objc_msgSend(a1, sel_setVertexBuffer_offset_atIndex_, v3[5], 0, 0);
      objc_msgSend(a1, sel_setVertexBuffer_offset_atIndex_, a2, 0, 1);
      objc_msgSend(a1, sel_setVertexBuffer_offset_atIndex_, v7, 0, 2);
      objc_msgSend(a1, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, 3, 0, 36, v6);
      objc_msgSend(a1, sel_popDebugGroup);
      swift_unknownObjectRelease();
    }
    else
    {
      __break(1u);
    }
    return;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)logger);
  oslog = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    uint64_t v12 = "Can't get coverage point clouds MTLBuffer!";
LABEL_15:
    _os_log_impl(&dword_2465C2000, oslog, v10, v12, v11, 2u);
    MEMORY[0x24C5348D0](v11, -1, -1);
  }
LABEL_16:
}

void VoxelRenderer.initRenderPipeline(colorPixelFormat:)(uint64_t a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128A0]), sel_init);
  objc_msgSend(v4, sel_setDepthCompareFunction_, 1);
  objc_msgSend(v4, sel_setDepthWriteEnabled_, 1);
  id v5 = objc_msgSend(*(id *)(v1 + 16), sel_newDepthStencilStateWithDescriptor_, v4);
  if (v5)
  {
    *(void *)(v1 + 32) = v5;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    VoxelRenderer.makeRenderPipelineState(colorPixelFormat:mtlVertexDescriptor:)(a1, 0);
    uint64_t v7 = v6;

    swift_unknownObjectRelease();
    if (!v2)
    {
      *(void *)(v1 + 24) = v7;
      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_2465C2000, v9, v10, "Can't make depth stencil state!", v11, 2u);
      MEMORY[0x24C5348D0](v11, -1, -1);
    }

    lazy protocol witness table accessor for type VoxelRenderer.Error and conformance VoxelRenderer.Error();
    swift_allocError();
    swift_willThrow();
  }
}

void VoxelRenderer.makeRenderPipelineState(colorPixelFormat:mtlVertexDescriptor:)(uint64_t a1, uint64_t a2)
{
  v43[1] = *(id *)MEMORY[0x263EF8340];
  if (one-time initialization token for mtlLibrary != -1) {
    swift_once();
  }
  id v5 = (void *)static VoxelRenderer.mtlLibrary;
  if (!static VoxelRenderer.mtlLibrary)
  {
    lazy protocol witness table accessor for type VoxelRenderer.Error and conformance VoxelRenderer.Error();
    swift_allocError();
    swift_willThrow();
    return;
  }
  swift_unknownObjectRetain();
  uint64_t v6 = (void *)MEMORY[0x24C533410](0xD000000000000024, 0x80000002466C3E70);
  uint64_t v7 = v5;
  id v8 = objc_msgSend(v5, sel_newFunctionWithName_, v6);

  id v42 = v8;
  if (!v8)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)logger);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      float32x4_t v34 = (uint8_t *)swift_slowAlloc();
      int32x4_t v35 = (void *)swift_slowAlloc();
      v43[0] = v35;
      *(_DWORD *)float32x4_t v34 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x80000002466C3E70, (uint64_t *)v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2465C2000, v32, v33, "Can't find vertex function: \"%s\"", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v35, -1, -1);
      MEMORY[0x24C5348D0](v34, -1, -1);
    }

    lazy protocol witness table accessor for type VoxelRenderer.Error and conformance VoxelRenderer.Error();
    swift_allocError();
    swift_willThrow();
    goto LABEL_31;
  }
  uint64_t v9 = (void *)MEMORY[0x24C533410](0xD000000000000025, 0x80000002466C3EA0);
  id v10 = objc_msgSend(v7, sel_newFunctionWithName_, v9);

  if (!v10)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)logger);
    int8x16_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      float32x4_t v39 = (uint8_t *)swift_slowAlloc();
      int32x4_t v40 = (void *)swift_slowAlloc();
      v43[0] = v40;
      *(_DWORD *)float32x4_t v39 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000002466C3EA0, (uint64_t *)v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2465C2000, v37, v38, "Can't find fragment function: \"%s\"", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v40, -1, -1);
      MEMORY[0x24C5348D0](v39, -1, -1);
    }

    lazy protocol witness table accessor for type VoxelRenderer.Error and conformance VoxelRenderer.Error();
    swift_allocError();
    swift_willThrow();
LABEL_30:
    swift_unknownObjectRelease();
LABEL_31:
    swift_unknownObjectRelease();
    return;
  }
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F129C0]), sel_init);
  uint64_t v12 = (void *)MEMORY[0x24C533410](0x69507265646E6552, 0xEE00656E696C6570);
  objc_msgSend(v11, sel_setLabel_, v12);

  objc_msgSend(v11, sel_setVertexFunction_, v42);
  objc_msgSend(v11, sel_setFragmentFunction_, v10);
  if (a2) {
    objc_msgSend(v11, sel_setVertexDescriptor_, a2);
  }
  id v13 = objc_msgSend(v11, sel_colorAttachments);
  id v14 = objc_msgSend(v13, sel_objectAtIndexedSubscript_, 0);

  if (!v14)
  {
    __break(1u);
    goto LABEL_33;
  }
  objc_msgSend(v14, sel_setPixelFormat_, a1);

  id v15 = objc_msgSend(v11, sel_colorAttachments);
  id v16 = objc_msgSend(v15, sel_objectAtIndexedSubscript_, 0);

  if (!v16)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  objc_msgSend(v16, sel_setBlendingEnabled_, 1);

  id v17 = objc_msgSend(v11, sel_colorAttachments);
  id v18 = objc_msgSend(v17, sel_objectAtIndexedSubscript_, 0);

  if (!v18)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  objc_msgSend(v18, sel_setRgbBlendOperation_, 0);

  id v19 = objc_msgSend(v11, sel_colorAttachments);
  id v20 = objc_msgSend(v19, sel_objectAtIndexedSubscript_, 0);

  if (!v20)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  objc_msgSend(v20, sel_setAlphaBlendOperation_, 0);

  id v21 = objc_msgSend(v11, sel_colorAttachments);
  id v22 = objc_msgSend(v21, sel_objectAtIndexedSubscript_, 0);

  if (!v22)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  objc_msgSend(v22, sel_setSourceRGBBlendFactor_, 4);

  id v23 = objc_msgSend(v11, sel_colorAttachments);
  id v24 = objc_msgSend(v23, sel_objectAtIndexedSubscript_, 0);

  if (!v24)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  objc_msgSend(v24, sel_setSourceAlphaBlendFactor_, 4);

  id v25 = objc_msgSend(v11, sel_colorAttachments);
  id v26 = objc_msgSend(v25, sel_objectAtIndexedSubscript_, 0);

  if (!v26)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  objc_msgSend(v26, sel_setDestinationRGBBlendFactor_, 5);

  id v27 = objc_msgSend(v11, sel_colorAttachments);
  id v28 = objc_msgSend(v27, sel_objectAtIndexedSubscript_, 0);

  if (v28)
  {
    objc_msgSend(v28, sel_setDestinationAlphaBlendFactor_, 5);

    objc_msgSend(v11, sel_setDepthAttachmentPixelFormat_, *(void *)(v2 + 56));
    objc_msgSend(v11, sel_setStencilAttachmentPixelFormat_, 0);
    uint64_t v29 = *(void **)(v2 + 16);
    v43[0] = 0;
    if (objc_msgSend(v29, sel_newRenderPipelineStateWithDescriptor_error_, v11, v43))
    {
      id v30 = v43[0];
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      return;
    }
    id v41 = v43[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unknownObjectRelease();

    goto LABEL_30;
  }
LABEL_39:
  __break(1u);
}

id VoxelRenderer.makeCubePrimitive()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ObjectCaptureCubeVertex>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2466B6940;
  *(_OWORD *)(v1 + 32) = xmmword_2466BDBC0;
  *(void *)(v1 + 48) = 0;
  *(_OWORD *)(v1 + 64) = xmmword_2466BDBD0;
  *(void *)(v1 + 80) = 0x3F80000000000000;
  *(_OWORD *)(v1 + 96) = xmmword_2466BDBE0;
  *(void *)(v1 + 112) = 1065353216;
  *(_OWORD *)(v1 + 128) = xmmword_2466BDBD0;
  *(void *)(v1 + 144) = 0x3F80000000000000;
  *(_OWORD *)(v1 + 160) = xmmword_2466BDBF0;
  __asm { FMOV            V9.2S, #1.0 }
  *(void *)(v1 + 176) = _D9;
  *(_OWORD *)(v1 + 192) = xmmword_2466BDBE0;
  *(void *)(v1 + 208) = 1065353216;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  id v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, 12, 1, (void *)v1);
  unint64_t v10 = v8[2];
  unint64_t v9 = v8[3];
  int64_t v11 = v9 >> 1;
  unint64_t v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    id v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v8);
    unint64_t v9 = v8[3];
    int64_t v11 = v9 >> 1;
  }
  v8[2] = v12;
  id v13 = &v8[4 * v10];
  *((_OWORD *)v13 + 2) = xmmword_2466BDC00;
  v13[6] = 0;
  unint64_t v14 = v10 + 2;
  if (v11 < (uint64_t)(v10 + 2))
  {
    id v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 2, 1, v8);
    unint64_t v9 = v8[3];
    int64_t v11 = v9 >> 1;
  }
  v8[2] = v14;
  id v15 = &v8[4 * v12];
  long long v16 = xmmword_2466BDC10;
  *((_OWORD *)v15 + 2) = xmmword_2466BDC10;
  v15[6] = 0x3F80000000000000;
  unint64_t v17 = v10 + 3;
  if (v11 < (uint64_t)(v10 + 3))
  {
    long long v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 3, 1, v8);
    long long v16 = xmmword_2466BDC10;
    id v8 = v100;
    unint64_t v9 = v100[3];
    int64_t v11 = v9 >> 1;
  }
  v8[2] = v17;
  id v18 = &v8[4 * v14];
  long long v19 = xmmword_2466BDC20;
  *((_OWORD *)v18 + 2) = xmmword_2466BDC20;
  v18[6] = 1065353216;
  unint64_t v20 = v10 + 4;
  if (v11 < (uint64_t)(v10 + 4))
  {
    long long v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 4, 1, v8);
    long long v19 = xmmword_2466BDC20;
    long long v16 = xmmword_2466BDC10;
    id v8 = v101;
    unint64_t v9 = v101[3];
    int64_t v11 = v9 >> 1;
  }
  v8[2] = v20;
  id v21 = &v8[4 * v17];
  *((_OWORD *)v21 + 2) = v16;
  v21[6] = 0x3F80000000000000;
  unint64_t v22 = v10 + 5;
  if (v11 < (uint64_t)(v10 + 5))
  {
    long long v122 = v19;
    uint64_t v102 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 5, 1, v8);
    long long v19 = v122;
    id v8 = v102;
    unint64_t v9 = v102[3];
    int64_t v11 = v9 >> 1;
  }
  v8[2] = v22;
  id v23 = &v8[4 * v20];
  *((_OWORD *)v23 + 2) = xmmword_2466BDC30;
  v23[6] = _D9;
  if (v11 < (uint64_t)(v10 + 6))
  {
    long long v123 = v19;
    uint64_t v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 6, 1, v8);
    long long v19 = v123;
    id v8 = v103;
  }
  v8[2] = v10 + 6;
  id v24 = &v8[4 * v22];
  *((_OWORD *)v24 + 2) = v19;
  v24[6] = 1065353216;
  swift_bridgeObjectRelease();
  id v26 = (void *)v8[2];
  int64_t v27 = (int64_t)v26 + 6;
  if (__OFADD__(v26, 6))
  {
    __break(1u);
LABEL_92:
    uint64_t v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v27, 1, v26);
    long long v31 = xmmword_2466BDBE0;
    id v26 = v104;
    unint64_t v25 = v104[3];
    int64_t v29 = v25 >> 1;
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  id v28 = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (v28 && (unint64_t v25 = v8[3], v29 = v25 >> 1, (uint64_t)(v25 >> 1) >= v27))
  {
    id v26 = v8;
  }
  else
  {
    if ((uint64_t)v26 <= v27) {
      int64_t v30 = (int64_t)v26 + 6;
    }
    else {
      int64_t v30 = (int64_t)v26;
    }
    id v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28, v30, 1, v8);
    unint64_t v25 = v26[3];
    int64_t v29 = v25 >> 1;
  }
  long long v31 = xmmword_2466BDBE0;
  unint64_t v10 = v26[2];
  int64_t v27 = v10 + 1;
  if (v29 <= v10) {
    goto LABEL_92;
  }
LABEL_22:
  id v26[2] = v27;
  uint64_t v32 = &v26[4 * v10];
  *((_OWORD *)v32 + 2) = xmmword_2466BDBC0;
  v32[6] = 0;
  unint64_t v33 = v10 + 2;
  if (v29 < (uint64_t)(v10 + 2))
  {
    uint64_t v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v10 + 2, 1, v26);
    long long v31 = xmmword_2466BDBE0;
    id v26 = v105;
    unint64_t v25 = v105[3];
    int64_t v29 = v25 >> 1;
  }
  id v26[2] = v33;
  float32x4_t v34 = &v26[4 * v27];
  *((_OWORD *)v34 + 2) = v31;
  void v34[6] = 0x3F80000000000000;
  unint64_t v35 = v10 + 3;
  if (v29 < (uint64_t)(v10 + 3))
  {
    uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v10 + 3, 1, v26);
    long long v31 = xmmword_2466BDBE0;
    id v26 = v106;
    unint64_t v25 = v106[3];
    int64_t v29 = v25 >> 1;
  }
  id v26[2] = v35;
  uint64_t v36 = &v26[4 * v33];
  long long v37 = xmmword_2466BDC40;
  *((_OWORD *)v36 + 2) = xmmword_2466BDC40;
  v36[6] = 1065353216;
  unint64_t v38 = v10 + 4;
  if (v29 < (uint64_t)(v10 + 4))
  {
    uint64_t v107 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v10 + 4, 1, v26);
    long long v37 = xmmword_2466BDC40;
    long long v31 = xmmword_2466BDBE0;
    id v26 = v107;
    unint64_t v25 = v107[3];
    int64_t v29 = v25 >> 1;
  }
  id v26[2] = v38;
  float32x4_t v39 = &v26[4 * v35];
  *((_OWORD *)v39 + 2) = v31;
  v39[6] = 0x3F80000000000000;
  unint64_t v40 = v10 + 5;
  if (v29 < (uint64_t)(v10 + 5))
  {
    long long v124 = v37;
    uint64_t v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v10 + 5, 1, v26);
    long long v37 = v124;
    id v26 = v108;
    unint64_t v25 = v108[3];
    int64_t v29 = v25 >> 1;
  }
  id v26[2] = v40;
  id v41 = &v26[4 * v38];
  *((_OWORD *)v41 + 2) = xmmword_2466BDC50;
  v41[6] = _D9;
  if (v29 < (uint64_t)(v10 + 6))
  {
    long long v125 = v37;
    uint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v10 + 6, 1, v26);
    long long v37 = v125;
    id v26 = v109;
  }
  id v26[2] = v10 + 6;
  id v42 = &v26[4 * v40];
  *((_OWORD *)v42 + 2) = v37;
  v42[6] = 1065353216;
  swift_bridgeObjectRelease();
  float32x4_t v44 = (void *)v26[2];
  int64_t v45 = (int64_t)v44 + 6;
  if (__OFADD__(v44, 6))
  {
    __break(1u);
LABEL_94:
    float32x4_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v43 > 1), v45, 1, v44);
    unint64_t v43 = v44[3];
    int64_t v47 = v43 >> 1;
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  long long v46 = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (v46 && (unint64_t v43 = v26[3], v47 = v43 >> 1, (uint64_t)(v43 >> 1) >= v45))
  {
    float32x4_t v44 = v26;
  }
  else
  {
    if ((uint64_t)v44 <= v45) {
      int64_t v48 = (int64_t)v44 + 6;
    }
    else {
      int64_t v48 = (int64_t)v44;
    }
    float32x4_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46, v48, 1, v26);
    unint64_t v43 = v44[3];
    int64_t v47 = v43 >> 1;
  }
  unint64_t v10 = v44[2];
  int64_t v45 = v10 + 1;
  if (v47 <= v10) {
    goto LABEL_94;
  }
LABEL_41:
  id v44[2] = v45;
  long long v49 = &v44[4 * v10];
  *((_OWORD *)v49 + 2) = xmmword_2466BDC60;
  v49[6] = 0;
  unint64_t v50 = v10 + 2;
  if (v47 < (uint64_t)(v10 + 2))
  {
    float32x4_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v43 > 1), v10 + 2, 1, v44);
    unint64_t v43 = v44[3];
    int64_t v47 = v43 >> 1;
  }
  id v44[2] = v50;
  id v51 = &v44[4 * v45];
  long long v52 = xmmword_2466BDC70;
  *((_OWORD *)v51 + 2) = xmmword_2466BDC70;
  v51[6] = 0x3F80000000000000;
  unint64_t v53 = v10 + 3;
  long long v54 = xmmword_2466BDC10;
  if (v47 < (uint64_t)(v10 + 3))
  {
    uint64_t v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v43 > 1), v10 + 3, 1, v44);
    long long v52 = xmmword_2466BDC70;
    long long v54 = xmmword_2466BDC10;
    float32x4_t v44 = v110;
    unint64_t v43 = v110[3];
    int64_t v47 = v43 >> 1;
  }
  id v44[2] = v53;
  uint64_t v55 = &v44[4 * v50];
  *((_OWORD *)v55 + 2) = v54;
  v55[6] = 1065353216;
  unint64_t v56 = v10 + 4;
  if (v47 < (uint64_t)(v10 + 4))
  {
    long long v126 = v52;
    uint64_t v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v43 > 1), v10 + 4, 1, v44);
    long long v52 = v126;
    long long v54 = xmmword_2466BDC10;
    float32x4_t v44 = v111;
    unint64_t v43 = v111[3];
    int64_t v47 = v43 >> 1;
  }
  id v44[2] = v56;
  int v57 = &v44[4 * v53];
  *((_OWORD *)v57 + 2) = v52;
  v57[6] = 0x3F80000000000000;
  unint64_t v58 = v10 + 5;
  if (v47 < (uint64_t)(v10 + 5))
  {
    uint64_t v112 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v43 > 1), v10 + 5, 1, v44);
    long long v54 = xmmword_2466BDC10;
    float32x4_t v44 = v112;
    unint64_t v43 = v112[3];
    int64_t v47 = v43 >> 1;
  }
  id v44[2] = v58;
  float32x4_t v59 = &v44[4 * v56];
  *((_OWORD *)v59 + 2) = xmmword_2466BDC30;
  v59[6] = _D9;
  if (v47 < (uint64_t)(v10 + 6))
  {
    uint64_t v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v43 > 1), v10 + 6, 1, v44);
    long long v54 = xmmword_2466BDC10;
    float32x4_t v44 = v113;
  }
  id v44[2] = v10 + 6;
  long long v60 = &v44[4 * v58];
  *((_OWORD *)v60 + 2) = v54;
  v60[6] = 1065353216;
  swift_bridgeObjectRelease();
  long long v62 = (void *)v44[2];
  int64_t v63 = (int64_t)v62 + 6;
  if (__OFADD__(v62, 6))
  {
    __break(1u);
LABEL_96:
    long long v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v61 > 1), v63, 1, v62);
    unint64_t v61 = v62[3];
    int64_t v65 = v61 >> 1;
    goto LABEL_60;
  }
  swift_bridgeObjectRetain();
  char v64 = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (v64 && (unint64_t v61 = v44[3], v65 = v61 >> 1, (uint64_t)(v61 >> 1) >= v63))
  {
    long long v62 = v44;
  }
  else
  {
    if ((uint64_t)v62 <= v63) {
      int64_t v66 = (int64_t)v62 + 6;
    }
    else {
      int64_t v66 = (int64_t)v62;
    }
    long long v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v64, v66, 1, v44);
    unint64_t v61 = v62[3];
    int64_t v65 = v61 >> 1;
  }
  unint64_t v10 = v62[2];
  int64_t v63 = v10 + 1;
  if (v65 <= v10) {
    goto LABEL_96;
  }
LABEL_60:
  v62[2] = v63;
  uint64_t v67 = &v62[4 * v10];
  *((_OWORD *)v67 + 2) = xmmword_2466BDC80;
  v67[6] = 0;
  unint64_t v68 = v10 + 2;
  if (v65 < (uint64_t)(v10 + 2))
  {
    long long v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v61 > 1), v10 + 2, 1, v62);
    unint64_t v61 = v62[3];
    int64_t v65 = v61 >> 1;
  }
  v62[2] = v68;
  CGRect v69 = &v62[4 * v63];
  long long v70 = xmmword_2466BDC90;
  *((_OWORD *)v69 + 2) = xmmword_2466BDC90;
  v69[6] = 0x3F80000000000000;
  unint64_t v71 = v10 + 3;
  if (v65 < (uint64_t)(v10 + 3))
  {
    uint64_t v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v61 > 1), v10 + 3, 1, v62);
    long long v70 = xmmword_2466BDC90;
    long long v62 = v114;
    unint64_t v61 = v114[3];
    int64_t v65 = v61 >> 1;
  }
  v62[2] = v71;
  uint64_t v72 = &v62[4 * v68];
  long long v73 = xmmword_2466BDCA0;
  *((_OWORD *)v72 + 2) = xmmword_2466BDCA0;
  v72[6] = 1065353216;
  unint64_t v74 = v10 + 4;
  if (v65 < (uint64_t)(v10 + 4))
  {
    long long v127 = v70;
    uint64_t v115 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v61 > 1), v10 + 4, 1, v62);
    long long v70 = v127;
    long long v73 = xmmword_2466BDCA0;
    long long v62 = v115;
    unint64_t v61 = v115[3];
    int64_t v65 = v61 >> 1;
  }
  v62[2] = v74;
  unint64_t v75 = &v62[4 * v71];
  *((_OWORD *)v75 + 2) = v70;
  v75[6] = 0x3F80000000000000;
  unint64_t v76 = v10 + 5;
  if (v65 < (uint64_t)(v10 + 5))
  {
    long long v129 = v73;
    uint64_t v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v61 > 1), v10 + 5, 1, v62);
    long long v73 = v129;
    long long v62 = v116;
    unint64_t v61 = v116[3];
    int64_t v65 = v61 >> 1;
  }
  v62[2] = v76;
  uint64_t v77 = &v62[4 * v74];
  *((_OWORD *)v77 + 2) = xmmword_2466BDCB0;
  v77[6] = _D9;
  if (v65 < (uint64_t)(v10 + 6))
  {
    long long v130 = v73;
    uint64_t v117 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v61 > 1), v10 + 6, 1, v62);
    long long v73 = v130;
    long long v62 = v117;
  }
  v62[2] = v10 + 6;
  uint64_t v78 = &v62[4 * v76];
  *((_OWORD *)v78 + 2) = v73;
  v78[6] = 1065353216;
  swift_bridgeObjectRelease();
  uint64_t v80 = (void *)v62[2];
  int64_t v81 = (int64_t)v80 + 6;
  if (__OFADD__(v80, 6))
  {
    __break(1u);
LABEL_98:
    uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v79 > 1), v81, 1, v80);
    unint64_t v79 = v80[3];
    int64_t v83 = v79 >> 1;
    goto LABEL_79;
  }
  swift_bridgeObjectRetain();
  uint64_t v82 = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (v82 && (unint64_t v79 = v62[3], v83 = v79 >> 1, (uint64_t)(v79 >> 1) >= v81))
  {
    uint64_t v80 = v62;
  }
  else
  {
    if ((uint64_t)v80 <= v81) {
      int64_t v84 = (int64_t)v80 + 6;
    }
    else {
      int64_t v84 = (int64_t)v80;
    }
    uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v82, v84, 1, v62);
    unint64_t v79 = v80[3];
    int64_t v83 = v79 >> 1;
  }
  unint64_t v10 = v80[2];
  int64_t v81 = v10 + 1;
  if (v83 <= v10) {
    goto LABEL_98;
  }
LABEL_79:
  v80[2] = v81;
  uint64_t v85 = &v80[4 * v10];
  *((_OWORD *)v85 + 2) = xmmword_2466BDCC0;
  v85[6] = 0;
  unint64_t v86 = v10 + 2;
  if (v83 < (uint64_t)(v10 + 2))
  {
    uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v79 > 1), v10 + 2, 1, v80);
    unint64_t v79 = v80[3];
    int64_t v83 = v79 >> 1;
  }
  v80[2] = v86;
  uint64_t v87 = &v80[4 * v81];
  long long v88 = xmmword_2466BDCD0;
  *((_OWORD *)v87 + 2) = xmmword_2466BDCD0;
  v87[6] = 0x3F80000000000000;
  unint64_t v89 = v10 + 3;
  if (v83 < (uint64_t)(v10 + 3))
  {
    uint64_t v118 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v79 > 1), v10 + 3, 1, v80);
    long long v88 = xmmword_2466BDCD0;
    uint64_t v80 = v118;
    unint64_t v79 = v118[3];
    int64_t v83 = v79 >> 1;
  }
  v80[2] = v89;
  uint64_t v90 = &v80[4 * v86];
  long long v91 = xmmword_2466BDCE0;
  *((_OWORD *)v90 + 2) = xmmword_2466BDCE0;
  v90[6] = 1065353216;
  unint64_t v92 = v10 + 4;
  if (v83 < (uint64_t)(v10 + 4))
  {
    long long v128 = v88;
    uint64_t v119 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v79 > 1), v10 + 4, 1, v80);
    long long v88 = v128;
    long long v91 = xmmword_2466BDCE0;
    uint64_t v80 = v119;
    unint64_t v79 = v119[3];
    int64_t v83 = v79 >> 1;
  }
  v80[2] = v92;
  uint64_t v93 = &v80[4 * v89];
  *((_OWORD *)v93 + 2) = v88;
  v93[6] = 0x3F80000000000000;
  unint64_t v94 = v10 + 5;
  if (v83 < (uint64_t)(v10 + 5))
  {
    long long v131 = v91;
    uint64_t v120 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v79 > 1), v10 + 5, 1, v80);
    long long v91 = v131;
    uint64_t v80 = v120;
    unint64_t v79 = v120[3];
    int64_t v83 = v79 >> 1;
  }
  v80[2] = v94;
  uint64_t v95 = &v80[4 * v92];
  *((_OWORD *)v95 + 2) = xmmword_2466BDCF0;
  v95[6] = _D9;
  if (v83 < (uint64_t)(v10 + 6))
  {
    long long v132 = v91;
    uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v79 > 1), v10 + 6, 1, v80);
    long long v91 = v132;
    uint64_t v80 = v121;
  }
  v80[2] = v10 + 6;
  uint64_t v96 = (uint64_t)&v80[4 * v94 + 4];
  *(_OWORD *)uint64_t v96 = v91;
  *(void *)(v96 + 16) = 1065353216;
  swift_bridgeObjectRelease();
  unint64_t v97 = v80[2];
  if (v97 >> 58) {
    __break(1u);
  }
  id v98 = objc_msgSend(*(id *)(v0 + 16), sel_newBufferWithBytes_length_options_, v80 + 4, 32 * v97, 0);
  swift_bridgeObjectRelease();
  return v98;
}

uint64_t VoxelRenderer.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VoxelRenderer()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type VoxelRenderer.Error and conformance VoxelRenderer.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type VoxelRenderer.Error and conformance VoxelRenderer.Error;
  if (!lazy protocol witness table cache variable for type VoxelRenderer.Error and conformance VoxelRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoxelRenderer.Error and conformance VoxelRenderer.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoxelRenderer.Error and conformance VoxelRenderer.Error;
  if (!lazy protocol witness table cache variable for type VoxelRenderer.Error and conformance VoxelRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoxelRenderer.Error and conformance VoxelRenderer.Error);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for VoxelRenderer.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2466AD6D8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for VoxelRenderer.Error()
{
  return &type metadata for VoxelRenderer.Error;
}

uint64_t type metadata accessor for ViewAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in ViewAdaptor<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ViewAdaptor.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  *(void *)&long long v8 = a2;
  *((void *)&v8 + 1) = a3;
  uint64_t v9 = a4;
  uint64_t v4 = type metadata accessor for ViewAdaptor.Representation();
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v7, v4, WitnessTable);
  uint64_t v7 = v10;
  long long v8 = v11;
  uint64_t v9 = v12;
  static ViewBuilder.buildExpression<A>(_:)(&v7, v4, WitnessTable);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for UIViewRepresentable.makeUIView(context:) in conformance ViewAdaptor<A>.Representation()
{
  return specialized ViewAdaptor.Representation.makeUIView(context:)(*v0);
}

uint64_t protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance ViewAdaptor<A>.Representation(uint64_t a1)
{
  return specialized ViewAdaptor.Representation.updateUIView(_:context:)(a1, *(void *)v1, *(void *)(v1 + 8), *(uint64_t (**)(void))(v1 + 16));
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ViewAdaptor<A>.Representation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F01780](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ViewAdaptor<A>.Representation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F01718](a1, a2, a3, WitnessTable);
}

void protocol witness for View.body.getter in conformance ViewAdaptor<A>.Representation()
{
}

uint64_t protocol witness for View.body.getter in conformance ViewAdaptor<A>()
{
  return ViewAdaptor.body.getter(*v0, v0[1], v0[2], v0[3]);
}

uint64_t type metadata accessor for ViewAdaptor.Representation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for ViewAdaptor()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ViewAdaptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ViewAdaptor(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ViewAdaptor(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t sub_2466ADB58()
{
  type metadata accessor for ViewAdaptor.Representation();

  return swift_getWitnessTable();
}

uint64_t base witness table accessor for View in ViewAdaptor<A>.Representation()
{
  return swift_getWitnessTable();
}

uint64_t specialized ViewAdaptor.Representation.makeUIView(context:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t specialized ViewAdaptor.Representation.updateUIView(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

double specialized KeyframeAnimation.duration.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2) {
    return *(double *)(v1 + 48 * v2 - 16);
  }
  else {
    return INFINITY;
  }
}

void specialized KeyframeAnimation.sample(at:)(double a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v4 = *(void *)(v3 + 16);
  if (a1 < 0.0)
  {
    if (v4) {
      return;
    }
    __break(1u);
    goto LABEL_25;
  }
  if (!v4)
  {
    if (a1 > INFINITY)
    {
LABEL_32:
      __break(1u);
      return;
    }
LABEL_8:
    unint64_t v6 = *(void *)(v1 + 24);
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6 < v4)
      {
        uint64_t v7 = v3 + 32;
        if (*(double *)(v3 + 32 + 48 * v6) > a1) {
          goto LABEL_13;
        }
        if (v6 + 1 >= v4) {
          goto LABEL_30;
        }
        if (*(double *)(v7 + 48 * (v6 + 1)) < a1)
        {
LABEL_13:
          uint64_t v2 = 0;
          specialized KeyframeAnimation.findLeftIndex(t:)(a1);
          *(void *)(v1 + 24) = v6;
          if ((v6 & 0x8000000000000000) != 0) {
            goto LABEL_29;
          }
          unint64_t v4 = *(void *)(v3 + 16);
        }
        if (v6 < v4)
        {
          if (v6 + 1 < v4)
          {
            uint64_t v18 = v7 + 48 * v6;
            uint64_t v19 = v7 + 48 * (v6 + 1);
            float v20 = (a1 - *(double *)v18) / (*(double *)v19 - *(double *)v18);
            specialized static PlatterAnimVar.lerp(a:b:alpha:)(*(float32x4_t *)(v18 + 16), *(double *)(v18 + 32), *(float32x4_t *)(v19 + 16), *(double *)(v19 + 32), v20);
            return;
          }
          goto LABEL_28;
        }
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        swift_once();
        uint64_t v8 = type metadata accessor for Logger();
        __swift_project_value_buffer(v8, (uint64_t)logger);
        id v9 = v2;
        id v10 = v2;
        long long v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v11, v12))
        {
          id v13 = (uint8_t *)swift_slowAlloc();
          uint64_t v14 = swift_slowAlloc();
          uint64_t v21 = v14;
          *(_DWORD *)id v13 = 136446210;
          id v15 = v2;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
          uint64_t v16 = String.init<A>(describing:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_2465C2000, v11, v12, "Unexpected error sampling animation: %{public}s", v13, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24C5348D0](v14, -1, -1);
          MEMORY[0x24C5348D0](v13, -1, -1);
        }
        else
        {
        }
        if (*(void *)(v3 + 16))
        {

          return;
        }
        __break(1u);
        goto LABEL_32;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (*(double *)(v3 + 32 + 48 * (v4 - 1)) >= a1) {
    goto LABEL_8;
  }
}

void specialized KeyframeAnimation.findLeftIndex(t:)(double a1)
{
  if (a1 >= 0.0)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    unint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      if (*(double *)(v2 + 48 * v3 - 16) >= a1)
      {
        int64_t v4 = v3 - 2;
        if (v3 >= 2)
        {
          if (*(double *)(v2 + 80) < a1 && v3 >= 3)
          {
            int64_t v5 = 0;
            unint64_t v6 = (double *)(v2 + 128);
            do
            {
              ++v5;
              double v7 = *v6;
              v6 += 6;
            }
            while (v7 < a1 && v5 < v4);
          }
          return;
        }
LABEL_21:
        __break(1u);
        return;
      }
    }
    else if (a1 <= INFINITY)
    {
      goto LABEL_21;
    }
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  swift_retain();
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 134349312;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2050;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_2465C2000, v10, v11, "Indexing animation out of range: %{public}f not in [0,%{public}f]", (uint8_t *)v12, 0x16u);
    MEMORY[0x24C5348D0](v12, -1, -1);
  }
  else
  {

    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyframeAnimation<PlatterAnimVar>.Error);
  lazy protocol witness table accessor for type KeyframeAnimation<PlatterAnimVar>.Error and conformance KeyframeAnimation<A>.Error();
  swift_allocError();
  *id v13 = 3;
  swift_willThrow();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    id v23 = v4 + v2;
  }
  else {
    id v23 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  id v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for RealityViewCameraConvertible(0) - 8);
  BOOL v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  int64_t v14 = v3 + v13 + v12 * v9;
  id v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  uint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  float v20 = *(void *)(v3 + 16);
  uint64_t v21 = __OFADD__(v20, v8);
  unint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t makeRadialPlatterAnimation(baseColor:pulseColor:duration:)(__n128 a1, __n128 a2, double a3)
{
  int64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  int64_t v8 = v6 >> 1;
  unint64_t v9 = v7 + 1;
  if (v6 >> 1 <= v7)
  {
    int64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
    unint64_t v6 = v5[3];
    int64_t v8 = v6 >> 1;
  }
  double v10 = a3 + a3;
  v5[2] = v9;
  uint64_t v11 = (__n128 *)&v5[6 * v7];
  v11[2].n128_u64[0] = 0;
  __n128 v13 = a2;
  __n128 v12 = a1;
  v11[3] = a1;
  void v11[4] = a1;
  unint64_t v14 = v7 + 2;
  if (v8 < (uint64_t)(v7 + 2))
  {
    int64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 2, 1, v5);
    __n128 v13 = a2;
    __n128 v12 = a1;
    int64_t v5 = v27;
  }
  v5[2] = v14;
  id v15 = (__n128 *)&v5[6 * v9];
  v15[2].n128_f64[0] = v10 * 0.125;
  v15[3] = v13;
  v15[4] = v12;
  unint64_t v16 = v5[3];
  unint64_t v17 = v7 + 3;
  if ((uint64_t)(v7 + 3) > (uint64_t)(v16 >> 1))
  {
    id v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v7 + 3, 1, v5);
    __n128 v13 = a2;
    __n128 v12 = a1;
    int64_t v5 = v28;
  }
  v5[2] = v17;
  uint64_t v18 = (__n128 *)&v5[6 * v14];
  v18[2].n128_f64[0] = v10 * 0.25;
  void v18[3] = v13;
  v18[4] = v13;
  unint64_t v19 = v5[3];
  unint64_t v20 = v7 + 4;
  if ((uint64_t)(v7 + 4) > (uint64_t)(v19 >> 1))
  {
    int64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v7 + 4, 1, v5);
    __n128 v13 = a2;
    __n128 v12 = a1;
    int64_t v5 = v29;
  }
  v5[2] = v20;
  uint64_t v21 = (__n128 *)&v5[6 * v17];
  v21[2].n128_f64[0] = v10 * 0.375;
  void v21[3] = v12;
  v21[4] = v13;
  unint64_t v22 = v5[3];
  if ((uint64_t)(v7 + 5) > (uint64_t)(v22 >> 1))
  {
    int64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v7 + 5, 1, v5);
    __n128 v12 = a1;
    int64_t v5 = v30;
  }
  v5[2] = v7 + 5;
  id v23 = (__n128 *)&v5[6 * v20];
  v23[2].n128_f64[0] = v10 * 0.5;
  void v23[3] = v12;
  v23[4] = v12;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyframeAnimation<PlatterAnimVar>);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v5;
  *(void *)(v24 + 24) = 0;
  uint64_t v25 = swift_bridgeObjectRetain();
  specialized KeyframeAnimation.throwIfInvalid(_:)(v25);
  swift_bridgeObjectRelease();
  if (v3) {
    swift_release();
  }
  return v24;
}

void makeTriangleVerticesForCircle(center:radius:fromAngle:angleRange:numSamples:)(uint64_t a1, float32x2_t a2, float a3, float a4, float a5)
{
  if (a3 <= 0.0 || a1 < 3)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    return;
  }
  uint64_t v9 = a1 - 1;
  float v10 = a5 / (float)(a1 - 1);
  uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  uint64_t v12 = 0;
  uint64_t v13 = v11[2];
  do
  {
    __float2 v16 = __sincosf_stret((float)(v10 * (float)v12) + a4);
    v15.f32[0] = v16.__cosval;
    float sinval = v16.__sinval;
    unint64_t v17 = v11[3];
    if (v13 + v12 >= v17 >> 1)
    {
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v13 + v12 + 1, 1, v11);
      float sinval = v16.__sinval;
      v15.i32[0] = LODWORD(v16.__cosval);
      uint64_t v11 = v19;
    }
    uint64_t v18 = v12 + 1;
    v15.f32[1] = sinval;
    v11[2] = v13 + v12 + 1;
    v11[v13 + 4 + v12] = vadd_f32(vmul_n_f32(v15, a3), a2);
    uint64_t v12 = v18;
  }
  while (a1 != v18);
  uint64_t v20 = v13 + v18;
  if (v20 == 1 || a1 - 2 > v20 - 1 || v20 < a1) {
    goto LABEL_22;
  }
  uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  uint64_t v22 = 0;
  do
  {
    unint64_t v24 = v21[2];
    unint64_t v23 = v21[3];
    int64_t v25 = v23 >> 1;
    unint64_t v26 = v24 + 1;
    if (v23 >> 1 <= v24)
    {
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v21);
      unint64_t v23 = v21[3];
      int64_t v25 = v23 >> 1;
    }
    v21[2] = v26;
    *(double *)&v21[v24 + 4] = *(double *)&a2;
    int64_t v27 = &v11[v22];
    uint64_t v28 = v27[4];
    unint64_t v29 = v24 + 2;
    if (v25 < (uint64_t)(v24 + 2)) {
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 2, 1, v21);
    }
    v21[2] = v29;
    v21[v26 + 4] = v28;
    uint64_t v30 = v27[5];
    unint64_t v31 = v21[3];
    if ((uint64_t)(v24 + 3) > (uint64_t)(v31 >> 1)) {
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v24 + 3, 1, v21);
    }
    ++v22;
    v21[2] = v24 + 3;
    v21[v29 + 4] = v30;
  }
  while (v9 != v22);
  swift_bridgeObjectRelease();
}

void PlatterRenderer.render(state:into:viewportSize:desc:depthStencilState:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  long long v51 = *(_OWORD *)(a1 + 80);
  long long v52 = *(_OWORD *)(a1 + 64);
  long long v49 = *(_OWORD *)(a1 + 112);
  long long v50 = *(_OWORD *)(a1 + 96);
  simd_float4 v43 = *(simd_float4 *)(a1 + 144);
  simd_float4 v45 = *(simd_float4 *)(a1 + 128);
  simd_float4 v39 = *(simd_float4 *)(a1 + 176);
  simd_float4 v41 = *(simd_float4 *)(a1 + 160);
  simd_float4 v55 = *(simd_float4 *)(a1 + 208);
  simd_float4 v56 = *(simd_float4 *)(a1 + 192);
  simd_float4 v54 = *(simd_float4 *)(a1 + 224);
  simd_float4 v53 = *(simd_float4 *)(a1 + 240);
  float v11 = specialized static PlatterRenderer.computeScreenConstraintScale(from:)(a1);
  Transform.init(matrix:)();
  float32x2_t v37 = v12;
  float v13 = specialized static PlatterRenderer.makeDepthHazeData(from:)((float32x4_t *)a1);
  int v15 = v14;
  int v17 = v16;
  int v19 = v18;
  float v20 = specialized static PlatterRenderer.makeShotAnimationState(from:)(a1);
  long long v47 = v22;
  long long v48 = v21;
  unint64_t v23 = (void *)v6[5];
  if (!v23)
  {
    __break(1u);
    goto LABEL_8;
  }
  float v24 = v20;
  int v25 = *(_DWORD *)(a1 + 272);
  float v26 = vmuls_lane_f32(-0.5, v37, 1);
  v59.columns[1] = v55;
  v59.columns[0] = v56;
  v59.columns[2] = v54;
  v59.columns[3] = v53;
  simd_float4x4 v60 = __invert_f4(v59);
  simd_float4 v36 = v60.columns[1];
  simd_float4 v38 = v60.columns[0];
  simd_float4 v34 = v60.columns[3];
  simd_float4 v35 = v60.columns[2];
  v60.columns[1] = v43;
  v60.columns[0] = v45;
  v60.columns[3] = v39;
  v60.columns[2] = v41;
  simd_float4x4 v61 = __invert_f4(v60);
  simd_float4 v44 = v61.columns[1];
  simd_float4 v46 = v61.columns[0];
  simd_float4 v40 = v61.columns[3];
  simd_float4 v42 = v61.columns[2];
  int64_t v27 = (float *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v28 = v23;
  *(_OWORD *)int64_t v27 = v52;
  *((_OWORD *)v27 + 1) = v51;
  *((_OWORD *)v27 + 2) = v50;
  *((_OWORD *)v27 + 3) = v49;
  *((simd_float4 *)v27 + 4) = v46;
  *((simd_float4 *)v27 + 5) = v44;
  *((simd_float4 *)v27 + 6) = v42;
  *((simd_float4 *)v27 + 7) = v40;
  *((simd_float4 *)v27 + 8) = v56;
  *((simd_float4 *)v27 + 9) = v55;
  *((simd_float4 *)v27 + 10) = v54;
  *((simd_float4 *)v27 + 11) = v53;
  *((simd_float4 *)v27 + 12) = v38;
  *((simd_float4 *)v27 + 13) = v36;
  *((simd_float4 *)v27 + 14) = v35;
  *((simd_float4 *)v27 + 15) = v34;
  v27[64] = v11;
  v27[65] = v26;
  v27[66] = v13;
  *((_DWORD *)v27 + 67) = v15;
  *((_DWORD *)v27 + 68) = v17;
  *((_DWORD *)v27 + 69) = v19;
  v27[72] = v24;
  *((_OWORD *)v27 + 19) = v48;
  *((_OWORD *)v27 + 20) = v47;
  *((_DWORD *)v27 + 84) = v25;
  id v29 = objc_msgSend(a2, sel_renderCommandEncoderWithDescriptor_, a3);
  if (!v29)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v30 = v29;
  v57[0] = 0;
  v57[1] = 0;
  *(double *)&v57[2] = a5;
  *(double *)&v57[3] = a6;
  long long v58 = xmmword_2466B7BA0;
  objc_msgSend(v29, sel_setViewport_, v57);
  uint64_t v31 = a4;
  if (!a4)
  {
    uint64_t v31 = v6[6];
    swift_unknownObjectRetain();
  }
  swift_unknownObjectRetain();
  objc_msgSend(v30, sel_setDepthStencilState_, v31);
  if (v6[4])
  {
    objc_msgSend(v30, sel_setRenderPipelineState_);
    objc_msgSend(v30, sel_setVertexBuffer_offset_atIndex_, v6[5], 0, 0);
    objc_msgSend(v30, sel_setVertexBuffer_offset_atIndex_, v6[8], 0, 1);
    objc_msgSend(v30, sel_setFragmentBuffer_offset_atIndex_, v6[5], 0, 0);
    objc_msgSend(v30, sel_drawPrimitives_vertexStart_vertexCount_, 3, 0, v6[7]);
    objc_msgSend(v30, sel_endEncoding);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return;
  }
LABEL_9:
  __break(1u);
}

void one-time initialization function for depthHazeFloor()
{
  static PlatterRenderer.depthHazeFloor = specialized static ExperimentSettings.loadCaptureCircleDepthHazeFloor(default:)(0.2);
}

void one-time initialization function for depthHazeDistancePower()
{
  static PlatterRenderer.depthHazeDistancePower = specialized static ExperimentSettings.loadCaptureCircleDepthHazeDistancePower(default:)(2.0);
}

uint64_t one-time initialization function for platterBaseColor()
{
  uint64_t result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for platterBaseColor);
  static PlatterRenderer.platterBaseColor = v1;
  return result;
}

void *one-time initialization function for platterRadialAnimation()
{
  if (one-time initialization token for platterBaseColor != -1) {
    swift_once();
  }
  __n128 v2 = (__n128)static PlatterRenderer.platterBaseColor;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for platterRadialAnimation);
  uint64_t result = (void *)makeRadialPlatterAnimation(baseColor:pulseColor:duration:)(v2, v0, 0.5);
  static PlatterRenderer.platterRadialAnimation = result;
  return result;
}

void PlatterRenderer.initPlatterRenderPipeline()()
{
  v32[1] = *(id *)MEMORY[0x263EF8340];
  long long v1 = (void *)v0[2];
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  v32[0] = 0;
  id v2 = objc_msgSend(v1, sel_newDefaultLibraryWithBundle_error_, static BaseRenderer.bundle, v32);
  if (!v2)
  {
    id v28 = v32[0];
    id v29 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type PlatterRenderer.Error and conformance PlatterRenderer.Error();
    swift_allocError();
    swift_willThrow();
    return;
  }
  uint64_t v3 = v2;
  id v4 = v32[0];
  int64_t v5 = (void *)MEMORY[0x24C533410](0xD000000000000022, 0x80000002466C4140);
  id v6 = objc_msgSend(v3, sel_newFunctionWithName_, v5);

  unint64_t v7 = (void *)MEMORY[0x24C533410](0xD000000000000020, 0x80000002466C4170);
  id v8 = objc_msgSend(v3, sel_newFunctionWithName_, v7);

  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F129C0]), sel_init);
  objc_msgSend(v9, sel_setVertexFunction_, v6);
  objc_msgSend(v9, sel_setFragmentFunction_, v8);
  objc_msgSend(v9, sel_setDepthAttachmentPixelFormat_, 252);
  id v10 = objc_msgSend(v9, sel_colorAttachments);
  id v11 = objc_msgSend(v10, sel_objectAtIndexedSubscript_, 0);

  if (!v11)
  {
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v11, sel_setPixelFormat_, v0[3]);

  id v12 = objc_msgSend(v9, sel_colorAttachments);
  id v13 = objc_msgSend(v12, sel_objectAtIndexedSubscript_, 0);

  if (!v13)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  objc_msgSend(v13, sel_setBlendingEnabled_, 1);

  id v14 = objc_msgSend(v9, sel_colorAttachments);
  id v15 = objc_msgSend(v14, sel_objectAtIndexedSubscript_, 0);

  if (!v15)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v15, sel_setRgbBlendOperation_, 0);

  id v16 = objc_msgSend(v9, sel_colorAttachments);
  id v17 = objc_msgSend(v16, sel_objectAtIndexedSubscript_, 0);

  if (!v17)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(v17, sel_setAlphaBlendOperation_, 0);

  id v18 = objc_msgSend(v9, sel_colorAttachments);
  id v19 = objc_msgSend(v18, sel_objectAtIndexedSubscript_, 0);

  if (!v19)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  objc_msgSend(v19, sel_setSourceRGBBlendFactor_, 4);

  id v20 = objc_msgSend(v9, sel_colorAttachments);
  id v21 = objc_msgSend(v20, sel_objectAtIndexedSubscript_, 0);

  if (!v21)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  objc_msgSend(v21, sel_setSourceAlphaBlendFactor_, 4);

  id v22 = objc_msgSend(v9, sel_colorAttachments);
  id v23 = objc_msgSend(v22, sel_objectAtIndexedSubscript_, 0);

  if (!v23)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  objc_msgSend(v23, sel_setDestinationRGBBlendFactor_, 5);

  id v24 = objc_msgSend(v9, sel_colorAttachments);
  id v25 = objc_msgSend(v24, sel_objectAtIndexedSubscript_, 0);

  if (!v25)
  {
LABEL_23:
    __break(1u);
    return;
  }
  objc_msgSend(v25, sel_setDestinationAlphaBlendFactor_, 5);

  v32[0] = 0;
  id v26 = objc_msgSend(v1, sel_newRenderPipelineStateWithDescriptor_error_, v9, v32);
  id v27 = v32[0];
  if (v26)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    v0[4] = v26;
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v30 = v27;
    uint64_t v31 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type PlatterRenderer.Error and conformance PlatterRenderer.Error();
    swift_allocError();
    swift_willThrow();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
}

void PlatterRenderer.makePlatterVertices()()
{
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of PlatterRenderer.makePlatterVertices());
  makeTriangleVerticesForCircle(center:radius:fromAngle:angleRange:numSamples:)(100, v1, 1.0, 0.0, 6.2832);
  unint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v0 + 56) = v3;
  if (v3 >> 58)
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v4 = v2;
  *(void *)(v0 + 64) = objc_msgSend(*(id *)(v0 + 16), sel_newBufferWithLength_options_, 32 * v3, 0);
  swift_unknownObjectRelease();
  int64_t v5 = *(void **)(v0 + 64);
  if (!v5)
  {
LABEL_14:
    __break(1u);
    return;
  }
  id v6 = (int32x4_t *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v7 = v5;
  uint64_t v9 = *(void *)(v0 + 56);
  if (v9 < 0) {
    goto LABEL_12;
  }
  if (!v9) {
    goto LABEL_8;
  }
  if ((unint64_t)(v9 - 1) >= *(void *)(v4 + 16)) {
    goto LABEL_13;
  }
  id v10 = (uint64_t *)(v4 + 32);
  id v11 = v6 + 1;
  do
  {
    uint64_t v12 = *v10++;
    v8.i64[0] = v12;
    v11[-1] = vtrn2q_s32(vzip1q_s32((int32x4_t)0, v8), (int32x4_t)0);
    v11->i64[0] = v12;
    v11 += 2;
    --v9;
  }
  while (v9);
LABEL_8:

  swift_bridgeObjectRelease();
}

uint64_t PlatterRenderer.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PlatterRenderer()
{
  return self;
}

void CaptureCircleRenderer.update(captureCircle:bboxWorld:objectToWorld:viewToWorld:viewToClip:captureCircleViewportFraction:time:opacity:)(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,int a25,uint64_t a26,float a27)
{
  v27[8] = a1;
  swift_retain();
  swift_release();
  if (a1) {
    unint64_t v29 = *(void *)(a1 + 64);
  }
  else {
    unint64_t v29 = 0xFFF0000000000000;
  }
  float v30 = 0.0;
  if (a27 > 0.0) {
    float v30 = a27;
  }
  v43[0] = a2;
  v43[1] = a3;
  if (v30 > 1.0) {
    float v30 = 1.0;
  }
  id v43[2] = a4;
  v43[3] = a5;
  v43[4] = a6;
  v43[5] = a7;
  v43[6] = a8;
  v43[7] = a9;
  v43[8] = a17;
  v43[9] = a18;
  v43[10] = a19;
  v43[11] = a20;
  v43[12] = a21;
  v43[13] = a22;
  v43[14] = a23;
  v43[15] = a24;
  int v44 = a25;
  unint64_t v45 = v29;
  float v46 = v30;
  uint64_t v47 = a26;
  _s19_RealityKit_SwiftUI23CommonCircleRenderStateVSgWOi_((uint64_t)v43);
  outlined init with take of CommonCircleRenderState?((uint64_t)v43, (uint64_t)(v27 + 10));
  if (!v27[53])
  {
    uint64_t v31 = (void *)CaptureCircleRenderer.makeSingleBinVerticesCapsule(width:)(0.5);
    CaptureCircleRenderer.makeClonedBinVertices(binVerts:modelScale:)(v31, 1.0);
    swift_bridgeObjectRelease();
  }
  uint64_t v32 = (void *)v27[50];
  if (v32)
  {
    id v33 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v34 = v32;
    CaptureCircleRenderer.makeUniforms()((uint64_t)__src);
    memcpy(v33, __src, 0x1B0uLL);
    CaptureCircleRenderer.updateCaptureBins()();
  }
  else
  {
    __break(1u);
  }
}

void CaptureCircleRenderer.initRenderPipelines()()
{
  uint64_t v2 = v0;
  CaptureCircleRenderer.initCaptureBinRenderPipeline()();
  if (!v1)
  {
    unint64_t v3 = (void *)v0[4];
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128A0]), sel_init);
    objc_msgSend(v4, sel_setDepthCompareFunction_, 7);
    objc_msgSend(v4, sel_setDepthWriteEnabled_, 0);
    id v5 = objc_msgSend(v3, sel_newDepthStencilStateWithDescriptor_, v4);

    if (v5)
    {
      v2[7] = v5;
      swift_unknownObjectRelease();
      uint64_t v6 = v2[5];
      type metadata accessor for PlatterRenderer();
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(void *)(v7 + 64) = 0;
      *(void *)(v7 + 16) = v3;
      *(void *)(v7 + 24) = v6;
      swift_unknownObjectRetain_n();
      PlatterRenderer.initPlatterRenderPipeline()();
      id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128A0]), sel_init);
      objc_msgSend(v8, sel_setDepthCompareFunction_, 7);
      objc_msgSend(v8, sel_setDepthWriteEnabled_, 0);
      id v9 = objc_msgSend(v3, sel_newDepthStencilStateWithDescriptor_, v8);

      if (v9)
      {
        *(void *)(v7 + 48) = v9;
        swift_unknownObjectRelease();
        PlatterRenderer.makePlatterVertices()();
        id v10 = objc_msgSend(v3, sel_newBufferWithLength_options_, 352, 0);
        swift_unknownObjectRelease();
        *(void *)(v7 + 40) = v10;
        swift_unknownObjectRelease();
        v2[47] = v7;
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void CaptureCircleRenderer.initCaptureBinRenderPipeline()()
{
  v32[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = (void *)v0[4];
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  v32[0] = 0;
  id v2 = objc_msgSend(v1, sel_newDefaultLibraryWithBundle_error_, static CaptureCircleRenderer.bundle, v32);
  if (!v2)
  {
    id v28 = v32[0];
    unint64_t v29 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error();
    swift_allocError();
    swift_willThrow();
    return;
  }
  unint64_t v3 = v2;
  id v4 = v32[0];
  id v5 = (void *)MEMORY[0x24C533410](0xD000000000000032, 0x80000002466C40D0);
  id v6 = objc_msgSend(v3, sel_newFunctionWithName_, v5);

  uint64_t v7 = (void *)MEMORY[0x24C533410](0xD000000000000026, 0x80000002466C4110);
  id v8 = objc_msgSend(v3, sel_newFunctionWithName_, v7);

  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F129C0]), sel_init);
  objc_msgSend(v9, sel_setVertexFunction_, v6);
  objc_msgSend(v9, sel_setFragmentFunction_, v8);
  objc_msgSend(v9, sel_setDepthAttachmentPixelFormat_, 252);
  id v10 = objc_msgSend(v9, sel_colorAttachments);
  id v11 = objc_msgSend(v10, sel_objectAtIndexedSubscript_, 0);

  if (!v11)
  {
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v11, sel_setPixelFormat_, v0[5]);

  id v12 = objc_msgSend(v9, sel_colorAttachments);
  id v13 = objc_msgSend(v12, sel_objectAtIndexedSubscript_, 0);

  if (!v13)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  objc_msgSend(v13, sel_setBlendingEnabled_, 1);

  id v14 = objc_msgSend(v9, sel_colorAttachments);
  id v15 = objc_msgSend(v14, sel_objectAtIndexedSubscript_, 0);

  if (!v15)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v15, sel_setRgbBlendOperation_, 0);

  id v16 = objc_msgSend(v9, sel_colorAttachments);
  id v17 = objc_msgSend(v16, sel_objectAtIndexedSubscript_, 0);

  if (!v17)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(v17, sel_setAlphaBlendOperation_, 0);

  id v18 = objc_msgSend(v9, sel_colorAttachments);
  id v19 = objc_msgSend(v18, sel_objectAtIndexedSubscript_, 0);

  if (!v19)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  objc_msgSend(v19, sel_setSourceRGBBlendFactor_, 4);

  id v20 = objc_msgSend(v9, sel_colorAttachments);
  id v21 = objc_msgSend(v20, sel_objectAtIndexedSubscript_, 0);

  if (!v21)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  objc_msgSend(v21, sel_setSourceAlphaBlendFactor_, 4);

  id v22 = objc_msgSend(v9, sel_colorAttachments);
  id v23 = objc_msgSend(v22, sel_objectAtIndexedSubscript_, 0);

  if (!v23)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  objc_msgSend(v23, sel_setDestinationRGBBlendFactor_, 5);

  id v24 = objc_msgSend(v9, sel_colorAttachments);
  id v25 = objc_msgSend(v24, sel_objectAtIndexedSubscript_, 0);

  if (!v25)
  {
LABEL_23:
    __break(1u);
    return;
  }
  objc_msgSend(v25, sel_setDestinationAlphaBlendFactor_, 5);

  v32[0] = 0;
  id v26 = objc_msgSend(v1, sel_newRenderPipelineStateWithDescriptor_error_, v9, v32);
  id v27 = v32[0];
  if (v26)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    v0[6] = v26;
    swift_unknownObjectRelease();
  }
  else
  {
    float v30 = v27;
    uint64_t v31 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error();
    swift_allocError();
    swift_willThrow();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
}

void CaptureCircleRenderer.makeUniforms()(uint64_t a1@<X8>)
{
  outlined init with take of CommonCircleRenderState?(v1 + 80, (uint64_t)v67);
  outlined init with take of CommonCircleRenderState?((uint64_t)v67, (uint64_t)__src);
  if (_s19_RealityKit_SwiftUI23CommonCircleRenderStateVSgWOg((uint64_t)__src) == 1)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  memcpy(__dst, __src, sizeof(__dst));
  long long v57 = __src[5];
  long long v58 = __src[4];
  long long v55 = __src[7];
  long long v56 = __src[6];
  simd_float4 v53 = (simd_float4)__src[9];
  simd_float4 v54 = (simd_float4)__src[8];
  simd_float4 v51 = (simd_float4)__src[11];
  simd_float4 v52 = (simd_float4)__src[10];
  simd_float4 v61 = (simd_float4)__src[13];
  simd_float4 v62 = (simd_float4)__src[12];
  simd_float4 v59 = (simd_float4)__src[15];
  simd_float4 v60 = (simd_float4)__src[14];
  float v3 = specialized static PlatterRenderer.computeScreenConstraintScale(from:)((uint64_t)__dst);
  Transform.init(matrix:)();
  float32x2_t v46 = v4;
  float v5 = specialized static PlatterRenderer.makeDepthHazeData(from:)(__dst);
  int v7 = v6;
  int v9 = v8;
  int v11 = v10;
  float v12 = specialized static PlatterRenderer.makeShotAnimationState(from:)((uint64_t)__dst);
  int v13 = __src[17];
  uint64_t v14 = *(void *)(v1 + 64);
  long long v49 = v16;
  long long v50 = v15;
  if (v14)
  {
    unint64_t v17 = *(void *)(v14 + 32);
    if ((v17 & 0x8000000000000000) != 0 || HIDWORD(v17)) {
      goto LABEL_27;
    }
    float v48 = *(float *)(v14 + 40);
  }
  else
  {
    float v48 = 0.5;
    LODWORD(v17) = 24;
  }
  outlined init with take of CommonCircleRenderState?(v1 + 80, (uint64_t)v63);
  outlined init with take of CommonCircleRenderState?((uint64_t)v63, (uint64_t)v64);
  if (_s19_RealityKit_SwiftUI23CommonCircleRenderStateVSgWOg((uint64_t)v64) == 1) {
    goto LABEL_26;
  }
  double v18 = v65;
  float v45 = v5;
  if (!v14)
  {
    LODWORD(v19) = 0;
    float v20 = 0.0;
    goto LABEL_13;
  }
  unint64_t v19 = *(void *)(v14 + 48);
  if ((v19 & 0x8000000000000000) != 0 || HIDWORD(v19))
  {
LABEL_27:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  float v20 = *(double *)(v14 + 56);
LABEL_13:
  float v39 = v20;
  float v40 = v3;
  int v41 = v13;
  int v42 = v11;
  int v43 = v9;
  int v44 = v7;
  if (one-time initialization token for nearestNeighborThreshRads != -1) {
    swift_once();
  }
  float v21 = v18;
  int v22 = static CaptureCircle.nearestNeighborThreshRads;
  int v23 = *(_DWORD *)(v1 + 456);
  long long v38 = *(_OWORD *)(v1 + 432);
  uint64_t v24 = *(void *)(v1 + 448);
  LOBYTE(v25) = *(unsigned char *)(v1 + 460);
  float v26 = *(float *)(v1 + 464);
  float v27 = *(float *)(v1 + 468);
  float v28 = *(float *)(v1 + 472);
  uint64_t v29 = *(void *)(v1 + 64);
  if (v29)
  {
    float v30 = v12;
    if ((*(unsigned char *)(v29 + 248) & 1) == 0)
    {
      int v25 = *(_DWORD *)(v29 + 232);
      float v26 = *(float *)(v29 + 236);
      float v27 = *(float *)(v29 + 240);
      float v31 = (float)(v21 - v26) / v27;
      float v32 = 1.0 - v31;
      if (v31 > 1.0) {
        float v32 = 0.0;
      }
      if (v31 > 0.0) {
        float v33 = v32;
      }
      else {
        float v33 = 1.0;
      }
      float v28 = 1.0 - (float)(v33 * (float)(v33 * v33));
    }
  }
  else
  {
    float v30 = v12;
  }
  float v34 = vmuls_lane_f32(-0.5, v46, 1);
  v69.columns[1] = v61;
  v69.columns[0] = v62;
  v69.columns[3] = v59;
  v69.columns[2] = v60;
  simd_float4x4 v70 = __invert_f4(v69);
  simd_float4 v47 = v70.columns[0];
  simd_float4 v36 = v70.columns[2];
  simd_float4 v37 = v70.columns[1];
  simd_float4 v35 = v70.columns[3];
  v70.columns[1] = v53;
  v70.columns[0] = v54;
  v70.columns[3] = v51;
  v70.columns[2] = v52;
  simd_float4x4 v71 = __invert_f4(v70);
  *(_OWORD *)a1 = v58;
  *(_OWORD *)(a1 + 16) = v57;
  *(_OWORD *)(a1 + 32) = v56;
  *(_OWORD *)(a1 + 48) = v55;
  *(simd_float4x4 *)(a1 + 64) = v71;
  *(simd_float4 *)(a1 + 128) = v62;
  *(simd_float4 *)(a1 + 144) = v61;
  *(simd_float4 *)(a1 + 160) = v60;
  *(simd_float4 *)(a1 + 176) = v59;
  *(simd_float4 *)(a1 + 192) = v47;
  *(simd_float4 *)(a1 + 208) = v37;
  *(simd_float4 *)(a1 + 224) = v36;
  *(simd_float4 *)(a1 + 240) = v35;
  *(float *)(a1 + 256) = v40;
  *(float *)(a1 + 260) = v34;
  *(float *)(a1 + 264) = v45;
  *(_DWORD *)(a1 + 268) = v44;
  *(_DWORD *)(a1 + 272) = v43;
  *(_DWORD *)(a1 + 276) = v42;
  *(float *)(a1 + 288) = v30;
  *(_OWORD *)(a1 + 304) = v50;
  *(_OWORD *)(a1 + 320) = v49;
  *(_DWORD *)(a1 + 336) = v41;
  *(_DWORD *)(a1 + 352) = 0x40000000;
  *(float *)(a1 + 356) = v48;
  *(float *)(a1 + 360) = v21;
  *(_DWORD *)(a1 + 364) = v17;
  *(_DWORD *)(a1 + 368) = v19;
  *(float *)(a1 + 372) = v39;
  *(_DWORD *)(a1 + 376) = v22;
  *(_DWORD *)(a1 + 380) = v23;
  *(_OWORD *)(a1 + 384) = v38;
  *(void *)(a1 + 400) = v24;
  *(unsigned char *)(a1 + 408) = v25;
  *(float *)(a1 + 412) = v26;
  *(float *)(a1 + 416) = v27;
  *(float *)(a1 + 420) = v28;
}

id CaptureCircleRenderer.renderCaptureBinTriangles(into:viewportSize:desc:)(id result, uint64_t a2, double a3, double a4)
{
  if (v4[8])
  {
    uint64_t result = objc_msgSend(result, sel_renderCommandEncoderWithDescriptor_, a2);
    if (result)
    {
      int v7 = result;
      v8[0] = 0;
      v8[1] = 0;
      *(double *)&v8[2] = a3;
      *(double *)&v8[3] = a4;
      long long v9 = xmmword_2466B7BA0;
      objc_msgSend(result, sel_setViewport_, v8);
      uint64_t result = objc_msgSend(v7, sel_setDepthStencilState_, v4[7]);
      if (v4[6])
      {
        objc_msgSend(v7, sel_setRenderPipelineState_);
        objc_msgSend(v7, sel_setVertexBuffer_offset_atIndex_, v4[51], 0, 0);
        objc_msgSend(v7, sel_setVertexBuffer_offset_atIndex_, v4[50], 0, 1);
        objc_msgSend(v7, sel_setVertexBuffer_offset_atIndex_, v4[53], 0, 2);
        objc_msgSend(v7, sel_setFragmentBuffer_offset_atIndex_, v4[51], 0, 0);
        objc_msgSend(v7, sel_setFragmentBuffer_offset_atIndex_, v4[50], 0, 1);
        objc_msgSend(v7, sel_drawPrimitives_vertexStart_vertexCount_, 3, 0, v4[52]);
        objc_msgSend(v7, sel_endEncoding);
        return (id)swift_unknownObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void CaptureCircleRenderer.updateCaptureBins()()
{
  uint64_t v1 = v0[8];
  if (!v1)
  {
    if (one-time initialization token for logger == -1)
    {
LABEL_5:
      uint64_t v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)logger);
      oslog = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(oslog, v4))
      {
        float v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)float v5 = 0;
        _os_log_impl(&dword_2465C2000, oslog, v4, "No capturecircle!", v5, 2u);
        MEMORY[0x24C5348D0](v5, -1, -1);
      }

      return;
    }
LABEL_46:
    swift_once();
    goto LABEL_5;
  }
  id v2 = (void *)v0[51];
  if (!v2)
  {
    uint64_t v6 = *(void *)(v1 + 32);
    if ((unint64_t)(v6 - 0x400000000000000) >> 59 == 31)
    {
      uint64_t v7 = 32 * v6;
      int v8 = (void *)v0[4];
      swift_retain();
      v0[51] = objc_msgSend(v8, sel_newBufferWithLength_options_, v7, 0);
      swift_unknownObjectRelease();
      id v2 = (void *)v0[51];
      if (v2) {
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_49:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  swift_retain();
LABEL_12:
  long long v9 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v10 = v2;
  uint64_t v11 = *(void *)(v1 + 32);
  if (v11 < 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v11)
  {
    float v12 = (uint64_t *)(v1 + 72);
    swift_beginAccess();
    uint64_t v13 = 0;
    uint64_t v14 = v11 - 1;
    long long v15 = v9 + 12;
    while (1)
    {
      *((_DWORD *)v15 - 3) = v13;
      if (v13 >= v11) {
        break;
      }
      uint64_t v16 = *v12;
      if ((*v12 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v17 = MEMORY[0x24C533AF0](v13, v16);
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((unint64_t)v13 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_41;
        }
        uint64_t v17 = *(void *)(v16 + 8 * v13 + 32);
        swift_retain();
      }
      double v18 = *(double *)(v17 + 40);
      swift_release();
      float v19 = v18;
      *((float *)v15 - 1) = v19;
      if (v13 >= *(void *)(v1 + 32)) {
        goto LABEL_40;
      }
      uint64_t v20 = *v12;
      if ((*v12 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v21 = MEMORY[0x24C533AF0](v13, v20);
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((unint64_t)v13 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_43;
        }
        uint64_t v21 = *(void *)(v20 + 8 * v13 + 32);
        swift_retain();
      }
      int v22 = *(unsigned __int8 *)(v21 + 36);
      swift_release();
      *((_DWORD *)v15 - 2) = v22;
      if (v13 >= *(void *)(v1 + 32)) {
        goto LABEL_42;
      }
      uint64_t v23 = *v12;
      if ((*v12 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v24 = MEMORY[0x24C533AF0](v13, v23);
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((unint64_t)v13 >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_44;
        }
        uint64_t v24 = *(void *)(v23 + 8 * v13 + 32);
        swift_retain();
      }
      float v25 = *(float *)(v24 + 92);
      float v26 = *(float *)(v24 + 32);
      swift_release();
      float v27 = 1.0 - (float)(v25 / v26);
      if (v26 < v25) {
        float v27 = 0.0;
      }
      *(float *)long long v15 = v27;
      uint64_t v11 = *(void *)(v1 + 32);
      __float2 v28 = __sincosf_stret((float)((float)(6.2832 / (float)v11) * (float)v13) + (float)((float)(6.2832 / (float)v11)
                                                                                       * 0.5));
      *(float *)&uint64_t v29 = -v28.__sinval;
      HIDWORD(v29) = LODWORD(v28.__cosval);
      *(void *)(v15 + 4) = __PAIR64__(LODWORD(v28.__sinval), LODWORD(v28.__cosval));
      *(void *)(v15 + 12) = v29;
      if (v14 == v13) {
        goto LABEL_38;
      }
      ++v13;
      v15 += 32;
      if (v13 == 0x100000000) {
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }

LABEL_38:
  swift_release();
}

void *CaptureCircleRenderer.makeClonedBinVertices(binVerts:modelScale:)(void *result, float a2)
{
  uint64_t v3 = *(void *)(v2 + 64);
  if (!v3) {
    return result;
  }
  os_log_type_t v4 = result;
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v6 = result[2];
  uint64_t v7 = v6 * v5;
  if ((unsigned __int128)(v6 * (__int128)v5) >> 64 != (v6 * v5) >> 63) {
    goto LABEL_21;
  }
  *(void *)(v2 + 416) = v7;
  if ((unint64_t)(v7 - 0x400000000000000) >> 59 != 31)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  *(void *)(v2 + 424) = objc_msgSend(*(id *)(v2 + 32), sel_newBufferWithLength_options_, 32 * v7, 0);
  swift_unknownObjectRelease();
  int v8 = *(void **)(v2 + 424);
  if (!v8) {
    goto LABEL_24;
  }
  long long v9 = (int32x4_t *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  uint64_t result = v8;
  if ((v5 & 0x8000000000000000) == 0)
  {
    if (!v5) {
      return result;
    }
    unint64_t v11 = 0;
    float v12 = v9 + 1;
    while (v11 != v5)
    {
      if ((unsigned __int128)((uint64_t)v11 * (__int128)v6) >> 64 != (uint64_t)(v11 * v6) >> 63) {
        goto LABEL_20;
      }
      if (v6)
      {
        unint64_t v13 = HIDWORD(v11);
        if (HIDWORD(v11)) {
          goto LABEL_25;
        }
        for (uint64_t i = v12; ; i += 2)
        {
          v10.i64[0] = v4[v13 + 4];
          i->i32[0] = v11;
          *(float32x2_t *)v10.i8 = vmul_n_f32(*(float32x2_t *)v10.i8, a2);
          int32x4_t v10 = vtrn2q_s32(vrev64q_s32(vzip1q_s32(v10, (int32x4_t)0)), (int32x4_t)0);
          i[-1] = v10;
          if (v6 - 1 == v13) {
            break;
          }
          if (__OFADD__(v11 * v6, ++v13))
          {
            __break(1u);
            return result;
          }
        }
      }
      ++v11;
      v12 += 2 * v6;
      if (v11 == v5) {
        return result;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CaptureCircleRenderer.makeSingleBinVerticesCapsule(width:)(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = specialized CaptureCircleRenderer.makeSingleBinVerticesQuad(width:)(a1);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CaptureCircleRenderer.makeSingleBinVerticesCapsule(width:));
  makeTriangleVerticesForCircle(center:radius:fromAngle:angleRange:numSamples:)(20, v5, a1, 1.5708, -3.1416);
  uint64_t v7 = v6;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of CaptureCircleRenderer.makeSingleBinVerticesCapsule(width:));
  makeTriangleVerticesForCircle(center:radius:fromAngle:angleRange:numSamples:)(20, v8, a1, 1.5708, 3.1416);
  v2[110] = 0;
  unint64_t v10 = *(void *)(v7 + 16);
  if (HIDWORD(v10)) {
    goto LABEL_18;
  }
  BOOL v11 = v10 != 0;
  int v12 = v10 - 1;
  if (!v11)
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2[111] = v12;
  int v13 = v12 + 1;
  v2[112] = v13;
  unint64_t v14 = *(void *)(v9 + 16);
  if (!HIDWORD(v14))
  {
    BOOL v11 = __CFADD__(v13, v14);
    int v15 = v13 + v14;
    if (v11) {
      goto LABEL_14;
    }
    BOOL v11 = v15 != 0;
    int v16 = v15 - 1;
    if (!v11) {
      goto LABEL_15;
    }
    v2[113] = v16;
    int v17 = v16 + 1;
    v2[108] = v17;
    unint64_t v18 = *(void *)(v4 + 16);
    if (!HIDWORD(v18))
    {
      BOOL v11 = __CFADD__(v17, v18);
      int v19 = v17 + v18;
      if (v11)
      {
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      BOOL v11 = v19 != 0;
      int v20 = v19 - 1;
      if (!v11) {
        goto LABEL_17;
      }
      v2[109] = v20;
      specialized Array.append<A>(contentsOf:)(v9);
      specialized Array.append<A>(contentsOf:)(v4);
      uint64_t result = v7;
      unint64_t v22 = *(void *)(v7 + 16);
      if (!HIDWORD(v22))
      {
        v2[114] = v22;
        return result;
      }
    }
  }
LABEL_18:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CaptureCircleRenderer.deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t CaptureCircleRenderer.__deallocating_deinit()
{
  CaptureCircleRenderer.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CaptureCircleRenderer()
{
  return self;
}

void *__swift_memcpy288_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t getEnumTagSinglePayload for CommonCircleRenderState(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 288)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CommonCircleRenderState(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 288) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CommonCircleRenderState()
{
  return &type metadata for CommonCircleRenderState;
}

uint64_t specialized KeyframeAnimation.throwIfInvalid(_:)(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  unint64_t v2 = v1 - 2;
  if (v1 < 2)
  {
    char v3 = 0;
LABEL_13:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyframeAnimation<PlatterAnimVar>.Error);
    lazy protocol witness table accessor for type KeyframeAnimation<PlatterAnimVar>.Error and conformance KeyframeAnimation<A>.Error();
    swift_allocError();
    *uint64_t v6 = v3;
    return swift_willThrow();
  }
  double v4 = *(double *)(result + 32);
  if (v4 != 0.0)
  {
    char v3 = 1;
    goto LABEL_13;
  }
  if (v4 >= *(double *)(result + 80))
  {
LABEL_11:
    char v3 = 2;
    goto LABEL_13;
  }
  if (v1 != 2)
  {
    float32x2_t v5 = (double *)(result + 128);
    while (v2)
    {
      if (*(v5 - 6) >= *v5) {
        goto LABEL_11;
      }
      v5 += 6;
      if (!--v2) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

float specialized static PlatterRenderer.computeScreenConstraintScale(from:)(uint64_t a1)
{
  float v2 = *(float *)(a1 + 192);
  float v3 = *(float *)(a1 + 212);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B7740;
  float v5 = atanf(1.0 / v2);
  *(float *)(inited + 32) = v5 + v5;
  float v6 = atanf(1.0 / v3);
  *(float *)(inited + 36) = v6 + v6;
  specialized SIMD.init<A>(_:)(inited);
  float v17 = v7;
  swift_setDeallocating();
  simd_float4x4 v16 = __invert_f4(*(simd_float4x4 *)(a1 + 128));
  float32x4_t v11 = *(float32x4_t *)(a1 + 64);
  float32x4_t v12 = *(float32x4_t *)(a1 + 80);
  float32x4_t v13 = *(float32x4_t *)(a1 + 96);
  float32x4_t v14 = *(float32x4_t *)(a1 + 112);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static PlatterRenderer.computeScreenConstraintScale(from:));
  float32x4_t v15 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, v8.f32[0]), v12, *(float32x2_t *)v8.f32, 1), v13, v8, 2), v14, v8, 3);
  Transform.init(matrix:)();
  return *(float *)(a1 + 256)
       * (float)(tanf(0.5 * v17)
               * fabsf(COERCE_FLOAT(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)&v16, *(float *)&v15), *(float32x4_t *)(&v16 + 16), *(float *)(&v15 + 4) - vmuls_lane_f32(0.5, v9, 1)), *(float32x4_t *)(&v16 + 32), v15, 2), *(float32x4_t *)(&v16 + 48), v15, 3).i32[2])));
}

float specialized static PlatterRenderer.makeDepthHazeData(from:)(float32x4_t *a1)
{
  Transform.init(matrix:)();
  int8x16_t v26 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B7740;
  *(float32x2_t *)(inited + 32) = vmul_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v26.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), (float32x2_t)0x3F0000003F000000);
  specialized SIMD.init<A>(_:)(inited);
  float32x2_t v5 = v4;
  swift_setDeallocating();
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static PlatterRenderer.makeDepthHazeData(from:));
  *(float32x4_t *)float v25 = a1[4];
  *(float32x4_t *)&v25[16] = a1[5];
  *(float32x4_t *)&v25[32] = a1[6];
  *(float32x4_t *)&v25[48] = a1[7];
  float32x4_t v18 = v6;
  float32x4_t v23 = a1[8];
  float32x4_t v24 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v25, v6.f32[0]), *(float32x4_t *)&v25[16], *(float32x2_t *)v6.f32, 1), *(float32x4_t *)&v25[32], v6, 2), *(float32x4_t *)&v25[48], v6, 3);
  float32x4_t v21 = a1[10];
  float32x4_t v22 = a1[9];
  float32x4_t v19 = a1[11];
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of static PlatterRenderer.makeDepthHazeData(from:));
  float32x4_t v8 = vsubq_f32(v24, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v7.f32[0]), v22, *(float32x2_t *)v7.f32, 1), v21, v7, 2), v19, v7, 3));
  int32x4_t v9 = (int32x4_t)vmulq_f32(v8, v8);
  v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
  float32x2_t v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  float32x2_t v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  float32x4_t v16 = vmulq_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
  uint64_t v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_2466B5DF0;
  *(void *)(v12 + 32) = v16.i64[0];
  *(_DWORD *)(v12 + 40) = v16.i32[2];
  *(_DWORD *)(v12 + 44) = 0;
  specialized SIMD.init<A>(_:)(v12);
  float32x4_t v17 = v13;
  swift_setDeallocating();
  if (one-time initialization token for depthHazeFloor != -1) {
    swift_once();
  }
  if (one-time initialization token for depthHazeDistancePower != -1) {
    swift_once();
  }
  float v14 = sqrtf(vaddv_f32(vmul_f32(v5, v5)));
  v27.columns[1] = (simd_float4)v22;
  v27.columns[0] = (simd_float4)v23;
  v27.columns[3] = (simd_float4)v19;
  v27.columns[2] = (simd_float4)v21;
  simd_float4x4 v20 = __invert_f4(v27);
  simd_float4x4 v28 = __invert_f4(*(simd_float4x4 *)v25);
  v28.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v28.columns[0], v17.f32[0]), (float32x4_t)v28.columns[1], *(float32x2_t *)v17.f32, 1), (float32x4_t)v28.columns[2], v17, 2), (float32x4_t)v28.columns[3], v17, 3);
  v28.columns[2] = (simd_float4)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v25, v18.f32[0] - (float)(v14 * v28.columns[0].f32[0])), *(float32x4_t *)&v25[16], v18.f32[1] - vmuls_lane_f32(v14, *(float32x2_t *)v28.columns[0].f32, 1)), *(float32x4_t *)&v25[32], v18.f32[2] - vmuls_lane_f32(v14, (float32x4_t)v28.columns[0], 2)), *(float32x4_t *)&v25[48], v18.f32[3] - vmuls_lane_f32(v14, (float32x4_t)v28.columns[0], 3));
  return vmuls_lane_f32(0.5, vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v20.columns[0], v24.f32[0]), (float32x4_t)v20.columns[1], *(float32x2_t *)v24.f32, 1), (float32x4_t)v20.columns[2], v24, 2), (float32x4_t)v20.columns[3], v24, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v20.columns[0], v28.columns[2].f32[0]),
                   (float32x4_t)v20.columns[1],
                   *(float32x2_t *)v28.columns[2].f32,
                   1),
                 (float32x4_t)v20.columns[2],
                 (float32x4_t)v28.columns[2],
                 2),
               (float32x4_t)v20.columns[3],
               (float32x4_t)v28.columns[2],
               3)),
           2);
}

double specialized static PlatterAnimVar.lerp(a:b:alpha:)(float32x4_t a1, double a2, float32x4_t a3, double a4, float a5)
{
  *(void *)&double result = vaddq_f32(vmulq_n_f32(vsubq_f32(a3, a1), a5), a1).u64[0];
  return result;
}

float specialized static PlatterRenderer.makeShotAnimationState(from:)(uint64_t a1)
{
  if (one-time initialization token for platterBaseColor != -1) {
    swift_once();
  }
  double v2 = *(double *)(a1 + 264);
  if (one-time initialization token for platterRadialAnimation != -1) {
    swift_once();
  }
  float v3 = v2;
  if (static PlatterRenderer.platterRadialAnimation)
  {
    uint64_t v4 = *((void *)static PlatterRenderer.platterRadialAnimation + 2);
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5) {
      double v6 = *(double *)(v4 + 48 * v5 - 16);
    }
    else {
      double v6 = INFINITY;
    }
    double v7 = *(double *)(a1 + 280) - v3;
    if (v7 <= 0.0) {
      double v7 = 0.0;
    }
    if (v6 >= v7) {
      double v8 = v7;
    }
    else {
      double v8 = v6;
    }
    swift_retain();
    specialized KeyframeAnimation.sample(at:)(v8);
    swift_release();
  }
  return v3;
}

uint64_t specialized CaptureCircleRenderer.makeSingleBinVerticesQuad(width:)(float a1)
{
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CaptureCircleRenderer.makeSingleBinVerticesQuad(width:));
  float32x2_t v3 = v2;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of CaptureCircleRenderer.makeSingleBinVerticesQuad(width:));
  float32x2_t v5 = v4;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of CaptureCircleRenderer.makeSingleBinVerticesQuad(width:));
  float32x2_t v61 = v6;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #3 of CaptureCircleRenderer.makeSingleBinVerticesQuad(width:));
  float32x2_t v62 = v7;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #4 of CaptureCircleRenderer.makeSingleBinVerticesQuad(width:));
  float32x2_t v63 = v8;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #5 of CaptureCircleRenderer.makeSingleBinVerticesQuad(width:));
  float32x2_t v64 = v9;
  CGAffineTransformMakeScale(&v66, 1.0, a1);
  CGFloat a = v66.a;
  CGFloat b = v66.b;
  CGFloat c = v66.c;
  CGFloat d = v66.d;
  CGFloat tx = v66.tx;
  CGFloat ty = v66.ty;
  uint64_t v65 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 6, 0);
  uint64_t v16 = v65;
  CGPoint v17 = (CGPoint)vcvtq_f64_f32(v3);
  CGFloat y = v17.y;
  v66.CGFloat a = a;
  v66.CGFloat b = b;
  v66.CGFloat c = c;
  v66.CGFloat d = d;
  v66.CGFloat tx = tx;
  v66.CGFloat ty = ty;
  CGPoint v21 = CGPointApplyAffineTransform(v17, &v66);
  CGFloat v20 = v21.y;
  v19.f64[0] = v21.x;
  unint64_t v23 = *(void *)(v65 + 16);
  unint64_t v22 = *(void *)(v65 + 24);
  unint64_t v24 = v23 + 1;
  if (v23 >= v22 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
    CGFloat v20 = v21.y;
    v19.f64[0] = v21.x;
    uint64_t v16 = v65;
  }
  v19.f64[1] = v20;
  *(void *)(v16 + 16) = v24;
  *(float32x2_t *)(v16 + 8 * v23 + 32) = vcvt_f32_f64(v19);
  CGPoint v25 = (CGPoint)vcvtq_f64_f32(v5);
  CGFloat v26 = v25.y;
  v66.CGFloat a = a;
  v66.CGFloat b = b;
  v66.CGFloat c = c;
  v66.CGFloat d = d;
  v66.CGFloat tx = tx;
  v66.CGFloat ty = ty;
  CGPoint v29 = CGPointApplyAffineTransform(v25, &v66);
  CGFloat v28 = v29.y;
  v27.f64[0] = v29.x;
  unint64_t v30 = *(void *)(v16 + 24);
  unint64_t v31 = v23 + 2;
  if ((uint64_t)(v23 + 2) > (uint64_t)(v30 >> 1))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v23 + 2, 1);
    CGFloat v28 = v29.y;
    v27.f64[0] = v29.x;
    uint64_t v16 = v65;
  }
  v27.f64[1] = v28;
  *(void *)(v16 + 16) = v31;
  *(float32x2_t *)(v16 + 8 * v24 + 32) = vcvt_f32_f64(v27);
  CGPoint v32 = (CGPoint)vcvtq_f64_f32(v61);
  CGFloat v33 = v32.y;
  v66.CGFloat a = a;
  v66.CGFloat b = b;
  v66.CGFloat c = c;
  v66.CGFloat d = d;
  v66.CGFloat tx = tx;
  v66.CGFloat ty = ty;
  CGPoint v36 = CGPointApplyAffineTransform(v32, &v66);
  CGFloat v35 = v36.y;
  v34.f64[0] = v36.x;
  unint64_t v37 = *(void *)(v16 + 24);
  unint64_t v38 = v23 + 3;
  if ((uint64_t)(v23 + 3) > (uint64_t)(v37 >> 1))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v23 + 3, 1);
    CGFloat v35 = v36.y;
    v34.f64[0] = v36.x;
  }
  v34.f64[1] = v35;
  uint64_t v39 = v65;
  *(void *)(v65 + 16) = v38;
  *(float32x2_t *)(v65 + 8 * v31 + 32) = vcvt_f32_f64(v34);
  CGPoint v40 = (CGPoint)vcvtq_f64_f32(v62);
  CGFloat v41 = v40.y;
  v66.CGFloat a = a;
  v66.CGFloat b = b;
  v66.CGFloat c = c;
  v66.CGFloat d = d;
  v66.CGFloat tx = tx;
  v66.CGFloat ty = ty;
  CGPoint v44 = CGPointApplyAffineTransform(v40, &v66);
  CGFloat v43 = v44.y;
  v42.f64[0] = v44.x;
  unint64_t v45 = *(void *)(v65 + 24);
  unint64_t v46 = v23 + 4;
  if ((uint64_t)(v23 + 4) > (uint64_t)(v45 >> 1))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v23 + 4, 1);
    CGFloat v43 = v44.y;
    v42.f64[0] = v44.x;
    uint64_t v39 = v65;
  }
  v42.f64[1] = v43;
  *(void *)(v39 + 16) = v46;
  *(float32x2_t *)(v39 + 8 * v38 + 32) = vcvt_f32_f64(v42);
  CGPoint v47 = (CGPoint)vcvtq_f64_f32(v63);
  CGFloat v48 = v47.y;
  v66.CGFloat a = a;
  v66.CGFloat b = b;
  v66.CGFloat c = c;
  v66.CGFloat d = d;
  v66.CGFloat tx = tx;
  v66.CGFloat ty = ty;
  CGPoint v51 = CGPointApplyAffineTransform(v47, &v66);
  CGFloat v50 = v51.y;
  v49.f64[0] = v51.x;
  unint64_t v52 = *(void *)(v39 + 24);
  unint64_t v53 = v23 + 5;
  if ((uint64_t)(v23 + 5) > (uint64_t)(v52 >> 1))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v23 + 5, 1);
    CGFloat v50 = v51.y;
    v49.f64[0] = v51.x;
    uint64_t v39 = v65;
  }
  v49.f64[1] = v50;
  *(void *)(v39 + 16) = v53;
  *(float32x2_t *)(v39 + 8 * v46 + 32) = vcvt_f32_f64(v49);
  CGPoint v54 = (CGPoint)vcvtq_f64_f32(v64);
  CGFloat v55 = v54.y;
  v66.CGFloat a = a;
  v66.CGFloat b = b;
  v66.CGFloat c = c;
  v66.CGFloat d = d;
  v66.CGFloat tx = tx;
  v66.CGFloat ty = ty;
  CGPoint v58 = CGPointApplyAffineTransform(v54, &v66);
  CGFloat v57 = v58.y;
  v56.f64[0] = v58.x;
  unint64_t v59 = *(void *)(v39 + 24);
  if ((uint64_t)(v23 + 6) > (uint64_t)(v59 >> 1))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v23 + 6, 1);
    CGFloat v57 = v58.y;
    v56.f64[0] = v58.x;
  }
  v56.f64[1] = v57;
  uint64_t result = v65;
  *(void *)(v65 + 16) = v23 + 6;
  *(float32x2_t *)(v65 + 8 * v53 + 32) = vcvt_f32_f64(v56);
  return result;
}

unint64_t lazy protocol witness table accessor for type KeyframeAnimation<PlatterAnimVar>.Error and conformance KeyframeAnimation<A>.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type KeyframeAnimation<PlatterAnimVar>.Error and conformance KeyframeAnimation<A>.Error;
  if (!lazy protocol witness table cache variable for type KeyframeAnimation<PlatterAnimVar>.Error and conformance KeyframeAnimation<A>.Error)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for KeyframeAnimation<PlatterAnimVar>.Error);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyframeAnimation<PlatterAnimVar>.Error and conformance KeyframeAnimation<A>.Error);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error;
  if (!lazy protocol witness table cache variable for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error;
  if (!lazy protocol witness table cache variable for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error);
  }
  return result;
}

uint64_t _s19_RealityKit_SwiftUI23CommonCircleRenderStateVSgWOi_(uint64_t result)
{
  *(unsigned char *)(result + 288) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatterRenderer.Error and conformance PlatterRenderer.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatterRenderer.Error and conformance PlatterRenderer.Error;
  if (!lazy protocol witness table cache variable for type PlatterRenderer.Error and conformance PlatterRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatterRenderer.Error and conformance PlatterRenderer.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatterRenderer.Error and conformance PlatterRenderer.Error;
  if (!lazy protocol witness table cache variable for type PlatterRenderer.Error and conformance PlatterRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatterRenderer.Error and conformance PlatterRenderer.Error);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatterRenderer.Error()
{
  return &type metadata for PlatterRenderer.Error;
}

unsigned char *storeEnumTagSinglePayload for PlatterRenderer.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2466B1894);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CaptureCircleRenderer.Error()
{
  return &type metadata for CaptureCircleRenderer.Error;
}

void *type metadata accessor for PlatterAnimVar()
{
  return &unk_26FAD1C80;
}

uint64_t static CharacterSet.whitespaces.getter()
{
  return MEMORY[0x270EEE098]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x270EEE258]();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEE378]();
}

uint64_t type metadata accessor for Notification()
{
  return MEMORY[0x270EEE3D0]();
}

uint64_t AttributeScopes.SwiftUIAttributes.baselineOffset.getter()
{
  return MEMORY[0x270EFEAD0]();
}

uint64_t AttributeScopes.SwiftUIAttributes.backgroundColor.getter()
{
  return MEMORY[0x270EFEAE0]();
}

uint64_t AttributeScopes.SwiftUIAttributes.foregroundColor.getter()
{
  return MEMORY[0x270EFEAE8]();
}

uint64_t AttributeScopes.SwiftUIAttributes.kern.getter()
{
  return MEMORY[0x270EFEB08]();
}

uint64_t AttributeScopes.SwiftUIAttributes.tracking.getter()
{
  return MEMORY[0x270EFEB10]();
}

uint64_t AttributedString.Runs.Run.subscript.getter()
{
  return MEMORY[0x270EEEC80]();
}

uint64_t AttributedString.Runs.Run.range.getter()
{
  return MEMORY[0x270EEEC90]();
}

uint64_t type metadata accessor for AttributedString.Runs.Run()
{
  return MEMORY[0x270EEECA8]();
}

uint64_t type metadata accessor for AttributedString.Runs.Index()
{
  return MEMORY[0x270EEECC0]();
}

uint64_t type metadata accessor for AttributedString.Runs()
{
  return MEMORY[0x270EEECD0]();
}

uint64_t AttributedString.runs.getter()
{
  return MEMORY[0x270EEECF8]();
}

uint64_t type metadata accessor for AttributedString()
{
  return MEMORY[0x270EEEDD8]();
}

uint64_t AttributedString.init(_:)()
{
  return MEMORY[0x270EEEE40]();
}

uint64_t AttributeDynamicLookup.subscript.getter()
{
  return MEMORY[0x270EFEB28]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x270EEF840]();
}

uint64_t URL.isFileURL.getter()
{
  return MEMORY[0x270EEFBC0]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL.== infix(_:_:)()
{
  return MEMORY[0x270EEFDF0]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEFE20]();
}

uint64_t URL.path.getter()
{
  return MEMORY[0x270EEFE80]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x270EF0C68]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x270EF10A8]();
}

uint64_t BoundingBox.transformed(by:)()
{
  return MEMORY[0x270EFBA08]();
}

uint64_t BoundingBox.boundingRadius.getter()
{
  return MEMORY[0x270EFBA10]();
}

uint64_t BoundingBox.init(min:max:)()
{
  return MEMORY[0x270EFBA18]();
}

uint64_t BoundingBox.union(_:)()
{
  return MEMORY[0x270EFBA20]();
}

uint64_t BoundingBox.center.getter()
{
  return MEMORY[0x270EFBA28]();
}

uint64_t BoundingBox.extents.getter()
{
  return MEMORY[0x270EFBA30]();
}

uint64_t BoundingBox.formUnion(_:)()
{
  return MEMORY[0x270EFBA38]();
}

{
  return MEMORY[0x270EFBA40]();
}

uint64_t BoundingBox.init()()
{
  return MEMORY[0x270EFBA48]();
}

uint64_t ModelEntity.init(mesh:materials:)()
{
  return MEMORY[0x270EFBA58]();
}

uint64_t type metadata accessor for ModelEntity()
{
  return MEMORY[0x270EFBA68]();
}

uint64_t SceneEvents.Update.deltaTime.getter()
{
  return MEMORY[0x270EFBA70]();
}

uint64_t type metadata accessor for SceneEvents.Update()
{
  return MEMORY[0x270EFBA78]();
}

uint64_t __EntityRef.__as<A>(_:)()
{
  return MEMORY[0x270EFBAA0]();
}

uint64_t type metadata accessor for __EntityRef()
{
  return MEMORY[0x270EFBAA8]();
}

uint64_t AnchorEntity.__allocating_init(world:)()
{
  return MEMORY[0x270EFBAD0]();
}

uint64_t AnchorEntity.init()()
{
  return MEMORY[0x270EFBAD8]();
}

uint64_t type metadata accessor for AnchorEntity()
{
  return MEMORY[0x270EFBAE0]();
}

Swift::Void __swiftcall HasHierarchy.removeFromParent(preservingWorldTransform:)(Swift::Bool preservingWorldTransform)
{
}

uint64_t HasHierarchy.parent.getter()
{
  return MEMORY[0x270EFBAF8]();
}

uint64_t HasHierarchy.addChild(_:preservingWorldTransform:)()
{
  return MEMORY[0x270EFBB00]();
}

uint64_t HasHierarchy.children.getter()
{
  return MEMORY[0x270EFBB08]();
}

uint64_t HasTransform.setTransformMatrix(_:relativeTo:)()
{
  return MEMORY[0x270EFBB18]();
}

uint64_t HasTransform.orientation(relativeTo:)()
{
  return MEMORY[0x270EFBB20]();
}

uint64_t HasTransform.orientation.modify()
{
  return MEMORY[0x270EFBB28]();
}

uint64_t HasTransform.orientation.getter()
{
  return MEMORY[0x270EFBB30]();
}

uint64_t HasTransform.setPosition(_:relativeTo:)()
{
  return MEMORY[0x270EFBB40]();
}

uint64_t HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)()
{
  return MEMORY[0x270EFBB48]();
}

uint64_t HasTransform.setOrientation(_:relativeTo:)()
{
  return MEMORY[0x270EFBB50]();
}

uint64_t HasTransform.transformMatrix(relativeTo:)()
{
  return MEMORY[0x270EFBB58]();
}

uint64_t HasTransform.move(to:relativeTo:duration:timingFunction:)()
{
  return MEMORY[0x270EFBB60]();
}

uint64_t HasTransform.scale(relativeTo:)()
{
  return MEMORY[0x270EFBB68]();
}

uint64_t HasTransform.scale.setter()
{
  return MEMORY[0x270EFBB70]();
}

uint64_t HasTransform.convert(position:from:)()
{
  return MEMORY[0x270EFBB78]();
}

uint64_t HasTransform.convert(direction:to:)()
{
  return MEMORY[0x270EFBB80]();
}

uint64_t HasTransform.convert(direction:from:)()
{
  return MEMORY[0x270EFBB88]();
}

uint64_t HasTransform.position(relativeTo:)()
{
  return MEMORY[0x270EFBB90]();
}

uint64_t HasTransform.position.getter()
{
  return MEMORY[0x270EFBBA0]();
}

uint64_t HasTransform.setScale(_:relativeTo:)()
{
  return MEMORY[0x270EFBBB0]();
}

uint64_t HasTransform.transform.modify()
{
  return MEMORY[0x270EFBBB8]();
}

uint64_t HasTransform.transform.getter()
{
  return MEMORY[0x270EFBBC0]();
}

uint64_t HasTransform.transform.setter()
{
  return MEMORY[0x270EFBBC8]();
}

uint64_t MeshResource.ShapeExtrusionOptions._chamferProfileStorage.getter()
{
  return MEMORY[0x270EFBBD0]();
}

uint64_t MeshResource.ShapeExtrusionOptions._chamferProfileStorage.setter()
{
  return MEMORY[0x270EFBBD8]();
}

uint64_t type metadata accessor for MeshResource.ShapeExtrusionOptions()
{
  return MEMORY[0x270EFBBE0]();
}

uint64_t static MeshResource.generateBox(size:cornerRadius:)()
{
  return MEMORY[0x270EFBC60]();
}

{
  return MEMORY[0x270EFBC68]();
}

uint64_t static MeshResource.generateSphere(radius:)()
{
  return MEMORY[0x270EFBC80]();
}

uint64_t type metadata accessor for MeshResource()
{
  return MEMORY[0x270EFBC90]();
}

uint64_t static ShapeResource.generateSphere(radius:)()
{
  return MEMORY[0x270EFBCA0]();
}

uint64_t type metadata accessor for ShapeResource()
{
  return MEMORY[0x270EFBCA8]();
}

uint64_t UnlitMaterial.init(color:)()
{
  return MEMORY[0x270EFCF40]();
}

uint64_t type metadata accessor for UnlitMaterial()
{
  return MEMORY[0x270EFBCB8]();
}

uint64_t static CollisionGroup.all.getter()
{
  return MEMORY[0x270EFBCC0]();
}

uint64_t type metadata accessor for CollisionGroup()
{
  return MEMORY[0x270EFBCC8]();
}

uint64_t ModelComponent.materials.setter()
{
  return MEMORY[0x270EFBCE0]();
}

uint64_t type metadata accessor for ModelComponent()
{
  return MEMORY[0x270EFBCE8]();
}

uint64_t SimpleMaterial.init(color:roughness:isMetallic:)()
{
  return MEMORY[0x270EFCF48]();
}

uint64_t type metadata accessor for SimpleMaterial()
{
  return MEMORY[0x270EFBCF0]();
}

uint64_t static CollisionFilter.default.getter()
{
  return MEMORY[0x270EFBCF8]();
}

uint64_t type metadata accessor for CollisionFilter()
{
  return MEMORY[0x270EFBD00]();
}

uint64_t ARSessionManager.init(arView:)()
{
  return MEMORY[0x270EFCF50]();
}

uint64_t type metadata accessor for ARSessionManager()
{
  return MEMORY[0x270EFCF58]();
}

uint64_t CollisionCastHit.entity.getter()
{
  return MEMORY[0x270EFBDB8]();
}

uint64_t CollisionCastHit.normal.getter()
{
  return MEMORY[0x270EFBDC0]();
}

uint64_t CollisionCastHit.distance.getter()
{
  return MEMORY[0x270EFBDC8]();
}

uint64_t CollisionCastHit.position.getter()
{
  return MEMORY[0x270EFBDD0]();
}

uint64_t type metadata accessor for CollisionCastHit()
{
  return MEMORY[0x270EFBDD8]();
}

uint64_t dispatch thunk of __ServiceLocator.coreServiceLocator.getter()
{
  return MEMORY[0x270EFBE10]();
}

uint64_t dispatch thunk of __ServiceLocator.sceneService.getter()
{
  return MEMORY[0x270EFBE20]();
}

uint64_t static __ServiceLocator.shared.getter()
{
  return MEMORY[0x270EFBE38]();
}

uint64_t type metadata accessor for __ServiceLocator()
{
  return MEMORY[0x270EFBE40]();
}

uint64_t static AnimationResource.generate(with:)()
{
  return MEMORY[0x270EFBE58]();
}

uint64_t type metadata accessor for AnimationResource()
{
  return MEMORY[0x270EFBE68]();
}

uint64_t type metadata accessor for CollisionComponent.Mode()
{
  return MEMORY[0x270EFBE90]();
}

uint64_t CollisionComponent.init(shapes:mode:filter:)()
{
  return MEMORY[0x270EFBE98]();
}

uint64_t type metadata accessor for CollisionComponent()
{
  return MEMORY[0x270EFBEA8]();
}

uint64_t type metadata accessor for CollisionCastQueryType()
{
  return MEMORY[0x270EFBF98]();
}

uint64_t static AnimationTimingFunction.linear.getter()
{
  return MEMORY[0x270EFBFC8]();
}

uint64_t static AnimationTimingFunction.default.getter()
{
  return MEMORY[0x270EFBFD0]();
}

uint64_t static AnimationTimingFunction.easeOut.getter()
{
  return MEMORY[0x270EFBFD8]();
}

uint64_t type metadata accessor for AnimationTimingFunction()
{
  return MEMORY[0x270EFBFE8]();
}

uint64_t MaterialScalarParameter.init(floatLiteral:)()
{
  return MEMORY[0x270EFBFF0]();
}

uint64_t MaterialScalarParameter.init(integerLiteral:)()
{
  return MEMORY[0x270EFBFF8]();
}

uint64_t type metadata accessor for MaterialScalarParameter()
{
  return MEMORY[0x270EFC000]();
}

uint64_t PerspectiveCameraComponent.fieldOfViewInDegrees.getter()
{
  return MEMORY[0x270EFC0A0]();
}

uint64_t PerspectiveCameraComponent.fieldOfViewInDegrees.setter()
{
  return MEMORY[0x270EFC0A8]();
}

uint64_t type metadata accessor for PerspectiveCameraComponent()
{
  return MEMORY[0x270EFC0B0]();
}

uint64_t AnimationPlaybackController.isPlaying.getter()
{
  return MEMORY[0x270EFC0C8]();
}

uint64_t dispatch thunk of AnimationPlaybackController.isComplete.getter()
{
  return MEMORY[0x270EFC0D0]();
}

uint64_t dispatch thunk of AnimationPlaybackController.stop()()
{
  return MEMORY[0x270EFC0D8]();
}

uint64_t type metadata accessor for EntityRotationGestureRecognizer()
{
  return MEMORY[0x270EFCF68]();
}

uint64_t type metadata accessor for EntityTranslationGestureRecognizer()
{
  return MEMORY[0x270EFCF70]();
}

uint64_t Scene.coreScene.getter()
{
  return MEMORY[0x270EFC460]();
}

uint64_t Scene.performQuery(_:)()
{
  return MEMORY[0x270EFC470]();
}

uint64_t dispatch thunk of Scene.findEntity(id:)()
{
  return MEMORY[0x270EFC480]();
}

uint64_t dispatch thunk of Scene.findEntity(named:)()
{
  return MEMORY[0x270EFC488]();
}

uint64_t dispatch thunk of Scene.defaultCamera.getter()
{
  return MEMORY[0x270EFC490]();
}

uint64_t Scene.AnchorCollection.append(_:)()
{
  return MEMORY[0x270EFC498]();
}

uint64_t type metadata accessor for Scene.AnchorCollection()
{
  return MEMORY[0x270EFC4A0]();
}

uint64_t dispatch thunk of Scene.internalActiveCamera.getter()
{
  return MEMORY[0x270EFC4B8]();
}

uint64_t dispatch thunk of Scene.anchors.getter()
{
  return MEMORY[0x270EFC4C8]();
}

uint64_t Scene.raycast(origin:direction:length:query:mask:relativeTo:)()
{
  return MEMORY[0x270EFC4D8]();
}

uint64_t dispatch thunk of Scene.addAnchor(_:)()
{
  return MEMORY[0x270EFC4E8]();
}

uint64_t Scene.subscribe<A>(to:on:_:)()
{
  return MEMORY[0x270EFC4F0]();
}

uint64_t type metadata accessor for ARView.CameraMode()
{
  return MEMORY[0x270EFCF78]();
}

uint64_t ARView.cameraMode.getter()
{
  return MEMORY[0x270EFCF88]();
}

uint64_t ARView.cameraMode.setter()
{
  return MEMORY[0x270EFCF90]();
}

uint64_t static ARView.Environment.Background.cameraFeed(exposureCompensation:)()
{
  return MEMORY[0x270EFCF98]();
}

uint64_t static ARView.Environment.Background.color(_:)()
{
  return MEMORY[0x270EFCFA0]();
}

uint64_t static ARView.Environment.Background.skybox(_:)()
{
  return MEMORY[0x270EFCFA8]();
}

uint64_t type metadata accessor for ARView.Environment.Background()
{
  return MEMORY[0x270EFCFB0]();
}

uint64_t ARView.Environment.background.setter()
{
  return MEMORY[0x270EFCFB8]();
}

uint64_t ARView.Environment.ImageBasedLight.resource.setter()
{
  return MEMORY[0x270EFCFC8]();
}

uint64_t static ARView.Environment.SceneUnderstanding.Options.collision.getter()
{
  return MEMORY[0x270EFCFD0]();
}

uint64_t type metadata accessor for ARView.Environment.SceneUnderstanding.Options()
{
  return MEMORY[0x270EFCFD8]();
}

uint64_t ARView.Environment.SceneUnderstanding.options.modify()
{
  return MEMORY[0x270EFCFE0]();
}

uint64_t ARView.Environment.sceneUnderstanding.modify()
{
  return MEMORY[0x270EFCFE8]();
}

uint64_t ARView.Environment.lighting.modify()
{
  return MEMORY[0x270EFCFF0]();
}

uint64_t type metadata accessor for ARView.Environment()
{
  return MEMORY[0x270EFCFF8]();
}

uint64_t dispatch thunk of ARView.environment.modify()
{
  return MEMORY[0x270EFD000]();
}

uint64_t dispatch thunk of ARView.environment.getter()
{
  return MEMORY[0x270EFD008]();
}

uint64_t dispatch thunk of ARView.environment.setter()
{
  return MEMORY[0x270EFD010]();
}

uint64_t static ARView.DebugOptions.showPhysics.getter()
{
  return MEMORY[0x270EFD018]();
}

uint64_t static ARView.DebugOptions.showWorldOrigin.getter()
{
  return MEMORY[0x270EFD028]();
}

uint64_t static ARView.DebugOptions.showAnchorOrigins.getter()
{
  return MEMORY[0x270EFD030]();
}

uint64_t static ARView.DebugOptions.showFeaturePoints.getter()
{
  return MEMORY[0x270EFD038]();
}

uint64_t static ARView.DebugOptions.showAnchorGeometry.getter()
{
  return MEMORY[0x270EFD040]();
}

uint64_t static ARView.DebugOptions.showSceneUnderstanding.getter()
{
  return MEMORY[0x270EFD048]();
}

uint64_t static ARView.DebugOptions.none.getter()
{
  return MEMORY[0x270EFD050]();
}

uint64_t type metadata accessor for ARView.DebugOptions()
{
  return MEMORY[0x270EFD058]();
}

uint64_t dispatch thunk of ARView.debugOptions.getter()
{
  return MEMORY[0x270EFD068]();
}

uint64_t dispatch thunk of ARView.debugOptions.setter()
{
  return MEMORY[0x270EFD070]();
}

uint64_t static ARView.RenderOptions.disableHDR.getter()
{
  return MEMORY[0x270EFD078]();
}

uint64_t static ARView.RenderOptions.disableMotionBlur.getter()
{
  return MEMORY[0x270EFD088]();
}

uint64_t static ARView.RenderOptions.disableCameraGrain.getter()
{
  return MEMORY[0x270EFD090]();
}

uint64_t static ARView.RenderOptions.disableDepthOfField.getter()
{
  return MEMORY[0x270EFD098]();
}

uint64_t static ARView.RenderOptions.disableFaceOcclusions.getter()
{
  return MEMORY[0x270EFD0A0]();
}

uint64_t static ARView.RenderOptions.disablePersonOcclusion.getter()
{
  return MEMORY[0x270EFD0A8]();
}

uint64_t static ARView.RenderOptions.disableGroundingShadows.getter()
{
  return MEMORY[0x270EFD0B0]();
}

uint64_t static ARView.RenderOptions.disableAREnvironmentLighting.getter()
{
  return MEMORY[0x270EFD0B8]();
}

uint64_t type metadata accessor for ARView.RenderOptions()
{
  return MEMORY[0x270EFD0C0]();
}

uint64_t dispatch thunk of ARView.audioListener.getter()
{
  return MEMORY[0x270EFD0C8]();
}

uint64_t dispatch thunk of ARView.audioListener.setter()
{
  return MEMORY[0x270EFD0D0]();
}

uint64_t ARView.physicsOrigin.getter()
{
  return MEMORY[0x270EFD0D8]();
}

uint64_t ARView.physicsOrigin.setter()
{
  return MEMORY[0x270EFD0E0]();
}

uint64_t ARView.renderOptions.modify()
{
  return MEMORY[0x270EFD0E8]();
}

uint64_t ARView.renderOptions.getter()
{
  return MEMORY[0x270EFD0F0]();
}

uint64_t static ARView.EntityGestures.rotation.getter()
{
  return MEMORY[0x270EFD0F8]();
}

uint64_t type metadata accessor for ARView.EntityGestures()
{
  return MEMORY[0x270EFD100]();
}

Swift::UInt32 __swiftcall ARView.getLayerHandle()()
{
  return MEMORY[0x270EFD108]();
}

uint64_t ARView.RenderCallbacks.postProcess.setter()
{
  return MEMORY[0x270EFD110]();
}

uint64_t dispatch thunk of ARView.cameraTransform.getter()
{
  return MEMORY[0x270EFD118]();
}

uint64_t ARView.installGestures(_:for:)()
{
  return MEMORY[0x270EFD120]();
}

uint64_t ARView.renderCallbacks.modify()
{
  return MEMORY[0x270EFD128]();
}

uint64_t dispatch thunk of ARView.antialiasingMode.setter()
{
  return MEMORY[0x270EFD130]();
}

uint64_t type metadata accessor for ARView.EDRHeadroomPolicy()
{
  return MEMORY[0x270EFD138]();
}

uint64_t dispatch thunk of ARView.edrHeadroomPolicy.setter()
{
  return MEMORY[0x270EFD140]();
}

uint64_t ARView.PostProcessContext.projection.getter()
{
  return MEMORY[0x270EFD148]();
}

uint64_t ARView.PostProcessContext.commandBuffer.getter()
{
  return MEMORY[0x270EFD150]();
}

uint64_t ARView.PostProcessContext.sourceColorTexture.getter()
{
  return MEMORY[0x270EFD158]();
}

uint64_t ARView.PostProcessContext.sourceDepthTexture.getter()
{
  return MEMORY[0x270EFD160]();
}

uint64_t ARView.PostProcessContext.targetColorTexture.getter()
{
  return MEMORY[0x270EFD168]();
}

uint64_t ARView.PostProcessContext.time.getter()
{
  return MEMORY[0x270EFD170]();
}

uint64_t type metadata accessor for ARView.PostProcessContext()
{
  return MEMORY[0x270EFD180]();
}

uint64_t dispatch thunk of ARView.__disableComposition.getter()
{
  return MEMORY[0x270EFD190]();
}

uint64_t dispatch thunk of ARView.__disableComposition.setter()
{
  return MEMORY[0x270EFD198]();
}

uint64_t dispatch thunk of ARView.realityFusionSession.getter()
{
  return MEMORY[0x270EFD1B0]();
}

uint64_t dispatch thunk of ARView.__interfaceOrientation.getter()
{
  return MEMORY[0x270EFD1B8]();
}

uint64_t dispatch thunk of ARView.__disableCounterRotation.setter()
{
  return MEMORY[0x270EFD1C0]();
}

uint64_t dispatch thunk of ARView.extendedDynamicRangeOutput.setter()
{
  return MEMORY[0x270EFD1D8]();
}

uint64_t dispatch thunk of ARView.__proto_antialiasingMode_v1.getter()
{
  return MEMORY[0x270EFD1E0]();
}

uint64_t ARView.ray(through:)()
{
  return MEMORY[0x270EFD1E8]();
}

uint64_t ARView.init(frame:forRealityView:)()
{
  return MEMORY[0x270EFD1F0]();
}

uint64_t ARView.init(frame:cameraMode:automaticallyConfigureSession:)()
{
  return MEMORY[0x270EFD1F8]();
}

uint64_t dispatch thunk of ARView.scene.getter()
{
  return MEMORY[0x270EFD200]();
}

uint64_t ARView.entity(at:)()
{
  return MEMORY[0x270EFD208]();
}

uint64_t ARView.hitTest(_:requireInputTarget:query:mask:)()
{
  return MEMORY[0x270EFD210]();
}

uint64_t ARView.hitTest(_:query:mask:)()
{
  return MEMORY[0x270EFD218]();
}

uint64_t ARView.project(_:)()
{
  return MEMORY[0x270EFD220]();
}

uint64_t ARView.entities(at:)()
{
  return MEMORY[0x270EFD228]();
}

uint64_t dispatch thunk of ARView.snapshot(saveToHDR:completion:)()
{
  return MEMORY[0x270EFD230]();
}

uint64_t ARView.unproject(_:ontoPlane:relativeToCamera:)()
{
  return MEMORY[0x270EFD238]();
}

uint64_t type metadata accessor for ARView()
{
  return MEMORY[0x270EFD240]();
}

uint64_t Entity.coreEntity.getter()
{
  return MEMORY[0x270EFC500]();
}

uint64_t dispatch thunk of Entity.__coreEntity.getter()
{
  return MEMORY[0x270EFC508]();
}

uint64_t Entity.playAnimation(_:transitionDuration:blendLayerOffset:separateAnimatedValue:startsPaused:clock:)()
{
  return MEMORY[0x270EFC510]();
}

Swift::Bool __swiftcall Entity.applyTapForBehaviors()()
{
  return MEMORY[0x270EFC5B8]();
}

uint64_t dispatch thunk of Entity.components.modify()
{
  return MEMORY[0x270EFC5D8]();
}

uint64_t dispatch thunk of Entity.components.getter()
{
  return MEMORY[0x270EFC5E0]();
}

uint64_t Entity.ComponentSet.set<A>(_:)()
{
  return MEMORY[0x270EFC620]();
}

uint64_t Entity.ComponentSet.remove(_:)()
{
  return MEMORY[0x270EFC630]();
}

uint64_t type metadata accessor for Entity.ComponentSet()
{
  return MEMORY[0x270EFC638]();
}

uint64_t Entity.ComponentSet.subscript.modify()
{
  return MEMORY[0x270EFC640]();
}

uint64_t Entity.ComponentSet.subscript.getter()
{
  return MEMORY[0x270EFC648]();
}

uint64_t Entity.ComponentSet.subscript.setter()
{
  return MEMORY[0x270EFC650]();
}

uint64_t static Entity.loadModelAsync(named:in:)()
{
  return MEMORY[0x270EFC668]();
}

uint64_t Entity.ChildCollection.insert<A>(contentsOf:beforeIndex:)()
{
  return MEMORY[0x270EFC670]();
}

Swift::Void __swiftcall Entity.ChildCollection.removeAll()()
{
}

uint64_t Entity.ChildCollection.startIndex.getter()
{
  return MEMORY[0x270EFC680]();
}

Swift::Int __swiftcall Entity.ChildCollection.index(after:)(Swift::Int after)
{
  return MEMORY[0x270EFC698](after);
}

uint64_t Entity.ChildCollection.endIndex.getter()
{
  return MEMORY[0x270EFC6A0]();
}

uint64_t type metadata accessor for Entity.ChildCollection()
{
  return MEMORY[0x270EFC6A8]();
}

uint64_t Entity.ChildCollection.subscript.getter()
{
  return MEMORY[0x270EFC6B0]();
}

Swift::Void __swiftcall Entity.generateCollisionShapes(recursive:)(Swift::Bool recursive)
{
}

uint64_t static Entity.== infix(_:_:)()
{
  return MEMORY[0x270EFC6D8]();
}

uint64_t dispatch thunk of Entity.name.setter()
{
  return MEMORY[0x270EFC6F0]();
}

uint64_t dispatch thunk of Entity.scene.getter()
{
  return MEMORY[0x270EFC6F8]();
}

uint64_t static Entity.fromCore(_:ignoringEntityInfo:)()
{
  return MEMORY[0x270EFC700]();
}

uint64_t Entity.init()()
{
  return MEMORY[0x270EFC720]();
}

uint64_t type metadata accessor for Entity()
{
  return MEMORY[0x270EFC728]();
}

uint64_t Entity.deinit()
{
  return MEMORY[0x270EFC730]();
}

uint64_t HasModel.model.modify()
{
  return MEMORY[0x270EFC738]();
}

uint64_t Transform.init(matrix:)()
{
  return MEMORY[0x270EFC7E0]();
}

uint64_t static Transform.identity.getter()
{
  return MEMORY[0x270EFC7E8]();
}

uint64_t Transform.init()()
{
  return MEMORY[0x270EFC7F0]();
}

uint64_t ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)()
{
  return MEMORY[0x270FA11F8]();
}

uint64_t ObservationRegistrar.access<A, B>(_:keyPath:)()
{
  return MEMORY[0x270FA1208]();
}

uint64_t ObservationRegistrar.didSet<A, B>(_:keyPath:)()
{
  return MEMORY[0x270FA1220]();
}

uint64_t ObservationRegistrar.willSet<A, B>(_:keyPath:)()
{
  return MEMORY[0x270FA1228]();
}

uint64_t ObservationRegistrar.init()()
{
  return MEMORY[0x270FA1238]();
}

uint64_t type metadata accessor for ObservationRegistrar()
{
  return MEMORY[0x270FA1250]();
}

NSNumber __swiftcall CGFloat._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF17B0]();
}

uint64_t __ResolvedRealityCoordinateSpace.entity.getter()
{
  return MEMORY[0x270EFC810]();
}

uint64_t type metadata accessor for __ResolvedRealityCoordinateSpace()
{
  return MEMORY[0x270EFC818]();
}

uint64_t __RealityCoordinateSpaceContext.init(camera:)()
{
  return MEMORY[0x270EFC820]();
}

uint64_t type metadata accessor for __RealityCoordinateSpaceContext()
{
  return MEMORY[0x270EFC828]();
}

uint64_t dispatch thunk of RealityFusionSession.serviceManager.getter()
{
  return MEMORY[0x270EFC830]();
}

uint64_t dispatch thunk of RealityCoordinateSpace._resolve(in:)()
{
  return MEMORY[0x270EFC838]();
}

uint64_t type metadata accessor for BindTarget()
{
  return MEMORY[0x270EFC870]();
}

uint64_t dispatch thunk of Finishable.finish()()
{
  return MEMORY[0x270EFC878]();
}

uint64_t EntityQuery.init(where:)()
{
  return MEMORY[0x270EFC8A8]();
}

uint64_t type metadata accessor for EntityQuery()
{
  return MEMORY[0x270EFC8B0]();
}

uint64_t QueryResult.makeIterator()()
{
  return MEMORY[0x270EFC8B8]();
}

uint64_t QueryResult.Iterator.next()()
{
  return MEMORY[0x270EFC8C0]();
}

uint64_t SceneManager.componentTypeToComponentClass(_:)()
{
  return MEMORY[0x270EFC8C8]();
}

uint64_t type metadata accessor for SceneManager()
{
  return MEMORY[0x270EFC8D0]();
}

uint64_t static CameraControls.none.getter()
{
  return MEMORY[0x270EFC910]();
}

uint64_t CameraControls.rawValue.getter()
{
  return MEMORY[0x270EFC918]();
}

uint64_t type metadata accessor for CameraControls()
{
  return MEMORY[0x270EFC920]();
}

uint64_t static QueryPredicate.canInteract(on:)()
{
  return MEMORY[0x270EFCA50]();
}

uint64_t static QueryPredicate.isDescendant(of:)()
{
  return MEMORY[0x270EFCA58]();
}

uint64_t static QueryPredicate.has<A>(_:)()
{
  return MEMORY[0x270EFCA60]();
}

uint64_t QueryPredicate.evaluate(value:)()
{
  return MEMORY[0x270EFCA68]();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode()
{
  return MEMORY[0x270EFCAC8]();
}

uint64_t AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.init(sessionID:captureMode:)()
{
  return MEMORY[0x270EFCAD0]();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent()
{
  return MEMORY[0x270EFCAD8]();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)()
{
  return MEMORY[0x270EFCAE0]();
}

uint64_t AnalyticsManager.ObjectCaptureSessionInitEvent.init(sessionID:)()
{
  return MEMORY[0x270EFCAE8]();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent()
{
  return MEMORY[0x270EFCAF0]();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent.Status()
{
  return MEMORY[0x270EFCAF8]();
}

uint64_t AnalyticsManager.ObjectCaptureSessionStatusEvent.init(sessionID:status:)()
{
  return MEMORY[0x270EFCB00]();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent()
{
  return MEMORY[0x270EFCB08]();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)()
{
  return MEMORY[0x270EFCB10]();
}

uint64_t AnalyticsManager.ObjectCaptureSessionImageStatsEvent.init(sessionID:numImages:)()
{
  return MEMORY[0x270EFCB18]();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent()
{
  return MEMORY[0x270EFCB20]();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionStatusEvent(event:)()
{
  return MEMORY[0x270EFCB28]();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionImageStatsEvent(event:)()
{
  return MEMORY[0x270EFCB30]();
}

uint64_t AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent.init(sessionID:bundleID:)()
{
  return MEMORY[0x270EFCB38]();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent()
{
  return MEMORY[0x270EFCB40]();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)()
{
  return MEMORY[0x270EFCB48]();
}

uint64_t static AnalyticsManager.shared.getter()
{
  return MEMORY[0x270EFCB50]();
}

uint64_t type metadata accessor for AnalyticsManager()
{
  return MEMORY[0x270EFCB58]();
}

uint64_t type metadata accessor for AntialiasingMode()
{
  return MEMORY[0x270EFCB60]();
}

uint64_t EntityCollection.removeAll(where:)()
{
  return MEMORY[0x270EFCB78]();
}

uint64_t type metadata accessor for AnimationFillMode()
{
  return MEMORY[0x270EFCB88]();
}

uint64_t dispatch thunk of AsyncUpdateStream.stream.getter()
{
  return MEMORY[0x270EFCB90]();
}

uint64_t EventSubscription.subscribe(to:)()
{
  return MEMORY[0x270EFCB98]();
}

uint64_t type metadata accessor for EventSubscription()
{
  return MEMORY[0x270EFCBA0]();
}

uint64_t EventSubscription.init(_:)()
{
  return MEMORY[0x270EFCBA8]();
}

uint64_t FromToByAnimation.init(name:from:to:by:duration:timing:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)()
{
  return MEMORY[0x270EFCBB0]();
}

uint64_t AssetDescriptorRef.__as<A>(_:)()
{
  return MEMORY[0x270EFCBC8]();
}

uint64_t type metadata accessor for AssetDescriptorRef()
{
  return MEMORY[0x270EFCBD0]();
}

uint64_t type metadata accessor for MaterialParameters.Texture()
{
  return MEMORY[0x270EFCBD8]();
}

uint64_t SceneUpdateContext.scene.getter()
{
  return MEMORY[0x270EFCBF0]();
}

uint64_t SceneUpdateContext.entities(matching:updatingSystemWhen:)()
{
  return MEMORY[0x270EFCBF8]();
}

uint64_t SceneUpdateContext.deltaTime.getter()
{
  return MEMORY[0x270EFCC00]();
}

uint64_t type metadata accessor for AnimationRepeatMode()
{
  return MEMORY[0x270EFCC18]();
}

uint64_t static SystemUpdateCondition.rendering.getter()
{
  return MEMORY[0x270EFCCC0]();
}

uint64_t type metadata accessor for SystemUpdateCondition()
{
  return MEMORY[0x270EFCCC8]();
}

uint64_t SpatialTrackingManager.init(serviceManager:arkitRunnable:)()
{
  return MEMORY[0x270EFCCF8]();
}

uint64_t static SpatialTrackingManager.shared.getter()
{
  return MEMORY[0x270EFCD00]();
}

uint64_t static SpatialTrackingManager.shared.setter()
{
  return MEMORY[0x270EFCD08]();
}

uint64_t type metadata accessor for SpatialTrackingManager()
{
  return MEMORY[0x270EFCD10]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.face.getter()
{
  return MEMORY[0x270EFCD18]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.image.getter()
{
  return MEMORY[0x270EFCD20]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter()
{
  return MEMORY[0x270EFCD28]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.world.getter()
{
  return MEMORY[0x270EFCD30]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.camera.getter()
{
  return MEMORY[0x270EFCD38]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.object.getter()
{
  return MEMORY[0x270EFCD40]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability()
{
  return MEMORY[0x270EFCD48]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.shadow.getter()
{
  return MEMORY[0x270EFCD50]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.physics.getter()
{
  return MEMORY[0x270EFCD58]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.collision.getter()
{
  return MEMORY[0x270EFCD60]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.occlusion.getter()
{
  return MEMORY[0x270EFCD68]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability()
{
  return MEMORY[0x270EFCD70]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration.Camera()
{
  return MEMORY[0x270EFCD78]();
}

uint64_t SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)()
{
  return MEMORY[0x270EFCD80]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration()
{
  return MEMORY[0x270EFCD88]();
}

uint64_t type metadata accessor for SpatialTrackingSession.UnavailableCapabilities()
{
  return MEMORY[0x270EFCD90]();
}

uint64_t SpatialTrackingSession.init()()
{
  return MEMORY[0x270EFCDB0]();
}

uint64_t type metadata accessor for SpatialTrackingSession()
{
  return MEMORY[0x270EFCDB8]();
}

uint64_t PhysicallyBasedMaterial.EmissiveColor.init(color:texture:)()
{
  return MEMORY[0x270EFD258]();
}

uint64_t type metadata accessor for PhysicallyBasedMaterial.EmissiveColor()
{
  return MEMORY[0x270EFCDD0]();
}

uint64_t PhysicallyBasedMaterial.emissiveColor.setter()
{
  return MEMORY[0x270EFCDD8]();
}

uint64_t PhysicallyBasedMaterial.emissiveIntensity.setter()
{
  return MEMORY[0x270EFCDE0]();
}

uint64_t PhysicallyBasedMaterial.BaseColor.init(tint:texture:)()
{
  return MEMORY[0x270EFD260]();
}

uint64_t type metadata accessor for PhysicallyBasedMaterial.BaseColor()
{
  return MEMORY[0x270EFCDF0]();
}

uint64_t PhysicallyBasedMaterial.baseColor.setter()
{
  return MEMORY[0x270EFCDF8]();
}

uint64_t PhysicallyBasedMaterial.init()()
{
  return MEMORY[0x270EFCE00]();
}

uint64_t type metadata accessor for PhysicallyBasedMaterial()
{
  return MEMORY[0x270EFCE08]();
}

uint64_t _StoredEventSubscription.__allocating_init(to:on:componentType:_:)()
{
  return MEMORY[0x270EFCE18]();
}

uint64_t type metadata accessor for _StoredEventSubscription()
{
  return MEMORY[0x270EFCE20]();
}

uint64_t static PhotogrammetryFileHelpers.byteFormatter.getter()
{
  return MEMORY[0x270EFCE48]();
}

uint64_t static PhotogrammetryFileHelpers.temporaryDirectory.getter()
{
  return MEMORY[0x270EFCE50]();
}

uint64_t static PhotogrammetryFileHelpers.getAvailableStorage(ofDir:)()
{
  return MEMORY[0x270EFCE58]();
}

uint64_t static PhotogrammetryFileHelpers.ensureDirectoryExists(directory:)()
{
  return MEMORY[0x270EFCE60]();
}

uint64_t static PhotogrammetryFileHelpers.requiredBytesCheckpointDir(maxNumImagesBytes:)()
{
  return MEMORY[0x270EFCE68]();
}

uint64_t static PhotogrammetryFileHelpers.requiredBytesForImagesCaptureDirectory.getter()
{
  return MEMORY[0x270EFCE70]();
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.publishUpdate(_:)()
{
  return MEMORY[0x270EFCE78]();
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.makeUpdater()()
{
  return MEMORY[0x270EFCE80]();
}

uint64_t AsyncUpdateStreamContainer.init(name:)()
{
  return MEMORY[0x270EFCE88]();
}

uint64_t type metadata accessor for _Proto_AntialiasingMode_v1()
{
  return MEMORY[0x270EFCE90]();
}

uint64_t Atomic.init(wrappedValue:)()
{
  return MEMORY[0x270EFCEC8]();
}

uint64_t Atomic.wrappedValue.getter()
{
  return MEMORY[0x270EFCED0]();
}

uint64_t Atomic.wrappedValue.setter()
{
  return MEMORY[0x270EFCED8]();
}

uint64_t type metadata accessor for Atomic()
{
  return MEMORY[0x270EFCEE0]();
}

uint64_t static System.registerSystem()()
{
  return MEMORY[0x270EFCEE8]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t dispatch thunk of OCDataBuffer.asMTLBuffer(from:)()
{
  return MEMORY[0x270F1A8F8]();
}

uint64_t dispatch thunk of OCDataBuffer.count.getter()
{
  return MEMORY[0x270F1A900]();
}

uint64_t ObjectCaptureSession.init(arSession:mtlDevice:motionManager:snapshotURL:configuration:)()
{
  return MEMORY[0x270F1A908]();
}

uint64_t dispatch thunk of ObjectCaptureSession.resetCapturePoseGraph()()
{
  return MEMORY[0x270F1A910]();
}

uint64_t dispatch thunk of ObjectCaptureSession.detectObject(at:)()
{
  return MEMORY[0x270F1A918]();
}

uint64_t ObjectCaptureSession.CaptureOptions.usePlaneFiltering.setter()
{
  return MEMORY[0x270F1A920]();
}

uint64_t ObjectCaptureSession.CaptureOptions.useFreeformScanVolume.setter()
{
  return MEMORY[0x270F1A928]();
}

uint64_t ObjectCaptureSession.CaptureOptions.freeformPointDensityThreshold.setter()
{
  return MEMORY[0x270F1A930]();
}

uint64_t ObjectCaptureSession.CaptureOptions.init()()
{
  return MEMORY[0x270F1A938]();
}

uint64_t type metadata accessor for ObjectCaptureSession.CaptureOptions()
{
  return MEMORY[0x270F1A940]();
}

uint64_t ObjectCaptureSession.Configuration.enableOverCapture.setter()
{
  return MEMORY[0x270F1A948]();
}

uint64_t ObjectCaptureSession.Configuration.init()()
{
  return MEMORY[0x270F1A950]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Configuration()
{
  return MEMORY[0x270F1A958]();
}

uint64_t ObjectCaptureSession.HardwareSpecs.maxNumImages.getter()
{
  return MEMORY[0x270F1A960]();
}

uint64_t type metadata accessor for ObjectCaptureSession.HardwareSpecs()
{
  return MEMORY[0x270F1A968]();
}

uint64_t static ObjectCaptureSession.hardwareSpecs.getter()
{
  return MEMORY[0x270F1A970]();
}

uint64_t dispatch thunk of ObjectCaptureSession.startCapturing(inside:with:)()
{
  return MEMORY[0x270F1A978]();
}

uint64_t dispatch thunk of ObjectCaptureSession.takeManualShot()()
{
  return MEMORY[0x270F1A980]();
}

uint64_t dispatch thunk of ObjectCaptureSession.objectFlippable.getter()
{
  return MEMORY[0x270F1A988]();
}

uint64_t dispatch thunk of ObjectCaptureSession.canTakeManualShot.getter()
{
  return MEMORY[0x270F1A990]();
}

uint64_t ObjectCaptureSession.writingPublishers.getter()
{
  return MEMORY[0x270F1A998]();
}

uint64_t dispatch thunk of ObjectCaptureSession.captureCoolDownTime.getter()
{
  return MEMORY[0x270F1A9A0]();
}

uint64_t ObjectCaptureSession.observingPublishers.getter()
{
  return MEMORY[0x270F1A9A8]();
}

uint64_t dispatch thunk of ObjectCaptureSession.isFreeformModeEnabled.getter()
{
  return MEMORY[0x270F1A9B0]();
}

uint64_t static ObjectCaptureSession.isCurrentDeviceSupported.getter()
{
  return MEMORY[0x270F1A9B8]();
}

uint64_t dispatch thunk of ObjectCaptureSession.updateFreeformScanVolume(boundingBox:)()
{
  return MEMORY[0x270F1A9C0]();
}

uint64_t dispatch thunk of ObjectCaptureSession.run()()
{
  return MEMORY[0x270F1A9C8]();
}

uint64_t dispatch thunk of ObjectCaptureSession.spi.getter()
{
  return MEMORY[0x270F1A9D0]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.identifier.getter()
{
  return MEMORY[0x270F1A9D8]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.colors.getter()
{
  return MEMORY[0x270F1A9E0]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.corner.getter()
{
  return MEMORY[0x270F1A9E8]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.extent.getter()
{
  return MEMORY[0x270F1A9F0]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.normals.getter()
{
  return MEMORY[0x270F1A9F8]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.vertices.getter()
{
  return MEMORY[0x270F1AA00]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.didRemove.getter()
{
  return MEMORY[0x270F1AA08]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.transform.getter()
{
  return MEMORY[0x270F1AA10]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Mesh.Anchor()
{
  return MEMORY[0x270F1AA18]();
}

uint64_t ObjectCaptureSession.Mesh.anchors.getter()
{
  return MEMORY[0x270F1AA20]();
}

uint64_t static ObjectCaptureSession.Error.== infix(_:_:)()
{
  return MEMORY[0x270F1AA28]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Error()
{
  return MEMORY[0x270F1AA30]();
}

uint64_t ObjectCaptureSession.Frame.Object.boundingBox.getter()
{
  return MEMORY[0x270F1AA38]();
}

uint64_t ObjectCaptureSession.Frame.Object.transform.getter()
{
  return MEMORY[0x270F1AA40]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Frame.Object()
{
  return MEMORY[0x270F1AA48]();
}

uint64_t ObjectCaptureSession.Frame.PointCloud.points.getter()
{
  return MEMORY[0x270F1AA50]();
}

uint64_t ObjectCaptureSession.Frame.PointCloud.transform.getter()
{
  return MEMORY[0x270F1AA58]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Frame.PointCloud()
{
  return MEMORY[0x270F1AA60]();
}

uint64_t ObjectCaptureSession.Frame.pointCloud.getter()
{
  return MEMORY[0x270F1AA68]();
}

uint64_t ObjectCaptureSession.Frame.Camera.trackingState.getter()
{
  return MEMORY[0x270F1AA70]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Frame.Camera()
{
  return MEMORY[0x270F1AA78]();
}

uint64_t ObjectCaptureSession.Frame.camera.getter()
{
  return MEMORY[0x270F1AA80]();
}

uint64_t ObjectCaptureSession.Frame.object.getter()
{
  return MEMORY[0x270F1AA88]();
}

uint64_t static ObjectCaptureSession.Frame.Feedback.outOfFieldOfView.getter()
{
  return MEMORY[0x270F1AA90]();
}

uint64_t static ObjectCaptureSession.Frame.Feedback.tooFar.getter()
{
  return MEMORY[0x270F1AA98]();
}

uint64_t static ObjectCaptureSession.Frame.Feedback.tooDark.getter()
{
  return MEMORY[0x270F1AAA0]();
}

uint64_t static ObjectCaptureSession.Frame.Feedback.tooFast.getter()
{
  return MEMORY[0x270F1AAA8]();
}

uint64_t static ObjectCaptureSession.Frame.Feedback.lowLight.getter()
{
  return MEMORY[0x270F1AAB0]();
}

uint64_t static ObjectCaptureSession.Frame.Feedback.tooClose.getter()
{
  return MEMORY[0x270F1AAB8]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Frame.Feedback()
{
  return MEMORY[0x270F1AAC0]();
}

uint64_t ObjectCaptureSession.Frame.feedback.getter()
{
  return MEMORY[0x270F1AAC8]();
}

uint64_t static ObjectCaptureSession.State.== infix(_:_:)()
{
  return MEMORY[0x270F1AAD0]();
}

uint64_t type metadata accessor for ObjectCaptureSession.State()
{
  return MEMORY[0x270F1AAD8]();
}

uint64_t dispatch thunk of ObjectCaptureSession.pause(fastResuming:)()
{
  return MEMORY[0x270F1AAE0]();
}

uint64_t dispatch thunk of ObjectCaptureSession.$state.getter()
{
  return MEMORY[0x270F1AAF0]();
}

uint64_t ObjectCaptureSession.Metadata.Shot.Camera.transform.getter()
{
  return MEMORY[0x270F1AB10]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Metadata.Shot.Camera()
{
  return MEMORY[0x270F1AB18]();
}

uint64_t ObjectCaptureSession.Metadata.Shot.camera.getter()
{
  return MEMORY[0x270F1AB20]();
}

uint64_t ObjectCaptureSession.Metadata.Shot.timestamp.getter()
{
  return MEMORY[0x270F1AB28]();
}

uint64_t type metadata accessor for ObjectCaptureSession()
{
  return MEMORY[0x270F1AB30]();
}

uint64_t type metadata accessor for PhotogrammetrySession()
{
  return MEMORY[0x270F1AD70]();
}

uint64_t dispatch thunk of ObjectCaptureSessionSPI.setAutoCapture(_:for:)()
{
  return MEMORY[0x270F1AD78]();
}

uint64_t dispatch thunk of ObjectCaptureSessionSPI.setDebugTapPosition(_:for:)()
{
  return MEMORY[0x270F1AD80]();
}

uint64_t dispatch thunk of ObjectCaptureSessionSPI.setMobileSfMEnabled(_:for:)()
{
  return MEMORY[0x270F1AD88]();
}

uint64_t ObjectCaptureHEICBundleWriter.init(publishers:url:)()
{
  return MEMORY[0x270F1AD90]();
}

uint64_t dispatch thunk of ObjectCaptureHEICBundleWriter.completionPublisher.getter()
{
  return MEMORY[0x270F1AD98]();
}

uint64_t dispatch thunk of ObjectCaptureHEICBundleWriter.activeWriteQueueSize.getter()
{
  return MEMORY[0x270F1ADA0]();
}

uint64_t type metadata accessor for ObjectCaptureHEICBundleWriter()
{
  return MEMORY[0x270F1ADA8]();
}

uint64_t dispatch thunk of ObjectCaptureSessionWritingPublishers.shotPublisher.getter()
{
  return MEMORY[0x270F1ADC0]();
}

uint64_t dispatch thunk of ObjectCaptureSessionWritingPublishers.shotMetadataPublisher.getter()
{
  return MEMORY[0x270F1ADC8]();
}

uint64_t dispatch thunk of ObjectCaptureSessionObservingPublishers.meshPublisher.getter()
{
  return MEMORY[0x270F1ADD0]();
}

uint64_t dispatch thunk of ObjectCaptureSessionObservingPublishers.framePublisher.getter()
{
  return MEMORY[0x270F1ADD8]();
}

uint64_t dispatch thunk of ObjectCaptureSessionObservingPublishers.tapPositionPublisher.getter()
{
  return MEMORY[0x270F1ADE0]();
}

uint64_t noErr.getter()
{
  return MEMORY[0x270FA08E0]();
}

uint64_t dispatch thunk of Cancellable.cancel()()
{
  return MEMORY[0x270EE3AF8]();
}

uint64_t AnyCancellable.store(in:)()
{
  return MEMORY[0x270EE3B98]();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x270EE3BB0]();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return MEMORY[0x270EE3C20]();
}

uint64_t ConnectablePublisher.autoconnect()()
{
  return MEMORY[0x270EE3CC0]();
}

uint64_t Published.init(initialValue:)()
{
  return MEMORY[0x270EE3DA8]();
}

uint64_t Published.projectedValue.getter()
{
  return MEMORY[0x270EE3DB0]();
}

uint64_t static Published.subscript.modify()
{
  return MEMORY[0x270EE3DD0]();
}

uint64_t static Published.subscript.getter()
{
  return MEMORY[0x270EE3DD8]();
}

uint64_t static Published.subscript.setter()
{
  return MEMORY[0x270EE3DE0]();
}

uint64_t type metadata accessor for Published()
{
  return MEMORY[0x270EE3DF0]();
}

uint64_t Publisher.sink(receiveCompletion:receiveValue:)()
{
  return MEMORY[0x270EE3E98]();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return MEMORY[0x270EE3F78]();
}

uint64_t Publisher<>.makeConnectable()()
{
  return MEMORY[0x270EE3FF8]();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return MEMORY[0x270EE4008]();
}

uint64_t type metadata accessor for AnyGesture()
{
  return MEMORY[0x270EFEBD8]();
}

uint64_t AnyGesture.init<A>(_:)()
{
  return MEMORY[0x270EFEBE0]();
}

uint64_t TapGesture.init(count:)()
{
  return MEMORY[0x270EFEE70]();
}

uint64_t type metadata accessor for TapGesture()
{
  return MEMORY[0x270EFEE78]();
}

uint64_t static ColorScheme.== infix(_:_:)()
{
  return MEMORY[0x270EFEF10]();
}

uint64_t type metadata accessor for ColorScheme()
{
  return MEMORY[0x270EFEF30]();
}

uint64_t DragGesture.init<A>(minimumDistance:coordinateSpace:)()
{
  return MEMORY[0x270EFEF58]();
}

uint64_t DragGesture.Value.predictedEndLocation.getter()
{
  return MEMORY[0x270EFEF88]();
}

uint64_t DragGesture.Value.location.getter()
{
  return MEMORY[0x270EFEFA0]();
}

uint64_t type metadata accessor for DragGesture()
{
  return MEMORY[0x270EFEFB8]();
}

uint64_t type metadata accessor for Environment.Content()
{
  return MEMORY[0x270EFEFD0]();
}

uint64_t static GestureMask.all.getter()
{
  return MEMORY[0x270EFF008]();
}

uint64_t static GestureMask.subviews.getter()
{
  return MEMORY[0x270EFF010]();
}

uint64_t StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)()
{
  return MEMORY[0x270EFF128]();
}

uint64_t Transaction.disablesAnimations.setter()
{
  return MEMORY[0x270EFF1B8]();
}

uint64_t type metadata accessor for _MapGesture()
{
  return MEMORY[0x270EFF258]();
}

uint64_t static ViewModifier._viewListCount(inputs:body:)()
{
  return MEMORY[0x270EFF538]();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return MEMORY[0x270EFF598]();
}

uint64_t AnyShapeStyle.init<A>(_:)()
{
  return MEMORY[0x270EFF5E0]();
}

uint64_t AnyTransition.init<A>(_:)()
{
  return MEMORY[0x270EFF648]();
}

uint64_t GeometryProxy.size.getter()
{
  return MEMORY[0x270EFF6D0]();
}

uint64_t GeometryProxy.frame(in:)()
{
  return MEMORY[0x270EFF6E0]();
}

uint64_t type metadata accessor for GeometryProxy()
{
  return MEMORY[0x270EFF6F8]();
}

uint64_t static PreferenceKey._includesRemovedValues.getter()
{
  return MEMORY[0x270EFF898]();
}

uint64_t type metadata accessor for _EndedGesture()
{
  return MEMORY[0x270EFF8E8]();
}

uint64_t type metadata accessor for _TaskModifier()
{
  return MEMORY[0x270EFF908]();
}

uint64_t withAnimation<A>(_:_:)()
{
  return MEMORY[0x270EFF940]();
}

uint64_t GeometryReader.init(content:)()
{
  return MEMORY[0x270EFFA08]();
}

uint64_t type metadata accessor for GeometryReader()
{
  return MEMORY[0x270EFFA10]();
}

uint64_t MagnifyGesture.init(minimumScaleDelta:)()
{
  return MEMORY[0x270EFFA88]();
}

uint64_t MagnifyGesture.Value.magnification.getter()
{
  return MEMORY[0x270EFFA90]();
}

uint64_t type metadata accessor for MagnifyGesture()
{
  return MEMORY[0x270EFFA98]();
}

uint64_t ObservedObject.init(wrappedValue:)()
{
  return MEMORY[0x270EFFB80]();
}

uint64_t type metadata accessor for CoordinateSpace()
{
  return MEMORY[0x270EFFE40]();
}

uint64_t type metadata accessor for ModifiedContent()
{
  return MEMORY[0x270F001A8]();
}

uint64_t static SafeAreaRegions.all.getter()
{
  return MEMORY[0x270F00220]();
}

uint64_t withTransaction<A>(_:_:)()
{
  return MEMORY[0x270F00340]();
}

uint64_t EnvironmentValues.colorScheme.getter()
{
  return MEMORY[0x270F008D0]();
}

uint64_t EnvironmentValues.colorScheme.setter()
{
  return MEMORY[0x270F008D8]();
}

uint64_t EnvironmentValues.backgroundStyle.getter()
{
  return MEMORY[0x270F009E0]();
}

uint64_t EnvironmentValues.backgroundStyle.setter()
{
  return MEMORY[0x270F009E8]();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return MEMORY[0x270F00A20]();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return MEMORY[0x270F00A30]();
}

uint64_t EnvironmentValues.allowedDynamicRange.getter()
{
  return MEMORY[0x270F00B98]();
}

uint64_t EnvironmentValues.allowedDynamicRange.setter()
{
  return MEMORY[0x270F00BA0]();
}

uint64_t EnvironmentValues.init()()
{
  return MEMORY[0x270F00ED8]();
}

uint64_t type metadata accessor for EnvironmentValues()
{
  return MEMORY[0x270F00EE0]();
}

uint64_t EnvironmentValues.subscript.getter()
{
  return MEMORY[0x270F00F10]();
}

uint64_t EnvironmentValues.subscript.setter()
{
  return MEMORY[0x270F00F20]();
}

uint64_t OpacityTransition.init()()
{
  return MEMORY[0x270F00FA0]();
}

uint64_t type metadata accessor for OpacityTransition()
{
  return MEMORY[0x270F00FA8]();
}

uint64_t static VerticalAlignment.center.getter()
{
  return MEMORY[0x270F01070]();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)()
{
  return MEMORY[0x270F011F0]();
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return MEMORY[0x270F01248]();
}

uint64_t type metadata accessor for LocalizedStringKey.StringInterpolation()
{
  return MEMORY[0x270F01258]();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return MEMORY[0x270F01270]();
}

uint64_t LocalizedStringKey.init(stringInterpolation:)()
{
  return MEMORY[0x270F01280]();
}

uint64_t static HorizontalAlignment.center.getter()
{
  return MEMORY[0x270F01510]();
}

uint64_t UIViewRepresentable.sizeThatFits(_:uiView:context:)()
{
  return MEMORY[0x270F01708]();
}

uint64_t UIViewRepresentable.body.getter()
{
  return MEMORY[0x270F01778]();
}

uint64_t type metadata accessor for _ConditionalContent.Storage()
{
  return MEMORY[0x270F017F8]();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return MEMORY[0x270F01800]();
}

uint64_t type metadata accessor for _ConditionalContent()
{
  return MEMORY[0x270F01818]();
}

uint64_t type metadata accessor for LocalCoordinateSpace()
{
  return MEMORY[0x270F018D8]();
}

uint64_t dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter()
{
  return MEMORY[0x270F01F68]();
}

uint64_t static CoordinateSpaceProtocol<>.local.getter()
{
  return MEMORY[0x270F01F70]();
}

uint64_t PlatformViewHitTestFilterGesture.Value.gestureValue.getter()
{
  return MEMORY[0x270F02840]();
}

uint64_t type metadata accessor for PlatformViewHitTestFilterGesture.Value()
{
  return MEMORY[0x270F02848]();
}

uint64_t type metadata accessor for PlatformViewHitTestFilterGesture()
{
  return MEMORY[0x270F02850]();
}

uint64_t PlatformViewHitTestFilterGesture.init(_:filter:)()
{
  return MEMORY[0x270F02858]();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return MEMORY[0x270F029E0]();
}

uint64_t static Edge.Set.all.getter()
{
  return MEMORY[0x270F02A30]();
}

uint64_t static Edge.Set.leading.getter()
{
  return MEMORY[0x270F02A60]();
}

uint64_t static Edge.Set.trailing.getter()
{
  return MEMORY[0x270F02A78]();
}

uint64_t static Font.Weight.bold.getter()
{
  return MEMORY[0x270F02BC0]();
}

uint64_t Path.cgPath.getter()
{
  return MEMORY[0x270F02E18]();
}

Swift::Void __swiftcall Path.move(to:)(CGPoint to)
{
  MEMORY[0x270F02E88]((__n128)__PAIR128__(v1, *(unint64_t *)&to.x), (__n128)__PAIR128__(v2, *(unint64_t *)&to.y));
}

uint64_t Path.addArc(tangent1End:tangent2End:radius:transform:)()
{
  return MEMORY[0x270F02E98]();
}

Swift::Void __swiftcall Path.addLine(to:)(CGPoint to)
{
  MEMORY[0x270F02EA8]((__n128)__PAIR128__(v1, *(unint64_t *)&to.x), (__n128)__PAIR128__(v2, *(unint64_t *)&to.y));
}

uint64_t Path.init(_:)()
{
  return MEMORY[0x270F02F08]();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return MEMORY[0x270F03228]();
}

uint64_t View.fontWeight(_:)()
{
  return MEMORY[0x270F03360]();
}

uint64_t View.environment<A>(_:_:)()
{
  return MEMORY[0x270F034A0]();
}

uint64_t View.onDisappear(perform:)()
{
  return MEMORY[0x270F034E8]();
}

uint64_t static View._viewListCount(inputs:)()
{
  return MEMORY[0x270F036C0]();
}

uint64_t View.allowsHitTesting(_:)()
{
  return MEMORY[0x270F03850]();
}

uint64_t View.onContinuousHover<A>(coordinateSpace:perform:)()
{
  return MEMORY[0x270F03950]();
}

uint64_t View.edgesIgnoringSafeArea(_:)()
{
  return MEMORY[0x270F03C68]();
}

uint64_t View.id<A>(_:)()
{
  return MEMORY[0x270F03E80]();
}

uint64_t View.task(priority:_:)()
{
  return MEMORY[0x270F03F30]();
}

uint64_t View.frame(width:height:alignment:)()
{
  return MEMORY[0x270F03FE8]();
}

uint64_t View.gesture<A>(_:including:)()
{
  return MEMORY[0x270F040B0]();
}

uint64_t View.padding(_:_:)()
{
  return MEMORY[0x270F04110]();
}

uint64_t View.onAppear(perform:)()
{
  return MEMORY[0x270F04178]();
}

uint64_t View.fixedSize()()
{
  return MEMORY[0x270F04218]();
}

uint64_t type metadata accessor for Color.RGBColorSpace()
{
  return MEMORY[0x270F043A8]();
}

uint64_t static Color.clear.getter()
{
  return MEMORY[0x270F04478]();
}

uint64_t static Color.white.getter()
{
  return MEMORY[0x270F04498]();
}

uint64_t static Color.yellow.getter()
{
  return MEMORY[0x270F044D8]();
}

uint64_t Color.opacity(_:)()
{
  return MEMORY[0x270F044E8]();
}

uint64_t Color.init(_:white:opacity:)()
{
  return MEMORY[0x270F04580]();
}

uint64_t Group<A>.init(content:)()
{
  return MEMORY[0x270F04608]();
}

uint64_t type metadata accessor for Group()
{
  return MEMORY[0x270F04620]();
}

uint64_t Image.init(systemName:)()
{
  return MEMORY[0x270F04650]();
}

uint64_t static Image.DynamicRange.constrainedHigh.getter()
{
  return MEMORY[0x270F04670]();
}

uint64_t static Image.DynamicRange.high.getter()
{
  return MEMORY[0x270F04678]();
}

uint64_t type metadata accessor for Image.DynamicRange()
{
  return MEMORY[0x270F04680]();
}

uint64_t type metadata accessor for Image.ResizingMode()
{
  return MEMORY[0x270F04690]();
}

uint64_t Image.resizable(capInsets:resizingMode:)()
{
  return MEMORY[0x270F04718]();
}

uint64_t State.init(wrappedValue:)()
{
  return MEMORY[0x270F04818]();
}

uint64_t State.wrappedValue.getter()
{
  return MEMORY[0x270F04820]();
}

uint64_t State.wrappedValue.setter()
{
  return MEMORY[0x270F04830]();
}

uint64_t State.projectedValue.getter()
{
  return MEMORY[0x270F04848]();
}

uint64_t type metadata accessor for State()
{
  return MEMORY[0x270F04850]();
}

uint64_t Button.init(action:label:)()
{
  return MEMORY[0x270F048B0]();
}

uint64_t HStack.init(alignment:spacing:content:)()
{
  return MEMORY[0x270F04950]();
}

uint64_t type metadata accessor for HStack()
{
  return MEMORY[0x270F04960]();
}

uint64_t type metadata accessor for IDView()
{
  return MEMORY[0x270F04978]();
}

uint64_t VStack.init(alignment:spacing:content:)()
{
  return MEMORY[0x270F04AF0]();
}

uint64_t type metadata accessor for VStack()
{
  return MEMORY[0x270F04AF8]();
}

uint64_t ZStack.init(alignment:content:)()
{
  return MEMORY[0x270F04B08]();
}

uint64_t type metadata accessor for ZStack()
{
  return MEMORY[0x270F04B10]();
}

uint64_t Binding.wrappedValue.setter()
{
  return MEMORY[0x270F04B48]();
}

uint64_t Gesture.map<A>(_:)()
{
  return MEMORY[0x270F04CD8]();
}

uint64_t Gesture.onEnded(_:)()
{
  return MEMORY[0x270F04CE8]();
}

uint64_t Gesture<>.onChanged(_:)()
{
  return MEMORY[0x270F04CF0]();
}

uint64_t static Alignment.center.getter()
{
  return MEMORY[0x270F05078]();
}

uint64_t static Animation.linear(duration:)()
{
  return MEMORY[0x270F05110]();
}

uint64_t static Animation.default.getter()
{
  return MEMORY[0x270F05140]();
}

uint64_t static Animation.easeOut(duration:)()
{
  return MEMORY[0x270F05148]();
}

uint64_t static Animation.easeInOut(duration:)()
{
  return MEMORY[0x270F05160]();
}

uint64_t type metadata accessor for TupleView()
{
  return MEMORY[0x270F05320]();
}

uint64_t TupleView.init(_:)()
{
  return MEMORY[0x270F05330]();
}

uint64_t static UnitPoint.center.getter()
{
  return MEMORY[0x270F053C8]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t static DispatchQoS.userInteractive.getter()
{
  return MEMORY[0x270FA0A10]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t DispatchTime.uptimeNanoseconds.getter()
{
  return MEMORY[0x270FA0A98]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x270FA0AC0]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x270FA0B00]();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return MEMORY[0x270FA0BA8]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x270FA0BC8]();
}

uint64_t - infix(_:_:)()
{
  return MEMORY[0x270FA0BE8]();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return MEMORY[0x270FA0BF0]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x270EF1818]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1840]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x270F9D318]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x270F9D320]();
}

uint64_t dispatch thunk of Hashable.hashValue.getter()
{
  return MEMORY[0x270F9D328]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x270F9D478]();
}

uint64_t type metadata accessor for ClosedRange()
{
  return MEMORY[0x270F9D550]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x270EF19B0]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF19C8]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF19E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x270EF1A10]();
}

uint64_t String.init(cString:encoding:)()
{
  return MEMORY[0x270EF1A58]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x270EF1AA8]();
}

uint64_t static String.Encoding.ascii.getter()
{
  return MEMORY[0x270EF1AB8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x270EF1AD0]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x270F9D5E0]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = MEMORY[0x270F9D5F8]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x270F9D648]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x270F9D748]();
}

uint64_t String.index(before:)()
{
  return MEMORY[0x270F9D750]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0 = MEMORY[0x270F9D7D8]();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x270F9D8B0]();
}

{
  return MEMORY[0x270F9D8F0]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x270F9D968]();
}

uint64_t Sequence<>.joined(separator:)()
{
  return MEMORY[0x270F9DA28]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9DBA0]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x270EF1B88]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x270FA1EA0]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x270FA1EA8]();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return MEMORY[0x270FA1EC0]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x270FA1F10]();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return MEMORY[0x270FA1F60]();
}

uint64_t type metadata accessor for AsyncStream.Iterator()
{
  return MEMORY[0x270FA1F78]();
}

uint64_t type metadata accessor for AsyncStream()
{
  return MEMORY[0x270FA1F88]();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t Float.init(_:)()
{
  return MEMORY[0x270F9DE88]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x270EF1C98]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1CC0]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x270F9DEB0]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x270F9E080]();
}

uint64_t dispatch thunk of Collection.distance(from:to:)()
{
  return MEMORY[0x270F9E0D0]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x270F9E0D8]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x270F9E0E0]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x270F9E1E0]();
}

uint64_t static simd_quatf.identity.getter()
{
  return MEMORY[0x270EFCEF8]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x270FA2E70]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x270FA2E80]();
}

void __swiftcall simd_float4x4.init(_:)(simd_float4x4 *__return_ptr retstr, simd_quatf *a2)
{
}

uint64_t simd_float4x4.scale(_:)()
{
  return MEMORY[0x270EFCF08]();
}

uint64_t simd_float4x4.transform(position:)()
{
  return MEMORY[0x270EFCF18]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x270FA0C50]();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return MEMORY[0x270FA0C78]();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return MEMORY[0x270FA0CD0]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x270FA0D50]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x270FA0D70]();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return MEMORY[0x270FA0D88]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x270FA0DA0]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x270FA0DB8]();
}

uint64_t type metadata accessor for NSNotificationCenter.Publisher()
{
  return MEMORY[0x270EF2010]();
}

uint64_t NSNotificationCenter.publisher(for:object:)()
{
  return MEMORY[0x270EF2020]();
}

uint64_t OS_geom_interpolating_curve_3f.init(keys:arcLengthParameterized:)()
{
  return MEMORY[0x270F302A8]();
}

uint64_t UIColor.init(_:)()
{
  return MEMORY[0x270F05438]();
}

uint64_t static ARCamera.TrackingState.== infix(_:_:)()
{
  return MEMORY[0x270F9C7B8]();
}

uint64_t type metadata accessor for ARCamera.TrackingState.Reason()
{
  return MEMORY[0x270F9C7C0]();
}

uint64_t type metadata accessor for ARCamera.TrackingState()
{
  return MEMORY[0x270F9C7C8]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x270FA1170](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x270FA1180]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x270FA1190]();
}

uint64_t _NSRange.init<A, B>(_:in:)()
{
  return MEMORY[0x270EF2200]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x270EF2478]();
}

uint64_t StringProtocol.compare<A>(_:options:range:locale:)()
{
  return MEMORY[0x270EF2590]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x270F9E670]();
}

uint64_t dispatch thunk of SetAlgebra.isSuperset(of:)()
{
  return MEMORY[0x270F9E730]();
}

uint64_t dispatch thunk of SetAlgebra.intersection(_:)()
{
  return MEMORY[0x270F9E740]();
}

uint64_t dispatch thunk of SetAlgebra.isEmpty.getter()
{
  return MEMORY[0x270F9E778]();
}

uint64_t dispatch thunk of SetAlgebra.subtract(_:)()
{
  return MEMORY[0x270F9E790]();
}

uint64_t dispatch thunk of SetAlgebra.formUnion(_:)()
{
  return MEMORY[0x270F9E798]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return MEMORY[0x270F9E810]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x270F9E818]();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return MEMORY[0x270F9E830]();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return MEMORY[0x270F9E838]();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return MEMORY[0x270F9E840]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x270F9E848]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x270F9E850]();
}

uint64_t __CocoaSet.element(at:)()
{
  return MEMORY[0x270F9E860]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x270F9E870]();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return MEMORY[0x270F9E880]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x270F9E958]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9E960]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x270F9E968]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9E970]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t Identifiable<>.id.getter()
{
  return MEMORY[0x270F9E9D8]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

{
  return MEMORY[0x270F9EFF0]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x270F9F080]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x270F9F098]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x270F9F230](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x270F9F300]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F318]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x270F9F440]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F458]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x270F9F4C8](a1);
}

uint64_t _stringCompareInternal(_:_:_:_:expecting:)()
{
  return MEMORY[0x270F9F4D0]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t SIMD.description.getter()
{
  return MEMORY[0x270F9FAD0]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t SIMD4<>._xyz.getter()
{
  return MEMORY[0x270EFCF28]();
}

uint64_t SIMD4<>._xyz.setter()
{
  return MEMORY[0x270EFCF30]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x270F9FC40]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t ARViewToCameraImageTransform()
{
  return MEMORY[0x270EDDF78]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  MEMORY[0x270EFB790]();
  return result;
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x270EE4838]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x270EE5960](retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x270EE5978](retstr, t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x270EE5998](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59A8](retstr, sx, sy);
}

CGColorRef CGColorCreateGenericGray(CGFloat gray, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x270EE5B70](gray, alpha);
}

CGPoint CGPointApplyAffineTransform(CGPoint point, CGAffineTransform *t)
{
  MEMORY[0x270EE7148](t, (__n128)point, *(__n128 *)&point.y);
  result.CGFloat y = v3;
  result.x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x270EE7170]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x270EE71A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x270EE7218]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x270EEA0E0](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x270EEA0F0](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x270EEA110](image);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x270EEA190](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1B0](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1E8](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA1F8](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x270EEA200](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA240](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA250](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x270EEA260](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x270EEA330](pixelBuffer, unlockFlags);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x270EF49D8](*(void *)&entry, key, allocator, *(void *)&options);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x270EF4AB0](*(void *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EF4AD0](name);
}

uint64_t IOSurfaceGetYCbCrMatrix()
{
  return MEMORY[0x270EF4DF8]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x270EF5E20]();
}

uint64_t REComponentGetEntity()
{
  return MEMORY[0x270F1D2F0]();
}

uint64_t REComponentMarkDirty()
{
  return MEMORY[0x270F1D300]();
}

uint64_t REConvertProjectionToMatrix4x4()
{
  return MEMORY[0x270F1D3E8]();
}

uint64_t RECustomMatrixCameraComponentAdjustProjectionAspect()
{
  return MEMORY[0x270F1D510]();
}

uint64_t RECustomMatrixCameraComponentCalculateProjection()
{
  return MEMORY[0x270F1D518]();
}

uint64_t RECustomMatrixCameraComponentGetComponentType()
{
  return MEMORY[0x270F1D528]();
}

uint64_t REEntityGetComponentByClass()
{
  return MEMORY[0x270F1DC10]();
}

uint64_t REEntityGetOrAddComponentByClass()
{
  return MEMORY[0x270F1DC40]();
}

uint64_t REHideEntity()
{
  return MEMORY[0x270F1E180]();
}

uint64_t REHierarchicalFadeComponentGetComponentType()
{
  return MEMORY[0x270F1E188]();
}

uint64_t REHierarchicalFadeComponentSetOpacity()
{
  return MEMORY[0x270F1E198]();
}

uint64_t REPerspectiveCameraComponentAdjustProjectionAspect()
{
  return MEMORY[0x270F1F168]();
}

uint64_t REPerspectiveCameraComponentCalculateProjectionWithAspectRatio()
{
  return MEMORY[0x270F1F170]();
}

uint64_t REPerspectiveCameraComponentGetComponentType()
{
  return MEMORY[0x270F1F178]();
}

uint64_t REPhysicsSimulationServiceSetAnchorShouldHaveSharedSimulationByDefault()
{
  return MEMORY[0x270F1F328]();
}

uint64_t REProjectionClipSpaceNearZ()
{
  return MEMORY[0x270F1F588]();
}

uint64_t REProjectionUnprojectPoint()
{
  return MEMORY[0x270F1F590]();
}

uint64_t RERelease()
{
  return MEMORY[0x270F1F850]();
}

uint64_t RERemoteEffectsServiceAddHitTestData()
{
  return MEMORY[0x270F1F8F0]();
}

uint64_t RERemoteEffectsServiceHitTestDataSetLocation()
{
  return MEMORY[0x270F1F8F8]();
}

uint64_t RERemoteEffectsServiceHitTestDataSetSource()
{
  return MEMORY[0x270F1F900]();
}

uint64_t RERemoteEffectsServiceHitTestDataSetTargetEntity()
{
  return MEMORY[0x270F1F908]();
}

uint64_t RERemoteEffectsServiceHoverEffectSettingsCreate()
{
  return MEMORY[0x270F1F910]();
}

uint64_t RERemoteEffectsServiceInvalidateHitTestData()
{
  return MEMORY[0x270F1F918]();
}

uint64_t RESceneGetComponentsOfClass()
{
  return MEMORY[0x270F1FCB8]();
}

uint64_t REServiceLocatorGetPhysicsSimulationService()
{
  return MEMORY[0x270F1FF28]();
}

uint64_t REServiceLocatorGetRemoteEffectsService()
{
  return MEMORY[0x270F1FF30]();
}

uint64_t RETransformComponentGetComponentType()
{
  return MEMORY[0x270F20F50]();
}

uint64_t RETransformComponentGetWorldMatrix4x4F()
{
  return MEMORY[0x270F20F80]();
}

void UIGraphicsPopContext(void)
{
}

void UIGraphicsPushContext(CGContextRef context)
{
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  MEMORY[0x270ED7E20]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x270ED7E90](a1);
  result.__cosval = v2;
  result.__float sinval = v1;
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

float acosf(float a1)
{
  MEMORY[0x270ED8598](a1);
  return result;
}

float asinf(float a1)
{
  MEMORY[0x270ED8618](a1);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x270ED86B8](a1, a2);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x270ED86C0](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void free(void *a1)
{
}

uint64_t geom_interpolating_curve_evaluate_at_3f()
{
  return MEMORY[0x270F30360]();
}

uint64_t geom_interpolating_curve_evaluate_tangent_at_3f()
{
  return MEMORY[0x270F30368]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x270EDA168](*(void *)&error_value);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x270EDB4F0](a1);
  return result;
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x270FA0228]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x270FA0288]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x270FA0310]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x270FA03F0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x270FA0420]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x270FA0430]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x270FA0470]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x270FA0480]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x270FA0498]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x270FA0568]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x270FA0598]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x270FA05D0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x270FA05F0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x270FA05F8]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x270FA0610]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x270FA0618]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x270FA0620]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x270FA0630]();
}

uint64_t swift_weakCopyAssign()
{
  return MEMORY[0x270FA0638]();
}

uint64_t swift_weakCopyInit()
{
  return MEMORY[0x270FA0640]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x270FA0648]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}

uint64_t swift_weakTakeAssign()
{
  return MEMORY[0x270FA0660]();
}

uint64_t swift_weakTakeInit()
{
  return MEMORY[0x270FA0668]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

float tanf(float a1)
{
  MEMORY[0x270EDB818](a1);
  return result;
}

float tanhf(float a1)
{
  MEMORY[0x270EDB828](a1);
  return result;
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x270EDB868](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}