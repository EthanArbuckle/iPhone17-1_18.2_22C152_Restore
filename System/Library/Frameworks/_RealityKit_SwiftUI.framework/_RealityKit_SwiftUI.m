uint64_t one-time initialization function for logger()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

id BoundingBoxRotateManipulator.panGesture.getter()
{
  v1 = *(void **)(v0 + 72);
  if (v1)
  {
    id v2 = *(id *)(v0 + 72);
  }
  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = swift_allocObject();
    swift_weakInit();
    objc_allocWithZone((Class)type metadata accessor for DragFromPointGestureRecognizer());
    uint64_t v5 = swift_retain();
    id v6 = DragFromPointGestureRecognizer.init(manipulator:onPan:)(v5, (uint64_t)partial apply for closure #1 in BoundingBoxRotateManipulator.panGesture.getter, v4);
    v7 = *(void **)(v3 + 72);
    *(void *)(v3 + 72) = v6;
    id v2 = v6;

    v1 = 0;
  }
  id v8 = v1;
  return v2;
}

uint64_t closure #1 in BoundingBoxRotateManipulator.panGesture.getter(double a1, double a2, double a3, double a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    specialized BoundingBoxRotateManipulator.duringDragGesture(startPoint:currentPoint:)(a3, a4);
    return swift_release();
  }
  return result;
}

float BoundingBoxRotateManipulator.compositeScale.getter()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = *(void *)(*(void *)(Strong + 240) + 48);
    float v3 = *(float *)(v2 + 28);
    float v4 = *(float *)(v2 + 24) * 17.5;
    swift_release();
    if (v4 > v3) {
      float v5 = v4;
    }
    else {
      float v5 = v3;
    }
  }
  else
  {
    float v5 = 17.5;
  }
  return *(float *)(v0 + 248) * v5;
}

uint64_t BoundingBoxRotateManipulator.showFrontFaceIndicator.didset(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for __EntityRef();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x270FA5388](v4);
  id v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0 && *(unsigned char *)(v2 + 256) == 1)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)logger);
    v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_2465C2000, v10, v11, "Adding the front face indicator to the scene.", v12, 2u);
      MEMORY[0x24C5348D0](v12, -1, -1);
    }

    type metadata accessor for Entity();
    HasHierarchy.addChild(_:preservingWorldTransform:)();
    dispatch thunk of Entity.__coreEntity.getter();
    MEMORY[0x24C530D20](&v15, MEMORY[0x263F8DD08], MEMORY[0x263F8DD08]);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    REHierarchicalFadeComponentGetComponentType();
    uint64_t v13 = REEntityGetOrAddComponentByClass();
    REHierarchicalFadeComponentSetOpacity();
    return MEMORY[0x24C533F60](v13);
  }
  return result;
}

uint64_t BoundingBoxRotateManipulator.attach(model:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for __EntityRef();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  os_log_type_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_weakAssign();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)logger);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = v2;
    uint64_t v16 = a1;
    uint64_t v17 = v5;
    uint64_t v18 = v9;
    uint64_t v19 = v8;
    uint64_t v20 = v4;
    v21 = v15;
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_2465C2000, v13, v14, "Attaching the box rotation widget to the detection box...", v15, 2u);
    v22 = v21;
    uint64_t v4 = v20;
    uint64_t v8 = v19;
    uint64_t v9 = v18;
    uint64_t v5 = v17;
    a1 = v16;
    MEMORY[0x24C5348D0](v22, -1, -1);
  }

  v23 = *(void **)(a1 + 16);
  if (v23)
  {
    id v24 = v23;
    dispatch thunk of ARView.scene.getter();

    dispatch thunk of Scene.anchors.getter();
    swift_release();
    uint64_t v25 = specialized Collection.first.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (v25)
    {
      HasHierarchy.addChild(_:preservingWorldTransform:)();
      swift_release();
    }
  }
  BoundingBoxRotateManipulator.attachGestures()();
  swift_retain();
  dispatch thunk of Entity.__coreEntity.getter();
  uint64_t v26 = MEMORY[0x263F8DD08];
  MEMORY[0x24C530D20](&v32, MEMORY[0x263F8DD08], MEMORY[0x263F8DD08]);
  v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v7, v4);
  REHierarchicalFadeComponentGetComponentType();
  uint64_t v28 = REEntityGetOrAddComponentByClass();
  REHierarchicalFadeComponentSetOpacity();
  MEMORY[0x24C533F60](v28);
  swift_release();
  dispatch thunk of Entity.__coreEntity.getter();
  MEMORY[0x24C530D20](&v32, v26, v26);
  v27(v7, v4);
  REHierarchicalFadeComponentGetComponentType();
  uint64_t v29 = REEntityGetOrAddComponentByClass();
  REHierarchicalFadeComponentSetOpacity();
  return MEMORY[0x24C533F60](v29);
}

Swift::Void __swiftcall BoundingBoxRotateManipulator.update(time:box:)(Swift::Double time, simd_float4x4 *box)
{
  float32x4_t v28 = v2;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    Transform.init(matrix:)();
    float32x4_t v29 = v6;
    double v26 = v7;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BoundingBoxRotateManipulator.update(time:box:));
    uint64_t v8 = *(void *)(*(void *)(v5 + 240) + 48);
    swift_beginAccess();
    unint64_t v9 = *(void *)(v8 + 40);
    if ((v9 & 0xC000000000000001) != 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v10 = MEMORY[0x24C533AF0](4, v9);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) < 5uLL)
      {
        __break(1u);
LABEL_14:
        swift_once();
LABEL_6:
        if (*((void *)static BoundingBoxScaleManipulator.Face.normals + 2) <= v9)
        {
          __break(1u);
        }
        else
        {
          float32x4_t v28 = *((float32x4_t *)static BoundingBoxScaleManipulator.Face.normals + v9 + 2);
          uint64_t v12 = *(void *)(*(void *)(v5 + 240) + 48);
          swift_beginAccess();
          unint64_t v9 = *(void *)(v12 + 40);
          if ((v9 & 0xC000000000000001) == 0)
          {
            if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
            {
              __break(1u);
              return;
            }
            swift_retain();
            goto LABEL_10;
          }
        }
        swift_retain();
        swift_bridgeObjectRetain();
        MEMORY[0x24C533AF0](1, v9);
        swift_release();
        swift_bridgeObjectRelease();
LABEL_10:
        BoundingBoxScaleManipulator.FaceHandle.faceCenterPosLocal(extents:)();
        unsigned int v32 = v13;
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
        *(void *)(inited + 32) = __PAIR64__(v32, v23);
        *(_DWORD *)(inited + 40) = DWORD2(v23);
        specialized SIMD.init<A>(_:)(inited);
        long long v30 = v15;
        swift_setDeallocating();
        *(double *)v16.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(v26, v29);
        float32x4_t v22 = v16;
        float32x4_t v24 = v17;
        float32x4_t v25 = v18;
        float32x4_t v27 = v19;
        uint64_t v20 = swift_initStackObject();
        *(_OWORD *)(v20 + 16) = xmmword_2466B5DF0;
        *(float32x2_t *)(v20 + 32) = vadd_f32(vmul_f32(*(float32x2_t *)v28.f32, (float32x2_t)vdup_n_s32(0x3CA3D70Au)), *(float32x2_t *)&v30);
        *(float *)(v20 + 40) = vmuls_lane_f32(0.02, v28, 2) + *((float *)&v30 + 2);
        *(_DWORD *)(v20 + 44) = 1065353216;
        specialized SIMD.init<A>(_:)(v20);
        float32x4_t v31 = v21;
        swift_setDeallocating();
        BoundingBoxRotateManipulator.updateAnimationIfNeeded(time:)(time);
        Transform.init()();
        BoundingBoxRotateManipulator.compositeScale.getter();
        specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of BoundingBoxRotateManipulator.update(time:box:));
        specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, v31.f32[0]), v24, *(float32x2_t *)v31.f32, 1), v25, v31, 2), v27, v31, 3).i64, v29);
        type metadata accessor for Entity();
        HasTransform.setTransformMatrix(_:relativeTo:)();
        swift_release();
        swift_release();
        return;
      }
      uint64_t v10 = *(void *)(v9 + 64);
      swift_retain();
    }
    BoundingBoxScaleManipulator.FaceHandle.faceCenterPosLocal(extents:)();
    long long v23 = v11;
    unint64_t v9 = *(unsigned __int8 *)(v10 + 16);
    if (one-time initialization token for normals == -1) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
}

uint64_t BoundingBoxRotateManipulator.updateAnimationIfNeeded(time:)(Swift::Double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 200;
  swift_beginAccess();
  outlined init with copy of Animation?(v1 + 200, (uint64_t)v23);
  if (!*(void *)&v23[24]) {
    return outlined destroy of Animation?((uint64_t)v23);
  }
  outlined init with take of Animation((long long *)v23, (uint64_t)v24);
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(v24, v25);
  if (*(double *)(*v5 + 48) > *(double *)(*v5 + 64))
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)logger);
    double v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl(&dword_2465C2000, v7, v8, "Starting the rotate widget scale animation.", v9, 2u);
      MEMORY[0x24C5348D0](v9, -1, -1);
    }

    long long v22 = v25;
    uint64_t v10 = __swift_project_boxed_opaque_existential_1(v24, v25);
    *(_OWORD *)&v23[24] = v22;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v23);
    uint64_t v12 = *v10;
    double v13 = *(double *)(*v10 + 16) + a1;
    *(Swift::Double *)(v12 + 48) = a1;
    *(double *)(v12 + 56) = v13;
    uint64_t *boxed_opaque_existential_1 = v12;
    swift_retain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  __swift_project_boxed_opaque_existential_1(v24, v25);
  float v14 = RampAnimation.update(time:)(a1);
  if (v14 <= 1.0) {
    float v15 = v14;
  }
  else {
    float v15 = 1.0;
  }
  if (v14 <= 0.0) {
    float v15 = 0.0;
  }
  *(float *)(v2 + 248) = (float)((float)(v15 * v15)
                               / (float)((float)((float)((float)(v15 * v15) - v14) + (float)((float)(v15 * v15) - v14))
                                       + 1.0))
                       + 1.0;
  float32x4_t v16 = __swift_project_boxed_opaque_existential_1(v24, v25);
  if (*(double *)(*v16 + 56) < *(double *)(*v16 + 64))
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)logger);
    float32x4_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_2465C2000, v18, v19, "Clearing the rotate widget scale animation.", v20, 2u);
      MEMORY[0x24C5348D0](v20, -1, -1);
    }

    memset(v23, 0, sizeof(v23));
    swift_beginAccess();
    outlined assign with take of Animation?((uint64_t)v23, v4);
    swift_endAccess();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
}

void BoundingBoxRotateManipulator.attachGestures()()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)logger);
    float v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_2465C2000, v3, v4, "Rotate widget: Adding pan gesture...", v5, 2u);
      MEMORY[0x24C5348D0](v5, -1, -1);
    }

    uint64_t v6 = *(void **)(v1 + 16);
    if (v6)
    {
      id v7 = v6;
      id v8 = BoundingBoxRotateManipulator.panGesture.getter();
      objc_msgSend(v7, sel_addGestureRecognizer_, v8);
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

void BoundingBoxRotateManipulator.detachGestures()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    float v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)float v3 = 0;
    _os_log_impl(&dword_2465C2000, v1, v2, "Rotate widget: Removing pan gesture...", v3, 2u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }

  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = *(void **)(Strong + 16);
    id v6 = v5;
    swift_release();
    if (v5)
    {
      id v7 = BoundingBoxRotateManipulator.panGesture.getter();
      objc_msgSend(v6, sel_removeGestureRecognizer_, v7);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t BoundingBoxRotateManipulator.hitTestWidget(at:)()
{
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v1 = *(void **)(result + 16);
  uint64_t v2 = v1;
  swift_release();
  if (!v1) {
    return 0;
  }
  unint64_t v3 = ARView.entities(at:)();
  unint64_t v4 = v3;
  if (!(v3 >> 62))
  {
    uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  if (!v5)
  {
LABEL_25:

LABEL_26:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_5:
  float32x4_t v21 = (void *)v2;
  unint64_t v6 = v4 & 0xC000000000000001;
  uint64_t v2 = 4;
  type metadata accessor for Entity();
  while (1)
  {
    uint64_t v7 = v2 - 4;
    if (v6)
    {
      MEMORY[0x24C533AF0](v2 - 4, v4);
      uint64_t v8 = v2 - 3;
      if (__OFADD__(v7, 1)) {
        goto LABEL_23;
      }
    }
    else
    {
      swift_retain();
      uint64_t v8 = v2 - 3;
      if (__OFADD__(v7, 1))
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    uint64_t v22 = v8;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)logger);
    swift_retain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v23 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_retain();
      uint64_t v14 = String.init<A>(describing:)();
      *(void *)(v12 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v23);
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v10, v11, "Checking hitTest on Entity: %s", (uint8_t *)v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v13, -1, -1);
      uint64_t v16 = v12;
      unint64_t v6 = v4 & 0xC000000000000001;
      MEMORY[0x24C5348D0](v16, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    swift_retain();
    char v17 = static Entity.== infix(_:_:)();
    swift_release();
    if (v17) {
      break;
    }
    swift_release();
    ++v2;
    if (v22 == v5)
    {

      goto LABEL_26;
    }
  }
  swift_bridgeObjectRelease();
  float32x4_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_2465C2000, v18, v19, "Found the rotate widget collision Entity at the hit point!", v20, 2u);
    MEMORY[0x24C5348D0](v20, -1, -1);
    swift_release();
  }
  else
  {

    swift_release();
  }
  return 1;
}

void BoundingBoxRotateManipulator.beginDragGesture(at:)(double a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(unsigned char *)(v2 + 192) != 1)
  {
    __break(1u);
    swift_once();
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)logger);
    long long v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      float32x4_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float32x4_t v27 = 0;
      _os_log_impl(&dword_2465C2000, v25, v26, "Can't project the start drag point onto the ground plane!", v27, 2u);
      float32x4_t v28 = v27;
LABEL_24:
      MEMORY[0x24C5348D0](v28, -1, -1);
      swift_release();

      return;
    }

    goto LABEL_26;
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v11 = Strong;
  if (!swift_weakLoadStrong())
  {
    swift_release();
    return;
  }
  DetectModeBoxModel.currentCaptureBox.getter((uint64_t)v70);
  swift_release();
  outlined init with take of Animation?((uint64_t)v70, (uint64_t)&v71, &demangling cache variable for type metadata for simd_float4x4?);
  if (v72 == 1)
  {
LABEL_26:
    swift_release();
    return;
  }
  Transform.init(matrix:)();
  long long v52 = v13;
  float32x4_t v53 = v12;
  long long v54 = v14;
  *(double *)v15.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v13, v12);
  float32x4_t v56 = v15;
  float32x4_t v57 = v16;
  float32x4_t v58 = v17;
  float32x4_t v59 = v18;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BoundingBoxRotateManipulator.beginDragGesture(at:));
  float32x4_t v55 = v19;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of BoundingBoxRotateManipulator.beginDragGesture(at:));
  float32x4_t v60 = v20;
  float32x4_t v21 = *(void **)(v11 + 16);
  if (!v21) {
    goto LABEL_31;
  }
  float32x4_t v22 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, v55.f32[0]), v57, *(float32x2_t *)v55.f32, 1), v58, v55, 2), v59, v55, 3);
  v22.i32[3] = 0;
  float32x4_t v59 = v22;
  id v23 = v21;
  specialized static Ray3D.screenPointToPlane(within:screenPoint:plane:)(a1, a2, *(double *)v59.i64, v60);
  float32x4_t v58 = v29;

  uint64_t v30 = *(void *)(v11 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel);
  if (v30 && *(unsigned char *)(v30 + 24) == 2)
  {
    uint64_t v31 = one-time initialization token for logger;
    swift_retain();
    if (v31 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)logger);
    v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_2465C2000, v33, v34, "Box rotation widget grabbed... switching to manual update mode.", v35, 2u);
      MEMORY[0x24C5348D0](v35, -1, -1);
    }

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    *uint64_t v9 = static OS_dispatch_queue.main.getter();
    (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8F0E0], v6);
    char v36 = _dispatchPreconditionTest(_:)();
    (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
    if (v36)
    {
      DetectModeBoxModel.performSwitchStateTransitions(from:to:)(*(unsigned __int8 *)(v30 + 24), 3u);
      *(unsigned char *)(v30 + 24) = 3;
      swift_release();
      goto LABEL_20;
    }
    __break(1u);
LABEL_31:
    __break(1u);
    return;
  }
LABEL_20:
  float32x4_t v37 = v53;
  *(_OWORD *)(v3 + 80) = v54;
  *(float32x4_t *)(v3 + 96) = v37;
  float32x4_t v38 = v58;
  *(_OWORD *)(v3 + 112) = v52;
  *(float32x4_t *)(v3 + 128) = v38;
  float32x4_t v39 = v59;
  *(float32x4_t *)(v3 + 144) = v59;
  *(float32x4_t *)(v3 + 160) = v39;
  *(float32x4_t *)(v3 + 176) = v60;
  *(unsigned char *)(v3 + 192) = 0;
  uint64_t v40 = type metadata accessor for RampAnimation();
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 48) = 0;
  *(void *)(v41 + 56) = 0;
  *(void *)(v41 + 64) = 0xFFF0000000000000;
  *(unsigned char *)(v41 + 24) = 0;
  *(void *)(v41 + 16) = 0x3FA999999999999ALL;
  *(_DWORD *)(v41 + 72) = 0;
  *(void *)(v41 + 32) = 0;
  *(void *)(v41 + 40) = 0;
  *((void *)&v62 + 1) = v40;
  *(void *)&long long v63 = &protocol witness table for RampAnimation;
  *(void *)&long long v61 = v41;
  outlined init with take of Animation?((uint64_t)&v61, (uint64_t)v69, &demangling cache variable for type metadata for Animation?);
  swift_beginAccess();
  outlined assign with take of Animation?((uint64_t)v69, v3 + 200);
  swift_endAccess();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)logger);
  swift_retain_n();
  long long v25 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)v44 = 136446210;
    v69[0] = v45;
    char v46 = *(unsigned char *)(v3 + 192);
    long long v47 = *(_OWORD *)(v3 + 96);
    long long v61 = *(_OWORD *)(v3 + 80);
    long long v62 = v47;
    long long v48 = *(_OWORD *)(v3 + 128);
    long long v63 = *(_OWORD *)(v3 + 112);
    long long v64 = v48;
    long long v49 = *(_OWORD *)(v3 + 160);
    long long v65 = *(_OWORD *)(v3 + 144);
    long long v66 = v49;
    long long v67 = *(_OWORD *)(v3 + 176);
    char v68 = v46;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BoundingBoxRotateManipulator.DragState?);
    uint64_t v50 = String.init<A>(describing:)();
    *(void *)&long long v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v25, v43, "Beginning drag on the rotate widget with dragState=%{public}s", v44, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v45, -1, -1);
    float32x4_t v28 = v44;
    goto LABEL_24;
  }

  swift_release();
  swift_release_n();
}

void BoundingBoxRotateManipulator.endDragGesture()()
{
  if (*(unsigned char *)(v0 + 192))
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_2465C2000, oslog, v2, "Box rotation widget endDragGesture() called, but not dragging.  Ignoring...", v3, 2u);
      MEMORY[0x24C5348D0](v3, -1, -1);
    }
  }
  else
  {
    uint64_t v4 = v0;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)logger);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_2465C2000, v6, v7, "Ending drag gesture on the rotate widget.", v8, 2u);
      MEMORY[0x24C5348D0](v8, -1, -1);
    }

    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(unsigned char *)(v4 + 192) = 1;
    uint64_t v9 = type metadata accessor for RampAnimation();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 48) = 0;
    *(void *)(v10 + 56) = 0;
    *(void *)(v10 + 64) = 0xFFF0000000000000;
    *(unsigned char *)(v10 + 24) = 1;
    *(void *)(v10 + 16) = 0x3FA999999999999ALL;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(_DWORD *)(v10 + 72) = 1065353216;
    v13[3] = v9;
    v13[4] = &protocol witness table for RampAnimation;
    v13[0] = v10;
    outlined init with take of Animation?((uint64_t)v13, (uint64_t)v12, &demangling cache variable for type metadata for Animation?);
    swift_beginAccess();
    outlined assign with take of Animation?((uint64_t)v12, v4 + 200);
    swift_endAccess();
  }
}

uint64_t BoundingBoxRotateManipulator.requestAsyncModelLoad()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_2465C2000, v1, v2, "Async loading rotate grabber...", v3, 2u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }

  type metadata accessor for Entity();
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  MEMORY[0x24C5318C0](0x7247657461746F52, 0xED00007265626261, static BoundingBoxHelpers.bundle);
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type LoadRequest<ModelEntity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_2465C2000, v4, v5, "Async loading front face indicator...", v6, 2u);
    MEMORY[0x24C5348D0](v6, -1, -1);
  }

  MEMORY[0x24C5318C0](0xD000000000000012, 0x80000002466BE680, static BoundingBoxHelpers.bundle);
  swift_allocObject();
  swift_weakInit();
  Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #2 in BoundingBoxRotateManipulator.requestAsyncModelLoad()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_2465C2000, v1, v2, "... done loading rotate grabber.", v3, 2u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2466B5E00;
  objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithRed_green_blue_alpha_, 1.0, 0.0, 0.0, 1.0);
  uint64_t v5 = type metadata accessor for UnlitMaterial();
  uint64_t v6 = MEMORY[0x263F16178];
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 64) = v6;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 32));
  UnlitMaterial.init(color:)();
  type metadata accessor for ModelEntity();
  os_log_type_t v7 = (void (*)(unsigned char *, void))HasModel.model.modify();
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for ModelComponent();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    ModelComponent.materials.setter();
    v7(v12, 0);
    type metadata accessor for Entity();
    swift_allocObject();
    Entity.init()();
    HasHierarchy.addChild(_:preservingWorldTransform:)();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_retain();
      swift_release();
      HasHierarchy.addChild(_:preservingWorldTransform:)();
      swift_release();
    }
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of closure #2 in BoundingBoxRotateManipulator.requestAsyncModelLoad());
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_retain();
      swift_release();
    }
    HasTransform.setScale(_:relativeTo:)();
    swift_release();
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of closure #2 in BoundingBoxRotateManipulator.requestAsyncModelLoad());
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_retain();
      swift_release();
    }
    HasTransform.setPosition(_:relativeTo:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #4 in BoundingBoxRotateManipulator.requestAsyncModelLoad()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)logger);
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_2465C2000, v2, v3, "... done loading front face indicator.", v4, 2u);
      MEMORY[0x24C5348D0](v4, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_2466B5E00;
    uint64_t v6 = (uint64_t *)(v5 + 32);
    type metadata accessor for BoundingBoxHelpers();
    static BoundingBoxHelpers.makeBoxMaterial()(v6);
    type metadata accessor for ModelEntity();
    os_log_type_t v7 = (void (*)(unsigned char *, void))HasModel.model.modify();
    uint64_t v9 = v8;
    uint64_t v10 = type metadata accessor for ModelComponent();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      ModelComponent.materials.setter();
      v7(v14, 0);
      type metadata accessor for Entity();
      swift_retain();
      HasHierarchy.addChild(_:preservingWorldTransform:)();
      swift_release();
      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of closure #4 in BoundingBoxRotateManipulator.requestAsyncModelLoad());
      swift_retain();
      HasTransform.setScale(_:relativeTo:)();
      swift_release();
      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of closure #4 in BoundingBoxRotateManipulator.requestAsyncModelLoad());
      float32x4_t v13 = v11;
      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of closure #4 in BoundingBoxRotateManipulator.requestAsyncModelLoad());
      simd_quaternion(v13, v12);
      swift_retain();
      swift_retain();
      HasTransform.setOrientation(_:relativeTo:)();
      swift_release();
      swift_release();
      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #3 of closure #4 in BoundingBoxRotateManipulator.requestAsyncModelLoad());
      swift_retain();
      HasTransform.setPosition(_:relativeTo:)();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t BoundingBoxRotateManipulator.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_weakDestroy();

  outlined destroy of Animation?(v0 + 200);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t BoundingBoxRotateManipulator.__deallocating_deinit()
{
  BoundingBoxRotateManipulator.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BoundingBoxRotateManipulator()
{
  return self;
}

id DragFromPointGestureRecognizer.init(manipulator:onPan:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_weakInit();
  uint64_t v6 = &v3[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_775A7FE6C6FA1F309878473FBDD2537430DragFromPointGestureRecognizer_startPoint];
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  swift_weakAssign();
  os_log_type_t v7 = &v3[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_775A7FE6C6FA1F309878473FBDD2537430DragFromPointGestureRecognizer_onPan];
  *(void *)os_log_type_t v7 = a2;
  *((void *)v7 + 1) = a3;
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for DragFromPointGestureRecognizer();
  swift_retain();
  id v8 = objc_msgSendSuper2(&v11, sel_initWithTarget_action_, 0, 0);
  objc_msgSend(v8, sel_addTarget_action_, v8, sel_onPanInternal_, v11.receiver, v11.super_class);
  objc_msgSend(v8, sel_setMaximumNumberOfTouches_, 1);
  id v9 = v8;
  objc_msgSend(v9, sel_setDelegate_, v9);

  swift_release();
  swift_release();
  return v9;
}

{
  char *v3;
  char *v6;
  char *v7;
  id v8;
  id v9;
  objc_super v11;

  swift_weakInit();
  uint64_t v6 = &v3[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_4ABB148B5599ED86F84C6943D86F570D30DragFromPointGestureRecognizer_startPoint];
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  swift_weakAssign();
  os_log_type_t v7 = &v3[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_4ABB148B5599ED86F84C6943D86F570D30DragFromPointGestureRecognizer_onPan];
  *(void *)os_log_type_t v7 = a2;
  *((void *)v7 + 1) = a3;
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for DragFromPointGestureRecognizer();
  swift_retain();
  id v8 = objc_msgSendSuper2(&v11, sel_initWithTarget_action_, 0, 0);
  objc_msgSend(v8, sel_addTarget_action_, v8, sel_onPanInternal_, v11.receiver, v11.super_class);
  objc_msgSend(v8, sel_setMaximumNumberOfTouches_, 1);
  id v9 = v8;
  objc_msgSend(v9, sel_setDelegate_, v9);

  swift_release();
  swift_release();
  return v9;
}

void DragFromPointGestureRecognizer.touchesBegan(_:with:)(uint64_t a1, uint64_t a2)
{
  os_log_type_t v3 = v2;
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v13))
    {
      long long v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v14 = 0;
      _os_log_impl(&dword_2465C2000, oslog, v13, "Manipulator has been destroyed, exiting gesture callbacks...", v14, 2u);
      MEMORY[0x24C5348D0](v14, -1, -1);
    }

    return;
  }
  if ((*(unsigned char *)(Strong + 192) & 1) == 0)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)logger);
    float32x4_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      float32x4_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float32x4_t v18 = 0;
      _os_log_impl(&dword_2465C2000, v16, v17, "Rotation widget: One face handle is already grabbed!", v18, 2u);
      MEMORY[0x24C5348D0](v18, -1, -1);
    }

    swift_release();
    return;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v45.receiver = v3;
  v45.super_class = (Class)type metadata accessor for DragFromPointGestureRecognizer();
  objc_msgSendSuper2(&v45, sel_touchesBegan_withEvent_, isa, a2);

  if (objc_msgSend(v3, sel_state) == (id)5)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      objc_super v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)objc_super v11 = 0;
      _os_log_impl(&dword_2465C2000, v9, v10, "Rotation widget: touchesBegan called when the gesture was failed!!", v11, 2u);
      MEMORY[0x24C5348D0](v11, -1, -1);
    }

    goto LABEL_46;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter() == 1) {
      goto LABEL_25;
    }
LABEL_32:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)logger);
    char v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v36, v37)) {
      goto LABEL_45;
    }
    float32x4_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)float32x4_t v38 = 0;
    float32x4_t v39 = "Rotation widget: got more than 1 touch!";
    goto LABEL_44;
  }
  if (*(void *)(a1 + 16) != 1) {
    goto LABEL_32;
  }
LABEL_25:
  uint64_t v19 = swift_bridgeObjectRetain();
  float32x4_t v20 = (void *)specialized Collection.first.getter(v19);
  swift_bridgeObjectRelease();
  if (!v20)
  {
    uint64_t v40 = &v3[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_775A7FE6C6FA1F309878473FBDD2537430DragFromPointGestureRecognizer_startPoint];
    *(void *)uint64_t v40 = 0;
    *((void *)v40 + 1) = 0;
    v40[16] = 1;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)logger);
    char v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v36, v37)) {
      goto LABEL_45;
    }
    float32x4_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)float32x4_t v38 = 0;
    float32x4_t v39 = "Rotation widget: The startPoint on grab was nil!";
    goto LABEL_44;
  }
  id v21 = objc_msgSend(v3, sel_view);
  objc_msgSend(v20, sel_locationInView_, v21);
  uint64_t v23 = v22;
  uint64_t v25 = v24;

  os_log_type_t v26 = &v3[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_775A7FE6C6FA1F309878473FBDD2537430DragFromPointGestureRecognizer_startPoint];
  *(void *)os_log_type_t v26 = v23;
  *((void *)v26 + 1) = v25;
  v26[16] = 0;
  if ((BoundingBoxRotateManipulator.hitTestWidget(at:)() & 1) == 0)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)logger);
    char v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v36, v37)) {
      goto LABEL_45;
    }
    float32x4_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)float32x4_t v38 = 0;
    float32x4_t v39 = "Rotation widget: grabbed was nil!";
LABEL_44:
    _os_log_impl(&dword_2465C2000, v36, v37, v39, v38, 2u);
    MEMORY[0x24C5348D0](v38, -1, -1);
LABEL_45:

    objc_msgSend(v3, sel_setState_, 5);
LABEL_46:
    swift_release();
    return;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)logger);
  float32x4_t v28 = v3;
  float32x4_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136446210;
    uint64_t v44 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGPoint?);
    uint64_t v33 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v29, v30, "Begin drag gesture on rotation widget. startPoint=%{public}s", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v32, -1, -1);
    MEMORY[0x24C5348D0](v31, -1, -1);
  }
  else
  {
  }
  if ((v26[16] & 1) == 0)
  {
    BoundingBoxRotateManipulator.beginDragGesture(at:)(*(double *)v26, *((double *)v26 + 1));
    objc_msgSend(v28, sel_setState_, 1);
    goto LABEL_46;
  }
  __break(1u);
}

{
  char *v2;
  void *v3;
  uint64_t Strong;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  Class isa;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  const char *v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  NSObject *oslog;
  os_log_t osloga;
  uint64_t v77;
  objc_super v78;
  uint64_t vars8;

  os_log_type_t v3 = v2;
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    objc_super v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v13 = 0;
      _os_log_impl(&dword_2465C2000, oslog, v12, "Manipulator has been destroyed, exiting gesture callbacks...", v13, 2u);
      MEMORY[0x24C5348D0](v13, -1, -1);
    }

    return;
  }
  if (*(void *)(*(void *)(Strong + 48) + 32))
  {
    if (one-time initialization token for logger != -1) {
LABEL_70:
    }
      swift_once();
    os_log_type_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    uint64_t v8 = Logger.logObject.getter();
    id v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v10 = 0;
      _os_log_impl(&dword_2465C2000, v8, v9, "One face handle is already grabbed!", v10, 2u);
      MEMORY[0x24C5348D0](v10, -1, -1);
    }

    swift_release();
    return;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v78.receiver = v2;
  v78.super_class = (Class)type metadata accessor for DragFromPointGestureRecognizer();
  objc_msgSendSuper2(&v78, sel_touchesBegan_withEvent_, isa, a2);

  if (objc_msgSend(v2, sel_state) != (id)5)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      if (__CocoaSet.count.getter() == 1) {
        goto LABEL_24;
      }
    }
    else if (*(void *)(a1 + 16) == 1)
    {
LABEL_24:
      uint64_t v19 = swift_bridgeObjectRetain();
      float32x4_t v20 = (void *)specialized Collection.first.getter(v19);
      swift_bridgeObjectRelease();
      if (v20)
      {
        id v21 = objc_msgSend(v2, sel_view);
        objc_msgSend(v20, sel_locationInView_, v21);
        uint64_t v23 = v22;
        uint64_t v25 = v24;

        os_log_type_t v26 = &v2[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_4ABB148B5599ED86F84C6943D86F570D30DragFromPointGestureRecognizer_startPoint];
        *(void *)os_log_type_t v26 = v23;
        *((void *)v26 + 1) = v25;
        v26[16] = 0;
        uint64_t v27 = swift_weakLoadStrong();
        if (v27)
        {
          float32x4_t v28 = v27;
          float32x4_t v29 = swift_weakLoadStrong();
          if (v29)
          {
            os_log_type_t v30 = *(void **)(v29 + 16);
            if (!v30)
            {
              __break(1u);
              return;
            }
            uint64_t v31 = v30;
            uint64_t v32 = ARView.entities(at:)();

            if (v32 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v33) {
                goto LABEL_30;
              }
            }
            else
            {
              uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v33)
              {
LABEL_30:
                unint64_t v34 = 0;
                v73 = v32 & 0xC000000000000001;
                char v68 = v32 + 32;
                v69 = v32 & 0xFFFFFFFFFFFFFF8;
                long long v71 = v32;
                char v72 = v28;
                v70 = v33;
                do
                {
                  if (v73)
                  {
                    osloga = (os_log_t)MEMORY[0x24C533AF0](v34, v32);
                  }
                  else
                  {
                    if (v34 >= *(void *)(v69 + 16))
                    {
                      __break(1u);
                      goto LABEL_84;
                    }
                    osloga = *(os_log_t *)(v68 + 8 * v34);
                    swift_retain();
                  }
                  uint64_t v40 = __OFADD__(v34, 1);
                  uint64_t v41 = v34 + 1;
                  if (v40)
                  {
                    __break(1u);
                    goto LABEL_72;
                  }
                  uint64_t v42 = *(void *)(v28 + 48);
                  swift_beginAccess();
                  os_log_type_t v43 = *(void *)(v42 + 40);
                  v74 = v41;
                  if (v43 >> 62)
                  {
                    swift_bridgeObjectRetain_n();
                    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    if (v44)
                    {
LABEL_44:
                      objc_super v45 = 4;
                      while (1)
                      {
                        char v46 = v45 - 4;
                        if ((v43 & 0xC000000000000001) != 0)
                        {
                          long long v47 = MEMORY[0x24C533AF0](v45 - 4, v43);
                          long long v48 = v45 - 3;
                          if (__OFADD__(v46, 1)) {
                            goto LABEL_69;
                          }
                        }
                        else
                        {
                          long long v47 = *(void *)(v43 + 8 * v45);
                          swift_retain();
                          long long v48 = v45 - 3;
                          if (__OFADD__(v46, 1))
                          {
LABEL_69:
                            __break(1u);
                            goto LABEL_70;
                          }
                        }
                        if (*(void *)(v47 + 64))
                        {
                          v77 = (uint64_t)osloga;
                          type metadata accessor for Entity();
                          lazy protocol witness table accessor for type Entity and conformance Entity();
                          swift_retain_n();
                          long long v49 = dispatch thunk of static Equatable.== infix(_:_:)();
                          swift_release();
                          swift_release();
                          if (v49) {
                            break;
                          }
                        }
                        swift_release();
                        ++v45;
                        if (v48 == v44) {
                          goto LABEL_36;
                        }
                      }
                      swift_release();
                      swift_release();
                      swift_bridgeObjectRelease();
                      swift_release();
                      swift_bridgeObjectRelease_n();
                      if (one-time initialization token for logger == -1)
                      {
LABEL_65:
                        float32x4_t v56 = type metadata accessor for Logger();
                        __swift_project_value_buffer(v56, (uint64_t)logger);
                        swift_retain_n();
                        float32x4_t v57 = v3;
                        float32x4_t v58 = Logger.logObject.getter();
                        float32x4_t v59 = static os_log_type_t.info.getter();
                        if (os_log_type_enabled(v58, v59))
                        {
                          float32x4_t v60 = swift_slowAlloc();
                          long long v61 = swift_slowAlloc();
                          v77 = v61;
                          *(_DWORD *)float32x4_t v60 = 136446466;
                          swift_retain();
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BoundingBoxScaleManipulator.FaceHandle?);
                          long long v62 = String.init<A>(describing:)();
                          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, &v77);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          swift_release_n();
                          swift_bridgeObjectRelease();
                          *(_WORD *)(v60 + 12) = 2082;
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGPoint?);
                          long long v64 = String.init<A>(describing:)();
                          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v77);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();

                          swift_bridgeObjectRelease();
                          _os_log_impl(&dword_2465C2000, v58, v59, "Begin drag gesture handle=%{public}s startPoint=%{public}s", (uint8_t *)v60, 0x16u);
                          swift_arrayDestroy();
                          MEMORY[0x24C5348D0](v61, -1, -1);
                          MEMORY[0x24C5348D0](v60, -1, -1);
                        }
                        else
                        {

                          swift_release_n();
                        }
                        long long v66 = swift_retain();
                        BoundingBoxScaleManipulator.beginDragGesture(handle:)(v66);
                        swift_release();
                        objc_msgSend(v57, sel_setState_, 1);
                        swift_release();
                        goto LABEL_82;
                      }
LABEL_84:
                      swift_once();
                      goto LABEL_65;
                    }
                  }
                  else
                  {
                    uint64_t v44 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    swift_bridgeObjectRetain_n();
                    if (v44) {
                      goto LABEL_44;
                    }
                  }
LABEL_36:
                  swift_bridgeObjectRelease_n();
                  swift_release();
                  unint64_t v34 = v74;
                  float32x4_t v28 = v72;
                  uint64_t v32 = v71;
                }
                while (v74 != v70);
              }
            }
            swift_release();
            swift_bridgeObjectRelease();
          }
          swift_release();
        }
        else
        {
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          long long v52 = type metadata accessor for Logger();
          __swift_project_value_buffer(v52, (uint64_t)logger);
          float32x4_t v53 = Logger.logObject.getter();
          long long v54 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v53, v54))
          {
            float32x4_t v55 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)float32x4_t v55 = 0;
            _os_log_impl(&dword_2465C2000, v53, v54, "Manipulator has been destroyed, exiting gesture callbacks...", v55, 2u);
            MEMORY[0x24C5348D0](v55, -1, -1);
          }
        }
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        long long v67 = type metadata accessor for Logger();
        __swift_project_value_buffer(v67, (uint64_t)logger);
        char v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v36, v37))
        {
LABEL_81:

          objc_msgSend(v3, sel_setState_, 5);
          goto LABEL_82;
        }
        float32x4_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)float32x4_t v38 = 0;
        float32x4_t v39 = "Scale widget: The face handle on grab was nil!";
      }
      else
      {
        uint64_t v50 = &v2[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_4ABB148B5599ED86F84C6943D86F570D30DragFromPointGestureRecognizer_startPoint];
        *(void *)uint64_t v50 = 0;
        *((void *)v50 + 1) = 0;
        v50[16] = 1;
        if (one-time initialization token for logger != -1) {
LABEL_72:
        }
          swift_once();
        unint64_t v51 = type metadata accessor for Logger();
        __swift_project_value_buffer(v51, (uint64_t)logger);
        char v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v36, v37)) {
          goto LABEL_81;
        }
        float32x4_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)float32x4_t v38 = 0;
        float32x4_t v39 = "Scale widget: The startPoint on grab was nil!";
      }
LABEL_80:
      _os_log_impl(&dword_2465C2000, v36, v37, v39, v38, 2u);
      MEMORY[0x24C5348D0](v38, -1, -1);
      goto LABEL_81;
    }
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)logger);
    char v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v36, v37)) {
      goto LABEL_81;
    }
    float32x4_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)float32x4_t v38 = 0;
    float32x4_t v39 = "Scale widget: got more than 1 touch!";
    goto LABEL_80;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)logger);
  float32x4_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    float32x4_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)float32x4_t v18 = 0;
    _os_log_impl(&dword_2465C2000, v16, v17, "Scale widget: touchesBegan called when the gesture was failed!", v18, 2u);
    MEMORY[0x24C5348D0](v18, -1, -1);
  }

LABEL_82:
  swift_release();
}

void DragFromPointGestureRecognizer.touchesMoved(_:with:)(uint64_t a1, uint64_t a2)
{
  os_log_type_t v3 = v2;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for DragFromPointGestureRecognizer();
  objc_msgSendSuper2(&v16, sel_touchesMoved_withEvent_, isa, a2);

  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    if ((*(unsigned char *)(Strong + 192) & 1) == 0)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        if (__CocoaSet.count.getter() < 2) {
          goto LABEL_17;
        }
LABEL_12:
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v12 = type metadata accessor for Logger();
        __swift_project_value_buffer(v12, (uint64_t)logger);
        os_log_type_t v13 = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v13, v14))
        {
          uint64_t v15 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v15 = 0;
          _os_log_impl(&dword_2465C2000, v13, v14, "Box rotate widget: Drag got an extra touch!  failing!", v15, 2u);
          MEMORY[0x24C5348D0](v15, -1, -1);
        }

        objc_msgSend(v3, sel_setState_, 5);
        goto LABEL_17;
      }
      if (*(uint64_t *)(a1 + 16) >= 2) {
        goto LABEL_12;
      }
    }
LABEL_17:
    swift_release();
    return;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    objc_super v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)objc_super v11 = 0;
    _os_log_impl(&dword_2465C2000, v9, v10, "Manipulator has been destroyed, exiting gesture callbacks...", v11, 2u);
    MEMORY[0x24C5348D0](v11, -1, -1);
  }
}

uint64_t @objc DragFromPointGestureRecognizer.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, id))
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a4;
  id v10 = a1;
  a5(v8, v9);

  return swift_bridgeObjectRelease();
}

{
  uint64_t v8;
  id v9;
  id v10;
  uint64_t vars8;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a4;
  id v10 = a1;
  a5(v8, v9);

  return swift_bridgeObjectRelease();
}

void DragFromPointGestureRecognizer.touchesEnded(_:with:)(uint64_t a1, uint64_t a2, SEL *a3, const char *a4)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v19.receiver = v4;
  v19.super_class = (Class)type metadata accessor for DragFromPointGestureRecognizer();
  objc_msgSendSuper2(&v19, *a3, isa, a2);

  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v10 = Strong;
    if (objc_msgSend(v4, sel_state) == (id)1 && (*(unsigned char *)(v10 + 192) & 1) == 0)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)logger);
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v14 = 0;
        _os_log_impl(&dword_2465C2000, v12, v13, a4, v14, 2u);
        MEMORY[0x24C5348D0](v14, -1, -1);
      }

      BoundingBoxRotateManipulator.endDragGesture()();
    }
    swift_release();
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)logger);
    objc_super v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      float32x4_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float32x4_t v18 = 0;
      _os_log_impl(&dword_2465C2000, v16, v17, "Manipulator has been destroyed, exiting gesture callbacks...", v18, 2u);
      MEMORY[0x24C5348D0](v18, -1, -1);
    }
  }
}

uint64_t @objc DragFromPointGestureRecognizer.touchesEnded(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5, const char *a6)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a4;
  id v12 = a1;
  DragFromPointGestureRecognizer.touchesEnded(_:with:)(v10, (uint64_t)v11, a5, a6);

  return swift_bridgeObjectRelease();
}

void DragFromPointGestureRecognizer.reset()()
{
  if (swift_weakLoadStrong())
  {
    BoundingBoxRotateManipulator.endDragGesture()();
    v5.receiver = v0;
    v5.super_class = (Class)type metadata accessor for DragFromPointGestureRecognizer();
    objc_msgSendSuper2(&v5, sel_reset);
    swift_release();
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v3 = 0;
      _os_log_impl(&dword_2465C2000, oslog, v2, "Manipulator has been destroyed, exiting gesture callbacks...", v3, 2u);
      MEMORY[0x24C5348D0](v3, -1, -1);
    }
  }
}

{
  void *v0;
  void *v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;
  objc_super v9;
  uint64_t vars8;

  uint64_t v1 = v0;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    os_log_type_t v3 = Strong;
    uint64_t v4 = *(void *)(Strong + 48);
    BoundingBoxScaleManipulator.FaceHandleContainer.updateGrabbedHandleState(_:)(0);
    *(void *)(v4 + 32) = 0;
    swift_release();
    *(_OWORD *)(v3 + 176) = 0u;
    *(_OWORD *)(v3 + 192) = 0u;
    *(_OWORD *)(v3 + 160) = 0u;
    *(unsigned char *)(v3 + 208) = 1;
    v9.receiver = v1;
    v9.super_class = (Class)type metadata accessor for DragFromPointGestureRecognizer();
    objc_msgSendSuper2(&v9, sel_reset);
    swift_release();
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    objc_super v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v7 = 0;
      _os_log_impl(&dword_2465C2000, oslog, v6, "Manipulator has been destroyed, exiting gesture callbacks...", v7, 2u);
      MEMORY[0x24C5348D0](v7, -1, -1);
    }
  }
}

uint64_t DragFromPointGestureRecognizer.gestureRecognizerShouldBegin(_:)(void *a1)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if ((static NSObject.== infix(_:_:)() & 1) == 0)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10)) {
      goto LABEL_18;
    }
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    id v12 = "delegate got a gestureRecognizer that wasn't self!";
    goto LABEL_17;
  }
  if (!swift_weakLoadStrong())
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)logger);
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10)) {
      goto LABEL_18;
    }
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    id v12 = "Manipulator has been destroyed, exiting gesture callbacks...";
LABEL_17:
    _os_log_impl(&dword_2465C2000, v9, v10, v12, v11, 2u);
    MEMORY[0x24C5348D0](v11, -1, -1);
LABEL_18:

    return 0;
  }
  id v2 = objc_msgSend(a1, sel_view);
  objc_msgSend(a1, sel_locationInView_, v2);

  if ((BoundingBoxRotateManipulator.hitTestWidget(at:)() & 1) == 0)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)logger);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl(&dword_2465C2000, v15, v16, "Hit test missed the widget. we should not begin the drag.", v17, 2u);
      MEMORY[0x24C5348D0](v17, -1, -1);
    }

    swift_release();
    return 0;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_2465C2000, v4, v5, "Hit test hit the widget. we should begin the drag.", v6, 2u);
    MEMORY[0x24C5348D0](v6, -1, -1);
  }

  swift_release();
  return 1;
}

id DragFromPointGestureRecognizer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DragFromPointGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DragFromPointGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for DragFromPointGestureRecognizer()
{
  return self;
}

{
  return self;
}

__n128 __swift_memcpy24_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for BinRegionsIndexMap(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BinRegionsIndexMap(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for BinRegionsIndexMap(uint64_t a1)
{
}

void type metadata accessor for MTLPixelFormat(uint64_t a1)
{
}

void type metadata accessor for AVAudioUnitDistortionPreset(uint64_t a1)
{
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CircleCompletionAnimationData(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CircleCompletionAnimationData(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CircleCompletionAnimationData(uint64_t a1)
{
}

void type metadata accessor for CVMetalTextureCacheRef(uint64_t a1)
{
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for MTLClearColor(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MTLClearColor(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for MTLClearColor(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
}

void type metadata accessor for simd_quatf(uint64_t a1)
{
}

__n128 __swift_memcpy64_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_float4x4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for simd_float4x4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for BoundingBoxRotateManipulator.DragState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy112_16(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for BoundingBoxRotateManipulator.DragState(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BoundingBoxRotateManipulator.DragState(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 112) = v3;
  return result;
}

void *type metadata accessor for BoundingBoxRotateManipulator.DragState()
{
  return &unk_26FACC3E8;
}

void type metadata accessor for CameraPathVertex(uint64_t a1)
{
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance MTLPixelFormat@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MTLPixelFormat(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MTLPixelFormat(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CHHapticPatternKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CHHapticPatternKey(a1, a2, MEMORY[0x263F07B58]);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CHHapticPatternKey(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance CHHapticPatternKey(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CHHapticPatternKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = MEMORY[0x24C533410](v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CHHapticPatternKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey((unint64_t *)&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, type metadata accessor for CHHapticPatternKey);
  uint64_t v3 = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, type metadata accessor for CHHapticPatternKey);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CHHapticPatternKey@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x24C533410](*a1, a1[1]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CHHapticEventType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CHHapticEventType(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type CHHapticEventType and conformance CHHapticEventType, type metadata accessor for CHHapticEventType);
  uint64_t v3 = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type CHHapticEventType and conformance CHHapticEventType, type metadata accessor for CHHapticEventType);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CHHapticEventType(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CHHapticPatternKey(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CHHapticPatternKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CHHapticPatternKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CHHapticPatternKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CHHapticPatternKey()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

unint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type UITouch and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UITouch and conformance NSObject)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UITouch);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_2465C9310()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #2 in BoundingBoxRotateManipulator.requestAsyncModelLoad()()
{
  return closure #2 in BoundingBoxRotateManipulator.requestAsyncModelLoad()();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t partial apply for closure #4 in BoundingBoxRotateManipulator.requestAsyncModelLoad()()
{
  return closure #4 in BoundingBoxRotateManipulator.requestAsyncModelLoad()();
}

void specialized BoundingBoxRotateManipulator.duringDragGesture(startPoint:currentPoint:)(double a1, double a2)
{
  if (*(unsigned char *)(v2 + 192))
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      char v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v5 = 0;
      _os_log_impl(&dword_2465C2000, oslog, v4, "Box rotation widget duringDragGesture() called, but isGrabbed is false!", v5, 2u);
      MEMORY[0x24C5348D0](v5, -1, -1);
    }
  }
  else
  {
    uint64_t v54 = *(void *)(v2 + 96);
    double v53 = *(double *)(v2 + 112);
    uint64_t v8 = *(void *)(v2 + 128);
    uint64_t v56 = *(void *)(v2 + 104);
    uint64_t v10 = *(void *)(v2 + 136);
    uint64_t v9 = *(void *)(v2 + 144);
    uint64_t v12 = *(void *)(v2 + 152);
    double v11 = *(double *)(v2 + 160);
    uint64_t v14 = *(void *)(v2 + 176);
    uint64_t v13 = *(void *)(v2 + 184);
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      os_log_type_t v16 = *(void **)(Strong + 16);
      if (v16)
      {
        *(void *)&long long v17 = v14;
        *((void *)&v17 + 1) = v13;
        *(_OWORD *)oslogc = v17;
        id v18 = v16;
        specialized static Ray3D.screenPointToPlane(within:screenPoint:plane:)(a1, a2, v11, *(float32x4_t *)oslogc);
        v19.i64[0] = v8;
        v19.i64[1] = v10;
        int8x16_t v51 = v19;
        v19.i64[0] = v9;
        v19.i64[1] = v12;
        int8x16_t v57 = v19;
        *(_OWORD *)osloga = v20;

        float32x2_t v21 = vsub_f32((float32x2_t)__PAIR64__(v51.u32[1], v8), (float32x2_t)__PAIR64__(v57.u32[1], v9));
        float32x2_t v22 = (float32x2_t)vextq_s8(v57, v57, 8uLL).u64[0];
        float32x2_t v23 = vmul_f32(v21, v21);
        *(float32x2_t *)v24.f32 = v21;
        *(float32x2_t *)&v24.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), v22);
        v21.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)vmulq_f32(v24, v24), 2), vadd_f32(v23, (float32x2_t)vdup_lane_s32((int32x2_t)v23, 1))).u32[0];
        float32x2_t v25 = vrsqrte_f32((float32x2_t)v21.u32[0]);
        float32x2_t v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v25, v25)));
        LODWORD(v27) = vmul_f32(v26, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v26, v26))).u32[0];
        float32x2_t v28 = vsub_f32((float32x2_t)osloga[0], (float32x2_t)__PAIR64__(v57.u32[1], v9));
        float32x2_t v29 = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)osloga, *(int8x16_t *)osloga, 8uLL), v22);
        float32x2_t v30 = vmul_f32(v28, v28);
        *(float32x2_t *)v31.f32 = v28;
        *(float32x2_t *)&v31.u32[2] = v29;
        v28.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)vmulq_f32(v31, v31), 2), vadd_f32(v30, (float32x2_t)vdup_lane_s32((int32x2_t)v30, 1))).u32[0];
        float32x2_t v32 = vrsqrte_f32((float32x2_t)v28.u32[0]);
        float32x2_t v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v32, v32)));
        LODWORD(v34) = vmul_f32(v33, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v33, v33))).u32[0];
        if (one-time initialization token for logger != -1)
        {
          float v59 = v27;
          *(float32x4_t *)oslogd = v24;
          float v50 = v34;
          float32x4_t v52 = v31;
          swift_once();
          float v34 = v50;
          float32x4_t v31 = v52;
          float v27 = v59;
          float32x4_t v24 = *(float32x4_t *)oslogd;
        }
        float32x4_t v58 = vmulq_n_f32(v31, v34);
        float32x4_t oslogb = vmulq_n_f32(v24, v27);
        uint64_t v35 = type metadata accessor for Logger();
        __swift_project_value_buffer(v35, (uint64_t)logger);
        char v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = swift_slowAlloc();
          uint64_t v39 = swift_slowAlloc();
          v65[0] = v39;
          *(_DWORD *)uint64_t v38 = 136446466;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
          lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>((unint64_t *)&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
          uint64_t v40 = SIMD.description.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v38 + 12) = 2082;
          uint64_t v42 = SIMD.description.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_2465C2000, v36, v37, "startUnit = %{public}s  currentUnit: %{public}s", (uint8_t *)v38, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x24C5348D0](v39, -1, -1);
          MEMORY[0x24C5348D0](v38, -1, -1);
        }

        if (swift_weakLoadStrong())
        {
          v44.i64[0] = v54;
          v44.i64[1] = v56;
          float32x4_t v55 = v44;
          *(double *)v45.i64 = simd_quaternion(oslogb, v58);
          int32x4_t v46 = (int32x4_t)vnegq_f32(v45);
          int8x16_t v47 = (int8x16_t)vtrn2q_s32((int32x4_t)v45, vtrn1q_s32((int32x4_t)v45, v46));
          float32x4_t v48 = (float32x4_t)vrev64q_s32((int32x4_t)v45);
          v48.i32[0] = v46.i32[1];
          v48.i32[3] = v46.i32[2];
          specialized simd_float4x4.init(translation:rotation:scale:)(v53, vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v45, v55, 3), v48, v55, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v46, 8uLL), *(float32x2_t *)v55.f32, 1), (float32x4_t)vextq_s8(v47, v47, 8uLL), v55.f32[0])));
          DetectModeBoxModel.setBoundingBoxMatrix(box:)(v49);
          swift_release();
        }
        swift_release();
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t specialized BoundingBoxRotateManipulator.init(parent:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CollisionComponent?);
  MEMORY[0x270FA5388](v2 - 8);
  os_log_type_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CollisionFilter();
  MEMORY[0x270FA5388](v5 - 8);
  float32x2_t v26 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CollisionComponent.Mode();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CollisionComponent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  swift_allocObject();
  *(void *)(v0 + 16) = Entity.init()();
  swift_allocObject();
  uint64_t v14 = Entity.init()();
  uint64_t v15 = MEMORY[0x263F8EE88];
  *(void *)(v0 + 32) = v14;
  *(void *)(v0 + 40) = v15;
  swift_weakInit();
  swift_weakInit();
  *(void *)(v0 + 64) = 0x3E8000003F800000;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 168) = 0u;
  *(void *)(v0 + 184) = 0;
  *(unsigned char *)(v0 + 192) = 1;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  *(void *)(v0 + 232) = 0;
  *(void *)(v0 + 240) = 0x3FA999999999999ALL;
  *(void *)(v0 + 248) = 0x418C00003F800000;
  *(_WORD *)(v0 + 256) = 0;
  *(void *)(v0 + 272) = 0;
  *(void *)(v0 + 280) = 0;
  *(void *)(v0 + 264) = 0;
  swift_weakAssign();
  swift_allocObject();
  *(void *)(v0 + 24) = Entity.init()();
  BoundingBoxRotateManipulator.requestAsyncModelLoad()();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)logger);
  long long v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    int8x16_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int8x16_t v19 = 0;
    _os_log_impl(&dword_2465C2000, v17, v18, "Setting up a hittable sphere for the rotate widget...", v19, 2u);
    MEMORY[0x24C5348D0](v19, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_2466B5E10;
  type metadata accessor for ShapeResource();
  *(void *)(v20 + 32) = MEMORY[0x24C530F80](0.028571);
  v27[0] = v20;
  specialized Array._endMutation()();
  (*(void (**)(char *, void, uint64_t))(v24 + 104))(v9, *MEMORY[0x263F16200], v25);
  static CollisionFilter.default.getter();
  CollisionComponent.init(shapes:mode:filter:)();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v4, v13, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v4, 0, 1, v10);
  swift_retain();
  float32x2_t v21 = (void (*)(uint64_t *, void))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v21(v27, 0);
  swift_release();
  swift_retain();
  swift_retain();
  HasHierarchy.addChild(_:preservingWorldTransform:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v1;
}

double simd_quaternion(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2 = vmulq_f32(a1, a2);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).f32[0] >= 0.0)
  {
    float32x4_t v33 = vaddq_f32(a1, a2);
    int32x4_t v34 = (int32x4_t)vmulq_f32(v33, v33);
    v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2), vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1))).u32[0];
    float32x2_t v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
    float32x2_t v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)));
    float32x4_t v37 = vmulq_n_f32(v33, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]);
    int32x4_t v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL), vnegq_f32(a1)), v37, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
    unint64_t v32 = vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL).u64[0];
  }
  else
  {
    int32x4_t v3 = (int32x4_t)vmulq_f32(a1, a1);
    v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
    float32x2_t v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
    float32x2_t v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
    v3.i32[0] = vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).u32[0];
    int32x4_t v6 = (int32x4_t)vmulq_f32(a2, a2);
    v6.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))).u32[0];
    float32x2_t v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
    float32x2_t v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
    float32x4_t v9 = vaddq_f32(vmulq_n_f32(a1, *(float *)v3.i32), vmulq_n_f32(a2, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]));
    float32x4_t v10 = vmulq_f32(v9, v9);
    float v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
    if (v11 <= 1.4211e-14)
    {
      float32x4_t v39 = vabsq_f32(a1);
      float v40 = v39.f32[1];
      float v41 = v39.f32[2];
      if (v39.f32[0] > v39.f32[1] || v39.f32[0] > v39.f32[2])
      {
        float32x4_t v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL);
        if (v40 <= v41)
        {
          float32x4_t v43 = vmulq_f32(a1, (float32x4_t)xmmword_2466B5E40);
          float32x4_t v44 = (float32x4_t)xmmword_2466B5E50;
        }
        else
        {
          float32x4_t v43 = vmulq_f32(a1, (float32x4_t)xmmword_2466B5E60);
          float32x4_t v44 = (float32x4_t)xmmword_2466B5E70;
        }
      }
      else
      {
        float32x4_t v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL);
        float32x4_t v43 = vmulq_f32(a1, (float32x4_t)xmmword_2466B5E20);
        float32x4_t v44 = (float32x4_t)xmmword_2466B5E30;
      }
      float32x4_t v45 = vmlaq_f32(v43, v44, v42);
      float32x4_t v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
      int32x4_t v47 = (int32x4_t)vmulq_f32(v45, v45);
      v47.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), *(float32x2_t *)v47.i8)).u32[0];
      float32x2_t v48 = vrsqrte_f32((float32x2_t)v47.u32[0]);
      float32x2_t v49 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v48, v48)));
      unint64_t v32 = vmulq_n_f32(v46, vmul_f32(v49, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v49, v49))).f32[0]).u64[0];
    }
    else
    {
      float v12 = v11;
      float32x2_t v13 = vrsqrte_f32((float32x2_t)LODWORD(v11));
      float32x2_t v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v13, v13)));
      float32x4_t v15 = vmulq_n_f32(v9, vmul_f32(v14, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v14, v14))).f32[0]);
      float32x4_t v16 = vaddq_f32(a1, v15);
      int32x4_t v17 = (int32x4_t)vmulq_f32(v16, v16);
      v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1))).u32[0];
      float32x2_t v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
      float32x2_t v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
      float32x4_t v20 = vmulq_n_f32(v16, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
      float32x4_t v21 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), vnegq_f32(a1)), v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
      float32x4_t v22 = vmulq_f32(v20, a1);
      float32x4_t v23 = vaddq_f32(a2, v15);
      int32x4_t v24 = (int32x4_t)vmulq_f32(v23, v23);
      v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
      *(float32x2_t *)v20.f32 = vrsqrte_f32((float32x2_t)v24.u32[0]);
      *(float32x2_t *)v20.f32 = vmul_f32(*(float32x2_t *)v20.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32)));
      float32x4_t v25 = vmulq_n_f32(v23, vmul_f32(*(float32x2_t *)v20.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32))).f32[0]);
      int32x4_t v26 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL), vnegq_f32(v15)), v25, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL));
      float32x4_t v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), (int8x16_t)v26, 0xCuLL);
      float32x4_t v28 = vmulq_f32(v15, v25);
      v27.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).u32[0];
      int32x4_t v29 = (int32x4_t)vnegq_f32(v27);
      int8x16_t v30 = (int8x16_t)vtrn2q_s32((int32x4_t)v27, vtrn1q_s32((int32x4_t)v27, v29));
      float32x4_t v31 = (float32x4_t)vrev64q_s32((int32x4_t)v27);
      v31.i32[0] = v29.i32[1];
      v31.i32[3] = v29.i32[2];
      unint64_t v32 = vaddq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]), v31, *(float32x2_t *)v21.f32, 1), vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v29, 8uLL), v21.f32[0]), (float32x4_t)vextq_s8(v30, v30, 8uLL), v21, 2)).u64[0];
    }
  }
  return *(double *)&v32;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined assign with take of Animation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Animation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Animation?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for NSObject(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined init with copy of Animation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Animation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Animation?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Animation?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of Animation(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t partial apply for closure #1 in BoundingBoxRotateManipulator.panGesture.getter(double a1, double a2, double a3, double a4)
{
  return closure #1 in BoundingBoxRotateManipulator.panGesture.getter(a1, a2, a3, a4);
}

uint64_t lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for CHHapticEventType(uint64_t a1)
{
}

void type metadata accessor for CHHapticPatternKey(uint64_t a1)
{
}

__n128 __swift_memcpy48_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ObjectCapturePoint(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ObjectCapturePoint(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for ObjectCapturePoint(uint64_t a1)
{
}

void type metadata accessor for geom_interpolating_key_3f(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for NSProcessInfoThermalState(uint64_t a1)
{
}

__n128 __swift_memcpy32_16(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for ObjectCaptureCubeVertex(uint64_t a1)
{
}

uint64_t base witness table accessor for RawRepresentable in CHHapticPatternKey()
{
  return lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, type metadata accessor for CHHapticPatternKey);
}

uint64_t lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CHHapticPatternKey()
{
  return lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, type metadata accessor for CHHapticPatternKey);
}

uint64_t base witness table accessor for RawRepresentable in CHHapticEventType()
{
  return lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type CHHapticEventType and conformance CHHapticEventType, type metadata accessor for CHHapticEventType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CHHapticEventType()
{
  return lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type CHHapticEventType and conformance CHHapticEventType, type metadata accessor for CHHapticEventType);
}

uint64_t base witness table accessor for Equatable in CHHapticEventType()
{
  return lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type CHHapticEventType and conformance CHHapticEventType, type metadata accessor for CHHapticEventType);
}

uint64_t base witness table accessor for Equatable in CHHapticPatternKey()
{
  return lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, type metadata accessor for CHHapticPatternKey);
}

void type metadata accessor for UIDeviceOrientation(uint64_t a1)
{
}

void type metadata accessor for geom_curve_interpolation_type(uint64_t a1)
{
}

void type metadata accessor for MetalSphericalShell(uint64_t a1)
{
}

void type metadata accessor for BinRegionsIndexMap(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t Sphere.createSurfaceSamples(radialSegments:verticalSegments:)(uint64_t result, uint64_t a2, __n128 a3, float a4)
{
  uint64_t v4 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v4 < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (a2 != -1)
  {
    uint64_t v5 = result + 1;
    if (__OFADD__(result, 1))
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    if (v5 < 0)
    {
LABEL_23:
      __break(1u);
      return result;
    }
    uint64_t v7 = 0;
    float v8 = 6.2832 / (float)result;
    float32x4_t v9 = (void *)MEMORY[0x263F8EE78];
    float v10 = 3.1416 / (float)a2;
    while (v7 != v4)
    {
      if (v5)
      {
        __float2 v11 = __sincosf_stret(1.5708 - (float)(v10 * (float)v7));
        uint64_t v12 = 0;
        do
        {
          __float2 v13 = __sincosf_stret(v8 * (float)v12);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
            float32x4_t v9 = (void *)result;
          }
          unint64_t v15 = v9[2];
          unint64_t v14 = v9[3];
          if (v15 >= v14 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v9);
            float32x4_t v9 = (void *)result;
          }
          ++v12;
          *(float32x2_t *)&long long v16 = vadd_f32((float32x2_t)a3.n128_u64[0], vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v13.__sinval), LODWORD(v13.__cosval)), v11.__cosval * a4));
          *((void *)&v16 + 1) = COERCE_UNSIGNED_INT(a3.n128_f32[2] + (float)(v11.__sinval * a4));
          v9[2] = v15 + 1;
          *(_OWORD *)&v9[2 * v15 + 4] = v16;
        }
        while (v5 != v12);
      }
      if (++v7 == v4) {
        return (uint64_t)v9;
      }
    }
    __break(1u);
    goto LABEL_20;
  }
  return MEMORY[0x263F8EE78];
}

__n128 __swift_memcpy20_16(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Sphere(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Sphere(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Sphere()
{
  return &type metadata for Sphere;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FreeformScanModeManager.State(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FreeformScanModeManager.State()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance FreeformScanModeManager.State()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FreeformScanModeManager.State()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void FreeformScanModeManager.state.didset(unsigned __int8 a1)
{
  if (*(unsigned __int8 *)(v1 + 16) != a1)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)logger);
    swift_retain_n();
    char v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v11 = v6;
      *(_DWORD *)uint64_t v5 = 136446466;
      uint64_t v7 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2082;
      uint64_t v9 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v3, v4, "State changed from %{public}s to %{public}s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v6, -1, -1);
      MEMORY[0x24C5348D0](v5, -1, -1);
    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t FreeformScanModeManager.update(cameraPositionWorld:boundingBoxWorld:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static BoundingBoxHelpers.getBoundingSphere(boxWorld:));
  float32x4_t v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, v6.f32[0]), a3, *(float32x2_t *)v6.f32, 1), a4, v6, 2), a5, v6, 3);
  Transform.init(matrix:)();
  float32x4_t v8 = vmulq_f32(v7, v7);
  float32x4_t v9 = vsubq_f32(a1, v21);
  float32x4_t v10 = vmulq_f32(v9, v9);
  float v11 = sqrtf(v8.f32[2] + vaddv_f32(*(float32x2_t *)v8.f32)) * 0.5;
  float v12 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
  float v13 = 0.1;
  if ((float)(v11 * 0.1) <= 0.1) {
    float v13 = v11 * 0.1;
  }
  int v14 = *(unsigned __int8 *)(v5 + 16);
  if (!*(unsigned char *)(v5 + 16))
  {
    if (v12 >= v11) {
      char v15 = 1;
    }
    else {
      char v15 = 2;
    }
    goto LABEL_12;
  }
  if (v14 == 1)
  {
    if (v12 <= (float)(v11 - v13))
    {
      char v15 = 2;
LABEL_12:
      *(unsigned char *)(v5 + 16) = v15;
      FreeformScanModeManager.state.didset(v14);
    }
  }
  else if ((float)(v11 + v13) <= v12)
  {
    char v15 = 1;
    goto LABEL_12;
  }
  return *(unsigned __int8 *)(v5 + 16);
}

uint64_t FreeformScanModeManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FreeformScanModeManager()
{
  return self;
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FreeformScanModeManager.Descriptor(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FreeformScanModeManager.Descriptor(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FreeformScanModeManager.Descriptor()
{
  return &type metadata for FreeformScanModeManager.Descriptor;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FreeformScanModeManager.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FreeformScanModeManager.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2465CB19CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for FreeformScanModeManager.State(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for FreeformScanModeManager.State(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for FreeformScanModeManager.State()
{
  return &type metadata for FreeformScanModeManager.State;
}

unint64_t lazy protocol witness table accessor for type FreeformScanModeManager.State and conformance FreeformScanModeManager.State()
{
  unint64_t result = lazy protocol witness table cache variable for type FreeformScanModeManager.State and conformance FreeformScanModeManager.State;
  if (!lazy protocol witness table cache variable for type FreeformScanModeManager.State and conformance FreeformScanModeManager.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FreeformScanModeManager.State and conformance FreeformScanModeManager.State);
  }
  return result;
}

uint64_t protocol witness for CGPathProviding.cgPath.getter in conformance Path()
{
  return Path.cgPath.getter();
}

uint64_t MeshResource.ShapeExtrusionOptions.chamferProfile.getter@<X0>(int8x16_t *a1@<X8>)
{
  MeshResource.ShapeExtrusionOptions._chamferProfileStorage.getter();
  if (v12)
  {
    outlined init with take of Animation(&v11, (uint64_t)v13);
    outlined init with take of Animation(v13, (uint64_t)&v11);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGPathProviding);
    uint64_t result = swift_dynamicCast();
    char v3 = v10;
    if (result)
    {
      unint64_t v4 = -1;
    }
    else
    {
      char v3 = -1;
      unint64_t v4 = 0;
    }
    int8x16_t v5 = (int8x16_t)vdupq_n_s64(v4);
    int8x16_t v6 = vandq_s8(v8, v5);
    int8x16_t v7 = vandq_s8(v9, v5);
  }
  else
  {
    uint64_t result = outlined destroy of CGPathProviding?((uint64_t)&v11);
    int8x16_t v6 = 0uLL;
    char v3 = -1;
    int8x16_t v7 = 0uLL;
  }
  *a1 = v6;
  a1[1] = v7;
  a1[2].i8[0] = v3;
  return result;
}

uint64_t outlined destroy of CGPathProviding?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGPathProviding?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t key path setter for MeshResource.ShapeExtrusionOptions.chamferProfile : MeshResource.ShapeExtrusionOptions(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  int v5 = *(unsigned __int8 *)(a1 + 32);
  if (v5 != 255)
  {
    lazy protocol witness table accessor for type Path and conformance Path();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v1;
    *(void *)(v7 + 24) = v2;
    *(void *)(v7 + 32) = v3;
    *(void *)(v7 + 40) = v4;
    *(unsigned char *)(v7 + 48) = v5;
  }
  outlined copy of Path?(v1, v2, v3, v4, v5);
  return MeshResource.ShapeExtrusionOptions._chamferProfileStorage.setter();
}

uint64_t MeshResource.ShapeExtrusionOptions.chamferProfile.setter(uint64_t a1)
{
  outlined init with take of Path?(a1, (uint64_t)v4);
  if (v5 != 255)
  {
    lazy protocol witness table accessor for type Path and conformance Path();
    uint64_t v3 = swift_allocObject();
    long long v1 = v4[1];
    *(_OWORD *)(v3 + 16) = v4[0];
    *(_OWORD *)(v3 + 32) = v1;
    *(unsigned char *)(v3 + 48) = v5;
  }
  return MeshResource.ShapeExtrusionOptions._chamferProfileStorage.setter();
}

uint64_t outlined init with take of Path?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Path?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Path and conformance Path()
{
  unint64_t result = lazy protocol witness table cache variable for type Path and conformance Path;
  if (!lazy protocol witness table cache variable for type Path and conformance Path)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Path and conformance Path);
  }
  return result;
}

uint64_t sub_2465CB588()
{
  outlined consume of Path.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x270FA0238](v0, 49, 7);
}

uint64_t outlined consume of Path.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3) {
    return swift_release();
  }
  return result;
}

void (*MeshResource.ShapeExtrusionOptions.chamferProfile.modify(int8x16_t **a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = (int8x16_t *)malloc(0x58uLL);
  *a1 = v3;
  v3[5].i64[0] = v1;
  MeshResource.ShapeExtrusionOptions.chamferProfile.getter(v3);
  outlined init with take of Path?((uint64_t)v3, (uint64_t)&v3[2].i64[1]);
  return MeshResource.ShapeExtrusionOptions.chamferProfile.modify;
}

void MeshResource.ShapeExtrusionOptions.chamferProfile.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 40);
  uint64_t v5 = *(void *)(*a1 + 48);
  uint64_t v4 = *(void *)(*a1 + 56);
  uint64_t v6 = *(void *)(*a1 + 64);
  int v7 = *(unsigned __int8 *)(*a1 + 72);
  if (a2)
  {
    if (v7 != 255)
    {
      lazy protocol witness table accessor for type Path and conformance Path();
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16) = v3;
      *(void *)(v8 + 24) = v5;
      *(void *)(v8 + 32) = v4;
      *(void *)(v8 + 40) = v6;
      *(unsigned char *)(v8 + 48) = v7;
    }
    outlined copy of Path?(v3, v5, v4, v6, v7);
    MeshResource.ShapeExtrusionOptions._chamferProfileStorage.setter();
    outlined consume of Path?(*(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(unsigned char *)(v2 + 72));
  }
  else
  {
    if (v7 != 255)
    {
      lazy protocol witness table accessor for type Path and conformance Path();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v3;
      *(void *)(v9 + 24) = v5;
      *(void *)(v9 + 32) = v4;
      *(void *)(v9 + 40) = v6;
      *(unsigned char *)(v9 + 48) = v7;
    }
    MeshResource.ShapeExtrusionOptions._chamferProfileStorage.setter();
  }

  free((void *)v2);
}

uint64_t outlined copy of Path?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 0xFF) {
    return outlined copy of Path.Storage(a1, a2, a3, a4, a5);
  }
  return a1;
}

uint64_t outlined copy of Path.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of Path?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 0xFF) {
    return outlined consume of Path.Storage(a1, a2, a3, a4, a5);
  }
  return a1;
}

uint64_t MeshResource.init(extruding:extrusionOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MeshResource.ShapeExtrusionOptions();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Path.cgPath.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v8 = MeshResource.init(extruding:extrusionOptions:)();
  outlined release of Path(a1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  return v8;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for MeshResource.ShapeExtrusionOptions();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return MEMORY[0x270FA2498](MeshResource.init(extruding:extrusionOptions:), 0, 0);
}

uint64_t outlined release of Path(uint64_t a1)
{
  return a1;
}

uint64_t MeshResource.init(extruding:extrusionOptions:)()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[3];
  uint64_t v5 = Path.cgPath.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  *uint64_t v6 = v0;
  v6[1] = MeshResource.init(extruding:extrusionOptions:);
  uint64_t v7 = v0[7];
  return MEMORY[0x270EFBC58](v5, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  outlined release of Path(v0[2]);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v5 = v0[10];
  return v4(v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  outlined release of Path(v0[2]);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  return MEMORY[0x270EFBC50]();
}

uint64_t MeshResource.init(extruding:extrusionOptions:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = MeshResource.init(extruding:extrusionOptions:);
  }
  else
  {
    *(void *)(v4 + 80) = a1;
    uint64_t v5 = MeshResource.init(extruding:extrusionOptions:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_2465CBD38@<X0>(uint64_t a1@<X8>)
{
  MeshResource.ShapeExtrusionOptions.chamferProfile.getter(v3);
  return outlined init with take of Path?((uint64_t)v3, a1);
}

uint64_t ObjectCaptureView.init<>(session:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static ViewBuilder.buildExpression<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t ObjectCaptureView.init(session:cameraFeedOverlay:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  type metadata accessor for ObjectCaptureView();
  uint64_t v4 = swift_retain();
  a2(v4);

  return swift_release();
}

uint64_t type metadata accessor for ObjectCaptureView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ObjectCaptureView.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  float32x4_t v21 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v6 + 24);
  uint64_t v9 = type metadata accessor for InternalCaptureView();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  float v13 = (uint64_t *)((char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  char v15 = (char *)&v20 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + *(int *)(a1 + 36), v4);
  uint64_t v16 = swift_retain();
  InternalCaptureView.init(session:cameraFeedOverlay:)(v16, (uint64_t)v8, v4, v13);
  swift_getWitnessTable();
  int32x4_t v17 = *(void (**)(char *, uint64_t *, uint64_t))(v10 + 16);
  v17(v15, v13, v9);
  float32x2_t v18 = *(void (**)(uint64_t *, uint64_t))(v10 + 8);
  v18(v13, v9);
  v17(v21, (uint64_t *)v15, v9);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, v9);
}

uint64_t type metadata accessor for InternalCaptureView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t InternalCaptureView.init(session:cameraFeedOverlay:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  a4[2] = a1;
  uint64_t v7 = (char *)a4 + *(int *)(type metadata accessor for InternalCaptureView() + 40);
  uint64_t v8 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, a2, a3);
  type metadata accessor for DataModel(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, (void (*)(uint64_t))type metadata accessor for DataModel);
  swift_retain();
  uint64_t v9 = ObservedObject.init(wrappedValue:)();
  uint64_t v11 = v10;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a2, a3);
  *a4 = v9;
  a4[1] = v11;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ObjectCaptureView<A>()
{
  return MEMORY[0x270F032C0]();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ObjectCaptureView<A>()
{
  return MEMORY[0x270F032D0]();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ObjectCaptureView<A>()
{
  return static View._viewListCount(inputs:)();
}

uint64_t InternalCaptureView.body.getter()
{
  return swift_release();
}

uint64_t closure #1 in InternalCaptureView.body.getter()
{
  return ZStack.init(alignment:content:)();
}

uint64_t closure #1 in closure #1 in InternalCaptureView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v56 = a4;
  uint64_t v74 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ARViewContainer();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  float v13 = (uint64_t *)((char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  char v15 = (char *)&v42 - v14;
  uint64_t v16 = type metadata accessor for InternalCaptureView();
  (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v8, a1 + *(int *)(v16 + 40), a2);
  swift_retain();
  uint64_t v52 = a2;
  uint64_t v59 = a3;
  ARViewContainer.init(model:cameraFeedOverlay:)((uint64_t)v8, a2, v13);
  uint64_t WitnessTable = swift_getWitnessTable();
  int32x4_t v17 = *(void (**)(uint64_t *, char *, uint64_t))(v10 + 16);
  float32x4_t v60 = v15;
  double v53 = v17;
  uint64_t v54 = v10 + 16;
  v17((uint64_t *)v15, (char *)v13, v9);
  float32x2_t v18 = *(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8);
  long long v61 = v13;
  uint64_t v74 = v9;
  int8x16_t v57 = v18;
  uint64_t v58 = v10 + 8;
  v18(v13, v9);
  if (*(unsigned __int8 *)(*(void *)(a1 + 8) + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) > 1u)
  {
    type metadata accessor for DataModel(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, (void (*)(uint64_t))type metadata accessor for DataModel);
    swift_retain();
    uint64_t v19 = ObservedObject.init(wrappedValue:)();
    uint64_t v21 = v20;
    id v22 = objc_msgSend(self, sel_currentDevice);
    id v23 = objc_msgSend(v22, sel_userInterfaceIdiom);

    LOBYTE(v80) = 0;
    State.init(wrappedValue:)();
    uint64_t v24 = 0x3FE999999999999ALL;
    if (v23 == (id)1) {
      uint64_t v24 = 0x3FE23D70A3D70A3DLL;
    }
    uint64_t v80 = v19;
    uint64_t v81 = v21;
    uint64_t v82 = v24;
    *(void *)&long long v83 = v90;
    *((void *)&v83 + 1) = v91;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    uint64_t v88 = 0;
    char v89 = 1;
  }
  else
  {
    swift_retain();
    specialized ARObjectCapturingView.init(model:)((uint64_t)v105);
    uint64_t v80 = v105[0];
    uint64_t v81 = v105[1];
    uint64_t v82 = v106;
    long long v83 = v107;
    long long v84 = v108;
    *(void *)&long long v85 = v109;
    *((void *)&v85 + 1) = v110;
    *(void *)&long long v86 = v111;
    *((void *)&v86 + 1) = v112;
    long long v87 = v113;
    uint64_t v88 = v114;
    char v89 = 0;
  }
  lazy protocol witness table accessor for type ARObjectCapturingView and conformance ARObjectCapturingView();
  lazy protocol witness table accessor for type ARFreeformCapturingView and conformance ARFreeformCapturingView();
  _ConditionalContent<>.init(storage:)();
  uint64_t v25 = v91;
  uint64_t v62 = v90;
  uint64_t v26 = v93;
  uint64_t v28 = v94;
  uint64_t v27 = v95;
  uint64_t v72 = v96;
  uint64_t v73 = v92;
  uint64_t v70 = v98;
  uint64_t v71 = v97;
  uint64_t v68 = v100;
  uint64_t v69 = v99;
  uint64_t v66 = v102;
  uint64_t v67 = v101;
  uint64_t v65 = v103;
  int v64 = v104;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v90 == 1)
  {
    uint64_t v63 = static HorizontalAlignment.center.getter();
    closure #1 in closure #1 in closure #1 in InternalCaptureView.body.getter((uint64_t)&v90);
    uint64_t v59 = v91;
    uint64_t v52 = v92;
    uint64_t v50 = v94;
    uint64_t v51 = v93;
    uint64_t v48 = v90;
    uint64_t v49 = v95;
    *((void *)&v47 + 1) = static Color.yellow.getter();
    *(void *)&long long v47 = swift_getKeyPath();
    uint64_t v29 = 1;
  }
  else
  {
    uint64_t v63 = 0;
    uint64_t v29 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v59 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v50 = 0;
    long long v47 = 0uLL;
  }
  int8x16_t v30 = v61;
  v53(v61, v60, v74);
  uint64_t v90 = v62;
  uint64_t v91 = v25;
  uint64_t v45 = v26;
  uint64_t v46 = v25;
  uint64_t v92 = v73;
  uint64_t v93 = v26;
  uint64_t v94 = v28;
  uint64_t v95 = v27;
  uint64_t v43 = v27;
  uint64_t v44 = v28;
  uint64_t v31 = v27;
  uint64_t v96 = v72;
  uint64_t v97 = v71;
  uint64_t v98 = v70;
  uint64_t v99 = v69;
  uint64_t v100 = v68;
  uint64_t v101 = v67;
  uint64_t v102 = v66;
  uint64_t v103 = v65;
  unsigned __int8 v104 = v64;
  v79[0] = v30;
  v79[1] = &v90;
  uint64_t v32 = v63;
  uint64_t v80 = v63;
  uint64_t v81 = 0;
  uint64_t v33 = v48;
  uint64_t v82 = v29;
  *(void *)&long long v83 = v48;
  uint64_t v34 = v51;
  LOBYTE(v30) = v52;
  *((void *)&v83 + 1) = v59;
  *(void *)&long long v84 = v52;
  *((void *)&v84 + 1) = v51;
  *(void *)&long long v85 = v50;
  *((void *)&v85 + 1) = v49;
  long long v86 = v47;
  v79[2] = &v80;
  outlined copy of _ConditionalContent<ARObjectCapturingView, ARFreeformCapturingView>.Storage(v62, v25, v73, v26, v28, v31, v72, v71, v70, v69, v68, v67, v66, v65, v64);
  uint64_t v35 = v32;
  uint64_t v36 = v33;
  uint64_t v37 = v33;
  uint64_t v38 = v59;
  outlined copy of ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>>?(v35, 0, v29, v36, v59, (char)v30, v34);
  v78[0] = v74;
  v78[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<ARObjectCapturingView, ARFreeformCapturingView>);
  v78[2] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>>?);
  uint64_t v75 = WitnessTable;
  unint64_t v76 = lazy protocol witness table accessor for type _ConditionalContent<ARObjectCapturingView, ARFreeformCapturingView> and conformance <> _ConditionalContent<A, B>();
  unint64_t v77 = lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>>? and conformance <A> A?();
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v79, 3uLL, (uint64_t)v78);
  outlined consume of _ConditionalContent<ARObjectCapturingView, ARFreeformCapturingView>.Storage(v62, v46, v73, v45, v44, v43, v72, v71, v70, v69, v68, v67, v66, v65, v64);
  outlined consume of ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>>?(v63, 0, v29, v37, v38, (char)v30, v34);
  uint64_t v39 = v74;
  float v40 = v57;
  v57((uint64_t *)v60, v74);
  outlined consume of ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>>?(v80, v81, v82, v83, *((uint64_t *)&v83 + 1), v84, *((uint64_t *)&v84 + 1));
  outlined consume of _ConditionalContent<ARObjectCapturingView, ARFreeformCapturingView>.Storage(v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104);
  return v40(v61, v39);
}

uint64_t closure #1 in closure #1 in closure #1 in InternalCaptureView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v2 - 8);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v3._countAndFlagsBits = 0x203D204F5349;
  v3._object = (void *)0xE600000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v3);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v4);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v5 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v7 = v6;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  char v9 = v8 & 1;
  *(unsigned char *)(a1 + 16) = v8 & 1;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  outlined copy of Text.Storage(v5, v6, v8 & 1);
  swift_bridgeObjectRetain();
  outlined consume of Text.Storage(v5, v7, v9);
  return swift_bridgeObjectRelease();
}

uint64_t static ViewBuilder.buildBlock<each A>(_:)(uint64_t TupleTypeMetadata, unint64_t a2, uint64_t a3)
{
  Swift::String v4 = (uint64_t *)TupleTypeMetadata;
  uint64_t v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    MEMORY[0x270FA5388](TupleTypeMetadata);
    char v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v9 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v8 - (char *)v5) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v10 = (long long *)(v5 + 2);
      uint64_t v11 = v8 + 16;
      unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *uint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v9 != a2)
      {
LABEL_9:
        unint64_t v14 = a2 - v9;
        uint64_t v15 = v9;
        uint64_t v16 = &v8[8 * v9];
        int32x4_t v17 = &v5[v15];
        do
        {
          uint64_t v18 = *v17++;
          *(void *)uint64_t v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  MEMORY[0x270FA5388](TupleTypeMetadata);
  uint64_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v21 = (int *)(v6 + 32);
    unint64_t v22 = a2;
    do
    {
      if (a2 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      uint64_t v25 = *v5++;
      uint64_t v24 = v25;
      uint64_t v26 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 16))(&v20[v23], v26);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  return TupleView.init(_:)();
}

uint64_t ObjectCaptureView.hideObjectReticle(_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v22 = a1;
  uint64_t v29 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v8 - 8);
  uint64_t v27 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = *(void *)(a2 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v9);
  type metadata accessor for OS_dispatch_queue();
  uint64_t v14 = static OS_dispatch_queue.main.getter();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  int v23 = (void *)v14;
  uint64_t v24 = v15;
  v15((uint64_t)&v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)], v3, a2);
  unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = *(_OWORD *)(a2 + 16);
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v12 + 32))(v17 + v16, &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)], a2);
  *(unsigned char *)(v17 + v16 + v13) = v22;
  aBlock[4] = partial apply for closure #1 in ObjectCaptureView.hideObjectReticle(_:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor;
  uint64_t v18 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v19 = v23;
  MEMORY[0x24C533830](0, v11, v7, v18);
  _Block_release(v18);

  (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v7, v5);
  (*(void (**)(unsigned char *, uint64_t))(v26 + 8))(v11, v27);
  return v24(v29, v25, a2);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t closure #1 in ObjectCaptureView.hideObjectReticle(_:)()
{
  return static Published.subscript.setter();
}

uint64_t sub_2465CD400()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for ObjectCaptureView() - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(*(void *)v2 + 64) + v4 + 1;
  uint64_t v7 = v0 + v4;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v7 + v2[11], v1);

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in ObjectCaptureView.hideObjectReticle(_:)()
{
  type metadata accessor for ObjectCaptureView();

  return closure #1 in ObjectCaptureView.hideObjectReticle(_:)();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t associated type witness table accessor for View.Body : View in ObjectCaptureView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata instantiation function for ObjectCaptureView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t type metadata completion function for ObjectCaptureView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ObjectCaptureView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t destroy for ObjectCaptureView(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *initializeWithCopy for ObjectCaptureView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  swift_retain();
  v5(v7, v8, v4);
  return a1;
}

void *assignWithCopy for ObjectCaptureView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *initializeWithTake for ObjectCaptureView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *assignWithTake for ObjectCaptureView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ObjectCaptureView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for ObjectCaptureView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x2465CDE70);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t sub_2465CDE98()
{
  type metadata accessor for InternalCaptureView();

  return swift_getWitnessTable();
}

uint64_t type metadata instantiation function for InternalCaptureView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t type metadata completion function for InternalCaptureView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for InternalCaptureView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 24) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    BOOL v11 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v12 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *BOOL v11 = *v12;
    uint64_t v13 = ((unint64_t)v11 + v6 + 8) & ~v6;
    uint64_t v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    int v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v15(v13, v14, v4);
  }
  return a1;
}

uint64_t destroy for InternalCaptureView(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *initializeWithCopy for InternalCaptureView(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  unsigned int v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v10 = ((unint64_t)v5 + v9 + 8) & ~v9;
  uint64_t v11 = ((unint64_t)v6 + v9 + 8) & ~v9;
  swift_retain();
  swift_retain();
  v8(v10, v11, v7);
  return a1;
}

void *assignWithCopy for InternalCaptureView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  unint64_t v6 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_OWORD *initializeWithTake for InternalCaptureView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *assignWithTake for InternalCaptureView(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  swift_release();
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 40))(((unint64_t)v7 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalCaptureView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 24) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 8) & ~v6);
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for InternalCaptureView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 24) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x2465CE808);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9;
          unint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for View.Body : View in InternalCaptureView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in InternalCaptureView.body.getter()
{
  return closure #1 in InternalCaptureView.body.getter();
}

uint64_t partial apply for closure #1 in closure #1 in InternalCaptureView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in InternalCaptureView.body.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

float key path getter for DataModel.cameraIso : DataModel@<S0>(float *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  float result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for DataModel.cameraIso : DataModel()
{
  return static Published.subscript.setter();
}

uint64_t key path getter for DataModel.debuggingMode : DataModel@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for DataModel.debuggingMode : DataModel()
{
  return static Published.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type ARObjectCapturingView and conformance ARObjectCapturingView()
{
  unint64_t result = lazy protocol witness table cache variable for type ARObjectCapturingView and conformance ARObjectCapturingView;
  if (!lazy protocol witness table cache variable for type ARObjectCapturingView and conformance ARObjectCapturingView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARObjectCapturingView and conformance ARObjectCapturingView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ARFreeformCapturingView and conformance ARFreeformCapturingView()
{
  unint64_t result = lazy protocol witness table cache variable for type ARFreeformCapturingView and conformance ARFreeformCapturingView;
  if (!lazy protocol witness table cache variable for type ARFreeformCapturingView and conformance ARFreeformCapturingView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARFreeformCapturingView and conformance ARFreeformCapturingView);
  }
  return result;
}

uint64_t outlined copy of _ConditionalContent<ARObjectCapturingView, ARFreeformCapturingView>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if ((a15 & 1) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();

  return swift_retain();
}

uint64_t outlined copy of ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  if (a7)
  {
    outlined copy of Text.Storage(a4, a5, a6 & 1);
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ARObjectCapturingView, ARFreeformCapturingView> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ARObjectCapturingView, ARFreeformCapturingView> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ARObjectCapturingView, ARFreeformCapturingView> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ARObjectCapturingView, ARFreeformCapturingView>);
    lazy protocol witness table accessor for type ARObjectCapturingView and conformance ARObjectCapturingView();
    lazy protocol witness table accessor for type ARFreeformCapturingView and conformance ARFreeformCapturingView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ARObjectCapturingView, ARFreeformCapturingView> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>>? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>>?);
    lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(Text, Spacer)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(Text, Spacer)>>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined consume of _ConditionalContent<ARObjectCapturingView, ARFreeformCapturingView>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  swift_release();
  if ((a15 & 1) == 0)
  {
    swift_release();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t outlined consume of ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  if (a7)
  {
    outlined consume of Text.Storage(a4, a5, a6 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t key path getter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2465CEF50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_2465CEFA8()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t sub_2465CF014()
{
  type metadata accessor for ARViewContainer();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ARObjectCapturingView, ARFreeformCapturingView>);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(Text, Spacer)>>, _EnvironmentKeyWritingModifier<Color?>>?);
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();

  return swift_getWitnessTable();
}

uint64_t ObjectCaptureSession.Updates.Iterator.next()(uint64_t a1)
{
  char v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  uint64_t v4 = type metadata accessor for AsyncStream.Iterator();
  *char v3 = v1;
  v3[1] = partial apply for closure #1 in nonisolated_PrivateTearDown(of:);
  return MEMORY[0x270FA1F70](a1, v4);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance ObjectCaptureSession.Updates<A>.Iterator(uint64_t a1)
{
  char v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *char v3 = v1;
  v3[1] = protocol witness for AsyncIteratorProtocol.next() in conformance ObjectCaptureSession.Updates<A>.Iterator;
  return ObjectCaptureSession.Updates.Iterator.next()(a1);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance ObjectCaptureSession.Updates<A>.Iterator()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _s19_RealityKit_SwiftUI20ObjectCaptureSessionC7UpdatesV8IteratorVy_x_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  void *v12 = v6;
  v12[1] = _s19_RealityKit_SwiftUI20ObjectCaptureSessionC7UpdatesV8IteratorVy_x_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return MEMORY[0x270FA1E90](a1, a2, a3, a5, a6);
}

uint64_t _s19_RealityKit_SwiftUI20ObjectCaptureSessionC7UpdatesV8IteratorVy_x_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t ObjectCaptureSession.Updates.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AsyncStream.Iterator();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - v4;
  type metadata accessor for AsyncStream();
  AsyncStream.makeAsyncIterator()();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance ObjectCaptureSession.Updates<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  ObjectCaptureSession.Updates.makeAsyncIterator()(a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v4(v2, a1);
}

uint64_t ObjectCaptureSession.Error.localizedDescription.getter()
{
  uint64_t v1 = type metadata accessor for ObjectCaptureSession.Error(0);
  MEMORY[0x270FA5388](v1);
  outlined init with copy of ObjectCaptureSession.Error(v0, (uint64_t)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ObjectCaptureSession.Error);
  return String.init<A>(describing:)();
}

uint64_t type metadata accessor for ObjectCaptureSession.Error(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for ObjectCaptureSession.Error);
}

uint64_t protocol witness for Error._domain.getter in conformance ObjectCaptureSession.Error()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance ObjectCaptureSession.Error()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance ObjectCaptureSession.Error()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance ObjectCaptureSession.Error()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance ObjectCaptureSession.Error()
{
  return MEMORY[0x270EEE940]();
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance ObjectCaptureSession.Error()
{
  return MEMORY[0x270EEE930]();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance ObjectCaptureSession.Error()
{
  return MEMORY[0x270EEE950]();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance ObjectCaptureSession.Error()
{
  return MEMORY[0x270EEE920]();
}

uint64_t static ObjectCaptureSession.isSupported.getter()
{
  return MEMORY[0x24C5323D0]() & 1;
}

uint64_t ObjectCaptureSession.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  ObjectCaptureSession.init()();
  return v0;
}

void ObjectCaptureSession.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = MEMORY[0x263F8EE88];
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = v2;
  *(_DWORD *)(v0 + 32) = 4;
  *(void *)(v0 + 40) = 0;
  uint64_t v3 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession__configuration;
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(unsigned char *)(v3 + *(int *)(type metadata accessor for ObjectCaptureSession.Configuration(0) + 20)) = 0;
  uint64_t v5 = OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_tornDown;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeSendableInstance<Bool>);
  uint64_t v6 = swift_allocObject();
  swift_beginAccess();
  Atomic.init(wrappedValue:)();
  swift_endAccess();
  *(void *)(v1 + v5) = v6;
  *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession__subscriptions) = v2;
  uint64_t v7 = OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_stateUpdater;
  id v8 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncUpdateStreamContainer<ObjectCaptureSession.CaptureState>));
  *(void *)(v1 + v7) = AsyncUpdateStreamContainer.init(name:)();
  uint64_t v9 = OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_feedbackUpdater;
  id v10 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncUpdateStreamContainer<Set<ObjectCaptureSession.Feedback>>));
  *(void *)(v1 + v9) = AsyncUpdateStreamContainer.init(name:)();
  uint64_t v11 = OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_cameraTrackingUpdater;
  id v12 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncUpdateStreamContainer<ObjectCaptureSession.Tracking>));
  *(void *)(v1 + v11) = AsyncUpdateStreamContainer.init(name:)();
  uint64_t v13 = OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_isPausedUpdater;
  uint64_t v14 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncUpdateStreamContainer<Bool>);
  id v15 = objc_allocWithZone(v14);
  *(void *)(v1 + v13) = AsyncUpdateStreamContainer.init(name:)();
  uint64_t v16 = OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_userCompletedScanPassUpdater;
  id v17 = objc_allocWithZone(v14);
  *(void *)(v1 + v16) = AsyncUpdateStreamContainer.init(name:)();
  uint64_t v18 = OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_canRequestImageCaptureUpdater;
  id v19 = objc_allocWithZone(v14);
  *(void *)(v1 + v18) = AsyncUpdateStreamContainer.init(name:)();
  uint64_t v20 = OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_numberOfShotsTakenUpdater;
  id v21 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncUpdateStreamContainer<Int>));
  *(void *)(v1 + v20) = AsyncUpdateStreamContainer.init(name:)();
  ObservationRegistrar.init()();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)logger);
  int v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl(&dword_2465C2000, v23, v24, "~~~ ObjectCaptureSession init was called! ~~~", v25, 2u);
    MEMORY[0x24C5348D0](v25, -1, -1);
  }

  type metadata accessor for DataModel(0);
  swift_allocObject();
  *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel) = DataModel.init()();
  v29[0] = 0;
  ObjectCaptureSession.setState(_:)(v29);
  ObjectCaptureSession.setFeedback(_:)(MEMORY[0x263F8EE88]);
  LOBYTE(v29[0]) = 4;
  ObjectCaptureSession.setCameraTracking(_:)((unsigned __int8 *)v29);
  ObjectCaptureSession.setIsPaused(_:)(0);
  ObjectCaptureSession.setCanRequestImageCapture(_:)(0);
  ObjectCaptureSession.setNumberOfShotsTaken(_:)(0);
  ObjectCaptureSession.setUserCompletedScanPass(_:)(0);
  type metadata accessor for ObjectCaptureSession();
  if (MEMORY[0x24C5323D0]())
  {
    ObjectCaptureSession.subscribeToInternalPublishers()();
    specialized static ObjectCaptureSession.stopResourceLogging()("Starting resource logging...", (uint64_t)&unk_26FACCF10, (uint64_t)&async function pointer to partial apply for closure #1 in static ObjectCaptureSession.startResourceLogging());
    ObjectCaptureSession.logAnalyticsEventsOnStartUp()();
  }
  else
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_2465C2000, v26, v27, "An ObjectCaptureSession cannot be created on this device since ObjectCaptureSession.isSupported is false", v28, 2u);
      MEMORY[0x24C5348D0](v28, -1, -1);
    }

    __break(1u);
  }
}

id key path getter for ObjectCaptureSession.state : ObjectCaptureSession@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + 16);
  *a2 = v4;
  return outlined copy of ObjectCaptureSession.CaptureState(v4);
}

uint64_t key path setter for ObjectCaptureSession.state : ObjectCaptureSession(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  outlined copy of ObjectCaptureSession.CaptureState(v1);
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  outlined consume of ObjectCaptureSession.CaptureState(v1);
  return swift_release();
}

id ObjectCaptureSession.state.getter@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = *(void **)(v1 + 16);
  *a1 = v3;
  return outlined copy of ObjectCaptureSession.CaptureState(v3);
}

uint64_t ObjectCaptureSession.stateUpdates.getter@<X0>(uint64_t a1@<X8>)
{
  return ObjectCaptureSession.stateUpdates.getter(&demangling cache variable for type metadata for AsyncStream<ObjectCaptureSession.CaptureState>?, &demangling cache variable for type metadata for AsyncStream<ObjectCaptureSession.CaptureState>, a1);
}

void ObjectCaptureSession.Feedback.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static ObjectCaptureSession.Feedback.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t key path getter for ObjectCaptureSession.feedback : ObjectCaptureSession@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for ObjectCaptureSession.feedback : ObjectCaptureSession()
{
  return swift_bridgeObjectRelease();
}

uint64_t ObjectCaptureSession.feedback.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ObjectCaptureSession.feedbackUpdates.getter@<X0>(uint64_t a1@<X8>)
{
  return ObjectCaptureSession.stateUpdates.getter(&demangling cache variable for type metadata for AsyncStream<Set<ObjectCaptureSession.Feedback>>?, &demangling cache variable for type metadata for AsyncStream<Set<ObjectCaptureSession.Feedback>>, a1);
}

BOOL static ObjectCaptureSession.Tracking.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 5) {
    return v3 == 5;
  }
  if (v2 == 4) {
    return v3 == 4;
  }
  if ((v3 & 0xFE) == 4) {
    return 0;
  }
  return v2 == v3;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ObjectCaptureSession.Tracking(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 5) {
    return v3 == 5;
  }
  if (v2 == 4) {
    return v3 == 4;
  }
  if ((v3 & 0xFE) == 4) {
    return 0;
  }
  return v2 == v3;
}

uint64_t key path getter for ObjectCaptureSession.cameraTracking : ObjectCaptureSession@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 32);
  return result;
}

uint64_t key path setter for ObjectCaptureSession.cameraTracking : ObjectCaptureSession()
{
  return swift_release();
}

uint64_t ObjectCaptureSession.cameraTracking.getter@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a1 = *(unsigned char *)(v1 + 32);
  return result;
}

uint64_t ObjectCaptureSession.cameraTrackingUpdates.getter@<X0>(uint64_t a1@<X8>)
{
  return ObjectCaptureSession.stateUpdates.getter(&demangling cache variable for type metadata for AsyncStream<ObjectCaptureSession.Tracking>?, &demangling cache variable for type metadata for AsyncStream<ObjectCaptureSession.Tracking>, a1);
}

uint64_t key path getter for ObjectCaptureSession.isPaused : ObjectCaptureSession@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 33);
  return result;
}

uint64_t key path setter for ObjectCaptureSession.isPaused : ObjectCaptureSession()
{
  return swift_release();
}

uint64_t ObjectCaptureSession.isPaused.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t ObjectCaptureSession.isPausedUpdates.getter@<X0>(uint64_t a1@<X8>)
{
  return ObjectCaptureSession.stateUpdates.getter(&demangling cache variable for type metadata for AsyncStream<Bool>?, &demangling cache variable for type metadata for AsyncStream<Bool>, a1);
}

uint64_t key path getter for ObjectCaptureSession.userCompletedScanPass : ObjectCaptureSession@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 34);
  return result;
}

uint64_t key path setter for ObjectCaptureSession.userCompletedScanPass : ObjectCaptureSession()
{
  return swift_release();
}

uint64_t ObjectCaptureSession.userCompletedScanPass.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t ObjectCaptureSession.userCompletedScanPassUpdates.getter@<X0>(uint64_t a1@<X8>)
{
  return ObjectCaptureSession.stateUpdates.getter(&demangling cache variable for type metadata for AsyncStream<Bool>?, &demangling cache variable for type metadata for AsyncStream<Bool>, a1);
}

uint64_t key path getter for ObjectCaptureSession.canRequestImageCapture : ObjectCaptureSession@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 35);
  return result;
}

uint64_t key path setter for ObjectCaptureSession.canRequestImageCapture : ObjectCaptureSession()
{
  return swift_release();
}

uint64_t ObjectCaptureSession.canRequestImageCapture.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 35);
}

uint64_t ObjectCaptureSession.canRequestImageCaptureUpdates.getter@<X0>(uint64_t a1@<X8>)
{
  return ObjectCaptureSession.stateUpdates.getter(&demangling cache variable for type metadata for AsyncStream<Bool>?, &demangling cache variable for type metadata for AsyncStream<Bool>, a1);
}

uint64_t key path getter for ObjectCaptureSession.numberOfShotsTaken : ObjectCaptureSession@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(void *)(v3 + 40);
  return result;
}

uint64_t key path setter for ObjectCaptureSession.numberOfShotsTaken : ObjectCaptureSession()
{
  return swift_release();
}

uint64_t ObjectCaptureSession.numberOfShotsTaken.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + 40);
}

uint64_t ObjectCaptureSession.numberOfShotsTakenUpdates.getter@<X0>(uint64_t a1@<X8>)
{
  return ObjectCaptureSession.stateUpdates.getter(&demangling cache variable for type metadata for AsyncStream<Int>?, &demangling cache variable for type metadata for AsyncStream<Int>, a1);
}

uint64_t ObjectCaptureSession.stateUpdates.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of AsyncUpdateStreamContainer.makeUpdater()();
  dispatch thunk of AsyncUpdateStream.stream.getter();
  swift_release();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a3, v7, v8);
  }
  __break(1u);
  return result;
}

uint64_t ObjectCaptureSession.maximumNumberOfInputImages.getter()
{
  type metadata accessor for ObjectCaptureSession();
  uint64_t v0 = type metadata accessor for ObjectCaptureSession.HardwareSpecs();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ObjectCaptureSession.hardwareSpecs.getter();
  uint64_t v4 = ObjectCaptureSession.HardwareSpecs.maxNumImages.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t ObjectCaptureSession.Configuration.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  uint64_t result = type metadata accessor for ObjectCaptureSession.Configuration(0);
  *(unsigned char *)(a1 + *(int *)(result + 20)) = 0;
  return result;
}

uint64_t type metadata accessor for ObjectCaptureSession.Configuration(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for ObjectCaptureSession.Configuration);
}

uint64_t ObjectCaptureSession.Configuration.checkpointDirectory.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of URL?(v1, a1);
}

uint64_t ObjectCaptureSession.Configuration.checkpointDirectory.setter(uint64_t a1)
{
  return outlined assign with take of URL?(a1, v1);
}

uint64_t (*ObjectCaptureSession.Configuration.checkpointDirectory.modify())()
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

uint64_t ObjectCaptureSession.Configuration.isOverCaptureEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ObjectCaptureSession.Configuration(0) + 20));
}

uint64_t ObjectCaptureSession.Configuration.isOverCaptureEnabled.setter(char a1)
{
  uint64_t result = type metadata accessor for ObjectCaptureSession.Configuration(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*ObjectCaptureSession.Configuration.isOverCaptureEnabled.modify())()
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

uint64_t key path getter for ObjectCaptureSession.configuration : ObjectCaptureSession@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession__configuration;
  swift_beginAccess();
  return outlined init with copy of ObjectCaptureSession.Error(v4, a2, type metadata accessor for ObjectCaptureSession.Configuration);
}

uint64_t key path setter for ObjectCaptureSession.configuration : ObjectCaptureSession(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for ObjectCaptureSession.Configuration(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of ObjectCaptureSession.Error(a1, (uint64_t)v6, type metadata accessor for ObjectCaptureSession.Configuration);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v6, type metadata accessor for ObjectCaptureSession.Configuration);
}

uint64_t ObjectCaptureSession.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession__configuration;
  swift_beginAccess();
  return outlined init with copy of ObjectCaptureSession.Error(v3, a1, type metadata accessor for ObjectCaptureSession.Configuration);
}

uint64_t closure #1 in ObjectCaptureSession.configuration.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ObjectCaptureSession.Configuration(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ObjectCaptureSession.Error(a2, (uint64_t)v6, type metadata accessor for ObjectCaptureSession.Configuration);
  uint64_t v7 = a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession__configuration;
  swift_beginAccess();
  outlined assign with take of ObjectCaptureSession.Configuration((uint64_t)v6, v7);
  return swift_endAccess();
}

void ObjectCaptureSession.start(imagesDirectory:configuration:)(uint8_t *a1, uint64_t a2)
{
  uint64_t v48 = type metadata accessor for DataModel.Error(0);
  MEMORY[0x270FA5388](v48);
  uint64_t v5 = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ObjectCaptureSession.Configuration(0);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v47 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((URL.isFileURL.getter() & 1) == 0)
  {
    if (one-time initialization token for logger == -1) {
      goto LABEL_26;
    }
    goto LABEL_34;
  }
  if (specialized static ObjectCaptureSharedSymbols.isNonExistentOrEmptyDirectory(_:)())
  {
    outlined init with copy of URL?(a2, (uint64_t)v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    {
      v47[0] = v5;
      outlined destroy of URL?((uint64_t)v14, &demangling cache variable for type metadata for URL?);
LABEL_15:
      outlined init with copy of ObjectCaptureSession.Error(a2, (uint64_t)v11, type metadata accessor for ObjectCaptureSession.Configuration);
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x270FA5388](KeyPath);
      uint64_t v26 = v49;
      v47[-2] = v49;
      v47[-1] = v11;
      uint64_t v50 = v26;
      lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v11, type metadata accessor for ObjectCaptureSession.Configuration);
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      v47[1] = __swift_project_value_buffer(v27, (uint64_t)logger);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        int8x16_t v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int8x16_t v30 = 0;
        _os_log_impl(&dword_2465C2000, v28, v29, "Starting ObjectCaptureSession with configuration:", v30, 2u);
        MEMORY[0x24C5348D0](v30, -1, -1);
      }

      specialized ObjectCaptureSession.logConfiguration(_:)(a2);
      uint64_t v31 = v49;
      swift_getKeyPath();
      uint64_t v50 = v31;
      swift_retain();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v32 = v31 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession__configuration;
      swift_beginAccess();
      outlined init with copy of ObjectCaptureSession.Error(v32, (uint64_t)v9, type metadata accessor for ObjectCaptureSession.Configuration);
      DataModel.startSession(imagesURL:configuration:)(a1, (uint64_t)v9);
      outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v9, type metadata accessor for ObjectCaptureSession.Configuration);
      swift_release();
      return;
    }
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    if ((URL.isFileURL.getter() & 1) == 0)
    {
      while (1)
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v43 = type metadata accessor for Logger();
        __swift_project_value_buffer(v43, (uint64_t)logger);
        uint64_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v46 = 0;
          _os_log_impl(&dword_2465C2000, v44, v45, "checkpointDirectory must be a file URL but was not!", v46, 2u);
          MEMORY[0x24C5348D0](v46, -1, -1);
        }

        __break(1u);
LABEL_34:
        swift_once();
LABEL_26:
        uint64_t v39 = type metadata accessor for Logger();
        __swift_project_value_buffer(v39, (uint64_t)logger);
        float v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v42 = 0;
          _os_log_impl(&dword_2465C2000, v40, v41, "imagesDirectory must be a file URL but was not!", v42, 2u);
          MEMORY[0x24C5348D0](v42, -1, -1);
        }

        __break(1u);
      }
    }
    if (specialized static ObjectCaptureSharedSymbols.isNonExistentOrEmptyDirectory(_:)())
    {
      v47[0] = v5;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      goto LABEL_15;
    }
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)logger);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl(&dword_2465C2000, v34, v35, "A provided checkpointDirectory must be empty to start a new scan!", v36, 2u);
      MEMORY[0x24C5348D0](v36, -1, -1);
    }

    type metadata accessor for ObjectCaptureSession.Error(0);
    lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession.Error and conformance ObjectCaptureSession.Error, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession.Error);
    uint64_t v37 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(v38, v18, v15);
    swift_storeEnumTagMultiPayload();
    ObjectCaptureSession.switchToErrorState(error:)(v37);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)logger);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_2465C2000, v20, v21, "imagesDirectory must be emoty to start a new scan!", v22, 2u);
      MEMORY[0x24C5348D0](v22, -1, -1);
    }

    type metadata accessor for ObjectCaptureSession.Error(0);
    lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession.Error and conformance ObjectCaptureSession.Error, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession.Error);
    int v23 = (void *)swift_allocError();
    (*(void (**)(uint64_t, uint8_t *, uint64_t))(v16 + 16))(v24, a1, v15);
    swift_storeEnumTagMultiPayload();
    ObjectCaptureSession.switchToErrorState(error:)(v23);
  }
}

Swift::Void __swiftcall ObjectCaptureSession.resume()()
{
}

Swift::Void __swiftcall ObjectCaptureSession.pause()()
{
}

Swift::Bool __swiftcall ObjectCaptureSession.startDetecting()()
{
  return ObjectCaptureSession.startDetecting()("startDetecting() called!", (void (*)(uint64_t))DataModel.startDetecting());
}

Swift::Bool __swiftcall ObjectCaptureSession.resetDetection()()
{
  return ObjectCaptureSession.startDetecting()("resetDetection() called!", (void (*)(uint64_t))DataModel.resetDetection());
}

uint64_t ObjectCaptureSession.startDetecting()(const char *a1, void (*a2)(uint64_t))
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_2465C2000, v5, v6, a1, v7, 2u);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  uint64_t v8 = swift_retain();
  a2(v8);
  swift_release();
  return 1;
}

Swift::Void __swiftcall ObjectCaptureSession.startCapturing()()
{
  uint64_t v0 = type metadata accessor for DataModel.Error(0);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (uint64_t *)((char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v6 = 0;
    _os_log_impl(&dword_2465C2000, v4, v5, "startCapturing() called!", v6, 2u);
    MEMORY[0x24C5348D0](v6, -1, -1);
  }

  swift_retain();
  DataModel.startCapturing()();
  if (v7)
  {
    swift_release();
    v26[0] = v7;
    id v8 = v7;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    if (!swift_dynamicCast())
    {
LABEL_9:

      id v9 = v7;
      id v10 = v7;
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v14 = (void *)swift_slowAlloc();
        uint64_t v25 = (uint64_t)v7;
        v26[0] = v14;
        *(_DWORD *)uint64_t v13 = 136446210;
        id v15 = v7;
        uint64_t v16 = String.init<A>(describing:)();
        uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_2465C2000, v11, v12, "Got Unknown error = %{public}s", v13, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v14, -1, -1);
        MEMORY[0x24C5348D0](v13, -1, -1);
      }
      else
      {
      }
      ObjectCaptureSession.switchToErrorState(error:)(v7);

      return;
    }
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v2, type metadata accessor for DataModel.Error);
      goto LABEL_9;
    }
    uint64_t v19 = *v2;
    unint64_t v18 = v2[1];
    swift_bridgeObjectRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v25 = v23;
      *(_DWORD *)uint64_t v22 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2465C2000, v20, v21, "startCapturing() called in invalid state %{public}s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v23, -1, -1);
      MEMORY[0x24C5348D0](v22, -1, -1);

      __break(1u);
    }

    swift_bridgeObjectRelease_n();
    __break(1u);
  }
  else
  {
    swift_release();
  }
}

Swift::Void __swiftcall ObjectCaptureSession.beginNewScanPassAfterFlip()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DataModel.State(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (uint8_t *)&isa - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (uint64_t *)((char *)&isa - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for OS_dispatch_queue();
  *id v8 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F8F0E0], v5);
  char v9 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_6:
    outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v4, type metadata accessor for DataModel.State);
    swift_release();
    if (one-time initialization token for logger != -1) {
      goto LABEL_15;
    }
    goto LABEL_7;
  }
  uint64_t v10 = *(uint64_t *)((char *)&v1->isa + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v11 = type metadata accessor for DataModel.Error(0);
  if ((*(unsigned int (**)(uint8_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v4, 8, v11) != 3) {
    goto LABEL_6;
  }
  swift_release();
  if (*(unsigned char *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) == 2)
  {
    while (1)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)logger);
      uint64_t v1 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v1, v19))
      {
        uint64_t v4 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v4 = 0;
        _os_log_impl(&dword_2465C2000, v1, v19, "Invalid call in area mode!", v4, 2u);
        MEMORY[0x24C5348D0](v4, -1, -1);
      }

      __break(1u);
      do
      {

        swift_release_n();
        __break(1u);
LABEL_15:
        swift_once();
LABEL_7:
        uint64_t v12 = type metadata accessor for Logger();
        __swift_project_value_buffer(v12, (uint64_t)logger);
        swift_retain_n();
        uint64_t v4 = (uint8_t *)Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.error.getter();
      }
      while (!os_log_type_enabled((os_log_t)v4, v13));
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v21 = v15;
      *(_DWORD *)uint64_t v14 = 136446210;
      swift_getKeyPath();
      id isa = v1;
      lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      id isa = v1[2].isa;
      outlined copy of ObjectCaptureSession.CaptureState(isa);
      uint64_t v16 = String.init<A>(describing:)();
      id isa = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, (os_log_t)v4, v13, "Can't beginNewScanPassAfterFlip() from state == %{public}s  Must be .paused from .capturing", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v15, -1, -1);
      MEMORY[0x24C5348D0](v14, -1, -1);

      __break(1u);
    }
  }
  swift_retain();
  DataModel.beginNextSegment()();
  swift_release();
}

Swift::Void __swiftcall ObjectCaptureSession.beginNewScanPass()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DataModel.State(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v34 - v6;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for OS_dispatch_queue();
  *uint64_t v11 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F8F0E0], v8);
  char v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_8;
  }
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel);
  swift_retain();
  if (DataModel.inCapturingMetaState.getter())
  {
    swift_release();
  }
  else
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v14 = type metadata accessor for DataModel.Error(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v5, 1, 8, v14);
    char v15 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v7, (uint64_t)v5);
    outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v5, type metadata accessor for DataModel.State);
    outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v7, type metadata accessor for DataModel.State);
    swift_release();
    if ((v15 & 1) == 0) {
      goto LABEL_18;
    }
  }
  if (*(unsigned char *)(v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) == 2)
  {
    if (one-time initialization token for logger != -1) {
      goto LABEL_23;
    }
    while (1)
    {
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)logger);
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v29 = 0;
        _os_log_impl(&dword_2465C2000, v27, v28, "Invalid call in area mode!", v29, 2u);
        MEMORY[0x24C5348D0](v29, -1, -1);
      }

      __break(1u);
LABEL_18:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      __swift_project_value_buffer(v30, (uint64_t)logger);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl(&dword_2465C2000, v31, v32, "Cannot call beginNewScanPass() unless capturing or paused during capture.", v33, 2u);
        MEMORY[0x24C5348D0](v33, -1, -1);
      }

      __break(1u);
LABEL_23:
      swift_once();
    }
  }
  swift_retain();
  DataModel.beginNewOrbit()();
  if (!v7)
  {
    swift_release();
    return;
  }
  swift_release();
  if (one-time initialization token for logger != -1) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)logger);
  unint64_t v17 = v7;
  uint64_t v18 = v7;
  os_log_type_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v35 = (uint64_t)v7;
    uint64_t v36 = v22;
    *(_DWORD *)uint64_t v21 = 136446210;
    uint64_t v23 = v7;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_2465C2000, v19, v20, "Begin new scan pass failed: %{public}s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v22, -1, -1);
    MEMORY[0x24C5348D0](v21, -1, -1);
  }
  else
  {
  }
}

Swift::Void __swiftcall ObjectCaptureSession.finish()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "finish() called!", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  swift_getKeyPath();
  uint64_t v18 = v1;
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v1 + 16) == 3)
  {
    swift_retain();
    DataModel.stopCapturing()();
    if (!v6)
    {
      swift_release();
      return;
    }
    swift_release();
    id v7 = v6;
    id v8 = v6;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v18 = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      id v13 = v6;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v14 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_2465C2000, v9, v10, "startCapturing() punting!  Got error: %{public}s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v12, -1, -1);
      MEMORY[0x24C5348D0](v11, -1, -1);

      return;
    }
  }
  else
  {
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v17 = 0;
      _os_log_impl(&dword_2465C2000, v9, v16, "Ignoring call: finish() called in state != .capturing", v17, 2u);
      MEMORY[0x24C5348D0](v17, -1, -1);
    }
  }
}

Swift::Void __swiftcall ObjectCaptureSession.cancel()()
{
}

uint64_t ObjectCaptureSession.resume()(const char *a1, void (*a2)(uint64_t))
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v7 = 0;
    _os_log_impl(&dword_2465C2000, v5, v6, a1, v7, 2u);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  uint64_t v8 = swift_retain();
  a2(v8);

  return swift_release();
}

Swift::Void __swiftcall ObjectCaptureSession.requestImageCapture()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 67240192;
    swift_getKeyPath();
    lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_2465C2000, v1, v2, "Requesting a manual shot...  canRequestImageCapture=%{BOOL,public}d", v3, 8u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  swift_retain();
  DataModel.takeManualShot()();
  swift_release();
}

uint64_t ObjectCaptureSession.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = &v29[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<Bool>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_2465C2000, v10, v11, "~~~ ObjectCaptureSession deinit was called! ~~~", v12, 2u);
    MEMORY[0x24C5348D0](v12, -1, -1);
  }

  uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_tornDown)
      + *(void *)(**(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_tornDown) + 88);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v13, v5);
  Atomic.wrappedValue.getter();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  if (v29[31] == 1)
  {
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v16 = 0;
      _os_log_impl(&dword_2465C2000, v14, v15, "~~~ Already tornDown properly in deinit, nothing to do.", v16, 2u);
      MEMORY[0x24C5348D0](v16, -1, -1);
    }
  }
  else
  {
    uint64_t AllAsync = ObjectCaptureSession.unsafeGetAllAsyncStreams()();
    uint64_t v18 = type metadata accessor for TaskPriority();
    os_log_type_t v19 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    v19(v4, 1, 1, v18);
    type metadata accessor for MainActor();
    swift_bridgeObjectRetain();
    uint64_t v20 = static MainActor.shared.getter();
    uint64_t v21 = (void *)swift_allocObject();
    uint64_t v22 = MEMORY[0x263F8F500];
    v21[2] = v20;
    v21[3] = v22;
    unsigned char v21[4] = AllAsync;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in nonisolated_PrivateTearDown(of:), (uint64_t)v21);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v23 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel);
    v19(v4, 1, 1, v18);
    swift_retain();
    uint64_t v24 = static MainActor.shared.getter();
    unint64_t v25 = (void *)swift_allocObject();
    v25[2] = v24;
    v25[3] = v22;
    v25[4] = v23;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in nonisolated_PrivateTearDown(of:), (uint64_t)v25);
    swift_release();
    specialized static ObjectCaptureSession.stopResourceLogging()("Stopping resource logging timer...", (uint64_t)&unk_26FACCEC0, (uint64_t)&async function pointer to partial apply for closure #1 in static ObjectCaptureSession.stopResourceLogging());
  }
  outlined consume of ObjectCaptureSession.CaptureState(*(id *)(v1 + 16));
  swift_bridgeObjectRelease();
  outlined destroy of ObjectCaptureSession.Configuration(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession__configuration, type metadata accessor for ObjectCaptureSession.Configuration);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v26 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession___observationRegistrar;
  uint64_t v27 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
  return v1;
}

uint64_t ObjectCaptureSession.__deallocating_deinit()
{
  ObjectCaptureSession.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjectCaptureSession.subscriptions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for ObjectCaptureSession.subscriptions : ObjectCaptureSession@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = (void *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession__subscriptions);
  swift_beginAccess();
  *a2 = *v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for ObjectCaptureSession.subscriptions : ObjectCaptureSession()
{
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in ObjectCaptureSession.subscriptions.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession__subscriptions);
  swift_beginAccess();
  *uint64_t v3 = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void ObjectCaptureSession.setState(_:)(void **a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  swift_getKeyPath();
  uint64_t v19 = v1;
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v1 + 16);
  switch((unint64_t)v4)
  {
    case 0uLL:
      if (v3) {
        goto LABEL_13;
      }
      goto LABEL_23;
    case 1uLL:
      if (v3 == (void *)1) {
        goto LABEL_23;
      }
      goto LABEL_13;
    case 2uLL:
      if (v3 == (void *)2) {
        goto LABEL_23;
      }
      goto LABEL_13;
    case 3uLL:
      if (v3 == (void *)3) {
        goto LABEL_23;
      }
      goto LABEL_13;
    case 4uLL:
      if (v3 != (void *)4) {
        goto LABEL_13;
      }
      goto LABEL_23;
    case 5uLL:
      if (v3 == (void *)5) {
        goto LABEL_23;
      }
      goto LABEL_13;
    default:
      if ((unint64_t)v3 < 6)
      {
LABEL_13:
        outlined copy of ObjectCaptureSession.CaptureState(*(id *)(v2 + 16));
        outlined copy of ObjectCaptureSession.CaptureState(v4);
        outlined copy of ObjectCaptureSession.CaptureState(v3);
        outlined consume of ObjectCaptureSession.CaptureState(v4);
        outlined consume of ObjectCaptureSession.CaptureState(v3);
        outlined consume of ObjectCaptureSession.CaptureState(v4);
        uint64_t KeyPath = swift_getKeyPath();
        MEMORY[0x270FA5388](KeyPath);
        uint64_t v19 = v2;
        outlined copy of ObjectCaptureSession.CaptureState(v3);
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        outlined consume of ObjectCaptureSession.CaptureState(v3);
        swift_release();
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        __swift_project_value_buffer(v8, (uint64_t)logger);
        swift_retain_n();
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v9, v10))
        {
          os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
          uint64_t v18 = swift_slowAlloc();
          uint64_t v19 = v18;
          *(_DWORD *)os_log_type_t v11 = 136315138;
          swift_getKeyPath();
          ObservationRegistrar.access<A, B>(_:keyPath:)();
          swift_release();
          outlined copy of ObjectCaptureSession.CaptureState(*(id *)(v2 + 16));
          uint64_t v12 = String.init<A>(describing:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v19);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          swift_arrayDestroy();
          MEMORY[0x24C5348D0](v18, -1, -1);
          MEMORY[0x24C5348D0](v11, -1, -1);
        }
        else
        {

          swift_release_n();
        }
        swift_getKeyPath();
        uint64_t v19 = v2;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v14 = *(void **)(v2 + 16);
        uint64_t v19 = (uint64_t)v14;
        outlined copy of ObjectCaptureSession.CaptureState(v14);
        dispatch thunk of AsyncUpdateStreamContainer.publishUpdate(_:)();
        outlined consume of ObjectCaptureSession.CaptureState(v14);
        if ((unint64_t)v3 >= 5)
        {
          os_log_type_t v15 = Logger.logObject.getter();
          os_log_type_t v16 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v15, v16))
          {
            unint64_t v17 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v17 = 0;
            _os_log_impl(&dword_2465C2000, v15, v16, "Entering terminal state, so calling tearDown()...", v17, 2u);
            MEMORY[0x24C5348D0](v17, -1, -1);
          }

          ObjectCaptureSession.tearDown()();
        }
      }
      else
      {
        id v5 = v4;
        id v6 = v4;
LABEL_23:
        outlined copy of ObjectCaptureSession.CaptureState(v3);
        outlined consume of ObjectCaptureSession.CaptureState(v4);
        outlined consume of ObjectCaptureSession.CaptureState(v3);
        outlined consume of ObjectCaptureSession.CaptureState(v4);
      }
      return;
  }
}

Swift::Int ObjectCaptureSession.setFeedback(_:)(uint64_t a1)
{
  swift_getKeyPath();
  uint64_t v13 = v1;
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  Swift::Int result = specialized static Set.== infix(_:_:)(*(void *)(v1 + 24), a1);
  if ((result & 1) == 0)
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    uint64_t v13 = v1;
    swift_bridgeObjectRetain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)logger);
    swift_retain_n();
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = v12;
      *(_DWORD *)uint64_t v8 = 136315138;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      lazy protocol witness table accessor for type ObjectCaptureSession.Feedback and conformance ObjectCaptureSession.Feedback();
      swift_bridgeObjectRetain();
      uint64_t v9 = Set.description.getter();
      unint64_t v11 = v10;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v12, -1, -1);
      MEMORY[0x24C5348D0](v8, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    swift_getKeyPath();
    uint64_t v13 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v13 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    dispatch thunk of AsyncUpdateStreamContainer.publishUpdate(_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ObjectCaptureSession.setCameraTracking(_:)(unsigned __int8 *a1)
{
  int v2 = *a1;
  swift_getKeyPath();
  uint64_t v13 = v1;
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  int v4 = *(unsigned __int8 *)(v1 + 32);
  if (v4 == 5)
  {
    if (v2 == 5) {
      return result;
    }
  }
  else if (v4 == 4)
  {
    if (v2 == 4) {
      return result;
    }
  }
  else if ((v2 & 0xFE) != 4 && v4 == v2)
  {
    return result;
  }
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  uint64_t v13 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  swift_retain_n();
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v13 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v11 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v10, -1, -1);
    MEMORY[0x24C5348D0](v9, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  swift_getKeyPath();
  uint64_t v13 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LOBYTE(v13) = *(unsigned char *)(v1 + 32);
  return dispatch thunk of AsyncUpdateStreamContainer.publishUpdate(_:)();
}

uint64_t ObjectCaptureSession.setIsPaused(_:)(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  swift_getKeyPath();
  uint64_t v13 = v1;
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if (*(unsigned __int8 *)(v1 + 33) != v3)
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    uint64_t v13 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)logger);
    swift_retain_n();
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v13 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*(unsigned char *)(v1 + 33)) {
        uint64_t v11 = 1702195828;
      }
      else {
        uint64_t v11 = 0x65736C6166;
      }
      if (*(unsigned char *)(v1 + 33)) {
        unint64_t v12 = 0xE400000000000000;
      }
      else {
        unint64_t v12 = 0xE500000000000000;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v10, -1, -1);
      MEMORY[0x24C5348D0](v9, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    swift_getKeyPath();
    uint64_t v13 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    LOBYTE(v13) = *(unsigned char *)(v2 + 33);
    return dispatch thunk of AsyncUpdateStreamContainer.publishUpdate(_:)();
  }
  return result;
}

uint64_t ObjectCaptureSession.setUserCompletedScanPass(_:)(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  swift_getKeyPath();
  uint64_t v13 = v1;
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if (*(unsigned __int8 *)(v1 + 34) != v3)
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    uint64_t v13 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)logger);
    swift_retain_n();
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v13 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*(unsigned char *)(v1 + 34)) {
        uint64_t v11 = 1702195828;
      }
      else {
        uint64_t v11 = 0x65736C6166;
      }
      if (*(unsigned char *)(v1 + 34)) {
        unint64_t v12 = 0xE400000000000000;
      }
      else {
        unint64_t v12 = 0xE500000000000000;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v10, -1, -1);
      MEMORY[0x24C5348D0](v9, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    swift_getKeyPath();
    uint64_t v13 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    LOBYTE(v13) = *(unsigned char *)(v2 + 34);
    return dispatch thunk of AsyncUpdateStreamContainer.publishUpdate(_:)();
  }
  return result;
}

uint64_t ObjectCaptureSession.setNumberOfShotsTaken(_:)(uint64_t a1)
{
  swift_getKeyPath();
  uint64_t v12 = v1;
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if (*(void *)(v1 + 40) != a1)
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    uint64_t v12 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)logger);
    swift_retain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v12 = v9;
      *(_DWORD *)os_log_type_t v8 = 136315138;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v9, -1, -1);
      MEMORY[0x24C5348D0](v8, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    swift_getKeyPath();
    uint64_t v12 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v12 = *(void *)(v1 + 40);
    return dispatch thunk of AsyncUpdateStreamContainer.publishUpdate(_:)();
  }
  return result;
}

uint64_t ObjectCaptureSession.setCanRequestImageCapture(_:)(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  swift_getKeyPath();
  uint64_t v13 = v1;
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if (*(unsigned __int8 *)(v1 + 35) != v3)
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    uint64_t v13 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)logger);
    swift_retain_n();
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v13 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*(unsigned char *)(v1 + 35)) {
        uint64_t v11 = 1702195828;
      }
      else {
        uint64_t v11 = 0x65736C6166;
      }
      if (*(unsigned char *)(v1 + 35)) {
        unint64_t v12 = 0xE400000000000000;
      }
      else {
        unint64_t v12 = 0xE500000000000000;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v10, -1, -1);
      MEMORY[0x24C5348D0](v9, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    swift_getKeyPath();
    uint64_t v13 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    LOBYTE(v13) = *(unsigned char *)(v2 + 35);
    return dispatch thunk of AsyncUpdateStreamContainer.publishUpdate(_:)();
  }
  return result;
}

uint64_t closure #1 in static ObjectCaptureSession.startResourceLogging()()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in static ObjectCaptureSession.startResourceLogging(), v2, v1);
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);
  uint64_t v7;

  swift_release();
  type metadata accessor for ResourceTimedLogger();
  uint64_t result = swift_initStaticObject();
  uint64_t v2 = *(void *)(result + 32);
  int v3 = __OFADD__(v2, 1);
  uint64_t v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(void *)(result + 32) = v4;
    uint64_t v5 = *(void **)(result + 24);
    if (!v5 || !objc_msgSend(v5, sel_isValid)) {
      ResourceTimedLogger.startNewTimer()();
    }
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  return result;
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of URL?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t closure #1 in static ObjectCaptureSession.stopResourceLogging()()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in static ObjectCaptureSession.stopResourceLogging(), v2, v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  type metadata accessor for ResourceTimedLogger();
  swift_initStaticObject();
  ResourceTimedLogger.unrequestLogging()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void ObjectCaptureSession.tearDown()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<Bool>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_tornDown)
     + *(void *)(**(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_tornDown) + 88);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  Atomic.wrappedValue.getter();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  if (v11[8])
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_2465C2000, v8, v9, "Already tornDown, nothing to do...", v10, 2u);
      MEMORY[0x24C5348D0](v10, -1, -1);
    }
  }
  else
  {
    ObjectCaptureSession.logAnalyticsEventsOnTearDown()();
    ObjectCaptureSession.finishAysncStreams()();
    swift_retain();
    DataModel.tearDown()();
    swift_release();
    specialized static ObjectCaptureSession.stopResourceLogging()("Stopping resource logging timer...", (uint64_t)&unk_26FACCEC0, (uint64_t)&async function pointer to partial apply for closure #1 in static ObjectCaptureSession.stopResourceLogging());
    v11[39] = 1;
    swift_beginAccess();
    Atomic.wrappedValue.setter();
    swift_endAccess();
  }
}

uint64_t ObjectCaptureSession.switchToErrorState(error:)(void *a1)
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  id v3 = a1;
  id v4 = a1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v14 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    id v9 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, (uint64_t *)&v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_2465C2000, v5, v6, "Switch to error state.  Got error= %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v8, -1, -1);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }
  else
  {
  }
  uint64_t v14 = a1;
  id v12 = a1;
  ObjectCaptureSession.setState(_:)(&v14);

  swift_retain();
  DataModel.cancelCapturing()();
  return swift_release();
}

uint64_t ObjectCaptureSession.subscribeToInternalPublishers()()
{
  uint64_t v1 = v0;
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v63 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v58 = (char *)v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Published<Bool>.Publisher, OS_dispatch_queue>);
  uint64_t v64 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  double v53 = (char *)v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v56 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int>.Publisher);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  uint64_t v50 = v7;
  MEMORY[0x270FA5388](v6);
  os_log_type_t v45 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Published<Int>.Publisher, OS_dispatch_queue>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v51 = (void (*)(void, void))v9;
  uint64_t v52 = v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v48 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<DataModel.State>.Publisher);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  os_log_type_t v15 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)&v0[OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel];
  swift_beginAccess();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<DataModel.State>);
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  v44[1] = MEMORY[0x263EFDE50];
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Published<DataModel.State>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<DataModel.State>.Publisher);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  swift_getKeyPath();
  id v65 = v0;
  uint64_t v17 = lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v65 = v0;
  swift_getKeyPath();
  uint64_t v46 = v17;
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  float32x4_t v55 = &v0[OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession__subscriptions];
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v65 = v0;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v18 = swift_allocObject();
  swift_weakInit();
  uint64_t v19 = (uint64_t (**)(uint64_t, uint64_t))(v16 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_onFeedback);
  uint64_t v20 = *(void *)(v16 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_onFeedback);
  *uint64_t v19 = partial apply for closure #2 in ObjectCaptureSession.subscribeToInternalPublishers();
  v19[1] = (uint64_t (*)(uint64_t, uint64_t))v18;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?(v20);
  swift_beginAccess();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Int>);
  uint64_t v21 = v45;
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  unint64_t v54 = type metadata accessor for OS_dispatch_queue();
  id v65 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v60 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v22 = *(void *)(v60 - 8);
  uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  uint64_t v57 = v22 + 56;
  uint64_t v23 = (uint64_t)v56;
  v59(v56, 1, 1, v60);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Published<Int>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Int>.Publisher);
  uint64_t v47 = lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (void (*)(uint64_t))type metadata accessor for OS_dispatch_queue);
  unint64_t v25 = v48;
  uint64_t v24 = v49;
  Publisher.receive<A>(on:options:)();
  outlined destroy of URL?(v23, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  (*(void (**)(char *, uint64_t))(v50 + 8))(v21, v24);
  swift_allocObject();
  swift_weakInit();
  uint64_t v49 = MEMORY[0x263EFDCB0];
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Published<Int>.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Published<Int>.Publisher, OS_dispatch_queue>);
  uint64_t v26 = v51;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, void))(v52 + 8))(v25, v26);
  swift_getKeyPath();
  id v65 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v65 = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v65 = v1;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  swift_retain();
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  uint64_t v27 = v58;
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  id v65 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v28 = (uint64_t)v56;
  v59(v56, 1, 1, v60);
  uint64_t v52 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Published<Bool>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Bool>.Publisher);
  os_log_type_t v29 = v53;
  uint64_t v30 = v61;
  Publisher.receive<A>(on:options:)();
  outlined destroy of URL?(v28, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  uint64_t v31 = *(void (**)(void, void))(v63 + 8);
  v63 += 8;
  uint64_t v51 = v31;
  v31(v27, v30);
  swift_allocObject();
  swift_weakInit();
  uint64_t v49 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Published<Bool>.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Published<Bool>.Publisher, OS_dispatch_queue>);
  uint64_t v32 = v62;
  uint64_t v33 = v29;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  uint64_t v34 = *(char **)(v64 + 8);
  v64 += 8;
  uint64_t v48 = v34;
  ((void (*)(char *, uint64_t))v34)(v29, v32);
  swift_getKeyPath();
  id v65 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v65 = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v65 = v1;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  swift_retain();
  uint64_t v35 = v58;
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  id v65 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v36 = (uint64_t)v56;
  v59(v56, 1, 1, v60);
  uint64_t v37 = v61;
  Publisher.receive<A>(on:options:)();
  outlined destroy of URL?(v36, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  v51(v35, v37);
  swift_allocObject();
  swift_weakInit();
  uint64_t v38 = v62;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  ((void (*)(char *, uint64_t))v48)(v33, v38);
  swift_getKeyPath();
  id v65 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v65 = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v65 = v1;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  swift_retain();
  uint64_t v39 = v58;
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  id v65 = (id)static OS_dispatch_queue.main.getter();
  v59((char *)v36, 1, 1, v60);
  float v40 = v53;
  uint64_t v41 = v61;
  Publisher.receive<A>(on:options:)();
  outlined destroy of URL?(v36, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  v51(v39, v41);
  swift_allocObject();
  swift_weakInit();
  uint64_t v42 = v62;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  ((void (*)(char *, uint64_t))v48)(v40, v42);
  swift_getKeyPath();
  id v65 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v65 = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v65 = v1;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  return swift_release();
}

uint64_t closure #1 in ObjectCaptureSession.subscribeToInternalPublishers()(void *a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    ObjectCaptureSession.onStateChange(into:)(a1);
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in ObjectCaptureSession.subscribeToInternalPublishers()(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    ObjectCaptureSession.onFeedback(frameFeedback:frameCameraTracking:)(a1, a2);
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in ObjectCaptureSession.subscribeToInternalPublishers()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    ObjectCaptureSession.setNumberOfShotsTaken(_:)(v1);
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_getKeyPath();
    lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = ObjectCaptureSession.updateFlippabilityIfNeeded(set:)(v3);
    swift_bridgeObjectRelease();
    ObjectCaptureSession.updateOverCaptureIfNeeded(set:)();
    swift_bridgeObjectRelease();
    ObjectCaptureSession.publishFeedbackSetIfNeeded(set:)(v4);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #4 in ObjectCaptureSession.subscribeToInternalPublishers()(unsigned __int8 *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3(v4);
    return swift_release();
  }
  return result;
}

uint64_t closure #6 in ObjectCaptureSession.subscribeToInternalPublishers()(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    int v10 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v3, v4, "Auto detection failure is now %{BOOL}d: updating feedback...", v5, 8u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    swift_getKeyPath();
    uint64_t v9 = v7;
    lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v9 = *(void *)(v7 + 24);
    swift_bridgeObjectRetain();
    if (v1) {
      specialized Set._Variant.insert(_:)(&v8, 8);
    }
    else {
      specialized Set._Variant.remove(_:)(8u, &v8);
    }
    ObjectCaptureSession.publishFeedbackSetIfNeeded(set:)(v9);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ObjectCaptureSession.updateOverCaptureIfNeeded(set:)()
{
  uint64_t v1 = v0;
  type metadata accessor for ObjectCaptureSession();
  uint64_t v2 = type metadata accessor for ObjectCaptureSession.HardwareSpecs();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  static ObjectCaptureSession.hardwareSpecs.getter();
  uint64_t v6 = ObjectCaptureSession.HardwareSpecs.maxNumImages.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)logger);
  swift_retain_n();
  char v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134349312;
    swift_getKeyPath();
    uint64_t v16 = v0;
    lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v11 = *(void *)(v0 + 40);
    swift_release();
    uint64_t v16 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v10 + 12) = 2050;
    uint64_t v16 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v8, v9, "Shots: %{public}ld  Limit: %{public}ld", (uint8_t *)v10, 0x16u);
    MEMORY[0x24C5348D0](v10, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  swift_getKeyPath();
  uint64_t v16 = v1;
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (v6 < *(void *)(v1 + 40))
  {
    swift_retain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 134349312;
      swift_getKeyPath();
      uint64_t v16 = v1;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v15 = *(void *)(v1 + 40);
      swift_release();
      uint64_t v16 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v14 + 12) = 2050;
      uint64_t v16 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2465C2000, v12, v13, "Adding .overCapturing since %{public}ld > %{public}ld", (uint8_t *)v14, 0x16u);
      MEMORY[0x24C5348D0](v14, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    specialized Set._Variant.insert(_:)(&v16, 7);
  }
}

uint64_t ObjectCaptureSession.updateFlippabilityIfNeeded(set:)(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel);
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) == 1)
  {
    uint64_t v11 = a1;
    int v4 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isObjectFlippable);
    if (v4 == 2 || (v4 & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v10, 6);
      if (!specialized Set.contains(_:)(6u, v2))
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v5 = type metadata accessor for Logger();
        __swift_project_value_buffer(v5, (uint64_t)logger);
        uint64_t v6 = Logger.logObject.getter();
        os_log_type_t v7 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v6, v7))
        {
          char v8 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v8 = 0;
          _os_log_impl(&dword_2465C2000, v6, v7, "Adding .objectNotFlippable persistently to the Feedback set.", v8, 2u);
          MEMORY[0x24C5348D0](v8, -1, -1);
        }
      }
    }
    return v11;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v2;
}

BOOL specialized Set.contains(_:)(unsigned __int8 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Swift::UInt v3 = a1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == v3) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == v3;
    if (v12 == v3) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t one-time initialization function for allFrameFeedbackMessages()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ObjectCaptureSession.Frame.Feedback>);
  type metadata accessor for ObjectCaptureSession.Frame.Feedback();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2466B6940;
  static ObjectCaptureSession.Frame.Feedback.tooFast.getter();
  static ObjectCaptureSession.Frame.Feedback.lowLight.getter();
  static ObjectCaptureSession.Frame.Feedback.tooFar.getter();
  static ObjectCaptureSession.Frame.Feedback.tooClose.getter();
  static ObjectCaptureSession.Frame.Feedback.tooDark.getter();
  uint64_t result = static ObjectCaptureSession.Frame.Feedback.outOfFieldOfView.getter();
  static ObjectCaptureSession.allFrameFeedbackMessages = (_UNKNOWN *)v0;
  return result;
}

uint64_t ObjectCaptureSession.onFeedback(frameFeedback:frameCameraTracking:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v43 = a1;
  uint64_t v5 = type metadata accessor for ARCamera.TrackingState.Reason();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ARCamera.TrackingState();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v41 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = MEMORY[0x263F8EE88];
  if (one-time initialization token for allFrameFeedbackMessages != -1) {
    swift_once();
  }
  unint64_t v11 = (char *)static ObjectCaptureSession.allFrameFeedbackMessages;
  uint64_t v12 = *((void *)static ObjectCaptureSession.allFrameFeedbackMessages + 2);
  if (v12)
  {
    uint64_t v36 = a2;
    uint64_t v37 = v8;
    uint64_t v38 = v6;
    uint64_t v39 = v5;
    uint64_t v40 = v3;
    uint64_t v13 = type metadata accessor for ObjectCaptureSession.Frame.Feedback();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v15 = &v11[(*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)];
    uint64_t v17 = *(void *)(v14 + 64);
    uint64_t v16 = *(void *)(v14 + 72);
    uint64_t v18 = (uint64_t (**)(char *, uint64_t))(v14 + 8);
    uint64_t v35 = v11;
    uint64_t v19 = swift_bridgeObjectRetain();
    do
    {
      MEMORY[0x270FA5388](v19);
      v42((char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v15, v13);
      lazy protocol witness table accessor for type ObjectCaptureSession.Error and conformance ObjectCaptureSession.Error(&lazy protocol witness table cache variable for type ObjectCaptureSession.Frame.Feedback and conformance ObjectCaptureSession.Frame.Feedback, MEMORY[0x270FB2650]);
      if (dispatch thunk of SetAlgebra.isSuperset(of:)())
      {
        uint64_t v20 = specialized static ObjectCaptureSession.toOCSFeedbackSet(ocsFeedback:)((uint64_t)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
        specialized Set.formUnion<A>(_:)(v20);
      }
      uint64_t v19 = (*v18)((char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
      v15 += v16;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v5 = v39;
    uint64_t v3 = v40;
    uint64_t v8 = v37;
    uint64_t v6 = v38;
    a2 = v36;
  }
  swift_getKeyPath();
  uint64_t v45 = v3;
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (specialized Set.contains(_:)(6u, *(void *)(v3 + 24))) {
    specialized Set._Variant.insert(_:)(&v45, 6);
  }
  swift_getKeyPath();
  uint64_t v45 = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (specialized Set.contains(_:)(7u, *(void *)(v3 + 24))) {
    specialized Set._Variant.insert(_:)(&v45, 7);
  }
  swift_getKeyPath();
  uint64_t v45 = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (specialized Set.contains(_:)(8u, *(void *)(v3 + 24))) {
    specialized Set._Variant.insert(_:)(&v45, 8);
  }
  ObjectCaptureSession.publishFeedbackSetIfNeeded(set:)(v46);
  swift_bridgeObjectRelease();
  type metadata accessor for ObjectCaptureSession(0);
  uint64_t v21 = v41;
  outlined init with copy of ObjectCaptureSession.Error(a2, v41, MEMORY[0x263F8C968]);
  int v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v21, 2, v5);
  if (v22)
  {
    if (v22 == 1) {
      int v23 = 4;
    }
    else {
      int v23 = 5;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v21, v5);
    static ObjectCaptureSession.fromOCSTrackingReason(ocsReason:)((uint64_t)v8, (char *)&v45);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    int v23 = v45;
  }
  swift_getKeyPath();
  uint64_t v45 = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  int v25 = *(unsigned __int8 *)(v3 + 32);
  if (v25 == 5)
  {
    if (v23 == 5) {
      return result;
    }
  }
  else if (v25 == 4)
  {
    if (v23 == 4) {
      return result;
    }
  }
  else if ((v23 & 0xFE) != 4 && v25 == v23)
  {
    return result;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)logger);
  swift_retain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    uint64_t v45 = v43;
    *(_DWORD *)uint64_t v29 = 136446466;
    swift_getKeyPath();
    uint64_t v44 = v3;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    LOBYTE(v44) = *(unsigned char *)(v3 + 32);
    uint64_t v30 = String.init<A>(describing:)();
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2082;
    LOBYTE(v44) = v23;
    uint64_t v32 = String.init<A>(describing:)();
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v27, v28, "Camera tracking switching from %{public}s to %{public}s", (uint8_t *)v29, 0x16u);
    uint64_t v34 = v43;
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v34, -1, -1);
    MEMORY[0x24C5348D0](v29, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  LOBYTE(v45) = v23;
  return ObjectCaptureSession.setCameraTracking(_:)((unsigned __int8 *)&v45);
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    uint64_t result = specialized Set._Variant.insert(_:)(&v13, *(unsigned __int8 *)(*(void *)(v1 + 48) + v9));
  }
  int64_t v12 = v10 + 4;
  if (v12 < v7)
  {
    unint64_t v11 = *(void *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v2 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        ++v12;
        if (v11) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v12;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

void ObjectCaptureSession.publishFeedbackSetIfNeeded(set:)(uint64_t a1)
{
  swift_getKeyPath();
  uint64_t v11 = v1;
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if ((specialized static Set.== infix(_:_:)(a1, *(void *)(v1 + 24)) & 1) == 0)
  {
    ObjectCaptureSession.setFeedback(_:)(a1);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)logger);
    swift_retain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v11 = v7;
      *(_DWORD *)unint64_t v6 = 136446210;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      lazy protocol witness table accessor for type ObjectCaptureSession.Feedback and conformance ObjectCaptureSession.Feedback();
      swift_bridgeObjectRetain();
      uint64_t v8 = Set.description.getter();
      unint64_t v10 = v9;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v4, v5, "Published new Feedback set: %{public}s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v7, -1, -1);
      MEMORY[0x24C5348D0](v6, -1, -1);
    }
    else
    {

      swift_release_n();
    }
  }
}

void ObjectCaptureSession.onStateChange(into:)(void *a1)
{
  int64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DataModel.Error(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v85 = (uint64_t)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v87 = (uint64_t)&v84 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v86 = (uint64_t)&v84 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v88 = (uint64_t)&v84 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v84 - v14;
  uint64_t v16 = type metadata accessor for DataModel.State(0);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v93 = (char *)&v84 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v84 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v84 - v25;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = __swift_project_value_buffer(v27, (uint64_t)logger);
  uint64_t v95 = a1;
  outlined init with copy of ObjectCaptureSession.Error((uint64_t)a1, (uint64_t)v26, type metadata accessor for DataModel.State);
  uint64_t v92 = v28;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v94 = v24;
  char v89 = v19;
  uint64_t v84 = v16;
  if (v31)
  {
    uint64_t v90 = v15;
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    unint64_t v33 = (void *)swift_slowAlloc();
    uint64_t v91 = v4;
    uint64_t v34 = v33;
    uint64_t v97 = (uint64_t)v33;
    *(_DWORD *)uint64_t v32 = 136446210;
    outlined init with copy of ObjectCaptureSession.Error((uint64_t)v26, (uint64_t)v94, type metadata accessor for DataModel.State);
    uint64_t v35 = String.init<A>(describing:)();
    id v96 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v97);
    uint64_t v15 = v90;
    uint64_t v24 = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v26, type metadata accessor for DataModel.State);
    _os_log_impl(&dword_2465C2000, v29, v30, "Switching state into: %{public}s", v32, 0xCu);
    swift_arrayDestroy();
    uint64_t v37 = v34;
    uint64_t v4 = v91;
    MEMORY[0x24C5348D0](v37, -1, -1);
    MEMORY[0x24C5348D0](v32, -1, -1);
  }
  else
  {
    outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v26, type metadata accessor for DataModel.State);
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v24, 3, 8, v4);
  char v38 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v95, (uint64_t)v24);
  outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v24, type metadata accessor for DataModel.State);
  if ((v38 & 1) == 0) {
    ObjectCaptureSession.setIsPaused(_:)(0);
  }
  swift_getKeyPath();
  uint64_t v97 = (uint64_t)v2;
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v39 = (char *)v2[2];
  uint64_t v40 = (uint64_t)v93;
  outlined init with copy of ObjectCaptureSession.Error((uint64_t)v95, (uint64_t)v93, type metadata accessor for DataModel.State);
  uint64_t v41 = 0;
  switch((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v40, 8, v4))
  {
    case 1u:
      goto LABEL_33;
    case 2u:
    case 4u:
      uint64_t v41 = 1;
      goto LABEL_33;
    case 3u:
      outlined copy of ObjectCaptureSession.CaptureState(v39);
      ObjectCaptureSession.setIsPaused(_:)(1);
      swift_retain_n();
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        double v53 = (void *)swift_slowAlloc();
        uint64_t v93 = v39;
        unint64_t v54 = v53;
        uint64_t v97 = (uint64_t)v53;
        *(_DWORD *)uint64_t v52 = 136446210;
        uint64_t v95 = v52 + 4;
        swift_getKeyPath();
        id v96 = v2;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        id v96 = (id)v2[2];
        outlined copy of ObjectCaptureSession.CaptureState(v96);
        uint64_t v55 = String.init<A>(describing:)();
        id v96 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v50, v51, "Setting isPaused=true  fromState = %{public}s", v52, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v54, -1, -1);
        MEMORY[0x24C5348D0](v52, -1, -1);

        uint64_t v41 = (uint64_t)v93;
      }
      else
      {

        swift_release_n();
        uint64_t v41 = (uint64_t)v39;
      }
      goto LABEL_33;
    case 5u:
      uint64_t v41 = 2;
      goto LABEL_33;
    case 6u:
      uint64_t v41 = 3;
      goto LABEL_33;
    case 7u:
      uint64_t v41 = 4;
      goto LABEL_33;
    case 8u:
      uint64_t v41 = 5;
      goto LABEL_33;
    default:
      outlined init with take of DataModel.Error(v40, (uint64_t)v15);
      swift_getKeyPath();
      uint64_t v97 = (uint64_t)v2;
      outlined copy of ObjectCaptureSession.CaptureState(v39);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (v2[2] >= 6uLL)
      {
        uint64_t v93 = v39;
        uint64_t v57 = (uint64_t)v89;
        outlined init with copy of ObjectCaptureSession.Error((uint64_t)v95, (uint64_t)v89, type metadata accessor for DataModel.State);
        swift_retain_n();
        uint64_t v58 = Logger.logObject.getter();
        os_log_type_t v59 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v58, v59))
        {
          uint64_t v60 = v2;
          uint64_t v61 = swift_slowAlloc();
          uint64_t v62 = (void *)swift_slowAlloc();
          uint64_t v90 = v15;
          uint64_t v63 = v62;
          uint64_t v97 = (uint64_t)v62;
          *(_DWORD *)uint64_t v61 = 136446466;
          swift_getKeyPath();
          id v96 = v60;
          ObservationRegistrar.access<A, B>(_:keyPath:)();
          swift_release();
          id v96 = (id)v60[2];
          outlined copy of ObjectCaptureSession.CaptureState(v96);
          uint64_t v64 = String.init<A>(describing:)();
          id v96 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v97);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v61 + 12) = 2082;
          uint64_t v66 = (uint64_t)v89;
          outlined init with copy of ObjectCaptureSession.Error((uint64_t)v89, (uint64_t)v94, type metadata accessor for DataModel.State);
          uint64_t v67 = String.init<A>(describing:)();
          id v96 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v97);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of ObjectCaptureSession.Configuration(v66, type metadata accessor for DataModel.State);
          _os_log_impl(&dword_2465C2000, v58, v59, "onStateChange(): ObjectCaptureSession was already in error state=%{public}s but got an internal error state=%{public}s which will be ignored.", (uint8_t *)v61, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x24C5348D0](v63, -1, -1);
          MEMORY[0x24C5348D0](v61, -1, -1);

          uint64_t v69 = (uint64_t)v90;
        }
        else
        {

          outlined destroy of ObjectCaptureSession.Configuration(v57, type metadata accessor for DataModel.State);
          swift_release_n();
          uint64_t v69 = (uint64_t)v15;
        }
        outlined destroy of ObjectCaptureSession.Configuration(v69, type metadata accessor for DataModel.Error);
        uint64_t v75 = v93;
      }
      else
      {
        uint64_t v91 = v4;
        uint64_t v42 = v88;
        outlined init with copy of ObjectCaptureSession.Error((uint64_t)v15, v88, type metadata accessor for DataModel.Error);
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v90 = v15;
          uint64_t v45 = (uint8_t *)swift_slowAlloc();
          uint64_t v46 = swift_slowAlloc();
          uint64_t v97 = v46;
          *(_DWORD *)uint64_t v45 = 136446210;
          outlined init with copy of ObjectCaptureSession.Error(v42, v86, type metadata accessor for DataModel.Error);
          uint64_t v47 = String.init<A>(describing:)();
          id v96 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v97);
          uint64_t v15 = v90;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of ObjectCaptureSession.Configuration(v88, type metadata accessor for DataModel.Error);
          _os_log_impl(&dword_2465C2000, v43, v44, "Capturing failed with error: %{public}s", v45, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24C5348D0](v46, -1, -1);
          MEMORY[0x24C5348D0](v45, -1, -1);
        }
        else
        {
          outlined destroy of ObjectCaptureSession.Configuration(v42, type metadata accessor for DataModel.Error);
        }

        uint64_t v49 = v87;
        outlined init with copy of ObjectCaptureSession.Error((uint64_t)v15, v87, type metadata accessor for DataModel.Error);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 6)
        {
          type metadata accessor for ObjectCaptureSession.Error(0);
          lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession.Error and conformance ObjectCaptureSession.Error, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession.Error);
          uint64_t v41 = swift_allocError();
          swift_storeEnumTagMultiPayload();
          outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v15, type metadata accessor for DataModel.Error);
          outlined consume of ObjectCaptureSession.CaptureState(v39);
        }
        else if (EnumCaseMultiPayload == 2)
        {
          uint64_t v71 = type metadata accessor for ObjectCaptureSession.Error();
          uint64_t v72 = *(void *)(v71 - 8);
          MEMORY[0x270FA5388](v71);
          uint64_t v74 = (char *)&v84 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v74, v49, v71);
          uint64_t v41 = specialized static ObjectCaptureSession.fromOCSError(_:)((uint64_t)v74);
          (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v71);
          outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v15, type metadata accessor for DataModel.Error);
          outlined consume of ObjectCaptureSession.CaptureState(v39);
        }
        else
        {
          uint64_t v76 = v85;
          outlined init with copy of ObjectCaptureSession.Error((uint64_t)v15, v85, type metadata accessor for DataModel.Error);
          unint64_t v77 = Logger.logObject.getter();
          os_log_type_t v78 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v77, v78))
          {
            v79 = (uint8_t *)swift_slowAlloc();
            uint64_t v95 = (void *)swift_slowAlloc();
            uint64_t v97 = (uint64_t)v95;
            *(_DWORD *)v79 = 136446210;
            outlined init with copy of ObjectCaptureSession.Error(v76, v86, type metadata accessor for DataModel.Error);
            uint64_t v80 = String.init<A>(describing:)();
            id v96 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, &v97);
            uint64_t v49 = v87;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            outlined destroy of ObjectCaptureSession.Configuration(v85, type metadata accessor for DataModel.Error);
            _os_log_impl(&dword_2465C2000, v77, v78, "Got unexpected error: %{public}s", v79, 0xCu);
            uint64_t v82 = v95;
            swift_arrayDestroy();
            MEMORY[0x24C5348D0](v82, -1, -1);
            MEMORY[0x24C5348D0](v79, -1, -1);
          }
          else
          {
            outlined destroy of ObjectCaptureSession.Configuration(v76, type metadata accessor for DataModel.Error);
          }

          lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
          uint64_t v41 = swift_allocError();
          outlined init with take of DataModel.Error((uint64_t)v15, v83);
          outlined consume of ObjectCaptureSession.CaptureState(v39);
          outlined destroy of ObjectCaptureSession.Configuration(v49, type metadata accessor for DataModel.Error);
        }
LABEL_33:
        uint64_t v97 = v41;
        outlined copy of ObjectCaptureSession.CaptureState((id)v41);
        ObjectCaptureSession.setState(_:)((void **)&v97);
        outlined consume of ObjectCaptureSession.CaptureState((id)v41);
        uint64_t v75 = (void *)v41;
      }
      outlined consume of ObjectCaptureSession.CaptureState(v75);
      return;
  }
}

uint64_t static ObjectCaptureSession.fromOCSTrackingReason(ocsReason:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ARCamera.TrackingState.Reason();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v18 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v18 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14((char *)&v18 - v12, a1, v4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v13, v4);
  if (result == *MEMORY[0x263F8C948])
  {
    char v16 = 0;
LABEL_9:
    *a2 = v16;
    return result;
  }
  if (result == *MEMORY[0x263F8C958])
  {
    char v16 = 2;
    goto LABEL_9;
  }
  if (result == *MEMORY[0x263F8C960])
  {
    char v16 = 3;
    goto LABEL_9;
  }
  if (result == *MEMORY[0x263F8C950])
  {
    char v16 = 1;
    goto LABEL_9;
  }
  v14(v11, a1, v4);
  unint64_t v18 = 0;
  unint64_t v19 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  unint64_t v18 = 0xD000000000000019;
  unint64_t v19 = 0x80000002466BE980;
  v14(v8, (uint64_t)v11, v4);
  v17._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void ObjectCaptureSession.finishAysncStreams()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_2465C2000, v1, v2, "Finishing all async update streams...", v3, 2u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }

  uint64_t AllAsync = ObjectCaptureSession.unsafeGetAllAsyncStreams()();
  uint64_t v5 = *(void *)(AllAsync + 16);
  if (v5)
  {
    uint64_t v6 = AllAsync + 40;
    do
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      dispatch thunk of Finishable.finish()();
      swift_unknownObjectRelease();
      v6 += 16;
      --v5;
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  oslog = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_2465C2000, oslog, v7, "done finishing all async update streams.", v8, 2u);
    MEMORY[0x24C5348D0](v8, -1, -1);
  }
}

uint64_t ObjectCaptureSession.unsafeGetAllAsyncStreams()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Finishable>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2466B6950;
  os_log_type_t v2 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_stateUpdater);
  uint64_t v3 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type AsyncUpdateStreamContainer<ObjectCaptureSession.CaptureState> and conformance AsyncUpdateStreamContainer<A>, &demangling cache variable for type metadata for AsyncUpdateStreamContainer<ObjectCaptureSession.CaptureState>);
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_feedbackUpdater);
  uint64_t v5 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type AsyncUpdateStreamContainer<Set<ObjectCaptureSession.Feedback>> and conformance AsyncUpdateStreamContainer<A>, &demangling cache variable for type metadata for AsyncUpdateStreamContainer<Set<ObjectCaptureSession.Feedback>>);
  *(void *)(v1 + 48) = v4;
  *(void *)(v1 + 56) = v5;
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_cameraTrackingUpdater);
  uint64_t v7 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type AsyncUpdateStreamContainer<ObjectCaptureSession.Tracking> and conformance AsyncUpdateStreamContainer<A>, &demangling cache variable for type metadata for AsyncUpdateStreamContainer<ObjectCaptureSession.Tracking>);
  *(void *)(v1 + 64) = v6;
  *(void *)(v1 + 72) = v7;
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_isPausedUpdater);
  uint64_t v9 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type AsyncUpdateStreamContainer<Bool> and conformance AsyncUpdateStreamContainer<A>, &demangling cache variable for type metadata for AsyncUpdateStreamContainer<Bool>);
  *(void *)(v1 + 80) = v8;
  *(void *)(v1 + 88) = v9;
  uint64_t v10 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_userCompletedScanPassUpdater);
  *(void *)(v1 + 96) = v10;
  *(void *)(v1 + 104) = v9;
  uint64_t v11 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_canRequestImageCaptureUpdater);
  *(void *)(v1 + 112) = v11;
  *(void *)(v1 + 120) = v9;
  uint64_t v12 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_numberOfShotsTakenUpdater);
  uint64_t v13 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type AsyncUpdateStreamContainer<Int> and conformance AsyncUpdateStreamContainer<A>, &demangling cache variable for type metadata for AsyncUpdateStreamContainer<Int>);
  *(void *)(v1 + 128) = v12;
  *(void *)(v1 + 136) = v13;
  id v14 = v2;
  id v15 = v4;
  id v16 = v6;
  id v17 = v8;
  id v18 = v10;
  id v19 = v11;
  id v20 = v12;
  return v1;
}

uint64_t ObjectCaptureSession.logAnalyticsEventsOnStartUp()()
{
  uint64_t v1 = type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent();
  uint64_t v19 = *(void *)(v1 - 8);
  uint64_t v20 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t inited = type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent();
  uint64_t v9 = *(void *)(inited - 8);
  MEMORY[0x270FA5388](inited);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for AnalyticsManager();
  static AnalyticsManager.shared.getter();
  uint64_t v12 = *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel)
      + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_sessionID;
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v18 = v4;
  v13(v7, v12, v4);
  AnalyticsManager.ObjectCaptureSessionInitEvent.init(sessionID:)();
  dispatch thunk of AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, inited);
  id v14 = objc_msgSend(self, sel_mainBundle);
  id v15 = objc_msgSend(v14, sel_bundleIdentifier);

  if (v15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  static AnalyticsManager.shared.getter();
  v13(v7, v12, v18);
  AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent.init(sessionID:bundleID:)();
  dispatch thunk of AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v3, v20);
}

uint64_t ObjectCaptureSession.logAnalyticsEventsOnTearDown()()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v1 - 8);
  uint64_t v35 = v1;
  MEMORY[0x270FA5388](v1);
  char v38 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  uint64_t v37 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Error?);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v33 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent.Status();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  id v15 = (char *)&v28 - v14;
  id v16 = *(void (**)(char *, void, uint64_t))(v10 + 104);
  v16((char *)&v28 - v14, *MEMORY[0x263F166F8], v9);
  swift_getKeyPath();
  uint64_t v39 = v0;
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t v17 = v0;
  uint64_t v18 = v34;
  swift_release();
  uint64_t v19 = (void *)v0[2];
  if ((unint64_t)v19 >= 5)
  {
    os_log_type_t v30 = v16;
    BOOL v31 = v13;
    uint64_t v32 = v6;
    if (v19 == (void *)5)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      uint64_t v20 = (unsigned int *)MEMORY[0x263F16700];
    }
    else
    {
      uint64_t v29 = v0;
      uint64_t v39 = v19;
      id v21 = v19;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v22 = type metadata accessor for ObjectCaptureSession.Error(0);
      uint64_t v23 = (uint64_t)v33;
      int v24 = swift_dynamicCast();
      uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
      if (!v24)
      {
        v25(v23, 1, 1, v22);
        outlined destroy of URL?(v23, &demangling cache variable for type metadata for ObjectCaptureSession.Error?);
        uint64_t v17 = v29;
        goto LABEL_11;
      }
      v25(v23, 0, 1, v22);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v17 = v29;
      if (EnumCaseMultiPayload != 2)
      {
        outlined destroy of ObjectCaptureSession.Configuration(v23, type metadata accessor for ObjectCaptureSession.Error);
        goto LABEL_11;
      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      outlined destroy of ObjectCaptureSession.Configuration(v23, type metadata accessor for ObjectCaptureSession.Error);
      uint64_t v20 = (unsigned int *)MEMORY[0x263F16708];
    }
    v30(v15, *v20, v9);
LABEL_11:
    uint64_t v13 = v31;
    uint64_t v6 = v32;
  }
  type metadata accessor for AnalyticsManager();
  static AnalyticsManager.shared.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v38, *(void *)((char *)v17 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel)+ OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_sessionID, v35);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  AnalyticsManager.ObjectCaptureSessionStatusEvent.init(sessionID:status:)();
  dispatch thunk of AnalyticsManager.sendObjectCaptureSessionStatusEvent(event:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
}

uint64_t protocol witness for Identifiable.id.getter in conformance ObjectCaptureSession@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ObjectCaptureSession(0);
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

uint64_t UnsafeSendableInstance.__deallocating_deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 88);
  uint64_t v2 = type metadata accessor for Atomic();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t closure #1 in nonisolated_PrivateTearDown(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in nonisolated_PrivateTearDown(of:), v6, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in nonisolated_PrivateTearDown(of:), v6, v5);
}

uint64_t closure #1 in nonisolated_PrivateTearDown(of:)()
{
  swift_release();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)logger);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_2465C2000, v2, v3, "~~~~ ObjectCaptureSession delayed deinit finishing all update streams...", v4, 2u);
    MEMORY[0x24C5348D0](v4, -1, -1);
  }
  uint64_t v5 = *(void *)(v0 + 16);

  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = swift_bridgeObjectRetain() + 40;
    do
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      dispatch thunk of Finishable.finish()();
      swift_unknownObjectRelease();
      v7 += 16;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_2465C2000, v8, v9, "~~~~ done: ObjectCaptureSession delayed deinit finishing all update streams.", v10, 2u);
    MEMORY[0x24C5348D0](v10, -1, -1);
  }

  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  swift_release();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)logger);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_2465C2000, v2, v3, "~~~~ ObjectCaptureSession delayed deinit cleaning up DataModel...", v4, 2u);
    MEMORY[0x24C5348D0](v4, -1, -1);
  }

  DataModel.tearDown()();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_2465C2000, v5, v6, "~~~~ done: ObjectCaptureSession delayed deinit cleaning up DataModel.", v7, 2u);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t ObjectCaptureSession.shouldPlayHaptics.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for ObjectCaptureSession.shouldPlayHaptics : ObjectCaptureSession@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ObjectCaptureSession.shouldPlayHaptics.getter();
  *a1 = result & 1;
  return result;
}

void key path setter for ObjectCaptureSession.shouldPlayHaptics : ObjectCaptureSession()
{
}

void ObjectCaptureSession.shouldPlayHaptics.setter()
{
  unsigned int v0 = objc_msgSend(objc_msgSend(self, sel_capabilitiesForHardware), sel_supportsHaptics);
  swift_unknownObjectRelease();
  if (v0)
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)logger);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_2465C2000, v5, v3, "Cannot change shouldPlayHaptics since device does not support haptics!", v4, 2u);
      MEMORY[0x24C5348D0](v4, -1, -1);
    }
  }
}

uint64_t closure #1 in ObjectCaptureSession.shouldPlayHaptics.setter()
{
  return swift_release();
}

void (*ObjectCaptureSession.shouldPlayHaptics.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  swift_getKeyPath();
  *(void *)a1 = v1;
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)a1;
  return ObjectCaptureSession.shouldPlayHaptics.modify;
}

void ObjectCaptureSession.shouldPlayHaptics.modify()
{
}

uint64_t ObjectCaptureSession.isAutoCaptureEnabled.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(*(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel)
                            + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isAutoCaptureEnabled);
}

uint64_t key path getter for ObjectCaptureSession.isAutoCaptureEnabled : ObjectCaptureSession@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(*(void *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel)
                 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isAutoCaptureEnabled);
  return result;
}

uint64_t key path setter for ObjectCaptureSession.isAutoCaptureEnabled : ObjectCaptureSession()
{
  return swift_release();
}

uint64_t ObjectCaptureSession.isAutoCaptureEnabled.setter()
{
  return swift_release();
}

uint64_t closure #1 in ObjectCaptureSession.isAutoCaptureEnabled.setter(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel)
           + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isAutoCaptureEnabled) = a2;
  swift_retain();
  DataModel.isAutoCaptureEnabled.didset();
  return swift_release();
}

void (*ObjectCaptureSession.isAutoCaptureEnabled.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[1] = v1;
  swift_getKeyPath();
  int8x16_t v3[2] = OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession___observationRegistrar;
  *uint64_t v3 = v1;
  v3[3] = lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession and conformance ObjectCaptureSession, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *((unsigned char *)v3 + 32) = *(unsigned char *)(*(void *)(v1
                                             + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel)
                                 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isAutoCaptureEnabled);
  return ObjectCaptureSession.isAutoCaptureEnabled.modify;
}

void ObjectCaptureSession.isAutoCaptureEnabled.modify(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  void *v1 = v1[1];
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

uint64_t key path getter for DataModel.state : DataModel()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t key path setter for DataModel.state : DataModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DataModel.State(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of ObjectCaptureSession.Error(a1, (uint64_t)&v9 - v6, type metadata accessor for DataModel.State);
  swift_getKeyPath();
  swift_getKeyPath();
  outlined init with copy of ObjectCaptureSession.Error((uint64_t)v7, (uint64_t)v5, type metadata accessor for DataModel.State);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v7, type metadata accessor for DataModel.State);
}

uint64_t key path getter for DataModel.shouldPlayHaptics : DataModel@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

void key path setter for DataModel.shouldPlayHaptics : DataModel()
{
}

Swift::Int specialized static Set.== infix(_:_:)(Swift::Int result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  Swift::Int v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  Swift::Int v5 = result + 56;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(result + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return result;
    }
    if (v13 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 1;
    if (v13 + 1 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 2;
    if (v13 + 2 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 3;
    if (v13 + 3 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v15 = v13 + 4;
    if (v15 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v4 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_35;
        }
        if (v4 >= v9) {
          return 1;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        ++v15;
        if (v14) {
          goto LABEL_24;
        }
      }
    }
    int64_t v4 = v15;
LABEL_24:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    Swift::UInt v16 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v12);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v16);
    uint64_t result = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v18 = result & ~v17;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    uint64_t v19 = *(void *)(a2 + 48);
  }
  while (*(unsigned __int8 *)(v19 + v18) == v16);
  uint64_t v20 = ~v17;
  while (1)
  {
    unint64_t v18 = (v18 + 1) & v20;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    if (*(unsigned __int8 *)(v19 + v18) == v16) {
      goto LABEL_7;
    }
  }
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  int64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *int64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  _OWORD v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(unsigned char *a1, Swift::Int a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  uint64_t result = 0;
  LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int specialized Set._Variant.remove(_:)@<X0>(unsigned __int8 a1@<W0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int result = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = result & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_9:
    *a2 = 9;
    return result;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a1)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_9;
      }
    }
    while (*(unsigned __int8 *)(v9 + v8) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *v2;
  uint64_t v13 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v12 = v13;
  }
  *a2 = *(unsigned char *)(*(void *)(v12 + 48) + v8);
  specialized _NativeSet._delete(at:)(v8);
  *uint64_t v2 = v13;
  return swift_bridgeObjectRelease();
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ObjectCaptureSession.Feedback>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v10 + a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v12 + 48) + a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t specialized static ObjectCaptureSession.CaptureState.== infix(_:_:)(id *a1, void **a2)
{
  id v2 = *a1;
  unint64_t v3 = *a2;
  switch((unint64_t)*a1)
  {
    case 0uLL:
      if (v3) {
        goto LABEL_15;
      }
      goto LABEL_7;
    case 1uLL:
      if (v3 == (void *)1) {
        goto LABEL_7;
      }
      goto LABEL_15;
    case 2uLL:
      if (v3 != (void *)2) {
        goto LABEL_15;
      }
      goto LABEL_7;
    case 3uLL:
      if (v3 != (void *)3) {
        goto LABEL_15;
      }
      goto LABEL_7;
    case 4uLL:
      if (v3 != (void *)4) {
        goto LABEL_15;
      }
      goto LABEL_7;
    case 5uLL:
      if (v3 != (void *)5) {
        goto LABEL_15;
      }
LABEL_7:
      uint64_t v5 = 1;
      break;
    default:
      if ((unint64_t)v3 < 6)
      {
LABEL_15:
        outlined copy of ObjectCaptureSession.CaptureState(*a1);
        uint64_t v5 = 0;
      }
      else
      {
        id v4 = v2;
        uint64_t v5 = 1;
      }
      break;
  }
  outlined copy of ObjectCaptureSession.CaptureState(v3);
  outlined consume of ObjectCaptureSession.CaptureState(v2);
  outlined consume of ObjectCaptureSession.CaptureState(v3);
  return v5;
}

uint64_t specialized static ObjectCaptureSession.stopResourceLogging()(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_2465C2000, v9, v10, a1, v11, 2u);
    MEMORY[0x24C5348D0](v11, -1, -1);
  }

  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
  type metadata accessor for MainActor();
  uint64_t v13 = static MainActor.shared.getter();
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = MEMORY[0x263F8F500];
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = v15;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, a3, v14);
  return swift_release();
}

uint64_t type metadata accessor for ObjectCaptureSession(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for ObjectCaptureSession);
}

uint64_t type metadata accessor for ObjectCaptureSession.Error(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id outlined copy of ObjectCaptureSession.CaptureState(id result)
{
  if ((unint64_t)result >= 6) {
    return result;
  }
  return result;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ObjectCaptureSession.Error(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ObjectCaptureSession.configuration.setter()
{
  return closure #1 in ObjectCaptureSession.configuration.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void specialized ObjectCaptureSession.logConfiguration(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v52 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v52);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  os_log_type_t v10 = (char *)&v47 - v9;
  uint64_t v50 = type metadata accessor for ObjectCaptureSession.Configuration(0);
  MEMORY[0x270FA5388](v50);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)logger);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = a1;
    Swift::UInt v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::UInt v18 = 0;
    _os_log_impl(&dword_2465C2000, v15, v16, "Configuration {", v18, 2u);
    uint64_t v19 = v18;
    a1 = v17;
    MEMORY[0x24C5348D0](v19, -1, -1);
  }

  outlined init with copy of ObjectCaptureSession.Error(a1, (uint64_t)v12, type metadata accessor for ObjectCaptureSession.Configuration);
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    unint64_t v48 = v4;
    char v22 = v8;
    unint64_t v23 = v10;
    BOOL v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v51 = v14;
    uint64_t v49 = v5;
    uint64_t v25 = v24;
    *(_DWORD *)BOOL v24 = 67240192;
    int v26 = v12[*(int *)(v50 + 20)];
    outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v12, type metadata accessor for ObjectCaptureSession.Configuration);
    LODWORD(v54) = v26;
    os_log_type_t v10 = v23;
    uint64_t v8 = v22;
    uint64_t v4 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v20, v21, "\tisOverCaptureEnabled: %{BOOL,public}d", v25, 8u);
    uint64_t v27 = v25;
    uint64_t v5 = v49;
    uint64_t v14 = v51;
    MEMORY[0x24C5348D0](v27, -1, -1);
  }
  else
  {
    outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v12, type metadata accessor for ObjectCaptureSession.Configuration);
  }

  outlined init with copy of URL?(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, v52) == 1)
  {
    outlined destroy of URL?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v30 = 0;
      _os_log_impl(&dword_2465C2000, v28, v29, "\tcheckpointDirectory: nil", v30, 2u);
      MEMORY[0x24C5348D0](v30, -1, -1);
    }
  }
  else
  {
    uint64_t v31 = v52;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v4, v52);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v31);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v50 = (uint64_t)v10;
      uint64_t v35 = v34;
      uint64_t v36 = swift_slowAlloc();
      uint64_t v49 = v36;
      *(_DWORD *)uint64_t v35 = 141558274;
      uint64_t v53 = 1752392040;
      uint64_t v54 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 12) = 2080;
      uint64_t v51 = v14;
      lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      uint64_t v37 = v52;
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v40 = *(void (**)(char *, uint64_t))(v5 + 8);
      v40(v8, v37);
      _os_log_impl(&dword_2465C2000, v32, v33, "\tcheckpointDirectory: %{mask.hash}s", (uint8_t *)v35, 0x16u);
      uint64_t v41 = v49;
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v41, -1, -1);
      MEMORY[0x24C5348D0](v35, -1, -1);

      v40((char *)v50, v37);
    }
    else
    {

      uint64_t v42 = *(void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v43 = v52;
      v42(v8, v52);
      v42(v10, v43);
    }
  }
  os_log_type_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v46 = 0;
    _os_log_impl(&dword_2465C2000, v44, v45, "} \\ Configuration", v46, 2u);
    MEMORY[0x24C5348D0](v46, -1, -1);
  }
}

uint64_t outlined destroy of ObjectCaptureSession.Configuration(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2465DD5E8()
{
  return objectdestroyTm(MEMORY[0x263F8EEA0]);
}

uint64_t partial apply for closure #1 in nonisolated_PrivateTearDown(of:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in nonisolated_PrivateTearDown(of:);
  return closure #1 in nonisolated_PrivateTearDown(of:)(a1, v4, v5, v6);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in nonisolated_PrivateTearDown(of:);
  return closure #1 in nonisolated_PrivateTearDown(of:)(a1, v4, v5, v6);
}

uint64_t sub_2465DD6B4()
{
  return objectdestroyTm(MEMORY[0x263F8EED8]);
}

uint64_t objectdestroyTm(void (*a1)(void))
{
  swift_unknownObjectRelease();
  a1(*(void *)(v1 + 32));

  return MEMORY[0x270FA0238](v1, 40, 7);
}

void outlined consume of ObjectCaptureSession.CaptureState(id a1)
{
  if ((unint64_t)a1 >= 6) {
}
  }

uint64_t sub_2465DD7E0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ObjectCaptureSession.shouldPlayHaptics.getter();
  *a1 = result & 1;
  return result;
}

void sub_2465DD810()
{
}

uint64_t partial apply for closure #1 in ObjectCaptureSession.shouldPlayHaptics.setter()
{
  return closure #1 in ObjectCaptureSession.shouldPlayHaptics.setter();
}

uint64_t partial apply for closure #1 in ObjectCaptureSession.isAutoCaptureEnabled.setter()
{
  return closure #1 in ObjectCaptureSession.isAutoCaptureEnabled.setter(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in ObjectCaptureSession.Updates<A>.Iterator()
{
  return MEMORY[0x263F8E658];
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in ObjectCaptureSession.Updates<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Error in ObjectCaptureSession.Error()
{
  return lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession.Error and conformance ObjectCaptureSession.Error, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession.Error);
}

unint64_t lazy protocol witness table accessor for type ObjectCaptureSession.Feedback and conformance ObjectCaptureSession.Feedback()
{
  unint64_t result = lazy protocol witness table cache variable for type ObjectCaptureSession.Feedback and conformance ObjectCaptureSession.Feedback;
  if (!lazy protocol witness table cache variable for type ObjectCaptureSession.Feedback and conformance ObjectCaptureSession.Feedback)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectCaptureSession.Feedback and conformance ObjectCaptureSession.Feedback);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ObjectCaptureSession.Feedback and conformance ObjectCaptureSession.Feedback;
  if (!lazy protocol witness table cache variable for type ObjectCaptureSession.Feedback and conformance ObjectCaptureSession.Feedback)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectCaptureSession.Feedback and conformance ObjectCaptureSession.Feedback);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ObjectCaptureSession.Tracking.Reason and conformance ObjectCaptureSession.Tracking.Reason()
{
  unint64_t result = lazy protocol witness table cache variable for type ObjectCaptureSession.Tracking.Reason and conformance ObjectCaptureSession.Tracking.Reason;
  if (!lazy protocol witness table cache variable for type ObjectCaptureSession.Tracking.Reason and conformance ObjectCaptureSession.Tracking.Reason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectCaptureSession.Tracking.Reason and conformance ObjectCaptureSession.Tracking.Reason);
  }
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in ObjectCaptureSession()
{
  return MEMORY[0x263F8D1F8];
}

uint64_t ObjC metadata update function for ObjectCaptureSession()
{
  return type metadata accessor for ObjectCaptureSession(0);
}

uint64_t type metadata completion function for ObjectCaptureSession()
{
  uint64_t result = type metadata accessor for ObjectCaptureSession.Configuration(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ObservationRegistrar();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t method lookup function for ObjectCaptureSession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ObjectCaptureSession);
}

uint64_t dispatch thunk of ObjectCaptureSession.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of ObjectCaptureSession.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

{
  return MEMORY[0x270F1AAE8]();
}

uint64_t dispatch thunk of ObjectCaptureSession.stateUpdates.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of ObjectCaptureSession.feedback.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of ObjectCaptureSession.feedbackUpdates.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of ObjectCaptureSession.cameraTracking.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of ObjectCaptureSession.cameraTrackingUpdates.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of ObjectCaptureSession.isPaused.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of ObjectCaptureSession.isPausedUpdates.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of ObjectCaptureSession.userCompletedScanPass.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488))();
}

uint64_t dispatch thunk of ObjectCaptureSession.userCompletedScanPassUpdates.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of ObjectCaptureSession.canRequestImageCapture.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of ObjectCaptureSession.canRequestImageCaptureUpdates.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of ObjectCaptureSession.numberOfShotsTaken.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of ObjectCaptureSession.numberOfShotsTakenUpdates.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of ObjectCaptureSession.maximumNumberOfInputImages.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of ObjectCaptureSession.configuration.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of ObjectCaptureSession.start(imagesDirectory:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of ObjectCaptureSession.resume()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

{
  return MEMORY[0x270F1AB08]();
}

uint64_t dispatch thunk of ObjectCaptureSession.pause()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of ObjectCaptureSession.startDetecting()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of ObjectCaptureSession.resetDetection()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of ObjectCaptureSession.startCapturing()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of ObjectCaptureSession.beginNewScanPassAfterFlip()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of ObjectCaptureSession.beginNewScanPass()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of ObjectCaptureSession.finish()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

{
  return MEMORY[0x270F1AB00]();
}

uint64_t dispatch thunk of ObjectCaptureSession.cancel()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

{
  return MEMORY[0x270F1AAF8]();
}

uint64_t dispatch thunk of ObjectCaptureSession.requestImageCapture()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t type metadata instantiation function for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t type metadata completion function for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ObjectCaptureSession.Updates(a1, a2, a3, MEMORY[0x263F8F5B8]);
}

uint64_t initializeBufferWithCopyOfBuffer for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for ObjectCaptureSession.Updates(a1, a2, a3, MEMORY[0x263F8F5B8]);
}

uint64_t destroy for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2)
{
  return destroy for ObjectCaptureSession.Updates(a1, a2, MEMORY[0x263F8F5B8]);
}

uint64_t initializeWithCopy for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for ObjectCaptureSession.Updates(a1, a2, a3, MEMORY[0x263F8F5B8]);
}

uint64_t assignWithCopy for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for ObjectCaptureSession.Updates(a1, a2, a3, MEMORY[0x263F8F5B8]);
}

uint64_t initializeWithTake for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for ObjectCaptureSession.Updates(a1, a2, a3, MEMORY[0x263F8F5B8]);
}

uint64_t assignWithTake for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for ObjectCaptureSession.Updates(a1, a2, a3, MEMORY[0x263F8F5B8]);
}

uint64_t getEnumTagSinglePayload for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2465DE084);
}

uint64_t sub_2465DE084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F8F5B8]);
}

uint64_t storeEnumTagSinglePayload for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2465DE0B0);
}

uint64_t sub_2465DE0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F8F5B8]);
}

uint64_t type metadata accessor for ObjectCaptureSession.Updates()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for ObjectCaptureSession.Updates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ObjectCaptureSession.Updates(a1, a2, a3, MEMORY[0x263F8F5A8]);
}

uint64_t type metadata completion function for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void))
{
  uint64_t result = a4(319, *(void *)(a1 + 16));
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ObjectCaptureSession.Updates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for ObjectCaptureSession.Updates(a1, a2, a3, MEMORY[0x263F8F5A8]);
}

uint64_t initializeBufferWithCopyOfBuffer for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  uint64_t v6 = a4(0, *(void *)(a3 + 16));
  uint64_t v7 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);

  return v7(a1, a2, v6);
}

uint64_t destroy for ObjectCaptureSession.Updates.Iterator(uint64_t a1, uint64_t a2)
{
  return destroy for ObjectCaptureSession.Updates(a1, a2, MEMORY[0x263F8F5A8]);
}

uint64_t destroy for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  uint64_t v4 = a3(0, *(void *)(a2 + 16));
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(a1, v4);
}

uint64_t initializeWithCopy for ObjectCaptureSession.Updates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for ObjectCaptureSession.Updates(a1, a2, a3, MEMORY[0x263F8F5A8]);
}

uint64_t initializeWithCopy for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  uint64_t v6 = a4(0, *(void *)(a3 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t assignWithCopy for ObjectCaptureSession.Updates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for ObjectCaptureSession.Updates(a1, a2, a3, MEMORY[0x263F8F5A8]);
}

uint64_t assignWithCopy for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  uint64_t v6 = a4(0, *(void *)(a3 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t initializeWithTake for ObjectCaptureSession.Updates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for ObjectCaptureSession.Updates(a1, a2, a3, MEMORY[0x263F8F5A8]);
}

uint64_t initializeWithTake for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  uint64_t v6 = a4(0, *(void *)(a3 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t assignWithTake for ObjectCaptureSession.Updates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for ObjectCaptureSession.Updates(a1, a2, a3, MEMORY[0x263F8F5A8]);
}

uint64_t assignWithTake for ObjectCaptureSession.Updates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  uint64_t v6 = a4(0, *(void *)(a3 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ObjectCaptureSession.Updates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2465DE4C0);
}

uint64_t sub_2465DE4C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F8F5A8]);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  uint64_t v6 = a4(0, *(void *)(a3 + 16));
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for ObjectCaptureSession.Updates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2465DE560);
}

uint64_t sub_2465DE560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F8F5A8]);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void))
{
  uint64_t v7 = a5(0, *(void *)(a4 + 16));
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

uint64_t type metadata accessor for ObjectCaptureSession.Updates.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for ObjectCaptureSession.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for ObjectCaptureSession.Error(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    uint64_t v3 = type metadata accessor for URL();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for ObjectCaptureSession.Error(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for ObjectCaptureSession.Error(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ObjectCaptureSession.Configuration((uint64_t)a1, type metadata accessor for ObjectCaptureSession.Error);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for ObjectCaptureSession.Error(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for ObjectCaptureSession.Error(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ObjectCaptureSession.Configuration((uint64_t)a1, type metadata accessor for ObjectCaptureSession.Error);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ObjectCaptureSession.Error(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for ObjectCaptureSession.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for ObjectCaptureSession.Error()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for ObjectCaptureSession.Error()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ObjectCaptureSession.CaptureState(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for ObjectCaptureSession.CaptureState(void **a1)
{
  unint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for ObjectCaptureSession.CaptureState(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF) {
      id v7 = v4;
    }
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    id v5 = v4;
    uint64_t v6 = *a1;
    *a1 = v4;
  }
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void **assignWithTake for ObjectCaptureSession.CaptureState(void **a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for ObjectCaptureSession.CaptureState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF9 && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483642);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 5;
  if (v4 >= 7) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ObjectCaptureSession.CaptureState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFA) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 5;
    }
  }
  return result;
}

uint64_t getEnumTag for ObjectCaptureSession.CaptureState(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for ObjectCaptureSession.CaptureState(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ObjectCaptureSession.CaptureState()
{
  return &type metadata for ObjectCaptureSession.CaptureState;
}

uint64_t getEnumTagSinglePayload for ObjectCaptureSession.Feedback(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ObjectCaptureSession.Feedback(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2465DEF2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ObjectCaptureSession.Feedback()
{
  return &type metadata for ObjectCaptureSession.Feedback;
}

uint64_t getEnumTagSinglePayload for ObjectCaptureSession.Tracking(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB)
  {
    unsigned int v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 5;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 5;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2465DF014);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 5;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 4) {
    unsigned int v8 = v7 - 3;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 3) {
    return v8 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for ObjectCaptureSession.Tracking(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFB) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v7 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x2465DF0FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ObjectCaptureSession.Tracking(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 4) {
    return v1 - 3;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for ObjectCaptureSession.Tracking(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObjectCaptureSession.Tracking()
{
  return &type metadata for ObjectCaptureSession.Tracking;
}

uint64_t getEnumTagSinglePayload for ObjectCaptureSession.Tracking.Reason(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ObjectCaptureSession.Tracking.Reason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2465DF2B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ObjectCaptureSession.Tracking.Reason()
{
  return &type metadata for ObjectCaptureSession.Tracking.Reason;
}

uint64_t *initializeBufferWithCopyOfBuffer for ObjectCaptureSession.Configuration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for ObjectCaptureSession.Configuration(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for ObjectCaptureSession.Configuration(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithCopy for ObjectCaptureSession.Configuration(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *initializeWithTake for ObjectCaptureSession.Configuration(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithTake for ObjectCaptureSession.Configuration(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for ObjectCaptureSession.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2465DFAB0);
}

uint64_t sub_2465DFAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ObjectCaptureSession.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2465DFB98);
}

uint64_t sub_2465DFB98(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

void type metadata completion function for ObjectCaptureSession.Configuration()
{
  type metadata accessor for URL?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for URL?()
{
  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
    }
  }
}

uint64_t type metadata instantiation function for UnsafeSendableInstance()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for UnsafeSendableInstance()
{
  uint64_t result = type metadata accessor for Atomic();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for UnsafeSendableInstance()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for UnsafeSendable()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UnsafeSendable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for UnsafeSendable(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for UnsafeSendable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for UnsafeSendable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for UnsafeSendable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for UnsafeSendable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for UnsafeSendable(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for UnsafeSendable(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x2465E041CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        os_log_type_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for UnsafeSendable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with take of DataModel.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataModel.Error(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized static ObjectCaptureSession.fromOCSError(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ObjectCaptureSession.Error();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unsigned int v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v6(v5, a1, v2);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (!MEMORY[0x263F368A0] || v7 != *MEMORY[0x263F368A0])
  {
    if (MEMORY[0x263F36890] && v7 == *MEMORY[0x263F36890]
      || MEMORY[0x263F368A8] && v7 == *MEMORY[0x263F368A8]
      || MEMORY[0x263F368B0] && v7 == *MEMORY[0x263F368B0]
      || MEMORY[0x263F368C0] && v7 == *MEMORY[0x263F368C0])
    {
      type metadata accessor for ObjectCaptureSession.Error(0);
      lazy protocol witness table accessor for type ObjectCaptureSession and conformance ObjectCaptureSession(&lazy protocol witness table cache variable for type ObjectCaptureSession.Error and conformance ObjectCaptureSession.Error, (void (*)(uint64_t))type metadata accessor for ObjectCaptureSession.Error);
      uint64_t v8 = swift_allocError();
      swift_storeEnumTagMultiPayload();
      return v8;
    }
    if ((!MEMORY[0x263F36898] || v7 != *MEMORY[0x263F36898]) && (!MEMORY[0x263F368B8] || v7 != *MEMORY[0x263F368B8]))
    {
      lazy protocol witness table accessor for type ObjectCaptureSession.Error and conformance ObjectCaptureSession.Error(&lazy protocol witness table cache variable for type ObjectCaptureSession.Error and conformance ObjectCaptureSession.Error, MEMORY[0x270FB2608]);
      uint64_t v8 = swift_allocError();
      v6(v10, a1, v2);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return v8;
    }
  }
  lazy protocol witness table accessor for type ObjectCaptureSession.Error and conformance ObjectCaptureSession.Error(&lazy protocol witness table cache variable for type ObjectCaptureSession.Error and conformance ObjectCaptureSession.Error, MEMORY[0x270FB2608]);
  uint64_t v8 = swift_allocError();
  v6(v9, a1, v2);
  return v8;
}

uint64_t specialized static ObjectCaptureSession.toOCSFeedbackSet(ocsFeedback:)(uint64_t a1)
{
  uint64_t v30 = MEMORY[0x263F8EE88];
  uint64_t v2 = type metadata accessor for ObjectCaptureSession.Frame.Feedback();
  uint64_t v3 = *(void **)(v2 - 8);
  uint64_t v4 = v3[8];
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = (char *)&v26 - v5;
  uint64_t v27 = (uint64_t (*)(char *, uint64_t, uint64_t))v3[2];
  uint64_t v7 = v27((char *)&v26 - v5, a1, v2);
  MEMORY[0x270FA5388](v7);
  static ObjectCaptureSession.Frame.Feedback.tooFast.getter();
  uint64_t v28 = lazy protocol witness table accessor for type ObjectCaptureSession.Error and conformance ObjectCaptureSession.Error(&lazy protocol witness table cache variable for type ObjectCaptureSession.Frame.Feedback and conformance ObjectCaptureSession.Frame.Feedback, MEMORY[0x270FB2650]);
  char v8 = dispatch thunk of static Equatable.== infix(_:_:)();
  BOOL v9 = (uint64_t (*)(char *, uint64_t))v3[1];
  uint64_t v10 = v9((char *)&v26 - v5, v2);
  if (v8)
  {
    v9((char *)&v26 - v5, v2);
    Swift::Int v11 = 2;
LABEL_13:
    specialized Set._Variant.insert(_:)(v29, v11);
    return v30;
  }
  uint64_t v26 = a1;
  MEMORY[0x270FA5388](v10);
  static ObjectCaptureSession.Frame.Feedback.tooDark.getter();
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v13 = v9((char *)&v26 - v5, v2);
  if (v12)
  {
    v9((char *)&v26 - v5, v2);
    Swift::Int v11 = 4;
    goto LABEL_13;
  }
  MEMORY[0x270FA5388](v13);
  unint64_t v14 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  static ObjectCaptureSession.Frame.Feedback.lowLight.getter();
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = v9((char *)&v26 - v14, v2);
  if (v15)
  {
    v9(v6, v2);
    Swift::Int v11 = 3;
    goto LABEL_13;
  }
  MEMORY[0x270FA5388](v16);
  static ObjectCaptureSession.Frame.Feedback.tooFar.getter();
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v18 = v9((char *)&v26 - v14, v2);
  if (v17)
  {
    v9(v6, v2);
    Swift::Int v11 = 1;
    goto LABEL_13;
  }
  MEMORY[0x270FA5388](v18);
  unint64_t v19 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  static ObjectCaptureSession.Frame.Feedback.tooClose.getter();
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v21 = v9((char *)&v26 - v19, v2);
  if (v20)
  {
    v9(v6, v2);
    Swift::Int v11 = 0;
    goto LABEL_13;
  }
  MEMORY[0x270FA5388](v21);
  static ObjectCaptureSession.Frame.Feedback.outOfFieldOfView.getter();
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v23 = v9((char *)&v26 - v19, v2);
  if (v22)
  {
    v9(v6, v2);
    Swift::Int v11 = 5;
    goto LABEL_13;
  }
  MEMORY[0x270FA5388](v23);
  v27((char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v2);
  v29[0] = 0;
  v29[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v25._object = (void *)0x80000002466BE950;
  v25._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v25);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type ObjectCaptureSession.Error and conformance ObjectCaptureSession.Error(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ObjectCaptureSession.subscriptions.setter()
{
  return closure #1 in ObjectCaptureSession.subscriptions.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_2465E0E40()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in static ObjectCaptureSession.stopResourceLogging()()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = partial apply for closure #1 in static ObjectCaptureSession.stopResourceLogging();
  return closure #1 in static ObjectCaptureSession.stopResourceLogging()();
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_2465E1018()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in static ObjectCaptureSession.stopResourceLogging();
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined assign with take of ObjectCaptureSession.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ObjectCaptureSession.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in ObjectCaptureSession.numberOfShotsTaken.setter()
{
  *(void *)(*(void *)(v0 + 16) + 40) = *(void *)(v0 + 24);
}

void partial apply for closure #1 in ObjectCaptureSession.canRequestImageCapture.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 35) = *(unsigned char *)(v0 + 24);
}

void partial apply for closure #1 in ObjectCaptureSession.userCompletedScanPass.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 34) = *(unsigned char *)(v0 + 24);
}

void partial apply for closure #1 in ObjectCaptureSession.isPaused.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 33) = *(unsigned char *)(v0 + 24);
}

void partial apply for closure #1 in ObjectCaptureSession.cameraTracking.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 32) = *(unsigned char *)(v0 + 24);
}

uint64_t partial apply for closure #1 in ObjectCaptureSession.feedback.setter()
{
  return partial apply for closure #1 in ObjectCaptureSession.feedback.setter();
}

{
  uint64_t v0;

  *(void *)(*(void *)(v0 + 16) + 24) = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void partial apply for closure #1 in ObjectCaptureSession.state.setter()
{
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = v1;
  outlined copy of ObjectCaptureSession.CaptureState(v1);
  outlined consume of ObjectCaptureSession.CaptureState(v3);
}

uint64_t partial apply for closure #1 in static ObjectCaptureSession.startResourceLogging()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = partial apply for closure #1 in nonisolated_PrivateTearDown(of:);
  return closure #1 in static ObjectCaptureSession.startResourceLogging()();
}

uint64_t sub_2465E12F4()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in ObjectCaptureSession.subscribeToInternalPublishers()(void *a1)
{
  return closure #1 in ObjectCaptureSession.subscribeToInternalPublishers()(a1);
}

uint64_t partial apply for closure #2 in ObjectCaptureSession.subscribeToInternalPublishers()(uint64_t a1, uint64_t a2)
{
  return closure #2 in ObjectCaptureSession.subscribeToInternalPublishers()(a1, a2);
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t outlined destroy of URL?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #3 in ObjectCaptureSession.subscribeToInternalPublishers()(uint64_t *a1)
{
  return closure #3 in ObjectCaptureSession.subscribeToInternalPublishers()(a1);
}

uint64_t partial apply for closure #4 in ObjectCaptureSession.subscribeToInternalPublishers()(unsigned __int8 *a1)
{
  return closure #4 in ObjectCaptureSession.subscribeToInternalPublishers()(a1, v1, (void (*)(uint64_t))ObjectCaptureSession.setUserCompletedScanPass(_:));
}

uint64_t partial apply for closure #5 in ObjectCaptureSession.subscribeToInternalPublishers()(unsigned __int8 *a1)
{
  return closure #4 in ObjectCaptureSession.subscribeToInternalPublishers()(a1, v1, (void (*)(uint64_t))ObjectCaptureSession.setCanRequestImageCapture(_:));
}

uint64_t partial apply for closure #6 in ObjectCaptureSession.subscribeToInternalPublishers()(unsigned __int8 *a1)
{
  return closure #6 in ObjectCaptureSession.subscribeToInternalPublishers()(a1);
}

uint64_t closure #1 in ObjectCaptureSession.isAutoCaptureEnabled.setterpartial apply()
{
  return partial apply for closure #1 in ObjectCaptureSession.isAutoCaptureEnabled.setter();
}

uint64_t closure #1 in ObjectCaptureSession.configuration.setterpartial apply()
{
  return partial apply for closure #1 in ObjectCaptureSession.configuration.setter();
}

void closure #1 in ObjectCaptureSession.userCompletedScanPass.setterpartial apply()
{
}

void closure #1 in ObjectCaptureSession.canRequestImageCapture.setterpartial apply()
{
}

void closure #1 in ObjectCaptureSession.isPaused.setterpartial apply()
{
}

void closure #1 in ObjectCaptureSession.numberOfShotsTaken.setterpartial apply()
{
}

void closure #1 in ObjectCaptureSession.cameraTracking.setterpartial apply()
{
}

double specialized RealityCoordinateSpaceProjecting.ensureYAxis(for:on:in:)(void *a1, double a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v30 = (uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for GeometryProxy();
  uint64_t v31 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  os_log_type_t v29 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  Swift::Int v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CoordinateSpace();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  char v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v28 = v6;
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x263F18C80], v12);
    lazy protocol witness table accessor for type Entity and conformance Entity(&lazy protocol witness table cache variable for type CoordinateSpace and conformance CoordinateSpace, MEMORY[0x263F18C98]);
    id v16 = a1;
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if ((v17 & 1) != 0
      || (dispatch thunk of ARView.scene.getter(),
          dispatch thunk of Scene.anchors.getter(),
          swift_release(),
          uint64_t v18 = specialized Collection.first.getter(),
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8),
          !v18))
    {
    }
    else
    {
      uint64_t v19 = swift_retain();
      uint64_t v20 = v30;
      specialized RealityCoordinateSpaceProjecting.getProxy(from:)(v19, v30);
      swift_release();
      uint64_t v21 = v31;
      uint64_t v22 = v28;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v20, 1, v28) == 1)
      {

        swift_release();
        outlined destroy of URL?(v20, &demangling cache variable for type metadata for GeometryProxy?);
      }
      else
      {
        uint64_t v23 = v29;
        (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v29, v20, v22);
        GeometryProxy.frame(in:)();
        double v25 = v24;
        swift_release();

        a2 = a2 - v25;
        (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v22);
      }
    }
  }
  return a2;
}

double RealityCoordinateSpaceProjecting.ensureYAxis(for:on:in:)(void *a1, double a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v29 = (uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for GeometryProxy();
  uint64_t v30 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v28 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  Swift::Int v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CoordinateSpace();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  char v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v27 = v6;
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x263F18C80], v12);
    lazy protocol witness table accessor for type Entity and conformance Entity(&lazy protocol witness table cache variable for type CoordinateSpace and conformance CoordinateSpace, MEMORY[0x263F18C98]);
    id v16 = a1;
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if ((v17 & 1) != 0
      || (dispatch thunk of ARView.scene.getter(),
          dispatch thunk of Scene.anchors.getter(),
          swift_release(),
          uint64_t v18 = specialized Collection.first.getter(),
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8),
          !v18))
    {
    }
    else
    {
      uint64_t v19 = swift_retain();
      uint64_t v20 = v29;
      specialized RealityCoordinateSpaceProjecting.getProxy(from:)(v19, v29);
      swift_release();
      uint64_t v21 = v30;
      uint64_t v22 = v27;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v20, 1, v27) == 1)
      {

        swift_release();
        outlined destroy of URL?(v20, &demangling cache variable for type metadata for GeometryProxy?);
      }
      else
      {
        double v24 = v28;
        (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v28, v20, v22);
        GeometryProxy.frame(in:)();
        double v26 = v25;
        swift_release();

        a2 = a2 - v26;
        (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v22);
      }
    }
  }
  return a2;
}

uint64_t specialized RealityCoordinateSpaceProjecting.getProxy(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RealityViewCameraComponent?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Entity.ComponentSet();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RealityViewCameraComponent(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v18 = (uint64_t)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain_n();
  dispatch thunk of Entity.components.getter();
  uint64_t v20 = lazy protocol witness table accessor for type Entity and conformance Entity(&lazy protocol witness table cache variable for type RealityViewCameraComponent and conformance RealityViewCameraComponent, (void (*)(uint64_t))type metadata accessor for RealityViewCameraComponent);
  Entity.ComponentSet.subscript.getter();
  swift_release();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  v13(v9, v6);
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v14(v5, 1, v10) == 1)
  {
    while (1)
    {
      outlined destroy of URL?((uint64_t)v5, &demangling cache variable for type metadata for RealityViewCameraComponent?);
      uint64_t v22 = a1;
      swift_retain();
      swift_getAtKeyPath();
      swift_release();
      a1 = v23;
      swift_retain();
      swift_release();
      if (!a1) {
        break;
      }
      dispatch thunk of Entity.components.getter();
      Entity.ComponentSet.subscript.getter();
      swift_release();
      v13(v9, v6);
      if (v14(v5, 1, v10) != 1) {
        goto LABEL_4;
      }
    }
    swift_release();
    uint64_t v17 = type metadata accessor for GeometryProxy();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v19, 1, 1, v17);
  }
  else
  {
LABEL_4:
    swift_release();
    swift_release();
    uint64_t v15 = v18;
    outlined init with take of RealityViewCameraComponent((uint64_t)v5, v18);
    return outlined init with take of Animation?(v15, v19, &demangling cache variable for type metadata for GeometryProxy?);
  }
}

uint64_t RealityViewCameraContent.project<A>(point:to:)(__n128 a1)
{
  __n128 v11 = a1;
  uint64_t v2 = type metadata accessor for CoordinateSpace();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v1;
  uint64_t result = ARView.project(_:)();
  if ((v8 & 1) == 0)
  {
    double v9 = *(double *)&result;
    dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter();
    double v10 = specialized RealityCoordinateSpaceProjecting.ensureYAxis(for:on:in:)(v6, v9);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return *(void *)&v10;
  }
  return result;
}

uint64_t RealityViewCameraContent.unproject<A, B>(_:from:to:ontoPlane:)(double a1, double a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v41 = a10;
  *(void *)&long long v42 = a12;
  uint64_t v36 = a9;
  uint64_t v37 = a11;
  v35[2] = a5;
  v35[3] = a6;
  v35[0] = a3;
  v35[1] = a4;
  uint64_t v40 = a8;
  uint64_t v39 = type metadata accessor for __RealityCoordinateSpaceContext();
  uint64_t v14 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  id v16 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for __ResolvedRealityCoordinateSpace();
  uint64_t v17 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v19 = (char *)v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for CoordinateSpace();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v24 = *v12;
  dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter();
  specialized RealityCoordinateSpaceProjecting.ensureYAxis(for:on:in:)(v24, a1);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  dispatch thunk of ARView.scene.getter();
  uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
  swift_release();
  uint64_t v26 = swift_retain();
  MEMORY[0x24C531B50](v26);
  dispatch thunk of RealityCoordinateSpace._resolve(in:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v39);
  uint64_t v27 = __ResolvedRealityCoordinateSpace.entity.getter();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v38);
  if (v27)
  {
    uint64_t v44 = v27;
    if (active)
    {
      uint64_t v43 = active;
      type metadata accessor for Entity();
      lazy protocol witness table accessor for type Entity and conformance Entity((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x263F16580]);
      swift_retain_n();
      dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      swift_release();
    }
  }
  uint64_t v28 = ARView.unproject(_:ontoPlane:relativeToCamera:)();
  uint64_t v30 = v28;
  if (v31)
  {
    swift_release();
    goto LABEL_8;
  }
  if (!v27)
  {
LABEL_8:
    swift_release();
    return v30;
  }
  *(void *)&long long v32 = v28;
  *((void *)&v32 + 1) = v29;
  long long v42 = v32;
  type metadata accessor for Entity();
  swift_retain();
  HasTransform.convert(position:from:)();
  long long v42 = v33;
  swift_release_n();
  swift_release();
  return v42;
}

__n128 RealityViewCameraContent.ray<A, B>(through:in:to:)@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X5>, __n128 *a4@<X8>, double a5@<D0>)
{
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v27 = a1;
  uint64_t v30 = a4;
  uint64_t v26 = type metadata accessor for __RealityCoordinateSpaceContext();
  uint64_t v25 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  char v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for __ResolvedRealityCoordinateSpace();
  uint64_t v23 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  double v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CoordinateSpace();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v5;
  dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter();
  specialized RealityCoordinateSpaceProjecting.ensureYAxis(for:on:in:)(v15, a5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  ARView.ray(through:)();
  __n128 v31 = (__n128)v33[1];
  __n128 v32 = (__n128)v33[0];
  unsigned __int8 v16 = v34;
  outlined init with take of Animation?((uint64_t)v33, (uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for (origin: SIMD3<Float>, direction: SIMD3<Float>)?);
  if ((v36 & 1) == 0)
  {
    __n128 v31 = (__n128)v35[1];
    __n128 v32 = (__n128)v35[0];
    dispatch thunk of ARView.scene.getter();
    uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
    swift_release();
    MEMORY[0x24C531B50](active);
    dispatch thunk of RealityCoordinateSpace._resolve(in:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v26);
    uint64_t v18 = __ResolvedRealityCoordinateSpace.entity.getter();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v24);
    if (v18)
    {
      type metadata accessor for Entity();
      swift_retain();
      HasTransform.convert(direction:from:)();
      __n128 v31 = v19;
      HasTransform.convert(position:from:)();
      __n128 v32 = v20;
      swift_release_n();
    }
    unsigned __int8 v16 = 0;
  }
  uint64_t v21 = v30;
  __n128 result = v31;
  *uint64_t v30 = v32;
  v21[1] = result;
  v21[2].n128_u8[0] = v16;
  return result;
}

uint64_t RealityViewCameraContent.entity<A>(at:in:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return RealityViewCameraContent.entity<A>(at:in:)(a4, a1, a2, a3, MEMORY[0x263F16968]);
}

uint64_t RealityViewCameraContent.entities<A>(at:in:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return RealityViewCameraContent.entity<A>(at:in:)(a4, a1, a2, a3, MEMORY[0x263F16970]);
}

uint64_t RealityViewCameraContent.entity<A>(at:in:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(double, double))
{
  uint64_t v8 = type metadata accessor for CoordinateSpace();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v5;
  dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter();
  double v13 = specialized RealityCoordinateSpaceProjecting.ensureYAxis(for:on:in:)(v12, a1);
  double v15 = v14;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return a5(v13, v15);
}

uint64_t RealityViewCameraContent.hitTest<A>(point:in:query:mask:)(double a1)
{
  uint64_t v3 = type metadata accessor for CoordinateSpace();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter();
  specialized RealityCoordinateSpaceProjecting.ensureYAxis(for:on:in:)(v7, a1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return ARView.hitTest(_:query:mask:)();
}

uint64_t protocol witness for RealityCoordinateSpaceProjecting.project<A>(point:to:) in conformance RealityViewCameraContent(__n128 a1)
{
  return RealityViewCameraContent.project<A>(point:to:)(a1);
}

uint64_t protocol witness for RealityCoordinateSpaceProjecting.unproject<A, B>(_:from:to:ontoPlane:) in conformance RealityViewCameraContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12)
{
  return RealityViewCameraContent.unproject<A, B>(_:from:to:ontoPlane:)(a7, a8, a9, a10, a11, a12, a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for RealityCoordinateSpaceProjecting.ray<A, B>(through:in:to:) in conformance RealityViewCameraContent@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>, double a5@<D0>)
{
  RealityViewCameraContent.ray<A, B>(through:in:to:)(a1, a2, a3, v7, a5);
  return outlined init with take of Animation?((uint64_t)v7, a4, (uint64_t *)&demangling cache variable for type metadata for (origin: SIMD3<Float>, direction: SIMD3<Float>)?);
}

uint64_t EntityTargetValue.project<A>(point:to:)(__n128 a1, uint64_t a2, uint64_t a3)
{
  __n128 v14 = a1;
  uint64_t v5 = type metadata accessor for CoordinateSpace();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void **)(v3 + *(int *)(a3 + 32));
  if (!v9) {
    return 0;
  }
  uint64_t result = ARView.project(_:)();
  if ((v11 & 1) == 0)
  {
    double v12 = *(double *)&result;
    dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter();
    double v13 = RealityCoordinateSpaceProjecting.ensureYAxis(for:on:in:)(v9, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return *(void *)&v13;
  }
  return result;
}

uint64_t EntityTargetValue.unproject<A, B>(_:from:to:ontoPlane:)(double a1, double a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v42 = a11;
  uint64_t v43 = a13;
  uint64_t v44 = a10;
  uint64_t v45 = a12;
  v38[2] = a5;
  v38[3] = a6;
  v38[1] = a4;
  v38[0] = a3;
  uint64_t v40 = a8;
  uint64_t v41 = type metadata accessor for __RealityCoordinateSpaceContext();
  *(void *)&long long v47 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v17 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for __ResolvedRealityCoordinateSpace();
  uint64_t v39 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  __n128 v19 = (char *)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for CoordinateSpace();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(int *)(a9 + 32);
  uint64_t v25 = *(void **)(v13 + v24);
  dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter();
  RealityCoordinateSpaceProjecting.ensureYAxis(for:on:in:)(v25, a1);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  if (*(void *)(v13 + v24))
  {
    dispatch thunk of ARView.scene.getter();
    uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
    swift_release();
  }
  else
  {
    uint64_t active = 0;
  }
  uint64_t v27 = v41;
  uint64_t v28 = v39;
  uint64_t v29 = swift_retain();
  MEMORY[0x24C531B50](v29);
  dispatch thunk of RealityCoordinateSpace._resolve(in:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v17, v27);
  uint64_t v30 = __ResolvedRealityCoordinateSpace.entity.getter();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v46);
  if (!v30)
  {
    uint64_t v31 = *(void *)(v13 + v24);
    if (v31) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
  uint64_t v49 = v30;
  if (!active)
  {
    uint64_t v31 = *(void *)(v13 + v24);
    if (v31) {
      goto LABEL_9;
    }
LABEL_14:
    swift_release();
    swift_release();
    return v31;
  }
  uint64_t v48 = active;
  type metadata accessor for Entity();
  lazy protocol witness table accessor for type Entity and conformance Entity((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x263F16580]);
  swift_retain_n();
  dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  swift_release();
  uint64_t v31 = *(void *)(v13 + v24);
  if (!v31) {
    goto LABEL_14;
  }
LABEL_9:
  uint64_t v32 = ARView.unproject(_:ontoPlane:relativeToCamera:)();
  uint64_t v31 = v32;
  if (v34) {
    goto LABEL_14;
  }
  if (v30)
  {
    *(void *)&long long v35 = v32;
    *((void *)&v35 + 1) = v33;
    long long v47 = v35;
    type metadata accessor for Entity();
    swift_retain();
    HasTransform.convert(position:from:)();
    long long v47 = v36;
    swift_release_n();
    swift_release();
    return v47;
  }
  else
  {
    swift_release();
  }
  return v31;
}

uint64_t EntityTargetValue.ray<A, B>(through:in:to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v35 = a1;
  uint64_t v40 = a5;
  uint64_t v34 = type metadata accessor for __RealityCoordinateSpaceContext();
  uint64_t v33 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v30 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for __ResolvedRealityCoordinateSpace();
  uint64_t v31 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v29 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CoordinateSpace();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  __n128 v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(int *)(a2 + 32);
  uint64_t v16 = *(void **)(v6 + v15);
  dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter();
  RealityCoordinateSpaceProjecting.ensureYAxis(for:on:in:)(v16, a6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (!*(void *)(v6 + v15))
  {
    long long v25 = 0uLL;
    char v18 = 1;
    long long v26 = 0uLL;
    uint64_t v27 = v40;
    goto LABEL_8;
  }
  ARView.ray(through:)();
  long long v38 = v41[1];
  long long v39 = v41[0];
  char v18 = v42;
  uint64_t result = outlined init with take of Animation?((uint64_t)v41, (uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for (origin: SIMD3<Float>, direction: SIMD3<Float>)?);
  if (v44)
  {
LABEL_7:
    uint64_t v27 = v40;
    long long v26 = v38;
    long long v25 = v39;
    goto LABEL_8;
  }
  long long v38 = v43[1];
  long long v39 = v43[0];
  dispatch thunk of ARView.scene.getter();
  uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
  swift_release();
  uint64_t v20 = v30;
  MEMORY[0x24C531B50](active);
  uint64_t v21 = v29;
  dispatch thunk of RealityCoordinateSpace._resolve(in:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
  uint64_t v22 = __ResolvedRealityCoordinateSpace.entity.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v21, v32);
  if (!v22)
  {
    char v18 = 0;
    goto LABEL_7;
  }
  type metadata accessor for Entity();
  swift_retain();
  HasTransform.convert(direction:from:)();
  long long v38 = v23;
  HasTransform.convert(position:from:)();
  long long v39 = v24;
  uint64_t result = swift_release_n();
  long long v26 = v38;
  long long v25 = v39;
  char v18 = 0;
  uint64_t v27 = v40;
LABEL_8:
  *(_OWORD *)uint64_t v27 = v25;
  *(_OWORD *)(v27 + 16) = v26;
  *(unsigned char *)(v27 + 32) = v18;
  return result;
}

uint64_t EntityTargetValue.entity<A>(at:in:)(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CoordinateSpace();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = *(void **)(v3 + v10);
  dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter();
  RealityCoordinateSpaceProjecting.ensureYAxis(for:on:in:)(v11, a1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (*(void *)(v3 + v10)) {
    return ARView.entity(at:)();
  }
  else {
    return 0;
  }
}

uint64_t EntityTargetValue.entities<A>(at:in:)(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CoordinateSpace();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = *(void **)(v3 + v10);
  dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter();
  RealityCoordinateSpaceProjecting.ensureYAxis(for:on:in:)(v11, a1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (*(void *)(v3 + v10)) {
    return ARView.entities(at:)();
  }
  else {
    return MEMORY[0x263F8EE78];
  }
}

uint64_t EntityTargetValue.hitTest<A>(point:in:query:mask:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v15[0] = a3;
  v15[1] = a4;
  uint64_t v8 = type metadata accessor for CoordinateSpace();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(a5 + 32);
  uint64_t v13 = *(void **)(v5 + v12);
  dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter();
  RealityCoordinateSpaceProjecting.ensureYAxis(for:on:in:)(v13, a1);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (*(void *)(v5 + v12)) {
    return ARView.hitTest(_:query:mask:)();
  }
  else {
    return MEMORY[0x263F8EE78];
  }
}

uint64_t protocol witness for RealityCoordinateSpaceProjecting.project<A>(point:to:) in conformance EntityTargetValue<A>(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EntityTargetValue.project<A>(point:to:)(a2, a1, a5);
}

uint64_t protocol witness for RealityCoordinateSpaceProjecting.unproject<A, B>(_:from:to:ontoPlane:) in conformance EntityTargetValue<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13)
{
  return EntityTargetValue.unproject<A, B>(_:from:to:ontoPlane:)(a8, a9, a10, a11, a12, a13, a1, a2, a7, a3, a4, a5, a6);
}

uint64_t protocol witness for RealityCoordinateSpaceProjecting.ray<A, B>(through:in:to:) in conformance EntityTargetValue<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>, double a6@<D0>)
{
  EntityTargetValue.ray<A, B>(through:in:to:)(a1, a4, a2, a3, (uint64_t)v8, a6);
  return outlined init with take of Animation?((uint64_t)v8, a5, (uint64_t *)&demangling cache variable for type metadata for (origin: SIMD3<Float>, direction: SIMD3<Float>)?);
}

uint64_t protocol witness for RealityCoordinateSpaceProjecting.entity<A>(at:in:) in conformance EntityTargetValue<A>(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EntityTargetValue.entity<A>(at:in:)(a2, a1, a5);
}

uint64_t protocol witness for RealityCoordinateSpaceProjecting.entities<A>(at:in:) in conformance EntityTargetValue<A>(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EntityTargetValue.entities<A>(at:in:)(a2, a1, a5);
}

uint64_t protocol witness for RealityCoordinateSpaceProjecting.hitTest<A>(point:in:query:mask:) in conformance EntityTargetValue<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return EntityTargetValue.hitTest<A>(point:in:query:mask:)(a4, a1, a2, a3, a7);
}

uint64_t EntityTargetValue.unproject<A>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for LocalCoordinateSpace();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAtKeyPath();
  double v13 = v16;
  static CoordinateSpaceProtocol<>.local.getter();
  uint64_t v14 = EntityTargetValue.unproject<A, B>(_:from:to:)(v13, (uint64_t)v12, a2, a3, v9, a4, MEMORY[0x263F19BC0], a5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v14;
}

uint64_t EntityTargetValue.unproject<A, B>(_:from:to:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v45 = a6;
  *(void *)&long long v46 = a8;
  uint64_t v44 = a3;
  uint64_t v11 = type metadata accessor for __RealityCoordinateSpaceContext();
  uint64_t v42 = *(void *)(v11 - 8);
  uint64_t v43 = v11;
  MEMORY[0x270FA5388](v11);
  long long v39 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for __ResolvedRealityCoordinateSpace();
  uint64_t v40 = *(void *)(v13 - 8);
  uint64_t v41 = v13;
  MEMORY[0x270FA5388](v13);
  long long v38 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CoordinateSpace();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  char v18 = (char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(int *)(a4 + 32);
  uint64_t v20 = *(void **)(v8 + v19);
  dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter();
  RealityCoordinateSpaceProjecting.ensureYAxis(for:on:in:)(v20, a1);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v21 = *(void **)(v8 + v19);
  if (!v21) {
    return 0;
  }
  uint64_t v22 = v8 + *(int *)(a4 + 36);
  if (*(unsigned char *)(v22 + 64)) {
    return 0;
  }
  v37[3] = *(_OWORD *)v22;
  v37[2] = *(_OWORD *)(v22 + 16);
  v37[1] = *(_OWORD *)(v22 + 32);
  v37[0] = *(_OWORD *)(v22 + 48);
  id v23 = v21;
  dispatch thunk of ARView.scene.getter();
  uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
  swift_release();
  if (!active)
  {

    return 0;
  }
  uint64_t v25 = swift_retain();
  long long v26 = v39;
  MEMORY[0x24C531B50](v25);
  uint64_t v27 = v38;
  dispatch thunk of RealityCoordinateSpace._resolve(in:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v43);
  uint64_t v28 = __ResolvedRealityCoordinateSpace.entity.getter();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v27, v41);
  if (!v28)
  {
    uint64_t v31 = ARView.unproject(_:ontoPlane:relativeToCamera:)();
    if ((v36 & 1) == 0)
    {
      swift_release();

      return v31;
    }
LABEL_12:
    swift_release();
    swift_release();

    return v31;
  }
  uint64_t v47 = active;
  uint64_t v48 = v28;
  type metadata accessor for Entity();
  lazy protocol witness table accessor for type Entity and conformance Entity((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x263F16580]);
  swift_retain_n();
  dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  swift_release();
  uint64_t v29 = ARView.unproject(_:ontoPlane:relativeToCamera:)();
  uint64_t v31 = v29;
  if (v32) {
    goto LABEL_12;
  }
  *(void *)&long long v33 = v29;
  *((void *)&v33 + 1) = v30;
  long long v46 = v33;
  swift_retain();
  HasTransform.convert(position:from:)();
  long long v46 = v34;
  swift_release_n();
  swift_release();

  return v46;
}

uint64_t dispatch thunk of RealityCoordinateSpaceProjecting.project<A>(point:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of RealityCoordinateSpaceProjecting.unproject<A, B>(_:from:to:ontoPlane:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t dispatch thunk of RealityCoordinateSpaceProjecting.ray<A, B>(through:in:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 24))();
}

uint64_t dispatch thunk of RealityCoordinateSpaceProjecting.entity<A>(at:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of RealityCoordinateSpaceProjecting.entities<A>(at:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of RealityCoordinateSpaceProjecting.hitTest<A>(point:in:query:mask:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t sub_2465E4234()
{
  return MEMORY[0x263F16568];
}

uint64_t sub_2465E4240@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Entity();
  uint64_t result = HasHierarchy.parent.getter();
  *a1 = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type Entity and conformance Entity(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of RealityViewCameraComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RealityViewCameraComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

__n128 ObjectCapturePointCloudView.init(session:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel)
     + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_pointCloudsBySegment;
  swift_beginAccess();
  ObjectCapturePointCloudView.init(session:segment:)(a1, *(void *)(*(void *)v4 + 16) - 1, (uint64_t)&v7);
  unsigned __int8 v5 = v8;
  __n128 result = v9;
  a2->n128_u64[0] = v7;
  a2->n128_u8[8] = v5;
  a2[1] = result;
  return result;
}

uint64_t ObjectCapturePointCloudView.init(session:segment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  State.init(wrappedValue:)();
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel)
     + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_pointCloudsBySegment;
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *(void *)(*(void *)v6 + 16) - 1;
  if (v8 >= a2) {
    uint64_t v8 = a2;
  }
  uint64_t v9 = v8 & ~(v8 >> 63);
  if (v9 != a2)
  {
    uint64_t v10 = one-time initialization token for logger;
    swift_retain();
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)logger);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 134349312;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2050;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2465C2000, v12, v13, "Invalid segment ID %{public}ld provided.  Replacing with: %{public}ld...", (uint8_t *)v14, 0x16u);
      MEMORY[0x24C5348D0](v14, -1, -1);
    }

    uint64_t result = swift_release();
  }
  *(void *)a3 = a1;
  *(unsigned char *)(a3 + 8) = v15;
  *(void *)(a3 + 16) = v16;
  *(void *)(a3 + 24) = v9;
  return result;
}

uint64_t ObjectCapturePointCloudView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>);
  MEMORY[0x270FA5388](v3 - 8);
  unsigned __int8 v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)v1;
  int v7 = *(unsigned __int8 *)(v1 + 8);
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  *unsigned __int8 v5 = static Alignment.center.getter();
  v5[1] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, _ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>);
  closure #1 in ObjectCapturePointCloudView.body.getter(v6, v7, v9, v8, (uint64_t)v5 + *(int *)(v11 + 44));
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v6;
  *(unsigned char *)(v12 + 24) = v7;
  *(void *)(v12 + 32) = v9;
  *(void *)(v12 + 40) = v8;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v5, a1, &demangling cache variable for type metadata for ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>);
  os_log_type_t v13 = (void *)(a1
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>, _AppearanceActionModifier>)
                          + 36));
  *os_log_type_t v13 = 0;
  v13[1] = 0;
  long long v13[2] = partial apply for closure #2 in ObjectCapturePointCloudView.body.getter;
  v13[3] = v12;
  swift_retain();
  swift_retain();
  return outlined destroy of URL?((uint64_t)v5, &demangling cache variable for type metadata for ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>);
}

uint64_t closure #1 in ObjectCapturePointCloudView.body.getter@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v62 = a4;
  uint64_t v57 = a3;
  LODWORD(v56) = a2;
  uint64_t v71 = a5;
  uint64_t v67 = type metadata accessor for FreeformFullView();
  uint64_t v6 = MEMORY[0x270FA5388](v67);
  uint64_t v8 = (uint64_t *)&v53[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6);
  uint64_t v61 = &v53[-v9];
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>.Storage);
  MEMORY[0x270FA5388](v69);
  uint64_t v70 = &v53[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>.Storage);
  MEMORY[0x270FA5388](v64);
  unint64_t v65 = &v53[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>);
  MEMORY[0x270FA5388](v68);
  uint64_t v66 = &v53[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v59 = *(void *)(v13 - 8);
  uint64_t v60 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v58 = &v53[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = (int *)type metadata accessor for CoveragePointCloudFullView();
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  char v18 = (uint64_t *)&v53[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = &v53[-v19];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDView<CoveragePointCloudFullView, Int>);
  MEMORY[0x270FA5388](v21);
  id v23 = &v53[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>);
  MEMORY[0x270FA5388](v55);
  uint64_t v25 = &v53[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>);
  uint64_t v27 = MEMORY[0x270FA5388](v26);
  uint64_t v29 = &v53[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v30 = MEMORY[0x270FA5388](v27);
  uint64_t v32 = *(void *)(a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel);
  int v33 = *(unsigned __int8 *)(v32 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode);
  if (*(unsigned char *)(v32 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode))
  {
    uint64_t v63 = v30;
    if (v33 == 1)
    {
      char v72 = v56 & 1;
      uint64_t v73 = v57;
      uint64_t v61 = &v53[-v31];
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
      State.projectedValue.getter();
      uint64_t v56 = v75;
      uint64_t v57 = v74;
      int v54 = v76;
      long long v34 = (uint64_t *)((char *)v18 + v15[5]);
      *long long v34 = swift_getKeyPath();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
      swift_storeEnumTagMultiPayload();
      type metadata accessor for DataModel(0);
      lazy protocol witness table accessor for type FreeformFullView and conformance FreeformFullView((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, (void (*)(uint64_t))type metadata accessor for DataModel);
      swift_retain();
      *char v18 = ObservedObject.init(wrappedValue:)();
      v18[1] = v35;
      char v36 = (char *)v18 + v15[6];
      uint64_t v37 = v56;
      *(void *)char v36 = v57;
      *((void *)v36 + 1) = v37;
      v36[16] = v54;
      *((unsigned char *)v18 + v15[8]) = 0;
      uint64_t v38 = v62;
      *(uint64_t *)((char *)v18 + v15[9]) = v62;
      long long v39 = *(void **)(v32 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_fullscreenCoveragePointsRenderer);
      id v40 = v39;
      swift_release();
      *(uint64_t *)((char *)v18 + v15[7]) = (uint64_t)v39;
      outlined init with take of FreeformFullView((uint64_t)v18, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CoveragePointCloudFullView);
      outlined init with copy of FreeformFullView((uint64_t)v20, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CoveragePointCloudFullView);
      *(void *)&v23[*(int *)(v21 + 52)] = v38;
      outlined destroy of FreeformFullView((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CoveragePointCloudFullView);
      (*(void (**)(unsigned char *, void, uint64_t))(v59 + 104))(v58, *MEMORY[0x263F1B388], v60);
      uint64_t v41 = Color.init(_:white:opacity:)();
      LOBYTE(v39) = static Edge.Set.all.getter();
      outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v23, (uint64_t)v25, &demangling cache variable for type metadata for IDView<CoveragePointCloudFullView, Int>);
      uint64_t v42 = &v25[*(int *)(v55 + 36)];
      *(void *)uint64_t v42 = v41;
      v42[8] = (_BYTE)v39;
      outlined destroy of URL?((uint64_t)v23, &demangling cache variable for type metadata for IDView<CoveragePointCloudFullView, Int>);
      uint64_t v43 = static SafeAreaRegions.all.getter();
      LOBYTE(v39) = static Edge.Set.all.getter();
      outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v25, (uint64_t)v29, &demangling cache variable for type metadata for ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>);
      uint64_t v44 = &v29[*(int *)(v63 + 36)];
      *(void *)uint64_t v44 = v43;
      v44[8] = (_BYTE)v39;
      outlined destroy of URL?((uint64_t)v25, &demangling cache variable for type metadata for ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>);
      uint64_t v45 = v61;
      outlined init with take of ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>((uint64_t)v29, (uint64_t)v61);
      outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v45, (uint64_t)v65, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>);
      swift_storeEnumTagMultiPayload();
      lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
      lazy protocol witness table accessor for type FreeformFullView and conformance FreeformFullView(&lazy protocol witness table cache variable for type FreeformFullView and conformance FreeformFullView, (void (*)(uint64_t))type metadata accessor for FreeformFullView);
      uint64_t v46 = (uint64_t)v66;
      _ConditionalContent<>.init(storage:)();
      outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v46, (uint64_t)v70, &demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>);
      swift_storeEnumTagMultiPayload();
      lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView> and conformance <> _ConditionalContent<A, B>();
      _ConditionalContent<>.init(storage:)();
      outlined destroy of URL?(v46, &demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>);
      return outlined destroy of URL?((uint64_t)v45, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>);
    }
    else
    {
      type metadata accessor for DataModel(0);
      lazy protocol witness table accessor for type FreeformFullView and conformance FreeformFullView((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, (void (*)(uint64_t))type metadata accessor for DataModel);
      swift_retain();
      *uint64_t v8 = ObservedObject.init(wrappedValue:)();
      v8[1] = v48;
      uint64_t v49 = (uint64_t *)((char *)v8 + *(int *)(v67 + 20));
      *uint64_t v49 = swift_getKeyPath();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
      swift_storeEnumTagMultiPayload();
      uint64_t v50 = (uint64_t)v8;
      uint64_t v51 = v61;
      outlined init with take of FreeformFullView(v50, (uint64_t)v61, (uint64_t (*)(void))type metadata accessor for FreeformFullView);
      outlined init with copy of FreeformFullView((uint64_t)v51, (uint64_t)v65, (uint64_t (*)(void))type metadata accessor for FreeformFullView);
      swift_storeEnumTagMultiPayload();
      lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
      lazy protocol witness table accessor for type FreeformFullView and conformance FreeformFullView(&lazy protocol witness table cache variable for type FreeformFullView and conformance FreeformFullView, (void (*)(uint64_t))type metadata accessor for FreeformFullView);
      uint64_t v52 = (uint64_t)v66;
      _ConditionalContent<>.init(storage:)();
      outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v52, (uint64_t)v70, &demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>);
      swift_storeEnumTagMultiPayload();
      lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView> and conformance <> _ConditionalContent<A, B>();
      _ConditionalContent<>.init(storage:)();
      outlined destroy of URL?(v52, &demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>);
      return outlined destroy of FreeformFullView((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for FreeformFullView);
    }
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView> and conformance <> _ConditionalContent<A, B>();
    return _ConditionalContent<>.init(storage:)();
  }
}

uint64_t closure #2 in ObjectCapturePointCloudView.body.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel)
                 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_cameraFrustumRenderer);
  char v2 = *(unsigned char *)(v1 + 24);
  *(unsigned char *)(v1 + 24) = 0;
  swift_retain();
  CameraFrustumRenderer.showShotLocations.didset(v2);

  return swift_release();
}

uint64_t partial apply for closure #2 in ObjectCapturePointCloudView.body.getter()
{
  return closure #2 in ObjectCapturePointCloudView.body.getter(*(void *)(v0 + 16));
}

uint64_t protocol witness for View.body.getter in conformance ObjectCapturePointCloudView@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>);
  MEMORY[0x270FA5388](v3 - 8);
  unsigned __int8 v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)v1;
  int v7 = *(unsigned __int8 *)(v1 + 8);
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  *unsigned __int8 v5 = static Alignment.center.getter();
  v5[1] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, _ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>);
  closure #1 in ObjectCapturePointCloudView.body.getter(v6, v7, v9, v8, (uint64_t)v5 + *(int *)(v11 + 44));
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v6;
  *(unsigned char *)(v12 + 24) = v7;
  *(void *)(v12 + 32) = v9;
  *(void *)(v12 + 40) = v8;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v5, a1, &demangling cache variable for type metadata for ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>);
  uint64_t v13 = (void *)(a1
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>, _AppearanceActionModifier>)
                          + 36));
  *uint64_t v13 = 0;
  v13[1] = 0;
  long long v13[2] = closure #2 in ObjectCapturePointCloudView.body.getterpartial apply;
  v13[3] = v12;
  swift_retain();
  swift_retain();
  return outlined destroy of URL?((uint64_t)v5, &demangling cache variable for type metadata for ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>);
}

uint64_t ObjectCapturePointCloudView.showShotLocations(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  char v5 = *((unsigned char *)v2 + 8);
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = *(void *)(*(void *)(*v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI20ObjectCaptureSession_unsafeModel)
                 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_cameraFrustumRenderer);
  char v9 = *(unsigned char *)(v8 + 24);
  *(unsigned char *)(v8 + 24) = a1;
  swift_retain();
  CameraFrustumRenderer.showShotLocations.didset(v9);
  swift_release();
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v7;
  swift_retain();

  return swift_retain();
}

uint64_t key path setter for EnvironmentValues.colorScheme : EnvironmentValues(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.colorScheme.setter();
}

uint64_t associated type witness table accessor for View.Body : View in ObjectCapturePointCloudView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for ObjectCapturePointCloudView()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ObjectCapturePointCloudView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ObjectCapturePointCloudView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ObjectCapturePointCloudView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ObjectCapturePointCloudView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ObjectCapturePointCloudView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ObjectCapturePointCloudView()
{
  return &type metadata for ObjectCapturePointCloudView;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>, _AppearanceActionModifier>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type FreeformFullView and conformance FreeformFullView(&lazy protocol witness table cache variable for type FreeformFullView and conformance FreeformFullView, (void (*)(uint64_t))type metadata accessor for FreeformFullView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>);
    lazy protocol witness table accessor for type ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type IDView<CoveragePointCloudFullView, Int> and conformance IDView<A, B>, &demangling cache variable for type metadata for IDView<CoveragePointCloudFullView, Int>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type FreeformFullView and conformance FreeformFullView(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2465E58B4()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t outlined init with take of FreeformFullView(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of FreeformFullView(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of FreeformFullView(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CHHapticPatternKey, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v6, (uint64_t)&v13, &demangling cache variable for type metadata for (CHHapticPatternKey, Any));
    uint64_t v7 = v13;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    int8x16_t v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<CHHapticPatternKey, [CHHapticPatternKey : Any]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<CHHapticPatternKey, [[CHHapticPatternKey : [CHHapticPatternKey : Any]]]>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void v24[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, FreeformMeshManager.MeshAnchor));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, FreeformMeshManager.MeshAnchor>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  BOOL v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, FreeformMeshManager.MeshAnchor));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    char v18 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7];
    uint64_t v20 = type metadata accessor for FreeformMeshManager.MeshAnchor();
    unint64_t result = outlined init with take of FreeformMeshManager.MeshAnchor(v9, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v16);
    uint64_t v21 = v7[2];
    uint64_t v22 = __OFADD__(v21, 1);
    id v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *v5;
    id v7 = (id)*(v5 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v3[6] + v10) = v7;
    *(void *)(v3[7] + v10) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    int8x16_t v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t (*FreeformMeshManager.meshAnchors.modify())()
{
  return FreeformMeshManager.meshAnchors.modify;
}

uint64_t FreeformMeshManager.init(config:)()
{
  uint64_t v1 = v0;
  *(void *)(v0 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(unsigned char *)(v0 + 64) = 1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  *(void *)(v0 + 72) = v2;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v11 = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    uint64_t v8 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v4, v5, "Initialized MeshManager with configuration: %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v7, -1, -1);
    MEMORY[0x24C5348D0](v6, -1, -1);
  }

  return v1;
}

Swift::Void __swiftcall FreeformMeshManager.add(meshAnchors:)(Swift::OpaquePointer meshAnchors)
{
  uint64_t v67 = type metadata accessor for FreeformMeshManager.MeshAnchor();
  uint64_t v70 = *(void *)(v67 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v67);
  uint64_t v78 = (uint64_t)v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v66 = (char *)v61 - v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FreeformMeshManager.MeshAnchor?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v64 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v80 = (uint64_t)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  long long v14 = (char *)v61 - v13;
  MEMORY[0x270FA5388](v12);
  v79 = (char *)v61 - v15;
  uint64_t v68 = v1;
  os_unfair_lock_t v62 = (os_unfair_lock_t)(*(void *)(v1 + 72) + 16);
  os_unfair_lock_lock(v62);
  if (one-time initialization token for logger != -1) {
LABEL_34:
  }
    swift_once();
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)logger);
  swift_bridgeObjectRetain();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 134349056;
    uint64_t v89 = *((void *)meshAnchors._rawValue + 2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v17, v18, "Received mesh update with %{public}ld anchors", v19, 0xCu);
    MEMORY[0x24C5348D0](v19, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v20 = *((void *)meshAnchors._rawValue + 2);
  uint64_t v21 = (uint64_t)v79;
  if (!v20)
  {
LABEL_31:
    os_unfair_lock_unlock(v62);
    return;
  }
  unint64_t v65 = v14;
  uint64_t v22 = (void *)(v68 + 16);
  uint64_t v23 = type metadata accessor for ObjectCaptureSession.Mesh.Anchor();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = (char *)meshAnchors._rawValue
      + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  v61[1] = meshAnchors._rawValue;
  swift_bridgeObjectRetain();
  uint64_t v87 = v22;
  uint64_t v26 = swift_beginAccess();
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  v24 += 16;
  uint64_t v82 = v27;
  unint64_t v77 = (void (**)(char *, uint64_t, uint64_t, int *))(v70 + 56);
  uint64_t v86 = (void (**)(uint64_t, uint64_t))(v64 + 8);
  char v72 = (uint64_t (**)(char *, uint64_t))(v24 - 8);
  uint64_t v69 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 40);
  uint64_t v63 = v64 + 16;
  uint64_t v71 = *(void *)(v24 + 56);
  uint64_t v83 = v24;
  uint64_t v76 = *(void *)(v24 + 48);
  uint64_t v28 = (uint64_t (**)(char *, uint64_t, int *))(v70 + 48);
  uint64_t v29 = (int *)v67;
  uint64_t v81 = v23;
  uint64_t v73 = (uint64_t (**)(char *, uint64_t, int *))(v70 + 48);
  uint64_t v75 = v8;
  uint64_t v74 = v9;
  while (1)
  {
    uint64_t v85 = v61;
    MEMORY[0x270FA5388](v26);
    long long v14 = (char *)v61 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    v82(v14, v25, v23);
    ObjectCaptureSession.Mesh.Anchor.identifier.getter();
    uint64_t v36 = *v87;
    if (*(void *)(*v87 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
      if (v38)
      {
        uint64_t v39 = v70;
        outlined init with copy of FreeformMeshManager.MeshAnchor(*(void *)(v36 + 56) + *(void *)(v70 + 72) * v37, (uint64_t)v8);
        id v40 = *(void (**)(char *, void, uint64_t, int *))(v39 + 56);
        uint64_t v21 = (uint64_t)v79;
        v40(v8, 0, 1, v29);
      }
      else
      {
        (*v77)(v8, 1, 1, v29);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      (*v77)(v8, 1, 1, v29);
    }
    uint64_t v84 = *v86;
    v84(v21, v9);
    uint64_t v41 = *v28;
    unsigned int v42 = (*v28)(v8, 1, v29);
    outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for FreeformMeshManager.MeshAnchor?);
    if (v42 != 1)
    {
      uint64_t v30 = v65;
      ObjectCaptureSession.Mesh.Anchor.identifier.getter();
      uint64_t v31 = FreeformMeshManager.meshAnchors.modify();
      uint64_t v32 = specialized Dictionary.subscript.modify(v88);
      long long v34 = v33;
      if (!v41(v33, 1, v29))
      {
        uint64_t v56 = (uint64_t)&v34[v29[6]];
        outlined destroy of URL?(v56, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
        uint64_t v57 = v81;
        v82((char *)v56, v14, v81);
        (*v69)((char *)v56, 0, 1, v57);
      }
      ((void (*)(void *, void))v32)(v88, 0);
      uint64_t v9 = v74;
      v84((uint64_t)v30, v74);
      ((void (*)(uint64_t *, void))v31)(&v89, 0);
      uint64_t v8 = v75;
      uint64_t v21 = (uint64_t)v79;
      uint64_t v28 = v73;
      goto LABEL_10;
    }
    uint64_t v9 = v80;
    ObjectCaptureSession.Mesh.Anchor.identifier.getter();
    uint64_t v43 = *v69;
    uint64_t v8 = v66;
    uint64_t v44 = v81;
    (*v69)(v66, 1, 1, v81);
    v43(&v8[v29[5]], 1, 1, v44);
    uint64_t v45 = &v8[v29[6]];
    v82(v45, v14, v44);
    v43(v45, 0, 1, v44);
    v8[v29[7]] = 0;
    uint64_t v46 = v87;
    swift_beginAccess();
    outlined init with take of FreeformMeshManager.MeshAnchor((uint64_t)v8, v78);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v88[0] = *v46;
    uint64_t v48 = (void *)v88[0];
    *uint64_t v46 = 0x8000000000000000;
    meshAnchors._rawValue = (void *)specialized __RawDictionaryStorage.find<A>(_:)(v9);
    uint64_t v50 = v48[2];
    BOOL v51 = (v49 & 1) == 0;
    uint64_t v52 = v50 + v51;
    if (__OFADD__(v50, v51))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    char v53 = v49;
    if (v48[3] < v52) {
      break;
    }
    uint64_t v8 = v75;
    uint64_t v28 = v73;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v21 = (uint64_t)v79;
      if ((v49 & 1) == 0) {
        goto LABEL_27;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v48 = (void *)v88[0];
      uint64_t v21 = (uint64_t)v79;
      if ((v53 & 1) == 0)
      {
LABEL_27:
        v48[((unint64_t)meshAnchors._rawValue >> 6) + 8] |= 1 << SLOBYTE(meshAnchors._rawValue);
        uint64_t v9 = v74;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16))(v48[6] + *(void *)(v64 + 72) * (uint64_t)meshAnchors._rawValue, v80, v74);
        outlined init with take of FreeformMeshManager.MeshAnchor(v78, v48[7] + *(void *)(v70 + 72) * (uint64_t)meshAnchors._rawValue);
        uint64_t v58 = v48[2];
        BOOL v59 = __OFADD__(v58, 1);
        uint64_t v60 = v58 + 1;
        if (v59) {
          goto LABEL_33;
        }
        v48[2] = v60;
        uint64_t v48 = (void *)v88[0];
        goto LABEL_29;
      }
    }
LABEL_25:
    outlined assign with take of FreeformMeshManager.MeshAnchor(v78, v48[7] + *(void *)(v70 + 72) * (uint64_t)meshAnchors._rawValue);
    uint64_t v9 = v74;
LABEL_29:
    *uint64_t v87 = v48;
    swift_bridgeObjectRelease();
    v84(v80, v9);
    swift_endAccess();
    uint64_t v29 = (int *)v67;
LABEL_10:
    uint64_t v23 = v81;
    uint64_t v26 = (*v72)(v14, v81);
    v25 += v71;
    if (!--v20)
    {
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, isUniquelyReferenced_nonNull_native);
  uint64_t v48 = (void *)v88[0];
  int v54 = (void *)specialized __RawDictionaryStorage.find<A>(_:)(v80);
  uint64_t v8 = v75;
  uint64_t v28 = v73;
  if ((v53 & 1) == (v55 & 1))
  {
    meshAnchors._rawValue = v54;
    uint64_t v21 = (uint64_t)v79;
    if ((v53 & 1) == 0) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void (*specialized Dictionary.subscript.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  uint64_t v6 = malloc(*(void *)(v4 + 64));
  v2[6] = v6;
  (*(void (**)(void))(v5 + 16))();
  v2[7] = specialized Dictionary._Variant.subscript.modify(v2, (uint64_t)v6);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 48);
  uint64_t v3 = *(void *)(*a1 + 32);
  uint64_t v4 = *(void *)(*a1 + 40);
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);

  free(v1);
}

void FreeformMeshManager.advanceWithRemoval()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FreeformMeshManager.MeshAnchor?);
  uint64_t v1 = MEMORY[0x270FA5388](v0 - 8);
  uint64_t v309 = (uint64_t)&v279 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  unint64_t v5 = (unint64_t)&v279 - v4;
  uint64_t v6 = MEMORY[0x270FA5388](v3);
  v313.i64[0] = (uint64_t)&v279 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v315 = (uint64_t)&v279 - v8;
  uint64_t v9 = (char *)type metadata accessor for FreeformMeshManager.MeshAnchor();
  v335 = (char *)*((void *)v9 - 1);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v296 = (uint64_t)&v279 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v279 - v12;
  long long v14 = (unint64_t *)type metadata accessor for UUID();
  uint64_t v324 = *(v14 - 1);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (uint64_t *)((char *)&v279 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  v301 = (char *)&v279 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  unint64_t v22 = (unint64_t)&v279 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  v307 = (char *)&v279 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  v295 = (char *)&v279 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v29 = (uint64_t)&v279 - v28;
  uint64_t v30 = MEMORY[0x270FA5388](v27);
  uint64_t v32 = (char *)&v279 - v31;
  uint64_t v33 = MEMORY[0x270FA5388](v30);
  uint64_t v35 = (char *)&v279 - v34;
  uint64_t v36 = MEMORY[0x270FA5388](v33);
  v286 = (char *)&v279 - v37;
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  v292 = (char *)&v279 - v39;
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  v291 = (char *)&v279 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  uint64_t v44 = (char *)&v279 - v43;
  uint64_t v45 = MEMORY[0x270FA5388](v42);
  v289 = (char *)&v279 - v46;
  MEMORY[0x270FA5388](v45);
  uint64_t v339 = (uint64_t)&v279 - v47;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: FreeformMeshManager.MeshAnchor)?);
  uint64_t v49 = MEMORY[0x270FA5388](v48 - 8);
  v319 = (char *)&v279 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = MEMORY[0x270FA5388](v49);
  uint64_t v310 = (uint64_t)&v279 - v52;
  uint64_t v53 = MEMORY[0x270FA5388](v51);
  v318 = (char *)&v279 - v54;
  MEMORY[0x270FA5388](v53);
  uint64_t v317 = (uint64_t)&v279 - v55;
  if (one-time initialization token for logger == -1) {
    goto LABEL_2;
  }
LABEL_152:
  swift_once();
LABEL_2:
  v300 = (char *)v22;
  unint64_t v302 = v5;
  uint64_t v56 = type metadata accessor for Logger();
  uint64_t v314 = __swift_project_value_buffer(v56, (uint64_t)logger);
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.default.getter();
  BOOL v59 = os_log_type_enabled(v57, v58);
  v293 = v32;
  if (v59)
  {
    uint64_t v60 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v60 = 0;
    _os_log_impl(&dword_2465C2000, v57, v58, "Advance is updating mesh anchors...", v60, 2u);
    MEMORY[0x24C5348D0](v60, -1, -1);
  }

  uint64_t v61 = v304;
  v322 = (unint64_t *)&v304[1];
  swift_beginAccess();
  uint64_t v62 = v61[1].i64[0];
  uint64_t v63 = *(void *)(v62 + 64);
  uint64_t v303 = v62 + 64;
  uint64_t v64 = 1 << *(unsigned char *)(v62 + 32);
  uint64_t v65 = -1;
  if (v64 < 64) {
    uint64_t v65 = ~(-1 << v64);
  }
  unint64_t v22 = v65 & v63;
  unint64_t v5 = (unint64_t)(v64 + 63) >> 6;
  uint64_t v66 = (void (**)(void, void, void))(v324 + 16);
  v321 = (void (**)(uint64_t, uint64_t, unint64_t *))(v324 + 32);
  v337 = (char **)(v335 + 56);
  unint64_t v328 = (unint64_t)(v335 + 48);
  v336 = (char **)(v324 + 8);
  unint64_t v284 = v5 - 1;
  uint64_t v67 = swift_bridgeObjectRetain();
  uint64_t v325 = 0;
  uint64_t v299 = 0;
  uint64_t v68 = 0;
  int64_t v308 = v5;
  unint64_t v285 = v5 - 5;
  v311.i64[0] = v67;
  uint64_t v287 = v67 + 104;
  *(void *)&long long v69 = 136446210;
  long long v306 = v69;
  uint64_t v305 = MEMORY[0x263F8EE58] + 8;
  v338 = v9;
  uint64_t v9 = (char *)&demangling cache variable for type metadata for (key: UUID, value: FreeformMeshManager.MeshAnchor);
  v326 = v14;
  v334 = v17;
  unint64_t v323 = (unint64_t)v66;
  v288 = v35;
  v290 = v44;
  uint64_t v32 = v318;
  v316 = v13;
  uint64_t v294 = v29;
  if (v22)
  {
LABEL_7:
    v331 = (void (**)(unint64_t, uint64_t, uint64_t, char *))((v22 - 1) & v22);
    v332 = v68;
    unint64_t v70 = __clz(__rbit64(v22)) | ((void)v68 << 6);
LABEL_8:
    uint64_t v71 = v311.i64[0];
    (*(void (**)(char *, unint64_t, unint64_t *))(v324 + 16))(v32, *(void *)(v311.i64[0] + 48) + *(void *)(v324 + 72) * v70, v14);
    uint64_t v72 = *(void *)(v71 + 56) + *((void *)v335 + 9) * v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: FreeformMeshManager.MeshAnchor));
    outlined init with copy of FreeformMeshManager.MeshAnchor(v72, (uint64_t)&v32[*(int *)(v73 + 48)]);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v32, 0, 1, v73);
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v74 = (int64_t)v68 + 1;
    if (__OFADD__(v68, 1)) {
      goto LABEL_150;
    }
    if (v74 >= v308)
    {
      uint64_t v76 = v68;
    }
    else
    {
      unint64_t v75 = *(void *)(v303 + 8 * v74);
      if (v75) {
        goto LABEL_12;
      }
      uint64_t v76 = (_OWORD *)((char *)v68 + 1);
      if ((uint64_t)v68 + 2 < v308)
      {
        unint64_t v75 = *(void *)(v303 + 8 * ((void)v68 + 2));
        if (v75)
        {
          int64_t v74 = (int64_t)v68 + 2;
LABEL_12:
          v331 = (void (**)(unint64_t, uint64_t, uint64_t, char *))((v75 - 1) & v75);
          v332 = (_OWORD *)v74;
          unint64_t v70 = __clz(__rbit64(v75)) + (v74 << 6);
          goto LABEL_8;
        }
        uint64_t v76 = (_OWORD *)((char *)v68 + 2);
        if ((uint64_t)v68 + 3 < v308)
        {
          unint64_t v75 = *(void *)(v303 + 8 * ((void)v68 + 3));
          if (v75)
          {
            int64_t v74 = (int64_t)v68 + 3;
            goto LABEL_12;
          }
          int64_t v74 = (int64_t)v68 + 4;
          uint64_t v76 = (_OWORD *)((char *)v68 + 3);
          if ((uint64_t)v68 + 4 < v308)
          {
            unint64_t v75 = *(void *)(v303 + 8 * v74);
            if (v75) {
              goto LABEL_12;
            }
            while ((_OWORD *)v285 != v68)
            {
              unint64_t v75 = *(void *)(v287 + 8 * (void)v68);
              uint64_t v68 = (_OWORD *)((char *)v68 + 1);
              if (v75)
              {
                int64_t v74 = (int64_t)v68 + 4;
                goto LABEL_12;
              }
            }
            uint64_t v76 = (_OWORD *)v284;
          }
        }
      }
    }
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: FreeformMeshManager.MeshAnchor));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v32, 1, 1, v77);
    v331 = 0;
    v332 = v76;
LABEL_15:
    uint64_t v78 = v317;
    outlined init with take of (key: UUID, value: FreeformMeshManager.MeshAnchor)?((uint64_t)v32, v317);
    uint64_t v44 = (char *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: FreeformMeshManager.MeshAnchor));
    unint64_t v5 = *((void *)v44 - 1);
    uint64_t v9 = (char *)(v5 + 48);
    uint64_t v35 = *(char **)(v5 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, char *))v35)(v78, 1, v44) == 1) {
      break;
    }
    uint64_t v79 = v78 + *((int *)v44 + 12);
    (*v321)(v339, v78, v14);
    outlined init with take of FreeformMeshManager.MeshAnchor(v79, (uint64_t)v13);
    uint64_t v80 = type metadata accessor for ObjectCaptureSession.Mesh.Anchor();
    v329.i64[0] = (uint64_t)&v279;
    unint64_t v340 = *(void *)(v80 - 8);
    uint64_t v29 = *(void *)(v340 + 64);
    MEMORY[0x270FA5388](v80);
    unint64_t v81 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v82 = (char *)&v279 - v81;
    uint64_t v83 = (uint64_t)&v13[*((int *)v338 + 6)];
    uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    uint64_t v17 = *(uint64_t **)(*(void *)(v84 - 8) + 64);
    MEMORY[0x270FA5388](v84 - 8);
    unint64_t v85 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF0;
    outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v83, (uint64_t)&v279 - v85, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    uint64_t v87 = (char *)(v340 + 48);
    uint64_t v86 = *(uint64_t (**)(void, void, void))(v340 + 48);
    v333 = (char *)v80;
    uint64_t v88 = v80;
    uint64_t v89 = v86;
    int v90 = v86((char *)&v279 - v85, 1, v88);
    v330.i64[0] = (uint64_t)v89;
    if (v90 != 1)
    {
      v124 = (char *)&v279 - v81;
      v125 = v333;
      (*(void (**)(char *, char *, char *))(v340 + 32))(v124, (char *)&v279 - v85, v333);
      uint64_t v126 = ObjectCaptureSession.Mesh.Anchor.didRemove.getter();
      v327 = v82;
      if (v126)
      {
        v127 = v82;
        v128 = *(void (**)(char *, uint64_t, unint64_t *))v323;
        v129 = v289;
        v130 = v326;
        (*(void (**)(char *, uint64_t, unint64_t *))v323)(v289, v339, v326);
        v298 = (void (*)(void **, void))FreeformMeshManager.meshAnchors.modify();
        v131 = specialized Dictionary.subscript.modify(&v341);
        uint64_t v133 = v132;
        uint64_t v44 = v338;
        v320 = *(unsigned int (**)(uint64_t, uint64_t, char *))v328;
        if (!v320(v132, 1, v338)) {
          *(unsigned char *)(v133 + *((int *)v44 + 7)) = 0;
        }
        ((void (*)(unint64_t *, void))v131)(&v341, 0);
        v312 = *v336;
        ((void (*)(char *, unint64_t *))v312)(v129, v130);
        v298(&v343, 0);
        v134 = v290;
        v128(v290, v339, v130);
        v298 = (void (*)(void **, void))FreeformMeshManager.meshAnchors.modify();
        v135 = specialized Dictionary.subscript.modify(&v341);
        uint64_t v137 = v136;
        if (!v320(v136, 1, v44))
        {
          uint64_t v138 = v137 + *((int *)v44 + 5);
          outlined destroy of URL?(v138, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
          uint64_t v297 = (uint64_t)v128;
          unint64_t v139 = v340;
          v140 = v127;
          v141 = v333;
          (*(void (**)(uint64_t, char *, char *))(v340 + 16))(v138, v140, v333);
          unint64_t v142 = v139;
          v128 = (void (*)(char *, uint64_t, unint64_t *))v297;
          (*(void (**)(uint64_t, void, uint64_t, char *))(v142 + 56))(v138, 0, 1, v141);
        }
        ((void (*)(unint64_t *, void))v135)(&v341, 0);
        ((void (*)(char *, unint64_t *))v312)(v134, v130);
        v298(&v343, 0);
        v143 = v291;
        v128(v291, v339, v130);
        v144 = FreeformMeshManager.meshAnchors.modify();
        v145 = specialized Dictionary.subscript.modify(&v341);
        uint64_t v147 = v146;
        if (!v320(v146, 1, v44))
        {
          outlined destroy of URL?(v147, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
          (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v340 + 56))(v147, 1, 1, v333);
        }
        ((void (*)(unint64_t *, void))v145)(&v341, 0);
        ((void (*)(char *, unint64_t *))v312)(v143, v130);
        ((void (*)(void **, void))v144)(&v343, 0);
        uint64_t v35 = v292;
        v128(v292, v339, v130);
        v148 = FreeformMeshManager.meshAnchors.modify();
        v149 = specialized Dictionary.subscript.modify(&v341);
        uint64_t v151 = v150;
        if (v320(v150, 1, v44))
        {
          ((void (*)(unint64_t *, void))v149)(&v341, 0);
          ((void (*)(char *, unint64_t *))v312)(v35, v130);
          ((void (*)(void **, void))v148)(&v343, 0);
          v152 = v333;
          unint64_t v153 = v340;
        }
        else
        {
          uint64_t v205 = v151 + *((int *)v44 + 6);
          outlined destroy of URL?(v205, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
          unint64_t v153 = v340;
          uint64_t v206 = v205;
          v152 = v333;
          (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v340 + 56))(v206, 1, 1, v333);
          ((void (*)(unint64_t *, void))v149)(&v341, 0);
          ((void (*)(char *, unint64_t *))v312)(v35, v130);
          ((void (*)(void **, void))v148)(&v343, 0);
        }
        uint64_t v166 = (*(uint64_t (**)(char *, char *))(v153 + 8))(v327, v152);
LABEL_78:
        long long v14 = v326;
        goto LABEL_79;
      }
      MEMORY[0x270FA5388](v126);
      unint64_t v167 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v168 = (uint64_t)v316;
      outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v316, (uint64_t)&v279 - v167, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
      int v169 = ((uint64_t (*)(char *, uint64_t, char *))v330.i64[0])((char *)&v279 - v167, 1, v125);
      outlined destroy of URL?((uint64_t)&v279 - v167, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
      uint64_t v170 = v296;
      outlined init with copy of FreeformMeshManager.MeshAnchor(v168, v296);
      uint64_t v44 = v338;
      if (v169 == 1)
      {
        uint64_t v171 = MEMORY[0x270FA5388](v170 + *((int *)v338 + 5));
        outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v171, (uint64_t)&v279 - v167, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
        outlined destroy of FreeformMeshManager.MeshAnchor(v170);
        int v172 = ((uint64_t (*)(char *, uint64_t, char *))v330.i64[0])((char *)&v279 - v167, 1, v125);
        outlined destroy of URL?((uint64_t)&v279 - v167, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
        unint64_t v173 = v323;
        v174 = *(void (**)(char *, uint64_t, unint64_t *))v323;
        if (v172 == 1)
        {
          v298 = (void (*)(void **, void))(v323 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000);
          v175 = v286;
          v176 = v326;
          v174(v286, v339, v326);
          v283 = FreeformMeshManager.meshAnchors.modify();
          v177 = specialized Dictionary.subscript.modify(&v341);
          uint64_t v179 = v178;
          v180 = *(unsigned int (**)(uint64_t, uint64_t, char *))v328;
          uint64_t v297 = v328 & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
          v320 = v180;
          unsigned int v181 = v180(v178, 1, v44);
          v182 = v327;
          if (!v181) {
            *(unsigned char *)(v179 + *((int *)v44 + 7)) = 1;
          }
LABEL_67:
          ((void (*)(unint64_t *, void))v177)(&v341, 0);
          v312 = *v336;
          ((void (*)(char *, unint64_t *))v312)(v175, v176);
          ((void (*)(void **, void))v283)(&v343, 0);
          v186 = v293;
          v174(v293, v339, v176);
          v283 = FreeformMeshManager.meshAnchors.modify();
          v187 = specialized Dictionary.subscript.modify(&v341);
          uint64_t v189 = v188;
          if (!v320(v188, 1, v44)) {
            outlined assign with copy of ObjectCaptureSession.Mesh.Anchor?((uint64_t)v316, v189 + *((int *)v44 + 5));
          }
          ((void (*)(unint64_t *, void))v187)(&v341, 0);
          ((void (*)(char *, unint64_t *))v312)(v186, v176);
          ((void (*)(void **, void))v283)(&v343, 0);
          uint64_t v190 = v294;
          v174((char *)v294, v339, v176);
          v283 = FreeformMeshManager.meshAnchors.modify();
          v191 = specialized Dictionary.subscript.modify(&v341);
          uint64_t v193 = v192;
          if (!v320(v192, 1, v44))
          {
            outlined destroy of URL?(v193, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
            v194 = v174;
            unint64_t v195 = v340;
            v196 = v182;
            v197 = v333;
            (*(void (**)(uint64_t, char *, char *))(v340 + 16))(v193, v196, v333);
            unint64_t v198 = v195;
            v174 = v194;
            v176 = v326;
            (*(void (**)(uint64_t, void, uint64_t, char *))(v198 + 56))(v193, 0, 1, v197);
          }
          ((void (*)(unint64_t *, void))v191)(&v341, 0);
          ((void (*)(uint64_t, unint64_t *))v312)(v190, v176);
          ((void (*)(void **, void))v283)(&v343, 0);
          uint64_t v35 = v295;
          v174(v295, v339, v176);
          v199 = FreeformMeshManager.meshAnchors.modify();
          v200 = specialized Dictionary.subscript.modify(&v341);
          uint64_t v202 = v201;
          if (v320(v201, 1, v44))
          {
            ((void (*)(unint64_t *, void))v200)(&v341, 0);
            ((void (*)(char *, unint64_t *))v312)(v35, v176);
            ((void (*)(void **, void))v199)(&v343, 0);
            v203 = v333;
            unint64_t v204 = v340;
          }
          else
          {
            uint64_t v207 = v202 + *((int *)v44 + 6);
            outlined destroy of URL?(v207, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
            unint64_t v204 = v340;
            uint64_t v208 = v207;
            v203 = v333;
            (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v340 + 56))(v208, 1, 1, v333);
            ((void (*)(unint64_t *, void))v200)(&v341, 0);
            ((void (*)(char *, unint64_t *))v312)(v35, v176);
            ((void (*)(void **, void))v199)(&v343, 0);
          }
          uint64_t v166 = (*(uint64_t (**)(char *, char *))(v204 + 8))(v327, v203);
          if (__OFADD__(v299, 1))
          {
            __break(1u);
            return;
          }
          ++v299;
          goto LABEL_78;
        }
      }
      else
      {
        outlined destroy of FreeformMeshManager.MeshAnchor(v170);
        unint64_t v173 = v323;
        v174 = *(void (**)(char *, uint64_t, unint64_t *))v323;
      }
      v182 = v327;
      v298 = (void (*)(void **, void))(v173 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000);
      v175 = v288;
      v176 = v326;
      v174(v288, v339, v326);
      v283 = FreeformMeshManager.meshAnchors.modify();
      v177 = specialized Dictionary.subscript.modify(&v341);
      uint64_t v184 = v183;
      v185 = *(unsigned int (**)(uint64_t, uint64_t, char *))v328;
      uint64_t v297 = v328 & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
      v320 = v185;
      if (!v185(v183, 1, v44)) {
        *(unsigned char *)(v184 + *((int *)v44 + 7)) = 0;
      }
      goto LABEL_67;
    }
    v327 = v87;
    uint64_t v91 = outlined destroy of URL?((uint64_t)&v279 - v85, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    uint64_t v92 = MEMORY[0x270FA5388](v91);
    uint64_t v13 = (char *)&v279 - v81;
    MEMORY[0x270FA5388](v92);
    uint64_t v93 = (char *)&v279 - v85;
    long long v14 = v322;
    unint64_t v94 = *v322;
    uint64_t v95 = *(void *)(*v322 + 16);
    v329.i64[0] = v96;
    if (v95)
    {
      swift_bridgeObjectRetain();
      unint64_t v97 = specialized __RawDictionaryStorage.find<A>(_:)(v339);
      uint64_t v44 = v338;
      if (v98)
      {
        uint64_t v99 = v335;
        uint64_t v100 = v315;
        outlined init with copy of FreeformMeshManager.MeshAnchor(*(void *)(v94 + 56) + *((void *)v335 + 9) * v97, v315);
        uint64_t v35 = (char *)*((void *)v99 + 7);
        ((void (*)(uint64_t, void, uint64_t, char *))v35)(v100, 0, 1, v44);
      }
      else
      {
        uint64_t v35 = *v337;
        uint64_t v100 = v315;
        ((void (*)(uint64_t, uint64_t, uint64_t, char *))*v337)(v315, 1, 1, v338);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v44 = v338;
      uint64_t v35 = *v337;
      uint64_t v100 = v315;
      ((void (*)(uint64_t, uint64_t, uint64_t, char *))*v337)(v315, 1, 1, v338);
    }
    v320 = *(unsigned int (**)(uint64_t, uint64_t, char *))v328;
    if (v320(v100, 1, v44))
    {
      outlined destroy of URL?(v100, &demangling cache variable for type metadata for FreeformMeshManager.MeshAnchor?);
      (*(void (**)(char *, uint64_t, uint64_t, char *))(v340 + 56))(v93, 1, 1, v333);
      goto LABEL_50;
    }
    outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v100 + *((int *)v44 + 5), (uint64_t)v93, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    outlined destroy of URL?(v100, &demangling cache variable for type metadata for FreeformMeshManager.MeshAnchor?);
    uint64_t v9 = v333;
    if (((uint64_t (*)(char *, uint64_t, char *))v330.i64[0])(v93, 1, v333) == 1)
    {
LABEL_50:
      outlined destroy of URL?((uint64_t)v93, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
LABEL_52:
      v154 = *(void (**)(char *, uint64_t, unint64_t *))v323;
      uint64_t v35 = v300;
      long long v14 = v326;
      (*(void (**)(char *, uint64_t, unint64_t *))v323)(v300, v339, v326);
      v155 = FreeformMeshManager.meshAnchors.modify();
      v156 = specialized Dictionary.subscript.modify(&v341);
      uint64_t v158 = v157;
      if (!v320(v157, 1, v44))
      {
        uint64_t v159 = v158 + *((int *)v44 + 5);
        outlined destroy of URL?(v159, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v340 + 56))(v159, 1, 1, v333);
      }
      ((void (*)(unint64_t *, void))v156)(&v341, 0);
      v312 = *v336;
      ((void (*)(char *, unint64_t *))v312)(v35, v14);
      ((void (*)(void **, void))v155)(&v343, 0);
      v160 = v301;
      v154(v301, v339, v14);
      v161 = v160;
      v162 = FreeformMeshManager.meshAnchors.modify();
      v163 = specialized Dictionary.subscript.modify(&v341);
      uint64_t v165 = v164;
      if (!v320(v164, 1, v44)) {
        *(unsigned char *)(v165 + *((int *)v44 + 7)) = 0;
      }
      ((void (*)(unint64_t *, void))v163)(&v341, 0);
      ((void (*)(char *, unint64_t *))v312)(v161, v14);
      uint64_t v166 = ((uint64_t (*)(void **, void))v162)(&v343, 0);
LABEL_79:
      unint64_t v5 = (unint64_t)&v279;
      uint64_t v209 = MEMORY[0x270FA5388](v166);
      uint64_t v29 = (uint64_t)&v279 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      MEMORY[0x270FA5388](v209);
      v210 = (char *)&v279 - (((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v211 = *v322;
      if (*(void *)(*v322 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v212 = specialized __RawDictionaryStorage.find<A>(_:)(v339);
        if (v213)
        {
          uint64_t v35 = v335;
          uint64_t v214 = v302;
          outlined init with copy of FreeformMeshManager.MeshAnchor(*(void *)(v211 + 56) + *((void *)v335 + 9) * v212, v302);
          (*((void (**)(uint64_t, void, uint64_t, char *))v35 + 7))(v214, 0, 1, v44);
        }
        else
        {
          uint64_t v214 = v302;
          ((void (*)(unint64_t, uint64_t, uint64_t, char *))*v337)(v302, 1, 1, v44);
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v214 = v302;
        ((void (*)(unint64_t, uint64_t, uint64_t, char *))*v337)(v302, 1, 1, v44);
      }
      if (v320(v214, 1, v44))
      {
        outlined destroy of URL?(v214, &demangling cache variable for type metadata for FreeformMeshManager.MeshAnchor?);
        (*(void (**)(char *, uint64_t, uint64_t, char *))(v340 + 56))(v210, 1, 1, v333);
        uint64_t v17 = v334;
      }
      else
      {
        outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v214, (uint64_t)v210, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
        outlined destroy of URL?(v214, &demangling cache variable for type metadata for FreeformMeshManager.MeshAnchor?);
        uint64_t v35 = v333;
        int v215 = ((uint64_t (*)(char *, uint64_t, char *))v330.i64[0])(v210, 1, v333);
        uint64_t v17 = v334;
        uint64_t v44 = (char *)v340;
        if (v215 != 1)
        {
          (*(void (**)(uint64_t, char *, char *))(v340 + 32))(v29, v210, v35);
          specialized FreeformMeshManager.computeBoundingBoxWorld(for:)();
          v216.i32[3] = 0;
          v217.i32[3] = 0;
          uint64_t v13 = v316;
          if (v304[4].i8[0])
          {
            float32x4_t v218 = vminnmq_f32(v216, v217);
            v218.i32[3] = v281.i32[3];
            float32x4_t v329 = v218;
            float32x4_t v219 = vmaxnmq_f32(v216, v217);
            v219.i32[3] = v282;
            float32x4_t v330 = v219;
            v220 = v304;
            BoundingBox.init(min:max:)();
            float32x4_t v281 = v329;
            float32x4_t v223 = v330;
            v224 = &v311;
          }
          else
          {
            float32x4_t v225 = vminnmq_f32(v216, v217);
            v225.i32[3] = 0;
            float32x4_t v226 = v304[2];
            v226.i32[3] = 0;
            float32x4_t v227 = vminnmq_f32(v225, v226);
            v227.i32[3] = v279.i32[3];
            float32x4_t v329 = v227;
            float32x4_t v228 = vmaxnmq_f32(v216, v217);
            v228.i32[3] = 0;
            float32x4_t v229 = v304[3];
            v229.i32[3] = 0;
            float32x4_t v230 = vmaxnmq_f32(v228, v229);
            v230.i32[3] = v280;
            float32x4_t v330 = v230;
            v220 = v304;
            BoundingBox.init(min:max:)();
            float32x4_t v279 = v329;
            float32x4_t v223 = v330;
            v224 = (float32x4_t *)&v307;
          }
          v224[-16] = v223;
          uint64_t v32 = v318;
          uint64_t v9 = (char *)&demangling cache variable for type metadata for (key: UUID, value: FreeformMeshManager.MeshAnchor);
          v220[2] = v221;
          v220[3] = v222;
          v220[4].i8[0] = 0;
          v231 = (void (*)(uint64_t, char *))*((void *)v44 + 1);
          v44 += 8;
          v231(v29, v333);
          outlined destroy of FreeformMeshManager.MeshAnchor((uint64_t)v13);
          ((void (*)(uint64_t, unint64_t *))v312)(v339, v14);
          goto LABEL_89;
        }
      }
      uint64_t v13 = v316;
      outlined destroy of FreeformMeshManager.MeshAnchor((uint64_t)v316);
      ((void (*)(uint64_t, unint64_t *))v312)(v339, v14);
      outlined destroy of URL?((uint64_t)v210, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
      uint64_t v32 = v318;
      uint64_t v9 = (char *)&demangling cache variable for type metadata for (key: UUID, value: FreeformMeshManager.MeshAnchor);
LABEL_89:
      unint64_t v22 = (unint64_t)v331;
      uint64_t v68 = v332;
      if (v331) {
        goto LABEL_7;
      }
    }
    else
    {
      (*(void (**)(char *, char *, char *))(v340 + 32))(v13, v93, v9);
      if ((ObjectCaptureSession.Mesh.Anchor.didRemove.getter() & 1) == 0)
      {
        (*(void (**)(char *, char *))(v340 + 8))(v13, v9);
        goto LABEL_52;
      }
      swift_beginAccess();
      unint64_t v22 = *v14;
      swift_bridgeObjectRetain();
      unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v339);
      char v102 = v101;
      swift_bridgeObjectRelease();
      if (v102)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v104 = *v14;
        unint64_t v341 = *v14;
        *long long v14 = 0x8000000000000000;
        uint64_t v32 = (char *)v313.i64[0];
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          unint64_t v104 = v341;
        }
        (*(void (**)(unint64_t, unint64_t *))(v324 + 8))(*(void *)(v104 + 48) + *(void *)(v324 + 72) * v5, v326);
        unint64_t v22 = v341;
        outlined init with take of FreeformMeshManager.MeshAnchor(*(void *)(v341 + 56) + *((void *)v335 + 9) * v5, (uint64_t)v32);
        specialized _NativeDictionary._delete(at:)(v5, v22);
        *long long v14 = v22;
        swift_bridgeObjectRelease();
        uint64_t v105 = 0;
      }
      else
      {
        uint64_t v105 = 1;
        uint64_t v32 = (char *)v313.i64[0];
      }
      ((void (*)(char *, uint64_t, uint64_t, char *))v35)(v32, v105, 1, v44);
      outlined destroy of URL?((uint64_t)v32, &demangling cache variable for type metadata for FreeformMeshManager.MeshAnchor?);
      uint64_t v106 = swift_endAccess();
      if (__OFADD__(v325++, 1))
      {
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
        goto LABEL_152;
      }
      MEMORY[0x270FA5388](v106);
      long long v108 = (char *)&v279 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v109 = v340;
      uint64_t v44 = v13;
      (*(void (**)(char *, char *, char *))(v340 + 16))(v108, v13, v9);
      unsigned __int8 v110 = Logger.logObject.getter();
      os_log_type_t v111 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v110, v111))
      {
        unsigned __int8 v112 = (char *)swift_slowAlloc();
        v312 = v112;
        v320 = (unsigned int (*)(uint64_t, uint64_t, char *))swift_slowAlloc();
        v343 = v320;
        *(_DWORD *)unsigned __int8 v112 = v306;
        v330.i64[0] = (uint64_t)&v279;
        v327 = v44;
        long long v113 = v307;
        ObjectCaptureSession.Mesh.Anchor.identifier.getter();
        lazy protocol witness table accessor for type UUID and conformance UUID();
        unint64_t v114 = (unint64_t)v326;
        uint64_t v115 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v117 = v116;
        uint64_t v29 = (uint64_t)v336;
        uint64_t v44 = *v336;
        v118 = v113;
        unint64_t v5 = v114;
        ((void (*)(char *, unint64_t))*v336)(v118, v114);
        uint64_t v119 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v117, (uint64_t *)&v343);
        v120 = (uint8_t *)v312;
        *(void *)(v312 + 4) = v119;
        swift_bridgeObjectRelease();
        uint64_t v35 = (char *)(v340 + 8);
        v121 = *(void (**)(char *, char *))(v340 + 8);
        v121(v108, v9);
        _os_log_impl(&dword_2465C2000, v110, v111, "Removed mesh anchor %{public}s", v120, 0xCu);
        v122 = v320;
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v122, -1, -1);
        MEMORY[0x24C5348D0](v120, -1, -1);

        long long v14 = (unint64_t *)v5;
        v121(v327, v9);
        uint64_t v13 = v316;
        outlined destroy of FreeformMeshManager.MeshAnchor((uint64_t)v316);
        ((void (*)(uint64_t, unint64_t))v44)(v339, v5);
      }
      else
      {

        v123 = *(void (**)(char *, char *))(v109 + 8);
        uint64_t v35 = (char *)(v109 + 8);
        unint64_t v5 = (unint64_t)v123;
        v123((char *)&v279 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
        v123(v44, v9);
        uint64_t v13 = v316;
        outlined destroy of FreeformMeshManager.MeshAnchor((uint64_t)v316);
        long long v14 = v326;
        ((void (*)(uint64_t, unint64_t *))*v336)(v339, v326);
      }
      uint64_t v17 = v334;
      uint64_t v32 = v318;
      uint64_t v9 = (char *)&demangling cache variable for type metadata for (key: UUID, value: FreeformMeshManager.MeshAnchor);
      unint64_t v22 = (unint64_t)v331;
      uint64_t v68 = v332;
      if (v331) {
        goto LABEL_7;
      }
    }
  }
  swift_release();
  if (v325 < 1) {
    goto LABEL_146;
  }
  unint64_t v232 = *v322;
  uint64_t v233 = *(void *)(*v322 + 64);
  v320 = (unsigned int (*)(uint64_t, uint64_t, char *))(*v322 + 64);
  uint64_t v234 = 1 << *(unsigned char *)(v232 + 32);
  uint64_t v235 = -1;
  if (v234 < 64) {
    uint64_t v235 = ~(-1 << v234);
  }
  unint64_t v340 = v235 & v233;
  unint64_t v236 = (unint64_t)(v234 + 63) >> 6;
  v331 = (void (**)(unint64_t, uint64_t, uint64_t, char *))(v5 + 56);
  v316 = (char *)(v236 - 1);
  uint64_t v237 = swift_bridgeObjectRetain();
  uint64_t v29 = 0;
  v327 = (char *)v236;
  uint64_t v317 = v236 - 5;
  v329.i64[0] = v237;
  v318 = (char *)(v237 + 104);
  uint64_t v13 = (char *)v17;
  uint64_t v17 = &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?;
  while (2)
  {
    unint64_t v22 = (unint64_t)v319;
LABEL_108:
    if (v340)
    {
      unint64_t v239 = __clz(__rbit64(v340));
      v340 &= v340 - 1;
      unint64_t v240 = v239 | (v29 << 6);
      goto LABEL_110;
    }
    uint64_t v257 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      goto LABEL_151;
    }
    if (v257 >= (uint64_t)v327)
    {
      unint64_t v340 = 0;
      uint64_t v242 = 1;
    }
    else
    {
      unint64_t v258 = *((void *)v320 + v257);
      if (v258)
      {
LABEL_118:
        unint64_t v340 = (v258 - 1) & v258;
        unint64_t v240 = __clz(__rbit64(v258)) + (v257 << 6);
        uint64_t v29 = v257;
LABEL_110:
        uint64_t v241 = v329.i64[0];
        unint64_t v22 = (unint64_t)v319;
        (*(void (**)(char *, unint64_t, unint64_t *))(v324 + 16))(v319, *(void *)(v329.i64[0] + 48) + *(void *)(v324 + 72) * v240, v14);
        outlined init with copy of FreeformMeshManager.MeshAnchor(*(void *)(v241 + 56) + *((void *)v335 + 9) * v240, v22 + *((int *)v44 + 12));
        uint64_t v242 = 0;
      }
      else if (v29 + 2 >= (uint64_t)v327)
      {
        unint64_t v340 = 0;
        uint64_t v242 = 1;
        ++v29;
      }
      else
      {
        unint64_t v258 = *((void *)v320 + v29 + 2);
        if (v258)
        {
          uint64_t v257 = v29 + 2;
          goto LABEL_118;
        }
        if (v29 + 3 >= (uint64_t)v327)
        {
          unint64_t v340 = 0;
          uint64_t v242 = 1;
          v29 += 2;
        }
        else
        {
          unint64_t v258 = *((void *)v320 + v29 + 3);
          if (v258)
          {
            uint64_t v257 = v29 + 3;
            goto LABEL_118;
          }
          uint64_t v257 = v29 + 4;
          if (v29 + 4 >= (uint64_t)v327)
          {
            unint64_t v340 = 0;
            uint64_t v242 = 1;
            v29 += 3;
          }
          else
          {
            unint64_t v258 = *((void *)v320 + v257);
            if (v258) {
              goto LABEL_118;
            }
            while (v317 != v29)
            {
              unint64_t v258 = *(void *)&v318[8 * v29++];
              if (v258)
              {
                uint64_t v257 = v29 + 4;
                goto LABEL_118;
              }
            }
            unint64_t v340 = 0;
            uint64_t v242 = 1;
            uint64_t v29 = (uint64_t)v316;
          }
        }
      }
    }
    (*v331)(v22, v242, 1, v44);
    uint64_t v243 = v22;
    uint64_t v244 = v310;
    outlined init with take of (key: UUID, value: FreeformMeshManager.MeshAnchor)?(v243, v310);
    if (((unsigned int (*)(uint64_t, uint64_t, char *))v35)(v244, 1, v44) != 1)
    {
      v333 = (char *)v29;
      outlined destroy of FreeformMeshManager.MeshAnchor(v244 + *((int *)v44 + 12));
      uint64_t v245 = type metadata accessor for ObjectCaptureSession.Mesh.Anchor();
      v332 = &v279;
      uint64_t v339 = v245;
      unint64_t v5 = *(void *)(v245 - 8);
      MEMORY[0x270FA5388](v245);
      v330.i64[0] = (uint64_t)&v279 - ((v246 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v247 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
      uint64_t v32 = (char *)&v279;
      MEMORY[0x270FA5388](v247 - 8);
      v249 = (char *)&v279 - ((v248 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*v321)((uint64_t)v13, v244, v14);
      unint64_t v250 = *v322;
      if (*(void *)(*v322 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v251 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
        if (v252)
        {
          v253 = v335;
          uint64_t v254 = v309;
          outlined init with copy of FreeformMeshManager.MeshAnchor(*(void *)(v250 + 56) + *((void *)v335 + 9) * v251, v309);
          v255 = (void (*)(uint64_t, void, uint64_t, char *))*((void *)v253 + 7);
          v256 = v338;
          v255(v254, 0, 1, v338);
        }
        else
        {
          v256 = v338;
          uint64_t v254 = v309;
          ((void (*)(uint64_t, uint64_t, uint64_t, char *))*v337)(v309, 1, 1, v338);
        }
        uint64_t v259 = v254;
        swift_bridgeObjectRelease();
        long long v14 = v326;
      }
      else
      {
        v256 = v338;
        uint64_t v259 = v309;
        ((void (*)(uint64_t, uint64_t, uint64_t, char *))*v337)(v309, 1, 1, v338);
      }
      ((void (*)(uint64_t *, unint64_t *))*v336)(v334, v14);
      if ((*(unsigned int (**)(uint64_t, uint64_t, char *))v328)(v259, 1, v256))
      {
        outlined destroy of URL?(v259, &demangling cache variable for type metadata for FreeformMeshManager.MeshAnchor?);
        v238 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
        v5 += 56;
        v238(v249, 1, 1, v339);
        uint64_t v17 = &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?;
      }
      else
      {
        uint64_t v17 = &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?;
        outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v259, (uint64_t)v249, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
        outlined destroy of URL?(v259, &demangling cache variable for type metadata for FreeformMeshManager.MeshAnchor?);
        uint64_t v260 = v339;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v249, 1, v339) != 1)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v330.i64[0], v249, v260);
          specialized FreeformMeshManager.computeBoundingBoxWorld(for:)();
          v263 = v304;
          uint64_t v13 = (char *)v334;
          v262.i32[3] = 0;
          v261.i32[3] = 0;
          if (v304[4].i8[0])
          {
            float32x4_t v264 = vminnmq_f32(v262, v261);
            v264.i32[3] = v313.i32[3];
            float32x4_t v313 = v264;
            float32x4_t v265 = vmaxnmq_f32(v262, v261);
            v266 = (char ***)&v342;
          }
          else
          {
            float32x4_t v267 = vminnmq_f32(v262, v261);
            v267.i32[3] = 0;
            float32x4_t v268 = v304[2];
            v268.i32[3] = 0;
            float32x4_t v269 = vminnmq_f32(v267, v268);
            v269.i32[3] = v311.i32[3];
            float32x4_t v311 = v269;
            float32x4_t v270 = vmaxnmq_f32(v262, v261);
            v270.i32[3] = 0;
            float32x4_t v271 = v304[3];
            v271.i32[3] = 0;
            float32x4_t v265 = vmaxnmq_f32(v270, v271);
            v266 = &v337;
          }
          v265.i32[3] = HIDWORD(*((_OWORD *)v266 - 16));
          *((float32x4_t *)v266 - 16) = v265;
          v272 = v263;
          BoundingBox.init(min:max:)();
          uint64_t v32 = (char *)v332;
          uint64_t v29 = (uint64_t)v333;
          v272[2] = v273;
          v272[3] = v274;
          v272[4].i8[0] = 0;
          v275 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
          v5 += 8;
          v275(v330.i64[0], v339);
          continue;
        }
      }
      outlined destroy of URL?((uint64_t)v249, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
      uint64_t v29 = (uint64_t)v333;
      uint64_t v13 = (char *)v334;
      unint64_t v22 = (unint64_t)v319;
      goto LABEL_108;
    }
    break;
  }
  swift_release();
LABEL_146:
  v276 = Logger.logObject.getter();
  os_log_type_t v277 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v276, v277))
  {
    uint64_t v278 = swift_slowAlloc();
    *(_DWORD *)uint64_t v278 = 134349312;
    v343 = (void *)v299;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v278 + 12) = 2050;
    v343 = (void *)v325;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v276, v277, "... done updating %{public}ld and removing %{public}ld mesh anchors.", (uint8_t *)v278, 0x16u);
    MEMORY[0x24C5348D0](v278, -1, -1);
  }
}

uint64_t FreeformMeshManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FreeformMeshManager()
{
  return self;
}

uint64_t *initializeBufferWithCopyOfBuffer for FreeformMeshManager.MeshAnchor(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ObjectCaptureSession.Mesh.Anchor();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v12 = a3[5];
    uint64_t v13 = (char *)a1 + v12;
    long long v14 = (char *)a2 + v12;
    if (v9((uint64_t *)((char *)a2 + v12), 1, v7))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    if (v9((uint64_t *)((char *)a2 + v16), 1, v7))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v17, v18, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
    }
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for FreeformMeshManager.MeshAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ObjectCaptureSession.Mesh.Anchor();
  uint64_t v10 = *(void *)(v4 - 8);
  int v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v5(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  if (!v5(v6, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v6, v4);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v7, 1, v4);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v9(v7, v4);
  }
  return result;
}

char *initializeWithCopy for FreeformMeshManager.MeshAnchor(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ObjectCaptureSession.Mesh.Anchor();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = a3[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  if (v8(&a2[v14], 1, v6))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v15, v16, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *assignWithCopy for FreeformMeshManager.MeshAnchor(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ObjectCaptureSession.Mesh.Anchor();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = v8(&a1[v18], 1, v6);
  int v22 = v8(v20, 1, v6);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v19, v20, v6);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
    goto LABEL_18;
  }
  if (v22)
  {
LABEL_18:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v19, v20, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
LABEL_19:
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *initializeWithTake for FreeformMeshManager.MeshAnchor(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ObjectCaptureSession.Mesh.Anchor();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = a3[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  uint64_t v14 = a3[6];
  int v15 = &a1[v14];
  int v16 = &a2[v14];
  if (v8(&a2[v14], 1, v6))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v16, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *assignWithTake for FreeformMeshManager.MeshAnchor(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ObjectCaptureSession.Mesh.Anchor();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = v8(&a1[v18], 1, v6);
  int v22 = v8(v20, 1, v6);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v19, v20, v6);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
    goto LABEL_18;
  }
  if (v22)
  {
LABEL_18:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v19, v20, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
LABEL_19:
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for FreeformMeshManager.MeshAnchor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2465EA884);
}

uint64_t sub_2465EA884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for FreeformMeshManager.MeshAnchor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2465EA96C);
}

uint64_t sub_2465EA96C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for FreeformMeshManager.MeshAnchor()
{
  uint64_t result = type metadata singleton initialization cache for FreeformMeshManager.MeshAnchor;
  if (!type metadata singleton initialization cache for FreeformMeshManager.MeshAnchor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for FreeformMeshManager.MeshAnchor()
{
  type metadata accessor for ObjectCaptureSession.Mesh.Anchor?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for ObjectCaptureSession.Mesh.Anchor?()
{
  if (!lazy cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?)
  {
    type metadata accessor for ObjectCaptureSession.Mesh.Anchor();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    }
  }
}

uint64_t outlined init with take of FreeformMeshManager.MeshAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FreeformMeshManager.MeshAnchor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void (*specialized Dictionary._Variant.subscript.modify(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4 = malloc(0x68uLL);
  *a1 = v4;
  uint64_t v5 = type metadata accessor for UUID();
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v4[9] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v4[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v5);
  v4[11] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[12] = specialized _NativeDictionary.subscript.modify(v4 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 88);
  uint64_t v4 = *(void *)(*(void *)a1 + 72);
  uint64_t v3 = *(void **)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 96))();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);

  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  *uint64_t v8 = a2;
  v8[1] = v3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FreeformMeshManager.MeshAnchor?);
  unsigned int v10 = malloc(*(void *)(*(void *)(v9 - 8) + 64));
  v8[2] = v10;
  uint64_t v11 = *v3;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((unsigned char *)v8 + 32) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*v4 + 56);
        uint64_t v20 = type metadata accessor for FreeformMeshManager.MeshAnchor();
        uint64_t v21 = *(void *)(v20 - 8);
        outlined init with take of FreeformMeshManager.MeshAnchor(v19 + *(void *)(v21 + 72) * v13, (uint64_t)v10);
        uint64_t v22 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v10, v22, 1, v20);
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v20 = type metadata accessor for FreeformMeshManager.MeshAnchor();
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v22 = 1;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a3 & 1);
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      unint64_t v13 = v23;
      v8[3] = v23;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  type metadata accessor for UUID();
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)(*a1)[2];
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify((uint64_t)v2, *((unsigned __int8 *)*a1 + 32), (uint64_t *)(*a1)[1], (*a1)[3], **a1);
  outlined destroy of URL?((uint64_t)v2, &demangling cache variable for type metadata for FreeformMeshManager.MeshAnchor?);
  free(v2);

  free(v1);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

unint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t a1, int a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v23 = a5;
  unint64_t v25 = a4;
  int v26 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FreeformMeshManager.MeshAnchor?);
  MEMORY[0x270FA5388](v10 - 8);
  char v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for FreeformMeshManager.MeshAnchor();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  char v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v23 - v18;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(a1, (uint64_t)v12, &demangling cache variable for type metadata for FreeformMeshManager.MeshAnchor?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    unint64_t result = outlined destroy of URL?((uint64_t)v12, &demangling cache variable for type metadata for FreeformMeshManager.MeshAnchor?);
    if (v26)
    {
      int64_t v21 = v25;
      swift_arrayDestroy();
      return specialized _NativeDictionary._delete(at:)(v21, *a3);
    }
  }
  else
  {
    outlined init with take of FreeformMeshManager.MeshAnchor((uint64_t)v12, (uint64_t)v19);
    uint64_t v22 = (void *)*a3;
    if (v26)
    {
      return outlined init with take of FreeformMeshManager.MeshAnchor((uint64_t)v19, v22[7] + *(void *)(v14 + 72) * v25);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v9, v23, v7);
      outlined init with take of FreeformMeshManager.MeshAnchor((uint64_t)v19, (uint64_t)v17);
      return specialized _NativeDictionary._insert(at:key:value:)(v25, (uint64_t)v9, (uint64_t)v17, v22);
    }
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Entity>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  uint64_t v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    int8x16_t v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    uint64_t v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    uint64_t v8 = v13;
    uint64_t v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of FreeformMeshManager.MeshAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FreeformMeshManager.MeshAnchor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of (key: UUID, value: FreeformMeshManager.MeshAnchor)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: FreeformMeshManager.MeshAnchor)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of FreeformMeshManager.MeshAnchor(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FreeformMeshManager.MeshAnchor();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized FreeformMeshManager.computeBoundingBoxWorld(for:)()
{
  ObjectCaptureSession.Mesh.Anchor.transform.getter();
  ObjectCaptureSession.Mesh.Anchor.corner.getter();
  ObjectCaptureSession.Mesh.Anchor.transform.getter();
  ObjectCaptureSession.Mesh.Anchor.corner.getter();
  ObjectCaptureSession.Mesh.Anchor.extent.getter();

  return BoundingBox.init(min:max:)();
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t outlined assign with copy of ObjectCaptureSession.Mesh.Anchor?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of FreeformMeshManager.MeshAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FreeformMeshManager.MeshAnchor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

ValueMetadata *type metadata accessor for FreeformMeshManager.Configuration()
{
  return &type metadata for FreeformMeshManager.Configuration;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DynamicScanVolumeEstimator.BoxAlgorithm()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DynamicScanVolumeEstimator.BoxAlgorithm()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DynamicScanVolumeEstimator.BoxAlgorithm()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DynamicScanVolumeEstimator.BoxAlgorithm@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of DynamicScanVolumeEstimator.BoxAlgorithm.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DynamicScanVolumeEstimator.BoxAlgorithm(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x67696C4173697861;
  if (*v1) {
    uint64_t v2 = 0x4179746976617267;
  }
  unint64_t v3 = 0xEB0000000064656ELL;
  if (*v1) {
    unint64_t v3 = 0xEE0064656E67696CLL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DynamicScanVolumeEstimator.BoxAlgorithm(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t DynamicScanVolumeEstimator.init(using:)(int a1, float a2, double a3, float a4)
{
  uint64_t v5 = v4;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(unsigned char *)(v5 + 160) = 1;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(unsigned char *)(v5 + 240) = 1;
  uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  *(void *)(v5 + 248) = MEMORY[0x263F8EE78];
  *(void *)(v5 + 256) = 0;
  *(void *)(v5 + 264) = 0;
  *(void *)(v5 + 272) = 0;
  *(void *)(v5 + 280) = specialized Dictionary.init(dictionaryLiteral:)(v10);
  *(unsigned char *)(v5 + 288) = 1;
  *(unsigned char *)(v5 + 16) = a1 & 1;
  *(unsigned char *)(v5 + 17) = BYTE1(a1) & 1;
  *(unsigned char *)(v5 + 18) = BYTE2(a1) & 1;
  *(float *)(v5 + 20) = a2;
  *(double *)(v5 + 24) = a3;
  *(float *)(v5 + 32) = a4;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)logger);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v19 = v15;
    *(_DWORD *)uint64_t v14 = 136446210;
    uint64_t v16 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v12, v13, "Creating DynamicScanVolumeEstimator with desc=%{public}s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v15, -1, -1);
    MEMORY[0x24C5348D0](v14, -1, -1);
  }

  return v5;
}

void DynamicScanVolumeEstimator.addSphere(sphere:mass:time:)(__n128 a1, double a2, float a3, double a4)
{
  uint64_t v6 = v4;
  int8x16_t v9 = (int8x16_t)a1;
  double v32 = a2;
  if ((v4[10] & 1) == 0)
  {
    float32x2_t v10 = *(float32x2_t *)((char *)v4 + 152);
    float32x2_t v39 = (float32x2_t)v4[9];
    float32x2_t v40 = v10;
    long long v12 = v4[6];
    long long v11 = v4[7];
    long long v14 = v4[4];
    long long v13 = v4[5];
    uint64_t v15 = *((void *)v4 + 16);
    uint64_t v16 = *((void *)v4 + 17);
    v36[0] = v4[3];
    v36[1] = v14;
    v36[2] = v13;
    v36[3] = v12;
    v36[4] = v11;
    uint64_t v37 = v15;
    uint64_t v38 = v16;
    *(float32x2_t *)v17.f32 = vsub_f32((float32x2_t)a1.n128_u64[0], v39);
    *(float32x2_t *)&long long v12 = vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
    *(float32x2_t *)&v17.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), v10);
    LODWORD(v11) = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)vmulq_f32(v17, v17), 2), vadd_f32(*(float32x2_t *)&v12, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v12, 1))).u32[0];
    *(float32x2_t *)&long long v12 = vrsqrte_f32((float32x2_t)v11);
    *(float32x2_t *)&long long v12 = vmul_f32(*(float32x2_t *)&v12, vrsqrts_f32((float32x2_t)v11, vmul_f32(*(float32x2_t *)&v12, *(float32x2_t *)&v12)));
    __n128 v18 = (__n128)vmulq_n_f32(v17, vmul_f32(*(float32x2_t *)&v12, vrsqrts_f32((float32x2_t)v11, vmul_f32(*(float32x2_t *)&v12, *(float32x2_t *)&v12))).f32[0]);
    *(float *)&long long v11 = vmuls_lane_f32(*(float *)&a2, (float32x4_t)v18, 2);
    v18.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)v9.i8, vmul_n_f32((float32x2_t)v18.n128_u64[0], *(float *)&a2));
    v18.n128_f32[2] = *(float *)&v9.i32[2] + *(float *)&v11;
    v18.n128_u32[3] = 0;
    uint64_t v4 = v36;
    float v19 = Ellipsoid.signedDistanceField(at:)(v18);
    int8x16_t v9 = (int8x16_t)a1;
    LODWORD(a2) = LODWORD(v32);
    if (v19 <= 0.0) {
      return;
    }
  }
  uint64_t v20 = static DynamicScanVolumeEstimator.SphereSample.staticId + 1;
  if (__OFADD__(static DynamicScanVolumeEstimator.SphereSample.staticId, 1))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  ++static DynamicScanVolumeEstimator.SphereSample.staticId;
  *(void *)&long long v33 = v20;
  int8x16_t v34 = v9;
  *(void *)&long long v35 = __PAIR64__(LODWORD(a3), LODWORD(a2));
  uint64_t v4 = (_OWORD *)((char *)v6 + 248);
  *((double *)&v35 + 1) = a4;
  swift_beginAccess();
  uint64_t v5 = (void *)*((void *)v6 + 31);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *((void *)v6 + 31) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_19:
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    *(void *)uint64_t v4 = v5;
  }
  unint64_t v23 = v5[2];
  unint64_t v22 = v5[3];
  if (v23 >= v22 >> 1)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v5);
    *(void *)uint64_t v4 = v5;
  }
  v5[2] = v23 + 1;
  uint64_t v24 = &v5[6 * v23];
  long long v25 = v33;
  long long v26 = v35;
  void v24[3] = v34;
  v24[4] = v26;
  v24[2] = v25;
  swift_endAccess();
  if (*((unsigned char *)v6 + 17) == 1)
  {
    uint64_t v27 = specialized static DynamicScanVolumeEstimator.makeDebugSphereEntity(_:massToAssimilate:)(a1, v32, a3, *((float *)v6 + 5));
    DynamicScanVolumeEstimator.addDebugEntity(sample:entity:)((uint64_t *)&v33, v27);
    swift_release();
  }
  uint64_t v4 = v6;
  DynamicScanVolumeEstimator.attemptToCoalesceOnePair()();
  if (v28)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v29 = (uint64_t)v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
        goto LABEL_18;
      }
      uint64_t v4 = v6;
      DynamicScanVolumeEstimator.attemptToCoalesceOnePair()();
      uint64_t v5 = (void *)((char *)v5 + 1);
    }
    while ((v30 & 1) != 0);
    if (v29 >= 1) {
      DynamicScanVolumeEstimator.recalculateBoundingVolume()();
    }
  }
  DynamicScanVolumeEstimator.cullOldSamples(at:)(a4);
}

void DynamicScanVolumeEstimator.currentBoundingEllipsoid.didset(uint64_t a1)
{
  uint64_t v2 = v1;
  if (*(unsigned char *)(v1 + 160))
  {
    if (*(unsigned char *)(v1 + 17) == 1)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)logger);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_2465C2000, v4, v5, "Removing ellipsoid debug entity...", v6, 2u);
        MEMORY[0x24C5348D0](v6, -1, -1);
      }

      DynamicScanVolumeEstimator.debugEllipsoidEntity.getter();
      type metadata accessor for Entity();
      HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
      swift_release();
    }
  }
  else
  {
    long long v8 = *(_OWORD *)(v1 + 64);
    long long v7 = *(_OWORD *)(v1 + 80);
    uint64_t v9 = *(void *)(v1 + 96);
    uint64_t v10 = *(void *)(v1 + 104);
    uint64_t v12 = *(void *)(v1 + 112);
    uint64_t v11 = *(void *)(v1 + 120);
    uint64_t v14 = *(void *)(v1 + 128);
    uint64_t v13 = *(void *)(v1 + 136);
    double v16 = *(double *)(v1 + 144);
    uint64_t v15 = *(void *)(v1 + 152);
    long long v42 = *(_OWORD *)(v1 + 48);
    long long v43 = v8;
    long long v44 = v7;
    uint64_t v45 = v9;
    uint64_t v46 = v10;
    uint64_t v47 = v12;
    uint64_t v48 = v11;
    uint64_t v49 = v14;
    uint64_t v50 = v13;
    double v51 = v16;
    uint64_t v52 = v15;
    outlined init with take of Animation?(a1, (uint64_t)v41, &demangling cache variable for type metadata for Ellipsoid?);
    if (v41[112] == 1 && *(unsigned char *)(v1 + 17) == 1)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)logger);
      __n128 v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl(&dword_2465C2000, v18, v19, "Adding ellipsoid debug entity...", v20, 2u);
        MEMORY[0x24C5348D0](v20, -1, -1);
      }

      DynamicScanVolumeEstimator.debugRootEntity.getter();
      DynamicScanVolumeEstimator.debugEllipsoidEntity.getter();
      type metadata accessor for Entity();
      HasHierarchy.addChild(_:preservingWorldTransform:)();
      swift_release();
      swift_release();
    }
    if (*(unsigned char *)(v2 + 17) == 1)
    {
      v21.i64[0] = v14;
      double v22 = v16;
      if (one-time initialization token for logger != -1)
      {
        swift_once();
        double v22 = v16;
        v21.i64[0] = v14;
      }
      v21.i64[1] = v13;
      float32x4_t v39 = v21;
      double v38 = v22;
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)logger);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        long long v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v40 = v27;
        *(_DWORD *)long long v26 = 136446210;
        specialized simd_float4x4.init(translation:rotation:scale:)(v38, v39);
        type metadata accessor for simd_float4x4(0);
        uint64_t v28 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v24, v25, "Updating ellipsoid debug entity xform: %{public}s", v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v27, -1, -1);
        MEMORY[0x24C5348D0](v26, -1, -1);
      }

      DynamicScanVolumeEstimator.debugEllipsoidEntity.getter();
      specialized simd_float4x4.init(translation:rotation:scale:)(v38, v39);
      type metadata accessor for Entity();
      HasTransform.setTransformMatrix(_:relativeTo:)();
      swift_release();
    }
    if (*(unsigned char *)(v2 + 18))
    {
      Ellipsoid.gravityAlignedBox.getter();
      *(double *)&long long v32 = specialized simd_float4x4.init(translation:rotation:scale:)(v31, v30);
    }
    else
    {
      Ellipsoid.computeAABB()();
      *(double *)&long long v32 = specialized static BoundingBoxHelpers.asSRTMatrix(box:)(v36, v37);
    }
    *(_OWORD *)(v2 + 176) = v32;
    *(_OWORD *)(v2 + 192) = v33;
    *(_OWORD *)(v2 + 208) = v34;
    *(_OWORD *)(v2 + 224) = v35;
    *(unsigned char *)(v2 + 240) = 0;
    if (*(unsigned char *)(v2 + 16) == 1)
    {
      DynamicScanVolumeEstimator.boxEntity.getter();
      type metadata accessor for Entity();
      HasTransform.setTransformMatrix(_:relativeTo:)();
      swift_release();
    }
  }
}

uint64_t DynamicScanVolumeEstimator.boxEntity.getter()
{
  if (*(void *)(v0 + 256))
  {
    uint64_t v1 = *(void *)(v0 + 256);
  }
  else
  {
    uint64_t v1 = specialized static DynamicScanVolumeEstimator.makeBoxEntity()();
    *(void *)(v0 + 256) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t DynamicScanVolumeEstimator.debugRootEntity.getter()
{
  if (*(void *)(v0 + 264))
  {
    uint64_t v1 = *(void *)(v0 + 264);
  }
  else
  {
    uint64_t v2 = v0;
    type metadata accessor for Entity();
    swift_allocObject();
    uint64_t v1 = Entity.init()();
    *(void *)(v2 + 264) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t DynamicScanVolumeEstimator.debugEllipsoidEntity.getter()
{
  if (*(void *)(v0 + 272))
  {
    uint64_t v1 = *(void *)(v0 + 272);
  }
  else
  {
    uint64_t v1 = specialized static DynamicScanVolumeEstimator.makeDebugEllipsoidEntity()();
    *(void *)(v0 + 272) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t DynamicScanVolumeEstimator.cullOldSamples(at:)(double a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 248);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    double v5 = *(double *)(v1 + 24);
    swift_bridgeObjectRetain();
    uint64_t v6 = (double *)(v3 + 72);
    long long v7 = (void *)MEMORY[0x263F8EE78];
    do
    {
      double v9 = *v6;
      float v10 = v5 * (a1 - *v6);
      float v11 = COERCE_FLOAT(HIDWORD(*((void *)v6 - 1))) - v10;
      if (v11 <= 0.0 || v11 < 0.001)
      {
        uint64_t v13 = *((void *)v6 - 5);
        long long v19 = *(_OWORD *)(v6 - 3);
        uint64_t v20 = *((void *)v6 - 1);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        }
        uint64_t v14 = v20;
        unint64_t v16 = v7[2];
        unint64_t v15 = v7[3];
        if (v16 >= v15 >> 1)
        {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v7);
          uint64_t v14 = v20;
          long long v7 = v17;
        }
        v7[2] = v16 + 1;
        long long v8 = &v7[6 * v16];
        v8[4] = v13;
        *((_OWORD *)v8 + 3) = v19;
        v8[8] = v14;
        *((double *)v8 + 9) = v9;
      }
      v6 += 6;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v7 = (void *)MEMORY[0x263F8EE78];
  }
  DynamicScanVolumeEstimator.removeSamples(in:)(v7);
  return swift_bridgeObjectRelease();
}

uint64_t *DynamicScanVolumeEstimator.addDebugEntity(sample:entity:)(uint64_t *result, uint64_t a2)
{
  if (*(unsigned char *)(v2 + 17) == 1)
  {
    uint64_t v4 = *result;
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *(void *)(v2 + 280);
    *(void *)(v2 + 280) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, v4, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 280) = v6;
    swift_bridgeObjectRelease();
    swift_endAccess();
    DynamicScanVolumeEstimator.debugRootEntity.getter();
    type metadata accessor for Entity();
    HasHierarchy.addChild(_:preservingWorldTransform:)();
    return (uint64_t *)swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DynamicScanVolumeEstimator.removeDebugEntity(id:)(uint64_t result)
{
  if (*(unsigned char *)(v1 + 17) == 1)
  {
    uint64_t v2 = result;
    swift_beginAccess();
    if (*(void *)(*(void *)(v1 + 280) + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v2);
      if (v3)
      {
        type metadata accessor for Entity();
        swift_retain();
        HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
        swift_release();
      }
    }
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(v2);
    swift_endAccess();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void DynamicScanVolumeEstimator.attemptToCoalesceOnePair()()
{
  uint64_t v2 = v0 + 248;
  swift_beginAccess();
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    return;
  }
  unint64_t v5 = 0;
  uint64_t v6 = v3 + 32;
  while (!v5)
  {
LABEL_3:
    if (++v5 == v4) {
      return;
    }
  }
  long long v7 = 0;
  unint64_t v8 = 0;
  double v9 = (float32x4_t *)(v6 + 48 * v5);
  float32x4_t v10 = v9[1];
  float v11 = v9[2].f32[0];
  LODWORD(v12) = HIDWORD(v9[1].i64[0]);
  LODWORD(v13) = v9[1].i64[1];
  float v14 = v11 * (float)(v11 * (float)(v11 * 4.1888));
  while (1)
  {
    float32x4_t v15 = *(float32x4_t *)((char *)v7 + v3 + 48);
    float v16 = *(float *)((char *)v7 + v3 + 64);
    float32x4_t v17 = vsubq_f32(v10, v15);
    LODWORD(v18) = HIDWORD(*(void *)((char *)v7 + v3 + 48));
    float v19 = COERCE_FLOAT(*(void *)((char *)v7 + v3 + 56));
    float v20 = sqrtf((float)((float)(v13 - v19) * (float)(v13 - v19))+ (float)(vmulq_f32(v17, v17).f32[0] + (float)((float)(v12 - v18) * (float)(v12 - v18))));
    float v21 = 0.0;
    if ((float)(v11 + v16) >= v20)
    {
      if (v20 <= (float)(v11 - v16))
      {
        float v21 = v16 * (float)(v16 * (float)(v16 * 4.1888));
      }
      else
      {
        float32x4_t v22 = vsubq_f32(v15, v10);
        float v23 = sqrtf((float)((float)(v19 - v13) * (float)(v19 - v13))+ (float)(vmulq_f32(v22, v22).f32[0] + (float)((float)(v18 - v12) * (float)(v18 - v12))));
        float v21 = v11 * (float)(v11 * (float)(v11 * 4.1888));
        if (v23 > (float)(v16 - v11))
        {
          if (fabsf(v16 - v11) >= 0.000001 || (float v21 = v11 * (float)(v11 * (float)(v11 * 4.1888)), v23 >= 0.000001))
          {
            if (v20 <= -5.0)
            {
              __break(1u);
              goto LABEL_30;
            }
            float v24 = (float)((float)(v11 * v11) + (float)((float)(v20 * v20) - (float)(v16 * v16))) / (float)(v20 + v20);
            float v21 = (float)((float)((float)(v11 * 3.0) - (float)(v11 - v24))
                        * (float)((float)(v11 - v24) * (float)((float)(v11 - v24) * 1.0472)))
                + (float)((float)((float)(v16 * 3.0) - (float)(v16 - (float)(v20 - v24)))
                        * (float)((float)(v16 - (float)(v20 - v24)) * (float)((float)(v16 - (float)(v20 - v24)) * 1.0472)));
          }
        }
      }
    }
    float v25 = v21 / v14;
    if ((float)(v21 / v14) <= (float)(v21 / (float)(v16 * (float)(v16 * (float)(v16 * 4.1888))))) {
      float v25 = v21 / (float)(v16 * (float)(v16 * (float)(v16 * 4.1888)));
    }
    if (*(float *)(v0 + 32) < v25) {
      break;
    }
    ++v8;
    v7 += 6;
    if (v5 == v8) {
      goto LABEL_3;
    }
  }
  specialized DynamicScanVolumeEstimator.mergeSphereSamples(_:_:)((uint64_t)&v32, v10, v11, *(float *)(v6 + 48 * v5 + 36), *(double *)(v6 + 48 * v5 + 40), v15, v16, *(float *)((char *)v7 + v3 + 68), *(double *)((char *)v7 + v3 + 72));
  int v1 = *(unsigned __int8 *)(v0 + 17);
  if (v1 != 1) {
    goto LABEL_23;
  }
  if (v5 >= *(void *)(*(void *)v2 + 16)) {
    goto LABEL_32;
  }
  DynamicScanVolumeEstimator.removeDebugEntity(id:)(*(void *)(*(void *)v2 + 48 * v5 + 32));
  uint64_t v26 = *(void *)(v0 + 248);
  if (v8 >= *(void *)(v26 + 16))
  {
LABEL_33:
    __break(1u);
    return;
  }
  DynamicScanVolumeEstimator.removeDebugEntity(id:)(*(void *)((char *)v7 + v26 + 32));
LABEL_23:
  swift_beginAccess();
  long long v7 = *(void **)v2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v2 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_30:
    long long v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    *(void *)uint64_t v2 = v7;
  }
  if (v5 >= v7[2])
  {
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v28 = &v7[6 * v5];
  __n128 v29 = v33;
  v28[2] = v32;
  v28[3] = v29;
  v28[4] = v34;
  swift_endAccess();
  if (v1)
  {
    LODWORD(v30) = v34;
    uint64_t v31 = specialized static DynamicScanVolumeEstimator.makeDebugSphereEntity(_:massToAssimilate:)(v33, v30, *((float *)&v34 + 1), *(float *)(v0 + 20));
    DynamicScanVolumeEstimator.addDebugEntity(sample:entity:)((uint64_t *)&v32, v31);
    swift_release();
  }
  swift_beginAccess();
  specialized Array.remove(at:)(v8, (uint64_t)v35);
  swift_endAccess();
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      double v9 = &v5[6 * a1];
      uint64_t v10 = v9[4];
      v9 += 4;
      long long v14 = *((_OWORD *)v9 + 1);
      uint64_t v12 = v9[4];
      uint64_t v11 = v9[5];
      uint64_t result = (uint64_t)memmove(v9, v9 + 6, 48 * v8);
      v5[2] = v7;
      *uint64_t v2 = v5;
      *(void *)a2 = v10;
      *(_OWORD *)(a2 + 16) = v14;
      *(void *)(a2 + 32) = v12;
      *(void *)(a2 + 40) = v11;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t DynamicScanVolumeEstimator.recalculateBoundingVolume()()
{
  swift_beginAccess();
  uint64_t v1 = v0[15].i64[1];
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    unint64_t v5 = (void *)MEMORY[0x263F8EE78];
    unint64_t v6 = (int *)MEMORY[0x263F8EE78];
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = (uint64_t *)(v1 + 72);
  unint64_t v5 = (void *)MEMORY[0x263F8EE78];
  unint64_t v6 = (int *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v8 = *(v4 - 5);
    float32x4_t v9 = *(float32x4_t *)(v4 - 3);
    uint64_t v11 = *(v4 - 1);
    uint64_t v10 = *v4;
    if (v0[10].i8[0]) {
      goto LABEL_7;
    }
    uint64_t v12 = (const double *)&v0[9].i64[1];
    float32x2_t v13 = *(float32x2_t *)v0[9].f32;
    float32x4_t v14 = (float32x4_t)vld1q_dup_f64(v12);
    *(float32x2_t *)v3.f32 = vsub_f32(*(float32x2_t *)v9.f32, v13);
    v3.i32[2] = vsubq_f32(v9, v14).i32[2];
    float32x4_t v15 = v3;
    v15.i32[3] = 0;
    int32x4_t v16 = (int32x4_t)vmulq_f32(v15, v15);
    v16.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2), vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1))).u32[0];
    float32x2_t v17 = vrsqrte_f32((float32x2_t)v16.u32[0]);
    float32x2_t v18 = vmul_f32(v17, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v17, v17)));
    float32x4_t v3 = vmulq_n_f32(v3, vmul_f32(v18, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v18, v18))).f32[0]);
    float32x4_t v19 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v0[3], v9.f32[0] + vmuls_n_f32(*(float *)&v11, v3.f32[0])), v0[4], v9.f32[1] + vmuls_lane_f32(*(float *)&v11, *(float32x2_t *)v3.f32, 1)), v0[5], v9.f32[2] + vmuls_lane_f32(*(float *)&v11, v3, 2)), v0[6]);
    float32x4_t v20 = vmulq_f32(v19, v19);
    if ((float)(sqrtf(v20.f32[2] + vaddv_f32(*(float32x2_t *)v20.f32)) + -1.0) > 0.0)
    {
LABEL_7:
      if (v0[1].f32[1] >= *((float *)&v11 + 1)) {
        goto LABEL_4;
      }
      long long v33 = *(_OWORD *)(v4 - 3);
      uint64_t v34 = *(v4 - 1);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v6 = (int *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
      }
      unint64_t v22 = *((void *)v6 + 2);
      unint64_t v21 = *((void *)v6 + 3);
      long long v24 = v33;
      uint64_t v23 = v34;
      if (v22 >= v21 >> 1)
      {
        uint64_t v31 = (int *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v6);
        long long v24 = v33;
        uint64_t v23 = v34;
        unint64_t v6 = v31;
      }
      *((void *)v6 + 2) = v22 + 1;
      float v25 = &v6[12 * v22];
      *((void *)v25 + 4) = v8;
      *((_OWORD *)v25 + 3) = v24;
      *((void *)v25 + 8) = v23;
      *((void *)v25 + 9) = v10;
    }
    else
    {
      long long v33 = *(_OWORD *)(v4 - 3);
      uint64_t v34 = *(v4 - 1);
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    }
    unint64_t v27 = v5[2];
    unint64_t v26 = v5[3];
    long long v29 = v33;
    uint64_t v28 = v34;
    if (v27 >= v26 >> 1)
    {
      double v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v5);
      long long v29 = v33;
      uint64_t v28 = v34;
      unint64_t v5 = v30;
    }
    v5[2] = v27 + 1;
    unint64_t v7 = &v5[6 * v27];
    v7[4] = v8;
    *((_OWORD *)v7 + 3) = v29;
    v7[8] = v28;
    v7[9] = v10;
LABEL_4:
    v4 += 6;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
LABEL_20:
  DynamicScanVolumeEstimator.removeSamples(in:)(v5);
  swift_bridgeObjectRelease();
  DynamicScanVolumeEstimator.recomputeBoundingEllipsoid(containing:)(v6);
  return swift_bridgeObjectRelease();
}

uint64_t DynamicScanVolumeEstimator.removeSamples(in:)(void *a1)
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized _ArrayProtocol.filter(_:)(v3, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v1 + 248) = v4;
  uint64_t result = swift_bridgeObjectRelease();
  if (*(unsigned char *)(v1 + 17) == 1)
  {
    uint64_t v6 = a1[2];
    if (v6)
    {
      unint64_t v7 = (uint64_t *)(v1 + 280);
      swift_bridgeObjectRetain();
      swift_beginAccess();
      uint64_t v8 = 4;
      do
      {
        uint64_t v9 = a1[v8];
        if (*(void *)(*v7 + 16))
        {
          specialized __RawDictionaryStorage.find<A>(_:)(a1[v8]);
          if (v10)
          {
            type metadata accessor for Entity();
            swift_retain();
            HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
            swift_release();
          }
        }
        swift_beginAccess();
        unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
        if (v12)
        {
          unint64_t v13 = v11;
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v15 = *v7;
          uint64_t v16 = *v7;
          uint64_t *v7 = 0x8000000000000000;
          if (!isUniquelyReferenced_nonNull_native)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v15 = v16;
          }
          specialized _NativeDictionary._delete(at:)(v13, v15);
          uint64_t *v7 = v15;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        swift_release();
        v8 += 6;
        --v6;
      }
      while (v6);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t DynamicScanVolumeEstimator.recomputeBoundingEllipsoid(containing:)(int *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)&long long v120 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  char v10 = (uint8_t *)&v97 - v9;
  uint64_t result = MEMORY[0x270FA5388](v8);
  unint64_t v13 = (char *)&v97 - v12;
  if (*((void *)a1 + 2))
  {
    v130 = a1;
    uint64_t v106 = v10;
    uint64_t v107 = v1 + 48;
    if (*(unsigned char *)(v1 + 160))
    {
      uint64_t v14 = one-time initialization token for logger;
      swift_bridgeObjectRetain();
      if (v14 != -1) {
LABEL_31:
      }
        swift_once();
      uint64_t v15 = __swift_project_value_buffer(v4, (uint64_t)logger);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        char v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v10 = 0;
        _os_log_impl(&dword_2465C2000, v16, v17, "Making a base ellipsoid from the first sphere...", v10, 2u);
        MEMORY[0x24C5348D0](v10, -1, -1);
      }

      long long v119 = *((_OWORD *)a1 + 3);
      int v18 = a1[16];
      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of Ellipsoid.init(fromSphere:));
      v19.i32[3] = 1.0;
      float32x4_t v118 = v19;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_2466B5DE0;
      *(_DWORD *)(v20 + 32) = v18;
      *(_DWORD *)(v20 + 36) = v18;
      *(_DWORD *)(v20 + 40) = v18;
      specialized SIMD.init<A>(_:)(v20);
      long long v117 = v21;
      swift_setDeallocating();
      swift_deallocClassInstance();
      static simd_quatf.identity.getter();
      *(double *)v149.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v119, v118);
      simd_float4x4 v150 = __invert_f4(v149);
      simd_float4 v115 = v150.columns[1];
      simd_float4 v116 = v150.columns[0];
      simd_float4 v113 = v150.columns[3];
      simd_float4 v114 = v150.columns[2];
      outlined init with take of Animation?(v107, (uint64_t)v148, &demangling cache variable for type metadata for Ellipsoid?);
      simd_float4 v22 = v115;
      *(simd_float4 *)(v2 + 48) = v116;
      *(simd_float4 *)(v2 + 64) = v22;
      simd_float4 v23 = v113;
      *(simd_float4 *)(v2 + 80) = v114;
      *(simd_float4 *)(v2 + 96) = v23;
      float32x4_t v24 = v118;
      *(_OWORD *)(v2 + 112) = v117;
      *(float32x4_t *)(v2 + 128) = v24;
      *(_OWORD *)(v2 + 144) = v119;
      *(unsigned char *)(v2 + 160) = 0;
      DynamicScanVolumeEstimator.currentBoundingEllipsoid.didset((uint64_t)v148);
      if (!*((void *)a1 + 2))
      {
        __break(1u);
LABEL_33:
        swift_once();
LABEL_15:
        unint64_t v13 = 0;
        *(void *)&long long v119 = v120 + 16;
        v118.i64[0] = v120 + 8;
        a1 = (int *)(v98 + 64);
        *(void *)&long long v46 = 136446466;
        long long v101 = v46;
        uint64_t v100 = MEMORY[0x263F8EE58] + 8;
        *((void *)&v47 + 1) = 6;
        long long v104 = xmmword_2466B5DE0;
        *(void *)&long long v47 = 136446210;
        long long v99 = v47;
        char v102 = v7;
        uint64_t v103 = v4;
        long long v108 = (char *)&v121 + 8;
        while (1)
        {
          if (__OFADD__(v13, 1))
          {
            __break(1u);
            goto LABEL_31;
          }
          v114.i64[0] = (uint64_t)(v13 + 1);
          long long v120 = *((_OWORD *)a1 - 1);
          int v48 = *a1;
          uint64_t v49 = __swift_project_value_buffer(v4, (uint64_t)logger);
          uint64_t v50 = *(void (**)(uint8_t *))v119;
          v116.i64[0] = v49;
          *(void *)&long long v117 = v50;
          v50(v10);
          swift_retain_n();
          double v51 = Logger.logObject.getter();
          os_log_type_t v52 = static os_log_type_t.default.getter();
          BOOL v53 = os_log_type_enabled(v51, v52);
          v115.i64[0] = (uint64_t)v13;
          if (v53)
          {
            uint64_t v54 = swift_slowAlloc();
            uint64_t v55 = swift_slowAlloc();
            v129[0] = v55;
            *(_DWORD *)uint64_t v54 = v101;
            long long v121 = v120;
            LODWORD(v122) = v48;
            uint64_t v56 = String.init<A>(describing:)();
            *(void *)&long long v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v129);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v54 + 12) = 2082;
            if (*(unsigned char *)(v2 + 160)) {
              goto LABEL_35;
            }
            long long v59 = *(_OWORD *)(v2 + 112);
            long long v58 = *(_OWORD *)(v2 + 128);
            long long v61 = *(_OWORD *)(v2 + 80);
            long long v60 = *(_OWORD *)(v2 + 96);
            long long v62 = *(_OWORD *)(v2 + 64);
            uint64_t v63 = *(void *)(v2 + 144);
            uint64_t v64 = *(void *)(v2 + 152);
            long long v121 = *(_OWORD *)(v2 + 48);
            long long v122 = v62;
            long long v123 = v61;
            long long v124 = v60;
            long long v125 = v59;
            long long v126 = v58;
            uint64_t v127 = v63;
            uint64_t v128 = v64;
            uint64_t v65 = String.init<A>(describing:)();
            *(void *)&long long v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v129);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_2465C2000, v51, v52, "Assimilating sphere: %{public}s into ellipsoid %{public}s.", (uint8_t *)v54, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x24C5348D0](v55, -1, -1);
            MEMORY[0x24C5348D0](v54, -1, -1);

            char v10 = v106;
            uint64_t v4 = v103;
            (*(void (**)(uint8_t *, uint64_t))v118.i64[0])(v106, v103);
            unint64_t v7 = v102;
          }
          else
          {

            swift_release_n();
            (*(void (**)(uint8_t *, uint64_t))v118.i64[0])(v10, v4);
          }
          if (*(unsigned char *)(v2 + 160)) {
            break;
          }
          long long v68 = *(_OWORD *)(v2 + 112);
          long long v67 = *(_OWORD *)(v2 + 128);
          long long v70 = *(_OWORD *)(v2 + 80);
          long long v69 = *(_OWORD *)(v2 + 96);
          long long v71 = *(_OWORD *)(v2 + 64);
          uint64_t v72 = *(void *)(v2 + 144);
          uint64_t v73 = *(void *)(v2 + 152);
          long long v137 = *(_OWORD *)(v2 + 48);
          long long v138 = v71;
          long long v139 = v70;
          long long v140 = v69;
          long long v141 = v68;
          long long v142 = v67;
          uint64_t v144 = v73;
          uint64_t v143 = v72;
          Ellipsoid.computeAABB()();
          long long v112 = v75;
          simd_float4 v113 = v74;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
          uint64_t v76 = swift_allocObject();
          *(_OWORD *)(v76 + 16) = v104;
          *(_DWORD *)(v76 + 32) = v48;
          *(_DWORD *)(v76 + 36) = v48;
          *(_DWORD *)(v76 + 40) = v48;
          specialized SIMD.init<A>(_:)(v76);
          long long v111 = v77;
          swift_setDeallocating();
          swift_deallocClassInstance();
          BoundingBox.init(min:max:)();
          BoundingBox.union(_:)();
          specialized Ellipsoid.init(inscribedIn:)((uint64_t)v131);
          long long v120 = v131[0];
          long long v112 = v131[2];
          simd_float4 v113 = (simd_float4)v131[1];
          long long v110 = v131[4];
          long long v111 = v131[3];
          long long v109 = v131[5];
          uint64_t v78 = v133;
          uint64_t v79 = v132;
          outlined init with take of Animation?(v107, (uint64_t)v134, &demangling cache variable for type metadata for Ellipsoid?);
          simd_float4 v80 = v113;
          *(_OWORD *)(v2 + 48) = v120;
          *(simd_float4 *)(v2 + 64) = v80;
          long long v81 = v111;
          *(_OWORD *)(v2 + 80) = v112;
          *(_OWORD *)(v2 + 96) = v81;
          long long v82 = v109;
          *(_OWORD *)(v2 + 112) = v110;
          *(_OWORD *)(v2 + 128) = v82;
          *(void *)(v2 + 144) = v79;
          *(void *)(v2 + 152) = v78;
          *(unsigned char *)(v2 + 160) = 0;
          DynamicScanVolumeEstimator.currentBoundingEllipsoid.didset((uint64_t)v134);
          ((void (*)(char *, uint64_t, uint64_t))v117)(v7, v116.i64[0], v4);
          swift_retain_n();
          uint64_t v83 = Logger.logObject.getter();
          os_log_type_t v84 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v83, v84))
          {
            unint64_t v85 = (uint8_t *)swift_slowAlloc();
            uint64_t v86 = swift_slowAlloc();
            v129[0] = v86;
            *(_DWORD *)unint64_t v85 = v99;
            if (*(unsigned char *)(v2 + 160)) {
              goto LABEL_36;
            }
            uint64_t v87 = v86;
            long long v89 = *(_OWORD *)(v2 + 112);
            long long v88 = *(_OWORD *)(v2 + 128);
            long long v91 = *(_OWORD *)(v2 + 80);
            long long v90 = *(_OWORD *)(v2 + 96);
            long long v92 = *(_OWORD *)(v2 + 64);
            uint64_t v93 = *(void *)(v2 + 144);
            uint64_t v94 = *(void *)(v2 + 152);
            long long v121 = *(_OWORD *)(v2 + 48);
            long long v122 = v92;
            long long v123 = v91;
            long long v124 = v90;
            long long v125 = v89;
            long long v126 = v88;
            uint64_t v127 = v93;
            uint64_t v128 = v94;
            uint64_t v95 = String.init<A>(describing:)();
            *(void *)&long long v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, v129);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_2465C2000, v83, v84, "... new ellipsoid =  %{public}s", v85, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x24C5348D0](v87, -1, -1);
            MEMORY[0x24C5348D0](v85, -1, -1);

            unint64_t v7 = v102;
            uint64_t v4 = v103;
            (*(void (**)(char *, uint64_t))v118.i64[0])(v102, v103);
            char v10 = v106;
          }
          else
          {

            swift_release_n();
            (*(void (**)(char *, uint64_t))v118.i64[0])(v7, v4);
          }
          a1 += 12;
          unint64_t v13 = (char *)(v115.i64[0] + 1);
          if (v114.i64[0] == v105) {
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_35:
        swift_release();
        __break(1u);
LABEL_36:
        swift_release();
        __break(1u);
        goto LABEL_37;
      }
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(v13, v15, v4);
      swift_retain_n();
      float v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        unint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v119 = swift_slowAlloc();
        *(void *)&v145[0] = v119;
        *(_DWORD *)unint64_t v27 = 136446210;
        if (*(unsigned char *)(v2 + 160))
        {
LABEL_37:
          swift_release();
          __break(1u);
          uint64_t result = swift_release();
          __break(1u);
          return result;
        }
        long long v29 = *(_OWORD *)(v2 + 112);
        long long v28 = *(_OWORD *)(v2 + 128);
        long long v31 = *(_OWORD *)(v2 + 80);
        long long v30 = *(_OWORD *)(v2 + 96);
        long long v33 = *(_OWORD *)(v2 + 48);
        long long v32 = *(_OWORD *)(v2 + 64);
        uint64_t v34 = *(void *)(v2 + 144);
        uint64_t v35 = *(void *)(v2 + 152);
        v118.i64[0] = (uint64_t)(v27 + 4);
        v134[0] = v33;
        v134[1] = v32;
        v134[2] = v31;
        v134[3] = v30;
        v134[4] = v29;
        v134[5] = v28;
        uint64_t v136 = v35;
        uint64_t v135 = v34;
        uint64_t v36 = String.init<A>(describing:)();
        *(void *)&v134[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v25, v26, "New ellipsoid =  %{public}s", v27, 0xCu);
        uint64_t v38 = v119;
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v38, -1, -1);
        MEMORY[0x24C5348D0](v27, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      (*(void (**)(char *, uint64_t))(v120 + 8))(v13, v4);
      char v10 = v106;
      a1 = v130;
      if (*(unsigned char *)(v2 + 160)) {
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    long long v40 = *(_OWORD *)(v2 + 112);
    long long v39 = *(_OWORD *)(v2 + 128);
    long long v42 = *(_OWORD *)(v2 + 80);
    long long v41 = *(_OWORD *)(v2 + 96);
    long long v43 = *(_OWORD *)(v2 + 64);
    uint64_t v44 = *(void *)(v2 + 144);
    uint64_t v45 = *(void *)(v2 + 152);
    v145[0] = *(_OWORD *)(v2 + 48);
    v145[1] = v43;
    v145[2] = v42;
    v145[3] = v41;
    v145[4] = v40;
    v145[5] = v39;
    uint64_t v147 = v45;
    uint64_t v146 = v44;
    *(void *)&v134[0] = a1;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)((uint64_t *)v134, (float *)v145);
    swift_bridgeObjectRelease();
    uint64_t v105 = *(void *)(*(void *)&v134[0] + 16);
    if (v105)
    {
      uint64_t v98 = *(void *)&v134[0];
      if (one-time initialization token for logger == -1) {
        goto LABEL_15;
      }
      goto LABEL_33;
    }
LABEL_27:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t DynamicScanVolumeEstimator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DynamicScanVolumeEstimator()
{
  return self;
}

ValueMetadata *type metadata accessor for DynamicScanVolumeEstimator.SphereSample()
{
  return &type metadata for DynamicScanVolumeEstimator.SphereSample;
}

__n128 __swift_memcpy20_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DynamicScanVolumeEstimator.Descriptor(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[20]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicScanVolumeEstimator.Descriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 20) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicScanVolumeEstimator.Descriptor()
{
  return &type metadata for DynamicScanVolumeEstimator.Descriptor;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in DynamicScanVolumeEstimator.SphereSample()
{
  return MEMORY[0x263F8D6D8];
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for FreeformMeshManager.MeshAnchor();
  uint64_t v49 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v54 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, FreeformMeshManager.MeshAnchor>);
  int v50 = a2;
  uint64_t v12 = v11;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_41;
  }
  uint64_t v53 = v7;
  uint64_t v15 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 64);
  long long v46 = (void *)(v12 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v44 = v2;
  int64_t v45 = (unint64_t)(v15 + 63) >> 6;
  long long v47 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  os_log_type_t v52 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v19 = v13 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  uint64_t v48 = v12;
  double v51 = v10;
  while (1)
  {
    if (v18)
    {
      unint64_t v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45) {
      break;
    }
    os_log_type_t v26 = v46;
    unint64_t v27 = v46[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v27 = v46[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          swift_release();
          unint64_t v3 = v44;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v45) {
              goto LABEL_34;
            }
            unint64_t v27 = v46[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v18 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
    uint64_t v10 = v51;
LABEL_22:
    uint64_t v29 = v8;
    uint64_t v30 = *(void *)(v8 + 72);
    unint64_t v31 = *(void *)(v12 + 48) + v30 * v24;
    if (v50)
    {
      (*v52)(v10, v31, v53);
      uint64_t v32 = *(void *)(v12 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      outlined init with take of FreeformMeshManager.MeshAnchor(v32 + v33 * v24, v54);
    }
    else
    {
      (*v47)(v10, v31, v53);
      uint64_t v34 = *(void *)(v12 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      outlined init with copy of FreeformMeshManager.MeshAnchor(v34 + v33 * v24, v54);
    }
    lazy protocol witness table accessor for type UUID and conformance UUID();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v35 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v36) & ~*(void *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v10 = v51;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      uint64_t v10 = v51;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v19 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v52)((char *)(*(void *)(v14 + 48) + v30 * v22), (unint64_t)v10, v53);
    uint64_t result = outlined init with take of FreeformMeshManager.MeshAnchor(v54, *(void *)(v14 + 56) + v33 * v22);
    ++*(void *)(v14 + 16);
    uint64_t v12 = v48;
    uint64_t v8 = v29;
  }
  swift_release();
  unint64_t v3 = v44;
  os_log_type_t v26 = v46;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v12 + 32);
  if (v42 >= 64) {
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *os_log_type_t v26 = -1 << v42;
  }
  *(void *)(v12 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *unint64_t v3 = v14;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Entity>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  *uint64_t v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x270FA5388](v4);
  int64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v41 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v41;
    if ((*(void *)(v41 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v39 = (result + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      char v38 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      unint64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v10;
        v38(v8, *(void *)(a2 + 48) + v15 * v10, v4);
        lazy protocol witness table accessor for type UUID and conformance UUID();
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v16)(v8, v4);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v39)
        {
          if (v19 < v39 || a1 < (uint64_t)v19) {
            goto LABEL_6;
          }
        }
        else if (v19 < v39 && a1 < (uint64_t)v19)
        {
          goto LABEL_6;
        }
        uint64_t v22 = *(void *)(a2 + 48);
        unint64_t v23 = v22 + v15 * a1;
        unint64_t v24 = v22 + v17 + v15;
        if (v15 * a1 < v17 || v23 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v15 * a1 != v17)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v26 = *(void *)(a2 + 56);
        uint64_t v27 = *(void *)(*(void *)(type metadata accessor for FreeformMeshManager.MeshAnchor() - 8) + 72);
        int64_t v28 = v27 * a1;
        unint64_t result = v26 + v27 * a1;
        int64_t v29 = v27 * v10;
        unint64_t v30 = v26 + v27 * v10 + v27;
        if (v28 < v29 || result >= v30)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v28 == v29) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
        uint64_t v12 = v41;
      }
      while (((*(void *)(v41 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v32 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v33 = *v32;
    uint64_t v34 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v32 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v34 = *v32;
    uint64_t v33 = (-1 << a1) - 1;
  }
  *uint64_t v32 = v34 & v33;
  uint64_t v35 = *(void *)(a2 + 16);
  BOOL v36 = __OFSUB__(v35, 1);
  uint64_t v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v37;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        unint64_t v10 = (void *)(v9 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            unint64_t v16 = (void *)(v15 + 8 * v3);
            int64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *unint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    unint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(void *)(v16[6] + v19) = a2;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    unint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for FreeformMeshManager.MeshAnchor();
  uint64_t result = outlined init with take of FreeformMeshManager.MeshAnchor(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = type metadata accessor for FreeformMeshManager.MeshAnchor();
  uint64_t v29 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1 - 8);
  int64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, FreeformMeshManager.MeshAnchor>);
  unint64_t v24 = v0;
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *unint64_t v24 = v10;
    return result;
  }
  uint64_t result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    uint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  uint64_t v25 = v8 + 64;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v27 = v5 + 32;
  uint64_t v28 = v5 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v5 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v19, v4);
    unint64_t v20 = *(void *)(v29 + 72) * v18;
    outlined init with copy of FreeformMeshManager.MeshAnchor(*(void *)(v8 + 56) + v20, (uint64_t)v3);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v19, v7, v4);
    uint64_t result = (void *)outlined init with take of FreeformMeshManager.MeshAnchor((uint64_t)v3, *(void *)(v10 + 56) + v20);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Entity>);
  uint64_t v2 = *v0;
  int64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      uint64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_retain();
  }
  unint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1, float *a2)
{
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  }
  uint64_t v5 = *(void *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  *a1 = v4;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, float *a2)
{
  Swift::Int v4 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_130;
    }
    if (v4) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1, a2);
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_138;
  }
  Swift::Int v120 = result;
  long long v117 = a1;
  if (v4 < 2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    long long v123 = (float *)(MEMORY[0x263F8EE78] + 32);
    if (v4 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
      unint64_t v12 = (char *)MEMORY[0x263F8EE78];
LABEL_96:
      long long v108 = v12;
      uint64_t v119 = v9;
      if (v13 >= 2)
      {
        uint64_t v109 = *v117;
        do
        {
          unint64_t v110 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_125;
          }
          if (!v109) {
            goto LABEL_137;
          }
          long long v111 = v108;
          uint64_t v112 = *(void *)&v108[16 * v110 + 32];
          uint64_t v113 = *(void *)&v108[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((float *)(v109 + 48 * v112), (float *)(v109 + 48 * *(void *)&v108[16 * v13 + 16]), v109 + 48 * v113, v123, a2);
          if (v2) {
            break;
          }
          if (v113 < v112) {
            goto LABEL_126;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v111 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v111);
          }
          if (v110 >= *((void *)v111 + 2)) {
            goto LABEL_127;
          }
          simd_float4 v114 = &v111[16 * v110 + 32];
          *(void *)simd_float4 v114 = v112;
          *((void *)v114 + 1) = v113;
          unint64_t v115 = *((void *)v111 + 2);
          if (v13 > v115) {
            goto LABEL_128;
          }
          memmove(&v111[16 * v13 + 16], &v111[16 * v13 + 32], 16 * (v115 - v13));
          long long v108 = v111;
          *((void *)v111 + 2) = v115 - 1;
          unint64_t v13 = v115 - 1;
        }
        while (v115 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v119 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v119 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = v6 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v119 = v8;
    long long v123 = (float *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v118 = *a1 + 120;
  uint64_t v116 = *a1 + 40;
  unint64_t v12 = (char *)MEMORY[0x263F8EE78];
  Swift::Int v121 = v4;
  uint64_t v122 = *a1;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v4)
    {
      uint64_t v15 = (float *)(v11 + 48 * v10);
      unint64_t v16 = (float *)(v11 + 48 * v14);
      float v17 = a2[24];
      float v18 = a2[25];
      float v20 = v15[4];
      float v19 = v15[5];
      float v21 = a2[26];
      float v22 = v15[6];
      float v23 = sqrtf((float)((float)(v21 - v22) * (float)(v21 - v22))+ (float)((float)((float)(v17 - v20) * (float)(v17 - v20)) + (float)((float)(v18 - v19) * (float)(v18 - v19))));
      float v24 = sqrtf((float)((float)(v21 - v16[6]) * (float)(v21 - v16[6]))+ (float)((float)((float)(v17 - v16[4]) * (float)(v17 - v16[4]))+ (float)((float)(v18 - v16[5]) * (float)(v18 - v16[5]))));
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v4)
      {
        uint64_t v25 = (float *)(v118 + 48 * v14);
        while (1)
        {
          float v26 = v17 - v20;
          float v27 = v18 - v19;
          float v20 = *(v25 - 2);
          float v19 = *(v25 - 1);
          float v28 = v21 - v22;
          float v22 = *v25;
          if (v23 < v24 == sqrtf((float)((float)(v21 - *v25) * (float)(v21 - *v25))+ (float)((float)((float)(v17 - v20) * (float)(v17 - v20))+ (float)((float)(v18 - v19) * (float)(v18 - v19)))) >= sqrtf((float)(v28 * v28)+ (float)((float)(v26 * v26) + (float)(v27 * v27))))break; {
          ++v10;
          }
          v25 += 12;
          if (v4 == v10)
          {
            Swift::Int v10 = v4;
            break;
          }
        }
      }
      if (v23 < v24)
      {
        if (v10 < v14) {
          goto LABEL_131;
        }
        if (v14 < v10)
        {
          uint64_t v29 = 48 * v10;
          uint64_t v30 = 48 * v14;
          Swift::Int v31 = v10;
          Swift::Int v32 = v14;
          do
          {
            if (v32 != --v31)
            {
              if (!v11) {
                goto LABEL_136;
              }
              uint64_t v33 = (_OWORD *)(v11 + v30);
              uint64_t v34 = *(void *)(v11 + v30);
              uint64_t v35 = v11 + v29;
              long long v36 = *(_OWORD *)(v11 + v30 + 16);
              uint64_t v38 = *(void *)(v11 + v30 + 32);
              uint64_t v37 = *(void *)(v11 + v30 + 40);
              long long v40 = *(_OWORD *)(v11 + v29 - 32);
              long long v39 = *(_OWORD *)(v11 + v29 - 16);
              _OWORD *v33 = *(_OWORD *)(v11 + v29 - 48);
              v33[1] = v40;
              _OWORD v33[2] = v39;
              *(void *)(v35 - 48) = v34;
              *(_OWORD *)(v35 - 32) = v36;
              *(void *)(v35 - 16) = v38;
              *(void *)(v35 - 8) = v37;
            }
            ++v32;
            v29 -= 48;
            v30 += 48;
          }
          while (v32 < v31);
        }
      }
    }
    if (v10 >= v4) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_129;
    }
    if (v10 - v14 >= v120) {
      goto LABEL_46;
    }
    Swift::Int v41 = v14 + v120;
    if (__OFADD__(v14, v120)) {
      goto LABEL_132;
    }
    if (v41 >= v4) {
      Swift::Int v41 = v4;
    }
    if (v41 < v14) {
      break;
    }
    if (v10 != v41)
    {
      float v42 = a2[24];
      float v43 = a2[25];
      uint64_t v44 = (float *)(v116 + 48 * v10);
      float v45 = a2[26];
      do
      {
        long long v46 = *(_OWORD *)(v11 + 48 * v10 + 16);
        float v47 = v43 - COERCE_FLOAT(HIDWORD(*(void *)(v11 + 48 * v10 + 16)));
        float v48 = v45 - COERCE_FLOAT(*(void *)(v11 + 48 * v10 + 24));
        float v49 = sqrtf((float)(v48 * v48)+ (float)((float)((float)(v42 - *(float *)&v46) * (float)(v42 - *(float *)&v46)) + (float)(v47 * v47)));
        Swift::Int v50 = v14;
        double v51 = v44;
        do
        {
          if (v49 >= sqrtf((float)((float)(v45 - *(v51 - 16)) * (float)(v45 - *(v51 - 16)))+ (float)((float)((float)(v42 - *(v51 - 18)) * (float)(v42 - *(v51 - 18)))+ (float)((float)(v43 - *(v51 - 17)) * (float)(v43 - *(v51 - 17))))))break; {
          if (!v11)
          }
            goto LABEL_134;
          os_log_type_t v52 = v51 - 10;
          uint64_t v53 = v51 - 22;
          long long v55 = *(_OWORD *)(v51 - 18);
          long long v54 = *(_OWORD *)(v51 - 14);
          *((void *)v51 - 6) = *(void *)v51;
          v51 -= 12;
          uint64_t v56 = *((void *)v51 + 1);
          uint64_t v57 = *((void *)v51 + 5);
          *(_OWORD *)os_log_type_t v52 = *(_OWORD *)v53;
          *((_OWORD *)v52 + 1) = v55;
          *((_OWORD *)v52 + 2) = v54;
          *((void *)v51 - 5) = v56;
          *(_OWORD *)(v51 - 6) = v46;
          *((void *)v51 - 1) = v57;
          ++v50;
        }
        while (v10 != v50);
        ++v10;
        v44 += 12;
      }
      while (v10 != v41);
      Swift::Int v10 = v41;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_124;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v59 = *((void *)v12 + 2);
    unint64_t v58 = *((void *)v12 + 3);
    unint64_t v13 = v59 + 1;
    uint64_t v11 = v122;
    if (v59 >= v58 >> 1)
    {
      uint64_t v107 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v12);
      uint64_t v11 = v122;
      unint64_t v12 = v107;
    }
    *((void *)v12 + 2) = v13;
    long long v60 = v12 + 32;
    long long v61 = &v12[16 * v59 + 32];
    *(void *)long long v61 = v14;
    *((void *)v61 + 1) = v10;
    if (v59)
    {
      while (1)
      {
        unint64_t v62 = v13 - 1;
        if (v13 >= 4)
        {
          long long v67 = &v60[16 * v13];
          uint64_t v68 = *((void *)v67 - 8);
          uint64_t v69 = *((void *)v67 - 7);
          BOOL v73 = __OFSUB__(v69, v68);
          uint64_t v70 = v69 - v68;
          if (v73) {
            goto LABEL_113;
          }
          uint64_t v72 = *((void *)v67 - 6);
          uint64_t v71 = *((void *)v67 - 5);
          BOOL v73 = __OFSUB__(v71, v72);
          uint64_t v65 = v71 - v72;
          char v66 = v73;
          if (v73) {
            goto LABEL_114;
          }
          unint64_t v74 = v13 - 2;
          long long v75 = &v60[16 * v13 - 32];
          uint64_t v77 = *(void *)v75;
          uint64_t v76 = *((void *)v75 + 1);
          BOOL v73 = __OFSUB__(v76, v77);
          uint64_t v78 = v76 - v77;
          if (v73) {
            goto LABEL_116;
          }
          BOOL v73 = __OFADD__(v65, v78);
          uint64_t v79 = v65 + v78;
          if (v73) {
            goto LABEL_119;
          }
          if (v79 >= v70)
          {
            uint64_t v97 = &v60[16 * v62];
            uint64_t v99 = *(void *)v97;
            uint64_t v98 = *((void *)v97 + 1);
            BOOL v73 = __OFSUB__(v98, v99);
            uint64_t v100 = v98 - v99;
            if (v73) {
              goto LABEL_123;
            }
            BOOL v90 = v65 < v100;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v91 = *((void *)v12 + 4);
            uint64_t v92 = *((void *)v12 + 5);
            BOOL v73 = __OFSUB__(v92, v91);
            uint64_t v84 = v92 - v91;
            char v85 = v73;
            goto LABEL_77;
          }
          uint64_t v64 = *((void *)v12 + 4);
          uint64_t v63 = *((void *)v12 + 5);
          BOOL v73 = __OFSUB__(v63, v64);
          uint64_t v65 = v63 - v64;
          char v66 = v73;
        }
        if (v66) {
          goto LABEL_115;
        }
        unint64_t v74 = v13 - 2;
        simd_float4 v80 = &v60[16 * v13 - 32];
        uint64_t v82 = *(void *)v80;
        uint64_t v81 = *((void *)v80 + 1);
        BOOL v83 = __OFSUB__(v81, v82);
        uint64_t v84 = v81 - v82;
        char v85 = v83;
        if (v83) {
          goto LABEL_118;
        }
        uint64_t v86 = &v60[16 * v62];
        uint64_t v88 = *(void *)v86;
        uint64_t v87 = *((void *)v86 + 1);
        BOOL v73 = __OFSUB__(v87, v88);
        uint64_t v89 = v87 - v88;
        if (v73) {
          goto LABEL_121;
        }
        if (__OFADD__(v84, v89)) {
          goto LABEL_122;
        }
        if (v84 + v89 >= v65)
        {
          BOOL v90 = v65 < v89;
LABEL_83:
          if (v90) {
            unint64_t v62 = v74;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v85) {
          goto LABEL_117;
        }
        uint64_t v93 = &v60[16 * v62];
        uint64_t v95 = *(void *)v93;
        uint64_t v94 = *((void *)v93 + 1);
        BOOL v73 = __OFSUB__(v94, v95);
        uint64_t v96 = v94 - v95;
        if (v73) {
          goto LABEL_120;
        }
        if (v96 < v84) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v101 = v62 - 1;
        if (v62 - 1 >= v13)
        {
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }
        if (!v11) {
          goto LABEL_135;
        }
        char v102 = &v60[16 * v101];
        uint64_t v103 = *(void *)v102;
        long long v104 = &v60[16 * v62];
        uint64_t v105 = *((void *)v104 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((float *)(v11 + 48 * *(void *)v102), (float *)(v11 + 48 * *(void *)v104), v11 + 48 * v105, v123, a2);
        if (v2) {
          goto LABEL_93;
        }
        if (v105 < v103) {
          goto LABEL_110;
        }
        if (v62 > *((void *)v12 + 2)) {
          goto LABEL_111;
        }
        *(void *)char v102 = v103;
        *(void *)&v60[16 * v101 + 8] = v105;
        unint64_t v106 = *((void *)v12 + 2);
        if (v62 >= v106) {
          goto LABEL_112;
        }
        unint64_t v13 = v106 - 1;
        memmove(&v60[16 * v62], v104 + 16, 16 * (v106 - 1 - v62));
        *((void *)v12 + 2) = v106 - 1;
        uint64_t v11 = v122;
        if (v106 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v4 = v121;
    if (v10 >= v121)
    {
      uint64_t v9 = v119;
      goto LABEL_96;
    }
  }
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, float *a5)
{
  if (a3 != a2)
  {
    uint64_t v5 = *a4;
    float v6 = a5[24];
    float v7 = a5[25];
    float v8 = a5[26];
    uint64_t v9 = *a4 + 48 * a3 + 40;
LABEL_5:
    long long v10 = *(_OWORD *)(v5 + 48 * a3 + 16);
    float v11 = v7 - COERCE_FLOAT(HIDWORD(*(void *)(v5 + 48 * a3 + 16)));
    float v12 = v8 - COERCE_FLOAT(*(void *)(v5 + 48 * a3 + 24));
    float v13 = sqrtf((float)(v12 * v12)+ (float)((float)((float)(v6 - *(float *)&v10) * (float)(v6 - *(float *)&v10)) + (float)(v11 * v11)));
    uint64_t v14 = result;
    uint64_t v15 = (float *)v9;
    while (1)
    {
      if (v13 >= sqrtf((float)((float)(v8 - *(v15 - 16)) * (float)(v8 - *(v15 - 16)))+ (float)((float)((float)(v6 - *(v15 - 18)) * (float)(v6 - *(v15 - 18)))+ (float)((float)(v7 - *(v15 - 17)) * (float)(v7 - *(v15 - 17))))))
      {
LABEL_4:
        ++a3;
        v9 += 48;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      unint64_t v16 = v15 - 10;
      float v17 = v15 - 22;
      long long v19 = *(_OWORD *)(v15 - 18);
      long long v18 = *(_OWORD *)(v15 - 14);
      *((void *)v15 - 6) = *(void *)v15;
      v15 -= 12;
      uint64_t v20 = *((void *)v15 + 1);
      uint64_t v21 = *((void *)v15 + 5);
      *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v19;
      *((_OWORD *)v16 + 2) = v18;
      *((void *)v15 - 5) = v20;
      *(_OWORD *)(v15 - 6) = v10;
      *((void *)v15 - 1) = v21;
      if (a3 == ++v14) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(float *__src, float *a2, unint64_t a3, float *__dst, float *a5)
{
  float v6 = __dst;
  float v8 = a2;
  uint64_t v9 = __src;
  int64_t v10 = (char *)a2 - (char *)__src;
  int64_t v11 = ((char *)a2 - (char *)__src) / 48;
  uint64_t v12 = a3 - (void)a2;
  uint64_t v13 = (uint64_t)(a3 - (void)a2) / 48;
  long long v36 = __src;
  uint64_t v35 = __dst;
  if (v11 >= v13)
  {
    if (v12 < -47) {
      goto LABEL_44;
    }
    if (__dst != a2 || &a2[12 * v13] <= __dst) {
      memmove(__dst, a2, 48 * v13);
    }
    float v23 = &v6[12 * v13];
    uint64_t v34 = v23;
    long long v36 = v8;
    if (v9 >= v8 || v12 < 48)
    {
LABEL_43:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v36, (const void **)&v35, &v34);
      return 1;
    }
    float v24 = a5[24];
    float v25 = a5[25];
    float v26 = (float *)(a3 - 48);
    float v27 = a5[26];
    while (1)
    {
      float v28 = v26 + 12;
      if (sqrtf((float)((float)(v27 - *(v23 - 6)) * (float)(v27 - *(v23 - 6)))+ (float)((float)((float)(v24 - *(v23 - 8)) * (float)(v24 - *(v23 - 8)))+ (float)((float)(v25 - *(v23 - 7)) * (float)(v25 - *(v23 - 7))))) >= sqrtf((float)((float)(v27 - *(v8 - 6))* (float)(v27 - *(v8 - 6)))+ (float)((float)((float)(v24 - *(v8 - 8)) * (float)(v24 - *(v8 - 8)))+ (float)((float)(v25 - *(v8 - 7)) * (float)(v25 - *(v8 - 7))))))
      {
        uint64_t v29 = v23 - 12;
        if (v28 != v23)
        {
          v23 -= 12;
          goto LABEL_39;
        }
        BOOL v30 = v26 >= v23;
        v23 -= 12;
        if (v30) {
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v29 = v8 - 12;
        if (v28 != v8)
        {
          v8 -= 12;
LABEL_39:
          long long v31 = *(_OWORD *)v29;
          long long v32 = *((_OWORD *)v29 + 2);
          *((_OWORD *)v26 + 1) = *((_OWORD *)v29 + 1);
          *((_OWORD *)v26 + 2) = v32;
          *(_OWORD *)float v26 = v31;
          goto LABEL_40;
        }
        BOOL v30 = v26 >= v8;
        v8 -= 12;
        if (v30) {
          goto LABEL_39;
        }
      }
LABEL_40:
      if (v23 > v6)
      {
        v26 -= 12;
        if (v8 > v9) {
          continue;
        }
      }
      uint64_t v34 = v23;
      long long v36 = v8;
      goto LABEL_43;
    }
  }
  if (v10 >= -47)
  {
    if (__dst != __src || &__src[12 * v11] <= __dst) {
      memmove(__dst, __src, 48 * v11);
    }
    uint64_t v14 = &v6[12 * v11];
    uint64_t v34 = v14;
    if ((unint64_t)v8 < a3 && v10 >= 48)
    {
      float v15 = a5[24];
      float v16 = a5[25];
      float v17 = v6;
      float v18 = a5[26];
      while (1)
      {
        if (sqrtf((float)((float)(v18 - v8[6]) * (float)(v18 - v8[6]))+ (float)((float)((float)(v15 - v8[4]) * (float)(v15 - v8[4]))+ (float)((float)(v16 - v8[5]) * (float)(v16 - v8[5])))) >= sqrtf((float)((float)(v18 - v17[6])* (float)(v18 - v17[6]))+ (float)((float)((float)(v15 - v17[4])* (float)(v15 - v17[4]))+ (float)((float)(v16 - v17[5])* (float)(v16 - v17[5])))))
        {
          float v6 = v17 + 12;
          uint64_t v20 = v17;
          long long v19 = v8;
          if (v9 == v17)
          {
            v17 += 12;
            if (v9 < v6) {
              goto LABEL_18;
            }
          }
          else
          {
            v17 += 12;
          }
        }
        else
        {
          long long v19 = v8 + 12;
          uint64_t v20 = v8;
          if (v9 == v8 && v9 < v19) {
            goto LABEL_18;
          }
        }
        long long v21 = *(_OWORD *)v20;
        long long v22 = *((_OWORD *)v20 + 2);
        *((_OWORD *)v9 + 1) = *((_OWORD *)v20 + 1);
        *((_OWORD *)v9 + 2) = v22;
        *(_OWORD *)uint64_t v9 = v21;
LABEL_18:
        v9 += 12;
        if (v17 < v14)
        {
          float v8 = v19;
          if ((unint64_t)v19 < a3) {
            continue;
          }
        }
        uint64_t v35 = v6;
        long long v36 = v9;
        goto LABEL_43;
      }
    }
    goto LABEL_43;
  }
LABEL_44:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
      int64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  int64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -48)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 48;
    if (result != v3 || result >= &v3[48 * v6])
    {
      return (char *)memmove(result, v3, 48 * v6);
    }
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized static DynamicScanVolumeEstimator.makeDebugEllipsoidEntity()()
{
  uint64_t v0 = type metadata accessor for UnlitMaterial();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  int64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithRed_green_blue_alpha_, 0.0, 1.0, 0.0, 0.8);
  UnlitMaterial.init(color:)();
  type metadata accessor for MeshResource();
  static MeshResource.generateSphere(radius:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2466B5E00;
  uint64_t v5 = MEMORY[0x263F16178];
  *(void *)(v4 + 56) = v0;
  *(void *)(v4 + 64) = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v1 + 16))(boxed_opaque_existential_1, v3, v0);
  type metadata accessor for ModelEntity();
  swift_allocObject();
  swift_retain();
  ModelEntity.init(mesh:materials:)();
  type metadata accessor for Entity();
  swift_allocObject();
  uint64_t v7 = Entity.init()();
  HasHierarchy.addChild(_:preservingWorldTransform:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v7;
}

uint64_t specialized static DynamicScanVolumeEstimator.makeBoxEntity()()
{
  uint64_t v0 = type metadata accessor for MaterialScalarParameter();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = type metadata accessor for SimpleMaterial();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithRed_green_blue_alpha_, 0.0, 0.0, 1.0, 0.75);
  MaterialScalarParameter.init(integerLiteral:)();
  SimpleMaterial.init(color:roughness:isMetallic:)();
  type metadata accessor for MeshResource();
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static DynamicScanVolumeEstimator.makeBoxEntity());
  static MeshResource.generateBox(size:cornerRadius:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2466B5E00;
  uint64_t v6 = MEMORY[0x263F16188];
  *(void *)(v5 + 56) = v1;
  *(void *)(v5 + 64) = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v5 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v2 + 16))(boxed_opaque_existential_1, v4, v1);
  type metadata accessor for ModelEntity();
  swift_allocObject();
  uint64_t v8 = ModelEntity.init(mesh:materials:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v8;
}

uint64_t specialized DynamicScanVolumeEstimator.attach(attacher:)(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 17) == 1)
  {
    DynamicScanVolumeEstimator.debugRootEntity.getter();
    DataModel.addToScene(entity:)();
    uint64_t result = swift_release();
  }
  if (*(unsigned char *)(v1 + 16) == 1)
  {
    DynamicScanVolumeEstimator.boxEntity.getter();
    DataModel.addToScene(entity:)();
    swift_release();
    DynamicScanVolumeEstimator.boxEntity.getter();
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of specialized DynamicScanVolumeEstimator.attach(attacher:));
    type metadata accessor for Entity();
    HasTransform.setPosition(_:relativeTo:)();
    swift_release();
    DynamicScanVolumeEstimator.boxEntity.getter();
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of specialized DynamicScanVolumeEstimator.attach(attacher:));
    HasTransform.setScale(_:relativeTo:)();
    return swift_release();
  }
  return result;
}

uint64_t specialized static DynamicScanVolumeEstimator.makeDebugSphereEntity(_:massToAssimilate:)(__n128 a1, double a2, float a3, float a4)
{
  __n128 v20 = a1;
  uint64_t v6 = type metadata accessor for UnlitMaterial();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v10 = 1.0;
  if ((float)(a3 / a4) <= 1.0) {
    float v10 = a3 / a4;
  }
  float v11 = 0.0;
  if ((float)(a3 / a4) > 0.0) {
    float v11 = v10;
  }
  double v12 = v11;
  double v13 = 1.0 - v11;
  id v14 = objc_allocWithZone(MEMORY[0x263F825C8]);
  objc_msgSend(v14, sel_initWithRed_green_blue_alpha_, v13, 0.0, v12, 1.0, *(_OWORD *)&v20);
  UnlitMaterial.init(color:)();
  type metadata accessor for MeshResource();
  static MeshResource.generateSphere(radius:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2466B5E00;
  uint64_t v16 = MEMORY[0x263F16178];
  *(void *)(v15 + 56) = v6;
  *(void *)(v15 + 64) = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v15 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(boxed_opaque_existential_1, v9, v6);
  type metadata accessor for ModelEntity();
  swift_allocObject();
  swift_retain();
  uint64_t v18 = ModelEntity.init(mesh:materials:)();
  HasTransform.setPosition(_:relativeTo:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v18;
}

void specialized DynamicScanVolumeEstimator.mergeSphereSamples(_:_:)(uint64_t a1@<X8>, float32x4_t a2@<Q0>, float a3@<S1>, float a4@<S2>, double a5@<D3>, float32x4_t a6@<Q4>, float a7@<S5>, float a8@<S6>, double a9@<D7>)
{
  uint64_t v10 = static DynamicScanVolumeEstimator.SphereSample.staticId + 1;
  if (__OFADD__(static DynamicScanVolumeEstimator.SphereSample.staticId, 1))
  {
    __break(1u);
  }
  else
  {
    *(float *)v9.i32 = a4 + a8;
    *(float32x2_t *)&long long v11 = vdiv_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a2.f32, a4), vmul_n_f32(*(float32x2_t *)a6.f32, a8)), (float32x2_t)vdup_lane_s32(v9, 0));
    float v12 = (float)(vmuls_lane_f32(a4, a2, 2) + vmuls_lane_f32(a8, a6, 2)) / (float)(a4 + a8);
    float v13 = sqrtf((float)((float)(v12 - a6.f32[2]) * (float)(v12 - a6.f32[2]))+ (float)((float)((float)(*(float *)&v11 - a6.f32[0]) * (float)(*(float *)&v11 - a6.f32[0]))+ (float)((float)(*((float *)&v11 + 1) - a6.f32[1]) * (float)(*((float *)&v11 + 1) - a6.f32[1]))));
    float v14 = sqrtf((float)((float)(v12 - a2.f32[2]) * (float)(v12 - a2.f32[2]))+ (float)((float)((float)(*(float *)&v11 - a2.f32[0]) * (float)(*(float *)&v11 - a2.f32[0]))+ (float)((float)(*((float *)&v11 + 1) - a2.f32[1]) * (float)(*((float *)&v11 + 1) - a2.f32[1]))));
    if (a5 <= a9) {
      a5 = a9;
    }
    float v15 = v14 + a3;
    *((void *)&v11 + 1) = LODWORD(v12);
    ++static DynamicScanVolumeEstimator.SphereSample.staticId;
    *(void *)a1 = v10;
    *(_OWORD *)(a1 + 16) = v11;
    if (v15 <= (float)(v13 + a7)) {
      float v15 = v13 + a7;
    }
    *(float *)(a1 + 32) = v15;
    *(_DWORD *)(a1 + 36) = v9.i32[0];
    *(double *)(a1 + 40) = a5;
  }
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, void *a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v4 = 0;
  uint64_t v5 = result + 32;
  __n128 v20 = a2 + 10;
  uint64_t v6 = MEMORY[0x263F8EE78];
  do
  {
    if (v4 <= v2) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v4;
    }
    for (unint64_t i = v4; ; ++i)
    {
      if (i == v7) {
        goto LABEL_25;
      }
      uint64_t v9 = *(void *)(v5 + 48 * i);
      unint64_t v4 = i + 1;
      uint64_t v10 = a2[2];
      if (!v10) {
        goto LABEL_16;
      }
      if (a2[4] != v9) {
        break;
      }
LABEL_7:
      if (v4 == v2) {
        return v6;
      }
    }
    if (v10 != 1)
    {
      long long v11 = v20;
      uint64_t v12 = 1;
      while (1)
      {
        uint64_t v13 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          break;
        }
        if (*v11 == v9) {
          goto LABEL_7;
        }
        ++v12;
        v11 += 6;
        if (v13 == v10) {
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
LABEL_16:
    uint64_t v14 = v5 + 48 * i;
    uint64_t v16 = *(void *)(v14 + 32);
    uint64_t v15 = *(void *)(v14 + 40);
    long long v21 = *(_OWORD *)(v14 + 16);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
    }
    unint64_t v18 = *(void *)(v6 + 16);
    unint64_t v17 = *(void *)(v6 + 24);
    if (v18 >= v17 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
    }
    *(void *)(v6 + 16) = v18 + 1;
    uint64_t v19 = v6 + 48 * v18;
    *(void *)(v19 + 32) = v9;
    *(_OWORD *)(v19 + 48) = v21;
    *(void *)(v19 + 64) = v16;
    *(void *)(v19 + 72) = v15;
  }
  while (v4 != v2);
  return v6;
}

uint64_t specialized static DynamicScanVolumeEstimator.computeSphereCenterBasedOnPolicy(hit:sphereRadius:cameraRayWorld:policy:)(uint64_t a1, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return CollisionCastHit.position.getter();
  }
  CollisionCastHit.position.getter();
  return CollisionCastHit.normal.getter();
}

uint64_t specialized static DynamicScanVolumeEstimator.performSphereRaycast(clipSpacePoint:withinRange:radiusPerMeter:in:collisionPolicy:)(double a1, float a2, float a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x270FA5388](v9 - 8);
  long long v11 = (char *)&v22[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CollisionCastHit();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v22[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RangefinderManager();
  dispatch thunk of ARView.scene.getter();
  static RangefinderManager.raycastOntoScene(clipSpacePoint:scene:maxDistance:)((uint64_t)v11, a1);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of CollisionCastHit?((uint64_t)v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    CollisionCastHit.distance.getter();
    if (v16 >= a2 && v16 < a3)
    {
      dispatch thunk of ARView.scene.getter();
      specialized static RangefinderManager.worldRayThrough(clipSpacePoint:scene:)(v22, a1);
      swift_release();
      outlined init with take of Animation?((uint64_t)v22, (uint64_t)v23, &demangling cache variable for type metadata for Ray3D?);
      if ((v25 & 1) == 0)
      {
        long long v21 = v24;
        CollisionCastHit.distance.getter();
        specialized static DynamicScanVolumeEstimator.computeSphereCenterBasedOnPolicy(hit:sphereRadius:cameraRayWorld:policy:)((uint64_t)v15, a5);
        long long v21 = v20;
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
        char v19 = 0;
        uint64_t result = v21;
        goto LABEL_11;
      }
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  uint64_t result = 0;
  char v19 = 1;
LABEL_11:
  v23[0] = v19;
  return result;
}

uint64_t outlined destroy of CollisionCastHit?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicScanVolumeEstimator.BoxAlgorithm(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DynamicScanVolumeEstimator.BoxAlgorithm(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2465F0E50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for DynamicScanVolumeEstimator.BoxAlgorithm(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicScanVolumeEstimator.BoxAlgorithm()
{
  return &type metadata for DynamicScanVolumeEstimator.BoxAlgorithm;
}

unint64_t lazy protocol witness table accessor for type DynamicScanVolumeEstimator.BoxAlgorithm and conformance DynamicScanVolumeEstimator.BoxAlgorithm()
{
  unint64_t result = lazy protocol witness table cache variable for type DynamicScanVolumeEstimator.BoxAlgorithm and conformance DynamicScanVolumeEstimator.BoxAlgorithm;
  if (!lazy protocol witness table cache variable for type DynamicScanVolumeEstimator.BoxAlgorithm and conformance DynamicScanVolumeEstimator.BoxAlgorithm)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicScanVolumeEstimator.BoxAlgorithm and conformance DynamicScanVolumeEstimator.BoxAlgorithm);
  }
  return result;
}

uint64_t ResolvedModel3D.resizable(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  long long v5 = *(_OWORD *)(v2 + 32);
  long long v6 = *(_OWORD *)(v2 + 48);
  *(void *)a2 = *(void *)v2;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)(a2 + 48) = v6;
  *(unsigned char *)(a2 + 64) = a1;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedModel3D()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for ResolvedModel3D()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for ResolvedModel3D(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ResolvedModel3D(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

__n128 __swift_memcpy65_16(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ResolvedModel3D(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedModel3D(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedModel3D(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedModel3D()
{
  return &type metadata for ResolvedModel3D;
}

uint64_t sub_2465F1194()
{
  return MEMORY[0x263F1BA00];
}

uint64_t RealityView.body.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388]();
  long long v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v4 + 24);
  static ViewBuilder.buildExpression<A>(_:)(v1, v2, v7);
  static ViewBuilder.buildExpression<A>(_:)(v6, v2, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t RealityViewDefaultPlaceholder.body.getter()
{
  return MEMORY[0x270EFF3B8]();
}

uint64_t protocol witness for View.body.getter in conformance RealityViewDefaultPlaceholder()
{
  return MEMORY[0x270EFF3B8]();
}

uint64_t RealityViewContentProtocol.subscribe<A>(to:on:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(a7 + 48))(a1, a2, 0, 0, a3, a4, a6);
}

uint64_t RealityViewContentProtocol.subscribe<A>(to:componentType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 48))(a1, v10, a2, a3, a4, a5, a7, a9, a6, a8);
  return outlined destroy of EventSource?((uint64_t)v10);
}

uint64_t outlined destroy of EventSource?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EventSource?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t RealityViewEntityCollection.startIndex.getter()
{
  return RealityViewEntityCollection.startIndex.getter(MEMORY[0x263F16528]);
}

uint64_t RealityViewEntityCollection.endIndex.getter()
{
  return RealityViewEntityCollection.startIndex.getter(MEMORY[0x263F16540]);
}

uint64_t RealityViewEntityCollection.startIndex.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for Entity.ChildCollection();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  uint64_t v6 = HasHierarchy.children.getter();
  uint64_t v7 = a1(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

uint64_t RealityViewEntityCollection.count.getter()
{
  uint64_t v0 = type metadata accessor for Entity.ChildCollection();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v4 = dispatch thunk of Collection.distance(from:to:)();
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

unint64_t lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection;
  if (!lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection)
  {
    type metadata accessor for Entity.ChildCollection();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection);
  }
  return result;
}

uint64_t RealityViewEntityCollection.subscript.getter(uint64_t a1)
{
  return RealityViewEntityCollection.subscript.getter(a1, MEMORY[0x263F16560]);
}

Swift::Int __swiftcall RealityViewEntityCollection.index(after:)(Swift::Int after)
{
  return RealityViewEntityCollection.subscript.getter(after, MEMORY[0x263F16538]);
}

uint64_t RealityViewEntityCollection.subscript.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for Entity.ChildCollection();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  uint64_t v8 = a2(a1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t RealityViewEntityCollection.insert<A>(contentsOf:beforeIndex:)()
{
  uint64_t v0 = type metadata accessor for Entity.ChildCollection();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  Entity.ChildCollection.insert<A>(contentsOf:beforeIndex:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t RealityViewEntityCollection.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RealityViewEntityCollection.append<A>(contentsOf:)(a1, a2, a3, MEMORY[0x263F16510]);
}

uint64_t RealityViewEntityCollection.remove(_:)(uint64_t a1)
{
  return RealityViewEntityCollection.remove(_:)(a1, MEMORY[0x263F16520]);
}

Swift::Void __swiftcall RealityViewEntityCollection.remove(at:)(Swift::Int at)
{
}

uint64_t RealityViewEntityCollection.remove(_:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for Entity.ChildCollection();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  a2(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Void __swiftcall RealityViewEntityCollection.removeAll()()
{
  uint64_t v0 = type metadata accessor for Entity.ChildCollection();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  Entity.ChildCollection.removeAll()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t RealityViewEntityCollection.replaceAll<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RealityViewEntityCollection.append<A>(contentsOf:)(a1, a2, a3, MEMORY[0x263F16508]);
}

uint64_t RealityViewEntityCollection.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for Entity.ChildCollection();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  a4(a1, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t protocol witness for EntityCollection.append(_:) in conformance RealityViewEntityCollection()
{
  return MEMORY[0x270EFCB68]();
}

uint64_t protocol witness for EntityCollection.insert(_:beforeIndex:) in conformance RealityViewEntityCollection()
{
  return MEMORY[0x270EFCB70]();
}

uint64_t protocol witness for EntityCollection.remove(_:) in conformance RealityViewEntityCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for EntityCollection.remove(_:) in conformance RealityViewEntityCollection(a1, a2, a3, MEMORY[0x263F16520]);
}

uint64_t protocol witness for EntityCollection.remove(at:) in conformance RealityViewEntityCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for EntityCollection.remove(_:) in conformance RealityViewEntityCollection(a1, a2, a3, MEMORY[0x263F16518]);
}

uint64_t protocol witness for EntityCollection.remove(_:) in conformance RealityViewEntityCollection(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = type metadata accessor for Entity.ChildCollection();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  a4(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for EntityCollection.removeAll() in conformance RealityViewEntityCollection()
{
  uint64_t v0 = type metadata accessor for Entity.ChildCollection();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  Entity.ChildCollection.removeAll()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t protocol witness for EntityCollection.removeAll(where:) in conformance RealityViewEntityCollection()
{
  return EntityCollection.removeAll(where:)();
}

uint64_t protocol witness for Collection.startIndex.getter in conformance RealityViewEntityCollection@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for Collection.startIndex.getter in conformance RealityViewEntityCollection(MEMORY[0x263F16528], a1);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance RealityViewEntityCollection@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for Collection.startIndex.getter in conformance RealityViewEntityCollection(MEMORY[0x263F16540], a1);
}

uint64_t protocol witness for Collection.startIndex.getter in conformance RealityViewEntityCollection@<X0>(uint64_t (*a1)(uint64_t)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Entity.ChildCollection();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  uint64_t v8 = HasHierarchy.children.getter();
  uint64_t v9 = a1(v8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a2 = v9;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance RealityViewEntityCollection(uint64_t *a1))(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Entity.ChildCollection();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = malloc(*(void *)(v3 + 64));
  a1[1] = (uint64_t)v4;
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  uint64_t v5 = Entity.ChildCollection.subscript.getter();
  a1[2] = v5;
  (*(void (**)(void *, uint64_t))(v3 + 8))(v4, v2);
  *a1 = v5;
  return protocol witness for Collection.subscript.read in conformance RealityViewEntityCollection;
}

void protocol witness for Collection.subscript.read in conformance RealityViewEntityCollection(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  swift_release();

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance RealityViewEntityCollection@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], *v2, a2);
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v16 = a1;
  uint64_t v6 = type metadata accessor for Entity.ChildCollection();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  uint64_t v10 = Entity.ChildCollection.startIndex.getter();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v7 + 8);
  v11(v9, v6);
  HasHierarchy.children.getter();
  uint64_t v12 = Entity.ChildCollection.endIndex.getter();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v11)(v9, v6);
  if (v12 < v10)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v14 = v16;
  if (v10 > v16)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v12 >= v15)
  {
    a4[1] = v15;
    a4[2] = a3;
    *a4 = v14;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance RealityViewEntityCollection@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Entity.ChildCollection();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a1 = *v1;
  type metadata accessor for Entity();
  swift_retain();
  HasHierarchy.children.getter();
  uint64_t v7 = Entity.ChildCollection.startIndex.getter();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v4 + 8);
  v8(v6, v3);
  a1[1] = v7;
  HasHierarchy.children.getter();
  uint64_t v9 = Entity.ChildCollection.endIndex.getter();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v8)(v6, v3);
  a1[2] = v9;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance RealityViewEntityCollection()
{
  uint64_t v0 = type metadata accessor for Entity.ChildCollection();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  uint64_t v4 = Entity.ChildCollection.startIndex.getter();
  uint64_t v5 = *(void (**)(char *, uint64_t))(v1 + 8);
  v5(v3, v0);
  HasHierarchy.children.getter();
  uint64_t v6 = Entity.ChildCollection.endIndex.getter();
  v5(v3, v0);
  return v4 == v6;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance RealityViewEntityCollection(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance RealityViewEntityCollection@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X1>, Swift::Int *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Entity.ChildCollection();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    Swift::Int v11 = *a1;
    if (a2)
    {
      type metadata accessor for Entity();
      do
      {
        HasHierarchy.children.getter();
        Swift::Int v11 = Entity.ChildCollection.index(after:)(v11);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        --a2;
      }
      while (a2);
    }
    *a3 = v11;
  }
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance RealityViewEntityCollection@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)(Swift::Int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Entity.ChildCollection();
  uint64_t result = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      Swift::Int v11 = (void (**)(char *, uint64_t))(v8 + 8);
      while (a1 != a3)
      {
        type metadata accessor for Entity();
        HasHierarchy.children.getter();
        a1 = Entity.ChildCollection.index(after:)(a1);
        (*v11)(v10, v6);
        if (!--a2) {
          return a1;
        }
      }
      return 0;
    }
    return a1;
  }
  return result;
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance RealityViewEntityCollection(Swift::Int *a1, Swift::Int *a2)
{
  uint64_t v4 = type metadata accessor for Entity.ChildCollection();
  uint64_t result = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v9 = *a1;
  Swift::Int v10 = *a2;
  if (*a2 < v9)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if (v9 != v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v6 + 8);
    while (1)
    {
      uint64_t v11 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        break;
      }
      type metadata accessor for Entity();
      HasHierarchy.children.getter();
      Swift::Int v9 = Entity.ChildCollection.index(after:)(v9);
      uint64_t result = (*v13)(v8, v4);
      ++v12;
      if (v9 == v10) {
        return v11;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  return 0;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance RealityViewEntityCollection(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance RealityViewEntityCollection(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance RealityViewEntityCollection@<X0>(Swift::Int *a1@<X0>, Swift::Int *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Entity.ChildCollection();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v8 = *a1;
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  Swift::Int v9 = Entity.ChildCollection.index(after:)(v8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a2 = v9;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance RealityViewEntityCollection(Swift::Int *a1)
{
  uint64_t v2 = type metadata accessor for Entity.ChildCollection();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v6 = *a1;
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  Swift::Int v7 = Entity.ChildCollection.index(after:)(v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v7;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance RealityViewEntityCollection@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Entity.ChildCollection();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  Swift::Int v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  type metadata accessor for Entity();
  swift_retain();
  HasHierarchy.children.getter();
  uint64_t v8 = Entity.ChildCollection.startIndex.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t result = swift_release();
  *a1 = v7;
  a1[1] = v8;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance RealityViewEntityCollection()
{
  uint64_t v0 = type metadata accessor for Entity.ChildCollection();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v4 = dispatch thunk of Collection.distance(from:to:)();
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance RealityViewEntityCollection()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance RealityViewEntityCollection()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance RealityViewEntityCollection(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance RealityViewEntityCollection()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t RealityViewContentProtocol.add(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RealityViewContentProtocol.add(_:)(a1, a2, a3, MEMORY[0x263F16720]);
}

uint64_t RealityViewContentProtocol.remove(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RealityViewContentProtocol.add(_:)(a1, a2, a3, MEMORY[0x263F16728]);
}

uint64_t RealityViewContentProtocol.add(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  Swift::Int v6 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(a3 + 40))(v10);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  a4(a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  return v6(v10, 0);
}

uint64_t associated type witness table accessor for View.Body : View in RealityView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in RealityViewDefaultPlaceholder()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type RealityViewEntityCollection and conformance RealityViewEntityCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type RealityViewEntityCollection and conformance RealityViewEntityCollection;
  if (!lazy protocol witness table cache variable for type RealityViewEntityCollection and conformance RealityViewEntityCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityViewEntityCollection and conformance RealityViewEntityCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RealityViewEntityCollection and conformance RealityViewEntityCollection;
  if (!lazy protocol witness table cache variable for type RealityViewEntityCollection and conformance RealityViewEntityCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityViewEntityCollection and conformance RealityViewEntityCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RealityViewEntityCollection and conformance RealityViewEntityCollection;
  if (!lazy protocol witness table cache variable for type RealityViewEntityCollection and conformance RealityViewEntityCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityViewEntityCollection and conformance RealityViewEntityCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in RealityViewEntityCollection()
{
  return MEMORY[0x263F8D6E0];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in RealityViewEntityCollection()
{
  return lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type DefaultIndices<RealityViewEntityCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<RealityViewEntityCollection>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in RealityViewEntityCollection()
{
  return lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Slice<RealityViewEntityCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<RealityViewEntityCollection>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in RealityViewEntityCollection()
{
  return lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type IndexingIterator<RealityViewEntityCollection> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<RealityViewEntityCollection>);
}

uint64_t type metadata completion function for RealityView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RealityView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for RealityView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x2465F3464);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for RealityView()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for RealityViewDefaultPlaceholder()
{
  return &type metadata for RealityViewDefaultPlaceholder;
}

uint64_t dispatch thunk of RealityViewContentProtocol.entities.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of RealityViewContentProtocol.entities.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of RealityViewContentProtocol.entities.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of RealityViewContentProtocol.subscribe<A>(to:on:componentType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 48))();
}

ValueMetadata *type metadata accessor for RealityViewEntityCollection()
{
  return &type metadata for RealityViewEntityCollection;
}

uint64_t sub_2465F351C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_2465F3524()
{
  return lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type ProgressView<EmptyView, EmptyView> and conformance ProgressView<A, B>, &demangling cache variable for type metadata for ProgressView<EmptyView, EmptyView>);
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Entity.ChildCollection();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unsigned int v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v6 = dispatch thunk of Collection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (!v6) {
    return MEMORY[0x263F8EE78];
  }
  if (v6 <= 0)
  {
    unsigned int v7 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    unsigned int v7 = (void *)swift_allocObject();
    int64_t v8 = _swift_stdlib_malloc_size(v7);
    uint64_t v9 = v8 - 32;
    if (v8 < 32) {
      uint64_t v9 = v8 - 25;
    }
    uint64_t v7[2] = v6;
    __n128 v7[3] = (2 * (v9 >> 3)) | 1;
  }
  swift_retain();
  uint64_t v10 = specialized Sequence._copySequenceContents(initializing:)(&v13, (uint64_t)(v7 + 4), v6, a1);
  uint64_t result = swift_release();
  if (v10 == v6) {
    return (uint64_t)v7;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a3;
  uint64_t v7 = type metadata accessor for Entity.ChildCollection();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  swift_retain();
  HasHierarchy.children.getter();
  Swift::Int v11 = Entity.ChildCollection.startIndex.getter();
  float v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v10, v7);
  uint64_t result = swift_release();
  uint64_t v22 = a2;
  long long v20 = a1;
  if (!a2 || (a2 = v19) == 0)
  {
LABEL_6:
    unsigned int v14 = v20;
    *long long v20 = a4;
    v14[1] = v11;
    return a2;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    HasHierarchy.children.getter();
    uint64_t v13 = Entity.ChildCollection.endIndex.getter();
    v23(v10, v7);
    if (v11 == v13)
    {
      a2 = 0;
    }
    else
    {
      uint64_t v15 = a2;
      a2 = 0;
      uint64_t v21 = v15 - 1;
      uint64_t v16 = v23;
      while (1)
      {
        HasHierarchy.children.getter();
        float v23 = (void (*)(char *, uint64_t))Entity.ChildCollection.subscript.getter();
        v16(v10, v7);
        swift_retain();
        HasHierarchy.children.getter();
        Swift::Int v11 = Entity.ChildCollection.index(after:)(v11);
        v16(v10, v7);
        swift_release();
        *(void *)(v22 + 8 * a2) = v23;
        if (v21 == a2) {
          break;
        }
        HasHierarchy.children.getter();
        uint64_t v17 = Entity.ChildCollection.endIndex.getter();
        v16(v10, v7);
        ++a2;
        if (v11 == v17) {
          goto LABEL_6;
        }
      }
      a2 = v19;
    }
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void SphericalShellWavefrontAnimation.sample(at:startingAt:)(double a1, double a2)
{
  double v3 = (a1 - a2) / *(double *)(v2 + 40);
  float v4 = 0.0;
  float v5 = 0.0;
  if (v3 <= 0.0) {
    goto LABEL_8;
  }
  float v5 = 1.0;
  if (v3 > 1.0) {
    goto LABEL_3;
  }
  float v5 = v3;
  if (v5 <= 0.0)
  {
    float v4 = 0.0;
  }
  else
  {
    float v4 = 1.0;
    if (v5 <= 1.0) {
LABEL_3:
    }
      float v4 = v5;
  }
LABEL_8:
  float v6 = *(float *)(v2 + 52);
  float v7 = (float)((float)(*(float *)(v2 + 32) + v6)
             * (float)(1.0 - (float)((float)(1.0 - v4) * (float)((float)(1.0 - v4) * (float)(1.0 - v4)))))
     + 0.0;
  float v8 = 0.001;
  if (v6 > 0.001) {
    float v9 = *(float *)(v2 + 52);
  }
  else {
    float v9 = 0.001;
  }
  if (*(float *)(v2 + 48) > 0.001) {
    float v8 = *(float *)(v2 + 48);
  }
  if ((float)(v7 - (float)(v8 + (float)(v5 * (float)(v9 - v8)))) >= v7) {
    __break(1u);
  }
}

uint64_t SphericalShellWavefrontAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SphericalShellWavefrontAnimation()
{
  return self;
}

__n128 __swift_memcpy40_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SphericalShellWavefrontAnimation.Descriptor(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SphericalShellWavefrontAnimation.Descriptor(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SphericalShellWavefrontAnimation.Descriptor()
{
  return &type metadata for SphericalShellWavefrontAnimation.Descriptor;
}

ValueMetadata *type metadata accessor for Ellipsoid()
{
  return &type metadata for Ellipsoid;
}

uint64_t Ellipsoid.computeAABB()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
  float32x4_t v6 = *(float32x4_t *)(v0 + 80);
  long long v7 = *(_OWORD *)(v0 + 96);
  double v2 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)(v0 + 96), v6);
  *(_DWORD *)(inited + 32) = LODWORD(v2);
  specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v7, v6);
  *(_DWORD *)(inited + 36) = v3;
  specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v7, v6);
  *(_DWORD *)(inited + 40) = v4;
  specialized SIMD.init<A>(_:)(inited);
  swift_setDeallocating();
  return BoundingBox.init(min:max:)();
}

__n128 Ellipsoid.gravityAlignedBox.getter()
{
  uint64_t v0 = (float32x4_t *)Ellipsoid.createSurfaceSamples(radialSegments:verticalSegments:)(100, 100);
  int64_t v1 = v0[1].i64[0];
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    *(void *)&v31[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = *(void *)&v31[0];
    int v3 = (int32x4_t *)&v0[2];
    unint64_t v4 = *(void *)(*(void *)&v31[0] + 16);
    int32x4_t v5 = 0uLL;
    do
    {
      int32x4_t v6 = *v3;
      *(void *)&v31[0] = v2;
      unint64_t v7 = *(void *)(v2 + 24);
      if (v4 >= v7 >> 1)
      {
        int32x4_t v29 = v6;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v4 + 1, 1);
        int32x4_t v6 = v29;
        int32x4_t v5 = 0uLL;
        uint64_t v2 = *(void *)&v31[0];
      }
      *(void *)(v2 + 16) = v4 + 1;
      *(int32x4_t *)(v2 + 16 * v4 + 32) = vtrn2q_s32(vrev64q_s32(v6), v5);
      ++v3;
      ++v4;
      --v1;
    }
    while (v1);
  }
  specialized static MathHelpers.computeSampleMeanAndCovarianceMatrix(data:)(v2, v31);
  long long v25 = v31[0];
  int8x16_t v27 = (int8x16_t)v31[3];
  int8x16_t v30 = (int8x16_t)v31[1];
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B7740;
  *(int32x2_t *)(inited + 32) = vzip1_s32(*(int32x2_t *)v30.i8, *(int32x2_t *)v27.i8);
  specialized SIMD.init<A>(_:)(inited);
  double v10 = v9;
  swift_setDeallocating();
  uint64_t v11 = swift_initStackObject();
  *(_OWORD *)(v11 + 16) = xmmword_2466B7740;
  *(int32x2_t *)(v11 + 32) = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
  specialized SIMD.init<A>(_:)(v11);
  double v13 = v12;
  swift_setDeallocating();
  specialized static MathHelpers.computeEigenvectorsOfSymmetric2x2Matrix(_:)(v10, v13);
  float32x2_t v15 = v14;
  v30.i64[0] = v16;
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_2466B7740;
  *(float32x2_t *)(v17 + 32) = vsqrt_f32(v15);
  specialized SIMD.init<A>(_:)(v17);
  v27.i64[0] = v18;
  swift_setDeallocating();
  v15.i32[0] = atan2f(*(float *)v30.i32, *(float *)&v30.i32[1]);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of Ellipsoid.gravityAlignedBox.getter);
  __sincosf_stret(v15.f32[0] * 0.5);
  LODWORD(v26) = specialized static MathHelpers.minAndMaxOver(points:)(v0).i32[1];
  float v24 = v19;
  swift_bridgeObjectRelease();
  Transform.init()();
  uint64_t v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_2466B5DE0;
  *(float *)(v20 + 32) = *(float *)v27.i32 + *(float *)v27.i32;
  *(float *)(v20 + 36) = v24 - v26;
  *(float *)(v20 + 40) = *(float *)&v27.i32[1] + *(float *)&v27.i32[1];
  specialized SIMD.init<A>(_:)(v20);
  long long v28 = v21;
  swift_setDeallocating();
  uint64_t v22 = swift_initStackObject();
  *(_OWORD *)(v22 + 16) = xmmword_2466B5DE0;
  *(_DWORD *)(v22 + 32) = v25;
  *(float *)(v22 + 36) = (float)(v24 + v26) * 0.5;
  *(_DWORD *)(v22 + 40) = DWORD2(v25);
  specialized SIMD.init<A>(_:)(v22);
  swift_setDeallocating();
  return (__n128)v28;
}

float Ellipsoid.signedDistanceField(at:)(__n128 a1)
{
  float32x4_t v9 = *v1;
  float32x4_t v10 = v1[1];
  float32x4_t v11 = v1[2];
  float32x4_t v12 = v1[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B5DF0;
  *(void *)(inited + 32) = a1.n128_u64[0];
  *(_DWORD *)(inited + 40) = a1.n128_u32[2];
  *(_DWORD *)(inited + 44) = 1065353216;
  specialized SIMD.init<A>(_:)(inited);
  float32x4_t v8 = v3;
  swift_setDeallocating();
  float32x4_t v4 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, v8.f32[0]), v10, *(float32x2_t *)v8.f32, 1), v11, v8, 2), v12, v8, 3);
  float32x4_t v5 = vmulq_f32(v4, v4);
  return sqrtf(v5.f32[2] + vaddv_f32(*(float32x2_t *)v5.f32)) + -1.0;
}

uint64_t Ellipsoid.createSurfaceSamples(radialSegments:verticalSegments:)(uint64_t a1, uint64_t a2)
{
  float32x4_t v3 = v2;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of Ellipsoid.createSurfaceSamples(radialSegments:verticalSegments:));
  uint64_t v7 = Sphere.createSurfaceSamples(radialSegments:verticalSegments:)(a1, a2, v6, 1.0);
  int64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v28 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    *(double *)v9.i64 = simd_matrix4x4(v3[5]);
    float32x4_t v25 = v10;
    float32x4_t v26 = v9;
    float32x4_t v23 = v12;
    float32x4_t v24 = v11;
    uint64_t v13 = 0;
    uint64_t v14 = v28;
    do
    {
      float32x4_t v27 = *(float32x4_t *)(v7 + 16 * v13 + 32);
      simd_float4x4.scale(_:)();
      SIMD4<>._xyz.getter();
      SIMD4<>._xyz.setter();
      float32x4_t v15 = v26;
      float32x4_t v16 = v25;
      float32x4_t v17 = v24;
      float32x4_t v18 = v23;
      unint64_t v20 = *(void *)(v28 + 16);
      unint64_t v19 = *(void *)(v28 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        float32x4_t v15 = v26;
        float32x4_t v16 = v25;
        float32x4_t v18 = v23;
        float32x4_t v17 = v24;
      }
      float32x4_t v21 = vaddq_f32(v18, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, v27.f32[0]), v16, *(float32x2_t *)v27.f32, 1), v17, v27, 2));
      ++v13;
      v21.i32[3] = 0;
      *(void *)(v28 + 16) = v20 + 1;
      *(float32x4_t *)(v28 + 16 * v20 + 32) = v21;
    }
    while (v8 != v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v14;
}

double simd_matrix4x4(float32x4_t a1)
{
  _S3 = a1.i32[1];
  _S5 = a1.i32[2];
  __asm { FMLS            S1, S5, V0.S[2] }
  _S7 = a1.i32[3];
  __asm { FMLA            S1, S7, V0.S[3] }
  float v10 = vmlas_n_f32(vmuls_lane_f32(a1.f32[2], a1, 3), a1.f32[1], a1.f32[0]);
  LODWORD(v11) = _S1;
  *((float *)&v11 + 1) = v10 + v10;
  __asm
  {
    FMLA            S6, S3, V0.S[1]
    FMLA            S6, S7, V0.S[3]
    FMLS            S6, S0, V0.S[0]
    FMLA            S18, S5, V0.S[1]
    FMLA            S17, S0, V0.S[2]
    FMLA            S16, S5, V0.S[1]
    FMLA            S7, S5, V0.S[2]
    FMLS            S7, S0, V0.S[0]
    FMLS            S7, S3, V0.S[1]
  }
  return v11;
}

__n128 specialized Ellipsoid.init(inscribedIn:)@<Q0>(uint64_t a1@<X8>)
{
  BoundingBox.center.getter();
  __n128 v9 = v2;
  BoundingBox.extents.getter();
  *(float32x2_t *)&long long v4 = vmul_f32(*(float32x2_t *)v3.f32, (float32x2_t)0x3F0000003F000000);
  *((void *)&v4 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(0.5, v3, 2));
  long long v8 = v4;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of Ellipsoid.init(inscribedIn:));
  v5.i32[3] = 1.0;
  float32x4_t v7 = v5;
  static simd_quatf.identity.getter();
  *(double *)v10.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(v9.n128_f64[0], v7);
  *(simd_float4x4 *)a1 = __invert_f4(v10);
  *(_OWORD *)(a1 + 64) = v8;
  *(float32x4_t *)(a1 + 80) = v7;
  __n128 result = v9;
  *(__n128 *)(a1 + 96) = v9;
  return result;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x4179746976617267;
  }
  else {
    uint64_t v3 = 0x67696C4173697861;
  }
  if (v2) {
    unint64_t v4 = 0xEB0000000064656ELL;
  }
  else {
    unint64_t v4 = 0xEE0064656E67696CLL;
  }
  if (a2) {
    uint64_t v5 = 0x4179746976617267;
  }
  else {
    uint64_t v5 = 0x67696C4173697861;
  }
  if (a2) {
    unint64_t v6 = 0xEE0064656E67696CLL;
  }
  else {
    unint64_t v6 = 0xEB0000000064656ELL;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x7365627563;
  }
  else {
    uint64_t v3 = 0x73746E696F70;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x7365627563;
  }
  else {
    uint64_t v5 = 0x73746E696F70;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0xD000000000000012;
  }
  else {
    uint64_t v3 = 0x6C6E4F73746F6873;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000079;
  }
  else {
    unint64_t v4 = 0x80000002466BE2B0;
  }
  if (a2) {
    uint64_t v5 = 0xD000000000000012;
  }
  else {
    uint64_t v5 = 0x6C6E4F73746F6873;
  }
  if (a2) {
    unint64_t v6 = 0x80000002466BE2B0;
  }
  else {
    unint64_t v6 = 0xE900000000000079;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 7957606;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 7957606;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0x80000002466BE2F0;
      unint64_t v5 = 0xD000000000000011;
      break;
    case 2:
      unint64_t v5 = 0x727554746962726FLL;
      unint64_t v3 = 0xEE00656C6261746ELL;
      break;
    case 3:
      unint64_t v5 = 0x637241746962726FLL;
      unint64_t v3 = 0xEC0000006C6C6162;
      break;
    case 4:
      unint64_t v5 = 0xD000000000000014;
      unint64_t v3 = 0x80000002466BE320;
      break;
    case 5:
      unint64_t v5 = 7233904;
      break;
    case 6:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x6B63757274;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0x80000002466BE2F0;
      if (v5 == 0xD000000000000011) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xEE00656C6261746ELL;
      if (v5 != 0x727554746962726FLL) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0xEC0000006C6C6162;
      if (v5 != 0x637241746962726FLL) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      unint64_t v6 = 0x80000002466BE320;
      if (v5 != 0xD000000000000014) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      uint64_t v2 = 7233904;
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x6B63757274) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

uint64_t _proto_RealityViewCameraController_v1.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  _proto_RealityViewCameraController_v1.init()();
  return v0;
}

double _proto_RealityViewCameraController_v1.init()()
{
  *(_WORD *)(v0 + 16) = 258;
  *(unsigned char *)(v0 + 18) = 0;
  double result = 0.0078125;
  *(_OWORD *)(v0 + 32) = xmmword_2466B5E50;
  *(_DWORD *)(v0 + 48) = 1020054733;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(unsigned char *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 112) = xmmword_2466B7750;
  *(void *)(v0 + 128) = 0x427000003DCCCCCDLL;
  *(_DWORD *)(v0 + 136) = 1101004800;
  *(void *)(v0 + 272) = 0;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(void *)(v0 + 256) = 0;
  *(_OWORD *)(v0 + 288) = xmmword_2466B5E50;
  *(_OWORD *)(v0 + 304) = xmmword_2466B5E50;
  *(_WORD *)(v0 + 320) = 0;
  *(void *)(v0 + 328) = 0;
  *(void *)(v0 + 336) = 0x3F8000003CCCCCCDLL;
  *(_DWORD *)(v0 + 344) = 1065353216;
  *(void *)(v0 + 352) = 0;
  *(_OWORD *)(v0 + 368) = xmmword_2466B5E50;
  *(_DWORD *)(v0 + 399) = 0;
  *(void *)(v0 + 384) = 0;
  *(void *)(v0 + 392) = 0;
  *(_DWORD *)(v0 + 404) = 1065353216;
  *(unsigned char *)(v0 + 408) = 0;
  *(void *)(v0 + 416) = 0;
  *(void *)(v0 + 424) = 0;
  *(void *)(v0 + 432) = 0xBFF0000000000000;
  return result;
}

void _proto_RealityViewCameraController_v1.InteractionMode.id.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

_RealityKit_SwiftUI::_proto_RealityViewCameraController_v1::InteractionMode_optional __swiftcall _proto_RealityViewCameraController_v1.InteractionMode.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of _proto_RealityViewCameraController_v1.InteractionMode.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 7;
  if (v5 < 7) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

void *static _proto_RealityViewCameraController_v1.InteractionMode.allCases.getter()
{
  return &outlined read-only object #0 of static _proto_RealityViewCameraController_v1.InteractionMode.allCases.getter;
}

unint64_t _proto_RealityViewCameraController_v1.InteractionMode.rawValue.getter()
{
  unint64_t result = 7957606;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x727554746962726FLL;
      break;
    case 3:
      unint64_t result = 0x637241746962726FLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 7233904;
      break;
    case 6:
      unint64_t result = 0x6B63757274;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _proto_RealityViewCameraController_v1.InteractionMode(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _proto_RealityViewCameraController_v1.InteractionMode()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance _proto_RealityViewCameraController_v1.InteractionMode()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _proto_RealityViewCameraController_v1.InteractionMode()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

_RealityKit_SwiftUI::_proto_RealityViewCameraController_v1::InteractionMode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance _proto_RealityViewCameraController_v1.InteractionMode(Swift::String *a1)
{
  return _proto_RealityViewCameraController_v1.InteractionMode.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance _proto_RealityViewCameraController_v1.InteractionMode@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = _proto_RealityViewCameraController_v1.InteractionMode.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance _proto_RealityViewCameraController_v1.InteractionMode(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static _proto_RealityViewCameraController_v1.InteractionMode.allCases.getter;
}

void protocol witness for Identifiable.id.getter in conformance _proto_RealityViewCameraController_v1.InteractionMode(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t _proto_RealityViewCameraController_v1.interactionMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t _proto_RealityViewCameraController_v1.interactionMode.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t (*_proto_RealityViewCameraController_v1.interactionMode.modify())()
{
  return _proto_RealityViewCameraController_v1.interactionMode.modify;
}

uint64_t _proto_RealityViewCameraController_v1.orbitTargetEntity.getter()
{
  return swift_retain();
}

uint64_t _proto_RealityViewCameraController_v1.orbitTargetEntity.setter(uint64_t a1)
{
  *(void *)(v1 + 416) = a1;
  swift_retain();
  uint64_t result = swift_release();
  if (a1)
  {
    type metadata accessor for Entity();
    swift_retain();
    HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)();
    __n128 v8 = v5;
    __n128 v9 = v4;
    uint64_t v6 = BoundingBox.center.getter();
    *(_OWORD *)(v1 + 96) = v7;
    *(float *)(v1 + 404) = MEMORY[0x24C530C60](v6, v9, v8);
    *(_OWORD *)(v1 + 112) = xmmword_2466B7750;
    if (*(void *)(v1 + 424))
    {
      swift_retain();
      Entity.update(from:overrideDistance:)(v1, 1);
      swift_release();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

void _proto_RealityViewCameraController_v1.frame(_:)()
{
  type metadata accessor for Entity();
  HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)();
  __n128 v5 = v2;
  __n128 v6 = v1;
  uint64_t v3 = BoundingBox.center.getter();
  *(_OWORD *)(v0 + 96) = v4;
  *(float *)(v0 + 404) = MEMORY[0x24C530C60](v3, v6, v5);
  *(_OWORD *)(v0 + 112) = xmmword_2466B7750;
  if (*(void *)(v0 + 424))
  {
    swift_retain();
    Entity.update(from:overrideDistance:)(v0, 1);
    swift_release();
  }
}

uint64_t (*_proto_RealityViewCameraController_v1.orbitTargetEntity.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(void *)(v1 + 416);
  a1[1] = v1;
  swift_retain();
  return _proto_RealityViewCameraController_v1.orbitTargetEntity.modify;
}

uint64_t _proto_RealityViewCameraController_v1.orbitTargetEntity.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return _proto_RealityViewCameraController_v1.orbitTargetEntity.setter(*a1);
  }
  uint64_t v2 = swift_retain();
  _proto_RealityViewCameraController_v1.orbitTargetEntity.setter(v2);

  return swift_release();
}

uint64_t _proto_RealityViewCameraController_v1.inertiaEnabled.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t _proto_RealityViewCameraController_v1.inertiaEnabled.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 17) = a1;
  return result;
}

uint64_t (*_proto_RealityViewCameraController_v1.inertiaEnabled.modify())()
{
  return FreeformMeshManager.meshAnchors.modify;
}

float _proto_RealityViewCameraController_v1.inertiaFriction.getter()
{
  swift_beginAccess();
  return *(float *)(v0 + 48);
}

uint64_t _proto_RealityViewCameraController_v1.inertiaFriction.setter(float a1)
{
  uint64_t result = swift_beginAccess();
  *(float *)(v1 + 48) = a1;
  return result;
}

uint64_t (*_proto_RealityViewCameraController_v1.inertiaFriction.modify())()
{
  return _proto_RealityViewCameraController_v1.interactionMode.modify;
}

uint64_t _proto_RealityViewCameraController_v1.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t _proto_RealityViewCameraController_v1.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t _proto_RealityViewCameraController_v1.transform.getter()
{
  if (!*(void *)(v0 + 424)) {
    return static Transform.identity.getter();
  }
  type metadata accessor for Entity();
  swift_retain();
  HasTransform.transform.getter();
  return swift_release();
}

uint64_t key path getter for _proto_RealityViewCameraController_v1.transform : _proto_RealityViewCameraController_v1@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(*(void *)a1 + 424))
  {
    type metadata accessor for Entity();
    swift_retain();
    HasTransform.transform.getter();
    long long v11 = v4;
    long long v12 = v3;
    long long v10 = v5;
    uint64_t result = swift_release();
    long long v8 = v10;
    long long v7 = v11;
    long long v9 = v12;
  }
  else
  {
    uint64_t result = static Transform.identity.getter();
  }
  *a2 = v9;
  a2[1] = v7;
  a2[2] = v8;
  return result;
}

uint64_t key path setter for _proto_RealityViewCameraController_v1.transform : _proto_RealityViewCameraController_v1(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)a2 + 424))
  {
    type metadata accessor for Entity();
    swift_retain();
    HasTransform.transform.setter();
    return swift_release();
  }
  return result;
}

uint64_t _proto_RealityViewCameraController_v1.transform.setter()
{
  if (*(void *)(v0 + 424))
  {
    type metadata accessor for Entity();
    swift_retain();
    HasTransform.transform.setter();
    return swift_release();
  }
  return result;
}

void (*_proto_RealityViewCameraController_v1.transform.modify(void *a1))(uint64_t a1)
{
  long long v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  if (*(void *)(v1 + 424))
  {
    type metadata accessor for Entity();
    swift_retain();
    HasTransform.transform.getter();
    long long v12 = v5;
    long long v13 = v4;
    long long v11 = v6;
    swift_release();
    long long v8 = v11;
    long long v7 = v12;
    long long v9 = v13;
  }
  else
  {
    static Transform.identity.getter();
  }
  *(_OWORD *)long long v3 = v9;
  *((_OWORD *)v3 + 1) = v7;
  *((_OWORD *)v3 + 2) = v8;
  return _proto_RealityViewCameraController_v1.transform.modify;
}

void _proto_RealityViewCameraController_v1.transform.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  if (*(void *)(*(void *)(*(void *)a1 + 48) + 424))
  {
    type metadata accessor for Entity();
    swift_retain();
    HasTransform.transform.setter();
    swift_release();
  }

  free(v1);
}

float _proto_RealityViewCameraController_v1.fieldOfView.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PerspectiveCameraComponent?);
  MEMORY[0x270FA5388](v1 - 8);
  long long v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Entity.ComponentSet();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(v0 + 424)) {
    return 0.0;
  }
  swift_retain();
  dispatch thunk of Entity.components.getter();
  uint64_t v8 = type metadata accessor for PerspectiveCameraComponent();
  Entity.ComponentSet.subscript.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  float v9 = 0.0;
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v3, 1, v8))
  {
    PerspectiveCameraComponent.fieldOfViewInDegrees.getter();
    float v9 = v10;
  }
  swift_release();
  outlined destroy of PerspectiveCameraComponent?((uint64_t)v3);
  return v9;
}

void _proto_RealityViewCameraController_v1.fieldOfView.setter()
{
  if (*(void *)(v0 + 424))
  {
    swift_retain();
    uint64_t v1 = (void (*)(unsigned char *, void))dispatch thunk of Entity.components.modify();
    uint64_t v2 = type metadata accessor for PerspectiveCameraComponent();
    long long v3 = (void (*)(uint64_t *, void))Entity.ComponentSet.subscript.modify();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v4, 1, v2)) {
      PerspectiveCameraComponent.fieldOfViewInDegrees.setter();
    }
    v3(&v5, 0);
    v1(v6, 0);
    swift_release();
  }
}

void (*_proto_RealityViewCameraController_v1.fieldOfView.modify(void *a1))(uint64_t *a1, char a2)
{
  long long v3 = malloc(0xA0uLL);
  *a1 = v3;
  v3[16] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PerspectiveCameraComponent?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[17] = v5;
  uint64_t v6 = type metadata accessor for Entity.ComponentSet();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  v3[18] = v8;
  if (*(void *)(v1 + 424))
  {
    float v9 = v8;
    swift_retain();
    dispatch thunk of Entity.components.getter();
    uint64_t v10 = type metadata accessor for PerspectiveCameraComponent();
    Entity.ComponentSet.subscript.getter();
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v11 = 0;
    if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v5, 1, v10))
    {
      PerspectiveCameraComponent.fieldOfViewInDegrees.getter();
      int v11 = v12;
    }
    swift_release();
    outlined destroy of PerspectiveCameraComponent?((uint64_t)v5);
  }
  else
  {
    int v11 = 0;
  }
  *((_DWORD *)v3 + 38) = v11;
  return _proto_RealityViewCameraController_v1.fieldOfView.modify;
}

void _proto_RealityViewCameraController_v1.fieldOfView.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*(void *)(*a1 + 128) + 424);
  if (a2)
  {
    if (!v3) {
      goto LABEL_11;
    }
    swift_retain();
    uint64_t v4 = (void (*)(uint64_t, void))dispatch thunk of Entity.components.modify();
    uint64_t v5 = type metadata accessor for PerspectiveCameraComponent();
    uint64_t v6 = (void (*)(uint64_t, void))Entity.ComponentSet.subscript.modify();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v7, 1, v5)) {
      PerspectiveCameraComponent.fieldOfViewInDegrees.setter();
    }
    v6(v2 + 32, 0);
    v4(v2, 0);
  }
  else
  {
    if (!v3) {
      goto LABEL_11;
    }
    swift_retain();
    uint64_t v8 = (void (*)(uint64_t, void))dispatch thunk of Entity.components.modify();
    uint64_t v9 = type metadata accessor for PerspectiveCameraComponent();
    uint64_t v10 = (void (*)(uint64_t, void))Entity.ComponentSet.subscript.modify();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v11, 1, v9)) {
      PerspectiveCameraComponent.fieldOfViewInDegrees.setter();
    }
    v10(v2 + 96, 0);
    v8(v2 + 64, 0);
  }
  swift_release();
LABEL_11:
  int v12 = *(void **)(v2 + 136);
  free(*(void **)(v2 + 144));
  free(v12);

  free((void *)v2);
}

uint64_t Entity.update(from:overrideDistance:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Entity.ComponentSet();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(unsigned char *)(a1 + 17) == 1)
  {
    dispatch thunk of Entity.components.getter();
    lazy protocol witness table accessor for type _RealityViewCameraControllerSystem and conformance _RealityViewCameraControllerSystem();
    swift_retain();
    static System.registerSystem()();
    v24[0] = partial apply for closure #1 in Entity.update(from:overrideDistance:);
    v24[1] = a1;
    lazy protocol witness table accessor for type _RealityViewCameraControllerComponent and conformance _RealityViewCameraControllerComponent();
    Entity.ComponentSet.set<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v10 = *(void *)(a1 + 424);
    if (!v10) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    long long v13 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
    lazy protocol witness table accessor for type _RealityViewCameraControllerComponent and conformance _RealityViewCameraControllerComponent();
    Entity.ComponentSet.subscript.setter();
    v13(v24, 0);
    uint64_t v10 = *(void *)(a1 + 424);
    if (!v10) {
      goto LABEL_6;
    }
  }
  v24[0] = v10;
  uint64_t v25 = v2;
  type metadata accessor for Entity();
  lazy protocol witness table accessor for type Entity and conformance Entity();
  swift_retain_n();
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  swift_release();
  if ((v11 & 1) == 0)
  {
LABEL_6:
    *(void *)(a1 + 424) = v3;
    swift_retain();
    swift_release();
    if (*(void *)(a1 + 416)) {
      goto LABEL_9;
    }
  }
  if ((a2 & 1) == 0)
  {
    type metadata accessor for Entity();
    HasTransform.position(relativeTo:)();
    *(float32x2_t *)&long long v12 = vsub_f32(*(float32x2_t *)&v12, *(float32x2_t *)(a1 + 96));
    *(float32x2_t *)&long long v12 = vmul_f32(*(float32x2_t *)&v12, *(float32x2_t *)&v12);
    *(float *)&long long v12 = sqrtf((float)((float)(*((float *)&v12 + 2) - *(float *)(a1 + 104))* (float)(*((float *)&v12 + 2) - *(float *)(a1 + 104)))+ vaddv_f32(*(float32x2_t *)&v12));
    goto LABEL_11;
  }
LABEL_9:
  *(float *)&long long v12 = *(float *)(a1 + 404) + *(float *)(a1 + 404);
  if (*(float *)&v12 <= 0.0001) {
    *(float *)&long long v12 = 0.0001;
  }
LABEL_11:
  long long v22 = v12;
  type metadata accessor for Entity();
  HasTransform.orientation(relativeTo:)();
  __n128 v23 = (__n128)v14;
  char v15 = _proto_RealityViewCameraController_v1.useOrbitInteractionMode.getter();
  __n128 v16 = v23;
  if (v15)
  {
    int32x4_t v17 = *(int32x4_t *)(a1 + 112);
    int32x4_t v18 = (int32x4_t)vnegq_f32((float32x4_t)v17);
    int8x16_t v19 = (int8x16_t)vtrn2q_s32(v17, vtrn1q_s32(v17, v18));
    float32x4_t v20 = (float32x4_t)vrev64q_s32(v17);
    v20.i32[0] = v18.i32[1];
    v20.i32[3] = v18.i32[2];
    __n128 v16 = (__n128)vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v17, (float32x4_t)v23, 3), v20, (float32x4_t)v23, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 8uLL), (float32x2_t)v23.n128_u64[0], 1), (float32x4_t)vextq_s8(v19, v19, 8uLL), v23.n128_f32[0]));
  }
  *(_OWORD *)(a1 + 112) = xmmword_2466B7750;
  MEMORY[0x24C5337A0](v16);
  return HasTransform.setTransformMatrix(_:relativeTo:)();
}

uint64_t outlined destroy of PerspectiveCameraComponent?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PerspectiveCameraComponent?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _RealityViewCameraControllerComponent and conformance _RealityViewCameraControllerComponent()
{
  unint64_t result = lazy protocol witness table cache variable for type _RealityViewCameraControllerComponent and conformance _RealityViewCameraControllerComponent;
  if (!lazy protocol witness table cache variable for type _RealityViewCameraControllerComponent and conformance _RealityViewCameraControllerComponent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _RealityViewCameraControllerComponent and conformance _RealityViewCameraControllerComponent);
  }
  return result;
}

Swift::Void __swiftcall _proto_RealityViewCameraController_v1.frame(_:)(Swift::OpaquePointer a1)
{
  BoundingBox.init()();
  __n128 v10 = v3;
  __n128 v11 = v4;
  if ((unint64_t)a1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    return;
  }
  if (((unint64_t)a1._rawValue & 0xC000000000000001) != 0)
  {
    uint64_t v6 = 0;
    do
    {
      MEMORY[0x24C533AF0](v6++, a1._rawValue);
      type metadata accessor for Entity();
      HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)();
      BoundingBox.formUnion(_:)();
      swift_unknownObjectRelease();
    }
    while (v5 != v6);
  }
  else
  {
    type metadata accessor for Entity();
    uint64_t v7 = 0;
    do
    {
      ++v7;
      swift_retain();
      HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)();
      BoundingBox.formUnion(_:)();
      swift_release();
    }
    while (v5 != v7);
  }
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v8 = BoundingBox.center.getter();
  *(_OWORD *)(v1 + 96) = v9;
  *(float *)(v1 + 404) = MEMORY[0x24C530C60](v8, v10, v11);
  *(_OWORD *)(v1 + 112) = xmmword_2466B7750;
  if (*(void *)(v1 + 424))
  {
    swift_retain();
    Entity.update(from:overrideDistance:)(v1, 1);
    swift_release();
  }
}

Swift::Void __swiftcall _proto_RealityViewCameraController_v1.updateInertia()()
{
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 17) != 1) {
    return;
  }
  double v1 = CACurrentMediaTime();
  double v2 = v1 - *(double *)(v0 + 328);
  if (v2 >= 1.0) {
    double v3 = 60.0;
  }
  else {
    double v3 = v2 * 60.0;
  }
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_28:
    __break(1u);
    JUMPOUT(0x2465F674CLL);
  }
  if ((uint64_t)v3 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = (uint64_t)v3;
  }
  *(double *)(v0 + 328) = v1;
  swift_beginAccess();
  float v5 = *(float *)(v0 + 48);
  v6.i64[0] = *(void *)(v0 + 352);
  if (v5 > 0.0)
  {
    do
    {
      if (v3 < 0.0) {
        double v7 = 0.0;
      }
      else {
        double v7 = v3;
      }
      if (v3 >= 1.0) {
        double v7 = 1.0;
      }
      float v8 = v7;
      *(float32x2_t *)v6.f32 = vmul_n_f32(*(float32x2_t *)v6.f32, 1.0 - (float)(v5 * v8));
      double v3 = v3 + -1.0;
      --v4;
    }
    while (v4);
    *(void *)(v0 + 352) = v6.i64[0];
  }
  *(float32x2_t *)v6.f32 = vadd_f32(*(float32x2_t *)(v0 + 304), vadd_f32(*(float32x2_t *)(v0 + 288), vmul_f32(*(float32x2_t *)v6.f32, (float32x2_t)vdup_n_s32(0x3C23D70Au))));
  v6.f32[2] = *(float *)(v0 + 312) + (float)(*(float *)(v0 + 296) + 0.0);
  int32x4_t v9 = (int32x4_t)vmulq_f32(v6, v6);
  v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
  float32x2_t v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  float32x2_t v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  *(float32x4_t *)(v0 + 304) = vmulq_n_f32(v6, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
  swift_beginAccess();
  switch(*(unsigned char *)(v0 + 16))
  {
    case 4:
LABEL_22:
      swift_bridgeObjectRelease();
      goto LABEL_24;
    default:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v12)
      {
LABEL_24:
        _proto_RealityViewCameraController_v1.updateArcballOrientation()();
      }
      else
      {
        switch(*(unsigned char *)(v0 + 16))
        {
          case 3:
            goto LABEL_22;
          default:
            char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v13) {
              goto LABEL_24;
            }
            break;
        }
      }
      break;
  }
}

Swift::Void __swiftcall _proto_RealityViewCameraController_v1.updateArcballOrientation()()
{
  uint64_t v1 = v0;
  double v2 = (unsigned char *)(v0 + 16);
  swift_beginAccess();
  switch(*(unsigned char *)(v1 + 16))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0)
      {
        switch(*v2)
        {
          case 2:
            goto LABEL_2;
          default:
            char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v4 & 1) == 0)
            {
              float32x4_t v6 = *(float32x4_t *)(v1 + 288);
              float32x4_t v5 = *(float32x4_t *)(v1 + 304);
              float32x4_t v7 = vsubq_f32(v6, v5);
              float v8 = fabsf(v7.f32[1]);
              BOOL v9 = fabsf(v7.f32[0]) < 0.0001 && v8 < 0.0001;
              float v10 = fabsf(v7.f32[2]);
              if (!v9 || v10 >= 0.0001)
              {
                float32x4_t v12 = vmulq_f32(v6, v5);
                LODWORD(v13) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).u32[0];
                if (fabsf(v13) < 1.0)
                {
                  int32x4_t v22 = *(int32x4_t *)(v1 + 288);
                  int32x4_t v24 = *(int32x4_t *)(v1 + 304);
                  float v14 = acosf(v13);
                  int32x4_t v15 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL), vnegq_f32((float32x4_t)v22)), (float32x4_t)v24, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v22, v22), (int8x16_t)v22, 0xCuLL));
                  float32x4_t v16 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v15, v15), (int8x16_t)v15, 0xCuLL);
                  int32x4_t v17 = (int32x4_t)vmulq_f32((float32x4_t)v15, (float32x4_t)v15);
                  v17.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), *(float32x2_t *)v17.i8)).u32[0];
                  float32x2_t v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
                  float32x2_t v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
                  float32x4_t v23 = vmulq_n_f32(v16, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
                  __float2 v20 = __sincosf_stret((float)(v14 * -2.0) * 0.5);
                  float32x4_t v5 = (float32x4_t)v24;
                  float32x4_t v21 = vmulq_n_f32(v23, v20.__sinval);
                  v21.i32[3] = LODWORD(v20.__cosval);
                  *(float32x4_t *)(v1 + 112) = v21;
                  if (*(void *)(v1 + 424))
                  {
                    swift_retain();
                    Entity.update(from:overrideDistance:)(v1, 0);
                    swift_release();
                    float32x4_t v5 = *(float32x4_t *)(v1 + 304);
                  }
                }
                *(float32x4_t *)(v1 + 288) = v5;
              }
            }
            break;
        }
      }
      break;
    default:
LABEL_2:
      swift_bridgeObjectRelease();
      break;
  }
}

double _proto_RealityViewCameraController_v1.mapToSphere(_:viewport:)(double a1, double a2)
{
  float32x2_t v3 = *(float32x2_t *)&a1;
  LODWORD(a1) = HIDWORD(a2);
  if (*(float *)&a2 > *((float *)&a2 + 1)) {
    *(float *)&a1 = *(float *)&a2;
  }
  double v18 = a1;
  swift_beginAccess();
  switch(v2[2].i8[0])
  {
    case 4:
      swift_bridgeObjectRelease();
      goto LABEL_6;
    default:
      char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v5)
      {
LABEL_6:
        int32x2_t v6 = *(int32x2_t *)&v18;
        v4.f32[0] = *(float *)&v18 * 0.5;
        float32x2_t v3 = vadd_f32(v2[34], v3);
      }
      else
      {
        int32x2_t v6 = *(int32x2_t *)&v18;
        v4.f32[0] = *(float *)&v18 * 0.5;
      }
      int32x2_t v7 = (int32x2_t)vsub_f32(v3, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.f32, 0));
      float32_t v8 = -*(float *)&v7.i32[1];
      float32x2_t v9 = (float32x2_t)vdup_lane_s32(v7, 0);
      v9.f32[0] = v8;
      *(float32x2_t *)v4.f32 = vdiv_f32(v9, (float32x2_t)vdup_lane_s32(v6, 0));
      float v10 = vaddv_f32(vmul_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v4.f32));
      BOOL v11 = v10 < 0.125;
      float v12 = 0.125 / sqrtf(v10);
      float v13 = sqrtf(0.25 - v10);
      if (!v11) {
        float v13 = v12;
      }
      *(int32x2_t *)v4.f32 = vrev64_s32(*(int32x2_t *)v4.f32);
      v4.f32[2] = v13;
      int32x4_t v14 = (int32x4_t)vmulq_f32(v4, v4);
      v14.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1))).u32[0];
      float32x2_t v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
      float32x2_t v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
      v4.i64[0] = vmulq_n_f32(v4, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).f32[0]).u64[0];
      return *(double *)v4.i64;
  }
}

void _proto_RealityViewCameraController_v1.rotateBy(_:)(float32x2_t a1, double a2, double a3, float32x2_t a4)
{
  float32x2_t v5 = v4[18];
  float32x2_t v6 = vadd_f32(v5, a1);
  v5.i32[0] = 1086918619;
  a4.i32[0] = -1060565029;
  v7.i32[1] = v6.i32[1];
  *(float *)v7.i32 = v6.f32[0] + -6.2832;
  float32x2_t v8 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v6, v5), 0), v7, (int8x8_t)v6);
  v9.i32[1] = v8.i32[1];
  *(float *)v9.i32 = v8.f32[0] + 6.2832;
  int8x8_t v10 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(a4, v8), 0), v9, (int8x8_t)v8);
  v4[18] = (float32x2_t)v10;
  v10.i32[0] = v10.i32[1];
  if (*(float *)&v10.i32[1] > 6.2832)
  {
    *(float *)v10.i32 = *(float *)&v10.i32[1] + -6.2832;
    v4[18].f32[1] = *(float *)&v10.i32[1] + -6.2832;
  }
  if (*(float *)v10.i32 < -6.2832) {
    v4[18].f32[1] = *(float *)v10.i32 + 6.2832;
  }
  _proto_RealityViewCameraController_v1.updateRotation()();
}

Swift::Void __swiftcall _proto_RealityViewCameraController_v1.updateRotation()()
{
  if (*(void *)(v0 + 424))
  {
    uint64_t v1 = v0;
    double v2 = (unsigned char *)(v0 + 16);
    swift_beginAccess();
    switch(*(unsigned char *)(v1 + 16))
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_retain();
        swift_bridgeObjectRelease();
        if (v3) {
          goto LABEL_10;
        }
        switch(*v2)
        {
          case 2:
            goto LABEL_8;
          default:
            char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v4) {
              goto LABEL_10;
            }
            switch(*v2)
            {
              case 1:
                goto LABEL_8;
              default:
                char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v5) {
                  goto LABEL_10;
                }
                break;
            }
            break;
        }
        break;
      default:
        swift_retain();
LABEL_8:
        swift_bridgeObjectRelease();
LABEL_10:
        if (_proto_RealityViewCameraController_v1.useOrbitInteractionMode.getter())
        {
          type metadata accessor for Entity();
          HasTransform.setTransformMatrix(_:relativeTo:)();
          _proto_RealityViewCameraController_v1.orientationForMode()(v6);
          Entity.rotateBy(_:aroundTarget:)();
        }
        else
        {
          type metadata accessor for Entity();
          HasTransform.setOrientation(_:relativeTo:)();
          _proto_RealityViewCameraController_v1.orientationForMode()(v7);
          int32x4_t v15 = v8;
          int8x8_t v9 = (void (*)(unsigned char *, void))HasTransform.orientation.modify();
          int32x4_t v11 = (int32x4_t)vnegq_f32((float32x4_t)v15);
          int8x16_t v12 = (int8x16_t)vtrn2q_s32(v15, vtrn1q_s32(v15, v11));
          float32x4_t v13 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v11, 8uLL), *v10, 1), (float32x4_t)vextq_s8(v12, v12, 8uLL), COERCE_FLOAT(*(_OWORD *)v10->f32));
          float32x4_t v14 = (float32x4_t)vrev64q_s32(v15);
          v14.i32[0] = v11.i32[1];
          v14.i32[3] = v11.i32[2];
          *(float32x4_t *)v10->f32 = vaddq_f32(v13, vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v15, *(float32x4_t *)v10->f32, 3), v14, *(float32x4_t *)v10->f32, 2));
          v9(v16, 0);
        }
        break;
    }
    swift_release();
  }
}

uint64_t _proto_RealityViewCameraController_v1.useOrbitInteractionMode.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + 16);
  swift_beginAccess();
  char v2 = 1;
  switch(*(unsigned char *)(v0 + 16))
  {
    case 3:
      goto LABEL_10;
    default:
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v3)
      {
LABEL_5:
        char v2 = 1;
      }
      else
      {
        char v2 = 1;
        switch(*v1)
        {
          case 4:
            break;
          default:
            char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v4) {
              goto LABEL_5;
            }
            char v2 = 1;
            switch(*v1)
            {
              case 2:
                goto LABEL_10;
              default:
                char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v5) {
                  return v2 & 1;
                }
                switch(*v1)
                {
                  case 1:
                    goto LABEL_10;
                  default:
                    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    break;
                }
                break;
            }
            break;
        }
LABEL_10:
        swift_bridgeObjectRelease();
      }
      return v2 & 1;
  }
}

unint64_t lazy protocol witness table accessor for type Entity and conformance Entity()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity and conformance Entity;
  if (!lazy protocol witness table cache variable for type Entity and conformance Entity)
  {
    type metadata accessor for Entity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity);
  }
  return result;
}

Swift::Void __swiftcall _proto_RealityViewCameraController_v1.resetOrientationState()()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + 424))
  {
    type metadata accessor for Entity();
    swift_retain();
    HasTransform.transformMatrix(relativeTo:)();
    long long v11 = v3;
    long long v12 = v2;
    long long v9 = v5;
    long long v10 = v4;
    swift_release();
    uint64_t v6 = *(void *)(v0 + 424);
    *(_OWORD *)(v1 + 160) = v12;
    *(_OWORD *)(v1 + 176) = v11;
    *(_OWORD *)(v1 + 192) = v10;
    *(_OWORD *)(v1 + 208) = v9;
    if (v6)
    {
      swift_retain();
      HasTransform.orientation(relativeTo:)();
      long long v13 = v7;
      swift_release();
      long long v8 = v13;
    }
    else
    {
      long long v8 = 0uLL;
    }
  }
  else
  {
    long long v8 = 0uLL;
    *(_OWORD *)(v0 + 192) = 0u;
    *(_OWORD *)(v0 + 208) = 0u;
    *(_OWORD *)(v0 + 160) = 0u;
    *(_OWORD *)(v0 + 176) = 0u;
  }
  *(_OWORD *)(v1 + 224) = v8;
  *(void *)(v1 + 144) = 0;
  *(void *)(v1 + 152) = 0;
}

void __swiftcall _proto_RealityViewCameraController_v1.orientationForMode()(simd_quatf *__return_ptr retstr)
{
  if (v1[53])
  {
    long long v2 = v1 + 2;
    swift_beginAccess();
    switch(v1[2].i8[0])
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_retain();
        swift_bridgeObjectRelease();
        if (v3) {
          goto LABEL_5;
        }
        switch(v2->i8[0])
        {
          case 2:
            swift_bridgeObjectRelease();
            goto LABEL_9;
          default:
            char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v5)
            {
LABEL_9:
              float32x2_t v24 = v1[18];
              __sincosf_stret(0.5 * v24.f32[0]);
              type metadata accessor for Entity();
              HasTransform.transformMatrix(relativeTo:)();
              simd_float4 v20 = v7;
              simd_float4 v22 = v6;
              simd_float4 v16 = v9;
              simd_float4 v18 = v8;
              swift_release();
              v29.columns[1] = v20;
              v29.columns[0] = v22;
              v29.columns[3] = v16;
              v29.columns[2] = v18;
              simd_quaternion(v29);
              __sincosf_stret(vmuls_lane_f32(0.5, v24, 1));
            }
            else
            {
              switch(v2->i8[0])
              {
                case 1:
                  swift_bridgeObjectRelease();
                  goto LABEL_13;
                default:
                  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v10)
                  {
LABEL_13:
                    float v26 = COERCE_FLOAT(*(void *)&v1[18]);
                    type metadata accessor for Entity();
                    HasTransform.transformMatrix(relativeTo:)();
                    simd_quaternion(v30);
                    __sincosf_stret(0.5 * v26);
                    float v11 = v1[18].f32[1];
                    HasTransform.transformMatrix(relativeTo:)();
                    simd_float4 v21 = v13;
                    simd_float4 v23 = v12;
                    simd_float4 v17 = v15;
                    simd_float4 v19 = v14;
                    swift_release();
                    v31.columns[1] = v21;
                    v31.columns[0] = v23;
                    v31.columns[3] = v17;
                    v31.columns[2] = v19;
                    simd_quaternion(v31);
                    __sincosf_stret(v11 * 0.5);
                  }
                  else
                  {
                    swift_release();
                  }
                  break;
              }
            }
            break;
        }
        break;
      default:
        swift_retain();
        swift_bridgeObjectRelease();
LABEL_5:
        float v25 = COERCE_FLOAT(*(void *)&v1[18]);
        type metadata accessor for Entity();
        HasTransform.transformMatrix(relativeTo:)();
        simd_float4x4 v28 = __invert_f4(v27);
        simd_quaternion(v28);
        __sincosf_stret(0.5 * v25);
        float v4 = v1[18].f32[1];
        swift_release();
        __sincosf_stret(v4 * 0.5);
        break;
    }
  }
}

uint64_t Entity.rotateBy(_:aroundTarget:)()
{
  MEMORY[0x24C5337A0]();
  type metadata accessor for Entity();
  HasTransform.transformMatrix(relativeTo:)();

  return HasTransform.setTransformMatrix(_:relativeTo:)();
}

double _proto_RealityViewCameraController_v1.onDragGestureChanged(_:viewport:)(float64x2_t a1, float64_t a2)
{
  uint64_t v3 = v2;
  a1.f64[1] = a2;
  *(float32x2_t *)v53.f32 = vcvt_f32_f64(a1);
  if (*(unsigned char *)(v2 + 402))
  {
    DragGesture.Value.location.getter();
    float64_t v49 = v4;
    DragGesture.Value.location.getter();
    v5.f64[0] = v49;
    v5.f64[1] = v6;
    *(float32x2_t *)(v2 + 248) = vcvt_f32_f64(v5);
    float v7 = v53.f32[1];
    if (v53.f32[0] > v53.f32[1]) {
      float v7 = v53.f32[0];
    }
    *(float *)(v2 + 340) = (float)(360.0 / v7) * 0.01;
    *(float *)(v2 + 344) = *(float *)(v2 + 404) * 0.01;
    simd_float4 v8 = (unsigned char *)(v2 + 16);
    swift_beginAccess();
    switch(*(unsigned char *)(v3 + 16))
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v12) {
          goto LABEL_17;
        }
        switch(*v8)
        {
          case 2:
            goto LABEL_13;
          default:
            char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v16) {
              goto LABEL_17;
            }
            switch(*v8)
            {
              case 1:
                goto LABEL_13;
              default:
                char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v20) {
                  goto LABEL_17;
                }
                switch(*v8)
                {
                  case 4:
LABEL_23:
                    swift_bridgeObjectRelease();
                    goto LABEL_25;
                  default:
                    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if (v21)
                    {
LABEL_25:
                      *(double *)&long long v23 = _proto_RealityViewCameraController_v1.mapToSphere(_:viewport:)(*(double *)(v3 + 248), *(double *)v53.i64);
                      *(_OWORD *)(v3 + 304) = v23;
                      _proto_RealityViewCameraController_v1.updateArcballOrientation()();
                    }
                    else
                    {
                      switch(*v8)
                      {
                        case 3:
                          goto LABEL_23;
                        default:
                          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          if (v22) {
                            goto LABEL_25;
                          }
                          switch(*v8)
                          {
                            case 5:
                              swift_bridgeObjectRelease();
                              goto LABEL_29;
                            default:
                              char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
                              swift_bridgeObjectRelease();
                              if (v24)
                              {
LABEL_29:
                                if (!*(void *)(v3 + 424)) {
                                  goto LABEL_18;
                                }
                                float32x2_t v25 = vsub_f32(*(float32x2_t *)(v3 + 248), *(float32x2_t *)(v3 + 256));
                                float v26 = *(float *)(v3 + 344);
                                float v51 = vmuls_lane_f32(v26, v25, 1);
                                float v54 = -(float)(v25.f32[0] * v26);
                                type metadata accessor for Entity();
                                swift_retain();
                                HasTransform.orientation(relativeTo:)();
                                int32x4_t v28 = (int32x4_t)vmulq_f32(v27, (float32x4_t)xmmword_2466B7770);
                                int32x4_t v29 = (int32x4_t)vnegq_f32((float32x4_t)v28);
                                int8x16_t v30 = (int8x16_t)vtrn2q_s32(v28, vtrn1q_s32(v28, v29));
                                float32x4_t v31 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v29, 8uLL), v51);
                                float32x4_t v32 = (float32x4_t)vrev64q_s32(v28);
                                v32.i32[0] = v29.i32[1];
                                v32.i32[3] = v29.i32[2];
                                int32x4_t v33 = (int32x4_t)vmlaq_f32(vmlaq_n_f32(v31, (float32x4_t)vextq_s8(v30, v30, 8uLL), v54), (float32x4_t)0, v32);
                              }
                              else
                              {
                                switch(*v8)
                                {
                                  case 6:
                                    swift_bridgeObjectRelease();
                                    goto LABEL_35;
                                  default:
                                    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    swift_bridgeObjectRelease();
                                    if ((v34 & 1) == 0) {
                                      goto LABEL_18;
                                    }
LABEL_35:
                                    if (!*(void *)(v3 + 424)) {
                                      goto LABEL_18;
                                    }
                                    float32x2_t v35 = vsub_f32(*(float32x2_t *)(v3 + 248), *(float32x2_t *)(v3 + 256));
                                    float v36 = *(float *)(v3 + 344);
                                    float v52 = v36 * v35.f32[0];
                                    float v55 = -(float)(v35.f32[1] * v36);
                                    type metadata accessor for Entity();
                                    swift_retain();
                                    HasTransform.orientation(relativeTo:)();
                                    int32x4_t v37 = (int32x4_t)vmulq_f32(v27, (float32x4_t)xmmword_2466B7770);
                                    int32x4_t v38 = (int32x4_t)vnegq_f32((float32x4_t)v37);
                                    int8x16_t v39 = (int8x16_t)vtrn2q_s32(v37, vtrn1q_s32(v37, v38));
                                    float32x4_t v40 = vmlaq_n_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v38, 8uLL), (float32x4_t)0), (float32x4_t)vextq_s8(v39, v39, 8uLL), v52);
                                    float32x4_t v41 = (float32x4_t)vrev64q_s32(v37);
                                    v41.i32[0] = v38.i32[1];
                                    v41.i32[3] = v38.i32[2];
                                    int32x4_t v33 = (int32x4_t)vmlaq_n_f32(v40, v41, v55);
                                    break;
                                }
                              }
                              int32x4_t v42 = (int32x4_t)vnegq_f32((float32x4_t)v33);
                              int8x16_t v43 = (int8x16_t)vtrn2q_s32(v33, vtrn1q_s32(v33, v42));
                              float32x4_t v44 = (float32x4_t)vrev64q_s32(v33);
                              v44.i32[0] = v42.i32[1];
                              v44.i32[3] = v42.i32[2];
                              float32x4_t v56 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v33, v27, 3), v44, v27, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v42, 8uLL), *(float32x2_t *)v27.f32, 1), (float32x4_t)vextq_s8(v43, v43, 8uLL), v27.f32[0]));
                              float v45 = (void (*)(unsigned char *, void))HasTransform.transform.modify();
                              *(float32x2_t *)&long long v47 = vadd_f32(v46[4], *(float32x2_t *)v56.f32);
                              *((float *)&v47 + 2) = v46[5].f32[0] + v56.f32[2];
                              HIDWORD(v47) = 0;
                              *(_OWORD *)v46[4].f32 = v47;
                              v45(v57, 0);
                              swift_release();
                              break;
                          }
                          break;
                      }
                    }
                    break;
                }
                break;
            }
            break;
        }
        break;
      default:
LABEL_13:
        swift_bridgeObjectRelease();
LABEL_17:
        LODWORD(v13) = *(_DWORD *)(v3 + 340);
        _proto_RealityViewCameraController_v1.rotateBy(_:)(vmul_n_f32(vsub_f32(*(float32x2_t *)(v3 + 240), *(float32x2_t *)(v3 + 248)), *(float *)&v13), *(double *)(v3 + 248), v13, v14);
        *(void *)(v3 + 240) = *(void *)(v3 + 248);
        break;
    }
LABEL_18:
    *(void *)&long long v18 = *(void *)(v3 + 248);
    *(void *)(v3 + 256) = v18;
  }
  else
  {
    *(unsigned char *)(v2 + 402) = 1;
    DragGesture.Value.location.getter();
    float64_t v50 = v9;
    DragGesture.Value.location.getter();
    v10.f64[0] = v50;
    v10.f64[1] = v11;
    *(float32x2_t *)&v10.f64[0] = vcvt_f32_f64(v10);
    *(float64_t *)(v2 + 240) = v10.f64[0];
    *(float64_t *)(v2 + 256) = v10.f64[0];
    _proto_RealityViewCameraController_v1.resetOrientationState()();
    swift_beginAccess();
    switch(*(unsigned char *)(v2 + 16))
    {
      case 4:
LABEL_10:
        swift_bridgeObjectRelease();
        goto LABEL_15;
      default:
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v15)
        {
LABEL_15:
          double v19 = *(double *)(v3 + 240);
          *(float32x2_t *)(v3 + 272) = vsub_f32(vmul_f32(*(float32x2_t *)v53.f32, (float32x2_t)0x3F0000003F000000), *(float32x2_t *)&v19);
          *(double *)&long long v18 = _proto_RealityViewCameraController_v1.mapToSphere(_:viewport:)(v19, *(double *)v53.i64);
          *(_OWORD *)(v3 + 288) = v18;
          *(_OWORD *)(v3 + 304) = v18;
        }
        else
        {
          switch(*(unsigned char *)(v2 + 16))
          {
            case 3:
              goto LABEL_10;
            default:
              char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v17) {
                goto LABEL_15;
              }
              break;
          }
        }
        break;
    }
  }
  return *(double *)&v18;
}

uint64_t _proto_RealityViewCameraController_v1.onMagnifyGestureChanged(_:)()
{
  double v1 = *(double *)(v0 + 432);
  float v2 = 0.0;
  if (v1 > 0.0)
  {
    float v3 = *(float *)(v0 + 404);
    MagnifyGesture.Value.magnification.getter();
    *(float *)&double v4 = v1 - v4;
    float v2 = v3 * *(float *)&v4;
  }
  float v20 = v2;
  uint64_t result = MagnifyGesture.Value.magnification.getter();
  *(void *)(v0 + 432) = v6;
  if (*(void *)(v0 + 424))
  {
    type metadata accessor for Entity();
    swift_retain();
    HasTransform.orientation(relativeTo:)();
    int32x4_t v8 = (int32x4_t)vmulq_f32(v7, (float32x4_t)xmmword_2466B7770);
    int32x4_t v9 = (int32x4_t)vnegq_f32((float32x4_t)v8);
    int8x16_t v10 = (int8x16_t)vtrn2q_s32(v8, vtrn1q_s32(v8, v9));
    float32x4_t v11 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v9, 8uLL), (float32x4_t)0), (float32x4_t)0, (float32x4_t)vextq_s8(v10, v10, 8uLL));
    float32x4_t v12 = (float32x4_t)vrev64q_s32(v8);
    v12.i32[0] = v9.i32[1];
    v12.i32[3] = v9.i32[2];
    int32x4_t v13 = (int32x4_t)vmlaq_n_f32(v11, v12, v20);
    int32x4_t v14 = (int32x4_t)vnegq_f32((float32x4_t)v13);
    int8x16_t v15 = (int8x16_t)vtrn2q_s32(v13, vtrn1q_s32(v13, v14));
    float32x4_t v16 = (float32x4_t)vrev64q_s32(v13);
    v16.i32[0] = v14.i32[1];
    v16.i32[3] = v14.i32[2];
    float32x4_t v21 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v13, v7, 3), v16, v7, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v14, 8uLL), *(float32x2_t *)v7.f32, 1), (float32x4_t)vextq_s8(v15, v15, 8uLL), v7.f32[0]));
    char v17 = (void (*)(unsigned char *, void))HasTransform.transform.modify();
    *(float32x2_t *)&long long v19 = vadd_f32(v18[4], *(float32x2_t *)v21.f32);
    *((float *)&v19 + 2) = v18[5].f32[0] + v21.f32[2];
    HIDWORD(v19) = 0;
    *(_OWORD *)v18[4].f32 = v19;
    v17(v22, 0);
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _RealityViewCameraControllerSystem and conformance _RealityViewCameraControllerSystem()
{
  unint64_t result = lazy protocol witness table cache variable for type _RealityViewCameraControllerSystem and conformance _RealityViewCameraControllerSystem;
  if (!lazy protocol witness table cache variable for type _RealityViewCameraControllerSystem and conformance _RealityViewCameraControllerSystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _RealityViewCameraControllerSystem and conformance _RealityViewCameraControllerSystem);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _proto_RealityViewCameraController_v1.InteractionMode and conformance _proto_RealityViewCameraController_v1.InteractionMode()
{
  unint64_t result = lazy protocol witness table cache variable for type _proto_RealityViewCameraController_v1.InteractionMode and conformance _proto_RealityViewCameraController_v1.InteractionMode;
  if (!lazy protocol witness table cache variable for type _proto_RealityViewCameraController_v1.InteractionMode and conformance _proto_RealityViewCameraController_v1.InteractionMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _proto_RealityViewCameraController_v1.InteractionMode and conformance _proto_RealityViewCameraController_v1.InteractionMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _proto_RealityViewCameraController_v1.InteractionMode and conformance _proto_RealityViewCameraController_v1.InteractionMode;
  if (!lazy protocol witness table cache variable for type _proto_RealityViewCameraController_v1.InteractionMode and conformance _proto_RealityViewCameraController_v1.InteractionMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _proto_RealityViewCameraController_v1.InteractionMode and conformance _proto_RealityViewCameraController_v1.InteractionMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [_proto_RealityViewCameraController_v1.InteractionMode] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [_proto_RealityViewCameraController_v1.InteractionMode] and conformance [A];
  if (!lazy protocol witness table cache variable for type [_proto_RealityViewCameraController_v1.InteractionMode] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [_proto_RealityViewCameraController_v1.InteractionMode]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [_proto_RealityViewCameraController_v1.InteractionMode] and conformance [A]);
  }
  return result;
}

uint64_t sub_2465F9024@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_2465F906C(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 16) = v2;
  return result;
}

uint64_t sub_2465F90B0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 416);
  return swift_retain();
}

uint64_t sub_2465F90C0()
{
  uint64_t v0 = swift_retain();
  return _proto_RealityViewCameraController_v1.orbitTargetEntity.setter(v0);
}

uint64_t sub_2465F90EC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 17);
  return result;
}

uint64_t sub_2465F9134(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 17) = v2;
  return result;
}

float sub_2465F9178@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  float result = *(float *)(v3 + 48);
  *a2 = result;
  return result;
}

uint64_t sub_2465F91C0(int *a1, uint64_t *a2)
{
  int v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v3 + 48) = v2;
  return result;
}

void sub_2465F9214(float *a1@<X8>)
{
  *a1 = _proto_RealityViewCameraController_v1.fieldOfView.getter();
}

void sub_2465F9240()
{
}

uint64_t type metadata accessor for _proto_RealityViewCameraController_v1()
{
  return self;
}

uint64_t method lookup function for _proto_RealityViewCameraController_v1(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _proto_RealityViewCameraController_v1);
}

uint64_t dispatch thunk of _proto_RealityViewCameraController_v1.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t dispatch thunk of _proto_RealityViewCameraController_v1.interactionMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of _proto_RealityViewCameraController_v1.interactionMode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of _proto_RealityViewCameraController_v1.interactionMode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of _proto_RealityViewCameraController_v1.orbitTargetEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of _proto_RealityViewCameraController_v1.orbitTargetEntity.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of _proto_RealityViewCameraController_v1.orbitTargetEntity.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of _proto_RealityViewCameraController_v1.inertiaEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of _proto_RealityViewCameraController_v1.inertiaEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of _proto_RealityViewCameraController_v1.inertiaEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of _proto_RealityViewCameraController_v1.inertiaFriction.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of _proto_RealityViewCameraController_v1.inertiaFriction.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of _proto_RealityViewCameraController_v1.inertiaFriction.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t getEnumTagSinglePayload for _proto_RealityViewCameraController_v1.InteractionMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for _proto_RealityViewCameraController_v1.InteractionMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2465F9624);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _proto_RealityViewCameraController_v1.InteractionMode()
{
  return &type metadata for _proto_RealityViewCameraController_v1.InteractionMode;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _proto_RealityViewCameraController_v1.Inertia(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[40]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _proto_RealityViewCameraController_v1.Inertia(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for _proto_RealityViewCameraController_v1.Inertia()
{
  return &unk_26FACD598;
}

void *type metadata accessor for _proto_RealityViewCameraController_v1.Arcball()
{
  return &unk_26FACD630;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *type metadata accessor for _proto_RealityViewCameraController_v1.InputLocation()
{
  return &unk_26FACD6B8;
}

__n128 __swift_memcpy96_16(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for _proto_RealityViewCameraController_v1.OrientationState(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _proto_RealityViewCameraController_v1.OrientationState(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 96) = v3;
  return result;
}

void *type metadata accessor for _proto_RealityViewCameraController_v1.OrientationState()
{
  return &unk_26FACD740;
}

ValueMetadata *type metadata accessor for _RealityViewCameraControllerSystem()
{
  return &type metadata for _RealityViewCameraControllerSystem;
}

void *initializeBufferWithCopyOfBuffer for _RealityViewCameraControllerComponent(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for _RealityViewCameraControllerComponent()
{
  return swift_release();
}

void *assignWithCopy for _RealityViewCameraControllerComponent(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for _RealityViewCameraControllerComponent(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _RealityViewCameraControllerComponent(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _RealityViewCameraControllerComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _RealityViewCameraControllerComponent()
{
  return &type metadata for _RealityViewCameraControllerComponent;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance _RealityViewCameraControllerComponent()
{
  return MEMORY[0x270EFC798]();
}

uint64_t protocol witness for static Component.componentName.getter in conformance _RealityViewCameraControllerComponent()
{
  return MEMORY[0x270EFC7A0]();
}

uint64_t protocol witness for static Component.__size.getter in conformance _RealityViewCameraControllerComponent()
{
  return MEMORY[0x270EFC7C0]();
}

uint64_t protocol witness for static Component.__load(from:) in conformance _RealityViewCameraControllerComponent()
{
  return MEMORY[0x270EFC770]();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance _RealityViewCameraControllerComponent()
{
  return MEMORY[0x270EFC7C8]();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance _RealityViewCameraControllerComponent()
{
  return MEMORY[0x270EFC7D0]();
}

uint64_t protocol witness for static Component.__free(to:offset:) in conformance _RealityViewCameraControllerComponent()
{
  return MEMORY[0x270EFC7B0]();
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance _RealityViewCameraControllerComponent()
{
  return MEMORY[0x270EFC790]();
}

uint64_t protocol witness for Component.__toCore(_:) in conformance _RealityViewCameraControllerComponent()
{
  return MEMORY[0x270EFC7D8]();
}

uint64_t protocol witness for static Component.__coreComponentType.getter in conformance _RealityViewCameraControllerComponent()
{
  return MEMORY[0x270EFC780]();
}

uint64_t protocol witness for static Component.__addIntrospectionData(_:) in conformance _RealityViewCameraControllerComponent()
{
  return MEMORY[0x270EFC7A8]();
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance _RealityViewCameraControllerComponent()
{
  return MEMORY[0x270EFC7B8]();
}

uint64_t protocol witness for static System.dependencies.getter in conformance _RealityViewCameraControllerSystem()
{
  return MEMORY[0x270EFCEF0]();
}

uint64_t specialized _RealityViewCameraControllerSystem.update(context:)(uint64_t a1)
{
  uint64_t v14 = type metadata accessor for Entity.ComponentSet();
  uint64_t v2 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  long long v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.sceneService.getter();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for __SceneService);
  type metadata accessor for SceneManager();
  swift_dynamicCast();
  uint64_t v5 = v15;
  long long v13[2] = lazy protocol witness table accessor for type _RealityViewCameraControllerComponent and conformance _RealityViewCameraControllerComponent();
  uint64_t v6 = SceneManager.componentTypeToComponentClass(_:)();
  v13[1] = a1;
  SceneUpdateContext.scene.getter();
  Scene.coreScene.getter();
  uint64_t result = swift_release();
  if (!v6) {
    goto LABEL_11;
  }
  uint64_t result = RESceneGetComponentsOfClass();
  if (v8 < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v9 = v8;
  v13[0] = v5;
  if (v8)
  {
    uint64_t v10 = result;
    type metadata accessor for Entity();
    do
    {
      REComponentGetEntity();
      static Entity.fromCore(_:ignoringEntityInfo:)();
      dispatch thunk of Entity.components.getter();
      Entity.ComponentSet.subscript.getter();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v14);
      float32x4_t v12 = v16;
      if (v16)
      {
        swift_retain();
        uint64_t updated = SceneUpdateContext.deltaTime.getter();
        v12(updated);
        swift_release();
        outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?((uint64_t)v12);
        outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?((uint64_t)v12);
      }
      else
      {
        swift_release();
      }
      v10 += 8;
      --v9;
    }
    while (v9);
  }
  return swift_release();
}

double simd_quaternion(simd_float4x4 a1)
{
  float v1 = a1.columns[2].f32[2] + (float)(a1.columns[0].f32[0] + a1.columns[1].f32[1]);
  if (v1 >= 0.0)
  {
    a1.columns[3].f32[0] = sqrtf(v1 + 1.0);
    float32x2_t v5 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]));
    float32x2_t v6 = vmul_f32(v5, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]), v5));
    *(float32x2_t *)a1.columns[3].f32 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL), *(int32x2_t *)a1.columns[2].f32), (float32x2_t)vext_s8(*(int8x8_t *)a1.columns[2].f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), 4uLL)), vmul_f32(v6, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]), v6)).f32[0]);
  }
  else if (a1.columns[0].f32[0] < a1.columns[1].f32[1] || a1.columns[0].f32[0] < a1.columns[2].f32[2])
  {
    float v3 = 1.0 - a1.columns[0].f32[0];
    if (a1.columns[1].f32[1] >= a1.columns[2].f32[2])
    {
      a1.columns[3].f32[0] = sqrtf(a1.columns[1].f32[1] + (float)(v3 - a1.columns[2].f32[2]));
      a1.columns[3].f32[0] = a1.columns[3].f32[0] + a1.columns[3].f32[0];
      float32x2_t v16 = vrecpe_f32((float32x2_t)a1.columns[3].u32[0]);
      float32x2_t v17 = vmul_f32(v16, vrecps_f32((float32x2_t)a1.columns[3].u32[0], v16));
      v18.i32[0] = vmul_f32(v17, vrecps_f32((float32x2_t)a1.columns[3].u32[0], v17)).u32[0];
      v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a1.columns[0].f32, 1), *(float32x2_t *)a1.columns[1].f32).u32[0];
      v17.i32[1] = a1.columns[3].i32[0];
      v18.i32[1] = 0.25;
      *(float32x2_t *)a1.columns[3].f32 = vmul_f32(v17, v18);
    }
    else
    {
      float32x2_t v4 = (float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[2].f32[2] + (float)(v3 - a1.columns[1].f32[1]))));
      *(float32x2_t *)a1.columns[2].f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL)), *(float32x2_t *)a1.columns[2].f32);
      *(int32x2_t *)a1.columns[1].f32 = vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
      a1.columns[1].i32[0] = 2.0;
      a1.columns[1].i32[0] = vmul_f32(v4, *(float32x2_t *)a1.columns[1].f32).u32[0];
      *(float32x2_t *)a1.columns[3].f32 = vrecpe_f32((float32x2_t)a1.columns[1].u32[0]);
      *(float32x2_t *)a1.columns[3].f32 = vmul_f32(*(float32x2_t *)a1.columns[3].f32, vrecps_f32((float32x2_t)a1.columns[1].u32[0], *(float32x2_t *)a1.columns[3].f32));
      *(float32x2_t *)a1.columns[3].f32 = vmul_n_f32(*(float32x2_t *)a1.columns[2].f32, vmul_f32(*(float32x2_t *)a1.columns[3].f32, vrecps_f32((float32x2_t)a1.columns[1].u32[0], *(float32x2_t *)a1.columns[3].f32)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    *(int32x2_t *)a1.columns[3].f32 = vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
    float32x2_t v7 = vadd_f32(*(float32x2_t *)a1.columns[0].f32, *(float32x2_t *)a1.columns[3].f32);
    a1.columns[3].i32[0] = 2.0;
    v8.i32[0] = vmul_f32((float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[0].f32[0]+ (float)((float)(1.0 - a1.columns[1].f32[1]) - a1.columns[2].f32[2])))), *(float32x2_t *)a1.columns[3].f32).u32[0];
    v8.i32[1] = v7.i32[1];
    float32x2_t v9 = vrecpe_f32((float32x2_t)v8.u32[0]);
    float32x2_t v10 = vmul_f32(v9, vrecps_f32((float32x2_t)v8.u32[0], v9));
    unsigned __int32 v11 = vmul_f32(v10, vrecps_f32((float32x2_t)v8.u32[0], v10)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v11;
    *(float32x2_t *)a1.columns[3].f32 = vmul_f32(v8, _D5);
  }
  return *(double *)a1.columns[3].i64;
}

uint64_t FreeformMiniView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v32 = a1;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UIInterfaceOrientation>.Publisher);
  uint64_t v3 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  float32x2_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<FreeformMiniViewWrapper, _AppearanceActionModifier>>>);
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  float32x2_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v34 = *(_OWORD *)(v1 + 32);
  uint64_t v30 = *((void *)&v34 + 1);
  uint64_t v10 = swift_allocObject();
  long long v11 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v10 + 64) = v11;
  uint64_t v12 = *(void *)(v1 + 64);
  *(void *)(v10 + 80) = v12;
  long long v13 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v10 + 32) = v13;
  uint64_t v14 = swift_allocObject();
  long long v15 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v14 + 64) = v15;
  *(void *)(v14 + 80) = *(void *)(v1 + 64);
  long long v16 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v14 + 32) = v16;
  swift_beginAccess();
  outlined retain of FreeformMiniView(v1);
  outlined retain of FreeformMiniView(v1);
  outlined retain of ObservedObject<FreeformCloudRenderer>((uint64_t)&v34);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UIInterfaceOrientation>);
  Published.projectedValue.getter();
  swift_endAccess();
  uint64_t v17 = swift_allocObject();
  long long v18 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v17 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v17 + 64) = v18;
  *(void *)(v17 + 80) = *(void *)(v2 + 64);
  long long v19 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v17 + 32) = v19;
  uint64_t v20 = v31;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(&v9[*(int *)(v7 + 60)], v5, v31);
  *(void *)float32x2_t v9 = v30;
  *((void *)v9 + 1) = partial apply for closure #1 in FreeformMiniView.body.getter;
  *((void *)v9 + 2) = v10;
  *((void *)v9 + 3) = 0;
  *((void *)v9 + 4) = 0;
  *((void *)v9 + 5) = v12;
  *((void *)v9 + 6) = partial apply for closure #2 in FreeformMiniView.body.getter;
  *((void *)v9 + 7) = v14;
  float32x4_t v21 = (uint64_t (**)(uint64_t *))&v9[*(int *)(v7 + 64)];
  void *v21 = partial apply for closure #3 in FreeformMiniView.body.getter;
  v21[1] = (uint64_t (*)(uint64_t *))v17;
  outlined retain of FreeformMiniView(v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v20);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v22 = v33;
  static UnitPoint.center.getter();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v27 = v32;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v9, v32, &demangling cache variable for type metadata for SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<FreeformMiniViewWrapper, _AppearanceActionModifier>>>);
  int32x4_t v28 = (void *)(v27
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<FreeformMiniViewWrapper, _AppearanceActionModifier>>>, _RotationEffect>)
                          + 36));
  *int32x4_t v28 = v22;
  v28[1] = v24;
  v28[2] = v26;
  return outlined destroy of URL?((uint64_t)v9, &demangling cache variable for type metadata for SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<FreeformMiniViewWrapper, _AppearanceActionModifier>>>);
}

uint64_t closure #1 in FreeformMiniView.body.getter(uint64_t a1)
{
  id v2 = objc_msgSend(self, sel_currentDevice);
  id v3 = objc_msgSend(v2, sel_orientation);

  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  float32x2_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(void *)&long long v14 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    type metadata accessor for UIDeviceOrientation(0);
    uint64_t v9 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, (uint64_t *)&v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v5, v6, "Device orientation starting from: %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v8, -1, -1);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  long long v14 = *(_OWORD *)(a1 + 48);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<UIDeviceOrientation>);
  State.wrappedValue.setter();
  long long v14 = *(_OWORD *)(a1 + 48);
  State.wrappedValue.getter();
  long long v11 = FreeformMiniView.interfaceOrientation.getter();
  double v12 = specialized static MiniViewHelpers.getMiniViewRotation(deviceOrientation:interfaceOrientation:)((unint64_t)v3, (uint64_t)v11);
  swift_getKeyPath();
  swift_getKeyPath();
  *(double *)&long long v14 = v12;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t closure #2 in FreeformMiniView.body.getter(uint64_t a1, uint64_t a2)
{
  id v3 = objc_msgSend(self, sel_currentDevice);
  objc_msgSend(v3, sel_orientation);

  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  outlined retain of FreeformMiniView(a2);
  outlined retain of FreeformMiniView(a2);
  float32x2_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v15[0] = v8;
    *(_DWORD *)uint64_t v7 = 136446466;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<UIDeviceOrientation>);
    State.wrappedValue.getter();
    type metadata accessor for UIDeviceOrientation(0);
    uint64_t v9 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of FreeformMiniView(a2);
    outlined release of FreeformMiniView(a2);
    *(_WORD *)(v7 + 12) = 2082;
    uint64_t v11 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v5, v6, "Device orientation changed from: %{public}s to: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v8, -1, -1);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }
  else
  {
    outlined release of FreeformMiniView(a2);
    outlined release of FreeformMiniView(a2);
  }

  MEMORY[0x270FA5388](v13);
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in closure #2 in FreeformMiniView.body.getter(uint64_t a1, unint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<UIDeviceOrientation>);
  State.wrappedValue.setter();
  State.wrappedValue.getter();
  id v2 = FreeformMiniView.interfaceOrientation.getter();
  specialized static MiniViewHelpers.getMiniViewRotation(deviceOrientation:interfaceOrientation:)(a2, (uint64_t)v2);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t closure #3 in FreeformMiniView.body.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  float32x2_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(void *)&v15[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v16 = v3;
    type metadata accessor for UIInterfaceOrientation(0);
    uint64_t v9 = String.init<A>(describing:)();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, (uint64_t *)v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v5, v6, "Device orientation: UIInterfaceOrientation published, recomputing with %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v8, -1, -1);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  *(_OWORD *)long long v15 = *(_OWORD *)(a2 + 48);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<UIDeviceOrientation>);
  State.wrappedValue.getter();
  unint64_t v11 = v16;
  unint64_t v12 = FreeformMiniView.interfaceOrientation.getter();
  double v13 = specialized static MiniViewHelpers.getMiniViewRotation(deviceOrientation:interfaceOrientation:)(v11, (uint64_t)v12);
  swift_getKeyPath();
  swift_getKeyPath();
  v15[0] = v13;
  swift_retain();
  return static Published.subscript.setter();
}

void *FreeformMiniView.interfaceOrientation.getter()
{
  uint64_t result = *(void **)(*(void *)(v0 + 40) + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view);
  if (result)
  {
    id v2 = objc_msgSend(result, sel_window);
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = [v2 windowScene];
      if (v4)
      {
        float32x2_t v5 = v4;
        uint64_t v6 = (uint64_t)[v4 interfaceOrientation];

        uint64_t v3 = v5;
LABEL_15:

        return (void *)v6;
      }
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)logger);
      unint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        double v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)double v13 = 0;
        _os_log_impl(&dword_2465C2000, v11, v12, "Device orientation windowScene is nil!  Using .portrait...", v13, 2u);
        MEMORY[0x24C5348D0](v13, -1, -1);
      }
    }
    else
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)logger);
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v3, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_2465C2000, v3, v8, "Device orientation window is nil!  Using .portrait...", v9, 2u);
        MEMORY[0x24C5348D0](v9, -1, -1);
      }
    }
    uint64_t v6 = 1;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for View.body.getter in conformance FreeformMiniView@<X0>(uint64_t a1@<X8>)
{
  return FreeformMiniView.body.getter(a1);
}

uint64_t protocol witness for Identifiable.id.getter in conformance FreeformMiniView@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance FreeformMiniViewWrapper()
{
  id result = *(id *)(*v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view);
  if (result) {
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for UIViewRepresentable._resetUIView(_:coordinator:destroy:) in conformance FreeformMiniViewWrapper()
{
  return MEMORY[0x270F016E0]();
}

uint64_t protocol witness for static UIViewRepresentable.dismantleUIView(_:coordinator:) in conformance FreeformMiniViewWrapper()
{
  return MEMORY[0x270F016F8]();
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance FreeformMiniViewWrapper()
{
  return MEMORY[0x270F01790]();
}

uint64_t protocol witness for UIViewRepresentable._identifiedViewTree(in:) in conformance FreeformMiniViewWrapper()
{
  return MEMORY[0x270F01738]();
}

uint64_t protocol witness for UIViewRepresentable.sizeThatFits(_:uiView:context:) in conformance FreeformMiniViewWrapper()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t protocol witness for UIViewRepresentable._overrideSizeThatFits(_:in:uiView:) in conformance FreeformMiniViewWrapper()
{
  return MEMORY[0x270F01758]();
}

uint64_t protocol witness for UIViewRepresentable._overrideLayoutTraits(_:for:) in conformance FreeformMiniViewWrapper()
{
  return MEMORY[0x270F01748]();
}

uint64_t protocol witness for static UIViewRepresentable._modifyBridgedViewInputs(_:) in conformance FreeformMiniViewWrapper()
{
  return MEMORY[0x270F01768]();
}

uint64_t protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance FreeformMiniViewWrapper()
{
  return MEMORY[0x270F01728]();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FreeformMiniViewWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type FreeformMiniViewWrapper and conformance FreeformMiniViewWrapper();

  return MEMORY[0x270F01780](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance FreeformMiniViewWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type FreeformMiniViewWrapper and conformance FreeformMiniViewWrapper();

  return MEMORY[0x270F01718](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance FreeformMiniViewWrapper()
{
}

uint64_t FreeformCloudRenderer.interfaceOrientation.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FreeformCloudRenderer.Error()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FreeformCloudRenderer.Error()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance FreeformCloudRenderer.Error()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FreeformCloudRenderer.Error()
{
  return Hasher._finalize()();
}

void FreeformCloudRenderer.colorScheme.didset()
{
  uint64_t v1 = type metadata accessor for ColorScheme();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)logger);
  v14[0] = v0;
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v8 = 136315138;
    uint64_t v15 = v9;
    uint64_t v10 = (char *)v14[0] + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_colorScheme;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v10, v1);
    uint64_t v11 = String.init<A>(describing:)();
    v14[1] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v6, v7, "colorScheme = %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v9, -1, -1);
    MEMORY[0x24C5348D0](v8, -1, -1);
  }
  else
  {

    id v13 = v14[0];
  }
}

uint64_t FreeformCloudRenderer.platterRenderer.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer____lazy_storage___platterRenderer;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer____lazy_storage___platterRenderer);
  uint64_t v3 = v2;
  if (v2 == 1)
  {
    closure #1 in FreeformCloudRenderer.platterRenderer.getter(v0);
    uint64_t v3 = v4;
    uint64_t v5 = *(void *)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    swift_retain();
    outlined consume of PlatterRenderer??(v5);
  }
  outlined copy of PlatterRenderer??(v2);
  return v3;
}

void closure #1 in FreeformCloudRenderer.platterRenderer.getter(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view);
  if (v1)
  {
    uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_device);
    swift_unknownObjectRetain();
    id v3 = objc_msgSend(v1, sel_colorPixelFormat);
    type metadata accessor for PlatterRenderer();
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(void *)(v4 + 64) = 0;
    *(void *)(v4 + 16) = v2;
    *(void *)(v4 + 24) = v3;
    swift_unknownObjectRetain();
    PlatterRenderer.initPlatterRenderPipeline()();
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128A0]), sel_init);
    objc_msgSend(v5, sel_setDepthCompareFunction_, 7);
    objc_msgSend(v5, sel_setDepthWriteEnabled_, 0);
    id v6 = objc_msgSend(v2, sel_newDepthStencilStateWithDescriptor_, v5);

    if (v6)
    {
      *(void *)(v4 + 48) = v6;
      swift_unknownObjectRelease();
      PlatterRenderer.makePlatterVertices()();
      id v7 = objc_msgSend(v2, sel_newBufferWithLength_options_, 352, 0);
      swift_unknownObjectRelease();
      *(void *)(v4 + 40) = v7;
      swift_unknownObjectRelease();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t FreeformCloudRenderer.init()()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UIInterfaceOrientation>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  os_log_type_t v8 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = &v0[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer__interfaceOrientation];
  uint64_t v82 = 1;
  type metadata accessor for UIInterfaceOrientation(0);
  uint64_t v10 = v0;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v8, v5);
  uint64_t v11 = &v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_colorScheme];
  uint64_t v12 = *MEMORY[0x263F18508];
  uint64_t v13 = type metadata accessor for ColorScheme();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v11, v12, v13);
  long long v14 = (uint64_t *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_id];
  UUID.init()();
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  *long long v14 = v15;
  v14[1] = v17;
  uint64_t v18 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view] = 0;
  long long v19 = &v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewToWorld];
  long long v20 = *MEMORY[0x263EF89A8];
  long long v79 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  long long v21 = v79;
  long long v80 = v20;
  long long v22 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
  long long v77 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
  long long v23 = v77;
  long long v78 = v22;
  *(_OWORD *)long long v19 = v20;
  *((_OWORD *)v19 + 1) = v21;
  *((_OWORD *)v19 + 2) = v22;
  *((_OWORD *)v19 + 3) = v23;
  uint64_t v24 = &v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_clippedFreeformBoundingBoxWorld];
  *((_OWORD *)v24 + 2) = 0u;
  *((_OWORD *)v24 + 3) = 0u;
  *(_OWORD *)uint64_t v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  v24[64] = 1;
  uint64_t v25 = &v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_renderBoundingBoxWorld];
  *(_OWORD *)uint64_t v25 = 0u;
  *((_OWORD *)v25 + 1) = 0u;
  *((_OWORD *)v25 + 2) = 0u;
  *((_OWORD *)v25 + 3) = 0u;
  v25[64] = 1;
  uint64_t v26 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_meshAnchors;
  uint64_t v27 = MEMORY[0x263F8EE78];
  *(void *)&v10[v26] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_lastShotTime] = 0xFFF0000000000000;
  int32x4_t v28 = &v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_projection];
  long long v29 = v79;
  *(_OWORD *)int32x4_t v28 = v80;
  *((_OWORD *)v28 + 1) = v29;
  long long v30 = v77;
  *((_OWORD *)v28 + 2) = v78;
  *((_OWORD *)v28 + 3) = v30;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraTransformProvider] = 0;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_lookAtBoxWorldProvider] = 0;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_sphericalShellAnimator] = 0;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_commandQueue] = 0;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_renderPipelineState] = 0;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_localTime] = 0;
  uint64_t v31 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_inFlightQueue;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for InFlightQueue<FreeformCloudRenderer.ResourceEntry>);
  uint64_t v32 = (void *)swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v33 = swift_allocObject();
  *(_DWORD *)(v33 + 16) = 0;
  v32[2] = v33;
  v32[3] = 0;
  v32[4] = v27;
  *(void *)&v10[v31] = v32;
  uint64_t v34 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_inFlightLock;
  uint64_t v35 = swift_allocObject();
  *(_DWORD *)(v35 + 16) = 0;
  *(void *)&v10[v34] = v35;
  uint64_t v36 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_baseRenderer;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_baseRenderer] = 0;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_pulseAnimationDuration] = 0x3FF0000000000000;
  *(_DWORD *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_motionGoodness] = 1065353216;
  *(_DWORD *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_captureDialOpacityFloor] = 1036831949;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer____lazy_storage___platterRenderer] = 1;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraFrustumRenderer] = 0;
  v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_showShotLocations] = 0;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraPathRenderer] = 0;
  uint64_t v37 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_insideOutsideManager;
  type metadata accessor for FreeformScanModeManager();
  uint64_t v38 = swift_allocObject();
  *(unsigned char *)(v38 + 16) = 0;
  *(int32x2_t *)(v38 + 20) = vdup_n_s32(0x3DCCCCCDu);
  *(void *)&v10[v37] = v38;
  *(int64x2_t *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewportSize] = vdupq_n_s64(0x4059000000000000uLL);
  int8x16_t v39 = &v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_backgroundColor];
  *(_OWORD *)int8x16_t v39 = 0u;
  *((_OWORD *)v39 + 1) = 0u;
  v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_isFullViewEnabled] = 0;
  v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_shouldTrackDevice] = 1;
  v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_shouldRenderPointsWithAlphaBlend] = 0;
  *(_DWORD *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_startBoundingEllipsoidFadeRadius] = 1064514355;
  *(_DWORD *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_endBoundingEllipsoidFadeRadius] = 1065772646;
  id v40 = MTLCreateSystemDefaultDevice();
  if (!v40) {
    goto LABEL_23;
  }
  float32x4_t v41 = v40;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_device] = v40;
  id v42 = objc_allocWithZone(MEMORY[0x263F12D90]);
  swift_unknownObjectRetain();
  id v43 = objc_msgSend(v42, sel_initWithFrame_device_, v41, 0.0, 0.0, 0.0, 0.0);
  float32x4_t v44 = *(void **)&v10[v18];
  *(void *)&v10[v18] = v43;

  type metadata accessor for BaseRenderer();
  float v45 = (void *)swift_allocObject();
  v45[3] = 0;
  v45[4] = 0;
  v45[2] = v41;
  id v46 = objc_allocWithZone(MEMORY[0x263F128A0]);
  swift_unknownObjectRetain_n();
  id v47 = objc_msgSend(v46, sel_init);
  objc_msgSend(v47, sel_setDepthCompareFunction_, 1);
  objc_msgSend(v47, sel_setDepthWriteEnabled_, 1);
  id v48 = objc_msgSend(v41, sel_newDepthStencilStateWithDescriptor_, v47);

  if (!v48)
  {
    __break(1u);
    goto LABEL_14;
  }
  v45[3] = v48;
  BaseRenderer.updateDepthAttachmentTexture(width:height:)(100, 100);
  swift_unknownObjectRelease();
  *(void *)&v10[v36] = v45;
  swift_release();
  uint64_t v49 = *(void *)&v10[v36];
  if (!v49)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ObjectCapturePoint>);
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 48) = 0u;
  *(void *)(v50 + 64) = 0;
  *(_OWORD *)(v50 + 32) = 0u;
  uint64_t v51 = v50 + 32;
  float v52 = *(void **)(v49 + 16);
  swift_retain();
  id v53 = objc_msgSend(v52, sel_newBufferWithBytes_length_options_, v51, 48, 0);
  swift_setDeallocating();
  swift_deallocClassInstance();
  swift_release();
  if (!v53)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_emptyPointCloudBuffer] = v53;

  float v54 = (objc_class *)type metadata accessor for FreeformCloudRenderer();
  v81.receiver = v10;
  v81.super_class = v54;
  float v55 = (char *)objc_msgSendSuper2(&v81, sel_init);
  FreeformCloudRenderer.initRenderPipeline()();
  uint64_t v56 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view;
  uint64_t v57 = *(void **)&v55[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view];
  if (!v57)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v57, sel_setDelegate_, v55);
  uint64_t v58 = *(void *)&v55[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_baseRenderer];
  if (!v58)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id v59 = objc_allocWithZone(MEMORY[0x263F128A0]);
  swift_retain_n();
  id v60 = objc_msgSend(v59, sel_init);
  objc_msgSend(v60, sel_setDepthCompareFunction_, 1);
  objc_msgSend(v60, sel_setDepthWriteEnabled_, 1);
  id v61 = objc_msgSend(v41, sel_newDepthStencilStateWithDescriptor_, v60);
  swift_release();

  *(void *)(v58 + 24) = v61;
  swift_release();
  swift_unknownObjectRelease();
  FreeformCloudRenderer.setupFeatherMask()();
  unint64_t v62 = *(void **)&v55[v56];
  if (!v62)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id v63 = objc_msgSend(v62, sel_layer);
  objc_msgSend(v63, sel_setOpaque_, 0);

  uint64_t v64 = *(void **)&v55[v56];
  if (!v64)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v65 = objc_msgSend(v64, sel_layer);
  CGColorRef GenericGray = CGColorCreateGenericGray(0.0, 0.0);
  objc_msgSend(v65, sel_setBackgroundColor_, GenericGray);

  id v67 = objc_allocWithZone((Class)type metadata accessor for InteractiveCameraTransformManager());
  uint64_t v68 = InteractiveCameraTransformManager.init(radius:springDelay:springTime:)(1.0, 1.0, 1.0);
  uint64_t v69 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraTransformProvider;
  uint64_t v70 = *(void **)&v55[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraTransformProvider];
  *(void *)&v55[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraTransformProvider] = v68;

  uint64_t v71 = *(char **)&v55[v69];
  if (!v71)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v72 = *(void **)&v55[v56];
  if (v72)
  {
    uint64_t v73 = *(void *)&v71[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_dragGesture];
    if (v73)
    {
      unint64_t v74 = v71;
      id v75 = v72;
      objc_msgSend(v75, sel_addGestureRecognizer_, v73);
      swift_unknownObjectRelease();

      return (uint64_t)v55;
    }
    goto LABEL_22;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall FreeformCloudRenderer.mtkView(_:drawableSizeWillChange:)(MTKView _, CGSize drawableSizeWillChange)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view);
  if (!v4) {
    goto LABEL_8;
  }
  CGFloat height = drawableSizeWillChange.height;
  CGFloat width = drawableSizeWillChange.width;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for MTKView);
  os_log_type_t v8 = _.super.super.super.isa;
  id v9 = v4;
  LOBYTE(_.super.super.super.isa) = static NSObject.== infix(_:_:)();

  if ((uint64_t)_.super.super.super.isa)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)logger);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v22 = v14;
      *(_DWORD *)uint64_t v13 = 136446210;
      type metadata accessor for CGSize(0);
      uint64_t v15 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v11, v12, "mtkView: size changed!  newSize=%{public}s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v14, -1, -1);
      MEMORY[0x24C5348D0](v13, -1, -1);
    }

    uint64_t v17 = (CGFloat *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewportSize);
    *uint64_t v17 = width;
    v17[1] = height;
    FreeformCloudRenderer.setupFeatherMask()();
  }
  else
  {
LABEL_8:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v19))
    {
      long long v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v20 = 0;
      _os_log_impl(&dword_2465C2000, oslog, v19, "mtkView delegate got unexpected view... ignoring!", v20, 2u);
      MEMORY[0x24C5348D0](v20, -1, -1);
    }
  }
}

void FreeformCloudRenderer.setupFeatherMask()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)static BoundingBoxHelpers.bundle;
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F157E8]), sel_init);
  id v4 = v2;
  uint64_t v5 = (void *)MEMORY[0x24C533410](0xD000000000000019, 0x80000002466BF560);
  id v6 = objc_msgSend(self, sel_imageNamed_inBundle_, v5, v4);

  if (!v6)
  {

    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)logger);
    long long v21 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v19))
    {
      long long v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v20 = 0;
      _os_log_impl(&dword_2465C2000, v21, v19, "Can't load miniview feather mask: \"miniview_feather_mask.png\"", v20, 2u);
      MEMORY[0x24C5348D0](v20, -1, -1);
    }
    goto LABEL_17;
  }
  id v7 = objc_msgSend(v6, sel_CGImage);
  objc_msgSend(v3, sel_setContents_, v7);

  objc_msgSend(v3, sel_setOpaque_, 0);
  objc_msgSend(v3, sel_setContentsGravity_, *MEMORY[0x263F15E10]);

  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_2465C2000, v9, v10, "Setting miniview feather mask layer...", v11, 2u);
    MEMORY[0x24C5348D0](v11, -1, -1);
  }

  uint64_t v12 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view;
  uint64_t v13 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view);
  if (!v13)
  {
    __break(1u);
    goto LABEL_21;
  }
  id v14 = objc_msgSend(v13, sel_layer);
  objc_msgSend(v14, sel_setMask_, v3);

  uint64_t v15 = *(void **)(v1 + v12);
  if (!v15)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v16 = objc_msgSend(v15, sel_layer);
  long long v21 = objc_msgSend(v16, sel_mask);

  if (!v21)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v17 = *(void **)(v1 + v12);
  if (!v17)
  {
LABEL_23:
    __break(1u);
    return;
  }
  objc_msgSend(v17, sel_bounds);
  -[NSObject setFrame:](v21, sel_setFrame_);

LABEL_17:
}

uint64_t FreeformCloudRenderer.setCameraFrustumRenderer(to:)(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraFrustumRenderer;
  *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraFrustumRenderer) = a1;
  swift_retain();
  uint64_t result = swift_release();
  if (*(void *)(v1 + v3))
  {
    uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view);
    if (!v5)
    {
      __break(1u);
      return result;
    }
    id v6 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_device);
    swift_retain();
    CameraFrustumRenderer.setup(device:pixelFormat:)(v6, (uint64_t)objc_msgSend(v5, sel_colorPixelFormat));
    uint64_t result = swift_release();
  }
  if (a1) {
    char v7 = *(unsigned char *)(a1 + 24);
  }
  else {
    char v7 = 0;
  }
  *(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_showShotLocations) = v7;
  return result;
}

void FreeformCloudRenderer.update(time:boundingBoxWorld:meshAnchors:arCameraTransform:motionScore:lastShotTime:pulseAnimationDuration:)(uint64_t a1, uint64_t a2, Swift::Double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float a7, double a8, double a9)
{
  uint64_t v10 = v9;
  float32x4_t v170 = a6;
  float32x4_t v171 = a5;
  float32x4_t v172 = a4;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  long long v20 = (uint64_t *)((char *)&v165 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *long long v20 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v18 + 104))(v20, *MEMORY[0x263F8F0E0], v17);
  char v21 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v22 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_localTime;
  *(Swift::Double *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_localTime) = a3;
  uint64_t v23 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_isFullViewEnabled;
  float v24 = 1.0;
  if (!*(unsigned char *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_isFullViewEnabled)) {
    float v24 = a7;
  }
  *(float *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_motionGoodness) = v24;
  uint64_t v25 = (float32x4_t *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_renderBoundingBoxWorld);
  outlined init with take of Animation?(a1, v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_renderBoundingBoxWorld, &demangling cache variable for type metadata for simd_float4x4?);
  outlined init with take of Animation?(a1, v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_clippedFreeformBoundingBoxWorld, &demangling cache variable for type metadata for simd_float4x4?);
  *(double *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_lastShotTime) = a8;
  *(void *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_meshAnchors) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(double *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_pulseAnimationDuration) = a9;
  FreeformCloudRenderer.updateInterfaceOrientationIfNeeded()();
  outlined init with take of Animation?(a1, (uint64_t)v175, &demangling cache variable for type metadata for simd_float4x4?);
  if ((v176 & 1) == 0)
  {
    float32x4_t v174 = (float32x4_t)v175[0];
    float32x4_t v173 = (float32x4_t)v175[1];
    float32x4_t v169 = (float32x4_t)v175[2];
    float32x4_t v168 = (float32x4_t)v175[3];
    if (*(unsigned char *)(v10 + v23) == 1)
    {
      uint64_t v26 = *(void *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraFrustumRenderer);
      if (v26)
      {
        if (*(unsigned char *)(v26 + 24) == 1)
        {
          uint64_t v27 = MEMORY[0x24C5349C0](v26 + 16);
          if (v27)
          {
            int32x4_t v28 = (void *)v27;
            uint64_t v29 = v27 + OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_cameraPosesBoundingBox;
            swift_beginAccess();
            uint64_t v30 = *(void *)v29;
            uint64_t v31 = *(void *)(v29 + 8);
            uint64_t v32 = *(void *)(v29 + 16);
            v167.i64[0] = *(void *)(v29 + 24);
            LOBYTE(v29) = *(unsigned char *)(v29 + 32);
            swift_retain();

            if ((v29 & 1) == 0)
            {
              v33.i64[0] = v30;
              v33.i64[1] = v31;
              float32x4_t v166 = v33;
              v33.i64[0] = v32;
              v33.i64[1] = v167.i64[0];
              float32x4_t v167 = v33;
              specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of FreeformCloudRenderer.update(time:boundingBoxWorld:meshAnchors:arCameraTransform:motionScore:lastShotTime:pulseAnimationDuration:));
              long long v165 = v34;
              specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of FreeformCloudRenderer.update(time:boundingBoxWorld:meshAnchors:arCameraTransform:motionScore:lastShotTime:pulseAnimationDuration:));
              BoundingBox.init(min:max:)();
              BoundingBox.transformed(by:)();
              BoundingBox.union(_:)();
              *(double *)v37.i64 = specialized static BoundingBoxHelpers.asSRTMatrix(box:)(v35, v36);
              float32x4_t v174 = v37;
              float32x4_t v173 = v38;
              float32x4_t v169 = v39;
              float32x4_t v168 = v40;
            }
            swift_release();
          }
        }
      }
    }
    uint64_t v41 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_lookAtBoxWorldProvider;
    uint64_t v42 = *(void *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_lookAtBoxWorldProvider);
    if (v42)
    {
      if (*(unsigned char *)(v10 + v23) != 1) {
        goto LABEL_21;
      }
      uint64_t v43 = *(void *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraFrustumRenderer);
      if (!v43) {
        goto LABEL_20;
      }
      int v44 = *(unsigned __int8 *)(v43 + 24);
      if (*(unsigned __int8 *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_showShotLocations) == v44) {
        goto LABEL_20;
      }
      *(unsigned char *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_showShotLocations) = v44;
      double v45 = *(double *)(v10 + v22);
      if (*(double *)(v42 + 24) > v45)
      {
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      *(double *)(v42 + 24) = v45;
      swift_retain();
      swift_retain();
      AnimatedTargetTransformProvider.updateAnimation()();
      float32x4_t v167 = *(float32x4_t *)(v42 + 48);
      float32x4_t v166 = *(float32x4_t *)(v42 + 64);
      long long v165 = *(_OWORD *)(v42 + 80);
      swift_release();
      specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v165, v166);
      Transform.init(matrix:)();
      float32x4_t v166 = v46;
      long long v165 = v47;
      float32x4_t v167 = v48;
      uint64_t v49 = *(void *)(v10 + v22);
      type metadata accessor for AnimatedTargetTransformProvider();
      uint64_t v50 = swift_allocObject();
      *(_OWORD *)(v50 + 208) = 0u;
      *(_OWORD *)(v50 + 224) = 0u;
      *(_OWORD *)(v50 + 240) = 0u;
      *(void *)(v50 + 192) = 0x3FC999999999999ALL;
      *(void *)(v50 + 256) = 0;
      *(unsigned char *)(v50 + 264) = 1;
      float32x4_t v51 = v166;
      long long v52 = v165;
      *(float32x4_t *)(v50 + 96) = v166;
      *(_OWORD *)(v50 + 112) = v52;
      *(int64x2_t *)(v50 + 32) = vdupq_n_s64(0xFFF0000000000000);
      *(float32x4_t *)(v50 + 48) = v51;
      float32x4_t v53 = v167;
      *(_OWORD *)(v50 + 64) = v52;
      *(float32x4_t *)(v50 + 80) = v53;
      *(float32x4_t *)(v50 + 128) = v53;
      *(float32x4_t *)(v50 + 144) = v51;
      *(_OWORD *)(v50 + 160) = v52;
      *(float32x4_t *)(v50 + 176) = v53;
      *(void *)(v50 + 24) = v49;
      *(void *)(v50 + 16) = 0x4000000000000000;
      *(void *)(v10 + v41) = v50;
      swift_release();
    }
    else
    {
      Transform.init(matrix:)();
      float32x4_t v166 = v54;
      long long v165 = v55;
      float32x4_t v167 = v56;
      type metadata accessor for AnimatedTargetTransformProvider();
      uint64_t v57 = swift_allocObject();
      *(_OWORD *)(v57 + 208) = 0u;
      *(_OWORD *)(v57 + 224) = 0u;
      *(_OWORD *)(v57 + 240) = 0u;
      *(void *)(v57 + 192) = 0x3FC999999999999ALL;
      *(void *)(v57 + 256) = 0;
      *(unsigned char *)(v57 + 264) = 1;
      float32x4_t v58 = v166;
      long long v59 = v165;
      *(float32x4_t *)(v57 + 96) = v166;
      *(_OWORD *)(v57 + 112) = v59;
      *(int64x2_t *)(v57 + 32) = vdupq_n_s64(0xFFF0000000000000);
      *(float32x4_t *)(v57 + 48) = v58;
      float32x4_t v60 = v167;
      *(_OWORD *)(v57 + 64) = v59;
      *(float32x4_t *)(v57 + 80) = v60;
      *(float32x4_t *)(v57 + 128) = v60;
      *(float32x4_t *)(v57 + 144) = v58;
      *(_OWORD *)(v57 + 160) = v59;
      *(float32x4_t *)(v57 + 176) = v60;
      *(Swift::Double *)(v57 + 24) = a3;
      *(void *)(v57 + 16) = 0x4000000000000000;
      *(void *)(v10 + v41) = v57;
    }
    swift_release();
LABEL_20:
    uint64_t v42 = *(void *)(v10 + v41);
    if (v42)
    {
LABEL_21:
      swift_retain();
      Transform.init(matrix:)();
      *(_OWORD *)(v42 + 208) = v61;
      *(_OWORD *)(v42 + 224) = v62;
      *(_OWORD *)(v42 + 240) = v63;
      *(Swift::Double *)(v42 + 256) = a3 + 0.5;
      *(unsigned char *)(v42 + 264) = 0;
      AnimatedTargetTransformProvider.updateAnimation()();
      swift_release();
      uint64_t v64 = *(void *)(v10 + v41);
      if (!v64)
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      if (*(double *)(v64 + 24) <= a3)
      {
        *(Swift::Double *)(v64 + 24) = a3;
        swift_retain();
        AnimatedTargetTransformProvider.updateAnimation()();
        float32x4_t v174 = *(float32x4_t *)(v64 + 48);
        float32x4_t v173 = *(float32x4_t *)(v64 + 64);
        float32x4_t v169 = *(float32x4_t *)(v64 + 80);
        swift_release();
        *(double *)v65.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v169.i64, v173);
        float32x4_t v167 = v65;
        float32x4_t v168 = v66;
        float32x4_t v169 = v67;
        float32x4_t v174 = v68;
        *uint64_t v25 = v65;
        v25[1] = v66;
        v25[2] = v67;
        v25[3] = v68;
        v25[4].i8[0] = 0;
        specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static BoundingBoxHelpers.getBoundingSphere(boxWorld:));
        float32x4_t v70 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v167, v69.f32[0]), v168, *(float32x2_t *)v69.f32, 1), v169, v69, 2), v174, v69, 3);
        float32x4_t v166 = v70;
        v70.i32[3] = 0;
        float32x4_t v173 = v70;
        Transform.init(matrix:)();
        float32x4_t v72 = vmulq_f32(v71, v71);
        v72.f32[0] = sqrtf(v72.f32[2] + vaddv_f32(*(float32x2_t *)v72.f32)) * 0.5;
        float32x4_t v174 = v72;
        type metadata accessor for SphericalShellWavefrontAnimation();
        uint64_t v73 = swift_allocObject();
        float v74 = v174.f32[0];
        *(float32x4_t *)(v73 + 16) = v173;
        *(float *)(v73 + 32) = v74;
        *(double *)(v73 + 40) = a9;
        *(float32x2_t *)(v73 + 48) = vmul_n_f32((float32x2_t)0x3C23D70A3E800000, v74);
        if (a9 > 0.001 && v74 > 0.001)
        {
          *(void *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_sphericalShellAnimator) = v73;
          swift_release();
          if ((v25[4].i8[0] & 1) == 0)
          {
            Transform.init(matrix:)();
            float32x4_t v173 = v75;
            float32x4_t v169 = v76;
            float32x4_t v168 = v77;
            specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of FreeformCloudRenderer.update(time:boundingBoxWorld:meshAnchors:arCameraTransform:motionScore:lastShotTime:pulseAnimationDuration:));
            specialized static MathHelpers.computeCameraDistanceToContainSphere(boxWorld:cameraFovRadians:nearPlaneDistance:boxPadding:)(v173, v78, 0.001, 1.1);
            *(double *)v79.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v168.i64, v169);
            float32x4_t v173 = v79;
            float32x4_t v169 = v80;
            float32x4_t v168 = v81;
            float32x4_t v167 = v82;
            specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static BoundingBoxHelpers.getBoundingSphere(boxWorld:));
            Transform.init(matrix:)();
            *(float *)&long long v83 = specialized static MathHelpers.computePerspectiveMatrix(fovRadians:aspectRatio:nearZ:farZ:)(1.0472, 1.0);
            uint64_t v84 = v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_projection;
            *(_OWORD *)uint64_t v84 = v83;
            *(_OWORD *)(v84 + 16) = v85;
            *(_OWORD *)(v84 + 32) = v86;
            *(_OWORD *)(v84 + 48) = v87;
            specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #3 of FreeformCloudRenderer.update(time:boundingBoxWorld:meshAnchors:arCameraTransform:motionScore:lastShotTime:pulseAnimationDuration:));
            if (*(unsigned char *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_shouldTrackDevice) == 1)
            {
              *(double *)v88.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v170.i64, v171);
              float32x4_t v171 = v88;
              float32x4_t v172 = v89;
              float32x4_t v173 = v90;
              float32x4_t v174 = v91;
              specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #4 of FreeformCloudRenderer.update(time:boundingBoxWorld:meshAnchors:arCameraTransform:motionScore:lastShotTime:pulseAnimationDuration:));
              float32x4_t v171 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v171, v92.f32[0]), v172, *(float32x2_t *)v92.f32, 1), v173, v92, 2), v174, v92, 3);
            }
            else
            {
              float v93 = v166.f32[2];
              specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #5 of FreeformCloudRenderer.update(time:boundingBoxWorld:meshAnchors:arCameraTransform:motionScore:lastShotTime:pulseAnimationDuration:));
              float32x4_t v95 = vmulq_f32(v94, (float32x4_t)vdupq_n_s32(0xBE8483ED));
              float32x4_t v173 = v95;
              v95.i32[3] = 1064781546;
              float32x4_t v172 = v95;
              specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #6 of FreeformCloudRenderer.update(time:boundingBoxWorld:meshAnchors:arCameraTransform:motionScore:lastShotTime:pulseAnimationDuration:));
              int32x4_t v96 = (int32x4_t)vmulq_f32(v172, (float32x4_t)xmmword_2466B7770);
              int32x4_t v97 = (int32x4_t)vnegq_f32((float32x4_t)v96);
              int8x16_t v98 = (int8x16_t)vtrn2q_s32(v96, vtrn1q_s32(v96, v97));
              float32x4_t v100 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v96, (int8x16_t)v97, 8uLL), *(float32x2_t *)v99.f32, 1);
              float32x4_t v101 = (float32x4_t)vrev64q_s32(v96);
              v101.i32[0] = v97.i32[1];
              v101.i32[3] = v97.i32[2];
              int32x4_t v102 = (int32x4_t)vmlaq_laneq_f32(vmlaq_n_f32(v100, (float32x4_t)vextq_s8(v98, v98, 8uLL), v99.f32[0]), v101, v99, 2);
              int32x4_t v103 = (int32x4_t)vnegq_f32((float32x4_t)v102);
              int8x16_t v104 = (int8x16_t)vtrn2q_s32(v102, vtrn1q_s32(v102, v103));
              float32x4_t v105 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v102, (int8x16_t)v103, 8uLL), *(float32x2_t *)v173.f32, 1), (float32x4_t)vextq_s8(v104, v104, 8uLL), v173.f32[0]);
              float32x4_t v106 = (float32x4_t)vrev64q_s32(v102);
              v106.i32[0] = v103.i32[1];
              v106.i32[3] = v103.i32[2];
              float32x4_t v107 = vmlaq_laneq_f32(vmulq_f32((float32x4_t)v102, (float32x4_t)vdupq_n_s32(0x3F7746EAu)), v106, v173, 2);
              float32x4_t v173 = vaddq_f32(v107, v105);
              v107.f32[0] = v174.f32[0] * 1.2;
              float32x4_t v174 = v107;
              float v108 = v93 + vmuls_lane_f32(v107.f32[0], v173, 2);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
              uint64_t inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = xmmword_2466B5DF0;
              *(float32x2_t *)(inited + 32) = vadd_f32(*(float32x2_t *)v166.f32, vmul_n_f32(*(float32x2_t *)v173.f32, v174.f32[0]));
              *(float *)(inited + 40) = v108;
              *(_DWORD *)(inited + 44) = 1065353216;
              specialized SIMD.init<A>(_:)(inited);
              float32x4_t v171 = v110;
              swift_setDeallocating();
            }
            Transform.init(matrix:)();
            float32x4_t v174 = v111;
            float32x4_t v173 = v112;
            specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #7 of FreeformCloudRenderer.update(time:boundingBoxWorld:meshAnchors:arCameraTransform:motionScore:lastShotTime:pulseAnimationDuration:));
            *(double *)v113.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v173.i64, v174);
            float32x4_t v170 = v113;
            float32x4_t v172 = v114;
            float32x4_t v173 = v115;
            float32x4_t v174 = v116;
            specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #8 of FreeformCloudRenderer.update(time:boundingBoxWorld:meshAnchors:arCameraTransform:motionScore:lastShotTime:pulseAnimationDuration:));
            if ((v25[4].i8[0] & 1) == 0)
            {
              float32x4_t v169 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v170, v117.f32[0]), v172, *(float32x2_t *)v117.f32, 1), v173, v117, 2), v174, v117, 3);
              Transform.init(matrix:)();
              float32x2_t v119 = *(float32x2_t *)v118.f32;
              float32x4_t v174 = v118;
              float32x4_t v173 = v120;
              float32x4_t v172 = v121;
              float32x4_t v122 = v171;
              v122.i32[3] = 0;
              float32x4_t v170 = v122;
              float32x4_t v123 = v169;
              v123.i32[3] = 0;
              *(float32x2_t *)v124.f32 = specialized static MiniViewHelpers.computeLookAt(cameraWorld:objectWorld:objectExtents:)(v122, v123, v119);
              __n128 v125 = (__n128)v124;
              float32x4_t v126 = vsubq_f32(v124, v171);
              int32x4_t v127 = (int32x4_t)vmulq_f32(v126, v126);
              v127.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v127, 2), vadd_f32(*(float32x2_t *)v127.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v127.i8, 1))).u32[0];
              float32x2_t v128 = vrsqrte_f32((float32x2_t)v127.u32[0]);
              float32x2_t v129 = vmul_f32(v128, vrsqrts_f32((float32x2_t)v127.u32[0], vmul_f32(v128, v128)));
              specialized static MathHelpers.computeCameraMatrixForConstrainedLookAt(box:boxPadding:lookAtPoint:lookAtDir:projection:useBoundingSphere:)(1, v174, v173, *(double *)v172.i64, 0.7, v125, vmulq_n_f32(v126, vmul_f32(v129, vrsqrts_f32((float32x2_t)v127.u32[0], vmul_f32(v129, v129))).f32[0]), COERCE_FLOAT(*(_OWORD *)v84), *(double *)(v84 + 16), v130, v131, v132, v133, v134, v135, v136, *(float32x4_t *)(v84 + 32), *(float32x4_t *)(v84 + 48));
              float32x4_t v171 = v137;
              float32x4_t v169 = v138;
              float32x4_t v168 = v139;
              float32x4_t v167 = v140;
              swift_retain();
              *(double *)v141.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v172.i64, v173);
              char v145 = FreeformScanModeManager.update(cameraPositionWorld:boundingBoxWorld:)(v170, v141, v142, v143, v144);
              swift_release();
              uint64_t v146 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraTransformProvider;
              uint64_t v147 = *(void **)(v10
                              + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraTransformProvider);
              if (v147)
              {
                char v148 = *(unsigned char *)(v10 + v23) | (v145 == 2);
                id v149 = v147;
                specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v172.i64, v173);
                InteractiveCameraTransformManager.updateTrackedCamera(at:viewToWorld:lookAtBoxWorld:projection:ignoreARCameraTracking:)(a3, (simd_float4x4 *)(v148 & 1), v150, v151, v152);

                unint64_t v153 = *(void **)(v10 + v146);
                if (v153)
                {
                  id v154 = v153;
                  *(double *)v155.i64 = InteractiveCameraTransformManager.computeCurrentTransform()();
                  float32x4_t v174 = v155;
                  float32x4_t v173 = v156;
                  float32x4_t v172 = v157;

                  *(double *)v158.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v172.i64, v173);
                  uint64_t v159 = (simd_float4x4 *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewToWorld);
                  *(simd_float4x4 *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewToWorld) = v158;
                  if (*(void *)(v10
                                 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraFrustumRenderer))
                  {
                    Swift::Double v160 = *(double *)(v10 + v22);
                    simd_float4x4 v177 = __invert_f4(v158);
                    float32x4_t v174 = (float32x4_t)v177.columns[0];
                    float32x4_t v173 = (float32x4_t)v177.columns[1];
                    float32x4_t v172 = (float32x4_t)v177.columns[2];
                    float32x4_t v171 = (float32x4_t)v177.columns[3];
                    float32x4_t v170 = *(float32x4_t *)v84;
                    float32x4_t v169 = *(float32x4_t *)(v84 + 16);
                    float32x4_t v168 = *(float32x4_t *)(v84 + 32);
                    float32x4_t v167 = *(float32x4_t *)(v84 + 48);
                    v161 = (simd_float4x4 *)swift_retain();
                    CameraFrustumRenderer.update(time:worldToView:viewToClip:)(v160, v161, v162);
                    swift_release();
                  }
                  if (*(void *)(v10 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraPathRenderer))
                  {
                    simd_float4x4 v178 = __invert_f4(*v159);
                    float32x4_t v174 = (float32x4_t)v178.columns[0];
                    float32x4_t v173 = (float32x4_t)v178.columns[1];
                    float32x4_t v172 = (float32x4_t)v178.columns[2];
                    float32x4_t v171 = (float32x4_t)v178.columns[3];
                    float32x4_t v170 = *(float32x4_t *)v84;
                    float32x4_t v169 = *(float32x4_t *)(v84 + 16);
                    float32x4_t v168 = *(float32x4_t *)(v84 + 32);
                    float32x4_t v167 = *(float32x4_t *)(v84 + 48);
                    v163 = (simd_float4x4 *)swift_retain();
                    CameraPathRenderer.update(worldToView:viewToClip:)(v163, v164);
                    swift_release();
                  }
                  return;
                }
LABEL_46:
                __break(1u);
                return;
              }
LABEL_45:
              __break(1u);
              goto LABEL_46;
            }
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        goto LABEL_40;
      }
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
}

void *FreeformCloudRenderer.updateInterfaceOrientationIfNeeded()()
{
  uint64_t result = *(void **)&v0[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view];
  if (result)
  {
    uint64_t v2 = v0;
    id v3 = objc_msgSend(result, sel_window);
    if (v3
      && (id v4 = v3, v5 = objc_msgSend(v3, sel_windowScene), v4, v5))
    {
      uint64_t v6 = (uint64_t)objc_msgSend(v5, sel_interfaceOrientation);
    }
    else
    {
      uint64_t v6 = 1;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    uint64_t result = (void *)swift_release();
    if (v6 != v15)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)logger);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v11 = swift_slowAlloc();
        uint64_t v15 = v11;
        *(_DWORD *)uint64_t v10 = 136315138;
        type metadata accessor for UIInterfaceOrientation(0);
        uint64_t v12 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v8, v9, "Device orientatation: publishing the renderer interfaceOrientation=%s", v10, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v11, -1, -1);
        MEMORY[0x24C5348D0](v10, -1, -1);
      }

      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v15 = v6;
      id v14 = v2;
      return (void *)static Published.subscript.setter();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void FreeformCloudRenderer.clearView()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view);
  if (!v1) {
    return;
  }
  id v13 = v1;
  id v2 = objc_msgSend(v13, sel_currentRenderPassDescriptor);
  if (v2)
  {
    id v3 = v2;
    id v4 = objc_msgSend(v2, sel_colorAttachments);
    id v5 = objc_msgSend(v4, sel_objectAtIndexedSubscript_, 0);

    if (v5)
    {
      objc_msgSend(v5, sel_setLoadAction_, 2);

      id v6 = objc_msgSend(v3, sel_colorAttachments);
      id v7 = objc_msgSend(v6, sel_objectAtIndexedSubscript_, 0);

      if (v7)
      {
        objc_msgSend(v7, sel_setClearColor_, *(double *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_backgroundColor), *(double *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_backgroundColor + 8), *(double *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_backgroundColor + 16), *(double *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_backgroundColor + 24));

        uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_commandQueue);
        if (v8)
        {
          id v9 = objc_msgSend(v8, sel_commandBuffer);
          if (v9)
          {
            uint64_t v10 = v9;
            id v11 = objc_msgSend(v9, sel_renderCommandEncoderWithDescriptor_, v3);
            if (v11)
            {
              objc_msgSend(v11, sel_endEncoding);
              id v12 = objc_msgSend(v13, sel_currentDrawable);
              if (v12)
              {
                objc_msgSend(v10, sel_presentDrawable_, v12);
                swift_unknownObjectRelease();
                objc_msgSend(v10, sel_commit);

                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                return;
              }
LABEL_21:
              __break(1u);
              return;
            }
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_18;
  }
}

Swift::Void __swiftcall FreeformCloudRenderer.draw(in:)(MTKView in)
{
  if (*(void *)(*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_meshAnchors) + 16)
    && (uint64_t v3 = swift_bridgeObjectRetain(),
        uint64_t v4 = specialized _NativeDictionary.filter(_:)(v3),
        swift_bridgeObjectRelease(),
        uint64_t v5 = *(void *)(v4 + 16),
        swift_release(),
        v5)
    && (*(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_renderBoundingBoxWorld + 64) & 1) == 0)
  {
    FreeformCloudRenderer.drawPoints(in:)(in.super.super.super.isa);
  }
  else
  {
    FreeformCloudRenderer.clearView()();
  }
}

uint64_t FreeformCloudRenderer.collectCurrentMeshAnchorMetalBuffers()()
{
  uint64_t v1 = v0;
  uint64_t v121 = type metadata accessor for FreeformMeshManager.MeshAnchor();
  uint64_t v106 = *(void *)(v121 - 8);
  MEMORY[0x270FA5388](v121);
  uint64_t v129 = (uint64_t)&v102 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: FreeformMeshManager.MeshAnchor)?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  id v6 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v102 - v7;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  id v12 = (uint64_t *)((char *)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t *v12 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x263F8F0E0], v9);
  char v13 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    swift_once();
LABEL_46:
    uint64_t v98 = type metadata accessor for Logger();
    __swift_project_value_buffer(v98, (uint64_t)logger);
    float32x4_t v99 = Logger.logObject.getter();
    os_log_type_t v100 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v99, v100))
    {
      float32x4_t v101 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float32x4_t v101 = 0;
      _os_log_impl(&dword_2465C2000, v99, v100, "Empty meshAnchors!  Nothing to render!", v101, 2u);
      MEMORY[0x24C5348D0](v101, -1, -1);
    }

    return MEMORY[0x263F8EE78];
  }
  uint64_t v107 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_meshAnchors);
  if (!*(void *)(v107 + 16))
  {
    if (one-time initialization token for logger == -1) {
      goto LABEL_46;
    }
    goto LABEL_52;
  }
  if (!*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_sphericalShellAnimator)) {
    goto LABEL_54;
  }
  SphericalShellWavefrontAnimation.sample(at:startingAt:)(*(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_localTime), *(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_lastShotTime));
  long long v117 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v20 = *(void *)(v107 + 64);
  uint64_t v104 = v107 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(v107 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v105 = (unint64_t)(v21 + 63) >> 6;
  int64_t v103 = v105 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v120 = 0;
  float v24 = (uint64_t *)MEMORY[0x263F8EE78];
  float32x4_t v118 = v8;
  float32x2_t v119 = v6;
  while (1)
  {
    if (v23)
    {
      unint64_t v26 = __clz(__rbit64(v23));
      uint64_t v27 = (v23 - 1) & v23;
      unint64_t v28 = v26 | (v120 << 6);
LABEL_11:
      uint64_t v29 = v107;
      uint64_t v30 = *(void *)(v107 + 48);
      uint64_t v31 = type metadata accessor for UUID();
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v6, v30 + *(void *)(*(void *)(v31 - 8) + 72) * v28, v31);
      uint64_t v32 = *(void *)(v29 + 56) + *(void *)(v106 + 72) * v28;
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: FreeformMeshManager.MeshAnchor));
      outlined init with copy of FreeformMeshManager.MeshAnchor(v32, (uint64_t)&v6[*(int *)(v33 + 48)]);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v6, 0, 1, v33);
      goto LABEL_30;
    }
    int64_t v34 = v120 + 1;
    if (__OFADD__(v120, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v34 < v105)
    {
      unint64_t v35 = *(void *)(v104 + 8 * v34);
      if (v35) {
        goto LABEL_15;
      }
      int64_t v36 = v120 + 2;
      ++v120;
      if (v34 + 1 < v105)
      {
        unint64_t v35 = *(void *)(v104 + 8 * v36);
        if (v35) {
          goto LABEL_18;
        }
        int64_t v120 = v34 + 1;
        if (v34 + 2 < v105)
        {
          unint64_t v35 = *(void *)(v104 + 8 * (v34 + 2));
          if (v35)
          {
            v34 += 2;
            goto LABEL_15;
          }
          int64_t v36 = v34 + 3;
          int64_t v120 = v34 + 2;
          if (v34 + 3 < v105) {
            break;
          }
        }
      }
    }
LABEL_29:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: FreeformMeshManager.MeshAnchor));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v6, 1, 1, v37);
    uint64_t v27 = 0;
LABEL_30:
    outlined init with take of Animation?((uint64_t)v6, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: FreeformMeshManager.MeshAnchor)?);
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: FreeformMeshManager.MeshAnchor));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v8, 1, v38) == 1)
    {
      swift_release();
      return (uint64_t)v24;
    }
    unint64_t v128 = v27;
    float32x4_t v126 = v24;
    uint64_t v39 = v129;
    outlined init with take of FreeformMeshManager.MeshAnchor((uint64_t)&v8[*(int *)(v38 + 48)], v129);
    uint64_t v40 = type metadata accessor for ObjectCaptureSession.Mesh.Anchor();
    *(void *)&long long v124 = &v102;
    uint64_t v41 = *(void *)(v40 - 8);
    MEMORY[0x270FA5388](v40);
    *(void *)&long long v123 = v42;
    uint64_t v43 = (char *)&v102 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    uint64_t v45 = *(void *)(*(void *)(v44 - 8) + 64);
    MEMORY[0x270FA5388](v44 - 8);
    unint64_t v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF0;
    long long v47 = (char *)&v102 - v46;
    outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v39, (uint64_t)&v102 - v46, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    float32x4_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    unsigned int v49 = v48((char *)&v102 - v46, 1, v40);
    uint64_t v127 = v40;
    uint64_t v125 = v41;
    *(void *)&long long v122 = v45;
    if (v49 == 1)
    {
      uint64_t v50 = v48;
      uint64_t v51 = outlined destroy of URL?((uint64_t)v47, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
      float v24 = v126;
      unint64_t v23 = v128;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v43, (char *)&v102 - v46, v40);
      float32x4_t v115 = &v102;
      uint64_t v52 = v129;
      uint64_t v53 = v121;
      uint64_t v54 = MEMORY[0x270FA5388](v129 + *(int *)(v121 + 20));
      long long v55 = (char *)&v102 - v46;
      outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v54, (uint64_t)&v102 - v46, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
      float32x4_t v56 = (char *)&v102 - v46;
      uint64_t v50 = v48;
      LODWORD(v116) = ((uint64_t (*)(char *, uint64_t, uint64_t))v48)(v56, 1, v40) != 1;
      outlined destroy of URL?((uint64_t)v55, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
      uint64_t v57 = v52;
      float v24 = v126;
      int v114 = *(unsigned __int8 *)(v57 + *(int *)(v53 + 28));
      float32x4_t v58 = (void *)ObjectCaptureSession.Mesh.Anchor.vertices.getter();
      float32x4_t v115 = (uint64_t *)objc_msgSend(v58, sel_count);

      long long v59 = (void *)ObjectCaptureSession.Mesh.Anchor.vertices.getter();
      id v113 = objc_msgSend(v59, sel_buffer);

      float32x4_t v60 = (void *)ObjectCaptureSession.Mesh.Anchor.normals.getter();
      id v112 = objc_msgSend(v60, sel_buffer);

      long long v61 = (void *)ObjectCaptureSession.Mesh.Anchor.colors.getter();
      id v62 = objc_msgSend(v61, sel_buffer);

      ObjectCaptureSession.Mesh.Anchor.transform.getter();
      long long v111 = v63;
      long long v110 = v64;
      long long v109 = v65;
      long long v108 = v66;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        float v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      }
      unint64_t v68 = v24[2];
      unint64_t v67 = v24[3];
      unint64_t v23 = v128;
      if (v68 >= v67 >> 1) {
        float v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v67 > 1), v68 + 1, 1, v24);
      }
      int v69 = (v114 | v116) & 1;
      v24[2] = v68 + 1;
      float32x4_t v70 = &v24[16 * v68];
      uint64_t v71 = (uint64_t)v113;
      v70[4] = (uint64_t)v115;
      v70[5] = v71;
      v70[6] = (uint64_t)v112;
      v70[7] = (uint64_t)v62;
      long long v72 = v110;
      *((_OWORD *)v70 + 4) = v111;
      *((_OWORD *)v70 + 5) = v72;
      long long v73 = v108;
      *((_OWORD *)v70 + 6) = v109;
      *((_OWORD *)v70 + 7) = v73;
      *((_OWORD *)v70 + 8) = v117;
      *((_DWORD *)v70 + 36) = v17;
      *((_DWORD *)v70 + 37) = v19;
      *((_DWORD *)v70 + 38) = v69;
      uint64_t v40 = v127;
      uint64_t v51 = (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v43, v127);
    }
    float32x4_t v126 = &v102;
    MEMORY[0x270FA5388](v51);
    float32x4_t v75 = (char *)&v102 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v76 = MEMORY[0x270FA5388](v129 + *(int *)(v121 + 20));
    double v78 = (char *)&v102 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v76, (uint64_t)v78, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    if (v50(v78, 1, v40) == 1)
    {
      outlined destroy of FreeformMeshManager.MeshAnchor(v129);
      outlined destroy of URL?((uint64_t)v78, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
      uint64_t v8 = v118;
      id v6 = v119;
    }
    else
    {
      uint64_t v79 = v125;
      (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v75, v78, v40);
      float32x4_t v80 = (void *)ObjectCaptureSession.Mesh.Anchor.vertices.getter();
      id v81 = objc_msgSend(v80, sel_count);

      float32x4_t v82 = (void *)ObjectCaptureSession.Mesh.Anchor.vertices.getter();
      id v83 = objc_msgSend(v82, sel_buffer);

      uint64_t v84 = (void *)ObjectCaptureSession.Mesh.Anchor.normals.getter();
      id v85 = objc_msgSend(v84, sel_buffer);

      long long v86 = (void *)ObjectCaptureSession.Mesh.Anchor.colors.getter();
      id v87 = objc_msgSend(v86, sel_buffer);

      ObjectCaptureSession.Mesh.Anchor.transform.getter();
      long long v123 = v89;
      long long v124 = v88;
      long long v122 = v90;
      long long v116 = v91;
      float32x4_t v92 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        float32x4_t v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      }
      unint64_t v94 = v92[2];
      unint64_t v93 = v92[3];
      if (v94 >= v93 >> 1) {
        float32x4_t v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v93 > 1), v94 + 1, 1, v92);
      }
      v92[2] = v94 + 1;
      float32x4_t v95 = &v92[16 * v94];
      v95[4] = (uint64_t)v81;
      v95[5] = (uint64_t)v83;
      v95[6] = (uint64_t)v85;
      v95[7] = (uint64_t)v87;
      float v24 = v92;
      long long v96 = v123;
      *((_OWORD *)v95 + 4) = v124;
      *((_OWORD *)v95 + 5) = v96;
      long long v97 = v116;
      *((_OWORD *)v95 + 6) = v122;
      *((_OWORD *)v95 + 7) = v97;
      *((_OWORD *)v95 + 8) = v117;
      *((_DWORD *)v95 + 36) = v17;
      *((_DWORD *)v95 + 37) = v19;
      *((_DWORD *)v95 + 38) = -1;
      (*(void (**)(char *, uint64_t))(v79 + 8))(v75, v127);
      outlined destroy of FreeformMeshManager.MeshAnchor(v129);
      uint64_t v8 = v118;
      id v6 = v119;
      unint64_t v23 = v128;
    }
    uint64_t v25 = type metadata accessor for UUID();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8))(v8, v25);
  }
  unint64_t v35 = *(void *)(v104 + 8 * v36);
  if (v35)
  {
LABEL_18:
    int64_t v34 = v36;
LABEL_15:
    uint64_t v27 = (v35 - 1) & v35;
    unint64_t v28 = __clz(__rbit64(v35)) + (v34 << 6);
    int64_t v120 = v34;
    goto LABEL_11;
  }
  while (1)
  {
    int64_t v34 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v34 >= v105)
    {
      int64_t v120 = v103;
      goto LABEL_29;
    }
    unint64_t v35 = *(void *)(v104 + 8 * v34);
    ++v36;
    if (v35) {
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

void FreeformCloudRenderer.drawPoints(in:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  long long v64 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v57 - v8;
  os_unfair_lock_t v66 = (os_unfair_lock_t)(*(void *)&v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_inFlightLock]
                         + 16);
  os_unfair_lock_lock(v66);
  id v10 = FreeformCloudRenderer.createUniforms()();
  uint64_t v11 = *(void *)&v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_emptyPointCloudBuffer];
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v12 = FreeformCloudRenderer.collectCurrentMeshAnchorMetalBuffers()();
  uint64_t v67 = (uint64_t)v10;
  uint64_t v13 = specialized InFlightQueue.retain(_:)((uint64_t)v10, v11, v12);
  id v14 = *(void **)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_commandQueue];
  if (!v14) {
    goto LABEL_40;
  }
  id v15 = objc_msgSend(v14, sel_commandBuffer);
  if (!v15)
  {
    swift_bridgeObjectRelease();
LABEL_32:
    swift_unknownObjectRelease();
    goto LABEL_33;
  }
  int v16 = v15;
  uint64_t v65 = v11;
  uint64_t v60 = v5;
  id v17 = objc_msgSend(a1, sel_currentRenderPassDescriptor);
  if (!v17)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  int v18 = v17;
  uint64_t v59 = v4;
  uint64_t v61 = v13;
  id v62 = a1;
  uint64_t v63 = v12;
  id v19 = objc_msgSend(v17, sel_colorAttachments);
  id v20 = objc_msgSend(v19, sel_objectAtIndexedSubscript_, 0);

  if (!v20)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  objc_msgSend(v20, sel_setLoadAction_, 2);

  id v21 = objc_msgSend(v18, sel_colorAttachments);
  id v22 = objc_msgSend(v21, sel_objectAtIndexedSubscript_, 0);

  if (!v22)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  objc_msgSend(v22, sel_setClearColor_, *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_backgroundColor], *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_backgroundColor + 8], *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_backgroundColor + 16], *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_backgroundColor + 24]);

  uint64_t v23 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_baseRenderer;
  if (!*(void *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_baseRenderer])
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  double v24 = *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewportSize];
  if ((~*(void *)&v24 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v24 <= -9.22337204e18)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v24 >= 9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  double v25 = *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewportSize + 8];
  if ((~*(void *)&v25 & 0x7FF0000000000000) == 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v25 <= -9.22337204e18)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v25 >= 9.22337204e18)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  Swift::Int v26 = (uint64_t)v24;
  Swift::Int v27 = (uint64_t)v25;
  swift_retain();
  BaseRenderer.updateDepthAttachmentTexture(width:height:)(v26, v27);
  swift_release();
  id v28 = objc_msgSend(v18, sel_depthAttachment);
  if (!v28)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v29 = *(void *)&v2[v23];
  uint64_t v30 = v67;
  if (!v29)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v31 = v63;
  if (!*(void *)(v29 + 32))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v32 = v28;
  objc_msgSend(v28, sel_setTexture_);

  id v33 = objc_msgSend(v18, sel_depthAttachment);
  if (!v33)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  int64_t v34 = v33;
  objc_msgSend(v33, (SEL)&selRef_touchesBegan_withEvent_ + 7, 2);

  id v35 = objc_msgSend(v18, sel_depthAttachment);
  if (!v35)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  int64_t v36 = v35;
  objc_msgSend(v35, sel_setStoreAction_, 1);

  specialized FreeformCloudRenderer.renderFreeformCloud(buffer:renderPassDescriptor:resources:)(v16, v18, v30, v31);
  uint64_t v37 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_isFullViewEnabled;
  if ((v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_isFullViewEnabled] & 1) != 0
    || (FreeformCloudRenderer.renderPlatter(buffer:renderPassDescriptor:)(v16, v18), v2[v37] == 1))
  {
    uint64_t v38 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraFrustumRenderer;
    if (*(void *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraFrustumRenderer])
    {
      swift_retain();
      CameraFrustumRenderer.render(into:desc:)(v16, v18);
      swift_release();
    }
    uint64_t v39 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraPathRenderer;
    uint64_t v40 = *(void *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraPathRenderer];
    if (v40)
    {
      uint64_t v41 = *(void *)&v2[v38];
      if (v41) {
        LOBYTE(v41) = *(unsigned char *)(v41 + 24);
      }
      char v42 = *(unsigned char *)(v40 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_enabled);
      *(unsigned char *)(v40 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_enabled) = v41;
      swift_retain();
      CameraPathRenderer.enabled.didset(v42);
      swift_release();
      uint64_t v43 = *(void *)&v2[v39];
      if (v43)
      {
        uint64_t v44 = &v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_colorScheme];
        swift_beginAccess();
        uint64_t v58 = v39;
        uint64_t v46 = v59;
        uint64_t v45 = v60;
        long long v47 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
        v47(v9, v44, v59);
        float32x4_t v48 = (char *)(v43 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_colorScheme);
        swift_beginAccess();
        v47(v64, v48, v46);
        swift_beginAccess();
        unsigned int v49 = *(void (**)(uint64_t, char *, uint64_t))(v45 + 24);
        swift_retain();
        v49((uint64_t)v48, v9, v46);
        swift_endAccess();
        uint64_t v50 = v64;
        CameraPathRenderer.colorScheme.didset();
        uint64_t v51 = *(void (**)(char *, uint64_t))(v45 + 8);
        v51(v9, v46);
        v51(v50, v46);
        swift_release();
        if (*(void *)&v2[v58])
        {
          swift_retain();
          specialized CameraPathRenderer.render(into:viewport:renderPassDescriptor:)(v16, v18);
          swift_release();
        }
      }
    }
  }
  id v52 = objc_msgSend(v62, sel_currentDrawable);
  if (v52)
  {
    objc_msgSend(v16, sel_presentDrawable_, v52);
    swift_unknownObjectRelease();
    uint64_t v53 = swift_allocObject();
    uint64_t v54 = v61;
    *(void *)(v53 + 16) = v2;
    *(void *)(v53 + 24) = v54;
    aBlock[4] = partial apply for closure #1 in FreeformCloudRenderer.drawPoints(in:);
    aBlock[5] = v53;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed MTLCommandBuffer) -> ();
    aBlock[3] = &block_descriptor_0;
    long long v55 = _Block_copy(aBlock);
    float32x4_t v56 = v2;
    swift_release();
    objc_msgSend(v16, sel_addCompletedHandler_, v55);
    _Block_release(v55);
    objc_msgSend(v16, sel_commit);

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_33:
    swift_unknownObjectRelease_n();
    os_unfair_lock_unlock(v66);
    return;
  }
LABEL_49:
  __break(1u);
}

void closure #1 in FreeformCloudRenderer.drawPoints(in:)(void *a1, uint64_t a2, uint64_t a3)
{
  specialized InFlightQueue.release(id:)(a3);
  uint64_t v4 = &off_2651E2000;
  id v5 = objc_msgSend(a1, sel_error);
  if (v5)
  {
    uint64_t v6 = v5;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    id v8 = v6;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(void *)&long long v57 = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      id v13 = v8;
      id v14 = objc_msgSend(v13, sel_description);
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      unint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, (uint64_t *)&v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v9, v10, "Got error rendering PIP CommandBuffer: error=%{public}s", v11, 0xCu);
      swift_arrayDestroy();
      uint64_t v18 = v12;
      uint64_t v4 = &off_2651E2000;
      MEMORY[0x24C5348D0](v18, -1, -1);
      MEMORY[0x24C5348D0](v11, -1, -1);
    }
    else
    {
    }
  }
  id v19 = [a1 (SEL)v4[305]];
  if (v19)
  {
    id v20 = v19;
    id v21 = objc_msgSend(v19, sel_userInfo);
    uint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v22 + 16) && (unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24), (v26 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v22 + 56) + 32 * v25, (uint64_t)&v57);
    }
    else
    {
      long long v57 = 0u;
      long long v58 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*((void *)&v58 + 1))
    {

      outlined destroy of URL?((uint64_t)&v57, (uint64_t *)&demangling cache variable for type metadata for Any?);
      return;
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [MTLCommandBufferEncoderInfo]);
    if ((swift_dynamicCast() & 1) == 0)
    {

      return;
    }
    unint64_t v27 = v56;
    if (v56 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v28) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v28 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v28)
      {
LABEL_16:
        unsigned int v49 = v20;
        if (v28 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v29 = 0;
        unint64_t v30 = v56 & 0xC000000000000001;
        uint64_t v31 = logger;
        unint64_t v32 = 0x268F90000uLL;
        unint64_t v50 = v56;
        do
        {
          if (v30)
          {
            id v33 = (void *)MEMORY[0x24C533AF0](v29, v27);
          }
          else
          {
            id v33 = *(void **)(v27 + 8 * v29 + 32);
            swift_unknownObjectRetain();
          }
          if (*(void *)(v32 + 776) != -1) {
            swift_once();
          }
          uint64_t v34 = type metadata accessor for Logger();
          __swift_project_value_buffer(v34, (uint64_t)v31);
          swift_unknownObjectRetain_n();
          id v35 = Logger.logObject.getter();
          os_log_type_t v36 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v35, v36))
          {
            uint64_t v54 = swift_slowAlloc();
            uint64_t v55 = swift_slowAlloc();
            unint64_t v56 = v55;
            *(_DWORD *)uint64_t v54 = 136446210;
            log = v35;
            id v37 = objc_msgSend(v33, sel_label, v49);
            uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v39 = v38;

            id v40 = objc_msgSend(v33, sel_debugSignposts);
            uint64_t v41 = v31;
            unint64_t v42 = v30;
            uint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            *(void *)&long long v57 = v43;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
            os_log_type_t type = v36;
            lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
            uint64_t v44 = BidirectionalCollection<>.joined(separator:)();
            uint64_t v45 = v28;
            long long v47 = v46;
            unint64_t v30 = v42;
            uint64_t v31 = v41;
            unint64_t v32 = 0x268F90000;
            swift_bridgeObjectRelease();
            *(void *)&long long v57 = v51;
            *((void *)&v57 + 1) = v39;
            swift_bridgeObjectRetain();
            v48._countAndFlagsBits = v44;
            v48._object = v47;
            String.append(_:)(v48);
            swift_bridgeObjectRelease();
            uint64_t v28 = v45;
            swift_bridgeObjectRelease();
            *(void *)(v54 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, *((unint64_t *)&v57 + 1), (uint64_t *)&v56);
            swift_unknownObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_2465C2000, log, type, "%{public}s", (uint8_t *)v54, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x24C5348D0](v55, -1, -1);
            unint64_t v27 = v50;
            MEMORY[0x24C5348D0](v54, -1, -1);
            swift_unknownObjectRelease();
          }
          else
          {

            swift_unknownObjectRelease_n();
          }
          ++v29;
        }
        while (v28 != v29);

        goto LABEL_32;
      }
    }

LABEL_32:
    swift_bridgeObjectRelease();
  }
}

void FreeformCloudRenderer.renderPlatter(buffer:renderPassDescriptor:)(void *a1, void *a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_lookAtBoxWorldProvider);
  if (!v3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  float32x4_t v47 = *(float32x4_t *)(v3 + 64);
  long long v46 = *(_OWORD *)(v3 + 80);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of FreeformCloudRenderer.renderPlatter(buffer:renderPassDescriptor:));
  long long v41 = v6;
  *(double *)&long long v7 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v46, v47);
  long long v44 = v8;
  long long v45 = v7;
  long long v42 = v10;
  long long v43 = v9;
  *(double *)&long long v11 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v46, v47);
  long long v15 = *(_OWORD *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewToWorld);
  long long v16 = *(_OWORD *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewToWorld + 16);
  long long v17 = *(_OWORD *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewToWorld + 32);
  long long v18 = *(_OWORD *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewToWorld + 48);
  uint64_t v19 = *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_lastShotTime);
  float v20 = *(float *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_motionGoodness);
  uint64_t v21 = *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_localTime);
  uint64_t v22 = v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_projection;
  long long v23 = *(_OWORD *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_projection);
  long long v24 = *(_OWORD *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_projection + 16);
  if (v20 <= 0.1) {
    float v20 = 0.1;
  }
  long long v25 = *(_OWORD *)(v22 + 32);
  long long v26 = *(_OWORD *)(v22 + 48);
  v48[0] = v45;
  v48[1] = v44;
  v48[2] = v43;
  v48[3] = v42;
  v48[4] = v11;
  v48[5] = v12;
  v48[6] = v13;
  v48[7] = v14;
  v48[8] = v15;
  v48[9] = v16;
  v48[10] = v17;
  v48[11] = v18;
  v48[12] = v23;
  v48[13] = v24;
  v48[14] = v25;
  v48[15] = v26;
  int v49 = 1060320051;
  uint64_t v50 = v19;
  float v51 = v20;
  uint64_t v52 = v21;
  id v27 = objc_msgSend(a2, sel_colorAttachments, v41);
  id v28 = objc_msgSend(v27, sel_objectAtIndexedSubscript_, 0);

  if (!v28) {
    goto LABEL_16;
  }
  objc_msgSend(v28, sel_setLoadAction_, 1);

  id v29 = objc_msgSend(a2, sel_depthAttachment);
  if (!v29)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v30 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_baseRenderer;
  uint64_t v31 = *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_baseRenderer);
  if (!v31)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!*(void *)(v31 + 32))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v32 = v29;
  objc_msgSend(v29, sel_setTexture_);

  id v33 = objc_msgSend(a2, sel_depthAttachment);
  if (!v33)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v34 = v33;
  objc_msgSend(v33, sel_setLoadAction_, 1);

  id v35 = objc_msgSend(a2, sel_depthAttachment);
  if (!v35)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  os_log_type_t v36 = v35;
  objc_msgSend(v35, sel_setStoreAction_, 0);

  if (!FreeformCloudRenderer.platterRenderer.getter())
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v37 = *(void *)(v2 + v30);
  if (!v37)
  {
LABEL_23:
    __break(1u);
    return;
  }
  double v39 = *(double *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewportSize);
  double v38 = *(double *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewportSize + 8);
  uint64_t v40 = *(void *)(v37 + 24);
  swift_unknownObjectRetain();
  PlatterRenderer.render(state:into:viewportSize:desc:depthStencilState:)((uint64_t)v48, a1, (uint64_t)a2, v40, v39, v38);
  swift_release();

  swift_unknownObjectRelease();
}

uint64_t FreeformCloudRenderer.renderAnchorMetalResource(uniforms:anchorResource:commandBuffer:renderPassDescriptor:)(uint64_t a1, uint64_t a2, id a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v7 = objc_msgSend(a3, sel_renderCommandEncoderWithDescriptor_, a4);
  if (!v7)
  {
    __break(1u);
    goto LABEL_6;
  }
  long long v8 = v7;
  v22.columns[0] = 0uLL;
  v22.columns[1] = *(simd_float4 *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewportSize);
  v22.columns[2] = (simd_float4)xmmword_2466B7BA0;
  objc_msgSend(v7, sel_setViewport_, &v22);
  uint64_t v9 = *(void *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_baseRenderer);
  if (!v9)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }
  objc_msgSend(v8, sel_setDepthStencilState_, *(void *)(v9 + 24));
  if (!*(void *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_renderPipelineState)) {
    goto LABEL_7;
  }
  objc_msgSend(v8, sel_setRenderPipelineState_);
  objc_msgSend(v8, sel_setVertexBuffer_offset_atIndex_, a1, 0, 0);
  objc_msgSend(v8, sel_setVertexBuffer_offset_atIndex_, *(void *)(a2 + 8), 0, 1);
  objc_msgSend(v8, sel_setVertexBuffer_offset_atIndex_, *(void *)(a2 + 16), 0, 2);
  objc_msgSend(v8, sel_setVertexBuffer_offset_atIndex_, *(void *)(a2 + 24), 0, 3);
  simd_float4 v10 = *(simd_float4 *)(a2 + 48);
  v22.columns[0] = *(simd_float4 *)(a2 + 32);
  v22.columns[1] = v10;
  simd_float4 v11 = *(simd_float4 *)(a2 + 80);
  v22.columns[2] = *(simd_float4 *)(a2 + 64);
  v22.columns[3] = v11;
  objc_msgSend(v8, sel_setVertexBytes_length_atIndex_, &v22, 64, 4);
  simd_float4x4 v25 = __invert_f4(v22);
  float32x2x2_t v12 = (float32x2x2_t)vzip1q_s32((int32x4_t)v25.columns[0], (int32x4_t)v25.columns[2]);
  float32x2x2_t v13 = (float32x2x2_t)vzip2q_s32((int32x4_t)v25.columns[0], (int32x4_t)v25.columns[2]);
  int32x4_t v14 = vzip1q_s32((int32x4_t)v25.columns[1], (int32x4_t)v25.columns[3]);
  int32x4_t v15 = vzip2q_s32((int32x4_t)v25.columns[1], (int32x4_t)v25.columns[3]);
  long long v16 = (float *)v20;
  vst2_f32(v16, v12);
  v16 += 4;
  *(int32x4_t *)long long v16 = vzip2q_s32((int32x4_t)v12, v14);
  long long v17 = (float *)v21;
  vst2_f32(v17, v13);
  v21[1] = vzip2q_s32((int32x4_t)v13, v15);
  objc_msgSend(v8, sel_setVertexBytes_length_atIndex_, v20, 64, 5);
  long long v18 = *(_OWORD *)(a2 + 112);
  v23[0] = *(_OWORD *)(a2 + 96);
  v23[1] = v18;
  objc_msgSend(v8, sel_setVertexBytes_length_atIndex_, v23, 32, 6);
  objc_msgSend(v8, sel_drawPrimitives_vertexStart_vertexCount_, 0, 0, *(void *)a2);
  objc_msgSend(v8, sel_endEncoding);
  return swift_unknownObjectRelease();
}

void FreeformCloudRenderer.initRenderPipeline()()
{
  v35[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_device);
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  v35[0] = 0;
  id v2 = objc_msgSend(v1, sel_newDefaultLibraryWithBundle_error_, static BaseRenderer.bundle, v35);
  if (!v2)
  {
    id v31 = v35[0];
    unint64_t v32 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type FreeformCloudRenderer.Error and conformance FreeformCloudRenderer.Error();
    swift_allocError();
    swift_willThrow();
    return;
  }
  uint64_t v3 = v2;
  id v4 = v35[0];
  id v5 = (void *)MEMORY[0x24C533410](0xD000000000000037, 0x80000002466BF4D0);
  id v6 = objc_msgSend(v3, sel_newFunctionWithName_, v5);

  id v7 = (void *)MEMORY[0x24C533410](0xD00000000000002ELL, 0x80000002466BF510);
  id v8 = objc_msgSend(v3, sel_newFunctionWithName_, v7);

  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F129C0]), sel_init);
  objc_msgSend(v9, sel_setAlphaToCoverageEnabled_, 0);
  objc_msgSend(v9, sel_setVertexFunction_, v6);
  objc_msgSend(v9, sel_setFragmentFunction_, v8);
  id v10 = objc_msgSend(v9, sel_colorAttachments);
  id v11 = objc_msgSend(v10, sel_objectAtIndexedSubscript_, 0);

  if (!v11)
  {
    __break(1u);
    goto LABEL_21;
  }
  float32x2x2_t v12 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view);
  if (!v12)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  objc_msgSend(v11, sel_setPixelFormat_, objc_msgSend(v12, sel_colorPixelFormat));

  id v13 = objc_msgSend(v9, sel_colorAttachments);
  id v14 = objc_msgSend(v13, sel_objectAtIndexedSubscript_, 0);

  if (!v14)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  objc_msgSend(v14, sel_setBlendingEnabled_, 0);

  id v15 = objc_msgSend(v9, sel_colorAttachments);
  id v16 = objc_msgSend(v15, sel_objectAtIndexedSubscript_, 0);

  if (!v16)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  objc_msgSend(v16, sel_setRgbBlendOperation_, 0);

  id v17 = objc_msgSend(v9, sel_colorAttachments);
  id v18 = objc_msgSend(v17, sel_objectAtIndexedSubscript_, 0);

  if (!v18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  objc_msgSend(v18, sel_setAlphaBlendOperation_, 0);

  id v19 = objc_msgSend(v9, sel_colorAttachments);
  id v20 = objc_msgSend(v19, sel_objectAtIndexedSubscript_, 0);

  if (!v20)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  objc_msgSend(v20, sel_setSourceRGBBlendFactor_, 4);

  id v21 = objc_msgSend(v9, sel_colorAttachments);
  id v22 = objc_msgSend(v21, sel_objectAtIndexedSubscript_, 0);

  if (!v22)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  objc_msgSend(v22, sel_setSourceAlphaBlendFactor_, 4);

  id v23 = objc_msgSend(v9, sel_colorAttachments);
  id v24 = objc_msgSend(v23, sel_objectAtIndexedSubscript_, 0);

  if (!v24)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  objc_msgSend(v24, sel_setDestinationRGBBlendFactor_, 5);

  id v25 = objc_msgSend(v9, sel_colorAttachments);
  id v26 = objc_msgSend(v25, sel_objectAtIndexedSubscript_, 0);

  if (!v26)
  {
LABEL_28:
    __break(1u);
    return;
  }
  objc_msgSend(v26, sel_setDestinationAlphaBlendFactor_, 5);

  objc_msgSend(v9, sel_setDepthAttachmentPixelFormat_, 252);
  v35[0] = 0;
  id v27 = objc_msgSend(v1, sel_newRenderPipelineStateWithDescriptor_error_, v9, v35);
  id v28 = v35[0];
  if (v27)
  {
    *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_renderPipelineState) = v27;
    id v29 = v28;
    swift_unknownObjectRelease();
    id v30 = objc_msgSend(v1, sel_newCommandQueue);
    if (v30)
    {
      *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_commandQueue) = v30;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      return;
    }
    lazy protocol witness table accessor for type FreeformCloudRenderer.Error and conformance FreeformCloudRenderer.Error();
    swift_allocError();
    swift_willThrow();
  }
  else
  {
    id v33 = v35[0];
    uint64_t v34 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type FreeformCloudRenderer.Error and conformance FreeformCloudRenderer.Error();
    swift_allocError();
    swift_willThrow();
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
}

id FreeformCloudRenderer.createUniforms()()
{
  id result = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_device), sel_newBufferWithLength_options_, 784, 0);
  if (result)
  {
    id v2 = result;
    uint64_t v3 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v4 = v2;
    *((_DWORD *)v3 + 135) = 0;
    float v5 = *(double *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewportSize);
    *((float *)v3 + 137) = v5 * 0.01;
    long long v6 = *MEMORY[0x263EF89A8];
    long long v7 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
    long long v8 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
    long long v9 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
    *(_OWORD *)uint64_t v3 = *MEMORY[0x263EF89A8];
    *((_OWORD *)v3 + 1) = v7;
    *((_OWORD *)v3 + 2) = v8;
    *((_OWORD *)v3 + 3) = v9;
    uint64_t v10 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_renderBoundingBoxWorld;
    long long v52 = v7;
    long long v53 = v6;
    long long v50 = v9;
    long long v51 = v8;
    Transform.init(matrix:)();
    double v46 = v12;
    float32x4_t v48 = v11;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of FreeformCloudRenderer.createUniforms());
    *(double *)&long long v13 = specialized simd_float4x4.init(translation:rotation:scale:)(v46, v48);
    *((_OWORD *)v3 + 8) = v13;
    *((_OWORD *)v3 + 9) = v14;
    *((_OWORD *)v3 + 10) = v15;
    *((_OWORD *)v3 + 11) = v16;
    id v17 = (_OWORD *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewToWorld);
    *((simd_float4x4 *)v3 + 3) = __invert_f4(*(simd_float4x4 *)(v0
                                                              + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_viewToWorld));
    long long v18 = v17[1];
    long long v19 = v17[2];
    long long v20 = v17[3];
    *((_OWORD *)v3 + 16) = *v17;
    *((_OWORD *)v3 + 17) = v18;
    *((_OWORD *)v3 + 18) = v19;
    *((_OWORD *)v3 + 19) = v20;
    long long v21 = *(_OWORD *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_projection + 16);
    long long v22 = *(_OWORD *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_projection + 32);
    long long v23 = *(_OWORD *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_projection + 48);
    *((_OWORD *)v3 + 20) = *(_OWORD *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_projection);
    *((_OWORD *)v3 + 21) = v21;
    *((_OWORD *)v3 + 22) = v22;
    *((_OWORD *)v3 + 23) = v23;
    *((_OWORD *)v3 + 24) = v53;
    *((_OWORD *)v3 + 25) = v52;
    *((_OWORD *)v3 + 26) = v51;
    *((_OWORD *)v3 + 27) = v50;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of FreeformCloudRenderer.createUniforms());
    *((void *)v3 + 56) = v24;
    *((_DWORD *)v3 + 114) = *(_DWORD *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_motionGoodness);
    v3[552] = 0;
    outlined init with take of Animation?(v10, (uint64_t)v60, &demangling cache variable for type metadata for simd_float4x4?);
    __n128 v25 = specialized static BoundingBoxHelpers.getBoundingSphere(boxWorld:)((uint64_t)v60);
    v25.n128_u32[2] = v26;
    *((__n128 *)v3 + 35) = v25;
    *((_DWORD *)v3 + 144) = v27;
    outlined init with take of Animation?(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_clippedFreeformBoundingBoxWorld, (uint64_t)v59, &demangling cache variable for type metadata for simd_float4x4?);
    specialized static BoundingBoxHelpers.getFadingClipEllipsoid(boxWorld:startFadeRadius:endFadeRadius:shouldClipBottom:)((uint64_t)v59, 1, (uint64_t)v54, 0.95, 1.05);
    long long v28 = v55;
    DWORD1(v28) = vmuls_lane_f32(0.5, *(float32x2_t *)&v55, 1);
    long long v49 = v28;
    LOBYTE(v17) = v57;
    int v29 = v58;
    Transform.init(matrix:)();
    float32x4_t v47 = v30;
    long long v45 = v31;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of FreeformCloudRenderer.createUniforms());
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
    *(_DWORD *)(inited + 32) = v45;
    *(_DWORD *)(inited + 36) = v29;
    *(_DWORD *)(inited + 40) = DWORD2(v45);
    specialized SIMD.init<A>(_:)(inited);
    *(void *)&long long v45 = v33;
    swift_setDeallocating();
    *(double *)v61.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v45, v47);
    *(simd_float4x4 *)(v3 + 592) = __invert_f4(v61);
    *((_OWORD *)v3 + 41) = v49;
    *((void *)v3 + 84) = v56;
    v3[680] = (char)v17;
    *((_DWORD *)v3 + 171) = v29;
    *((_WORD *)v3 + 344) = 257;
    Transform.init(matrix:)();
    float32x4_t v35 = vmulq_f32(v34, v34);
    float v36 = sqrtf(v35.f32[2] + vaddv_f32(*(float32x2_t *)v35.f32)) * 0.004;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of FreeformCloudRenderer.createPerlinNoiseParameters(for:));
    int32x4_t v37 = vdupq_lane_s32(0, 0);
    int32x4_t v38 = v37;
    v38.i32[0] = v39;
    int32x4_t v40 = v37;
    v40.i32[1] = v41;
    int32x4_t v42 = v37;
    v42.i32[2] = v43;
    v37.i32[3] = v44;
    *((float *)v3 + 176) = v36;
    *((int32x4_t *)v3 + 45) = v38;
    *((int32x4_t *)v3 + 46) = v40;
    *((int32x4_t *)v3 + 47) = v42;
    *((int32x4_t *)v3 + 48) = v37;
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id FreeformCloudRenderer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FreeformCloudRenderer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for FreeformCloudRenderer()
{
  return type metadata accessor for FreeformCloudRenderer();
}

uint64_t type metadata accessor for FreeformCloudRenderer()
{
  uint64_t result = type metadata singleton initialization cache for FreeformCloudRenderer;
  if (!type metadata singleton initialization cache for FreeformCloudRenderer) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for FreeformCloudRenderer()
{
  type metadata accessor for Published<UIInterfaceOrientation>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ColorScheme();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for Published<UIInterfaceOrientation>()
{
  if (!lazy cache variable for type metadata for Published<UIInterfaceOrientation>)
  {
    type metadata accessor for UIInterfaceOrientation(255);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<UIInterfaceOrientation>);
    }
  }
}

uint64_t destroy for FreeformCloudRenderer.ResourceEntry()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for FreeformCloudRenderer.ResourceEntry(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FreeformCloudRenderer.ResourceEntry(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FreeformCloudRenderer.ResourceEntry(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FreeformCloudRenderer.ResourceEntry(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FreeformCloudRenderer.ResourceEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for FreeformCloudRenderer.ResourceEntry()
{
  return &unk_26FACD868;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in FreeformCloudRenderer()
{
  return MEMORY[0x263EFDDD8];
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance FreeformCloudRenderer@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for FreeformCloudRenderer();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t key path getter for FreeformCloudRenderer.interfaceOrientation : FreeformCloudRenderer@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for FreeformCloudRenderer.interfaceOrientation : FreeformCloudRenderer(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x263EF8340];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    long long v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v7, v4, v2);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }
  return v2;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = a2;
  __int32 v44 = a1;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: FreeformMeshManager.MeshAnchor));
  uint64_t v4 = MEMORY[0x270FA5388](v58);
  char v57 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v56 = (char *)&v42 - v6;
  uint64_t v7 = type metadata accessor for FreeformMeshManager.MeshAnchor();
  uint64_t v55 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v54 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for UUID();
  uint64_t result = MEMORY[0x270FA5388](v52);
  long long v51 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = 0;
  uint64_t v60 = (void *)a3;
  uint64_t v13 = *(void *)(a3 + 64);
  uint64_t v45 = 0;
  uint64_t v46 = a3 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  uint64_t v49 = v10 + 32;
  uint64_t v50 = v10 + 16;
  uint64_t v53 = v10;
  int64_t v47 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v48 = v10 + 8;
  id v17 = v51;
  uint64_t v18 = v52;
  while (1)
  {
    if (v16)
    {
      uint64_t v61 = (v16 - 1) & v16;
      int64_t v62 = v12;
      unint64_t v19 = __clz(__rbit64(v16)) | (v12 << 6);
      goto LABEL_5;
    }
    int64_t v37 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v37 >= v47) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v44, v43, v45, v60);
    }
    unint64_t v38 = *(void *)(v46 + 8 * v37);
    int64_t v39 = v12 + 1;
    if (!v38)
    {
      int64_t v39 = v12 + 2;
      if (v12 + 2 >= v47) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v44, v43, v45, v60);
      }
      unint64_t v38 = *(void *)(v46 + 8 * v39);
      if (!v38)
      {
        int64_t v39 = v12 + 3;
        if (v12 + 3 >= v47) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(v44, v43, v45, v60);
        }
        unint64_t v38 = *(void *)(v46 + 8 * v39);
        if (!v38) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v61 = (v38 - 1) & v38;
    int64_t v62 = v39;
    unint64_t v19 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_5:
    long long v20 = v60;
    uint64_t v21 = v53;
    long long v22 = *(void (**)(char *, unint64_t, uint64_t))(v53 + 16);
    v22(v17, v60[6] + *(void *)(v53 + 72) * v19, v18);
    uint64_t v23 = v20[7];
    uint64_t v24 = *(void *)(v55 + 72);
    unint64_t v59 = v19;
    uint64_t v25 = v23 + v24 * v19;
    uint64_t v26 = v54;
    outlined init with copy of FreeformMeshManager.MeshAnchor(v25, v54);
    uint64_t v27 = v58;
    long long v28 = v56;
    uint64_t v29 = (uint64_t)&v56[*(int *)(v58 + 48)];
    v22(v56, (unint64_t)v17, v18);
    outlined init with copy of FreeformMeshManager.MeshAnchor(v26, v29);
    float32x4_t v30 = v57;
    uint64_t v31 = (uint64_t)&v57[*(int *)(v27 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v57, v28, v18);
    outlined init with take of FreeformMeshManager.MeshAnchor(v29, v31);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    MEMORY[0x270FA5388](v32 - 8);
    float32x4_t v34 = (char *)&v42 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v31, (uint64_t)v34, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    outlined destroy of FreeformMeshManager.MeshAnchor(v31);
    uint64_t v35 = type metadata accessor for ObjectCaptureSession.Mesh.Anchor();
    LODWORD(v31) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v34, 1, v35);
    outlined destroy of URL?((uint64_t)v34, &demangling cache variable for type metadata for ObjectCaptureSession.Mesh.Anchor?);
    float v36 = *(void (**)(char *, uint64_t))(v21 + 8);
    v36(v30, v18);
    outlined destroy of FreeformMeshManager.MeshAnchor(v26);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v36)(v17, v18);
    int64_t v12 = v62;
    unint64_t v16 = v61;
    if (v31 != 1)
    {
      *(unint64_t *)((char *)v44 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v59;
      if (__OFADD__(v45++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v44, v43, v45, v60);
      }
    }
  }
  uint64_t v40 = v12 + 4;
  if (v12 + 4 >= v47) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v44, v43, v45, v60);
  }
  unint64_t v38 = *(void *)(v46 + 8 * v40);
  if (v38)
  {
    int64_t v39 = v12 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v39 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v39 >= v47) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v44, v43, v45, v60);
    }
    unint64_t v38 = *(void *)(v46 + 8 * v39);
    ++v40;
    if (v38) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for FreeformMeshManager.MeshAnchor();
  uint64_t v52 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v57 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v51 = (uint64_t)&v44 - v11;
  uint64_t v56 = type metadata accessor for UUID();
  uint64_t v53 = *(void *)(v56 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v56);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v50 = (char *)&v44 - v15;
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, FreeformMeshManager.MeshAnchor>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v17 = result;
  __int32 v44 = a1;
  uint64_t v45 = a2;
  if (a2 < 1) {
    unint64_t v18 = 0;
  }
  else {
    unint64_t v18 = *a1;
  }
  uint64_t v19 = 0;
  uint64_t v47 = v53 + 32;
  uint64_t v48 = v53 + 16;
  uint64_t v20 = result + 64;
  uint64_t v49 = v14;
  uint64_t v46 = a4;
  uint64_t v21 = v56;
  while (1)
  {
    if (v18)
    {
      uint64_t v54 = (v18 - 1) & v18;
      uint64_t v55 = v19;
      unint64_t v22 = __clz(__rbit64(v18)) | (v19 << 6);
    }
    else
    {
      uint64_t v23 = v19 + 1;
      if (__OFADD__(v19, 1)) {
        goto LABEL_40;
      }
      if (v23 >= v45) {
        return v17;
      }
      unint64_t v24 = v44[v23];
      uint64_t v25 = v19 + 1;
      if (!v24)
      {
        uint64_t v25 = v19 + 2;
        if (v19 + 2 >= v45) {
          return v17;
        }
        unint64_t v24 = v44[v25];
        if (!v24)
        {
          uint64_t v25 = v19 + 3;
          if (v19 + 3 >= v45) {
            return v17;
          }
          unint64_t v24 = v44[v25];
          if (!v24)
          {
            uint64_t v26 = v19 + 4;
            if (v19 + 4 >= v45) {
              return v17;
            }
            unint64_t v24 = v44[v26];
            if (!v24)
            {
              while (1)
              {
                uint64_t v25 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_41;
                }
                if (v25 >= v45) {
                  return v17;
                }
                unint64_t v24 = v44[v25];
                ++v26;
                if (v24) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v25 = v19 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v54 = (v24 - 1) & v24;
      uint64_t v55 = v25;
      unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
    }
    uint64_t v27 = v53;
    uint64_t v28 = *(void *)(v53 + 72);
    uint64_t v29 = v50;
    (*(void (**)(char *, unint64_t, uint64_t))(v53 + 16))(v50, a4[6] + v28 * v22, v21);
    uint64_t v30 = *(void *)(v52 + 72);
    uint64_t v31 = a4[7] + v30 * v22;
    uint64_t v32 = v51;
    outlined init with copy of FreeformMeshManager.MeshAnchor(v31, v51);
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    float32x4_t v34 = v49;
    v33(v49, v29, v21);
    outlined init with take of FreeformMeshManager.MeshAnchor(v32, v57);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v35 = -1 << *(unsigned char *)(v17 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v20 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v38 = __clz(__rbit64((-1 << v36) & ~*(void *)(v20 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v41 = v37 == v40;
        if (v37 == v40) {
          unint64_t v37 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v20 + 8 * v37);
      }
      while (v42 == -1);
      unint64_t v38 = __clz(__rbit64(~v42)) + (v37 << 6);
    }
    *(void *)(v20 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v38;
    v33((char *)(*(void *)(v17 + 48) + v38 * v28), v34, v56);
    uint64_t result = outlined init with take of FreeformMeshManager.MeshAnchor(v57, *(void *)(v17 + 56) + v38 * v30);
    ++*(void *)(v17 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v46;
    unint64_t v18 = v54;
    uint64_t v19 = v55;
    if (!a3) {
      return v17;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized FreeformMiniView.init(model:renderer:)@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  id v28 = a1;
  uint64_t v3 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.MakeConnectable<NSNotificationCenter.Publisher>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_msgSend(self, sel_currentDevice);
  id v12 = objc_msgSend(v11, sel_orientation);

  id v29 = v12;
  type metadata accessor for UIDeviceOrientation(0);
  State.init(wrappedValue:)();
  uint64_t v13 = v30;
  uint64_t v27 = v31;
  id v14 = objc_msgSend(self, sel_defaultCenter);
  NSNotificationCenter.publisher(for:object:)();

  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher, MEMORY[0x263F07CB0]);
  Publisher<>.makeConnectable()();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Publishers.MakeConnectable<NSNotificationCenter.Publisher> and conformance Publishers.MakeConnectable<A>, &demangling cache variable for type metadata for Publishers.MakeConnectable<NSNotificationCenter.Publisher>);
  uint64_t v15 = ConnectablePublisher.autoconnect()();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  type metadata accessor for DataModel(0);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, (void (*)(uint64_t))type metadata accessor for DataModel);
  swift_retain();
  uint64_t v16 = ObservedObject.init(wrappedValue:)();
  uint64_t v18 = v17;
  type metadata accessor for FreeformCloudRenderer();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type FreeformCloudRenderer and conformance FreeformCloudRenderer, (void (*)(uint64_t))type metadata accessor for FreeformCloudRenderer);
  uint64_t v19 = (char *)v28;
  uint64_t v20 = ObservedObject.init(wrappedValue:)();
  uint64_t v22 = v21;
  uint64_t v23 = *(void *)&v19[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_id];
  uint64_t result = swift_bridgeObjectRetain();
  *a2 = v23;
  a2[1] = result;
  a2[2] = v16;
  a2[3] = v18;
  a2[4] = v20;
  a2[5] = v22;
  uint64_t v25 = v27;
  a2[6] = v13;
  a2[7] = v25;
  a2[8] = v15;
  return result;
}

unint64_t lazy protocol witness table accessor for type FreeformCloudRenderer.Error and conformance FreeformCloudRenderer.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type FreeformCloudRenderer.Error and conformance FreeformCloudRenderer.Error;
  if (!lazy protocol witness table cache variable for type FreeformCloudRenderer.Error and conformance FreeformCloudRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FreeformCloudRenderer.Error and conformance FreeformCloudRenderer.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FreeformCloudRenderer.Error and conformance FreeformCloudRenderer.Error;
  if (!lazy protocol witness table cache variable for type FreeformCloudRenderer.Error and conformance FreeformCloudRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FreeformCloudRenderer.Error and conformance FreeformCloudRenderer.Error);
  }
  return result;
}

void specialized FreeformCloudRenderer.renderFreeformCloud(buffer:renderPassDescriptor:resources:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  if (v4)
  {
    long long v8 = *(_OWORD *)(a4 + 112);
    long long v35 = *(_OWORD *)(a4 + 96);
    long long v36 = v8;
    long long v9 = *(_OWORD *)(a4 + 144);
    long long v37 = *(_OWORD *)(a4 + 128);
    long long v38 = v9;
    long long v10 = *(_OWORD *)(a4 + 48);
    long long v31 = *(_OWORD *)(a4 + 32);
    long long v32 = v10;
    long long v11 = *(_OWORD *)(a4 + 80);
    long long v33 = *(_OWORD *)(a4 + 64);
    long long v34 = v11;
    swift_bridgeObjectRetain();
    outlined retain of FreeformCloudRenderer.AnchorMetalResource((uint64_t)&v31);
    id v12 = objc_msgSend(a2, sel_colorAttachments);
    id v13 = objc_msgSend(v12, sel_objectAtIndexedSubscript_, 0);

    if (!v13)
    {
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    objc_msgSend(v13, sel_setLoadAction_, 2);

    id v14 = objc_msgSend(a2, sel_depthAttachment);
    if (!v14)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    uint64_t v15 = v14;
    objc_msgSend(v14, sel_setLoadAction_, 2);

    id v16 = objc_msgSend(a2, sel_depthAttachment);
    if (!v16)
    {
LABEL_15:
      __break(1u);
      return;
    }
    uint64_t v17 = v16;
    objc_msgSend(v16, sel_setStoreAction_, 1);

    FreeformCloudRenderer.renderAnchorMetalResource(uniforms:anchorResource:commandBuffer:renderPassDescriptor:)(a3, (uint64_t)&v31, a1, (uint64_t)a2);
    outlined release of FreeformCloudRenderer.AnchorMetalResource((uint64_t)&v31);
    uint64_t v18 = v4 - 1;
    if (v18)
    {
      uint64_t v19 = (long long *)(a4 + 160);
      do
      {
        long long v20 = v19[5];
        long long v35 = v19[4];
        long long v36 = v20;
        long long v21 = v19[7];
        long long v37 = v19[6];
        long long v38 = v21;
        long long v22 = v19[1];
        long long v31 = *v19;
        long long v32 = v22;
        long long v23 = v19[3];
        long long v33 = v19[2];
        long long v34 = v23;
        outlined retain of FreeformCloudRenderer.AnchorMetalResource((uint64_t)&v31);
        id v24 = objc_msgSend(a2, sel_colorAttachments);
        id v25 = objc_msgSend(v24, sel_objectAtIndexedSubscript_, 0);

        if (!v25) {
          goto LABEL_13;
        }
        objc_msgSend(v25, sel_setLoadAction_, 1);

        id v26 = objc_msgSend(a2, sel_depthAttachment);
        if (!v26) {
          goto LABEL_14;
        }
        uint64_t v27 = v26;
        objc_msgSend(v26, sel_setLoadAction_, 1);

        id v28 = objc_msgSend(a2, sel_depthAttachment);
        if (!v28) {
          goto LABEL_15;
        }
        id v29 = v28;
        objc_msgSend(v28, sel_setStoreAction_, 1);

        FreeformCloudRenderer.renderAnchorMetalResource(uniforms:anchorResource:commandBuffer:renderPassDescriptor:)(a3, (uint64_t)&v31, a1, (uint64_t)a2);
        outlined release of FreeformCloudRenderer.AnchorMetalResource((uint64_t)&v31);
        v19 += 8;
      }
      while (--v18);
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_246601F98()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in FreeformCloudRenderer.drawPoints(in:)(void *a1)
{
  closure #1 in FreeformCloudRenderer.drawPoints(in:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t outlined retain of FreeformCloudRenderer.AnchorMetalResource(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of FreeformCloudRenderer.AnchorMetalResource(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of PlatterRenderer??(uint64_t result)
{
  if (result != 1) {
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of PlatterRenderer??(uint64_t result)
{
  if (result != 1) {
    return swift_retain();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FreeformCloudRenderer.Error(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for FreeformCloudRenderer.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x246602198);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTag for FreeformCloudRenderer.Error()
{
  return 0;
}

ValueMetadata *type metadata accessor for FreeformCloudRenderer.Error()
{
  return &type metadata for FreeformCloudRenderer.Error;
}

uint64_t destroy for FreeformCloudRenderer.AnchorMetalResource()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for FreeformCloudRenderer.AnchorMetalResource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FreeformCloudRenderer.AnchorMetalResource(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  return a1;
}

__n128 __swift_memcpy128_16(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for FreeformCloudRenderer.AnchorMetalResource(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for FreeformCloudRenderer.AnchorMetalResource(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FreeformCloudRenderer.AnchorMetalResource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FreeformCloudRenderer.AnchorMetalResource()
{
  return &type metadata for FreeformCloudRenderer.AnchorMetalResource;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for FreeformMiniView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();

  return swift_release();
}

void *initializeWithCopy for FreeformMiniView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  long long v5 = (void *)a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_retain();
  id v7 = v5;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for FreeformMiniView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  uint64_t v4 = (void *)a2[5];
  long long v5 = (void *)a1[5];
  a1[5] = v4;
  id v6 = v4;

  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for FreeformMiniView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_release();
  uint64_t v6 = *(void *)(a2 + 40);
  id v7 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FreeformMiniView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FreeformMiniView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FreeformMiniView()
{
  return &type metadata for FreeformMiniView;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in FreeformMiniView()
{
  return MEMORY[0x263F8D320];
}

uint64_t associated type witness table accessor for View.Body : View in FreeformMiniView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in FreeformMiniView.body.getter()
{
  return closure #1 in FreeformMiniView.body.getter(v0 + 16);
}

uint64_t partial apply for closure #2 in FreeformMiniView.body.getter(uint64_t a1)
{
  return closure #2 in FreeformMiniView.body.getter(a1, v1 + 16);
}

uint64_t outlined retain of FreeformMiniView(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  id v3 = v2;
  return a1;
}

uint64_t outlined retain of ObservedObject<FreeformCloudRenderer>(uint64_t a1)
{
  id v2 = *(id *)(a1 + 8);
  return a1;
}

uint64_t objectdestroy_117Tm()
{
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t partial apply for closure #3 in FreeformMiniView.body.getter(uint64_t *a1)
{
  return closure #3 in FreeformMiniView.body.getter(a1, v1 + 16);
}

uint64_t outlined release of FreeformMiniView(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t partial apply for closure #1 in closure #2 in FreeformMiniView.body.getter()
{
  return closure #1 in closure #2 in FreeformMiniView.body.getter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void *type metadata accessor for FreeformMiniViewWrapper()
{
  return &unk_26FACDB10;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<FreeformMiniViewWrapper, _AppearanceActionModifier>>>, _RotationEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<FreeformMiniViewWrapper, _AppearanceActionModifier>>>, _RotationEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<FreeformMiniViewWrapper, _AppearanceActionModifier>>>, _RotationEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<FreeformMiniViewWrapper, _AppearanceActionModifier>>>, _RotationEffect>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<FreeformMiniViewWrapper, _AppearanceActionModifier>>> and conformance SubscriptionView<A, B>, &demangling cache variable for type metadata for SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<FreeformMiniViewWrapper, _AppearanceActionModifier>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<FreeformMiniViewWrapper, _AppearanceActionModifier>>>, _RotationEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in FreeformMiniViewWrapper()
{
  return MEMORY[0x263F1BB58];
}

unint64_t lazy protocol witness table accessor for type FreeformMiniViewWrapper and conformance FreeformMiniViewWrapper()
{
  unint64_t result = lazy protocol witness table cache variable for type FreeformMiniViewWrapper and conformance FreeformMiniViewWrapper;
  if (!lazy protocol witness table cache variable for type FreeformMiniViewWrapper and conformance FreeformMiniViewWrapper)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FreeformMiniViewWrapper and conformance FreeformMiniViewWrapper);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FreeformMiniViewWrapper and conformance FreeformMiniViewWrapper;
  if (!lazy protocol witness table cache variable for type FreeformMiniViewWrapper and conformance FreeformMiniViewWrapper)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FreeformMiniViewWrapper and conformance FreeformMiniViewWrapper);
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RampAnimation.AnimType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t RampAnimation.init(type:duration:target:startValue:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  *(void *)(v5 + 48) = 0;
  *(void *)(v5 + 56) = 0;
  *(void *)(v5 + 64) = 0xFFF0000000000000;
  *(unsigned char *)(v5 + 24) = result & 1;
  *(double *)(v5 + 16) = a5;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a3;
  float v6 = 0.0;
  if (result) {
    float v6 = 1.0;
  }
  if ((a4 & 0x100000000) == 0) {
    float v6 = *(float *)&a4;
  }
  *(float *)(v5 + 72) = v6;
  if (v6 >= 0.0 && v6 <= 1.0) {
    return v5;
  }
  __break(1u);
  return result;
}

Swift::Float __swiftcall RampAnimation.update(time:)(Swift::Double time)
{
  *(Swift::Double *)(v1 + 64) = time;
  double v3 = *(double *)(v1 + 48);
  v2.n128_u64[0] = 0;
  float v4 = 0.0;
  if (v3 <= time)
  {
    double v5 = *(double *)(v1 + 56);
    float v4 = 1.0;
    if (v5 >= time) {
      float v4 = (time - v3) / (v5 - v3);
    }
  }
  float v6 = *(float *)(v1 + 72);
  float v7 = (float)(1.0 - v4) * v6;
  float v8 = v6 + (float)(v4 * (float)(1.0 - v6));
  if (*(unsigned char *)(v1 + 24)) {
    float v8 = v7;
  }
  if (v8 <= 0.0) {
    float v8 = 0.0;
  }
  if (v8 <= 1.0) {
    float v9 = v8;
  }
  else {
    float v9 = 1.0;
  }
  long long v10 = *(void (**)(float, __n128))(v1 + 32);
  if (v10) {
    v10(v9, v2);
  }
  return v9;
}

uint64_t RampAnimation.__deallocating_deinit()
{
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?(*(void *)(v0 + 32));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RampAnimation()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for RampAnimation.AnimType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246602D84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RampAnimation.AnimType()
{
  return &type metadata for RampAnimation.AnimType;
}

unint64_t lazy protocol witness table accessor for type RampAnimation.AnimType and conformance RampAnimation.AnimType()
{
  unint64_t result = lazy protocol witness table cache variable for type RampAnimation.AnimType and conformance RampAnimation.AnimType;
  if (!lazy protocol witness table cache variable for type RampAnimation.AnimType and conformance RampAnimation.AnimType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RampAnimation.AnimType and conformance RampAnimation.AnimType);
  }
  return result;
}

double AnimatedTargetTransformProvider.updateAnimation()()
{
  double v2 = *(double *)(v0 + 32);
  double v1 = *(double *)(v0 + 40);
  double result = *(double *)(v0 + 24);
  if (v2 <= result && result < v1)
  {
    float v5 = 1.0;
    if (result > v1 || (float v5 = (result - v2) / (v1 - v2), v6 = 0.0, v5 > 0.0) && (v6 = 1.0, v5 <= 1.0)) {
      float v6 = v5;
    }
    float v7 = (float)(v6 * v6) / (float)((float)((float)((float)(v6 * v6) - v5) + (float)((float)(v6 * v6) - v5)) + 1.0);
    float32x4_t v19 = vmlaq_n_f32(*(float32x4_t *)(v0 + 96), vsubq_f32(*(float32x4_t *)(v0 + 144), *(float32x4_t *)(v0 + 96)), v7);
    float32x4_t v18 = vmlaq_n_f32(*(float32x4_t *)(v0 + 128), vsubq_f32(*(float32x4_t *)(v0 + 176), *(float32x4_t *)(v0 + 128)), v7);
    simd_slerp(*(float32x4_t *)(v0 + 112), *(float32x4_t *)(v0 + 160), v7);
    long long v17 = v8;
    static simd_quatf.identity.getter();
    *(float32x4_t *)(v0 + 48) = v19;
    *(_OWORD *)(v0 + 64) = v17;
    *(float32x4_t *)(v0 + 80) = v18;
    double v2 = *(double *)(v0 + 32);
    double v1 = *(double *)(v0 + 40);
    double result = *(double *)(v0 + 24);
  }
  BOOL v9 = v2 <= result && result < v1;
  if (!v9 && (*(unsigned char *)(v0 + 264) & 1) == 0)
  {
    double v10 = *(double *)(v0 + 256);
    long long v12 = *(_OWORD *)(v0 + 208);
    long long v11 = *(_OWORD *)(v0 + 224);
    uint64_t v13 = *(void *)(v0 + 240);
    uint64_t v14 = *(void *)(v0 + 248);
    long long v15 = *(_OWORD *)(v0 + 64);
    long long v16 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 96) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 112) = v15;
    *(_OWORD *)(v0 + 128) = v16;
    *(_OWORD *)(v0 + 144) = v12;
    *(_OWORD *)(v0 + 160) = v11;
    *(void *)(v0 + 176) = v13;
    *(void *)(v0 + 184) = v14;
    if (v10 <= result + 0.2) {
      double v10 = result + 0.2;
    }
    *(double *)(v0 + 32) = result;
    *(double *)(v0 + 40) = v10;
    double result = 0.0;
    *(_OWORD *)(v0 + 208) = 0u;
    *(_OWORD *)(v0 + 224) = 0u;
    *(_OWORD *)(v0 + 240) = 0u;
    *(void *)(v0 + 256) = 0;
    *(unsigned char *)(v0 + 264) = 1;
  }
  return result;
}

uint64_t AnimatedTargetTransformProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnimatedTargetTransformProvider()
{
  return self;
}

__n128 __swift_memcpy56_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AnimatedTargetTransformProvider.Target(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AnimatedTargetTransformProvider.Target(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 56) = v3;
  return result;
}

void *type metadata accessor for AnimatedTargetTransformProvider.Target()
{
  return &unk_26FACDC50;
}

__n128 protocol witness for TransformProvider.transform.getter in conformance AnimatedTargetTransformProvider()
{
  return v0[3];
}

void simd_slerp(float32x4_t a1, float32x4_t a2, float a3)
{
  int8x16_t v3 = (int8x16_t)vmulq_f32(a1, a2);
  float32x4_t v4 = (float32x4_t)vextq_s8(v3, v3, 8uLL);
  *(float32x2_t *)v3.i8 = vadd_f32(*(float32x2_t *)v3.i8, *(float32x2_t *)v4.f32);
  *(float *)v3.i32 = vaddv_f32(*(float32x2_t *)v3.i8);
  v4.i64[0] = 0;
  _simd_slerp_internal(a1, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32((float32x4_t)v3, v4)), 0), (int8x16_t)vnegq_f32(a2), (int8x16_t)a2), a3);
}

void _simd_slerp_internal(float32x4_t a1, float32x4_t a2, float a3)
{
  float v5 = 1.0 - a3;
  float32x4_t v6 = vsubq_f32(a1, a2);
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  float32x4_t v8 = vaddq_f32(a1, a2);
  int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8);
  float v10 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))));
  float v11 = v10 + v10;
  if ((float)(v10 + v10) != 0.0) {
    sinf(v11);
  }
  if ((float)(v5 * v11) != 0.0) {
    sinf(v5 * v11);
  }
  float v12 = v11 * a3;
  if (v12 != 0.0) {
    sinf(v12);
  }
}

uint64_t AppleDepthHelper.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AppleDepthHelper()
{
  return self;
}

uint64_t FrameCache.CacheEntry.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t FrameCache.push(arFrame:textureYCbCr:textureDepth:)(void *a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v7 = *(NSObject **)(v3 + 24);
  float32x4_t v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = v3;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in FrameCache.push(arFrame:textureYCbCr:textureDepth:);
  *(void *)(v9 + 24) = v8;
  v13[4] = partial apply for thunk for @callee_guaranteed () -> ();
  void v13[5] = v9;
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1107296256;
  long long v13[2] = thunk for @escaping @callee_guaranteed () -> ();
  void v13[3] = &block_descriptor_1;
  float v10 = _Block_copy(v13);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  id v11 = a1;
  swift_unknownObjectRetain();
  swift_release();
  dispatch_sync(v7, v10);
  _Block_release(v10);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v7) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in FrameCache.push(arFrame:textureYCbCr:textureDepth:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for FrameCache.CacheEntry();
  float32x4_t v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  swift_beginAccess();
  swift_unknownObjectRetain();
  swift_retain();
  id v9 = a1;
  uint64_t v10 = swift_unknownObjectRetain();
  MEMORY[0x24C533580](v10);
  if (*(void *)((*(void *)(a4 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a4 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in FrameCache.pop(arFrame:textureYCbCr:textureDepth:)@<X0>(void **a1@<X1>, void *a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    goto LABEL_19;
  }
  uint64_t v9 = result;
  uint64_t v10 = (unint64_t *)(result + 16);
  swift_beginAccess();
  unint64_t v11 = *(void *)(v9 + 16);
  if (!(v11 >> 62))
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_18:
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
LABEL_19:
    char v17 = 0;
    goto LABEL_20;
  }
LABEL_4:
  if ((v11 & 0xC000000000000001) != 0)
  {
    uint64_t v13 = (void *)MEMORY[0x24C533AF0](0, v11);
  }
  else
  {
    if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_23;
    }
    uint64_t v13 = *(void **)(v11 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)v13[2];
  long long v15 = *a1;
  *a1 = v14;
  id v16 = v14;

  *a2 = v13[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)a3 = v13[4];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  swift_beginAccess();
  a3 = *v10;
  if (!(*v10 >> 62))
  {
    if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_9;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_23:
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v18) {
    goto LABEL_24;
  }
LABEL_9:
  a3 = *v10;
  if (!(*v10 >> 62))
  {
    if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_11;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_25:
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v19) {
    goto LABEL_26;
  }
LABEL_11:
  if ((a3 & 0xC000000000000001) != 0)
  {
LABEL_27:
    uint64_t result = MEMORY[0x24C533AF0](0, a3);
    goto LABEL_14;
  }
  if (!*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }
  uint64_t result = swift_retain();
LABEL_14:
  if (*v10 >> 62) {
    goto LABEL_29;
  }
  if (*(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_16:
    char v17 = 1;
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    swift_endAccess();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
LABEL_20:
    *a4 = v17;
    return result;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t FrameCache.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FrameCache()
{
  return self;
}

uint64_t type metadata accessor for FrameCache.CacheEntry()
{
  return self;
}

uint64_t FrameCache.init()()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  float32x4_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v9[1] = v7;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F130], v1);
  *(void *)(v0 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v0;
}

id ARFrame.depthMap.getter()
{
  id v1 = objc_msgSend(v0, sel_sceneDepth);

  if (v1)
  {
    id v2 = objc_msgSend(v0, sel_sceneDepth);
  }
  else
  {
    id v3 = objc_msgSend(v0, sel_smoothedSceneDepth);

    if (!v3) {
      return 0;
    }
    id v2 = objc_msgSend(v0, sel_smoothedSceneDepth);
  }
  id v4 = v2;
  uint64_t v5 = v4;
  if (!v4) {
    return 0;
  }
  id v6 = objc_msgSend(v4, sel_depthMap);

  return v6;
}

id ARFrameProcessor.computeTexture(from:planeIndex:format:)(__CVBuffer *a1, size_t a2, MTLPixelFormat a3)
{
  textureOut[4] = *(CVMetalTextureRef *)MEMORY[0x263EF8340];
  swift_beginAccess();
  uint64_t v7 = *(void **)(v3 + 112);
  if (v7)
  {
    float32x4_t v8 = v7;
    size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, a2);
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, a2);
    textureOut[0] = 0;
    CVReturn TextureFromImage = CVMetalTextureCacheCreateTextureFromImage(0, v8, a1, 0, a3, WidthOfPlane, HeightOfPlane, a2, textureOut);
    CVMetalTextureRef v12 = textureOut[0];
    if (TextureFromImage)
    {

      float32x4_t v8 = v12;
    }
    else if (textureOut[0])
    {
      long long v15 = textureOut[0];
      id v13 = CVMetalTextureGetTexture(v15);

      return v13;
    }
  }
  return 0;
}

id ARFrameProcessor.computeYCbCrTexture(from:)(__CVBuffer *a1)
{
  uint64_t v2 = v1;
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a1);
  if (IOSurface)
  {
    int v5 = *(unsigned __int8 *)(v1 + 120);
    id v6 = IOSurface;
    if (v5 == 1)
    {
      IOSurfaceGetYCbCrMatrix();
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)logger);
      float32x4_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 67109120;
        swift_beginAccess();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_2465C2000, v8, v9, "Unsupported color matrix: %u", v10, 8u);
        MEMORY[0x24C5348D0](v10, -1, -1);
      }

      *(unsigned char *)(v2 + 120) = 0;
    }
    id v11 = ARFrameProcessor.computeTexture(from:planeIndex:format:)(a1, 0, (MTLPixelFormat)0x208uLL);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)logger);
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      long long v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v15 = 0;
      _os_log_impl(&dword_2465C2000, v13, v14, "Cannot get ioSurface from Color Buffer!", v15, 2u);
      MEMORY[0x24C5348D0](v15, -1, -1);
    }

    return 0;
  }
  return v11;
}

id *ARFrameProcessor.deinit()
{
  swift_release();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v0;
}

uint64_t ARFrameProcessor.__deallocating_deinit()
{
  ARFrameProcessor.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ARFrameProcessor()
{
  return self;
}

uint64_t specialized ARFrameProcessor.init(device:)(void *a1)
{
  type metadata accessor for FrameCache();
  swift_allocObject();
  *(void *)(v1 + 16) = FrameCache.init()();
  *(_DWORD *)(v1 + 24) = 998445679;
  *(void *)(v1 + 32) = 5;
  *(unsigned char *)(v1 + 56) = 0;
  *(void *)(v1 + 112) = 0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(unsigned char *)(v1 + 120) = 1;
  *(void *)(v1 + 128) = 0x400E000000000000;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 104) = a1;
  swift_beginAccess();
  swift_unknownObjectRetain();
  CVMetalTextureCacheCreate(0, 0, a1, 0, (CVMetalTextureCacheRef *)(v1 + 112));
  swift_endAccess();
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F13290]), sel_initWithDevice_kernelDiameter_, a1, 5);
  *(void *)(v1 + 40) = v3;
  LODWORD(v4) = 998445679;
  objc_msgSend(v3, sel_setEpsilon_, v4);
  *(void *)(v1 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F13240]), sel_initWithDevice_, a1);
  return v1;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  double v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    double v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[48 * a1 + 32];
    long long v15 = &v4[48 * a2 + 32];
    if (a1 != a2 || result >= &v15[48 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 48 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  double v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    double v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for InFlightQueue<FreeformCloudRenderer.ResourceEntry>.Entry);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (void *)&v16[32 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      _OWORD v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    unint64_t v5 = *v3;
    if (!(*v3 >> 62))
    {
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v19 < v2) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v9 = v8 + v6;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v5 = *v3;
  if (*v3 >> 62) {
    goto LABEL_36;
  }
  uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v9 = v8 - v7;
  if (__OFADD__(v8, v6)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v5 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *id v3 = v5;
  uint64_t v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1;
  }
  if (v5 >> 62) {
    goto LABEL_39;
  }
  uint64_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    uint64_t v12 = v9;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = MEMORY[0x24C533B00](v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  *id v3 = v5;
  uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  type metadata accessor for FrameCache.CacheEntry();
  swift_arrayDestroy();
  if (v6)
  {
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v14 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_21:
        if (v14 < 0)
        {
LABEL_46:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v15 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v15 + 8 * v14) {
          memmove((void *)(v11 + 32 + 8 * v4), v15, 8 * v14);
        }
        if (!(v5 >> 62))
        {
          uint64_t v16 = *(void *)(v11 + 16);
          uint64_t v17 = v16 + v6;
          if (!__OFADD__(v16, v6))
          {
LABEL_27:
            *(void *)(v11 + 16) = v17;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v17 = v21 + v6;
        if (!__OFADD__(v21, v6)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v11 + 16);
      uint64_t v14 = v13 - v2;
      if (!__OFSUB__(v13, v2)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:

  return specialized Array._endMutation()();
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for InFlightQueue<CoveragePointRenderer.ResourceEntry>.Entry);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t *)&demangling cache variable for type metadata for InFlightQueue<FullscreenCoveragePointsRenderer.ResourceEntry>.Entry);
}

void specialized static ARFrameProcessor.updateTexture(_:metalDevice:width:height:usage:pixelFormat:)(id *a1, void *a2, id a3, id a4, id a5, id a6)
{
  id v12 = *a1;
  if (!*a1
    || objc_msgSend(*a1, sel_width) != a3
    || objc_msgSend(v12, sel_height) != a4
    || objc_msgSend(v12, sel_pixelFormat) != a6
    || objc_msgSend(v12, sel_usage) != a5)
  {
    if (a3)
    {
      if (a4)
      {
        id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F12A50]), sel_init);
        objc_msgSend(v13, sel_setPixelFormat_, a6);
        objc_msgSend(v13, sel_setWidth_, a3);
        objc_msgSend(v13, sel_setHeight_, a4);
        objc_msgSend(v13, sel_setUsage_, a5);
        id v14 = objc_msgSend(a2, sel_newTextureWithDescriptor_, v13);
        swift_unknownObjectRelease();

        *a1 = v14;
      }
    }
  }
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 - v9 > *(void *)(v6 + 24) >> 1) {
    uint64_t v6 = a3();
  }
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a4) - 8);
  unint64_t v14 = v6 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  uint64_t v16 = v15 * a1;
  unint64_t v17 = v14 + v15 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_22;
  }
  uint64_t v19 = *(void *)(v6 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_28;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    if (v16 < v15 * a2 || v17 >= v14 + v15 * a2 + v20 * v15)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != v15 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v22 = *(void *)(v6 + 16);
    BOOL v23 = __OFADD__(v22, v10);
    uint64_t v24 = v22 - v9;
    if (!v23)
    {
      *(void *)(v6 + 16) = v24;
LABEL_22:
      *uint64_t v4 = v6;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t sub_246604B4C()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in FrameCache.push(arFrame:textureYCbCr:textureDepth:)()
{
  return closure #1 in FrameCache.push(arFrame:textureYCbCr:textureDepth:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_246604BA8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for Model3DLocation(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        uint64_t v8 = (void *)a2[2];
        a1[2] = v8;
        swift_bridgeObjectRetain();
        id v9 = v8;
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v12 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v13 = type metadata accessor for AssetDescriptorRef();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        a1[2] = a2[2];
        long long v15 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v15;
        *((unsigned char *)a1 + 64) = *((unsigned char *)a2 + 64);
        swift_bridgeObjectRetain();
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for Model3DLocation(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      uint64_t v2 = *(void **)(a1 + 16);

      break;
    case 1u:
      uint64_t v3 = type metadata accessor for URL();
      goto LABEL_7;
    case 2u:
      uint64_t v3 = type metadata accessor for AssetDescriptorRef();
LABEL_7:
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      break;
    case 3u:
      swift_bridgeObjectRelease();
      swift_release();
      break;
    default:
      return;
  }
}

void *initializeWithCopy for Model3DLocation(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      uint64_t v7 = (void *)a2[2];
      a1[2] = v7;
      swift_bridgeObjectRetain();
      id v8 = v7;
      goto LABEL_7;
    case 1u:
      uint64_t v9 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      goto LABEL_7;
    case 2u:
      uint64_t v10 = type metadata accessor for AssetDescriptorRef();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      goto LABEL_7;
    case 3u:
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      a1[2] = a2[2];
      long long v12 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v12;
      *((unsigned char *)a1 + 64) = *((unsigned char *)a2 + 64);
      swift_bridgeObjectRetain();
      swift_retain();
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for Model3DLocation(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Model3DLocation((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v6 = (void *)a2[2];
        a1[2] = v6;
        swift_bridgeObjectRetain();
        id v7 = v6;
        goto LABEL_8;
      case 1u:
        uint64_t v8 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        goto LABEL_8;
      case 2u:
        uint64_t v9 = type metadata accessor for AssetDescriptorRef();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        goto LABEL_8;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        long long v10 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v10;
        *((unsigned char *)a1 + 64) = *((unsigned char *)a2 + 64);
        swift_bridgeObjectRetain();
        swift_retain();
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t outlined destroy of Model3DLocation(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Model3DLocation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for Model3DLocation()
{
  uint64_t result = type metadata singleton initialization cache for Model3DLocation;
  if (!type metadata singleton initialization cache for Model3DLocation) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *initializeWithTake for Model3DLocation(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for AssetDescriptorRef();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for Model3DLocation(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Model3DLocation((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = type metadata accessor for AssetDescriptorRef();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for Model3DLocation()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AssetDescriptorRef();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Model3DLocation()
{
  return lazy protocol witness table accessor for type Model3DLocation and conformance Model3DLocation(&lazy protocol witness table cache variable for type Model3DLocation and conformance Model3DLocation, (void (*)(uint64_t))type metadata accessor for Model3DLocation);
}

void Model3DLocation.hash(into:)()
{
  uint64_t v1 = type metadata accessor for AssetDescriptorRef();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Model3DLocation();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Model3DLocation(v0, (uint64_t)v11);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
      Hasher._combine(_:)(2uLL);
      lazy protocol witness table accessor for type Model3DLocation and conformance Model3DLocation(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      break;
    case 2u:
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v11, v1);
      Hasher._combine(_:)(3uLL);
      MEMORY[0x24C531E50](&v16, MEMORY[0x263F8DD08], MEMORY[0x263F8DD08]);
      Hasher._combine(_:)(v16);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
    case 3u:
      Swift::UInt v14 = *((void *)v11 + 2);
      Hasher._combine(_:)(4uLL);
      if (v14)
      {
        Swift::UInt v16 = v14;
        Hasher._combine(_:)(1u);
        type metadata accessor for Entity();
        lazy protocol witness table accessor for type Model3DLocation and conformance Model3DLocation(&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x263F16580]);
        swift_retain();
        dispatch thunk of Hashable.hash(into:)();
        swift_release_n();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      swift_bridgeObjectRelease();
      break;
    case 4u:
      Hasher._combine(_:)(0);
      break;
    default:
      long long v12 = (void *)*((void *)v11 + 2);
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v12)
      {
        Hasher._combine(_:)(1u);
        id v13 = v12;
        NSObject.hash(into:)();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      break;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Model3DLocation()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Model3DLocation()
{
  return Hasher._finalize()();
}

uint64_t specialized static Model3DLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = a2;
  uint64_t v3 = type metadata accessor for AssetDescriptorRef();
  uint64_t v51 = *(void *)(v3 - 8);
  uint64_t v52 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v49 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v48 = (char *)&v48 - v6;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v50 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  long long v12 = (char *)&v48 - v11;
  uint64_t v13 = type metadata accessor for Model3DLocation();
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  Swift::UInt v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v48 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (uint64_t *)((char *)&v48 - v20);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Model3DLocation, Model3DLocation));
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  id v25 = (char *)&v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v26 = &v25[*(int *)(v23 + 56)];
  outlined init with copy of Model3DLocation(a1, (uint64_t)v25);
  outlined init with copy of Model3DLocation(v53, (uint64_t)v26);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of Model3DLocation((uint64_t)v25, (uint64_t)v19);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v30 = v50;
        long long v31 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
        v31(v12, v19, v7);
        v31(v10, v26, v7);
        char v32 = MEMORY[0x24C530BD0](v12, v10);
        long long v33 = *(void (**)(char *, uint64_t))(v30 + 8);
        v33(v10, v7);
        v33(v12, v7);
        goto LABEL_27;
      }
      (*(void (**)(char *, uint64_t))(v50 + 8))(v19, v7);
      goto LABEL_12;
    case 2u:
      outlined init with copy of Model3DLocation((uint64_t)v25, (uint64_t)v16);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v35 = v51;
        uint64_t v34 = v52;
        long long v36 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
        long long v37 = v48;
        v36(v48, v16, v52);
        long long v38 = v49;
        v36(v49, v26, v34);
        uint64_t v39 = MEMORY[0x263F8DD08];
        MEMORY[0x24C531E50](&v55, MEMORY[0x263F8DD08], MEMORY[0x263F8DD08]);
        uint64_t v40 = v55;
        MEMORY[0x24C531E50](&v54, v39, v39);
        char v32 = v40 == v54;
        BOOL v41 = *(void (**)(char *, uint64_t))(v35 + 8);
        v41(v38, v34);
        v41(v37, v34);
        goto LABEL_27;
      }
      (*(void (**)(char *, uint64_t))(v51 + 8))(v16, v52);
      goto LABEL_12;
    case 3u:
      goto LABEL_12;
    case 4u:
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_12;
      }
      outlined destroy of Model3DLocation((uint64_t)v25);
      char v32 = 1;
      return v32 & 1;
    default:
      outlined init with copy of Model3DLocation((uint64_t)v25, (uint64_t)v21);
      uint64_t v28 = *v21;
      uint64_t v27 = v21[1];
      id v29 = (void *)v21[2];
      if (!swift_getEnumCaseMultiPayload())
      {
        uint64_t v42 = (void *)*((void *)v26 + 2);
        if (v28 == *(void *)v26 && v27 == *((void *)v26 + 1))
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v44 & 1) == 0)
          {

LABEL_23:
            char v32 = 0;
            goto LABEL_26;
          }
        }
        if (v29)
        {
          if (!v42) {
            goto LABEL_23;
          }
          type metadata accessor for NSBundle();
          id v45 = v42;
          id v46 = v29;
          char v32 = static NSObject.== infix(_:_:)();

          id v29 = v45;
        }
        else
        {
          if (!v42)
          {
            char v32 = 1;
            goto LABEL_27;
          }
          char v32 = 0;
          id v29 = v42;
        }
LABEL_26:

LABEL_27:
        outlined destroy of Model3DLocation((uint64_t)v25);
        return v32 & 1;
      }
      swift_bridgeObjectRelease();

LABEL_12:
      outlined destroy of (Model3DLocation, Model3DLocation)((uint64_t)v25);
      char v32 = 0;
      return v32 & 1;
  }
}

uint64_t outlined init with copy of Model3DLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Model3DLocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (Model3DLocation, Model3DLocation)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Model3DLocation, Model3DLocation));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for NSBundle()
{
  unint64_t result = lazy cache variable for type metadata for NSBundle;
  if (!lazy cache variable for type metadata for NSBundle)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Model3DLocation and conformance Model3DLocation(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double specialized static MiniViewHelpers.getMiniViewRotation(deviceOrientation:interfaceOrientation:)(unint64_t a1, uint64_t a2)
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v16 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    type metadata accessor for UIDeviceOrientation(0);
    uint64_t v9 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    type metadata accessor for UIInterfaceOrientation(0);
    uint64_t v11 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v5, v6, "getMiniViewRotation: Device orientation: %s  interfaceOrientation: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v8, -1, -1);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  double result = 0.0;
  switch(a2)
  {
    case 1:
      if (a1 - 2 < 3)
      {
        uint64_t v14 = (double *)((char *)&unk_2466B8398 + 8 * a1 - 16);
        goto LABEL_15;
      }
      break;
    case 2:
      if (a1 < 7)
      {
        uint64_t v15 = (char *)&unk_2466B83B0;
        goto LABEL_14;
      }
      break;
    case 3:
      if (a1 < 7)
      {
        uint64_t v15 = (char *)&unk_2466B8420;
        goto LABEL_14;
      }
      break;
    case 4:
      if (a1 < 7)
      {
        uint64_t v15 = (char *)&unk_2466B83E8;
LABEL_14:
        uint64_t v14 = (double *)&v15[8 * a1];
LABEL_15:
        double result = *v14;
      }
      break;
    default:
      return result;
  }
  return result;
}

float32x2_t specialized static MiniViewHelpers.computeLookAt(cameraWorld:objectWorld:objectExtents:)(float32x4_t a1, float32x4_t a2, float32x2_t a3)
{
  float32x2_t v18 = *(float32x2_t *)a2.f32;
  float32x4_t v3 = vsubq_f32(a2, a1);
  int32x4_t v4 = (int32x4_t)vmulq_f32(v3, v3);
  v4.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v4, 2), vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.i8, 1))).u32[0];
  float32x2_t v5 = vrsqrte_f32((float32x2_t)v4.u32[0]);
  float32x2_t v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v5, v5)));
  float32x4_t v16 = vmulq_n_f32(v3, vmul_f32(v6, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v6, v6))).f32[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
  *(void *)(inited + 32) = v16.u32[0];
  *(_DWORD *)(inited + 40) = v16.i32[2];
  specialized SIMD.init<A>(_:)(inited);
  float32x4_t v15 = v8;
  swift_setDeallocating();
  specialized static MathHelpers.angleBetween(_:_:)(v16, v15);
  float v10 = v9 / 1.3963;
  float v11 = 0.0;
  if (v10 > 0.0)
  {
    float v11 = 1.0;
    if (v10 <= 1.0) {
      float v11 = v10;
    }
  }
  float v17 = vmuls_lane_f32(0.25, a3, 1) * (float)(1.0 - v11);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static MiniViewHelpers.computeLookAt(cameraWorld:objectWorld:objectExtents:));
  return vsub_f32(v18, vmul_n_f32(v12, v17));
}

void *assignWithTake for ARKitCoachingView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ARKitCoachingView()
{
  return &type metadata for ARKitCoachingView;
}

uint64_t associated type witness table accessor for View.Body : View in ARKitCoachingView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for View.body.getter in conformance ARKitCoachingView@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for DataModel(0);
  lazy protocol witness table accessor for type DataModel and conformance DataModel();
  swift_retain();
  uint64_t result = ObservedObject.init(wrappedValue:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type DataModel and conformance DataModel()
{
  unint64_t result = lazy protocol witness table cache variable for type DataModel and conformance DataModel;
  if (!lazy protocol witness table cache variable for type DataModel and conformance DataModel)
  {
    type metadata accessor for DataModel(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel);
  }
  return result;
}

void *assignWithCopy for ARKitCoachingView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ARKitCoachingView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ARKitCoachingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for ARCoachingOverlayViewWrapper()
{
  return &unk_26FACDDD8;
}

unint64_t lazy protocol witness table accessor for type ARCoachingOverlayViewWrapper and conformance ARCoachingOverlayViewWrapper()
{
  unint64_t result = lazy protocol witness table cache variable for type ARCoachingOverlayViewWrapper and conformance ARCoachingOverlayViewWrapper;
  if (!lazy protocol witness table cache variable for type ARCoachingOverlayViewWrapper and conformance ARCoachingOverlayViewWrapper)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARCoachingOverlayViewWrapper and conformance ARCoachingOverlayViewWrapper);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARCoachingOverlayViewWrapper and conformance ARCoachingOverlayViewWrapper;
  if (!lazy protocol witness table cache variable for type ARCoachingOverlayViewWrapper and conformance ARCoachingOverlayViewWrapper)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARCoachingOverlayViewWrapper and conformance ARCoachingOverlayViewWrapper);
  }
  return result;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance ARCoachingOverlayViewWrapper()
{
  id result = *(id *)(*(void *)(v0 + 8) + 24);
  if (result) {
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ARCoachingOverlayViewWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ARCoachingOverlayViewWrapper and conformance ARCoachingOverlayViewWrapper();

  return MEMORY[0x270F01780](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ARCoachingOverlayViewWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ARCoachingOverlayViewWrapper and conformance ARCoachingOverlayViewWrapper();

  return MEMORY[0x270F01718](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance ARCoachingOverlayViewWrapper()
{
}

void one-time initialization function for pipWindowWidthPercent()
{
  id v0 = objc_msgSend(self, sel_currentDevice);
  id v1 = objc_msgSend(v0, sel_userInterfaceIdiom);

  double v2 = 0.95;
  if (v1 == (id)1) {
    double v2 = 0.7;
  }
  pipWindowWidthPercent = *(void *)&v2;
}

uint64_t closure #1 in ARObjectCapturingView.body.getter@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v75 = a3;
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v82 = *(void *)(v78 - 8);
  MEMORY[0x270FA5388](v78);
  float32x4_t v70 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<DataModel.State>.Publisher);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  float v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriptionView<Published<DataModel.State>.Publisher, ModifiedContent<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ObjectSelectionView, _SafeAreaIgnoringLayout>, _AllowsHitTestingModifier>, ShakeModifier>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?, ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>, _SafeAreaIgnoringLayout>>);
  uint64_t v11 = v10 - 8;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<DataModel.State>.Publisher, ModifiedContent<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ObjectSelectionView, _SafeAreaIgnoringLayout>, _AllowsHitTestingModifier>, ShakeModifier>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?, ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>, _SafeAreaIgnoringLayout>>>)
      - 8;
  MEMORY[0x270FA5388](v77);
  float32x4_t v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<DataModel.State>.Publisher, ModifiedContent<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ObjectSelectionView, _SafeAreaIgnoringLayout>, _AllowsHitTestingModifier>, ShakeModifier>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?, ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>, _SafeAreaIgnoringLayout>>>>)
      - 8;
  MEMORY[0x270FA5388](v72);
  uint64_t v71 = (uint64_t)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<DataModel.State>.Publisher, ModifiedContent<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ObjectSelectionView, _SafeAreaIgnoringLayout>, _AllowsHitTestingModifier>, ShakeModifier>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?, ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>, _SafeAreaIgnoringLayout>>>>>)
      - 8;
  MEMORY[0x270FA5388](v74);
  uint64_t v73 = (uint64_t)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = static Alignment.center.getter();
  uint64_t v80 = v19;
  uint64_t v81 = v18;
  closure #1 in closure #1 in ARObjectCapturingView.body.getter((uint64_t)a2, a1, v84);
  LODWORD(v76) = static Edge.Set.all.getter();
  long long v83 = *a2;
  uint64_t v20 = *((void *)&v83 + 1);
  swift_beginAccess();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<DataModel.State>);
  Published.projectedValue.getter();
  swift_endAccess();
  outlined release of ReticleCenterView((uint64_t)&v83);
  uint64_t v21 = (uint64_t (*)(uint64_t))swift_allocObject();
  long long v22 = a2[5];
  *((_OWORD *)v21 + 5) = a2[4];
  *((_OWORD *)v21 + 6) = v22;
  *((_OWORD *)v21 + 7) = a2[6];
  long long v23 = a2[1];
  *((_OWORD *)v21 + 1) = *a2;
  *((_OWORD *)v21 + 2) = v23;
  long long v24 = a2[3];
  *((_OWORD *)v21 + 3) = a2[2];
  *((_OWORD *)v21 + 4) = v24;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v13[*(int *)(v11 + 60)], v9, v6);
  uint64_t v25 = v80;
  *(void *)uint64_t v13 = v81;
  *((void *)v13 + 1) = v25;
  memcpy(v13 + 16, v84, 0x1D8uLL);
  v13[488] = (char)v76;
  id v26 = (uint64_t (**)(uint64_t))&v13[*(int *)(v11 + 64)];
  int v69 = v13;
  *id v26 = partial apply for closure #2 in closure #1 in ARObjectCapturingView.body.getter;
  v26[1] = v21;
  outlined retain of ARObjectCapturingView((uint64_t)a2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v79 = v20;
  swift_beginAccess();
  swift_retain();
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  uint64_t v27 = v70;
  Published.projectedValue.getter();
  swift_endAccess();
  outlined release of ReticleCenterView((uint64_t)&v83);
  uint64_t v28 = (uint64_t (*)(char *))swift_allocObject();
  long long v29 = a2[5];
  *((_OWORD *)v28 + 5) = a2[4];
  *((_OWORD *)v28 + 6) = v29;
  *((_OWORD *)v28 + 7) = a2[6];
  long long v30 = a2[1];
  *((_OWORD *)v28 + 1) = *a2;
  *((_OWORD *)v28 + 2) = v30;
  long long v31 = a2[3];
  *((_OWORD *)v28 + 3) = a2[2];
  *((_OWORD *)v28 + 4) = v31;
  uint64_t v32 = (uint64_t)v15;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v13, (uint64_t)v15, &demangling cache variable for type metadata for SubscriptionView<Published<DataModel.State>.Publisher, ModifiedContent<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ObjectSelectionView, _SafeAreaIgnoringLayout>, _AllowsHitTestingModifier>, ShakeModifier>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?, ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>, _SafeAreaIgnoringLayout>>);
  uint64_t v34 = v77;
  uint64_t v33 = v78;
  uint64_t v35 = &v15[*(int *)(v77 + 60)];
  uint64_t v36 = v82;
  uint64_t v76 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
  uint64_t v81 = v82 + 16;
  v76(v35, v27, v78);
  long long v37 = (uint64_t (**)(char *))&v15[*(int *)(v34 + 64)];
  *long long v37 = partial apply for closure #3 in closure #1 in ARObjectCapturingView.body.getter;
  v37[1] = v28;
  outlined retain of ARObjectCapturingView((uint64_t)a2);
  long long v38 = *(void (**)(char *, uint64_t))(v36 + 8);
  uint64_t v82 = v36 + 8;
  uint64_t v77 = (uint64_t)v38;
  uint64_t v39 = v27;
  v38(v27, v33);
  outlined destroy of URL?((uint64_t)v69, &demangling cache variable for type metadata for SubscriptionView<Published<DataModel.State>.Publisher, ModifiedContent<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ObjectSelectionView, _SafeAreaIgnoringLayout>, _AllowsHitTestingModifier>, ShakeModifier>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?, ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>, _SafeAreaIgnoringLayout>>);
  swift_beginAccess();
  swift_retain();
  Published.projectedValue.getter();
  swift_endAccess();
  outlined release of ReticleCenterView((uint64_t)&v83);
  uint64_t v40 = (_OWORD *)swift_allocObject();
  long long v41 = a2[5];
  v40[5] = a2[4];
  v40[6] = v41;
  v40[7] = a2[6];
  long long v42 = a2[1];
  v40[1] = *a2;
  v40[2] = v42;
  long long v43 = a2[3];
  v40[3] = a2[2];
  v40[4] = v43;
  uint64_t v44 = v71;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v15, v71, &demangling cache variable for type metadata for SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<DataModel.State>.Publisher, ModifiedContent<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ObjectSelectionView, _SafeAreaIgnoringLayout>, _AllowsHitTestingModifier>, ShakeModifier>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?, ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>, _SafeAreaIgnoringLayout>>>);
  uint64_t v45 = v72;
  id v46 = (void (*)(uint64_t, char *, uint64_t))v76;
  v76((char *)(v44 + *(int *)(v72 + 60)), v39, v33);
  uint64_t v47 = (void *)(v44 + *(int *)(v45 + 64));
  *uint64_t v47 = partial apply for closure #4 in closure #1 in ARObjectCapturingView.body.getter;
  v47[1] = v40;
  outlined retain of ARObjectCapturingView((uint64_t)a2);
  ((void (*)(char *, uint64_t))v77)(v39, v33);
  outlined destroy of URL?(v32, &demangling cache variable for type metadata for SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<DataModel.State>.Publisher, ModifiedContent<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ObjectSelectionView, _SafeAreaIgnoringLayout>, _AllowsHitTestingModifier>, ShakeModifier>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?, ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>, _SafeAreaIgnoringLayout>>>);
  swift_beginAccess();
  swift_retain();
  uint64_t v48 = v39;
  Published.projectedValue.getter();
  swift_endAccess();
  outlined release of ReticleCenterView((uint64_t)&v83);
  uint64_t v49 = (uint64_t (*)())swift_allocObject();
  long long v50 = a2[5];
  *((_OWORD *)v49 + 5) = a2[4];
  *((_OWORD *)v49 + 6) = v50;
  *((_OWORD *)v49 + 7) = a2[6];
  long long v51 = a2[1];
  *((_OWORD *)v49 + 1) = *a2;
  *((_OWORD *)v49 + 2) = v51;
  long long v52 = a2[3];
  *((_OWORD *)v49 + 3) = a2[2];
  *((_OWORD *)v49 + 4) = v52;
  uint64_t v53 = v73;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v44, v73, &demangling cache variable for type metadata for SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<DataModel.State>.Publisher, ModifiedContent<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ObjectSelectionView, _SafeAreaIgnoringLayout>, _AllowsHitTestingModifier>, ShakeModifier>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?, ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>, _SafeAreaIgnoringLayout>>>>);
  uint64_t v54 = v74;
  uint64_t v55 = v78;
  v46(v53 + *(int *)(v74 + 60), v48, v78);
  uint64_t v56 = (uint64_t (**)())(v53 + *(int *)(v54 + 64));
  *uint64_t v56 = partial apply for closure #5 in closure #1 in ARObjectCapturingView.body.getter;
  v56[1] = v49;
  outlined retain of ARObjectCapturingView((uint64_t)a2);
  uint64_t v57 = v48;
  uint64_t v58 = v48;
  unint64_t v59 = (void (*)(char *, uint64_t))v77;
  ((void (*)(char *, uint64_t))v77)(v58, v55);
  outlined destroy of URL?(v44, &demangling cache variable for type metadata for SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<DataModel.State>.Publisher, ModifiedContent<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ObjectSelectionView, _SafeAreaIgnoringLayout>, _AllowsHitTestingModifier>, ShakeModifier>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?, ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>, _SafeAreaIgnoringLayout>>>>);
  swift_beginAccess();
  swift_retain();
  Published.projectedValue.getter();
  swift_endAccess();
  outlined release of ReticleCenterView((uint64_t)&v83);
  uint64_t v60 = (_OWORD *)swift_allocObject();
  long long v61 = a2[5];
  v60[5] = a2[4];
  v60[6] = v61;
  v60[7] = a2[6];
  long long v62 = a2[1];
  v60[1] = *a2;
  v60[2] = v62;
  long long v63 = a2[3];
  v60[3] = a2[2];
  v60[4] = v63;
  uint64_t v64 = v75;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v53, v75, &demangling cache variable for type metadata for SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<DataModel.State>.Publisher, ModifiedContent<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ObjectSelectionView, _SafeAreaIgnoringLayout>, _AllowsHitTestingModifier>, ShakeModifier>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?, ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>, _SafeAreaIgnoringLayout>>>>>);
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<DataModel.State>.Publisher, ModifiedContent<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ObjectSelectionView, _SafeAreaIgnoringLayout>, _AllowsHitTestingModifier>, ShakeModifier>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?, ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>, _SafeAreaIgnoringLayout>>>>>>);
  v76((char *)(v64 + *(int *)(v65 + 52)), v57, v55);
  os_unfair_lock_t v66 = (void *)(v64 + *(int *)(v65 + 56));
  *os_unfair_lock_t v66 = partial apply for closure #6 in closure #1 in ARObjectCapturingView.body.getter;
  v66[1] = v60;
  outlined retain of ARObjectCapturingView((uint64_t)a2);
  v59(v57, v55);
  return outlined destroy of URL?(v53, &demangling cache variable for type metadata for SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<DataModel.State>.Publisher, ModifiedContent<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ObjectSelectionView, _SafeAreaIgnoringLayout>, _AllowsHitTestingModifier>, ShakeModifier>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?, ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>, _SafeAreaIgnoringLayout>>>>>);
}

uint64_t closure #1 in closure #1 in ARObjectCapturingView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v71 = type metadata accessor for OpacityTransition();
  uint64_t v6 = *(void *)(v71 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v71);
  float v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v49 - v10;
  *(_OWORD *)uint64_t v84 = *(_OWORD *)(a1 + 16);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  float32x4_t v70 = a3;
  long long v63 = v9;
  uint64_t v64 = v6;
  if (LOBYTE(v86[0]) == 1)
  {
    GeometryProxy.size.getter();
    uint64_t v14 = v13;
    GeometryProxy.size.getter();
    uint64_t v16 = v15;
    *(_OWORD *)uint64_t v84 = *(_OWORD *)(a1 + 32);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Double>);
    uint64_t v17 = v11;
    uint64_t v18 = v9;
    State.wrappedValue.getter();
    uint64_t v69 = v86[0];
    unsigned __int8 v19 = static Edge.Set.all.getter();
    *(_OWORD *)uint64_t v84 = *(_OWORD *)(a1 + 48);
    State.wrappedValue.getter();
    uint64_t v68 = v86[0];
    GeometryProxy.size.getter();
    double v21 = v20 * *(double *)(a1 + 96);
    uint64_t v67 = *(void *)(a1 + 104);
    OpacityTransition.init()();
    uint64_t v22 = v71;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v18, v17, v71);
    lazy protocol witness table accessor for type DataModel and conformance DataModel(&lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition, MEMORY[0x263F196B8]);
    uint64_t v11 = v17;
    uint64_t v81 = AnyTransition.init<A>(_:)();
    v84[0] = 0;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v22);
    uint64_t v23 = 256;
    if (!v84[0]) {
      uint64_t v23 = 0;
    }
    unint64_t v66 = v23 & 0xFFFFFFFFFFFFFF00 | v19;
    uint64_t v65 = 0x4039000000000000;
  }
  else
  {
    uint64_t v65 = 0;
    unint64_t v66 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v67 = 0;
    uint64_t v81 = 0;
    uint64_t v14 = 0;
    uint64_t v16 = 0;
    double v21 = 0.0;
  }
  v100[0] = *(_OWORD *)a1;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined release of ReticleCenterView((uint64_t)v100);
  if (v84[0] == 1)
  {
    type metadata accessor for DataModel(0);
    lazy protocol witness table accessor for type DataModel and conformance DataModel((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, (void (*)(uint64_t))type metadata accessor for DataModel);
    swift_retain();
    uint64_t v24 = ObservedObject.init(wrappedValue:)();
    uint64_t v75 = v25;
    uint64_t v76 = v24;
    OpacityTransition.init()();
    uint64_t v26 = v64;
    uint64_t v27 = v71;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v63, v11, v71);
    lazy protocol witness table accessor for type DataModel and conformance DataModel(&lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition, MEMORY[0x263F196B8]);
    uint64_t v74 = AnyTransition.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
    GeometryProxy.size.getter();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v79 = v88;
    uint64_t v80 = v86[26];
    v84[0] = v87;
    LOBYTE(v86[0]) = v89;
    uint64_t v77 = v87;
    uint64_t v59 = v89;
    uint64_t v60 = v91;
    uint64_t v78 = 0x3F80000040400000;
    uint64_t v73 = 0x3E99999A3E4CCCCDLL;
    uint64_t v72 = 0x3FD0000000000000;
    uint64_t v61 = 0x404E000000000000;
    uint64_t v62 = v90;
  }
  else
  {
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v74 = 0;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
  }
  GeometryProxy.size.getter();
  double v29 = v28;
  GeometryProxy.size.getter();
  if (v30 < v29) {
    double v29 = v30;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined release of ReticleCenterView((uint64_t)v100);
  if (v84[0] == 1)
  {
    uint64_t v31 = one-time initialization token for pipWindowWidthPercent;
    swift_retain();
    if (v31 != -1) {
      swift_once();
    }
    uint64_t v57 = v12;
    uint64_t v58 = a2;
    double v32 = *(double *)&pipWindowWidthPercent;
    outlined retain of ReticleCenterView((uint64_t)v100);
    outlined retain of ARObjectCapturingView(a1);
    type metadata accessor for DataModel(0);
    lazy protocol witness table accessor for type DataModel and conformance DataModel((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, (void (*)(uint64_t))type metadata accessor for DataModel);
    uint64_t v33 = ObservedObject.init(wrappedValue:)();
    uint64_t v55 = v34;
    uint64_t v56 = v33;
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain_n();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t result = outlined release of ReticleCenterView((uint64_t)v100);
    uint64_t v36 = *(void **)v84;
    if (!*(void *)v84)
    {
      __break(1u);
      return result;
    }
    specialized CoveragePointCloudMiniView.init(model:renderer:)(*(void **)v84, v92);
    long long v53 = v92[1];
    long long v54 = v92[0];
    long long v51 = v92[3];
    long long v52 = v92[2];
    uint64_t v50 = v93;

    outlined release of ReticleCenterView((uint64_t)v100);
    uint64_t v37 = static Alignment.center.getter();
    uint64_t v39 = v38;
    outlined release of ARObjectCapturingView(a1);
    outlined release of ReticleCenterView((uint64_t)v100);
    OpacityTransition.init()();
    uint64_t v40 = v64;
    long long v41 = v11;
    uint64_t v42 = v71;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v63, v11, v71);
    lazy protocol witness table accessor for type DataModel and conformance DataModel(&lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition, MEMORY[0x263F196B8]);
    uint64_t v43 = a1;
    uint64_t v44 = AnyTransition.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v42);
    *(void *)uint64_t v84 = v56;
    *(void *)&v84[8] = v55;
    *(double *)&v84[16] = v29 * v32;
    *(_OWORD *)&v84[24] = v54;
    *(_OWORD *)&v84[40] = v53;
    *(_OWORD *)&v84[56] = v52;
    *(_OWORD *)&v84[72] = v51;
    *(void *)&v84[88] = v50;
    memset(&v84[96], 0, 80);
    *(void *)&v84[176] = v37;
    *(void *)&v84[184] = v39;
    *(void *)&v84[192] = 0x4034000000000000;
    *(void *)&v84[200] = v44;
    a1 = v43;
    closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad()(v84);
    outlined init with take of ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?((uint64_t)v84, (uint64_t)v86);
  }
  else
  {
    _s7SwiftUI15ModifiedContentVy012_RealityKit_aB017StackableMiniViewVyACyAD018CoveragePointCloudhI0VAA16_OverlayModifierVyAA017StrokeBorderShapeI0VyAA6CircleVAA5ColorVAA05EmptyI0VGSgGGGAA013_TraitWritingN0VyAA010TransitionU3KeyVGGSgWOi0_(v84);
    outlined init with take of ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?((uint64_t)v84, (uint64_t)v86);
  }
  *(_OWORD *)uint64_t v84 = *(_OWORD *)(a1 + 64);
  State.wrappedValue.getter();
  if (LOBYTE(v85[0]) == 1)
  {
    type metadata accessor for DataModel(0);
    lazy protocol witness table accessor for type DataModel and conformance DataModel((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, (void (*)(uint64_t))type metadata accessor for DataModel);
    swift_retain();
    uint64_t v71 = ObservedObject.init(wrappedValue:)();
    uint64_t v64 = v45;
    unsigned __int8 v46 = static Edge.Set.all.getter();
    GeometryProxy.size.getter();
    GeometryProxy.size.getter();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    long long v63 = v94;
    uint64_t v58 = v95;
    uint64_t v56 = v97;
    uint64_t v57 = v96;
    uint64_t v55 = v46;
    *(void *)&long long v54 = v98;
    *(void *)&long long v53 = v99;
  }
  else
  {
    uint64_t v71 = 0;
    long long v63 = 0;
    uint64_t v64 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    *(void *)&long long v54 = 0;
    *(void *)&long long v53 = 0;
  }
  outlined init with take of ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?((uint64_t)v86, (uint64_t)v82);
  outlined init with take of ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?((uint64_t)v82, (uint64_t)v83);
  *(void *)uint64_t v84 = v65;
  *(void *)&v84[8] = 0;
  *(void *)&v84[16] = v14;
  *(void *)&v84[24] = v16;
  *(void *)&v84[32] = v69;
  *(void *)&v84[40] = v66;
  *(void *)&v84[48] = v68;
  *(double *)&v84[56] = v21;
  *(void *)&v84[64] = v67;
  *(void *)&v84[72] = v81;
  *(void *)&v84[80] = v76;
  *(void *)&v84[88] = v75;
  *(void *)&v84[96] = v61;
  *(void *)&v84[104] = v61;
  *(void *)&v84[112] = v72;
  *(void *)&v84[120] = v73;
  *(void *)&v84[128] = v78;
  *(void *)&v84[136] = v74;
  *(void *)&v84[144] = v80;
  *(void *)&v84[152] = v77;
  *(void *)&v84[160] = v79;
  *(void *)&v84[168] = v59;
  *(void *)&v84[176] = v62;
  *(void *)&v84[184] = v60;
  outlined init with take of ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?((uint64_t)v83, (uint64_t)&v84[192]);
  *(void *)&v84[400] = v71;
  *(void *)&v84[408] = v64;
  *(void *)&v84[416] = v55;
  *(void *)&v84[424] = v63;
  *(void *)&v84[432] = v58;
  *(void *)&v84[440] = v57;
  *(void *)&v84[448] = v56;
  *(void *)&v84[456] = v54;
  *(void *)&v84[464] = v53;
  memcpy(v70, v84, 0x1D8uLL);
  swift_retain();
  uint64_t v48 = v75;
  uint64_t v47 = v76;
  outlined copy of ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?(v76, v75);
  outlined retain of ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?(v83, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?);
  outlined init with take of ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?((uint64_t)v82, (uint64_t)v85);
  outlined retain of ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?(v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?);
  outlined consume of ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?(v47, v48);
  return swift_release();
}

uint64_t closure #2 in closure #1 in ARObjectCapturingView.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataModel.State(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v33 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  float v9 = (char *)&v32 - v8;
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v32 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v32 - v13;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)logger);
  uint64_t v34 = a1;
  outlined init with copy of DataModel.State(a1, (uint64_t)v14);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    v36[0] = v19;
    uint64_t v32 = a2;
    *(_DWORD *)uint64_t v18 = 136446210;
    outlined init with copy of DataModel.State((uint64_t)v14, (uint64_t)v12);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v36);
    a2 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of DataModel.State((uint64_t)v14);
    _os_log_impl(&dword_2465C2000, v16, v17, "onReceive() state = %{public}s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v19, -1, -1);
    MEMORY[0x24C5348D0](v18, -1, -1);
  }
  else
  {
    outlined destroy of DataModel.State((uint64_t)v14);
  }

  uint64_t v22 = v34;
  outlined init with copy of DataModel.State(v34, (uint64_t)v9);
  uint64_t v23 = type metadata accessor for DataModel.Error(0);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48);
  int v25 = v24(v9, 8, v23);
  uint64_t v26 = outlined destroy of DataModel.State((uint64_t)v9);
  if (v25 == 4)
  {
    MEMORY[0x270FA5388](v26);
    *(&v32 - 2) = a2;
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    swift_release();
    *(_OWORD *)uint64_t v36 = *(_OWORD *)(a2 + 32);
    uint64_t v35 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Double>);
    return State.wrappedValue.setter();
  }
  else
  {
    uint64_t v28 = v33;
    outlined init with copy of DataModel.State(v22, v33);
    int v29 = v24((char *)v28, 8, v23);
    uint64_t v30 = outlined destroy of DataModel.State(v28);
    if (v29 == 5)
    {
      uint64_t v31 = static Animation.easeOut(duration:)();
      MEMORY[0x270FA5388](v31);
      *(&v32 - 2) = a2;
    }
    else
    {
      MEMORY[0x270FA5388](v30);
      *(&v32 - 2) = a2;
      static Animation.default.getter();
    }
    withAnimation<A>(_:_:)();
    return swift_release();
  }
}

uint64_t closure #1 in closure #2 in closure #1 in ARObjectCapturingView.body.getter(long long *a1)
{
  long long v3 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined release of ReticleCenterView((uint64_t)&v3);
  BOOL v4 = (v2 & 1) == 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  return State.wrappedValue.setter();
}

uint64_t closure #3 in closure #1 in ARObjectCapturingView.body.getter(char *a1, long long *a2)
{
  uint64_t v4 = type metadata accessor for DataModel.State(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v7 = *a1;
  long long v11 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined release of ReticleCenterView((uint64_t)&v11);
  uint64_t v8 = type metadata accessor for DataModel.Error(0);
  LODWORD(a1) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 8, v8);
  uint64_t result = outlined destroy of DataModel.State((uint64_t)v6);
  if (a1 == 4)
  {
    MEMORY[0x270FA5388](result);
    *(void *)&v10[-16] = a2;
    v10[-8] = v7;
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    return swift_release();
  }
  return result;
}

uint64_t closure #4 in closure #1 in ARObjectCapturingView.body.getter(unsigned char *a1, uint64_t a2)
{
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  float v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v12);
  os_log_type_t v17 = (char *)&v27 - v16;
  if (*a1 == 1)
  {
    long long aBlock = *(_OWORD *)(a2 + 48);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Double>);
    uint64_t result = State.wrappedValue.getter();
    if (v38 < 0.001)
    {
      double v18 = *(double *)(a2 + 88);
      uint64_t v19 = static Animation.linear(duration:)();
      uint64_t v30 = v7;
      MEMORY[0x270FA5388](v19);
      *(&v27 - 2) = a2;
      uint64_t v29 = v4;
      withAnimation<A>(_:_:)();
      swift_release();
      type metadata accessor for OS_dispatch_queue();
      uint64_t v27 = static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      MEMORY[0x24C533360](v14, v18);
      uint64_t v28 = *(void (**)(char *, uint64_t))(v11 + 8);
      v28(v14, v10);
      uint64_t v20 = (_OWORD *)swift_allocObject();
      long long v21 = *(_OWORD *)(a2 + 80);
      v20[5] = *(_OWORD *)(a2 + 64);
      v20[6] = v21;
      v20[7] = *(_OWORD *)(a2 + 96);
      long long v22 = *(_OWORD *)(a2 + 16);
      v20[1] = *(_OWORD *)a2;
      v20[2] = v22;
      long long v23 = *(_OWORD *)(a2 + 48);
      v20[3] = *(_OWORD *)(a2 + 32);
      v20[4] = v23;
      uint64_t v36 = partial apply for closure #2 in closure #4 in closure #1 in ARObjectCapturingView.body.getter;
      uint64_t v37 = v20;
      *(void *)&long long aBlock = MEMORY[0x263EF8330];
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v34 = thunk for @escaping @callee_guaranteed () -> ();
      uint64_t v35 = &block_descriptor_2;
      uint64_t v24 = _Block_copy(&aBlock);
      outlined retain of ARObjectCapturingView(a2);
      swift_release();
      static DispatchQoS.unspecified.getter();
      *(void *)&long long aBlock = MEMORY[0x263F8EE78];
      lazy protocol witness table accessor for type DataModel and conformance DataModel(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      uint64_t v25 = v31;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v26 = (void *)v27;
      MEMORY[0x24C5337E0](v17, v9, v6, v24);
      _Block_release(v24);

      (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v25);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v30);
      return ((uint64_t (*)(char *, uint64_t))v28)(v17, v10);
    }
  }
  return result;
}

uint64_t closure #5 in closure #1 in ARObjectCapturingView.body.getter()
{
  return swift_release();
}

unsigned char *closure #6 in closure #1 in ARObjectCapturingView.body.getter(unsigned char *result)
{
  if (*result == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
    return (unsigned char *)State.wrappedValue.setter();
  }
  return result;
}

uint64_t protocol witness for View.body.getter in conformance ARObjectCapturingView@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  long long v3 = v1[5];
  v11[4] = v1[4];
  v11[5] = v3;
  v11[6] = v1[6];
  long long v4 = v1[1];
  v11[0] = *v1;
  v11[1] = v4;
  long long v5 = v1[3];
  v11[2] = v1[2];
  v11[3] = v5;
  uint64_t v6 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))swift_allocObject();
  long long v7 = v1[5];
  *((_OWORD *)v6 + 5) = v1[4];
  *((_OWORD *)v6 + 6) = v7;
  *((_OWORD *)v6 + 7) = v1[6];
  long long v8 = v1[1];
  *((_OWORD *)v6 + 1) = *v1;
  *((_OWORD *)v6 + 2) = v8;
  long long v9 = v1[3];
  *((_OWORD *)v6 + 3) = v1[2];
  *((_OWORD *)v6 + 4) = v9;
  *a1 = partial apply for closure #1 in ARObjectCapturingView.body.getter;
  a1[1] = v6;
  return outlined retain of ARObjectCapturingView((uint64_t)v11);
}

uint64_t ReticleCenterView.alpha.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  outlined retain of ReticleCenterView(v0);
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t result = outlined release of ReticleCenterView(v0);
  if (sqrtf(vaddv_f32(vmul_f32(v2, v2))) >= *(float *)(v0 + 40))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    outlined retain of ReticleCenterView(v0);
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t result = outlined release of ReticleCenterView(v0);
    if (*(float *)(v0 + 44) >= sqrtf(vaddv_f32(vmul_f32(v2, v2))))
    {
      swift_getKeyPath();
      swift_getKeyPath();
      outlined retain of ReticleCenterView(v0);
      static Published.subscript.getter();
      swift_release();
      swift_release();
      return outlined release of ReticleCenterView(v0);
    }
  }
  return result;
}

uint64_t ReticleCenterView.arrowFade.getter()
{
  float v2 = *(float *)(v0 + 48);
  float v1 = *(float *)(v0 + 52);
  swift_getKeyPath();
  swift_getKeyPath();
  outlined retain of ReticleCenterView(v0);
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t result = outlined release of ReticleCenterView(v0);
  if (sqrtf(vaddv_f32(vmul_f32(v4, v4))) >= (float)(v2 - v1))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    outlined retain of ReticleCenterView(v0);
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t result = outlined release of ReticleCenterView(v0);
    if (v2 >= sqrtf(vaddv_f32(vmul_f32(v4, v4))))
    {
      swift_getKeyPath();
      swift_getKeyPath();
      outlined retain of ReticleCenterView(v0);
      static Published.subscript.getter();
      swift_release();
      swift_release();
      return outlined release of ReticleCenterView(v0);
    }
  }
  return result;
}

uint64_t closure #1 in ReticleCenterView.body.getter@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = type metadata accessor for OpacityTransition();
  uint64_t v4 = *(void *)(v39 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v39);
  long long v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  long long v9 = (char *)&v29 - v8;
  uint64_t v40 = static HorizontalAlignment.center.getter();
  closure #1 in closure #1 in ReticleCenterView.body.getter(a1, (uint64_t)v89);
  swift_getKeyPath();
  swift_getKeyPath();
  outlined retain of ReticleCenterView((uint64_t)a1);
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined release of ReticleCenterView((uint64_t)a1);
  uint64_t v10 = 0;
  if (v72 == 1)
  {
    ReticleCenterView.arrowFade.getter();
    uint64_t v10 = v11;
  }
  *(_OWORD *)&v41[103] = v89[6];
  *(_OWORD *)&v41[87] = v89[5];
  *(_OWORD *)&v41[39] = v89[2];
  *(_OWORD *)&v41[23] = v89[1];
  *(_OWORD *)&v41[119] = v89[7];
  *(_OWORD *)&v41[55] = v89[3];
  char v42 = 1;
  v41[135] = v90;
  *(_OWORD *)&v41[71] = v89[4];
  *(_OWORD *)&v41[7] = v89[0];
  int v38 = 1;
  long long v50 = *(_OWORD *)&v41[96];
  long long v51 = *(_OWORD *)&v41[112];
  uint64_t v52 = *(void *)&v41[128];
  long long v46 = *(_OWORD *)&v41[32];
  long long v47 = *(_OWORD *)&v41[48];
  long long v48 = *(_OWORD *)&v41[64];
  long long v49 = *(_OWORD *)&v41[80];
  long long v44 = *(_OWORD *)v41;
  long long v45 = *(_OWORD *)&v41[16];
  OpacityTransition.init()();
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t v12 = v39;
  v31(v7, v9, v39);
  uint64_t v30 = (_DWORD *)lazy protocol witness table accessor for type DataModel and conformance DataModel(&lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition, MEMORY[0x263F196B8]);
  uint64_t v37 = AnyTransition.init<A>(_:)();
  long long v86 = v50;
  long long v87 = v51;
  uint64_t v88 = v52;
  long long v82 = v46;
  long long v83 = v47;
  long long v84 = v48;
  long long v85 = v49;
  long long v80 = v44;
  long long v81 = v45;
  v79[0] = *(_DWORD *)v43;
  *(_DWORD *)((char *)v79 + 3) = *(_DWORD *)&v43[3];
  uint64_t v29 = *(void (**)(char *, uint64_t))(v4 + 8);
  v29(v9, v12);
  long long v60 = v86;
  long long v61 = v87;
  uint64_t v62 = v88;
  long long v56 = v82;
  long long v57 = v83;
  long long v58 = v84;
  long long v59 = v85;
  long long v54 = v80;
  long long v55 = v81;
  v53[0] = v79[0];
  *(_DWORD *)((char *)v53 + 3) = *(_DWORD *)((char *)v79 + 3);
  uint64_t v36 = static HorizontalAlignment.center.getter();
  closure #2 in closure #1 in ReticleCenterView.body.getter((uint64_t)a1, (uint64_t)&v72);
  uint64_t v35 = v72;
  char v13 = v73;
  long long v33 = *(_OWORD *)&v74[16];
  long long v34 = *(_OWORD *)v74;
  uint64_t v14 = *(void *)&v74[32];
  uint64_t v32 = *(void *)&v74[40];
  char v15 = v74[48];
  OpacityTransition.init()();
  v31(v7, v9, v12);
  uint64_t v16 = AnyTransition.init<A>(_:)();
  LOBYTE(v72) = 1;
  LOBYTE(v63) = v13;
  uint64_t v30 = (_DWORD *)(a2 + 265);
  uint64_t v31 = (void (*)(char *, char *, uint64_t))v16;
  LOBYTE(v70[0]) = v15;
  v29(v9, v12);
  *(_OWORD *)((char *)&v64[5] + 1) = v59;
  *(_OWORD *)((char *)&v64[6] + 1) = v60;
  *(_OWORD *)((char *)&v64[7] + 1) = v61;
  *(_OWORD *)((char *)&v64[1] + 1) = v55;
  *(_OWORD *)((char *)&v64[2] + 1) = v56;
  *(_OWORD *)((char *)&v64[3] + 1) = v57;
  char v17 = v72;
  char v18 = v63;
  char v19 = v70[0];
  uint64_t v20 = v40;
  long long v63 = (unint64_t)v40;
  char v21 = v38;
  LOBYTE(v64[0]) = v38;
  *(void *)((char *)&v64[8] + 1) = v62;
  *(_OWORD *)((char *)&v64[4] + 1) = v58;
  *(_OWORD *)((char *)v64 + 1) = v54;
  *(_DWORD *)((char *)&v64[8] + 9) = v53[0];
  HIDWORD(v64[8]) = *(_DWORD *)((char *)v53 + 3);
  *(void *)&long long v65 = v10;
  uint64_t v22 = v37;
  *((void *)&v65 + 1) = v37;
  long long v23 = v64[4];
  *(_OWORD *)(a2 + 64) = v64[3];
  *(_OWORD *)(a2 + 80) = v23;
  long long v24 = v64[6];
  *(_OWORD *)(a2 + 96) = v64[5];
  *(_OWORD *)(a2 + 112) = v24;
  long long v25 = v64[0];
  *(_OWORD *)a2 = v63;
  *(_OWORD *)(a2 + 16) = v25;
  long long v26 = v64[2];
  *(_OWORD *)(a2 + 32) = v64[1];
  *(_OWORD *)(a2 + 48) = v26;
  long long v27 = v65;
  *(_OWORD *)(a2 + 144) = v64[8];
  *(_OWORD *)(a2 + 160) = v27;
  *(_OWORD *)(a2 + 128) = v64[7];
  char v71 = v17;
  char v69 = v18;
  char v67 = v19;
  *(_DWORD *)(a2 + 193) = v70[0];
  *(_DWORD *)(a2 + 196) = *(_DWORD *)((char *)v70 + 3);
  *(_DWORD *)(a2 + 209) = *(_DWORD *)v68;
  *(_DWORD *)(a2 + 212) = *(_DWORD *)&v68[3];
  *uint64_t v30 = *(_DWORD *)v66;
  *(_DWORD *)(a2 + 268) = *(_DWORD *)&v66[3];
  *(void *)(a2 + 176) = v36;
  *(void *)(a2 + 184) = 0;
  *(unsigned char *)(a2 + 192) = v17;
  *(void *)(a2 + 200) = v35;
  *(unsigned char *)(a2 + 208) = v18;
  *(_OWORD *)(a2 + 216) = v34;
  *(_OWORD *)(a2 + 232) = v33;
  *(void *)(a2 + 248) = v14;
  *(void *)(a2 + 256) = v32;
  *(unsigned char *)(a2 + 264) = v19;
  *(void *)(a2 + 272) = v31;
  outlined retain of ModifiedContent<ModifiedContent<VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _OffsetEffect>, _RotationEffect>, Spacer)>>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>((uint64_t)&v63);
  *(_OWORD *)&v74[81] = v59;
  *(_OWORD *)&v74[97] = v60;
  *(_OWORD *)&v74[113] = v61;
  *(_OWORD *)&v74[17] = v55;
  *(_OWORD *)&v74[33] = v56;
  *(_OWORD *)&v74[49] = v57;
  *(_OWORD *)&v74[65] = v58;
  uint64_t v72 = v20;
  uint64_t v73 = 0;
  v74[0] = v21;
  uint64_t v75 = v62;
  *(_OWORD *)&v74[1] = v54;
  *(_DWORD *)uint64_t v76 = v53[0];
  *(_DWORD *)&v76[3] = *(_DWORD *)((char *)v53 + 3);
  uint64_t v77 = v10;
  uint64_t v78 = v22;
  return outlined release of ModifiedContent<ModifiedContent<VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _OffsetEffect>, _RotationEffect>, Spacer)>>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>((uint64_t)&v72);
}

uint64_t closure #1 in closure #1 in ReticleCenterView.body.getter@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  ReticleCenterView.alpha.getter();
  double v5 = v4;
  ReticleCenterView.arrowFade.getter();
  double v6 = 0.0;
  double v7 = 0.0;
  if (v8 >= 1.0)
  {
    double v9 = a1[2];
    if (a1[3] < v9) {
      double v9 = a1[3];
    }
    double v11 = (v5 + v5) * 3.14159265;
    if (v5 > 0.75) {
      double v11 = 4.71238898;
    }
    double v10 = a1[4] * v9;
    double v7 = sin(v11) * v10;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  outlined retain of ReticleCenterView((uint64_t)a1);
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined release of ReticleCenterView((uint64_t)a1);
  if (sqrtf(vaddv_f32(vmul_f32(v21, v21))) > 0.01)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    outlined retain of ReticleCenterView((uint64_t)a1);
    static Published.subscript.getter();
    swift_release();
    swift_release();
    outlined release of ReticleCenterView((uint64_t)a1);
    float32x2_t v12 = vmul_f32(v21, v21);
    v12.i32[0] = vadd_f32(v12, (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1)).u32[0];
    float32x2_t v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
    float32x2_t v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)));
    float32x2_t v15 = vmul_n_f32(v21, vmul_f32(v14, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v14, v14))).f32[0]);
    double v6 = atan2f(v15.f32[1], v15.f32[0]);
  }
  uint64_t result = static UnitPoint.center.getter();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = KeyPath;
  *(void *)(a2 + 24) = v20;
  *(void *)(a2 + 32) = v22;
  *(unsigned char *)(a2 + 40) = v23;
  *(void *)(a2 + 48) = v24;
  *(unsigned char *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v26;
  *(void *)(a2 + 72) = v27;
  *(double *)(a2 + 80) = v7;
  *(void *)(a2 + 88) = 0;
  *(double *)(a2 + 96) = v6;
  *(void *)(a2 + 104) = v17;
  *(void *)(a2 + 112) = v18;
  *(void *)(a2 + 120) = 0;
  *(unsigned char *)(a2 + 128) = 1;
  return result;
}

uint64_t closure #2 in closure #1 in ReticleCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DataModel.State(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  double v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v9 = (char *)&v24 - v8;
  swift_getKeyPath();
  swift_getKeyPath();
  outlined retain of ReticleCenterView(a1);
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined release of ReticleCenterView(a1);
  uint64_t v10 = 0;
  double v11 = 0.0;
  if (sqrtf(vaddv_f32(vmul_f32(v25, v25))) > 0.01)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    outlined retain of ReticleCenterView(a1);
    static Published.subscript.getter();
    swift_release();
    swift_release();
    outlined release of ReticleCenterView(a1);
    float32x2_t v12 = vmul_f32(v25, v25);
    v12.i32[0] = vadd_f32(v12, (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1)).u32[0];
    float32x2_t v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
    float32x2_t v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)));
    float32x2_t v15 = vmul_n_f32(v25, vmul_f32(v14, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v14, v14))).f32[0]);
    double v11 = atan2f(v15.f32[1], v15.f32[0]);
  }
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  ReticleCenterView.alpha.getter();
  uint64_t v19 = v18;
  swift_getKeyPath();
  swift_getKeyPath();
  outlined retain of ReticleCenterView(a1);
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined release of ReticleCenterView(a1);
  uint64_t v20 = type metadata accessor for DataModel.Error(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v7, 6, 8, v20);
  char v21 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v9, (uint64_t)v7);
  outlined destroy of DataModel.State((uint64_t)v7);
  uint64_t result = outlined destroy of DataModel.State((uint64_t)v9);
  if (v21)
  {
    uint64_t result = ReticleCenterView.arrowFade.getter();
    uint64_t v10 = v23;
  }
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = v16;
  *(void *)(a2 + 24) = v17;
  *(double *)(a2 + 32) = v11;
  *(void *)(a2 + 40) = v19;
  *(void *)(a2 + 48) = v10;
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = 1;
  return result;
}

void *protocol witness for View.body.getter in conformance ReticleCenterView@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v8[0] = *(_OWORD *)v1;
  v8[1] = v3;
  v8[2] = *(_OWORD *)(v1 + 32);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v4 = static Alignment.center.getter();
  uint64_t v6 = v5;
  closure #1 in ReticleCenterView.body.getter((double *)v8, (uint64_t)__src);
  *a1 = v4;
  a1[1] = v6;
  return memcpy(a1 + 2, __src, 0x118uLL);
}

uint64_t protocol witness for View.body.getter in conformance RotatingArrowView@<X0>(uint64_t a1@<X8>)
{
  double v3 = *v1;
  uint64_t v4 = *((void *)v1 + 1);
  uint64_t v5 = *((void *)v1 + 2);
  double v6 = v1[3];
  if (v6 > 0.5) {
    double v7 = v1[3];
  }
  else {
    double v7 = 0.5;
  }
  static UnitPoint.center.getter();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t result = static UnitPoint.center.getter();
  *(double *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(double *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v11;
  *(double *)(a1 + 48) = v7;
  *(double *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  *(double *)(a1 + 80) = v6;
  return result;
}

uint64_t ArrowView.body.getter@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D2>)
{
  uint64_t v34 = a1;
  uint64_t v5 = type metadata accessor for Image.ResizingMode();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.fontWeight(_:)>>.0);
  uint64_t v32 = *(void *)(v9 - 8);
  uint64_t v33 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v13 = v12 - 8;
  MEMORY[0x270FA5388](v12);
  float32x2_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>);
  uint64_t v17 = v16 - 8;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  Image.init(systemName:)();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F1B4B8], v5);
  uint64_t v20 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  long long v35 = (unint64_t)v20;
  LOWORD(v36) = 257;
  static Font.Weight.bold.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _AspectRatioLayout>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>();
  View.fontWeight(_:)();
  swift_release();
  uint64_t v21 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v24 = v32;
  uint64_t v23 = v33;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v15, v11, v33);
  float32x2_t v25 = (uint64_t *)&v15[*(int *)(v13 + 44)];
  *float32x2_t v25 = KeyPath;
  v25[1] = v21;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v23);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v15, (uint64_t)v19, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v26 = &v19[*(int *)(v17 + 44)];
  long long v27 = v36;
  *(_OWORD *)uint64_t v26 = v35;
  *((_OWORD *)v26 + 1) = v27;
  *((_OWORD *)v26 + 2) = v37;
  outlined destroy of URL?((uint64_t)v15, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v28 = v34;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v19, v34, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>);
  uint64_t v29 = v28
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _OffsetEffect>)
               + 36);
  *(double *)uint64_t v29 = a2 * 0.5 * (1.0 - a3 + 1.0 - a3 + -1.0);
  *(void *)(v29 + 8) = 0;
  return outlined destroy of URL?((uint64_t)v19, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>);
}

uint64_t protocol witness for View.body.getter in conformance ArrowView@<X0>(uint64_t a1@<X8>)
{
  return ArrowView.body.getter(a1, *v1, v1[2]);
}

double specialized ARObjectCapturingView.init(model:)@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for DataModel(0);
  lazy protocol witness table accessor for type DataModel and conformance DataModel((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, (void (*)(uint64_t))type metadata accessor for DataModel);
  uint64_t v2 = ObservedObject.init(wrappedValue:)();
  uint64_t v4 = v3;
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  *(unsigned char *)(a1 + 80) = 0;
  double result = 0.2;
  *(_OWORD *)(a1 + 88) = xmmword_2466B85E0;
  *(void *)(a1 + 104) = 0x3FF8000000000000;
  return result;
}

uint64_t destroy for ARObjectCapturingView()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ARObjectCapturingView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ARObjectCapturingView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for ARObjectCapturingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for ARObjectCapturingView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ARObjectCapturingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ARObjectCapturingView()
{
  return &type metadata for ARObjectCapturingView;
}

uint64_t associated type witness table accessor for View.Body : View in ARObjectCapturingView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in ARObjectCapturingView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in ARObjectCapturingView.body.getter(a1, (long long *)(v2 + 16), a2);
}

uint64_t outlined retain of ARObjectCapturingView(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #2 in closure #1 in ARObjectCapturingView.body.getter(uint64_t a1)
{
  return closure #2 in closure #1 in ARObjectCapturingView.body.getter(a1, v1 + 16);
}

uint64_t partial apply for closure #3 in closure #1 in ARObjectCapturingView.body.getter(char *a1)
{
  return closure #3 in closure #1 in ARObjectCapturingView.body.getter(a1, (long long *)(v1 + 16));
}

uint64_t partial apply for closure #4 in closure #1 in ARObjectCapturingView.body.getter(unsigned char *a1)
{
  return closure #4 in closure #1 in ARObjectCapturingView.body.getter(a1, v1 + 16);
}

uint64_t partial apply for closure #5 in closure #1 in ARObjectCapturingView.body.getter()
{
  return closure #5 in closure #1 in ARObjectCapturingView.body.getter();
}

unsigned char *partial apply for closure #6 in closure #1 in ARObjectCapturingView.body.getter(unsigned char *result)
{
  return closure #6 in closure #1 in ARObjectCapturingView.body.getter(result);
}

uint64_t partial apply for closure #1 in closure #5 in closure #1 in ARObjectCapturingView.body.getter()
{
  return State.wrappedValue.setter();
}

uint64_t partial apply for closure #1 in closure #4 in closure #1 in ARObjectCapturingView.body.getter()
{
  return State.wrappedValue.setter();
}

uint64_t objectdestroyTm_1()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 128, 7);
}

uint64_t partial apply for closure #2 in closure #4 in closure #1 in ARObjectCapturingView.body.getter()
{
  return State.wrappedValue.setter();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t outlined destroy of DataModel.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DataModel.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in closure #3 in closure #1 in ARObjectCapturingView.body.getter()
{
  return State.wrappedValue.setter();
}

uint64_t outlined init with copy of DataModel.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataModel.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #3 in closure #2 in closure #1 in ARObjectCapturingView.body.getter()
{
  return State.wrappedValue.setter();
}

uint64_t partial apply for closure #2 in closure #2 in closure #1 in ARObjectCapturingView.body.getter()
{
  return State.wrappedValue.setter();
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in ARObjectCapturingView.body.getter()
{
  return closure #1 in closure #2 in closure #1 in ARObjectCapturingView.body.getter(*(long long **)(v0 + 16));
}

double _s7SwiftUI15ModifiedContentVy012_RealityKit_aB017StackableMiniViewVyACyAD018CoveragePointCloudhI0VAA16_OverlayModifierVyAA017StrokeBorderShapeI0VyAA6CircleVAA5ColorVAA05EmptyI0VGSgGGGAA013_TraitWritingN0VyAA010TransitionU3KeyVGGSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t outlined init with take of ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v17 = a9;
    outlined copy of StrokeBorderShapeView<Circle, Color, EmptyView>?(a13, a14, a15, a16, a17);
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of StrokeBorderShapeView<Circle, Color, EmptyView>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

void *outlined retain of ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25]);
  return a1;
}

uint64_t outlined consume of ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    swift_release();
    outlined consume of StrokeBorderShapeView<Circle, Color, EmptyView>?(a13, a14, a15, a16, a17);
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of StrokeBorderShapeView<Circle, Color, EmptyView>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined release of ARObjectCapturingView(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type DataModel and conformance DataModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeWithCopy for ReticleCenterView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ReticleCenterView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ReticleCenterView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReticleCenterView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReticleCenterView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for ReticleCenterView()
{
  return &unk_26FACE038;
}

uint64_t sub_24660AD14()
{
  return lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type GeometryReader<SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<DataModel.State>.Publisher, ModifiedContent<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ObjectSelectionView, _SafeAreaIgnoringLayout>, _AllowsHitTestingModifier>, ShakeModifier>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?, ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>, _SafeAreaIgnoringLayout>>>>>>> and conformance GeometryReader<A>, &demangling cache variable for type metadata for GeometryReader<SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<Bool>.Publisher, SubscriptionView<Published<DataModel.State>.Publisher, ModifiedContent<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ObjectSelectionView, _SafeAreaIgnoringLayout>, _AllowsHitTestingModifier>, ShakeModifier>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ReticleCenterView, _TraitWritingModifier<TransitionTraitKey>>, _FrameLayout>?, ModifiedContent<StackableMiniView<ModifiedContent<CoveragePointCloudMiniView, _OverlayModifier<StrokeBorderShapeView<Circle, Color, EmptyView>?>>>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>, _SafeAreaIgnoringLayout>>>>>>>);
}

uint64_t associated type witness table accessor for View.Body : View in ReticleCenterView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined retain of ReticleCenterView(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ReticleCenterView(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _OffsetEffect>, _RotationEffect>, Spacer)>>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _OffsetEffect>, _RotationEffect>, Spacer)>>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>(uint64_t a1)
{
  return a1;
}

void *type metadata accessor for RotatingArrowView()
{
  return &unk_26FACE0D0;
}

uint64_t sub_24660AE74()
{
  return lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<ModifiedContent<VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _OffsetEffect>, _RotationEffect>, Spacer)>>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<VStack<TupleView<(Spacer, ModifiedContent<RotatingArrowView, _OpacityEffect>, Spacer)>>, _TraitWritingModifier<TransitionTraitKey>>)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(ModifiedContent<ModifiedContent<VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _OffsetEffect>, _RotationEffect>, Spacer)>>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<VStack<TupleView<(Spacer, ModifiedContent<RotatingArrowView, _OpacityEffect>, Spacer)>>, _TraitWritingModifier<TransitionTraitKey>>)>>);
}

uint64_t associated type witness table accessor for View.Body : View in RotatingArrowView()
{
  return swift_getOpaqueTypeConformance2();
}

void *type metadata accessor for ArrowView()
{
  return &unk_26FACE158;
}

uint64_t sub_24660AEDC()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect>, _OpacityEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ArrowView, _RotationEffect> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ArrowView, _RotationEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ArrowView, _RotationEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ArrowView, _RotationEffect>, (void (*)(void))lazy protocol witness table accessor for type ArrowView and conformance ArrowView);
}

unint64_t lazy protocol witness table accessor for type ArrowView and conformance ArrowView()
{
  unint64_t result = lazy protocol witness table cache variable for type ArrowView and conformance ArrowView;
  if (!lazy protocol witness table cache variable for type ArrowView and conformance ArrowView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowView and conformance ArrowView);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ArrowView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _AspectRatioLayout>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_24660B0E0()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _OffsetEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _AspectRatioLayout>);
    lazy protocol witness table accessor for type ModifiedContent<Image, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>();
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata completion function for TubeGenerator()
{
  return swift_initClassMetadata2();
}

BOOL static TubeGenerator.Error.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void TubeGenerator.Error.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int TubeGenerator.Error.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TubeGenerator<A>.Error(char *a1, char *a2)
{
  return static TubeGenerator.Error.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TubeGenerator<A>.Error()
{
  return TubeGenerator.Error.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance TubeGenerator<A>.Error(uint64_t a1)
{
  TubeGenerator.Error.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TubeGenerator<A>.Error()
{
  Hasher.init(_seed:)();
  TubeGenerator.Error.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t TubeGenerator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TubeGenerator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TubeGenerator.CurvePoint()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for TubeGenerator.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24660B50CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for TubeGenerator.Error()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in TubeGenerator<A>.Error()
{
  return swift_getWitnessTable();
}

uint64_t one-time initialization function for instance()
{
  type metadata accessor for HapticManager();
  swift_allocObject();
  uint64_t result = HapticManager.init()();
  static HapticManager.instance = result;
  return result;
}

void HapticManager.enabled.didset(char a1)
{
  if (*(unsigned char *)(v1 + 16) != (a1 & 1))
  {
    uint64_t v2 = v1;
    if (*(unsigned char *)(v1 + 16))
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)logger);
      unsigned int v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        unsigned int v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unsigned int v6 = 0;
        _os_log_impl(&dword_2465C2000, v4, v5, "HapticManager was switched to enabled=true.  Turning on haptics...", v6, 2u);
        MEMORY[0x24C5348D0](v6, -1, -1);
      }

      HapticManager.start()();
    }
    else
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)logger);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl(&dword_2465C2000, v8, v9, "HapticManager was switched to enabled=false.  Turning off haptics...", v10, 2u);
        MEMORY[0x24C5348D0](v10, -1, -1);
      }

      if (*(unsigned char *)(v2 + 17) == 1)
      {
        HapticManager.stopHapticEngine()();
      }
    }
  }
}

uint64_t HapticManager.init()()
{
  *(unsigned char *)(v0 + 16) = 1;
  *(unsigned char *)(v0 + 18) = 1;
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  unsigned __int8 v1 = objc_msgSend(objc_msgSend(self, sel_capabilitiesForHardware), sel_supportsHaptics);
  swift_unknownObjectRelease();
  *(unsigned char *)(v0 + 17) = v1;
  if (v1)
  {
    id v2 = specialized HapticManager.createShotHapticPattern()();
    uint64_t v3 = *(void **)(v0 + 32);
    *(void *)(v0 + 32) = v2;

    HapticManager.createAndStartHapticEngine()();
  }
  else
  {
    swift_release();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)logger);
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_2465C2000, v5, v6, "Haptics not supported!", v7, 2u);
      MEMORY[0x24C5348D0](v7, -1, -1);
    }

    return 0;
  }
  return v0;
}

Swift::Void __swiftcall HapticManager.start()()
{
  if (*(unsigned char *)(v0 + 17) == 1) {
    HapticManager.startHapticEngineIfNecessary()();
  }
}

Swift::Void __swiftcall HapticManager.playShotHaptic()()
{
  v24[1] = *(id *)MEMORY[0x263EF8340];
  if (*(unsigned char *)(v0 + 17) == 1)
  {
    uint64_t v1 = v0;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)logger);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v5 = 0;
      _os_log_impl(&dword_2465C2000, v3, v4, "Playing shot haptic...", v5, 2u);
      MEMORY[0x24C5348D0](v5, -1, -1);
    }

    if (*(unsigned char *)(v1 + 16) == 1)
    {
      if (!*(void *)(v1 + 32)) {
        __break(1u);
      }
      HapticManager.start()();
      os_log_type_t v6 = *(void **)(v1 + 24);
      if (v6)
      {
        uint64_t v7 = *(void *)(v1 + 32);
        if (v7)
        {
          v24[0] = 0;
          id v8 = objc_msgSend(v6, sel_createPlayerWithPattern_error_, v7, v24);
          id v9 = v24[0];
          if (v8)
          {
            uint64_t v10 = v8;
            v24[0] = 0;
            id v11 = v9;
            if (objc_msgSend(v10, sel_startAtTime_error_, v24, 0.0))
            {
              id v12 = v24[0];
              uint64_t v13 = Logger.logObject.getter();
              os_log_type_t v14 = static os_log_type_t.default.getter();
              if (!os_log_type_enabled(v13, v14))
              {

                swift_unknownObjectRelease();
                return;
              }
              float32x2_t v15 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)float32x2_t v15 = 0;
              _os_log_impl(&dword_2465C2000, v13, v14, "... done playing shot haptic.", v15, 2u);
              MEMORY[0x24C5348D0](v15, -1, -1);
              swift_unknownObjectRelease();
              goto LABEL_24;
            }
            id v20 = v24[0];
            uint64_t v19 = (void *)_convertNSErrorToError(_:)();

            swift_willThrow();
            swift_unknownObjectRelease();
          }
          else
          {
            id v18 = v24[0];
            uint64_t v19 = (void *)_convertNSErrorToError(_:)();

            swift_willThrow();
          }
          uint64_t v13 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v13, v21))
          {
            uint64_t v22 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v22 = 0;
            _os_log_impl(&dword_2465C2000, v13, v21, "Failed to play the shot haptic pattern!", v22, 2u);
            MEMORY[0x24C5348D0](v22, -1, -1);
          }

LABEL_24:
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return;
    }
    oslog = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl(&dword_2465C2000, oslog, v16, "... not play haptic.  Haptics was disabled.", v17, 2u);
      MEMORY[0x24C5348D0](v17, -1, -1);
    }
  }
}

void HapticManager.createAndStartHapticEngine()()
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(v0 + 17) != 1) {
    return;
  }
  id v1 = objc_msgSend(self, sel_sharedInstance);
  id aBlock = 0;
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00588]), sel_initWithAudioSession_error_, v1, &aBlock);
  id v3 = aBlock;
  if (!v2)
  {
LABEL_21:
    uint64_t v28 = v3;
    uint64_t v29 = _convertNSErrorToError(_:)();

    swift_willThrow();
    id aBlock = 0;
    unint64_t v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v30._object = (void *)0x80000002466BFB10;
    v30._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v30);
    uint64_t v37 = v29;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }

  os_log_type_t v4 = *(void **)(v0 + 24);
  *(void *)(v0 + 24) = v2;

  os_log_type_t v5 = *(void **)(v0 + 24);
  if (!v5)
  {
    __break(1u);
    goto LABEL_19;
  }
  long long v35 = partial apply for closure #1 in HapticManager.createAndStartHapticEngine();
  uint64_t v36 = v0;
  id aBlock = (id)MEMORY[0x263EF8330];
  unint64_t v32 = 1107296256;
  uint64_t v33 = thunk for @escaping @callee_guaranteed (@unowned CHHapticEngineStoppedReason) -> ();
  uint64_t v34 = &block_descriptor_22;
  id v1 = _Block_copy(&aBlock);
  swift_retain();
  id v6 = v5;
  swift_release();
  objc_msgSend(v6, sel_setStoppedHandler_, v1);
  _Block_release(v1);

  uint64_t v7 = *(void **)(v0 + 24);
  if (!v7)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  long long v35 = partial apply for closure #2 in HapticManager.createAndStartHapticEngine();
  uint64_t v36 = v0;
  id aBlock = (id)MEMORY[0x263EF8330];
  unint64_t v32 = 1107296256;
  uint64_t v33 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v34 = &block_descriptor_25;
  id v1 = _Block_copy(&aBlock);
  swift_retain();
  id v8 = v7;
  swift_release();
  objc_msgSend(v8, sel_setResetHandler_, v1);
  _Block_release(v1);

  id v3 = *(id *)(v0 + 24);
  if (!v3)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id aBlock = 0;
  unsigned int v9 = objc_msgSend(v3, sel_startAndReturnError_, &aBlock);
  id v10 = aBlock;
  if (v9)
  {
    *(unsigned char *)(v0 + 18) = 0;
    uint64_t v11 = one-time initialization token for logger;
    id v12 = v10;
    if (v11 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)logger);
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v16 = 0;
      _os_log_impl(&dword_2465C2000, v14, v15, "Successfully started the haptic engine!", v16, 2u);
      MEMORY[0x24C5348D0](v16, -1, -1);
    }
  }
  else
  {
    id v17 = aBlock;
    id v18 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)logger);
    id v20 = v18;
    id v21 = v18;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      float32x2_t v25 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 138412290;
      id v26 = v18;
      long long v27 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id aBlock = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *float32x2_t v25 = v27;

      _os_log_impl(&dword_2465C2000, v22, v23, "The engine failed to start with error: %@", v24, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v25, -1, -1);
      MEMORY[0x24C5348D0](v24, -1, -1);
    }
    else
    {
    }
  }
}

void closure #1 in HapticManager.createAndStartHapticEngine()(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  os_log_type_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v5, v6, "Stop Handler: The engine stopped for reason: %ld", v7, 0xCu);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  switch(a1)
  {
    case -1:
      id v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v10 = 0;
        uint64_t v11 = "System error.";
        goto LABEL_22;
      }
      break;
    case 1:
      id v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v10 = 0;
        uint64_t v11 = "Audio session interrupt.";
        goto LABEL_22;
      }
      break;
    case 2:
      id v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v10 = 0;
        uint64_t v11 = "Application suspended.";
        goto LABEL_22;
      }
      break;
    case 3:
      id v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v10 = 0;
        uint64_t v11 = "Idle timeout.";
        goto LABEL_22;
      }
      break;
    case 4:
      id v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v10 = 0;
        uint64_t v11 = "Finished.";
        goto LABEL_22;
      }
      break;
    case 5:
      id v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v10 = 0;
        uint64_t v11 = "Engine destroyed.";
        goto LABEL_22;
      }
      break;
    case 6:
      id v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v10 = 0;
        uint64_t v11 = "Controller disconnected.";
        goto LABEL_22;
      }
      break;
    default:
      id v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v10 = 0;
        uint64_t v11 = "Unknown error";
LABEL_22:
        _os_log_impl(&dword_2465C2000, v8, v9, v11, v10, 2u);
        MEMORY[0x24C5348D0](v10, -1, -1);
      }
      break;
  }

  *(unsigned char *)(a2 + 18) = 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned CHHapticEngineStoppedReason) -> ()(uint64_t a1, uint64_t a2)
{
  id v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

void closure #2 in HapticManager.createAndStartHapticEngine()(uint64_t a1)
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "The engine reset --> Restarting now!", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  *(unsigned char *)(a1 + 18) = 1;
}

void HapticManager.startHapticEngineIfNecessary()()
{
  v13[1] = *(id *)MEMORY[0x263EF8340];
  if (*(unsigned char *)(v0 + 18) == 1)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)logger);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v4 = 0;
      _os_log_impl(&dword_2465C2000, v2, v3, "Starting the haptic engine...", v4, 2u);
      MEMORY[0x24C5348D0](v4, -1, -1);
    }

    os_log_type_t v5 = *(void **)(v0 + 24);
    if (v5)
    {
      v13[0] = 0;
      unsigned int v6 = objc_msgSend(v5, sel_startAndReturnError_, v13);
      id v7 = v13[0];
      if (v6)
      {
        *(unsigned char *)(v0 + 18) = 0;
        id v8 = v7;
        os_log_type_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v11 = 0;
          _os_log_impl(&dword_2465C2000, v9, v10, "... successfully started the haptic engine!", v11, 2u);
          MEMORY[0x24C5348D0](v11, -1, -1);
        }
      }
      else
      {
        id v12 = v13[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  os_log_type_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void HapticManager.stopHapticEngine()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Stopping the haptic engine...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  unsigned int v6 = *(void **)(v1 + 24);
  if (v6)
  {
    v9[4] = partial apply for closure #1 in HapticManager.stopHapticEngine();
    v9[5] = v1;
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 1107296256;
    void v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
    v9[3] = &block_descriptor_3;
    id v7 = _Block_copy(v9);
    id v8 = v6;
    swift_retain();
    swift_release();
    objc_msgSend(v8, sel_stopWithCompletionHandler_, v7);
    _Block_release(v7);
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in HapticManager.stopHapticEngine()(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = a1;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)logger);
    id v5 = a1;
    id v6 = a1;
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)id v8 = 138412290;
      id v10 = a1;
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v9 = v12;

      _os_log_impl(&dword_2465C2000, oslog, v7, "Haptic Engine Shutdown Error: %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v9, -1, -1);
      MEMORY[0x24C5348D0](v8, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    *(unsigned char *)(a2 + 18) = 1;
  }
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CHHapticPatternKey, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE80];
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v28 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v28 << 6);
      goto LABEL_28;
    }
    int64_t v11 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v26) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v11);
    int64_t v13 = v28 + 1;
    if (!v12)
    {
      int64_t v13 = v28 + 2;
      if (v28 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v12 = *(void *)(v27 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v28 + 3;
        if (v28 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v27 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v28 + 4;
          if (v28 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v27 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v28 = v13;
LABEL_28:
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    *(void *)&v31[0] = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    *(void *)&v30[0] = v15;
    id v16 = *(id *)&v31[0];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [[CHHapticPatternKey : [CHHapticPatternKey : Any]]]);
    swift_dynamicCast();
    uint64_t v17 = *(void *)&v31[0];
    outlined init with take of Any((_OWORD *)((char *)v31 + 8), v29);
    outlined init with take of Any(v29, v31);
    outlined init with take of Any(v31, v30);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v19 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v20 = v18 & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v8 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v6 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(void *)(*(void *)(v2 + 48) + 8 * v8) = v17;
    uint64_t result = (uint64_t)outlined init with take of Any(v30, (_OWORD *)(*(void *)(v2 + 56) + 32 * v8));
    ++*(void *)(v2 + 16);
  }
  int64_t v14 = v28 + 5;
  if (v28 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [CHHapticPatternKey : [[CHHapticPatternKey : [CHHapticPatternKey : Any]]]].Iterator._Variant();
    return v2;
  }
  unint64_t v12 = *(void *)(v27 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v28 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t HapticManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HapticManager()
{
  return self;
}

void partial apply for closure #1 in HapticManager.stopHapticEngine()(void *a1)
{
  closure #1 in HapticManager.stopHapticEngine()(a1, v1);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

id @nonobjc CHHapticPattern.init(dictionary:)()
{
  v6[1] = *(id *)MEMORY[0x263EF8340];
  type metadata accessor for CHHapticPatternKey(0);
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_initWithDictionary_error_, isa, v6);

  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

void partial apply for closure #1 in HapticManager.createAndStartHapticEngine()(uint64_t a1)
{
  closure #1 in HapticManager.createAndStartHapticEngine()(a1, v1);
}

void partial apply for closure #2 in HapticManager.createAndStartHapticEngine()()
{
  closure #2 in HapticManager.createAndStartHapticEngine()(v0);
}

id specialized HapticManager.createShotHapticPattern()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CHHapticPatternKey, [[CHHapticPatternKey : [CHHapticPatternKey : Any]]])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B5E00;
  uint64_t v1 = (void *)*MEMORY[0x263F00560];
  *(void *)(inited + 32) = *MEMORY[0x263F00560];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[CHHapticPatternKey : [CHHapticPatternKey : Any]]>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2466B5E00;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CHHapticPatternKey, [CHHapticPatternKey : Any])>);
  uint64_t v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_2466B5E00;
  id v4 = (void *)*MEMORY[0x263F00530];
  *(void *)(v3 + 32) = *MEMORY[0x263F00530];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CHHapticPatternKey, Any)>);
  uint64_t v5 = swift_initStackObject();
  uint64_t v6 = (void **)MEMORY[0x263F00548];
  *(_OWORD *)(v5 + 16) = xmmword_2466B5DE0;
  os_log_type_t v7 = *v6;
  *(void *)(v5 + 32) = *v6;
  unint64_t v8 = (void *)*MEMORY[0x263F00528];
  type metadata accessor for CHHapticEventType(0);
  *(void *)(v5 + 40) = v8;
  unint64_t v9 = (void *)*MEMORY[0x263F00568];
  *(void *)(v5 + 64) = v10;
  *(void *)(v5 + 72) = v9;
  uint64_t v11 = MEMORY[0x263F8D538];
  *(void *)(v5 + 80) = 0;
  unint64_t v12 = (void *)*MEMORY[0x263F00538];
  *(void *)(v5 + 104) = v11;
  *(void *)(v5 + 112) = v12;
  *(void *)(v5 + 144) = v11;
  *(void *)(v5 + 120) = 0x3FE0000000000000;
  id v13 = v1;
  id v14 = v4;
  id v15 = v7;
  id v16 = v8;
  id v17 = v9;
  id v18 = v12;
  *(void *)(v3 + 40) = specialized Dictionary.init(dictionaryLiteral:)(v5);
  *(void *)(v2 + 32) = specialized Dictionary.init(dictionaryLiteral:)(v3);
  *(void *)(inited + 40) = v2;
  unint64_t v19 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v19);
  swift_bridgeObjectRelease();
  id v20 = objc_allocWithZone(MEMORY[0x263F005A8]);
  id v21 = @nonobjc CHHapticPattern.init(dictionary:)();
  id v26 = v21;
  if (v21)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)logger);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v28))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_2465C2000, v23, v28, "Created the shot haptic pattern!", v25, 2u);
      goto LABEL_12;
    }
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)logger);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_2465C2000, v23, v24, "Can't create the shot haptic pattern!", v25, 2u);
      id v26 = 0;
LABEL_12:
      MEMORY[0x24C5348D0](v25, -1, -1);
      goto LABEL_13;
    }
    id v26 = 0;
  }
LABEL_13:

  return v26;
}

unint64_t lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey()
{
  unint64_t result = lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey;
  if (!lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey)
  {
    type metadata accessor for CHHapticPatternKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey);
  }
  return result;
}

uint64_t static RangefinderManager.raycastOntoScene(clipSpacePoint:scene:maxDistance:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4 = type metadata accessor for CollisionGroup();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  os_log_type_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Type = type metadata accessor for CollisionCastQueryType();
  uint64_t v9 = *(void *)(Type - 8);
  MEMORY[0x270FA5388](Type);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (dispatch thunk of Scene.internalActiveCamera.getter())
  {
    specialized static Ray3D.worldRay(through:using:)(v24, a2);
    outlined init with take of Ray3D?((uint64_t)v24, (uint64_t)v25);
    if (v26 != 1)
    {
      v23[0] = v25[1];
      v23[1] = v25[0];
      (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F16268], Type);
      static CollisionGroup.all.getter();
      uint64_t v18 = Scene.raycast(origin:direction:length:query:mask:relativeTo:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, Type);
      uint64_t v19 = *(void *)(v18 + 16);
      uint64_t v20 = type metadata accessor for CollisionCastHit();
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v22 = v21;
      if (v19)
      {
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v21 + 16))(a1, v18 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)), v20);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(a1, 0, 1, v20);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(a1, 1, 1, v20);
      }
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_release();
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)logger);
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v15 = 0;
    _os_log_impl(&dword_2465C2000, v13, v14, "Can't get a camera to raycast!", v15, 2u);
    MEMORY[0x24C5348D0](v15, -1, -1);
  }

  uint64_t v16 = type metadata accessor for CollisionCastHit();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a1, 1, 1, v16);
}

Swift::Void __swiftcall RangefinderManager.detach()()
{
  if (*(unsigned char *)(v0 + 44) != 1)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v8)) {
      goto LABEL_18;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    uint64_t v10 = "Rangefinder is not attached... cannot detach!";
    goto LABEL_17;
  }
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Detaching Rangefinder entity...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  *(unsigned char *)(v1 + 44) = 0;
  if (!*(void *)(v1 + 80))
  {
    __break(1u);
    goto LABEL_22;
  }
  type metadata accessor for RaycastMeshTrackingEntity();
  swift_retain();
  HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
  swift_release();
  uint64_t v6 = *(void *)(v1 + 80);
  if (!v6)
  {
LABEL_22:
    __break(1u);
    return;
  }
  *(void *)(v6 + direct field offset for RaycastMeshTrackingEntity.scaleFilter) = 0;
  swift_retain();
  swift_release();
  *(void *)(v6 + direct field offset for RaycastMeshTrackingEntity.rotationFilter) = 0;
  swift_release();
  swift_release();
  int v7 = *(unsigned __int8 *)(v1 + 64);
  *(unsigned char *)(v1 + 64) = 0;
  if (v7 && MEMORY[0x24C5349C0](v1 + 48))
  {
    specialized RangefinderObserver.zoneDidChange(_:)();
    swift_unknownObjectRelease();
  }
  oslog = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(oslog, v8)) {
    goto LABEL_18;
  }
  uint64_t v9 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v9 = 0;
  uint64_t v10 = "... detached Rangefinder entity.";
LABEL_17:
  _os_log_impl(&dword_2465C2000, oslog, v8, v10, v9, 2u);
  MEMORY[0x24C5348D0](v9, -1, -1);
LABEL_18:
}

uint64_t RangefinderManager.__deallocating_deinit()
{
  outlined destroy of weak RangefinderDelegate?(v0 + 48);
  swift_unknownObjectWeakDestroy();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RangefinderManager()
{
  return self;
}

uint64_t type metadata accessor for RaycastMeshTrackingEntity()
{
  uint64_t result = type metadata singleton initialization cache for RaycastMeshTrackingEntity;
  if (!type metadata singleton initialization cache for RaycastMeshTrackingEntity) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for RaycastMeshTrackingEntity()
{
  return swift_initClassMetadata2();
}

uint64_t one-time initialization function for query()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = type metadata accessor for EntityQuery();
  __swift_allocate_value_buffer(v1, static RaycastMeshTrackingComponent.query);
  __swift_project_value_buffer(v1, (uint64_t)static RaycastMeshTrackingComponent.query);
  type metadata accessor for Entity();
  lazy protocol witness table accessor for type RaycastMeshTrackingComponent and conformance RaycastMeshTrackingComponent();
  static QueryPredicate.has<A>(_:)();
  return EntityQuery.init(where:)();
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

double protocol witness for Decodable.init(from:) in conformance RaycastMeshTrackingComponent.ReticleDescriptor@<D0>(_OWORD *a1@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance RaycastMeshTrackingComponent.ReticleDescriptor((void (*)(_OWORD *__return_ptr))specialized RaycastMeshTrackingComponent.ReticleDescriptor.init(from:), a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RaycastMeshTrackingComponent.ReticleDescriptor(void *a1)
{
  return RaycastMeshTrackingComponent.ReticleDescriptor.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys);
}

Swift::Float __swiftcall RaycastMeshTrackingComponent.computeAlpha(distance:)(Swift::Float distance)
{
  float v3 = v1[4];
  float v2 = v1[5];
  float v4 = 0.0;
  if (v3 > distance || v2 < distance) {
    return v4;
  }
  float v6 = v1[6];
  if (v3 > (float)(v3 + v6))
  {
    __break(1u);
  }
  else
  {
    if ((float)(v3 + v6) > distance)
    {
      float v7 = distance - v3;
      return v7 / v6;
    }
    if ((float)(v2 - v6) <= v2)
    {
      float v4 = 1.0;
      if (v2 <= distance || (float)(v2 - v6) > distance) {
        return v4;
      }
      float v7 = v2 - distance;
      return v7 / v6;
    }
  }
  __break(1u);
  return distance;
}

unint64_t RaycastMeshTrackingComponent.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x737569646172;
      break;
    case 2:
      unint64_t result = 0x696361704F78616DLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x697469736E617274;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t RaycastMeshTrackingComponent.ReticleDescriptor.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = *v5;
  char v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  lazy protocol witness table accessor for type SIMD2<Float> and conformance SIMD2<A>(&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>);
  uint64_t v11 = v13;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    LOBYTE(v15) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v15) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v15 = v5[2];
    char v14 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Float>);
    lazy protocol witness table accessor for type Range<Float> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Float> and conformance <> Range<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v15) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance RaycastMeshTrackingComponent.CodingKeys()
{
  return RaycastMeshTrackingComponent.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RaycastMeshTrackingComponent.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RaycastMeshTrackingComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RaycastMeshTrackingComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

double protocol witness for Decodable.init(from:) in conformance RaycastMeshTrackingComponent@<D0>(_OWORD *a1@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance RaycastMeshTrackingComponent.ReticleDescriptor((void (*)(_OWORD *__return_ptr))specialized RaycastMeshTrackingComponent.init(from:), a1);
}

double protocol witness for Decodable.init(from:) in conformance RaycastMeshTrackingComponent.ReticleDescriptor@<D0>(void (*a1)(_OWORD *__return_ptr)@<X3>, _OWORD *a2@<X8>)
{
  a1(v5);
  if (!v2)
  {
    *a2 = v5[0];
    double result = *(double *)((char *)v5 + 12);
    *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)((char *)v5 + 12);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RaycastMeshTrackingComponent(void *a1)
{
  return RaycastMeshTrackingComponent.ReticleDescriptor.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<RaycastMeshTrackingComponent.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys);
}

uint64_t RaycastMeshTrackingEntity.__allocating_init()()
{
  return RaycastMeshTrackingEntity.init()();
}

uint64_t RaycastMeshTrackingEntity.init()()
{
  *(void *)(v0 + direct field offset for RaycastMeshTrackingEntity.manager) = 0;
  swift_unknownObjectWeakInit();
  *(_DWORD *)(v0 + direct field offset for RaycastMeshTrackingEntity.lastGoodScale) = 1065353216;
  *(void *)(v0 + direct field offset for RaycastMeshTrackingEntity.rotationFilter) = 0;
  *(void *)(v0 + direct field offset for RaycastMeshTrackingEntity.scaleFilter) = 0;
  *(void *)(v0 + direct field offset for RaycastMeshTrackingEntity.fadeFilter) = 0;
  *(void *)(v0 + direct field offset for RaycastMeshTrackingEntity.cameraZFilter) = 0;
  *(void *)(v0 + direct field offset for RaycastMeshTrackingEntity.ringEntity) = 0;
  *(void *)(v0 + direct field offset for RaycastMeshTrackingEntity.sphereEntity) = 0;
  *(unsigned char *)(v0 + direct field offset for RaycastMeshTrackingEntity.useScaleFilter) = 1;
  *(void *)(v0 + direct field offset for RaycastMeshTrackingEntity.loadTask) = 0;

  return Entity.init()();
}

uint64_t RaycastMeshTrackingEntity.init(descriptor:using:manager:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v49 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UnlitMaterial();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  long long v48 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Entity.ComponentSet();
  uint64_t v46 = *(void *)(v12 - 8);
  uint64_t v47 = v12;
  MEMORY[0x270FA5388](v12);
  long long v45 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v3 + direct field offset for RaycastMeshTrackingEntity.manager) = 0;
  swift_unknownObjectWeakInit();
  *(_DWORD *)(v3 + direct field offset for RaycastMeshTrackingEntity.lastGoodScale) = 1065353216;
  *(void *)(v3 + direct field offset for RaycastMeshTrackingEntity.rotationFilter) = 0;
  *(void *)(v3 + direct field offset for RaycastMeshTrackingEntity.scaleFilter) = 0;
  *(void *)(v3 + direct field offset for RaycastMeshTrackingEntity.fadeFilter) = 0;
  *(void *)(v3 + direct field offset for RaycastMeshTrackingEntity.cameraZFilter) = 0;
  *(void *)(v3 + direct field offset for RaycastMeshTrackingEntity.ringEntity) = 0;
  *(void *)(v3 + direct field offset for RaycastMeshTrackingEntity.sphereEntity) = 0;
  *(unsigned char *)(v3 + direct field offset for RaycastMeshTrackingEntity.useScaleFilter) = 1;
  *(void *)(v3 + direct field offset for RaycastMeshTrackingEntity.loadTask) = 0;
  uint64_t v14 = Entity.init()();
  swift_unknownObjectWeakAssign();
  *(void *)(v14 + direct field offset for RaycastMeshTrackingEntity.manager) = a3;
  swift_retain();
  uint64_t v44 = a3;
  swift_retain();
  swift_release();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)logger);
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v42[1] = v16;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v43 = a2;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v50 = v21;
    v42[0] = v20 + 4;
    *(_OWORD *)long long v51 = *(_OWORD *)v49;
    *(_OWORD *)&v51[12] = *(_OWORD *)(v49 + 12);
    uint64_t v22 = String.init<A>(describing:)();
    *(void *)long long v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v17, v18, "Creating a rangefinder reticle entity: %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v21, -1, -1);
    os_log_type_t v24 = v20;
    a2 = v43;
    MEMORY[0x24C5348D0](v24, -1, -1);
  }

  uint64_t v25 = v48;
  if (static RaycastMeshTrackingEntity.isFirstInstance == 1)
  {
    type metadata accessor for RaycastMeshTrackingSystem();
    lazy protocol witness table accessor for type RaycastMeshTrackingSystem and conformance RaycastMeshTrackingSystem();
    static System.registerSystem()();
    static RaycastMeshTrackingEntity.isFirstInstance = 0;
  }
  swift_retain();
  char v26 = v45;
  dispatch thunk of Entity.components.getter();
  swift_release();
  int v27 = *(_DWORD *)(v49 + 24);
  *(void *)long long v51 = *(void *)v49;
  *(_OWORD *)&v51[8] = *(_OWORD *)(v49 + 8);
  *(_DWORD *)&v51[24] = v27;
  lazy protocol witness table accessor for type RaycastMeshTrackingComponent and conformance RaycastMeshTrackingComponent();
  Entity.ComponentSet.set<A>(_:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v26, v47);
  objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithRed_green_blue_alpha_, 1.0, 1.0, 1.0, 1.0);
  UnlitMaterial.init(color:)();
  uint64_t v28 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v8, 1, 1, v28);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v29 = (uint64_t)v8;
  uint64_t v30 = static MainActor.shared.getter();
  uint64_t v31 = (void *)swift_allocObject();
  uint64_t v32 = MEMORY[0x263F8F500];
  v31[2] = v30;
  _OWORD v31[3] = v32;
  _OWORD v31[4] = v14;
  *(void *)(v14 + direct field offset for RaycastMeshTrackingEntity.loadTask) = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v29, (uint64_t)&async function pointer to partial apply for closure #1 in RaycastMeshTrackingEntity.startLoadingRingEntity(), (uint64_t)v31);
  swift_release();
  type metadata accessor for MeshResource();
  static MeshResource.generateSphere(radius:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_2466B5E00;
  uint64_t v34 = MEMORY[0x263F16178];
  *(void *)(v33 + 56) = v9;
  *(void *)(v33 + 64) = v34;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v33 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v25, v9);
  type metadata accessor for ModelEntity();
  swift_allocObject();
  uint64_t v36 = ModelEntity.init(mesh:materials:)();
  uint64_t v37 = direct field offset for RaycastMeshTrackingEntity.sphereEntity;
  *(void *)(v14 + direct field offset for RaycastMeshTrackingEntity.sphereEntity) = v36;
  uint64_t result = swift_release();
  if (*(void *)(v14 + v37))
  {
    type metadata accessor for RaycastMeshTrackingEntity();
    swift_retain();
    HasHierarchy.addChild(_:preservingWorldTransform:)();
    swift_release();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      long long v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v41 = 0;
      _os_log_impl(&dword_2465C2000, v39, v40, "... done loading reticle geometry!", v41, 2u);
      MEMORY[0x24C5348D0](v41, -1, -1);
    }
    swift_release();
    swift_release();

    (*(void (**)(char *, uint64_t))(v10 + 8))(v25, v9);
    return v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall RaycastMeshTrackingEntity.targetOrientation(_:dt:)(simd_quatf *_, Swift::Double dt)
{
  double v4 = v3;
  uint64_t v5 = direct field offset for RaycastMeshTrackingEntity.rotationFilter;
  uint64_t v6 = *(void *)(v2 + direct field offset for RaycastMeshTrackingEntity.rotationFilter);
  if (!v6)
  {
    __n128 v11 = *(__n128 *)&dt;
    type metadata accessor for RotationFilter();
    swift_allocObject();
    *(void *)(v2 + v5) = RotationFilter.init(alphaDensity:startValue:)(2.0, v11);
    swift_release();
    *(__n128 *)&dt = v11;
    uint64_t v6 = *(void *)(v2 + v5);
    if (!v6) {
      goto LABEL_13;
    }
  }
  *(_OWORD *)(v6 + 32) = *(_OWORD *)&dt;
  uint64_t v7 = *(void *)(v2 + v5);
  if (!v7)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  float v8 = *(double *)(v7 + 16) * v4;
  if (v8 <= 0.0) {
    float v8 = 0.0;
  }
  if (v8 <= 1.0) {
    float v9 = v8;
  }
  else {
    float v9 = 1.0;
  }
  simd_slerp(*(float32x4_t *)(v7 + 48), *(float32x4_t *)(v7 + 32), v9);
  *(_OWORD *)(v7 + 48) = v10;
  type metadata accessor for RaycastMeshTrackingEntity();

  HasTransform.setOrientation(_:relativeTo:)();
}

uint64_t RaycastMeshTrackingEntity.targetScale(_:dt:)(__n128 a1, double a2)
{
  uint64_t v4 = direct field offset for RaycastMeshTrackingEntity.scaleFilter;
  uint64_t result = *(void *)(v2 + direct field offset for RaycastMeshTrackingEntity.scaleFilter);
  if (!result)
  {
    __n128 v13 = a1;
    type metadata accessor for Vec3Filter();
    uint64_t result = swift_allocObject();
    a1 = v13;
    *(void *)(result + 16) = 0x4000000000000000;
    *(__n128 *)(result + 32) = v13;
    *(__n128 *)(result + 48) = v13;
    *(void *)(v2 + v4) = result;
    if (!result) {
      goto LABEL_11;
    }
  }
  *(__n128 *)(result + 32) = a1;
  uint64_t v6 = *(float32x4_t **)(v2 + v4);
  if (!v6)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  float v7 = a2 + a2;
  if (v7 <= 0.0) {
    float v7 = 0.0;
  }
  if (v7 <= 1.0) {
    float v8 = v7;
  }
  else {
    float v8 = 1.0;
  }
  float32x4_t v12 = v6[2];
  float32x4_t v14 = v6[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
  *(float *)(inited + 32) = v8;
  *(float *)(inited + 36) = v8;
  *(float *)(inited + 40) = v8;
  specialized SIMD.init<A>(_:)(inited);
  float32x4_t v11 = v10;
  swift_setDeallocating();
  v6[3] = vmlaq_f32(v14, vsubq_f32(v12, v14), v11);
  type metadata accessor for RaycastMeshTrackingEntity();
  return HasTransform.setScale(_:relativeTo:)();
}

Swift::Void __swiftcall RaycastMeshTrackingEntity.targetFade(_:dt:)(Swift::Float _, Swift::Double dt)
{
  uint64_t v5 = type metadata accessor for __EntityRef();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  float v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = direct field offset for RaycastMeshTrackingEntity.fadeFilter;
  uint64_t v10 = *(void *)(v2 + direct field offset for RaycastMeshTrackingEntity.fadeFilter);
  if (!v10)
  {
    type metadata accessor for FloatFilter();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = 0x400C000000000000;
    *(Swift::Float *)(v10 + 24) = _;
    *(Swift::Float *)(v10 + 28) = _;
    *(void *)(v2 + v9) = v10;
    if (!v10) {
      goto LABEL_11;
    }
  }
  *(Swift::Float *)(v10 + 24) = _;
  uint64_t v11 = *(void *)(v2 + v9);
  if (!v11)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  float v12 = *(double *)(v11 + 16) * dt;
  float v13 = 1.0;
  if (v12 <= 1.0) {
    float v13 = *(double *)(v11 + 16) * dt;
  }
  BOOL v14 = v12 > 0.0;
  float v15 = 0.0;
  if (v14) {
    float v15 = v13;
  }
  *(float *)(v11 + 28) = *(float *)(v11 + 28) + (float)((float)(*(float *)(v11 + 24) - *(float *)(v11 + 28)) * v15);
  dispatch thunk of Entity.__coreEntity.getter();
  MEMORY[0x24C530D20](&v18, MEMORY[0x263F8DD08], MEMORY[0x263F8DD08]);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  REHierarchicalFadeComponentGetComponentType();
  uint64_t v16 = REEntityGetOrAddComponentByClass();
  REHierarchicalFadeComponentSetOpacity();
  MEMORY[0x24C533F60](v16);
}

uint64_t RaycastMeshTrackingEntity.targetPosition(_:viewToWorld:dt:)(__n128 a1, simd_float4 a2, simd_float4 a3, simd_float4 a4, simd_float4 a5, double a6)
{
  v26.columns[0] = a2;
  v26.columns[1] = a3;
  v26.columns[2] = a4;
  v26.columns[3] = a5;
  simd_float4x4 v23 = __invert_f4(v26);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B5DF0;
  *(void *)(inited + 32) = a1.n128_u64[0];
  *(_DWORD *)(inited + 40) = a1.n128_u32[2];
  *(_DWORD *)(inited + 44) = 1065353216;
  specialized SIMD.init<A>(_:)(inited);
  float32x4_t v22 = v9;
  swift_setDeallocating();
  float32x4_t v24 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v23.columns[0], v22.f32[0]), (float32x4_t)v23.columns[1], *(float32x2_t *)v22.f32, 1), (float32x4_t)v23.columns[2], v22, 2), (float32x4_t)v23.columns[3], v22, 3);
  uint64_t v10 = direct field offset for RaycastMeshTrackingEntity.cameraZFilter;
  uint64_t v11 = *(void *)(v6 + direct field offset for RaycastMeshTrackingEntity.cameraZFilter);
  if (v11
    || (type metadata accessor for FloatFilter(),
        uint64_t result = swift_allocObject(),
        uint64_t v11 = result,
        *(void *)(result + 16) = 0x4014000000000000,
        *(_DWORD *)(result + 24) = v24.i32[2],
        *(_DWORD *)(result + 28) = v24.i32[2],
        (*(void *)(v6 + v10) = result) != 0))
  {
    *(_DWORD *)(v11 + 24) = v24.i32[2];
    uint64_t v13 = swift_initStackObject();
    *(_OWORD *)(v13 + 16) = xmmword_2466B5DE0;
    *(void *)(v13 + 32) = v24.i64[0];
    float v14 = *(double *)(v11 + 16) * a6;
    float v15 = 1.0;
    if (v14 <= 1.0) {
      float v15 = *(double *)(v11 + 16) * a6;
    }
    BOOL v16 = v14 > 0.0;
    float v17 = 0.0;
    if (v16) {
      float v17 = v15;
    }
    float v18 = *(float *)(v11 + 28) + (float)((float)(*(float *)(v11 + 24) - *(float *)(v11 + 28)) * v17);
    *(float *)(v11 + 28) = v18;
    *(float *)(v13 + 40) = v18;
    specialized SIMD.init<A>(_:)(v13);
    long long v25 = v19;
    swift_setDeallocating();
    uint64_t v20 = swift_initStackObject();
    *(_OWORD *)(v20 + 16) = xmmword_2466B5DF0;
    *(void *)(v20 + 32) = v25;
    *(_DWORD *)(v20 + 40) = DWORD2(v25);
    *(_DWORD *)(v20 + 44) = 1065353216;
    specialized SIMD.init<A>(_:)(v20);
    swift_setDeallocating();
    type metadata accessor for RaycastMeshTrackingEntity();
    swift_retain();
    HasTransform.setPosition(_:relativeTo:)();
    return swift_release();
  }
  return result;
}

uint64_t RaycastMeshTrackingEntity.__ivar_destroyer()
{
  swift_release();
  swift_unknownObjectWeakDestroy();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t RaycastMeshTrackingEntity.deinit()
{
  uint64_t v1 = direct field offset for RaycastMeshTrackingEntity.loadTask;
  if (*(void *)(v0 + direct field offset for RaycastMeshTrackingEntity.loadTask))
  {
    uint64_t v2 = swift_retain();
    MEMORY[0x24C5336A0](v2, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
    swift_release();
  }
  *(void *)(v0 + v1) = 0;
  swift_release();
  uint64_t v3 = Entity.deinit();
  swift_release();
  swift_unknownObjectWeakDestroy();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t RaycastMeshTrackingEntity.__deallocating_deinit()
{
  RaycastMeshTrackingEntity.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for RaycastMeshTrackingEntity()
{
  return type metadata accessor for RaycastMeshTrackingEntity();
}

uint64_t closure #1 in RaycastMeshTrackingEntity.startLoadingRingEntity()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  uint64_t v5 = type metadata accessor for UnlitMaterial();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[10] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[11] = v7;
  v4[12] = v6;
  return MEMORY[0x270FA2498](closure #1 in RaycastMeshTrackingEntity.startLoadingRingEntity(), v7, v6);
}

uint64_t closure #1 in RaycastMeshTrackingEntity.startLoadingRingEntity()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[13] = __swift_project_value_buffer(v1, (uint64_t)logger);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_2465C2000, v2, v3, "Async loading the reticle model...", v4, 2u);
    MEMORY[0x24C5348D0](v4, -1, -1);
  }

  v0[14] = type metadata accessor for ModelEntity();
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  uint64_t v5 = static BoundingBoxHelpers.bundle;
  id v6 = (id)static BoundingBoxHelpers.bundle;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[15] = v7;
  void *v7 = v0;
  v7[1] = closure #1 in RaycastMeshTrackingEntity.startLoadingRingEntity();
  return MEMORY[0x270EFC5C0](0xD000000000000012, 0x80000002466BFC90, v5);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  swift_release();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl(&dword_2465C2000, v1, v2, "Failed to load the reticle model!", v3, 2u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }

  *(void *)(*(void *)(v0 + 48) + direct field offset for RaycastMeshTrackingEntity.loadTask) = 0;
  swift_release();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  void *v0;
  void (*v1)(void *, void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v22;

  swift_release();
  objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithRed_green_blue_alpha_, 1.0, 1.0, 1.0, 1.0);
  UnlitMaterial.init(color:)();
  uint64_t v1 = (void (*)(void *, void))HasModel.model.modify();
  os_log_type_t v3 = v2;
  uint64_t v4 = type metadata accessor for ModelComponent();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4))
  {
    id v6 = v0[8];
    uint64_t v5 = v0[9];
    uint64_t v7 = v0[7];
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
    float v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_2466B5E00;
    uint64_t v9 = MEMORY[0x263F16178];
    *(void *)(v8 + 56) = v7;
    *(void *)(v8 + 64) = v9;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(boxed_opaque_existential_1, v5, v7);
    ModelComponent.materials.setter();
  }
  v1(v0 + 2, 0);
  uint64_t v11 = v0[16];
  float v12 = v0[6];
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of closure #1 in RaycastMeshTrackingEntity.startLoadingRingEntity());
  HasTransform.scale.setter();
  uint64_t v13 = direct field offset for RaycastMeshTrackingEntity.ringEntity;
  if (*(void *)(v12 + direct field offset for RaycastMeshTrackingEntity.ringEntity))
  {
    swift_retain();
    swift_retain();
    HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
    swift_release();
  }
  else
  {
    swift_retain();
  }
  *(void *)(v12 + v13) = v11;
  swift_retain();
  swift_release();
  if (*(void *)(v12 + v13))
  {
    type metadata accessor for RaycastMeshTrackingEntity();
    swift_retain();
    HasHierarchy.addChild(_:preservingWorldTransform:)();
    swift_release();
  }
  swift_release();
  float v14 = Logger.logObject.getter();
  float v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    BOOL v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v16 = 0;
    _os_log_impl(&dword_2465C2000, v14, v15, "... Done async loading the reticle model.", v16, 2u);
    MEMORY[0x24C5348D0](v16, -1, -1);
  }
  float v18 = v0[8];
  float v17 = v0[9];
  long long v19 = v0[7];

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  *(void *)(v0[6] + direct field offset for RaycastMeshTrackingEntity.loadTask) = 0;
  swift_release();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t closure #1 in RaycastMeshTrackingEntity.startLoadingRingEntity()(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(*v2 + 128) = a1;
  swift_task_dealloc();
  if (v1)
  {

    uint64_t v4 = *(void *)(v3 + 88);
    uint64_t v5 = *(void *)(v3 + 96);
    id v6 = closure #1 in RaycastMeshTrackingEntity.startLoadingRingEntity();
  }
  else
  {
    uint64_t v4 = *(void *)(v3 + 88);
    uint64_t v5 = *(void *)(v3 + 96);
    id v6 = closure #1 in RaycastMeshTrackingEntity.startLoadingRingEntity();
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

float one-time initialization function for minimumReticleSizeMeters()
{
  *(void *)&long long v0 = qword_26FACB280;
  *((void *)&v0 + 1) = unk_26FACB288;
  minimumReticleSizeMeters = v0;
  return *(float *)&v0;
}

uint64_t RaycastMeshTrackingSystem.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RaycastMeshTrackingSystem()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for RangefinderManager.Zone(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246610040);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RangefinderManager.Zone()
{
  return &type metadata for RangefinderManager.Zone;
}

__n128 __swift_memcpy28_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for RaycastMeshTrackingComponent()
{
  return &type metadata for RaycastMeshTrackingComponent;
}

uint64_t getEnumTagSinglePayload for RaycastMeshTrackingComponent.ReticleDescriptor(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RaycastMeshTrackingComponent.ReticleDescriptor(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 28) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RaycastMeshTrackingComponent.ReticleDescriptor()
{
  return &type metadata for RaycastMeshTrackingComponent.ReticleDescriptor;
}

unint64_t lazy protocol witness table accessor for type RaycastMeshTrackingComponent and conformance RaycastMeshTrackingComponent()
{
  unint64_t result = lazy protocol witness table cache variable for type RaycastMeshTrackingComponent and conformance RaycastMeshTrackingComponent;
  if (!lazy protocol witness table cache variable for type RaycastMeshTrackingComponent and conformance RaycastMeshTrackingComponent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RaycastMeshTrackingComponent and conformance RaycastMeshTrackingComponent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RangefinderManager.Zone and conformance RangefinderManager.Zone()
{
  unint64_t result = lazy protocol witness table cache variable for type RangefinderManager.Zone and conformance RangefinderManager.Zone;
  if (!lazy protocol witness table cache variable for type RangefinderManager.Zone and conformance RangefinderManager.Zone)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangefinderManager.Zone and conformance RangefinderManager.Zone);
  }
  return result;
}

uint64_t protocol witness for System.init(scene:) in conformance RaycastMeshTrackingSystem@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for RaycastMeshTrackingSystem();
  uint64_t v2 = swift_allocObject();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  unsigned int v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unsigned int v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned int v6 = 0;
    _os_log_impl(&dword_2465C2000, v4, v5, "Initing RaycastMeshTrackingSystem...", v6, 2u);
    MEMORY[0x24C5348D0](v6, -1, -1);
  }

  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t specialized RangefinderManager.__allocating_init(from:using:)(_OWORD *a1, void *a2)
{
  type metadata accessor for RangefinderManager();
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 44) = 0;
  *(void *)(v4 + 56) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v4 + 64) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v4 + 80) = 0;
  *(_OWORD *)(v4 + 16) = *a1;
  *(_OWORD *)(v4 + 28) = *(_OWORD *)((char *)a1 + 12);
  swift_unknownObjectWeakAssign();
  type metadata accessor for RaycastMeshTrackingEntity();
  swift_allocObject();
  swift_retain();
  *(void *)(v4 + 80) = RaycastMeshTrackingEntity.init(descriptor:using:manager:)((uint64_t)a1, a2, v4);
  swift_release();
  return v4;
}

void specialized RangefinderManager.attach(attacher:)(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 44) == 1)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v2)) {
      goto LABEL_14;
    }
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    uint64_t v4 = "Rangefinder is already attached... not attaching again!";
    goto LABEL_13;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_2465C2000, v7, v8, "Attaching Rangefinder entity...", v9, 2u);
    MEMORY[0x24C5348D0](v9, -1, -1);
  }

  if (!*(void *)(a1 + 80))
  {
    __break(1u);
    return;
  }
  swift_retain();
  DataModel.addToScene(entity:)();
  swift_release();
  *(unsigned char *)(a1 + 44) = 1;
  oslog = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    uint64_t v4 = "... attached Rangefinder entity.";
LABEL_13:
    _os_log_impl(&dword_2465C2000, oslog, v2, v4, v3, 2u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }
LABEL_14:
}

void specialized static RangefinderManager.worldRayThrough(clipSpacePoint:scene:)(float32x4_t *a1@<X8>, double a2@<D0>)
{
  if (dispatch thunk of Scene.internalActiveCamera.getter()
    && (specialized static Ray3D.worldRay(through:using:)(v13, a2),
        float32x4_t v11 = v13[1],
        float32x4_t v12 = v13[0],
        char v4 = v14,
        swift_release(),
        outlined init with take of Ray3D?((uint64_t)v13, (uint64_t)v15),
        v15[32] != 1))
  {
    float32x4_t v10 = v11;
    float32x4_t v9 = v12;
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)logger);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v8 = 0;
      _os_log_impl(&dword_2465C2000, v6, v7, "Can't get a camera to raycast!", v8, 2u);
      MEMORY[0x24C5348D0](v8, -1, -1);
    }

    float32x4_t v9 = 0uLL;
    char v4 = 1;
    float32x4_t v10 = 0uLL;
  }
  *a1 = v9;
  a1[1] = v10;
  a1[2].i8[0] = v4;
}

uint64_t specialized RaycastMeshTrackingComponent.ReticleDescriptor.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  os_log_type_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of RaycastMeshTrackingComponent.ReticleDescriptor.init(from:));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  HIBYTE(v18) = 0;
  lazy protocol witness table accessor for type SIMD2<Float> and conformance SIMD2<A>(&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v19;
  LOBYTE(v19) = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v11 = v10;
  LOBYTE(v19) = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v13 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Float>);
  HIBYTE(v18) = 3;
  lazy protocol witness table accessor for type Range<Float> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Float> and conformance <> Range<A>);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = v19;
  LOBYTE(v19) = 4;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(void *)a2 = v9;
  *(_DWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 12) = v13;
  *(void *)(a2 + 16) = v14;
  *(_DWORD *)(a2 + 24) = v16;
  return result;
}

uint64_t specialized RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000002466BFCB0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x737569646172 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696361704F78616DLL && a2 == 0xEA00000000007974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002466BFCD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x697469736E617274 && a2 == 0xEF68746469576E6FLL)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized RaycastMeshTrackingComponent.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RaycastMeshTrackingComponent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  os_log_type_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  HIBYTE(v18) = 0;
  lazy protocol witness table accessor for type SIMD2<Float> and conformance SIMD2<A>(&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v19;
  LOBYTE(v19) = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v11 = v10;
  LOBYTE(v19) = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v13 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Float>);
  HIBYTE(v18) = 3;
  lazy protocol witness table accessor for type Range<Float> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Float> and conformance <> Range<A>);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = v19;
  LOBYTE(v19) = 4;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(void *)a2 = v9;
  *(_DWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 12) = v13;
  *(void *)(a2 + 16) = v14;
  *(_DWORD *)(a2 + 24) = v16;
  return result;
}

uint64_t specialized RaycastMeshTrackingSystem.updateCollisionHit(raycastEntity:raycastComponent:collisionHit:context:)(uint64_t a1, uint64_t a2)
{
  SceneUpdateContext.scene.getter();
  uint64_t v4 = dispatch thunk of Scene.defaultCamera.getter();
  uint64_t result = swift_release();
  if (!v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  type metadata accessor for Entity();
  HasTransform.transformMatrix(relativeTo:)();
  simd_float4 v29 = v7;
  *(_OWORD *)dt = v6;
  simd_float4 v27 = v9;
  simd_float4 v28 = v8;
  swift_release();
  CollisionCastHit.position.getter();
  __n128 v26 = v10;
  SceneUpdateContext.deltaTime.getter();
  RaycastMeshTrackingEntity.targetPosition(_:viewToWorld:dt:)(v26, *(simd_float4 *)dt, v29, v28, v27, v11);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of RaycastMeshTrackingSystem.updateCollisionHit(raycastEntity:raycastComponent:collisionHit:context:));
  *(_OWORD *)dta = v12;
  CollisionCastHit.normal.getter();
  dta[0] = simd_quaternion(*(float32x4_t *)dta, v13);
  uint64_t updated = (simd_quatf *)SceneUpdateContext.deltaTime.getter();
  RaycastMeshTrackingEntity.targetOrientation(_:dt:)(updated, dta[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
  int v16 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(inited + 32) = v16;
  *(_DWORD *)(inited + 36) = v16;
  *(_DWORD *)(inited + 40) = v16;
  specialized SIMD.init<A>(_:)(inited);
  __n128 dtb = v17;
  swift_setDeallocating();
  CollisionCastHit.distance.getter();
  Swift::Float v19 = (float)(RaycastMeshTrackingComponent.computeAlpha(distance:)(v18) * *(float *)(a2 + 12)) + 0.0;
  SceneUpdateContext.deltaTime.getter();
  RaycastMeshTrackingEntity.targetScale(_:dt:)(dtb, v20);
  SceneUpdateContext.deltaTime.getter();
  RaycastMeshTrackingEntity.targetFade(_:dt:)(v19, v21);
  uint64_t result = CollisionCastHit.distance.getter();
  if (v22 >= *(float *)(a2 + 16))
  {
    if (*(float *)(a2 + 20) >= v22) {
      int v23 = 2;
    }
    else {
      int v23 = 3;
    }
  }
  else
  {
    int v23 = 1;
  }
  uint64_t v24 = *(void *)(a1 + direct field offset for RaycastMeshTrackingEntity.manager);
  if (!v24) {
    goto LABEL_13;
  }
  int v25 = *(unsigned __int8 *)(v24 + 64);
  *(unsigned char *)(v24 + 64) = v23;
  if (v25 != v23)
  {
    uint64_t result = MEMORY[0x24C5349C0](v24 + 48);
    if (result)
    {
      swift_retain();
      specialized RangefinderObserver.zoneDidChange(_:)();
      swift_release();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t specialized RaycastMeshTrackingSystem.update(context:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v55 = (uint64_t)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CollisionCastHit();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v52 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for Entity.ComponentSet();
  long long v56 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v58 - 8);
  MEMORY[0x270FA5388](v58);
  long long v57 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryResult<Entity>.Iterator);
  uint64_t v60 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  __n128 v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for SystemUpdateCondition();
  uint64_t v12 = *(void *)(updated - 8);
  MEMORY[0x270FA5388](updated);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryResult<Entity>);
  uint64_t v59 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  int v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for query != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for EntityQuery();
  __swift_project_value_buffer(v17, (uint64_t)static RaycastMeshTrackingComponent.query);
  static SystemUpdateCondition.rendering.getter();
  SceneUpdateContext.entities(matching:updatingSystemWhen:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, updated);
  SceneUpdateContext.scene.getter();
  uint64_t v18 = dispatch thunk of Scene.defaultCamera.getter();
  uint64_t result = swift_release();
  if (v18)
  {
    uint64_t v20 = a1;
    uint64_t v54 = type metadata accessor for Entity();
    HasTransform.transformMatrix(relativeTo:)();
    simd_float4 v51 = v21;
    simd_float4 v50 = v22;
    simd_float4 v49 = v23;
    simd_float4 v48 = v24;
    swift_release();
    QueryResult.makeIterator()();
    uint64_t result = QueryResult.Iterator.next()();
    if (v62 == 0.0)
    {
LABEL_22:
      (*(void (**)(char *, uint64_t))(v60 + 8))(v10, v8);
      return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v16, v61);
    }
    uint64_t v25 = v4;
    char v26 = 0;
    simd_float4 v27 = (void (**)(char *, uint64_t))(v56 + 1);
    long long v56 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v46 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    simd_float4 v28 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v53 = v20;
    uint64_t v47 = v25;
    while ((v26 & 1) == 0)
    {
      simd_float4 v29 = v57;
      dispatch thunk of Entity.components.getter();
      lazy protocol witness table accessor for type RaycastMeshTrackingComponent and conformance RaycastMeshTrackingComponent();
      Entity.ComponentSet.subscript.getter();
      (*v27)(v29, v58);
      if (v66)
      {
        swift_release();
      }
      else
      {
        *(void *)&long long v45 = v27;
        double v30 = v62;
        *(double *)uint64_t v74 = v62;
        v74[1] = v63;
        v74[2] = v64;
        int v75 = v65;
        type metadata accessor for RaycastMeshTrackingEntity();
        uint64_t result = swift_dynamicCastClass();
        if (!result) {
          goto LABEL_25;
        }
        uint64_t v31 = result;
        specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of RaycastMeshTrackingSystem.update(context:));
        __n128 v44 = v32;
        swift_retain();
        HasTransform.setScale(_:relativeTo:)();
        type metadata accessor for RangefinderManager();
        SceneUpdateContext.scene.getter();
        uint64_t v33 = v55;
        static RangefinderManager.raycastOntoScene(clipSpacePoint:scene:maxDistance:)(v55, v30);
        swift_release();
        if ((*v56)(v33, 1, v25) == 1)
        {
          outlined destroy of CollisionCastHit?(v33);
          SceneUpdateContext.scene.getter();
          uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
          uint64_t result = swift_release();
          if (!active) {
            goto LABEL_26;
          }
          specialized static Ray3D.worldRay(through:using:)(v67, v30);
          swift_release();
          outlined init with take of Ray3D?((uint64_t)v67, (uint64_t)&v71);
          if (v73) {
            specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of RaycastMeshTrackingSystem.update(context:));
          }
          else {
            v35.n128_u64[0] = (unint64_t)Ray3D.point(t:)(0.5, *(float32x2_t *)&v71, *(float32x2_t *)&v72);
          }
          __n128 v44 = v35;
          simd_float4 v27 = (void (**)(char *, uint64_t))v45;
          SceneUpdateContext.deltaTime.getter();
          RaycastMeshTrackingEntity.targetPosition(_:viewToWorld:dt:)(v44, v51, v50, v49, v48, v37);
          outlined init with take of Ray3D?((uint64_t)v67, (uint64_t)v68);
          if ((v70 & 1) == 0)
          {
            long long v45 = (__int128)v69;
            specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of RaycastMeshTrackingSystem.update(context:));
            *(float32x2_t *)v38.f32 = vsub_f32(0, *(float32x2_t *)&v45);
            v38.f32[2] = 0.0 - *((float *)&v45 + 2);
            v38.i32[3] = 0;
            v40.n128_f64[0] = simd_quaternion(v39, v38);
            long long v45 = (__int128)v40;
            long long v41 = (simd_quatf *)SceneUpdateContext.deltaTime.getter();
            RaycastMeshTrackingEntity.targetOrientation(_:dt:)(v41, *(Swift::Double *)&v45);
          }
          if (one-time initialization token for minimumReticleSizeMeters != -1) {
            swift_once();
          }
          long long v45 = minimumReticleSizeMeters;
          SceneUpdateContext.deltaTime.getter();
          RaycastMeshTrackingEntity.targetScale(_:dt:)((__n128)v45, v42);
          SceneUpdateContext.deltaTime.getter();
          RaycastMeshTrackingEntity.targetFade(_:dt:)(0.0, v43);
          swift_release_n();
        }
        else
        {
          uint64_t v36 = v52;
          (*v46)(v52, v33, v25);
          specialized RaycastMeshTrackingSystem.updateCollisionHit(raycastEntity:raycastComponent:collisionHit:context:)(v31, (uint64_t)v74);
          swift_release_n();
          (*v28)(v36, v25);
          simd_float4 v27 = (void (**)(char *, uint64_t))v45;
        }
      }
      uint64_t result = QueryResult.Iterator.next()();
      char v26 = 1;
      if (v62 == 0.0) {
        goto LABEL_22;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t outlined init with take of Ray3D?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ray3D?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.CodingKeys and conformance RaycastMeshTrackingComponent.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SIMD2<Float> and conformance SIMD2<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SIMD2<Float>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Range<Float> and conformance <> Range<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Float>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys and conformance RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys);
  }
  return result;
}

uint64_t sub_246611B80()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in RaycastMeshTrackingEntity.startLoadingRingEntity()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in static ObjectCaptureSession.stopResourceLogging();
  return closure #1 in RaycastMeshTrackingEntity.startLoadingRingEntity()(a1, v4, v5, v6);
}

unint64_t lazy protocol witness table accessor for type RaycastMeshTrackingSystem and conformance RaycastMeshTrackingSystem()
{
  unint64_t result = lazy protocol witness table cache variable for type RaycastMeshTrackingSystem and conformance RaycastMeshTrackingSystem;
  if (!lazy protocol witness table cache variable for type RaycastMeshTrackingSystem and conformance RaycastMeshTrackingSystem)
  {
    type metadata accessor for RaycastMeshTrackingSystem();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RaycastMeshTrackingSystem and conformance RaycastMeshTrackingSystem);
  }
  return result;
}

uint64_t outlined destroy of weak RangefinderDelegate?(uint64_t a1)
{
  return a1;
}

void *type metadata accessor for RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys()
{
  return &unk_26FACE5C8;
}

uint64_t getEnumTagSinglePayload for RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RaycastMeshTrackingComponent.ReticleDescriptor.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246611E64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for RaycastMeshTrackingComponent.CodingKeys()
{
  return &unk_26FACE658;
}

uint64_t static BoundingBoxHelpers.makeBoxMaterial()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for PhysicallyBasedMaterial.EmissiveColor();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameters.Texture?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PhysicallyBasedMaterial.BaseColor();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = type metadata accessor for PhysicallyBasedMaterial();
  uint64_t v8 = MEMORY[0x263F16850];
  a1[3] = v7;
  a1[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(a1);
  PhysicallyBasedMaterial.init()();
  uint64_t v9 = self;
  id v10 = objc_msgSend(v9, sel_whiteColor);
  uint64_t v11 = type metadata accessor for MaterialParameters.Texture();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v5, 1, 1, v11);
  PhysicallyBasedMaterial.BaseColor.init(tint:texture:)();
  PhysicallyBasedMaterial.baseColor.setter();
  id v13 = objc_msgSend(v9, sel_whiteColor);
  v12(v5, 1, 1, v11);
  PhysicallyBasedMaterial.EmissiveColor.init(color:texture:)();
  PhysicallyBasedMaterial.emissiveColor.setter();
  return PhysicallyBasedMaterial.emissiveIntensity.setter();
}

id one-time initialization function for bundle()
{
  type metadata accessor for BoundingBoxHelpers();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  static BoundingBoxHelpers.bundle = (uint64_t)result;
  return result;
}

{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for BaseRenderer();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  static BaseRenderer.bundle = (uint64_t)result;
  return result;
}

{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for FullscreenCoveragePointsRenderer(0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  static FullscreenCoveragePointsRenderer.bundle = (uint64_t)result;
  return result;
}

{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for PostProcessRenderManager();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  static PostProcessRenderManager.bundle = (uint64_t)result;
  return result;
}

{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for SoundManager();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  static SoundManager.bundle = (uint64_t)result;
  return result;
}

{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for VoxelRenderer();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  static VoxelRenderer.bundle = (uint64_t)result;
  return result;
}

{
  void *v0;
  uint64_t vars8;

  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static BaseRenderer.bundle;
  static CaptureCircleRenderer.bundle = static BaseRenderer.bundle;

  return v0;
}

void one-time initialization function for automaticBoundingBoxPaddingFactor()
{
  static BoundingBoxHelpers.automaticBoundingBoxPaddingFactor = closure #1 in variable initialization expression of static BoundingBoxHelpers.automaticBoundingBoxPaddingFactor();
}

float closure #1 in variable initialization expression of static BoundingBoxHelpers.automaticBoundingBoxPaddingFactor()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = specialized static BoundingBoxHelpers.getCoreOCVersion()();
  if (!v4) {
    goto LABEL_4;
  }
  uint64_t v5 = v3;
  unint64_t v6 = v4;
  v21[0] = 0x312E362E38;
  v21[1] = 0xE500000000000000;
  v20[0] = v3;
  v20[1] = v4;
  uint64_t v7 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v8 = StringProtocol.compare<A>(_:options:range:locale:)();
  outlined destroy of URL?((uint64_t)v2, &demangling cache variable for type metadata for Locale?);
  swift_bridgeObjectRelease();
  if (v8 != -1)
  {
    swift_bridgeObjectRelease();
LABEL_4:
    float v9 = specialized static ExperimentSettings.loadAutomaticBoundingBoxPadding(default:)(1.25);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)logger);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v13 = 134349056;
      *(double *)simd_float4 v21 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2465C2000, v11, v12, "Assuming box padding is: %{public}f", v13, 0xCu);
      MEMORY[0x24C5348D0](v13, -1, -1);
    }

    return v9;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)logger);
  swift_bridgeObjectRetain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    v21[0] = v18;
    *(_DWORD *)uint64_t v17 = 136446210;
    swift_bridgeObjectRetain();
    v20[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2465C2000, v15, v16, "Got internal OCS version \"%{public}s\" so assuming box padding is 1.1", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v18, -1, -1);
    MEMORY[0x24C5348D0](v17, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 1.1;
}

uint64_t type metadata accessor for BoundingBoxHelpers()
{
  return self;
}

float32x4_t specialized static BoundingBoxHelpers.ensuringPositiveDeterminant(matrix:)(float32x4_t result, int8x16_t a2, int8x16_t a3, int8x16_t a4)
{
  float32x4_t v4 = (float32x4_t)vextq_s8(a3, a3, 8uLL);
  float32x4_t v5 = (float32x4_t)vextq_s8(a4, a4, 0xCuLL);
  float32x4_t v6 = (float32x4_t)vextq_s8(a3, a3, 0xCuLL);
  float32x4_t v7 = (float32x4_t)vextq_s8(a4, a4, 8uLL);
  float32x4_t v8 = (float32x4_t)vextq_s8(a4, a4, 4uLL);
  float32x4_t v9 = (float32x4_t)vextq_s8(a3, a3, 4uLL);
  int8x16_t v10 = (int8x16_t)vmulq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(a2, a2, 8uLL), vmlaq_f32(vmulq_f32(v5, vnegq_f32(v9)), v8, v6)), vmlaq_f32(vmulq_f32(v7, vnegq_f32(v6)), v5, v4), (float32x4_t)vextq_s8(a2, a2, 4uLL)), vmlaq_f32(vmulq_f32(v8, vnegq_f32(v4)), v7, v9), (float32x4_t)vextq_s8(a2, a2, 0xCuLL)), result);
  int32x2_t v11 = (int32x2_t)vextq_s8(v10, v10, 8uLL).u64[0];
  if (vaddv_f32(vsub_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v10.i8, v11), (float32x2_t)vzip2_s32(*(int32x2_t *)v10.i8, v11))) <= 0.0)
  {
    float32x4_t v19 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2466B5DF0;
    *(float32x4_t *)(inited + 32) = v19;
    specialized SIMD.init<A>(_:)(inited);
    long long v20 = v13;
    swift_setDeallocating();
    uint64_t v14 = swift_initStackObject();
    *(_OWORD *)(v14 + 16) = xmmword_2466B5DF0;
    *(int8x16_t *)(v14 + 32) = a2;
    specialized SIMD.init<A>(_:)(v14);
    swift_setDeallocating();
    uint64_t v15 = swift_initStackObject();
    *(_OWORD *)(v15 + 16) = xmmword_2466B5DF0;
    *(float32x2_t *)(v15 + 32) = vneg_f32(*(float32x2_t *)a3.i8);
    *(float *)(v15 + 40) = -*(float *)&a3.i32[2];
    *(_DWORD *)(v15 + 44) = a3.i32[3];
    specialized SIMD.init<A>(_:)(v15);
    swift_setDeallocating();
    uint64_t v16 = swift_initStackObject();
    *(_OWORD *)(v16 + 16) = xmmword_2466B5DF0;
    *(int8x16_t *)(v16 + 32) = a4;
    specialized SIMD.init<A>(_:)(v16);
    swift_setDeallocating();
    return (float32x4_t)v20;
  }
  return result;
}

__n128 specialized static BoundingBoxHelpers.getBoundingSphere(boxWorld:)(uint64_t a1)
{
  outlined init with take of simd_float4x4?(a1, (uint64_t)v9);
  if (v10)
  {
    result.n128_u64[0] = 0;
    result.n128_u32[2] = 0;
  }
  else
  {
    float32x4_t v4 = (float32x4_t)v9[0];
    float32x4_t v5 = (float32x4_t)v9[1];
    float32x4_t v6 = (float32x4_t)v9[2];
    float32x4_t v7 = (float32x4_t)v9[3];
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static BoundingBoxHelpers.getBoundingSphere(boxWorld:));
    float32x4_t v3 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, v2.f32[0]), v5, *(float32x2_t *)v2.f32, 1), v6, v2, 2), v7, v2, 3);
    v3.i32[3] = 0;
    float32x4_t v8 = v3;
    Transform.init(matrix:)();
    return (__n128)v8;
  }
  return result;
}

uint64_t specialized static BoundingBoxHelpers.getCoreOCVersion()()
{
  type metadata accessor for PhotogrammetrySession();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  id v2 = objc_msgSend(v1, sel_infoDictionary);

  if (!v2)
  {
    long long v8 = 0u;
    long long v9 = 0u;
    goto LABEL_9;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v3 + 16)
    || (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x80000002466BFD20), (v5 & 1) == 0))
  {
    long long v8 = 0u;
    long long v9 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v4, (uint64_t)&v8);
  swift_bridgeObjectRelease();
  if (!*((void *)&v9 + 1))
  {
LABEL_9:
    outlined destroy of URL?((uint64_t)&v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v7;
  }
  return 0;
}

__n64 specialized static BoundingBoxHelpers.getSquishedBoxBottomTransform(boxWorld:)()
{
  Transform.init(matrix:)();
  double v3 = v1;
  float32x4_t v4 = v0;
  if (one-time initialization token for automaticBoundingBoxPaddingFactor != -1) {
    swift_once();
  }
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static BoundingBoxHelpers.getSquishedBoxBottomTransform(boxWorld:));
  specialized simd_float4x4.init(translation:rotation:scale:)(v3, v4);
  Transform.init(matrix:)();
  result.n64_u32[1] = 1.0;
  return result;
}

double specialized static BoundingBoxHelpers.asSRTMatrix(box:)(float32x2_t a1, float32x2_t a2)
{
  Transform.init()();
  double v3 = COERCE_DOUBLE(vmul_f32(vadd_f32(a1, a2), (float32x2_t)0x3F0000003F000000));

  return specialized simd_float4x4.init(translation:rotation:scale:)(v3, v2);
}

uint64_t specialized static BoundingBoxHelpers.getFadingClipEllipsoid(boxWorld:startFadeRadius:endFadeRadius:shouldClipBottom:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  uint64_t result = outlined init with take of simd_float4x4?(a1, (uint64_t)v34);
  if (v35)
  {
    char v10 = 0;
    a4 = 0.0;
    simd_float4 v11 = 0uLL;
    simd_float4 v12 = 0uLL;
    simd_float4 v13 = 0uLL;
    simd_float4 v14 = 0uLL;
    float32x4_t v15 = 0uLL;
    a5 = 0.0;
    __int32 v16 = 0;
  }
  else
  {
    float32x4_t v30 = (float32x4_t)v34[0];
    float32x4_t v31 = (float32x4_t)v34[1];
    float32x4_t v32 = (float32x4_t)v34[2];
    float32x4_t v33 = (float32x4_t)v34[3];
    Transform.init(matrix:)();
    double v25 = v18;
    float32x4_t v27 = v17;
    *(float32x2_t *)v17.f32 = vmul_f32(*(float32x2_t *)v19.f32, (float32x2_t)0x3F0000003F000000);
    v17.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(0.5, v19, 2));
    float32x4_t v20 = vrecpeq_f32(v17);
    float32x4_t v21 = vmulq_f32(v20, vrecpsq_f32(v17, v20));
    float32x4_t v29 = vmulq_f32(v21, vrecpsq_f32(v17, v21));
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static BoundingBoxHelpers.getFadingClipEllipsoid(boxWorld:startFadeRadius:endFadeRadius:shouldClipBottom:));
    *(double *)v36.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(v25, v27);
    simd_float4x4 v37 = __invert_f4(v36);
    simd_float4 v26 = v37.columns[1];
    simd_float4 v28 = v37.columns[0];
    simd_float4 v23 = v37.columns[3];
    simd_float4 v24 = v37.columns[2];
    uint64_t result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of static BoundingBoxHelpers.getFadingClipEllipsoid(boxWorld:startFadeRadius:endFadeRadius:shouldClipBottom:));
    simd_float4 v14 = v23;
    simd_float4 v13 = v24;
    simd_float4 v12 = v26;
    simd_float4 v11 = v28;
    __int32 v16 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30, *(float *)&v22), v31, *(float32x2_t *)&v22, 1), v32, v22, 2), v33, v22, 3).i32[1];
    float32x4_t v15 = v29;
    char v10 = a2 & 1;
  }
  *(simd_float4 *)a3 = v11;
  *(simd_float4 *)(a3 + 16) = v12;
  *(simd_float4 *)(a3 + 32) = v13;
  *(simd_float4 *)(a3 + 48) = v14;
  *(float32x4_t *)(a3 + 64) = v15;
  *(float *)(a3 + 80) = a4;
  *(float *)(a3 + 84) = a5;
  *(unsigned char *)(a3 + 88) = v10;
  *(_DWORD *)(a3 + 92) = v16;
  return result;
}

uint64_t outlined init with take of simd_float4x4?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for simd_float4x4?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

float specialized static BoundingBoxHelpers.computeScaleFromScreenSize(sphereWorld:pixels:arView:lastGoodScale:)(void *a1, float *a2, float32x4_t a3, double a4)
{
  if (!a1) {
    return 1.0;
  }
  float32x4_t v6 = a1;
  dispatch thunk of ARView.cameraTransform.getter();
  specialized simd_float4x4.init(translation:rotation:scale:)(v8, v7);
  double v9 = COERCE_DOUBLE(ARView.project(_:)());
  if (v11)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)logger);
    float32x4_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      float32x4_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float32x4_t v33 = 0;
      _os_log_impl(&dword_2465C2000, v31, v32, "Can't project the bounding sphere center to the screen coordinates, not resizing.", v33, 2u);
      MEMORY[0x24C5348D0](v33, -1, -1);
      uint64_t v34 = v6;
    }
    else
    {
      uint64_t v34 = v31;
      float32x4_t v31 = v6;
    }

    return *a2;
  }
  double v12 = v9;
  double v13 = v10;
  double v14 = a4 * 0.5 + v9;
  Transform.init()();
  specialized SIMD.subscript.getter((__n128)xmmword_2466B9060, COERCE_DOUBLE(2));
  float32x4_t v16 = vsubq_f32(v15, a3);
  v16.i32[3] = 0;
  float32x4_t v46 = v16;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static BoundingBoxHelpers.computeScaleFromScreenSize(sphereWorld:pixels:arView:lastGoodScale:));
  *(double *)v18.i64 = simd_quaternion(v17, v46);
  specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)a3.i64, v18);
  uint64_t v19 = ARView.unproject(_:ontoPlane:relativeToCamera:)();
  if (v21)
  {

    return *a2;
  }
  v22.i64[0] = v19;
  v22.i64[1] = v20;
  float32x4_t v23 = vsubq_f32(v22, a3);
  float32x4_t v24 = vmulq_f32(v23, v23);
  float v25 = sqrtf(v24.f32[2]+ (float)((float)((float)(*(float *)&v19 - a3.f32[0]) * (float)(*(float *)&v19 - a3.f32[0])) + v24.f32[1]));
  simd_float4 v26 = v6;
  [v26 bounds];
  v48.x = v14;
  v48.y = v13;
  BOOL v27 = CGRectContainsPoint(v50, v48);

  if (v27
    && (simd_float4 v28 = v26,
        [v28 bounds],
        v49.x = v12,
        v49.y = v13,
        BOOL v29 = CGRectContainsPoint(v51, v49),
        v28,
        v29))
  {

    *a2 = v25;
  }
  else
  {
    char v35 = v26;
    [v35 bounds];
    CGFloat v36 = CGRectGetWidth(v52) * 0.5;
    [v35 bounds];
    CGFloat v37 = CGRectGetHeight(v53) * 0.5;
    [v35 center];
    *(float *)&CGFloat v36 = (v12 - v38) / v36;
    [v35 center];
    double v40 = v39;

    float v41 = (v13 - v40) / v37;
    float v42 = sqrtf((float)(*(float *)&v36 * *(float *)&v36) + (float)(v41 * v41)) + -1.0;
    float v43 = 0.0;
    if (v42 > 0.0)
    {
      float v44 = v42 / 0.2;
      if (v44 > 0.0)
      {
        float v43 = 1.0;
        if (v44 <= 1.0) {
          float v43 = v44;
        }
      }
    }
    return (float)(v43 * *a2) + (float)(v25 * (float)(1.0 - v43));
  }
  return v25;
}

double specialized static BoundingBoxHelpers.stretchedBoundingBox(box:axis:delta:)(double a1, double a2, double a3, double a4, float32x4_t a5, float a6)
{
  Transform.init(matrix:)();
  *(float32x2_t *)v8.f32 = vadd_f32(vmul_n_f32((float32x2_t)(a5.i64[0] & 0x7FFFFFFF7FFFFFFFLL), a6), *(float32x2_t *)v7.f32);
  v8.f32[2] = vmuls_lane_f32(a6, vabsq_f32(a5), 2) + v7.f32[2];
  v8.i32[3] = 0;
  float32x4_t v9 = vmaxnmq_f32(v8, (float32x4_t)xmmword_2466B9080);
  v9.i32[3] = 0;
  float32x4_t v10 = vsubq_f32(vminnmq_f32(v9, (float32x4_t)xmmword_2466B9090), v7);
  float32x4_t v11 = vmulq_f32(v6, (float32x4_t)xmmword_2466B7770);
  int32x4_t v12 = (int32x4_t)vnegq_f32(v11);
  int8x16_t v13 = (int8x16_t)vtrn2q_s32((int32x4_t)v11, vtrn1q_s32((int32x4_t)v11, v12));
  float32x4_t v14 = (float32x4_t)vrev64q_s32((int32x4_t)v11);
  v14.i32[0] = v12.i32[1];
  v14.i32[3] = v12.i32[2];
  float32x4_t v15 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v12, 8uLL), vmuls_lane_f32(vmuls_lane_f32(0.5, *(float32x2_t *)v10.f32, 1), *(float32x2_t *)a5.f32, 1)), (float32x4_t)vextq_s8(v13, v13, 8uLL), (float)(0.5 * v10.f32[0]) * a5.f32[0]), v14, vmuls_lane_f32(vmuls_lane_f32(0.5, v10, 2), a5, 2));
  int32x4_t v16 = (int32x4_t)vnegq_f32(v15);
  int8x16_t v17 = (int8x16_t)vtrn2q_s32((int32x4_t)v15, vtrn1q_s32((int32x4_t)v15, v16));
  float32x4_t v18 = (float32x4_t)vrev64q_s32((int32x4_t)v15);
  v18.i32[0] = v16.i32[1];
  v18.i32[3] = v16.i32[2];
  *(void *)&double v20 = vaddq_f32(v19, vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v15, v6, 3), v18, v6, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 8uLL), *(float32x2_t *)v6.f32, 1), (float32x4_t)vextq_s8(v17, v17, 8uLL), v6.f32[0]))).u64[0];

  return specialized simd_float4x4.init(translation:rotation:scale:)(v20, v6);
}

double specialized static BoundingBoxHelpers.unpaddedBoundingBox(boxWorld:)()
{
  Transform.init(matrix:)();
  double v2 = v1;
  if (one-time initialization token for automaticBoundingBoxPaddingFactor != -1)
  {
    float32x4_t v5 = v0;
    double v4 = v1;
    swift_once();
    double v2 = v4;
    float32x4_t v0 = v5;
  }

  return specialized simd_float4x4.init(translation:rotation:scale:)(v2, v0);
}

__n128 specialized static BoundingBoxHelpers.paddedBoundingBox(box:scale:padBottomFace:)(char a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float a6)
{
  Transform.init(matrix:)();
  float32x4_t v18 = v7;
  double v19 = v8;
  float32x4_t v21 = v9;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static BoundingBoxHelpers.paddedBoundingBox(box:scale:padBottomFace:));
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of static BoundingBoxHelpers.paddedBoundingBox(box:scale:padBottomFace:));
  float32x4_t v27 = v10;
  if ((a1 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
    *(float32x2_t *)(inited + 32) = vmul_f32((float32x2_t)__PAIR64__((float)((float)(a6 + -1.0) * 0.5) + 1.0, LODWORD(a6)), *(float32x2_t *)v18.f32);
    *(float *)(inited + 40) = vmuls_lane_f32(a6, v18, 2);
    specialized SIMD.init<A>(_:)(inited);
    swift_setDeallocating();
  }
  *(double *)v12.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(v19, v21);
  float32x4_t v26 = v12;
  float32x4_t v28 = vsubq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, v27.f32[0]), v13, *(float32x2_t *)v27.f32, 1), v14, v27, 2), v15, v27, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, v27.f32[0]), a3, *(float32x2_t *)v27.f32, 1), a4, v27, 2), a5, v27, 3));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_2466B5DE0;
  *(_DWORD *)(v16 + 32) = 0;
  *(_DWORD *)(v16 + 36) = v28.i32[1];
  *(_DWORD *)(v16 + 40) = 0;
  specialized SIMD.init<A>(_:)(v16);
  swift_setDeallocating();
  return (__n128)v26;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance BoundingBoxScaleManipulator.Face.Which@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized BoundingBoxScaleManipulator.Face.Which.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance BoundingBoxScaleManipulator.Face.Which(void *a1@<X8>)
{
  *a1 = *v1;
}

void protocol witness for static CaseIterable.allCases.getter in conformance BoundingBoxScaleManipulator.Face.Which(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static BoundingBoxScaleManipulator.Face.Which.allCases.getter;
}

uint64_t one-time initialization function for normals()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2466B6940;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for normals);
  *(_OWORD *)(v0 + 32) = v1;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for normals);
  *(_OWORD *)(v0 + 48) = v2;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of one-time initialization function for normals);
  *(_OWORD *)(v0 + 64) = v3;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #3 of one-time initialization function for normals);
  *(_OWORD *)(v0 + 80) = v4;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #4 of one-time initialization function for normals);
  *(_OWORD *)(v0 + 96) = v5;
  uint64_t result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #5 of one-time initialization function for normals);
  *(_OWORD *)(v0 + 112) = v7;
  static BoundingBoxScaleManipulator.Face.normals = (_UNKNOWN *)v0;
  return result;
}

void BoundingBoxScaleManipulator.FaceHandle.enabled.willset(char a1)
{
  if (*(unsigned char *)(v1 + 32) != (a1 & 1))
  {
    if (*(unsigned char *)(v1 + 32))
    {
      if ((a1 & 1) == 0)
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v2 = type metadata accessor for Logger();
        __swift_project_value_buffer(v2, (uint64_t)logger);
        swift_retain_n();
        long long v3 = Logger.logObject.getter();
        os_log_type_t v4 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v3, v4))
        {
          long long v5 = (uint8_t *)swift_slowAlloc();
          uint64_t v6 = swift_slowAlloc();
          uint64_t v16 = v6;
          *(_DWORD *)long long v5 = 136446210;
          uint64_t v7 = String.init<A>(describing:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v16);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_2465C2000, v3, v4, "Disabling handle: %{public}s", v5, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24C5348D0](v6, -1, -1);
          MEMORY[0x24C5348D0](v5, -1, -1);
        }
        else
        {

          swift_release_n();
        }
        type metadata accessor for Entity();
        HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
      }
    }
    else if (a1)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)logger);
      swift_retain_n();
      float32x4_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        float32x4_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        uint64_t v16 = v13;
        *(_DWORD *)float32x4_t v12 = 136446210;
        uint64_t v14 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v10, v11, "Enabling handle: %{public}s", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v13, -1, -1);
        MEMORY[0x24C5348D0](v12, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      if (swift_weakLoadStrong())
      {
        swift_retain();
        swift_release();
        type metadata accessor for Entity();
        HasHierarchy.addChild(_:preservingWorldTransform:)();
        swift_release();
      }
    }
  }
}

void BoundingBoxScaleManipulator.FaceHandle.modelEntity.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CollisionComponent?);
  MEMORY[0x270FA5388](v2 - 8);
  os_log_type_t v4 = ((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for CollisionFilter();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CollisionComponent.Mode();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  os_log_type_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CollisionComponent();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + 64))
  {
    os_log_t v29 = v4;
    type metadata accessor for Entity();
    float32x4_t v28 = v7;
    swift_retain();
    HasHierarchy.addChild(_:preservingWorldTransform:)();
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BoundingBoxScaleManipulator.FaceHandle.modelEntity.didset);
    long long v26 = v16;
    type metadata accessor for ModelEntity();
    uint64_t v27 = v8;
    HasTransform.setScale(_:relativeTo:)();
    BoundingBoxScaleManipulator.FaceHandle.rotationFromNormal()();
    HasTransform.setOrientation(_:relativeTo:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_2466B5E10;
    unsigned int v18 = *(unsigned __int8 *)(v1 + 16);
    type metadata accessor for ShapeResource();
    v19.n128_u32[0] = 1.0;
    if (v18 < 2) {
      v19.n128_f32[0] = 0.5;
    }
    *(void *)(v17 + 32) = MEMORY[0x24C530F80](v19);
    v30[0] = v17;
    specialized Array._endMutation()();
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F16200], v27);
    static CollisionFilter.default.getter();
    CollisionComponent.init(shapes:mode:filter:)();
    os_log_t v20 = v29;
    (*(void (**)(os_log_t, char *, uint64_t))(v13 + 16))(v29, v15, v12);
    (*(void (**)(os_log_t, void, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
    swift_retain();
    float32x4_t v21 = (void (*)(uint64_t *, void))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v21(v30, 0);
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)logger);
    os_log_t v29 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v23))
    {
      float32x4_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float32x4_t v24 = 0;
      _os_log_impl(&dword_2465C2000, v29, v23, "Failed to load modelEntity for the FaceHandle!", v24, 2u);
      MEMORY[0x24C5348D0](v24, -1, -1);
    }
    os_log_t v25 = v29;
  }
}

void BoundingBoxScaleManipulator.FaceHandle.rotationFromNormal()()
{
  unint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 > 1)
  {
    if (one-time initialization token for normals == -1) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BoundingBoxScaleManipulator.FaceHandle.rotationFromNormal());
  if (one-time initialization token for normals != -1)
  {
    float32x4_t v8 = v2;
    swift_once();
    float32x4_t v2 = v8;
  }
  if (*((void *)static BoundingBoxScaleManipulator.Face.normals + 2) <= v1)
  {
    __break(1u);
LABEL_12:
    swift_once();
LABEL_9:
    if (*((void *)static BoundingBoxScaleManipulator.Face.normals + 2) <= v1)
    {
      __break(1u);
    }
    else
    {
      float32x4_t v7 = *((float32x4_t *)static BoundingBoxScaleManipulator.Face.normals + v1 + 2);
      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of BoundingBoxScaleManipulator.FaceHandle.rotationFromNormal());
      float32x4_t v5 = vmulq_f32(v7, v4);
      float v6 = acosf(v5.f32[2] + vaddv_f32(*(float32x2_t *)v5.f32));
      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of BoundingBoxScaleManipulator.FaceHandle.rotationFromNormal());
      __sincosf_stret(v6 * 0.5);
    }
    return;
  }
  float32x4_t v3 = *((float32x4_t *)static BoundingBoxScaleManipulator.Face.normals + v1 + 2);

  simd_quaternion(v2, v3);
}

uint64_t BoundingBoxScaleManipulator.FaceHandle.loadModel()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  swift_retain_n();
  float32x4_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v18 = v6;
    *(_DWORD *)uint64_t v5 = 136446466;
    unsigned int v7 = *(unsigned __int8 *)(v1 + 16);
    if (v7 >= 2) {
      uint64_t v8 = 0x48656C7573706143;
    }
    else {
      uint64_t v8 = 0x646E614865636146;
    }
    if (v7 >= 2) {
      unint64_t v9 = 0xED0000656C646E61;
    }
    else {
      unint64_t v9 = 0xEA0000000000656CLL;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    uint64_t v10 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v3, v4, "Loading model: %{public}s for face: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v6, -1, -1);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  unsigned int v12 = *(unsigned __int8 *)(v1 + 16);
  if (v12 >= 2) {
    uint64_t v13 = 0x48656C7573706143;
  }
  else {
    uint64_t v13 = 0x646E614865636146;
  }
  if (v12 >= 2) {
    unint64_t v14 = 0xED0000656C646E61;
  }
  else {
    unint64_t v14 = 0xEA0000000000656CLL;
  }
  type metadata accessor for Entity();
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  uint64_t v15 = MEMORY[0x24C5318C0](v13, v14, static BoundingBoxHelpers.bundle);
  swift_bridgeObjectRelease();
  *(void *)(v1 + 80) = v15;
  uint64_t result = swift_release();
  if (*(void *)(v1 + 80))
  {
    uint64_t v18 = *(void *)(v1 + 80);
    swift_retain_n();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type LoadRequest<ModelEntity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ModelEntity>);
    uint64_t v17 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release_n();
    swift_release();
    *(void *)(v1 + 88) = v17;
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in BoundingBoxScaleManipulator.FaceHandle.loadModel()(void **a1, uint64_t a2)
{
  float32x4_t v3 = *a1;
  if (*a1)
  {
    id v4 = v3;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)logger);
    id v6 = v3;
    id v7 = v3;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v16 = v11;
      *(_DWORD *)uint64_t v10 = 136446210;
      id v12 = v3;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v13 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_2465C2000, v8, v9, "Can't load the FaceHandle model!  error = %{public}s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v11, -1, -1);
      MEMORY[0x24C5348D0](v10, -1, -1);
    }
    else
    {
    }
  }
  *(void *)(a2 + 88) = 0;
  swift_release();
  *(void *)(a2 + 80) = 0;
  return swift_release();
}

uint64_t closure #2 in BoundingBoxScaleManipulator.FaceHandle.loadModel()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v7 = 134349056;
    v19[0] = *(unsigned __int8 *)(a2 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_2465C2000, v5, v6, "Face handle id=%{public}ld loaded!", v7, 0xCu);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }
  else
  {

    swift_release();
  }
  *(void *)(a2 + 64) = v3;
  swift_retain_n();
  swift_release();
  BoundingBoxScaleManipulator.FaceHandle.modelEntity.didset();
  uint64_t result = swift_release();
  if (*(void *)(a2 + 64))
  {
    swift_retain();
    type metadata accessor for ModelEntity();
    os_log_type_t v9 = (void (*)(void *, void))HasModel.model.modify();
    uint64_t v11 = v10;
    uint64_t v12 = type metadata accessor for ModelComponent();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_2466B5E00;
      int v14 = *(unsigned __int8 *)(a2 + 16);
      id v15 = objc_allocWithZone(MEMORY[0x263F825C8]);
      if (v14 == 1) {
        double v16 = 0.5;
      }
      else {
        double v16 = 1.0;
      }
      objc_msgSend(v15, sel_initWithRed_green_blue_alpha_, 1.0, 0.0, 0.0, v16, v19[0]);
      uint64_t v17 = type metadata accessor for UnlitMaterial();
      uint64_t v18 = MEMORY[0x263F16178];
      *(void *)(v13 + 56) = v17;
      *(void *)(v13 + 64) = v18;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 32));
      UnlitMaterial.init(color:)();
      ModelComponent.materials.setter();
    }
    v9(v19, 0);
    return swift_release();
  }
  return result;
}

uint64_t BoundingBoxScaleManipulator.FaceHandle.faceCenterPosLocal(extents:)()
{
  unint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  if (one-time initialization token for normals != -1) {
    uint64_t result = swift_once();
  }
  if (*((void *)static BoundingBoxScaleManipulator.Face.normals + 2) <= v1) {
    __break(1u);
  }
  return result;
}

uint64_t BoundingBoxScaleManipulator.FaceHandle.computeTopFaceCenterPosLocal()()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    uint64_t result = swift_beginAccess();
    uint64_t v3 = *(void *)(v1 + 40);
    if ((v3 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      MEMORY[0x24C533AF0](0, v3);
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      swift_retain();
LABEL_5:
      type metadata accessor for Entity();
      swift_retain();
      HasTransform.position.getter();
      swift_release();
      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  else
  {
    return specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BoundingBoxScaleManipulator.FaceHandle.computeTopFaceCenterPosLocal());
  }
  return result;
}

uint64_t BoundingBoxScaleManipulator.FaceHandle.setPositionLocal(extents:minDistance:)()
{
  uint64_t result = BoundingBoxScaleManipulator.FaceHandle.faceCenterPosLocal(extents:)();
  unint64_t v2 = *(unsigned __int8 *)(v0 + 16);
  if (v2 < 2)
  {
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BoundingBoxScaleManipulator.FaceHandle.setPositionLocal(extents:minDistance:));
    goto LABEL_7;
  }
  if (one-time initialization token for normals != -1) {
    uint64_t result = swift_once();
  }
  if (*((void *)static BoundingBoxScaleManipulator.Face.normals + 2) > v2)
  {
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BoundingBoxScaleManipulator.FaceHandle.setPositionLocal(extents:minDistance:));
    BoundingBoxScaleManipulator.FaceHandle.computeTopFaceCenterPosLocal()();
    int v5 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
    *(_DWORD *)(inited + 32) = 0;
    *(_DWORD *)(inited + 36) = v5;
    *(_DWORD *)(inited + 40) = 0;
    specialized SIMD.init<A>(_:)(inited);
    swift_setDeallocating();
LABEL_7:
    type metadata accessor for Entity();
    HasHierarchy.parent.getter();
    HasTransform.setPosition(_:relativeTo:)();
    return swift_release();
  }
  __break(1u);
  return result;
}

float BoundingBoxScaleManipulator.FaceHandle.computeScaleFromScreenSize(pixels:arView:)(void *a1, double a2)
{
  swift_beginAccess();
  type metadata accessor for Entity();
  HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)();
  BoundingBox.center.getter();
  float32x4_t v7 = v5;
  BoundingBox.extents.getter();
  LODWORD(a2) = specialized static BoundingBoxHelpers.computeScaleFromScreenSize(sphereWorld:pixels:arView:lastGoodScale:)(a1, (float *)(v2 + 72), v7, a2);
  swift_endAccess();
  return *(float *)&a2;
}

uint64_t BoundingBoxScaleManipulator.FaceHandle.__deallocating_deinit()
{
  swift_weakDestroy();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t BoundingBoxScaleManipulator.FaceHandleContainer.update(time:in:)(void *a1, double a2)
{
  unint64_t v3 = v2;
  os_log_type_t v6 = (uint64_t *)(v2 + 48);
  swift_beginAccess();
  uint64_t v7 = *(void *)(*(void *)(v2 + 48) + 16);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(v3 + 40);
    swift_beginAccess();
    uint64_t v9 = -v7;
    uint64_t v10 = 4;
    while (1)
    {
      unint64_t v11 = v10 - 4;
      if ((unint64_t)(v10 - 4) >= *(void *)(*v6 + 16)) {
        break;
      }
      uint64_t v12 = *(void *)(*v6 + 8 * v10);
      if (v12)
      {
        double v13 = *(double *)(v12 + 48);
        if (v13 <= *(double *)(v12 + 64))
        {
          double v14 = *(double *)(v12 + 56);
        }
        else
        {
          double v14 = *(double *)(v12 + 16) + a2;
          *(double *)(v12 + 48) = a2;
          *(double *)(v12 + 56) = v14;
          double v13 = a2;
        }
        *(double *)(v12 + 64) = a2;
        double v15 = 0.0;
        if (v13 <= a2)
        {
          double v15 = 1.0;
          if (v14 >= a2) {
            double v15 = (a2 - v13) / (v14 - v13);
          }
        }
        float v16 = v15;
        float v17 = *(float *)(v12 + 72);
        float v18 = (float)(1.0 - v16) * v17;
        float v19 = v17 + (float)((float)(1.0 - v17) * v16);
        if (*(unsigned char *)(v12 + 24)) {
          float v19 = v18;
        }
        if (v19 <= 0.0) {
          float v19 = 0.0;
        }
        if (v19 <= 1.0) {
          float v20 = v19;
        }
        else {
          float v20 = 1.0;
        }
        float32x4_t v21 = *(void (**)(uint64_t, float))(v12 + 32);
        if (v21)
        {
          uint64_t v22 = swift_retain();
          v21(v22, v20);
        }
        else
        {
          swift_retain();
        }
        if (v20 > 0.0) {
          float v23 = v20;
        }
        else {
          float v23 = 0.0;
        }
        uint64_t v24 = *v8;
        if ((*v8 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v25 = MEMORY[0x24C533AF0](v10 - 4, v24);
          swift_bridgeObjectRelease();
        }
        else
        {
          if (v11 >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_57;
          }
          uint64_t v25 = *(void *)(v24 + 8 * v10);
          swift_retain();
        }
        *(float *)(v25 + 52) = (float)((float)(v23 * v23)
                                     / (float)((float)((float)((float)(v23 * v23) - v20)
                                                     + (float)((float)(v23 * v23) - v20))
                                             + 1.0))
                             + 1.0;
        swift_release();
        if (*(double *)(v12 + 56) < *(double *)(v12 + 64))
        {
          swift_beginAccess();
          uint64_t v26 = *v6;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *os_log_type_t v6 = v26;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _ArrayBuffer._consumeAndCreateNew()();
          }
          if (v11 >= *(void *)(v26 + 16)) {
            goto LABEL_58;
          }
          *(void *)(v26 + 8 * v10) = 0;
          swift_release();
          specialized Array._endMutation()();
          swift_endAccess();
        }
        swift_release();
      }
      ++v10;
      if (v9 + v10 == 4) {
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
LABEL_35:
  if (a1)
  {
    dispatch thunk of ARView.cameraTransform.getter();
    if ((*(unsigned char *)(v3 + 112) & 1) == 0)
    {
      double v31 = *(double *)(v3 + 64);
      float32x4_t v32 = *(float32x4_t *)(v3 + 80);
      double v33 = *(double *)(v3 + 96);
      uint64_t v34 = *(void *)(v3 + 32);
      if (!v34) {
        goto LABEL_42;
      }
      double v44 = *(double *)(v3 + 96);
      float32x4_t v45 = *(float32x4_t *)(v3 + 80);
      double v46 = *(double *)(v3 + 64);
      double v47 = v30;
      double v48 = v29;
      double v49 = v28;
      int v35 = *(unsigned __int8 *)(v34 + 16);
      uint64_t result = swift_beginAccess();
      uint64_t v37 = *(void *)(v3 + 40);
      if ((v37 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v42 = MEMORY[0x24C533AF0](1, v37);
        swift_bridgeObjectRelease();
        int v43 = *(unsigned __int8 *)(v42 + 16);
        swift_unknownObjectRelease();
        BOOL v38 = v35 == v43;
      }
      else
      {
        if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
        {
          __break(1u);
          goto LABEL_64;
        }
        BOOL v38 = v35 == *(unsigned __int8 *)(*(void *)(v37 + 40) + 16);
      }
      double v29 = v48;
      double v28 = v49;
      double v31 = v46;
      double v30 = v47;
      double v33 = v44;
      float32x4_t v32 = v45;
      if (!v38) {
LABEL_42:
      }
        specialized BoundingBoxScaleManipulator.FaceHandleContainer.updateBottomHandleState(time:cameraWorld:boxWorld:)(v28, v29, v30, v31, v32, v33);
    }
  }
  if (*(unsigned char *)(v3 + 112)) {
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BoundingBoxScaleManipulator.FaceHandleContainer.update(time:in:));
  }
  else {
    float32x4_t v39 = *(float32x4_t *)(v3 + 64);
  }
  uint64_t result = BoundingBoxScaleManipulator.FaceHandleContainer.setScaleFromScreenConstraints(arView:extents:)(a1, v39);
  if ((*(unsigned char *)(v3 + 112) & 1) == 0 && (*(unsigned char *)(v3 + 120) & 1) == 0)
  {
    swift_beginAccess();
    unint64_t v3 = *(void *)(v3 + 40);
    if (!(v3 >> 62))
    {
      uint64_t v40 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain_n();
      if (!v40) {
        return swift_bridgeObjectRelease_n();
      }
      goto LABEL_50;
    }
LABEL_59:
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v40 = result;
    if (!result) {
      return swift_bridgeObjectRelease_n();
    }
LABEL_50:
    if (v40 >= 1)
    {
      for (uint64_t i = 0; i != v40; ++i)
      {
        if ((v3 & 0xC000000000000001) != 0) {
          MEMORY[0x24C533AF0](i, v3);
        }
        else {
          swift_retain();
        }
        BoundingBoxScaleManipulator.FaceHandle.setPositionLocal(extents:minDistance:)();
        swift_release();
      }
      return swift_bridgeObjectRelease_n();
    }
LABEL_64:
    __break(1u);
  }
  return result;
}

uint64_t BoundingBoxScaleManipulator.FaceHandleContainer.load()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    float32x4_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)float32x4_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Loading face handles...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  uint64_t result = swift_beginAccess();
  unint64_t v7 = *(void *)(v1 + 40);
  if (!(v7 >> 62))
  {
    if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_7;
    }
LABEL_13:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v17) {
    goto LABEL_13;
  }
LABEL_7:
  type metadata accessor for BoundingBoxScaleManipulator.FaceHandle();
  uint64_t v8 = 0;
  __asm { FMOV            V8.2S, #1.0 }
  do
  {
    char v14 = outlined read-only object #0 of BoundingBoxScaleManipulator.FaceHandleContainer.load()[v8 + 32];
    uint64_t v15 = swift_allocObject();
    swift_weakInit();
    *(unsigned char *)(v15 + 32) = 0;
    type metadata accessor for Entity();
    swift_allocObject();
    swift_retain();
    *(void *)(v15 + 40) = Entity.init()();
    *(unsigned char *)(v15 + 48) = 0;
    *(void *)(v15 + 52) = _D8;
    *(_DWORD *)(v15 + 60) = 1065353216;
    *(void *)(v15 + 64) = 0;
    *(_DWORD *)(v15 + 72) = 1065353216;
    *(void *)(v15 + 80) = 0;
    *(void *)(v15 + 88) = 0;
    *(unsigned char *)(v15 + 16) = v14;
    swift_weakAssign();
    BoundingBoxScaleManipulator.FaceHandle.loadModel()();
    swift_release();
    swift_beginAccess();
    uint64_t v16 = swift_retain();
    MEMORY[0x24C533580](v16);
    if (*(void *)((*(void *)(v1 + 40) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 40) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    ++v8;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    BoundingBoxScaleManipulator.FaceHandle.enabled.willset(1);
    *(unsigned char *)(v15 + 32) = 1;
    uint64_t result = swift_release();
  }
  while (v8 != 6);
  return result;
}

uint64_t BoundingBoxScaleManipulator.FaceHandleContainer.updateGrabbedHandleState(_:)(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(v1 + 32);
  unint64_t v5 = 0x268F90000uLL;
  if (v4)
  {
    uint64_t v6 = one-time initialization token for logger;
    swift_retain();
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      v29[0] = v11;
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v12 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v29);
      unint64_t v5 = 0x268F90000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v8, v9, "Ramping out current grabbedHandle=%{public}s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v11, -1, -1);
      MEMORY[0x24C5348D0](v10, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    *(unsigned char *)(v4 + 48) = 0;
    unint64_t v14 = *(unsigned __int8 *)(v4 + 16);
    type metadata accessor for RampAnimation();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 48) = 0;
    *(void *)(v15 + 56) = 0;
    *(void *)(v15 + 64) = 0xFFF0000000000000;
    *(unsigned char *)(v15 + 24) = 1;
    *(void *)(v15 + 16) = 0x3FA999999999999ALL;
    *(void *)(v15 + 32) = 0;
    *(void *)(v15 + 40) = 0;
    *(_DWORD *)(v15 + 72) = 1065353216;
    swift_beginAccess();
    uint64_t v16 = *(void *)(v2 + 48);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 48) = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _ArrayBuffer._consumeAndCreateNew()();
    }
    if (*(void *)(v16 + 16) <= v14)
    {
      __break(1u);
LABEL_21:
      swift_once();
      goto LABEL_12;
    }
    *(void *)(v16 + 8 * v14 + 32) = v15;
    swift_release();
    specialized Array._endMutation()();
    swift_endAccess();
    uint64_t result = swift_release();
  }
  if (!v3) {
    return result;
  }
  uint64_t v18 = *(void *)(v5 + 888);
  swift_retain();
  if (v18 != -1) {
    goto LABEL_21;
  }
LABEL_12:
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)logger);
  swift_retain_n();
  float v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    v29[0] = v23;
    *(_DWORD *)uint64_t v22 = 136446210;
    uint64_t v24 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v20, v21, "Ramping in a new grabbedHandle=%{public}s", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v23, -1, -1);
    MEMORY[0x24C5348D0](v22, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  *(unsigned char *)(v3 + 48) = 1;
  unint64_t v26 = *(unsigned __int8 *)(v3 + 16);
  type metadata accessor for RampAnimation();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 48) = 0;
  *(void *)(v27 + 56) = 0;
  *(void *)(v27 + 64) = 0xFFF0000000000000;
  *(unsigned char *)(v27 + 24) = 0;
  *(void *)(v27 + 16) = 0x3FA999999999999ALL;
  *(_DWORD *)(v27 + 72) = 0;
  *(void *)(v27 + 32) = 0;
  *(void *)(v27 + 40) = 0;
  swift_beginAccess();
  uint64_t v28 = *(void *)(v2 + 48);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 48) = v28;
  if ((result & 1) == 0) {
    specialized _ArrayBuffer._consumeAndCreateNew()();
  }
  if (*(void *)(v28 + 16) <= v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v28 + 8 * v26 + 32) = v27;
    swift_release();
    specialized Array._endMutation()();
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t BoundingBoxScaleManipulator.FaceHandleContainer.setScaleFromScreenConstraints(arView:extents:)(void *a1, float32x4_t a2)
{
  uint64_t v4 = v2;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v4 + 40);
  if ((v6 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    MEMORY[0x24C533AF0](0, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_16;
    }
    swift_retain();
  }
  specialized static BoundingBoxScaleManipulator.getHandleScreenSizeConstraint(arView:)(a1);
  float v8 = BoundingBoxScaleManipulator.FaceHandle.computeScaleFromScreenSize(pixels:arView:)(a1, v7);
  swift_release();
  float32x4_t v9 = vabsq_f32(a2);
  *(float *)(v4 + 24) = v8;
  *(float *)(v4 + 28) = fmaxf(fmaxf(v9.f32[0], v9.f32[2]), v9.f32[1]) * 0.1;
  unint64_t v3 = *(void *)(v4 + 40);
  if (!(v3 >> 62))
  {
    uint64_t v10 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (v10) {
      goto LABEL_6;
    }
LABEL_17:
    uint64_t result = swift_bridgeObjectRelease_n();
    *(_DWORD *)(v4 + 116) = *(_DWORD *)(v4 + 24);
    *(unsigned char *)(v4 + 120) = 0;
    return result;
  }
LABEL_16:
  swift_bridgeObjectRetain_n();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v10 = result;
  if (!result) {
    goto LABEL_17;
  }
LABEL_6:
  if (v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        uint64_t v13 = MEMORY[0x24C533AF0](i, v3);
      }
      else
      {
        uint64_t v13 = *(void *)(v3 + 8 * i + 32);
        swift_retain();
      }
      int v14 = *(_DWORD *)(v4 + 28);
      *(_DWORD *)(v13 + 60) = v14;
      if (*(void *)(v13 + 64))
      {
        type metadata accessor for ModelEntity();
        swift_retain();
        HasHierarchy.parent.getter();
        HasTransform.setScale(_:relativeTo:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t BoundingBoxScaleManipulator.FaceHandleContainer.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t BoundingBoxScaleManipulator.init()()
{
  uint64_t v1 = v0;
  swift_weakInit();
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0x3FC999999999999ALL;
  type metadata accessor for Entity();
  swift_allocObject();
  *(void *)(v0 + 40) = Entity.init()();
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 81) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(unsigned char *)(v0 + 208) = 1;
  *(void *)(v0 + 216) = 0;
  type metadata accessor for BoundingBoxScaleManipulator.FaceHandleContainer();
  swift_allocObject();
  uint64_t v2 = swift_retain();
  uint64_t v3 = specialized BoundingBoxScaleManipulator.FaceHandleContainer.init(entity:)(v2);
  swift_release();
  *(void *)(v1 + 48) = v3;
  return v1;
}

void BoundingBoxScaleManipulator.attach(model:target:enabled:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)logger);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_2465C2000, v13, v14, "Attaching bounding box scale manipulator...", v15, 2u);
    MEMORY[0x24C5348D0](v15, -1, -1);
  }

  swift_weakAssign();
  *(void *)(v4 + 24) = a2;
  swift_retain();
  swift_release();
  uint64_t v16 = *(void **)(a1 + 16);
  if (v16)
  {
    id v17 = v16;
    BoundingBoxScaleManipulator.cancelFadeInAnimation(opacity:)(0.0);
    dispatch thunk of ARView.scene.getter();
    dispatch thunk of Scene.anchors.getter();
    swift_release();
    uint64_t v18 = specialized Collection.first.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (v18)
    {
      HasHierarchy.addChild(_:preservingWorldTransform:)();
      swift_release();
    }
    BoundingBoxScaleManipulator.attachGestures()();
    BoundingBoxScaleManipulator.subscribeToUpdateEvents()();
    int v19 = *(unsigned __int8 *)(v4 + 96);
    *(unsigned char *)(v4 + 96) = a3 & 1;
    if (v19 != (a3 & 1))
    {
      if (a3) {
        BoundingBoxScaleManipulator.attachGestures()();
      }
      else {
        BoundingBoxScaleManipulator.detachGestures()();
      }
    }
    BoundingBoxScaleManipulator.startFadeInAnimation()();
  }
}

uint64_t BoundingBoxScaleManipulator.update(deltaTime:)(double a1)
{
  double v2 = *(double *)(v1 + 104) + a1;
  *(double *)(v1 + 104) = v2;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = *(void **)(result + 16);
    id v5 = v4;
    BoundingBoxScaleManipulator.FaceHandleContainer.update(time:in:)(v4, v2);

    swift_beginAccess();
    outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v1 + 112, (uint64_t)&v11, &demangling cache variable for type metadata for Animation?);
    if (v12)
    {
      outlined init with take of Animation(&v11, (uint64_t)v13);
      __swift_project_boxed_opaque_existential_1(v13, v14);
      RampAnimation.update(time:)(*(Swift::Double *)(v1 + 104));
      uint64_t v6 = __swift_project_boxed_opaque_existential_1(v13, v14);
      if (*(double *)(*v6 + 56) < *(double *)(*v6 + 64))
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v7 = type metadata accessor for Logger();
        __swift_project_value_buffer(v7, (uint64_t)logger);
        uint64_t v8 = Logger.logObject.getter();
        os_log_type_t v9 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v8, v9))
        {
          uint64_t v10 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v10 = 0;
          _os_log_impl(&dword_2465C2000, v8, v9, "Fade in complete!  Culling animation.", v10, 2u);
          MEMORY[0x24C5348D0](v10, -1, -1);
        }

        BoundingBoxScaleManipulator.cancelFadeInAnimation(opacity:)(1.0);
      }
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    }
    else
    {
      swift_release();
      return outlined destroy of URL?((uint64_t)&v11, &demangling cache variable for type metadata for Animation?);
    }
  }
  return result;
}

uint64_t BoundingBoxScaleManipulator.startFadeInAnimation()()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_beginAccess();
  unint64_t v2 = *(void *)(v1 + 40);
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    uint64_t v7 = swift_allocObject();
    swift_weakInit();
    uint64_t v8 = type metadata accessor for RampAnimation();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 64) = 0xFFF0000000000000;
    *(unsigned char *)(v9 + 24) = 0;
    *(void *)(v9 + 16) = 0x3FC999999999999ALL;
    *(void *)(v9 + 32) = partial apply for closure #1 in BoundingBoxScaleManipulator.startFadeInAnimation();
    *(void *)(v9 + 40) = v7;
    *(_DWORD *)(v9 + 72) = 0;
    double v10 = *(double *)(v0 + 104);
    *(double *)(v9 + 48) = v10;
    *(double *)(v9 + 56) = v10 + 0.2;
    uint64_t v12[3] = v8;
    v12[4] = &protocol witness table for RampAnimation;
    v12[0] = v9;
    outlined init with take of Animation?((uint64_t)v12, (uint64_t)v11, &demangling cache variable for type metadata for Animation?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)v11, v0 + 112, &demangling cache variable for type metadata for Animation?);
    return swift_endAccess();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    goto LABEL_10;
  }
LABEL_3:
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        uint64_t v6 = MEMORY[0x24C533AF0](i, v2);
      }
      else {
        uint64_t v6 = swift_retain();
      }
      *(_DWORD *)(v6 + 56) = 0;
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in BoundingBoxScaleManipulator.startFadeInAnimation()(float a1)
{
  float v1 = a1;
  if (a1 > 1.0) {
    a1 = 1.0;
  }
  if (v1 > 0.0) {
    float v2 = a1;
  }
  else {
    float v2 = 0.0;
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = *(void *)(result + 48);
    swift_beginAccess();
    unint64_t v5 = *(void *)(v4 + 40);
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v6 = result;
      if (result) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v6)
      {
LABEL_9:
        if (v6 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v7 = 0;
        float v8 = (float)(v2 * v2) / (float)((float)((float)((float)(v2 * v2) - v1) + (float)((float)(v2 * v2) - v1)) + 1.0);
        do
        {
          if ((v5 & 0xC000000000000001) != 0) {
            uint64_t v9 = MEMORY[0x24C533AF0](v7, v5);
          }
          else {
            uint64_t v9 = swift_retain();
          }
          ++v7;
          *(float *)(v9 + 56) = v8;
          swift_release();
        }
        while (v6 != v7);
      }
    }
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t BoundingBoxScaleManipulator.cancelFadeInAnimation(opacity:)(float a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_2465C2000, v5, v6, "Cancelling box handle fade in...", v7, 2u);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)v14, v2 + 112, &demangling cache variable for type metadata for Animation?);
  swift_endAccess();
  uint64_t v8 = *(void *)(v2 + 48);
  swift_beginAccess();
  unint64_t v9 = *(void *)(v8 + 40);
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_7;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v10 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_7:
  if (v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0) {
        uint64_t v13 = MEMORY[0x24C533AF0](i, v9);
      }
      else {
        uint64_t v13 = swift_retain();
      }
      *(float *)(v13 + 56) = a1;
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t BoundingBoxScaleManipulator.beginDragGesture(handle:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void *)(v1 + 48);
  if (*(void *)(v8 + 32))
  {
    __break(1u);
    goto LABEL_17;
  }
  if (*(unsigned char *)(v2 + 208) != 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v9 = swift_retain();
  BoundingBoxScaleManipulator.FaceHandleContainer.updateGrabbedHandleState(_:)(v9);
  *(void *)(v8 + 32) = a1;
  uint64_t result = swift_release();
  if (!*(void *)(v2 + 24)) {
    goto LABEL_20;
  }
  type metadata accessor for Entity();
  swift_retain();
  HasTransform.transform.getter();
  long long v21 = v12;
  long long v22 = v11;
  long long v20 = v13;
  swift_release();
  long long v14 = v21;
  *(_OWORD *)(v2 + 160) = v22;
  *(_OWORD *)(v2 + 176) = v14;
  *(_OWORD *)(v2 + 192) = v20;
  *(unsigned char *)(v2 + 208) = 0;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(result + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel);
    swift_retain();
    uint64_t result = swift_release();
    if (v2)
    {
      if (*(unsigned char *)(v2 + 24) == 2)
      {
        if (one-time initialization token for logger == -1)
        {
LABEL_8:
          uint64_t v15 = type metadata accessor for Logger();
          __swift_project_value_buffer(v15, (uint64_t)logger);
          uint64_t v16 = Logger.logObject.getter();
          os_log_type_t v17 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v16, v17))
          {
            uint64_t v18 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v18 = 0;
            _os_log_impl(&dword_2465C2000, v16, v17, "Scale widget: Box handle grabbed... switching to manual update mode.", v18, 2u);
            MEMORY[0x24C5348D0](v18, -1, -1);
          }

          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
          uint64_t *v7 = static OS_dispatch_queue.main.getter();
          (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F8F0E0], v4);
          char v19 = _dispatchPreconditionTest(_:)();
          uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
          if (v19)
          {
            DetectModeBoxModel.performSwitchStateTransitions(from:to:)(*(unsigned __int8 *)(v2 + 24), 3u);
            *(unsigned char *)(v2 + 24) = 3;
            return swift_release();
          }
          __break(1u);
LABEL_20:
          __break(1u);
          return result;
        }
LABEL_18:
        swift_once();
        goto LABEL_8;
      }
      return swift_release();
    }
  }
  return result;
}

void BoundingBoxScaleManipulator.duringDragGesture(startPoint:currentPoint:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v1 + 32);
  if (v2)
  {
    unint64_t v3 = v0;
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v5 = Strong;
      type metadata accessor for Entity();
      swift_retain();
      swift_retain();
      HasTransform.position(relativeTo:)();
      float32x4_t v43 = v6;
      swift_release();
      unint64_t v7 = *(unsigned __int8 *)(v2 + 16);
      uint64_t v8 = one-time initialization token for normals;
      swift_retain();
      if (v8 != -1) {
        swift_once();
      }
      if (*((void *)static BoundingBoxScaleManipulator.Face.normals + 2) <= v7)
      {
        __break(1u);
LABEL_37:
        __break(1u);
        swift_once();
        uint64_t v14 = type metadata accessor for Logger();
        __swift_project_value_buffer(v14, (uint64_t)logger);
        uint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v17 = 0;
          uint64_t v18 = "Scale widget: Constrained drag had no solution!   Ignoring this point.";
LABEL_12:
          _os_log_impl(&dword_2465C2000, v15, v16, v18, v17, 2u);
          MEMORY[0x24C5348D0](v17, -1, -1);
          swift_release();
          swift_release();

          return;
        }
        goto LABEL_18;
      }
      HasTransform.convert(direction:to:)();
      float32x4_t v42 = v9;
      swift_release();
      uint64_t v10 = *(void **)(v5 + 16);
      if (v10)
      {
        id v11 = v10;
        ARView.ray(through:)();
        outlined init with take of Animation?((uint64_t)v44, (uint64_t)v48, (uint64_t *)&demangling cache variable for type metadata for (origin: SIMD3<Float>, direction: SIMD3<Float>)?);
        if ((v49 & 1) == 0)
        {
          float32x4_t v40 = (float32x4_t)v48[1];
          long long v41 = v48[0];
          ARView.ray(through:)();
          outlined init with take of Animation?((uint64_t)v45, (uint64_t)v46, (uint64_t *)&demangling cache variable for type metadata for (origin: SIMD3<Float>, direction: SIMD3<Float>)?);
          if ((v47 & 1) == 0)
          {
            float32x4_t v38 = (float32x4_t)v46[1];
            id v39 = *(id *)&v46[0];
            specialized static Ray3D.closestPointParameter(to:along:)(*(double *)&v41, v40, *(double *)v43.i64, v42);
            float v13 = v12;
            specialized static Ray3D.closestPointParameter(to:along:)(*(double *)&v39, v38, *(double *)v43.i64, v42);
            float v20 = v19;

            if (*(unsigned char *)(v3 + 208))
            {
              if (one-time initialization token for logger != -1) {
                swift_once();
              }
              uint64_t v21 = type metadata accessor for Logger();
              __swift_project_value_buffer(v21, (uint64_t)logger);
              uint64_t v15 = Logger.logObject.getter();
              os_log_type_t v16 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v15, v16))
              {
                os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)os_log_type_t v17 = 0;
                uint64_t v18 = "Can't get the starting xform for the box manipulator!  Ignoring...";
                goto LABEL_12;
              }
LABEL_18:

LABEL_19:
              swift_release();
              swift_release();
              return;
            }
            double v22 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)(v3 + 192), *(float32x4_t *)(v3 + 176));
            unint64_t v26 = *(unsigned __int8 *)(v2 + 16);
            if (*((void *)static BoundingBoxScaleManipulator.Face.normals + 2) <= v26)
            {
              __break(1u);
            }
            else
            {
              specialized static BoundingBoxHelpers.stretchedBoundingBox(box:axis:delta:)(v22, v23, v24, v25, *((float32x4_t *)static BoundingBoxScaleManipulator.Face.normals + v26 + 2), v20 - v13);
              if (*(void *)(v3 + 24))
              {
                swift_retain();
                HasTransform.setTransformMatrix(_:relativeTo:)();
                swift_release();
              }
              uint64_t v27 = swift_weakLoadStrong();
              if (!v27) {
                goto LABEL_19;
              }
              uint64_t v28 = v27;
              HasTransform.setTransformMatrix(_:relativeTo:)();
              HasTransform.scale(relativeTo:)();
              specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BoundingBoxScaleManipulator.duringDragGesture(startPoint:currentPoint:));
              HasTransform.setScale(_:relativeTo:)();
              double v29 = *(void **)(v28 + 16);
              id v39 = v29;
              Transform.init(matrix:)();
              long long v41 = v31;
              float32x4_t v42 = v30;
              float32x4_t v43 = v32;
              BoundingBoxScaleManipulator.FaceHandleContainer.setScaleFromScreenConstraints(arView:extents:)(v29, v32);
              swift_beginAccess();
              unint64_t v3 = *(void *)(v1 + 40);
              if (!(v3 >> 62))
              {
                uint64_t v33 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain_n();
                if (v33) {
                  goto LABEL_27;
                }
                goto LABEL_35;
              }
            }
            swift_bridgeObjectRetain_n();
            uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
            if (v33)
            {
LABEL_27:
              uint64_t v34 = 4;
              do
              {
                uint64_t v35 = v34 - 4;
                if ((v3 & 0xC000000000000001) != 0)
                {
                  MEMORY[0x24C533AF0](v34 - 4, v3);
                  BOOL v36 = __OFADD__(v35, 1);
                  uint64_t v37 = v34 - 3;
                  if (v36) {
                    goto LABEL_37;
                  }
                }
                else
                {
                  swift_retain();
                  BOOL v36 = __OFADD__(v35, 1);
                  uint64_t v37 = v34 - 3;
                  if (v36) {
                    goto LABEL_37;
                  }
                }
                if (*(unsigned char *)(v1 + 120)) {
                  goto LABEL_44;
                }
                BoundingBoxScaleManipulator.FaceHandle.setPositionLocal(extents:minDistance:)();
                swift_release();
                ++v34;
              }
              while (v37 != v33);
            }
LABEL_35:
            swift_bridgeObjectRelease_n();
            *(float32x4_t *)(v1 + 64) = v43;
            *(float32x4_t *)(v1 + 80) = v42;
            *(_OWORD *)(v1 + 96) = v41;
            *(unsigned char *)(v1 + 112) = 0;
            swift_release();
            swift_release();
            swift_release();

            return;
          }
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_43;
    }
  }
}

id BoundingBoxScaleManipulator.panGesture.getter()
{
  uint64_t v1 = *(void **)(v0 + 216);
  if (v1)
  {
    id v2 = *(id *)(v0 + 216);
  }
  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = swift_allocObject();
    swift_weakInit();
    objc_allocWithZone((Class)type metadata accessor for DragFromPointGestureRecognizer());
    uint64_t v5 = swift_retain();
    id v6 = DragFromPointGestureRecognizer.init(manipulator:onPan:)(v5, (uint64_t)partial apply for closure #1 in BoundingBoxScaleManipulator.panGesture.getter, v4);
    unint64_t v7 = *(void **)(v3 + 216);
    *(void *)(v3 + 216) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

uint64_t closure #1 in BoundingBoxScaleManipulator.panGesture.getter()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    BoundingBoxScaleManipulator.duringDragGesture(startPoint:currentPoint:)();
    return swift_release();
  }
  return result;
}

void BoundingBoxScaleManipulator.attachGestures()()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)logger);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_2465C2000, v3, v4, "Adding pan gesture...", v5, 2u);
      MEMORY[0x24C5348D0](v5, -1, -1);
    }

    id v6 = *(void **)(v1 + 16);
    if (v6)
    {
      id v7 = v6;
      id v8 = BoundingBoxScaleManipulator.panGesture.getter();
      objc_msgSend(v7, sel_addGestureRecognizer_, v8);
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

void BoundingBoxScaleManipulator.detachGestures()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_2465C2000, v1, v2, "Removing pan gesture...", v3, 2u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }

  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = *(void **)(Strong + 16);
    id v6 = v5;
    swift_release();
    if (v5)
    {
      id v7 = BoundingBoxScaleManipulator.panGesture.getter();
      objc_msgSend(v6, sel_removeGestureRecognizer_, v7);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t BoundingBoxScaleManipulator.subscribeToUpdateEvents()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Subscribing to update events...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    uint64_t v13 = 0;
    memset(v12, 0, sizeof(v12));
    goto LABEL_9;
  }
  id v7 = *(void **)(Strong + 16);
  id v8 = v7;
  uint64_t result = swift_release();
  if (v7)
  {
    dispatch thunk of ARView.scene.getter();

    type metadata accessor for SceneEvents.Update();
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    swift_allocObject();
    swift_weakInit();
    Scene.subscribe<A>(to:on:_:)();
    swift_release();
    swift_release();
    outlined destroy of URL?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for EventSource?);
LABEL_9:
    outlined init with take of Animation?((uint64_t)v12, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)v10, v1 + 56, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in BoundingBoxScaleManipulator.subscribeToUpdateEvents()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    SceneEvents.Update.deltaTime.getter();
    BoundingBoxScaleManipulator.update(deltaTime:)(v1);
    return swift_release();
  }
  return result;
}

uint64_t BoundingBoxScaleManipulator.unsubscribeFromUpdateEvents()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Unsubscribing from update events...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v1 + 56, (uint64_t)&v8, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  if (*((void *)&v9 + 1))
  {
    outlined init with copy of Cancellable((uint64_t)&v8, (uint64_t)v7);
    outlined destroy of URL?((uint64_t)&v8, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v8, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  }
  uint64_t v10 = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v8, v1 + 56, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  uint64_t result = swift_endAccess();
  *(void *)(v1 + 104) = 0;
  return result;
}

uint64_t BoundingBoxScaleManipulator.__deallocating_deinit()
{
  swift_weakDestroy();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of URL?(v0 + 56, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  outlined destroy of URL?(v0 + 112, &demangling cache variable for type metadata for Animation?);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BoundingBoxScaleManipulator()
{
  return self;
}

uint64_t type metadata accessor for BoundingBoxScaleManipulator.FaceHandle()
{
  return self;
}

uint64_t type metadata accessor for BoundingBoxScaleManipulator.FaceHandleContainer()
{
  return self;
}

uint64_t DragFromPointGestureRecognizer.touchesMoved(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v12.receiver = v3;
  v12.super_class = (Class)type metadata accessor for DragFromPointGestureRecognizer();
  objc_msgSendSuper2(&v12, sel_touchesMoved_withEvent_, isa, a2);

  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.count.getter();
    if (result < 2) {
      return result;
    }
  }
  else
  {
    uint64_t result = *(void *)(a1 + 16);
    if (result < 2) {
      return result;
    }
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  long long v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_2465C2000, v9, v10, "Drag got an extra touch!  failing!", v11, 2u);
    MEMORY[0x24C5348D0](v11, -1, -1);
  }

  return (uint64_t)objc_msgSend(v3, sel_setState_, 5);
}

void DragFromPointGestureRecognizer.touchesEnded(_:with:)(uint64_t a1, uint64_t a2, SEL *a3, uint64_t (*a4)(void), const char *a5)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v22.receiver = v5;
  v22.super_class = (Class)type metadata accessor for DragFromPointGestureRecognizer();
  objc_msgSendSuper2(&v22, *a3, isa, a2);

  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v12 = Strong;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)logger);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = a4();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v16 = 0;
      _os_log_impl(&dword_2465C2000, v14, v15, a5, v16, 2u);
      MEMORY[0x24C5348D0](v16, -1, -1);
    }

    uint64_t v17 = *(void *)(v12 + 48);
    BoundingBoxScaleManipulator.FaceHandleContainer.updateGrabbedHandleState(_:)(0);
    *(void *)(v17 + 32) = 0;
    swift_release();
    *(_OWORD *)(v12 + 176) = 0u;
    *(_OWORD *)(v12 + 192) = 0u;
    *(_OWORD *)(v12 + 160) = 0u;
    *(unsigned char *)(v12 + 208) = 1;
    swift_release();
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)logger);
    float v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_2465C2000, v19, v20, "Manipulator has been destroyed, exiting gesture callbacks...", v21, 2u);
      MEMORY[0x24C5348D0](v21, -1, -1);
    }
  }
}

uint64_t @objc DragFromPointGestureRecognizer.touchesEnded(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5, uint64_t (*a6)(void), const char *a7)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  uint64_t v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v13 = a4;
  id v14 = a1;
  DragFromPointGestureRecognizer.touchesEnded(_:with:)(v12, (uint64_t)v13, a5, a6, a7);

  return swift_bridgeObjectRelease();
}

void DragFromPointGestureRecognizer.gestureRecognizerShouldBegin(_:)(void *a1)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if ((static NSObject.== infix(_:_:)() & 1) == 0)
  {
    if (one-time initialization token for logger != -1) {
      goto LABEL_40;
    }
    goto LABEL_9;
  }
  id v2 = objc_msgSend(a1, sel_view);
  objc_msgSend(a1, sel_locationInView_, v2);

  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)logger);
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_2465C2000, v26, v27, "Manipulator has been destroyed, exiting gesture callbacks...", v28, 2u);
      MEMORY[0x24C5348D0](v28, -1, -1);
    }

    goto LABEL_45;
  }
  uint64_t v4 = Strong;
  uint64_t v5 = swift_weakLoadStrong();
  if (!v5)
  {
LABEL_44:
    swift_release();
LABEL_45:
    uint64_t v22 = 0;
LABEL_46:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)logger);
    swift_retain_n();
    float32x4_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      float32x4_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v42 = v33;
      *(_DWORD *)float32x4_t v32 = 136446210;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BoundingBoxScaleManipulator.FaceHandle?);
      uint64_t v34 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v30, v31, "Found FaceHandle=%{public}s at hit point.", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v33, -1, -1);
      MEMORY[0x24C5348D0](v32, -1, -1);

      if (!v22) {
        return;
      }
    }
    else
    {

      swift_release_n();
      if (!v22) {
        return;
      }
    }
    swift_release();
    return;
  }
  id v6 = *(void **)(v5 + 16);
  if (!v6)
  {
LABEL_54:
    __break(1u);
    return;
  }
  id v7 = v6;
  unint64_t v8 = ARView.entities(at:)();

  if (v8 >> 62) {
    goto LABEL_42;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
  {
LABEL_43:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
LABEL_7:
  unint64_t v10 = 0;
  uint64_t v39 = v4;
  unint64_t v40 = v8 & 0xC000000000000001;
  uint64_t v36 = v8 & 0xFFFFFFFFFFFFFF8;
  uint64_t v37 = v9;
  unint64_t v38 = v8;
  while (1)
  {
    if (!v40)
    {
      if (v10 >= *(void *)(v36 + 16))
      {
        __break(1u);
        goto LABEL_54;
      }
      swift_retain();
      BOOL v15 = __OFADD__(v10, 1);
      unint64_t v16 = v10 + 1;
      if (!v15) {
        goto LABEL_20;
      }
LABEL_41:
      __break(1u);
LABEL_42:
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v9) {
        goto LABEL_43;
      }
      goto LABEL_7;
    }
    MEMORY[0x24C533AF0](v10, v8);
    BOOL v15 = __OFADD__(v10, 1);
    unint64_t v16 = v10 + 1;
    if (v15) {
      goto LABEL_41;
    }
LABEL_20:
    uint64_t v17 = *(void *)(v4 + 48);
    swift_beginAccess();
    unint64_t v18 = *(void *)(v17 + 40);
    unint64_t v41 = v16;
    if (v18 >> 62) {
      break;
    }
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v19) {
      goto LABEL_22;
    }
LABEL_13:
    swift_bridgeObjectRelease_n();
    swift_release();
    unint64_t v8 = v38;
    unint64_t v10 = v41;
    uint64_t v4 = v39;
    if (v41 == v37) {
      goto LABEL_43;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v19) {
    goto LABEL_13;
  }
LABEL_22:
  uint64_t v20 = 4;
  while (2)
  {
    uint64_t v21 = v20 - 4;
    if ((v18 & 0xC000000000000001) != 0)
    {
      uint64_t v22 = MEMORY[0x24C533AF0](v20 - 4, v18);
      uint64_t v23 = v20 - 3;
      if (__OFADD__(v21, 1)) {
        break;
      }
      goto LABEL_29;
    }
    uint64_t v22 = *(void *)(v18 + 8 * v20);
    swift_retain();
    uint64_t v23 = v20 - 3;
    if (!__OFADD__(v21, 1))
    {
LABEL_29:
      if (*(void *)(v22 + 64))
      {
        uint64_t v42 = *(void *)(v22 + 64);
        type metadata accessor for Entity();
        lazy protocol witness table accessor for type Entity and conformance Entity();
        swift_retain_n();
        char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        swift_release();
        if (v24)
        {
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease_n();
          goto LABEL_46;
        }
      }
      swift_release();
      ++v20;
      if (v23 == v19) {
        goto LABEL_13;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_40:
  swift_once();
LABEL_9:
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)logger);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v14 = 0;
    _os_log_impl(&dword_2465C2000, v12, v13, "delegate got a gestureRecognizer that wasn't self!", v14, 2u);
    MEMORY[0x24C5348D0](v14, -1, -1);
  }
}

ValueMetadata *type metadata accessor for BoundingBoxScaleManipulator.Face()
{
  return &type metadata for BoundingBoxScaleManipulator.Face;
}

uint64_t specialized BoundingBoxScaleManipulator.FaceHandleContainer.init(entity:)(uint64_t a1)
{
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v1 + 24) = _D0;
  uint64_t v8 = MEMORY[0x263F8EE78];
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RampAnimation?>);
  uint64_t v9 = (_OWORD *)swift_allocObject();
  v9[1] = xmmword_2466B6940;
  void v9[2] = 0u;
  v9[3] = 0u;
  _OWORD v9[4] = 0u;
  uint64_t v12 = v9;
  specialized Array._endMutation()();
  *(void *)(v1 + 48) = v12;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(unsigned char *)(v1 + 112) = 1;
  *(_DWORD *)(v1 + 116) = 0;
  *(unsigned char *)(v1 + 120) = 1;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BoundingBoxScaleManipulator.FaceHandleContainer.init(entity:));
  *(_OWORD *)(v1 + 128) = v10;
  *(_DWORD *)(v1 + 144) = 1017370378;
  *(void *)(v1 + 152) = 0x3FA999999999999ALL;
  *(void *)(v1 + 16) = a1;
  swift_retain();
  BoundingBoxScaleManipulator.FaceHandleContainer.load()();
  return v1;
}

unint64_t specialized BoundingBoxScaleManipulator.Face.Which.init(rawValue:)(unint64_t result)
{
  if (result >= 6) {
    return 6;
  }
  return result;
}

uint64_t specialized BoundingBoxScaleManipulator.FaceHandleContainer.updateBottomHandleState(time:cameraWorld:boxWorld:)(double a1, double a2, double a3, double a4, float32x4_t a5, double a6)
{
  float v24 = *((float *)&a3 + 1);
  *(double *)v8.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(a6, a5);
  float32x4_t v19 = v8;
  float32x4_t v20 = v9;
  float32x4_t v22 = v10;
  float32x4_t v23 = v11;
  float32x4_t v21 = v6[8];
  unint64_t v12 = (unint64_t)&v6[2].u64[1];
  swift_beginAccess();
  uint64_t v13 = v6[2].i64[1];
  if ((v13 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = MEMORY[0x24C533AF0](1, v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
      goto LABEL_17;
    }
    uint64_t v14 = *(void *)(v13 + 40);
    swift_retain();
  }
  LODWORD(v15) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, *(float *)&v21), v20, *(float32x2_t *)&v21, 1), v22, v21, 2), v23, v21, 3).i32[1];
  BoundingBoxScaleManipulator.FaceHandle.enabled.willset(v24 < v15);
  *(unsigned char *)(v14 + 32) = v24 < v15;
  uint64_t result = swift_release();
  if (v24 >= v15) {
    return result;
  }
  float v17 = (float)(v15 - v24) / 0.02;
  if (v17 <= 0.0) {
    float v17 = 0.0;
  }
  if (v17 <= 1.0) {
    float v7 = v17;
  }
  else {
    float v7 = 1.0;
  }
  unint64_t v12 = *(void *)v12;
  if ((v12 & 0xC000000000000001) == 0)
  {
    if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
      return result;
    }
    uint64_t v18 = *(void *)(v12 + 40);
    swift_retain();
    goto LABEL_13;
  }
LABEL_17:
  swift_bridgeObjectRetain();
  uint64_t v18 = MEMORY[0x24C533AF0](1, v12);
  swift_bridgeObjectRelease();
LABEL_13:
  *(float *)(v18 + 56) = v7;
  return swift_release();
}

void specialized static BoundingBoxScaleManipulator.getHandleScreenSizeConstraint(arView:)(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_msgSend(v1, sel_bounds);
    CGRectGetWidth(v6);
    objc_msgSend(v1, sel_bounds);
    CGRectGetHeight(v7);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)logger);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 134349056;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2465C2000, v3, v4, "Can't get arView!  Using default screen size for handle constraint %{public}f", v5, 0xCu);
      MEMORY[0x24C5348D0](v5, -1, -1);
    }
  }
}

uint64_t partial apply for closure #1 in BoundingBoxScaleManipulator.FaceHandle.loadModel()(void **a1)
{
  return closure #1 in BoundingBoxScaleManipulator.FaceHandle.loadModel()(a1, v1);
}

uint64_t partial apply for closure #2 in BoundingBoxScaleManipulator.FaceHandle.loadModel()(uint64_t *a1)
{
  return closure #2 in BoundingBoxScaleManipulator.FaceHandle.loadModel()(a1, v1);
}

uint64_t outlined init with copy of Cancellable(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_2466199F8()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in BoundingBoxScaleManipulator.subscribeToUpdateEvents()()
{
  return closure #1 in BoundingBoxScaleManipulator.subscribeToUpdateEvents()();
}

uint64_t partial apply for closure #1 in BoundingBoxScaleManipulator.panGesture.getter()
{
  return closure #1 in BoundingBoxScaleManipulator.panGesture.getter();
}

uint64_t outlined assign with take of Cancellable?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in BoundingBoxScaleManipulator.startFadeInAnimation()(float a1)
{
  return closure #1 in BoundingBoxScaleManipulator.startFadeInAnimation()(a1);
}

uint64_t getEnumTagSinglePayload for BoundingBoxScaleManipulator.Face(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BoundingBoxScaleManipulator.Face(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246619C08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BoundingBoxScaleManipulator.Face.Which()
{
  return &type metadata for BoundingBoxScaleManipulator.Face.Which;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in BoundingBoxScaleManipulator.Face.Which()
{
  return lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type [BoundingBoxScaleManipulator.Face.Which] and conformance [A], &demangling cache variable for type metadata for [BoundingBoxScaleManipulator.Face.Which]);
}

unint64_t lazy protocol witness table accessor for type BoundingBoxScaleManipulator.Face.Which and conformance BoundingBoxScaleManipulator.Face.Which()
{
  unint64_t result = lazy protocol witness table cache variable for type BoundingBoxScaleManipulator.Face.Which and conformance BoundingBoxScaleManipulator.Face.Which;
  if (!lazy protocol witness table cache variable for type BoundingBoxScaleManipulator.Face.Which and conformance BoundingBoxScaleManipulator.Face.Which)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BoundingBoxScaleManipulator.Face.Which and conformance BoundingBoxScaleManipulator.Face.Which);
  }
  return result;
}

void BoundingBoxAnimatedUpdater.setTargetWorld(transform:)(__n128 a1, __n128 a2, __n128 a3)
{
  v3[3] = a1;
  v3[4] = a2;
  v3[5] = a3;
  v3[2].n128_u8[8] = 1;
  if (v3[1].n128_u8[0] == 1)
  {
    if (v3[6].n128_u64[0])
    {
      swift_retain();
      if ((AnimationPlaybackController.isPlaying.getter() & 1) == 0
        || (dispatch thunk of AnimationPlaybackController.isComplete.getter() & 1) != 0)
      {
        char v4 = dispatch thunk of AnimationPlaybackController.isComplete.getter();
        swift_release();
        if ((v4 & 1) == 0) {
          return;
        }
        v3[6].n128_u64[0] = 0;
      }
      swift_release();
    }
    else
    {
      BoundingBoxAnimatedUpdater.startNewAnimationIfNeeded()();
    }
  }
}

void BoundingBoxAnimatedUpdater.startNewAnimationIfNeeded()()
{
  if (v1[6].n128_u64[0])
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v0 = v1;
  if (v1[2].n128_u8[8] != 1) {
    return;
  }
  if (!swift_weakLoadStrong()
    || (type metadata accessor for Entity(),
        HasTransform.transformMatrix(relativeTo:)(),
        swift_release(),
        Transform.init(matrix:)(),
        !specialized BoundingBoxAnimatedUpdater.createAnimationResource(fromTransform:toTransform:duration:)(v2, v3, v4, v1[3], v1[4], v1[5])))
  {
    if (one-time initialization token for logger == -1)
    {
LABEL_8:
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)logger);
      BOOL v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        float32x4_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)float32x4_t v9 = 0;
        _os_log_impl(&dword_2465C2000, v7, v8, "Failed to make a FromToByAnimation resource!", v9, 2u);
        MEMORY[0x24C5348D0](v9, -1, -1);
      }

      goto LABEL_13;
    }
LABEL_16:
    swift_once();
    goto LABEL_8;
  }
  if (swift_weakLoadStrong())
  {
    uint64_t v5 = Entity.playAnimation(_:transitionDuration:blendLayerOffset:separateAnimatedValue:startsPaused:clock:)();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v5 = 0;
  }
  v1[6].n128_u64[0] = v5;
  swift_release();
LABEL_13:
  v0[2].n128_u8[8] = 0;
}

uint64_t BoundingBoxAnimatedUpdater.__deallocating_deinit()
{
  swift_weakDestroy();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BoundingBoxAnimatedUpdater()
{
  return self;
}

uint64_t specialized BoundingBoxAnimatedUpdater.createAnimationResource(fromTransform:toTransform:duration:)(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  __n128 v31 = a6;
  __n128 v29 = a5;
  __n128 v28 = a4;
  __n128 v27 = a3;
  __n128 v26 = a2;
  __n128 v25 = a1;
  uint64_t v34 = type metadata accessor for AnimationFillMode();
  MEMORY[0x270FA5388](v34);
  uint64_t v33 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for AnimationRepeatMode();
  uint64_t v7 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  float32x4_t v30 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AnimationTimingFunction();
  MEMORY[0x270FA5388](v9 - 8);
  v24[1] = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindTarget?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<Transform>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  float v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v44 = v25;
  __n128 v45 = v26;
  __n128 v46 = v27;
  char v47 = 0;
  __n128 v40 = v28;
  __n128 v41 = v29;
  __n128 v42 = v31;
  char v43 = 0;
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  char v39 = 1;
  uint64_t v18 = *MEMORY[0x263F165C8];
  uint64_t v19 = type metadata accessor for BindTarget();
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 104))(v13, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v13, 0, 1, v19);
  static AnimationTimingFunction.linear.getter();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v30, *MEMORY[0x263F16760], v32);
  uint64_t v35 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnimationFillMode]);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type [AnimationFillMode] and conformance [A], &demangling cache variable for type metadata for [AnimationFillMode]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  FromToByAnimation.init(name:from:to:by:duration:timing:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)();
  type metadata accessor for AnimationResource();
  v45.n128_u64[1] = v14;
  v46.n128_u64[0] = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>((unint64_t *)&lazy protocol witness table cache variable for type FromToByAnimation<Transform> and conformance FromToByAnimation<A>, &demangling cache variable for type metadata for FromToByAnimation<Transform>);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v44);
  (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 16))(boxed_opaque_existential_1, v17, v14);
  uint64_t v22 = static AnimationResource.generate(with:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
  return v22;
}

unint64_t lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode;
  if (!lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode)
  {
    type metadata accessor for AnimationFillMode();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode);
  }
  return result;
}

uint64_t specialized static TubeGenerator.generateClosedUnitCircleVertices(numSegments:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = result;
    if (!result) {
      return MEMORY[0x263F8EE78];
    }
    __n128 v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    uint64_t v3 = 0;
    unint64_t v4 = v2[2];
    do
    {
      __float2 v7 = __sincosf_stret((float)(6.2832 / (float)v1) * (float)v3);
      *(float *)&long long v6 = v7.__cosval;
      float sinval = v7.__sinval;
      unint64_t v8 = v2[3];
      if (v4 >= v8 >> 1)
      {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v4 + 1, 1, v2);
        float sinval = v7.__sinval;
        *(float *)&long long v6 = v7.__cosval;
        __n128 v2 = v9;
      }
      *((float *)&v6 + 1) = sinval;
      DWORD2(v6) = 0;
      HIDWORD(v6) = 1.0;
      ++v3;
      v2[2] = v4 + 1;
      *(_OWORD *)&v2[2 * v4++ + 4] = v6;
    }
    while (v1 != v3);
    return (uint64_t)v2;
  }
  return result;
}

uint64_t specialized static TubeGenerator.generateLocalCylinderIndices(circleTemplate:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = 0x4000000000000001;
  if ((uint64_t)(v6 + 0x4000000000000001) < 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v4, 1, a4);
    goto LABEL_14;
  }
  unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 2 * v6 + 3, 0, MEMORY[0x263F8EE78]);
  if (!v6) {
    goto LABEL_17;
  }
  a4 = v8;
  unint64_t v9 = 0;
  do
  {
    unint64_t v7 = v9 / v6;
    unint64_t v10 = v9 % v6;
    unint64_t v5 = v9 % v6 + v6;
    if (__OFADD__(v9 % v6, v6))
    {
      __break(1u);
      goto LABEL_16;
    }
    if ((v5 & 0x8000000000000000) != 0 || HIDWORD(v5)) {
      goto LABEL_19;
    }
    unint64_t v12 = *((void *)a4 + 2);
    unint64_t v11 = *((void *)a4 + 3);
    int64_t v4 = v12 + 1;
    if (v12 >= v11 >> 1) {
      a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, a4);
    }
    *((void *)a4 + 2) = v4;
    *(_DWORD *)&a4[4 * v12 + 32] = v5;
    if (HIDWORD(v10))
    {
LABEL_19:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    unint64_t v13 = *((void *)a4 + 3);
    if ((uint64_t)(v12 + 2) > (uint64_t)(v13 >> 1)) {
      a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v12 + 2, 1, a4);
    }
    ++v9;
    *((void *)a4 + 2) = v12 + 2;
    *(_DWORD *)&a4[4 * v4 + 32] = v10;
  }
  while (v6 + 1 != v9);
  unint64_t v5 = *((void *)a4 + 2);
  unint64_t v7 = *((void *)a4 + 3);
  int64_t v4 = v5 + 1;
  if (v5 >= v7 >> 1) {
    goto LABEL_18;
  }
LABEL_14:
  *((void *)a4 + 2) = v4;
  *(_DWORD *)&a4[4 * v5 + 32] = -1;
  return (uint64_t)a4;
}

void specialized TubeGenerator.generateMesh(for:vertices:indices:)(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= 2)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t v8 = *(void *)(v7 + 16);
    uint64_t v9 = v6 * v8;
    if ((unsigned __int128)(v6 * (__int128)v8) >> 64 == (v6 * v8) >> 63)
    {
      if (v9 < 0 || HIDWORD(v9)) {
        goto LABEL_30;
      }
      if (v9 > a3) {
        goto LABEL_27;
      }
      uint64_t v10 = *(void *)(*(void *)(v5 + 24) + 16);
      uint64_t v11 = v10 * (v6 - 1);
      if ((unsigned __int128)(v10 * (__int128)(v6 - 1)) >> 64 != v11 >> 63)
      {
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      if (v11 < 0 || HIDWORD(v11)) {
        goto LABEL_30;
      }
      if (v11 > a5)
      {
LABEL_29:
        __break(1u);
LABEL_30:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of specialized TubeGenerator.generateMesh(for:vertices:indices:));
      float32x4_t v15 = v14;
      uint64_t v16 = 0;
      unint64_t v17 = *(void *)(v7 + 16);
      uint64_t v47 = a1;
      uint64_t v18 = a1 + 32;
      while (v16 != v6)
      {
        uint64_t v29 = v16 * v17;
        if ((unsigned __int128)(v16 * (__int128)(uint64_t)v17) >> 64 != (uint64_t)(v16 * v17) >> 63) {
          goto LABEL_24;
        }
        float32x4_t v30 = (float32x4_t *)(v18 + (v16 << 6));
        float32x4_t v53 = v30[1];
        int v31 = v30[2].i32[0];
        float32x4_t v55 = v30[3];
        float32x4_t v52 = v15;
        Transform.init()();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
        *(_DWORD *)(inited + 32) = v31;
        *(_DWORD *)(inited + 36) = v31;
        *(_DWORD *)(inited + 40) = v31;
        specialized SIMD.init<A>(_:)(inited);
        swift_setDeallocating();
        specialized static TubeGenerator.createOrthonormalFrame(forward:up:)(v53, v52);
        float32x4_t v54 = v33;
        *(double *)v34.i64 = simd_matrix4x4(v33);
        float32x4_t v56 = v34;
        float32x4_t v57 = v35;
        float32x4_t v58 = v36;
        float32x4_t v59 = v37;
        simd_float4x4.scale(_:)();
        SIMD4<>._xyz.getter();
        SIMD4<>._xyz.setter();
        if (v17)
        {
          if (v17 > *(void *)(v7 + 16)) {
            goto LABEL_25;
          }
          uint64_t v38 = 0;
          while (!__OFADD__(v29, v38))
          {
            float32x4_t v39 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, COERCE_FLOAT(*(_OWORD *)(v7 + 32 + 16 * v38))), v57, *(float32x2_t *)(v7 + 32 + 16 * v38), 1), v58, *(float32x4_t *)(v7 + 32 + 16 * v38), 2), v59, *(float32x4_t *)(v7 + 32 + 16 * v38), 3);
            v39.i32[3] = 1.0;
            __n128 v40 = &a2[4 * (v29 + v38)];
            *__n128 v40 = v39;
            ++v38;
            v40[1].i64[0] = 0;
            v40[1].i64[1] = 0;
            v40[2] = v55;
            v40[3].i32[0] = 0;
            if (v17 == v38) {
              goto LABEL_11;
            }
          }
          __break(1u);
          break;
        }
LABEL_11:
        ++v16;
        int32x4_t v19 = (int32x4_t)vmulq_f32(v54, (float32x4_t)xmmword_2466B7770);
        int32x4_t v20 = (int32x4_t)vnegq_f32((float32x4_t)v19);
        int8x16_t v21 = (int8x16_t)vtrn2q_s32(v19, vtrn1q_s32(v19, v20));
        float32x4_t v22 = vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 8uLL), (float32x4_t)0, (float32x4_t)vextq_s8(v21, v21, 8uLL));
        float32x4_t v23 = (float32x4_t)vrev64q_s32(v19);
        v23.i32[0] = v20.i32[1];
        v23.i32[3] = v20.i32[2];
        int32x4_t v24 = (int32x4_t)vmlaq_f32(v22, (float32x4_t)0, v23);
        int32x4_t v25 = (int32x4_t)vnegq_f32((float32x4_t)v24);
        int8x16_t v26 = (int8x16_t)vtrn2q_s32(v24, vtrn1q_s32(v24, v25));
        float32x4_t v27 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v25, 8uLL), *(float32x2_t *)v54.f32, 1), (float32x4_t)vextq_s8(v26, v26, 8uLL), v54.f32[0]);
        float32x4_t v28 = (float32x4_t)vrev64q_s32(v24);
        v28.i32[0] = v25.i32[1];
        v28.i32[3] = v25.i32[2];
        float32x4_t v15 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v24, v54, 3), v28, v54, 2), v27);
        v15.i32[3] = v51;
        if (v16 == v6)
        {
          specialized TubeGenerator.generateIndexBuffer(_:for:)(a4, a5, v47);
          specialized TubeGenerator.computeNormals(numPoints:vertices:indices:)(v6, a2, a3, v41, v42, v43, v44, v45, v46);
          return;
        }
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
    }
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
}

uint64_t specialized TubeGenerator.generateIndexBuffer(_:for:)(uint64_t result, int64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a3 + 16);
  if (v4 < 2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v5 = v4 - 1;
  uint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(v6 + 16);
  if ((unsigned __int128)(v5 * (__int128)v7) >> 64 == (v5 * v7) >> 63)
  {
    if (v5 * v7 > a2) {
      goto LABEL_26;
    }
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(*(void *)(v3 + 16) + 16);
    uint64_t v10 = v6 + 32;
    while (v8 != v5)
    {
      unint64_t v11 = v8 * v9;
      if ((unsigned __int128)(v8 * (__int128)v9) >> 64 != (v8 * v9) >> 63) {
        goto LABEL_22;
      }
      uint64_t v12 = v8 * v7;
      if ((unsigned __int128)(v8 * (__int128)v7) >> 64 != (v8 * v7) >> 63) {
        goto LABEL_23;
      }
      if (v7)
      {
        uint64_t v13 = 0;
        while (1)
        {
          int v14 = *(_DWORD *)(v10 + 4 * v13);
          if (v14 != -1)
          {
            if ((v11 & 0x8000000000000000) != 0 || HIDWORD(v11)) {
              goto LABEL_27;
            }
            BOOL v15 = __CFADD__(v14, v11);
            v14 += v11;
            if (v15) {
              break;
            }
          }
          uint64_t v16 = v13 + v12;
          if (__OFADD__(v13, v12))
          {
            __break(1u);
            break;
          }
          ++v13;
          *(_DWORD *)(result + 4 * v16) = v14;
          if (v7 == v13) {
            goto LABEL_5;
          }
        }
        __break(1u);
        break;
      }
LABEL_5:
      if (++v8 == v5) {
        return result;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*CameraPathManager.cameraPosesBoundingBox.modify())()
{
  return FreeformMeshManager.meshAnchors.modify;
}

Swift::Void __swiftcall CameraPathManager.addShot(_:t:)(simd_float4x4 *_, Swift::Double t)
{
  long long v23 = v5;
  long long v24 = v6;
  uint64_t v10 = static CameraPathManager.nextId;
  if (__OFADD__(static CameraPathManager.nextId, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = v8;
    long long v22 = *(_OWORD *)&t;
    long long v25 = v7;
    ++static CameraPathManager.nextId;
    __n128 v2 = (void **)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_shots);
    swift_beginAccess();
    unint64_t v4 = *v2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *__n128 v2 = v4;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_3;
    }
  }
  unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
  *__n128 v2 = v4;
LABEL_3:
  unint64_t v13 = v4[2];
  unint64_t v12 = v4[3];
  long long v14 = v25;
  if (v13 >= v12 >> 1)
  {
    int8x16_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v4);
    long long v14 = v25;
    unint64_t v4 = v21;
    *__n128 v2 = v21;
  }
  _OWORD v4[2] = v13 + 1;
  BOOL v15 = &v4[12 * v13];
  v15[4] = v10;
  *((_OWORD *)v15 + 3) = v22;
  *((_OWORD *)v15 + 4) = v23;
  *((_OWORD *)v15 + 5) = v24;
  *((_OWORD *)v15 + 6) = v14;
  v15[14] = v9;
  *((unsigned char *)v15 + 120) = 1;
  swift_endAccess();
  uint64_t v16 = v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_cameraPosesBoundingBox;
  swift_beginAccess();
  if (*(unsigned char *)(v16 + 32))
  {
    BoundingBox.init(min:max:)();
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    *(unsigned char *)(v16 + 32) = 0;
  }
  else
  {
    int32x4_t v19 = CameraPathManager.cameraPosesBoundingBox.modify();
    if ((*(unsigned char *)(v20 + 32) & 1) == 0) {
      BoundingBox.formUnion(_:)();
    }
    ((void (*)(unsigned char *, void))v19)(v26, 0);
  }
}

uint64_t CameraPathManager.computeCurveFromShots()()
{
  long long v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_shots);
  swift_beginAccess();
  if (*(void *)(*v5 + 16) < 3uLL)
  {
    __break(1u);
LABEL_15:
    swift_once();
    goto LABEL_4;
  }
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CameraPathManager.computeCurveFromShots());
  long long v30 = v6;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of CameraPathManager.computeCurveFromShots());
  long long v29 = v7;
  float v33 = 0.0;
  uint64_t v1 = *v5;
  uint64_t v2 = *(void *)(*v5 + 16);
  if (!v2) {
    goto LABEL_13;
  }
  float v3 = (float)(v2 - 1);
  float v4 = 1.0;
  uint64_t v8 = one-time initialization token for logger;
  swift_bridgeObjectRetain();
  if (v8 != -1) {
    goto LABEL_15;
  }
LABEL_4:
  float v9 = v4 / v3;
  swift_beginAccess();
  uint64_t v10 = type metadata accessor for Logger();
  float v11 = 0.0;
  unint64_t v12 = (void *)MEMORY[0x263F8EE78];
  uint64_t v13 = 96;
  do
  {
    long long v14 = *(_OWORD *)(v1 + v13);
    HIDWORD(v14) = 0;
    long long v31 = v14;
    __swift_project_value_buffer(v10, (uint64_t)logger);
    BOOL v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v28 = v2;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v32 = v27;
      *(_DWORD *)uint64_t v17 = 134218242;
      *(double *)(v17 + 4) = v33;
      *(_WORD *)(v17 + 12) = 2080;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>((unint64_t *)&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
      uint64_t v18 = SIMD.description.getter();
      *(void *)(v17 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v32);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v15, v16, "Made key: s=%f point: %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v27, -1, -1);
      uint64_t v20 = v17;
      uint64_t v2 = v28;
      MEMORY[0x24C5348D0](v20, -1, -1);
    }

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    }
    unint64_t v22 = v12[2];
    unint64_t v21 = v12[3];
    long long v23 = v31;
    if (v22 >= v21 >> 1)
    {
      long long v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v12);
      long long v23 = v31;
      unint64_t v12 = v25;
    }
    _OWORD v12[2] = v22 + 1;
    long long v24 = &v12[8 * v22];
    *((_DWORD *)v24 + 8) = 2;
    *((float *)v24 + 9) = v11;
    *((_OWORD *)v24 + 3) = v23;
    *((_OWORD *)v24 + 4) = v30;
    *((_OWORD *)v24 + 5) = v29;
    float v11 = v9 + v33;
    float v33 = v9 + v33;
    v13 += 96;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
LABEL_13:
  type metadata accessor for OS_geom_interpolating_curve_3f();
  return OS_geom_interpolating_curve_3f.init(keys:arcLengthParameterized:)();
}

id CameraPathManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CameraPathManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CameraPathManager()
{
  return self;
}

id CameraPathRenderer.init(device:pixelFormat:cameraPathManager:descriptor:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v37 = a2;
  uint64_t v5 = v4;
  id v40 = a3;
  uint64_t v36 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<Int>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_colorScheme;
  uint64_t v12 = *MEMORY[0x263F18508];
  uint64_t v13 = type metadata accessor for ColorScheme();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v11, v12, v13);
  *(unsigned char *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_enabled) = 0;
  *(unsigned char *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_renderMode) = 1;
  swift_unknownObjectWeakInit();
  uint64_t v14 = OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_device;
  *(void *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_device) = 0;
  *(void *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_baseRenderer) = 0;
  *(void *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_renderPipelineState) = 0;
  *(void *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_depthStencilState) = 0;
  *(void *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_uniforms) = MEMORY[0x263F8EE78];
  uint64_t v15 = v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer__nextBufferIndex;
  uint64_t v39 = 0;
  Atomic.init(wrappedValue:)();
  uint64_t v16 = v15;
  id v17 = v40;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v16, v10, v7);
  uint64_t v18 = v36;
  *(void *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_lineVertexBuffer) = 0;
  *(void *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_numLineVertices) = 0;
  *(unsigned char *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_dirtyBuffers) = 1;
  *(void *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_numTubeIndices) = 0;
  *(void *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_tubeTriStripIndexBuffer) = 0;
  *(void *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_numTubeVertices) = 0;
  *(void *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_tubeVertexBuffer) = 0;
  *(void *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_numSplineSamplesPerShot) = 10;
  *(void *)(v4 + v14) = v18;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  swift_unknownObjectWeakAssign();
  uint64_t v19 = v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_desc;
  long long v20 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)a4;
  *(_OWORD *)(v19 + 16) = v20;
  *(_OWORD *)(v19 + 32) = *(_OWORD *)(a4 + 32);
  *(void *)(v19 + 48) = *(void *)(a4 + 48);
  uint64_t v21 = v38;
  CameraPathRenderer.initRenderPipeline(pixelFormat:)(v37);
  if (v21)
  {
    swift_release();
    swift_unknownObjectRelease();

    return (id)v5;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)logger);
  long long v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    long long v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v25 = 0;
    _os_log_impl(&dword_2465C2000, v23, v24, "Initializing uniforms buffers for CameraPathRenderer...", v25, 2u);
    MEMORY[0x24C5348D0](v25, -1, -1);
  }

  uint64_t v26 = OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_device;
  id result = *(id *)(v5 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_device);
  if (!result) {
    goto LABEL_23;
  }
  uint64_t v28 = OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_uniforms;
  id result = objc_msgSend(result, sel_newBufferWithLength_options_, 240, 1);
  if (!result) {
    goto LABEL_24;
  }
  long long v29 = (void *)(v5 + v28);
  swift_beginAccess();
  uint64_t v30 = swift_unknownObjectRetain();
  MEMORY[0x24C533580](v30);
  if (*(void *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  swift_unknownObjectRelease();
  id result = *(id *)(v5 + v26);
  if (!result) {
    goto LABEL_23;
  }
  id result = objc_msgSend(result, sel_newBufferWithLength_options_, 240, 1);
  if (!result) {
    goto LABEL_24;
  }
  swift_beginAccess();
  uint64_t v31 = swift_unknownObjectRetain();
  MEMORY[0x24C533580](v31);
  if (*(void *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  swift_unknownObjectRelease();
  id result = *(id *)(v5 + v26);
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  id result = objc_msgSend(result, sel_newBufferWithLength_options_, 240, 1);
  if (result)
  {
    swift_beginAccess();
    uint64_t v32 = swift_unknownObjectRetain();
    MEMORY[0x24C533580](v32);
    if (*(void *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    swift_unknownObjectRelease();
    float v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      float32x4_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float32x4_t v35 = 0;
      _os_log_impl(&dword_2465C2000, v33, v34, "... done Initializing uniforms buffers for CameraPathRenderer.", v35, 2u);
      MEMORY[0x24C5348D0](v35, -1, -1);
    }

    swift_unknownObjectRelease();
    return (id)v5;
  }
LABEL_24:
  __break(1u);
  return result;
}

void CameraPathRenderer.colorScheme.didset()
{
  uint64_t v1 = type metadata accessor for ColorScheme();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_colorScheme;
  swift_beginAccess();
  long long v6 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v6(v4, v5, v1);
  lazy protocol witness table accessor for type ColorScheme and conformance ColorScheme();
  char v7 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if ((v7 & 1) == 0)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    swift_retain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v18 = v16;
      *(_DWORD *)uint64_t v11 = 136315138;
      v15[1] = v11 + 4;
      v6(v4, v5, v1);
      uint64_t v12 = String.init<A>(describing:)();
      uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v9, v10, "Switched colorScheme to %s.", v11, 0xCu);
      uint64_t v14 = v16;
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v14, -1, -1);
      MEMORY[0x24C5348D0](v11, -1, -1);
    }
    else
    {

      swift_release_n();
    }
  }
}

Swift::Void __swiftcall CameraPathRenderer.update(worldToView:viewToClip:)(simd_float4x4 *worldToView, simd_float4x4 *viewToClip)
{
  uint64_t v13 = v2;
  long long v46 = v12;
  long long v44 = v11;
  long long v42 = v10;
  long long v40 = v9;
  simd_float4 v47 = v8;
  simd_float4 v45 = v7;
  simd_float4 v43 = v6;
  simd_float4 v41 = v5;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<Int>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer__nextBufferIndex;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v18, v14);
  Atomic.wrappedValue.getter();
  long long v20 = *(void (**)(char *, uint64_t))(v15 + 8);
  unint64_t v19 = v15 + 8;
  v20(v17, v14);
  if (__OFADD__(v49, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v19 = (v49 + 1) % 3;
    uint64_t v21 = (void **)(v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_uniforms);
    swift_beginAccess();
    unint64_t v3 = (unint64_t)*v21;
    if (((unint64_t)*v21 & 0xC000000000000001) == 0)
    {
      if ((v19 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v19 < *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v22 = *(void **)(v3 + 8 * v19 + 32);
        swift_unknownObjectRetain();
        goto LABEL_6;
      }
      __break(1u);
LABEL_19:
      swift_once();
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = (void *)MEMORY[0x24C533AF0](v19, v3);
  swift_bridgeObjectRelease();
LABEL_6:
  long long v23 = (char *)objc_msgSend(v22, sel_contents, (void)v40, *((void *)&v40 + 1), v41.i64[0], v41.i64[1], (void)v42, *((void *)&v42 + 1), v43.i64[0], v43.i64[1], v44, *(_OWORD *)&v45, v46, *(_OWORD *)&v47);
  id v24 = v22;
  simd_float4 v25 = v41;
  v50.columns[1] = v43;
  *(simd_float4 *)long long v23 = v41;
  *((_OWORD *)v23 + 1) = v50.columns[1];
  v50.columns[2] = v45;
  v50.columns[3] = v47;
  *((simd_float4 *)v23 + 2) = v45;
  *((_OWORD *)v23 + 3) = v50.columns[3];
  long long v26 = v42;
  *((_OWORD *)v23 + 4) = v40;
  *((_OWORD *)v23 + 5) = v26;
  long long v27 = v46;
  *((_OWORD *)v23 + 6) = v44;
  *((_OWORD *)v23 + 7) = v27;
  v50.columns[0] = v25;
  simd_float4x4 v51 = __invert_f4(v50);
  float32x2x2_t v28 = (float32x2x2_t)vzip1q_s32((int32x4_t)v51.columns[0], (int32x4_t)v51.columns[2]);
  float32x2x2_t v29 = (float32x2x2_t)vzip2q_s32((int32x4_t)v51.columns[0], (int32x4_t)v51.columns[2]);
  int32x4_t v30 = vzip1q_s32((int32x4_t)v51.columns[1], (int32x4_t)v51.columns[3]);
  int32x4_t v31 = vzip2q_s32((int32x4_t)v51.columns[1], (int32x4_t)v51.columns[3]);
  uint64_t v32 = (float *)(v23 + 128);
  vst2_f32(v32, v28);
  *((int32x4_t *)v23 + 9) = vzip2q_s32((int32x4_t)v28, v30);
  float v33 = (float *)(v23 + 160);
  vst2_f32(v33, v29);
  *((int32x4_t *)v23 + 11) = vzip2q_s32((int32x4_t)v29, v31);
  *((_OWORD *)v23 + 12) = xmmword_2466B93D0;
  *((_OWORD *)v23 + 13) = xmmword_2466B93E0;
  *((_DWORD *)v23 + 56) = 1056964608;
  uint64_t v34 = MEMORY[0x24C5349C0](v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_cameraPathManager);
  if (!v34) {
    goto LABEL_14;
  }
  unint64_t v3 = v34;
  uint64_t v4 = OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_dirtyBuffers;
  if ((*(unsigned char *)(v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_dirtyBuffers) & 1) != 0
    || (uint64_t v35 = v34 + OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_shots,
        swift_beginAccess(),
        *(void *)(v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_numLineVertices) >= *(void *)(*(void *)v35 + 16)))
  {

    goto LABEL_14;
  }
  if (one-time initialization token for logger != -1) {
    goto LABEL_19;
  }
LABEL_10:
  uint64_t v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)logger);
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl(&dword_2465C2000, v37, v38, "Dirtying buffer since shot count changed.", v39, 2u);
    MEMORY[0x24C5348D0](v39, -1, -1);
  }

  *(unsigned char *)(v13 + v4) = 1;
LABEL_14:
  unint64_t v48 = v19;
  swift_beginAccess();
  Atomic.wrappedValue.setter();
  swift_endAccess();
}

void CameraPathRenderer.enabled.didset(char a1)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_enabled) != (a1 & 1))
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)logger);
    swift_retain();
    unint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      simd_float4 v5 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)simd_float4 v5 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_2465C2000, v3, v4, "CameraPathRenderer.enabled = %{BOOL}d", v5, 8u);
      MEMORY[0x24C5348D0](v5, -1, -1);
    }
    else
    {

      swift_release();
    }
  }
}

void CameraPathRenderer.initRenderPipeline(pixelFormat:)(uint64_t a1)
{
  uint64_t v2 = v1;
  v51[1] = *(id *)MEMORY[0x263EF8340];
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  simd_float4 v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    simd_float4 v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)simd_float4 v7 = 0;
    _os_log_impl(&dword_2465C2000, v5, v6, "CameraPathRender initializing render pipeline...", v7, 2u);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  uint64_t v8 = OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_device;
  long long v9 = *(void **)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_device);
  if (!v9) {
    __break(1u);
  }
  uint64_t v10 = one-time initialization token for bundle;
  swift_unknownObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  v51[0] = 0;
  id v11 = objc_msgSend(v9, sel_newDefaultLibraryWithBundle_error_, static BaseRenderer.bundle, v51);
  swift_unknownObjectRelease();
  if (!v11)
  {
    id v44 = v51[0];
    simd_float4 v45 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type CameraPathRenderer.Error and conformance CameraPathRenderer.Error();
    swift_allocError();
    swift_willThrow();
    return;
  }
  id v12 = v51[0];
  uint64_t v13 = (void *)MEMORY[0x24C533410](0xD000000000000025, 0x80000002466C0350);
  id v14 = objc_msgSend(v11, sel_newFunctionWithName_, v13);

  uint64_t v15 = (void *)MEMORY[0x24C533410](0xD000000000000023, 0x80000002466C0380);
  id v16 = objc_msgSend(v11, sel_newFunctionWithName_, v15);

  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F129C0]), sel_init);
  objc_msgSend(v17, sel_setVertexFunction_, v14);
  objc_msgSend(v17, sel_setFragmentFunction_, v16);
  objc_msgSend(v17, sel_setDepthAttachmentPixelFormat_, 252);
  id v18 = objc_msgSend(v17, sel_colorAttachments);
  id v19 = objc_msgSend(v18, sel_objectAtIndexedSubscript_, 0);

  if (!v19)
  {
    __break(1u);
    goto LABEL_31;
  }
  objc_msgSend(v19, sel_setPixelFormat_, a1);

  id v20 = objc_msgSend(v17, sel_colorAttachments);
  id v21 = objc_msgSend(v20, sel_objectAtIndexedSubscript_, 0);

  if (!v21)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  objc_msgSend(v21, sel_setBlendingEnabled_, 1);

  id v22 = objc_msgSend(v17, sel_colorAttachments);
  id v23 = objc_msgSend(v22, sel_objectAtIndexedSubscript_, 0);

  if (!v23)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  objc_msgSend(v23, sel_setRgbBlendOperation_, 0);

  id v24 = objc_msgSend(v17, sel_colorAttachments);
  id v25 = objc_msgSend(v24, sel_objectAtIndexedSubscript_, 0);

  if (!v25)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  objc_msgSend(v25, sel_setAlphaBlendOperation_, 0);

  id v26 = objc_msgSend(v17, sel_colorAttachments);
  id v27 = objc_msgSend(v26, sel_objectAtIndexedSubscript_, 0);

  if (!v27)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  objc_msgSend(v27, sel_setSourceRGBBlendFactor_, 4);

  id v28 = objc_msgSend(v17, sel_colorAttachments);
  id v29 = objc_msgSend(v28, sel_objectAtIndexedSubscript_, 0);

  if (!v29)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  objc_msgSend(v29, sel_setSourceAlphaBlendFactor_, 4);

  id v30 = objc_msgSend(v17, sel_colorAttachments);
  id v31 = objc_msgSend(v30, sel_objectAtIndexedSubscript_, 0);

  if (!v31)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  objc_msgSend(v31, sel_setDestinationRGBBlendFactor_, 5);

  id v32 = objc_msgSend(v17, sel_colorAttachments);
  id v33 = objc_msgSend(v32, sel_objectAtIndexedSubscript_, 0);

  if (!v33)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  objc_msgSend(v33, sel_setDestinationAlphaBlendFactor_, 5);

  uint64_t v34 = *(void **)(v2 + v8);
  if (!v34)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    return;
  }
  v51[0] = 0;
  id v35 = objc_msgSend(v34, sel_newRenderPipelineStateWithDescriptor_error_, v17, v51);
  id v36 = v51[0];
  if (!v35)
  {
    id v46 = v51[0];
    simd_float4 v47 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type CameraPathRenderer.Error and conformance CameraPathRenderer.Error();
    swift_allocError();
    swift_willThrow();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    return;
  }
  *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_renderPipelineState) = v35;
  id v37 = v36;
  swift_unknownObjectRelease();
  id v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128A0]), sel_init);
  objc_msgSend(v38, sel_setDepthCompareFunction_, 1);
  objc_msgSend(v38, sel_setDepthWriteEnabled_, 1);
  uint64_t v39 = *(void **)(v2 + v8);
  if (!v39) {
    goto LABEL_39;
  }
  id v40 = objc_msgSend(v39, sel_newDepthStencilStateWithDescriptor_, v38);
  if (v40)
  {
    *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_depthStencilState) = v40;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    simd_float4 v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      simd_float4 v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)simd_float4 v43 = 0;
      _os_log_impl(&dword_2465C2000, v41, v42, "... done initializing CameraPathRenderer render pipeline.", v43, 2u);
      MEMORY[0x24C5348D0](v43, -1, -1);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
    }
  }
  else
  {
    unint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      simd_float4x4 v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)simd_float4x4 v50 = 0;
      _os_log_impl(&dword_2465C2000, v48, v49, "Can't make depth stencil!", v50, 2u);
      MEMORY[0x24C5348D0](v50, -1, -1);
    }

    lazy protocol witness table accessor for type CameraPathRenderer.Error and conformance CameraPathRenderer.Error();
    swift_allocError();
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
}

void CameraPathRenderer.initLineBufferForCameraSpline()()
{
  uint64_t v1 = MEMORY[0x24C5349C0](v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_cameraPathManager);
  if (!v1) {
    goto LABEL_15;
  }
  uint64_t v2 = (void *)v1;
  uint64_t v3 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_shots;
  swift_beginAccess();
  unint64_t v4 = *(void *)(*(void *)v3 + 16);
  if (v4 < 2)
  {

    return;
  }
  *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_numLineVertices) = v4;
  simd_float4 v5 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_device);
  if (!v5) {
    goto LABEL_16;
  }
  if (v4 >> 57)
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v6 = objc_msgSend(v5, sel_newBufferWithLength_options_, v4 << 6, 513);
  if (!v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v7 = OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_lineVertexBuffer;
  *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_lineVertexBuffer) = v6;
  swift_unknownObjectRelease();
  uint64_t v8 = *(void **)(v0 + v7);
  if (!v8)
  {
LABEL_18:
    __break(1u);
    return;
  }
  long long v9 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v10 = v8;
  uint64_t v11 = *(void *)v3;
  if (v4 > *(void *)(*(void *)v3 + 16)) {
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = v11 + 96;
  do
  {
    Transform.init(matrix:)();
    HIDWORD(v13) = 1.0;
    *long long v9 = v13;
    v9 += 4;
    v12 += 96;
    --v4;
  }
  while (v4);

  swift_bridgeObjectRelease();
}

void CameraPathRenderer.initTubeBufferForCameraSpline()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ColorScheme();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  id v6 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v96 - v7;
  uint64_t v9 = MEMORY[0x24C5349C0]((char *)v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_cameraPathManager);
  if (!v9) {
    goto LABEL_52;
  }
  id v10 = (void *)v9;
  uint64_t v11 = v9 + OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_shots;
  swift_beginAccess();
  uint64_t v12 = *(void *)(*(void *)v11 + 16);
  if ((unint64_t)v12 < 2)
  {
LABEL_43:

    return;
  }
  uint64_t v13 = 10 * v12;
  if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63) {
    goto LABEL_45;
  }
  id v102 = v10;
  if (one-time initialization token for logger != -1) {
LABEL_46:
  }
    swift_once();
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v111 = __swift_project_value_buffer(v14, (uint64_t)logger);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v107 = v6;
  uint64_t v109 = v13;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 134218240;
    uint64_t v121 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2048;
    uint64_t v121 = v12;
    uint64_t v13 = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v15, v16, "Making %ld spline samples for %ld keys...", (uint8_t *)v18, 0x16u);
    uint64_t v19 = v18;
    id v6 = v107;
    MEMORY[0x24C5348D0](v19, -1, -1);
  }

  long long v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13 & ~(v13 >> 63), 0, MEMORY[0x263F8EE78]);
  uint64_t v20 = CameraPathManager.computeCurveFromShots()();
  if (__OFSUB__(v13, 1))
  {
    __break(1u);
    goto LABEL_48;
  }
  if (v13 < 0)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  id v10 = (void *)v20;
  uint64_t v98 = v1;
  if (v13)
  {
    float v21 = 1.0 / (float)(v13 - 1);
    float v23 = *(float *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_desc + 48);
    float v22 = *(float *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_desc + 52);
    long long v110 = (float *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_desc);
    float v24 = v22 - v23;
    float32x4_t v115 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_colorScheme;
    swift_beginAccess();
    uint64_t v12 = 0;
    int v114 = (void (**)(char *, char *, uint64_t))(v3 + 16);
    id v113 = (void (**)(char *, void, uint64_t))(v3 + 104);
    unsigned int v112 = *MEMORY[0x263F18508];
    uint64_t v1 = (void (**)(char *, uint64_t))(v3 + 8);
    unsigned __int8 v97 = &v119.i8[8];
    uint64_t v3 = 32;
    *(void *)&long long v26 = 136315138;
    long long v105 = v26;
    uint64_t v104 = MEMORY[0x263F8EE58] + 8;
    *(void *)&long long v26 = 134218754;
    long long v96 = v26;
    uint64_t v106 = v10;
    do
    {
      if (v13 == v12)
      {
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      float32x4_t v117 = v25;
      float32x4_t v118 = (float32x4_t)v26;
      float v27 = v21 * (float)v12;
      geom_interpolating_curve_evaluate_at_3f();
      v28.i32[3] = v118.i32[3];
      float32x4_t v118 = v28;
      geom_interpolating_curve_evaluate_tangent_at_3f();
      float32x4_t v116 = v29;
      float32x4_t v30 = v29;
      v30.i32[3] = v117.i32[3];
      float32x4_t v117 = v30;
      (*v114)(v8, v115, v2);
      (*v113)(v6, v112, v2);
      char v31 = static ColorScheme.== infix(_:_:)();
      id v32 = *v1;
      (*v1)(v6, v2);
      v32(v8, v2);
      uint64_t v33 = 4;
      if ((v31 & 1) == 0) {
        uint64_t v33 = 8;
      }
      float32x4_t v34 = vmulq_f32(v116, v116);
      float v35 = sqrtf(v34.f32[2] + vaddv_f32(*(float32x2_t *)v34.f32));
      if (v35 >= 0.001)
      {
        if (v35 >= 0.0001)
        {
          float v37 = *v110;
          if (*v110 >= 0.0001)
          {
            float32x4_t v116 = *(float32x4_t *)&v110[v33];
            simd_float4x4 v50 = Logger.logObject.getter();
            os_log_type_t v51 = static os_log_type_t.debug.getter();
            int v52 = v51;
            if (os_log_type_enabled(v50, v51))
            {
              uint64_t v53 = swift_slowAlloc();
              os_log_t v103 = v50;
              uint64_t v54 = v53;
              uint64_t v101 = swift_slowAlloc();
              uint64_t v120 = v101;
              *(_DWORD *)uint64_t v54 = v96;
              v119.i64[0] = v12;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v54 + 12) = 2048;
              *(double *)v119.i64 = v27;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v54 + 22) = 2080;
              uint64_t v99 = v54 + 24;
              float32x4_t v119 = v118;
              int v100 = v52;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
              lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>((unint64_t *)&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
              uint64_t v55 = SIMD.description.getter();
              v119.i64[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v120);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v54 + 32) = 2080;
              float32x4_t v119 = v117;
              id v10 = v106;
              id v6 = v107;
              uint64_t v57 = SIMD.description.getter();
              v119.i64[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, &v120);
              uint64_t v3 = 32;
              uint64_t v13 = v109;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_2465C2000, v103, (os_log_type_t)v100, "Sample %ld: s=%f pos=%s tan=%s", (uint8_t *)v54, 0x2Au);
              uint64_t v59 = v101;
              swift_arrayDestroy();
              MEMORY[0x24C5348D0](v59, -1, -1);
              MEMORY[0x24C5348D0](v54, -1, -1);
            }
            else
            {
            }
            unint64_t v61 = v108[2];
            unint64_t v60 = v108[3];
            if (v61 >= v60 >> 1) {
              long long v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v60 > 1), v61 + 1, 1, v108);
            }
            float32x4_t v62 = v116;
            v62.f32[3] = v23 + (float)(v24 * v27);
            uint64_t v63 = v108;
            v108[2] = v61 + 1;
            uint64_t v64 = (float32x4_t *)&v63[8 * v61];
            long long v26 = (__int128)v118;
            float32x4_t v25 = v117;
            v64[2] = v118;
            v64[3] = v25;
            v64[4].f32[0] = v37;
            v64[5] = v62;
            goto LABEL_14;
          }
          char v36 = 2;
        }
        else
        {
          char v36 = 1;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TubeGenerator<CameraPathVertex>.Error);
        lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type TubeGenerator<CameraPathVertex>.Error and conformance TubeGenerator<A>.Error, &demangling cache variable for type metadata for TubeGenerator<CameraPathVertex>.Error);
        id v38 = (void *)swift_allocError();
        *uint64_t v39 = v36;
        swift_willThrow();
        id v40 = v38;
        id v41 = v38;
        os_log_type_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = swift_slowAlloc();
          uint64_t v45 = swift_slowAlloc();
          v119.i64[0] = v45;
          *(_DWORD *)uint64_t v44 = v105;
          uint64_t v120 = (uint64_t)v38;
          id v46 = v38;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
          uint64_t v47 = String.init<A>(describing:)();
          *(void *)(v44 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, (uint64_t *)&v119);
          id v10 = v106;
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_2465C2000, v42, v43, "Got exception making CurvePoint: %s", (uint8_t *)v44, 0xCu);
          swift_arrayDestroy();
          uint64_t v49 = v45;
          id v6 = v107;
          MEMORY[0x24C5348D0](v49, -1, -1);
          MEMORY[0x24C5348D0](v44, -1, -1);
        }
        else
        {
        }
        uint64_t v13 = v109;
        uint64_t v3 = 32;
      }
      long long v26 = (__int128)v118;
      float32x4_t v25 = v117;
LABEL_14:
      ++v12;
    }
    while (v13 != v12);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TubeGenerator<CameraPathVertex>);
  uint64_t inited = swift_initStackObject();
  uint64_t v66 = specialized static TubeGenerator.generateClosedUnitCircleVertices(numSegments:)(10);
  *(void *)(inited + 16) = v66;
  uint64_t v67 = swift_bridgeObjectRetain();
  uint64_t v71 = specialized static TubeGenerator.generateLocalCylinderIndices(circleTemplate:)(v67, v68, v69, v70);
  swift_bridgeObjectRelease();
  *(void *)(inited + 24) = v71;
  uint64_t v72 = v108[2];
  uint64_t v73 = *(void *)(v66 + 16);
  uint64_t v74 = (void (*)(char *, uint64_t))(v72 * v73);
  if ((unsigned __int128)(v72 * (__int128)v73) >> 64 != (v72 * v73) >> 63) {
    goto LABEL_49;
  }
  if (((unint64_t)v74 & 0x8000000000000000) != 0) {
    goto LABEL_57;
  }
  int v75 = v98;
  if ((unint64_t)v74 >> 32) {
    goto LABEL_57;
  }
  uint64_t v76 = OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_numTubeVertices;
  *(void (**)(char *, uint64_t))((char *)v98
                                         + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_numTubeVertices) = v74;
  uint64_t v77 = v108[2] - 1;
  uint64_t v78 = *(void *)(v71 + 16);
  unint64_t v79 = v78 * v77;
  if ((unsigned __int128)(v78 * (__int128)v77) >> 64 != (v78 * v77) >> 63) {
    goto LABEL_50;
  }
  if ((v79 & 0x8000000000000000) != 0 || HIDWORD(v79)) {
    goto LABEL_57;
  }
  uint64_t v80 = OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_numTubeIndices;
  *(void (**)(char *, uint64_t))((char *)v75
                                         + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_numTubeIndices) = (void (*)(char *, uint64_t))v79;
  uint64_t v81 = OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_device;
  long long v82 = *(void (**)(char *, uint64_t))((char *)v75
                                               + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_device);
  if (!v82) {
    goto LABEL_53;
  }
  long long v83 = (void (*)(char *, uint64_t))objc_msgSend(v82, sel_newBufferWithLength_options_, (void)v74 << 6, 513);
  uint64_t v84 = OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_tubeVertexBuffer;
  *(void (**)(char *, uint64_t))((char *)v75
                                         + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_tubeVertexBuffer) = v83;
  swift_unknownObjectRelease();
  long long v85 = *(void (**)(char *, uint64_t))((char *)v75 + v81);
  if (!v85)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v86 = *(uint64_t *)((char *)v75 + v80);
  if ((unint64_t)(v86 - 0x2000000000000000) >> 62 != 3) {
    goto LABEL_51;
  }
  long long v87 = (void (*)(char *, uint64_t))objc_msgSend(v85, sel_newBufferWithLength_options_, 4 * v86, 513);
  uint64_t v88 = OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_tubeTriStripIndexBuffer;
  *(void (**)(char *, uint64_t))((char *)v75
                                         + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_tubeTriStripIndexBuffer) = v87;
  swift_unknownObjectRelease();
  unsigned __int8 v89 = *(void (**)(char *, uint64_t))((char *)v75 + v84);
  if (v89)
  {
    char v90 = (float32x4_t *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v91 = v89;
    float32x4_t v92 = *(void (**)(char *, uint64_t))((char *)v75 + v88);
    if (v92)
    {
      uint64_t v93 = *(uint64_t *)((char *)v75 + v76);
      id v94 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      id v95 = v92;
      specialized TubeGenerator.generateMesh(for:vertices:indices:)((uint64_t)v108, v90, v93, (uint64_t)v94, *(int64_t *)((char *)v75 + v80));
      swift_bridgeObjectRelease();

      swift_setDeallocating();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }
    goto LABEL_56;
  }
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CameraPathRenderer.renderLines(into:renderPassDescriptor:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<Int>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_enabled) == 1)
  {
    uint64_t v10 = OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_lineVertexBuffer;
    if (*(void *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_lineVertexBuffer))
    {
      uint64_t v11 = OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_numLineVertices;
      if (*(uint64_t *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_numLineVertices) >= 1)
      {
        id v12 = objc_msgSend(a2, sel_colorAttachments);
        id v13 = objc_msgSend(v12, sel_objectAtIndexedSubscript_, 0);

        if (v13)
        {
          objc_msgSend(v13, sel_setLoadAction_, 1);

          id v14 = objc_msgSend(a1, sel_renderCommandEncoderWithDescriptor_, a2);
          if (!v14)
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
          if (!*(void *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_renderPipelineState))
          {
LABEL_18:
            __break(1u);
            return;
          }
          uint64_t v15 = v14;
          objc_msgSend(v14, sel_setRenderPipelineState_);
          uint64_t v16 = v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer__nextBufferIndex;
          swift_beginAccess();
          (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v16, v6);
          Atomic.wrappedValue.getter();
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
          unint64_t v17 = v21;
          uint64_t v18 = (uint64_t *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_uniforms);
          swift_beginAccess();
          uint64_t v19 = *v18;
          if ((v19 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            uint64_t v20 = MEMORY[0x24C533AF0](v17, v19);
            swift_bridgeObjectRelease();
            goto LABEL_11;
          }
          if ((v17 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v17 < *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            uint64_t v20 = *(void *)(v19 + 8 * v17 + 32);
            swift_unknownObjectRetain();
LABEL_11:
            objc_msgSend(v15, sel_setVertexBuffer_offset_atIndex_, v20, 0, 0);
            swift_unknownObjectRelease();
            objc_msgSend(v15, sel_setVertexBuffer_offset_atIndex_, *(void *)(v3 + v10), 0, 1);
            objc_msgSend(v15, sel_drawPrimitives_vertexStart_vertexCount_, 2, 0, *(void *)(v3 + v11));
            objc_msgSend(v15, sel_endEncoding);
            swift_unknownObjectRelease();
            return;
          }
          __break(1u);
        }
        __break(1u);
        goto LABEL_17;
      }
    }
  }
}

void CameraPathRenderer.renderTube(into:renderPassDescriptor:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<Int>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_enabled) == 1)
  {
    uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_tubeVertexBuffer);
    if (v10)
    {
      uint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_tubeTriStripIndexBuffer);
      if (v11)
      {
        if (*(uint64_t *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_numTubeVertices) >= 3)
        {
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          id v12 = objc_msgSend(a2, sel_colorAttachments);
          id v13 = objc_msgSend(v12, sel_objectAtIndexedSubscript_, 0);

          if (!v13)
          {
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
          objc_msgSend(v13, sel_setLoadAction_, 1);

          id v14 = objc_msgSend(a1, sel_renderCommandEncoderWithDescriptor_, a2);
          if (!v14)
          {
LABEL_25:
            __break(1u);
            goto LABEL_26;
          }
          uint64_t v29 = v11;
          if (!*(void *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_renderPipelineState))
          {
LABEL_26:
            __break(1u);
            return;
          }
          uint64_t v15 = v14;
          objc_msgSend(v14, sel_setRenderPipelineState_);
          objc_msgSend(v15, sel_setDepthStencilState_, *(void *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_depthStencilState));
          objc_msgSend(v15, sel_setFrontFacingWinding_, 1);
          objc_msgSend(v15, sel_setCullMode_, 2);
          uint64_t v16 = v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer__nextBufferIndex;
          swift_beginAccess();
          float v27 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
          v27(v9, v16, v6);
          Atomic.wrappedValue.getter();
          long long v26 = *(void (**)(char *, uint64_t))(v7 + 8);
          v26(v9, v6);
          unint64_t v17 = v31;
          uint64_t v18 = (uint64_t *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_uniforms);
          swift_beginAccess();
          uint64_t v19 = *v18;
          BOOL v20 = (*v18 & 0xC000000000000001) == 0;
          uint64_t v28 = v16;
          if (!v20)
          {
            uint64_t v23 = v19;
            swift_bridgeObjectRetain();
            uint64_t v24 = MEMORY[0x24C533AF0](v17, v23);
            swift_bridgeObjectRelease();
            goto LABEL_13;
          }
          if ((v17 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v17 < *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            uint64_t v24 = *(void *)(v19 + 8 * v17 + 32);
            swift_unknownObjectRetain();
LABEL_13:
            objc_msgSend(v15, sel_setVertexBuffer_offset_atIndex_, v24, 0, 0);
            swift_unknownObjectRelease();
            objc_msgSend(v15, sel_setVertexBuffer_offset_atIndex_, v10, 0, 1);
            v27(v9, v28, v6);
            Atomic.wrappedValue.getter();
            v26(v9, v6);
            uint64_t v9 = (char *)v30;
            uint64_t v6 = *v18;
            if ((*v18 & 0xC000000000000001) == 0)
            {
              uint64_t v21 = v29;
              if ((v30 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else if (v30 < *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                uint64_t v22 = *(void *)(v6 + 8 * v30 + 32);
                swift_unknownObjectRetain();
LABEL_17:
                objc_msgSend(v15, sel_setFragmentBuffer_offset_atIndex_, v22, 0, 0);
                swift_unknownObjectRelease();
                objc_msgSend(v15, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_, 4, *(void *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_numTubeIndices), 1, v21, 0);
                objc_msgSend(v15, sel_endEncoding);
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                return;
              }
              __break(1u);
              goto LABEL_24;
            }
LABEL_21:
            swift_bridgeObjectRetain();
            uint64_t v22 = MEMORY[0x24C533AF0](v9, v6);
            swift_bridgeObjectRelease();
            uint64_t v21 = v29;
            goto LABEL_17;
          }
          __break(1u);
          goto LABEL_21;
        }
      }
    }
  }
}

uint64_t CameraPathRenderer.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_colorScheme;
  uint64_t v2 = type metadata accessor for ColorScheme();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer__nextBufferIndex;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<Int>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t CameraPathRenderer.__deallocating_deinit()
{
  CameraPathRenderer.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for CameraPathRenderer()
{
  return type metadata accessor for CameraPathRenderer();
}

uint64_t type metadata accessor for CameraPathRenderer()
{
  uint64_t result = type metadata singleton initialization cache for CameraPathRenderer;
  if (!type metadata singleton initialization cache for CameraPathRenderer) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for CameraPathRenderer()
{
  type metadata accessor for ColorScheme();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Atomic<Int>();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for Atomic<Int>()
{
  if (!lazy cache variable for type metadata for Atomic<Int>)
  {
    unint64_t v0 = type metadata accessor for Atomic();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Atomic<Int>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for CameraPathRenderer.RenderMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24661E43CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraPathRenderer.RenderMode()
{
  return &type metadata for CameraPathRenderer.RenderMode;
}

ValueMetadata *type metadata accessor for CameraPathRenderer.Descriptor()
{
  return &type metadata for CameraPathRenderer.Descriptor;
}

__n128 __swift_memcpy89_16(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CameraPathManager.PoseSample(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 88);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraPathManager.PoseSample(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 89) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 88) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraPathManager.PoseSample()
{
  return &type metadata for CameraPathManager.PoseSample;
}

unint64_t lazy protocol witness table accessor for type CameraPathRenderer.RenderMode and conformance CameraPathRenderer.RenderMode()
{
  unint64_t result = lazy protocol witness table cache variable for type CameraPathRenderer.RenderMode and conformance CameraPathRenderer.RenderMode;
  if (!lazy protocol witness table cache variable for type CameraPathRenderer.RenderMode and conformance CameraPathRenderer.RenderMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraPathRenderer.RenderMode and conformance CameraPathRenderer.RenderMode);
  }
  return result;
}

void specialized TubeGenerator.computeNormals(numPoints:vertices:indices:)(uint64_t a1, float32x4_t *a2, uint64_t a3, __n128 a4, __n128 a5, double a6, double a7, double a8, float32x4_t a9)
{
  uint64_t v56 = *(void *)(v9 + 16);
  uint64_t v10 = *(void *)(v56 + 16);
  if (!v10)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (a3 / v10 != a1)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (__OFSUB__(a1, 1))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (((a1 - 1) & 0x8000000000000000) == 0)
  {
    if (a1 == 1)
    {
LABEL_34:
      uint64_t v46 = a3;
      if ((a3 & 0x8000000000000000) == 0)
      {
        if (a3)
        {
          uint64_t v47 = a2 + 1;
          do
          {
            int32x4_t v48 = (int32x4_t)vmulq_f32(*v47, *v47);
            v48.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v48, 2), vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1))).u32[0];
            float32x2_t v49 = vrsqrte_f32((float32x2_t)v48.u32[0]);
            float32x2_t v50 = vmul_f32(v49, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(v49, v49)));
            float32x4_t v51 = vmulq_n_f32(*v47, vmul_f32(v50, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(v50, v50))).f32[0]);
            v51.i32[3] = a4.n128_i32[3];
            *uint64_t v47 = v51;
            v47 += 4;
            --v46;
          }
          while (v46);
        }
        return;
      }
      goto LABEL_50;
    }
    uint64_t v12 = *(void *)(v9 + 24);
    unint64_t v13 = *(void *)(v12 + 16);
    unint64_t v14 = v13 - 3;
    if (v13 < 3) {
      goto LABEL_51;
    }
    uint64_t v55 = a1 - 1;
    LODWORD(v15) = 0;
    uint64_t v53 = (_DWORD *)(v12 + 40);
    int64_t v54 = v13 - 2;
    unint64_t v57 = v13 - 1;
    uint64_t v58 = 1;
    unint64_t v59 = v13 - 3;
    while (v57 == 2)
    {
LABEL_9:
      if (v58 == v55) {
        goto LABEL_34;
      }
      uint64_t v16 = *(void *)(v56 + 16);
      unint64_t v15 = v58 * v16;
      if ((unsigned __int128)(v58 * (__int128)v16) >> 64 != (v58 * v16) >> 63) {
        goto LABEL_44;
      }
      if ((v15 & 0x8000000000000000) == 0)
      {
        ++v58;
        if (!HIDWORD(v15)) {
          continue;
        }
      }
      goto LABEL_52;
    }
    unint64_t v17 = *(void *)(v12 + 16);
    if (v17 >= 3 && v54 < (uint64_t)v17)
    {
      unint64_t v19 = 0;
      BOOL v20 = v53;
      int v60 = v15;
      while (1)
      {
        unint64_t v26 = *(void *)(v12 + 16);
        if (v19 >= v26) {
          break;
        }
        int v27 = *(v20 - 2);
        BOOL v28 = __CFADD__(v15, v27);
        uint64_t v29 = (v15 + v27);
        if (v28) {
          goto LABEL_40;
        }
        if (v19 + 1 >= v26) {
          goto LABEL_41;
        }
        int v30 = *(v20 - 1);
        BOOL v28 = __CFADD__(v15, v30);
        uint64_t v31 = (v15 + v30);
        if (v28) {
          goto LABEL_42;
        }
        if (__CFADD__(v15, *v20)) {
          goto LABEL_43;
        }
        id v32 = (float32x2_t *)&a2[4 * v29];
        float v33 = v32[1].f32[0];
        float32x4_t v34 = (float32x2_t *)&a2[4 * v31];
        float v35 = (float32x2_t *)&a2[4 * (unint64_t)(v15 + *v20)];
        *(float32x2_t *)a9.f32 = vsub_f32(*v34, *v32);
        a9.f32[2] = v34[1].f32[0] - v33;
        a5.n128_u64[0] = (unint64_t)vsub_f32(*v35, *v32);
        a5.n128_f32[2] = v35[1].f32[0] - v33;
        int8x16_t v36 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a5, (int32x4_t)a5), (int8x16_t)a5, 0xCuLL), vnegq_f32(a9)), (float32x4_t)a5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a9, (int32x4_t)a9), (int8x16_t)a9, 0xCuLL));
        v37.i32[0] = vextq_s8(v36, v36, 8uLL).u32[0];
        v37.i32[1] = v36.i32[0];
        *(float32x2_t *)v21.f32 = vmul_f32(v37, (float32x2_t)0x3F0000003F000000);
        v21.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(0.5, *(float32x2_t *)v36.i8, 1));
        int32x4_t v38 = (int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v21), (int8x16_t)vcgezq_f32(v21)));
        if (vaddq_s32(vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v38.i8, 1), v38), vdupq_laneq_s32(v38, 2)).i32[0] >= 1)
        {
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v39 = type metadata accessor for Logger();
          __swift_project_value_buffer(v39, (uint64_t)logger);
          id v40 = Logger.logObject.getter();
          os_log_type_t v41 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v40, v41))
          {
            os_log_type_t v42 = a2;
            uint64_t v43 = v12;
            uint64_t v44 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v44 = 0;
            _os_log_impl(&dword_2465C2000, v40, v41, "Cross product was nan!  Accumulating nothing!", v44, 2u);
            uint64_t v45 = v44;
            uint64_t v12 = v43;
            a2 = v42;
            unint64_t v14 = v59;
            MEMORY[0x24C5348D0](v45, -1, -1);
          }

          v21.i64[0] = qword_26FACB140;
          v21.i64[1] = *(unsigned int *)algn_26FACB148;
          LODWORD(v15) = v60;
        }
        uint64_t v22 = 1;
        if (((_BYTE)v19 + 2)) {
          uint64_t v22 = -1;
        }
        float v23 = vmuls_lane_f32((float)v22, v21, 2);
        float32x2_t v24 = vmul_n_f32(*(float32x2_t *)v21.f32, (float)v22);
        *(float32x2_t *)&long long v25 = vadd_f32(v32[2], v24);
        *((float *)&v25 + 2) = v32[3].f32[0] + v23;
        HIDWORD(v25) = 0;
        *(_OWORD *)v32[2].f32 = v25;
        a5.n128_u64[0] = (unint64_t)vadd_f32(v24, v34[2]);
        a5.n128_f32[2] = v23 + v34[3].f32[0];
        a5.n128_u32[3] = 0;
        *(__n128 *)v34[2].f32 = a5;
        a4.n128_u64[0] = (unint64_t)vadd_f32(v24, v35[2]);
        a4.n128_f32[2] = v23 + v35[3].f32[0];
        a4.n128_u32[3] = 0;
        *(__n128 *)v35[2].f32 = a4;
        ++v20;
        if (v14 == ++v19) {
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
    }
    __break(1u);
    goto LABEL_46;
  }
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized static TubeGenerator.createOrthonormalFrame(forward:up:)(float32x4_t a1, float32x4_t a2)
{
  int32x4_t v2 = (int32x4_t)vmulq_f32(a1, a1);
  if (sqrtf(*(float *)&v2.i32[2] + vaddv_f32(*(float32x2_t *)v2.i8)) <= 0.0001)
  {
    __break(1u);
    goto LABEL_9;
  }
  int32x4_t v3 = (int32x4_t)vmulq_f32(a2, a2);
  if (sqrtf(*(float *)&v3.i32[2] + vaddv_f32(*(float32x2_t *)v3.i8)) <= 0.0001)
  {
LABEL_9:
    __break(1u);
    return;
  }
  unsigned __int32 v4 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v2, 2), vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1))).u32[0];
  float32x2_t v5 = vrsqrte_f32((float32x2_t)v4);
  float32x2_t v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)v4, vmul_f32(v5, v5)));
  v7.columns[2] = (simd_float4)vmulq_n_f32(a1, vmul_f32(v6, vrsqrts_f32((float32x2_t)v4, vmul_f32(v6, v6))).f32[0]);
  v7.columns[0].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
  *(float32x2_t *)v7.columns[3].f32 = vrsqrte_f32((float32x2_t)v7.columns[0].u32[0]);
  *(float32x2_t *)v7.columns[3].f32 = vmul_f32(*(float32x2_t *)v7.columns[3].f32, vrsqrts_f32((float32x2_t)v7.columns[0].u32[0], vmul_f32(*(float32x2_t *)v7.columns[3].f32, *(float32x2_t *)v7.columns[3].f32)));
  v7.columns[3] = (simd_float4)vmulq_n_f32(a2, vmul_f32(*(float32x2_t *)v7.columns[3].f32, vrsqrts_f32((float32x2_t)v7.columns[0].u32[0], vmul_f32(*(float32x2_t *)v7.columns[3].f32, *(float32x2_t *)v7.columns[3].f32))).f32[0]);
  v7.columns[0] = (simd_float4)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7.columns[2], (int32x4_t)v7.columns[2]), (int8x16_t)v7.columns[2], 0xCuLL);
  v7.columns[1] = (simd_float4)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7.columns[3], (int32x4_t)v7.columns[3]), (int8x16_t)v7.columns[3], 0xCuLL), vnegq_f32((float32x4_t)v7.columns[2])), (float32x4_t)v7.columns[3], (float32x4_t)v7.columns[0]);
  v7.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v7.columns[1], (float32x4_t)v7.columns[1]);
  if (sqrtf(v7.columns[3].f32[1] + (float)(v7.columns[3].f32[2] + v7.columns[3].f32[0])) < 0.0001) {
    v7.columns[1] = (simd_float4)vmlaq_f32(vmulq_f32((float32x4_t)v7.columns[2], (float32x4_t)xmmword_2466B5E60), (float32x4_t)xmmword_2466B5E70, (float32x4_t)v7.columns[0]);
  }
  v7.columns[1] = (simd_float4)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7.columns[1], (int32x4_t)v7.columns[1]), (int8x16_t)v7.columns[1], 0xCuLL);
  v7.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v7.columns[1], (float32x4_t)v7.columns[1]);
  if (sqrtf(v7.columns[3].f32[2] + vaddv_f32(*(float32x2_t *)v7.columns[3].f32)) < 0.0001)
  {
    int32x4_t v8 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)v7.columns[2], (float32x4_t)xmmword_2466B5E20), (float32x4_t)xmmword_2466B5E30, (float32x4_t)v7.columns[0]);
    v7.columns[1] = (simd_float4)vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL);
  }
  v7.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v7.columns[1], (float32x4_t)v7.columns[1]);
  v7.columns[3].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v7.columns[3], 2), vadd_f32(*(float32x2_t *)v7.columns[3].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.columns[3].f32, 1))).u32[0];
  float32x2_t v9 = vrsqrte_f32((float32x2_t)v7.columns[3].u32[0]);
  float32x2_t v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.columns[3].u32[0], vmul_f32(v9, v9)));
  v7.columns[1] = (simd_float4)vmulq_n_f32((float32x4_t)v7.columns[1], vmul_f32(v10, vrsqrts_f32((float32x2_t)v7.columns[3].u32[0], vmul_f32(v10, v10))).f32[0]);
  v7.columns[0] = (simd_float4)vmlaq_f32(vmulq_f32((float32x4_t)v7.columns[0], vnegq_f32((float32x4_t)v7.columns[1])), (float32x4_t)v7.columns[2], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7.columns[1], (int32x4_t)v7.columns[1]), (int8x16_t)v7.columns[1], 0xCuLL));
  v7.columns[3] = (simd_float4)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7.columns[0], (int32x4_t)v7.columns[0]), (int8x16_t)v7.columns[0], 0xCuLL);
  v7.columns[0] = (simd_float4)vmulq_f32((float32x4_t)v7.columns[0], (float32x4_t)v7.columns[0]);
  v7.columns[0].i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.columns[0].f32, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v7.columns[0], 2), *(float32x2_t *)v7.columns[0].f32)).u32[0];
  float32x2_t v11 = vrsqrte_f32((float32x2_t)v7.columns[0].u32[0]);
  float32x2_t v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v7.columns[0].u32[0], vmul_f32(v11, v11)));
  v12.i32[0] = vmul_f32(v12, vrsqrts_f32((float32x2_t)v7.columns[0].u32[0], vmul_f32(v12, v12))).u32[0];
  *(float32x2_t *)v7.columns[0].f32 = vsub_f32(0, *(float32x2_t *)v7.columns[1].f32);
  v7.columns[0].f32[2] = 0.0 - v7.columns[1].f32[2];
  v7.columns[1] = (simd_float4)vmulq_n_f32((float32x4_t)v7.columns[3], v12.f32[0]);
  v7.columns[0].i32[3] = 0;
  simd_quaternion(v7);
}

void specialized CameraPathRenderer.render(into:viewport:renderPassDescriptor:)(void *a1, void *a2)
{
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_enabled) == 1)
  {
    uint64_t v3 = v2;
    uint64_t v6 = MEMORY[0x24C5349C0](v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_cameraPathManager);
    if (v6)
    {
      simd_float4x4 v7 = (void *)v6;
      uint64_t v8 = v6 + OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_shots;
      swift_beginAccess();
      if (*(void *)(*(void *)v8 + 16) >= 4uLL)
      {
        uint64_t v9 = OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_dirtyBuffers;
        if (*(unsigned char *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_dirtyBuffers) == 1)
        {
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v10 = type metadata accessor for Logger();
          __swift_project_value_buffer(v10, (uint64_t)logger);
          float32x2_t v11 = Logger.logObject.getter();
          os_log_type_t v12 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v11, v12))
          {
            unint64_t v13 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v13 = 0;
            _os_log_impl(&dword_2465C2000, v11, v12, "Dirty buffers, recreating cameraSpline resources...", v13, 2u);
            MEMORY[0x24C5348D0](v13, -1, -1);
          }

          if (*(unsigned char *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_renderMode) != 1)
          {
            __break(1u);
            return;
          }
          CameraPathRenderer.initLineBufferForCameraSpline()();
          CameraPathRenderer.initTubeBufferForCameraSpline()();
          *(unsigned char *)(v3 + v9) = 0;
        }
        if (*(unsigned char *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_renderMode))
        {
          if (*(void *)(*(void *)v8 + 16) >= 2uLL) {
            CameraPathRenderer.renderTube(into:renderPassDescriptor:)(a1, a2);
          }
        }
        else
        {
          CameraPathRenderer.renderLines(into:renderPassDescriptor:)(a1, a2);
        }
      }
    }
  }
}

unint64_t lazy protocol witness table accessor for type ColorScheme and conformance ColorScheme()
{
  unint64_t result = lazy protocol witness table cache variable for type ColorScheme and conformance ColorScheme;
  if (!lazy protocol witness table cache variable for type ColorScheme and conformance ColorScheme)
  {
    type metadata accessor for ColorScheme();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorScheme and conformance ColorScheme);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CameraPathRenderer.Error and conformance CameraPathRenderer.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type CameraPathRenderer.Error and conformance CameraPathRenderer.Error;
  if (!lazy protocol witness table cache variable for type CameraPathRenderer.Error and conformance CameraPathRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraPathRenderer.Error and conformance CameraPathRenderer.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CameraPathRenderer.Error and conformance CameraPathRenderer.Error;
  if (!lazy protocol witness table cache variable for type CameraPathRenderer.Error and conformance CameraPathRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraPathRenderer.Error and conformance CameraPathRenderer.Error);
  }
  return result;
}

unint64_t type metadata accessor for OS_geom_interpolating_curve_3f()
{
  unint64_t result = lazy cache variable for type metadata for OS_geom_interpolating_curve_3f;
  if (!lazy cache variable for type metadata for OS_geom_interpolating_curve_3f)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_geom_interpolating_curve_3f);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CameraPathRenderer.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24661EFB4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraPathRenderer.Error()
{
  return &type metadata for CameraPathRenderer.Error;
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t (*static TextComponent.renderBlock.getter())()
{
  swift_beginAccess();
  unint64_t v0 = static TextComponent.renderBlock;
  swift_retain();
  return v0;
}

uint64_t static TextComponent.renderBlock.setter(uint64_t (*a1)(), uint64_t a2)
{
  static TextComponent.renderBlock = a1;
  qword_26BA46628 = a2;
  return swift_release();
}

uint64_t (*static TextComponent.renderBlock.modify())()
{
  return FreeformMeshManager.meshAnchors.modify;
}

uint64_t (*protocol witness for static TextComponentRender.renderBlock.getter in conformance TextComponent())()
{
  swift_beginAccess();
  unint64_t v0 = static TextComponent.renderBlock;
  swift_retain();
  return v0;
}

uint64_t specialized closure #1 in variable initialization expression of static TextComponent.renderBlock(CGContext *a1, void *a2, double a3, double a4, double a5, double a6)
{
  CGContextRef v76 = a1;
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  MEMORY[0x270FA5388](v89);
  uint64_t v88 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for AttributedString.Runs.Run();
  uint64_t v12 = *(void *)(v102 - 8);
  MEMORY[0x270FA5388](v102);
  uint64_t v86 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString.Runs.Run?);
  MEMORY[0x270FA5388](v14 - 8);
  long long v108 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for AttributedString.Runs.Index();
  uint64_t v16 = *(void *)(v109 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v109);
  uint64_t v106 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  BOOL v20 = (char *)&v75 - v19;
  uint64_t v21 = type metadata accessor for AttributedString.Runs();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  float32x2_t v24 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<AttributedString.Runs>);
  uint64_t v26 = v25 - 8;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v75 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  int v75 = (char *)&v75 - v30;
  uint64_t v98 = type metadata accessor for AttributedString();
  uint64_t v77 = *(void *)(v98 - 8);
  uint64_t v31 = MEMORY[0x270FA5388](v98);
  long long v87 = (char *)&v75 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  float32x4_t v34 = (char *)&v75 - v33;
  id v104 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F089B8]), sel_initWithAttributedString_, a2);
  id v35 = a2;
  AttributedString.init(_:)();
  unsigned __int8 v97 = v34;
  AttributedString.runs.getter();
  int8x16_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v94 = v22 + 16;
  uint64_t v93 = v36;
  v36(v29, (uint64_t)v24, v21);
  uint64_t v103 = lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x263F067C8]);
  dispatch thunk of Collection.startIndex.getter();
  float32x2_t v37 = *(void (**)(char *, uint64_t))(v22 + 8);
  id v95 = v24;
  int32x4_t v38 = v24;
  uint64_t v39 = v21;
  uint64_t v96 = v22 + 8;
  float32x4_t v92 = v37;
  v37(v38, v21);
  uint64_t v40 = (uint64_t)v75;
  os_log_type_t v41 = &v29[*(int *)(v26 + 44)];
  os_log_type_t v42 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  long long v105 = v20;
  v42(v41, v20, v109);
  outlined init with take of IndexingIterator<AttributedString.Runs>((uint64_t)v29, v40);
  uint64_t v43 = v40 + *(int *)(v26 + 44);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v107 = v16 + 16;
  uint64_t v99 = (void (**)(char *, uint64_t))(v16 + 8);
  int v100 = v44;
  id v91 = (void (**)(char *))(v12 + 16);
  uint64_t v101 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  char v90 = (uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  long long v85 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v84 = (void (**)(char *, char *, uint64_t))(v77 + 16);
  uint64_t v82 = *MEMORY[0x263F81500];
  uint64_t v81 = *MEMORY[0x263F814A8];
  uint64_t v80 = *MEMORY[0x263F814B8];
  uint64_t v79 = *MEMORY[0x263F81510];
  long long v83 = (void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v78 = *MEMORY[0x263F815E8];
  while (1)
  {
    uint64_t v45 = v105;
    uint64_t v46 = v109;
    v100(v105, v43, v109);
    uint64_t v47 = v106;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, MEMORY[0x263F067B8]);
    char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v49 = v40;
    float32x2_t v50 = *v99;
    (*v99)(v47, v46);
    v50(v45, v46);
    if (v48) {
      break;
    }
    float32x4_t v51 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
    int v52 = v108;
    uint64_t v53 = v102;
    (*v91)(v108);
    v51(&v110, 0);
    int64_t v54 = v95;
    v93(v95, v49, v39);
    uint64_t v55 = v53;
    dispatch thunk of Collection.formIndex(after:)();
    uint64_t v56 = v39;
    v92(v54, v39);
    (*v101)(v52, 0, 1, v53);
    int v57 = (*v90)(v52, 1, v53);
    uint64_t v58 = v104;
    if (v57 == 1) {
      goto LABEL_16;
    }
    uint64_t v59 = v49;
    int v60 = v86;
    (*v85)(v86, v52, v53);
    AttributedString.Runs.Run.range.getter();
    (*v84)(v87, v97, v98);
    lazy protocol witness table accessor for type Range<AttributedString.Index> and conformance Range<A>();
    lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x263F06828]);
    uint64_t v61 = _NSRange.init<A, B>(_:in:)();
    uint64_t v63 = v62;
    uint64_t KeyPath = swift_getKeyPath();
    *(&v75 - 2) = (char *)MEMORY[0x270FA5388](KeyPath);
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    if (v110)
    {
      type metadata accessor for UIColor();
      swift_retain();
      int v65 = (void *)UIColor.init(_:)();
      objc_msgSend(v58, sel_addAttribute_value_range_, v82, v65, v61, v63);
      swift_release();
    }
    uint64_t v66 = swift_getKeyPath();
    *(&v75 - 2) = (char *)MEMORY[0x270FA5388](v66);
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    if (v110)
    {
      type metadata accessor for UIColor();
      swift_retain();
      uint64_t v67 = (void *)UIColor.init(_:)();
      objc_msgSend(v58, sel_addAttribute_value_range_, v81, v67, v61, v63);
      swift_release();
    }
    uint64_t v68 = swift_getKeyPath();
    *(&v75 - 2) = (char *)MEMORY[0x270FA5388](v68);
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    if ((v111 & 1) == 0)
    {
      Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v58, sel_addAttribute_value_range_, v80, isa, v61, v63);
    }
    uint64_t v70 = swift_getKeyPath();
    *(&v75 - 2) = (char *)MEMORY[0x270FA5388](v70);
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    if ((v111 & 1) == 0)
    {
      Class v71 = CGFloat._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v58, sel_addAttribute_value_range_, v79, v71, v61, v63);
    }
    uint64_t v72 = swift_getKeyPath();
    *(&v75 - 2) = (char *)MEMORY[0x270FA5388](v72);
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    if ((v111 & 1) == 0)
    {
      Class v73 = CGFloat._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v58, sel_addAttribute_value_range_, v78, v73, v61, v63);
    }
    (*v83)(v60, v55);
    uint64_t v40 = v59;
    uint64_t v39 = v56;
  }
  (*v101)(v108, 1, 1, v102);
  uint64_t v58 = v104;
LABEL_16:
  outlined destroy of IndexingIterator<AttributedString.Runs>(v49);
  UIGraphicsPushContext(v76);
  objc_msgSend(v58, sel_drawInRect_, a3, a4, a5, a6);
  UIGraphicsPopContext();

  return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v97, v98);
}

uint64_t outlined init with take of IndexingIterator<AttributedString.Runs>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<AttributedString.Runs>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of IndexingIterator<AttributedString.Runs>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<AttributedString.Runs>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Range<AttributedString.Index> and conformance Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>;
  if (!lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_24661FFE4()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute);
  }
  return result;
}

void sub_246620058()
{
}

uint64_t sub_246620080()
{
  return 8;
}

uint64_t sub_24662008C()
{
  return swift_release();
}

uint64_t sub_246620094(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_2466200A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>)(a1, a2, a3, &demangling cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>) & 1;
}

uint64_t sub_2466200C4(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &demangling cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>);
}

void *sub_2466200D0(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_2466200DC()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute);
  }
  return result;
}

void sub_246620150()
{
}

uint64_t sub_246620178()
{
  return 8;
}

uint64_t sub_246620184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>)(a1, a2, a3, &demangling cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>) & 1;
}

uint64_t sub_2466201A8(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &demangling cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>);
}

void sub_2466201B4()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute);
  }
  return result;
}

void sub_246620228()
{
}

uint64_t sub_246620250()
{
  return 8;
}

uint64_t sub_24662025C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>)(a1, a2, a3, &demangling cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>) & 1;
}

uint64_t sub_246620280(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &demangling cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>);
}

void sub_24662028C()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute);
  }
  return result;
}

void sub_246620300()
{
}

uint64_t sub_246620328()
{
  return 8;
}

uint64_t sub_246620334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>)(a1, a2, a3, &demangling cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>) & 1;
}

uint64_t sub_246620358(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &demangling cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>);
}

void sub_246620364()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute);
  }
  return result;
}

void sub_2466203D8()
{
}

uint64_t sub_246620400()
{
  return 8;
}

uint64_t sub_24662040C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>)(a1, a2, a3, &demangling cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>) & 1;
}

uint64_t sub_246620430(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &demangling cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>);
}

uint64_t keypath_hashTm(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return dispatch thunk of Hashable.hashValue.getter();
}

unint64_t type metadata accessor for UIColor()
{
  unint64_t result = lazy cache variable for type metadata for UIColor;
  if (!lazy cache variable for type metadata for UIColor)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  }
  return result;
}

uint64_t ContinuousShotCircle.addShot(position:)(float32x4_t a1)
{
  uint64_t v4 = v1;
  uint64_t result = specialized static ContinuousShotCircle.ShotData.toUnitVector(position:)(a1);
  if (v2) {
    return result;
  }
  uint64_t v7 = static ContinuousShotCircle.ShotData.nextID;
  if (__OFADD__(static ContinuousShotCircle.ShotData.nextID, 1))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v3 = v6;
  ++static ContinuousShotCircle.ShotData.nextID;
  if (one-time initialization token for logger != -1) {
LABEL_13:
  }
    swift_once();
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    uint64_t v21 = v12;
    uint64_t v22 = v7;
    uint64_t v23 = v3;
    uint64_t v13 = String.init<A>(describing:)();
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v9, v10, "Adding shot: %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v12, -1, -1);
    MEMORY[0x24C5348D0](v11, -1, -1);
  }

  uint64_t v15 = (void *)(v4 + 16);
  swift_beginAccess();
  uint64_t v16 = *(void **)(v4 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 16) = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    *uint64_t v15 = v16;
  }
  unint64_t v19 = v16[2];
  unint64_t v18 = v16[3];
  if (v19 >= v18 >> 1)
  {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v16);
    *uint64_t v15 = v16;
  }
  v16[2] = v19 + 1;
  BOOL v20 = &v16[2 * v19];
  v20[4] = v7;
  v20[5] = v3;
  return swift_endAccess();
}

uint64_t ContinuousShotCircle.distancesTo(queryAngle:)(float a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B7740;
  __float2 v4 = __sincosf_stret(a1);
  *(float *)(inited + 32) = v4.__cosval;
  *(float *)(inited + 36) = v4.__sinval;
  specialized SIMD.init<A>(_:)(inited);
  float32x2_t v6 = v5;
  swift_setDeallocating();
  swift_beginAccess();
  uint64_t v7 = *(void *)(v1 + 16);
  int64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (v8)
  {
    uint64_t v27 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    float32x2_t v10 = vmul_f32(v6, v6);
    uint64_t v9 = v27;
    unsigned __int32 v11 = vadd_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1)).u32[0];
    float v12 = sqrtf(vaddv_f32(v10));
    uint64_t v13 = 40;
    float32x2_t v14 = vrsqrte_f32((float32x2_t)v11);
    float32x2_t v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v11, vmul_f32(v14, v14)));
    float32x2_t v16 = vmul_n_f32(v6, vmul_f32(v15, vrsqrts_f32((float32x2_t)v11, vmul_f32(v15, v15))).f32[0]);
    do
    {
      float v17 = 0.0;
      if (v12 > 0.0001)
      {
        float32x2_t v18 = *(float32x2_t *)(v7 + v13);
        float32x2_t v19 = vmul_f32(v18, v18);
        if (sqrtf(vaddv_f32(v19)) > 0.0001)
        {
          unsigned __int32 v20 = vadd_f32(v19, (float32x2_t)vdup_lane_s32((int32x2_t)v19, 1)).u32[0];
          float32x2_t v21 = vrsqrte_f32((float32x2_t)v20);
          float32x2_t v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v20, vmul_f32(v21, v21)));
          float v23 = vaddv_f32(vmul_f32(v16, vmul_n_f32(v18, vmul_f32(v22, vrsqrts_f32((float32x2_t)v20, vmul_f32(v22, v22))).f32[0])));
          if (v23 <= -1.0) {
            float v23 = -1.0;
          }
          if (v23 > 1.0) {
            float v23 = 1.0;
          }
          float v17 = acosf(v23);
        }
      }
      unint64_t v25 = *(void *)(v27 + 16);
      unint64_t v24 = *(void *)(v27 + 24);
      if (v25 >= v24 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      }
      *(void *)(v27 + 16) = v25 + 1;
      *(float *)(v27 + 4 * v25 + 32) = v17;
      v13 += 16;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t ContinuousShotCircle.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ContinuousShotCircle()
{
  return self;
}

double CaptureCircle.Bin.minUpdateRange.getter()
{
  if ((*(unsigned char *)(v0 + 112) & 1) == 0) {
    return *(double *)(v0 + 104);
  }
  double result = *(double *)(v0 + 24) / 100.0;
  *(double *)(v0 + 104) = result;
  *(unsigned char *)(v0 + 112) = 0;
  return result;
}

uint64_t CaptureCircle.Bin.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CaptureCircle.Bin(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a1 + 16) == *(void *)(*(void *)a2 + 16);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CaptureCircle.OccupyCriteria()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CaptureCircle.OccupyCriteria()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CaptureCircle.OccupyCriteria()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CaptureCircle.OccupyCriteria@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CaptureCircle.OccupyCriteria.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CaptureCircle.OccupyCriteria(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x6C6E4F73746F6873;
  if (*v1) {
    unint64_t v2 = 0xD000000000000012;
  }
  unint64_t v3 = 0x80000002466BE2B0;
  if (!*v1) {
    unint64_t v3 = 0xE900000000000079;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CaptureCircle.OccupyCriteria(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

float one-time initialization function for nearestNeighborThreshRads()
{
  float result = specialized static ExperimentSettings.loadCaptureCircleBinShotNeighborThreshDegs(default:)(20.0) * 0.017453;
  static CaptureCircle.nearestNeighborThreshRads = LODWORD(result);
  return result;
}

uint64_t CaptureCircle.init(numBins:binFillAnimDurationSecs:)(uint64_t a1, float a2)
{
  uint64_t v5 = static CaptureCircle.nextId;
  if (__OFADD__(static CaptureCircle.nextId, 1))
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v2 = v3;
  uint64_t v4 = a1;
  ++static CaptureCircle.nextId;
  *(void *)(v3 + 16) = v5;
  *(unsigned char *)(v3 + 24) = specialized static ExperimentSettings.loadCaptureCircleOccupyCriteria(default:)(0) & 1;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0xFFF0000000000000;
  *(void *)(v3 + 80) = 0;
  *(unsigned char *)(v3 + 88) = 1;
  *(void *)(v3 + 96) = 0;
  *(unsigned char *)(v3 + 104) = 1;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(unsigned char *)(v3 + 176) = 1;
  *(void *)(v3 + 184) = 0xFFF0000000000000;
  *(float *)(v3 + 192) = specialized static ExperimentSettings.loadCaptureCircleVerticalExclusionAngleDegs(default:)(10.0)
                       * 0.017453;
  *(_OWORD *)(v3 + 200) = xmmword_2466B98C0;
  *(void *)(v3 + 216) = 0x3FD51EB851EB851FLL;
  type metadata accessor for ContinuousShotCircle();
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = MEMORY[0x263F8EE78];
  *(void *)(v7 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v3 + 72) = v8;
  v3 += 72;
  *(void *)(v3 + 160) = 0;
  *(void *)(v3 + 168) = 0;
  *(void *)(v3 + 152) = v7;
  *(unsigned char *)(v3 + 176) = 1;
  *(void *)(v3 - 40) = v4;
  *(float *)(v3 - 32) = a2;
  if (v4 < 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    swift_once();
    uint64_t v9 = *(void *)(v2 + 32);
    goto LABEL_5;
  }
  if (!v4) {
    return v2;
  }
  uint64_t v9 = v4;
  if (one-time initialization token for nearestNeighborThreshRads != -1) {
    goto LABEL_13;
  }
LABEL_5:
  double v10 = 6.28318531 / (double)v9;
  int v11 = static CaptureCircle.nearestNeighborThreshRads;
  swift_beginAccess();
  type metadata accessor for CaptureCircle.Bin();
  uint64_t v12 = 0;
  do
  {
    uint64_t v13 = swift_allocObject();
    *(_DWORD *)(v13 + 32) = v11;
    *(unsigned char *)(v13 + 36) = 0;
    *(void *)(v13 + 40) = 0xFFF0000000000000;
    *(void *)(v13 + 48) = 0;
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
    *(unsigned char *)(v13 + 72) = 1;
    *(void *)(v13 + 80) = 0;
    *(unsigned char *)(v13 + 88) = 1;
    *(_DWORD *)(v13 + 92) = 2139095040;
    *(void *)(v13 + 96) = 0;
    *(void *)(v13 + 104) = 0;
    *(unsigned char *)(v13 + 112) = 1;
    *(void *)(v13 + 16) = v12;
    *(double *)(v13 + 24) = v10;
    MEMORY[0x24C533580]();
    if (*(void *)((*(void *)v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v3 & 0xFFFFFFFFFFFFFF8)
                                                                                + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    ++v12;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  while (v4 != v12);
  swift_endAccess();
  return v2;
}

uint64_t CaptureCircle.isAnimationFinished.getter()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  unint64_t v2 = *(void *)(v0 + 72);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
    {
LABEL_3:
      uint64_t v17 = MEMORY[0x263F8EE78];
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
      if (v3 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v5 = 0;
      uint64_t v6 = v17;
      do
      {
        if ((v2 & 0xC000000000000001) != 0) {
          uint64_t v7 = MEMORY[0x24C533AF0](v5, v2);
        }
        else {
          uint64_t v7 = swift_retain();
        }
        uint64_t v8 = *(void *)(v7 + 40);
        swift_release();
        unint64_t v10 = *(void *)(v17 + 16);
        unint64_t v9 = *(void *)(v17 + 24);
        if (v10 >= v9 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        }
        ++v5;
        *(void *)(v17 + 16) = v10 + 1;
        *(void *)(v17 + 8 * v10 + 32) = v8;
      }
      while (v3 != v5);
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(v17 + 16);
      if (v11) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (v11)
  {
LABEL_12:
    double v12 = *(double *)(v6 + 32);
    uint64_t v13 = v11 - 1;
    if (v13)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v15 = v6 + 8 * i;
        if (v12 < *(double *)(v15 + 40)) {
          double v12 = *(double *)(v15 + 40);
        }
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
LABEL_20:
  swift_bridgeObjectRelease();
  double v12 = *(double *)(v1 + 184);
LABEL_21:
  double v16 = 0.0;
  if ((*(unsigned char *)(v1 + 248) & 1) == 0) {
    double v16 = *(float *)(v1 + 240) + 0.0;
  }
  return v16 + v12 + *(float *)(v1 + 40) < *(double *)(v1 + 184);
}

void CaptureCircle.update(arView:boundingBoxWorld:time:)(__n128 a1, __n128 a2, __n128 a3, __n128 a4, double a5)
{
  uint64_t v6 = v5;
  v5[7] = a1;
  v5[8] = a2;
  v5[9] = a3;
  v5[10] = a4;
  v5[11].n128_u8[0] = 0;
  dispatch thunk of ARView.cameraTransform.getter();
  *(double *)v10.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(v9, v8);
  float32x4_t v36 = v10;
  float32x4_t v37 = v11;
  float32x4_t v38 = v12;
  float32x4_t v39 = v13;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CaptureCircle.cameraPositionInObjectCoordinates(cameraWorld:boundingBoxWorld:));
  float32x4_t v40 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v36, v14.f32[0]), v37, *(float32x2_t *)v14.f32, 1), v38, v14, 2), v39, v14, 3);
  Transform.init(matrix:)();
  double v41 = v16;
  float32x4_t v43 = v15;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of CaptureCircle.cameraPositionInObjectCoordinates(cameraWorld:boundingBoxWorld:));
  *(double *)v45.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(v41, v43);
  simd_float4x4 v46 = __invert_f4(v45);
  float32x4_t v17 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v46.columns[0], v40.f32[0]), (float32x4_t)v46.columns[1], *(float32x2_t *)v40.f32, 1), (float32x4_t)v46.columns[2], v40, 2), (float32x4_t)v46.columns[3], v40, 3);
  float v18 = v5[12].n128_f32[0];
  v46.columns[0] = (simd_float4)vmulq_f32(v17, v17);
  v46.columns[0].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v46.columns[0], 2), vadd_f32(*(float32x2_t *)v46.columns[0].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.columns[0].f32, 1))).u32[0];
  *(float32x2_t *)v46.columns[1].f32 = vrsqrte_f32((float32x2_t)v46.columns[0].u32[0]);
  *(float32x2_t *)v46.columns[1].f32 = vmul_f32(*(float32x2_t *)v46.columns[1].f32, vrsqrts_f32((float32x2_t)v46.columns[0].u32[0], vmul_f32(*(float32x2_t *)v46.columns[1].f32, *(float32x2_t *)v46.columns[1].f32)));
  float32x4_t v42 = v17;
  float32x4_t v44 = vmulq_n_f32(v17, vmul_f32(*(float32x2_t *)v46.columns[1].f32, vrsqrts_f32((float32x2_t)v46.columns[0].u32[0], vmul_f32(*(float32x2_t *)v46.columns[1].f32, *(float32x2_t *)v46.columns[1].f32))).f32[0]);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CaptureCircle.update(arView:boundingBoxWorld:time:));
  specialized static MathHelpers.angleBetween(_:_:)(v44, v19);
  if (v20 < v18)
  {
    if (one-time initialization token for logger == -1)
    {
LABEL_3:
      uint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)logger);
      float32x2_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        unint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v24 = 0;
        _os_log_impl(&dword_2465C2000, v22, v23, "Within vertical exclusion cone, not updating capture circle!", v24, 2u);
        MEMORY[0x24C5348D0](v24, -1, -1);
      }

      goto LABEL_28;
    }
LABEL_33:
    swift_once();
    goto LABEL_3;
  }
  double v25 = atan2f(v42.f32[2], v42.f32[0]);
  uint64_t v26 = specialized static CaptureCircle.angleToBinIndex(theta:numBins:)(v5[2].n128_i64[0], v25);
  unint64_t v27 = v26;
  v6[3].n128_u64[0] = v26;
  v6[3].n128_f64[1] = v25;
  if ((v6[6].n128_u8[8] & 1) == 0 && v6[6].n128_u64[0] == v26) {
    goto LABEL_28;
  }
  swift_beginAccess();
  unint64_t v28 = v6[4].n128_u64[1];
  if ((v28 & 0xC000000000000001) == 0)
  {
    if ((v27 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v27 < *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v29 = *(void *)(v28 + 8 * v27 + 32);
      swift_retain();
      if (*(unsigned char *)(v29 + 72)) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    __break(1u);
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  uint64_t v29 = MEMORY[0x24C533AF0](v27, v28);
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v29 + 72)) {
    goto LABEL_13;
  }
LABEL_12:
  if (*(unsigned char *)(v29 + 88) != 1)
  {
    double v35 = *(double *)(v29 + 80);
    if (*(double *)(v29 + 64) > v25)
    {
      *(double *)(v29 + 64) = v25;
      *(unsigned char *)(v29 + 72) = 0;
    }
    if (v35 >= v25) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_13:
  *(double *)(v29 + 64) = v25;
  *(unsigned char *)(v29 + 72) = 0;
LABEL_14:
  *(double *)(v29 + 80) = v25;
  *(unsigned char *)(v29 + 88) = 0;
LABEL_15:
  CaptureCircle.updateOccupancy(bin:time:)(v29, a5);
  if (v30)
  {
    v6[6].n128_u64[0] = v6[3].n128_u64[0];
    v6[6].n128_u8[8] = 0;
    if (v6[5].n128_u8[8] == 1)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)logger);
      swift_retain();
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v32, v33))
      {
        float32x4_t v34 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)float32x4_t v34 = 134349056;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_2465C2000, v32, v33, "Setting first occupied bin to: %{public}ld", v34, 0xCu);
        MEMORY[0x24C5348D0](v34, -1, -1);
      }
      else
      {

        swift_release();
      }
      v6[5].n128_u64[0] = v6[3].n128_u64[0];
      v6[5].n128_u8[8] = 0;
    }
  }
  CaptureCircle.updateCircleCompletionAnimation(t:)(a5);
  swift_release();
LABEL_28:
  v6[11].n128_f64[1] = a5;
}

Swift::Void __swiftcall CaptureCircle.onShotTaken(at:cameraTransformWorld:)(Swift::Double at, simd_float4x4 *cameraTransformWorld)
{
  uint64_t v7 = v2;
  float32x4_t v46 = v3;
  float32x4_t v47 = v4;
  float32x4_t v48 = v5;
  float32x4_t v49 = v6;
  Transform.init(matrix:)();
  if (one-time initialization token for logger != -1) {
LABEL_39:
  }
    swift_once();
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  double v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    v51.i64[0] = v12;
    *(_DWORD *)uint64_t v11 = 134349314;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2082;
    uint64_t v13 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, (uint64_t *)&v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v9, v10, "onShotTaken: timsetamp=%{public}f  cameraWorld is: %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v12, -1, -1);
    MEMORY[0x24C5348D0](v11, -1, -1);
  }

  if ((*(unsigned char *)(v7 + 176) & 1) == 0)
  {
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CaptureCircle.cameraPositionInObjectCoordinates(cameraWorld:boundingBoxWorld:));
    float32x4_t v50 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v46, v18.f32[0]), v47, *(float32x2_t *)v18.f32, 1), v48, v18, 2), v49, v18, 3);
    Transform.init(matrix:)();
    float32x4_t v47 = v20;
    float32x4_t v48 = v19;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of CaptureCircle.cameraPositionInObjectCoordinates(cameraWorld:boundingBoxWorld:));
    *(double *)v53.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v47.i64, v48);
    simd_float4x4 v54 = __invert_f4(v53);
    float32x4_t v49 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v54.columns[0], v50.f32[0]), (float32x4_t)v54.columns[1], *(float32x2_t *)v50.f32, 1), (float32x4_t)v54.columns[2], v50, 2), (float32x4_t)v54.columns[3], v50, 3);
    float v21 = atan2f(v49.f32[2], v49.f32[0]);
    unint64_t v22 = specialized static CaptureCircle.angleToBinIndex(theta:numBins:)(*(void *)(v7 + 32), v21);
    swift_beginAccess();
    unint64_t v23 = *(void *)(v7 + 72);
    if ((v23 & 0xC000000000000001) == 0)
    {
      if ((v22 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v22 < *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v24 = *(void *)(v23 + 8 * v22 + 32);
        swift_retain();
        goto LABEL_11;
      }
      __break(1u);
      goto LABEL_43;
    }
    swift_bridgeObjectRetain();
    uint64_t v24 = MEMORY[0x24C533AF0](v22, v23);
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v25 = *(void *)(v24 + 56);
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    float32x4_t v28 = v49;
    if (!v26)
    {
      v28.i32[3] = 0;
      float32x4_t v49 = v28;
      *(void *)(v24 + 56) = v27;
      swift_release();
      *(void *)(v7 + 64) = *(void *)(v7 + 184);
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        v52[0] = v32;
        *(_DWORD *)uint64_t v31 = 136446210;
        float32x4_t v51 = v49;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
        lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>();
        uint64_t v33 = SIMD.description.getter();
        v51.i64[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v29, v30, "Adding shot to capture circle container.  camPosObject: %{public}s", v31, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v32, -1, -1);
        MEMORY[0x24C5348D0](v31, -1, -1);
      }

      ContinuousShotCircle.addShot(position:)(v49);
      CaptureCircle.recalculateShotDistances()();
      unint64_t v23 = *(void *)(v7 + 72);
      if (!(v23 >> 62))
      {
        uint64_t v35 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v35)
        {
LABEL_16:
          if (v35 < 1)
          {
            __break(1u);
            return;
          }
          uint64_t v36 = 0;
          int v37 = *(unsigned __int8 *)(v7 + 24);
          do
          {
            if ((v23 & 0xC000000000000001) != 0)
            {
              uint64_t v38 = MEMORY[0x24C533AF0](v36, v23);
            }
            else
            {
              uint64_t v38 = *(void *)(v23 + 8 * v36 + 32);
              swift_retain();
            }
            uint64_t v39 = *(void *)(v7 + 184);
            uint64_t v40 = *(void *)(v38 + 96);
            if (v37)
            {
              double updated = 0.0;
              if ((*(unsigned char *)(v38 + 72) & 1) == 0 && (*(unsigned char *)(v38 + 88) & 1) == 0)
              {
                double v42 = *(double *)(v38 + 80) - *(double *)(v38 + 64);
                double updated = CaptureCircle.Bin.minUpdateRange.getter();
                if (v42 > updated) {
                  double updated = v42;
                }
              }
              if (updated / *(double *)(v38 + 24) < 0.005 || v40 < 2) {
                goto LABEL_18;
              }
            }
            else if (v40 < 2)
            {
              goto LABEL_18;
            }
            if ((*(unsigned char *)(v38 + 36) & 1) == 0)
            {
              *(unsigned char *)(v38 + 36) = 1;
              *(void *)(v38 + 40) = v39;
            }
            uint64_t v44 = *(void *)(v38 + 48);
            BOOL v26 = __OFADD__(v44, 1);
            uint64_t v45 = v44 + 1;
            if (v26)
            {
              __break(1u);
              goto LABEL_39;
            }
            *(void *)(v38 + 48) = v45;
            *(void *)(v38 + 64) = 0;
            *(unsigned char *)(v38 + 72) = 1;
            *(void *)(v38 + 80) = 0;
            *(unsigned char *)(v38 + 88) = 1;
LABEL_18:
            ++v36;
            swift_release();
          }
          while (v35 != v36);
        }
LABEL_45:
        swift_bridgeObjectRelease();
        return;
      }
LABEL_44:
      swift_bridgeObjectRetain();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
      if (v35) {
        goto LABEL_16;
      }
      goto LABEL_45;
    }
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  float32x4_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    float32x4_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)float32x4_t v17 = 0;
    _os_log_impl(&dword_2465C2000, v15, v16, "onShotTaken called when we don't have a bounding box!  Ignoring...", v17, 2u);
    MEMORY[0x24C5348D0](v17, -1, -1);
  }
}

void CaptureCircle.updateOccupancy(bin:time:)(uint64_t a1, double a2)
{
  uint64_t v5 = *(void *)(a1 + 96);
  if (*(unsigned char *)(v2 + 24) != 1)
  {
    if (v5 < 2) {
      return;
    }
    goto LABEL_13;
  }
  double updated = 0.0;
  if ((*(unsigned char *)(a1 + 72) & 1) == 0 && (*(unsigned char *)(a1 + 88) & 1) == 0)
  {
    double v7 = *(double *)(a1 + 80) - *(double *)(a1 + 64);
    double updated = CaptureCircle.Bin.minUpdateRange.getter();
    if (v7 > updated) {
      double updated = v7;
    }
  }
  if (updated / *(double *)(a1 + 24) >= 0.005 && v5 >= 2)
  {
LABEL_13:
    if ((*(unsigned char *)(a1 + 36) & 1) == 0)
    {
      *(unsigned char *)(a1 + 36) = 1;
      *(double *)(a1 + 40) = a2;
    }
    uint64_t v9 = *(void *)(a1 + 48);
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10)
    {
      __break(1u);
    }
    else
    {
      *(void *)(a1 + 48) = v11;
      *(void *)(a1 + 64) = 0;
      *(unsigned char *)(a1 + 72) = 1;
      *(void *)(a1 + 80) = 0;
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
}

void CaptureCircle.updateCircleCompletionAnimation(t:)(double a1)
{
  if (*(unsigned char *)(v1 + 248) != 1) {
    return;
  }
  uint64_t v2 = v1;
  int v4 = *(unsigned __int8 *)(v1 + 24);
  uint64_t v5 = (unint64_t *)(v1 + 72);
  if (v4 == 1)
  {
    swift_beginAccess();
    unint64_t v6 = *v5;
    if (*v5 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (v7) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v7)
      {
LABEL_5:
        uint64_t v8 = 4;
        do
        {
          uint64_t v9 = v8 - 4;
          if ((v6 & 0xC000000000000001) != 0)
          {
            uint64_t v10 = MEMORY[0x24C533AF0](v8 - 4, v6);
            BOOL v11 = __OFADD__(v9, 1);
            uint64_t v12 = v8 - 3;
            if (v11) {
              goto LABEL_37;
            }
          }
          else
          {
            uint64_t v10 = swift_retain();
            BOOL v11 = __OFADD__(v9, 1);
            uint64_t v12 = v8 - 3;
            if (v11)
            {
LABEL_37:
              __break(1u);
              goto LABEL_38;
            }
          }
          int v13 = *(unsigned __int8 *)(v10 + 36);
          swift_release();
          if (v13 != 1) {
            goto LABEL_35;
          }
          ++v8;
        }
        while (v12 != v7);
      }
    }
    swift_bridgeObjectRelease_n();
    if ((*(unsigned char *)(v2 + 88) & 1) == 0)
    {
      unint64_t v14 = *(void *)(v2 + 80);
      unint64_t v15 = *v5;
      if ((v15 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = MEMORY[0x24C533AF0](v14, v15);
        swift_bridgeObjectRelease();
LABEL_18:
        uint64_t v17 = *(void *)(v16 + 48);
        swift_release();
        if (v17 <= 1) {
          return;
        }
LABEL_31:
        if (one-time initialization token for logger != -1) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
      if ((v14 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v14 < *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v16 = *(void *)(v15 + 8 * v14 + 32);
        swift_retain();
        goto LABEL_18;
      }
      __break(1u);
    }
    __break(1u);
    return;
  }
  swift_beginAccess();
  unint64_t v18 = *v5;
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    if (v19) {
      goto LABEL_22;
    }
LABEL_30:
    swift_bridgeObjectRelease_n();
    goto LABEL_31;
  }
  uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v19) {
    goto LABEL_30;
  }
LABEL_22:
  uint64_t v20 = 4;
  while (1)
  {
    uint64_t v21 = v20 - 4;
    if ((v18 & 0xC000000000000001) != 0) {
      break;
    }
    uint64_t v22 = swift_retain();
    BOOL v11 = __OFADD__(v21, 1);
    uint64_t v23 = v20 - 3;
    if (v11) {
      goto LABEL_38;
    }
LABEL_28:
    int v24 = *(unsigned __int8 *)(v22 + 36);
    swift_release();
    if (v24 != 1)
    {
LABEL_35:
      swift_bridgeObjectRelease_n();
      return;
    }
    ++v20;
    if (v23 == v19) {
      goto LABEL_30;
    }
  }
  uint64_t v22 = MEMORY[0x24C533AF0](v20 - 4, v18);
  BOOL v11 = __OFADD__(v21, 1);
  uint64_t v23 = v20 - 3;
  if (!v11) {
    goto LABEL_28;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  swift_once();
LABEL_32:
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)logger);
  BOOL v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    float32x4_t v28 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)float32x4_t v28 = 134349056;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v26, v27, "Starting circle completion animation at time=%{public}f...", v28, 0xCu);
    MEMORY[0x24C5348D0](v28, -1, -1);
  }

  *(float *)&unsigned int v29 = a1;
  *(void *)(v2 + 232) = ((unint64_t)v29 << 32) | 1;
  *(void *)(v2 + 240) = 1051260355;
  *(unsigned char *)(v2 + 248) = 0;
}

uint64_t CaptureCircle.recalculateShotDistances()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
LABEL_38:
  }
    swift_once();
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  float32x4_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Updating nearest shot distances...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  swift_beginAccess();
  unint64_t v6 = v1[9];
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_6;
    }
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7) {
    return swift_bridgeObjectRelease();
  }
LABEL_6:
  uint64_t v1 = (void *)(v1[28] + 16);
  unint64_t v37 = v6 & 0xC000000000000001;
  swift_beginAccess();
  unint64_t v8 = 0;
  unint64_t v34 = v6 + 32;
  uint64_t v35 = v6 & 0xFFFFFFFFFFFFFF8;
  uint64_t v36 = v1;
  while (1)
  {
    if (v37)
    {
      uint64_t v11 = MEMORY[0x24C533AF0](v8, v6);
      BOOL v12 = __OFADD__(v8++, 1);
      if (v12) {
        goto LABEL_36;
      }
    }
    else
    {
      if (v8 >= *(void *)(v35 + 16)) {
        goto LABEL_37;
      }
      uint64_t v11 = *(void *)(v34 + 8 * v8);
      swift_retain();
      BOOL v12 = __OFADD__(v8++, 1);
      if (v12)
      {
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
    }
    double v13 = *(double *)(v11 + 24);
    float v14 = v13;
    float v15 = (float)*(uint64_t *)(v11 + 16) * v14;
    float v16 = v13 * 0.5;
    float v17 = v15 + v16;
    if (*(void *)(*v1 + 16)) {
      break;
    }
    float v20 = INFINITY;
LABEL_25:
    *(float *)(v11 + 92) = v20;
    if (*(void *)(*v1 + 16))
    {
      unint64_t v25 = v6;
      float v26 = *(float *)(v11 + 32);
      uint64_t v27 = ContinuousShotCircle.distancesTo(queryAngle:)(v17);
      uint64_t v28 = *(void *)(v27 + 16);
      if (v28)
      {
        unsigned int v29 = (float *)(v27 + 32);
        uint64_t v9 = MEMORY[0x263F8EE78];
        do
        {
          float v32 = *v29;
          if (*v29 <= v26)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
            }
            unint64_t v31 = *(void *)(v9 + 16);
            unint64_t v30 = *(void *)(v9 + 24);
            if (v31 >= v30 >> 1) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
            }
            *(void *)(v9 + 16) = v31 + 1;
            *(float *)(v9 + 4 * v31 + 32) = v32;
          }
          ++v29;
          --v28;
        }
        while (v28);
      }
      else
      {
        uint64_t v9 = MEMORY[0x263F8EE78];
      }
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(v9 + 16);
      swift_release();
      unint64_t v6 = v25;
      uint64_t v1 = v36;
    }
    else
    {
      uint64_t v10 = 0;
    }
    *(void *)(v11 + 96) = v10;
    swift_release();
    if (v8 == v7) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v18 = ContinuousShotCircle.distancesTo(queryAngle:)(v15 + v16);
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    float v20 = *(float *)(v18 + 32);
    uint64_t v21 = v19 - 1;
    if (v21)
    {
      uint64_t v22 = (float *)(v18 + 36);
      do
      {
        float v23 = *v22++;
        float v24 = v23;
        if (v23 < v20) {
          float v20 = v24;
        }
        --v21;
      }
      while (v21);
    }
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t CaptureCircle.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CaptureCircle()
{
  return self;
}

uint64_t type metadata accessor for CaptureCircle.Bin()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for CaptureCircle.OccupyCriteria(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2466226C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CaptureCircle.OccupyCriteria()
{
  return &type metadata for CaptureCircle.OccupyCriteria;
}

void *type metadata accessor for ContinuousShotCircle.ShotData()
{
  return &unk_26FACEBD0;
}

unint64_t lazy protocol witness table accessor for type CaptureCircle.OccupyCriteria and conformance CaptureCircle.OccupyCriteria()
{
  unint64_t result = lazy protocol witness table cache variable for type CaptureCircle.OccupyCriteria and conformance CaptureCircle.OccupyCriteria;
  if (!lazy protocol witness table cache variable for type CaptureCircle.OccupyCriteria and conformance CaptureCircle.OccupyCriteria)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptureCircle.OccupyCriteria and conformance CaptureCircle.OccupyCriteria);
  }
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CaptureCircle(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 16);
}

uint64_t specialized static ContinuousShotCircle.ShotData.toUnitVector(position:)(float32x4_t a1)
{
  unsigned __int32 v1 = a1.u32[2];
  float v2 = sqrtf(vmuls_lane_f32(a1.f32[2], a1, 2) + vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(a1, a1)));
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static ContinuousShotCircle.ShotData.toUnitVector(position:));
  float32x4_t v4 = vmulq_f32(v3, a1);
  if ((float)((float)(v4.f32[2] + vaddv_f32(*(float32x2_t *)v4.f32)) / v2) >= 0.99995)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_2465C2000, v8, v9, "Shot is too close to Y-axis, cannot add!", v10, 2u);
      MEMORY[0x24C5348D0](v10, -1, -1);
    }

    lazy protocol witness table accessor for type ContinuousShotCircle.Error and conformance ContinuousShotCircle.Error();
    swift_allocError();
    return swift_willThrow();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2466B7740;
    *(_DWORD *)(inited + 32) = a1.i32[0];
    *(_DWORD *)(inited + 36) = v1;
    specialized SIMD.init<A>(_:)(inited);
    return swift_setDeallocating();
  }
}

uint64_t specialized static CaptureCircle.angleToBinIndex(theta:numBins:)(uint64_t result, double a2)
{
  for (; a2 < 0.0; a2 = a2 + 6.28318531)
    ;
  for (; a2 > 6.28318531; a2 = a2 + -6.28318531)
    ;
  double v2 = a2 / 6.28318531 * (double)result;
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v2 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v3 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  if (v3 >= (uint64_t)v2) {
    uint64_t v3 = (uint64_t)v2;
  }
  return v3 & ~(v3 >> 63);
}

unint64_t lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>;
  if (!lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SIMD3<Float>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContinuousShotCircle.Error and conformance ContinuousShotCircle.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type ContinuousShotCircle.Error and conformance ContinuousShotCircle.Error;
  if (!lazy protocol witness table cache variable for type ContinuousShotCircle.Error and conformance ContinuousShotCircle.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousShotCircle.Error and conformance ContinuousShotCircle.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContinuousShotCircle.Error and conformance ContinuousShotCircle.Error;
  if (!lazy protocol witness table cache variable for type ContinuousShotCircle.Error and conformance ContinuousShotCircle.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousShotCircle.Error and conformance ContinuousShotCircle.Error);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ContinuousShotCircle.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x246622B44);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for ContinuousShotCircle.Error()
{
  return &unk_26FACEC68;
}

uint64_t CaptureModeBoxModel.FactoredScaleEntity.__allocating_init()()
{
  return CaptureModeBoxModel.FactoredScaleEntity.init()();
}

uint64_t CaptureModeBoxModel.__deallocating_deinit()
{
  if (swift_weakLoadStrong())
  {
    type metadata accessor for CaptureModeBoxModel.FactoredScaleEntity();
    HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
    swift_release();
  }
  swift_release();
  swift_release();
  swift_unownedRelease();
  swift_weakDestroy();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of URL?(v0 + 88, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CaptureModeBoxModel()
{
  return self;
}

Swift::Void __swiftcall CaptureModeBoxModel.enable()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for OS_dispatch_queue();
  *uint64_t v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  char v6 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (one-time initialization token for logger == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)logger);
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_2465C2000, v8, v9, "Enabling capture box UI...", v10, 2u);
    MEMORY[0x24C5348D0](v10, -1, -1);
  }

  if (*(unsigned char *)(v1 + 16))
  {
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      double v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v13 = 0;
      _os_log_impl(&dword_2465C2000, v11, v12, "CaptureModeBoxModel::enable() called when the box wasn't disabled... ignoring.", v13, 2u);
      MEMORY[0x24C5348D0](v13, -1, -1);
    }
  }
  else
  {
    CaptureModeBoxModel.subscribeToUpdateEvents()();
    unsigned __int8 v14 = *(unsigned char *)(v1 + 16);
    *(unsigned char *)(v1 + 16) = 1;
    CaptureModeBoxModel.performStateTransition(from:to:)(v14, 1u);
  }
}

Swift::Void __swiftcall CaptureModeBoxModel.disable()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for OS_dispatch_queue();
  *uint64_t v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  char v6 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (one-time initialization token for logger == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)logger);
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_2465C2000, v8, v9, "Disabling capture box UI...", v10, 2u);
    MEMORY[0x24C5348D0](v10, -1, -1);
  }

  CaptureModeBoxModel.unsubscribeFromUpdateEvents()();
  unsigned __int8 v11 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(v1 + 16) = 0;
  CaptureModeBoxModel.performStateTransition(from:to:)(v11, 0);
}

uint64_t CaptureModeBoxModel.FactoredScaleEntity.init()()
{
  uint64_t v1 = direct field offset for CaptureModeBoxModel.FactoredScaleEntity.animatableScaleEntity;
  type metadata accessor for Entity();
  swift_allocObject();
  swift_retain();
  *(void *)(v0 + v1) = Entity.init()();
  swift_release();
  uint64_t v2 = Entity.init()();
  swift_retain();
  swift_retain();
  dispatch thunk of Entity.name.setter();
  swift_release();
  swift_retain();
  swift_retain();
  HasHierarchy.addChild(_:preservingWorldTransform:)();
  swift_release();
  swift_release_n();
  return v2;
}

uint64_t CaptureModeBoxModel.FactoredScaleEntity.__ivar_destroyer()
{
  return swift_release();
}

uint64_t CaptureModeBoxModel.FactoredScaleEntity.__deallocating_deinit()
{
  Entity.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t CaptureModeBoxModel.SquishAnimation.init(targetTransform:translationEntity:scaleEntity:duration:)(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v6 = v5;
  __n128 v50 = a4;
  __n128 v51 = a5;
  __n128 v52 = a3;
  uint64_t v9 = type metadata accessor for AnimationTimingFunction();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  *(void *)&long long v53 = a1;
  v56[0] = a2;
  uint64_t v13 = type metadata accessor for Entity();
  _s10RealityKit6EntityCACSQAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x263F16580]);
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    __break(1u);
  }
  else
  {
    float32x4_t v46 = v12;
    *(void *)&long long v48 = v10;
    uint64_t v49 = v9;
    *(void *)(v5 + 32) = a1;
    *(void *)(v5 + 40) = a2;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CaptureModeBoxModel.SquishAnimation.init(targetTransform:translationEntity:scaleEntity:duration:));
    long long v44 = v14;
    uint64_t v47 = a1;
    swift_retain();
    swift_retain();
    static simd_quatf.identity.getter();
    __n128 v15 = v50;
    *(_OWORD *)(v5 + 48) = v44;
    *(__n128 *)(v5 + 64) = v15;
    *(__n128 *)(v5 + 80) = v51;
    HasTransform.orientation.getter();
    __n128 v50 = v16;
    v51.n128_u64[0] = v13;
    HasTransform.position.getter();
    long long v44 = v17;
    static simd_quatf.identity.getter();
    __n128 v18 = v50;
    *(__n128 *)(v5 + 96) = v52;
    *(__n128 *)(v5 + 112) = v18;
    *(_OWORD *)(v5 + 128) = v44;
    if (one-time initialization token for logger == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)logger);
  swift_retain_n();
  float v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v45 = a2;
  if (v22)
  {
    float v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    v56[0] = v24;
    *(_DWORD *)float v23 = 136446210;
    long long v25 = *(_OWORD *)(v5 + 64);
    long long v26 = *(_OWORD *)(v5 + 80);
    long long v53 = *(_OWORD *)(v5 + 48);
    long long v54 = v25;
    long long v55 = v26;
    uint64_t v27 = String.init<A>(describing:)();
    *(void *)&long long v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v20, v21, "Squish translationTarget: %{public}s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v24, -1, -1);
    MEMORY[0x24C5348D0](v23, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  swift_retain_n();
  unsigned int v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    unint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    v56[0] = v32;
    *(_DWORD *)unint64_t v31 = 136446210;
    long long v33 = *(_OWORD *)(v6 + 112);
    long long v34 = *(_OWORD *)(v6 + 128);
    long long v53 = *(_OWORD *)(v6 + 96);
    long long v54 = v33;
    long long v55 = v34;
    uint64_t v35 = String.init<A>(describing:)();
    *(void *)&long long v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v29, v30, "Squish scaleTarget: %{public}s", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v32, -1, -1);
    MEMORY[0x24C5348D0](v31, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v37 = v48;
  __n128 v52 = *(__n128 *)(v6 + 48);
  __n128 v50 = *(__n128 *)(v6 + 64);
  long long v48 = *(_OWORD *)(v6 + 80);
  uint64_t v38 = v46;
  static AnimationTimingFunction.easeOut.getter();
  uint64_t v39 = HasTransform.move(to:relativeTo:duration:timingFunction:)();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v37 + 8);
  uint64_t v41 = v49;
  v40(v38, v49);
  *(void *)(v6 + 16) = v39;
  swift_release();
  __n128 v52 = *(__n128 *)(v6 + 96);
  __n128 v50 = *(__n128 *)(v6 + 112);
  long long v48 = *(_OWORD *)(v6 + 128);
  HasHierarchy.parent.getter();
  static AnimationTimingFunction.easeOut.getter();
  uint64_t v42 = HasTransform.move(to:relativeTo:duration:timingFunction:)();
  swift_release();
  swift_release();
  swift_release();
  v40(v38, v41);
  *(void *)(v6 + 24) = v42;
  swift_release();
  return v6;
}

uint64_t CaptureModeBoxModel.SquishAnimation.stop()()
{
  if (*(void *)(v0 + 16))
  {
    swift_retain();
    dispatch thunk of AnimationPlaybackController.stop()();
    swift_release();
  }
  if (*(void *)(v0 + 24))
  {
    swift_retain();
    dispatch thunk of AnimationPlaybackController.stop()();
    swift_release();
  }
  *(void *)(v0 + 16) = 0;
  swift_release();
  *(void *)(v0 + 24) = 0;

  return swift_release();
}

uint64_t CaptureModeBoxModel.SquishAnimation.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

void CaptureModeBoxModel.startBoxFade(direction:duration:)(char a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for OS_dispatch_queue();
  *uint64_t v9 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8F0E0], v6);
  char v10 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (*(void *)(v3 + 24))
  {
    if (one-time initialization token for logger == -1)
    {
LABEL_4:
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)logger);
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        long long v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v14 = 0;
        _os_log_impl(&dword_2465C2000, v12, v13, "startBoxFade called when already fading.  Ignoring new call...", v14, 2u);
        MEMORY[0x24C5348D0](v14, -1, -1);
      }

      return;
    }
LABEL_18:
    swift_once();
    goto LABEL_4;
  }
  int v15 = a1 & 1;
  type metadata accessor for RampAnimation();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 64) = 0xFFF0000000000000;
  *(unsigned char *)(v16 + 24) = a1 & 1;
  *(double *)(v16 + 16) = a2;
  float v17 = 1.0;
  if ((a1 & 1) == 0) {
    float v17 = 0.0;
  }
  *(void *)(v16 + 32) = 0;
  *(void *)(v16 + 40) = 0;
  *(float *)(v16 + 72) = v17;
  double v18 = *(double *)(v3 + 128);
  *(double *)(v16 + 48) = v18;
  *(double *)(v16 + 56) = v18 + a2;
  *(void *)(v3 + 24) = v16;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)logger);
  float v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    BOOL v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v22 = 0;
    _os_log_impl(&dword_2465C2000, v20, v21, "Starting the box fade animation...", v22, 2u);
    MEMORY[0x24C5348D0](v22, -1, -1);
  }

  if (v15) {
    float v23 = 1.0;
  }
  else {
    float v23 = 0.0;
  }
  CaptureModeBoxModel.setFade(fade:)(v23);
}

void CaptureModeBoxModel.performStateTransition(from:to:)(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  __n128 v51 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for DispatchQoS();
  uint64_t v50 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v49 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (uint64_t *)((char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for OS_dispatch_queue();
  *uint64_t v11 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F8F0E0], v8);
  char v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (a1 == a2)
  {
    if (one-time initialization token for logger == -1)
    {
LABEL_4:
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)logger);
      long long v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        aBlock[0] = v17;
        *(_DWORD *)uint64_t v16 = 136446466;
        LOBYTE(v53) = a1;
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v16 + 12) = 2082;
        LOBYTE(v53) = a1;
        uint64_t v20 = String.init<A>(describing:)();
        uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v14, v15, "fromState == toState so punting transition! from=%{public}s toState=%{public}s", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v17, -1, -1);
        MEMORY[0x24C5348D0](v16, -1, -1);
      }

      return;
    }
LABEL_24:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v48 = v5;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)logger);
  float v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v47 = v4;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    aBlock[0] = v27;
    *(_DWORD *)uint64_t v26 = 136446466;
    LOBYTE(v53) = a1;
    uint64_t v28 = String.init<A>(describing:)();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2082;
    LOBYTE(v53) = a2;
    uint64_t v30 = String.init<A>(describing:)();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v23, v24, "Switching states:  from=%{public}s toState=%{public}s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v27, -1, -1);
    MEMORY[0x24C5348D0](v26, -1, -1);
  }

  uint64_t v32 = a2;
  uint64_t v33 = v48;
  switch(v32)
  {
    case 1:
      long long v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        unint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v36 = 0;
        _os_log_impl(&dword_2465C2000, v34, v35, "Attaching boxRootEntity...", v36, 2u);
        MEMORY[0x24C5348D0](v36, -1, -1);
      }

      swift_weakAssign();
      if (swift_weakLoadStrong())
      {
        swift_unownedRetainStrong();
        swift_retain();
        DataModel.addToScene(entity:)();
        swift_release_n();
        swift_release();
      }
      break;
    case 2:
      break;
    case 3:
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v39 = 0;
        _os_log_impl(&dword_2465C2000, v37, v38, "Entering squished state and requesting disable...", v39, 2u);
        MEMORY[0x24C5348D0](v39, -1, -1);
      }

      uint64_t v40 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v41 = swift_allocObject();
      swift_weakInit();
      aBlock[4] = (uint64_t)partial apply for closure #1 in CaptureModeBoxModel.performStateTransition(from:to:);
      aBlock[5] = v41;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = (uint64_t)&block_descriptor_4;
      uint64_t v42 = _Block_copy(aBlock);
      swift_release();
      float32x4_t v43 = v49;
      static DispatchQoS.unspecified.getter();
      aBlock[0] = MEMORY[0x263F8EE78];
      _s10RealityKit6EntityCACSQAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      long long v44 = v51;
      uint64_t v45 = v47;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x24C533830](0, v43, v44, v42);
      _Block_release(v42);

      (*(void (**)(char *, uint64_t))(v33 + 8))(v44, v45);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v52);
      break;
    default:
      if (swift_weakLoadStrong())
      {
        type metadata accessor for CaptureModeBoxModel.FactoredScaleEntity();
        HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
        swift_release();
      }
      swift_weakAssign();
      CaptureModeBoxModel.clearAnimations()();
      break;
  }
  CaptureModeBoxModel.updateCurrentEntityTransform()();
}

uint64_t closure #1 in CaptureModeBoxModel.performStateTransition(from:to:)()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_2465C2000, v1, v2, "Automatically calling disable since box is squished with nothing left to do...", v3, 2u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    CaptureModeBoxModel.disable()();
    return swift_release();
  }
  return result;
}

uint64_t CaptureModeBoxModel.updateCurrentEntityTransform()()
{
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t result = swift_release();
  if (!Strong) {
    return result;
  }
  if (*(unsigned char *)(v0 + 208)) {
    return result;
  }
  int v3 = *(unsigned __int8 *)(v0 + 16);
  if (v3 == 2) {
    return result;
  }
  if (v3 == 3)
  {
    specialized static BoundingBoxHelpers.getSquishedBoxBottomTransform(boxWorld:)();
    double v11 = v5;
    float32x4_t v13 = v4;
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    specialized simd_float4x4.init(translation:rotation:scale:)(v11, v13);
    Transform.init(matrix:)();
    double v12 = v7;
    float32x4_t v14 = v6;
    uint64_t v8 = &outlined read-only object #0 of CaptureModeBoxModel.updateCurrentEntityTransform();
    goto LABEL_10;
  }
  if (*(void *)(v0 + 32))
  {
    __break(1u);
    return result;
  }
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Transform.init(matrix:)();
    double v12 = v10;
    float32x4_t v14 = v9;
    uint64_t v8 = &outlined read-only object #1 of CaptureModeBoxModel.updateCurrentEntityTransform();
LABEL_10:
    specialized SIMD.init<A>(_:)((uint64_t)v8);
    static simd_quatf.identity.getter();
    specialized simd_float4x4.init(translation:rotation:scale:)(v12, v14);
    type metadata accessor for Entity();
    HasTransform.setTransformMatrix(_:relativeTo:)();
    HasTransform.setScale(_:relativeTo:)();
    return swift_release();
  }
  return result;
}

void CaptureModeBoxModel.executeSquish(duration:)(double a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  double v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    double v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v7 = 0;
    _os_log_impl(&dword_2465C2000, v5, v6, "Execute squish called...", v7, 2u);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  if (*(unsigned char *)(v2 + 16) == 1)
  {
    *(unsigned char *)(v2 + 16) = 2;
    CaptureModeBoxModel.performStateTransition(from:to:)(1u, 2u);
    if (*(unsigned char *)(v2 + 208))
    {
      oslog = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(oslog, v8))
      {
        float32x4_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)float32x4_t v9 = 0;
        _os_log_impl(&dword_2465C2000, oslog, v8, "executeSquish() has nil box to start from!  Ignoring...", v9, 2u);
        MEMORY[0x24C5348D0](v9, -1, -1);
      }
    }
    else
    {
      Transform.init(matrix:)();
      long long v28 = v11;
      long long v29 = v10;
      *(_OWORD *)osloga = v12;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
      *(_DWORD *)(inited + 32) = v29;
      *(_DWORD *)(inited + 36) = 981668463;
      *(_DWORD *)(inited + 40) = DWORD2(v29);
      specialized SIMD.init<A>(_:)(inited);
      __n128 v32 = v14;
      swift_setDeallocating();
      specialized static BoundingBoxHelpers.getSquishedBoxBottomTransform(boxWorld:)();
      unsigned int v31 = v15;
      uint64_t v16 = swift_initStackObject();
      *(_OWORD *)(v16 + 16) = xmmword_2466B5DE0;
      *(void *)(v16 + 32) = __PAIR64__(v31, v28);
      *(_DWORD *)(v16 + 40) = DWORD2(v28);
      specialized SIMD.init<A>(_:)(v16);
      __n128 v30 = v17;
      swift_setDeallocating();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        uint64_t v35 = v21;
        *(_DWORD *)uint64_t v20 = 136446466;
        uint64_t v22 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v20 + 12) = 2082;
        uint64_t v24 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v18, v19, "Starting box squish anim from: %{public}s to %{public}s", (uint8_t *)v20, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v21, -1, -1);
        MEMORY[0x24C5348D0](v20, -1, -1);
      }

      uint64_t v26 = *(void *)(v2 + 64);
      uint64_t v27 = *(void *)(v26 + direct field offset for CaptureModeBoxModel.FactoredScaleEntity.animatableScaleEntity);
      type metadata accessor for CaptureModeBoxModel.SquishAnimation();
      swift_allocObject();
      swift_retain();
      swift_retain();
      *(void *)(v2 + 32) = CaptureModeBoxModel.SquishAnimation.init(targetTransform:translationEntity:scaleEntity:duration:)(v26, v27, v32, *(__n128 *)osloga, v30);
      swift_release();
      CaptureModeBoxModel.startBoxFade(direction:duration:)(1, a1);
    }
  }
  else
  {
    __break(1u);
  }
}

void CaptureModeBoxModel.clearAnimations()()
{
  if (*(void *)(v0 + 32))
  {
    uint64_t v1 = v0;
    uint64_t v2 = one-time initialization token for logger;
    swift_retain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)logger);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl(&dword_2465C2000, v4, v5, "Stopping a running box squish animation.", v6, 2u);
      MEMORY[0x24C5348D0](v6, -1, -1);
    }

    CaptureModeBoxModel.SquishAnimation.stop()();
    swift_release();
    *(void *)(v1 + 32) = 0;
    swift_release();
  }
}

uint64_t CaptureModeBoxModel.loadModelsAsync()()
{
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  MEMORY[0x24C5318C0](0x676E69646E756F42, 0xEF65627543786F42, static BoundingBoxHelpers.bundle);
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type LoadRequest<ModelEntity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  MEMORY[0x24C5318C0](0xD000000000000010, 0x80000002466C0940, static BoundingBoxHelpers.bundle);
  swift_allocObject();
  swift_weakInit();
  Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

void closure #2 in CaptureModeBoxModel.loadModelsAsync()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_2465C2000, v1, v2, "... done loading wire frame box.", v3, 2u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    type metadata accessor for ModelEntity();
    uint64_t v4 = (void (*)(unsigned char *, void))HasModel.model.modify();
    uint64_t v6 = v5;
    uint64_t v7 = type metadata accessor for ModelComponent();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_2466B5E00;
      float32x4_t v9 = (uint64_t *)(v8 + 32);
      type metadata accessor for BoundingBoxHelpers();
      static BoundingBoxHelpers.makeBoxMaterial()(v9);
      ModelComponent.materials.setter();
    }
    v4(v13, 0);
    type metadata accessor for Entity();
    swift_allocObject();
    Entity.init()();
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of closure #2 in CaptureModeBoxModel.loadModelsAsync());
    HasTransform.setScale(_:relativeTo:)();
    HasHierarchy.addChild(_:preservingWorldTransform:)();
    swift_retain();
    HasHierarchy.addChild(_:preservingWorldTransform:)();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    long long v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      long long v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v12 = 0;
      _os_log_impl(&dword_2465C2000, v10, v11, "loadModelsAsync failed to bind self!", v12, 2u);
      MEMORY[0x24C5348D0](v12, -1, -1);
    }
  }
}

uint64_t closure #4 in CaptureModeBoxModel.loadModelsAsync()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_2465C2000, v1, v2, "... done loading wire frame plane.", v3, 2u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }

  type metadata accessor for ModelEntity();
  uint64_t v4 = (void (*)(uint64_t *, void))HasModel.model.modify();
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for ModelComponent();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_2466B5E00;
    float32x4_t v9 = (uint64_t *)(v8 + 32);
    type metadata accessor for BoundingBoxHelpers();
    static BoundingBoxHelpers.makeBoxMaterial()(v9);
    ModelComponent.materials.setter();
  }
  v4(&v11, 0);
  type metadata accessor for Entity();
  swift_allocObject();
  Entity.init()();
  HasHierarchy.addChild(_:preservingWorldTransform:)();
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of closure #4 in CaptureModeBoxModel.loadModelsAsync());
  HasTransform.setScale(_:relativeTo:)();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    HasHierarchy.addChild(_:preservingWorldTransform:)();
    swift_release();
  }
  return swift_release();
}

uint64_t CaptureModeBoxModel.setFade(fade:)(float a1)
{
  uint64_t v2 = type metadata accessor for __EntityRef();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    dispatch thunk of Entity.__coreEntity.getter();
    swift_release();
    MEMORY[0x24C530D20](&v10, MEMORY[0x263F8DD08], MEMORY[0x263F8DD08]);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    REHierarchicalFadeComponentGetComponentType();
    uint64_t v7 = REEntityGetOrAddComponentByClass();
    if (a1 >= 0.0 && a1 <= 1.0)
    {
      uint64_t v8 = v7;
      REHierarchicalFadeComponentSetOpacity();
      MEMORY[0x24C533F60](v8);
    }
    return swift_release();
  }
  return result;
}

void CaptureModeBoxModel.update(deltaTime:)(double a1)
{
  uint64_t v2 = v1;
  uint64_t Strong = swift_weakLoadStrong();
  swift_release();
  if (Strong)
  {
    double v5 = *(double *)(v2 + 128) + a1;
    *(double *)(v2 + 128) = v5;
    if (*(void *)(v2 + 24))
    {
      swift_retain();
      float v6 = RampAnimation.update(time:)(v5);
      if (v6 <= 1.0) {
        float v7 = v6;
      }
      else {
        float v7 = 1.0;
      }
      if (v6 <= 0.0) {
        float v7 = 0.0;
      }
      CaptureModeBoxModel.setFade(fade:)((float)(v7 * v7) / (float)((float)((float)((float)(v7 * v7) - v6)
                                                                          + (float)((float)(v7 * v7) - v6))
                                                                  + 1.0));
      swift_release();
    }
    uint64_t v8 = *(void *)(v2 + 32);
    if (v8)
    {
      if (!*(void *)(v8 + 16) || !*(void *)(v8 + 24))
      {
LABEL_14:
        uint64_t v10 = *(void *)(v2 + 24);
        if (!v10 || *(double *)(v10 + 56) < *(double *)(v10 + 64))
        {
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v11 = type metadata accessor for Logger();
          __swift_project_value_buffer(v11, (uint64_t)logger);
          long long v12 = Logger.logObject.getter();
          os_log_type_t v13 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v12, v13))
          {
            __n128 v14 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)__n128 v14 = 0;
            _os_log_impl(&dword_2465C2000, v12, v13, "Removing completed fade and squish anims and moving to .squished state.", v14, 2u);
            MEMORY[0x24C5348D0](v14, -1, -1);
          }

          *(void *)(v2 + 24) = 0;
          swift_release();
          *(void *)(v2 + 32) = 0;
          swift_release();
          unsigned __int8 v15 = *(unsigned char *)(v2 + 16);
          *(unsigned char *)(v2 + 16) = 3;
          CaptureModeBoxModel.performStateTransition(from:to:)(v15, 3u);
        }
        return;
      }
      swift_retain();
      swift_retain();
      swift_retain();
      if (dispatch thunk of AnimationPlaybackController.isComplete.getter())
      {
        char v9 = dispatch thunk of AnimationPlaybackController.isComplete.getter();
        swift_release();
        swift_release();
        swift_release();
        if ((v9 & 1) == 0) {
          return;
        }
        goto LABEL_14;
      }
      swift_release();
      swift_release();
      swift_release();
    }
  }
}

uint64_t CaptureModeBoxModel.subscribeToUpdateEvents()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    double v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Subscribing to update events...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  uint64_t v6 = *(void *)(v1 + 48);
  swift_unownedRetainStrong();
  float v7 = *(void **)(v6 + 16);
  id v8 = v7;
  uint64_t result = swift_release();
  if (v7)
  {
    dispatch thunk of ARView.scene.getter();

    type metadata accessor for SceneEvents.Update();
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    swift_allocObject();
    swift_weakInit();
    Scene.subscribe<A>(to:on:_:)();
    swift_release();
    swift_release();
    outlined destroy of URL?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for EventSource?);
    outlined init with take of Cancellable?((uint64_t)v12, (uint64_t)v10);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)v10, v1 + 88);
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in CaptureModeBoxModel.subscribeToUpdateEvents()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    SceneEvents.Update.deltaTime.getter();
    CaptureModeBoxModel.update(deltaTime:)(v1);
    return swift_release();
  }
  return result;
}

uint64_t CaptureModeBoxModel.unsubscribeFromUpdateEvents()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    double v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Unsubscribing from update events...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  uint64_t v6 = v1 + 88;
  swift_beginAccess();
  outlined init with copy of Cancellable?(v6, (uint64_t)&v9);
  if (*((void *)&v10 + 1))
  {
    outlined init with copy of Cancellable((uint64_t)&v9, (uint64_t)v8);
    outlined destroy of URL?((uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  }
  uint64_t v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v9, v6);
  return swift_endAccess();
}

uint64_t type metadata accessor for CaptureModeBoxModel.FactoredScaleEntity()
{
  uint64_t result = type metadata singleton initialization cache for CaptureModeBoxModel.FactoredScaleEntity;
  if (!type metadata singleton initialization cache for CaptureModeBoxModel.FactoredScaleEntity) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for CaptureModeBoxModel.FactoredScaleEntity()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for CaptureModeBoxModel.FactoredScaleEntity()
{
  return type metadata accessor for CaptureModeBoxModel.FactoredScaleEntity();
}

uint64_t type metadata accessor for CaptureModeBoxModel.SquishAnimation()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for CaptureModeBoxModel.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246625F24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CaptureModeBoxModel.State()
{
  return &unk_26FACECF8;
}

unint64_t lazy protocol witness table accessor for type CaptureModeBoxModel.State and conformance CaptureModeBoxModel.State()
{
  unint64_t result = lazy protocol witness table cache variable for type CaptureModeBoxModel.State and conformance CaptureModeBoxModel.State;
  if (!lazy protocol witness table cache variable for type CaptureModeBoxModel.State and conformance CaptureModeBoxModel.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptureModeBoxModel.State and conformance CaptureModeBoxModel.State);
  }
  return result;
}

uint64_t outlined init with copy of Cancellable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Cancellable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_246626084()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in CaptureModeBoxModel.subscribeToUpdateEvents()()
{
  return closure #1 in CaptureModeBoxModel.subscribeToUpdateEvents()();
}

uint64_t outlined init with take of Cancellable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #2 in CaptureModeBoxModel.loadModelsAsync()()
{
}

uint64_t partial apply for closure #4 in CaptureModeBoxModel.loadModelsAsync()()
{
  return closure #4 in CaptureModeBoxModel.loadModelsAsync()();
}

uint64_t specialized CaptureModeBoxModel.init(model:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  float v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0xFFF0000000000000;
  swift_weakInit();
  type metadata accessor for CaptureModeBoxModel.FactoredScaleEntity();
  swift_allocObject();
  *(void *)(v1 + 64) = CaptureModeBoxModel.FactoredScaleEntity.init()();
  type metadata accessor for Entity();
  swift_allocObject();
  uint64_t v8 = Entity.init()();
  uint64_t v9 = MEMORY[0x263F8EE88];
  *(void *)(v1 + 72) = v8;
  *(void *)(v1 + 80) = v9;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(unsigned char *)(v1 + 208) = 1;
  type metadata accessor for OS_dispatch_queue();
  uint64_t *v7 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F8F0E0], v4);
  char v10 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if (v10)
  {
    *(void *)(v2 + 48) = a1;
    swift_unownedRetain();
    CaptureModeBoxModel.loadModelsAsync()();
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in CaptureModeBoxModel.performStateTransition(from:to:)()
{
  return closure #1 in CaptureModeBoxModel.performStateTransition(from:to:)();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t _s10RealityKit6EntityCACSQAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata completion function for CircularBuffer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t CircularBuffer.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  swift_release();
  return v0;
}

uint64_t CircularBuffer.__deallocating_deinit()
{
  CircularBuffer.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CircularBuffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t RotationFilter.init(alphaDensity:startValue:)(double a1, __n128 a2)
{
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of RotationFilter.init(alphaDensity:startValue:));
  HIDWORD(v4) = 1.0;
  *(_OWORD *)(v2 + 32) = v4;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of RotationFilter.init(alphaDensity:startValue:));
  *(double *)(v2 + 16) = a1;
  *(__n128 *)(v2 + 32) = a2;
  *(__n128 *)(v2 + 48) = a2;
  return v2;
}

uint64_t type metadata accessor for RotationFilter()
{
  return self;
}

uint64_t Vec3Filter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Vec3Filter()
{
  return self;
}

uint64_t FloatFilter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FloatFilter()
{
  return self;
}

uint64_t type metadata completion function for Clamped()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = type metadata accessor for ClosedRange();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for Clamped(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  unint64_t v11 = v7 + 2 * ((v7 + v8) & ~v8);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *long long v4 = *a2;
    long long v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    unsigned __int8 v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, v5);
    unint64_t v16 = ((unint64_t)a2 + v10) & v9;
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)v16, v5);
    v15((uint64_t *)((v10 + (((unint64_t)v4 + v10) & v9)) & v9), (uint64_t *)((v10 + v16) & v9), v5);
  }
  return v4;
}

uint64_t destroy for Clamped(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v9(a1, v3);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + v5;
  uint64_t v7 = (v6 + a1) & ~v5;
  v9(v7, v3);

  return ((uint64_t (*)(uint64_t, uint64_t))v9)((v6 + v7) & ~v5, v3);
}

uint64_t initializeWithCopy for Clamped(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t assignWithCopy for Clamped(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t initializeWithTake for Clamped(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t assignWithTake for Clamped(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Clamped(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v8 = v6 + 2 * ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for Clamped(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64)
     + 2 * ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x246626FF8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for Clamped()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for CoveragePointCloud(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 20);
    unsigned int v12 = (char *)a1 + v11;
    int v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for ObjectCaptureSession.Frame.Object();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  return a1;
}

uint64_t destroy for CoveragePointCloud(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v9(v6, v7);
  }
  return result;
}

char *initializeWithCopy for CoveragePointCloud(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithCopy for CoveragePointCloud(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  uint64_t v16 = *(void *)(v15 - 8);
  __n128 v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

char *initializeWithTake for CoveragePointCloud(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithTake for CoveragePointCloud(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  uint64_t v16 = *(void *)(v15 - 8);
  __n128 v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoveragePointCloud(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246627DB4);
}

uint64_t sub_246627DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for CoveragePointCloud(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246627EC8);
}

uint64_t sub_246627EC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for CoveragePointCloud()
{
  uint64_t result = type metadata singleton initialization cache for CoveragePointCloud;
  if (!type metadata singleton initialization cache for CoveragePointCloud) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for CoveragePointCloud()
{
  type metadata accessor for ObjectCaptureSession.Frame.PointCloud?(319, &lazy cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?, MEMORY[0x270FB2630]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObjectCaptureSession.Frame.PointCloud?(319, &lazy cache variable for type metadata for ObjectCaptureSession.Frame.Object?, MEMORY[0x270FB2620]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for ObjectCaptureSession.Frame.PointCloud?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

id one-time initialization function for device()
{
  id result = MTLCreateSystemDefaultDevice();
  if (result) {
    static CoveragePointCloud.device = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

double CoveragePointCloud.objectToInitialBoxWorld.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CoveragePointCloud();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v0 + *(int *)(v4 + 20), (uint64_t)v3, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  uint64_t v5 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v3, 1, v5) == 1)
  {
    outlined destroy of URL?((uint64_t)v3, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  }
  else
  {
    ObjectCaptureSession.Frame.Object.boundingBox.getter();
    long long v15 = v8;
    float32x4_t v16 = v7;
    v14[0] = v10;
    v14[1] = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v3, v5);
  }
  Transform.init(matrix:)();
  long long v15 = v12;
  float32x4_t v16 = v11;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CoveragePointCloud.objectToInitialBoxWorld.getter);
  return specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v15, v16);
}

double CoveragePointCloud.bboxWorld.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  uint64_t v2 = *(void *)(*(void *)(v1 - 8) + 64);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = v0 + *(int *)(type metadata accessor for CoveragePointCloud() + 20);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v3, (uint64_t)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  uint64_t v4 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6((char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v4);
  long long v8 = (float32x4_t *)MEMORY[0x263EF89A8];
  if (v7 == 1)
  {
    uint64_t v9 = outlined destroy of URL?((uint64_t)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
    float32x4_t v10 = *v8;
    float32x4_t v26 = v8[1];
    float32x4_t v27 = v10;
    float32x4_t v11 = v8[2];
    float32x4_t v24 = v8[3];
    float32x4_t v25 = v11;
  }
  else
  {
    ObjectCaptureSession.Frame.Object.transform.getter();
    float32x4_t v26 = v13;
    float32x4_t v27 = v12;
    float32x4_t v24 = v15;
    float32x4_t v25 = v14;
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  MEMORY[0x270FA5388](v9);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v3, (uint64_t)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  if (v6((char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v4) == 1)
  {
    outlined destroy of URL?((uint64_t)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
    float32x4_t v16 = *v8;
  }
  else
  {
    ObjectCaptureSession.Frame.Object.boundingBox.getter();
    v22[2] = v18;
    float32x4_t v23 = v17;
    v22[0] = v20;
    v22[1] = v19;
    (*(void (**)(char *, uint64_t))(v5 + 8))((char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    float32x4_t v16 = v23;
  }
  *(void *)&double result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, v16.f32[0]), v26, *(float32x2_t *)v16.f32, 1), v25, v16, 2), v24, v16, 3).u64[0];
  return result;
}

Swift::Bool __swiftcall CoveragePointCloud.isValid()()
{
  uint64_t v1 = type metadata accessor for CoveragePointCloud();
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  uint64_t v52 = (uint64_t)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v47 - v5;
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v47 - v8;
  uint64_t v10 = v0 + *(int *)(v7 + 20);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v51 = v12;
  float32x4_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v10, (uint64_t)v13, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  uint64_t v14 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v16 = v50(v13, 1, v14);
  outlined destroy of URL?((uint64_t)v13, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  outlined init with copy of CoveragePointCloud(v0, (uint64_t)v9);
  if (v16 == 1)
  {
    outlined destroy of CoveragePointCloud((uint64_t)v9);
    outlined init with copy of CoveragePointCloud(v0, (uint64_t)v6);
  }
  else
  {
    uint64_t v47 = v15;
    uint64_t v48 = v1;
    uint64_t v49 = v14;
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    MEMORY[0x270FA5388](v17 - 8);
    long long v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v9, (uint64_t)v19, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    outlined destroy of CoveragePointCloud((uint64_t)v9);
    uint64_t v20 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
    int v23 = v22(v19, 1, v20);
    outlined destroy of URL?((uint64_t)v19, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    outlined init with copy of CoveragePointCloud(v0, (uint64_t)v6);
    if (v23 != 1)
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
      MEMORY[0x270FA5388](v27 - 8);
      long long v29 = (char *)&v47 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
      outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v6, (uint64_t)v29, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
      int v26 = v22(v29, 1, v20);
      if (v26 == 1)
      {
        __break(1u);
      }
      else
      {
        char v30 = specialized static CoveragePointCloud.isValid(pointCloud:)((uint64_t)v29);
        outlined destroy of CoveragePointCloud((uint64_t)v6);
        (*(void (**)(char *, uint64_t))(v21 + 8))(v29, v20);
        uint64_t v24 = v52;
        outlined init with copy of CoveragePointCloud(v0, v52);
        uint64_t v31 = v49;
        if ((v30 & 1) == 0) {
          goto LABEL_5;
        }
        uint64_t v32 = MEMORY[0x270FA5388](v24 + *(int *)(v48 + 20));
        long long v34 = (char *)&v47 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v32, (uint64_t)v34, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
        int v26 = v50(v34, 1, v31);
        if (v26 != 1)
        {
          ObjectCaptureSession.Frame.Object.transform.getter();
          float32x4_t v36 = (float32x4_t)vextq_s8(v35, v35, 8uLL);
          float32x4_t v38 = (float32x4_t)vextq_s8(v37, v37, 0xCuLL);
          float32x4_t v39 = (float32x4_t)vextq_s8(v35, v35, 0xCuLL);
          float32x4_t v40 = (float32x4_t)vextq_s8(v37, v37, 8uLL);
          float32x4_t v42 = (float32x4_t)vextq_s8(v37, v37, 4uLL);
          float32x4_t v43 = (float32x4_t)vextq_s8(v35, v35, 4uLL);
          int8x16_t v45 = (int8x16_t)vmulq_f32(v44, vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v41, v41, 8uLL), vmlaq_f32(vmulq_f32(v38, vnegq_f32(v43)), v42, v39)), vmlaq_f32(vmulq_f32(v40, vnegq_f32(v39)), v38, v36), (float32x4_t)vextq_s8(v41, v41, 4uLL)), vmlaq_f32(vmulq_f32(v42, vnegq_f32(v36)), v40, v43), (float32x4_t)vextq_s8(v41, v41, 0xCuLL)));
          v41.i64[0] = vextq_s8(v45, v45, 8uLL).u64[0];
          BOOL v25 = fabsf(vaddv_f32(vsub_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v45.i8, *(int32x2_t *)v41.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v45.i8, *(int32x2_t *)v41.i8)))) > 0.001;
          outlined destroy of CoveragePointCloud(v24);
          (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v31);
          goto LABEL_6;
        }
      }
      __break(1u);
      return v26;
    }
  }
  outlined destroy of CoveragePointCloud((uint64_t)v6);
  uint64_t v24 = v52;
  outlined init with copy of CoveragePointCloud(v0, v52);
LABEL_5:
  outlined destroy of CoveragePointCloud(v24);
  BOOL v25 = 0;
LABEL_6:
  LOBYTE(v26) = v25;
  return v26;
}

uint64_t outlined init with copy of CoveragePointCloud(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CoveragePointCloud();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CoveragePointCloud(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CoveragePointCloud();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized static CoveragePointCloud.isValid(pointCloud:)(uint64_t a1)
{
  ObjectCaptureSession.Frame.PointCloud.points.getter();
  uint64_t v2 = dispatch thunk of OCDataBuffer.count.getter();
  swift_release();
  uint64_t v3 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  if (v2 < 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    ObjectCaptureSession.Frame.PointCloud.points.getter();
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v7 = dispatch thunk of OCDataBuffer.asMTLBuffer(from:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v7)
    {
      swift_unknownObjectRelease();
      return 1;
    }
  }
  return 0;
}

void *initializeBufferWithCopyOfBuffer for CoveragePointCloudFullView(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      *uint64_t v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)a1 + v13;
    int v16 = (char *)a2 + v13;
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    v15[16] = v16[16];
    uint64_t v18 = *(void **)((char *)a2 + v14);
    *(void *)((char *)a1 + v14) = v18;
    uint64_t v19 = a3[9];
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
    swift_retain();
    swift_retain();
    id v20 = v18;
  }
  return a1;
}

void destroy for CoveragePointCloudFullView(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  uint64_t v6 = *(void **)(a1 + *(int *)(a2 + 28));
}

void *initializeWithCopy for CoveragePointCloudFullView(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = v15;
  v13[16] = v14[16];
  int v16 = *(void **)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = v16;
  uint64_t v17 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  swift_retain();
  swift_retain();
  id v18 = v16;
  return a1;
}

void *assignWithCopy for CoveragePointCloudFullView(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = a3[5];
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    outlined destroy of URL?((uint64_t)a1 + v6, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  swift_retain();
  swift_release();
  *((void *)v11 + 1) = *((void *)v12 + 1);
  swift_retain();
  swift_release();
  v11[16] = v12[16];
  uint64_t v13 = a3[7];
  uint64_t v14 = *(void **)((char *)a1 + v13);
  uint64_t v15 = *(void **)((char *)a2 + v13);
  *(void *)((char *)a1 + v13) = v15;
  id v16 = v15;

  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

_OWORD *initializeWithTake for CoveragePointCloudFullView(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  long long v15 = *(_OWORD *)v14;
  v13[16] = v14[16];
  *(_OWORD *)uint64_t v13 = v15;
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v16 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);
  return a1;
}

void *assignWithTake for CoveragePointCloudFullView(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  if (a1 != a2)
  {
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    outlined destroy of URL?((uint64_t)a1 + v7, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  swift_release();
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_release();
  v13[16] = v14[16];
  uint64_t v15 = a3[7];
  uint64_t v16 = *(void **)((char *)a1 + v15);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);

  uint64_t v17 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoveragePointCloudFullView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2466293E0);
}

uint64_t sub_2466293E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CoveragePointCloudFullView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2466294A8);
}

uint64_t sub_2466294A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for CoveragePointCloudFullView()
{
  uint64_t result = type metadata singleton initialization cache for CoveragePointCloudFullView;
  if (!type metadata singleton initialization cache for CoveragePointCloudFullView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for CoveragePointCloudFullView()
{
  type metadata accessor for Environment<ColorScheme>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Environment<ColorScheme>.Content()
{
  if (!lazy cache variable for type metadata for Environment<ColorScheme>.Content)
  {
    type metadata accessor for ColorScheme();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<ColorScheme>.Content);
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in CoveragePointCloudFullView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in CoveragePointCloudFullView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer)>>?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = &v44[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v4);
  long long v55 = (uint64_t *)&v44[-v7];
  uint64_t v8 = type metadata accessor for CoveragePointCloudFullView();
  uint64_t v53 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v53 + 64);
  MEMORY[0x270FA5388](v8);
  long long v54 = &v44[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<CoveragePointCloud>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v44[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for CoveragePointCloud();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = &v44[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = v8;
  id v18 = *(void **)(a1 + *(int *)(v8 + 28));
  if (v18)
  {
    uint64_t v51 = a1;
    uint64_t v52 = v6;
    uint64_t v19 = *(void *)(a1 + 8) + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__latestCoveragePointCloud;
    swift_beginAccess();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v13, v19, v10);
    id v20 = v18;
    swift_retain();
    Atomic.wrappedValue.getter();
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
    swift_release();
    Swift::Bool v21 = CoveragePointCloud.isValid()();
    outlined destroy of CoveragePointCloud((uint64_t)v16);
    if (v21)
    {
      uint64_t v22 = v51;
      uint64_t v23 = v17;
      unint64_t v50 = *(void *)(v51 + *(int *)(v17 + 36));
      unint64_t v24 = v50;
      id v25 = v20;
      uint64_t v26 = swift_retain();
      specialized CoveragePointCloudMetalWrapper.init(model:renderer:id:)(v26, v25, v24);
      uint64_t v48 = v28;
      uint64_t v49 = v27;
      uint64_t v47 = v29;
      uint64_t v46 = static SafeAreaRegions.all.getter();
      int v45 = static Edge.Set.all.getter();
      char v30 = v54;
      outlined init with copy of CoveragePointCloudFullView(v22, (uint64_t)v54, (uint64_t (*)(void))type metadata accessor for CoveragePointCloudFullView);
      unint64_t v31 = (*(unsigned __int8 *)(v53 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      uint64_t v32 = swift_allocObject();
      outlined init with take of CoveragePointCloudFullView((uint64_t)v30, v32 + v31);
      static Color.clear.getter();
      uint64_t v33 = Color.opacity(_:)();
      swift_release();
      char v34 = static Edge.Set.all.getter();
      uint64_t v35 = static SafeAreaRegions.all.getter();
      LOBYTE(v31) = static Edge.Set.all.getter();

      *(void *)&long long v59 = v49;
      *((void *)&v59 + 1) = v48;
      uint64_t v60 = v47;
      unint64_t v61 = v50;
      uint64_t v62 = v46;
      char v63 = v45;
      uint64_t v64 = partial apply for closure #1 in closure #1 in CoveragePointCloudFullView.body.getter;
      uint64_t v65 = v32;
      long long v66 = 0u;
      long long v67 = 0u;
      uint64_t v68 = closure #2 in closure #1 in CoveragePointCloudFullView.body.getter;
      uint64_t v69 = 0;
      uint64_t v70 = v33;
      char v71 = v34;
      uint64_t v72 = v35;
      char v73 = v31;
      closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad()(&v59);
      outlined init with take of Animation?((uint64_t)&v59, (uint64_t)v74, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?);
      uint64_t v6 = v52;
      a1 = v22;
      goto LABEL_6;
    }

    a1 = v51;
    uint64_t v6 = v52;
  }
  _s7SwiftUI15ModifiedContentVyACyACyACyACyAA6IDViewVy012_RealityKit_aB030CoveragePointCloudMetalWrapper33_ABC391D1FEA53E37AF8774528B6AFA04LLVSiGAA30_SafeAreaRegionsIgnoringLayoutVGAA25_AppearanceActionModifierVGAOGAA24_BackgroundStyleModifierVyAA5ColorVGGALGSgWOi0_(&v59);
  outlined init with take of Animation?((uint64_t)&v59, (uint64_t)v74, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?);
  uint64_t v23 = v17;
LABEL_6:
  if (*(unsigned char *)(a1 + *(int *)(v23 + 32)) == 1)
  {
    uint64_t v36 = static HorizontalAlignment.center.getter();
    uint64_t v37 = (uint64_t)v55;
    *long long v55 = v36;
    *(void *)(v37 + 8) = 0;
    *(unsigned char *)(v37 + 16) = 1;
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer)>>);
    closure #3 in closure #1 in CoveragePointCloudFullView.body.getter(a1, v37 + *(int *)(v38 + 44));
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer)>>);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v37, 0, 1, v39);
  }
  else
  {
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer)>>);
    uint64_t v37 = (uint64_t)v55;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v55, 1, 1, v40);
  }
  outlined init with take of Animation?((uint64_t)v74, (uint64_t)v57, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v37, (uint64_t)v6, &demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer)>>?);
  outlined init with take of Animation?((uint64_t)v57, (uint64_t)v58, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?);
  uint64_t v41 = v56;
  outlined init with take of Animation?((uint64_t)v58, v56, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?, VStack<TupleView<(HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer)>>?));
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v6, v41 + *(int *)(v42 + 48), &demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer)>>?);
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?);
  outlined destroy of URL?(v37, &demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer)>>?);
  outlined destroy of URL?((uint64_t)v6, &demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer)>>?);
  outlined init with take of Animation?((uint64_t)v57, (uint64_t)&v59, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?);
  return outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?((uint64_t)&v59, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?);
}

void closure #1 in closure #1 in CoveragePointCloudFullView.body.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_2465C2000, v7, v8, "CoveragePointCloudMetalWrapper: onAppear() ", v9, 2u);
    MEMORY[0x24C5348D0](v9, -1, -1);
  }

  uint64_t v10 = *(void **)(*(void *)(a1 + 8) + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_fullscreenCoveragePointsRenderer);
  if (v10)
  {
    type metadata accessor for CoveragePointCloudFullView();
    uint64_t v11 = v10;
    specialized Environment.wrappedValue.getter((uint64_t)v5);
    uint64_t v12 = &v11[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_colorScheme];
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v3 + 24))(v12, v5, v2);
    swift_endAccess();
    FullscreenCoveragePointsRenderer.colorScheme.didset();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

void closure #2 in closure #1 in CoveragePointCloudFullView.body.getter()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_2465C2000, oslog, v1, "CoveragePointCloudMetalWrapper: onDisappear()", v2, 2u);
    MEMORY[0x24C5348D0](v2, -1, -1);
  }
}

uint64_t closure #3 in closure #1 in CoveragePointCloudFullView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v13 - v8;
  *(void *)uint64_t v9 = static VerticalAlignment.center.getter();
  *((void *)v9 + 1) = 0;
  unsigned char v9[16] = 1;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>);
  closure #1 in closure #3 in closure #1 in CoveragePointCloudFullView.body.getter(a1, &v9[*(int *)(v10 + 44)]);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v7, a2, &demangling cache variable for type metadata for HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>);
  uint64_t v11 = a2
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer))
               + 48);
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  outlined destroy of URL?((uint64_t)v9, &demangling cache variable for type metadata for HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>);
  return outlined destroy of URL?((uint64_t)v7, &demangling cache variable for type metadata for HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>);
}

uint64_t closure #1 in closure #3 in closure #1 in CoveragePointCloudFullView.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = type metadata accessor for CoveragePointCloudFullView();
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v30 + 64);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Image>);
  uint64_t v5 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Button<Image>, _FrameLayout>);
  uint64_t v9 = v8 - 8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>);
  uint64_t v13 = v12 - 8;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  id v18 = (char *)&v29 - v17;
  outlined init with copy of CoveragePointCloudFullView(a1, (uint64_t)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CoveragePointCloudFullView);
  unint64_t v19 = (*(unsigned __int8 *)(v30 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v20 = swift_allocObject();
  outlined init with take of CoveragePointCloudFullView((uint64_t)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19);
  Button.init(action:label:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v21 = v31;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v7, v31);
  uint64_t v22 = &v11[*(int *)(v9 + 44)];
  long long v23 = v34;
  *(_OWORD *)uint64_t v22 = v33;
  *((_OWORD *)v22 + 1) = v23;
  *((_OWORD *)v22 + 2) = v35;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v21);
  LOBYTE(v21) = static Edge.Set.all.getter();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v11, (uint64_t)v16, &demangling cache variable for type metadata for ModifiedContent<Button<Image>, _FrameLayout>);
  unint64_t v24 = &v16[*(int *)(v13 + 44)];
  *unint64_t v24 = v21;
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  v24[40] = 1;
  outlined destroy of URL?((uint64_t)v11, &demangling cache variable for type metadata for ModifiedContent<Button<Image>, _FrameLayout>);
  outlined init with take of Animation?((uint64_t)v16, (uint64_t)v18, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v18, (uint64_t)v16, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>);
  id v25 = v32;
  *uint64_t v32 = 0;
  *((unsigned char *)v25 + 8) = 1;
  uint64_t v26 = v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>));
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v16, (uint64_t)v26 + *(int *)(v27 + 48), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>);
  outlined destroy of URL?((uint64_t)v18, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>);
  return outlined destroy of URL?((uint64_t)v16, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>);
}

void closure #1 in closure #1 in closure #3 in closure #1 in CoveragePointCloudFullView.body.getter()
{
  type metadata accessor for CoveragePointCloudFullView();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Bool>);
  Binding.wrappedValue.setter();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  os_log_type_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_2465C2000, v1, v2, "Close preview button clicked!", v3, 2u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }
}

uint64_t closure #2 in closure #1 in closure #3 in closure #1 in CoveragePointCloudFullView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Image.ResizingMode();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Image.init(systemName:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F1B4B8], v2);
  uint64_t v6 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance CoveragePointCloudFullView@<X0>(uint64_t *a1@<X8>)
{
  *a1 = static Alignment.center.getter();
  a1[1] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?, VStack<TupleView<(HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer)>>?)>>);
  return closure #1 in CoveragePointCloudFullView.body.getter(v1, (uint64_t)a1 + *(int *)(v4 + 44));
}

double _s7SwiftUI15ModifiedContentVyACyACyACyACyAA6IDViewVy012_RealityKit_aB030CoveragePointCloudMetalWrapper33_ABC391D1FEA53E37AF8774528B6AFA04LLVSiGAA30_SafeAreaRegionsIgnoringLayoutVGAA25_AppearanceActionModifierVGAOGAA24_BackgroundStyleModifierVyAA5ColorVGGALGSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 121) = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    swift_retain();
    id v15 = a3;
    outlined copy of (@escaping @callee_guaranteed () -> ())?(a7);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(a9);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(a11);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(a13);
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 136);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), v4);
  return a1;
}

uint64_t outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    swift_release();

    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?(a7);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?(a9);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?(a11);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?(a13);
    return swift_release();
  }
  return result;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance CoveragePointCloudMetalWrapper()
{
  return objc_retain(*(id *)(*(void *)(v0 + 16)
                           + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_view));
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance CoveragePointCloudMetalWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type CoveragePointCloudMetalWrapper and conformance CoveragePointCloudMetalWrapper();

  return MEMORY[0x270F01780](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance CoveragePointCloudMetalWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type CoveragePointCloudMetalWrapper and conformance CoveragePointCloudMetalWrapper();

  return MEMORY[0x270F01718](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance CoveragePointCloudMetalWrapper()
{
}

void specialized CoveragePointCloudMetalWrapper.init(model:renderer:id:)(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for CoveragePointCloud();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DataModel(0);
  lazy protocol witness table accessor for type DataModel and conformance DataModel();
  swift_retain();
  uint64_t v10 = ObservedObject.init(wrappedValue:)();
  uint64_t v32 = v11;
  uint64_t v33 = v10;
  uint64_t v12 = one-time initialization token for logger;
  uint64_t v13 = a2;
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)logger);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 134349056;
    *(void *)&long long v35 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v15, v16, "Metal wrapper setting cloud to id=%{public}ld...", v17, 0xCu);
    MEMORY[0x24C5348D0](v17, -1, -1);
  }

  uint64_t v18 = a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_pointCloudsBySegment;
  swift_beginAccess();
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (*(void *)(*(void *)v18 + 16) <= a3)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  outlined init with copy of CoveragePointCloudFullView(*(void *)v18+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * a3, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  FullscreenCoveragePointsRenderer.setRenderPointCloud(pointCloud:)((uint64_t)v9);
  outlined destroy of CoveragePointCloud((uint64_t)v9);
  DataModel.currentMiniViewCameraWorldTransform.getter();
  long long v30 = v20;
  long long v31 = v19;
  __n128 v34 = v21;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    unint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)unint64_t v24 = 136446210;
    uint64_t v38 = v25;
    long long v35 = v31;
    long long v36 = v30;
    __n128 v37 = v34;
    uint64_t v26 = String.init<A>(describing:)();
    *(void *)&long long v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v22, v23, "Fullscreen point cloud view setting camera world xform from miniview to %{public}s", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v25, -1, -1);
    MEMORY[0x24C5348D0](v24, -1, -1);
  }

  if (*(void *)&v13[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_turnTableCameraControl])
  {
    swift_retain();
    TurnTableCameraControl.setFromCameraWorldPosition(cameraPositionWorld:)(v34);
    swift_release();
    *(void *)&v13[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_lookAtBoxWorldProvider] = 0;
    swift_release();
    FullscreenCoveragePointsRenderer.updateTurnTable()();
    uint64_t v28 = *(void **)&v13[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_view];
    objc_msgSend(v28, sel_setPaused_, 0);
    id v29 = v28;
    objc_msgSend(v29, sel_setPreferredFramesPerSecond_, 120);

    swift_release();
    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t outlined init with take of CoveragePointCloudFullView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CoveragePointCloudFullView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in CoveragePointCloudFullView.body.getter()
{
  return partial apply for closure #1 in closure #1 in CoveragePointCloudFullView.body.getter((uint64_t (*)(uint64_t))closure #1 in closure #1 in CoveragePointCloudFullView.body.getter);
}

uint64_t outlined init with copy of CoveragePointCloudFullView(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t objectdestroyTm_2()
{
  uint64_t v1 = type metadata accessor for CoveragePointCloudFullView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #3 in closure #1 in CoveragePointCloudFullView.body.getter()
{
  return partial apply for closure #1 in closure #1 in CoveragePointCloudFullView.body.getter((uint64_t (*)(uint64_t))closure #1 in closure #1 in closure #3 in closure #1 in CoveragePointCloudFullView.body.getter);
}

uint64_t partial apply for closure #1 in closure #1 in CoveragePointCloudFullView.body.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for CoveragePointCloudFullView() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

void destroy for CoveragePointCloudMetalWrapper(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void **)(a1 + 16);
}

void *initializeBufferWithCopyOfBuffer for CoveragePointCloudMetalWrapper(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_retain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for CoveragePointCloudMetalWrapper(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v4 = (void *)a2[2];
  id v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for CoveragePointCloudMetalWrapper(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for CoveragePointCloudMetalWrapper(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoveragePointCloudMetalWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for CoveragePointCloudMetalWrapper()
{
  return &unk_26FACEF20;
}

unint64_t lazy protocol witness table accessor for type ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?, VStack<TupleView<(HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer)>>?)>> and conformance ZStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?, VStack<TupleView<(HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer)>>?)>> and conformance ZStack<A>;
  if (!lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?, VStack<TupleView<(HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer)>>?)>> and conformance ZStack<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?, VStack<TupleView<(HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer)>>?)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudMetalWrapper, Int>, _SafeAreaRegionsIgnoringLayout>, _AppearanceActionModifier>, _AppearanceActionModifier>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>?, VStack<TupleView<(HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<Image>, _FrameLayout>, _PaddingLayout>)>>, Spacer)>>?)>> and conformance ZStack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CoveragePointCloudMetalWrapper and conformance CoveragePointCloudMetalWrapper()
{
  unint64_t result = lazy protocol witness table cache variable for type CoveragePointCloudMetalWrapper and conformance CoveragePointCloudMetalWrapper;
  if (!lazy protocol witness table cache variable for type CoveragePointCloudMetalWrapper and conformance CoveragePointCloudMetalWrapper)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoveragePointCloudMetalWrapper and conformance CoveragePointCloudMetalWrapper);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CoveragePointCloudMetalWrapper and conformance CoveragePointCloudMetalWrapper;
  if (!lazy protocol witness table cache variable for type CoveragePointCloudMetalWrapper and conformance CoveragePointCloudMetalWrapper)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoveragePointCloudMetalWrapper and conformance CoveragePointCloudMetalWrapper);
  }
  return result;
}

uint64_t CoveragePointCloudMiniView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v32 = a1;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UIInterfaceOrientation>.Publisher);
  uint64_t v3 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  id v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<CoveragePointCloudMiniViewWrapper, _AppearanceActionModifier>>>);
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v34 = *(_OWORD *)(v1 + 32);
  uint64_t v30 = *((void *)&v34 + 1);
  uint64_t v10 = swift_allocObject();
  long long v11 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v10 + 64) = v11;
  uint64_t v12 = *(void *)(v1 + 64);
  *(void *)(v10 + 80) = v12;
  long long v13 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v10 + 32) = v13;
  uint64_t v14 = swift_allocObject();
  long long v15 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v14 + 64) = v15;
  *(void *)(v14 + 80) = *(void *)(v1 + 64);
  long long v16 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v14 + 32) = v16;
  swift_beginAccess();
  outlined retain of FreeformMiniView(v1);
  outlined retain of FreeformMiniView(v1);
  outlined retain of ObservedObject<FreeformCloudRenderer>((uint64_t)&v34);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UIInterfaceOrientation>);
  Published.projectedValue.getter();
  swift_endAccess();
  uint64_t v17 = swift_allocObject();
  long long v18 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v17 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v17 + 64) = v18;
  *(void *)(v17 + 80) = *(void *)(v2 + 64);
  long long v19 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v17 + 32) = v19;
  uint64_t v20 = v31;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(&v9[*(int *)(v7 + 60)], v5, v31);
  *(void *)uint64_t v9 = v30;
  *((void *)v9 + 1) = partial apply for closure #1 in CoveragePointCloudMiniView.body.getter;
  *((void *)v9 + 2) = v10;
  *((void *)v9 + 3) = 0;
  *((void *)v9 + 4) = 0;
  *((void *)v9 + 5) = v12;
  *((void *)v9 + 6) = partial apply for closure #2 in CoveragePointCloudMiniView.body.getter;
  *((void *)v9 + 7) = v14;
  __n128 v21 = (uint64_t (**)(uint64_t *))&v9[*(int *)(v7 + 64)];
  void *v21 = partial apply for closure #3 in CoveragePointCloudMiniView.body.getter;
  v21[1] = (uint64_t (*)(uint64_t *))v17;
  outlined retain of FreeformMiniView(v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v20);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v22 = v33;
  static UnitPoint.center.getter();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v27 = v32;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v9, v32, &demangling cache variable for type metadata for SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<CoveragePointCloudMiniViewWrapper, _AppearanceActionModifier>>>);
  uint64_t v28 = (void *)(v27
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<CoveragePointCloudMiniViewWrapper, _AppearanceActionModifier>>>, _RotationEffect>)
                          + 36));
  *uint64_t v28 = v22;
  v28[1] = v24;
  v28[2] = v26;
  return outlined destroy of URL?((uint64_t)v9, &demangling cache variable for type metadata for SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<CoveragePointCloudMiniViewWrapper, _AppearanceActionModifier>>>);
}

uint64_t closure #1 in CoveragePointCloudMiniView.body.getter(uint64_t a1)
{
  id v2 = objc_msgSend(self, sel_currentDevice);
  id v3 = objc_msgSend(v2, sel_orientation);

  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(void *)&long long v14 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    type metadata accessor for UIDeviceOrientation(0);
    uint64_t v9 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, (uint64_t *)&v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v5, v6, "Device orientation starting from: %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v8, -1, -1);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  long long v14 = *(_OWORD *)(a1 + 48);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<UIDeviceOrientation>);
  State.wrappedValue.setter();
  long long v14 = *(_OWORD *)(a1 + 48);
  State.wrappedValue.getter();
  long long v11 = CoveragePointCloudMiniView.interfaceOrientation.getter();
  double v12 = specialized static MiniViewHelpers.getMiniViewRotation(deviceOrientation:interfaceOrientation:)((unint64_t)v3, (uint64_t)v11);
  swift_getKeyPath();
  swift_getKeyPath();
  *(double *)&long long v14 = v12;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t closure #2 in CoveragePointCloudMiniView.body.getter(uint64_t a1, uint64_t a2)
{
  id v3 = objc_msgSend(self, sel_currentDevice);
  objc_msgSend(v3, sel_orientation);

  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  outlined retain of FreeformMiniView(a2);
  outlined retain of FreeformMiniView(a2);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v15[0] = v8;
    *(_DWORD *)uint64_t v7 = 136446466;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<UIDeviceOrientation>);
    State.wrappedValue.getter();
    type metadata accessor for UIDeviceOrientation(0);
    uint64_t v9 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of FreeformMiniView(a2);
    outlined release of FreeformMiniView(a2);
    *(_WORD *)(v7 + 12) = 2082;
    uint64_t v11 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v5, v6, "Device orientation changed from: %{public}s to: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v8, -1, -1);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }
  else
  {
    outlined release of FreeformMiniView(a2);
    outlined release of FreeformMiniView(a2);
  }

  MEMORY[0x270FA5388](v13);
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in closure #2 in CoveragePointCloudMiniView.body.getter(uint64_t a1, unint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<UIDeviceOrientation>);
  State.wrappedValue.setter();
  State.wrappedValue.getter();
  id v2 = CoveragePointCloudMiniView.interfaceOrientation.getter();
  specialized static MiniViewHelpers.getMiniViewRotation(deviceOrientation:interfaceOrientation:)(a2, (uint64_t)v2);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t closure #3 in CoveragePointCloudMiniView.body.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(void *)&v15[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v16 = v3;
    type metadata accessor for UIInterfaceOrientation(0);
    uint64_t v9 = String.init<A>(describing:)();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, (uint64_t *)v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v5, v6, "Device orientation: UIInterfaceOrientation published, recomputing with %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v8, -1, -1);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  *(_OWORD *)long long v15 = *(_OWORD *)(a2 + 48);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<UIDeviceOrientation>);
  State.wrappedValue.getter();
  unint64_t v11 = v16;
  unint64_t v12 = CoveragePointCloudMiniView.interfaceOrientation.getter();
  double v13 = specialized static MiniViewHelpers.getMiniViewRotation(deviceOrientation:interfaceOrientation:)(v11, (uint64_t)v12);
  swift_getKeyPath();
  swift_getKeyPath();
  v15[0] = v13;
  swift_retain();
  return static Published.subscript.setter();
}

void *CoveragePointCloudMiniView.interfaceOrientation.getter()
{
  unint64_t result = *(void **)(*(void *)(v0 + 40) + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view);
  if (result)
  {
    id v2 = objc_msgSend(result, sel_window);
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = [v2 windowScene];
      if (v4)
      {
        id v5 = v4;
        uint64_t v6 = (uint64_t)[v4 interfaceOrientation];

        uint64_t v3 = v5;
LABEL_15:

        return (void *)v6;
      }
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)logger);
      unint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        double v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)double v13 = 0;
        _os_log_impl(&dword_2465C2000, v11, v12, "Device orientation windowScene is nil!  Using .portrait...", v13, 2u);
        MEMORY[0x24C5348D0](v13, -1, -1);
      }
    }
    else
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)logger);
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v3, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_2465C2000, v3, v8, "Device orientation window is nil!  Using .portrait...", v9, 2u);
        MEMORY[0x24C5348D0](v9, -1, -1);
      }
    }
    uint64_t v6 = 1;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for View.body.getter in conformance CoveragePointCloudMiniView@<X0>(uint64_t a1@<X8>)
{
  return CoveragePointCloudMiniView.body.getter(a1);
}

uint64_t CoveragePointRenderer.interfaceOrientation.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance CoveragePointCloudMiniViewWrapper()
{
  id result = *(id *)(*v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view);
  if (result) {
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance CoveragePointCloudMiniViewWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type CoveragePointCloudMiniViewWrapper and conformance CoveragePointCloudMiniViewWrapper();

  return MEMORY[0x270F01780](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance CoveragePointCloudMiniViewWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type CoveragePointCloudMiniViewWrapper and conformance CoveragePointCloudMiniViewWrapper();

  return MEMORY[0x270F01718](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance CoveragePointCloudMiniViewWrapper()
{
}

void CoveragePointRenderer.voxelRenderer.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer____lazy_storage___voxelRenderer;
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer____lazy_storage___voxelRenderer);
  if (v3 != 1) {
    goto LABEL_4;
  }
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view);
  if (v4)
  {
    type metadata accessor for VoxelRenderer();
    swift_allocObject();
    uint64_t v5 = VoxelRenderer.init(view:)(v4);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_retain();
    outlined consume of PlatterRenderer??(v6);
LABEL_4:
    outlined copy of PlatterRenderer??(v3);
    return;
  }
  __break(1u);
}

uint64_t CoveragePointRenderer.captureCircleRenderer.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer____lazy_storage___captureCircleRenderer;
  uint64_t v2 = *(void *)(v0
                 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer____lazy_storage___captureCircleRenderer);
  uint64_t v3 = v2;
  if (v2 == 1)
  {
    uint64_t v3 = closure #1 in CoveragePointRenderer.captureCircleRenderer.getter(v0);
    uint64_t v4 = *(void *)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    swift_retain();
    outlined consume of PlatterRenderer??(v4);
  }
  outlined copy of PlatterRenderer??(v2);
  return v3;
}

uint64_t closure #1 in CoveragePointRenderer.captureCircleRenderer.getter(uint64_t result)
{
  uint64_t v1 = *(void **)(result + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view);
  if (v1)
  {
    uint64_t v2 = *(void **)(result + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_device);
    swift_unknownObjectRetain();
    id v3 = objc_msgSend(v1, sel_colorPixelFormat);
    type metadata accessor for CaptureCircleRenderer();
    uint64_t v4 = swift_allocObject();
    *(_DWORD *)(v4 + 16) = 1056964608;
    *(void *)(v4 + 24) = 0x4000000000000000;
    *(void *)(v4 + 56) = 0;
    *(void *)(v4 + 64) = 0;
    *(void *)(v4 + 48) = 0;
    _s19_RealityKit_SwiftUI23CommonCircleRenderStateVSgWOi0_((uint64_t)v6);
    outlined init with take of CommonCircleRenderState?((uint64_t)v6, v4 + 80);
    *(void *)(v4 + 376) = 0;
    *(int64x2_t *)(v4 + 384) = vdupq_n_s64(0x4059000000000000uLL);
    *(_OWORD *)(v4 + 400) = 0u;
    *(_OWORD *)(v4 + 416) = 0u;
    *(_OWORD *)(v4 + 432) = 0u;
    *(_OWORD *)(v4 + 445) = 0u;
    *(void *)(v4 + 464) = 0x400000007F800000;
    *(_DWORD *)(v4 + 472) = 0;
    *(void *)(v4 + 32) = v2;
    *(void *)(v4 + 40) = v3;
    swift_unknownObjectRetain();
    CaptureCircleRenderer.initRenderPipelines()();
    id v5 = objc_msgSend(v2, sel_newBufferWithLength_options_, 432, 0);
    swift_unknownObjectRelease();
    *(void *)(v4 + 400) = v5;
    swift_unknownObjectRelease();
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CoveragePointRenderer.init()()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UIInterfaceOrientation>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  os_log_type_t v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = &v0[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer__interfaceOrientation];
  uint64_t v69 = 1;
  type metadata accessor for UIInterfaceOrientation(0);
  uint64_t v10 = v0;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v8, v5);
  unint64_t v11 = (uint64_t *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_id];
  UUID.init()();
  uint64_t v12 = UUID.uuidString.getter();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  *unint64_t v11 = v12;
  v11[1] = v14;
  uint64_t v15 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view] = 0;
  uint64_t v16 = &v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_coveragePointCloud];
  uint64_t v17 = type metadata accessor for CoveragePointCloud();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  long long v18 = &v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewToWorld];
  long long v19 = *MEMORY[0x263EF89A8];
  long long v20 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  long long v21 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
  long long v22 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
  *(_OWORD *)long long v18 = *MEMORY[0x263EF89A8];
  *((_OWORD *)v18 + 1) = v20;
  *((_OWORD *)v18 + 2) = v21;
  *((_OWORD *)v18 + 3) = v22;
  uint64_t v23 = &v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_projection];
  *(_OWORD *)uint64_t v23 = v19;
  *((_OWORD *)v23 + 1) = v20;
  *((_OWORD *)v23 + 2) = v21;
  *((_OWORD *)v23 + 3) = v22;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_cameraTransformProvider] = 0;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_commandQueue] = 0;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_renderPipelineState] = 0;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer____lazy_storage___voxelRenderer] = 1;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer____lazy_storage___captureCircleRenderer] = 1;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_captureCircle] = 0;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_localTime] = 0;
  uint64_t v24 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_inFlightQueue;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InFlightQueue<CoveragePointRenderer.ResourceEntry>);
  uint64_t v25 = (void *)swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v26 = swift_allocObject();
  *(_DWORD *)(v26 + 16) = 0;
  uint64_t v27 = MEMORY[0x263F8EE78];
  _OWORD v25[2] = v26;
  v25[3] = 0;
  v25[4] = v27;
  *(void *)&v10[v24] = v25;
  uint64_t v28 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_inFlightLock;
  uint64_t v29 = swift_allocObject();
  *(_DWORD *)(v29 + 16) = 0;
  *(void *)&v10[v28] = v29;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_baseRenderer] = 0;
  uint64_t v30 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_reticleDeltaVector;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CoveragePointRenderer.init());
  *(void *)&v10[v30] = v31;
  *(_DWORD *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_motionGoodness] = 1065353216;
  *(_DWORD *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_captureDialOpacityFloor] = 1036831949;
  *(int64x2_t *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewportSize] = vdupq_n_s64(0x4059000000000000uLL);
  uint64_t v32 = &v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_backgroundColor];
  *(_OWORD *)uint64_t v32 = 0u;
  *((_OWORD *)v32 + 1) = 0u;
  uint64_t v33 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_renderStyle;
  v10[v33] = specialized static ExperimentSettings.loadPointCloudRenderStyle(default:)(0) & 1;
  v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_shouldRenderPointsWithAlphaBlend] = 0;
  id v34 = MTLCreateSystemDefaultDevice();
  if (!v34) {
    goto LABEL_19;
  }
  long long v35 = v34;
  *(void *)&v10[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_device] = v34;
  id v36 = objc_allocWithZone(MEMORY[0x263F12D90]);
  swift_unknownObjectRetain();
  id v37 = objc_msgSend(v36, sel_initWithFrame_device_, v35, 0.0, 0.0, 0.0, 0.0);
  uint64_t v38 = *(void **)&v10[v15];
  *(void *)&v10[v15] = v37;

  uint64_t v39 = (objc_class *)type metadata accessor for CoveragePointRenderer(0);
  v68.receiver = v10;
  v68.super_class = v39;
  uint64_t v40 = (char *)objc_msgSendSuper2(&v68, sel_init);
  CoveragePointRenderer.initRenderPipeline()();
  uint64_t v41 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view;
  uint64_t v42 = *(void **)&v40[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view];
  if (!v42)
  {
    __break(1u);
    goto LABEL_12;
  }
  objc_msgSend(v42, sel_setDelegate_, v40);
  type metadata accessor for BaseRenderer();
  float32x4_t v43 = (void *)swift_allocObject();
  v43[3] = 0;
  v43[4] = 0;
  _OWORD v43[2] = v35;
  id v44 = objc_allocWithZone(MEMORY[0x263F128A0]);
  swift_unknownObjectRetain_n();
  id v45 = objc_msgSend(v44, sel_init);
  objc_msgSend(v45, sel_setDepthCompareFunction_, 1);
  objc_msgSend(v45, sel_setDepthWriteEnabled_, 1);
  id v46 = objc_msgSend(v35, sel_newDepthStencilStateWithDescriptor_, v45);

  if (!v46)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v43[3] = v46;
  BaseRenderer.updateDepthAttachmentTexture(width:height:)(100, 100);
  swift_unknownObjectRelease();
  uint64_t v47 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_baseRenderer;
  *(void *)&v40[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_baseRenderer] = v43;
  swift_release();
  uint64_t v48 = *(void *)&v40[v47];
  if (!v48)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  id v49 = objc_allocWithZone(MEMORY[0x263F128A0]);
  swift_retain_n();
  id v50 = objc_msgSend(v49, (SEL)&off_2651E2618);
  objc_msgSend(v50, sel_setDepthCompareFunction_, 1);
  objc_msgSend(v50, sel_setDepthWriteEnabled_, 1);
  id v51 = objc_msgSend(v35, sel_newDepthStencilStateWithDescriptor_, v50);
  swift_release();

  *(void *)(v48 + 24) = v51;
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v52 = *(void **)&v40[v41];
  if (!v52)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  id v53 = objc_msgSend(v52, sel_layer);
  objc_msgSend(v53, sel_setOpaque_, 0);

  long long v54 = *(void **)&v40[v41];
  if (!v54)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  id v55 = objc_msgSend(v54, sel_layer);
  CGColorRef GenericGray = CGColorCreateGenericGray(0.0, 0.0);
  objc_msgSend(v55, sel_setBackgroundColor_, GenericGray);

  CoveragePointRenderer.setupFeatherMask()();
  id v57 = objc_allocWithZone((Class)type metadata accessor for InteractiveCameraTransformManager());
  uint64_t v58 = InteractiveCameraTransformManager.init(radius:springDelay:springTime:)(1.0, 1.0, 1.0);
  uint64_t v59 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_cameraTransformProvider;
  uint64_t v60 = *(void **)&v40[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_cameraTransformProvider];
  *(void *)&v40[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_cameraTransformProvider] = v58;

  unint64_t v61 = *(char **)&v40[v59];
  if (!v61)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v62 = *(void **)&v40[v41];
  if (v62)
  {
    uint64_t v63 = *(void *)&v61[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_dragGesture];
    if (v63)
    {
      uint64_t v64 = v61;
      id v65 = v62;
      objc_msgSend(v65, sel_addGestureRecognizer_, v63);
      swift_unknownObjectRelease();

      return (uint64_t)v40;
    }
    goto LABEL_18;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void CoveragePointRenderer.setupFeatherMask()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)static BoundingBoxHelpers.bundle;
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F157E8]), sel_init);
  id v4 = v2;
  uint64_t v5 = (void *)MEMORY[0x24C533410](0xD000000000000019, 0x80000002466BF560);
  id v6 = objc_msgSend(self, sel_imageNamed_inBundle_, v5, v4);

  if (!v6)
  {

    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)logger);
    long long v21 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v19))
    {
      long long v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v20 = 0;
      _os_log_impl(&dword_2465C2000, v21, v19, "Can't load miniview feather mask: \"miniview_feather_mask.png\"", v20, 2u);
      MEMORY[0x24C5348D0](v20, -1, -1);
    }
    goto LABEL_17;
  }
  id v7 = objc_msgSend(v6, sel_CGImage);
  objc_msgSend(v3, sel_setContents_, v7);

  objc_msgSend(v3, sel_setOpaque_, 0);
  objc_msgSend(v3, sel_setContentsGravity_, *MEMORY[0x263F15E10]);

  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v11 = 0;
    _os_log_impl(&dword_2465C2000, v9, v10, "Setting miniview feather mask layer...", v11, 2u);
    MEMORY[0x24C5348D0](v11, -1, -1);
  }

  uint64_t v12 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view;
  uint64_t v13 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view);
  if (!v13)
  {
    __break(1u);
    goto LABEL_21;
  }
  id v14 = objc_msgSend(v13, sel_layer);
  objc_msgSend(v14, sel_setMask_, v3);

  uint64_t v15 = *(void **)(v1 + v12);
  if (!v15)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v16 = objc_msgSend(v15, sel_layer);
  long long v21 = objc_msgSend(v16, sel_mask);

  if (!v21)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v17 = *(void **)(v1 + v12);
  if (!v17)
  {
LABEL_23:
    __break(1u);
    return;
  }
  objc_msgSend(v17, sel_bounds);
  -[NSObject setFrame:](v21, sel_setFrame_);

LABEL_17:
}

Swift::Void __swiftcall CoveragePointRenderer.mtkView(_:drawableSizeWillChange:)(MTKView _, CGSize drawableSizeWillChange)
{
  uint64_t v3 = v2;
  id v4 = *(void **)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view);
  if (!v4) {
    goto LABEL_8;
  }
  CGFloat height = drawableSizeWillChange.height;
  CGFloat width = drawableSizeWillChange.width;
  type metadata accessor for MTKView();
  uint64_t v8 = _.super.super.super.isa;
  id v9 = v4;
  LOBYTE(_.super.super.super.isa) = static NSObject.== infix(_:_:)();

  if ((uint64_t)_.super.super.super.isa)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)logger);
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v22 = v14;
      *(_DWORD *)uint64_t v13 = 136446210;
      type metadata accessor for CGSize(0);
      uint64_t v15 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v11, v12, "mtkView: size changed!  newSize=%{public}s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v14, -1, -1);
      MEMORY[0x24C5348D0](v13, -1, -1);
    }

    uint64_t v17 = (CGFloat *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewportSize);
    *uint64_t v17 = width;
    v17[1] = height;
    CoveragePointRenderer.setupFeatherMask()();
  }
  else
  {
LABEL_8:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v19))
    {
      long long v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v20 = 0;
      _os_log_impl(&dword_2465C2000, oslog, v19, "mtkView delegate got unexpected view... ignoring!", v20, 2u);
      MEMORY[0x24C5348D0](v20, -1, -1);
    }
  }
}

void CoveragePointRenderer.update(time:arCameraTransform:coveragePointCloud:captureCircle:reticleDeltaVector:motionScore:)(uint64_t a1, uint64_t a2, Swift::Double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, double a7, float a8)
{
  uint64_t v9 = v8;
  int32x4_t v99 = (int32x4_t)a6;
  int32x4_t v100 = (int32x4_t)a5;
  float32x4_t v101 = a4;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CoveragePointCloud(a1, (uint64_t)v17);
  uint64_t v18 = type metadata accessor for CoveragePointCloud();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 0, 1, v18);
  uint64_t v19 = v9 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_coveragePointCloud;
  swift_beginAccess();
  outlined assign with take of CoveragePointCloud?((uint64_t)v17, v19);
  swift_endAccess();
  *(void *)(v9 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_captureCircle) = a2;
  swift_retain();
  swift_release();
  *(Swift::Double *)(v9 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_localTime) = a3;
  *(double *)(v9 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_reticleDeltaVector) = a7;
  *(float *)(v9 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_motionGoodness) = a8;
  CoveragePointRenderer.updateInterfaceOrientationIfNeeded()();
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CoveragePointRenderer.update(time:arCameraTransform:coveragePointCloud:captureCircle:reticleDeltaVector:motionScore:));
  int32x4_t v102 = v20;
  *(double *)v21.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v99.i64, (float32x4_t)v100);
  float32x4_t v97 = v22;
  int32x4_t v99 = vdupq_laneq_s32(v102, 2);
  int32x4_t v100 = vdupq_lane_s32(*(int32x2_t *)v102.i8, 1);
  float32x4_t v101 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, *(float *)v102.i32), v23, *(float32x2_t *)v102.i8, 1), v24, (float32x4_t)v102, 2);
  float32x4_t v98 = (float32x4_t)vdupq_laneq_s32(v102, 3);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v93 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(a1 + *(int *)(v18 + 20), (uint64_t)v27, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  uint64_t v28 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
  {
    outlined destroy of URL?((uint64_t)v27, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
    float32x4_t v96 = *(float32x4_t *)MEMORY[0x263EF89A8];
    float32x4_t v95 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 16);
    float32x4_t v94 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 32);
    float32x4_t v93 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 48);
  }
  else
  {
    ObjectCaptureSession.Frame.Object.transform.getter();
    float32x4_t v96 = v30;
    float32x4_t v95 = v31;
    float32x4_t v94 = v32;
    float32x4_t v93 = v33;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
  }
  float32x4_t v101 = vmlaq_laneq_f32(v101, v97, (float32x4_t)v102, 3);
  *(double *)v34.i64 = CoveragePointCloud.objectToInitialBoxWorld.getter();
  float32x4_t v98 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v96, v34.f32[0]), v95, *(float32x2_t *)v34.f32, 1), v94, v34, 2), v93, v34, 3), *(float *)v102.i32), (float32x4_t)v100, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v96, v35.f32[0]), v95, *(float32x2_t *)v35.f32, 1), v94, v35,
                  2),
                v93,
                v35,
                3)),
            (float32x4_t)v99,
            vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v96, v36.f32[0]), v95, *(float32x2_t *)v36.f32, 1), v94, v36, 2), v93, v36, 3)), v98, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v96, v37.f32[0]), v95, *(float32x2_t *)v37.f32, 1), v94, v37, 2), v93, v37, 3));
  CoveragePointCloud.bboxWorld.getter();
  Transform.init(matrix:)();
  float32x4_t v40 = v39;
  double v42 = *(double *)v41.i64;
  int32x4_t v99 = (int32x4_t)v41;
  int32x4_t v100 = (int32x4_t)v38;
  if (one-time initialization token for automaticBoundingBoxPaddingFactor != -1)
  {
    int32x4_t v102 = (int32x4_t)v40;
    swift_once();
    float32x4_t v40 = (float32x4_t)v102;
    double v42 = *(double *)v99.i64;
    float32x4_t v38 = (float32x4_t)v100;
  }
  *(float32x2_t *)v43.i8 = vmul_n_f32(*(float32x2_t *)v40.f32, 1.0 / *(float *)&static BoundingBoxHelpers.automaticBoundingBoxPaddingFactor);
  v43.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(1.0 / *(float *)&static BoundingBoxHelpers.automaticBoundingBoxPaddingFactor, v40, 2));
  int32x4_t v102 = v43;
  *(double *)v44.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(v42, v38);
  float32x4_t v96 = v45;
  float32x4_t v97 = v44;
  float32x4_t v95 = v46;
  float32x4_t v94 = v47;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static BoundingBoxHelpers.getBoundingSphere(boxWorld:));
  Transform.init(matrix:)();
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of CoveragePointRenderer.update(time:arCameraTransform:coveragePointCloud:captureCircle:reticleDeltaVector:motionScore:));
  specialized static MathHelpers.computeCameraDistanceToContainSphere(boxWorld:cameraFovRadians:nearPlaneDistance:boxPadding:)((float32x4_t)v102, v48, 0.001, 1.5);
  *(double *)v49.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v99.i64, (float32x4_t)v100);
  float32x4_t v96 = v50;
  float32x4_t v97 = v49;
  float32x4_t v95 = v51;
  float32x4_t v94 = v52;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static BoundingBoxHelpers.getBoundingSphere(boxWorld:));
  Transform.init(matrix:)();
  *(float *)&long long v53 = specialized static MathHelpers.computePerspectiveMatrix(fovRadians:aspectRatio:nearZ:farZ:)(1.0472, 1.0);
  uint64_t v54 = v9 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_projection;
  *(_OWORD *)uint64_t v54 = v53;
  *(_OWORD *)(v54 + 16) = v55;
  *(_OWORD *)(v54 + 32) = v56;
  *(_OWORD *)(v54 + 48) = v57;
  float32x4_t v58 = v101;
  v58.i32[3] = 0;
  float32x4_t v59 = v98;
  v59.i32[3] = 0;
  *(float32x2_t *)v60.f32 = specialized static MiniViewHelpers.computeLookAt(cameraWorld:objectWorld:objectExtents:)(v58, v59, *(float32x2_t *)v102.i8);
  __n128 v61 = (__n128)v60;
  float32x4_t v62 = vsubq_f32(v60, v101);
  int32x4_t v63 = (int32x4_t)vmulq_f32(v62, v62);
  v63.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v63, 2), vadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.i8, 1))).u32[0];
  float32x2_t v64 = vrsqrte_f32((float32x2_t)v63.u32[0]);
  float32x2_t v65 = vmul_f32(v64, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v64, v64)));
  specialized static MathHelpers.computeCameraMatrixForConstrainedLookAt(box:boxPadding:lookAtPoint:lookAtDir:projection:useBoundingSphere:)(1, (float32x4_t)v102, (float32x4_t)v100, *(double *)v99.i64, 1.5, v61, vmulq_n_f32(v62, vmul_f32(v65, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v65, v65))).f32[0]), COERCE_FLOAT(*(_OWORD *)v54), *(double *)(v54 + 16), v66, v67, v68, v69, v70, v71, v72, *(float32x4_t *)(v54 + 32), *(float32x4_t *)(v54 + 48));
  float32x4_t v101 = v73;
  float32x4_t v97 = v75;
  float32x4_t v98 = v74;
  float32x4_t v96 = v76;
  uint64_t v77 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_cameraTransformProvider;
  uint64_t v78 = *(void **)(v9 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_cameraTransformProvider);
  if (v78)
  {
    id v79 = v78;
    specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v99.i64, (float32x4_t)v100);
    InteractiveCameraTransformManager.updateTrackedCamera(at:viewToWorld:lookAtBoxWorld:projection:ignoreARCameraTracking:)(a3, 0, v80, v81, v82);

    long long v83 = *(void **)(v9 + v77);
    if (v83)
    {
      id v84 = v83;
      *(double *)v85.i64 = InteractiveCameraTransformManager.computeCurrentTransform()();
      float32x4_t v101 = v86;
      int32x4_t v102 = v85;
      int32x4_t v100 = (int32x4_t)v87;

      *(double *)&long long v88 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v100.i64, v101);
      uint64_t v89 = (_OWORD *)(v9 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewToWorld);
      *uint64_t v89 = v88;
      v89[1] = v90;
      v89[2] = v91;
      v89[3] = v92;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Void __swiftcall CoveragePointRenderer.teardown()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CoveragePointCloud();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_coveragePointCloud;
  swift_beginAccess();
  outlined assign with take of CoveragePointCloud?((uint64_t)v3, v5);
  swift_endAccess();
  *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_captureCircle) = 0;
  swift_release();
  if (!CoveragePointRenderer.captureCircleRenderer.getter())
  {
    __break(1u);
    goto LABEL_7;
  }
  swift_release();
  CoveragePointRenderer.clearView()();
  uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_cameraTransformProvider);
  if (!v6)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v7 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view;
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view);
  if (!v8)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (*(void *)(v6 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_dragGesture))
  {
    objc_msgSend(v8, sel_removeGestureRecognizer_);
    uint64_t v9 = *(void **)(v0 + v7);
    *(void *)(v0 + v7) = 0;

    return;
  }
LABEL_9:
  __break(1u);
}

void *CoveragePointRenderer.updateInterfaceOrientationIfNeeded()()
{
  uint64_t result = *(void **)&v0[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view];
  if (result)
  {
    uint64_t v2 = v0;
    id v3 = objc_msgSend(result, sel_window);
    if (v3
      && (uint64_t v4 = v3, v5 = objc_msgSend(v3, sel_windowScene), v4, v5))
    {
      uint64_t v6 = (uint64_t)objc_msgSend(v5, sel_interfaceOrientation);
    }
    else
    {
      uint64_t v6 = 1;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    uint64_t result = (void *)swift_release();
    if (v6 != v15)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)logger);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v11 = swift_slowAlloc();
        uint64_t v15 = v11;
        *(_DWORD *)uint64_t v10 = 136315138;
        type metadata accessor for UIInterfaceOrientation(0);
        uint64_t v12 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v8, v9, "Device orientatation: publishing the renderer interfaceOrientation=%s", v10, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v11, -1, -1);
        MEMORY[0x24C5348D0](v10, -1, -1);
      }

      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v15 = v6;
      id v14 = v2;
      return (void *)static Published.subscript.setter();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void CoveragePointRenderer.clearView()()
{
  uint64_t v1 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view);
  if (!v2)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  id v3 = objc_msgSend(v2, sel_currentRenderPassDescriptor);
  if (!v3) {
    return;
  }
  uint64_t v4 = v3;
  id v5 = objc_msgSend(v3, sel_colorAttachments);
  id v6 = objc_msgSend(v5, sel_objectAtIndexedSubscript_, 0);

  if (!v6) {
    goto LABEL_15;
  }
  objc_msgSend(v6, sel_setLoadAction_, 2);

  id v7 = objc_msgSend(v4, sel_colorAttachments);
  id v8 = objc_msgSend(v7, sel_objectAtIndexedSubscript_, 0);

  if (!v8)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v8, sel_setClearColor_, *(double *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_backgroundColor), *(double *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_backgroundColor + 8), *(double *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_backgroundColor + 16), *(double *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_backgroundColor + 24));

  os_log_type_t v9 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_commandQueue);
  if (!v9)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id v10 = objc_msgSend(v9, sel_commandBuffer);
  if (!v10)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  id v12 = objc_msgSend(v10, sel_renderCommandEncoderWithDescriptor_, v4);
  if (!v12)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(v12, sel_endEncoding);
  unint64_t v13 = *(void **)(v0 + v1);
  if (!v13)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v14 = objc_msgSend(v13, sel_currentDrawable);
  if (!v14)
  {
LABEL_21:
    __break(1u);
    return;
  }
  objc_msgSend(v11, sel_presentDrawable_, v14);
  swift_unknownObjectRelease();
  objc_msgSend(v11, sel_commit);

  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
}

Swift::Void __swiftcall CoveragePointRenderer.draw(in:)(MTKView in)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  MEMORY[0x270FA5388](v4 - 8);
  id v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_coveragePointCloud;
  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v7, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  uint64_t v8 = type metadata accessor for CoveragePointCloud();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8)
    || (uint64_t v9 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud(),
        uint64_t v10 = *(void *)(v9 - 8),
        uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9),
        v11))
  {
    outlined destroy of URL?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  }
  else
  {
    MEMORY[0x270FA5388](v11);
    unint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v6, v9);
    outlined destroy of URL?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
    ObjectCaptureSession.Frame.PointCloud.points.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    uint64_t v14 = dispatch thunk of OCDataBuffer.count.getter();
    swift_release();
    if (v14 >= 2)
    {
      if (*(unsigned char *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_renderStyle) == 1) {
        CoveragePointRenderer.drawCubes(in:)(in.super.super.super.isa);
      }
      else {
        CoveragePointRenderer.drawPoints(in:)(in.super.super.super.isa);
      }
    }
  }
}

void CoveragePointRenderer.drawPoints(in:)(void *a1)
{
  id v152 = a1;
  id v149 = (int *)type metadata accessor for CoveragePointRenderer.ResourceEntry(0);
  MEMORY[0x270FA5388](v149);
  unint64_t v153 = (uint64_t *)((char *)&v129 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v148 = (uint64_t)&v129 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  v147.n128_u64[0] = (unint64_t)&v129 - v7;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v150 = (uint64_t)&v129 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v129 - v10;
  os_unfair_lock_t v154 = (os_unfair_lock_t)(*(void *)&v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_inFlightLock]
                          + 16);
  os_unfair_lock_lock(v154);
  uint64_t v155 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v12 = *(void *)(v155 - 8);
  MEMORY[0x270FA5388](v155);
  uint64_t v14 = (char *)&v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = v1;
  uint64_t v18 = (uint64_t)&v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_coveragePointCloud];
  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v18, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  uint64_t v19 = type metadata accessor for CoveragePointCloud();
  uint64_t v20 = *(void *)(v19 - 8);
  float32x4_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  uint64_t v22 = v20 + 48;
  if (v21(v11, 1, v19))
  {
    outlined destroy of URL?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v17, 1, 1, v155);
LABEL_4:
    outlined destroy of URL?((uint64_t)v17, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    float32x4_t v24 = v154;
LABEL_5:
    os_unfair_lock_unlock(v24);
    return;
  }
  v142.i64[0] = v22;
  v143.i64[0] = (uint64_t)v21;
  v144.i64[0] = v18;
  v145.i64[0] = v19;
  uint64_t v146 = v14;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v11, (uint64_t)v17, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  outlined destroy of URL?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  uint64_t v23 = v155;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v155) == 1) {
    goto LABEL_4;
  }
  uint64_t v25 = v146;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v146, v17, v23);
  uint64_t v26 = v150;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v144.i64[0], v150, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  if (((uint64_t (*)(uint64_t, uint64_t, uint64_t))v143.i64[0])(v26, 1, v145.i64[0]) == 1) {
    goto LABEL_64;
  }
  uint64_t v27 = v151;
  uint64_t v28 = CoveragePointRenderer.createUniforms(coveragePointCloud:)(v26);
  outlined destroy of CoveragePointCloud(v26, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  uint64_t v29 = v149;
  float32x4_t v30 = v153;
  float32x4_t v31 = (char *)v153 + v149[5];
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v31, v25, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v31, 0, 1, v23);
  swift_unknownObjectRetain();
  ObjectCaptureSession.Frame.PointCloud.points.getter();
  uint64_t v32 = dispatch thunk of OCDataBuffer.asMTLBuffer(from:)();
  swift_release();
  *float32x4_t v30 = v28;
  *(uint64_t *)((char *)v30 + v29[6]) = v32;
  uint64_t v33 = specialized InFlightQueue.retain(_:)((uint64_t)v30);
  float32x4_t v34 = *(void **)&v27[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_commandQueue];
  id v35 = v152;
  if (!v34)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  id v36 = objc_msgSend(v34, sel_commandBuffer);
  if (!v36)
  {
LABEL_35:
    swift_unknownObjectRelease();
    float32x4_t v24 = v154;
LABEL_57:
    outlined destroy of CoveragePointCloud((uint64_t)v30, type metadata accessor for CoveragePointRenderer.ResourceEntry);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v25, v155);
    goto LABEL_5;
  }
  float32x4_t v37 = v36;
  uint64_t v139 = v33;
  float32x4_t v38 = (int *)objc_msgSend(v35, sel_currentRenderPassDescriptor);
  if (!v38)
  {
    swift_unknownObjectRelease();
    goto LABEL_35;
  }
  float32x4_t v39 = v38;
  float32x4_t v137 = (void *)v32;
  id v40 = objc_msgSend(v38, sel_colorAttachments);
  id v41 = objc_msgSend(v40, sel_objectAtIndexedSubscript_, 0);

  if (!v41)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  id v141 = v37;
  objc_msgSend(v41, sel_setLoadAction_, 2);

  id v149 = v39;
  id v42 = objc_msgSend(v39, sel_colorAttachments);
  id v43 = objc_msgSend(v42, sel_objectAtIndexedSubscript_, 0);

  if (!v43)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  objc_msgSend(v43, sel_setClearColor_, *(double *)&v27[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_backgroundColor], *(double *)&v27[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_backgroundColor + 8], *(double *)&v27[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_backgroundColor + 16], *(double *)&v27[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_backgroundColor + 24]);

  uint64_t v150 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_baseRenderer;
  uint64_t v44 = v139;
  if (!*(void *)&v27[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_baseRenderer])
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  double v45 = *(double *)&v27[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewportSize];
  if ((~*(void *)&v45 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_59;
  }
  if (v45 <= -9.22337204e18)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v45 >= 9.22337204e18)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  double v46 = *(double *)&v27[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewportSize + 8];
  if ((~*(void *)&v46 & 0x7FF0000000000000) == 0)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v46 <= -9.22337204e18)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  float32x4_t v138 = (double *)&v27[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewportSize];
  uint64_t v140 = v28;
  if (v46 >= 9.22337204e18)
  {
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  Swift::Int v47 = (uint64_t)v45;
  Swift::Int v48 = (uint64_t)v46;
  swift_retain();
  BaseRenderer.updateDepthAttachmentTexture(width:height:)(v47, v48);
  swift_release();
  id v49 = v149;
  id v50 = objc_msgSend(v149, sel_depthAttachment);
  if (!v50)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  uint64_t v51 = *(void *)&v27[v150];
  if (!v51)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (!*(void *)(v51 + 32))
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  float32x4_t v52 = v50;
  objc_msgSend(v50, sel_setTexture_);

  id v53 = objc_msgSend(v49, sel_depthAttachment);
  if (!v53)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  uint64_t v54 = v53;
  objc_msgSend(v53, sel_setLoadAction_, 2);

  id v55 = objc_msgSend(v49, sel_depthAttachment);
  if (!v55)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  long long v56 = v55;
  objc_msgSend(v55, sel_setStoreAction_, 1);

  id v57 = objc_msgSend(v141, sel_renderCommandEncoderWithDescriptor_, v49);
  if (!v57)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  float32x4_t v58 = v57;
  v157[0] = 0uLL;
  v157[1] = *(_OWORD *)v138;
  v157[2] = xmmword_2466B7BA0;
  objc_msgSend(v57, sel_setViewport_, v157);
  uint64_t v59 = *(void *)&v27[v150];
  if (!v59)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  objc_msgSend(v58, sel_setDepthStencilState_, *(void *)(v59 + 24));
  if (!*(void *)&v27[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_renderPipelineState])
  {
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  objc_msgSend(v58, sel_setRenderPipelineState_);
  objc_msgSend(v58, sel_setVertexBuffer_offset_atIndex_, v140, 0, 0);
  objc_msgSend(v58, sel_setVertexBuffer_offset_atIndex_, v137, 0, 1);
  ObjectCaptureSession.Frame.PointCloud.points.getter();
  uint64_t v60 = dispatch thunk of OCDataBuffer.count.getter();
  swift_release();
  objc_msgSend(v58, sel_drawPrimitives_vertexStart_vertexCount_, 0, 0, v60);
  float32x4_t v137 = v58;
  objc_msgSend(v58, sel_endEncoding);
  uint64_t v61 = *(void *)&v27[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_captureCircle];
  if (!v61) {
    goto LABEL_55;
  }
  swift_retain();
  uint64_t v62 = CoveragePointRenderer.captureCircleRenderer.getter();
  if (!v62)
  {
LABEL_54:
    swift_release();
LABEL_55:
    id v124 = objc_msgSend(v152, sel_currentDrawable);
    if (v124)
    {
      id v125 = v141;
      objc_msgSend(v141, sel_presentDrawable_, v124);
      swift_unknownObjectRelease();
      uint64_t v126 = swift_allocObject();
      *(void *)(v126 + 16) = v27;
      *(void *)(v126 + 24) = v44;
      *(void *)&v157[2] = partial apply for closure #1 in CoveragePointRenderer.drawPoints(in:);
      *((void *)&v157[2] + 1) = v126;
      *(void *)&v157[0] = MEMORY[0x263EF8330];
      *((void *)&v157[0] + 1) = 1107296256;
      *(void *)&v157[1] = thunk for @escaping @callee_guaranteed (@guaranteed MTLCommandBuffer) -> ();
      *((void *)&v157[1] + 1) = &block_descriptor_67;
      uint64_t v127 = _Block_copy(v157);
      unint64_t v128 = v27;
      swift_release();
      objc_msgSend(v125, sel_addCompletedHandler_, v127);
      _Block_release(v127);
      objc_msgSend(v125, sel_commit);
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      float32x4_t v30 = v153;
      float32x4_t v24 = v154;
      uint64_t v25 = v146;
      goto LABEL_57;
    }
    goto LABEL_77;
  }
  uint64_t v136 = v62;
  uint64_t v63 = v144.i64[0];
  uint64_t v64 = v147.n128_u64[0];
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v144.i64[0], v147.n128_i64[0], (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  uint64_t v65 = v145.i64[0];
  uint64_t v66 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v143.i64[0];
  if (((uint64_t (*)(uint64_t, uint64_t, uint64_t))v143.i64[0])(v64, 1, v145.i64[0]) == 1)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v67.n128_f64[0] = CoveragePointCloud.bboxWorld.getter();
  __n128 v134 = v68;
  __n128 v135 = v67;
  float32x4_t v132 = v70;
  __n128 v133 = v69;
  outlined destroy of CoveragePointCloud(v64, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  v71.n128_f64[0] = specialized static BoundingBoxHelpers.unpaddedBoundingBox(boxWorld:)();
  __n128 v147 = v71;
  __n128 v134 = v73;
  __n128 v135 = v72;
  __n128 v133 = v74;
  uint64_t v75 = v63;
  uint64_t v76 = v148;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v75, v148, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  if (v66(v76, 1, v65) == 1)
  {
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  MEMORY[0x270FA5388](v77 - 8);
  id v79 = (char *)&v129 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v76 + *(int *)(v65 + 20), (uint64_t)v79, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  uint64_t v80 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  uint64_t v81 = *(void *)(v80 - 8);
  int v82 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80);
  swift_retain();
  if (v82 == 1)
  {
    outlined destroy of URL?((uint64_t)v79, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
    float32x4_t v83 = *(float32x4_t *)MEMORY[0x263EF89A8];
    float32x4_t v144 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 16);
    float32x4_t v145 = v83;
    float32x4_t v84 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 32);
    float32x4_t v142 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 48);
    float32x4_t v143 = v84;
  }
  else
  {
    ObjectCaptureSession.Frame.Object.transform.getter();
    float32x4_t v144 = v86;
    float32x4_t v145 = v85;
    float32x4_t v142 = v88;
    float32x4_t v143 = v87;
    (*(void (**)(char *, uint64_t))(v81 + 8))(v79, v80);
  }
  uint64_t v89 = v148;
  id v90 = v149;
  *(double *)v91.i64 = CoveragePointCloud.objectToInitialBoxWorld.getter();
  float32x4_t v129 = v91;
  float32x4_t v130 = v92;
  float32x4_t v131 = v93;
  float32x4_t v132 = v94;
  outlined destroy of CoveragePointCloud(v89, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  uint64_t v27 = v151;
  float v102 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v27[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_reticleDeltaVector], *(float32x2_t *)&v27[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_reticleDeltaVector])));
  float v103 = 1.0 - v102;
  if (v102 > 1.0) {
    float v103 = 0.0;
  }
  if (v102 > 0.0) {
    float v104 = v103;
  }
  else {
    float v104 = 1.0;
  }
  float v105 = *(float *)&v151[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_motionGoodness] * v104;
  __n128 v106 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v145, v129.f32[0]), v144, *(float32x2_t *)v129.f32, 1), v143, v129, 2), v142, v129, 3);
  __n128 v107 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v145, v130.f32[0]), v144, *(float32x2_t *)v130.f32, 1), v143, v130, 2), v142, v130, 3);
  __n128 v108 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v145, v131.f32[0]), v144, *(float32x2_t *)v131.f32, 1), v143, v131, 2), v142, v131, 3);
  __n128 v109 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v145, v132.f32[0]), v144, *(float32x2_t *)v132.f32, 1), v143, v132, 2), v142, v132, 3);
  if (v105 <= 0.1) {
    float v105 = 0.1;
  }
  CaptureCircleRenderer.update(captureCircle:bboxWorld:objectToWorld:viewToWorld:viewToClip:captureCircleViewportFraction:time:opacity:)(v61, v147, v135, v134, v133, v106, v107, v108, v109, v95, v96, v97, v98, v99, v100, v101, *(_OWORD *)&v151[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewToWorld], *(_OWORD *)&v151[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewToWorld + 16], *(_OWORD *)&v151[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewToWorld + 32],
    *(_OWORD *)&v151[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewToWorld + 48],
    *(_OWORD *)&v151[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_projection],
    *(_OWORD *)&v151[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_projection + 16],
    *(_OWORD *)&v151[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_projection + 32],
    *(_OWORD *)&v151[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_projection + 48],
    1056964608,
    *(void *)&v151[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_localTime],
    v105);
  swift_release();
  id v110 = v90;
  id v111 = objc_msgSend(v110, sel_colorAttachments);
  id v112 = objc_msgSend(v111, sel_objectAtIndexedSubscript_, 0);

  uint64_t v44 = v139;
  if (!v112) {
    goto LABEL_80;
  }
  objc_msgSend(v112, sel_setLoadAction_, 1);

  id v113 = objc_msgSend(v110, sel_depthAttachment);
  if (!v113)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  uint64_t v114 = *(void *)&v27[v150];
  if (!v114)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  id v115 = v141;
  if (!*(void *)(v114 + 32))
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  float32x4_t v116 = v113;
  objc_msgSend(v113, sel_setTexture_);

  id v117 = objc_msgSend(v110, sel_depthAttachment);
  if (!v117)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  float32x4_t v118 = v117;
  objc_msgSend(v117, sel_setLoadAction_, 0);

  id v119 = objc_msgSend(v110, sel_depthAttachment);
  if (!v119)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  uint64_t v120 = v119;
  objc_msgSend(v119, sel_setStoreAction_, 0);

  double v121 = *v138;
  double v122 = v138[1];
  uint64_t v123 = v136;
  *(double *)(v136 + 384) = *v138;
  *(double *)(v123 + 392) = v122;
  CaptureCircleRenderer.renderCaptureBinTriangles(into:viewportSize:desc:)(v115, (uint64_t)v110, v121, v122);
  if (!*(void *)(v123 + 376))
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  outlined init with take of CommonCircleRenderState?(v123 + 80, (uint64_t)v156);
  outlined init with take of CommonCircleRenderState?((uint64_t)v156, (uint64_t)v157);
  if (_s19_RealityKit_SwiftUI23CommonCircleRenderStateVSgWOg((uint64_t)v157) != 1)
  {
    memcpy(v158, v157, 0x120uLL);
    swift_retain();
    PlatterRenderer.render(state:into:viewportSize:desc:depthStencilState:)((uint64_t)v158, v115, (uint64_t)v110, 0, v121, v122);
    swift_release();
    swift_release();

    goto LABEL_54;
  }
LABEL_87:
  __break(1u);
}

void closure #1 in CoveragePointRenderer.drawPoints(in:)(void *a1, uint64_t a2, uint64_t a3)
{
  specialized InFlightQueue.release(id:)(a3);
  uint64_t v4 = &off_2651E2000;
  id v5 = objc_msgSend(a1, sel_error);
  if (v5)
  {
    uint64_t v6 = v5;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    id v8 = v6;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(void *)&long long v57 = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      id v13 = v8;
      id v14 = objc_msgSend(v13, sel_description);
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      unint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, (uint64_t *)&v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v9, v10, "Got error rendering PIP CommandBuffer: error=%{public}s", v11, 0xCu);
      swift_arrayDestroy();
      uint64_t v18 = v12;
      uint64_t v4 = &off_2651E2000;
      MEMORY[0x24C5348D0](v18, -1, -1);
      MEMORY[0x24C5348D0](v11, -1, -1);
    }
    else
    {
    }
  }
  id v19 = [a1 (SEL)v4[305]];
  if (v19)
  {
    uint64_t v20 = v19;
    id v21 = objc_msgSend(v19, sel_userInfo);
    uint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v22 + 16) && (unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24), (v26 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v22 + 56) + 32 * v25, (uint64_t)&v57);
    }
    else
    {
      long long v57 = 0u;
      long long v58 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*((void *)&v58 + 1))
    {

      outlined destroy of URL?((uint64_t)&v57, (uint64_t *)&demangling cache variable for type metadata for Any?);
      return;
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [MTLCommandBufferEncoderInfo]);
    if ((swift_dynamicCast() & 1) == 0)
    {

      return;
    }
    unint64_t v27 = v56;
    if (v56 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v28) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v28 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v28)
      {
LABEL_16:
        id v49 = v20;
        if (v28 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v29 = 0;
        unint64_t v30 = v56 & 0xC000000000000001;
        float32x4_t v31 = logger;
        unint64_t v32 = 0x268F90000uLL;
        unint64_t v50 = v56;
        do
        {
          if (v30)
          {
            uint64_t v33 = (void *)MEMORY[0x24C533AF0](v29, v27);
          }
          else
          {
            uint64_t v33 = *(void **)(v27 + 8 * v29 + 32);
            swift_unknownObjectRetain();
          }
          if (*(void *)(v32 + 968) != -1) {
            swift_once();
          }
          uint64_t v34 = type metadata accessor for Logger();
          __swift_project_value_buffer(v34, (uint64_t)v31);
          swift_unknownObjectRetain_n();
          id v35 = Logger.logObject.getter();
          os_log_type_t v36 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v35, v36))
          {
            uint64_t v54 = swift_slowAlloc();
            uint64_t v55 = swift_slowAlloc();
            unint64_t v56 = v55;
            *(_DWORD *)uint64_t v54 = 136446210;
            log = v35;
            id v37 = objc_msgSend(v33, sel_label, v49);
            uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v39 = v38;

            id v40 = objc_msgSend(v33, sel_debugSignposts);
            id v41 = v31;
            unint64_t v42 = v30;
            uint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            *(void *)&long long v57 = v43;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
            os_log_type_t type = v36;
            lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
            uint64_t v44 = BidirectionalCollection<>.joined(separator:)();
            uint64_t v45 = v28;
            Swift::Int v47 = v46;
            unint64_t v30 = v42;
            float32x4_t v31 = v41;
            unint64_t v32 = 0x268F90000;
            swift_bridgeObjectRelease();
            *(void *)&long long v57 = v51;
            *((void *)&v57 + 1) = v39;
            swift_bridgeObjectRetain();
            v48._countAndFlagsBits = v44;
            v48._object = v47;
            String.append(_:)(v48);
            swift_bridgeObjectRelease();
            uint64_t v28 = v45;
            swift_bridgeObjectRelease();
            *(void *)(v54 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, *((unint64_t *)&v57 + 1), (uint64_t *)&v56);
            swift_unknownObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_2465C2000, log, type, "%{public}s", (uint8_t *)v54, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x24C5348D0](v55, -1, -1);
            unint64_t v27 = v50;
            MEMORY[0x24C5348D0](v54, -1, -1);
            swift_unknownObjectRelease();
          }
          else
          {

            swift_unknownObjectRelease_n();
          }
          ++v29;
        }
        while (v28 != v29);

        goto LABEL_32;
      }
    }

LABEL_32:
    swift_bridgeObjectRelease();
  }
}

void CoveragePointRenderer.drawCubes(in:)(void *a1)
{
  id v93 = a1;
  float32x4_t v91 = (int *)type metadata accessor for CoveragePointRenderer.ResourceEntry(0);
  MEMORY[0x270FA5388](v91);
  uint64_t v95 = (uint64_t *)((char *)&v75 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  id v90 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v92 = (uint64_t)&v75 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v75 - v8;
  os_unfair_lock_t v96 = (os_unfair_lock_t)(*(void *)&v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_inFlightLock]
                         + 16);
  os_unfair_lock_lock(v96);
  uint64_t v10 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v97 = *(void *)(v10 - 8);
  uint64_t v98 = v10;
  uint64_t v11 = *(void *)(v97 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  uint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  MEMORY[0x270FA5388](v12 - 8);
  float32x4_t v94 = v1;
  uint64_t v14 = (uint64_t)&v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_coveragePointCloud];
  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v14, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  uint64_t v15 = type metadata accessor for CoveragePointCloud();
  uint64_t v16 = *(void *)(v15 - 8);
  unint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v18 = v16 + 48;
  if (v17(v9, 1, v15))
  {
    outlined destroy of URL?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56))((char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v98);
LABEL_4:
    outlined destroy of URL?((uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
LABEL_5:
    os_unfair_lock_unlock(v96);
    return;
  }
  uint64_t v85 = v18;
  float32x4_t v86 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v17;
  uint64_t v87 = v15;
  uint64_t v88 = v14;
  uint64_t v84 = v13;
  uint64_t v89 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v9, (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  outlined destroy of URL?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  uint64_t v19 = v97;
  uint64_t v20 = v98;
  uint64_t v21 = v97 + 48;
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48);
  if (v22((char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v98) == 1) {
    goto LABEL_4;
  }
  uint64_t v81 = v22;
  uint64_t v23 = *(void (**)(void, void, void))(v19 + 32);
  uint64_t v24 = v89;
  uint64_t v79 = v19 + 32;
  uint64_t v78 = (void (*)(char *, char *, uint64_t))v23;
  v23(v89, (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v20);
  uint64_t v25 = v92;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v88, v92, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  if (v86(v25, 1, v87) == 1)
  {
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v80 = v21;
  char v26 = v94;
  uint64_t v27 = CoveragePointRenderer.createUniforms(coveragePointCloud:)(v25);
  outlined destroy of CoveragePointCloud(v25, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  uint64_t v28 = v91;
  uint64_t v29 = v95;
  unint64_t v30 = (char *)v95 + v91[5];
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v30, v24, v20);
  float32x4_t v31 = *(void (**)(void, void, void, void))(v19 + 56);
  uint64_t v92 = v19 + 56;
  float32x4_t v83 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v31;
  v31(v30, 0, 1, v20);
  swift_unknownObjectRetain();
  ObjectCaptureSession.Frame.PointCloud.points.getter();
  uint64_t v32 = dispatch thunk of OCDataBuffer.asMTLBuffer(from:)();
  swift_release();
  *uint64_t v29 = v27;
  *(uint64_t *)((char *)v29 + v28[6]) = v32;
  uint64_t v33 = specialized InFlightQueue.retain(_:)((uint64_t)v29);
  uint64_t v34 = *(void **)&v26[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_commandQueue];
  if (!v34)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  id v35 = objc_msgSend(v34, sel_commandBuffer);
  if (!v35) {
    goto LABEL_27;
  }
  os_log_type_t v36 = v35;
  id v37 = (int *)objc_msgSend(v93, sel_currentRenderPassDescriptor);
  if (!v37)
  {
    swift_unknownObjectRelease();
LABEL_27:
    swift_unknownObjectRelease();
    uint64_t v59 = v89;
LABEL_35:
    outlined destroy of CoveragePointCloud((uint64_t)v29, type metadata accessor for CoveragePointRenderer.ResourceEntry);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v59, v20);
    goto LABEL_5;
  }
  uint64_t v38 = v37;
  uint64_t v77 = v33;
  id v82 = v36;
  id v39 = objc_msgSend(v37, sel_colorAttachments);
  id v40 = objc_msgSend(v39, sel_objectAtIndexedSubscript_, 0);

  if (!v40)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  objc_msgSend(v40, sel_setLoadAction_, 2);

  float32x4_t v91 = v38;
  id v41 = objc_msgSend(v38, sel_colorAttachments);
  id v42 = objc_msgSend(v41, sel_objectAtIndexedSubscript_, 0);

  if (!v42)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  objc_msgSend(v42, sel_setClearColor_, *(double *)&v26[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_backgroundColor], *(double *)&v26[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_backgroundColor + 8], *(double *)&v26[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_backgroundColor + 16], *(double *)&v26[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_backgroundColor + 24]);

  uint64_t v29 = (uint64_t *)OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_baseRenderer;
  uint64_t v43 = (uint64_t)v90;
  if (!*(void *)&v26[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_baseRenderer])
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  double v44 = *(double *)&v26[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewportSize];
  if ((~*(void *)&v44 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v44 <= -9.22337204e18)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v44 >= 9.22337204e18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  double v45 = *(double *)&v26[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewportSize + 8];
  if ((~*(void *)&v45 & 0x7FF0000000000000) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v45 <= -9.22337204e18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v76 = (long long *)&v26[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewportSize];
  if (v45 >= 9.22337204e18)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  Swift::Int v46 = (uint64_t)v44;
  Swift::Int v47 = (uint64_t)v45;
  swift_retain();
  BaseRenderer.updateDepthAttachmentTexture(width:height:)(v46, v47);
  swift_release();
  Swift::String v48 = v91;
  id v49 = objc_msgSend(v91, sel_depthAttachment);
  if (!v49)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v50 = *(uint64_t *)((char *)v29 + (void)v26);
  if (!v50)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v29 = v95;
  if (!*(void *)(v50 + 32))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  uint64_t v51 = v49;
  objc_msgSend(v49, sel_setTexture_);

  float32x4_t v52 = (long long *)objc_msgSend(v82, sel_renderCommandEncoderWithDescriptor_, v48);
  if (!v52)
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t aBlock = 0;
  uint64_t v100 = 0;
  long long v101 = *v76;
  long long v102 = xmmword_2466B7BA0;
  uint64_t v76 = v52;
  id v53 = objc_msgSend(v52, sel_setViewport_, &aBlock);
  uint64_t v54 = MEMORY[0x270FA5388](v53);
  uint64_t v55 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v54);
  long long v57 = (char *)&v75 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v88, v43, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  unsigned int v58 = v86(v43, 1, v87);
  uint64_t v75 = v27;
  if (v58)
  {
    outlined destroy of URL?(v43, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
    v83(v57, 1, 1, v20);
    goto LABEL_29;
  }
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v43, (uint64_t)v57, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  outlined destroy of URL?(v43, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  if (v81(v57, 1, v20) == 1)
  {
LABEL_29:
    outlined destroy of URL?((uint64_t)v57, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    if (one-time initialization token for logger == -1)
    {
LABEL_30:
      uint64_t v60 = type metadata accessor for Logger();
      __swift_project_value_buffer(v60, (uint64_t)logger);
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      BOOL v63 = os_log_type_enabled(v61, v62);
      uint64_t v64 = v94;
      uint64_t v59 = v89;
      uint64_t v65 = v76;
      if (v63)
      {
        uint64_t v66 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v66 = 0;
        _os_log_impl(&dword_2465C2000, v61, v62, "coveragePoints is nil!  Not rendering voxels!", v66, 2u);
        MEMORY[0x24C5348D0](v66, -1, -1);
      }

LABEL_33:
      id v67 = v93;
      objc_msgSend(v65, sel_endEncoding, v75);
      id v68 = objc_msgSend(v67, sel_currentDrawable);
      if (v68)
      {
        id v69 = v82;
        objc_msgSend(v82, sel_presentDrawable_, v68);
        swift_unknownObjectRelease();
        uint64_t v70 = swift_allocObject();
        uint64_t v71 = v77;
        *(void *)(v70 + 16) = v64;
        *(void *)(v70 + 24) = v71;
        *(void *)&long long v102 = partial apply for closure #1 in CoveragePointRenderer.drawCubes(in:);
        *((void *)&v102 + 1) = v70;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v100 = 1107296256;
        *(void *)&long long v101 = thunk for @escaping @callee_guaranteed (@guaranteed MTLCommandBuffer) -> ();
        *((void *)&v101 + 1) = &block_descriptor_5;
        __n128 v72 = _Block_copy(&aBlock);
        __n128 v73 = v64;
        swift_release();
        objc_msgSend(v69, sel_addCompletedHandler_, v72);
        _Block_release(v72);
        objc_msgSend(v69, sel_commit);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        goto LABEL_35;
      }
      goto LABEL_54;
    }
LABEL_44:
    swift_once();
    goto LABEL_30;
  }
  v78((char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v57, v20);
  uint64_t v64 = v94;
  CoveragePointRenderer.voxelRenderer.getter();
  if (v74)
  {
    uint64_t v65 = v76;
    VoxelRenderer.render(encoder:uniforms:pointCloud:)(v76, v27);
    swift_release();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v55, v20);
    uint64_t v59 = v89;
    goto LABEL_33;
  }
LABEL_55:
  __break(1u);
}

void CoveragePointRenderer.initRenderPipeline()()
{
  v35[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_device);
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  v35[0] = 0;
  id v2 = objc_msgSend(v1, sel_newDefaultLibraryWithBundle_error_, static BaseRenderer.bundle, v35);
  if (!v2)
  {
    id v31 = v35[0];
    uint64_t v32 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type CoveragePointRenderer.Error and conformance CoveragePointRenderer.Error();
    swift_allocError();
    swift_willThrow();
    return;
  }
  uint64_t v3 = v2;
  id v4 = v35[0];
  uint64_t v5 = (void *)MEMORY[0x24C533410](0xD00000000000002BLL, 0x80000002466C0B50);
  id v6 = objc_msgSend(v3, sel_newFunctionWithName_, v5);

  uint64_t v7 = (void *)MEMORY[0x24C533410](0xD00000000000002ELL, 0x80000002466BF510);
  id v8 = objc_msgSend(v3, sel_newFunctionWithName_, v7);

  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F129C0]), sel_init);
  objc_msgSend(v9, sel_setAlphaToCoverageEnabled_, 0);
  objc_msgSend(v9, sel_setVertexFunction_, v6);
  objc_msgSend(v9, sel_setFragmentFunction_, v8);
  id v10 = objc_msgSend(v9, sel_colorAttachments);
  id v11 = objc_msgSend(v10, sel_objectAtIndexedSubscript_, 0);

  if (!v11)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v12 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_view);
  if (!v12)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  objc_msgSend(v11, sel_setPixelFormat_, objc_msgSend(v12, sel_colorPixelFormat));

  id v13 = objc_msgSend(v9, sel_colorAttachments);
  id v14 = objc_msgSend(v13, sel_objectAtIndexedSubscript_, 0);

  if (!v14)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  objc_msgSend(v14, sel_setBlendingEnabled_, 0);

  id v15 = objc_msgSend(v9, sel_colorAttachments);
  id v16 = objc_msgSend(v15, sel_objectAtIndexedSubscript_, 0);

  if (!v16)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  objc_msgSend(v16, sel_setRgbBlendOperation_, 0);

  id v17 = objc_msgSend(v9, sel_colorAttachments);
  id v18 = objc_msgSend(v17, sel_objectAtIndexedSubscript_, 0);

  if (!v18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  objc_msgSend(v18, sel_setAlphaBlendOperation_, 0);

  id v19 = objc_msgSend(v9, sel_colorAttachments);
  id v20 = objc_msgSend(v19, sel_objectAtIndexedSubscript_, 0);

  if (!v20)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  objc_msgSend(v20, sel_setSourceRGBBlendFactor_, 4);

  id v21 = objc_msgSend(v9, sel_colorAttachments);
  id v22 = objc_msgSend(v21, sel_objectAtIndexedSubscript_, 0);

  if (!v22)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  objc_msgSend(v22, sel_setSourceAlphaBlendFactor_, 4);

  id v23 = objc_msgSend(v9, sel_colorAttachments);
  id v24 = objc_msgSend(v23, sel_objectAtIndexedSubscript_, 0);

  if (!v24)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  objc_msgSend(v24, sel_setDestinationRGBBlendFactor_, 5);

  id v25 = objc_msgSend(v9, sel_colorAttachments);
  id v26 = objc_msgSend(v25, sel_objectAtIndexedSubscript_, 0);

  if (!v26)
  {
LABEL_28:
    __break(1u);
    return;
  }
  objc_msgSend(v26, sel_setDestinationAlphaBlendFactor_, 5);

  objc_msgSend(v9, sel_setDepthAttachmentPixelFormat_, 252);
  v35[0] = 0;
  id v27 = objc_msgSend(v1, sel_newRenderPipelineStateWithDescriptor_error_, v9, v35);
  id v28 = v35[0];
  if (v27)
  {
    *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_renderPipelineState) = v27;
    id v29 = v28;
    swift_unknownObjectRelease();
    id v30 = objc_msgSend(v1, sel_newCommandQueue);
    if (v30)
    {
      *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_commandQueue) = v30;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      return;
    }
    lazy protocol witness table accessor for type CoveragePointRenderer.Error and conformance CoveragePointRenderer.Error();
    swift_allocError();
    swift_willThrow();
  }
  else
  {
    id v33 = v35[0];
    uint64_t v34 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type CoveragePointRenderer.Error and conformance CoveragePointRenderer.Error();
    swift_allocError();
    swift_willThrow();
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
}

uint64_t CoveragePointRenderer.createUniforms(coveragePointCloud:)(uint64_t a1)
{
  id v3 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_device), sel_newBufferWithLength_options_, 784, 0);
  if (!v3)
  {
    __break(1u);
    goto LABEL_12;
  }
  id v4 = v3;
  uint64_t v5 = (float32x4_t *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v69 = v4;
  uint64_t v6 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(a1, (uint64_t)v12, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  id v68 = &v63;
  id v13 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v67 = v6;
  v13(v9, v12, v6);
  ObjectCaptureSession.Frame.PointCloud.points.getter();
  unint64_t v14 = dispatch thunk of OCDataBuffer.count.getter();
  swift_release();
  if ((v14 & 0x8000000000000000) != 0) {
    goto LABEL_13;
  }
  id v15 = v69;
  if (HIDWORD(v14)) {
    goto LABEL_13;
  }
  v5[33].i32[3] = v14;
  uint64_t v16 = v70;
  float v17 = *(double *)(v70 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewportSize);
  v5[34].f32[1] = v17 * 0.01;
  ObjectCaptureSession.Frame.PointCloud.transform.getter();
  *uint64_t v5 = v18;
  v5[1] = v19;
  _OWORD v5[2] = v20;
  v5[3] = v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  MEMORY[0x270FA5388](v22 - 8);
  id v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for CoveragePointCloud();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(a1 + *(int *)(v25 + 20), (uint64_t)v24, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  uint64_t v26 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26) == 1)
  {
    outlined destroy of URL?((uint64_t)v24, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
    float32x4_t v66 = *(float32x4_t *)MEMORY[0x263EF89A8];
    float32x4_t v65 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 16);
    float32x4_t v64 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 32);
    float32x4_t v63 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 48);
  }
  else
  {
    ObjectCaptureSession.Frame.Object.transform.getter();
    float32x4_t v66 = v28;
    float32x4_t v65 = v29;
    float32x4_t v64 = v30;
    float32x4_t v63 = v31;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
  }
  *(double *)v32.i64 = CoveragePointCloud.objectToInitialBoxWorld.getter();
  float32x4_t v33 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v66, v32.f32[0]), v65, *(float32x2_t *)v32.f32, 1), v64, v32, 2), v63, v32, 3);
  float32x4_t v35 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v66, v34.f32[0]), v65, *(float32x2_t *)v34.f32, 1), v64, v34, 2), v63, v34, 3);
  float32x4_t v37 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v66, v36.f32[0]), v65, *(float32x2_t *)v36.f32, 1), v64, v36, 2), v63, v36, 3);
  float32x4_t v39 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v66, v38.f32[0]), v65, *(float32x2_t *)v38.f32, 1), v64, v38, 2), v63, v38, 3);
  v5[8] = v33;
  v5[9] = v35;
  v5[10] = v37;
  v5[11] = v39;
  id v40 = (float32x4_t *)(v16 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewToWorld);
  *(simd_float4x4 *)v5[12].f32 = __invert_f4(*(simd_float4x4 *)(v16
                                                              + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_viewToWorld));
  float32x4_t v41 = v40[1];
  float32x4_t v42 = v40[2];
  float32x4_t v43 = v40[3];
  v5[16] = *v40;
  v5[17] = v41;
  v5[18] = v42;
  v5[19] = v43;
  float32x4_t v44 = *(float32x4_t *)(v16 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_projection + 16);
  float32x4_t v45 = *(float32x4_t *)(v16 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_projection + 32);
  float32x4_t v46 = *(float32x4_t *)(v16 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_projection + 48);
  v5[20] = *(float32x4_t *)(v16 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_projection);
  v5[21] = v44;
  v5[22] = v45;
  v5[23] = v46;
  CoveragePointRenderer.computeOffsetDeltaViewTransform()();
  v5[24] = v47;
  v5[25] = v48;
  v5[26] = v49;
  v5[27] = v50;
  v5[28].i64[0] = *(void *)(v16 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_reticleDeltaVector);
  v5[28].i32[2] = *(_DWORD *)(v16 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_motionGoodness);
  v5[34].i8[8] = 0;
  Swift::Bool v51 = CoveragePointCloud.isValid()();
  long long v52 = 0uLL;
  long long v53 = 0uLL;
  long long v54 = 0uLL;
  long long v55 = 0uLL;
  if (v51) {
    *(double *)&long long v52 = CoveragePointCloud.bboxWorld.getter();
  }
  v72[0] = v52;
  v72[1] = v53;
  v72[2] = v54;
  v72[3] = v55;
  BOOL v73 = !v51;
  __n128 v56 = specialized static BoundingBoxHelpers.getBoundingSphere(boxWorld:)((uint64_t)v72);
  v56.n128_u32[2] = v57;
  v5[35] = (float32x4_t)v56;
  v5[36].i32[0] = v58;
  specialized static BoundingBoxHelpers.getFadingClipEllipsoid(boxWorld:startFadeRadius:endFadeRadius:shouldClipBottom:)((uint64_t)v72, 1, (uint64_t)v71, 1.5, 2.0);
  float32x4_t v59 = (float32x4_t)v71[3];
  v5[39] = (float32x4_t)v71[2];
  v5[40] = v59;
  float32x4_t v60 = (float32x4_t)v71[5];
  v5[41] = (float32x4_t)v71[4];
  v5[42] = v60;
  float32x4_t v61 = (float32x4_t)v71[1];
  v5[37] = (float32x4_t)v71[0];
  v5[38] = v61;
  v5[43].i16[0] = 1;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v67);
  return (uint64_t)v15;
}

uint64_t CoveragePointRenderer.computeOffsetDeltaViewTransform()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  MEMORY[0x270FA5388](v2 - 8);
  id v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CoveragePointCloud();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_coveragePointCloud;
  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v9, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return outlined destroy of URL?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  }
  outlined init with take of CoveragePointCloud((uint64_t)v4, (uint64_t)v8);
  CoveragePointCloud.bboxWorld.getter();
  Transform.init(matrix:)();
  float32x4_t v12 = vmulq_f32(v11, v11);
  float v13 = sqrtf(v12.f32[2] + vaddv_f32(*(float32x2_t *)v12.f32));
  Transform.init()();
  float32x4_t v26 = v15;
  long long v27 = v14;
  *(float *)&long long v14 = v13 * -0.5;
  long long v25 = v14;
  float32x2_t v16 = *(float32x2_t *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_reticleDeltaVector);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
  v18.i32[0] = v25;
  v18.f32[1] = -(float)(v13 * -0.5);
  *(float32x2_t *)(inited + 32) = vmul_f32(v16, v18);
  *(_DWORD *)(inited + 40) = 0;
  specialized SIMD.init<A>(_:)(inited);
  long long v25 = v19;
  swift_setDeallocating();
  *(double *)&long long v20 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v25, v26);
  float32x4_t v26 = v21;
  long long v27 = v20;
  long long v24 = v23;
  long long v25 = v22;
  return outlined destroy of CoveragePointCloud((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
}

id CoveragePointRenderer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoveragePointRenderer(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for CoveragePointRenderer()
{
  return type metadata accessor for CoveragePointRenderer(0);
}

uint64_t type metadata accessor for CoveragePointRenderer(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, type metadata singleton initialization cache for CoveragePointRenderer);
}

void type metadata completion function for CoveragePointRenderer()
{
  type metadata accessor for Published<UIInterfaceOrientation>(319, (unint64_t *)&lazy cache variable for type metadata for Published<UIInterfaceOrientation>, (uint64_t (*)(uint64_t))type metadata accessor for UIInterfaceOrientation, MEMORY[0x263EFDE58]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<UIInterfaceOrientation>(319, &lazy cache variable for type metadata for CoveragePointCloud?, (uint64_t (*)(uint64_t))type metadata accessor for CoveragePointCloud, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CoveragePointRenderer.ResourceEntry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
    uint64_t v12 = *(void *)(v11 - 8);
    float v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_unknownObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(uint64_t *)((char *)v7 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_unknownObjectRetain();
  }
  return v7;
}

uint64_t destroy for CoveragePointRenderer.ResourceEntry(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_unknownObjectRelease();
}

void *initializeWithCopy for CoveragePointRenderer.ResourceEntry(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for CoveragePointRenderer.ResourceEntry(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

void *initializeWithTake for CoveragePointRenderer.ResourceEntry(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for CoveragePointRenderer.ResourceEntry(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CoveragePointRenderer.ResourceEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246632278);
}

uint64_t sub_246632278(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    int v12 = (char *)a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for CoveragePointRenderer.ResourceEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24663234C);
}

void *sub_24663234C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for CoveragePointRenderer.ResourceEntry(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, type metadata singleton initialization cache for CoveragePointRenderer.ResourceEntry);
}

void type metadata completion function for CoveragePointRenderer.ResourceEntry()
{
  type metadata accessor for Published<UIInterfaceOrientation>(319, &lazy cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?, MEMORY[0x270FB2640], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Published<UIInterfaceOrientation>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CoveragePointRenderer@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CoveragePointRenderer(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t outlined init with take of CoveragePointCloud(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CoveragePointCloud();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t key path getter for CoveragePointRenderer.interfaceOrientation : CoveragePointRenderer@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for CoveragePointRenderer.interfaceOrientation : CoveragePointRenderer(uint64_t a1, void **a2)
{
  objc_super v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return static Published.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type CoveragePointRenderer.Error and conformance CoveragePointRenderer.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type CoveragePointRenderer.Error and conformance CoveragePointRenderer.Error;
  if (!lazy protocol witness table cache variable for type CoveragePointRenderer.Error and conformance CoveragePointRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoveragePointRenderer.Error and conformance CoveragePointRenderer.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CoveragePointRenderer.Error and conformance CoveragePointRenderer.Error;
  if (!lazy protocol witness table cache variable for type CoveragePointRenderer.Error and conformance CoveragePointRenderer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoveragePointRenderer.Error and conformance CoveragePointRenderer.Error);
  }
  return result;
}

uint64_t outlined destroy of CoveragePointCloud(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_246632780()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in CoveragePointRenderer.drawCubes(in:)()
{
  specialized InFlightQueue.release(id:)(*(void *)(v0 + 24));
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

void partial apply for closure #1 in CoveragePointRenderer.drawPoints(in:)(void *a1)
{
  closure #1 in CoveragePointRenderer.drawPoints(in:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t specialized CoveragePointCloudMiniView.init(model:renderer:)@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  id v28 = a1;
  uint64_t v3 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.MakeConnectable<NSNotificationCenter.Publisher>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_msgSend(self, sel_currentDevice);
  id v12 = objc_msgSend(v11, sel_orientation);

  id v29 = v12;
  type metadata accessor for UIDeviceOrientation(0);
  State.init(wrappedValue:)();
  uint64_t v13 = v30;
  uint64_t v27 = v31;
  id v14 = objc_msgSend(self, sel_defaultCenter);
  NSNotificationCenter.publisher(for:object:)();

  lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher(&lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher, MEMORY[0x263F07CB0]);
  Publisher<>.makeConnectable()();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Publishers.MakeConnectable<NSNotificationCenter.Publisher> and conformance Publishers.MakeConnectable<A>, &demangling cache variable for type metadata for Publishers.MakeConnectable<NSNotificationCenter.Publisher>);
  uint64_t v15 = ConnectablePublisher.autoconnect()();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  type metadata accessor for DataModel(0);
  lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, (void (*)(uint64_t))type metadata accessor for DataModel);
  swift_retain();
  uint64_t v16 = ObservedObject.init(wrappedValue:)();
  uint64_t v18 = v17;
  type metadata accessor for CoveragePointRenderer(0);
  lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher((unint64_t *)&lazy protocol witness table cache variable for type CoveragePointRenderer and conformance CoveragePointRenderer, (void (*)(uint64_t))type metadata accessor for CoveragePointRenderer);
  long long v19 = (char *)v28;
  uint64_t v20 = ObservedObject.init(wrappedValue:)();
  uint64_t v22 = v21;
  uint64_t v23 = *(void *)&v19[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_id];
  uint64_t result = swift_bridgeObjectRetain();
  *a2 = v23;
  a2[1] = result;
  a2[2] = v16;
  a2[3] = v18;
  a2[4] = v20;
  a2[5] = v22;
  uint64_t v25 = v27;
  a2[6] = v13;
  a2[7] = v25;
  a2[8] = v15;
  return result;
}

uint64_t outlined init with take of CommonCircleRenderState?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CommonCircleRenderState?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s19_RealityKit_SwiftUI23CommonCircleRenderStateVSgWOg(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 288)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t outlined assign with take of CoveragePointCloud?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for MTKView()
{
  unint64_t result = lazy cache variable for type metadata for MTKView;
  if (!lazy cache variable for type metadata for MTKView)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MTKView);
  }
  return result;
}

double _s19_RealityKit_SwiftUI23CommonCircleRenderStateVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 288) = 1;
  return result;
}

unsigned char *storeEnumTagSinglePayload for CoveragePointRenderer.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *double result = a2;
        return result;
      case 2:
        *(_WORD *)double result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)double result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *double result = 0;
      break;
    case 2:
      *(_WORD *)double result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x246632D90);
    case 4:
      *(_DWORD *)double result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoveragePointRenderer.Error()
{
  return &type metadata for CoveragePointRenderer.Error;
}

uint64_t lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CoveragePointCloudMiniView()
{
  return &type metadata for CoveragePointCloudMiniView;
}

uint64_t associated type witness table accessor for View.Body : View in CoveragePointCloudMiniView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in CoveragePointCloudMiniView.body.getter()
{
  return closure #1 in CoveragePointCloudMiniView.body.getter(v0 + 16);
}

uint64_t partial apply for closure #2 in CoveragePointCloudMiniView.body.getter(uint64_t a1)
{
  return closure #2 in CoveragePointCloudMiniView.body.getter(a1, v1 + 16);
}

uint64_t partial apply for closure #3 in CoveragePointCloudMiniView.body.getter(uint64_t *a1)
{
  return closure #3 in CoveragePointCloudMiniView.body.getter(a1, v1 + 16);
}

uint64_t partial apply for closure #1 in closure #2 in CoveragePointCloudMiniView.body.getter()
{
  return closure #1 in closure #2 in CoveragePointCloudMiniView.body.getter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void *type metadata accessor for CoveragePointCloudMiniViewWrapper()
{
  return &unk_26FACF180;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<CoveragePointCloudMiniViewWrapper, _AppearanceActionModifier>>>, _RotationEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<CoveragePointCloudMiniViewWrapper, _AppearanceActionModifier>>>, _RotationEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<CoveragePointCloudMiniViewWrapper, _AppearanceActionModifier>>>, _RotationEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<CoveragePointCloudMiniViewWrapper, _AppearanceActionModifier>>>, _RotationEffect>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<CoveragePointCloudMiniViewWrapper, _AppearanceActionModifier>>> and conformance SubscriptionView<A, B>, &demangling cache variable for type metadata for SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<CoveragePointCloudMiniViewWrapper, _AppearanceActionModifier>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SubscriptionView<Published<UIInterfaceOrientation>.Publisher, SubscriptionView<Publishers.Autoconnect<Publishers.MakeConnectable<NSNotificationCenter.Publisher>>, ModifiedContent<CoveragePointCloudMiniViewWrapper, _AppearanceActionModifier>>>, _RotationEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CoveragePointCloudMiniViewWrapper and conformance CoveragePointCloudMiniViewWrapper()
{
  unint64_t result = lazy protocol witness table cache variable for type CoveragePointCloudMiniViewWrapper and conformance CoveragePointCloudMiniViewWrapper;
  if (!lazy protocol witness table cache variable for type CoveragePointCloudMiniViewWrapper and conformance CoveragePointCloudMiniViewWrapper)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoveragePointCloudMiniViewWrapper and conformance CoveragePointCloudMiniViewWrapper);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CoveragePointCloudMiniViewWrapper and conformance CoveragePointCloudMiniViewWrapper;
  if (!lazy protocol witness table cache variable for type CoveragePointCloudMiniViewWrapper and conformance CoveragePointCloudMiniViewWrapper)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoveragePointCloudMiniViewWrapper and conformance CoveragePointCloudMiniViewWrapper);
  }
  return result;
}

Swift::Void __swiftcall BaseRenderer.updateDepthAttachmentTexture(width:height:)(Swift::Int width, Swift::Int height)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void **)(v2 + 32);
  if (!v6 || objc_msgSend(v6, sel_width) != (id)width) {
    goto LABEL_5;
  }
  uint64_t v7 = *(void **)(v2 + 32);
  if (!v7)
  {
    __break(1u);
    return;
  }
  if (objc_msgSend(v7, sel_height) != (id)height)
  {
LABEL_5:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 134349312;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2050;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2465C2000, v9, v10, "Creating depth attachment texture w=%{public}ld h=%{public}ld", (uint8_t *)v11, 0x16u);
      MEMORY[0x24C5348D0](v11, -1, -1);
    }

    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F12A50]), sel_init);
    objc_msgSend(v12, sel_setTextureType_, 2);
    objc_msgSend(v12, sel_setPixelFormat_, 252);
    objc_msgSend(v12, sel_setWidth_, width);
    objc_msgSend(v12, sel_setHeight_, height);
    objc_msgSend(v12, sel_setUsage_, 5);
    objc_msgSend(v12, sel_setStorageMode_, 2);
    id v13 = objc_msgSend(*(id *)(v2 + 16), sel_newTextureWithDescriptor_, v12);
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = MEMORY[0x24C533410](0xD00000000000002BLL, 0x80000002466C0C10);
      objc_msgSend(v14, sel_setLabel_, v15);
    }
    else
    {
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl(&dword_2465C2000, v15, v16, "can't make depthAttachment texture", v17, 2u);
        MEMORY[0x24C5348D0](v17, -1, -1);
      }
      id v14 = 0;
    }

    *(void *)(v3 + 32) = v14;
    swift_unknownObjectRelease();
  }
}

uint64_t BaseRenderer.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BaseRenderer()
{
  return self;
}

BOOL _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF6CoreOC20ObjectCaptureSessionC5FrameV10PointCloudV_s5NeverOytTg5033_s19_RealityKit_SwiftUI18Coverageij26V7updated05pointG04poseAC6c4OC20efg2C5H27V0fG0VSg_AK0M0VSgtFyAMXEfU_01_mn1_O2UI0qiJ0VTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(a1, (uint64_t)v6, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  uint64_t v7 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  int v10 = v9;
  if (v9 != 1)
  {
    MEMORY[0x270FA5388](v9);
    id v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v6, v7);
    if (specialized static CoveragePointCloud.isValid(pointCloud:)((uint64_t)v12))
    {
      outlined destroy of URL?(a2, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(a2, v12, v7);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }
  return v10 == 1;
}

BOOL _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF6CoreOC20ObjectCaptureSessionC5FrameV0E0V_s5NeverOytTg5069_s19_RealityKit_SwiftUI18CoveragePointCloudV7updated05pointG04poseAC6c4OC20efg2C5H28V0fG0VSg_AK0M0VSgtFyAPXEfU0_01_kl1_M2UI0opQ0VTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(a1, (uint64_t)v6, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  uint64_t v7 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  int v10 = v9;
  if (v9 != 1)
  {
    MEMORY[0x270FA5388](v9);
    id v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v6, v7);
    ObjectCaptureSession.Frame.Object.transform.getter();
    float32x4_t v14 = (float32x4_t)vextq_s8(v13, v13, 8uLL);
    float32x4_t v16 = (float32x4_t)vextq_s8(v15, v15, 0xCuLL);
    float32x4_t v17 = (float32x4_t)vextq_s8(v13, v13, 0xCuLL);
    float32x4_t v18 = (float32x4_t)vextq_s8(v15, v15, 8uLL);
    float32x4_t v20 = (float32x4_t)vextq_s8(v15, v15, 4uLL);
    float32x4_t v21 = (float32x4_t)vextq_s8(v13, v13, 4uLL);
    int8x16_t v23 = (int8x16_t)vmulq_f32(v22, vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v19, v19, 8uLL), vmlaq_f32(vmulq_f32(v16, vnegq_f32(v21)), v20, v17)), vmlaq_f32(vmulq_f32(v18, vnegq_f32(v17)), v16, v14), (float32x4_t)vextq_s8(v19, v19, 4uLL)), vmlaq_f32(vmulq_f32(v20, vnegq_f32(v14)), v18, v21), (float32x4_t)vextq_s8(v19, v19, 0xCuLL)));
    v19.i64[0] = vextq_s8(v23, v23, 8uLL).u64[0];
    if (fabsf(vaddv_f32(vsub_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v23.i8, *(int32x2_t *)v19.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v23.i8, *(int32x2_t *)v19.i8)))) > 0.001)
    {
      uint64_t v24 = a2 + *(int *)(type metadata accessor for CoveragePointCloud() + 20);
      outlined destroy of URL?(v24, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v24, v12, v7);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v24, 0, 1, v7);
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }
  return v10 == 1;
}

unint64_t DataModel.Error.errorDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DataModel.Error(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (uint64_t *)((char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of DataModel.Error(v1, (uint64_t)v4, type metadata accessor for DataModel.Error);
  uint64_t v5 = 0x64696C61766E692ELL;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v11 = *v4;
      id v12 = (void *)v4[1];
      unint64_t v29 = 0;
      unint64_t v30 = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      unint64_t v29 = 0xD000000000000011;
      unint64_t v30 = 0x80000002466C1770;
      v13._countAndFlagsBits = v11;
      v13._object = v12;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      uint64_t v9 = 32032;
      unint64_t v10 = 0xE200000000000000;
      goto LABEL_6;
    case 2u:
      uint64_t v14 = type metadata accessor for ObjectCaptureSession.Error();
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v16 = *(void *)(v15 + 64);
      MEMORY[0x270FA5388](v14);
      float32x4_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t *, uint64_t))(v15 + 32))(v17, v4, v14);
      unint64_t v29 = 0;
      unint64_t v30 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      uint64_t v18 = swift_bridgeObjectRelease();
      unint64_t v29 = 0xD00000000000001BLL;
      unint64_t v30 = 0x80000002466C17B0;
      MEMORY[0x270FA5388](v18);
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v17, v14);
      v19._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      uint64_t v5 = v29;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      return v5;
    case 3u:
      uint64_t v20 = *v4;
      unint64_t v29 = 0;
      unint64_t v30 = 0xE000000000000000;
      _StringGuts.grow(_:)(59);
      v21._countAndFlagsBits = 0xD00000000000002BLL;
      v21._object = (void *)0x80000002466C1700;
      String.append(_:)(v21);
      float32x4_t v22 = (void *)static PhotogrammetryFileHelpers.byteFormatter.getter();
      id v23 = objc_msgSend(v22, sel_stringFromByteCount_, v20);

      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = v25;

      v27._countAndFlagsBits = v24;
      v27._object = v26;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      uint64_t v9 = 0x7473206565726620;
      unint64_t v10 = 0xEE002E656761726FLL;
      goto LABEL_6;
    case 4u:
      return v5;
    case 5u:
      return 0xD00000000000003ELL;
    case 6u:
      return 0xD00000000000001BLL;
    default:
      uint64_t v6 = *v4;
      uint64_t v7 = (void *)v4[1];
      unint64_t v29 = 0;
      unint64_t v30 = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      unint64_t v29 = 0xD000000000000017;
      unint64_t v30 = 0x80000002466C17D0;
      v8._countAndFlagsBits = v6;
      v8._object = v7;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      uint64_t v9 = 34;
      unint64_t v10 = 0xE100000000000000;
LABEL_6:
      String.append(_:)(*(Swift::String *)&v9);
      return v29;
  }
}

void @objc DataModel.LocalARCoachingViewDelegate.coachingOverlayViewWillActivate(_:)(void *a1, uint64_t a2, void *a3, const char *a4)
{
  uint64_t v6 = one-time initialization token for logger;
  id v12 = a3;
  id v7 = a1;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_2465C2000, v9, v10, a4, v11, 2u);
    MEMORY[0x24C5348D0](v11, -1, -1);
  }
}

id DataModel.LocalARCoachingViewDelegate.__deallocating_deinit()
{
  return DataModel.LocalARCoachingViewDelegate.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for DataModel.LocalARCoachingViewDelegate);
}

uint64_t DataModel.State.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for ObjectCaptureSession.State();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void (**)(void))(v6 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v9)(v8, a1, v5);
  int v10 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
  if (MEMORY[0x263F368D8] && v10 == *MEMORY[0x263F368D8])
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    (*(void (**)(char *, uint64_t))(v6 + 96))((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
    uint64_t v11 = type metadata accessor for ObjectCaptureSession.Error();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a2, (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
    uint64_t v12 = type metadata accessor for DataModel.Error(0);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a2, 0, 8, v12);
  }
  if (MEMORY[0x263F368C8] && v10 == *MEMORY[0x263F368C8])
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    uint64_t v14 = type metadata accessor for DataModel.Error(0);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = a2;
    uint64_t v17 = 1;
    return v15(v16, v17, 8, v14);
  }
  if (MEMORY[0x263F368E8] && v10 == *MEMORY[0x263F368E8])
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    uint64_t v14 = type metadata accessor for DataModel.Error(0);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = a2;
    uint64_t v17 = 2;
    return v15(v16, v17, 8, v14);
  }
  if (MEMORY[0x263F368D0] && v10 == *MEMORY[0x263F368D0])
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    uint64_t v14 = type metadata accessor for DataModel.Error(0);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = a2;
    uint64_t v17 = 4;
    return v15(v16, v17, 8, v14);
  }
  if (MEMORY[0x263F368E0] && v10 == *MEMORY[0x263F368E0])
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    uint64_t v14 = type metadata accessor for DataModel.Error(0);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = a2;
    uint64_t v17 = 3;
    return v15(v16, v17, 8, v14);
  }
  if (MEMORY[0x263F36900] && v10 == *MEMORY[0x263F36900])
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    uint64_t v14 = type metadata accessor for DataModel.Error(0);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = a2;
    uint64_t v17 = 5;
    return v15(v16, v17, 8, v14);
  }
  if (MEMORY[0x263F368F0] && v10 == *MEMORY[0x263F368F0])
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    uint64_t v14 = type metadata accessor for DataModel.Error(0);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = a2;
    uint64_t v17 = 6;
    return v15(v16, v17, 8, v14);
  }
  if (MEMORY[0x263F36908] && v10 == *MEMORY[0x263F36908] || MEMORY[0x263F368F8] && v10 == *MEMORY[0x263F368F8])
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    uint64_t v14 = type metadata accessor for DataModel.Error(0);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = a2;
    uint64_t v17 = 7;
    return v15(v16, v17, 8, v14);
  }
  uint64_t v38 = v2;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)logger);
  float32x4_t v37 = &v32;
  MEMORY[0x270FA5388](v19);
  uint64_t v36 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  int v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    os_log_t v35 = v20;
    uint64_t v23 = swift_slowAlloc();
    int v33 = v22;
    uint64_t v24 = (uint8_t *)v23;
    uint64_t v34 = swift_slowAlloc();
    uint64_t v40 = v34;
    float32x4_t v32 = v24;
    *(_DWORD *)uint64_t v24 = 136315138;
    uint64_t v25 = v36;
    uint64_t v26 = descriptionString(for:)(v36);
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v28 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v28(v25, v5);
    unint64_t v29 = v32;
    _os_log_impl(&dword_2465C2000, v35, (os_log_type_t)v33, "Unknown state: %s", v32, 0xCu);
    uint64_t v30 = v34;
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v30, -1, -1);
    MEMORY[0x24C5348D0](v29, -1, -1);
  }
  else
  {

    id v28 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v28(v36, v5);
  }
  v28(a1, v5);
  uint64_t v31 = type metadata accessor for DataModel.Error(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(a2, 6, 8, v31);
  return ((uint64_t (*)(char *, uint64_t))v28)(v8, v5);
}

uint64_t DataModel.state.getter()
{
  return DataModel.state.getter();
}

{
  uint64_t vars8;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

void DataModel.captureMode.didset()
{
  uint64_t v1 = v0;
  uint64_t v37 = type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode();
  uint64_t v2 = *(void *)(v37 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v37);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v33 - v6;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  MEMORY[0x270FA5388](v8);
  float32x4_t v41 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  Swift::String v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)logger);
  swift_retain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v42 = v11;
  uint64_t v40 = v13;
  if (v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    os_log_t v35 = v7;
    uint64_t v20 = v19;
    uint64_t v34 = v10;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v44 = v19;
    LOBYTE(v43) = *(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v36 = v5;
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v44);
    uint64_t v10 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v5 = v36;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v15, v16, "Switching capture mode into: %s", v18, 0xCu);
    swift_arrayDestroy();
    uint64_t v23 = v20;
    uint64_t v7 = v35;
    MEMORY[0x24C5348D0](v23, -1, -1);
    MEMORY[0x24C5348D0](v18, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v24 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  if (!v24) {
    goto LABEL_12;
  }
  uint64_t v25 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode;
  int v26 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode);
  id v27 = v24;
  if (v26 == 2)
  {
    if ((dispatch thunk of ObjectCaptureSession.isFreeformModeEnabled.getter() & 1) == 0)
    {
LABEL_16:

      __break(1u);
      return;
    }
    if (*(unsigned char *)(v1 + v25) == 2)
    {

      goto LABEL_12;
    }
  }
  char v28 = dispatch thunk of ObjectCaptureSession.isFreeformModeEnabled.getter();

  if (v28)
  {
    __break(1u);
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v29 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode))
  {
    type metadata accessor for AnalyticsManager();
    static AnalyticsManager.shared.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v41, v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_sessionID, v39);
    uint64_t v30 = **((unsigned int **)&unk_2651E2308 + *(char *)(v1 + v29));
    uint64_t v31 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 104))(v5, v30, v37);
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v7, v5, v31);
    float32x4_t v32 = v40;
    AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.init(sessionID:captureMode:)();
    dispatch thunk of AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v10);
  }
}

uint64_t DataModel.showMiniView.getter()
{
  return DataModel.showMiniView.getter();
}

{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

double DataModel.miniViewScreenRotationAngle.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t DataModel.showCenterReticle.getter()
{
  return DataModel.showMiniView.getter();
}

uint64_t DataModel.userSelectedToHideObjectReticle.getter()
{
  return DataModel.showMiniView.getter();
}

float DataModel.cameraIso.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t DataModel.debuggingMode.getter()
{
  return DataModel.showMiniView.getter();
}

uint64_t DataModel.manualBoxMode.getter()
{
  return DataModel.showMiniView.getter();
}

uint64_t DataModel.raycastManualBox.getter()
{
  return DataModel.showMiniView.getter();
}

uint64_t DataModel.coveragePointRenderer.getter()
{
  return DataModel.coveragePointRenderer.getter();
}

{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t DataModel.freeformCloudRenderer.getter()
{
  return DataModel.coveragePointRenderer.getter();
}

void DataModel.shouldPlayHaptics.didset()
{
  uint64_t v1 = v0;
  unsigned __int8 v2 = objc_msgSend(objc_msgSend(self, sel_capabilitiesForHardware), sel_supportsHaptics);
  swift_unknownObjectRelease();
  if ((v2 & 1) == 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v15 == 1)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)logger);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_2465C2000, v4, v5, "shouldPlayHaptics cannot be set to true on a device not supporting haptics.  Haptics will not be played.", v6, 2u);
        MEMORY[0x24C5348D0](v6, -1, -1);
      }

      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      uint64_t v7 = static Published.subscript.setter();
      DataModel.shouldPlayHaptics.didset(v7);
    }
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 67109120;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_2465C2000, v9, v10, "Set shouldPlayHaptics to %{BOOL}d.", v11, 8u);
    MEMORY[0x24C5348D0](v11, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_hapticManager);
  if (v12)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    char v13 = *(unsigned char *)(v12 + 16);
    *(unsigned char *)(v12 + 16) = v14;
    HapticManager.enabled.didset(v13);
  }
}

uint64_t DataModel.shouldPlayHaptics.getter()
{
  return DataModel.showMiniView.getter();
}

uint64_t DataModel.isBoundingBoxAnimationPlaying.getter()
{
  return DataModel.showMiniView.getter();
}

id DataModel.LocalDetectBoxDelegate.__deallocating_deinit()
{
  return DataModel.LocalARCoachingViewDelegate.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for DataModel.LocalDetectBoxDelegate);
}

uint64_t DataModel.id.getter()
{
  return DataModel.state.getter();
}

uint64_t DataModel.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ARView.CameraMode();
  uint64_t v202 = *(void *)(v2 - 8);
  uint64_t v203 = v2;
  MEMORY[0x270FA5388](v2);
  unint64_t v204 = (char *)&v162 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<CoveragePointCloud>);
  uint64_t v199 = *(void *)(v4 - 8);
  uint64_t v200 = v4;
  MEMORY[0x270FA5388](v4);
  unint64_t v198 = (char *)&v162 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v197 = type metadata accessor for CoveragePointCloud();
  uint64_t v6 = MEMORY[0x270FA5388](v197);
  v196 = (char *)&v162 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v195 = (uint64_t)&v162 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<SIMD2<Float>>);
  uint64_t v193 = *(uint64_t **)(v9 - 8);
  v194 = (char *)v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v192 = (char *)&v162 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v191 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Int>);
  uint64_t v190 = *(void *)(v191 - 8);
  MEMORY[0x270FA5388](v191);
  uint64_t v189 = (char *)&v162 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UUID>);
  uint64_t v187 = *(void *)(v188 - 8);
  MEMORY[0x270FA5388](v188);
  v186 = (char *)&v162 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = type metadata accessor for UUID();
  uint64_t v184 = *(void *)(v185 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v185);
  uint64_t v183 = (char *)&v162 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  v182 = (char *)&v162 - v15;
  unsigned int v181 = (void (*)(char *, char *, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<FreeformCloudRenderer?>);
  uint64_t v175 = *((void *)v181 - 1);
  MEMORY[0x270FA5388](v181);
  float32x4_t v174 = (char *)&v162 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CoveragePointRenderer?>);
  uint64_t v172 = *(void *)(v173 - 8);
  MEMORY[0x270FA5388](v173);
  float32x4_t v171 = (char *)&v162 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>);
  uint64_t v169 = *(void *)(v170 - 8);
  MEMORY[0x270FA5388](v170);
  float32x4_t v168 = (char *)&v162 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Angle>);
  uint64_t v166 = *(void *)(v167 - 8);
  MEMORY[0x270FA5388](v167);
  long long v165 = (char *)&v162 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  uint64_t v20 = *(void *)(v164 - 8);
  MEMORY[0x270FA5388](v164);
  unint64_t v22 = (char *)&v162 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<DataModel.State>);
  uint64_t v23 = *(void *)(v163 - 8);
  MEMORY[0x270FA5388](v163);
  uint64_t v25 = (char *)&v162 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DataModel.State(0);
  uint64_t v179 = *(void *)(v26 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v162 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v162 - v30;
  v1[2] = 0;
  uint64_t v201 = (id *)(v1 + 2);
  v1[3] = 0;
  v1[4] = 0;
  float32x4_t v32 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__state;
  uint64_t v33 = type metadata accessor for DataModel.Error(0);
  uint64_t v34 = *(void *)(v33 - 8);
  os_log_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
  uint64_t v178 = v33;
  simd_float4x4 v177 = v35;
  uint64_t v176 = v34 + 56;
  ((void (*)(char *, uint64_t, uint64_t))v35)(v31, 1, 8);
  outlined init with copy of DataModel.Error((uint64_t)v31, (uint64_t)v29, type metadata accessor for DataModel.State);
  uint64_t v180 = v26;
  Published.init(initialValue:)();
  outlined destroy of DataModel.Error((uint64_t)v31, type metadata accessor for DataModel.State);
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v32, v25, v163);
  *((unsigned char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) = 0;
  uint64_t v36 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__showMiniView;
  LOBYTE(v207) = 0;
  Published.init(initialValue:)();
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  uint64_t v38 = v164;
  v37(v36, v22, v164);
  uint64_t v39 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__miniViewScreenRotationAngle;
  uint64_t v207 = 0;
  uint64_t v40 = v165;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v166 + 32))(v39, v40, v167);
  float32x4_t v41 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__showCenterReticle;
  LOBYTE(v207) = 0;
  Published.init(initialValue:)();
  v37(v41, v22, v38);
  uint64_t v42 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__userSelectedToHideObjectReticle;
  LOBYTE(v207) = 0;
  Published.init(initialValue:)();
  v37(v42, v22, v38);
  uint64_t v43 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__cameraIso;
  LODWORD(v207) = 0;
  uint64_t v44 = v168;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v169 + 32))(v43, v44, v170);
  float32x4_t v45 = (void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_onFeedback);
  *float32x4_t v45 = 0;
  v45[1] = 0;
  *((unsigned char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_shouldDebugDraw) = 0;
  float32x4_t v46 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__debuggingMode;
  LOBYTE(v207) = 0;
  Published.init(initialValue:)();
  v37(v46, v22, v38);
  float32x4_t v47 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__manualBoxMode;
  LOBYTE(v207) = 0;
  Published.init(initialValue:)();
  v37(v47, v22, v38);
  float32x4_t v48 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__raycastManualBox;
  LOBYTE(v207) = 0;
  Published.init(initialValue:)();
  v37(v48, v22, v38);
  uint64_t v49 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_depthHazeStartPercent;
  *(float *)((char *)v1 + v49) = specialized static ExperimentSettings.loadDepthHazeStartPercent(default:)(0.25);
  float32x4_t v50 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__coveragePointRenderer;
  uint64_t v207 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CoveragePointRenderer?);
  Swift::Bool v51 = v171;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v172 + 32))(v50, v51, v173);
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_fullscreenCoveragePointsRenderer) = 0;
  long long v52 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__freeformCloudRenderer;
  uint64_t v207 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FreeformCloudRenderer?);
  long long v53 = v174;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, void *))(v175 + 32))(v52, v53, v181);
  uint64_t v54 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_cameraPathManager;
  *(void *)((char *)v1 + v54) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CameraPathManager()), sel_init);
  long long v55 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__shouldPlayHaptics;
  LOBYTE(v26) = objc_msgSend(objc_msgSend(self, sel_capabilitiesForHardware), sel_supportsHaptics);
  swift_unknownObjectRelease();
  LOBYTE(v207) = v26;
  Published.init(initialValue:)();
  v37(v55, v22, v38);
  __n128 v56 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__isBoundingBoxAnimationPlaying;
  LOBYTE(v207) = 0;
  Published.init(initialValue:)();
  unsigned int v181 = v37;
  v37(v56, v22, v38);
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel) = 0;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localDetectBoxCallbacks) = 0;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_startDetectingReticleDelay) = 0x3FC999999999999ALL;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureBoxModel) = 0;
  unsigned __int32 v57 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_scanningModelToWorldTransform;
  *(_OWORD *)unsigned __int32 v57 = 0u;
  *((_OWORD *)v57 + 1) = 0u;
  *((_OWORD *)v57 + 2) = 0u;
  *((_OWORD *)v57 + 3) = 0u;
  v57[64] = 1;
  uint64_t v58 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_metalDevice;
  *(void *)((char *)v1 + v58) = MTLCreateSystemDefaultDevice();
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_postProcessRenderer) = 0;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_arFrameProcessor) = 0;
  float32x4_t v59 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_frameProcessorUpdateSubscription;
  *(_OWORD *)float32x4_t v59 = 0u;
  *((_OWORD *)v59 + 1) = 0u;
  *((void *)v59 + 4) = 0;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSessionSubscriptions) = MEMORY[0x263F8EE88];
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession) = 0;
  uint64_t v60 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_soundManager;
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  *(void *)((char *)v1 + v60) = static SoundManager.instance;
  uint64_t v61 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_hapticManager;
  uint64_t v62 = one-time initialization token for instance;
  swift_retain();
  if (v62 != -1) {
    swift_once();
  }
  *(void *)((char *)v1 + v61) = static HapticManager.instance;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_deviceMotionEstimator) = 0;
  float32x4_t v63 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imagesURL;
  uint64_t v64 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v63, 1, 1, v64);
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imageWriter) = 0;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imageWriterLoggingTimer) = 0;
  *((unsigned char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imageWriterCompleted) = 0;
  *((unsigned char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isInternalSessionCompleted) = 0;
  v177((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_previousState, 1, 8, v178);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v179 + 56))((uint64_t)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_stateBeforePause, 1, 1, v180);
  *((unsigned char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isObjectFlippable) = 2;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localTime) = 0;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_lastShotTime) = 0xFFF0000000000000;
  *(_DWORD *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_binFillAnimationDurationSecs) = 1048576000;
  float32x4_t v65 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__id;
  swift_retain();
  float32x4_t v66 = v182;
  UUID.init()();
  uint64_t v67 = v184;
  uint64_t v68 = v185;
  (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v183, v66, v185);
  id v69 = v186;
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v68);
  (*(void (**)(char *, char *, uint64_t))(v187 + 32))(v65, v69, v188);
  *((unsigned char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_tornDown) = 0;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_meshManager) = 0;
  *((unsigned char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isRunning) = 0;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_pointCloudsBySegment) = MEMORY[0x263F8EE78];
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_currentSegmentID) = 0;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureCircle) = 0;
  uint64_t v70 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_manualShotRefractoryTimer;
  type metadata accessor for ManualTimer();
  uint64_t v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_2466BA510;
  *(void *)((char *)v1 + v70) = v71;
  *((unsigned char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isAutoCaptureEnabled) = 1;
  UUID.init()();
  __n128 v72 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__canTakeManualShot;
  LOBYTE(v207) = 0;
  Published.init(initialValue:)();
  uint64_t v73 = v38;
  uint64_t v74 = v181;
  v181(v72, v22, v38);
  uint64_t v75 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__numShotsTaken;
  uint64_t v207 = 0;
  uint64_t v76 = v189;
  Published.init(initialValue:)();
  uint64_t v77 = *(void (**)(char *, char *, uint64_t))(v190 + 32);
  uint64_t v78 = v191;
  v77(v75, v76, v191);
  uint64_t v79 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__numShotsTakenThisSegment;
  uint64_t v207 = 0;
  Published.init(initialValue:)();
  v77(v79, v76, v78);
  uint64_t v80 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__userCompletedOrbit;
  LOBYTE(v207) = 0;
  Published.init(initialValue:)();
  v74(v80, v22, v73);
  uint64_t v81 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__triggerShakeReticle;
  LOBYTE(v207) = 0;
  Published.init(initialValue:)();
  v74(v81, v22, v73);
  id v82 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__reticleAimVector;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DataModel.init());
  uint64_t v207 = v83;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  uint64_t v84 = v192;
  Published.init(initialValue:)();
  ((void (*)(char *, char *, char *))v193[4])(v82, v84, v194);
  uint64_t v85 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__shouldShowARKitCoachingView;
  LOBYTE(v207) = 0;
  Published.init(initialValue:)();
  v74(v85, v22, v73);
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_numUnsuccessfulDetects) = 0;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_maxUnsuccessfulDetects) = 2;
  *((unsigned char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_enableOverCaptureWhenInternalSessionCreated) = 0;
  uint64_t v86 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_userFeedbackSystem;
  type metadata accessor for UserFeedbackSystem();
  swift_allocObject();
  *(void *)((char *)v1 + v86) = UserFeedbackSystem.init()();
  *(_DWORD *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_minSpeedGoodness) = 1050253722;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_scanPassID) = -1;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_rangefinderManager) = 0;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_rangefinderObserver) = 0;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_dynamicScanVolumeEstimator) = 0;
  uint64_t v87 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_shouldEstimateDynamicScanVolume;
  *((unsigned char *)v1 + v87) = specialized static ExperimentSettings.loadFreeformDynamicScanVolumeEnabled(default:)(1u) & 1;
  uint64_t v88 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_freeformPointDensityThreshold;
  *(void *)((char *)v1 + v88) = specialized static ExperimentSettings.loadFreeformPointDensityThreshold(default:)((id)0x50);
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_sphereSplatRange) = 0x400000003E800000;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_updateDynamicVolumePeriod) = 0x3FB999999999999ALL;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_lastDynamicVolumeUpdateTime) = 0;
  v194 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__latestCoveragePointCloud;
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  uint64_t v193 = &v162;
  MEMORY[0x270FA5388](v89 - 8);
  float32x4_t v91 = (char *)&v162 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  id v93 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56);
  v93(v91, 1, 1, v92);
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  uint64_t v192 = (char *)&v162;
  MEMORY[0x270FA5388](v94 - 8);
  os_unfair_lock_t v96 = (char *)&v162 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  uint64_t v98 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56);
  v98(v96, 1, 1, v97);
  uint64_t v99 = (uint64_t)v196;
  v93(v196, 1, 1, v92);
  uint64_t v100 = v99 + *(int *)(v197 + 20);
  v98((char *)v100, 1, 1, v97);
  outlined assign with take of Cancellable?((uint64_t)v91, v99, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  outlined assign with take of Cancellable?((uint64_t)v96, v100, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  uint64_t v101 = v195;
  outlined init with take of DataModel.State(v99, v195, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  outlined init with copy of DataModel.Error(v101, v99, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  long long v102 = v198;
  Atomic.init(wrappedValue:)();
  outlined destroy of DataModel.Error(v101, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  (*(void (**)(char *, char *, uint64_t))(v199 + 32))(v194, v102, v200);
  if (one-time initialization token for platterRadialAnimation != -1) {
    swift_once();
  }
  float v103 = v201;
  if (static PlatterRenderer.platterRadialAnimation) {
    double v104 = specialized KeyframeAnimation.duration.getter();
  }
  else {
    double v104 = 0.5;
  }
  *(double *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_sphericalPulseDuration) = v104;
  float v105 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_lastCameraFeedback;
  uint64_t v106 = type metadata accessor for ARCamera.TrackingState();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56))(v105, 1, 1, v106);
  __n128 v107 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_lastFeedback;
  uint64_t v108 = type metadata accessor for ObjectCaptureSession.Frame.Feedback();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v107, 1, 1, v108);
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_showMiniViewTransitionDurationSecs) = 0x3FE0000000000000;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_tapGesture) = 0;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_panGesture) = 0;
  __n128 v109 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_updateSubscription;
  *(_OWORD *)__n128 v109 = 0u;
  *((_OWORD *)v109 + 1) = 0u;
  *((void *)v109 + 4) = 0;
  *((unsigned char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel____lazy_storage___arViewResolution) = 5;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v110 = type metadata accessor for Logger();
  __swift_project_value_buffer(v110, (uint64_t)logger);
  id v111 = Logger.logObject.getter();
  os_log_type_t v112 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v111, v112))
  {
    id v113 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v113 = 0;
    _os_log_impl(&dword_2465C2000, v111, v112, "DataModel.init()...", v113, 2u);
    MEMORY[0x24C5348D0](v113, -1, -1);
  }

  uint64_t v114 = Logger.logObject.getter();
  os_log_type_t v115 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v114, v115))
  {
    float32x4_t v116 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)float32x4_t v116 = 0;
    _os_log_impl(&dword_2465C2000, v114, v115, "Making PostProcessRenderManager...", v116, 2u);
    MEMORY[0x24C5348D0](v116, -1, -1);
  }

  if (!*(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_metalDevice)) {
    goto LABEL_39;
  }
  type metadata accessor for PostProcessRenderManager();
  swift_allocObject();
  id v117 = (void *)swift_unknownObjectRetain();
  uint64_t v118 = PostProcessRenderManager.init(device:)(v117);
  uint64_t v119 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_postProcessRenderer;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_postProcessRenderer) = v118;
  swift_release();
  if (!*(void *)((char *)v1 + v119)) {
    goto LABEL_39;
  }
  type metadata accessor for CameraFrustumRenderer();
  swift_allocObject();
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_cameraFrustumRenderer) = specialized CameraFrustumRenderer.init(cameraPathManager:)();
  uint64_t v120 = Logger.logObject.getter();
  os_log_type_t v121 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v120, v121))
  {
    double v122 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v122 = 0;
    _os_log_impl(&dword_2465C2000, v120, v121, "DataModel.init(): Making the arView...", v122, 2u);
    MEMORY[0x24C5348D0](v122, -1, -1);
  }

  (*(void (**)(char *, void, uint64_t))(v202 + 104))(v204, *MEMORY[0x263F168B0], v203);
  id v123 = objc_allocWithZone((Class)type metadata accessor for ARView());
  uint64_t v124 = ARView.init(frame:cameraMode:automaticallyConfigureSession:)();
  id v125 = *v103;
  *float v103 = (id)v124;

  if (!*v103) {
    goto LABEL_39;
  }
  id v126 = *v103;
  specialized DataModel.setCustomRenderOptions(on:)();

  if (!*v103)
  {
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  id v127 = *v103;
  dispatch thunk of ARView.__disableCounterRotation.setter();

  unint64_t v128 = (objc_class *)type metadata accessor for DataModel.LocalARCoachingViewDelegate();
  id v129 = objc_allocWithZone(v128);
  swift_weakInit();
  v206.receiver = v129;
  v206.super_class = v128;
  swift_retain();
  id v130 = objc_msgSendSuper2(&v206, sel_init);
  swift_weakAssign();
  swift_release();
  float32x4_t v131 = (void *)v1[4];
  v1[4] = v130;

  id v132 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF8F18]), sel_initWithFrame_, 0.0, 0.0, 10.0, 10.0);
  __n128 v133 = (void *)v1[3];
  v1[3] = v132;

  __n128 v134 = (void *)v1[3];
  if (v134)
  {
    id v135 = *v103;
    if (*v103)
    {
      id v136 = v134;
      id v135 = objc_msgSend(v135, sel_session);
    }
    else
    {
      id v137 = v134;
    }
    objc_msgSend(v134, sel_setSession_, v135);

    float32x4_t v138 = (void *)v1[3];
    if (v138)
    {
      objc_msgSend(v138, sel_setActivatesAutomatically_, 1);
      uint64_t v139 = (void *)v1[3];
      if (v139)
      {
        objc_msgSend(v139, sel_setActive_animated_, 1, 1);
        uint64_t v140 = (void *)v1[3];
        if (v140) {
          objc_msgSend(v140, sel_setDelegate_, v1[4]);
        }
      }
    }
  }
  id v141 = objc_msgSend(self, sel_currentDevice);
  id v142 = objc_msgSend(v141, sel_userInterfaceIdiom);

  if (v142) {
    goto LABEL_33;
  }
  DataModel.setMTLPixelFormat(to:)(81);
  float32x4_t v143 = (void *)v1[2];
  if (!v143) {
    goto LABEL_38;
  }
  id v144 = v143;
  DataModel.arViewResolution.getter();
  specialized DataModel.computeFactorScale(arViewResolution:)();
  double v146 = v145;
  id v147 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v147, sel_scale);
  double v149 = v148;

  objc_msgSend(v144, sel_setContentScaleFactor_, v146 * v149);
LABEL_33:
  uint64_t v150 = (objc_class *)type metadata accessor for DataModel.LocalDetectBoxDelegate();
  id v151 = objc_allocWithZone(v150);
  swift_weakInit();
  swift_weakAssign();
  v205.receiver = v151;
  v205.super_class = v150;
  id v152 = objc_msgSendSuper2(&v205, sel_init);
  uint64_t v153 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localDetectBoxCallbacks;
  os_unfair_lock_t v154 = *(void **)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localDetectBoxCallbacks);
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localDetectBoxCallbacks) = v152;

  uint64_t v155 = *(void **)((char *)v1 + v153);
  if (v155) {
    float32x4_t v156 = &protocol witness table for DataModel.LocalDetectBoxDelegate;
  }
  else {
    float32x4_t v156 = 0;
  }
  type metadata accessor for DetectModeBoxModel();
  swift_allocObject();
  swift_retain();
  id v157 = v155;
  uint64_t v158 = specialized DetectModeBoxModel.init(model:delegate:)((uint64_t)v1, (uint64_t)v155, (uint64_t)v156);
  swift_release();

  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel) = v158;
  swift_release();
  type metadata accessor for CaptureModeBoxModel();
  swift_allocObject();
  uint64_t v159 = swift_retain();
  uint64_t v160 = specialized CaptureModeBoxModel.init(model:)(v159);
  swift_release();
  *(void *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureBoxModel) = v160;
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v207 = 0;
  swift_retain();
  static Published.subscript.setter();
  return (uint64_t)v1;
}

id *DataModel.deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "~~~ DataModel deinit was called!", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  uint64_t v6 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__state;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<DataModel.State>);
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__showMiniView;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  uint64_t v10 = *(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  uint64_t v11 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__miniViewScreenRotationAngle;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Angle>);
  (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  v10((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__showCenterReticle, v9);
  v10((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__userSelectedToHideObjectReticle, v9);
  uint64_t v13 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__cameraIso;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>);
  (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?(*(uint64_t *)((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_onFeedback));
  v10((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__debuggingMode, v9);
  v10((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__manualBoxMode, v9);
  v10((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__raycastManualBox, v9);
  uint64_t v15 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__coveragePointRenderer;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CoveragePointRenderer?>);
  (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);

  uint64_t v17 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__freeformCloudRenderer;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<FreeformCloudRenderer?>);
  (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  swift_release();

  v10((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__shouldPlayHaptics, v9);
  v10((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__isBoundingBoxAnimationPlaying, v9);
  swift_release();

  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of URL?((uint64_t)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_frameProcessorUpdateSubscription, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  outlined destroy of URL?((uint64_t)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imagesURL, &demangling cache variable for type metadata for URL?);
  swift_release();

  outlined destroy of DataModel.Error((uint64_t)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_previousState, type metadata accessor for DataModel.State);
  outlined destroy of URL?((uint64_t)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_stateBeforePause, (uint64_t *)&demangling cache variable for type metadata for DataModel.State?);
  uint64_t v19 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__id;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UUID>);
  (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v21 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_sessionID;
  uint64_t v22 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
  v10((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__canTakeManualShot, v9);
  uint64_t v23 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__numShotsTaken;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Int>);
  uint64_t v25 = *(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8);
  v25(v23, v24);
  v25((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__numShotsTakenThisSegment, v24);
  v10((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__userCompletedOrbit, v9);
  v10((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__triggerShakeReticle, v9);
  uint64_t v26 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__reticleAimVector;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<SIMD2<Float>>);
  (*(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
  v10((char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__shouldShowARKitCoachingView, v9);
  swift_release();
  swift_release();

  swift_release();
  uint64_t v28 = (char *)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__latestCoveragePointCloud;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<CoveragePointCloud>);
  (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8))(v28, v29);
  outlined destroy of URL?((uint64_t)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_lastCameraFeedback, &demangling cache variable for type metadata for ARCamera.TrackingState?);
  outlined destroy of URL?((uint64_t)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_lastFeedback, (uint64_t *)&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Feedback?);

  outlined destroy of URL?((uint64_t)v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_updateSubscription, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  return v1;
}

uint64_t DataModel.__deallocating_deinit()
{
  DataModel.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for DataModel()
{
  return type metadata accessor for DataModel(0);
}

uint64_t type metadata accessor for DataModel(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for DataModel);
}

void type metadata completion function for DataModel()
{
  type metadata accessor for Published<DataModel.State>(319, &lazy cache variable for type metadata for Published<DataModel.State>, type metadata accessor for DataModel.State, MEMORY[0x263EFDE58]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Bool>(319, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<Bool>(319, &lazy cache variable for type metadata for Published<Angle>);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Published<Bool>(319, &lazy cache variable for type metadata for Published<Float>);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Published<CoveragePointRenderer?>(319, &lazy cache variable for type metadata for Published<CoveragePointRenderer?>, &demangling cache variable for type metadata for CoveragePointRenderer?);
          if (v4 <= 0x3F)
          {
            type metadata accessor for Published<CoveragePointRenderer?>(319, &lazy cache variable for type metadata for Published<FreeformCloudRenderer?>, (uint64_t *)&demangling cache variable for type metadata for FreeformCloudRenderer?);
            if (v5 <= 0x3F)
            {
              type metadata accessor for Published<DataModel.State>(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              if (v6 <= 0x3F)
              {
                type metadata accessor for DataModel.State(319);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for Published<DataModel.State>(319, &lazy cache variable for type metadata for DataModel.State?, type metadata accessor for DataModel.State, MEMORY[0x263F8D8F0]);
                  if (v8 <= 0x3F)
                  {
                    type metadata accessor for Published<DataModel.State>(319, &lazy cache variable for type metadata for Published<UUID>, MEMORY[0x263F07508], MEMORY[0x263EFDE58]);
                    if (v9 <= 0x3F)
                    {
                      type metadata accessor for UUID();
                      if (v10 <= 0x3F)
                      {
                        type metadata accessor for Published<Bool>(319, &lazy cache variable for type metadata for Published<Int>);
                        if (v11 <= 0x3F)
                        {
                          type metadata accessor for Published<CoveragePointRenderer?>(319, (unint64_t *)&lazy cache variable for type metadata for Published<SIMD2<Float>>, &demangling cache variable for type metadata for SIMD2<Float>);
                          if (v12 <= 0x3F)
                          {
                            type metadata accessor for Published<DataModel.State>(319, &lazy cache variable for type metadata for Atomic<CoveragePointCloud>, (uint64_t (*)(uint64_t))type metadata accessor for CoveragePointCloud, MEMORY[0x263F16888]);
                            if (v13 <= 0x3F)
                            {
                              type metadata accessor for Published<DataModel.State>(319, &lazy cache variable for type metadata for ARCamera.TrackingState?, MEMORY[0x263F8C968], MEMORY[0x263F8D8F0]);
                              if (v14 <= 0x3F)
                              {
                                type metadata accessor for Published<DataModel.State>(319, &lazy cache variable for type metadata for ObjectCaptureSession.Frame.Feedback?, MEMORY[0x270FB2660], MEMORY[0x263F8D8F0]);
                                if (v15 <= 0x3F) {
                                  swift_updateClassMetadata2();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t specialized OptionSet<>.insert(_:)(char *a1, uint64_t a2)
{
  uint64_t v31 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (inserted: Bool, memberAfterInsert: ARView.RenderOptions));
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v29 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)v25 - v7;
  uint64_t v9 = type metadata accessor for ARView.RenderOptions();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  unint64_t v15 = (char *)v25 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v28 = v2;
  uint64_t v26 = v16;
  v16(v13, v2, v9);
  uint64_t v17 = (void (*)(uint64_t))MEMORY[0x263F16918];
  v25[1] = lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, MEMORY[0x263F16918]);
  dispatch thunk of SetAlgebra.intersection(_:)();
  lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, v17);
  uint64_t v27 = a2;
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
  uint64_t v30 = v4;
  uint64_t v19 = &v8[*(int *)(v4 + 48)];
  *unint64_t v8 = v18 & 1;
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    uint64_t v22 = v26;
    uint64_t v21 = v27;
    v26(v19, v27, v9);
    v22(v13, v21, v9);
    dispatch thunk of SetAlgebra.formUnion(_:)();
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v20(v19, v15, v9);
  }
  uint64_t v23 = &v29[*(int *)(v30 + 48)];
  v20(v23, v19, v9);
  v20(v31, v23, v9);
  return v18 & 1;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(uint64_t);
  char v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  void v25[2];
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;

  uint64_t v31 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (inserted: Bool, memberAfterInsert: ARView.Environment.SceneUnderstanding.Options));
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v29 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)v25 - v7;
  uint64_t v9 = type metadata accessor for ARView.Environment.SceneUnderstanding.Options();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  unint64_t v15 = (char *)v25 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v28 = v2;
  uint64_t v26 = v16;
  v16(v13, v2, v9);
  uint64_t v17 = (void (*)(uint64_t))MEMORY[0x263F168D0];
  v25[1] = lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options, MEMORY[0x263F168D0]);
  dispatch thunk of SetAlgebra.intersection(_:)();
  lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options, v17);
  uint64_t v27 = a2;
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
  uint64_t v30 = v4;
  uint64_t v19 = &v8[*(int *)(v4 + 48)];
  *unint64_t v8 = v18 & 1;
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    uint64_t v22 = v26;
    uint64_t v21 = v27;
    v26(v19, v27, v9);
    v22(v13, v21, v9);
    dispatch thunk of SetAlgebra.formUnion(_:)();
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v20(v19, v15, v9);
  }
  uint64_t v23 = &v29[*(int *)(v30 + 48)];
  v20(v23, v19, v9);
  v20(v31, v23, v9);
  return v18 & 1;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t);
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char *v16;
  unsigned char *v17;
  uint64_t (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  unsigned char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v26;
  unsigned char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  uint64_t v33 = a1;
  uint64_t v4 = type metadata accessor for ObjectCaptureSession.Frame.Feedback();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  float32x4_t v32 = v2;
  uint64_t v29 = v9;
  uint64_t v30 = v10;
  v9((char *)&v26 - v10, v2, v4);
  uint64_t v11 = (void (*)(uint64_t))MEMORY[0x270FB2658];
  uint64_t v28 = lazy protocol witness table accessor for type ObjectCaptureSession.Frame.Feedback and conformance ObjectCaptureSession.Frame.Feedback(&lazy protocol witness table cache variable for type ObjectCaptureSession.Frame.Feedback and conformance ObjectCaptureSession.Frame.Feedback, MEMORY[0x270FB2658]);
  dispatch thunk of SetAlgebra.intersection(_:)();
  lazy protocol witness table accessor for type ObjectCaptureSession.Frame.Feedback and conformance ObjectCaptureSession.Frame.Feedback(&lazy protocol witness table cache variable for type ObjectCaptureSession.Frame.Feedback and conformance ObjectCaptureSession.Frame.Feedback, v11);
  uint64_t v31 = a2;
  uint64_t v12 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
  unint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (inserted: Bool, memberAfterInsert: ObjectCaptureSession.Frame.Feedback));
  uint64_t v14 = *(void *)(*(void *)(v13 - 8) + 64);
  unint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = &v16[*(int *)(v15 + 48)];
  *uint64_t v16 = v12 & 1;
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    uint64_t v20 = v17;
    uint64_t v21 = v31;
    uint64_t v27 = v17;
    uint64_t v22 = v29;
    uint64_t v23 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v29)(v20, v31, v4);
    uint64_t v26 = (uint64_t)&v26;
    MEMORY[0x270FA5388](v23);
    v22((char *)&v26 - v30, v21, v4);
    uint64_t v17 = v27;
    uint64_t v19 = dispatch thunk of SetAlgebra.formUnion(_:)();
    char v18 = *(uint64_t (**)(char *, char *, uint64_t))(v5 + 32);
  }
  else
  {
    char v18 = *(uint64_t (**)(char *, char *, uint64_t))(v5 + 32);
    uint64_t v19 = v18(v17, v8, v4);
  }
  MEMORY[0x270FA5388](v19);
  uint64_t v24 = (char *)&v26 + *(int *)(v13 + 48) - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18(v24, v17, v4);
  v18(v33, v24, v4);
  return v12 & 1;
}

void DataModel.setupInitialSession(imagesDirectory:configuration:)(uint8_t *a1, uint64_t a2)
{
  uint64_t v57 = a2;
  uint64_t v54 = type metadata accessor for ObjectCaptureSession.Configuration(0);
  MEMORY[0x270FA5388](v54);
  uint64_t v6 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v56 = (uint64_t)v52 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v52 - v13;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  char v18 = (char *)v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(v2 + 16))
  {
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v53 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession;
  if (*(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_once();
    goto LABEL_8;
  }
  uint64_t v55 = v2;
  static PhotogrammetryFileHelpers.ensureDirectoryExists(directory:)();
  if (v3) {
    return;
  }
  uint64_t v19 = v57;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v57, (uint64_t)v14, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    outlined destroy of URL?((uint64_t)v14, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    static PhotogrammetryFileHelpers.ensureDirectoryExists(directory:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  uint64_t v15 = v56;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v19, v56, &demangling cache variable for type metadata for URL?);
  specialized DataModel.throwIfInsufficientStorage(imagesDirectory:checkpointDirectory:)(a1, v15);
  if (one-time initialization token for logger != -1) {
    goto LABEL_32;
  }
LABEL_8:
  uint64_t v20 = type metadata accessor for Logger();
  v52[0] = __swift_project_value_buffer(v20, (uint64_t)logger);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_2465C2000, v21, v22, "Creating a new internal ObjectCaptureSession...", v23, 2u);
    MEMORY[0x24C5348D0](v23, -1, -1);
  }

  uint64_t v24 = v55;
  uint64_t v25 = *(void **)(v55 + 16);
  if (!v25)
  {
    __break(1u);
    goto LABEL_34;
  }
  id v26 = objc_msgSend(v25, sel_session);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v15, (uint64_t)v10, &demangling cache variable for type metadata for URL?);
  uint64_t v27 = type metadata accessor for ObjectCaptureSession.Configuration();
  v52[1] = v52;
  MEMORY[0x270FA5388](v27 - 8);
  outlined init with copy of DataModel.Error(v57, (uint64_t)v6, type metadata accessor for ObjectCaptureSession.Configuration);
  swift_unknownObjectRetain();
  ObjectCaptureSession.Configuration.init()();
  ObjectCaptureSession.Configuration.enableOverCapture.setter();
  outlined destroy of DataModel.Error((uint64_t)v6, type metadata accessor for ObjectCaptureSession.Configuration);
  id v28 = objc_allocWithZone((Class)type metadata accessor for ObjectCaptureSession());
  uint64_t v29 = ObjectCaptureSession.init(arSession:mtlDevice:motionManager:snapshotURL:configuration:)();
  if (!v3)
  {
    uint64_t v30 = (void *)v29;
    DataModel.removeCaptureSubscriptions()();
    *(void *)(v24 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imageWriter) = 0;
    swift_release();
    uint64_t v31 = v53;
    float32x4_t v32 = *(void **)(v24 + v53);
    *(void *)(v24 + v53) = v30;
    id v33 = v30;

    if (*(void *)(v24 + v31))
    {
      DataModel.addCaptureSubscriptions()();
      DataModel.setupDebugState()();
    }

    swift_retain_n();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v59 = v37;
      *(_DWORD *)uint64_t v36 = 141558274;
      uint64_t v58 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2080;
      uint64_t v58 = *(void *)(v24 + v31);
      id v38 = (id)v58;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession?);
      uint64_t v39 = String.init<A>(describing:)();
      uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v34, v35, "... successfully made the internal ObjectCaptureSession: %{mask.hash}s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v37, -1, -1);
      MEMORY[0x24C5348D0](v36, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v41 = v56;
    uint64_t v42 = v24;
    if ((*(unsigned char *)(v24 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isAutoCaptureEnabled) & 1) == 0)
    {
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        float32x4_t v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)float32x4_t v45 = 0;
        _os_log_impl(&dword_2465C2000, v43, v44, "Disabling auto-capture after creating the internal session!", v45, 2u);
        MEMORY[0x24C5348D0](v45, -1, -1);
      }

      uint64_t v42 = v55;
      DataModel.pauseAutoCapture()();
    }
    if (!*(void *)(v42 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_postProcessRenderer)) {
      goto LABEL_29;
    }
    swift_retain();
    float32x4_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      float32x4_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float32x4_t v48 = 0;
      _os_log_impl(&dword_2465C2000, v46, v47, "Attaching PostProcessRenderManager to ARView...", v48, 2u);
      MEMORY[0x24C5348D0](v48, -1, -1);
    }

    uint64_t v49 = v55;
    DataModel.startFrameProcessor()();
    float32x4_t v50 = *(void **)(v49 + 16);
    if (v50)
    {
      if (*(void *)(v49 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_arFrameProcessor))
      {
        id v51 = v50;
        swift_retain();
        PostProcessRenderManager.attach(to:frameProcessor:)();
        swift_release();

        swift_release();
LABEL_29:
        DataModel.subscribeToUpdateEvents()();
        outlined destroy of URL?(v41, &demangling cache variable for type metadata for URL?);
        return;
      }
LABEL_35:
      __break(1u);
      return;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  outlined destroy of URL?(v15, &demangling cache variable for type metadata for URL?);
}

uint64_t DataModel.invalidateSession(error:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DataModel.State(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v14 - v6;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_2465C2000, v9, v10, "Invalidate session was called...", v11, 2u);
    MEMORY[0x24C5348D0](v11, -1, -1);
  }

  outlined init with copy of DataModel.Error(a1, (uint64_t)v7, type metadata accessor for DataModel.Error);
  uint64_t v12 = type metadata accessor for DataModel.Error(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 0, 8, v12);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  DataModel.performStateTransition(from:to:)((uint64_t)v5, (uint64_t)v7);
  outlined destroy of DataModel.Error((uint64_t)v5, type metadata accessor for DataModel.State);
  return outlined destroy of DataModel.Error((uint64_t)v7, type metadata accessor for DataModel.State);
}

Swift::Void __swiftcall DataModel.tearDown()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_2465C2000, v7, v8, "Tearing down data model...", v9, 2u);
    MEMORY[0x24C5348D0](v9, -1, -1);
  }

  uint64_t v10 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_tornDown;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_tornDown) & 1) == 0)
  {
    uint64_t v14 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession;
    uint64_t v15 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
    if (v15)
    {
      id v16 = v15;
      dispatch thunk of ObjectCaptureSession.cancel()();
    }
    DataModel.removeCaptureSubscriptions()();
    *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imageWriter) = 0;
    swift_release();
    uint64_t v17 = *(void **)(v1 + v14);
    *(void *)(v1 + v14) = 0;

    if (*(void *)(v1 + v14))
    {
      DataModel.addCaptureSubscriptions()();
      DataModel.setupDebugState()();
    }
    DataModel.stopFrameProcessor()();
    if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_postProcessRenderer))
    {
      swift_retain();
      PostProcessRenderManager.detach()();
      swift_release();
    }
    if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureBoxModel))
    {
      swift_retain();
      CaptureModeBoxModel.disable()();
      swift_release();
      uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel);
      if (!v18)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      swift_retain();
      *uint64_t v5 = static OS_dispatch_queue.main.getter();
      (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
      char v19 = _dispatchPreconditionTest(_:)();
      (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
      if (v19)
      {
        DetectModeBoxModel.performSwitchStateTransitions(from:to:)(*(unsigned __int8 *)(v18 + 24), 0);
        *(unsigned char *)(v18 + 24) = 0;
        swift_release();
        DataModel.unsubscribeFromUpdateEvents()();
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        uint64_t v20 = v29;
        if (v29)
        {
          CoveragePointRenderer.teardown()();
        }
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        uint64_t v21 = v29;
        if (!v29) {
          goto LABEL_27;
        }
        FreeformCloudRenderer.clearView()();
        uint64_t v22 = *(void *)&v21[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraTransformProvider];
        if (v22)
        {
          uint64_t v23 = OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view;
          uint64_t v24 = *(void **)&v21[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view];
          if (v24)
          {
            if (*(void *)(v22 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_dragGesture))
            {
              objc_msgSend(v24, sel_removeGestureRecognizer_);
              uint64_t v25 = *(void **)&v21[v23];
              *(void *)&v21[v23] = 0;

LABEL_27:
              DataModel.removeGestureRecognizer()();
              id v26 = *(void **)(v1 + 16);
              *(void *)(v1 + 16) = 0;

              uint64_t v27 = *(void **)(v1 + 24);
              *(void *)(v1 + 24) = 0;

              *(unsigned char *)(v1 + v10) = 1;
              return;
            }
LABEL_33:
            __break(1u);
            return;
          }
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
  os_log_t v28 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_2465C2000, v28, v11, "Already torn down...  nothing to do.", v12, 2u);
    MEMORY[0x24C5348D0](v12, -1, -1);
  }
  os_log_t v13 = v28;
}

void DataModel.startSession(imagesURL:configuration:)(uint8_t *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (uint64_t *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t *v10 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F8F0E0], v7);
  char v11 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v12 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession;
  if (*(void *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession))
  {
    type metadata accessor for DataModel.Error(0);
    lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
    swift_allocError();
    *os_log_t v13 = 0xD000000000000036;
    v13[1] = 0x80000002466C1B50;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  DataModel.setupInitialSession(imagesDirectory:configuration:)(a1, a2);
  if (v3) {
    return;
  }
  if (!*(void *)(v4 + v12))
  {
    if (one-time initialization token for logger == -1)
    {
LABEL_12:
      uint64_t v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)logger);
      id v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v16, v17))
      {
LABEL_15:

        return;
      }
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      char v19 = "startSession: no session!";
LABEL_14:
      _os_log_impl(&dword_2465C2000, v16, v17, v19, v18, 2u);
      MEMORY[0x24C5348D0](v18, -1, -1);
      goto LABEL_15;
    }
LABEL_23:
    swift_once();
    goto LABEL_12;
  }
  uint64_t v14 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isRunning;
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isRunning))
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)logger);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v17)) {
      goto LABEL_15;
    }
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    char v19 = "startSession: session already running!";
    goto LABEL_14;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)logger);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl(&dword_2465C2000, v22, v23, "Starting object capture session...", v24, 2u);
    MEMORY[0x24C5348D0](v24, -1, -1);
  }

  DataModel.startSessionInternal(imagesURL:)((uint64_t)a1);
  *(unsigned char *)(v4 + v14) = 1;
}

Swift::Void __swiftcall DataModel.resume()()
{
  uint64_t v1 = type metadata accessor for DataModel.State(0);
  MEMORY[0x270FA5388](v1);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  if (v2)
  {
    id v3 = v2;
    dispatch thunk of ObjectCaptureSession.resume()();
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v11 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v9 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v5, v6, "DataModel resume() called with current state=%{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v8, -1, -1);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

Swift::Void __swiftcall DataModel.pause()()
{
  uint64_t v1 = type metadata accessor for DataModel.State(0);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DataModel.State?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  os_log_type_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v19 - v7;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v8, 0, 1, v1);
  outlined init with take of Animation?((uint64_t)v8, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for DataModel.State?);
  uint64_t v9 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_stateBeforePause;
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)v6, v9, (uint64_t *)&demangling cache variable for type metadata for DataModel.State?);
  swift_endAccess();
  unint64_t v10 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  if (v10)
  {
    id v11 = v10;
    dispatch thunk of ObjectCaptureSession.pause(fastResuming:)();
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)logger);
  swift_retain_n();
  os_log_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v20[0] = v16;
    *(_DWORD *)uint64_t v15 = 136446210;
    v19[1] = v15 + 4;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v17 = String.init<A>(describing:)();
    v19[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v13, v14, "DataModel pause() called with stateBeforePause=%{public}s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v16, -1, -1);
    MEMORY[0x24C5348D0](v15, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

Swift::Void __swiftcall DataModel.beginNextSegment()()
{
  uint64_t v1 = type metadata accessor for DataModel.State(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v4 = type metadata accessor for DataModel.Error(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 8, v4) != 3)
  {
    outlined destroy of DataModel.Error((uint64_t)v3, type metadata accessor for DataModel.State);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)logger);
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v6, v7)) {
      goto LABEL_13;
    }
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    uint64_t v9 = "Can't begin next segment, ignoring...";
    goto LABEL_12;
  }
  if (*(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession))
  {
    DataModel.startNewSegment()();
    return;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)logger);
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    uint64_t v9 = "No valid session!";
LABEL_12:
    _os_log_impl(&dword_2465C2000, v6, v7, v9, v8, 2u);
    MEMORY[0x24C5348D0](v8, -1, -1);
  }
LABEL_13:
}

void DataModel.isAutoCaptureEnabled.didset()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isAutoCaptureEnabled) == 1)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)logger);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_2465C2000, v2, v3, "Enabling auto-capture!", v4, 2u);
      MEMORY[0x24C5348D0](v4, -1, -1);
    }

    DataModel.resumeAutoCapture()();
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)logger);
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_2465C2000, v6, v7, "Disabling auto-capture!", v8, 2u);
      MEMORY[0x24C5348D0](v8, -1, -1);
    }

    DataModel.pauseAutoCapture()();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DataModel.beginNewOrbit()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v60 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v59 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DataModel.State(0);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v55 - v9;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v11 = __swift_project_value_buffer(v3, (uint64_t)logger);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v14 = 0;
    _os_log_impl(&dword_2465C2000, v12, v13, "Beginning a new orbit...", v14, 2u);
    MEMORY[0x24C5348D0](v14, -1, -1);
  }

  if ((DataModel.inCapturingMetaState.getter() & 1) == 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v15 = type metadata accessor for DataModel.Error(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v8, 1, 8, v15);
    char v16 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v10, (uint64_t)v8);
    outlined destroy of DataModel.Error((uint64_t)v8, type metadata accessor for DataModel.State);
    outlined destroy of DataModel.Error((uint64_t)v10, type metadata accessor for DataModel.State);
    if ((v16 & 1) == 0)
    {
      lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
      swift_allocError();
      *uint64_t v54 = 0xD000000000000033;
      v54[1] = 0x80000002466C1AA0;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return;
    }
  }
  uint64_t v17 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_scanPassID;
  uint64_t v18 = *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_scanPassID);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19)
  {
    __break(1u);
    goto LABEL_35;
  }
  *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_scanPassID) = v20;
  swift_retain();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v23 = 134217984;
    uint64_t v61 = *(void *)(v2 + v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_2465C2000, v21, v22, "Scan pass ID is now: %ld", v23, 0xCu);
    MEMORY[0x24C5348D0](v23, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v24 = *(void **)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  if (!v24 || *(unsigned char *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) != 1) {
    goto LABEL_31;
  }
  uint64_t v56 = v3;
  uint64_t v57 = v1;
  id v58 = v24;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl(&dword_2465C2000, v25, v26, "Resetting the auto-capture pose graph...", v27, 2u);
    MEMORY[0x24C5348D0](v27, -1, -1);
  }

  uint64_t v28 = type metadata accessor for ObjectCaptureSession.State();
  uint64_t v55 = (uint64_t)&v55;
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(void *)(v29 + 64);
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = dispatch thunk of ObjectCaptureSession.state.getter();
  MEMORY[0x270FA5388](v31);
  float32x4_t v32 = (char *)&v55 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v29 + 104))(v32, *MEMORY[0x263F368E0], v28);
  char v33 = MEMORY[0x24C532600](v32, v32);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v29 + 8);
  v34(v32, v28);
  v34(v32, v28);
  uint64_t v35 = v56;
  uint64_t v36 = v60;
  if (v33)
  {
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_2465C2000, v37, v38, "Internal session is paused.  Resuming temporarily to reset the graph...", v39, 2u);
      MEMORY[0x24C5348D0](v39, -1, -1);
    }

    dispatch thunk of ObjectCaptureSession.resume()();
  }
  unint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl(&dword_2465C2000, v40, v41, "Resetting pose graph...", v42, 2u);
    MEMORY[0x24C5348D0](v42, -1, -1);
  }

  dispatch thunk of ObjectCaptureSession.resetCapturePoseGraph()();
  uint64_t v43 = v59;
  if (v33)
  {
    os_log_type_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      float32x4_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float32x4_t v46 = 0;
      _os_log_impl(&dword_2465C2000, v44, v45, "... re-pausing internal session after reset pose graph.", v46, 2u);
      MEMORY[0x24C5348D0](v46, -1, -1);
    }

    dispatch thunk of ObjectCaptureSession.pause(fastResuming:)();
  }
  type metadata accessor for CaptureCircle();
  swift_allocObject();
  uint64_t v47 = CaptureCircle.init(numBins:binFillAnimDurationSecs:)(96, 0.25);
  uint64_t v48 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureCircle;
  *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureCircle) = v47;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v43, v11, v35);
  swift_retain();
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v49, v50))
  {

    swift_release();
    goto LABEL_30;
  }
  id v51 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)id v51 = 134349056;
  uint64_t v52 = *(void *)(v2 + v48);
  if (!v52)
  {
LABEL_35:
    swift_release();
    __break(1u);
    return;
  }
  uint64_t v53 = v51;
  uint64_t v61 = *(void *)(v52 + 16);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  _os_log_impl(&dword_2465C2000, v49, v50, "... new orbit made a new CaptureCircle with id= %{public}ld", v53, 0xCu);
  MEMORY[0x24C5348D0](v53, -1, -1);

LABEL_30:
  (*(void (**)(char *, uint64_t))(v36 + 8))(v43, v35);
LABEL_31:
  if (*(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_deviceMotionEstimator)) {
    DeviceMotionEstimator.reset()();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  LOBYTE(v61) = 0;
  swift_retain();
  static Published.subscript.setter();
}

uint64_t DataModel.canTakeManualShot.getter()
{
  return DataModel.showMiniView.getter();
}

Swift::Bool __swiftcall DataModel.takeManualShot()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  if (!v1) {
    goto LABEL_16;
  }
  uint64_t v2 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v1;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v21 != 1)
  {

LABEL_16:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)logger);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_2465C2000, v18, v19, "Manual shot requested when we in inhibition period!  Ignoring request...", v20, 2u);
      MEMORY[0x24C5348D0](v20, -1, -1);
    }

    return 0;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_2465C2000, v5, v6, "Taking manual shot!", v7, 2u);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  if ((dispatch thunk of ObjectCaptureSession.takeManualShot()() & 1) == 0)
  {

    return 0;
  }
  double v8 = COERCE_DOUBLE(dispatch thunk of ObjectCaptureSession.captureCoolDownTime.getter());
  if (v9) {
    double v10 = 1.0;
  }
  else {
    double v10 = v8;
  }
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v13 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v11, v12, "Setting manual shot inhibition period to %f seconds.", v13, 0xCu);
    MEMORY[0x24C5348D0](v13, -1, -1);
  }

  if (v10 < 0.0)
  {
    __break(1u);
  }
  else
  {
    double v15 = *(double *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localTime);
    uint64_t v16 = *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_manualShotRefractoryTimer);
    *(double *)(v16 + 16) = v10 + v15;
    *(double *)(v16 + 24) = v15;
    return 1;
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DataModel.startDetecting()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DataModel.State(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v81 - v6;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  char v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_2465C2000, v9, v10, "startDetecting() called...", v11, 2u);
    MEMORY[0x24C5348D0](v11, -1, -1);
  }

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v12 = type metadata accessor for DataModel.Error(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v5, 4, 8, v12);
  char v13 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v7, (uint64_t)v5);
  outlined destroy of DataModel.Error((uint64_t)v5, type metadata accessor for DataModel.State);
  outlined destroy of DataModel.Error((uint64_t)v7, type metadata accessor for DataModel.State);
  if ((v13 & 1) == 0)
  {
    swift_retain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v84 = v2;
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(void *)&t1.a = v27;
      *(_DWORD *)os_log_type_t v26 = 136446210;
      uint64_t v83 = v26 + 4;
      swift_getKeyPath();
      uint64_t v88 = v12;
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v28 = String.init<A>(describing:)();
      *(void *)&t2.a = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)&t1);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v24, v25, "startDetecting() called in wrong state=%{public}s", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v27, -1, -1);
      MEMORY[0x24C5348D0](v26, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
    swift_allocError();
    uint64_t v31 = v30;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    *uint64_t v31 = String.init<A>(describing:)();
    v31[1] = v32;
    goto LABEL_25;
  }
  os_log_type_t v14 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  if (!v14 || (double v15 = *(void **)(v1 + 16)) == 0)
  {
LABEL_24:
    lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
    swift_allocError();
    *float32x4_t v65 = 0xD000000000000033;
    v65[1] = 0x80000002466C1B10;
LABEL_25:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  uint64_t v88 = v1;
  id v16 = v14;
  uint64_t v17 = v15;
  id v18 = [v17 session];
  id v19 = objc_msgSend(v18, sel_currentFrame);

  if (!v19)
  {

    goto LABEL_24;
  }
  id v20 = objc_msgSend(v19, sel_camera);

  objc_msgSend(v20, sel_imageResolution);
  id v21 = [v17 window];
  if (v21)
  {
    os_log_type_t v22 = v21;
    id v23 = objc_msgSend(v21, sel_windowScene);

    if (v23)
    {
      objc_msgSend(v23, sel_interfaceOrientation);
    }
  }
  [v17 center];
  CGFloat v34 = v33;
  CGFloat v36 = v35;
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v83 = (uint8_t *)v16;
  uint64_t v84 = v17;
  if (v39)
  {
    unint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v82 = swift_slowAlloc();
    *(void *)&t2.a = v82;
    *(_DWORD *)unint64_t v40 = 136446210;
    *(void *)&long long v81 = v40 + 4;
    t1.a = v34;
    t1.b = v36;
    type metadata accessor for CGPoint(0);
    uint64_t v41 = String.init<A>(describing:)();
    *(void *)&t1.a = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, (uint64_t *)&t2);
    uint64_t v17 = v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v37, v38, "Target point screen: %{public}s", v40, 0xCu);
    uint64_t v43 = v82;
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v43, -1, -1);
    MEMORY[0x24C5348D0](v40, -1, -1);
  }

  [v17 frame];
  double v45 = v44;
  [v17 frame];
  CGAffineTransformMakeScale(&t1, 1.0 / v45, 1.0 / v46);
  long long v82 = *(_OWORD *)&t1.a;
  long long v81 = *(_OWORD *)&t1.c;
  CGFloat tx = t1.tx;
  CGFloat ty = t1.ty;
  ARViewToCameraImageTransform();
  long long v49 = *(_OWORD *)&t1.a;
  long long v50 = *(_OWORD *)&t1.c;
  long long v51 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v82;
  *(_OWORD *)&t1.c = v81;
  t1.CGFloat tx = tx;
  t1.CGFloat ty = ty;
  *(_OWORD *)&t2.a = v49;
  *(_OWORD *)&t2.c = v50;
  *(_OWORD *)&t2.CGFloat tx = v51;
  CGAffineTransformConcat(&v85, &t1, &t2);
  CGAffineTransform t1 = v85;
  v89.x = v34;
  v89.y = v36;
  CGPoint v52 = CGPointApplyAffineTransform(v89, &t1);
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    *(void *)&t2.a = v56;
    *(_DWORD *)uint64_t v55 = 136446210;
    *(void *)&long long v82 = v55 + 4;
    t1.a = v52.x;
    t1.b = v52.y;
    type metadata accessor for CGPoint(0);
    uint64_t v57 = String.init<A>(describing:)();
    *(void *)&t1.a = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, (uint64_t *)&t2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v17 = v84;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v53, v54, "Calling detectObject on normalized point: %{public}s", v55, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v56, -1, -1);
    MEMORY[0x24C5348D0](v55, -1, -1);
  }

  uint64_t v59 = v83;
  char v60 = dispatch thunk of ObjectCaptureSession.detectObject(at:)();
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.default.getter();
  BOOL v63 = os_log_type_enabled(v61, v62);
  if (v60)
  {
    if (v63)
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl(&dword_2465C2000, v61, v62, "Requested object detection at center of screen... started detection successfully.", v64, 2u);
      MEMORY[0x24C5348D0](v64, -1, -1);

      uint64_t v17 = v61;
    }
    else
    {
    }
    uint64_t v75 = v88;
LABEL_39:

    *(unsigned char *)(v75 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) = 1;
    DataModel.captureMode.didset();
    return;
  }
  if (v63)
  {
    float32x4_t v66 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)float32x4_t v66 = 0;
    _os_log_impl(&dword_2465C2000, v61, v62, "No object found!  Sending a shakeReticle message...", v66, 2u);
    MEMORY[0x24C5348D0](v66, -1, -1);
  }

  swift_getKeyPath();
  swift_getKeyPath();
  LOBYTE(t1.a) = 1;
  uint64_t v67 = v88;
  swift_retain();
  static Published.subscript.setter();
  uint64_t v68 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_numUnsuccessfulDetects;
  uint64_t v69 = *(void *)(v67 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_numUnsuccessfulDetects);
  BOOL v70 = __OFADD__(v69, 1);
  uint64_t v71 = v69 + 1;
  if (!v70)
  {
    *(void *)(v67 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_numUnsuccessfulDetects) = v71;
    swift_retain();
    __n128 v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = swift_slowAlloc();
      *(_DWORD *)uint64_t v74 = 134218240;
      t1.a = *(CGFloat *)(v67 + v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v74 + 12) = 2048;
      *(void *)&t1.a = 2;
      uint64_t v59 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_2465C2000, v72, v73, "Unsuccessful object detection %ld out of %ld", (uint8_t *)v74, 0x16u);
      MEMORY[0x24C5348D0](v74, -1, -1);
    }
    else
    {

      swift_release();
    }
    uint64_t v75 = v67;
    if (*(uint64_t *)(v67 + v68) <= 1)
    {
      lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();

      return;
    }
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    BOOL v78 = os_log_type_enabled(v76, v77);
    uint64_t v17 = v84;
    if (v78)
    {
      uint64_t v79 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v79 = 0;
      _os_log_impl(&dword_2465C2000, v76, v77, "Too many unsuccessful auto detections... using manual box flow!", v79, 2u);
      uint64_t v80 = v79;
      uint64_t v75 = v88;
      MEMORY[0x24C5348D0](v80, -1, -1);
    }

    DataModel.startManualBoxMode()();
    goto LABEL_39;
  }
  __break(1u);
}

uint64_t DataModel.startManualBoxMode()()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v0 - 8);
  uint64_t v35 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v32 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v30 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  char v9 = (char *)&v28 - v8;
  uint64_t v10 = type metadata accessor for DataModel.State(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  char v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  double v15 = (char *)&v28 - v14;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)logger);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v19 = 0;
    _os_log_impl(&dword_2465C2000, v17, v18, "Using manual box flow!", v19, 2u);
    MEMORY[0x24C5348D0](v19, -1, -1);
  }

  uint64_t v20 = type metadata accessor for DataModel.Error(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v15, 5, 8, v20);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  DataModel.performStateTransition(from:to:)((uint64_t)v13, (uint64_t)v15);
  outlined destroy of DataModel.Error((uint64_t)v13, type metadata accessor for DataModel.State);
  outlined destroy of DataModel.Error((uint64_t)v15, type metadata accessor for DataModel.State);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v21 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  MEMORY[0x24C533360](v7, 0.2);
  unint64_t v29 = *(void (**)(char *, uint64_t))(v4 + 8);
  v29(v7, v3);
  uint64_t v22 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = partial apply for closure #1 in DataModel.startManualBoxMode();
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_495;
  id v23 = _Block_copy(aBlock);
  swift_release();
  uint64_t v24 = v30;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  os_log_type_t v25 = v32;
  uint64_t v26 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24C5337E0](v9, v24, v25, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v24, v33);
  return ((uint64_t (*)(char *, uint64_t))v29)(v9, v3);
}

uint64_t closure #1 in DataModel.startManualBoxMode()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_2465C2000, v1, v2, "Async wait for 2D anim complete... starting manual box flow.", v3, 2u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = *(void *)(result + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel);
    swift_retain();
    uint64_t result = swift_release();
    if (v5)
    {
      DetectModeBoxModel.startRaycastManualBoxFlow()();
      return swift_release();
    }
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DataModel.resetDetection()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DataModel.State(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v20 - v6;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v8 = type metadata accessor for DataModel.Error(0);
  char v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  v9(v5, 5, 8, v8);
  char v10 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v7, (uint64_t)v5);
  outlined destroy of DataModel.Error((uint64_t)v5, type metadata accessor for DataModel.State);
  outlined destroy of DataModel.Error((uint64_t)v7, type metadata accessor for DataModel.State);
  if (v10) {
    goto LABEL_3;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v9(v5, 4, 8, v8);
  char v11 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v7, (uint64_t)v5);
  outlined destroy of DataModel.Error((uint64_t)v5, type metadata accessor for DataModel.State);
  outlined destroy of DataModel.Error((uint64_t)v7, type metadata accessor for DataModel.State);
  if (v11)
  {
LABEL_3:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)logger);
    char v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      double v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v15 = 0;
      _os_log_impl(&dword_2465C2000, v13, v14, "resetDetection() called... switching back to .ready to reselect object!", v15, 2u);
      MEMORY[0x24C5348D0](v15, -1, -1);
    }

    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v20) = 0;
    swift_retain();
    static Published.subscript.setter();
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v20) = 0;
    swift_retain();
    static Published.subscript.setter();
    *(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) = 0;
    DataModel.captureMode.didset();
    v9(v7, 4, 8, v8);
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    DataModel.performStateTransition(from:to:)((uint64_t)v5, (uint64_t)v7);
    outlined destroy of DataModel.Error((uint64_t)v5, type metadata accessor for DataModel.State);
    outlined destroy of DataModel.Error((uint64_t)v7, type metadata accessor for DataModel.State);
  }
  else
  {
    lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
    swift_allocError();
    uint64_t v17 = v16;
    unint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    unint64_t v20 = 0xD000000000000020;
    unint64_t v21 = 0x80000002466C1AE0;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v18._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    unint64_t v19 = v21;
    *uint64_t v17 = v20;
    v17[1] = v19;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

void DataModel.addToScene(entity:)()
{
  uint64_t v1 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)(v0 + 16);
  if (v5)
  {
    id v6 = v5;
    dispatch thunk of ARView.scene.getter();

    dispatch thunk of Scene.anchors.getter();
    swift_release();
    uint64_t v7 = specialized Collection.first.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    if (v7)
    {
      HasHierarchy.addChild(_:preservingWorldTransform:)();
      swift_release();
    }
    else
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)logger);
      char v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        char v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v11 = 0;
        _os_log_impl(&dword_2465C2000, v9, v10, "Expected anchor in addToScene but wasn't found!", v11, 2u);
        MEMORY[0x24C5348D0](v11, -1, -1);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t DataModel.numShotsTaken.getter()
{
  return DataModel.coveragePointRenderer.getter();
}

uint64_t DataModel.numShotsTakenThisSegment.getter()
{
  return DataModel.coveragePointRenderer.getter();
}

uint64_t DataModel.userCompletedOrbit.getter()
{
  return DataModel.showMiniView.getter();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DataModel.startCapturing()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *id v6 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F8F0E0], v3);
  char v7 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    swift_once();
    goto LABEL_11;
  }
  uint64_t v8 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode;
  if (!*(unsigned char *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode))
  {
    DataModel.startFreeformCapturing()();
    if (v1) {
      return;
    }
LABEL_7:
    int v10 = *(unsigned __int8 *)(v2 + v8);
    if (v10 == 1)
    {
      *(void *)&long long v9 = 0x3F80000000000000;
    }
    else
    {
      if (v10 != 2)
      {
LABEL_25:
        __break(1u);
        return;
      }
      *(void *)&long long v9 = 1056964608;
    }
    long long v20 = v9;
    double v15 = specialized static ExperimentSettings.loadMotionFilterDurationSecs(default:)(1.0);
    double v16 = v15 * 60.0;
    if ((~COERCE__INT64(v15 * 60.0) & 0x7FF0000000000000) != 0)
    {
      if (v16 > -9.22337204e18)
      {
        if (v16 < 9.22337204e18)
        {
          uint64_t v17 = (uint64_t)v16;
          float v18 = specialized static ExperimentSettings.loadMinBadMotionScore(default:)(0.2618);
          float v19 = specialized static ExperimentSettings.loadMaxBadMotionScore(default:)(0.5236);
          int v21 = v20;
          uint64_t v22 = v20;
          uint64_t v23 = v17;
          double v24 = v15;
          uint64_t v25 = 2;
          float v26 = v18;
          float v27 = v19;
          type metadata accessor for DeviceMotionEstimator();
          swift_allocObject();
          *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_deviceMotionEstimator) = DeviceMotionEstimator.init(desc:)((uint64_t)&v21);
          swift_release();
          DataModel.createCloudViewRenderer()();
          return;
        }
        goto LABEL_24;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) == 1)
  {
    DataModel.startObjectCapturing()();
    if (v1) {
      return;
    }
    goto LABEL_7;
  }
  if (one-time initialization token for logger != -1) {
    goto LABEL_21;
  }
LABEL_11:
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)logger);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v14 = 0;
    _os_log_impl(&dword_2465C2000, v12, v13, "startCapturing() should not be called more than once in area mode... ignoring subsequent calls.", v14, 2u);
    MEMORY[0x24C5348D0](v14, -1, -1);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DataModel.stopCapturing()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v25 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent();
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v27 = v5;
  MEMORY[0x270FA5388](v5);
  char v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (uint64_t *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v11 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F8F0E0], v8);
  char v12 = _dispatchPreconditionTest(_:)();
  os_log_type_t v14 = *(void (**)(uint64_t *, uint64_t))(v9 + 8);
  id v13 = (id)(v9 + 8);
  v14(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if ((DataModel.inCapturingMetaState.getter() & 1) == 0)
  {
    type metadata accessor for DataModel.Error(0);
    lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
    swift_allocError();
    unint64_t v22 = 0xD000000000000098;
    uint64_t v23 = "Cannot stop capturing unless the current state is one of {capturing} or the current state is paused and the pr"
          "evious state is one of the ones mentioned.";
LABEL_10:
    unint64_t *v21 = v22;
    v21[1] = (unint64_t)(v23 - 32) | 0x8000000000000000;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  double v15 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  if (!v15)
  {
    type metadata accessor for DataModel.Error(0);
    lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
    swift_allocError();
    unint64_t v22 = 0xD000000000000013;
    uint64_t v23 = "No capture session!";
    goto LABEL_10;
  }
  uint64_t v16 = one-time initialization token for logger;
  id v13 = v15;
  if (v16 != -1) {
LABEL_12:
  }
    swift_once();
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)logger);
  float v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    long long v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v20 = 0;
    _os_log_impl(&dword_2465C2000, v18, v19, "Stop capturing...", v20, 2u);
    MEMORY[0x24C5348D0](v20, -1, -1);
  }

  dispatch thunk of ObjectCaptureSession.finish()();
  type metadata accessor for AnalyticsManager();
  static AnalyticsManager.shared.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v4, v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_sessionID, v2);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  AnalyticsManager.ObjectCaptureSessionImageStatsEvent.init(sessionID:numImages:)();
  dispatch thunk of AnalyticsManager.sendObjectCaptureSessionImageStatsEvent(event:)();

  swift_release();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v27);
}

Swift::Void __swiftcall DataModel.cancelCapturing()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  char v6 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (one-time initialization token for logger == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)logger);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_2465C2000, v8, v9, "Cancelling capture...", v10, 2u);
    MEMORY[0x24C5348D0](v10, -1, -1);
  }

  uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  if (v11)
  {
    id v12 = v11;
    dispatch thunk of ObjectCaptureSession.cancel()();
  }
}

void DataModel.currentMiniViewCameraWorldTransform.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode);
  if (v1 != 1)
  {
    if (v1 != 2)
    {
LABEL_11:
      __break(1u);
      __break(1u);
      __break(1u);
      goto LABEL_12;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();

    if (!v5)
    {
      __break(1u);
      goto LABEL_10;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v2 = v5;
    uint64_t v3 = *(void **)&v5[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraTransformProvider];
    if (v3)
    {
LABEL_8:
      id v4 = v3;
      InteractiveCameraTransformManager.computeCurrentTransform()();

      return;
    }
    __break(1u);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  if (!v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v2 = v5;
  uint64_t v3 = *(void **)&v5[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_cameraTransformProvider];
  if (v3) {
    goto LABEL_8;
  }
LABEL_12:
  __break(1u);
}

uint64_t DataModel.triggerShakeReticle.getter()
{
  return DataModel.showMiniView.getter();
}

double DataModel.reticleAimVector.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t DataModel.shouldShowARKitCoachingView.getter()
{
  return DataModel.showMiniView.getter();
}

float DataModel.userControlScore.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_deviceMotionEstimator);
  float v2 = 1.0;
  float v3 = 1.0;
  if (v1)
  {
    float v4 = *(float *)(v1 + 136);
    float v5 = 1.0;
    if (v4 <= 1.0) {
      float v5 = *(float *)(v1 + 136);
    }
    if (v4 > 0.3) {
      float v3 = v5;
    }
    else {
      float v3 = 0.3;
    }
  }
  float v6 = sqrtf(vaddv_f32(vmul_f32(v9, v9)));
  float v7 = 1.0 - v6;
  if (v6 > 1.0) {
    float v7 = 0.0;
  }
  if (v6 > 0.0) {
    float v2 = v7;
  }
  return v2 * v3;
}

uint64_t DataModel.inCapturingMetaState.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DataModel.State(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  float v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  float v7 = (char *)&v20 - v6;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (uint64_t *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v11 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F8F0E0], v8);
  char v12 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v14 = type metadata accessor for DataModel.Error(0);
    double v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    v15(v5, 6, 8, v14);
    char v16 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v7, (uint64_t)v5);
    outlined destroy of DataModel.Error((uint64_t)v5, type metadata accessor for DataModel.State);
    outlined destroy of DataModel.Error((uint64_t)v7, type metadata accessor for DataModel.State);
    if (v16)
    {
      char v17 = 1;
    }
    else
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      v15(v5, 3, 8, v14);
      char v18 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v7, (uint64_t)v5);
      outlined destroy of DataModel.Error((uint64_t)v5, type metadata accessor for DataModel.State);
      outlined destroy of DataModel.Error((uint64_t)v7, type metadata accessor for DataModel.State);
      if (v18)
      {
        uint64_t v19 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_previousState;
        swift_beginAccess();
        outlined init with copy of DataModel.Error(v19, (uint64_t)v7, type metadata accessor for DataModel.State);
        v15(v5, 6, 8, v14);
        char v17 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v7, (uint64_t)v5);
        outlined destroy of DataModel.Error((uint64_t)v5, type metadata accessor for DataModel.State);
        outlined destroy of DataModel.Error((uint64_t)v7, type metadata accessor for DataModel.State);
      }
      else
      {
        char v17 = 0;
      }
    }
    return v17 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void DataModel.startNewSegment()()
{
  uint64_t v2 = v0;
  uint64_t v60 = type metadata accessor for CoveragePointCloud();
  uint64_t v62 = *(void *)(v60 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v60);
  float v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v59 = (uint64_t)&v52 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)logger);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_2465C2000, v11, v12, "Starting new capture segment...", v13, 2u);
    MEMORY[0x24C5348D0](v13, -1, -1);
  }

  uint64_t v14 = *(void **)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  if (!v14)
  {
    type metadata accessor for DataModel.Error(0);
    lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
    swift_allocError();
    *long long v50 = 0xD00000000000002ELL;
    v50[1] = 0x80000002466C19D0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  unint64_t v58 = v5;
  uint64_t v54 = v1;
  double v15 = *(char **)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_cameraPathManager);
  char v16 = &v15[OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_shots];
  swift_beginAccess();
  uint64_t v17 = MEMORY[0x263F8EE78];
  *(void *)char v16 = MEMORY[0x263F8EE78];
  char v18 = v15;
  id v19 = v14;
  swift_bridgeObjectRelease();
  *(void *)char v16 = v17;
  swift_bridgeObjectRelease();
  uint64_t v20 = &v18[OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_cameraPosesBoundingBox];
  swift_beginAccess();
  *(_OWORD *)uint64_t v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  v20[32] = 1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  int v21 = v61;
  if (v61)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56))(v9, 1, 1, v60);
    uint64_t v22 = (uint64_t)&v21[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_coveragePointCloud];
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)v9, v22, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
    swift_endAccess();
    *(void *)&v21[OBJC_IVAR____TtC19_RealityKit_SwiftUI21CoveragePointRenderer_captureCircle] = 0;
    swift_release();
    if (!CoveragePointRenderer.captureCircleRenderer.getter())
    {
LABEL_21:
      __break(1u);
      return;
    }
    swift_release();
    CoveragePointRenderer.clearView()();
  }
  id v53 = v19;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v23 = v61;
  if (v61)
  {
    FreeformCloudRenderer.clearView()();
  }
  uint64_t v24 = *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_cameraFrustumRenderer);
  *(void *)(v24 + 56) = 0;
  swift_retain();
  swift_unknownObjectRelease();
  *(void *)(v24 + 208) = 0;
  swift_release();
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  uint64_t v56 = &v52;
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  unint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);
  uint64_t v57 = v2;
  v29(v27, 1, 1, v28);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  uint64_t v55 = &v52;
  MEMORY[0x270FA5388](v30 - 8);
  uint64_t v32 = (char *)&v52 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56);
  v34(v32, 1, 1, v33);
  uint64_t v35 = (uint64_t)v58;
  v29(v58, 1, 1, v28);
  uint64_t v36 = v57;
  uint64_t v37 = v35 + *(int *)(v60 + 20);
  v34((char *)v37, 1, 1, v33);
  outlined assign with take of Cancellable?((uint64_t)v27, v35, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  outlined assign with take of Cancellable?((uint64_t)v32, v37, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  uint64_t v38 = v59;
  outlined init with take of DataModel.State(v35, v59, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  BOOL v39 = (unint64_t *)(v36 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_pointCloudsBySegment);
  swift_beginAccess();
  unint64_t v40 = *v39;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *BOOL v39 = v40;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v40 + 16) + 1, 1, v40);
    *BOOL v39 = v40;
  }
  unint64_t v43 = *(void *)(v40 + 16);
  unint64_t v42 = *(void *)(v40 + 24);
  if (v43 >= v42 >> 1)
  {
    unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1, v40);
    *BOOL v39 = v40;
  }
  *(void *)(v40 + 16) = v43 + 1;
  unint64_t v44 = (*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
  unint64_t v45 = v40 + v44;
  uint64_t v46 = *(void *)(v62 + 72);
  outlined init with take of DataModel.State(v38, v45 + v46 * v43, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  unint64_t v47 = *v39;
  swift_endAccess();
  uint64_t v48 = *(void *)(v47 + 16);
  if (!v48)
  {
    __break(1u);
    goto LABEL_21;
  }
  outlined init with copy of DataModel.Error(v47 + v44 + (v48 - 1) * v46, v35, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<CoveragePointCloud>);
  Atomic.wrappedValue.setter();
  swift_endAccess();
  *(void *)(v36 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_currentSegmentID) = *(void *)(*v39 + 16) - 1;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v61 = 0;
  swift_retain();
  static Published.subscript.setter();
  DataModel.beginNewOrbit()();
  if (v49)
  {
  }
  else
  {
    id v51 = v53;
    dispatch thunk of ObjectCaptureSession.run()();
  }
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  String.index(before:)();
  return String.subscript.getter();
}

void DataModel.createCloudViewRenderer()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode);
  if (v5 == 1)
  {
    uint64_t v13 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CoveragePointRenderer(0)), sel_init);
    swift_getKeyPath();
    swift_getKeyPath();
    v38[0] = v13;
    swift_retain();
    static Published.subscript.setter();
    uint64_t v14 = type metadata accessor for CoveragePointCloud();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v4, 1, 1, v14);
    id v15 = objc_allocWithZone((Class)type metadata accessor for FullscreenCoveragePointsRenderer(0));
    FullscreenCoveragePointsRenderer.init(pointCloud:)((uint64_t)v4);
    uint64_t v16 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_fullscreenCoveragePointsRenderer;
    uint64_t v17 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_fullscreenCoveragePointsRenderer);
    *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_fullscreenCoveragePointsRenderer) = v18;

    id v19 = *(void **)(v1 + v16);
    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = swift_retain();
      FullscreenCoveragePointsRenderer.setCameraFrustumRenderer(to:)(v21);

      swift_release();
    }
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)logger);
    swift_retain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 134217984;
      uint64_t v26 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_cameraPathManager)
          + OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_shots;
      swift_beginAccess();
      uint64_t v37 = *(void **)(*(void *)v26 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_2465C2000, v23, v24, "Creating camera path renderer with %ld shots...", v25, 0xCu);
      MEMORY[0x24C5348D0](v25, -1, -1);

      uint64_t v27 = *(void **)(v1 + v16);
      if (!v27) {
        return;
      }
    }
    else
    {

      swift_release();
      uint64_t v27 = *(void **)(v1 + v16);
      if (!v27) {
        return;
      }
    }
    uint64_t v37 = v27;
    id v35 = v27;
    closure #1 in DataModel.createCloudViewRenderer()((uint64_t *)&v37, v1);
  }
  else
  {
    if (v5 != 2)
    {
      __break(1u);
      goto LABEL_23;
    }
    uint64_t v6 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FreeformCloudRenderer()), sel_init);
    swift_getKeyPath();
    swift_getKeyPath();
    v38[0] = v6;
    swift_retain();
    static Published.subscript.setter();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v7 = (char *)v38[0];
    if (v38[0])
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)logger);
      swift_retain();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 134217984;
        uint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_cameraPathManager)
            + OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_shots;
        swift_beginAccess();
        v38[0] = *(id *)(*(void *)v12 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_2465C2000, v9, v10, "Creating camera path renderer with %ld shots...", v11, 0xCu);
        MEMORY[0x24C5348D0](v11, -1, -1);
      }
      else
      {

        swift_release();
      }
      uint64_t v28 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_metalDevice);
      if (v28)
      {
        unint64_t v29 = *(void **)&v7[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view];
        if (v29)
        {
          swift_unknownObjectRetain();
          id v30 = objc_msgSend(v29, sel_colorPixelFormat);
          uint64_t v31 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_cameraPathManager);
          specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DataModel.createCloudViewRenderer());
          long long v36 = v32;
          specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of DataModel.createCloudViewRenderer());
          LODWORD(v38[0]) = 990057071;
          long long v39 = v36;
          long long v40 = v33;
          uint64_t v41 = 0x3F0000003E4CCCCDLL;
          type metadata accessor for CameraPathRenderer();
          swift_allocObject();
          *(void *)&v7[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_cameraPathRenderer] = CameraPathRenderer.init(device:pixelFormat:cameraPathManager:descriptor:)(v28, (uint64_t)v30, v31, (uint64_t)v38);
          swift_release();
          uint64_t v34 = swift_retain();
          FreeformCloudRenderer.setCameraFrustumRenderer(to:)(v34);

          swift_release();
          return;
        }
        goto LABEL_24;
      }
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
    }
  }
}

uint64_t *closure #1 in DataModel.createCloudViewRenderer()(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_metalDevice);
  if (v3)
  {
    uint64_t v4 = v2;
    uint64_t v6 = *result;
    uint64_t v7 = *(void **)(*result + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_view);
    swift_unknownObjectRetain();
    id v8 = objc_msgSend(v7, sel_colorPixelFormat);
    uint64_t v9 = *(void **)(a2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_cameraPathManager);
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of closure #1 in DataModel.createCloudViewRenderer());
    long long v13 = v10;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of closure #1 in DataModel.createCloudViewRenderer());
    v14[0] = 990057071;
    long long v15 = v13;
    long long v16 = v11;
    uint64_t v17 = 0x3F0000003E4CCCCDLL;
    type metadata accessor for CameraPathRenderer();
    swift_allocObject();
    id v12 = CameraPathRenderer.init(device:pixelFormat:cameraPathManager:descriptor:)(v3, (uint64_t)v8, v9, (uint64_t)v14);
    if (v4)
    {

      id v12 = 0;
    }
    *(void *)(v6 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraPathRenderer) = v12;
    return (uint64_t *)swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void DataModel.startSessionInternal(imagesURL:)(uint64_t a1)
{
  uint64_t v2 = v1;
  v34[0] = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  id v8 = (char *)v34 - v7;
  uint64_t v9 = type metadata accessor for DataModel.State(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  id v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v34 - v13;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (void *)((char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v18 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x263F8F0E0], v15);
  char v19 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v16 + 8))(v18, v15);
  if (v19)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v20 = type metadata accessor for DataModel.Error(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v12, 1, 8, v20);
    char v21 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v14, (uint64_t)v12);
    outlined destroy of DataModel.Error((uint64_t)v12, type metadata accessor for DataModel.State);
    outlined destroy of DataModel.Error((uint64_t)v14, type metadata accessor for DataModel.State);
    if (v21)
    {
      if (*(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession))
      {
        uint64_t v22 = type metadata accessor for URL();
        uint64_t v23 = *(void *)(v22 - 8);
        (*(void (**)(char *, void, uint64_t))(v23 + 16))(v8, v34[0], v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v8, 0, 1, v22);
        outlined init with take of Animation?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for URL?);
        uint64_t v24 = v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imagesURL;
        swift_beginAccess();
        outlined assign with take of Cancellable?((uint64_t)v6, v24, &demangling cache variable for type metadata for URL?);
        swift_endAccess();
        uint64_t v25 = v34[5];
        DataModel.connectImageWriter()();
        if (v25) {
          return;
        }
        if (one-time initialization token for logger == -1) {
          goto LABEL_6;
        }
        goto LABEL_14;
      }
      lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
      swift_allocError();
      uint64_t v31 = v33;
      void *v33 = 0xD000000000000013;
      long long v32 = "No capture session!";
    }
    else
    {
      lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
      swift_allocError();
      uint64_t v31 = v30;
      *id v30 = 0xD000000000000036;
      long long v32 = "Cannot start session unless in the initializing state!";
    }
    v31[1] = (unint64_t)(v32 - 32) | 0x8000000000000000;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  __break(1u);
LABEL_14:
  swift_once();
LABEL_6:
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)logger);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v29 = 0;
    _os_log_impl(&dword_2465C2000, v27, v28, "Starting the initial segment and running the internal session...", v29, 2u);
    MEMORY[0x24C5348D0](v29, -1, -1);
  }

  DataModel.startNewSegment()();
}

void DataModel.startFrameProcessor()()
{
  uint64_t v2 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_2465C2000, v4, v5, "Starting the ARFrameProcessor!", v6, 2u);
    MEMORY[0x24C5348D0](v6, -1, -1);
  }

  DataModel.stopFrameProcessor()();
  if (!*(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_metalDevice))
  {
    __break(1u);
    goto LABEL_13;
  }
  type metadata accessor for ARFrameProcessor();
  swift_allocObject();
  uint64_t v7 = (void *)swift_unknownObjectRetain();
  uint64_t v8 = specialized ARFrameProcessor.init(device:)(v7);
  swift_unknownObjectRelease();
  if (v1) {
    return;
  }
  *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_arFrameProcessor) = v8;
  swift_release();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_2465C2000, v9, v10, "Subscribing to update events...", v11, 2u);
    MEMORY[0x24C5348D0](v11, -1, -1);
  }

  id v12 = *(void **)(v2 + 16);
  if (!v12)
  {
LABEL_13:
    __break(1u);
    return;
  }
  id v13 = v12;
  dispatch thunk of ARView.scene.getter();

  type metadata accessor for SceneEvents.Update();
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  swift_allocObject();
  swift_weakInit();
  Scene.subscribe<A>(to:on:_:)();
  swift_release();
  swift_release();
  outlined destroy of URL?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for EventSource?);
  outlined init with take of Animation?((uint64_t)v17, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  uint64_t v14 = v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_frameProcessorUpdateSubscription;
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)v15, v14, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  swift_endAccess();
}

void closure #1 in DataModel.startFrameProcessor()()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    uint64_t v2 = *(void **)(Strong + 16);
    if (v2
      && (id v3 = objc_msgSend(v2, sel_session),
          id v4 = objc_msgSend(v3, sel_currentFrame),
          v3,
          v4))
    {
      if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_arFrameProcessor))
      {
        swift_retain();
        os_log_type_t v5 = (__CVBuffer *)objc_msgSend(v4, sel_capturedImage);
        id v6 = ARFrameProcessor.computeYCbCrTexture(from:)(v5);

        uint64_t v7 = (__CVBuffer *)ARFrame.depthMap.getter();
        if (v7)
        {
          uint64_t v8 = v7;
          id v9 = ARFrameProcessor.computeTexture(from:planeIndex:format:)(v7, 0, MTLPixelFormatR32Float);
        }
        else
        {
          id v9 = 0;
        }
        FrameCache.push(arFrame:textureYCbCr:textureDepth:)(v4, (uint64_t)v6, (uint64_t)v9);
        swift_release();
        swift_release();

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t DataModel.stopFrameProcessor()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Stopping the ARFrameProcessor!", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  uint64_t v6 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_frameProcessorUpdateSubscription;
  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v6, (uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  if (*((void *)&v10 + 1))
  {
    outlined init with copy of Cancellable((uint64_t)&v9, (uint64_t)v8);
    outlined destroy of URL?((uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  }
  uint64_t v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v9, v6, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  swift_endAccess();
  *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_arFrameProcessor) = 0;
  return swift_release();
}

void DataModel.performStateTransition(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v127[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v138 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v137 = &v127[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v144 = type metadata accessor for DispatchTime();
  uint64_t v136 = *(void *)(v144 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v144);
  __n128 v134 = &v127[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v10);
  id v135 = &v127[-v12];
  uint64_t v133 = type metadata accessor for DispatchPredicate();
  uint64_t v132 = *(void *)(v133 - 8);
  MEMORY[0x270FA5388](v133);
  float32x4_t v131 = (uint64_t *)&v127[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DataModel.State?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  id v130 = &v127[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v15);
  double v145 = &v127[-v17];
  uint64_t v154 = type metadata accessor for DataModel.State(0);
  uint64_t v146 = *(void *)(v154 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v154);
  uint64_t v150 = &v127[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  id v152 = &v127[-v21];
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  float32x4_t v143 = &v127[-v23];
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  double v148 = &v127[-v25];
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  id v147 = &v127[-v27];
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  double v149 = &v127[-v29];
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  id v157 = &v127[-v31];
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v34 = &v127[-v33];
  MEMORY[0x270FA5388](v32);
  long long v36 = &v127[-v35];
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v38 = __swift_project_value_buffer(v37, (uint64_t)logger);
  outlined init with copy of DataModel.Error(a1, (uint64_t)v36, type metadata accessor for DataModel.State);
  uint64_t v156 = a2;
  outlined init with copy of DataModel.Error(a2, (uint64_t)v34, type metadata accessor for DataModel.State);
  uint64_t v153 = v38;
  long long v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  int v41 = v40;
  BOOL v42 = os_log_type_enabled(v39, v40);
  uint64_t v142 = v4;
  uint64_t v141 = v5;
  uint64_t v140 = v8;
  uint64_t v139 = v7;
  if (v42)
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v151 = a1;
    uint64_t v44 = v43;
    uint64_t v129 = swift_slowAlloc();
    aBlock[0] = v129;
    *(_DWORD *)uint64_t v44 = 136446466;
    int v128 = v41;
    unint64_t v45 = v157;
    outlined init with copy of DataModel.Error((uint64_t)v36, (uint64_t)v157, type metadata accessor for DataModel.State);
    uint64_t v46 = String.init<A>(describing:)();
    uint64_t v158 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of DataModel.Error((uint64_t)v36, type metadata accessor for DataModel.State);
    *(_WORD *)(v44 + 12) = 2082;
    outlined init with copy of DataModel.Error((uint64_t)v34, (uint64_t)v45, type metadata accessor for DataModel.State);
    uint64_t v48 = String.init<A>(describing:)();
    uint64_t v158 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of DataModel.Error((uint64_t)v34, type metadata accessor for DataModel.State);
    _os_log_impl(&dword_2465C2000, v39, (os_log_type_t)v128, "Switch State: %{public}s -> %{public}s", (uint8_t *)v44, 0x16u);
    uint64_t v50 = v129;
    swift_arrayDestroy();
    uint64_t v51 = v50;
    uint64_t v52 = v155;
    MEMORY[0x24C5348D0](v51, -1, -1);
    uint64_t v53 = v44;
    a1 = v151;
    MEMORY[0x24C5348D0](v53, -1, -1);
  }
  else
  {
    outlined destroy of DataModel.Error((uint64_t)v36, type metadata accessor for DataModel.State);
    outlined destroy of DataModel.Error((uint64_t)v34, type metadata accessor for DataModel.State);

    uint64_t v52 = v155;
  }
  uint64_t v54 = v52;
  uint64_t v55 = v52 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_previousState;
  swift_beginAccess();
  outlined assign with copy of CoveragePointCloud(a1, v55, type metadata accessor for DataModel.State);
  swift_endAccess();
  uint64_t v56 = v156;
  if (specialized static DataModel.State.== infix(_:_:)(a1, v156))
  {
    uint64_t v57 = v150;
    outlined init with copy of DataModel.Error(a1, (uint64_t)v150, type metadata accessor for DataModel.State);
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      aBlock[0] = v61;
      *(_DWORD *)uint64_t v60 = 136446210;
      outlined init with copy of DataModel.Error((uint64_t)v57, (uint64_t)v157, type metadata accessor for DataModel.State);
      uint64_t v62 = String.init<A>(describing:)();
      uint64_t v158 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of DataModel.Error((uint64_t)v57, type metadata accessor for DataModel.State);
      _os_log_impl(&dword_2465C2000, v58, v59, "switchState has same from and to states: %{public}s", v60, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v61, -1, -1);
      MEMORY[0x24C5348D0](v60, -1, -1);
    }
    else
    {
      outlined destroy of DataModel.Error((uint64_t)v57, type metadata accessor for DataModel.State);
    }

    return;
  }
  uint64_t v64 = v149;
  outlined init with copy of DataModel.Error(a1, (uint64_t)v149, type metadata accessor for DataModel.State);
  uint64_t v65 = type metadata accessor for DataModel.Error(0);
  uint64_t v66 = *(void *)(v65 - 8);
  uint64_t v150 = *(unsigned char **)(v66 + 48);
  int v67 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v150)(v64, 8, v65);
  uint64_t v68 = v157;
  if (v67 != 5)
  {
    if (v67 == 6)
    {
      if (!*(void *)(v54 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureBoxModel))
      {
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      swift_retain();
      CaptureModeBoxModel.disable()();
      swift_release();
      if (*(void *)(v54 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_soundManager))
      {
        SoundManager.stopLoop(playEndSound:)(0);
        SoundManager.requestStandby(after:)(2.0);
      }
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v66 + 56))(v68, 3, 8, v65);
      char v69 = specialized static DataModel.State.== infix(_:_:)(v56, (uint64_t)v68);
      outlined destroy of DataModel.Error((uint64_t)v68, type metadata accessor for DataModel.State);
      if (v69)
      {
        if (*(void *)(v54 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_rangefinderManager))
        {
          swift_retain();
          RangefinderManager.detach()();
          swift_release();
        }
      }
      else
      {
        DataModel.stopRangefinderIfNeeded()();
      }
    }
    else
    {
      outlined destroy of DataModel.Error((uint64_t)v64, type metadata accessor for DataModel.State);
    }
  }
  BOOL v70 = v147;
  outlined init with copy of DataModel.Error(v56, (uint64_t)v147, type metadata accessor for DataModel.State);
  int v71 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v150)(v70, 8, v65);
  outlined destroy of DataModel.Error((uint64_t)v70, type metadata accessor for DataModel.State);
  uint64_t v129 = v66;
  if (v71)
  {
    uint64_t v72 = a1;
    os_log_type_t v73 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v66 + 56);
    v73(v68, 3, 8, v65);
    uint64_t v151 = v72;
    LOBYTE(v72) = specialized static DataModel.State.== infix(_:_:)(v72, (uint64_t)v68);
    outlined destroy of DataModel.Error((uint64_t)v68, type metadata accessor for DataModel.State);
    uint64_t v74 = v54;
    if (v72)
    {
      uint64_t v75 = v54 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_stateBeforePause;
      swift_beginAccess();
      uint64_t v76 = v145;
      outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v75, (uint64_t)v145, (uint64_t *)&demangling cache variable for type metadata for DataModel.State?);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v146 + 48))(v76, 1, v154) == 1)
      {
        outlined destroy of URL?((uint64_t)v76, (uint64_t *)&demangling cache variable for type metadata for DataModel.State?);
      }
      else
      {
        BOOL v78 = v143;
        outlined init with take of DataModel.State((uint64_t)v76, (uint64_t)v143, type metadata accessor for DataModel.State);
        v73(v68, 4, 8, v65);
        char v79 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v78, (uint64_t)v68);
        outlined destroy of DataModel.Error((uint64_t)v68, type metadata accessor for DataModel.State);
        if (v79)
        {
          uint64_t v80 = Logger.logObject.getter();
          os_log_type_t v81 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v80, v81))
          {
            long long v82 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)long long v82 = 0;
            _os_log_impl(&dword_2465C2000, v80, v81, "Going to ready state after pause...", v82, 2u);
            uint64_t v83 = v82;
            uint64_t v68 = v157;
            MEMORY[0x24C5348D0](v83, -1, -1);
          }

          uint64_t v84 = (uint64_t)v130;
          (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v146 + 56))(v130, 1, 1, v154);
          swift_beginAccess();
          outlined assign with take of Cancellable?(v84, v75, (uint64_t *)&demangling cache variable for type metadata for DataModel.State?);
          swift_endAccess();
          v73(v68, 4, 8, v65);
          swift_getKeyPath();
          swift_getKeyPath();
          outlined init with copy of DataModel.Error((uint64_t)v157, (uint64_t)v148, type metadata accessor for DataModel.State);
          uint64_t v74 = v155;
          swift_retain();
          static Published.subscript.setter();
          os_log_type_t v77 = v157;
          outlined destroy of DataModel.Error((uint64_t)v157, type metadata accessor for DataModel.State);
          goto LABEL_32;
        }
        outlined destroy of DataModel.Error((uint64_t)v78, type metadata accessor for DataModel.State);
      }
    }
    outlined init with copy of DataModel.Error(v156, (uint64_t)v68, type metadata accessor for DataModel.State);
    swift_getKeyPath();
    swift_getKeyPath();
    outlined init with copy of DataModel.Error((uint64_t)v157, (uint64_t)v148, type metadata accessor for DataModel.State);
    swift_retain();
    os_log_type_t v77 = v157;
    static Published.subscript.setter();
    BOOL v78 = v77;
LABEL_32:
    a1 = v151;
    goto LABEL_33;
  }
  outlined init with copy of DataModel.Error(v56, (uint64_t)v68, type metadata accessor for DataModel.State);
  swift_getKeyPath();
  swift_getKeyPath();
  outlined init with copy of DataModel.Error((uint64_t)v157, (uint64_t)v148, type metadata accessor for DataModel.State);
  uint64_t v74 = v54;
  swift_retain();
  os_log_type_t v77 = v157;
  static Published.subscript.setter();
  BOOL v78 = v77;
LABEL_33:
  outlined destroy of DataModel.Error((uint64_t)v78, type metadata accessor for DataModel.State);
  swift_getKeyPath();
  swift_getKeyPath();
  CGAffineTransform v85 = v152;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v86 = &lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute;
  switch(((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v150)(v85, 8, v65))
  {
    case 0u:
      outlined destroy of DataModel.Error((uint64_t)v152, type metadata accessor for DataModel.State);
      goto LABEL_35;
    case 3u:
    case 8u:
LABEL_35:
      DataModel.removeGestureRecognizer()();
      goto LABEL_58;
    case 4u:
      swift_getKeyPath();
      swift_getKeyPath();
      LOBYTE(aBlock[0]) = 0;
      swift_retain();
      static Published.subscript.setter();
      *(void *)(v74 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_numUnsuccessfulDetects) = 0;
      uint64_t v87 = *(void *)(v74 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel);
      if (!v87) {
        goto LABEL_66;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      swift_retain();
      uint64_t v88 = static OS_dispatch_queue.main.getter();
      CGPoint v89 = v131;
      *float32x4_t v131 = v88;
      uint64_t v90 = v132;
      uint64_t v91 = v133;
      (*(void (**)(uint64_t *, void, uint64_t))(v132 + 104))(v89, *MEMORY[0x263F8F0E0], v133);
      char v92 = _dispatchPreconditionTest(_:)();
      (*(void (**)(uint64_t *, uint64_t))(v90 + 8))(v89, v91);
      if ((v92 & 1) == 0)
      {
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      DetectModeBoxModel.performSwitchStateTransitions(from:to:)(*(unsigned __int8 *)(v87 + 24), 0);
      *(unsigned char *)(v87 + 24) = 0;
      swift_release();
      swift_getKeyPath();
      swift_getKeyPath();
      LOBYTE(aBlock[0]) = 0;
      swift_retain();
      static Published.subscript.setter();
      swift_getKeyPath();
      swift_getKeyPath();
      LOBYTE(aBlock[0]) = 0;
      swift_retain();
      static Published.subscript.setter();
      DataModel.addGestureRecognizerIfNeeded()();
      uint64_t v93 = *(void *)(v74 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_postProcessRenderer);
      if (!v93)
      {
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        JUMPOUT(0x24664134CLL);
      }
      char v94 = 2;
LABEL_57:
      *(unsigned char *)(v93 + 132) = v94;
LABEL_58:
      id v123 = *(void **)(v74 + v86[176]);
      if (v123)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        id v124 = v123;
        static Published.subscript.getter();
        swift_release();
        swift_release();
        int v125 = LOBYTE(aBlock[0]);
        if (v125 != (dispatch thunk of ObjectCaptureSession.canTakeManualShot.getter() & 1))
        {
          char v126 = dispatch thunk of ObjectCaptureSession.canTakeManualShot.getter();
          swift_getKeyPath();
          swift_getKeyPath();
          LOBYTE(aBlock[0]) = v126 & 1;
          swift_retain();
          static Published.subscript.setter();
        }
      }
      return;
    case 5u:
      uint64_t v95 = Logger.logObject.getter();
      os_log_type_t v96 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v95, v96))
      {
        uint64_t v97 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v97 = 0;
        _os_log_impl(&dword_2465C2000, v95, v96, "Attaching detect box model to the scene...", v97, 2u);
        MEMORY[0x24C5348D0](v97, -1, -1);
      }

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v98 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v99 = v134;
      static DispatchTime.now()();
      uint64_t v100 = v135;
      MEMORY[0x24C533360](v99, 0.2);
      id v157 = *(unsigned char **)(v136 + 8);
      ((void (*)(unsigned char *, uint64_t))v157)(v99, v144);
      uint64_t v101 = swift_allocObject();
      swift_weakInit();
      aBlock[4] = (uint64_t)partial apply for closure #1 in DataModel.performStateTransition(from:to:);
      aBlock[5] = v101;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = (uint64_t)&block_descriptor_474;
      long long v102 = _Block_copy(aBlock);
      swift_release();
      float v103 = v137;
      static DispatchQoS.unspecified.getter();
      aBlock[0] = MEMORY[0x263F8EE78];
      lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      double v104 = v139;
      uint64_t v105 = v142;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x24C5337E0](v100, v103, v104, v102);
      _Block_release(v102);

      (*(void (**)(unsigned char *, uint64_t))(v141 + 8))(v104, v105);
      (*(void (**)(unsigned char *, uint64_t))(v138 + 8))(v103, v140);
      ((void (*)(unsigned char *, uint64_t))v157)(v100, v144);
      uint64_t v86 = &lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute;
      goto LABEL_58;
    case 6u:
      uint64_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v106, v107))
      {
        uint64_t v108 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v108 = 0;
        _os_log_impl(&dword_2465C2000, v106, v107, "Entering capturing mode...", v108, 2u);
        __n128 v109 = v108;
        os_log_type_t v77 = v157;
        MEMORY[0x24C5348D0](v109, -1, -1);
      }

      DataModel.addGestureRecognizerIfNeeded()();
      uint64_t v110 = v129;
      if (*(void *)(v74 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_soundManager))
      {
        SoundManager.start()();
        SoundManager.startLoop(playStartSound:)(1);
      }
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v110 + 56))(v77, 3, 8, v65);
      char v111 = specialized static DataModel.State.== infix(_:_:)(a1, (uint64_t)v77);
      outlined destroy of DataModel.Error((uint64_t)v77, type metadata accessor for DataModel.State);
      if (v111)
      {
        if (*(void *)(v74 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_rangefinderManager))
        {
          swift_retain();
          uint64_t v112 = swift_retain();
          specialized RangefinderManager.attach(attacher:)(v112);
          swift_release();
          swift_release();
        }
      }
      else
      {
        DataModel.startRangefinderIfNeeded()();
      }
      uint64_t v113 = v74;
      uint64_t v114 = *(void *)(v74 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_manualShotRefractoryTimer);
      double v115 = *(double *)(v113 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localTime);
      uint64_t v116 = v113;
      id v117 = *(void **)(v113 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
      double v118 = 1.0;
      if (v117)
      {
        id v119 = v117;
        double v120 = COERCE_DOUBLE(dispatch thunk of ObjectCaptureSession.captureCoolDownTime.getter());
        char v122 = v121;

        if ((v122 & 1) == 0)
        {
          double v118 = v120;
          if (v120 < 0.0) {
            goto LABEL_64;
          }
        }
      }
      *(double *)(v114 + 16) = v115 + v118;
      *(double *)(v114 + 24) = v115;
      uint64_t v93 = *(void *)(v116 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_postProcessRenderer);
      if (!v93) {
        goto LABEL_68;
      }
      uint64_t v74 = v116;
      char v94 = 1;
      goto LABEL_57;
    default:
      outlined destroy of DataModel.Error((uint64_t)v152, type metadata accessor for DataModel.State);
      goto LABEL_58;
  }
}

uint64_t closure #1 in DataModel.performStateTransition(from:to:)()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  id v3 = (uint64_t *)((char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_2465C2000, v5, v6, "Switching to detectBoxModel.state == .detecting...", v7, 2u);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = *(void *)(Strong + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel);
    swift_retain();
    uint64_t result = swift_release();
    if (v9)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      *id v3 = static OS_dispatch_queue.main.getter();
      (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F8F0E0], v0);
      char v11 = _dispatchPreconditionTest(_:)();
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
      if (v11)
      {
        DetectModeBoxModel.performSwitchStateTransitions(from:to:)(*(unsigned __int8 *)(v9 + 24), 1u);
        *(unsigned char *)(v9 + 24) = 1;
        swift_release();
        goto LABEL_9;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_9:
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    DataModel.addGestureRecognizerIfNeeded()();
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v12 = *(void *)(result + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_postProcessRenderer);
    swift_retain();
    uint64_t result = swift_release();
    if (v12)
    {
      *(unsigned char *)(v12 + 132) = 2;
      return swift_release();
    }
LABEL_17:
    __break(1u);
  }
  return result;
}

void DataModel.startRangefinderIfNeeded()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ARView.Environment.SceneUnderstanding.Options();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (inserted: Bool, memberAfterInsert: ARView.Environment.SceneUnderstanding.Options)?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) == 2)
  {
    uint64_t v9 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_rangefinderManager;
    if (!*(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_rangefinderManager))
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)logger);
      char v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl(&dword_2465C2000, v11, v12, "Starting rangefinder...", v13, 2u);
        MEMORY[0x24C5348D0](v13, -1, -1);
      }

      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DataModel.startRangefinderIfNeeded());
      uint64_t v51 = v14;
      long long v52 = xmmword_2466BA520;
      int v53 = 1036831949;
      uint64_t v15 = *(void **)(v1 + 16);
      id v16 = v15;
      *(void *)(v1 + v9) = specialized RangefinderManager.__allocating_init(from:using:)(&v51, v15);
      swift_release();
      if (*(void *)(v1 + v9))
      {
        swift_retain();
        uint64_t v17 = swift_retain();
        specialized RangefinderManager.attach(attacher:)(v17);
        swift_release();
        swift_release();
      }
      uint64_t v18 = (objc_class *)type metadata accessor for RangefinderObserver();
      id v19 = objc_allocWithZone(v18);
      swift_weakInit();
      swift_weakAssign();
      v50.receiver = v19;
      v50.super_class = v18;
      id v20 = objc_msgSendSuper2(&v50, sel_init);
      uint64_t v21 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_rangefinderObserver;
      uint64_t v22 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_rangefinderObserver);
      *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_rangefinderObserver) = v20;

      uint64_t v23 = *(void *)(v1 + v9);
      if (v23)
      {
        uint64_t v24 = &protocol witness table for RangefinderObserver;
        if (!*(void *)(v1 + v21)) {
          uint64_t v24 = 0;
        }
        *(void *)(v23 + 56) = v24;
        swift_unknownObjectWeakAssign();
      }
      uint64_t v25 = *(void **)(v1 + 16);
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (inserted: Bool, memberAfterInsert: ARView.Environment.SceneUnderstanding.Options));
      uint64_t v27 = v26;
      if (v25)
      {
        unint64_t v45 = &v8[*(int *)(v26 + 48)];
        id v28 = v25;
        static ARView.Environment.SceneUnderstanding.Options.collision.getter();
        uint64_t v46 = (void (*)(unsigned char *, void))dispatch thunk of ARView.environment.modify();
        uint64_t v44 = (void (*)(unsigned char *, void))ARView.Environment.sceneUnderstanding.modify();
        uint64_t v29 = (void (*)(unsigned char *, void))ARView.Environment.SceneUnderstanding.options.modify();
        char v30 = specialized OptionSet<>.insert(_:)(v45, (uint64_t)v5);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        v29(v47, 0);
        v44(v48, 0);
        v46(v49, 0);

        uint64_t v31 = 0;
        *uint64_t v8 = v30 & 1;
      }
      else
      {
        uint64_t v31 = 1;
      }
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v8, v31, 1, v27);
      outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for (inserted: Bool, memberAfterInsert: ARView.Environment.SceneUnderstanding.Options)?);
      int v32 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_shouldEstimateDynamicScanVolume);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.info.getter();
      BOOL v35 = os_log_type_enabled(v33, v34);
      if (v32 == 1)
      {
        if (v35)
        {
          long long v36 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v36 = 0;
          _os_log_impl(&dword_2465C2000, v33, v34, "Enabling dynamic scan volume estimator...", v36, 2u);
          MEMORY[0x24C5348D0](v36, -1, -1);
        }

        char v37 = specialized static ExperimentSettings.loadFreeformDynamicScanVolumeDebugDraw(default:)(0);
        char v38 = specialized static ExperimentSettings.loadFreeformDynamicScanVolumeBoxViz(default:)(0);
        type metadata accessor for DynamicScanVolumeEstimator();
        swift_allocObject();
        if (v37) {
          int v39 = 256;
        }
        else {
          int v39 = 0;
        }
        uint64_t v40 = DynamicScanVolumeEstimator.init(using:)(v39 & 0xFFFFFFFE | v38 & 1, 0.5, 0.1, 0.75);
        uint64_t v41 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_dynamicScanVolumeEstimator;
        *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_dynamicScanVolumeEstimator) = v40;
        swift_release();
        if (*(void *)(v1 + v41))
        {
          swift_retain();
          uint64_t v42 = swift_retain();
          specialized DynamicScanVolumeEstimator.attach(attacher:)(v42);
          swift_release();
          swift_release();
        }
      }
      else
      {
        if (v35)
        {
          uint64_t v43 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v43 = 0;
          _os_log_impl(&dword_2465C2000, v33, v34, "Not enabling dynamic scan volume estimator!", v43, 2u);
          MEMORY[0x24C5348D0](v43, -1, -1);
        }
      }
    }
  }
}

uint64_t DataModel.stopRangefinderIfNeeded()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ARView.Environment.SceneUnderstanding.Options();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v29 - v8;
  MEMORY[0x270FA5388](v7);
  char v11 = (char *)&v29 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ARView.Environment.SceneUnderstanding.Options?);
  uint64_t result = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) == 2)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)logger);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v19 = 0;
      _os_log_impl(&dword_2465C2000, v17, v18, "Stopping rangefinder...", v19, 2u);
      MEMORY[0x24C5348D0](v19, -1, -1);
    }

    id v20 = *(void **)(v1 + 16);
    if (v20)
    {
      id v21 = v20;
      static ARView.Environment.SceneUnderstanding.Options.collision.getter();
      id v32 = v21;
      uint64_t v31 = (void (*)(unsigned char *, void))dispatch thunk of ARView.environment.modify();
      char v30 = (void (*)(unsigned char *, void))ARView.Environment.sceneUnderstanding.modify();
      uint64_t v29 = (void (*)(unsigned char *, void))ARView.Environment.SceneUnderstanding.options.modify();
      (*(void (**)(char *))(v3 + 16))(v6);
      lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options, MEMORY[0x263F168D0]);
      dispatch thunk of SetAlgebra.intersection(_:)();
      if (dispatch thunk of SetAlgebra.isEmpty.getter())
      {
        uint64_t v22 = *(void (**)(char *, uint64_t))(v3 + 8);
        v22(v9, v2);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v15, 1, 1, v2);
      }
      else
      {
        dispatch thunk of SetAlgebra.subtract(_:)();
        (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v15, v9, v2);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
        uint64_t v22 = *(void (**)(char *, uint64_t))(v3 + 8);
      }
      v22(v11, v2);
      outlined destroy of URL?((uint64_t)v15, &demangling cache variable for type metadata for ARView.Environment.SceneUnderstanding.Options?);
      v29(v33, 0);
      v30(v34, 0);
      v31(v35, 0);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v15, 1, 1, v2);
      outlined destroy of URL?((uint64_t)v15, &demangling cache variable for type metadata for ARView.Environment.SceneUnderstanding.Options?);
    }
    uint64_t v23 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_rangefinderManager;
    if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_rangefinderManager))
    {
      swift_retain();
      RangefinderManager.detach()();
      swift_release();
      uint64_t v24 = *(void *)(v1 + v23);
      if (v24)
      {
        *(void *)(v24 + 56) = 0;
        swift_unknownObjectWeakAssign();
      }
    }
    uint64_t v25 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_rangefinderObserver);
    *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_rangefinderObserver) = 0;

    *(void *)(v1 + v23) = 0;
    swift_release();
    uint64_t v26 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_dynamicScanVolumeEstimator;
    uint64_t v27 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_dynamicScanVolumeEstimator);
    if (v27)
    {
      int v28 = *(unsigned __int8 *)(v27 + 17);
      swift_retain();
      if (v28 == 1)
      {
        DynamicScanVolumeEstimator.debugEllipsoidEntity.getter();
        type metadata accessor for Entity();
        HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
        swift_release();
        DynamicScanVolumeEstimator.debugRootEntity.getter();
        HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
        swift_release();
      }
      DynamicScanVolumeEstimator.boxEntity.getter();
      type metadata accessor for Entity();
      HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
      swift_release();
      swift_release();
    }
    *(void *)(v1 + v26) = 0;
    return swift_release();
  }
  return result;
}

void DataModel.update(deltaTime:)(double a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localTime;
  *(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localTime) = *(double *)(v1
                                                                                          + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localTime)
                                                                              + a1;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode))
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) == 1) {
      DataModel.onSceneEventUpdateInObjectMode()();
    }
    else {
      DataModel.onSceneEventUpdateInFreeformMode()();
    }
  }
  if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_postProcessRenderer))
  {
    uint64_t v4 = *(void **)(v1 + 16);
    if (v4)
    {
      swift_retain();
      id v5 = objc_msgSend(v4, sel_window);
      if (v5)
      {
        uint64_t v6 = v5;
        id v7 = objc_msgSend(v5, sel_windowScene);

        if (v7)
        {
          objc_msgSend(v7, sel_interfaceOrientation);
        }
      }
    }
    else
    {
      swift_retain();
    }
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<UIInterfaceOrientation>);
    Atomic.wrappedValue.setter();
    swift_endAccess();
    swift_release();
    if (*(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_soundManager)) {
      SoundManager.update(t:)(*(Swift::Double *)(v2 + v3));
    }
    uint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
    if (v8)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      id v9 = v8;
      static Published.subscript.getter();
      swift_release();
      swift_release();
      if (v10 != (dispatch thunk of ObjectCaptureSession.canTakeManualShot.getter() & 1))
      {
        dispatch thunk of ObjectCaptureSession.canTakeManualShot.getter();
        swift_getKeyPath();
        swift_getKeyPath();
        swift_retain();
        static Published.subscript.setter();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void DataModel.onSceneEventUpdateInObjectMode()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DataModel.State(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  id v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  id v7 = (char *)&v19 - v6;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v8 = type metadata accessor for DataModel.Error(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 6, 8, v8);
  char v9 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v7, (uint64_t)v5);
  outlined destroy of DataModel.Error((uint64_t)v5, type metadata accessor for DataModel.State);
  outlined destroy of DataModel.Error((uint64_t)v7, type metadata accessor for DataModel.State);
  if (v9)
  {
    specialized DataModel.updateReticleAimSystem(at:)();
    char v10 = *(void **)(v1 + 16);
    if (v10 && *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_deviceMotionEstimator))
    {
      double v11 = *(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localTime);
      id v12 = v10;
      swift_retain();
      dispatch thunk of ARView.cameraTransform.getter();
      __n128 v20 = v14;
      long long v21 = v13;
      __n128 v19 = v15;
      DataModel.getBoxCenterWorld()();
      DeviceMotionEstimator.update(time:pose:orbit:)(v16, v17, 0, v11, *(double *)&v21, v20, v19);
      swift_release();
    }
    if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_soundManager))
    {
      float v18 = DataModel.userControlScore.getter();
      SoundManager.updateGoodnessScore(_:)(v18);
    }
  }
}

void DataModel.onSceneEventUpdateInFreeformMode()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DataModel.State(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  id v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  id v7 = (char *)&v20 - v6;
  uint64_t v8 = *(void **)(v1 + 16);
  if (v8)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v9 = v8;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v10 = type metadata accessor for DataModel.Error(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 6, 8, v10);
    char v11 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v7, (uint64_t)v5);
    outlined destroy of DataModel.Error((uint64_t)v5, type metadata accessor for DataModel.State);
    outlined destroy of DataModel.Error((uint64_t)v7, type metadata accessor for DataModel.State);
    if (v11)
    {
      uint64_t v12 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_deviceMotionEstimator;
      if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_deviceMotionEstimator))
      {
        double v13 = *(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localTime);
        swift_retain();
        dispatch thunk of ARView.cameraTransform.getter();
        DeviceMotionEstimator.update(time:pose:orbit:)(0, 0, 1, v13, v14, v15, v16);
        swift_release();
      }
      if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_soundManager))
      {
        uint64_t v17 = *(void *)(v1 + v12);
        if (v17)
        {
          float v18 = *(float *)(v17 + 136);
          Swift::Float v19 = 0.3;
          if (v18 > 0.3)
          {
            Swift::Float v19 = 1.0;
            if (v18 <= 1.0) {
              Swift::Float v19 = *(float *)(v17 + 136);
            }
          }
        }
        else
        {
          Swift::Float v19 = 1.0;
        }
        SoundManager.updateGoodnessScore(_:)(v19);
      }
      DataModel.updateDynamicScanVolume(in:at:)((uint64_t)v9, *(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localTime));
    }
  }
}

uint64_t DataModel.updateDynamicScanVolume(in:at:)(uint64_t a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ARCamera.TrackingState?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ARCamera.TrackingState();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  double v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v11);
  __n128 v16 = (char *)&v29 - v15;
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_shouldEstimateDynamicScanVolume) == 1)
  {
    uint64_t v17 = v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_lastCameraFeedback;
    swift_beginAccess();
    outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v17, (uint64_t)v8, &demangling cache variable for type metadata for ARCamera.TrackingState?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      return outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for ARCamera.TrackingState?);
    }
    else
    {
      outlined init with take of DataModel.State((uint64_t)v8, (uint64_t)v16, MEMORY[0x263F8C968]);
      float v18 = (uint64_t (*)(void))MEMORY[0x263F8C968];
      outlined init with copy of DataModel.Error((uint64_t)v16, (uint64_t)v13, MEMORY[0x263F8C968]);
      uint64_t v19 = type metadata accessor for ARCamera.TrackingState.Reason();
      int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v13, 2, v19);
      outlined destroy of DataModel.Error((uint64_t)v13, v18);
      if (v20 != 2) {
        return outlined destroy of DataModel.Error((uint64_t)v16, MEMORY[0x263F8C968]);
      }
      uint64_t v21 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_lastDynamicVolumeUpdateTime;
      if (a2 - *(double *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_lastDynamicVolumeUpdateTime) <= 0.1) {
        return outlined destroy of DataModel.Error((uint64_t)v16, MEMORY[0x263F8C968]);
      }
      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DataModel.updateDynamicScanVolume(in:at:));
      uint64_t v23 = specialized static DynamicScanVolumeEstimator.performSphereRaycast(clipSpacePoint:withinRange:radiusPerMeter:in:collisionPolicy:)(v22, 0.25, 2.0, a1, 2u);
      if ((v25 & 0x100000000) != 0)
      {
        return outlined destroy of DataModel.Error((uint64_t)v16, MEMORY[0x263F8C968]);
      }
      else
      {
        if (*(void *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_dynamicScanVolumeEstimator))
        {
          int v26 = v25;
          v27.n128_u64[0] = v23;
          v27.n128_u64[1] = v24;
          __n128 v29 = v27;
          swift_retain();
          LODWORD(v28) = v26;
          DynamicScanVolumeEstimator.addSphere(sphere:mass:time:)(v29, v28, 0.1, a2);
          swift_release();
        }
        uint64_t result = outlined destroy of DataModel.Error((uint64_t)v16, MEMORY[0x263F8C968]);
        *(double *)(v3 + v21) = a2;
      }
    }
  }
  return result;
}

uint64_t DataModel.getBoxCenterWorld()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<CoveragePointCloud>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CoveragePointCloud();
  uint64_t result = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) == 1)
  {
    uint64_t v9 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__latestCoveragePointCloud;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v9, v1);
    Atomic.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    *(double *)&long long v10 = CoveragePointCloud.bboxWorld.getter();
    v14[0] = v10;
    v14[1] = v11;
    _OWORD v14[2] = v12;
    v14[3] = v13;
    outlined destroy of DataModel.Error((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
    return specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DataModel.getBoxCenterWorld());
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DataModel.updateLatestCoveragePointCloud(pointCloud:pose:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v48 = a1;
  unint64_t v49 = (void (*)(char *, uint64_t))a2;
  uint64_t v47 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<CoveragePointCloud>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CoveragePointCloud();
  uint64_t v9 = v8 - 8;
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  long long v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v41 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v46 = (char *)&v41 - v16;
  uint64_t v42 = v3;
  uint64_t v17 = v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__latestCoveragePointCloud;
  uint64_t v44 = v17;
  swift_beginAccess();
  objc_super v50 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v50(v7, v17, v4);
  uint64_t v43 = v4;
  Atomic.wrappedValue.getter();
  float v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v45 = v5 + 8;
  v18(v7, v4);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v15, (uint64_t)v21, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  uint64_t v22 = (uint64_t)&v15[*(int *)(v9 + 28)];
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v25 = (char *)&v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v22, (uint64_t)v25, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  uint64_t v26 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v12, 1, 1, v26);
  uint64_t v27 = *(int *)(v9 + 28);
  double v28 = v18;
  __n128 v29 = &v12[v27];
  uint64_t v30 = type metadata accessor for ObjectCaptureSession.Frame.Object();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
  outlined assign with take of Cancellable?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  uint64_t v31 = (uint64_t)v29;
  uint64_t v32 = v43;
  uint64_t v33 = v44;
  uint64_t v34 = (uint64_t)v46;
  outlined assign with take of Cancellable?((uint64_t)v25, v31, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
  outlined init with take of DataModel.State((uint64_t)v12, v34, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF6CoreOC20ObjectCaptureSessionC5FrameV10PointCloudV_s5NeverOytTg5033_s19_RealityKit_SwiftUI18Coverageij26V7updated05pointG04poseAC6c4OC20efg2C5H27V0fG0VSg_AK0M0VSgtFyAMXEfU_01_mn1_O2UI0qiJ0VTf1cn_n(v48, v34);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF6CoreOC20ObjectCaptureSessionC5FrameV0E0V_s5NeverOytTg5069_s19_RealityKit_SwiftUI18CoveragePointCloudV7updated05pointG04poseAC6c4OC20efg2C5H28V0fG0VSg_AK0M0VSgtFyAPXEfU0_01_kl1_M2UI0opQ0VTf1cn_n((uint64_t)v49, v34);
  outlined destroy of DataModel.Error((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  Swift::Bool v35 = CoveragePointCloud.isValid()();
  long long v36 = v50;
  if (!v35) {
    goto LABEL_6;
  }
  unint64_t v49 = v28;
  outlined init with copy of DataModel.Error(v34, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  swift_beginAccess();
  Atomic.wrappedValue.setter();
  swift_endAccess();
  unint64_t v37 = *(void *)(v42 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_currentSegmentID);
  char v38 = (unint64_t *)(v42 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_pointCloudsBySegment);
  swift_beginAccess();
  unint64_t v39 = *v38;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *char v38 = v39;
  if (result)
  {
    if ((v37 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v39);
  unint64_t v39 = result;
  *char v38 = result;
  if ((v37 & 0x8000000000000000) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v37 < *(void *)(v39 + 16))
  {
    outlined assign with copy of CoveragePointCloud(v34, v39+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v37, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
    swift_endAccess();
    double v28 = v49;
    long long v36 = v50;
LABEL_6:
    v36(v7, v33, v32);
    Atomic.wrappedValue.getter();
    v28(v7, v32);
    return outlined destroy of DataModel.Error(v34, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
  }
LABEL_9:
  __break(1u);
  return result;
}

void DataModel.onFrameUpdate(frame:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ARCamera.TrackingState();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (void *)((char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t *v10 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F8F0E0], v7);
  char v11 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode))
    {
      if (*(unsigned char *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) == 1) {
        DataModel.onFrameUpdateInObjectMode(frame:)(a1);
      }
      else {
        DataModel.onFrameUpdateInFreeformMode(frame:)();
      }
    }
    uint64_t v12 = type metadata accessor for ObjectCaptureSession.Frame.Feedback();
    void v24[2] = v24;
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = MEMORY[0x270FA5388](v12);
    uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x270FA5388](v14);
    float v18 = (char *)v24 - v17;
    ObjectCaptureSession.Frame.feedback.getter();
    DataModel.filterFrameFeedback(feedback:)((uint64_t)v18, (uint64_t)v16);
    uint64_t v19 = *(void (**)(char *, uint64_t))(v13 + 8);
    v19(v18, v12);
    uint64_t v20 = type metadata accessor for ObjectCaptureSession.Frame.Camera();
    v24[1] = v24;
    uint64_t v21 = *(void *)(v20 - 8);
    MEMORY[0x270FA5388](v20);
    uint64_t v23 = (char *)v24 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    ObjectCaptureSession.Frame.camera.getter();
    ObjectCaptureSession.Frame.Camera.trackingState.getter();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    DataModel.updateFeedback(frameFeedback:arCameraFeedback:)((uint64_t)v16, (uint64_t)v6);
    outlined destroy of DataModel.Error((uint64_t)v6, MEMORY[0x263F8C968]);
    v19(v16, v12);
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v25 == 1) {
      DataModel.updateDebugState(frame:)();
    }
  }
  else
  {
    __break(1u);
  }
}

void DataModel.onFrameUpdateInObjectMode(frame:)(unint64_t a1)
{
  v157.n128_u64[0] = a1;
  uint64_t v1 = type metadata accessor for DataModel.State(0);
  uint64_t v2 = MEMORY[0x270FA5388](v1 - 8);
  uint64_t v4 = (char *)&v141 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v2);
  v156.n128_u64[0] = (unint64_t)&v141 - v6;
  MEMORY[0x270FA5388](v5);
  v155.n128_u64[0] = (unint64_t)&v141 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<CoveragePointCloud>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v141 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CoveragePointCloud();
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v141 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  *(void *)&long long v145 = (char *)&v141 - v16;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (uint64_t *)((char *)&v141 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v150 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v20 = static OS_dispatch_queue.main.getter();
  uint64_t v21 = *(void (**)(void))(v18 + 104);
  unsigned int v148 = *MEMORY[0x263F8F0E0];
  uint64_t v149 = v18 + 104;
  id v147 = (void (*)(uint64_t *, void, uint64_t))v21;
  v21(v20);
  char v22 = _dispatchPreconditionTest(_:)();
  uint64_t v24 = *(void (**)(uint64_t *, uint64_t))(v18 + 8);
  unint64_t v23 = v18 + 8;
  uint64_t v151 = v20;
  v153.i64[0] = v17;
  unint64_t v152 = v23;
  uint64_t v146 = v24;
  v24(v20, v17);
  if ((v22 & 1) == 0)
  {
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  v154.n128_u64[0] = (unint64_t)v4;
  char v25 = *(void **)(v159 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  uint64_t v158 = v15;
  if (v25)
  {
    uint64_t v26 = type metadata accessor for ObjectCaptureSession.State();
    *(void *)&long long v143 = &v141;
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = *(void *)(v27 + 64);
    MEMORY[0x270FA5388](v26);
    *(void *)&long long v144 = v25;
    uint64_t v29 = dispatch thunk of ObjectCaptureSession.state.getter();
    MEMORY[0x270FA5388](v29);
    uint64_t v30 = (char *)&v141 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, void, uint64_t))(v27 + 104))(v30, *MEMORY[0x263F368E0], v26);
    lazy protocol witness table accessor for type ObjectCaptureSession.Frame.Feedback and conformance ObjectCaptureSession.Frame.Feedback(&lazy protocol witness table cache variable for type ObjectCaptureSession.State and conformance ObjectCaptureSession.State, MEMORY[0x270FB2688]);
    char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v32 = *(void (**)(char *, uint64_t))(v27 + 8);
    v32(v30, v26);
    v32(v30, v26);
    if (v31)
    {
    }
    else
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
      MEMORY[0x270FA5388](v33 - 8);
      Swift::Bool v35 = (char *)&v141 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
      ObjectCaptureSession.Frame.pointCloud.getter();
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
      MEMORY[0x270FA5388](v36 - 8);
      char v38 = (char *)&v141 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
      ObjectCaptureSession.Frame.object.getter();
      uint64_t v39 = v145;
      DataModel.updateLatestCoveragePointCloud(pointCloud:pose:)((uint64_t)v35, (uint64_t)v38, v145);

      outlined destroy of URL?((uint64_t)v38, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
      outlined destroy of URL?((uint64_t)v35, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
      outlined destroy of DataModel.Error(v39, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
    }
  }
  uint64_t v40 = v159 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__latestCoveragePointCloud;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v40, v8);
  Atomic.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v41 = v155.n128_u64[0];
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v8 = type metadata accessor for DataModel.Error(0);
  uint64_t v17 = *(void *)(v8 - 8);
  uint64_t v42 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
  uint64_t v43 = v156.n128_u64[0];
  v42(v156.n128_u64[0], 5, 8, v8);
  LOBYTE(v40) = specialized static DataModel.State.== infix(_:_:)(v41, v43);
  outlined destroy of DataModel.Error(v43, type metadata accessor for DataModel.State);
  outlined destroy of DataModel.Error(v41, type metadata accessor for DataModel.State);
  if (v40)
  {
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
    MEMORY[0x270FA5388](v44 - 8);
    uint64_t v46 = (char *)&v141 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
    ObjectCaptureSession.Frame.object.getter();
    uint64_t v47 = type metadata accessor for ObjectCaptureSession.Frame.Object();
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47) == 1)
    {
      outlined destroy of URL?((uint64_t)v46, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
    }
    else
    {
      ObjectCaptureSession.Frame.Object.boundingBox.getter();
      __n128 v156 = v61;
      __n128 v155 = v62;
      long long v145 = v63;
      long long v144 = v64;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v46, v47);
      if (!*(void *)(v159 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel)) {
        goto LABEL_104;
      }
      uint64_t v65 = (simd_float4x4 *)swift_retain();
      DetectModeBoxModel.onDetectedBoundingBox(box:)(v65);
      swift_release();
    }
    unint64_t v23 = (unint64_t)v158;
    goto LABEL_21;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v42(v43, 6, 8, v8);
  char v49 = specialized static DataModel.State.== infix(_:_:)(v41, v43);
  outlined destroy of DataModel.Error(v43, type metadata accessor for DataModel.State);
  outlined destroy of DataModel.Error(v41, type metadata accessor for DataModel.State);
  unint64_t v23 = (unint64_t)v158;
  if ((v49 & 1) == 0) {
    goto LABEL_21;
  }
  if (!CoveragePointCloud.isValid()())
  {
    if (one-time initialization token for logger == -1) {
      goto LABEL_18;
    }
    goto LABEL_91;
  }
  uint64_t v50 = *(void *)(v159 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureBoxModel);
  if (v50)
  {
    swift_retain();
    v51.n128_f64[0] = CoveragePointCloud.bboxWorld.getter();
    __n128 v156 = v51;
    __n128 v155 = v52;
    long long v145 = v53;
    long long v144 = v54;
    uint64_t v55 = static OS_dispatch_queue.main.getter();
    uint64_t v56 = v151;
    *uint64_t v151 = v55;
    uint64_t v57 = v153.i64[0];
    v147(v56, v148, v153.i64[0]);
    char v58 = _dispatchPreconditionTest(_:)();
    v146(v56, v57);
    if ((v58 & 1) == 0) {
      goto LABEL_90;
    }
    __n128 v59 = v155;
    *(__n128 *)(v50 + 144) = v156;
    *(__n128 *)(v50 + 160) = v59;
    long long v60 = v144;
    *(_OWORD *)(v50 + 176) = v145;
    *(_OWORD *)(v50 + 192) = v60;
    *(unsigned char *)(v50 + 208) = 0;
    CaptureModeBoxModel.updateCurrentEntityTransform()();
    swift_release();
    while (1)
    {
LABEL_21:
      DataModel.getCurrentlySelectedBoundingBox()((uint64_t)v162);
      outlined init with take of Animation?((uint64_t)v162, (uint64_t)v163, &demangling cache variable for type metadata for simd_float4x4?);
      if ((v164 & 1) == 0)
      {
        BOOL v70 = *(void **)(v159 + 16);
        if (!v70)
        {
          __break(1u);
LABEL_101:
          __break(1u);
          goto LABEL_102;
        }
        __n128 v156 = (__n128)v163[3];
        __n128 v155 = (__n128)v163[2];
        long long v145 = v163[1];
        long long v144 = v163[0];
        id v71 = v70;
        dispatch thunk of ARView.cameraTransform.getter();
        long long v143 = v72;
        float32x4_t v142 = v73;
        long long v141 = v74;

        *(double *)v165.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v141, v142);
        __invert_f4(v165);
        float v75 = specialized static MathHelpers.computeClippingPlanes(boxWorld:worldToCamera:flipZ:)(1);
        uint64_t v77 = *(void *)(v159 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_postProcessRenderer);
        if (!v77) {
          goto LABEL_101;
        }
        float v78 = v75;
        float v79 = v76;
        float v80 = *(float *)(v159 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_depthHazeStartPercent);
        swift_retain();
        uint64_t v81 = static OS_dispatch_queue.main.getter();
        long long v82 = v151;
        *uint64_t v151 = v81;
        uint64_t v83 = v153.i64[0];
        v147(v82, v148, v153.i64[0]);
        char v84 = _dispatchPreconditionTest(_:)();
        v146(v82, v83);
        if ((v84 & 1) == 0)
        {
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
        *(float *)(v77 + 120) = v78 + (float)(v80 * (float)(v79 - v78));
        *(float *)(v77 + 124) = v79;
        swift_release();
      }
      if (!CoveragePointCloud.isValid()()) {
        goto LABEL_38;
      }
      double v85 = DataModel.getDeviceOrientationCorrectedReticleAimVector()();
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      id v86 = v161;

      if (v86)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        id v87 = v161;
        if (v161)
        {
          uint64_t v88 = *(void **)(v159 + 16);
          if (v88)
          {
            uint64_t v89 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localTime;
            uint64_t v90 = v159;
            Swift::Double v91 = *(double *)(v159 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localTime);
            id v92 = v88;
            dispatch thunk of ARView.cameraTransform.getter();
            __n128 v156 = v93;
            __n128 v155 = v94;
            float32x4_t v153 = v95;

            uint64_t v96 = *(void *)(v90 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureCircle);
            uint64_t v97 = *(void *)(v90 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_deviceMotionEstimator);
            if (v97)
            {
              float v98 = *(float *)(v97 + 136);
              float v99 = 0.3;
              if (v98 > 0.3)
              {
                if (v98 <= 1.0) {
                  float v99 = *(float *)(v97 + 136);
                }
                else {
                  float v99 = 1.0;
                }
              }
            }
            else
            {
              float v99 = 1.0;
            }
            swift_retain();
            CoveragePointRenderer.update(time:arCameraTransform:coveragePointCloud:captureCircle:reticleDeltaVector:motionScore:)(v23, v96, v91, (float32x4_t)v156, (float32x4_t)v155, v153, v85, v99);

            swift_release();
            uint64_t v100 = *(char **)(v159 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_fullscreenCoveragePointsRenderer);
            if (v100)
            {
              *(void *)&v100[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_localTime] = *(void *)(v159 + v89);
              uint64_t v101 = v100;
              FullscreenCoveragePointsRenderer.updateInternal()();
            }
LABEL_38:
            swift_getKeyPath();
            swift_getKeyPath();
            uint64_t v102 = v154.n128_u64[0];
            static Published.subscript.getter();
            swift_release();
            swift_release();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v102, 8, v8) != 6)
            {
              outlined destroy of DataModel.Error(v23, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
              uint64_t v108 = type metadata accessor for DataModel.State;
              uint64_t v109 = v102;
              goto LABEL_84;
            }
            outlined destroy of DataModel.Error(v102, type metadata accessor for DataModel.State);
            uint64_t v17 = *(void *)(v159 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureCircle);
            if (!v17)
            {
              uint64_t v108 = (uint64_t (*)(void))type metadata accessor for CoveragePointCloud;
              uint64_t v109 = v23;
              goto LABEL_84;
            }
            uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
            MEMORY[0x270FA5388](v103 - 8);
            uint64_t v105 = (char *)&v141 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
            swift_retain();
            ObjectCaptureSession.Frame.object.getter();
            uint64_t v106 = type metadata accessor for ObjectCaptureSession.Frame.Object();
            uint64_t v107 = *(void *)(v106 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106) == 1)
            {
              swift_release();
              outlined destroy of URL?((uint64_t)v105, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.Object?);
              uint64_t v108 = (uint64_t (*)(void))type metadata accessor for CoveragePointCloud;
              uint64_t v109 = (uint64_t)v158;
LABEL_84:
              outlined destroy of DataModel.Error(v109, v108);
              return;
            }
            ObjectCaptureSession.Frame.Object.boundingBox.getter();
            __n128 v157 = v110;
            __n128 v156 = v111;
            __n128 v155 = v112;
            __n128 v154 = v113;
            (*(void (**)(char *, uint64_t))(v107 + 8))(v105, v106);
            uint64_t v114 = *(void **)(v159 + 16);
            if (!v114) {
              goto LABEL_105;
            }
            double v115 = *(double *)(v159 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localTime);
            id v116 = v114;
            CaptureCircle.update(arView:boundingBoxWorld:time:)(v157, v156, v155, v154, v115);

            id v117 = (uint64_t *)(v17 + 72);
            if (*(unsigned char *)(v17 + 24) == 1)
            {
              swift_beginAccess();
              uint64_t v118 = *v117;
              if ((unint64_t)*v117 >> 62)
              {
                swift_bridgeObjectRetain_n();
                uint64_t v119 = _CocoaArrayWrapper.endIndex.getter();
                if (v119) {
                  goto LABEL_48;
                }
              }
              else
              {
                uint64_t v119 = *(void *)((v118 & 0xFFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain_n();
                if (v119)
                {
LABEL_48:
                  unint64_t v23 = v118 & 0xC000000000000001;
                  uint64_t v120 = 4;
                  do
                  {
                    uint64_t v121 = v120 - 4;
                    if (v23)
                    {
                      uint64_t v122 = MEMORY[0x24C533AF0](v120 - 4, v118);
                      BOOL v123 = __OFADD__(v121, 1);
                      uint64_t v124 = v120 - 3;
                      if (v123) {
                        goto LABEL_86;
                      }
                    }
                    else
                    {
                      uint64_t v122 = swift_retain();
                      BOOL v123 = __OFADD__(v121, 1);
                      uint64_t v124 = v120 - 3;
                      if (v123) {
                        goto LABEL_86;
                      }
                    }
                    int v125 = *(unsigned __int8 *)(v122 + 36);
                    swift_release();
                    if (v125 != 1) {
                      goto LABEL_82;
                    }
                    ++v120;
                  }
                  while (v124 != v119);
                }
              }
              swift_bridgeObjectRelease_n();
              if (*(unsigned char *)(v17 + 88)) {
                goto LABEL_107;
              }
              unint64_t v126 = *(void *)(v17 + 80);
              uint64_t v127 = *v117;
              uint64_t v128 = (uint64_t)v158;
              if ((*v117 & 0xC000000000000001) == 0)
              {
                if ((v126 & 0x8000000000000000) != 0)
                {
                  __break(1u);
                }
                else if (v126 < *(void *)((v127 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  uint64_t v129 = *(void *)(v127 + 8 * v126 + 32);
                  swift_retain();
                  goto LABEL_61;
                }
                __break(1u);
LABEL_99:
                swift_once();
LABEL_79:
                uint64_t v137 = type metadata accessor for Logger();
                __swift_project_value_buffer(v137, (uint64_t)logger);
                uint64_t v138 = Logger.logObject.getter();
                os_log_type_t v139 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v138, v139))
                {
                  uint64_t v140 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v140 = 0;
                  _os_log_impl(&dword_2465C2000, v138, v139, ">> Capture Dial is fully closed, setting userCompletedSegmentCaptureCircle to true!", v140, 2u);
                  MEMORY[0x24C5348D0](v140, -1, -1);
                }

                swift_getKeyPath();
                swift_getKeyPath();
                char v160 = 1;
                swift_retain();
                static Published.subscript.setter();
                goto LABEL_83;
              }
              swift_bridgeObjectRetain();
              uint64_t v129 = MEMORY[0x24C533AF0](v126, v127);
              swift_bridgeObjectRelease();
LABEL_61:
              uint64_t v130 = *(void *)(v129 + 48);
              swift_release();
              if (v130 <= 1) {
                goto LABEL_83;
              }
LABEL_74:
              if (CaptureCircle.isAnimationFinished.getter())
              {
                swift_getKeyPath();
                swift_getKeyPath();
                static Published.subscript.getter();
                swift_release();
                swift_release();
                if ((v160 & 1) == 0)
                {
                  if (*(void *)(v159 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_soundManager)) {
                    SoundManager.playCompletionSound(volume:)(1.0);
                  }
                  if (one-time initialization token for logger != -1) {
                    goto LABEL_99;
                  }
                  goto LABEL_79;
                }
              }
LABEL_83:
              swift_release();
              uint64_t v108 = (uint64_t (*)(void))type metadata accessor for CoveragePointCloud;
              uint64_t v109 = v128;
              goto LABEL_84;
            }
            swift_beginAccess();
            uint64_t v131 = *v117;
            if ((unint64_t)*v117 >> 62)
            {
              swift_bridgeObjectRetain_n();
              uint64_t v132 = _CocoaArrayWrapper.endIndex.getter();
              if (v132) {
                goto LABEL_65;
              }
            }
            else
            {
              uint64_t v132 = *(void *)((v131 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain_n();
              if (v132)
              {
LABEL_65:
                unint64_t v23 = 4;
                while (1)
                {
                  unint64_t v133 = v23 - 4;
                  if ((v131 & 0xC000000000000001) != 0)
                  {
                    uint64_t v134 = MEMORY[0x24C533AF0](v23 - 4, v131);
                    BOOL v123 = __OFADD__(v133, 1);
                    unint64_t v135 = v23 - 3;
                    if (v123) {
                      goto LABEL_87;
                    }
                  }
                  else
                  {
                    uint64_t v134 = swift_retain();
                    BOOL v123 = __OFADD__(v133, 1);
                    unint64_t v135 = v23 - 3;
                    if (v123) {
                      goto LABEL_87;
                    }
                  }
                  int v136 = *(unsigned __int8 *)(v134 + 36);
                  swift_release();
                  if (v136 != 1) {
                    break;
                  }
                  ++v23;
                  if (v135 == v132) {
                    goto LABEL_73;
                  }
                }
LABEL_82:
                swift_bridgeObjectRelease_n();
                uint64_t v128 = (uint64_t)v158;
                goto LABEL_83;
              }
            }
LABEL_73:
            swift_bridgeObjectRelease_n();
            uint64_t v128 = (uint64_t)v158;
            goto LABEL_74;
          }
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
          break;
        }
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      swift_once();
LABEL_18:
      uint64_t v66 = type metadata accessor for Logger();
      __swift_project_value_buffer(v66, (uint64_t)logger);
      int v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v67, v68))
      {
        char v69 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v69 = 0;
        _os_log_impl(&dword_2465C2000, v67, v68, "Invalid capturePointCloud!  Not updating box...", v69, 2u);
        MEMORY[0x24C5348D0](v69, -1, -1);
      }
    }
  }
  __break(1u);
LABEL_107:
  __break(1u);
}

void DataModel.startFreeformPulseIfNeeded(at:)(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (void *)((char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t *v7 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F8F0E0], v4);
  char v8 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) != 2) {
    return;
  }
  uint64_t v2 = *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_meshManager);
  if (v2)
  {
    uint64_t v9 = one-time initialization token for logger;
    swift_retain();
    if (v9 == -1)
    {
LABEL_5:
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)logger);
      char v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 134217984;
        *(double *)&v19[1] = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_2465C2000, v11, v12, "Starting a new area cloud pulse animation at %f ... advancing the mesh manager state.", v13, 0xCu);
        MEMORY[0x24C5348D0](v13, -1, -1);
      }

      uint64_t v14 = (os_unfair_lock_s *)(*(void *)(v2 + 72) + 16);
      os_unfair_lock_lock(v14);
      FreeformMeshManager.advanceWithRemoval()();
      os_unfair_lock_unlock(v14);
      swift_release();
      return;
    }
LABEL_15:
    swift_once();
    goto LABEL_5;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)logger);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_2465C2000, v16, v17, "Expected to start a new area cloud pulse animation, but mesh manager wasn't found!", v18, 2u);
    MEMORY[0x24C5348D0](v18, -1, -1);
  }
}

void DataModel.computeFreeformBoundingBoxWorld()(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_meshManager);
  if (v3 && (uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_dynamicScanVolumeEstimator)) != 0)
  {
    int v5 = *(unsigned __int8 *)(v4 + 18);
    swift_retain();
    swift_retain();
    if (v5 == 1) {
      DataModel.computeGravityAlignedBoxWorld()(&v54);
    }
    else {
      DataModel.computeAxisAlignedBoxWorld()((uint64_t)&v54);
    }
    double v6 = v56;
    uint64_t v7 = v57;
    if (v58)
    {
      float32x4_t v46 = v55;
      __n128 v50 = v54;
      swift_release();
      swift_release();
      float32x4_t v10 = v46;
      __n128 v8 = v50;
      char v9 = 1;
    }
    else
    {
      float32x4_t v47 = v55;
      __n128 v51 = v54;
      if (*(unsigned char *)(v3 + 64))
      {
        swift_release();
        swift_release();
        float32x4_t v10 = v47;
        __n128 v8 = v51;
        char v9 = 0;
      }
      else
      {
        float v11 = *(float *)(v3 + 36);
        double v35 = v56;
        *(double *)v12.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(v56, v55);
        float32x4_t v38 = v12;
        float32x4_t v39 = v13;
        float32x4_t v41 = v14;
        float32x4_t v43 = v15;
        specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DataModel.computeFreeformBoundingBoxWorld());
        float64x2_t v36 = v16;
        float v18 = v17;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_2466B5DF0;
        *(float32x2_t *)(inited + 32) = vcvt_f32_f64(v36);
        *(float *)(inited + 40) = v18;
        *(_DWORD *)(inited + 44) = 1065353216;
        specialized SIMD.init<A>(_:)(inited);
        float32x4_t v37 = v20;
        swift_setDeallocating();
        float32x4_t v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, v37.f32[0]), v39, *(float32x2_t *)v37.f32, 1), v41, v37, 2), v43, v37, 3);
        if (v21.f32[1] >= v11)
        {
          swift_release();
          swift_release();
          char v9 = 0;
          float32x4_t v10 = v47;
          __n128 v8 = v51;
        }
        else
        {
          float v22 = v11 - v21.f32[1];
          double v23 = specialized simd_float4x4.init(translation:rotation:scale:)(v35, v47);
          double v48 = v24;
          double v52 = v23;
          double v42 = v26;
          double v44 = v25;
          specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of DataModel.computeFreeformBoundingBoxWorld());
          specialized static BoundingBoxHelpers.stretchedBoundingBox(box:axis:delta:)(v52, v48, v44, v42, v27, -v22);
          specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of DataModel.computeFreeformBoundingBoxWorld());
          float64x2_t v40 = v28;
          float v30 = v29;
          uint64_t v31 = swift_initStackObject();
          *(_OWORD *)(v31 + 16) = xmmword_2466B5DF0;
          *(float32x2_t *)(v31 + 32) = vcvt_f32_f64(v40);
          *(float *)(v31 + 40) = v30;
          *(_DWORD *)(v31 + 44) = 1065353216;
          specialized SIMD.init<A>(_:)(v31);
          swift_setDeallocating();
          Transform.init(matrix:)();
          float32x4_t v49 = v33;
          __n128 v53 = v32;
          long long v45 = v34;
          swift_release();
          swift_release();
          float32x4_t v10 = v49;
          __n128 v8 = v53;
          char v9 = 0;
          uint64_t v7 = *((void *)&v45 + 1);
          double v6 = *(double *)&v45;
        }
      }
    }
  }
  else
  {
    double v6 = 0.0;
    uint64_t v7 = 0;
    __n128 v8 = 0uLL;
    char v9 = 1;
    float32x4_t v10 = 0uLL;
  }
  *(__n128 *)a1 = v8;
  *(float32x4_t *)(a1 + 16) = v10;
  *(double *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = v9;
}

uint64_t DataModel.computeAxisAlignedBoxWorld()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(float32x2_t **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_meshManager);
  long long v4 = 0uLL;
  if (v3)
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_shouldEstimateDynamicScanVolume) == 1)
    {
      uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_dynamicScanVolumeEstimator);
      if (v5 && (*(unsigned char *)(v5 + 160) & 1) == 0)
      {
        swift_retain();
        Ellipsoid.computeAABB()();
LABEL_9:
        specialized static BoundingBoxHelpers.asSRTMatrix(box:)(v6, v7);
        Transform.init(matrix:)();
        long long v17 = v12;
        long long v19 = v11;
        long long v15 = v13;
        uint64_t result = swift_release();
        long long v10 = v15;
        long long v9 = v17;
        long long v4 = v19;
        char v8 = 0;
        goto LABEL_10;
      }
    }
    else if ((v3[8].i8[0] & 1) == 0)
    {
      float32x2_t v18 = v3[4];
      float32x2_t v16 = v3[6];
      swift_retain();
      float32x2_t v7 = v16;
      float32x2_t v6 = v18;
      goto LABEL_9;
    }
  }
  char v8 = 1;
  long long v9 = 0uLL;
  long long v10 = 0uLL;
LABEL_10:
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 48) = v8;
  return result;
}

void DataModel.computeGravityAlignedBoxWorld()(__n128 *a1@<X8>)
{
  uint64_t v3 = *(float32x2_t **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_meshManager);
  __n128 v4 = 0uLL;
  if (v3)
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_shouldEstimateDynamicScanVolume) == 1)
    {
      uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_dynamicScanVolumeEstimator);
      if (v5 && (*(unsigned char *)(v5 + 160) & 1) == 0)
      {
        __n128 v4 = Ellipsoid.gravityAlignedBox.getter();
LABEL_9:
        char v8 = 0;
        goto LABEL_10;
      }
    }
    else if ((v3[8].i8[0] & 1) == 0)
    {
      float32x2_t v15 = v3[4];
      float32x2_t v13 = v3[6];
      swift_retain();
      specialized static BoundingBoxHelpers.asSRTMatrix(box:)(v15, v13);
      Transform.init(matrix:)();
      __n128 v14 = v10;
      __n128 v16 = v9;
      __n128 v12 = v11;
      swift_release();
      __n128 v7 = v12;
      __n128 v6 = v14;
      __n128 v4 = v16;
      goto LABEL_9;
    }
  }
  char v8 = 1;
  __n128 v6 = 0uLL;
  __n128 v7 = 0uLL;
LABEL_10:
  *a1 = v4;
  a1[1] = v6;
  a1[2] = v7;
  a1[3].n128_u8[0] = v8;
}

void DataModel.onFrameUpdateInFreeformMode(frame:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v5 = static OS_dispatch_queue.main.getter();
  uint64_t v7 = *MEMORY[0x263F8F0E0];
  char v8 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 104);
  v8(v5, v7, v2);
  char v9 = _dispatchPreconditionTest(_:)();
  __n128 v10 = *(void (**)(uint64_t *, uint64_t))(v3 + 8);
  v10(v5, v2);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) != 2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  *(void *)&long long v70 = v8;
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_meshManager);
  if (!v11) {
    return;
  }
  swift_retain();
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_bridgeObjectRelease();
  DataModel.computeFreeformBoundingBoxWorld()((uint64_t)v71);
  outlined init with take of Animation?((uint64_t)v71, (uint64_t)v72, &demangling cache variable for type metadata for Transform?);
  if ((v75 & 1) == 0)
  {
    *(double *)v12.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v74, v73);
    float32x4_t v66 = v12;
    float32x4_t v65 = v13;
    float32x4_t v64 = v14;
    float32x4_t v63 = v15;
    specialized static BoundingBoxHelpers.paddedBoundingBox(box:scale:padBottomFace:)(0, v12, v13, v14, v15, 1.25);
    Transform.init(matrix:)();
    long long v69 = v16;
    float32x4_t v68 = v17;
    long long v67 = v18;
    swift_beginAccess();
    BOOL v19 = *(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_shouldEstimateDynamicScanVolume) == 1;
    uint64_t v58 = *(void *)(v11 + 16);
    if (v19 && (float32x4_t v20 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession)) != 0)
    {
      swift_bridgeObjectRetain();
      id v21 = v20;
      dispatch thunk of ObjectCaptureSession.updateFreeformScanVolume(boundingBox:)();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t v62 = v6;
    *(double *)v22.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v67, v68);
    float32x4_t v66 = v22;
    float32x4_t v65 = v23;
    float32x4_t v64 = v24;
    float32x4_t v63 = v25;
    double v26 = *(void **)(v1 + 16);
    if (!v26) {
      goto LABEL_29;
    }
    id v27 = v26;
    dispatch thunk of ARView.cameraTransform.getter();
    long long v61 = v28;
    float32x4_t v60 = v29;
    long long v59 = v30;

    *(double *)v78.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v59, v60);
    __invert_f4(v78);
    float v31 = specialized static MathHelpers.computeClippingPlanes(boxWorld:worldToCamera:flipZ:)(1);
    uint64_t v33 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_postProcessRenderer);
    if (!v33)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    float v34 = v31;
    float v35 = v32;
    float v36 = *(float *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_depthHazeStartPercent);
    swift_retain();
    *uint64_t v5 = static OS_dispatch_queue.main.getter();
    ((void (*)(uint64_t *, uint64_t, uint64_t))v70)(v5, v7, v2);
    char v37 = _dispatchPreconditionTest(_:)();
    v10(v5, v2);
    if (v37)
    {
      *(float *)(v33 + 120) = v34 + (float)(v36 * (float)(v35 - v34));
      *(float *)(v33 + 124) = v35;
      swift_release();
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v38 = *(void *)&v76[0];

      if (v38)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        float32x4_t v39 = *(void **)&v76[0];
        if (*(void *)&v76[0])
        {
          Swift::Double v40 = *(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localTime);
          *(double *)&long long v41 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v67, v68);
          long long v70 = v41;
          long long v69 = v42;
          float32x4_t v68 = v43;
          long long v67 = v44;
          long long v45 = *(void **)(v1 + 16);
          if (v45)
          {
            id v46 = v45;
            dispatch thunk of ARView.cameraTransform.getter();
            float32x4_t v66 = v47;
            float32x4_t v65 = v48;
            float32x4_t v64 = v49;

            uint64_t v50 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_deviceMotionEstimator);
            if (v50)
            {
              float v51 = *(float *)(v50 + 136);
              float v52 = 0.3;
              long long v53 = v70;
              long long v54 = v69;
              float32x4_t v55 = v68;
              long long v56 = v67;
              if (v51 > 0.3)
              {
                if (v51 <= 1.0) {
                  float v52 = *(float *)(v50 + 136);
                }
                else {
                  float v52 = 1.0;
                }
              }
            }
            else
            {
              float v52 = 1.0;
              long long v53 = v70;
              long long v54 = v69;
              float32x4_t v55 = v68;
              long long v56 = v67;
            }
            v76[0] = v53;
            v76[1] = v54;
            v76[2] = v55;
            v76[3] = v56;
            char v77 = 0;
            FreeformCloudRenderer.update(time:boundingBoxWorld:meshAnchors:arCameraTransform:motionScore:lastShotTime:pulseAnimationDuration:)((uint64_t)v76, v58, v40, v66, v65, v64, v52, *(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_lastShotTime), *(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_sphericalPulseDuration));

            swift_bridgeObjectRelease();
            goto LABEL_23;
          }
LABEL_32:
          __break(1u);
          return;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      goto LABEL_28;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_23:
  swift_release();
}

uint64_t DataModel.updateFeedback(frameFeedback:arCameraFeedback:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ARCamera.TrackingState?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v148 = (uint64_t)&v141 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v147 = (uint64_t)&v141 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v145 = (uint64_t)&v141 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v154 = (uint64_t)&v141 - v12;
  uint64_t v165 = type metadata accessor for ARCamera.TrackingState();
  uint64_t v158 = *(void *)(v165 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v165);
  uint64_t v142 = (uint64_t)&v141 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v144 = (uint64_t)&v141 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v143 = (uint64_t)&v141 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  unint64_t v152 = (char *)&v141 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v149 = (uint64_t)&v141 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  char v160 = (char *)&v141 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v161 = (uint64_t)&v141 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v153 = (uint64_t)&v141 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v159 = (uint64_t)&v141 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v146 = (uint64_t)&v141 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v155 = (uint64_t)&v141 - v34;
  MEMORY[0x270FA5388](v33);
  uint64_t v168 = (uint64_t)&v141 - v35;
  uint64_t v36 = type metadata accessor for DataModel.State(0);
  uint64_t v37 = MEMORY[0x270FA5388](v36 - 8);
  uint64_t v151 = (uint64_t)&v141 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v157 = (uint64_t)&v141 - v40;
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  float32x4_t v43 = (char *)&v141 - v42;
  MEMORY[0x270FA5388](v41);
  uint64_t v169 = v2;
  uint64_t v170 = (void (**)(char *, uint64_t, uint64_t))((char *)&v141 - v44);
  long long v45 = *(void (**)(uint64_t, uint64_t))(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_onFeedback);
  if (v45)
  {
    swift_retain();
    v45(a1, a2);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?((uint64_t)v45);
  }
  uint64_t v166 = a2;
  uint64_t v167 = a1;
  uint64_t v46 = type metadata accessor for ObjectCaptureSession.Frame.Feedback();
  float32x4_t v47 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v46 - 8);
  MEMORY[0x270FA5388](v46);
  float32x4_t v49 = (char *)&v141 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Feedback?);
  MEMORY[0x270FA5388](v50 - 8);
  uint64_t v162 = v51;
  float v52 = (char *)&v141 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v169;
  uint64_t v54 = v169 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_lastFeedback;
  swift_beginAccess();
  uint64_t v163 = v54;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v54, (uint64_t)v52, (uint64_t *)&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Feedback?);
  int v55 = v47[6](v52, 1, v46);
  uint64_t v164 = v46;
  if (v55 == 1)
  {
    outlined destroy of URL?((uint64_t)v52, (uint64_t *)&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Feedback?);
  }
  else
  {
    v47[4](v49, (uint64_t)v52, v46);
    DataModel.updateAutoCaptureState(oldFeedback:newFeedback:)((uint64_t)v49, v167);
    ((void (*)(char *, uint64_t))v47[1])(v49, v46);
  }
  uint64_t v56 = v166;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v57 = (uint64_t)v170;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v58 = type metadata accessor for DataModel.Error(0);
  long long v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56);
  uint64_t v150 = v58;
  __n128 v156 = v59;
  ((void (*)(char *, uint64_t, uint64_t))v59)(v43, 3, 8);
  char v60 = specialized static DataModel.State.== infix(_:_:)(v57, (uint64_t)v43);
  outlined destroy of DataModel.Error((uint64_t)v43, type metadata accessor for DataModel.State);
  outlined destroy of DataModel.Error(v57, type metadata accessor for DataModel.State);
  uint64_t v61 = v168;
  outlined init with copy of DataModel.Error(v56, v168, MEMORY[0x263F8C968]);
  uint64_t v62 = v165;
  if (v60)
  {
    outlined destroy of DataModel.Error(v61, MEMORY[0x263F8C968]);
    goto LABEL_21;
  }
  uint64_t v63 = v53 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_lastCameraFeedback;
  swift_beginAccess();
  uint64_t v64 = v154;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v63, v154, &demangling cache variable for type metadata for ARCamera.TrackingState?);
  float32x4_t v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 48);
  int v66 = v65(v64, 1, v62);
  uint64_t v67 = v64;
  uint64_t v68 = v168;
  outlined destroy of URL?(v67, &demangling cache variable for type metadata for ARCamera.TrackingState?);
  uint64_t v69 = v155;
  outlined init with copy of DataModel.Error(v68, v155, MEMORY[0x263F8C968]);
  uint64_t v141 = v63;
  if (v66 == 1)
  {
    long long v70 = (uint64_t (*)(void))MEMORY[0x263F8C968];
    outlined destroy of DataModel.Error(v69, MEMORY[0x263F8C968]);
    outlined destroy of DataModel.Error(v68, v70);
    uint64_t v53 = v169;
    uint64_t v56 = v166;
LABEL_12:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)logger);
    simd_float4x4 v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.default.getter();
    BOOL v80 = os_log_type_enabled(v78, v79);
    uint64_t v81 = v141;
    if (v80)
    {
      uint64_t v82 = v62;
      uint64_t v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v83 = 0;
      _os_log_impl(&dword_2465C2000, v78, v79, "ARCamera feedback changed! Poking the overlay...", v83, 2u);
      char v84 = v83;
      uint64_t v62 = v82;
      MEMORY[0x24C5348D0](v84, -1, -1);
    }

    double v85 = (uint64_t (*)(void))MEMORY[0x263F8C968];
    uint64_t v86 = v146;
    outlined init with copy of DataModel.Error(v56, v146, MEMORY[0x263F8C968]);
    uint64_t v87 = type metadata accessor for ARCamera.TrackingState.Reason();
    int v88 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 48))(v86, 2, v87);
    outlined destroy of DataModel.Error(v86, v85);
    uint64_t v89 = *(void **)(v53 + 24);
    if (v89) {
      objc_msgSend(v89, sel_setActive_animated_, v88 != 2, 1);
    }
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v172) = v88 != 2;
    swift_retain();
    static Published.subscript.setter();
    if (*(void *)(v53 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel))
    {
      swift_retain();
      DetectModeBoxModel.setVisible(_:)(v88 == 2);
      swift_release();
    }
    uint64_t v90 = v147;
    outlined init with copy of DataModel.Error(v56, v147, MEMORY[0x263F8C968]);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v158 + 56))(v90, 0, 1, v62);
    uint64_t v91 = v90;
    uint64_t v92 = v148;
    outlined init with take of Animation?(v91, v148, &demangling cache variable for type metadata for ARCamera.TrackingState?);
    swift_beginAccess();
    outlined assign with take of Cancellable?(v92, v81, &demangling cache variable for type metadata for ARCamera.TrackingState?);
    swift_endAccess();
    uint64_t v57 = (uint64_t)v170;
LABEL_21:
    uint64_t v170 = (void (**)(char *, uint64_t, uint64_t))v47;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    int v93 = v172;
    uint64_t v94 = v159;
    outlined init with copy of DataModel.Error(v56, v159, MEMORY[0x263F8C968]);
    if (v93 == 1)
    {
      float32x4_t v95 = (uint64_t (*)(void))MEMORY[0x263F8C968];
      uint64_t v96 = v153;
      outlined init with copy of DataModel.Error(v94, v153, MEMORY[0x263F8C968]);
      uint64_t v97 = type metadata accessor for ARCamera.TrackingState.Reason();
      int v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 48))(v96, 2, v97);
      outlined destroy of DataModel.Error(v96, v95);
      outlined destroy of DataModel.Error(v94, v95);
      uint64_t v99 = v161;
      outlined init with copy of DataModel.Error(v56, v161, v95);
      uint64_t v100 = (uint64_t)v160;
      uint64_t v101 = v156;
      if (v98 != 2)
      {
        outlined destroy of DataModel.Error(v99, MEMORY[0x263F8C968]);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v102 = (uint64_t (*)(void))MEMORY[0x263F8C968];
      outlined destroy of DataModel.Error(v94, MEMORY[0x263F8C968]);
      uint64_t v99 = v161;
      outlined init with copy of DataModel.Error(v56, v161, v102);
      uint64_t v100 = (uint64_t)v160;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    char v103 = v172;
    outlined init with copy of DataModel.Error(v99, v100, MEMORY[0x263F8C968]);
    if (v103)
    {
      uint64_t v104 = (uint64_t (*)(void))MEMORY[0x263F8C968];
      outlined destroy of DataModel.Error(v100, MEMORY[0x263F8C968]);
      uint64_t v105 = outlined destroy of DataModel.Error(v99, v104);
    }
    else
    {
      uint64_t v106 = (uint64_t (*)(void))MEMORY[0x263F8C968];
      uint64_t v107 = v149;
      outlined init with copy of DataModel.Error(v100, v149, MEMORY[0x263F8C968]);
      uint64_t v108 = type metadata accessor for ARCamera.TrackingState.Reason();
      int v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 48))(v107, 2, v108);
      uint64_t v110 = v107;
      uint64_t v101 = v156;
      outlined destroy of DataModel.Error(v110, v106);
      outlined destroy of DataModel.Error(v100, v106);
      uint64_t v105 = outlined destroy of DataModel.Error(v99, v106);
      if (v109 == 2)
      {
LABEL_28:
        swift_getKeyPath();
        swift_getKeyPath();
        uint64_t v111 = v157;
        static Published.subscript.getter();
        swift_release();
        swift_release();
        uint64_t v112 = v150;
        v101(v57, 6, 8, v150);
        char v113 = specialized static DataModel.State.== infix(_:_:)(v111, v57);
        outlined destroy of DataModel.Error(v57, type metadata accessor for DataModel.State);
        uint64_t v114 = v111;
        uint64_t v115 = v151;
        outlined init with copy of DataModel.Error(v114, v151, type metadata accessor for DataModel.State);
        if (v113)
        {
          outlined destroy of DataModel.Error(v115, type metadata accessor for DataModel.State);
          uint64_t v116 = (uint64_t)v152;
        }
        else
        {
          v101(v57, 4, 8, v112);
          char v117 = specialized static DataModel.State.== infix(_:_:)(v115, v57);
          outlined destroy of DataModel.Error(v57, type metadata accessor for DataModel.State);
          outlined destroy of DataModel.Error(v115, type metadata accessor for DataModel.State);
          uint64_t v116 = (uint64_t)v152;
          if ((v117 & 1) == 0)
          {
            outlined destroy of DataModel.Error(v157, type metadata accessor for DataModel.State);
            outlined init with copy of DataModel.Error(v56, v116, MEMORY[0x263F8C968]);
            goto LABEL_34;
          }
        }
        int v118 = *(unsigned __int8 *)(v53 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode);
        outlined destroy of DataModel.Error(v157, type metadata accessor for DataModel.State);
        outlined init with copy of DataModel.Error(v56, v116, MEMORY[0x263F8C968]);
        if (v118 != 2)
        {
          uint64_t v119 = (uint64_t (*)(void))MEMORY[0x263F8C968];
          uint64_t v120 = v143;
          outlined init with copy of DataModel.Error(v116, v143, MEMORY[0x263F8C968]);
          uint64_t v121 = type metadata accessor for ARCamera.TrackingState.Reason();
          int v122 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 48))(v120, 2, v121) == 2;
          outlined destroy of DataModel.Error(v120, v119);
          goto LABEL_35;
        }
LABEL_34:
        int v122 = 0;
LABEL_35:
        outlined destroy of DataModel.Error(v116, MEMORY[0x263F8C968]);
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        uint64_t v105 = swift_release();
        if (v122 != v172)
        {
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v123 = type metadata accessor for Logger();
          __swift_project_value_buffer(v123, (uint64_t)logger);
          uint64_t v124 = v56;
          uint64_t v125 = v144;
          outlined init with copy of DataModel.Error(v124, v144, MEMORY[0x263F8C968]);
          unint64_t v126 = Logger.logObject.getter();
          os_log_type_t v127 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v126, v127))
          {
            uint64_t v128 = swift_slowAlloc();
            uint64_t v129 = swift_slowAlloc();
            uint64_t v172 = v129;
            *(_DWORD *)uint64_t v128 = 67240450;
            LODWORD(v171) = v122;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v128 + 8) = 2082;
            uint64_t v130 = (uint64_t (*)(void))MEMORY[0x263F8C968];
            outlined init with copy of DataModel.Error(v125, v142, MEMORY[0x263F8C968]);
            uint64_t v131 = String.init<A>(describing:)();
            uint64_t v171 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v131, v132, &v172);
            uint64_t v53 = v169;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            outlined destroy of DataModel.Error(v125, v130);
            _os_log_impl(&dword_2465C2000, v126, v127, "Changing showCenterReticle to %{BOOL,public}d based on the ARCamera tracking state: %{public}s", (uint8_t *)v128, 0x12u);
            swift_arrayDestroy();
            MEMORY[0x24C5348D0](v129, -1, -1);
            MEMORY[0x24C5348D0](v128, -1, -1);
          }
          else
          {
            outlined destroy of DataModel.Error(v125, MEMORY[0x263F8C968]);
          }

          MEMORY[0x270FA5388](v133);
          *(&v141 - 2) = v53;
          *((unsigned char *)&v141 - 8) = v122;
          static Animation.default.getter();
          withAnimation<A>(_:_:)();
          uint64_t v105 = swift_release();
        }
      }
    }
    uint64_t v134 = v162;
    MEMORY[0x270FA5388](v105);
    unint64_t v135 = (char *)&v141 - ((v134 + 15) & 0xFFFFFFFFFFFFFFF0);
    int v136 = v170;
    uint64_t v137 = v164;
    v170[2](v135, v167, v164);
    uint64_t v138 = ((uint64_t (*)(char *, void, uint64_t, uint64_t))v136[7])(v135, 0, 1, v137);
    MEMORY[0x270FA5388](v138);
    uint64_t v139 = (uint64_t)v135;
    outlined init with take of Animation?((uint64_t)v135, (uint64_t)v135, (uint64_t *)&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Feedback?);
    uint64_t v140 = v163;
    swift_beginAccess();
    outlined assign with take of Cancellable?(v139, v140, (uint64_t *)&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Feedback?);
    return swift_endAccess();
  }
  uint64_t v71 = v145;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v63, v145, &demangling cache variable for type metadata for ARCamera.TrackingState?);
  uint64_t result = v65(v71, 1, v62);
  if (result != 1)
  {
    uint64_t v73 = v155;
    uint64_t v74 = v71;
    char v75 = static ARCamera.TrackingState.== infix(_:_:)();
    float v76 = (uint64_t (*)(void))MEMORY[0x263F8C968];
    outlined destroy of DataModel.Error(v73, MEMORY[0x263F8C968]);
    outlined destroy of DataModel.Error(v68, v76);
    outlined destroy of DataModel.Error(v74, v76);
    uint64_t v53 = v169;
    uint64_t v57 = (uint64_t)v170;
    uint64_t v56 = v166;
    if (v75) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

void DataModel.updateAutoCaptureState(oldFeedback:newFeedback:)(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a2;
  uint64_t v3 = type metadata accessor for ObjectCaptureSession.Frame.Feedback();
  uint64_t v4 = *(void **)(v3 - 8);
  uint64_t v5 = v4[8];
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  static ObjectCaptureSession.Frame.Feedback.tooFast.getter();
  uint64_t v7 = lazy protocol witness table accessor for type ObjectCaptureSession.Frame.Feedback and conformance ObjectCaptureSession.Frame.Feedback(&lazy protocol witness table cache variable for type ObjectCaptureSession.Frame.Feedback and conformance ObjectCaptureSession.Frame.Feedback, MEMORY[0x270FB2658]);
  uint64_t v22 = a1;
  char v8 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v9 = (uint64_t (*)(char *, uint64_t))v4[1];
  uint64_t v10 = v9((char *)v20 - v6, v3);
  MEMORY[0x270FA5388](v10);
  uint64_t v21 = (uint64_t (*)(char *, uint64_t, uint64_t))v4[2];
  uint64_t v11 = v21((char *)v20 - v6, v23, v3);
  if (v8)
  {
    v20[0] = v20;
    MEMORY[0x270FA5388](v11);
    static ObjectCaptureSession.Frame.Feedback.tooFast.getter();
    char v12 = dispatch thunk of SetAlgebra.isSuperset(of:)();
    v9((char *)v20 - v6, v3);
    uint64_t v13 = v9((char *)v20 - v6, v3);
    uint64_t v14 = v7;
    if ((v12 & 1) == 0) {
      DataModel.resumeAutoCapture()();
    }
  }
  else
  {
    uint64_t v13 = v9((char *)v20 - v6, v3);
    uint64_t v14 = v7;
  }
  v20[1] = v14;
  MEMORY[0x270FA5388](v13);
  unint64_t v15 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  static ObjectCaptureSession.Frame.Feedback.tooFast.getter();
  char v16 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v17 = v9((char *)v20 - v15, v3);
  MEMORY[0x270FA5388](v17);
  uint64_t v18 = v21((char *)v20 - v15, v23, v3);
  if (v16)
  {
    v9((char *)v20 - v15, v3);
  }
  else
  {
    MEMORY[0x270FA5388](v18);
    static ObjectCaptureSession.Frame.Feedback.tooFast.getter();
    char v19 = dispatch thunk of SetAlgebra.isSuperset(of:)();
    v9((char *)v20 - v15, v3);
    v9((char *)v20 - v15, v3);
    if (v19) {
      DataModel.pauseAutoCapture()();
    }
  }
}

void DataModel.pauseAutoCapture()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Pausing auto-capture...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  unint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  if (v6)
  {
    id v7 = v6;
    if (dispatch thunk of ObjectCaptureSession.spi.getter())
    {
      dispatch thunk of ObjectCaptureSessionSPI.setAutoCapture(_:for:)();

      swift_release();
      return;
    }
  }
  oslog = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_2465C2000, oslog, v8, "Can't pause auto-capture, no internal session connection!", v9, 2u);
    MEMORY[0x24C5348D0](v9, -1, -1);
  }
}

void DataModel.resumeAutoCapture()()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isAutoCaptureEnabled) != 1)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(oslog, v9)) {
      goto LABEL_19;
    }
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    uint64_t v11 = "Ignoring the request to resume auto-capture because auto-capture is disabled!";
    goto LABEL_18;
  }
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Resuming auto-capture...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  unint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  if (v6)
  {
    id v7 = v6;
    if (dispatch thunk of ObjectCaptureSession.spi.getter())
    {
      dispatch thunk of ObjectCaptureSessionSPI.setAutoCapture(_:for:)();

      swift_release();
      return;
    }
  }
  oslog = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    uint64_t v11 = "Can't resume auto-capture, no internal session connection!";
LABEL_18:
    _os_log_impl(&dword_2465C2000, oslog, v9, v11, v10, 2u);
    MEMORY[0x24C5348D0](v10, -1, -1);
  }
LABEL_19:
}

void DataModel.updateDebugState(frame:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (!v1) {
    goto LABEL_4;
  }
  id v2 = objc_msgSend(v1, sel_session);
  id v3 = objc_msgSend(v2, sel_configuration);

  if (v3)
  {
    id v4 = objc_msgSend(v3, sel_videoFormat);

    id v5 = objc_msgSend(v4, sel_device);
    objc_msgSend(v5, sel_ISO);

LABEL_4:
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.setter();
    return;
  }
  __break(1u);
}

double DataModel.getDeviceOrientationCorrectedReticleAimVector()()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (*(float *)&v13.a == INFINITY
    || (swift_getKeyPath(),
        swift_getKeyPath(),
        static Published.subscript.getter(),
        swift_release(),
        swift_release(),
        *((float *)&v13.a + 1) == INFINITY))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    return v13.a;
  }
  else
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    CGAffineTransformMakeRotation(&v13, v13.a);
    CGAffineTransformInvert(&v12, &v13);
    long long v10 = *(_OWORD *)&v12.c;
    long long v11 = *(_OWORD *)&v12.a;
    CGFloat tx = v12.tx;
    CGFloat ty = v12.ty;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    CGFloat v4 = *(float *)&v13.a;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v14.float y = *((float *)&v13.a + 1);
    *(_OWORD *)&v13.a = v11;
    *(_OWORD *)&v13.c = v10;
    v13.CGFloat tx = tx;
    v13.CGFloat ty = ty;
    v14.float x = v4;
    CGPoint v5 = CGPointApplyAffineTransform(v14, &v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2466B7740;
    float x = v5.x;
    float y = v5.y;
    *(float *)(inited + 32) = x;
    *(float *)(inited + 36) = y;
    specialized SIMD.init<A>(_:)(inited);
    double v0 = v9;
    swift_setDeallocating();
  }
  return v0;
}

uint64_t DataModel.getCurrentlySelectedBoundingBox()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DataModel.State(0);
  uint64_t result = MEMORY[0x270FA5388](v3 - 8);
  unint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) != 1)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v7 = type metadata accessor for DataModel.Error(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 8, v7);
  if (result != 6)
  {
    if (result != 5)
    {
      uint64_t result = outlined destroy of DataModel.Error((uint64_t)v6, type metadata accessor for DataModel.State);
      long long v11 = 0uLL;
      char v8 = 1;
      long long v12 = 0uLL;
      long long v9 = 0uLL;
      long long v10 = 0uLL;
      goto LABEL_9;
    }
    if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel))
    {
      swift_retain();
      DetectModeBoxModel.currentCaptureBox.getter((uint64_t)v18);
      long long v16 = v18[1];
      long long v17 = v18[0];
      long long v14 = v18[3];
      long long v15 = v18[2];
      char v8 = v19;
      uint64_t result = swift_release();
      long long v10 = v14;
      long long v9 = v15;
      long long v12 = v16;
      long long v11 = v17;
LABEL_9:
      *(_OWORD *)a1 = v11;
      *(_OWORD *)(a1 + 16) = v12;
      *(_OWORD *)(a1 + 32) = v9;
      *(_OWORD *)(a1 + 48) = v10;
      *(unsigned char *)(a1 + 64) = v8;
      return result;
    }
    goto LABEL_11;
  }
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureBoxModel);
  if (v13)
  {
    long long v11 = *(_OWORD *)(v13 + 144);
    long long v12 = *(_OWORD *)(v13 + 160);
    long long v9 = *(_OWORD *)(v13 + 176);
    long long v10 = *(_OWORD *)(v13 + 192);
    char v8 = *(unsigned char *)(v13 + 208);
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t DataModel.filterFrameFeedback(feedback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for ObjectCaptureSession.Frame.Feedback();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v58 = v6 + 16;
  long long v59 = v7;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(a2, a1, v5);
  long long v9 = *(uint64_t **)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_deviceMotionEstimator);
  uint64_t v60 = a2;
  if (v9)
  {
    uint64_t v57 = v2;
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Feedback?);
    int v55 = (void (*)(char *, uint64_t, uint64_t, uint64_t))&v51;
    uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
    uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v54 = &v51;
    uint64_t v14 = *(void *)(v6 + 64);
    MEMORY[0x270FA5388](v11);
    long long v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v56 = v9;
    swift_retain();
    uint64_t v16 = static ObjectCaptureSession.Frame.Feedback.tooFast.getter();
    uint64_t v53 = &v51;
    uint64_t v17 = MEMORY[0x270FA5388](v16);
    MEMORY[0x270FA5388](v17);
    v59(v15, a2, v5);
    lazy protocol witness table accessor for type ObjectCaptureSession.Frame.Feedback and conformance ObjectCaptureSession.Frame.Feedback(&lazy protocol witness table cache variable for type ObjectCaptureSession.Frame.Feedback and conformance ObjectCaptureSession.Frame.Feedback, MEMORY[0x270FB2658]);
    dispatch thunk of SetAlgebra.intersection(_:)();
    if (dispatch thunk of SetAlgebra.isEmpty.getter())
    {
      uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
      v18(v15, v5);
      uint64_t v19 = v6;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v13, 1, 1, v5);
    }
    else
    {
      dispatch thunk of SetAlgebra.subtract(_:)();
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v13, v15, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v5);
      uint64_t v19 = v6;
      uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    }
    v18(v15, v5);
    uint64_t v20 = outlined destroy of URL?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Feedback?);
    if (*((unsigned char *)v56 + 140) == 1)
    {
      uint64_t v21 = MEMORY[0x270FA5388](v20);
      uint64_t v22 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      MEMORY[0x270FA5388](v21);
      uint64_t v24 = (char *)&v51 - v23;
      static ObjectCaptureSession.Frame.Feedback.tooFast.getter();
      specialized OptionSet<>.insert(_:)(v22, (uint64_t)v24);
      swift_release();
      v18(v24, v5);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v22, v5);
    }
    else
    {
      uint64_t result = swift_release();
    }
    uint64_t v6 = v19;
    uint64_t v2 = v57;
  }
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) == 2)
  {
    uint64_t v25 = *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_rangefinderManager);
    if (v25)
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Feedback?);
      uint64_t v56 = &v51;
      uint64_t v27 = *(void *)(*(void *)(v26 - 8) + 64);
      uint64_t v28 = MEMORY[0x270FA5388](v26 - 8);
      uint64_t v54 = &v51;
      uint64_t v29 = *(void *)(v6 + 64);
      MEMORY[0x270FA5388](v28);
      uint64_t v30 = (char *)&v51 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v57 = v25;
      swift_retain();
      uint64_t v31 = static ObjectCaptureSession.Frame.Feedback.tooClose.getter();
      uint64_t v53 = &v51;
      uint64_t v32 = MEMORY[0x270FA5388](v31);
      MEMORY[0x270FA5388](v32);
      ((void (*)(char *))v59)(v30);
      lazy protocol witness table accessor for type ObjectCaptureSession.Frame.Feedback and conformance ObjectCaptureSession.Frame.Feedback(&lazy protocol witness table cache variable for type ObjectCaptureSession.Frame.Feedback and conformance ObjectCaptureSession.Frame.Feedback, MEMORY[0x270FB2658]);
      dispatch thunk of SetAlgebra.intersection(_:)();
      char v33 = dispatch thunk of SetAlgebra.isEmpty.getter();
      uint64_t v52 = v6;
      if (v33)
      {
        uint64_t v34 = *(void (**)(char *, uint64_t))(v6 + 8);
        v34(v30, v5);
        int v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        v55((char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v5);
      }
      else
      {
        dispatch thunk of SetAlgebra.subtract(_:)();
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))((char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), v30, v5);
        int v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        v55((char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v5);
        uint64_t v34 = *(void (**)(char *, uint64_t))(v6 + 8);
      }
      v34(v30, v5);
      uint64_t v35 = outlined destroy of URL?((uint64_t)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Feedback?);
      uint64_t v56 = &v51;
      uint64_t v36 = MEMORY[0x270FA5388](v35);
      uint64_t v37 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v54 = &v51;
      MEMORY[0x270FA5388](v36);
      uint64_t v38 = (char *)&v51 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v39 = static ObjectCaptureSession.Frame.Feedback.tooFar.getter();
      uint64_t v53 = &v51;
      uint64_t v40 = MEMORY[0x270FA5388](v39);
      uint64_t v41 = v34;
      MEMORY[0x270FA5388](v40);
      v59(v38, v60, v5);
      dispatch thunk of SetAlgebra.intersection(_:)();
      if (dispatch thunk of SetAlgebra.isEmpty.getter())
      {
        v34(v38, v5);
        uint64_t v42 = 1;
      }
      else
      {
        dispatch thunk of SetAlgebra.subtract(_:)();
        (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v37, v38, v5);
        uint64_t v42 = 0;
      }
      v55(v37, v42, 1, v5);
      v34(v38, v5);
      uint64_t v43 = outlined destroy of URL?((uint64_t)v37, (uint64_t *)&demangling cache variable for type metadata for ObjectCaptureSession.Frame.Feedback?);
      int v44 = *(unsigned __int8 *)(v57 + 64);
      if (v44 == 3)
      {
        uint64_t v49 = MEMORY[0x270FA5388](v43);
        uint64_t v46 = (char *)&v51 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
        MEMORY[0x270FA5388](v49);
        uint64_t v48 = (char *)&v51 - v50;
        static ObjectCaptureSession.Frame.Feedback.tooFar.getter();
        goto LABEL_21;
      }
      if (v44 == 1)
      {
        uint64_t v45 = MEMORY[0x270FA5388](v43);
        uint64_t v46 = (char *)&v51 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
        MEMORY[0x270FA5388](v45);
        uint64_t v48 = (char *)&v51 - v47;
        static ObjectCaptureSession.Frame.Feedback.tooClose.getter();
LABEL_21:
        specialized OptionSet<>.insert(_:)(v46, (uint64_t)v48);
        swift_release();
        v41(v48, v5);
        return ((uint64_t (*)(char *, uint64_t))v41)(v46, v5);
      }
      return swift_release();
    }
  }
  return result;
}

void DataModel.onShot(shot:shotMetadata:)()
{
  uint64_t v1 = v0;
  if (DataModel.inCapturingMetaState.getter())
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v2 = (void (*)(unsigned char *, void))static Published.subscript.modify();
    if (__OFADD__(*v3, 1))
    {
      __break(1u);
    }
    else
    {
      ++*v3;
      v2(v39, 0);
      swift_release();
      swift_release();
      swift_getKeyPath();
      swift_getKeyPath();
      CGFloat v4 = (void (*)(unsigned char *, void))static Published.subscript.modify();
      if (!__OFADD__(*v5, 1))
      {
        ++*v5;
        v4(v39, 0);
        swift_release();
        swift_release();
        if (*(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureCircle))
        {
          uint64_t v6 = swift_retain();
          Swift::Double v7 = MEMORY[0x24C5326B0](v6);
          uint64_t v8 = type metadata accessor for ObjectCaptureSession.Metadata.Shot.Camera();
          uint64_t v9 = *(void *)(v8 - 8);
          MEMORY[0x270FA5388](v8);
          uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v12 = ObjectCaptureSession.Metadata.Shot.camera.getter();
          *(double *)&long long v13 = MEMORY[0x24C532680](v12);
          long long v37 = v14;
          long long v38 = v13;
          long long v35 = v16;
          long long v36 = v15;
          uint64_t v17 = (simd_float4x4 *)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
          CaptureCircle.onShotTaken(at:cameraTransformWorld:)(v7, v17);
          swift_release();
        }
        uint64_t v18 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_cameraPathManager);
        uint64_t v19 = type metadata accessor for ObjectCaptureSession.Metadata.Shot.Camera();
        uint64_t v20 = *(void *)(v19 - 8);
        MEMORY[0x270FA5388](v19);
        uint64_t v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
        id v23 = v18;
        uint64_t v24 = ObjectCaptureSession.Metadata.Shot.camera.getter();
        *(double *)&long long v25 = MEMORY[0x24C532680](v24);
        long long v37 = v26;
        long long v38 = v25;
        long long v35 = v28;
        long long v36 = v27;
        uint64_t v29 = (simd_float4x4 *)(*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
        uint64_t v30 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_localTime;
        CameraPathManager.addShot(_:t:)(v29, *(Swift::Double *)&v38);

        double v31 = *(double *)(v1 + v30);
        *(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_lastShotTime) = v31;
        DataModel.startFreeformPulseIfNeeded(at:)(v31);
        if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_soundManager)) {
          SoundManager.playShutterSound(volume:)(0.3);
        }
        if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_hapticManager)) {
          HapticManager.playShotHaptic()();
        }
        if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) == 1) {
          DataModel.updateObjectFlippabilityFeedback()();
        }
        return;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  if (one-time initialization token for logger != -1) {
LABEL_21:
  }
    swift_once();
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)logger);
  *(void *)&long long v38 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled((os_log_t)v38, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl(&dword_2465C2000, (os_log_t)v38, v33, "onShot() called when not in .capturing  meta state!  Assuming this is a late callback and ignoring...", v34, 2u);
    MEMORY[0x24C5348D0](v34, -1, -1);
  }
}

void DataModel.updateObjectFlippabilityFeedback()()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_scanPassID))
  {
    if (one-time initialization token for logger == -1)
    {
LABEL_3:
      uint64_t v1 = type metadata accessor for Logger();
      __swift_project_value_buffer(v1, (uint64_t)logger);
      os_log_t oslog = (os_log_t)Logger.logObject.getter();
      os_log_type_t v2 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(oslog, v2))
      {
LABEL_22:

        return;
      }
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      CGFloat v4 = "Not first scan pass, not updating flippability.";
LABEL_21:
      _os_log_impl(&dword_2465C2000, oslog, v2, v4, v3, 2u);
      MEMORY[0x24C5348D0](v3, -1, -1);
      goto LABEL_22;
    }
LABEL_27:
    swift_once();
    goto LABEL_3;
  }
  uint64_t v5 = v0;
  uint64_t v6 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isObjectFlippable;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isObjectFlippable) != 2)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)logger);
    os_log_t oslog = (os_log_t)Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(oslog, v2)) {
      goto LABEL_22;
    }
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    CGFloat v4 = "isObjectFlippable has already been set -- not updating.";
    goto LABEL_21;
  }
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureCircle);
  if (!v7) {
    goto LABEL_33;
  }
  uint64_t v8 = (unint64_t *)(v7 + 72);
  swift_beginAccess();
  unint64_t v9 = *(void *)(v7 + 72);
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain_n();
    swift_retain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    if (v10) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  swift_retain();
  if (!v10)
  {
LABEL_29:
    swift_bridgeObjectRelease_n();
    float v16 = 0.0;
LABEL_30:
    unint64_t v18 = *v8;
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_release();
    }
    if ((float)(v16 / (float)v19) >= 0.75)
    {
      uint64_t v24 = *(void **)(v5 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
      if (v24)
      {
        id v25 = v24;
        LOBYTE(v8) = dispatch thunk of ObjectCaptureSession.objectFlippable.getter();
      }
      else
      {
        LOBYTE(v8) = 1;
      }
      if (one-time initialization token for logger == -1) {
        goto LABEL_42;
      }
      goto LABEL_47;
    }
LABEL_33:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)logger);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 134218240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2465C2000, v21, v22, "Not enough capture percent to update flippability: %f < %f", (uint8_t *)v23, 0x16u);
      MEMORY[0x24C5348D0](v23, -1, -1);
    }

    return;
  }
LABEL_9:
  if (v10 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = (v9 & 0xC000000000000001) != 0 ? MEMORY[0x24C533AF0](v11, v9) : swift_retain();
      uint64_t v14 = *(unsigned __int8 *)(v13 + 36);
      swift_release();
      BOOL v15 = __OFADD__(v12, v14);
      v12 += v14;
      if (v15) {
        break;
      }
      if (v10 == ++v11)
      {
        swift_bridgeObjectRelease_n();
        float v16 = (float)v12;
        goto LABEL_30;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
  __break(1u);
LABEL_47:
  swift_once();
LABEL_42:
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)logger);
  long long v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v27, v28, "Setting the object flippability: current capture dial fill percent: %f  flippable=%{BOOL}d", (uint8_t *)v29, 0x12u);
    MEMORY[0x24C5348D0](v29, -1, -1);
  }

  *(unsigned char *)(v5 + v6) = v8 & 1;
}

uint64_t DataModel.updateShowMiniViewState(newState:newNumShotsInSegment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DataModel.State(0);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v24 - v10;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)logger);
  outlined init with copy of DataModel.Error(a1, (uint64_t)v11, type metadata accessor for DataModel.State);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v28 = v25;
    *(_DWORD *)uint64_t v15 = 136446466;
    uint64_t v24 = v15 + 4;
    uint64_t v26 = a2;
    outlined init with copy of DataModel.Error((uint64_t)v11, (uint64_t)v9, type metadata accessor for DataModel.State);
    uint64_t v16 = String.init<A>(describing:)();
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    a2 = v26;
    outlined destroy of DataModel.Error((uint64_t)v11, type metadata accessor for DataModel.State);
    *(_WORD *)(v15 + 12) = 2050;
    uint64_t v27 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v13, v14, "updateShowMiniViewState was called!  state=%{public}s  numShots: %{public}ld", (uint8_t *)v15, 0x16u);
    uint64_t v18 = v25;
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v18, -1, -1);
    MEMORY[0x24C5348D0](v15, -1, -1);
  }
  else
  {
    outlined destroy of DataModel.Error((uint64_t)v11, type metadata accessor for DataModel.State);
  }

  uint64_t v19 = type metadata accessor for DataModel.Error(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v9, 6, 8, v19);
  unsigned __int8 v20 = specialized static DataModel.State.== infix(_:_:)(a1, (uint64_t)v9);
  outlined destroy of DataModel.Error((uint64_t)v9, type metadata accessor for DataModel.State);
  int v21 = v20 & (a2 > 0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  if (v21 != v28)
  {
    uint64_t v23 = static Animation.easeInOut(duration:)();
    MEMORY[0x270FA5388](v23);
    *((unsigned char *)&v24 - 16) = v21;
    *(&v24 - 1) = v3;
    withAnimation<A>(_:_:)();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in DataModel.updateShowMiniViewState(newState:newNumShotsInSegment:)()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 67240192;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2465C2000, v1, v2, "Setting showMiniView to %{BOOL,public}d", v3, 8u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }

  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t DataModel.updateShowCenterReticleState(newState:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DataModel.State(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v9 = (char *)v21 - v8;
  uint64_t v10 = type metadata accessor for DataModel.Error(0);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v9, 6, 8, v10);
  char v12 = specialized static DataModel.State.== infix(_:_:)(a1, (uint64_t)v9);
  outlined destroy of DataModel.Error((uint64_t)v9, type metadata accessor for DataModel.State);
  outlined init with copy of DataModel.Error(a1, (uint64_t)v7, type metadata accessor for DataModel.State);
  if (v12)
  {
    outlined destroy of DataModel.Error((uint64_t)v7, type metadata accessor for DataModel.State);
LABEL_4:
    int v14 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) != 2;
    goto LABEL_6;
  }
  v11(v9, 4, 8, v10);
  char v13 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v7, (uint64_t)v9);
  outlined destroy of DataModel.Error((uint64_t)v9, type metadata accessor for DataModel.State);
  outlined destroy of DataModel.Error((uint64_t)v7, type metadata accessor for DataModel.State);
  if (v13) {
    goto LABEL_4;
  }
  int v14 = 0;
LABEL_6:
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  if (v14 != v22)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)logger);
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 67240192;
      v21[3] = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2465C2000, v17, v18, "Setting showCenterReticle to %{BOOL,public}d", v19, 8u);
      MEMORY[0x24C5348D0](v19, -1, -1);
    }

    MEMORY[0x270FA5388](v20);
    *(void *)&v21[-4] = v2;
    LOBYTE(v21[-2]) = v14;
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in DataModel.updateFeedback(frameFeedback:arCameraFeedback:)()
{
  return static Published.subscript.setter();
}

void DataModel.onDebugTapWorld(pointWorld:)()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)logger);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v9 = v5;
    *(_DWORD *)uint64_t v4 = 136446210;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>((unint64_t *)&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
    uint64_t v6 = SIMD.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v2, v3, "onDebugTapWorld: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v5, -1, -1);
    MEMORY[0x24C5348D0](v4, -1, -1);
  }

  uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel);
  if (v8)
  {
    if (*(unsigned char *)(v8 + 200) == 1)
    {
      if (swift_weakLoadStrong())
      {
        swift_retain();
        DataModel.addToScene(entity:)();
        swift_release();
      }
      else
      {
        swift_retain();
      }
      type metadata accessor for ModelEntity();
      HasTransform.setPosition(_:relativeTo:)();
      swift_release();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t DataModel.onInternalSessionStateChange(newInternalState:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DataModel.State(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v3);
  uint64_t v8 = (char *)&v20 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = type metadata accessor for DataModel.Error(0);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v20(v10, 1, 8, v11);
  uint64_t v12 = type metadata accessor for ObjectCaptureSession.State();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v21 = a1;
  v15((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  DataModel.State.init(from:)((uint64_t)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v8);
  outlined destroy of DataModel.Error((uint64_t)v10, type metadata accessor for DataModel.State);
  outlined init with take of DataModel.State((uint64_t)v8, (uint64_t)v10, type metadata accessor for DataModel.State);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v16 = v22;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  DataModel.performStateTransition(from:to:)((uint64_t)v5, (uint64_t)v10);
  uint64_t v17 = outlined destroy of DataModel.Error((uint64_t)v5, type metadata accessor for DataModel.State);
  MEMORY[0x270FA5388](v17);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F368F8], v12);
  char v18 = MEMORY[0x24C532600](v21, (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t))(v13 + 8))((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  if (v18)
  {
    *(unsigned char *)(v16 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isInternalSessionCompleted) = 1;
    DataModel.switchToCompletedIfFinishingComplete()();
  }
  return outlined destroy of DataModel.Error((uint64_t)v10, type metadata accessor for DataModel.State);
}

BOOL DataModel.addCaptureSubscriptions()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<DataModel.State>.Publisher);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int>.Publisher);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  if (v12)
  {
    uint64_t v67 = v2;
    uint64_t v68 = v1;
    uint64_t v13 = one-time initialization token for logger;
    uint64_t v69 = v12;
    id v78 = v12;
    if (v13 != -1) {
      swift_once();
    }
    uint64_t v62 = v8;
    uint64_t v63 = v6;
    uint64_t v64 = v5;
    uint64_t v77 = v0;
    int v66 = v4;
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v65 = __swift_project_value_buffer(v14, (uint64_t)logger);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_2465C2000, v15, v16, "Adding capture subscriptions...", v17, 2u);
      MEMORY[0x24C5348D0](v17, -1, -1);
    }

    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Published<ObjectCaptureSession.State>.Publisher, OS_dispatch_queue>);
    uint64_t v74 = v61;
    uint64_t v19 = *(void *)(v18 - 8);
    MEMORY[0x270FA5388](v18);
    uint64_t v21 = (char *)v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ObjectCaptureSession.State>.Publisher);
    uint64_t v23 = *(void *)(v22 - 8);
    MEMORY[0x270FA5388](v22);
    uint64_t v25 = (char *)v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    dispatch thunk of ObjectCaptureSession.$state.getter();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    id v80 = (id)static OS_dispatch_queue.main.getter();
    uint64_t v72 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v26 = *(void *)(v72 - 8);
    char v75 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
    uint64_t v73 = v26 + 56;
    v75(v11, 1, 1, v72);
    v61[1] = MEMORY[0x263EFDE50];
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Published<ObjectCaptureSession.State>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<ObjectCaptureSession.State>.Publisher);
    unint64_t v70 = lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
    Publisher.receive<A>(on:options:)();
    outlined destroy of URL?((uint64_t)v11, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    swift_allocObject();
    uint64_t v27 = v77;
    swift_weakInit();
    uint64_t v76 = MEMORY[0x263EFDCB0];
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Published<ObjectCaptureSession.State>.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Published<ObjectCaptureSession.State>.Publisher, OS_dispatch_queue>);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    uint64_t v71 = v27 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSessionSubscriptions;
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<ObjectCaptureSession.Frame, ObjectCaptureSession.Error>, OS_dispatch_queue>);
    v61[0] = v61;
    uint64_t v29 = *(void *)(v28 - 8);
    MEMORY[0x270FA5388](v28);
    double v31 = (char *)v61 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    ObjectCaptureSession.observingPublishers.getter();
    uint64_t v32 = (void *)dispatch thunk of ObjectCaptureSessionObservingPublishers.framePublisher.getter();
    swift_release();
    id v80 = v32;
    id v79 = (id)static OS_dispatch_queue.main.getter();
    uint64_t v33 = v72;
    v75(v11, 1, 1, v72);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<ObjectCaptureSession.Frame, ObjectCaptureSession.Error>);
    uint64_t v74 = (void *)MEMORY[0x263EFDCF8];
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type AnyPublisher<ObjectCaptureSession.Frame, ObjectCaptureSession.Error> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<ObjectCaptureSession.Frame, ObjectCaptureSession.Error>);
    Publisher.receive<A>(on:options:)();
    outlined destroy of URL?((uint64_t)v11, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    swift_release();
    swift_allocObject();
    swift_weakInit();
    swift_allocObject();
    swift_weakInit();
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<ObjectCaptureSession.Frame, ObjectCaptureSession.Error>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<ObjectCaptureSession.Frame, ObjectCaptureSession.Error>, OS_dispatch_queue>);
    Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<ObjectCaptureSession.Mesh, Never>, OS_dispatch_queue>);
    v61[0] = v61;
    uint64_t v35 = *(void *)(v34 - 8);
    MEMORY[0x270FA5388](v34);
    long long v37 = (char *)v61 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
    ObjectCaptureSession.observingPublishers.getter();
    long long v38 = (void *)dispatch thunk of ObjectCaptureSessionObservingPublishers.meshPublisher.getter();
    swift_release();
    id v80 = v38;
    id v79 = (id)static OS_dispatch_queue.main.getter();
    uint64_t v39 = v33;
    uint64_t v40 = v75;
    v75(v11, 1, 1, v39);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<ObjectCaptureSession.Mesh, Never>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type AnyPublisher<ObjectCaptureSession.Mesh, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<ObjectCaptureSession.Mesh, Never>);
    Publisher.receive<A>(on:options:)();
    outlined destroy of URL?((uint64_t)v11, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    swift_release();
    swift_allocObject();
    swift_weakInit();
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<ObjectCaptureSession.Mesh, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<ObjectCaptureSession.Mesh, Never>, OS_dispatch_queue>);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<(ObjectCaptureSession.Shot, ObjectCaptureSession.Metadata.Shot), ObjectCaptureSession.Error>, OS_dispatch_queue>);
    v61[0] = v61;
    uint64_t v42 = *(void *)(v41 - 8);
    MEMORY[0x270FA5388](v41);
    int v44 = (char *)v61 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
    ObjectCaptureSession.writingPublishers.getter();
    uint64_t v45 = (void *)dispatch thunk of ObjectCaptureSessionWritingPublishers.shotPublisher.getter();
    swift_release();
    id v80 = v45;
    id v79 = (id)static OS_dispatch_queue.main.getter();
    v40(v11, 1, 1, v72);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(ObjectCaptureSession.Shot, ObjectCaptureSession.Metadata.Shot), ObjectCaptureSession.Error>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type AnyPublisher<(ObjectCaptureSession.Shot, ObjectCaptureSession.Metadata.Shot), ObjectCaptureSession.Error> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(ObjectCaptureSession.Shot, ObjectCaptureSession.Metadata.Shot), ObjectCaptureSession.Error>);
    Publisher.receive<A>(on:options:)();
    outlined destroy of URL?((uint64_t)v11, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    swift_release();
    swift_allocObject();
    swift_weakInit();
    uint64_t v46 = swift_allocObject();
    swift_weakInit();
    uint64_t v47 = swift_allocObject();
    *(void *)(v47 + 16) = partial apply for closure #6 in DataModel.addCaptureSubscriptions();
    *(void *)(v47 + 24) = v46;
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<(ObjectCaptureSession.Shot, ObjectCaptureSession.Metadata.Shot), ObjectCaptureSession.Error>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<(ObjectCaptureSession.Shot, ObjectCaptureSession.Metadata.Shot), ObjectCaptureSession.Error>, OS_dispatch_queue>);
    Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<ObjectCaptureSession.Metadata.Shot, ObjectCaptureSession.Error>, OS_dispatch_queue>);
    v61[0] = v61;
    uint64_t v49 = *(void *)(v48 - 8);
    MEMORY[0x270FA5388](v48);
    uint64_t v51 = (char *)v61 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
    ObjectCaptureSession.writingPublishers.getter();
    uint64_t v52 = (void *)dispatch thunk of ObjectCaptureSessionWritingPublishers.shotMetadataPublisher.getter();
    swift_release();
    id v80 = v52;
    id v79 = (id)static OS_dispatch_queue.main.getter();
    v75(v11, 1, 1, v72);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<ObjectCaptureSession.Metadata.Shot, ObjectCaptureSession.Error>);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type AnyPublisher<ObjectCaptureSession.Metadata.Shot, ObjectCaptureSession.Error> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<ObjectCaptureSession.Metadata.Shot, ObjectCaptureSession.Error>);
    Publisher.receive<A>(on:options:)();
    outlined destroy of URL?((uint64_t)v11, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    swift_release();
    swift_allocObject();
    swift_weakInit();
    swift_allocObject();
    swift_weakInit();
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<ObjectCaptureSession.Metadata.Shot, ObjectCaptureSession.Error>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<ObjectCaptureSession.Metadata.Shot, ObjectCaptureSession.Error>, OS_dispatch_queue>);
    Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v48);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Int>);
    uint64_t v53 = v62;
    Published.projectedValue.getter();
    swift_endAccess();
    swift_allocObject();
    swift_weakInit();
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Published<Int>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Int>.Publisher);
    uint64_t v54 = v64;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v53, v54);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<DataModel.State>);
    int v55 = v66;
    Published.projectedValue.getter();
    swift_endAccess();
    swift_allocObject();
    swift_weakInit();
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Published<DataModel.State>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<DataModel.State>.Publisher);
    uint64_t v56 = v68;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v55, v56);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v57, v58))
    {
      long long v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v59 = 0;
      _os_log_impl(&dword_2465C2000, v57, v58, "... done adding capture subscriptions.", v59, 2u);
      MEMORY[0x24C5348D0](v59, -1, -1);
    }

    uint64_t v12 = v69;
  }
  return v12 != 0;
}

uint64_t closure #1 in DataModel.addCaptureSubscriptions()(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3(a1);
    return swift_release();
  }
  return result;
}

uint64_t closure #4 in DataModel.addCaptureSubscriptions()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void *)(result + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_meshManager);
    swift_retain();
    uint64_t result = swift_release();
    if (v1)
    {
      uint64_t v2 = ObjectCaptureSession.Mesh.anchors.getter();
      FreeformMeshManager.add(meshAnchors:)((Swift::OpaquePointer)v2);
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t closure #2 in DataModel.addCaptureSubscriptions()(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<ObjectCaptureSession.Error>);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(a1, (uint64_t)v7, &demangling cache variable for type metadata for Subscribers.Completion<ObjectCaptureSession.Error>);
  uint64_t v8 = type metadata accessor for ObjectCaptureSession.Error();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (v10 == 1)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)logger);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_2465C2000, v12, v13, a3, v14, 2u);
      MEMORY[0x24C5348D0](v14, -1, -1);
    }

    return outlined destroy of URL?((uint64_t)v7, &demangling cache variable for type metadata for Subscribers.Completion<ObjectCaptureSession.Error>);
  }
  else
  {
    MEMORY[0x270FA5388](v10);
    uint64_t v17 = (char *)&v18 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v7, v8);
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      specialized DataModel.onError(error:)((uint64_t)v17);
      swift_release();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v17, v8);
  }
}

uint64_t closure #6 in DataModel.addCaptureSubscriptions()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    DataModel.onShot(shot:shotMetadata:)();
    return swift_release();
  }
  return result;
}

uint64_t closure #8 in DataModel.addCaptureSubscriptions()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t closure #9 in DataModel.addCaptureSubscriptions()(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for DataModel.State(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    DataModel.updateShowMiniViewState(newState:newNumShotsInSegment:)((uint64_t)v4, v5);
    swift_release();
    return outlined destroy of DataModel.Error((uint64_t)v4, type metadata accessor for DataModel.State);
  }
  return result;
}

uint64_t closure #10 in DataModel.addCaptureSubscriptions()(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    DataModel.updateShowMiniViewState(newState:newNumShotsInSegment:)(a1, v3);
    DataModel.updateShowCenterReticleState(newState:)(a1);
    return swift_release();
  }
  return result;
}

void DataModel.removeCaptureSubscriptions()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Removing capture subscriptions...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  uint64_t v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSessionSubscriptions);
  swift_beginAccess();
  while (1)
  {
    if ((*v6 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
      if (!v7) {
        break;
      }
      goto LABEL_11;
    }
    if (!*(void *)(*v6 + 16)) {
      break;
    }
LABEL_11:
    swift_beginAccess();
    uint64_t v8 = *v6;
    unint64_t v9 = *v6 & 0xC000000000000001;
    if (v9)
    {
      if (__CocoaSet.count.getter())
      {
        uint64_t v10 = __CocoaSet.startIndex.getter();
        uint64_t v12 = v11;
        goto LABEL_19;
      }
LABEL_6:
      swift_endAccess();
    }
    else
    {
      if (!*(void *)(v8 + 16)) {
        goto LABEL_6;
      }
      unint64_t v13 = *(void *)(v8 + 56);
      if (v13)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v16 = *(unsigned __int8 *)(v8 + 32);
        unsigned int v17 = v16 & 0x3F;
        uint64_t v10 = 1 << v16;
        if (v17 < 7) {
          goto LABEL_18;
        }
        unint64_t v13 = *(void *)(v8 + 64);
        if (v13)
        {
          uint64_t v14 = 1;
        }
        else
        {
          if (v17 < 8) {
            goto LABEL_18;
          }
          unint64_t v13 = *(void *)(v8 + 72);
          if (v13)
          {
            uint64_t v14 = 2;
          }
          else
          {
            unint64_t v13 = *(void *)(v8 + 80);
            if (!v13)
            {
              uint64_t v18 = 0;
              unint64_t v19 = (unint64_t)(v10 + 63) >> 6;
              if (v19 <= 4) {
                unint64_t v19 = 4;
              }
              unint64_t v20 = v19 - 4;
              while (v20 != v18)
              {
                unint64_t v13 = *(void *)(v8 + 88 + 8 * v18++);
                if (v13)
                {
                  uint64_t v14 = v18 + 3;
                  goto LABEL_17;
                }
              }
              goto LABEL_18;
            }
            uint64_t v14 = 3;
          }
        }
      }
LABEL_17:
      uint64_t v10 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_18:
      uint64_t v12 = *(unsigned int *)(v8 + 36);
LABEL_19:
      char v15 = v9 != 0;
      specialized Set._Variant.remove(at:)(v10, v12, v15);
      swift_endAccess();
      outlined consume of Set<AnyCancellable>.Index._Variant(v10, v12, v15);
      swift_retain();
      AnyCancellable.cancel()();
      swift_release_n();
    }
  }
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_2465C2000, v21, v22, "... done removing capture subscriptions.", v23, 2u);
    MEMORY[0x24C5348D0](v23, -1, -1);
  }
}

void DataModel.connectImageWriter()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v56 = (char *)v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v61 = (void (**)(char *, uint64_t))((char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v52 - v6;
  uint64_t v62 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer(v11, (uint64_t)logger);
  uint64_t v16 = *(void (**)(char *))(v12 + 16);
  uint64_t v57 = v15;
  v16(v14);
  swift_retain_n();
  unsigned int v17 = Logger.logObject.getter();
  int v58 = static os_log_type_t.info.getter();
  BOOL v18 = os_log_type_enabled(v17, (os_log_type_t)v58);
  uint64_t v60 = v8;
  if (v18)
  {
    os_log_t v54 = v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    aBlock[0] = v53;
    *(_DWORD *)uint64_t v19 = 141558274;
    uint64_t v64 = 1752392040;
    void v52[2] = &v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v55 = v0;
    uint64_t v20 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imagesURL;
    swift_beginAccess();
    outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v20, (uint64_t)v7, &demangling cache variable for type metadata for URL?);
    uint64_t v21 = v62;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v62) == 1)
    {
LABEL_18:
      swift_release();
      __break(1u);
      return;
    }
    v52[1] = v19 + 14;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v7, v21);
    lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v25 = v55;
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v26 = v54;
    _os_log_impl(&dword_2465C2000, v54, (os_log_type_t)v58, "Creating HEIC image bundle writer for url=%{mask.hash}s...", (uint8_t *)v19, 0x16u);
    uint64_t v27 = v53;
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v27, -1, -1);
    MEMORY[0x24C5348D0](v19, -1, -1);

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v28 = v25;
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v28 = v0;
  }
  uint64_t v29 = *(void **)(v28 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  uint64_t v30 = (uint64_t)v61;
  if (!v29)
  {
    __break(1u);
    goto LABEL_17;
  }
  id v31 = v29;
  ObjectCaptureSession.writingPublishers.getter();

  uint64_t v32 = v28 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imagesURL;
  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v32, v30, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v30, 1, v62) == 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  type metadata accessor for ObjectCaptureHEICBundleWriter();
  swift_allocObject();
  uint64_t v33 = v59;
  uint64_t v34 = ObjectCaptureHEICBundleWriter.init(publishers:url:)();
  if (!v33)
  {
    uint64_t v35 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imageWriter;
    *(void *)(v28 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imageWriter) = v34;
    swift_release();
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<URL, ObjectCaptureHEICBundleWriter.Error>, OS_dispatch_queue>);
    uint64_t v37 = MEMORY[0x270FA5388](v52);
    uint64_t v40 = (char *)v52 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (*(void *)(v28 + v35))
    {
      uint64_t v61 = v38;
      uint64_t v62 = v37;
      swift_retain();
      uint64_t v41 = dispatch thunk of ObjectCaptureHEICBundleWriter.completionPublisher.getter();
      swift_release();
      aBlock[0] = v41;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      id v66 = (id)static OS_dispatch_queue.main.getter();
      uint64_t v42 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
      uint64_t v43 = (uint64_t)v56;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v56, 1, 1, v42);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<URL, ObjectCaptureHEICBundleWriter.Error>);
      lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type AnyPublisher<URL, ObjectCaptureHEICBundleWriter.Error> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<URL, ObjectCaptureHEICBundleWriter.Error>);
      lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
      Publisher.receive<A>(on:options:)();
      outlined destroy of URL?(v43, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

      swift_release();
      swift_allocObject();
      swift_weakInit();
      lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<URL, ObjectCaptureHEICBundleWriter.Error>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<URL, ObjectCaptureHEICBundleWriter.Error>, OS_dispatch_queue>);
      Publisher.sink(receiveCompletion:receiveValue:)();
      swift_release();
      v61[1](v40, v36);
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
    }
    *(unsigned char *)(v28 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imageWriterCompleted) = 0;
    int v44 = self;
    uint64_t v45 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = (uint64_t)partial apply for closure #3 in DataModel.connectImageWriter();
    aBlock[5] = v45;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_374;
    uint64_t v46 = _Block_copy(aBlock);
    swift_release();
    id v47 = objc_msgSend(v44, sel_scheduledTimerWithTimeInterval_repeats_block_, 1, v46, 5.0);
    _Block_release(v46);
    uint64_t v48 = *(void **)(v28 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imageWriterLoggingTimer);
    *(void *)(v28 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imageWriterLoggingTimer) = v47;

    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl(&dword_2465C2000, v49, v50, "... successfully create bundle writer.", v51, 2u);
      MEMORY[0x24C5348D0](v51, -1, -1);
    }
  }
}

void closure #1 in DataModel.connectImageWriter()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_2465C2000, v1, v2, "Got HEIC Bundle Writer Completion!", v3, 2u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    *(unsigned char *)(Strong + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imageWriterCompleted) = 1;
    DataModel.switchToCompletedIfFinishingComplete()();
    uint64_t v6 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imageWriterLoggingTimer;
    objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imageWriterLoggingTimer), sel_invalidate);
    uint64_t v7 = *(void **)(v5 + v6);
    *(void *)(v5 + v6) = 0;
    swift_release();
  }
}

void closure #2 in DataModel.connectImageWriter()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558274;
    uint64_t v13 = 1752392040;
    uint64_t v14 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2080;
    lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_2465C2000, v7, v8, "HEIC Bundle Writer completed url=\"%{mask.hash}s\"", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v10, -1, -1);
    MEMORY[0x24C5348D0](v9, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

void closure #3 in DataModel.connectImageWriter()()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = *(void *)(Strong + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imageWriter);
    swift_retain();
    swift_release();
    if (v1)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v2 = type metadata accessor for Logger();
      __swift_project_value_buffer(v2, (uint64_t)logger);
      swift_retain();
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v5 = 134349056;
        dispatch thunk of ObjectCaptureHEICBundleWriter.activeWriteQueueSize.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_2465C2000, v3, v4, "HEIC Bundle Writer's queue size: %{public}ld", v5, 0xCu);
        MEMORY[0x24C5348D0](v5, -1, -1);
        swift_release();
      }
      else
      {

        swift_release_n();
      }
    }
  }
}

void DataModel.setupDebugState()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<SIMD3<Float>, Never>, OS_dispatch_queue>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v8 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  if (v8)
  {
    os_log_t v20 = v8;
    if (dispatch thunk of ObjectCaptureSession.spi.getter())
    {
      dispatch thunk of ObjectCaptureSessionSPI.setDebugTapPosition(_:for:)();
      ObjectCaptureSession.observingPublishers.getter();
      uint64_t v9 = dispatch thunk of ObjectCaptureSessionObservingPublishers.tapPositionPublisher.getter();
      swift_release();
      uint64_t v21 = v9;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      id v22 = (id)static OS_dispatch_queue.main.getter();
      uint64_t v10 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v3, 1, 1, v10);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<SIMD3<Float>, Never>);
      lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<SIMD3<Float>, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<SIMD3<Float>, Never>);
      lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
      Publisher.receive<A>(on:options:)();
      outlined destroy of URL?((uint64_t)v3, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

      swift_release();
      swift_allocObject();
      swift_weakInit();
      lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<SIMD3<Float>, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<SIMD3<Float>, Never>, OS_dispatch_queue>);
      Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
      if (specialized static ExperimentSettings.loadMobileSFMDisabled(default:)(0))
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        __swift_project_value_buffer(v11, (uint64_t)logger);
        unint64_t v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v14 = 0;
          _os_log_impl(&dword_2465C2000, v12, v13, "Disabling MobileSFM based on defaults setting!", v14, 2u);
          MEMORY[0x24C5348D0](v14, -1, -1);
        }

        dispatch thunk of ObjectCaptureSessionSPI.setMobileSfMEnabled(_:for:)();
      }

      swift_release();
      return;
    }
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)logger);
    os_log_t v20 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v16))
    {
      unsigned int v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned int v17 = 0;
      _os_log_impl(&dword_2465C2000, v20, v16, "setupDebugState called without a valid ObjectCaptureSession!", v17, 2u);
      MEMORY[0x24C5348D0](v17, -1, -1);
    }
  }
  os_log_t v18 = v20;
}

uint64_t closure #1 in DataModel.setupDebugState()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    DataModel.onDebugTapWorld(pointWorld:)();
    return swift_release();
  }
  return result;
}

void DataModel.addGestureRecognizerIfNeeded()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Adding tap and pan recognizers...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  uint64_t v6 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_tapGesture;
  if (!*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_tapGesture))
  {
    uint64_t v10 = swift_allocObject();
    swift_weakInit();
    objc_allocWithZone((Class)type metadata accessor for RETapGesture());
    uint64_t v11 = swift_retain();
    unint64_t v12 = RETapGesture.init(model:onTap:)(v11, (uint64_t)partial apply for closure #2 in DataModel.addGestureRecognizerIfNeeded(), v10);
    os_log_type_t v13 = *(void **)(v1 + v6);
    *(void *)(v1 + v6) = v12;

    uint64_t v14 = *(void **)(v1 + 16);
    if (v14)
    {
      if (*(void *)(v1 + v6))
      {
        objc_msgSend(v14, sel_addGestureRecognizer_);
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_2465C2000, v7, v8, "... tapGesture already exists... nothing to do.", v9, 2u);
    MEMORY[0x24C5348D0](v9, -1, -1);
  }

LABEL_12:
  uint64_t v15 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_panGesture;
  if (!*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_panGesture))
  {
    uint64_t v18 = swift_allocObject();
    swift_weakInit();
    uint64_t v19 = (objc_class *)type metadata accessor for REPanGesture();
    os_log_t v20 = (char *)objc_allocWithZone(v19);
    uint64_t v21 = &v20[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D12REPanGesture_onPan];
    *(void *)uint64_t v21 = 0;
    *((void *)v21 + 1) = 0;
    v30.receiver = v20;
    v30.super_class = v19;
    swift_retain();
    id v22 = (char *)objc_msgSendSuper2(&v30, sel_initWithTarget_action_, 0, 0);
    unint64_t v23 = (uint64_t (**)())&v22[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D12REPanGesture_onPan];
    uint64_t v24 = *(void *)&v22[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D12REPanGesture_onPan];
    uint8_t *v23 = partial apply for closure #2 in DataModel.addGestureRecognizerIfNeeded();
    v23[1] = (uint64_t (*)())v18;
    uint64_t v25 = v22;
    swift_retain();
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?(v24);
    os_log_t v26 = v25;
    objc_msgSend(v26, sel_addTarget_action_, v26, sel_onUIPan);

    swift_release_n();
    uint64_t v27 = *(void **)(v1 + v15);
    *(void *)(v1 + v15) = v26;

    uint64_t v28 = *(void **)(v1 + 16);
    if (v28)
    {
      if (*(void *)(v1 + v15))
      {
        objc_msgSend(v28, sel_addGestureRecognizer_);
        return;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v16))
  {
    unsigned int v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned int v17 = 0;
    _os_log_impl(&dword_2465C2000, oslog, v16, "... panGesture already exists... nothing to do.", v17, 2u);
    MEMORY[0x24C5348D0](v17, -1, -1);
  }
}

uint64_t closure #1 in DataModel.addGestureRecognizerIfNeeded()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    DataModel.onGesture()();
    return swift_release();
  }
  return result;
}

void DataModel.removeGestureRecognizer()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Removing tap and pan recognizers...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  uint64_t v6 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_tapGesture;
  if (*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_tapGesture))
  {
    uint64_t v7 = *(void **)(v1 + 16);
    if (!v7)
    {
      __break(1u);
      goto LABEL_15;
    }
    objc_msgSend(v7, sel_removeGestureRecognizer_);
    os_log_type_t v8 = *(void **)(v1 + v6);
    *(void *)(v1 + v6) = 0;
  }
  uint64_t v9 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_panGesture;
  if (!*(void *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_panGesture)) {
    return;
  }
  uint64_t v10 = *(void **)(v1 + 16);
  if (!v10)
  {
LABEL_15:
    __break(1u);
    return;
  }
  objc_msgSend(v10, sel_removeGestureRecognizer_);
  uint64_t v11 = *(void **)(v1 + v9);
  *(void *)(v1 + v9) = 0;
}

void DataModel.onGesture()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for DataModel.State(0);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v26 - v8;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v10 = type metadata accessor for DataModel.Error(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 8, v10) == 5)
  {
    uint64_t v11 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel;
    uint64_t v12 = *(void *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel);
    if (!v12) {
      goto LABEL_19;
    }
    if (*(unsigned char *)(v12 + 24) == 2)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)logger);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v16 = 0;
        _os_log_impl(&dword_2465C2000, v14, v15, "A gesture detected in auto box mode: switching to manual box mode!", v16, 2u);
        MEMORY[0x24C5348D0](v16, -1, -1);
      }

      uint64_t v17 = *(void *)(v1 + v11);
      if (!v17) {
        goto LABEL_20;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      swift_retain();
      *uint64_t v5 = static OS_dispatch_queue.main.getter();
      (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
      char v18 = _dispatchPreconditionTest(_:)();
      (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
      if (v18)
      {
        DetectModeBoxModel.performSwitchStateTransitions(from:to:)(*(unsigned __int8 *)(v17 + 24), 3u);
        *(unsigned char *)(v17 + 24) = 3;
        swift_release();
        return;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)logger);
    swift_retain_n();
    os_log_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v29 = v27;
      *(_DWORD *)id v22 = 136446210;
      os_log_t v26 = v22 + 4;
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v20, v21, "onGesture() called but nothing to do in state: %{public}s", v22, 0xCu);
      uint64_t v25 = v27;
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v25, -1, -1);
      MEMORY[0x24C5348D0](v22, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    outlined destroy of DataModel.Error((uint64_t)v9, type metadata accessor for DataModel.State);
  }
}

uint64_t DataModel.switchToCompletedIfFinishingComplete()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DataModel.State(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v15 - v6;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v11 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F8F0E0], v8);
  char v12 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_imageWriterCompleted) == 1
      && *(unsigned char *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_isInternalSessionCompleted) == 1)
    {
      uint64_t v14 = type metadata accessor for DataModel.Error(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 8, 8, v14);
      swift_getKeyPath();
      swift_getKeyPath();
      outlined init with copy of DataModel.Error((uint64_t)v7, (uint64_t)v5, type metadata accessor for DataModel.State);
      swift_retain();
      static Published.subscript.setter();
      return outlined destroy of DataModel.Error((uint64_t)v7, type metadata accessor for DataModel.State);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void DataModel.subscribeToUpdateEvents()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Subscribing to update events...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  uint64_t v6 = *(void **)(v1 + 16);
  if (v6)
  {
    id v7 = v6;
    dispatch thunk of ARView.scene.getter();

    type metadata accessor for SceneEvents.Update();
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    swift_allocObject();
    swift_weakInit();
    Scene.subscribe<A>(to:on:_:)();
    swift_release();
    swift_release();
    outlined destroy of URL?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for EventSource?);
    outlined init with take of Animation?((uint64_t)v11, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
    uint64_t v8 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_updateSubscription;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)v9, v8, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
    swift_endAccess();
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in DataModel.subscribeToUpdateEvents()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    SceneEvents.Update.deltaTime.getter();
    DataModel.update(deltaTime:)(v1);
    return swift_release();
  }
  return result;
}

uint64_t DataModel.unsubscribeFromUpdateEvents()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Unsubscribing from update events...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  uint64_t v6 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_updateSubscription;
  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v6, (uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  if (*((void *)&v10 + 1))
  {
    outlined init with copy of Cancellable((uint64_t)&v9, (uint64_t)v8);
    outlined destroy of URL?((uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  }
  uint64_t v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v9, v6, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  return swift_endAccess();
}

void DataModel.setMTLPixelFormat(to:)(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  if (!v3)
  {
    __break(1u);
    return;
  }
  id v4 = objc_msgSend(v3, sel_layer);
  id v5 = objc_msgSend(v4, sel_sublayers);

  if (v5)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v6 >> 62)
    {
LABEL_19:
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (v7)
      {
LABEL_5:
        uint64_t v8 = 4;
        while (1)
        {
          uint64_t v9 = v8 - 4;
          if ((v6 & 0xC000000000000001) != 0)
          {
            id v10 = (id)MEMORY[0x24C533AF0](v8 - 4, v6);
            uint64_t v11 = v8 - 3;
            if (__OFADD__(v9, 1)) {
              goto LABEL_18;
            }
          }
          else
          {
            id v10 = *(id *)(v6 + 8 * v8);
            uint64_t v11 = v8 - 3;
            if (__OFADD__(v9, 1))
            {
LABEL_18:
              __break(1u);
              goto LABEL_19;
            }
          }
          id v14 = v10;
          self;
          uint64_t v12 = swift_dynamicCastObjCClass();
          if (v12) {
            break;
          }

          ++v8;
          if (v11 == v7) {
            goto LABEL_13;
          }
        }
        uint64_t v13 = (void *)v12;
        swift_bridgeObjectRelease_n();
        objc_msgSend(v13, sel_setPixelFormat_, a1);

        return;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v7) {
        goto LABEL_5;
      }
    }
LABEL_13:
    swift_bridgeObjectRelease_n();
  }
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DataModel.ARViewResolution@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized DataModel.ARViewResolution.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t specialized RangeReplaceableCollection<>.removeLast()(uint64_t a1)
{
  uint64_t v2 = v1[1];
  if ((v2 & 0x2000000000000000) == 0)
  {
    if ((*v1 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if ((v2 & 0xF00000000000000) == 0)
  {
    __break(1u);
    return MEMORY[0x270F9D7B8](a1);
  }
LABEL_5:
  a1 = String.index(before:)();

  return MEMORY[0x270F9D7B8](a1);
}

uint64_t DataModel.arViewResolution.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel____lazy_storage___arViewResolution;
  uint64_t result = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel____lazy_storage___arViewResolution);
  if (result == 5)
  {
    uint64_t v3 = (__CFString *)MEMORY[0x24C533410](0x6C65646F6DLL, 0xE500000000000000);
    specialized static DataModel.getIOProperty(name:)(v3);
    uint64_t v5 = v4;

    if (v5 && (char v6 = specialized Sequence<>.starts<A>(with:)(), swift_bridgeObjectRelease(), (v6 & 1) != 0)) {
      uint64_t result = 3;
    }
    else {
      uint64_t result = 4;
    }
    *(unsigned char *)(v0 + v1) = result;
  }
  return result;
}

uint64_t specialized Sequence<>.starts<A>(with:)()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      Swift::String_optional v5 = String.Iterator.next()();
      if (!v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (countAndFlagsBits == v5.value._countAndFlagsBits && object == v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      Swift::String_optional v4 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
      object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  char v6 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  BOOL v7 = v6 == 0;
  swift_bridgeObjectRelease();
  return v7;
}

void DataModel.startObjectCapturing()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v76 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v74 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for DispatchQoS();
  uint64_t v73 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v72 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for DispatchTime();
  uint64_t v71 = *(void *)(v79 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v79);
  uint64_t v69 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unint64_t v70 = (char *)&v67 - v8;
  *(void *)&long long v87 = type metadata accessor for Logger();
  *(void *)&long long v81 = *(void *)(v87 - 8);
  MEMORY[0x270FA5388](v87);
  *(void *)&long long v80 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for DataModel.State(0);
  uint64_t v10 = MEMORY[0x270FA5388](v78);
  uint64_t v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  id v14 = (char *)&v67 - v13;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  char v18 = (uint64_t *)((char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&long long v77 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *char v18 = static OS_dispatch_queue.main.getter();
  uint64_t v19 = *(void (**)(void))(v16 + 104);
  unsigned int v84 = *MEMORY[0x263F8F0E0];
  uint64_t v85 = v16 + 104;
  uint64_t v83 = (void (*)(uint64_t *, void, uint64_t))v19;
  v19(v18);
  char v20 = _dispatchPreconditionTest(_:)();
  uint64_t v82 = *(void (**)(uint64_t *, uint64_t))(v16 + 8);
  v82(v18, v15);
  if ((v20 & 1) == 0)
  {
    __break(1u);
LABEL_32:
    swift_once();
LABEL_11:
    __swift_project_value_buffer(v87, (uint64_t)logger);
    swift_retain_n();
    id v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v87 = swift_slowAlloc();
      aBlock[0] = v87;
      *(_DWORD *)uint64_t v33 = 136446210;
      uint64_t v85 = (uint64_t)(v33 + 4);
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t aBlock[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v31, v32, "startCapturing() called in state %{public}s != .detecting in object mode.  Dropping the call...", v33, 0xCu);
      uint64_t v36 = v87;
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v36, -1, -1);
      MEMORY[0x24C5348D0](v33, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    return;
  }
  uint64_t v68 = v3;
  uint64_t v86 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v21 = v2;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v22 = type metadata accessor for DataModel.Error(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v12, 5, 8, v22);
  char v23 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v14, (uint64_t)v12);
  outlined destroy of DataModel.Error((uint64_t)v12, type metadata accessor for DataModel.State);
  outlined destroy of DataModel.Error((uint64_t)v14, type metadata accessor for DataModel.State);
  if ((v23 & 1) == 0)
  {
    if (one-time initialization token for logger == -1) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
  unint64_t v24 = *(void **)(v21 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
  if (!v24)
  {
    lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
    swift_allocError();
    *uint64_t v37 = 0xD000000000000013;
    v37[1] = 0x80000002466C1910;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  uint64_t v25 = v21;
  uint64_t v26 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel;
  if (!*(void *)(v21 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_detectBoxModel)) {
    goto LABEL_36;
  }
  id v27 = v24;
  swift_retain();
  DetectModeBoxModel.currentCaptureBox.getter((uint64_t)v89);
  swift_release();
  outlined init with take of Animation?((uint64_t)v89, (uint64_t)v90, &demangling cache variable for type metadata for simd_float4x4?);
  if ((v90[64] & 1) == 0)
  {
    type metadata accessor for CaptureCircle();
    swift_allocObject();
    uint64_t v38 = CaptureCircle.init(numBins:binFillAnimDurationSecs:)(96, 0.25);
    uint64_t v39 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureCircle;
    *(void *)(v21 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureCircle) = v38;
    swift_release();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v78 = (uint64_t)v27;
    uint64_t v40 = v87;
    uint64_t v41 = __swift_project_value_buffer(v87, (uint64_t)logger);
    (*(void (**)(void, uint64_t, uint64_t))(v81 + 16))(v80, v41, v40);
    swift_retain();
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      int v44 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)int v44 = 134349056;
      uint64_t v45 = *(void *)(v25 + v39);
      if (!v45)
      {
LABEL_42:
        swift_release();
        __break(1u);
        return;
      }
      uint64_t v46 = v44;
      aBlock[0] = *(void *)(v45 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_2465C2000, v42, v43, "... new orbit made a new CaptureCircle with id= %{public}ld", v46, 0xCu);
      MEMORY[0x24C5348D0](v46, -1, -1);

      uint64_t v40 = v87;
    }
    else
    {

      swift_release();
    }
    (*(void (**)(void, uint64_t))(v81 + 8))(v80, v40);
    id v47 = (long long *)(v25 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_scanningModelToWorldTransform);
    outlined init with take of Animation?((uint64_t)v89, v25 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_scanningModelToWorldTransform, &demangling cache variable for type metadata for simd_float4x4?);
    uint64_t v48 = *(void *)(v25 + v26);
    if (!v48) {
      goto LABEL_37;
    }
    swift_retain();
    *char v18 = static OS_dispatch_queue.main.getter();
    v83(v18, v84, v15);
    char v49 = _dispatchPreconditionTest(_:)();
    v82(v18, v15);
    if (v49)
    {
      DetectModeBoxModel.performSwitchStateTransitions(from:to:)(*(unsigned __int8 *)(v48 + 24), 0);
      *(unsigned char *)(v48 + 24) = 0;
      swift_release();
      uint64_t v50 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureBoxModel;
      uint64_t v51 = *(void *)(v25 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureBoxModel);
      if (!v51)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      if (v47[4])
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      long long v87 = *v47;
      long long v81 = v47[1];
      long long v80 = v47[2];
      long long v77 = v47[3];
      swift_retain();
      *char v18 = static OS_dispatch_queue.main.getter();
      v83(v18, v84, v15);
      char v52 = _dispatchPreconditionTest(_:)();
      v82(v18, v15);
      if (v52)
      {
        long long v53 = v81;
        *(_OWORD *)(v51 + 144) = v87;
        *(_OWORD *)(v51 + 160) = v53;
        long long v54 = v77;
        *(_OWORD *)(v51 + 176) = v80;
        *(_OWORD *)(v51 + 192) = v54;
        *(unsigned char *)(v51 + 208) = 0;
        CaptureModeBoxModel.updateCurrentEntityTransform()();
        swift_release();
        if (!*(void *)(v25 + v50))
        {
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        swift_retain();
        CaptureModeBoxModel.enable()();
        swift_release();
        uint64_t v55 = *(void *)(v25 + v50);
        uint64_t v56 = (void *)v78;
        if (!v55)
        {
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        swift_retain();
        *char v18 = static OS_dispatch_queue.main.getter();
        v83(v18, v84, v15);
        char v57 = _dispatchPreconditionTest(_:)();
        v82(v18, v15);
        if (v57)
        {
          CaptureModeBoxModel.executeSquish(duration:)(0.3);
          swift_release();
          uint64_t v85 = static OS_dispatch_queue.main.getter();
          int v58 = v69;
          static DispatchTime.now()();
          uint64_t v59 = v70;
          MEMORY[0x24C533360](v58, 0.3);
          *(void *)&long long v87 = *(void *)(v71 + 8);
          ((void (*)(char *, uint64_t))v87)(v58, v79);
          uint64_t v60 = swift_allocObject();
          *(void *)(v60 + 16) = v25;
          *(void *)(v60 + 24) = v56;
          aBlock[4] = (uint64_t)partial apply for closure #1 in DataModel.startObjectCapturing();
          aBlock[5] = v60;
          aBlock[0] = MEMORY[0x263EF8330];
          aBlock[1] = 1107296256;
          aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
          aBlock[3] = (uint64_t)&block_descriptor_6;
          uint64_t v61 = _Block_copy(aBlock);
          id v62 = v56;
          swift_retain();
          swift_release();
          uint64_t v63 = v72;
          static DispatchQoS.unspecified.getter();
          aBlock[0] = MEMORY[0x263F8EE78];
          lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
          lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
          uint64_t v64 = v74;
          uint64_t v65 = v68;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          id v66 = (void *)v85;
          MEMORY[0x24C5337E0](v59, v63, v64, v61);
          _Block_release(v61);

          (*(void (**)(char *, uint64_t))(v76 + 8))(v64, v65);
          (*(void (**)(char *, uint64_t))(v73 + 8))(v63, v75);
          ((void (*)(char *, uint64_t))v87)(v59, v79);
          return;
        }
        goto LABEL_35;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v87, (uint64_t)logger);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    objc_super v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)objc_super v30 = 0;
    _os_log_impl(&dword_2465C2000, v28, v29, "startCapturing() called before the bounding box was settled. Please wait for the bounding box to settle before starting capture!", v30, 2u);
    MEMORY[0x24C5348D0](v30, -1, -1);
  }
  else
  {
  }
}

uint64_t closure #1 in DataModel.startObjectCapturing()(uint64_t a1)
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  uint64_t v5 = &lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute;
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v19 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    char v8 = *(unsigned char *)(a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_scanningModelToWorldTransform + 64);
    long long v9 = *(_OWORD *)(a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_scanningModelToWorldTransform + 16);
    v20[0] = *(_OWORD *)(a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_scanningModelToWorldTransform);
    v20[1] = v9;
    long long v10 = *(_OWORD *)(a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_scanningModelToWorldTransform + 48);
    void v20[2] = *(_OWORD *)(a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_scanningModelToWorldTransform + 32);
    uint64_t v20[3] = v10;
    char v21 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for simd_float4x4?);
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)&v20[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v5 = &lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v3, v4, "Start capturing... using box: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v7, -1, -1);
    MEMORY[0x24C5348D0](v6, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v13 = type metadata accessor for ObjectCaptureSession.CaptureOptions();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectCaptureSession.CaptureOptions.init()();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  ObjectCaptureSession.CaptureOptions.usePlaneFiltering.setter();
  ObjectCaptureSession.CaptureOptions.useFreeformScanVolume.setter();
  outlined init with take of Animation?(a1 + v5[170], (uint64_t)v20, &demangling cache variable for type metadata for simd_float4x4?);
  dispatch thunk of ObjectCaptureSession.startCapturing(inside:with:)();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

void DataModel.startFreeformCapturing()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DataModel.State(0);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  char v8 = (char *)&v31 - v7;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (uint64_t *)((char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t *v12 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x263F8F0E0], v9);
  char v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_6;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v14 = type metadata accessor for DataModel.Error(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v6, 4, 8, v14);
  char v15 = specialized static DataModel.State.== infix(_:_:)((uint64_t)v8, (uint64_t)v6);
  outlined destroy of DataModel.Error((uint64_t)v6, type metadata accessor for DataModel.State);
  outlined destroy of DataModel.Error((uint64_t)v8, type metadata accessor for DataModel.State);
  if (v15)
  {
    uint64_t v16 = *(void **)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureSession);
    if (v16)
    {
      uint64_t v17 = type metadata accessor for ObjectCaptureSession.CaptureOptions();
      uint64_t v18 = *(void *)(v17 - 8);
      MEMORY[0x270FA5388](v17);
      char v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      id v21 = v16;
      ObjectCaptureSession.CaptureOptions.init()();
      ObjectCaptureSession.CaptureOptions.usePlaneFiltering.setter();
      ObjectCaptureSession.CaptureOptions.useFreeformScanVolume.setter();
      ObjectCaptureSession.CaptureOptions.freeformPointDensityThreshold.setter();
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      char v39 = 1;
      dispatch thunk of ObjectCaptureSession.startCapturing(inside:with:)();
      *(unsigned char *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_captureMode) = 2;
      DataModel.captureMode.didset();
      type metadata accessor for FreeformMeshManager();
      swift_allocObject();
      uint64_t v22 = FreeformMeshManager.init(config:)();

      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      *(void *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_meshManager) = v22;
      swift_release();
    }
    else
    {
      lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
      swift_allocError();
      *objc_super v30 = 0xD000000000000013;
      v30[1] = 0x80000002466C1910;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    return;
  }
  if (one-time initialization token for logger != -1) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)logger);
  swift_retain_n();
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v40 = v32;
    uint64_t v33 = v1;
    *(_DWORD *)uint64_t v26 = 136446210;
    id v31 = v26 + 4;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v27 = String.init<A>(describing:)();
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v24, v25, "startCapturing() called in state %{public}s != .ready in area mode.  Ignore the call...", v26, 0xCu);
    uint64_t v29 = v32;
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v29, -1, -1);
    MEMORY[0x24C5348D0](v26, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t type metadata accessor for DataModel.State(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for DataModel.State);
}

void type metadata accessor for Published<DataModel.State>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for Published<Bool>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Published();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void type metadata accessor for Published<CoveragePointRenderer?>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for DataModel.LocalARCoachingViewDelegate()
{
  return self;
}

uint64_t type metadata accessor for DataModel.LocalDetectBoxDelegate()
{
  return self;
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance DataModel@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for DataModel(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

id RangefinderObserver.__deallocating_deinit()
{
  return DataModel.LocalARCoachingViewDelegate.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for RangefinderObserver);
}

uint64_t type metadata accessor for RangefinderObserver()
{
  return self;
}

char *RETapGesture.init(model:onTap:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D12RETapGesture_model] = 0;
  uint64_t v7 = &v3[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D12RETapGesture_onTap];
  unint64_t v8 = (objc_class *)type metadata accessor for RETapGesture();
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  v16.receiver = v3;
  v16.super_class = v8;
  uint64_t v9 = (char *)objc_msgSendSuper2(&v16, sel_initWithTarget_action_, 0, 0);
  uint64_t v10 = &v9[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D12RETapGesture_model];
  swift_beginAccess();
  uint64_t v11 = v9;
  swift_retain();
  swift_unownedRelease();
  *(void *)uint64_t v10 = a1;
  swift_endAccess();
  swift_unownedRetain();
  swift_release();
  unint64_t v12 = &v11[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D12RETapGesture_onTap];
  uint64_t v13 = *(void *)&v11[OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D12RETapGesture_onTap];
  *(void *)unint64_t v12 = a2;
  *((void *)v12 + 1) = a3;
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?(v13);
  uint64_t v14 = v11;
  objc_msgSend(v14, sel_addTarget_action_, v14, sel_onUITap_);

  swift_release();
  swift_release();
  return v14;
}

void RETapGesture.onUITap(_:)(void *a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = (uint64_t *)(v2 + OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D12RETapGesture_model);
  swift_beginAccess();
  uint64_t v5 = *v4;
  swift_unownedRetainStrong();
  if (v5)
  {
    id v6 = *(id *)(v5 + 16);
    swift_release();
    objc_msgSend(a1, sel_locationInView_, v6);
    double v8 = v7;
    double v10 = v9;

    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)logger);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v20 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      type metadata accessor for CGPoint(0);
      uint64_t v16 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v12, v13, "onTap at %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v15, -1, -1);
      MEMORY[0x24C5348D0](v14, -1, -1);
    }

    uint64_t v18 = *(void (**)(uint64_t, double, double))(v2
                                                         + OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D12RETapGesture_onTap);
    if (v18)
    {
      uint64_t v19 = swift_retain();
      v18(v19, v8, v10);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?((uint64_t)v18);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id RETapGesture.__deallocating_deinit()
{
  return DataModel.LocalARCoachingViewDelegate.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for RETapGesture);
}

uint64_t type metadata accessor for RETapGesture()
{
  return self;
}

void REPanGesture.onUIPan()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "onPan", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  id v6 = *(void (**)(uint64_t))(v1
                                      + OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D12REPanGesture_onPan);
  if (v6)
  {
    uint64_t v7 = swift_retain();
    v6(v7);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?((uint64_t)v6);
  }
  else
  {
    __break(1u);
  }
}

id REPanGesture.__deallocating_deinit()
{
  return DataModel.LocalARCoachingViewDelegate.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for REPanGesture);
}

uint64_t type metadata accessor for REPanGesture()
{
  return self;
}

void RELongPressGesture.onUILongPress(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2
                 + OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D18RELongPressGesture_model);
  swift_unownedRetainStrong();
  if (v4)
  {
    id v5 = *(id *)(v4 + 16);
    swift_release();
    objc_msgSend(a1, sel_locationInView_, v5);
    double v7 = v6;
    double v9 = v8;

    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)logger);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v19 = v14;
      *(_DWORD *)os_log_type_t v13 = 136446210;
      type metadata accessor for CGPoint(0);
      uint64_t v15 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v11, v12, "onLongPress at %{public}s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v14, -1, -1);
      MEMORY[0x24C5348D0](v13, -1, -1);
    }

    unint64_t v17 = *(void (**)(uint64_t, double, double))(v2
                                                         + OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D18RELongPressGesture_onLongPress);
    if (v17)
    {
      uint64_t v18 = swift_retain();
      v17(v18, v7, v9);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?((uint64_t)v17);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void @objc RETapGesture.init(target:action:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id RELongPressGesture.__deallocating_deinit()
{
  return DataModel.LocalARCoachingViewDelegate.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for RELongPressGesture);
}

id DataModel.LocalARCoachingViewDelegate.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc RETapGesture.__ivar_destroyer(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  swift_unownedRelease();
  uint64_t v6 = *(void *)(a1 + *a4);

  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?(v6);
}

uint64_t type metadata accessor for RELongPressGesture()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for DataModel.ARViewResolution(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2466505BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for DataModel.ARViewResolution()
{
  return &unk_26FACF218;
}

unsigned char *storeEnumTagSinglePayload for DataModel.CaptureMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2466506C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DataModel.CaptureMode()
{
  return &type metadata for DataModel.CaptureMode;
}

uint64_t *initializeBufferWithCopyOfBuffer for DataModel.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for DataModel.Error(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 8, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v12 = type metadata accessor for ObjectCaptureSession.Error();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload > 1)
      {
        memcpy(a1, a2, *(void *)(v8 + 64));
      }
      else
      {
        uint64_t v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 8, v7);
    }
  }
  return a1;
}

uint64_t type metadata accessor for DataModel.Error(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for DataModel.Error);
}

uint64_t destroy for DataModel.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DataModel.Error(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 8, v2);
  if (!result)
  {
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result == 2)
    {
      uint64_t v4 = type metadata accessor for ObjectCaptureSession.Error();
      int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
      return v5(a1, v4);
    }
    else if (result <= 1)
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void *initializeWithCopy for DataModel.State(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DataModel.Error(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 8, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = type metadata accessor for ObjectCaptureSession.Error();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }
    else
    {
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 8, v6);
  }
  return a1;
}

void *assignWithCopy for DataModel.State(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DataModel.Error(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 8, v6);
  int v10 = v8(a2, 8, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2) {
        return a1;
      }
      outlined destroy of DataModel.Error((uint64_t)a1, type metadata accessor for DataModel.Error);
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v16 = type metadata accessor for ObjectCaptureSession.Error();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      if (EnumCaseMultiPayload <= 1)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      size_t v12 = *(void *)(v7 + 64);
      goto LABEL_9;
    }
    outlined destroy of DataModel.Error((uint64_t)a1, type metadata accessor for DataModel.Error);
LABEL_8:
    size_t v12 = *(void *)(*(void *)(a3 - 8) + 64);
LABEL_9:
    memcpy(a1, a2, v12);
    return a1;
  }
  if (v10) {
    goto LABEL_8;
  }
  unsigned int v11 = swift_getEnumCaseMultiPayload();
  if (v11 == 2)
  {
    uint64_t v14 = type metadata accessor for ObjectCaptureSession.Error();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
    swift_storeEnumTagMultiPayload();
  }
  else if (v11 > 1)
  {
    memcpy(a1, a2, *(void *)(v7 + 64));
  }
  else
  {
    *a1 = *a2;
    a1[1] = a2[1];
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 8, v6);
  return a1;
}

void *initializeWithTake for DataModel.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DataModel.Error(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 8, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v8 = type metadata accessor for ObjectCaptureSession.Error();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 8, v6);
  }
  return a1;
}

void *assignWithTake for DataModel.State(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DataModel.Error(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 8, v6);
  int v10 = v8(a2, 8, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2) {
        return a1;
      }
      outlined destroy of DataModel.Error((uint64_t)a1, type metadata accessor for DataModel.Error);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v13 = type metadata accessor for ObjectCaptureSession.Error();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      size_t v12 = *(void *)(v7 + 64);
      goto LABEL_8;
    }
    outlined destroy of DataModel.Error((uint64_t)a1, type metadata accessor for DataModel.Error);
LABEL_7:
    size_t v12 = *(void *)(*(void *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v12);
    return a1;
  }
  if (v10) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v11 = type metadata accessor for ObjectCaptureSession.Error();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(v7 + 64));
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 8, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataModel.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246651250);
}

uint64_t sub_246651250(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataModel.Error(0);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 9) {
    return v5 - 8;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DataModel.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2466512D0);
}

uint64_t sub_2466512D0(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for DataModel.Error(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for DataModel.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DataModel.Error(0);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 8, v2);
}

uint64_t destructiveInjectEnumTag for DataModel.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataModel.Error(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 8, v4);
}

uint64_t type metadata completion function for DataModel.State()
{
  uint64_t result = type metadata accessor for DataModel.Error(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DataModel.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = type metadata accessor for ObjectCaptureSession.Error();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for DataModel.Error(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v3 = type metadata accessor for ObjectCaptureSession.Error();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  else if (result <= 1)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for DataModel.Error(void *a1, void *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for ObjectCaptureSession.Error();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for DataModel.Error(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DataModel.Error((uint64_t)a1, type metadata accessor for DataModel.Error);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v7 = type metadata accessor for ObjectCaptureSession.Error();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for DataModel.Error(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = type metadata accessor for ObjectCaptureSession.Error();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for DataModel.Error(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DataModel.Error((uint64_t)a1, type metadata accessor for DataModel.Error);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for ObjectCaptureSession.Error();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for DataModel.Error()
{
  uint64_t result = type metadata accessor for ObjectCaptureSession.Error();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for Error in DataModel.Error()
{
  return lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
}

unint64_t lazy protocol witness table accessor for type DataModel.CaptureMode and conformance DataModel.CaptureMode()
{
  unint64_t result = lazy protocol witness table cache variable for type DataModel.CaptureMode and conformance DataModel.CaptureMode;
  if (!lazy protocol witness table cache variable for type DataModel.CaptureMode and conformance DataModel.CaptureMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataModel.CaptureMode and conformance DataModel.CaptureMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DataModel.ARViewResolution and conformance DataModel.ARViewResolution()
{
  unint64_t result = lazy protocol witness table cache variable for type DataModel.ARViewResolution and conformance DataModel.ARViewResolution;
  if (!lazy protocol witness table cache variable for type DataModel.ARViewResolution and conformance DataModel.ARViewResolution)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataModel.ARViewResolution and conformance DataModel.ARViewResolution);
  }
  return result;
}

uint64_t key path getter for DataModel.showMiniView : DataModel@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  unint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for DataModel.showMiniView : DataModel()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

double key path getter for DataModel.miniViewScreenRotationAngle : DataModel@<D0>(double *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for DataModel.miniViewScreenRotationAngle : DataModel()
{
  return static Published.subscript.setter();
}

uint64_t key path getter for DataModel.showCenterReticle : DataModel@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

uint64_t key path setter for DataModel.showCenterReticle : DataModel()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

uint64_t key path getter for DataModel.userSelectedToHideObjectReticle : DataModel@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

uint64_t key path setter for DataModel.userSelectedToHideObjectReticle : DataModel()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

uint64_t key path getter for DataModel.coveragePointRenderer : DataModel@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for DataModel.coveragePointRenderer : DataModel(void **a1)
{
  unint64_t v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v1;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t key path getter for DataModel.id : DataModel()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t key path setter for DataModel.id : DataModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  swift_getKeyPath();
  swift_getKeyPath();
  v9(v6, (uint64_t)v8, v2);
  swift_retain();
  static Published.subscript.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t key path getter for DataModel.numShotsTaken : DataModel@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for DataModel.numShotsTaken : DataModel()
{
  return static Published.subscript.setter();
}

double key path getter for DataModel.reticleAimVector : DataModel@<D0>(double *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for DataModel.reticleAimVector : DataModel()
{
  return static Published.subscript.setter();
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = specialized _NativeSet.init(_:capacity:)(v2, v1);
  uint64_t v10 = v3;
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x263EFDD18]);
  swift_retain();
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x263EFDD18]);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
    specialized _NativeSet._delete(at:)(v6);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      *uint64_t v0 = v10;
      return v8;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = (void *)swift_retain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ObjectCaptureSession.Feedback>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v26 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = v27[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v26) {
            goto LABEL_33;
          }
          unint64_t v15 = v27[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v26) {
              goto LABEL_33;
            }
            unint64_t v15 = v27[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v26)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v25 = 1 << *(unsigned char *)(v2 + 32);
                if (v25 > 63) {
                  bzero(v27, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v27 = -1 << v25;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v27[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v26) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v27[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      type metadata accessor for AnyCancellable();
      lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x263EFDD18]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v19 = result & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v21 = 0;
        unint64_t v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v23 = v20 == v22;
          if (v20 == v22) {
            unint64_t v20 = 0;
          }
          v21 |= v23;
          uint64_t v24 = *(void *)(v8 + 8 * v20);
        }
        while (v24 == -1);
        unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ObjectCaptureSession.Feedback>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    unint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    int64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    unint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        int64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          int64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            int64_t v16 = v6[v5];
            if (!v16)
            {
              uint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                int64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  int64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        int64_t v9 = (v16 - 1) & v16;
        int64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      unint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      char v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v22 = 0;
        BOOL v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v24 = v21 == v23;
          if (v21 == v23) {
            char v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      type metadata accessor for AnyCancellable();
      lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x263EFDD18]);
      do
      {
        uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 >= v9 && v2 >= v10)
          {
LABEL_16:
            uint64_t v13 = *(void *)(v3 + 48);
            int64_t v14 = (void *)(v13 + 8 * v2);
            unint64_t v15 = (void *)(v13 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v14 >= v15 + 1))
            {
              *int64_t v14 = *v15;
              int64_t v2 = v6;
            }
          }
        }
        else if (v10 >= v9 || v2 >= v10)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  unsigned char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        unint64_t v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          unint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (unsigned char *)(v12 + v2);
          int64_t v14 = (unsigned char *)(v12 + v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  unint64_t v15 = *(void *)(v3 + 16);
  uint64_t v16 = __OFSUB__(v15, 1);
  BOOL v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for AnyCancellable();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x263EFDD18]);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

uint64_t specialized Set._Variant.remove(at:)(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  int v6 = a2;
  unint64_t v7 = result;
  uint64_t v8 = *v4;
  if ((*v4 & 0xC000000000000001) == 0)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    int v11 = result;
    uint64_t v12 = *v4;
    if ((a3 & 1) == 0)
    {
      if ((v7 & 0x8000000000000000) != 0 || 1 << *(unsigned char *)(v12 + 32) <= (uint64_t)v7)
      {
        __break(1u);
      }
      else if ((*(void *)(v12 + 8 * (v7 >> 6) + 56) >> v7))
      {
        if (*(_DWORD *)(v12 + 36) == v6)
        {
LABEL_20:
          *uint64_t v4 = 0x8000000000000000;
          if (!v11) {
            specialized _NativeSet.copy()();
          }
          uint64_t v10 = *(void *)(*(void *)(v12 + 48) + 8 * v7);
          specialized _NativeSet._delete(at:)(v7);
          *uint64_t v4 = v12;
          goto LABEL_23;
        }
        __break(1u);
        goto LABEL_13;
      }
      __break(1u);
      goto LABEL_26;
    }
LABEL_13:
    uint64_t result = __CocoaSet.Index.age.getter();
    if (result == *(_DWORD *)(v12 + 36))
    {
      __CocoaSet.Index.element.getter();
      type metadata accessor for AnyCancellable();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x263EFDD18]);
      uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v7 = v13 & ~v14;
      if ((*(void *)(v12 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
      {
        uint64_t v15 = ~v14;
        lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x263EFDD18]);
        while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        {
          unint64_t v7 = (v7 + 1) & v15;
          if (((*(void *)(v12 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_18;
          }
        }
      }
      else
      {
LABEL_18:
        swift_release();
        __break(1u);
      }
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v12 = *v4;
      goto LABEL_20;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (a3)
  {
    if (v8 < 0) {
      uint64_t v9 = *v4;
    }
    else {
      uint64_t v9 = v8 & 0xFFFFFFFFFFFFFF8;
    }
    MEMORY[0x24C533A40](result, a2, v9);
    type metadata accessor for AnyCancellable();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    swift_unknownObjectRelease();
    uint64_t v10 = specialized Set._Variant._migrateToNative(_:removing:)();
    swift_release();
LABEL_23:
    swift_bridgeObjectRelease();
    return v10;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized static DataModel.Error.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataModel.Error(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  unint64_t v7 = (uint64_t *)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (uint64_t *)((char *)&v34 - v12);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (uint64_t *)((char *)&v34 - v14);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (DataModel.Error, DataModel.Error));
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  unint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v20 = &v19[*(int *)(v17 + 56)];
  outlined init with copy of DataModel.Error(a1, (uint64_t)v19, type metadata accessor for DataModel.Error);
  outlined init with copy of DataModel.Error(a2, (uint64_t)v20, type metadata accessor for DataModel.Error);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of DataModel.Error((uint64_t)v19, (uint64_t)v13, type metadata accessor for DataModel.Error);
      uint64_t v22 = *v13;
      uint64_t v21 = v13[1];
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_3;
      }
      goto LABEL_5;
    case 2u:
      outlined init with copy of DataModel.Error((uint64_t)v19, (uint64_t)v10, type metadata accessor for DataModel.Error);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v27 = type metadata accessor for ObjectCaptureSession.Error();
      uint64_t v28 = v27;
      uint64_t v29 = *(void *)(v27 - 8);
      if (EnumCaseMultiPayload != 2)
      {
        (*(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(v10, v27);
        goto LABEL_23;
      }
      MEMORY[0x270FA5388](v27);
      id v31 = (char *)&v34 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v31, v20, v28);
      char v25 = MEMORY[0x24C5324B0](v10, v31);
      uint64_t v32 = *(void (**)(char *, uint64_t))(v29 + 8);
      v32(v31, v28);
      v32(v10, v28);
LABEL_15:
      outlined destroy of DataModel.Error((uint64_t)v19, type metadata accessor for DataModel.Error);
      return v25 & 1;
    case 3u:
      outlined init with copy of DataModel.Error((uint64_t)v19, (uint64_t)v7, type metadata accessor for DataModel.Error);
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_23;
      }
      char v25 = *v7 == *(void *)v20;
      goto LABEL_15;
    case 4u:
      if (swift_getEnumCaseMultiPayload() == 4) {
        goto LABEL_25;
      }
      goto LABEL_23;
    case 5u:
      if (swift_getEnumCaseMultiPayload() == 5) {
        goto LABEL_25;
      }
      goto LABEL_23;
    case 6u:
      if (swift_getEnumCaseMultiPayload() == 6) {
        goto LABEL_25;
      }
      goto LABEL_23;
    default:
      outlined init with copy of DataModel.Error((uint64_t)v19, (uint64_t)v15, type metadata accessor for DataModel.Error);
      uint64_t v22 = *v15;
      uint64_t v21 = v15[1];
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_3:
        swift_bridgeObjectRelease();
LABEL_23:
        outlined destroy of URL?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for (DataModel.Error, DataModel.Error));
        char v25 = 0;
      }
      else
      {
LABEL_5:
        if (v22 == *(void *)v20 && v21 == *((void *)v20 + 1))
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v24 & 1) == 0)
          {
            outlined destroy of DataModel.Error((uint64_t)v19, type metadata accessor for DataModel.Error);
            char v25 = 0;
            return v25 & 1;
          }
        }
LABEL_25:
        outlined destroy of DataModel.Error((uint64_t)v19, type metadata accessor for DataModel.Error);
        char v25 = 1;
      }
      return v25 & 1;
  }
}

uint64_t specialized static DataModel.State.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataModel.Error(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DataModel.State(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataModel.State, DataModel.State));
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of DataModel.Error(a1, (uint64_t)v14, type metadata accessor for DataModel.State);
  outlined init with copy of DataModel.Error(a2, v15, type metadata accessor for DataModel.State);
  uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  switch(v16((uint64_t)v14, 8, v4))
  {
    case 1u:
      if (v16(v15, 8, v4) != 1) {
        goto LABEL_19;
      }
      goto LABEL_5;
    case 2u:
      if (v16(v15, 8, v4) != 2) {
        goto LABEL_19;
      }
      goto LABEL_5;
    case 3u:
      if (v16(v15, 8, v4) != 3) {
        goto LABEL_19;
      }
      goto LABEL_5;
    case 4u:
      if (v16(v15, 8, v4) != 4) {
        goto LABEL_19;
      }
      goto LABEL_5;
    case 5u:
      if (v16(v15, 8, v4) != 5) {
        goto LABEL_19;
      }
      goto LABEL_5;
    case 6u:
      if (v16(v15, 8, v4) != 6) {
        goto LABEL_19;
      }
      goto LABEL_5;
    case 7u:
      if (v16(v15, 8, v4) != 7) {
        goto LABEL_19;
      }
      goto LABEL_5;
    case 8u:
      if (v16(v15, 8, v4) != 8) {
        goto LABEL_19;
      }
LABEL_5:
      outlined destroy of DataModel.Error((uint64_t)v14, type metadata accessor for DataModel.State);
      char v17 = 1;
      break;
    default:
      outlined init with copy of DataModel.Error((uint64_t)v14, (uint64_t)v10, type metadata accessor for DataModel.State);
      if (v16(v15, 8, v4))
      {
        outlined destroy of DataModel.Error((uint64_t)v10, type metadata accessor for DataModel.Error);
LABEL_19:
        outlined destroy of URL?((uint64_t)v14, &demangling cache variable for type metadata for (DataModel.State, DataModel.State));
        char v17 = 0;
      }
      else
      {
        outlined init with take of DataModel.State(v15, (uint64_t)v7, type metadata accessor for DataModel.Error);
        char v17 = specialized static DataModel.Error.== infix(_:_:)((uint64_t)v10, (uint64_t)v7);
        outlined destroy of DataModel.Error((uint64_t)v7, type metadata accessor for DataModel.Error);
        outlined destroy of DataModel.Error((uint64_t)v10, type metadata accessor for DataModel.Error);
        outlined destroy of DataModel.Error((uint64_t)v14, type metadata accessor for DataModel.State);
      }
      break;
  }
  return v17 & 1;
}

void specialized DataModel.setCustomRenderOptions(on:)()
{
  uint64_t v0 = type metadata accessor for ARView.RenderOptions();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = &v15[-v5];
  static ARView.RenderOptions.disableGroundingShadows.getter();
  unint64_t v7 = (void (*)(unsigned char *, void))ARView.renderOptions.modify();
  specialized OptionSet<>.insert(_:)(v6, (uint64_t)v4);
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  v7(v15, 0);
  static ARView.RenderOptions.disableDepthOfField.getter();
  uint64_t v9 = (void (*)(unsigned char *, void))ARView.renderOptions.modify();
  specialized OptionSet<>.insert(_:)(v6, (uint64_t)v4);
  v8(v4, v0);
  v8(v6, v0);
  v9(v15, 0);
  static ARView.RenderOptions.disablePersonOcclusion.getter();
  uint64_t v10 = (void (*)(unsigned char *, void))ARView.renderOptions.modify();
  specialized OptionSet<>.insert(_:)(v6, (uint64_t)v4);
  v8(v4, v0);
  v8(v6, v0);
  v10(v15, 0);
  static ARView.RenderOptions.disableAREnvironmentLighting.getter();
  uint64_t v11 = (void (*)(unsigned char *, void))ARView.renderOptions.modify();
  specialized OptionSet<>.insert(_:)(v6, (uint64_t)v4);
  v8(v4, v0);
  v8(v6, v0);
  v11(v15, 0);
  id v12 = objc_msgSend(self, sel_currentDevice);
  id v13 = objc_msgSend(v12, sel_userInterfaceIdiom);

  if (!v13)
  {
    static ARView.RenderOptions.disableMotionBlur.getter();
    uint64_t v14 = (void (*)(unsigned char *, void))ARView.renderOptions.modify();
    specialized OptionSet<>.insert(_:)(v6, (uint64_t)v4);
    v8(v4, v0);
    v8(v6, v0);
    v14(v15, 0);
  }
}

CFTypeRef specialized static DataModel.getIOProperty(name:)(const __CFString *a1)
{
  uint64_t v2 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v2 - 8);
  mach_port_t v3 = *MEMORY[0x263F0EC88];
  CFDictionaryRef v4 = IOServiceMatching("IOPlatformExpertDevice");
  io_service_t MatchingService = IOServiceGetMatchingService(v3, v4);
  CFTypeRef result = IORegistryEntryCreateCFProperty(MatchingService, a1, (CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  if (result)
  {
    unint64_t v7 = result;
    uint64_t v8 = (const void *)swift_unknownObjectRetain();
    CFTypeID v9 = CFGetTypeID(v8);
    if (v9 == CFStringGetTypeID())
    {
      if (swift_dynamicCast()) {
        return (CFTypeRef)v19;
      }
      else {
        return 0;
      }
    }
    CFTypeID v11 = CFGetTypeID(v7);
    if (v11 != CFDataGetTypeID() || (swift_unknownObjectRetain(), !swift_dynamicCast()))
    {
      swift_unknownObjectRelease();
      return 0;
    }
    static String.Encoding.utf8.getter();
    uint64_t v10 = String.init(data:encoding:)();
    unint64_t v13 = v12;
    if (v12)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = specialized BidirectionalCollection.last.getter(v10, v13);
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      if (v16)
      {
        if (!v14 && v16 == 0xE100000000000000)
        {
          uint64_t v17 = swift_bridgeObjectRelease();
LABEL_16:
          specialized RangeReplaceableCollection<>.removeLast()(v17);
          swift_unknownObjectRelease();
          outlined consume of Data._Representation(v19, v20);
          swift_bridgeObjectRelease();
          return (CFTypeRef)v10;
        }
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v17 = swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_16;
        }
      }
    }
    swift_unknownObjectRelease();
    outlined consume of Data._Representation(v19, v20);
    return (CFTypeRef)v10;
  }
  __break(1u);
  return result;
}

void specialized DataModel.computeFactorScale(arViewResolution:)()
{
  id v0 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v0, sel_bounds);
  CGRectGetWidth(v1);
  objc_msgSend(v0, sel_bounds);
  CGRectGetHeight(v2);
  objc_msgSend(v0, sel_scale);
}

uint64_t specialized DataModel.throwIfInsufficientStorage(imagesDirectory:checkpointDirectory:)(uint8_t *a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  CFTypeID v11 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = static PhotogrammetryFileHelpers.requiredBytesForImagesCaptureDirectory.getter();
  uint64_t v13 = static PhotogrammetryFileHelpers.requiredBytesCheckpointDir(maxNumImagesBytes:)();
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    uint64_t v94 = (uint8_t *)a2;
    uint64_t v96 = v13;
    uint64_t v92 = v2;
    uint64_t v99 = v8;
    if (one-time initialization token for logger == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)logger);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v97 = v11;
  uint64_t v98 = v9;
  float32x4_t v95 = v7;
  if (v19)
  {
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v90 = swift_slowAlloc();
    uint64_t v101 = v90;
    *(_DWORD *)unint64_t v20 = 136446210;
    uint64_t v89 = v20 + 4;
    uint64_t v21 = (void *)static PhotogrammetryFileHelpers.byteFormatter.getter();
    uint64_t v91 = a1;
    uint64_t v22 = v21;
    uint64_t v23 = v16;
    id v24 = objc_msgSend(v21, sel_stringFromByteCount_, v14);

    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v14;
    unint64_t v28 = v27;

    uint64_t v16 = v23;
    uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v28, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v14 = v26;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v17, v18, "Checking that we have sufficient storage for %{public}s...", v20, 0xCu);
    uint64_t v29 = v90;
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v29, -1, -1);
    MEMORY[0x24C5348D0](v20, -1, -1);
  }

  uint64_t v30 = static PhotogrammetryFileHelpers.getAvailableStorage(ofDir:)();
  id v31 = Logger.logObject.getter();
  if (v30 >= v14)
  {
    os_log_type_t v42 = static os_log_type_t.info.getter();
    BOOL v43 = os_log_type_enabled(v31, v42);
    uint64_t v93 = v14;
    if (v43)
    {
      int v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      uint64_t v101 = v45;
      *(_DWORD *)int v44 = 136446210;
      uint64_t v91 = v44 + 4;
      uint64_t v46 = (void *)static PhotogrammetryFileHelpers.byteFormatter.getter();
      id v47 = objc_msgSend(v46, sel_stringFromByteCount_, v30);

      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v49 = v16;
      unint64_t v51 = v50;

      uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v51, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v16 = v49;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v31, v42, "... Success!  We have %{public}s available.", v44, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v45, -1, -1);
      MEMORY[0x24C5348D0](v44, -1, -1);
    }

    uint64_t v53 = v98;
    uint64_t v52 = v99;
    long long v54 = v97;
    uint64_t v55 = (uint64_t)v95;
    outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v94, (uint64_t)v95, &demangling cache variable for type metadata for URL?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v55, 1, v52) == 1)
    {
      static PhotogrammetryFileHelpers.temporaryDirectory.getter();
      outlined destroy of URL?(v55, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v54, v55, v52);
    }
    float32x4_t v95 = (char *)v16;
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v56, v57))
    {
      int v58 = (uint8_t *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      uint64_t v101 = v59;
      *(_DWORD *)int v58 = 136446210;
      uint64_t v94 = v58 + 4;
      uint64_t v60 = (void *)static PhotogrammetryFileHelpers.byteFormatter.getter();
      uint64_t v61 = v96;
      id v62 = objc_msgSend(v60, sel_stringFromByteCount_, v96);

      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v65 = v64;

      uint64_t v66 = v63;
      long long v54 = v97;
      uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v65, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v56, v57, "Checking that we have sufficient storage for checkpoint dir.  Required space = %{public}s...", v58, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v59, -1, -1);
      MEMORY[0x24C5348D0](v58, -1, -1);
    }
    else
    {

      uint64_t v61 = v96;
    }
    uint64_t v67 = static PhotogrammetryFileHelpers.getAvailableStorage(ofDir:)();
    uint64_t v68 = Logger.logObject.getter();
    if (v67 >= v61)
    {
      os_log_type_t v81 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v68, v81))
      {
        uint64_t v82 = (uint8_t *)swift_slowAlloc();
        uint64_t v83 = swift_slowAlloc();
        uint64_t v101 = v83;
        *(_DWORD *)uint64_t v82 = 136446210;
        unsigned int v84 = (void *)static PhotogrammetryFileHelpers.byteFormatter.getter();
        id v85 = objc_msgSend(v84, sel_stringFromByteCount_, v67);

        uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v88 = v87;

        uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v88, &v101);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v68, v81, "... Success!  We have %{public}s available.", v82, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v83, -1, -1);
        MEMORY[0x24C5348D0](v82, -1, -1);

        return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v97, v99);
      }
      else
      {

        return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v54, v99);
      }
    }
    else
    {
      os_log_type_t v69 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v68, v69))
      {
        unint64_t v70 = (uint8_t *)swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        uint64_t v101 = v71;
        *(_DWORD *)unint64_t v70 = 136446210;
        uint64_t v72 = (void *)static PhotogrammetryFileHelpers.byteFormatter.getter();
        id v73 = objc_msgSend(v72, sel_stringFromByteCount_, v67);

        uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v76 = v75;

        uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v76, &v101);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v68, v69, "... Error insufficient storage!  We had: %{public}s", v70, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v71, -1, -1);
        long long v77 = v70;
        long long v54 = v97;
        MEMORY[0x24C5348D0](v77, -1, -1);
      }

      uint64_t v78 = v98;
      uint64_t v79 = v93;
      type metadata accessor for DataModel.Error(0);
      lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
      swift_allocError();
      *long long v80 = v79;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v54, v99);
    }
  }
  else
  {
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v93 = v14;
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v101 = v34;
      *(_DWORD *)uint64_t v33 = 136446210;
      long long v35 = (void *)static PhotogrammetryFileHelpers.byteFormatter.getter();
      id v36 = objc_msgSend(v35, sel_stringFromByteCount_, v30);

      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v39 = v38;

      uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v101);
      uint64_t v14 = v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v31, v32, "... Error insufficient storage!  We had: %{public}s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v34, -1, -1);
      MEMORY[0x24C5348D0](v33, -1, -1);
    }

    type metadata accessor for DataModel.Error(0);
    lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(&lazy protocol witness table cache variable for type DataModel.Error and conformance DataModel.Error, (void (*)(uint64_t))type metadata accessor for DataModel.Error);
    swift_allocError();
    *uint64_t v40 = v14;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
}

void specialized RangefinderObserver.zoneDidChange(_:)()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v3 = swift_slowAlloc();
    uint64_t v7 = v3;
    *(_DWORD *)uint64_t v2 = 136315138;
    uint64_t v4 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, oslog, v1, "Rangefinder zoneDidChange: %s", v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v3, -1, -1);
    MEMORY[0x24C5348D0](v2, -1, -1);
  }
  else
  {
  }
}

uint64_t specialized DataModel.LocalARCoachingViewDelegate.coachingOverlayViewDidRequestSessionReset(_:)()
{
  uint64_t v0 = type metadata accessor for DataModel.Error(0);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_2465C2000, v4, v5, "coachingOverlayViewDidRequestSessionReset: Will invalidate the session!", v6, 2u);
    MEMORY[0x24C5348D0](v6, -1, -1);
  }

  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_storeEnumTagMultiPayload();
    DataModel.invalidateSession(error:)((uint64_t)v2);
    swift_release();
    return outlined destroy of DataModel.Error((uint64_t)v2, type metadata accessor for DataModel.Error);
  }
  return result;
}

void specialized DataModel.updateReticleAimSystem(at:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<CoveragePointCloud>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  os_log_type_t v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CoveragePointCloud();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void **)(v0 + 16);
  if (v9)
  {
    uint64_t v10 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel__latestCoveragePointCloud;
    swift_beginAccess();
    CFTypeID v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v11(v5, v10, v2);
    uint64_t v33 = v9;
    Atomic.wrappedValue.getter();
    uint64_t v12 = *(void (**)(char *, uint64_t))(v3 + 8);
    v12(v5, v2);
    Swift::Bool v13 = CoveragePointCloud.isValid()();
    outlined destroy of DataModel.Error((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
    if (v13)
    {
      uint64_t v32 = OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_userFeedbackSystem;
      v11(v5, v10, v2);
      swift_retain();
      Atomic.wrappedValue.getter();
      v12(v5, v2);
      *(double *)&long long v14 = CoveragePointCloud.bboxWorld.getter();
      v31[2] = v15;
      _OWORD v31[3] = v14;
      v31[0] = v17;
      v31[1] = v16;
      outlined destroy of DataModel.Error((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CoveragePointCloud);
      Transform.init(matrix:)();
      os_log_type_t v18 = v33;
      specialized UserFeedbackSystem.update(at:arView:bboxWorld:)(v33, v19, v20, v21);
      swift_release();
      uint64_t v22 = *(void *)(*(void *)(v1 + v32) + 16);
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v34 = v22;
      swift_retain();
      static Published.subscript.setter();
    }
    else
    {
      os_log_type_t v18 = v33;
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)logger);
      unint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v30 = 0;
        _os_log_impl(&dword_2465C2000, v28, v29, "Point cloud is not valid, can't compute reticle aim score!", v30, 2u);
        MEMORY[0x24C5348D0](v30, -1, -1);
      }
    }
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)logger);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_2465C2000, v33, v24, "Can't update reticle aim system since no ARView!", v25, 2u);
      MEMORY[0x24C5348D0](v25, -1, -1);
    }
    uint64_t v26 = v33;
  }
}

void specialized DataModel.onError(error:)(uint64_t a1)
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = type metadata accessor for ObjectCaptureSession.Error();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v7((char *)v17 - v6, a1, v3);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v19 = v11;
    v17[0] = v17;
    uint64_t v21 = v11;
    os_log_type_t v18 = v10;
    *(_DWORD *)uint64_t v10 = 136315138;
    v17[1] = v10 + 4;
    MEMORY[0x270FA5388](v11);
    v7((char *)v17 - v6, (uint64_t)v17 - v6, v3);
    uint64_t v12 = String.init<A>(describing:)();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))((char *)v17 - v6, v3);
    os_log_type_t v14 = v9;
    long long v15 = v18;
    _os_log_impl(&dword_2465C2000, v8, v14, "onError: %s", v18, 0xCu);
    uint64_t v16 = v19;
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v16, -1, -1);
    MEMORY[0x24C5348D0](v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))((char *)v17 - v6, v3);
  }
}

unint64_t specialized DataModel.ARViewResolution.init(rawValue:)(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

uint64_t outlined destroy of DataModel.Error(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_246655BEC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in DataModel.startObjectCapturing()()
{
  return closure #1 in DataModel.startObjectCapturing()(*(void *)(v0 + 16));
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type DataModel.Error and conformance DataModel.Error(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_246655CF4()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in DataModel.subscribeToUpdateEvents()()
{
  return closure #1 in DataModel.subscribeToUpdateEvents()();
}

uint64_t outlined init with copy of DataModel.Error(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #2 in DataModel.addGestureRecognizerIfNeeded()()
{
  return closure #1 in DataModel.addGestureRecognizerIfNeeded()();
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue);
  }
  return result;
}

uint64_t partial apply for closure #1 in DataModel.setupDebugState()()
{
  return closure #1 in DataModel.setupDebugState()();
}

void partial apply for closure #1 in DataModel.connectImageWriter()()
{
}

void partial apply for closure #3 in DataModel.connectImageWriter()()
{
}

uint64_t outlined consume of Set<AnyCancellable>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in DataModel.addCaptureSubscriptions()(uint64_t a1)
{
  return closure #1 in DataModel.addCaptureSubscriptions()(a1, v1, (void (*)(uint64_t))DataModel.onInternalSessionStateChange(newInternalState:));
}

uint64_t partial apply for closure #2 in DataModel.addCaptureSubscriptions()(uint64_t a1)
{
  return closure #2 in DataModel.addCaptureSubscriptions()(a1, v1, "Got framePublisher success completion!");
}

uint64_t partial apply for closure #3 in DataModel.addCaptureSubscriptions()(uint64_t a1)
{
  return closure #1 in DataModel.addCaptureSubscriptions()(a1, v1, (void (*)(uint64_t))DataModel.onFrameUpdate(frame:));
}

uint64_t partial apply for closure #4 in DataModel.addCaptureSubscriptions()()
{
  return closure #4 in DataModel.addCaptureSubscriptions()();
}

uint64_t partial apply for closure #5 in DataModel.addCaptureSubscriptions()(uint64_t a1)
{
  return closure #2 in DataModel.addCaptureSubscriptions()(a1, v1, "Got shotPublisher success completion!");
}

uint64_t partial apply for closure #6 in DataModel.addCaptureSubscriptions()()
{
  return closure #6 in DataModel.addCaptureSubscriptions()();
}

uint64_t sub_246655EE8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Shot, @in_guaranteed ObjectCaptureSession.Metadata.Shot) -> ()(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ObjectCaptureSession.Shot, ObjectCaptureSession.Metadata.Shot));
  return v3(a1, a1 + *(int *)(v4 + 48));
}

uint64_t partial apply for closure #7 in DataModel.addCaptureSubscriptions()(uint64_t a1)
{
  return closure #2 in DataModel.addCaptureSubscriptions()(a1, v1, "Got shotMetadataPublisher success completion!");
}

uint64_t partial apply for closure #8 in DataModel.addCaptureSubscriptions()()
{
  return closure #8 in DataModel.addCaptureSubscriptions()();
}

uint64_t partial apply for closure #9 in DataModel.addCaptureSubscriptions()(uint64_t *a1)
{
  return closure #9 in DataModel.addCaptureSubscriptions()(a1);
}

uint64_t partial apply for closure #10 in DataModel.addCaptureSubscriptions()(uint64_t a1)
{
  return closure #10 in DataModel.addCaptureSubscriptions()(a1);
}

uint64_t sub_246655FA8@<X0>(void *a1@<X8>)
{
  return key path getter for DataModel.numShotsTaken : DataModel(a1);
}

uint64_t sub_246655FD0()
{
  return key path setter for DataModel.numShotsTaken : DataModel();
}

uint64_t sub_246655FF8@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

uint64_t sub_246656020()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

uint64_t sub_246656048@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

uint64_t sub_246656070()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

uint64_t partial apply for closure #1 in DataModel.updateShowMiniViewState(newState:newNumShotsInSegment:)()
{
  return closure #1 in DataModel.updateShowMiniViewState(newState:newNumShotsInSegment:)();
}

uint64_t sub_2466560B8@<X0>(void *a1@<X8>)
{
  return key path getter for DataModel.numShotsTaken : DataModel(a1);
}

uint64_t sub_2466560E0()
{
  return key path setter for DataModel.numShotsTaken : DataModel();
}

uint64_t sub_246656120@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

uint64_t sub_246656148()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

uint64_t partial apply for closure #1 in DataModel.updateFeedback(frameFeedback:arCameraFeedback:)()
{
  return closure #1 in DataModel.updateFeedback(frameFeedback:arCameraFeedback:)();
}

uint64_t sub_246656198@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

uint64_t sub_2466561C0()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

uint64_t lazy protocol witness table accessor for type ObjectCaptureSession.Frame.Feedback and conformance ObjectCaptureSession.Frame.Feedback(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of DataModel.State(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2466562A8@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

uint64_t sub_2466562D0()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

uint64_t outlined assign with copy of CoveragePointCloud(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in DataModel.performStateTransition(from:to:)()
{
  return closure #1 in DataModel.performStateTransition(from:to:)();
}

uint64_t sub_246656368@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

uint64_t sub_246656390()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

void partial apply for closure #1 in DataModel.startFrameProcessor()()
{
}

uint64_t partial apply for closure #1 in DataModel.startManualBoxMode()()
{
  return closure #1 in DataModel.startManualBoxMode()();
}

uint64_t sub_2466563E0@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

uint64_t sub_246656408()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

uint64_t partial apply for closure #1 in DataModel.updateShowCenterReticleState(newState:)()
{
  return partial apply for closure #1 in DataModel.updateFeedback(frameFeedback:arCameraFeedback:)();
}

void DetectModeBoxModel.detectedBoundingBox.didset()
{
  if ((*(unsigned char *)(v0 + 144) & 1) == 0 && *(unsigned char *)(v0 + 24) == 2)
  {
    float32x4_t v1 = *(float32x4_t *)(v0 + 80);
    int8x16_t v2 = *(int8x16_t *)(v0 + 96);
    int8x16_t v3 = *(int8x16_t *)(v0 + 112);
    int8x16_t v4 = *(int8x16_t *)(v0 + 128);
    float32x4_t v5 = (float32x4_t)vextq_s8(v3, v3, 8uLL);
    float32x4_t v6 = (float32x4_t)vextq_s8(v4, v4, 0xCuLL);
    float32x4_t v7 = (float32x4_t)vextq_s8(v3, v3, 0xCuLL);
    float32x4_t v8 = (float32x4_t)vextq_s8(v4, v4, 8uLL);
    float32x4_t v9 = (float32x4_t)vextq_s8(v4, v4, 4uLL);
    float32x4_t v10 = (float32x4_t)vextq_s8(v3, v3, 4uLL);
    int8x16_t v11 = (int8x16_t)vmulq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v2, v2, 8uLL), vmlaq_f32(vmulq_f32(v6, vnegq_f32(v10)), v9, v7)), vmlaq_f32(vmulq_f32(v8, vnegq_f32(v7)), v6, v5), (float32x4_t)vextq_s8(v2, v2, 4uLL)), vmlaq_f32(vmulq_f32(v9, vnegq_f32(v5)), v8, v10), (float32x4_t)vextq_s8(v2, v2, 0xCuLL)), v1);
    v8.i64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
    if (vaddv_f32(vsub_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v8.f32), (float32x2_t)vzip2_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v8.f32))) < 0.0)
    {
      int8x16_t v16 = *(int8x16_t *)(v0 + 128);
      int8x16_t v17 = *(int8x16_t *)(v0 + 112);
      int8x16_t v18 = *(int8x16_t *)(v0 + 96);
      float32x4_t v19 = *(float32x4_t *)(v0 + 80);
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)logger);
      unint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        long long v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v15 = 0;
        _os_log_impl(&dword_2465C2000, v13, v14, "Bounding box transform was not right-handed!  Fixing...", v15, 2u);
        MEMORY[0x24C5348D0](v15, -1, -1);
      }

      int8x16_t v2 = v18;
      float32x4_t v1 = v19;
      int8x16_t v4 = v16;
      int8x16_t v3 = v17;
    }
    specialized static BoundingBoxHelpers.ensuringPositiveDeterminant(matrix:)(v1, v2, v3, v4);
    DetectModeBoxModel.updateAutomaticEntityWithBoundingBox(srtMatrix:)();
  }
}

void DetectModeBoxModel.TransitionAnimation.state.didset()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  swift_retain_n();
  float32x4_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int8x16_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)int8x16_t v3 = 136446210;
    uint64_t v5 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v1, v2, "DetectBox TransitionAnimation.State = %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v4, -1, -1);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

void DetectModeBoxModel.TransitionAnimation.startAnimation(at:to:)(double a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v5 = v4;
  __n128 v33 = a3;
  __n128 v34 = a4;
  __n128 v32 = a2;
  uint64_t v7 = type metadata accessor for AnimationTimingFunction();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  float32x4_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v4[1].n128_u8[0])
  {
    __break(1u);
  }
  else if (one-time initialization token for logger == -1)
  {
    goto LABEL_3;
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)logger);
  swift_retain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(void *)&long long v31 = v7;
    uint64_t v16 = v15;
    v38[0] = v15;
    *(_DWORD *)uint64_t v14 = 136446466;
    __n128 v17 = v5[3];
    __n128 v18 = v5[4];
    __n128 v35 = v5[2];
    __n128 v36 = v17;
    __n128 v37 = v18;
    uint64_t v19 = String.init<A>(describing:)();
    v35.n128_u64[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2082;
    __n128 v35 = v32;
    __n128 v36 = v33;
    __n128 v37 = v34;
    uint64_t v21 = String.init<A>(describing:)();
    v35.n128_u64[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v12, v13, "Start transition anim from: %{public}s to: %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    uint64_t v23 = v16;
    uint64_t v7 = v31;
    MEMORY[0x24C5348D0](v23, -1, -1);
    MEMORY[0x24C5348D0](v14, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  __n128 v24 = v33;
  v5[7] = v32;
  v5[8] = v24;
  v5[9] = v34;
  v5[10].n128_u8[0] = 0;
  v5[10].n128_f64[1] = a1;
  v5[11].n128_u8[0] = 0;
  *(double *)&long long v25 = specialized simd_float4x4.init(translation:rotation:scale:)(v5[4].n128_f64[0], (float32x4_t)v5[3]);
  _OWORD v30[2] = v26;
  long long v31 = v25;
  v30[1] = v27;
  v30[0] = v28;
  type metadata accessor for Entity();
  HasTransform.setTransformMatrix(_:relativeTo:)();
  static AnimationTimingFunction.default.getter();
  uint64_t v29 = HasTransform.move(to:relativeTo:duration:timingFunction:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v5[11].n128_u64[1] = v29;
  swift_release();
  v5[1].n128_u8[0] = 1;
  DetectModeBoxModel.TransitionAnimation.state.didset();
}

void DetectModeBoxModel.TransitionAnimation.update(t:)(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for __EntityRef();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = *(unsigned __int8 *)(v1 + 16);
  if (v8 == 2)
  {
    if (*(unsigned char *)(v1 + 176)) {
      double v15 = INFINITY;
    }
    else {
      double v15 = *(double *)(v1 + 168) + *(double *)(v1 + 80);
    }
    double v16 = a1 - v15 + a1 - v15;
    if (v16 <= 1.0) {
      double v17 = v16;
    }
    else {
      double v17 = 1.0;
    }
    if (v16 > 0.0) {
      double v18 = v17;
    }
    else {
      double v18 = 0.0;
    }
    if (*(void *)(v1 + 96))
    {
      swift_retain();
      dispatch thunk of Entity.__coreEntity.getter();
      MEMORY[0x24C530D20](&v25, MEMORY[0x263F8DD08], MEMORY[0x263F8DD08]);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      REHierarchicalFadeComponentGetComponentType();
      uint64_t v19 = REEntityGetOrAddComponentByClass();
      REHierarchicalFadeComponentSetOpacity();
      MEMORY[0x24C533F60](v19);
      swift_release();
    }
    if (v18 >= 1.0)
    {
      *(unsigned char *)(v2 + 16) = 3;
      DetectModeBoxModel.TransitionAnimation.state.didset();
    }
  }
  else if (v8 == 1)
  {
    if (*(void *)(v1 + 184))
    {
      swift_retain();
      char v9 = dispatch thunk of AnimationPlaybackController.isComplete.getter();
      swift_release();
      if (v9)
      {
        if (*(void *)(v1 + 96))
        {
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v10 = type metadata accessor for Logger();
          __swift_project_value_buffer(v10, (uint64_t)logger);
          uint64_t v11 = Logger.logObject.getter();
          os_log_type_t v12 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v11, v12))
          {
            os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)os_log_type_t v13 = 0;
            _os_log_impl(&dword_2465C2000, v11, v12, "Done transform transition, start fading handles in...", v13, 2u);
            MEMORY[0x24C5348D0](v13, -1, -1);
          }

          char v14 = 2;
        }
        else
        {
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v20 = type metadata accessor for Logger();
          __swift_project_value_buffer(v20, (uint64_t)logger);
          uint64_t v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v21, v22))
          {
            uint64_t v23 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v23 = 0;
            _os_log_impl(&dword_2465C2000, v21, v22, "No fade target entity, completing transition.", v23, 2u);
            MEMORY[0x24C5348D0](v23, -1, -1);
          }

          char v14 = 3;
        }
        *(unsigned char *)(v2 + 16) = v14;
        DetectModeBoxModel.TransitionAnimation.state.didset();
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void DetectModeBoxModel.TransitionAnimation.cancel()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for __EntityRef();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    char v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v9 = 0;
    _os_log_impl(&dword_2465C2000, v7, v8, "TransitionAnimation cancel() called!", v9, 2u);
    MEMORY[0x24C5348D0](v9, -1, -1);
  }

  if (*(void *)(v1 + 184))
  {
    swift_retain();
    dispatch thunk of AnimationPlaybackController.stop()();
    swift_release();
  }
  *(void *)(v1 + 184) = 0;
  swift_release();
  if (*(void *)(v1 + 96))
  {
    swift_retain();
    dispatch thunk of Entity.__coreEntity.getter();
    MEMORY[0x24C530D20](&v12, MEMORY[0x263F8DD08], MEMORY[0x263F8DD08]);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    REHierarchicalFadeComponentGetComponentType();
    uint64_t v10 = REEntityGetOrAddComponentByClass();
    REHierarchicalFadeComponentSetOpacity();
    MEMORY[0x24C533F60](v10);
    swift_release();
  }
  *(unsigned char *)(v1 + 16) = 3;
  DetectModeBoxModel.TransitionAnimation.state.didset();
}

uint64_t DetectModeBoxModel.TransitionAnimation.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t DetectModeBoxModel.StartDetectionAnimation.start()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AnimationTimingFunction();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v0 + 16);
  type metadata accessor for Entity();
  HasTransform.transformMatrix(relativeTo:)();
  Transform.init(matrix:)();
  long long v32 = v8;
  long long v33 = v7;
  long long v31 = v9;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)logger);
  swift_retain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(void *)&long long v30 = v2;
    uint64_t v15 = v14;
    uint64_t v37 = v14;
    *(_DWORD *)uint64_t v13 = 136446466;
    v29[1] = v6;
    long long v34 = v33;
    long long v35 = v32;
    long long v36 = v31;
    uint64_t v16 = String.init<A>(describing:)();
    *(void *)&long long v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2082;
    long long v18 = *(_OWORD *)(v1 + 48);
    long long v19 = *(_OWORD *)(v1 + 64);
    long long v34 = *(_OWORD *)(v1 + 32);
    long long v35 = v18;
    long long v36 = v19;
    uint64_t v20 = String.init<A>(describing:)();
    *(void *)&long long v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v11, v12, "Starting detection animation: \n fromXform=%{public}s \n toXform=%{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    uint64_t v22 = v15;
    uint64_t v2 = v30;
    MEMORY[0x24C5348D0](v22, -1, -1);
    MEMORY[0x24C5348D0](v13, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  long long v23 = *(_OWORD *)(v1 + 32);
  long long v32 = *(_OWORD *)(v1 + 48);
  long long v33 = v23;
  long long v31 = *(_OWORD *)(v1 + 64);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DetectModeBoxModel.StartDetectionAnimation.start());
  long long v30 = v24;
  static simd_quatf.identity.getter();
  static AnimationTimingFunction.linear.getter();
  uint64_t v25 = HasTransform.move(to:relativeTo:duration:timingFunction:)();
  long long v26 = *(void (**)(char *, uint64_t))(v3 + 8);
  v26(v5, v2);
  *(void *)(v1 + 88) = v25;
  swift_release();
  static AnimationTimingFunction.linear.getter();
  uint64_t v27 = HasTransform.move(to:relativeTo:duration:timingFunction:)();
  v26(v5, v2);
  *(void *)(v1 + 96) = v27;
  return swift_release();
}

uint64_t DetectModeBoxModel.StartDetectionAnimation.stop()()
{
  if (*(void *)(v0 + 88))
  {
    swift_retain();
    dispatch thunk of AnimationPlaybackController.stop()();
    swift_release();
    *(void *)(v0 + 88) = 0;
    swift_release();
    if (*(void *)(v0 + 96))
    {
      swift_retain();
      dispatch thunk of AnimationPlaybackController.stop()();
      swift_release();
    }
    *(void *)(v0 + 96) = 0;
    return swift_release();
  }
  return result;
}

uint64_t DetectModeBoxModel.StartDetectionAnimation.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?(*(void *)(v0 + 104));

  return swift_deallocClassInstance();
}

uint64_t DetectModeBoxModel.currentCaptureBox.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *(unsigned __int8 *)(v1 + 24);
  if (v3 == 1 || v3 == 2)
  {
    long long v4 = *(_OWORD *)(v1 + 80);
    long long v12 = *(_OWORD *)(v1 + 96);
    long long v10 = *(_OWORD *)(v1 + 112);
    long long v11 = *(_OWORD *)(v1 + 128);
    char v13 = *(unsigned char *)(v1 + 144);
  }
  else
  {
    long long v4 = 0uLL;
    if (v3 == 3 && *(void *)(v1 + 32))
    {
      type metadata accessor for Entity();
      swift_retain();
      HasTransform.transformMatrix(relativeTo:)();
      long long v16 = v6;
      long long v17 = v5;
      long long v14 = v8;
      long long v15 = v7;
      uint64_t result = swift_release();
      long long v11 = v14;
      long long v10 = v15;
      long long v12 = v16;
      long long v4 = v17;
      char v13 = 0;
    }
    else
    {
      char v13 = 1;
      long long v12 = 0uLL;
      long long v10 = 0uLL;
      long long v11 = 0uLL;
    }
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v11;
  *(unsigned char *)(a1 + 64) = v13;
  return result;
}

Swift::Void __swiftcall DetectModeBoxModel.onDetectedBoundingBox(box:)(simd_float4x4 *box)
{
  uint64_t v6 = v1;
  if (*(unsigned char *)(v1 + 144) == 1)
  {
    float32x4_t v26 = v2;
    int8x16_t v28 = v3;
    int8x16_t v30 = v4;
    int8x16_t v32 = v5;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    long long v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      long long v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)long long v10 = 136446210;
      uint64_t v34 = v11;
      type metadata accessor for simd_float4x4(0);
      uint64_t v12 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v8, v9, "First detected bounding box: %{public}s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v11, -1, -1);
      MEMORY[0x24C5348D0](v10, -1, -1);

      float32x4_t v2 = v26;
      int8x16_t v3 = v28;
      int8x16_t v4 = v30;
      int8x16_t v5 = v32;
    }
    else
    {

      int8x16_t v4 = v30;
      int8x16_t v5 = v32;
      float32x4_t v2 = v26;
      int8x16_t v3 = v28;
    }
  }
  *(float32x4_t *)(v6 + 80) = v2;
  *(int8x16_t *)(v6 + 96) = v3;
  *(int8x16_t *)(v6 + 112) = v4;
  *(int8x16_t *)(v6 + 128) = v5;
  *(unsigned char *)(v6 + 144) = 0;
  if (*(unsigned char *)(v6 + 24) == 2)
  {
    float32x4_t v14 = (float32x4_t)vextq_s8(v4, v4, 8uLL);
    float32x4_t v15 = (float32x4_t)vextq_s8(v5, v5, 0xCuLL);
    float32x4_t v16 = (float32x4_t)vextq_s8(v4, v4, 0xCuLL);
    float32x4_t v17 = (float32x4_t)vextq_s8(v5, v5, 8uLL);
    float32x4_t v18 = (float32x4_t)vextq_s8(v5, v5, 4uLL);
    float32x4_t v19 = (float32x4_t)vextq_s8(v4, v4, 4uLL);
    int8x16_t v20 = (int8x16_t)vmulq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v3, v3, 8uLL), vmlaq_f32(vmulq_f32(v15, vnegq_f32(v19)), v18, v16)), vmlaq_f32(vmulq_f32(v17, vnegq_f32(v16)), v15, v14), (float32x4_t)vextq_s8(v3, v3, 4uLL)), vmlaq_f32(vmulq_f32(v18, vnegq_f32(v14)), v17, v19), (float32x4_t)vextq_s8(v3, v3, 0xCuLL)), v2);
    int32x2_t v21 = (int32x2_t)vextq_s8(v20, v20, 8uLL).u64[0];
    if (vaddv_f32(vsub_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v20.i8, v21), (float32x2_t)vzip2_s32(*(int32x2_t *)v20.i8, v21))) < 0.0)
    {
      float32x4_t v27 = v2;
      int8x16_t v29 = v3;
      int8x16_t v31 = v4;
      int8x16_t v33 = v5;
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      __swift_project_value_buffer(v22, (uint64_t)logger);
      long long v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl(&dword_2465C2000, v23, v24, "Bounding box transform was not right-handed!  Fixing...", v25, 2u);
        MEMORY[0x24C5348D0](v25, -1, -1);
      }

      int8x16_t v4 = v31;
      int8x16_t v5 = v33;
      float32x4_t v2 = v27;
      int8x16_t v3 = v29;
    }
    specialized static BoundingBoxHelpers.ensuringPositiveDeterminant(matrix:)(v2, v3, v4, v5);
    DetectModeBoxModel.updateAutomaticEntityWithBoundingBox(srtMatrix:)();
  }
}

Swift::Void __swiftcall DetectModeBoxModel.setVisible(_:)(Swift::Bool a1)
{
  uint64_t v2 = type metadata accessor for __EntityRef();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  int8x16_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + 32))
  {
    swift_retain();
    dispatch thunk of Entity.__coreEntity.getter();
    uint64_t v6 = MEMORY[0x263F8DD08];
    MEMORY[0x24C530D20](&v11, MEMORY[0x263F8DD08], MEMORY[0x263F8DD08]);
    uint64_t v7 = *(void (**)(char *, uint64_t))(v3 + 8);
    v7(v5, v2);
    REHierarchicalFadeComponentGetComponentType();
    uint64_t v8 = REEntityGetOrAddComponentByClass();
    REHierarchicalFadeComponentSetOpacity();
    MEMORY[0x24C533F60](v8);
    swift_retain();
    dispatch thunk of Entity.__coreEntity.getter();
    MEMORY[0x24C530D20](&v11, v6, v6);
    v7(v5, v2);
    REHierarchicalFadeComponentGetComponentType();
    uint64_t v9 = REEntityGetOrAddComponentByClass();
    REHierarchicalFadeComponentSetOpacity();
    MEMORY[0x24C533F60](v9);
    swift_release();
    swift_release();
  }
}

Swift::Void __swiftcall DetectModeBoxModel.startRaycastManualBoxFlow()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  int8x16_t v5 = (uint64_t *)((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(unsigned __int8 *)(v0 + 24) <= 1u)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    *int8x16_t v5 = static OS_dispatch_queue.main.getter();
    (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
    char v6 = _dispatchPreconditionTest(_:)();
    (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
    if (v6)
    {
      DetectModeBoxModel.performSwitchStateTransitions(from:to:)(*(unsigned __int8 *)(v1 + 24), 1u);
      *(unsigned char *)(v1 + 24) = 1;
      DetectModeBoxModel.startManualBoxFlow()();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void DetectModeBoxModel.updateAutomaticEntityWithBoundingBox(srtMatrix:)()
{
  if (*(unsigned char *)(v1 + 24) != 2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (*(void *)(v1 + 216)) {
    return;
  }
  if (*(void *)(v1 + 224)) {
    return;
  }
  uint64_t v0 = *(void *)(v1 + 272);
  if (!v0) {
    return;
  }
  if ((*(unsigned char *)(v0 + 16) & 1) == 0)
  {
    uint64_t v2 = one-time initialization token for logger;
    swift_retain();
    if (v2 == -1)
    {
LABEL_9:
      uint64_t v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)logger);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        char v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v6 = 0;
        _os_log_impl(&dword_2465C2000, v4, v5, "Starting bounding box animated updater...", v6, 2u);
        MEMORY[0x24C5348D0](v6, -1, -1);
      }

      *(unsigned char *)(v0 + 16) = 1;
      if (*(void *)(v0 + 96))
      {
        __break(1u);
        return;
      }
      BoundingBoxAnimatedUpdater.startNewAnimationIfNeeded()();
      goto LABEL_13;
    }
LABEL_17:
    swift_once();
    goto LABEL_9;
  }
  swift_retain();
LABEL_13:
  Transform.init(matrix:)();
  BoundingBoxAnimatedUpdater.setTargetWorld(transform:)(v7, v8, v9);

  swift_release();
}

double DetectModeBoxModel.performSwitchStateTransitions(from:to:)(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  __n128 v9 = (uint64_t *)((char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *__n128 v9 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8F0E0], v6);
  char v10 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_76:
    swift_once();
LABEL_4:
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)logger);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      float32x4_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v81 = v15;
      *(_DWORD *)float32x4_t v14 = 136315138;
      LOBYTE(v80) = a1;
      uint64_t v16 = String.init<A>(describing:)();
      uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v12, v13, "Punting transition since states match: %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v15, -1, -1);
      float32x4_t v18 = v14;
LABEL_50:
      MEMORY[0x24C5348D0](v18, -1, -1);
      goto LABEL_51;
    }
    goto LABEL_51;
  }
  if (a1 == a2)
  {
    if (one-time initialization token for logger == -1) {
      goto LABEL_4;
    }
    goto LABEL_76;
  }
  if (MEMORY[0x24C5349C0](v3 + 248))
  {
    if (swift_weakLoadStrong())
    {
      swift_getKeyPath();
      swift_getKeyPath();
      LOBYTE(v81) = a2 == 3;
      static Published.subscript.setter();
    }
    swift_unknownObjectRelease();
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  *(void *)&long long v78 = __swift_project_value_buffer(v19, (uint64_t)logger);
  int8x16_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  *(void *)&long long v79 = a1;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    v77.i64[0] = v3;
    uint64_t v25 = v24;
    uint64_t v81 = v24;
    *(_DWORD *)uint64_t v23 = 136315394;
    LOBYTE(v80) = a1;
    uint64_t v26 = String.init<A>(describing:)();
    uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    LOBYTE(v80) = a2;
    uint64_t v28 = String.init<A>(describing:)();
    uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v20, v21, "Switching from %s to %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    uint64_t v30 = v25;
    uint64_t v3 = v77.i64[0];
    MEMORY[0x24C5348D0](v30, -1, -1);
    MEMORY[0x24C5348D0](v23, -1, -1);
  }

  if (!*(void *)(v3 + 64))
  {
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  type metadata accessor for Entity();
  swift_retain();
  swift_retain();
  HasTransform.transformMatrix(relativeTo:)();
  Transform.init(matrix:)();
  __n128 v76 = v32;
  float32x4_t v77 = v31;
  HasTransform.scale(relativeTo:)();
  __n128 v75 = v33;
  swift_release();
  swift_release();
  char v34 = v79;
  switch((char)v79)
  {
    case 1:
      if (*(void *)(v3 + 32))
      {
        swift_retain();
        HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
        swift_release();
      }
      type metadata accessor for ModelEntity();
      HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
      uint64_t v35 = v3;
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v19, (uint64_t)logger);
      long long v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v36, v37))
      {
        unint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v38 = 0;
        _os_log_impl(&dword_2465C2000, v36, v37, "Detaching bounding box scale manipulator...", v38, 2u);
        MEMORY[0x24C5348D0](v38, -1, -1);
      }

      BoundingBoxScaleManipulator.unsubscribeFromUpdateEvents()();
      BoundingBoxScaleManipulator.detachGestures()();
      HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
      BoundingBoxScaleManipulator.cancelFadeInAnimation(opacity:)(0.0);
      swift_weakAssign();
      uint64_t v3 = v35;
      DetectModeBoxModel.detachFrontFaceRotationWidget()();
      break;
    case 2:
      DetectModeBoxModel.removeGestureRecognizers()();
      uint64_t v39 = *(void *)(v3 + 272);
      if (v39)
      {
        if (*(void *)(v39 + 96))
        {
          swift_retain();
          swift_retain();
          dispatch thunk of AnimationPlaybackController.stop()();
          swift_release();
          *(void *)(v39 + 96) = 0;
          swift_release();
        }
        else
        {
          swift_retain();
        }
        *(unsigned char *)(v39 + 16) = 0;
        swift_release();
      }
      break;
    case 3:
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        os_log_type_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v42 = 0;
        _os_log_impl(&dword_2465C2000, v40, v41, "Removing the manual box manipulator and gestures...", v42, 2u);
        MEMORY[0x24C5348D0](v42, -1, -1);
      }

      DetectModeBoxModel.removeGestureRecognizers()();
      BOOL v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v45 = 0;
        _os_log_impl(&dword_2465C2000, v43, v44, "Removing completed TransitionAnimation and enabling face handles!", v45, 2u);
        MEMORY[0x24C5348D0](v45, -1, -1);
      }

      uint64_t v46 = *(void *)(v3 + 240);
      char v47 = *(unsigned char *)(v46 + 96);
      *(unsigned char *)(v46 + 96) = 0;
      if (v47) {
        BoundingBoxScaleManipulator.detachGestures()();
      }
      uint64_t v48 = v3;
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v19, (uint64_t)logger);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v49, v50))
      {
        unint64_t v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v51 = 0;
        _os_log_impl(&dword_2465C2000, v49, v50, "Detaching bounding box scale manipulator...", v51, 2u);
        MEMORY[0x24C5348D0](v51, -1, -1);
      }

      BoundingBoxScaleManipulator.unsubscribeFromUpdateEvents()();
      BoundingBoxScaleManipulator.detachGestures()();
      HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
      BoundingBoxScaleManipulator.cancelFadeInAnimation(opacity:)(0.0);
      swift_weakAssign();
      uint64_t v3 = v48;
      break;
    default:
      break;
  }
  uint64_t Strong = swift_weakLoadStrong();
  swift_release();
  if (!Strong)
  {
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, (os_log_type_t)v61))
    {
      id v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v62 = 0;
      _os_log_impl(&dword_2465C2000, v12, (os_log_type_t)v61, "DataModel is nil!", v62, 2u);
      float32x4_t v18 = v62;
      goto LABEL_50;
    }
LABEL_51:

    return result;
  }
  if (a2 - 2 < 2)
  {
    if (v34 != 1)
    {
LABEL_47:
      DetectModeBoxModel.installGestureRecognizers()();
      return result;
    }
    uint64_t v53 = *(void *)(v3 + 48);
    *(void *)(v3 + 32) = v53;
    swift_retain();
    swift_release();
    if (*(void *)(v3 + 32) && swift_weakLoadStrong())
    {
      swift_retain();
      DataModel.addToScene(entity:)();
      swift_release();
      swift_release();
    }
    __n128 v54 = v75;
    v54.n128_u32[1] = 981668463;
    DetectModeBoxModel.scheduleTransitionAnimation(from:)(v54, v77, v76);
    if (v53)
    {
      type metadata accessor for BoundingBoxAnimatedUpdater();
      uint64_t v55 = swift_allocObject();
      *(unsigned char *)(v55 + 16) = 0;
      swift_weakInit();
      *(unsigned char *)(v55 + 40) = 0;
      *(void *)(v55 + 96) = 0;
      swift_weakAssign();
      *(void *)(v55 + 32) = 0x3FF0000000000000;
      swift_retain();
      HasTransform.transformMatrix(relativeTo:)();
      Transform.init(matrix:)();
      long long v78 = v57;
      long long v79 = v56;
      float32x4_t v77 = v58;
      swift_release();
      long long v59 = v78;
      *(_OWORD *)(v55 + 48) = v79;
      *(_OWORD *)(v55 + 64) = v59;
      *(float32x4_t *)(v55 + 80) = v77;
      *(unsigned char *)(v55 + 16) = 0;
      *(void *)(v3 + 272) = v55;
      swift_release();
      goto LABEL_47;
    }
    goto LABEL_78;
  }
  if (a2)
  {
    *(_OWORD *)(v3 + 112) = 0uLL;
    *(_OWORD *)(v3 + 128) = 0uLL;
    *(_OWORD *)(v3 + 80) = 0uLL;
    *(_OWORD *)(v3 + 96) = 0uLL;
    *(unsigned char *)(v3 + 144) = 1;
    DetectModeBoxModel.detectedBoundingBox.didset();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v19, (uint64_t)logger);
    os_log_type_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v71 = 0;
      _os_log_impl(&dword_2465C2000, v69, v70, "Detaching bounding box scale manipulator...", v71, 2u);
      MEMORY[0x24C5348D0](v71, -1, -1);
    }

    BoundingBoxScaleManipulator.unsubscribeFromUpdateEvents()();
    BoundingBoxScaleManipulator.detachGestures()();
    HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
    BoundingBoxScaleManipulator.cancelFadeInAnimation(opacity:)(0.0);
    swift_weakAssign();
    DetectModeBoxModel.removeGestureRecognizers()();
    DetectModeBoxModel.cancelAnimations()();
    DetectModeBoxModel.subscribeToUpdateEvents()();
    if (*(void *)(v3 + 32))
    {
      swift_retain();
      HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
      swift_release();
    }
    type metadata accessor for ModelEntity();
    HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v74 = 0;
      _os_log_impl(&dword_2465C2000, v72, v73, "Detaching bounding box scale manipulator...", v74, 2u);
      MEMORY[0x24C5348D0](v74, -1, -1);
    }

    BoundingBoxScaleManipulator.unsubscribeFromUpdateEvents()();
    BoundingBoxScaleManipulator.detachGestures()();
    HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
    BoundingBoxScaleManipulator.cancelFadeInAnimation(opacity:)(0.0);
    swift_weakAssign();
    DetectModeBoxModel.detachFrontFaceRotationWidget()();
    if (!*(void *)(v3 + 64))
    {
LABEL_79:
      __break(1u);
      JUMPOUT(0x246658E88);
    }
    *(void *)(v3 + 32) = swift_retain();
    swift_release();
    if (*(void *)(v3 + 32) && swift_weakLoadStrong())
    {
      swift_retain();
      DataModel.addToScene(entity:)();
      swift_release();
      swift_release();
    }
    double result = *(double *)(v3 + 208);
    *(double *)(v3 + 232) = result;
  }
  else
  {
    *(_OWORD *)(v3 + 112) = 0uLL;
    *(_OWORD *)(v3 + 128) = 0uLL;
    *(_OWORD *)(v3 + 80) = 0uLL;
    *(_OWORD *)(v3 + 96) = 0uLL;
    *(unsigned char *)(v3 + 144) = 1;
    DetectModeBoxModel.detectedBoundingBox.didset();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v19, (uint64_t)logger);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v63, v64))
    {
      unint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v65 = 0;
      _os_log_impl(&dword_2465C2000, v63, v64, "Detaching bounding box scale manipulator...", v65, 2u);
      MEMORY[0x24C5348D0](v65, -1, -1);
    }

    BoundingBoxScaleManipulator.unsubscribeFromUpdateEvents()();
    BoundingBoxScaleManipulator.detachGestures()();
    HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
    BoundingBoxScaleManipulator.cancelFadeInAnimation(opacity:)(0.0);
    swift_weakAssign();
    DetectModeBoxModel.removeGestureRecognizers()();
    DetectModeBoxModel.cancelAnimations()();
    if (*(void *)(v3 + 32))
    {
      swift_retain();
      HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
      swift_release();
    }
    type metadata accessor for ModelEntity();
    HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v68 = 0;
      _os_log_impl(&dword_2465C2000, v66, v67, "Detaching bounding box scale manipulator...", v68, 2u);
      MEMORY[0x24C5348D0](v68, -1, -1);
    }

    BoundingBoxScaleManipulator.unsubscribeFromUpdateEvents()();
    BoundingBoxScaleManipulator.detachGestures()();
    HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
    BoundingBoxScaleManipulator.cancelFadeInAnimation(opacity:)(0.0);
    swift_weakAssign();
    DetectModeBoxModel.detachFrontFaceRotationWidget()();
    DetectModeBoxModel.unsubscribeFromUpdateEvents()();
  }
  return result;
}

Swift::Void __swiftcall DetectModeBoxModel.setBoundingBoxMatrix(box:)(simd_float4x4 *box)
{
  if (*(unsigned char *)(v1 + 24) != 3)
  {
    __break(1u);
LABEL_17:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v2 = *(void *)(v1 + 272);
  if (!v2 || *(unsigned char *)(v2 + 16) != 1)
  {
    if (!*(void *)(v1 + 32)) {
      return;
    }
    type metadata accessor for Entity();
    swift_retain();
    HasTransform.setTransformMatrix(_:relativeTo:)();
    goto LABEL_13;
  }
  uint64_t v3 = one-time initialization token for logger;
  swift_retain();
  if (v3 != -1) {
    goto LABEL_17;
  }
LABEL_5:
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_2465C2000, oslog, v5, "Bounding box is being directly set while an animation on it is running!", v6, 2u);
    MEMORY[0x24C5348D0](v6, -1, -1);
    swift_release();

    return;
  }

LABEL_13:

  swift_release();
}

uint64_t @objc DetectModeBoxModel.handleRotate(_:)(uint64_t a1, uint64_t a2, void *a3, const char *a4, uint64_t a5, const char *a6)
{
  id v9 = a3;
  swift_retain();
  specialized DetectModeBoxModel.handleRotate(_:)(a4, a5, a6);

  return swift_release();
}

void DetectModeBoxModel.installGestureRecognizers()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ARView.EntityGestures();
  Class isa = v2[-1].isa;
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (unint64_t)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
LABEL_39:
  }
    swift_once();
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v51 = __swift_project_value_buffer(v6, (uint64_t)logger);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    _os_log_impl(&dword_2465C2000, v7, v8, "Connecting the RealityKit EntityGestureRecognizers (translate and rotate)...", v9, 2u);
    MEMORY[0x24C5348D0](v9, -1, -1);
  }

  if (!v1[4])
  {
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    os_log_t v57 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl(&dword_2465C2000, v57, v45, "DataModel is nil!", v46, 2u);
      MEMORY[0x24C5348D0](v46, -1, -1);
    }
    os_log_t v47 = v57;

    return;
  }
  uint64_t v11 = *(void **)(Strong + 16);
  if (!v11) {
    goto LABEL_42;
  }
  v48[1] = Strong;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ARView.EntityGestures>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_2466B5E00;
  id v13 = v11;
  static ARView.EntityGestures.rotation.getter();
  uint64_t v59 = v12;
  lazy protocol witness table accessor for type ARView.EntityGestures and conformance ARView.EntityGestures();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ARView.EntityGestures]);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type [ARView.EntityGestures] and conformance [A], &demangling cache variable for type metadata for [ARView.EntityGestures]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  if (!v1[6])
  {
LABEL_43:
    __break(1u);
    return;
  }
  uint64_t v14 = ARView.installGestures(_:for:)();

  uint64_t v15 = (void (*)(unint64_t, NSObject *))isa[1].isa;
  ++isa;
  v15(v5, v2);
  os_log_t v57 = *(os_log_t *)(v14 + 16);
  if (v57)
  {
    uint64_t v50 = v14 + 32;
    swift_bridgeObjectRetain();
    unint64_t v5 = 0;
    uint64_t v49 = v1;
    while (1)
    {
      if (v5 >= *(void *)(v14 + 16))
      {
        __break(1u);
        goto LABEL_39;
      }
      uint64_t v19 = *(void **)(v50 + 16 * v5);
      type metadata accessor for EntityTranslationGestureRecognizer();
      uint64_t v20 = swift_dynamicCastClass();
      if (v20)
      {
        os_log_type_t v21 = (void *)v20;
        uint64_t v55 = v19;
        BOOL v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v24 = 0;
          _os_log_impl(&dword_2465C2000, v22, v23, "Connected EntityTranslateGestureRecognizer handleTranslate selector and delegate!", v24, 2u);
          MEMORY[0x24C5348D0](v24, -1, -1);
        }
        long long v56 = v5;

        id v54 = v21;
        objc_msgSend(v21, sel_addTarget_action_, v1, sel_handleTranslate_);
        uint64_t v25 = (objc_class *)v1[33];
        if (!v25) {
          goto LABEL_41;
        }
        uint64_t v26 = (objc_class *)v1[30];
        Class v52 = (Class)type metadata accessor for EntityGestureRecognizerDelegate();
        uint64_t v2 = objc_allocWithZone(v52);
        uint64_t v27 = OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_D3054C8CC2B5FD3485D9DD74FE19D26731EntityGestureRecognizerDelegate_entityTranslateGesture;
        *(Class *)((char *)&v2->isa
                 + OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_D3054C8CC2B5FD3485D9DD74FE19D26731EntityGestureRecognizerDelegate_entityTranslateGesture) = 0;
        *(Class *)((char *)&v2->isa
                 + OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_D3054C8CC2B5FD3485D9DD74FE19D26731EntityGestureRecognizerDelegate_entityRecognizers) = (Class)v14;
        *(Class *)((char *)&v2->isa
                 + OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_D3054C8CC2B5FD3485D9DD74FE19D26731EntityGestureRecognizerDelegate_boxScaleManipulator) = v26;
        *(Class *)((char *)&v2->isa
                 + OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_D3054C8CC2B5FD3485D9DD74FE19D26731EntityGestureRecognizerDelegate_boxRotateManipulator) = v25;
        swift_bridgeObjectRetain_n();
        uint64_t v53 = v26;
        swift_retain_n();
        swift_retain_n();
        uint64_t v28 = v2;
        uint64_t v29 = 32;
        os_log_t v30 = v57;
        do
        {
          float32x4_t v31 = *(void **)(v14 + v29);
          uint64_t v32 = swift_dynamicCastClass();
          if (v32)
          {
            __n128 v33 = *(Class *)((char *)&v2->isa + v27);
            *(Class *)((char *)&v2->isa + v27) = (Class)v32;
            id v34 = v31;
          }
          v29 += 16;
          os_log_t v30 = (os_log_t)((char *)v30 - 1);
        }
        while (v30);
        swift_bridgeObjectRelease();

        v58.receiver = v28;
        v58.super_class = v52;
        id v16 = objc_msgSendSuper2(&v58, sel_init);
        swift_release();
        swift_release();
        uint64_t v1 = v49;
        unint64_t v17 = (void *)v49[35];
        v49[35] = v16;

        objc_msgSend(v54, sel_setDelegate_, v1[35]);
        Class isa = v55;
        unint64_t v5 = (unint64_t)v56;
      }
      else
      {
        type metadata accessor for EntityRotationGestureRecognizer();
        uint64_t v35 = (void *)swift_dynamicCastClass();
        long long v36 = v19;
        uint64_t v2 = v36;
        if (!v35)
        {
          float32x4_t v18 = Logger.logObject.getter();
          os_log_type_t v40 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v18, v40))
          {
            os_log_type_t v41 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)os_log_type_t v41 = 0;
            _os_log_impl(&dword_2465C2000, v18, v40, "Unknown EntityGestureRecognizer found!", v41, 2u);
            MEMORY[0x24C5348D0](v41, -1, -1);
            Class isa = v2;
          }
          else
          {
            Class isa = v18;
            float32x4_t v18 = v2;
          }
          goto LABEL_12;
        }
        Class isa = v36;
        os_log_type_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v39 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v39 = 0;
          _os_log_impl(&dword_2465C2000, v37, v38, "Connected EntityTranslateGestureRecognizer handleRotate selector.", v39, 2u);
          MEMORY[0x24C5348D0](v39, -1, -1);
        }

        objc_msgSend(v35, sel_addTarget_action_, v1, sel_handleRotate_);
      }
      float32x4_t v18 = isa;
LABEL_12:
      ++v5;

      if ((os_log_t)v5 == v57)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  os_log_type_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v42, v43))
  {
    os_log_type_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v44 = 0;
    _os_log_impl(&dword_2465C2000, v42, v43, "... done adding EntityTranslateGestureRecognizer gesture recognizers.", v44, 2u);
    MEMORY[0x24C5348D0](v44, -1, -1);
    swift_release();
  }
  else
  {

    swift_release();
  }
}

uint64_t DetectModeBoxModel.removeGestureRecognizers()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ARView.EntityGestures();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    _os_log_impl(&dword_2465C2000, v7, v8, "Trying to remove EntityTranslateGestureRecognizer gesture recognizers...", v9, 2u);
    MEMORY[0x24C5348D0](v9, -1, -1);
  }

  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = *(void **)(result + 16);
    id v12 = v11;
    uint64_t result = swift_release();
    if (v11)
    {
      v13[1] = MEMORY[0x263F8EE78];
      lazy protocol witness table accessor for type ARView.EntityGestures and conformance ARView.EntityGestures();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ARView.EntityGestures]);
      lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type [ARView.EntityGestures] and conformance [A], &demangling cache variable for type metadata for [ARView.EntityGestures]);
      uint64_t result = dispatch thunk of SetAlgebra.init<A>(_:)();
      if (*(void *)(v1 + 48))
      {
        ARView.installGestures(_:for:)();
        swift_bridgeObjectRelease();

        return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t DetectModeBoxModel.loadWireframeAsync()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_2465C2000, v1, v2, "Async loading wire frame box...", v3, 2u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }

  type metadata accessor for Entity();
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  MEMORY[0x24C5318C0](0x676E69646E756F42, 0xEF65627543786F42, static BoundingBoxHelpers.bundle);
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 1056964608;
  *(void *)(v5 + 24) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type LoadRequest<ModelEntity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v8 = 0;
    _os_log_impl(&dword_2465C2000, v6, v7, "Async loading wire frame reticle...", v8, 2u);
    MEMORY[0x24C5348D0](v8, -1, -1);
  }

  MEMORY[0x24C5318C0](0xD000000000000010, 0x80000002466C0940, static BoundingBoxHelpers.bundle);
  swift_allocObject();
  swift_weakInit();
  Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #2 in DetectModeBoxModel.loadWireframeAsync()(float a1)
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "... done loading wire frame box.", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2466B5E00;
  os_log_type_t v7 = (uint64_t *)(v6 + 32);
  type metadata accessor for BoundingBoxHelpers();
  static BoundingBoxHelpers.makeBoxMaterial()(v7);
  type metadata accessor for ModelEntity();
  os_log_type_t v8 = (void (*)(unsigned char *, void))HasModel.model.modify();
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for ModelComponent();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    ModelComponent.materials.setter();
    v8(v16, 0);
    type metadata accessor for Entity();
    swift_allocObject();
    Entity.init()();
    HasHierarchy.addChild(_:preservingWorldTransform:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
    *(float *)(inited + 32) = a1;
    *(float *)(inited + 36) = a1;
    *(float *)(inited + 40) = a1;
    specialized SIMD.init<A>(_:)(inited);
    swift_setDeallocating();
    HasTransform.setScale(_:relativeTo:)();
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (!Strong) {
      return swift_release();
    }
    uint64_t v15 = *(void *)(Strong + 48);
    swift_retain();
    uint64_t result = swift_release();
    if (v15)
    {
      HasHierarchy.addChild(_:preservingWorldTransform:)();
      swift_release();
      return swift_release();
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #4 in DetectModeBoxModel.loadWireframeAsync()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_2465C2000, v1, v2, "... done loading wire frame reticle.", v3, 2u);
    MEMORY[0x24C5348D0](v3, -1, -1);
  }

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_2466B5E00;
    os_log_type_t v7 = (uint64_t *)(v6 + 32);
    type metadata accessor for BoundingBoxHelpers();
    static BoundingBoxHelpers.makeBoxMaterial()(v7);
    type metadata accessor for ModelEntity();
    os_log_type_t v8 = (void (*)(unsigned char *, void))HasModel.model.modify();
    uint64_t v10 = v9;
    uint64_t v11 = type metadata accessor for ModelComponent();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      ModelComponent.materials.setter();
      v8(v12, 0);
      type metadata accessor for Entity();
      swift_allocObject();
      Entity.init()();
      HasHierarchy.addChild(_:preservingWorldTransform:)();
      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of closure #4 in DetectModeBoxModel.loadWireframeAsync());
      uint64_t result = HasTransform.scale.setter();
      if (*(void *)(v5 + 64))
      {
        swift_retain();
        swift_retain();
        HasHierarchy.addChild(_:preservingWorldTransform:)();
        swift_release();
        swift_release();
        swift_release();
        return swift_release();
      }
    }
    __break(1u);
  }
  return result;
}

void DetectModeBoxModel.scheduleTransitionAnimation(from:)(__n128 a1, float32x4_t a2, __n128 a3)
{
  if (*(void *)(v3 + 216))
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)logger);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_2465C2000, oslog, v5, "scheduleTransitionAnimation called when there was already one!  Punting...", v6, 2u);
      MEMORY[0x24C5348D0](v6, -1, -1);
    }
  }
  else
  {
    uint64_t v7 = v3;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      uint64_t v21 = v12;
      uint64_t v13 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v9, v10, "scheduleTransitionAnimation from: %{public}s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v12, -1, -1);
      MEMORY[0x24C5348D0](v11, -1, -1);
    }

    if (*(void *)(v7 + 32)
      && (swift_retain(),
          specialized simd_float4x4.init(translation:rotation:scale:)(a3.n128_f64[0], a2),
          type metadata accessor for Entity(),
          HasTransform.setTransformMatrix(_:relativeTo:)(),
          swift_release(),
          (uint64_t v15 = *(void *)(v7 + 32)) != 0))
    {
      type metadata accessor for DetectModeBoxModel.TransitionAnimation();
      uint64_t v16 = swift_allocObject();
      *(unsigned char *)(v16 + 16) = 0;
      *(_OWORD *)(v16 + 112) = 0u;
      *(_OWORD *)(v16 + 128) = 0u;
      *(_OWORD *)(v16 + 144) = 0u;
      *(unsigned char *)(v16 + 160) = 1;
      *(void *)(v16 + 168) = 0;
      *(unsigned char *)(v16 + 176) = 1;
      *(void *)(v16 + 184) = 0;
      *(void *)(v16 + 96) = 0;
      *(void *)(v16 + 104) = 0x3FE0000000000000;
      *(__n128 *)(v16 + 32) = a1;
      *(float32x4_t *)(v16 + 48) = a2;
      *(__n128 *)(v16 + 64) = a3;
      *(void *)(v16 + 80) = 0x3FE0000000000000;
      *(void *)(v16 + 88) = v15;
      *(void *)(v7 + 216) = v16;
      swift_retain();
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t DetectModeBoxModel.cancelAnimations()()
{
  if (v0[27])
  {
    swift_retain();
    DetectModeBoxModel.TransitionAnimation.cancel()();
    swift_release();
  }
  v0[27] = 0;
  swift_release();
  if (v0[28])
  {
    swift_retain();
    DetectModeBoxModel.StartDetectionAnimation.stop()();
    swift_release();
  }
  v0[28] = 0;
  uint64_t result = swift_release();
  v0[29] = 0xFFF0000000000000;
  return result;
}

double DetectModeBoxModel.viewportCenterPoint.getter()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = *(void **)(Strong + 16);
    if (v1)
    {
      id v2 = v1;
      objc_msgSend(v2, sel_bounds);
      double v3 = CGRectGetWidth(v9) * 0.5;
      objc_msgSend(v2, sel_bounds);
      CGRectGetHeight(v10);
      swift_release();

      return v3;
    }
    swift_release();
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  os_log_type_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_2465C2000, v5, v6, "No model or ARView: using (512, 512) for viewport center...", v7, 2u);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  return 512.0;
}

uint64_t DetectModeBoxModel.computeScreenPointFromNormalized(pointNDC:)(double a1)
{
  *(double *)&uint64_t result = COERCE_DOUBLE(swift_weakLoadStrong());
  if (*(double *)&result != 0.0)
  {
    double v3 = *(void **)(result + 16);
    if (v3)
    {
      id v4 = v3;
      objc_msgSend(v4, sel_bounds);
      double Width = CGRectGetWidth(v6);
      objc_msgSend(v4, sel_bounds);
      CGRectGetHeight(v7);
      swift_release();

      *(double *)&uint64_t result = (a1 + 1.0) * 0.5 * Width;
    }
    else
    {
      swift_release();
      *(double *)&uint64_t result = 0.0;
    }
  }
  return result;
}

void DetectModeBoxModel.update(deltaTime:)(double a1)
{
  *(double *)(v1 + 208) = *(double *)(v1 + 208) + a1;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    if (*(unsigned char *)(v1 + 24) == 1) {
      DetectModeBoxModel.updateDetectingState(model:)(Strong);
    }
    DetectModeBoxModel.updateAnimations(t:)(*(double *)(v1 + 208));
    if (*(void *)(v1 + 32))
    {
      type metadata accessor for Entity();
      swift_retain();
      HasTransform.transformMatrix(relativeTo:)();
      if (!*(void *)(v1 + 264))
      {
LABEL_33:
        __break(1u);
        return;
      }
      Swift::Double v3 = *(double *)(v1 + 208);
      id v4 = (simd_float4x4 *)swift_retain();
      BoundingBoxRotateManipulator.update(time:box:)(v3, v4);
      swift_release();
      uint64_t v5 = *(void *)(v1 + 240);
      uint64_t v6 = swift_weakLoadStrong();
      if (v6)
      {
        uint64_t v7 = v6;
        HasTransform.setTransformMatrix(_:relativeTo:)();
        HasTransform.scale(relativeTo:)();
        specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DetectModeBoxModel.update(deltaTime:));
        HasTransform.setScale(_:relativeTo:)();
        uint64_t v8 = *(void *)(v5 + 48);
        CGRect v9 = *(void **)(v7 + 16);
        id v22 = v9;
        Transform.init(matrix:)();
        long long v23 = v11;
        long long v24 = v10;
        *(float32x4_t *)os_log_t oslog = v12;
        BoundingBoxScaleManipulator.FaceHandleContainer.setScaleFromScreenConstraints(arView:extents:)(v9, v12);
        swift_beginAccess();
        unint64_t v13 = *(void *)(v8 + 40);
        if (v13 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
          if (v14)
          {
LABEL_9:
            uint64_t v15 = 4;
            while (1)
            {
              uint64_t v16 = v15 - 4;
              if ((v13 & 0xC000000000000001) != 0)
              {
                MEMORY[0x24C533AF0](v15 - 4, v13);
                BOOL v17 = __OFADD__(v16, 1);
                uint64_t v18 = v15 - 3;
                if (v17) {
                  goto LABEL_28;
                }
              }
              else
              {
                swift_retain();
                BOOL v17 = __OFADD__(v16, 1);
                uint64_t v18 = v15 - 3;
                if (v17)
                {
LABEL_28:
                  __break(1u);
                  goto LABEL_29;
                }
              }
              if (*(unsigned char *)(v8 + 120)) {
                break;
              }
              BoundingBoxScaleManipulator.FaceHandle.setPositionLocal(extents:minDistance:)();
              swift_release();
              ++v15;
              if (v18 == v14) {
                goto LABEL_17;
              }
            }
            __break(1u);
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (v14) {
            goto LABEL_9;
          }
        }
LABEL_17:
        swift_bridgeObjectRelease_n();
        *(_OWORD *)(v8 + 64) = *(_OWORD *)oslog;
        *(_OWORD *)(v8 + 80) = v24;
        *(_OWORD *)(v8 + 96) = v23;
        *(unsigned char *)(v8 + 112) = 0;
        swift_release();
        swift_release();
        swift_release();

        return;
      }
      swift_release();
    }
    swift_release();
  }
  else
  {
    if (one-time initialization token for logger != -1) {
LABEL_29:
    }
      swift_once();
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)logger);
    osloga = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(osloga, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_2465C2000, osloga, v20, "Model is nil!", v21, 2u);
      MEMORY[0x24C5348D0](v21, -1, -1);
    }
  }
}

void DetectModeBoxModel.updateAnimations(t:)(double a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 216);
  if (!v3) {
    goto LABEL_20;
  }
  if (*(unsigned char *)(v3 + 16) == 3)
  {
    *(void *)(v1 + 216) = 0;
    DetectModeBoxModel.attachBoxManipulator()();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)logger);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_2465C2000, v16, v17, "Removing completed TransitionAnimation and enabling face handles!", v18, 2u);
      MEMORY[0x24C5348D0](v18, -1, -1);
    }

    uint64_t v19 = *(void *)(v2 + 240);
    int v20 = *(unsigned __int8 *)(v19 + 96);
    *(unsigned char *)(v19 + 96) = 1;
    if (v20 != 1) {
      BoundingBoxScaleManipulator.attachGestures()();
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(v3 + 16))
  {
    double v21 = *(double *)(v1 + 208);
    swift_retain();
    DetectModeBoxModel.TransitionAnimation.update(t:)(v21);
LABEL_19:
    swift_release();
    goto LABEL_20;
  }
  if (*(void *)(v1 + 32) && (*(unsigned char *)(v1 + 144) & 1) == 0)
  {
    uint64_t v5 = one-time initialization token for logger;
    swift_retain();
    if (v5 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)logger);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      CGRect v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v25 = v24;
      *(_DWORD *)CGRect v9 = 136446210;
      type metadata accessor for simd_float4x4(0);
      uint64_t v10 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2465C2000, v7, v8, "updateAnimation(): got box, starting anim to: %{public}s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v24, -1, -1);
      MEMORY[0x24C5348D0](v9, -1, -1);
    }

    if (*(unsigned char *)(v2 + 144))
    {
      __break(1u);
      return;
    }
    Transform.init(matrix:)();
    DetectModeBoxModel.TransitionAnimation.startAnimation(at:to:)(a1, v12, v13, v14);
    goto LABEL_19;
  }
LABEL_20:
  uint64_t v22 = *(void *)(v2 + 272);
  if (v22 && *(unsigned char *)(v22 + 16) == 1)
  {
    if (!*(void *)(v22 + 96))
    {
      swift_retain();
      BoundingBoxAnimatedUpdater.startNewAnimationIfNeeded()();
      goto LABEL_29;
    }
    swift_retain();
    swift_retain();
    if ((AnimationPlaybackController.isPlaying.getter() & 1) == 0
      || (dispatch thunk of AnimationPlaybackController.isComplete.getter() & 1) != 0)
    {
      char v23 = dispatch thunk of AnimationPlaybackController.isComplete.getter();
      swift_release();
      if ((v23 & 1) == 0)
      {
LABEL_29:
        swift_release();
        return;
      }
      *(void *)(v22 + 96) = 0;
    }
    swift_release();
    goto LABEL_29;
  }
}

void DetectModeBoxModel.updateDetectingState(model:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 224);
  if (v3)
  {
    if (!*(void *)(v3 + 88)) {
      return;
    }
    swift_retain();
    swift_retain();
    char v4 = dispatch thunk of AnimationPlaybackController.isComplete.getter();
    swift_release();
    if (v4)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)logger);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v6, v7))
      {
        os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v8 = 0;
        _os_log_impl(&dword_2465C2000, v6, v7, "StartDetectionAnimation complete! Finishing...", v8, 2u);
        MEMORY[0x24C5348D0](v8, -1, -1);
      }

      uint64_t v9 = *(void *)(v2 + 224);
      if (v9)
      {
        uint64_t v10 = *(void (**)(uint64_t))(v9 + 104);
        if (v10)
        {
          uint64_t v11 = swift_retain();
          v10(v11);
          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?((uint64_t)v10);
        }
      }
      swift_release();
      *(void *)(v2 + 224) = 0;
    }
    goto LABEL_18;
  }
  DetectModeBoxModel.stickReticleModelToScreenCoordinates(model:)(a1);
  if (*(unsigned char *)(v1 + 144))
  {
    if (*(double *)(v1 + 232) + 0.5 > *(double *)(v1 + 208))
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)logger);
      swift_retain();
      __n128 v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_2465C2000, v13, v14, "... waiting for automatic detected box arrival.  Time remaining: %fs", v15, 0xCu);
        MEMORY[0x24C5348D0](v15, -1, -1);

        return;
      }

LABEL_18:
      swift_release();
      return;
    }
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)logger);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_2465C2000, v22, v23, "Didn't get an automatic box in time.  Starting manual box flow...", v24, 2u);
      MEMORY[0x24C5348D0](v24, -1, -1);
    }

    DetectModeBoxModel.startManualBoxFlow()();
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)logger);
    os_log_type_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_2465C2000, v17, v18, "Starting automatic bounding box flow...", v19, 2u);
      MEMORY[0x24C5348D0](v19, -1, -1);
    }

    if (*(unsigned char *)(v2 + 144))
    {
      __break(1u);
    }
    else
    {
      uint64_t v20 = swift_allocObject();
      swift_weakInit();
      swift_retain();
      DetectModeBoxModel.startTransitionAnim(toBox:onFinish:)((uint64_t)partial apply for closure #1 in DetectModeBoxModel.startAutomaticBoxFlow(), v20);
      swift_release_n();
      if (swift_weakLoadStrong())
      {
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.setter();
      }
    }
  }
}

void DetectModeBoxModel.startTransitionAnim(toBox:onFinish:)(uint64_t a1, uint64_t a2)
{
  *(__n64 *)&long long v5 = specialized static BoundingBoxHelpers.getSquishedBoxBottomTransform(boxWorld:)();
  long long v12 = v6;
  long long v13 = v5;
  long long v11 = v7;
  uint64_t v8 = v2[8];
  if (!v8)
  {
    __break(1u);
    goto LABEL_8;
  }
  swift_retain();
  if (!v2[8])
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = v2[9];
  type metadata accessor for DetectModeBoxModel.StartDetectionAnimation();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v8;
  *(void *)(v10 + 24) = v9;
  *(_OWORD *)(v10 + 32) = v13;
  *(_OWORD *)(v10 + 48) = v12;
  *(_OWORD *)(v10 + 64) = v11;
  *(void *)(v10 + 80) = 0x3FE0000000000000;
  *(void *)(v10 + 88) = 0;
  *(void *)(v10 + 96) = 0;
  *(void *)(v10 + 104) = a1;
  *(void *)(v10 + 112) = a2;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed () -> ())?(a1);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed ObjectCaptureSession.Frame.Feedback, @in_guaranteed ARCamera.TrackingState) -> ())?(0);
  v2[28] = v10;
  swift_release();
  if (!v2[28])
  {
LABEL_9:
    __break(1u);
    return;
  }
  swift_retain();
  DetectModeBoxModel.StartDetectionAnimation.start()();

  swift_release();
}

uint64_t closure #1 in DetectModeBoxModel.startAutomaticBoxFlow()()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (uint64_t *)&v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  long long v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    long long v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v7 = 0;
    _os_log_impl(&dword_2465C2000, v5, v6, "StartDetectionAnimation onFinish() is switching into .automatic box mode.", v7, 2u);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = Strong;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    *uint64_t v3 = static OS_dispatch_queue.main.getter();
    (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F8F0E0], v0);
    char v10 = _dispatchPreconditionTest(_:)();
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
    if ((v10 & 1) == 0)
    {
      __break(1u);
      return result;
    }
    DetectModeBoxModel.performSwitchStateTransitions(from:to:)(*(unsigned __int8 *)(v9 + 24), 2);
    *(unsigned char *)(v9 + 24) = 2;
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v12 = swift_weakLoadStrong();
    uint64_t result = swift_release();
    if (v12)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      v13[15] = 0;
      return static Published.subscript.setter();
    }
  }
  return result;
}

void DetectModeBoxModel.startManualBoxFlow()()
{
  if (*(unsigned char *)(v0 + 24) != 1)
  {
    __break(1u);
LABEL_30:
    swift_once();
    goto LABEL_11;
  }
  uint64_t v1 = v0;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = *(void **)(Strong + 16);
    id v4 = v3;
    swift_release();
    if (v3)
    {
      os_log_type_t v37 = v4;
      specialized static ManualBoxHelper.createDefaultManualBoxAtCurrentView(arView:)(v4, (uint64_t)v44);
      uint64_t v5 = v44[0];
      uint64_t v6 = v44[1];
      uint64_t v7 = v44[2];
      uint64_t v8 = v44[3];
      uint64_t v10 = v44[4];
      uint64_t v9 = v44[5];
      uint64_t v12 = v44[6];
      uint64_t v11 = v44[7];
      outlined init with take of Animation?((uint64_t)v44, (uint64_t)v45, &demangling cache variable for type metadata for simd_float4x4?);
      if (v45[64])
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)logger);
        os_log_type_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v16 = 0;
          _os_log_impl(&dword_2465C2000, v14, v15, "Cannot create a manual box with a raycast!  Using a default!", v16, 2u);
          MEMORY[0x24C5348D0](v16, -1, -1);
        }

        specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DetectModeBoxModel.startManualBoxFlow());
        *(_OWORD *)os_log_t oslog = v17;
        LODWORD(v18) = 0;
        HIDWORD(v18) = v19;
        long long v40 = v18;
        *(void *)&long long v20 = 0;
        DWORD2(v20) = 0;
        *(void *)&long long v21 = 0;
        *((void *)&v21 + 1) = v22;
        HIDWORD(v20) = v23;
        long long v38 = v20;
        long long v39 = v21;
      }
      else
      {
        *(void *)&long long v27 = v5;
        *((void *)&v27 + 1) = v6;
        *(_OWORD *)os_log_t oslog = v27;
        *(void *)&long long v27 = v7;
        *((void *)&v27 + 1) = v8;
        long long v40 = v27;
        *(void *)&long long v27 = v10;
        *((void *)&v27 + 1) = v9;
        long long v39 = v27;
        *(void *)&long long v27 = v12;
        *((void *)&v27 + 1) = v11;
        long long v38 = v27;
      }
      if (MEMORY[0x24C5349C0](v1 + 248))
      {
        if (swift_weakLoadStrong())
        {
          swift_getKeyPath();
          swift_getKeyPath();
          static Published.subscript.setter();
        }
        swift_unknownObjectRelease();
      }
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)logger);
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        float32x4_t v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        uint64_t v43 = v32;
        *(_DWORD *)float32x4_t v31 = 136315138;
        Transform.init(matrix:)();
        uint64_t v33 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v29, v30, "Using manual box: %s", v31, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v32, -1, -1);
        MEMORY[0x24C5348D0](v31, -1, -1);
      }

      *(_OWORD *)(v1 + 80) = *(_OWORD *)oslog;
      *(_OWORD *)(v1 + 96) = v40;
      *(_OWORD *)(v1 + 112) = v39;
      *(_OWORD *)(v1 + 128) = v38;
      *(unsigned char *)(v1 + 144) = 0;
      DetectModeBoxModel.detectedBoundingBox.didset();
      uint64_t v35 = swift_weakLoadStrong();
      if (v35)
      {
        DetectModeBoxModel.stickReticleModelToScreenCoordinates(model:)(v35);
        swift_release();
        uint64_t v36 = swift_allocObject();
        swift_weakInit();
        swift_retain();
        DetectModeBoxModel.startTransitionAnim(toBox:onFinish:)((uint64_t)partial apply for closure #1 in DetectModeBoxModel.startManualBoxFlow(), v36);
        swift_release_n();
        if (swift_weakLoadStrong())
        {
          swift_getKeyPath();
          swift_getKeyPath();
          swift_retain();
          static Published.subscript.setter();
          swift_release();
        }
      }
      else
      {
        __break(1u);
      }
      return;
    }
  }
  if (one-time initialization token for logger != -1) {
    goto LABEL_30;
  }
LABEL_11:
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)logger);
  osloga = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(osloga, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl(&dword_2465C2000, osloga, v25, "Cannot start manual box flow without a valid ARView!", v26, 2u);
    MEMORY[0x24C5348D0](v26, -1, -1);
  }
}

uint64_t closure #1 in DetectModeBoxModel.startManualBoxFlow()()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (uint64_t *)&v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_2465C2000, v5, v6, "StartDetectionAnimation onFinish() is switching into .manual box mode.", v7, 2u);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = Strong;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    *uint64_t v3 = static OS_dispatch_queue.main.getter();
    (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F8F0E0], v0);
    char v10 = _dispatchPreconditionTest(_:)();
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
    if ((v10 & 1) == 0)
    {
      __break(1u);
      return result;
    }
    DetectModeBoxModel.performSwitchStateTransitions(from:to:)(*(unsigned __int8 *)(v9 + 24), 3);
    *(unsigned char *)(v9 + 24) = 3;
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v12 = swift_weakLoadStrong();
    uint64_t result = swift_release();
    if (v12)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      v13[15] = 0;
      return static Published.subscript.setter();
    }
  }
  return result;
}

void DetectModeBoxModel.attachBoxManipulator()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
LABEL_21:
  }
    swift_once();
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "Attaching box face handle manipulator...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  uint64_t v6 = *(void *)(v1 + 240);
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v8 = *(void *)(v1 + 32);
  if (v8)
  {
    uint64_t v9 = Strong;
    swift_retain();
    BoundingBoxScaleManipulator.attach(model:target:enabled:)(v9, v8, 0);
    swift_release();
    swift_release();
    DetectModeBoxModel.currentCaptureBox.getter((uint64_t)v27);
    outlined init with take of Animation?((uint64_t)v27, (uint64_t)&v28, &demangling cache variable for type metadata for simd_float4x4?);
    if ((v29 & 1) == 0)
    {
      uint64_t v10 = swift_weakLoadStrong();
      if (v10)
      {
        uint64_t v11 = v10;
        type metadata accessor for Entity();
        HasTransform.setTransformMatrix(_:relativeTo:)();
        HasTransform.scale(relativeTo:)();
        specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DetectModeBoxModel.attachBoxManipulator());
        HasTransform.setScale(_:relativeTo:)();
        uint64_t v12 = *(void *)(v6 + 48);
        uint64_t v13 = *(void **)(v11 + 16);
        id v14 = v13;
        Transform.init(matrix:)();
        long long v24 = v16;
        long long v25 = v15;
        float32x4_t v26 = v17;
        BoundingBoxScaleManipulator.FaceHandleContainer.setScaleFromScreenConstraints(arView:extents:)(v13, v17);
        swift_beginAccess();
        unint64_t v18 = *(void *)(v12 + 40);
        if (v18 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
          if (v19)
          {
LABEL_10:
            uint64_t v20 = 4;
            while (1)
            {
              uint64_t v21 = v20 - 4;
              if ((v18 & 0xC000000000000001) != 0)
              {
                MEMORY[0x24C533AF0](v20 - 4, v18);
                BOOL v22 = __OFADD__(v21, 1);
                uint64_t v23 = v20 - 3;
                if (v22) {
                  goto LABEL_20;
                }
              }
              else
              {
                swift_retain();
                BOOL v22 = __OFADD__(v21, 1);
                uint64_t v23 = v20 - 3;
                if (v22)
                {
LABEL_20:
                  __break(1u);
                  goto LABEL_21;
                }
              }
              if (*(unsigned char *)(v12 + 120)) {
                break;
              }
              BoundingBoxScaleManipulator.FaceHandle.setPositionLocal(extents:minDistance:)();
              swift_release();
              ++v20;
              if (v23 == v19) {
                goto LABEL_18;
              }
            }
            __break(1u);
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (v19) {
            goto LABEL_10;
          }
        }
LABEL_18:
        swift_bridgeObjectRelease_n();
        *(float32x4_t *)(v12 + 64) = v26;
        *(_OWORD *)(v12 + 80) = v25;
        *(_OWORD *)(v12 + 96) = v24;
        *(unsigned char *)(v12 + 112) = 0;
        swift_release();
      }
    }
    DetectModeBoxModel.attachFrontFaceRotationWidget()();
    return;
  }
LABEL_26:
  __break(1u);
}

void DetectModeBoxModel.attachFrontFaceRotationWidget()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "attachFrontFaceIndicator called...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    if (*(void *)(v1 + 264))
    {
      uint64_t v7 = Strong;
      swift_retain();
      BoundingBoxRotateManipulator.attach(model:)(v7);
      swift_release();
      uint64_t v8 = v7 + OBJC_IVAR____TtC19_RealityKit_SwiftUI9DataModel_pointCloudsBySegment;
      swift_beginAccess();
      uint64_t v9 = *(void *)(*(void *)v8 + 16);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      BOOL v12 = os_log_type_enabled(v10, v11);
      if (v9 != 1)
      {
        if (v12)
        {
          float32x4_t v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)float32x4_t v17 = 0;
          _os_log_impl(&dword_2465C2000, v10, v11, "Not showing the box front face indicator since this is not the first segment.", v17, 2u);
          MEMORY[0x24C5348D0](v17, -1, -1);
        }

        uint64_t v18 = *(void *)(v1 + 264);
        if (v18)
        {
          char v19 = *(unsigned char *)(v18 + 256);
          if (v19)
          {
            uint64_t v20 = one-time initialization token for logger;
            swift_retain();
            if (v20 != -1) {
              swift_once();
            }
            __swift_project_value_buffer(v2, (uint64_t)logger);
            uint64_t v21 = Logger.logObject.getter();
            os_log_type_t v22 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v21, v22))
            {
              uint64_t v23 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v23 = 0;
              _os_log_impl(&dword_2465C2000, v21, v22, "Removing the front face indicator from scene.", v23, 2u);
              MEMORY[0x24C5348D0](v23, -1, -1);
            }

            type metadata accessor for Entity();
            HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
          }
          else
          {
            swift_retain();
          }
          *(unsigned char *)(v18 + 256) = 0;
          char v16 = v19;
          goto LABEL_23;
        }
LABEL_27:
        __break(1u);
        return;
      }
      if (v12)
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl(&dword_2465C2000, v10, v11, "Showing the box front face indicator since this is the first segment.", v13, 2u);
        MEMORY[0x24C5348D0](v13, -1, -1);
      }

      uint64_t v14 = *(void *)(v1 + 264);
      if (v14)
      {
        char v15 = *(unsigned char *)(v14 + 256);
        *(unsigned char *)(v14 + 256) = 1;
        swift_retain();
        char v16 = v15;
LABEL_23:
        BoundingBoxRotateManipulator.showFrontFaceIndicator.didset(v16);
        swift_release();
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_27;
  }
}

void DetectModeBoxModel.detachFrontFaceRotationWidget()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2465C2000, v3, v4, "detachFrontFaceIndicator...", v5, 2u);
    MEMORY[0x24C5348D0](v5, -1, -1);
  }

  if (*(void *)(v1 + 264))
  {
    uint64_t v6 = one-time initialization token for logger;
    swift_retain();
    if (v6 != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v2, (uint64_t)logger);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_2465C2000, v7, v8, "Detaching the box rotation widget from the detection box...", v9, 2u);
      MEMORY[0x24C5348D0](v9, -1, -1);
    }

    type metadata accessor for Entity();
    HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
    BoundingBoxRotateManipulator.detachGestures()();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void DetectModeBoxModel.stickReticleModelToScreenCoordinates(model:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_2465C2000, v5, v6, "Sticking reticle model to screen...", v7, 2u);
    MEMORY[0x24C5348D0](v7, -1, -1);
  }

  os_log_type_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    id v9 = v8;
    DetectModeBoxModel.computeWorldScaleForTargetReticle(arView:reticleEdgeNDC:offsetToPlane:)(0.9, 0.02);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
    *(void *)(inited + 32) = 0;
    *(_DWORD *)(inited + 40) = -1130113270;
    specialized SIMD.init<A>(_:)(inited);
    double oslogb = v11;
    swift_setDeallocating();
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DetectModeBoxModel.stickReticleModelToScreenCoordinates(model:));
    float32x4_t v39 = v12;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DetectModeBoxModel.makePlane(origin:normal:));
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of DetectModeBoxModel.makePlane(origin:normal:));
    *(double *)v14.i64 = simd_quaternion(v39, v13);
    float32x4_t v40 = v14;
    static simd_quatf.identity.getter();
    specialized simd_float4x4.init(translation:rotation:scale:)(oslogb, v40);
    DetectModeBoxModel.viewportCenterPoint.getter();
    *(double *)&uint64_t v15 = COERCE_DOUBLE(ARView.unproject(_:ontoPlane:relativeToCamera:)());
    if (v16)
    {
      swift_retain_n();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        uint64_t v46 = v36;
        *(_DWORD *)uint64_t v35 = 136315138;
        DetectModeBoxModel.viewportCenterPoint.getter();
        type metadata accessor for CGPoint(0);
        uint64_t v37 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v33, v34, "Can't unproject viewport center: %s", v35, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v36, -1, -1);
        MEMORY[0x24C5348D0](v35, -1, -1);
      }
      else
      {

        swift_release_n();
      }
    }
    else
    {
      double v17 = *(double *)&v15;
      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of DetectModeBoxModel.stickReticleModelToScreenCoordinates(model:));
      *(_OWORD *)oslogc = v18;
      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of DetectModeBoxModel.stickReticleModelToScreenCoordinates(model:));
      *(double *)v20.i64 = simd_quaternion(*(float32x4_t *)oslogc, v19);
      float32x4_t oslogd = v20;
      dispatch thunk of ARView.cameraTransform.getter();
      int32x4_t v21 = (int32x4_t)vnegq_f32(oslogd);
      int8x16_t v22 = (int8x16_t)vtrn2q_s32((int32x4_t)oslogd, vtrn1q_s32((int32x4_t)oslogd, v21));
      float32x4_t v24 = (float32x4_t)vrev64q_s32((int32x4_t)oslogd);
      v24.i32[0] = v21.i32[1];
      v24.i32[3] = v21.i32[2];
      float32x4_t oslog = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)oslogd, (int8x16_t)v21, 8uLL), *(float32x2_t *)v23.f32, 1), (float32x4_t)vextq_s8(v22, v22, 8uLL), v23.f32[0]), vmlaq_laneq_f32(vmulq_laneq_f32(oslogd, v23, 3), v24, v23, 2));
      static simd_quatf.identity.getter();
      long long v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        long long v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        *(_DWORD *)long long v27 = 136315138;
        uint64_t v46 = v28;
        uint64_t v29 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2465C2000, v25, v26, "transformWorld: %s", v27, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5348D0](v28, -1, -1);
        MEMORY[0x24C5348D0](v27, -1, -1);
      }

      if (*(void *)(v2 + 64))
      {
        specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #3 of DetectModeBoxModel.stickReticleModelToScreenCoordinates(model:));
        swift_retain();
        swift_retain();
        specialized simd_float4x4.init(translation:rotation:scale:)(v17, oslog);
        type metadata accessor for Entity();
        HasTransform.setTransformMatrix(_:relativeTo:)();
        HasTransform.setScale(_:relativeTo:)();

        swift_release();
        swift_release();
      }
      else
      {
        __break(1u);
      }
    }
  }
  else
  {
    osloga = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(osloga, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl(&dword_2465C2000, osloga, v31, "ARView was nil!", v32, 2u);
      MEMORY[0x24C5348D0](v32, -1, -1);
    }
  }
}

__n128 DetectModeBoxModel.computeWorldScaleForTargetReticle(arView:reticleEdgeNDC:offsetToPlane:)(float a1, float a2)
{
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DetectModeBoxModel.computeWorldScaleForTargetReticle(arView:reticleEdgeNDC:offsetToPlane:));
  long long v37 = v4;
  DetectModeBoxModel.computeScreenPointFromNormalized(pointNDC:)(0.0);
  if (v5 & 1) != 0 || (DetectModeBoxModel.computeScreenPointFromNormalized(pointNDC:)(a1), (v6))
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)logger);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v28, v29)) {
      goto LABEL_15;
    }
    unint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v30 = 0;
    os_log_type_t v31 = "Can't get screen points from normalized points!";
    goto LABEL_14;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
  *(void *)(inited + 32) = 0;
  *(float *)(inited + 40) = -a2;
  specialized SIMD.init<A>(_:)(inited);
  double v36 = v8;
  swift_setDeallocating();
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of DetectModeBoxModel.computeWorldScaleForTargetReticle(arView:reticleEdgeNDC:offsetToPlane:));
  float32x4_t v34 = v9;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DetectModeBoxModel.makePlane(origin:normal:));
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of DetectModeBoxModel.makePlane(origin:normal:));
  *(double *)v11.i64 = simd_quaternion(v34, v10);
  float32x4_t v35 = v11;
  static simd_quatf.identity.getter();
  specialized simd_float4x4.init(translation:rotation:scale:)(v36, v35);
  uint64_t v12 = ARView.unproject(_:ontoPlane:relativeToCamera:)();
  if (v14 & 1) != 0 || (uint64_t v15 = v12, v16 = v13, v17 = ARView.unproject(_:ontoPlane:relativeToCamera:)(), (v19))
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)logger);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v28, v29)) {
      goto LABEL_15;
    }
    unint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v30 = 0;
    os_log_type_t v31 = "Can't get unproject screen points into 3D view points!";
LABEL_14:
    _os_log_impl(&dword_2465C2000, v28, v29, v31, v30, 2u);
    MEMORY[0x24C5348D0](v30, -1, -1);
LABEL_15:

    return (__n128)v37;
  }
  v20.i64[0] = v15;
  v20.i64[1] = v16;
  v21.i64[0] = v17;
  v21.i64[1] = v18;
  float32x4_t v22 = vsubq_f32(v20, v21);
  float32x4_t v23 = vmulq_f32(v22, v22);
  v23.f32[0] = sqrtf(v23.f32[2]+ (float)((float)((float)(*(float *)&v15 - *(float *)&v17) * (float)(*(float *)&v15 - *(float *)&v17))+ v23.f32[1]));
  float v24 = v23.f32[0] + v23.f32[0];
  uint64_t v25 = swift_initStackObject();
  *(_OWORD *)(v25 + 16) = xmmword_2466B5DE0;
  *(float *)(v25 + 32) = v24;
  *(float *)(v25 + 36) = v24;
  *(float *)(v25 + 40) = v24;
  specialized SIMD.init<A>(_:)(v25);
  long long v37 = v26;
  swift_setDeallocating();
  return (__n128)v37;
}

uint64_t DetectModeBoxModel.subscribeToUpdateEvents()()
{
  uint64_t v1 = v0;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = *(void **)(result + 16);
    id v4 = v3;
    uint64_t result = swift_release();
    if (v3)
    {
      dispatch thunk of ARView.scene.getter();

      type metadata accessor for SceneEvents.Update();
      uint64_t v6 = 0;
      memset(v5, 0, sizeof(v5));
      swift_allocObject();
      swift_weakInit();
      Scene.subscribe<A>(to:on:_:)();
      swift_release();
      swift_release();
      outlined destroy of URL?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for EventSource?);
      outlined init with take of Animation?((uint64_t)v7, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
      swift_beginAccess();
      outlined assign with take of Cancellable?((uint64_t)v5, v1 + 160);
      return swift_endAccess();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in DetectModeBoxModel.subscribeToUpdateEvents()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    SceneEvents.Update.deltaTime.getter();
    DetectModeBoxModel.update(deltaTime:)(v1);
    return swift_release();
  }
  return result;
}

uint64_t DetectModeBoxModel.unsubscribeFromUpdateEvents()()
{
  swift_beginAccess();
  outlined init with copy of Cancellable?(v0 + 160, (uint64_t)&v3);
  if (*((void *)&v4 + 1))
  {
    outlined init with copy of Cancellable((uint64_t)&v3, (uint64_t)v2);
    outlined destroy of URL?((uint64_t)&v3, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
    __swift_project_boxed_opaque_existential_1(v2, v2[3]);
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v3, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  }
  uint64_t v5 = 0;
  long long v3 = 0u;
  long long v4 = 0u;
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v3, v0 + 160);
  return swift_endAccess();
}

uint64_t DetectModeBoxModel.deinit()
{
  swift_weakDestroy();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of DetectModeBoxModel.TargetReticleEntity?(*(void *)(v0 + 64));
  swift_bridgeObjectRelease();
  outlined destroy of URL?(v0 + 160, (uint64_t *)&demangling cache variable for type metadata for Cancellable?);
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of weak RangefinderDelegate?(v0 + 248);
  swift_release();
  swift_release();

  return v0;
}

uint64_t DetectModeBoxModel.__deallocating_deinit()
{
  DetectModeBoxModel.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DetectModeBoxModel()
{
  return self;
}

uint64_t type metadata accessor for DetectModeBoxModel.TransitionAnimation()
{
  return self;
}

uint64_t type metadata accessor for DetectModeBoxModel.StartDetectionAnimation()
{
  return self;
}

uint64_t EntityGestureRecognizerDelegate.gestureRecognizer(_:shouldRequireFailureOf:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  id v7 = a1;
  id v8 = a2;
  id v9 = v7;
  id v10 = v8;
  float32x4_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    uint64_t v57 = v54;
    *(_DWORD *)uint64_t v13 = 136315394;
    id v14 = v10;
    id v15 = v9;
    uint64_t v56 = v3;
    id v16 = objc_msgSend(v15, sel_description);
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v55 = v9;
    unint64_t v19 = v18;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    id v20 = v10;
    id v21 = objc_msgSend(v20, sel_description);
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    uint64_t v25 = v22;
    id v10 = v14;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v57);
    uint64_t v3 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    id v9 = v55;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v11, v12, "GestureRecognizerDelegate got %s shouldRequireFailureOf %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v54, -1, -1);
    MEMORY[0x24C5348D0](v13, -1, -1);
  }
  else
  {
  }
  uint64_t v26 = OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_D3054C8CC2B5FD3485D9DD74FE19D26731EntityGestureRecognizerDelegate_entityTranslateGesture;
  uint64_t v27 = *(void **)(v3
                 + OBJC_IVAR____TtC19_RealityKit_SwiftUIP33_D3054C8CC2B5FD3485D9DD74FE19D26731EntityGestureRecognizerDelegate_entityTranslateGesture);
  if (v27)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    id v28 = v9;
    id v29 = v27;
    char v30 = static NSObject.== infix(_:_:)();

    if (v30)
    {
      id v31 = BoundingBoxScaleManipulator.panGesture.getter();
      id v32 = v9;
      id v33 = v10;
      char v34 = static NSObject.== infix(_:_:)();

      id v9 = v32;
      if (v34)
      {
        float32x4_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v35, v36))
        {
          long long v37 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v37 = 0;
          unint64_t v38 = "GestureRecognizerDelegate: EntityTranslate gesture must wait for the GrabHandle gesture to fail!";
LABEL_20:
          _os_log_impl(&dword_2465C2000, v35, v36, v38, v37, 2u);
          MEMORY[0x24C5348D0](v37, -1, -1);
          goto LABEL_21;
        }
        goto LABEL_21;
      }
    }
    float32x4_t v39 = *(void **)(v3 + v26);
    if (v39)
    {
      id v40 = v28;
      id v41 = v9;
      id v42 = v39;
      char v43 = static NSObject.== infix(_:_:)();

      id v9 = v41;
      if (v43)
      {
        id v44 = BoundingBoxRotateManipulator.panGesture.getter();
        id v45 = v10;
        char v46 = static NSObject.== infix(_:_:)();

        id v9 = v41;
        if (v46)
        {
          float32x4_t v35 = Logger.logObject.getter();
          os_log_type_t v36 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v35, v36))
          {
            long long v37 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)long long v37 = 0;
            unint64_t v38 = "GestureRecognizerDelegate: EntityTranslate gesture must wait for the GrabRotateWidget gesture to fail!";
            goto LABEL_20;
          }
LABEL_21:

          return 1;
        }
      }
    }
  }
  id v47 = BoundingBoxScaleManipulator.panGesture.getter();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
  id v48 = v9;
  char v49 = static NSObject.== infix(_:_:)();

  if (v49)
  {
    id v50 = BoundingBoxRotateManipulator.panGesture.getter();
    id v51 = v10;
    char v52 = static NSObject.== infix(_:_:)();

    if (v52)
    {
      float32x4_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v35, v36))
      {
        long long v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v37 = 0;
        unint64_t v38 = "GestureRecognizerDelegate: GrabHandle gesture must wait for the GrabRotateWidget gesture to fail!";
        goto LABEL_20;
      }
      goto LABEL_21;
    }
  }
  return 0;
}

id EntityGestureRecognizerDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EntityGestureRecognizerDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for EntityGestureRecognizerDelegate()
{
  return self;
}

void *type metadata accessor for DetectModeBoxModel.TransitionAnimation.State()
{
  return &unk_26FACF498;
}

uint64_t destroy for DetectModeBoxModel.TargetReticleEntity()
{
  swift_release();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for DetectModeBoxModel.TargetReticleEntity(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for DetectModeBoxModel.TargetReticleEntity(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for DetectModeBoxModel.TargetReticleEntity(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for DetectModeBoxModel.TargetReticleEntity()
{
  return &type metadata for DetectModeBoxModel.TargetReticleEntity;
}

unsigned char *storeEnumTagSinglePayload for DetectModeBoxModel.TransitionAnimation.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24665E13CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectModeBoxModel.State()
{
  return &type metadata for DetectModeBoxModel.State;
}

unint64_t lazy protocol witness table accessor for type DetectModeBoxModel.State and conformance DetectModeBoxModel.State()
{
  unint64_t result = lazy protocol witness table cache variable for type DetectModeBoxModel.State and conformance DetectModeBoxModel.State;
  if (!lazy protocol witness table cache variable for type DetectModeBoxModel.State and conformance DetectModeBoxModel.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DetectModeBoxModel.State and conformance DetectModeBoxModel.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DetectModeBoxModel.TransitionAnimation.State and conformance DetectModeBoxModel.TransitionAnimation.State()
{
  unint64_t result = lazy protocol witness table cache variable for type DetectModeBoxModel.TransitionAnimation.State and conformance DetectModeBoxModel.TransitionAnimation.State;
  if (!lazy protocol witness table cache variable for type DetectModeBoxModel.TransitionAnimation.State and conformance DetectModeBoxModel.TransitionAnimation.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DetectModeBoxModel.TransitionAnimation.State and conformance DetectModeBoxModel.TransitionAnimation.State);
  }
  return result;
}

uint64_t key path getter for DataModel.manualBoxMode : DataModel@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

uint64_t key path setter for DataModel.manualBoxMode : DataModel()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

uint64_t key path getter for DataModel.raycastManualBox : DataModel@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

uint64_t key path setter for DataModel.raycastManualBox : DataModel()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

uint64_t key path getter for DataModel.isBoundingBoxAnimationPlaying : DataModel@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

uint64_t key path setter for DataModel.isBoundingBoxAnimationPlaying : DataModel()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

uint64_t sub_24665E29C()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in DetectModeBoxModel.subscribeToUpdateEvents()()
{
  return closure #1 in DetectModeBoxModel.subscribeToUpdateEvents()();
}

uint64_t specialized DetectModeBoxModel.init(model:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v34 = a3;
  uint64_t v35 = a2;
  uint64_t v33 = a1;
  uint64_t v5 = type metadata accessor for Entity.ComponentSet();
  uint64_t v29 = *(void *)(v5 - 8);
  uint64_t v30 = v5;
  MEMORY[0x270FA5388](v5);
  id v28 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for UnlitMaterial();
  uint64_t v32 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  id v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MaterialScalarParameter();
  MEMORY[0x270FA5388](v9 - 8);
  swift_weakInit();
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  type metadata accessor for MeshResource();
  static MeshResource.generateSphere(radius:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
  uint64_t v10 = swift_allocObject();
  long long v31 = xmmword_2466B5E00;
  *(_OWORD *)(v10 + 16) = xmmword_2466B5E00;
  id v11 = objc_msgSend(self, sel_redColor);
  MaterialScalarParameter.init(floatLiteral:)();
  uint64_t v12 = type metadata accessor for SimpleMaterial();
  uint64_t v13 = MEMORY[0x263F16188];
  *(void *)(v10 + 56) = v12;
  *(void *)(v10 + 64) = v13;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v10 + 32));
  SimpleMaterial.init(color:roughness:isMetallic:)();
  type metadata accessor for ModelEntity();
  swift_allocObject();
  *(void *)(v3 + 40) = ModelEntity.init(mesh:materials:)();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(unsigned char *)(v3 + 144) = 1;
  *(void *)(v3 + 152) = MEMORY[0x263F8EE88];
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(void *)(v3 + 192) = 0;
  *(unsigned char *)(v3 + 200) = specialized static ExperimentSettings.loadDebugBoxSeedEnabled(default:)(0) & 1;
  *(void *)(v3 + 208) = 0;
  *(void *)(v3 + 216) = 0;
  *(void *)(v3 + 224) = 0;
  *(void *)(v3 + 232) = 0xFFF0000000000000;
  type metadata accessor for BoundingBoxScaleManipulator();
  swift_allocObject();
  *(void *)(v3 + 240) = BoundingBoxScaleManipulator.init()();
  *(void *)(v3 + 256) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v3 + 264) = 0;
  *(void *)(v3 + 272) = 0;
  *(void *)(v3 + 280) = 0;
  uint64_t v14 = v32;
  swift_weakAssign();
  *(void *)(v3 + 256) = v34;
  swift_unknownObjectWeakAssign();
  objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithRed_green_blue_alpha_, 1.0, 1.0, 1.0, 0.0);
  UnlitMaterial.init(color:)();
  static MeshResource.generateBox(size:cornerRadius:)();
  uint64_t v15 = v36;
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = v31;
  uint64_t v17 = MEMORY[0x263F16178];
  *(void *)(v16 + 56) = v15;
  *(void *)(v16 + 64) = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v16 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 16))(boxed_opaque_existential_1, v8, v15);
  swift_allocObject();
  uint64_t v19 = ModelEntity.init(mesh:materials:)();
  uint64_t v20 = MEMORY[0x263F16130];
  *(void *)(v3 + 48) = v19;
  *(void *)(v3 + 56) = v20;
  swift_retain();
  Entity.generateCollisionShapes(recursive:)(0);
  uint64_t result = swift_release();
  if (*(void *)(v3 + 48))
  {
    uint64_t v22 = v28;
    dispatch thunk of Entity.components.getter();
    type metadata accessor for ModelComponent();
    Entity.ComponentSet.remove(_:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v22, v30);
    type metadata accessor for Entity();
    swift_allocObject();
    uint64_t v23 = Entity.init()();
    swift_allocObject();
    swift_retain();
    uint64_t v24 = Entity.init()();
    swift_retain();
    HasHierarchy.addChild(_:preservingWorldTransform:)();
    swift_release();
    swift_release();
    uint64_t v25 = *(void *)(v3 + 64);
    *(void *)(v3 + 64) = v23;
    *(void *)(v3 + 72) = v24;
    outlined consume of DetectModeBoxModel.TargetReticleEntity?(v25);
    type metadata accessor for BoundingBoxRotateManipulator();
    swift_allocObject();
    swift_retain();
    uint64_t v26 = specialized BoundingBoxRotateManipulator.init(parent:)();
    swift_release();
    *(void *)(v4 + 264) = v26;
    swift_release();
    DetectModeBoxModel.loadWireframeAsync()();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void specialized static ManualBoxHelper.createDefaultManualBoxAtCurrentView(arView:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  objc_msgSend(a1, sel_center);
  ARView.ray(through:)();
  outlined init with take of Animation?((uint64_t)v61, (uint64_t)v62, (uint64_t *)&demangling cache variable for type metadata for (origin: SIMD3<Float>, direction: SIMD3<Float>)?);
  if (v63)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)logger);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v5, v6)) {
      goto LABEL_24;
    }
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    id v8 = "Can't generate ray through screen center!  Cannot make dynamic manual box!";
LABEL_23:
    _os_log_impl(&dword_2465C2000, v5, v6, v8, v7, 2u);
    MEMORY[0x24C5348D0](v7, -1, -1);
LABEL_24:

    long long v23 = 0uLL;
    char v24 = 1;
    long long v25 = 0uLL;
    long long v26 = 0uLL;
    long long v27 = 0uLL;
LABEL_25:
    *(_OWORD *)a2 = v23;
    *(_OWORD *)(a2 + 16) = v25;
    *(_OWORD *)(a2 + 32) = v26;
    *(_OWORD *)(a2 + 48) = v27;
    *(unsigned char *)(a2 + 64) = v24;
    return;
  }
  float32x2_t v55 = *(float32x2_t *)&v62[0];
  float32x4_t v58 = (float32x4_t)v62[1];
  id v9 = objc_msgSend(a1, sel_session);
  id v10 = objc_msgSend(v9, sel_currentFrame);

  if (!v10
    || (id v11 = objc_msgSend(v10, sel_sceneDepth), v10, !v11)
    || (uint64_t v12 = (__CVBuffer *)objc_msgSend(v11, sel_depthMap), v11, !v12))
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)logger);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v5, v6)) {
      goto LABEL_24;
    }
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    id v8 = "Cannot get a depth buffer to cast the manual box ray!";
    goto LABEL_23;
  }
  int64_t Width = CVPixelBufferGetWidth(v12);
  int64_t Height = CVPixelBufferGetHeight(v12);
  if (Width >= 0) {
    uint64_t v15 = Width;
  }
  else {
    uint64_t v15 = Width + 1;
  }
  if (Height >= 0) {
    uint64_t v16 = Height;
  }
  else {
    uint64_t v16 = Height + 1;
  }
  int64_t BytesPerRow = CVPixelBufferGetBytesPerRow(v12);
  CVReturn v18 = CVPixelBufferLockBaseAddress(v12, 1uLL);
  if (v18 != noErr.getter())
  {
    float v21 = INFINITY;
    goto LABEL_27;
  }
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(v12);
  if (BaseAddress)
  {
    uint64_t v20 = (v16 >> 1) * BytesPerRow;
    if ((unsigned __int128)((v16 >> 1) * (__int128)BytesPerRow) >> 64 == v20 >> 63)
    {
      float v21 = *(float *)&BaseAddress[4 * (v15 >> 1) + v20];
      CVPixelBufferUnlockBaseAddress(v12, 1uLL);
LABEL_27:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)logger);
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        long long v31 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)long long v31 = 134217984;
        swift_beginAccess();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_2465C2000, v29, v30, "Manual box raycast hit world at depth %fm", v31, 0xCu);
        MEMORY[0x24C5348D0](v31, -1, -1);
      }

      swift_beginAccess();
      if (v21 <= 5.0)
      {
        if (v21 < 0.1)
        {
          uint64_t v35 = Logger.logObject.getter();
          os_log_type_t v36 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v35, v36))
          {
            long long v37 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)long long v37 = 134217984;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_2465C2000, v35, v36, "Constraining the default box raycast by min depth to: %f m.", v37, 0xCu);
            MEMORY[0x24C5348D0](v37, -1, -1);
          }

          float v21 = 0.1;
        }
      }
      else
      {
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v34 = 134217984;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_2465C2000, v32, v33, "Constraining the default box raycast by max depth to: %f m.", v34, 0xCu);
          MEMORY[0x24C5348D0](v34, -1, -1);
        }

        float v21 = 5.0;
      }
      Transform.init()();
      double v56 = COERCE_DOUBLE(Ray3D.point(t:)(v21, v55, *(float32x2_t *)v58.f32));
      float v38 = v21 * 0.25;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_2466B5DE0;
      *(float *)(inited + 32) = v38;
      *(float *)(inited + 36) = v38;
      *(float *)(inited + 40) = v38;
      specialized SIMD.init<A>(_:)(inited);
      swift_setDeallocating();
      id v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        id v42 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v42 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_2465C2000, v40, v41, "Making a default box cube of size %fm", v42, 0xCu);
        MEMORY[0x24C5348D0](v42, -1, -1);
      }

      float32x4_t v43 = v58;
      v43.i32[1] = 0;
      int32x4_t v44 = (int32x4_t)vmulq_f32(v43, v43);
      v44.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v44, 2), vadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 1))).u32[0];
      float32x2_t v45 = vrsqrte_f32((float32x2_t)v44.u32[0]);
      float32x2_t v46 = vmul_f32(v45, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v45, v45)));
      float32x4_t v59 = vmulq_n_f32(v43, vmul_f32(v46, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v46, v46))).f32[0]);
      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static ManualBoxHelper.createDefaultManualBoxAtCurrentView(arView:));
      *(double *)v48.i64 = simd_quaternion(v47, v59);
      *(double *)&long long v49 = specialized simd_float4x4.init(translation:rotation:scale:)(v56, v48);
      long long v57 = v50;
      long long v60 = v49;
      long long v53 = v52;
      long long v54 = v51;

      long long v27 = v53;
      long long v26 = v54;
      long long v25 = v57;
      long long v23 = v60;
      char v24 = 0;
      goto LABEL_25;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_24665EF18@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

uint64_t sub_24665EF40()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

uint64_t partial apply for closure #1 in DetectModeBoxModel.startManualBoxFlow()()
{
  return closure #1 in DetectModeBoxModel.startManualBoxFlow()();
}

uint64_t sub_24665EF70@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

uint64_t sub_24665EF98()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

uint64_t partial apply for closure #1 in DetectModeBoxModel.startAutomaticBoxFlow()()
{
  return closure #1 in DetectModeBoxModel.startAutomaticBoxFlow()();
}

uint64_t sub_24665EFC8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #2 in DetectModeBoxModel.loadWireframeAsync()()
{
  return closure #2 in DetectModeBoxModel.loadWireframeAsync()(*(float *)(v0 + 16));
}

uint64_t partial apply for closure #4 in DetectModeBoxModel.loadWireframeAsync()()
{
  return closure #4 in DetectModeBoxModel.loadWireframeAsync()();
}

unint64_t lazy protocol witness table accessor for type ARView.EntityGestures and conformance ARView.EntityGestures()
{
  unint64_t result = lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures;
  if (!lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures)
  {
    type metadata accessor for ARView.EntityGestures();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures);
  }
  return result;
}

uint64_t sub_24665F06C@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for DataModel.showMiniView : DataModel(a1);
}

uint64_t sub_24665F094()
{
  return key path setter for DataModel.showMiniView : DataModel();
}

void specialized DetectModeBoxModel.handleRotate(_:)(const char *a1, uint64_t a2, const char *a3)
{
  uint64_t v7 = v3;
  id v8 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(v8 - 1);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  DetectModeBoxModel.currentCaptureBox.getter((uint64_t)v37);
  outlined init with take of Animation?((uint64_t)v37, (uint64_t)v38, &demangling cache variable for type metadata for simd_float4x4?);
  if (v39)
  {
    if (one-time initialization token for logger != -1) {
LABEL_27:
    }
      swift_once();
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)logger);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_2465C2000, v13, v14, a3, v15, 2u);
      MEMORY[0x24C5348D0](v15, -1, -1);
    }

    return;
  }
  if (*(unsigned char *)(v3 + 24) == 2)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)logger);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_2465C2000, v17, v18, a1, v19, 2u);
      MEMORY[0x24C5348D0](v19, -1, -1);
    }

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    *(void *)id v11 = static OS_dispatch_queue.main.getter();
    (*(void (**)(char *, void, void *))(v9 + 104))(v11, *MEMORY[0x263F8F0E0], v8);
    char v20 = _dispatchPreconditionTest(_:)();
    (*(void (**)(char *, void *))(v9 + 8))(v11, v8);
    if (v20)
    {
      DetectModeBoxModel.performSwitchStateTransitions(from:to:)(*(unsigned __int8 *)(v7 + 24), 3u);
      *(unsigned char *)(v7 + 24) = 3;
      return;
    }
    __break(1u);
    goto LABEL_29;
  }
  float32x4_t v36 = (float32x4_t)v38[0];
  long long v35 = v38[1];
  long long v34 = v38[2];
  long long v33 = v38[3];
  uint64_t v21 = *(void *)(v3 + 240);
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v23 = Strong;
  type metadata accessor for Entity();
  HasTransform.setTransformMatrix(_:relativeTo:)();
  HasTransform.scale(relativeTo:)();
  specialized SIMD.init<A>(_:)(a2);
  HasTransform.setScale(_:relativeTo:)();
  id v11 = *(char **)(v21 + 48);
  char v24 = *(void **)(v23 + 16);
  id v8 = v24;
  Transform.init(matrix:)();
  long long v35 = v25;
  long long v34 = v26;
  float32x4_t v36 = v27;
  BoundingBoxScaleManipulator.FaceHandleContainer.setScaleFromScreenConstraints(arView:extents:)(v24, v27);
  swift_beginAccess();
  a1 = (const char *)*((void *)v11 + 5);
  if ((unint64_t)a1 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain_n();
    a3 = (const char *)_CocoaArrayWrapper.endIndex.getter();
    if (!a3) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  a3 = *(const char **)(((unint64_t)a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!a3)
  {
LABEL_24:
    swift_bridgeObjectRelease_n();
    long long v32 = v35;
    *((float32x4_t *)v11 + 4) = v36;
    *((_OWORD *)v11 + 5) = v32;
    *((_OWORD *)v11 + 6) = v34;
    v11[112] = 0;
    swift_release();

    return;
  }
LABEL_16:
  uint64_t v28 = 4;
  while (1)
  {
    uint64_t v29 = v28 - 4;
    if (((unint64_t)a1 & 0xC000000000000001) != 0)
    {
      MEMORY[0x24C533AF0](v28 - 4, a1);
      BOOL v30 = __OFADD__(v29, 1);
      long long v31 = (const char *)(v28 - 3);
      if (v30) {
        goto LABEL_26;
      }
    }
    else
    {
      swift_retain();
      BOOL v30 = __OFADD__(v29, 1);
      long long v31 = (const char *)(v28 - 3);
      if (v30)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    if (v11[120]) {
      break;
    }
    BoundingBoxScaleManipulator.FaceHandle.setPositionLocal(extents:minDistance:)();
    swift_release();
    ++v28;
    if (v31 == a3) {
      goto LABEL_24;
    }
  }
  __break(1u);
}

uint64_t outlined consume of DetectModeBoxModel.TargetReticleEntity?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized CircularBuffer.init(capacity:initialValue:)(uint64_t a1, float a2, double a3)
{
  *(void *)(v3 + 56) = 0;
  *(float *)(v3 + 16) = a2;
  *(double *)(v3 + 24) = a3;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = a1;
  if (a1 < 0) {
    goto LABEL_12;
  }
  swift_retain();
  if (a1)
  {
    uint64_t v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v5 + 16) = a1;
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
  uint64_t v8 = 0;
  v7[0] = v5 + 32;
  v7[1] = a1;
  partial apply for specialized implicit closure #2 in implicit closure #1 in CircularBuffer.init(capacity:initialValue:)(v7, &v8);
  if (v8 > a1)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    __break(1u);
    goto LABEL_11;
  }
  if (v7[0])
  {
    if (v5 + 32 == v7[0])
    {
      *(void *)(v5 + 16) = v8;
      swift_release();
      swift_beginAccess();
      *(void *)(v3 + 56) = v5;
      swift_release();
      return v3;
    }
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
LABEL_12:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized CircularBuffer.init(capacity:initialValue:)(int64_t a1, double a2, __n128 a3, __n128 a4, float a5)
{
  v5[6].n128_u64[0] = 0;
  v5[1].n128_f64[0] = a2;
  _OWORD v5[2] = a3;
  v5[3] = a4;
  v5[4].n128_f32[0] = a5;
  v5[5].n128_u64[0] = 0;
  v5[5].n128_u64[1] = 0;
  v5[4].n128_u64[1] = a1;
  if (a1 < 0) {
    goto LABEL_12;
  }
  swift_retain();
  if (a1)
  {
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = a1;
  }
  else
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
  }
  int64_t v10 = 0;
  v9[0] = v7 + 32;
  v9[1] = a1;
  partial apply for specialized implicit closure #2 in implicit closure #1 in CircularBuffer.init(capacity:initialValue:)(v9, &v10);
  if (v10 > a1)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    __break(1u);
    goto LABEL_11;
  }
  if (v9[0])
  {
    if (v7 + 32 == v9[0])
    {
      *(void *)(v7 + 16) = v10;
      swift_release();
      swift_beginAccess();
      v5[6].n128_u64[0] = v7;
      swift_release();
      return (uint64_t)v5;
    }
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
LABEL_12:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized CircularBuffer.init(capacity:initialValue:)(int64_t a1, double a2, __n128 a3, __n128 a4)
{
  v4[5].n128_u64[1] = 0;
  v4[1].n128_f64[0] = a2;
  _OWORD v4[2] = a3;
  v4[3] = a4;
  v4[4].n128_u64[1] = 0;
  v4[5].n128_u64[0] = 0;
  v4[4].n128_u64[0] = a1;
  if (a1 < 0) {
    goto LABEL_12;
  }
  swift_retain();
  if (a1)
  {
    uint64_t v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v6 + 16) = a1;
  }
  else
  {
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
  int64_t v9 = 0;
  v8[0] = v6 + 32;
  v8[1] = a1;
  partial apply for specialized implicit closure #2 in implicit closure #1 in CircularBuffer.init(capacity:initialValue:)(v8, &v9);
  if (v9 > a1)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    __break(1u);
    goto LABEL_11;
  }
  if (v8[0])
  {
    if (v6 + 32 == v8[0])
    {
      *(void *)(v6 + 16) = v9;
      swift_release();
      swift_beginAccess();
      v4[5].n128_u64[1] = v6;
      swift_release();
      return (uint64_t)v4;
    }
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
LABEL_12:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized implicit closure #2 in implicit closure #1 in CircularBuffer.init(capacity:initialValue:)(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 72);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v3)
    {
      uint64_t v4 = *(void *)(a3 + 16);
      long long v5 = *(_OWORD *)(a3 + 32);
      long long v6 = *(_OWORD *)(a3 + 48);
      int v7 = *(_DWORD *)(a3 + 64);
      uint64_t v8 = *result + 32;
      uint64_t v9 = *(void *)(a3 + 72);
      do
      {
        *(void *)(v8 - 32) = v4;
        *(_OWORD *)(v8 - 16) = v5;
        *(_OWORD *)uint64_t v8 = v6;
        *(_DWORD *)(v8 + 16) = v7;
        v8 += 64;
        --v9;
      }
      while (v9);
    }
    *a2 = v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  long long v5;
  long long v6;
  _OWORD *v7;
  uint64_t v8;

  uint64_t v3 = *(void *)(a3 + 64);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v3)
    {
      uint64_t v4 = *(void *)(a3 + 16);
      long long v5 = *(_OWORD *)(a3 + 32);
      long long v6 = *(_OWORD *)(a3 + 48);
      int v7 = (_OWORD *)(*result + 32);
      uint64_t v8 = *(void *)(a3 + 64);
      do
      {
        *((void *)v7 - 4) = v4;
        *(v7 - 1) = v5;
        uint8_t *v7 = v6;
        v7 += 3;
        --v8;
      }
      while (v8);
    }
    *a2 = v3;
  }
  return result;
}

uint64_t specialized CircularBuffer.at(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result < 0 || v2[9] <= result)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    char v11 = 1;
    goto LABEL_13;
  }
  uint64_t v4 = v2[10];
  BOOL v5 = __OFSUB__(v4, result);
  uint64_t v6 = v4 - result;
  if (v5)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = v2[8];
  uint64_t v8 = v6 + v7;
  if (__OFADD__(v6, v7))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (!v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v7 == -1 && v8 == 0x8000000000000000) {
    goto LABEL_19;
  }
  uint64_t result = swift_beginAccess();
  uint64_t v9 = v2[11];
  if (v9)
  {
    unint64_t v10 = v8 % v7;
    if (((v8 % v7) & 0x8000000000000000) == 0)
    {
      if (v10 < *(void *)(v9 + 16))
      {
        char v11 = 0;
        uint64_t v12 = (void *)(v9 + 48 * v10);
        uint64_t v13 = v12[4];
        uint64_t v14 = v12[6];
        uint64_t v15 = v12[7];
        uint64_t v16 = v12[8];
        uint64_t v17 = v12[9];
LABEL_13:
        *(void *)a2 = v13;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = v14;
        *(void *)(a2 + 24) = v15;
        *(void *)(a2 + 32) = v16;
        *(void *)(a2 + 40) = v17;
        *(unsigned char *)(a2 + 48) = v11;
        return result;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if (result < 0 || v2[10] <= result)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    os_log_type_t v18 = 0;
    char v11 = 1;
    goto LABEL_13;
  }
  uint64_t v4 = v2[11];
  BOOL v5 = __OFSUB__(v4, result);
  uint64_t v6 = v4 - result;
  if (v5)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = v2[9];
  uint64_t v8 = v6 + v7;
  if (__OFADD__(v6, v7))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (!v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v7 == -1 && v8 == 0x8000000000000000) {
    goto LABEL_19;
  }
  uint64_t result = swift_beginAccess();
  uint64_t v9 = v2[12];
  if (v9)
  {
    unint64_t v10 = v8 % v7;
    if (((v8 % v7) & 0x8000000000000000) == 0)
    {
      if (v10 < *(void *)(v9 + 16))
      {
        char v11 = 0;
        uint64_t v12 = v9 + (v10 << 6);
        uint64_t v13 = *(void *)(v12 + 32);
        uint64_t v14 = *(void *)(v12 + 48);
        uint64_t v15 = *(void *)(v12 + 56);
        uint64_t v16 = *(void *)(v12 + 64);
        uint64_t v17 = *(void *)(v12 + 72);
        os_log_type_t v18 = *(_DWORD *)(v12 + 80);
LABEL_13:
        *(void *)a2 = v13;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = v14;
        *(void *)(a2 + 24) = v15;
        *(void *)(a2 + 32) = v16;
        *(void *)(a2 + 40) = v17;
        *(_DWORD *)(a2 + 48) = v18;
        *(unsigned char *)(a2 + 52) = v11;
        return result;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  __break(1u);
  return result;
}

void specialized CircularBuffer.pushNew(_:)(uint64_t a1@<X8>, double a2@<D0>, __n128 a3@<Q1>, __n128 a4@<Q2>, float a5@<S3>)
{
  uint64_t v7 = v5[11];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = v5[9];
  if (!v10)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v9 == 0x8000000000000000 && v10 == -1) {
    goto LABEL_27;
  }
  unint64_t v14 = v9 % v10;
  v5[11] = v9 % v10;
  uint64_t v15 = v5[10];
  if (v15 == v10)
  {
    swift_beginAccess();
    uint64_t v19 = v5[12];
    if (!v19)
    {
LABEL_31:
      __break(1u);
      return;
    }
    if ((v14 & 0x8000000000000000) != 0) {
      goto LABEL_28;
    }
    if (v14 >= *(void *)(v19 + 16))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v20 = v19 + (v14 << 6);
    uint64_t v28 = *(void *)(v20 + 48);
    uint64_t v29 = *(void *)(v20 + 32);
    uint64_t v16 = *(void *)(v20 + 64);
    uint64_t v27 = *(void *)(v20 + 56);
    uint64_t v17 = *(void *)(v20 + 72);
    int v18 = *(_DWORD *)(v20 + 80);
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v27 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
  }
  uint64_t v21 = v5 + 12;
  swift_beginAccess();
  uint64_t v22 = v5[12];
  if (!v22)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v21 = v22;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v22 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v22);
    uint64_t *v21 = v22;
  }
  if ((v14 & 0x8000000000000000) != 0) {
    goto LABEL_24;
  }
  if (v14 >= *(void *)(v22 + 16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v24 = (__n128 *)(v22 + (v14 << 6));
  v24[2].n128_f64[0] = a2;
  void v24[3] = a3;
  void v24[4] = a4;
  v24[5].n128_f32[0] = a5;
  swift_endAccess();
  uint64_t v25 = v5[10];
  BOOL v8 = __OFADD__(v25, 1);
  uint64_t v26 = v25 + 1;
  if (v8)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v10 < v26) {
    uint64_t v26 = v10;
  }
  v5[10] = v26;
  *(void *)a1 = v29;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v28;
  *(void *)(a1 + 24) = v27;
  *(void *)(a1 + 32) = v16;
  *(void *)(a1 + 40) = v17;
  *(_DWORD *)(a1 + 48) = v18;
  *(unsigned char *)(a1 + 52) = v15 != v10;
}

void specialized CircularBuffer.pushNew(_:)(float a1, double a2)
{
  uint64_t v3 = v2[6];
  BOOL v4 = __OFADD__(v3, 1);
  uint64_t v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v6 = v2[4];
  if (!v6)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v5 == 0x8000000000000000 && v6 == -1) {
    goto LABEL_25;
  }
  unint64_t v10 = v5 % v6;
  v2[6] = v5 % v6;
  if (v2[5] == v6)
  {
    swift_beginAccess();
    uint64_t v11 = v2[7];
    if (!v11)
    {
LABEL_29:
      __break(1u);
      return;
    }
    if ((v10 & 0x8000000000000000) != 0) {
      goto LABEL_26;
    }
    if (v10 >= *(void *)(v11 + 16))
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
  }
  uint64_t v12 = v2 + 7;
  swift_beginAccess();
  uint64_t v13 = v2[7];
  if (!v13)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v12 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v13 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v13);
    uint64_t *v12 = v13;
  }
  if ((v10 & 0x8000000000000000) != 0) {
    goto LABEL_22;
  }
  if (v10 >= *(void *)(v13 + 16))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v15 = v13 + 16 * v10;
  *(float *)(v15 + 32) = a1;
  *(double *)(v15 + 40) = a2;
  swift_endAccess();
  uint64_t v16 = v2[5];
  BOOL v4 = __OFADD__(v16, 1);
  uint64_t v17 = v16 + 1;
  if (v4)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v6 < v17) {
    uint64_t v17 = v6;
  }
  v2[5] = v17;
}

void specialized CircularBuffer.pushNew(_:)(uint64_t a1@<X8>, double a2@<D0>, __n128 a3@<Q1>, __n128 a4@<Q2>)
{
  uint64_t v6 = v4[10];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = v4[8];
  if (!v9)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v8 == 0x8000000000000000 && v9 == -1) {
    goto LABEL_27;
  }
  unint64_t v12 = v8 % v9;
  v4[10] = v8 % v9;
  uint64_t v13 = v4[9];
  if (v13 == v9)
  {
    swift_beginAccess();
    uint64_t v17 = v4[11];
    if (!v17)
    {
LABEL_31:
      __break(1u);
      return;
    }
    if ((v12 & 0x8000000000000000) != 0) {
      goto LABEL_28;
    }
    if (v12 >= *(void *)(v17 + 16))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    int v18 = (void *)(v17 + 48 * v12);
    uint64_t v14 = v18[7];
    uint64_t v25 = v18[6];
    uint64_t v26 = v18[4];
    uint64_t v15 = v18[8];
    uint64_t v16 = v18[9];
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v19 = v4 + 11;
  swift_beginAccess();
  uint64_t v20 = v4[11];
  if (!v20)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v19 = v20;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v20 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v20);
    *uint64_t v19 = v20;
  }
  if ((v12 & 0x8000000000000000) != 0) {
    goto LABEL_24;
  }
  if (v12 >= *(void *)(v20 + 16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v22 = (__n128 *)(v20 + 48 * v12);
  v22[2].n128_f64[0] = a2;
  _OWORD v22[3] = a3;
  v22[4] = a4;
  swift_endAccess();
  uint64_t v23 = v4[9];
  BOOL v7 = __OFADD__(v23, 1);
  uint64_t v24 = v23 + 1;
  if (v7)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v9 < v24) {
    uint64_t v24 = v9;
  }
  v4[9] = v24;
  *(void *)a1 = v26;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v25;
  *(void *)(a1 + 24) = v14;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = v16;
  *(unsigned char *)(a1 + 48) = v13 != v9;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance DeviceMotionEstimator.ActiveComponents@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance DeviceMotionEstimator.ActiveComponents(void *a1@<X8>)
{
  *a1 = 0;
}

void *protocol witness for SetAlgebra.union(_:) in conformance DeviceMotionEstimator.ActiveComponents@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance DeviceMotionEstimator.ActiveComponents@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance DeviceMotionEstimator.ActiveComponents@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance DeviceMotionEstimator.ActiveComponents(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance DeviceMotionEstimator.ActiveComponents@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance DeviceMotionEstimator.ActiveComponents@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance DeviceMotionEstimator.ActiveComponents(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance DeviceMotionEstimator.ActiveComponents(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance DeviceMotionEstimator.ActiveComponents(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance DeviceMotionEstimator.ActiveComponents@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance DeviceMotionEstimator.ActiveComponents(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance DeviceMotionEstimator.ActiveComponents(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance DeviceMotionEstimator.ActiveComponents(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance DeviceMotionEstimator.ActiveComponents()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance DeviceMotionEstimator.ActiveComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance DeviceMotionEstimator.ActiveComponents(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance DeviceMotionEstimator.ActiveComponents@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *DeviceMotionEstimator.init(desc:)(uint64_t a1)
{
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_DWORD *)(v2 + 136) = 1065353216;
  *(unsigned char *)(v2 + 140) = 0;
  float32x4_t v4 = *(float32x4_t *)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(float32x4_t *)(v2 + 32) = v4;
  *(_OWORD *)(v2 + 48) = v5;
  float v7 = *(float *)a1;
  float v6 = *(float *)(a1 + 4);
  float v8 = *(float *)(a1 + 8);
  float v9 = *(float *)(a1 + 40);
  v4.f32[0] = v6;
  v4.i32[1] = *(_DWORD *)a1;
  v4.i64[1] = __PAIR64__(LODWORD(v9), LODWORD(v8));
  *(_DWORD *)(v2 + 144) = 981668463;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgezq_f32(v4)))) & 1) != 0
    || (uint64_t v3 = (_OWORD *)a1, v10 = *(float *)(a1 + 44), v9 >= v10)
    || v10 <= 0.0
    || *(uint64_t *)(a1 + 16) < 1
    || *(uint64_t *)(a1 + 32) < 1)
  {
    __break(1u);
  }
  else
  {
    double v1 = (void *)v2;
    float v39 = v7;
    float v40 = v6;
    float v41 = v8;
    if (one-time initialization token for logger == -1) {
      goto LABEL_7;
    }
  }
  swift_once();
LABEL_7:
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)logger);
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v43 = v15;
    *(_DWORD *)uint64_t v14 = 136446210;
    long long v16 = v3[1];
    v42[0] = *v3;
    v42[1] = v16;
    void v42[2] = v3[2];
    uint64_t v17 = String.init<A>(describing:)();
    *(void *)&v42[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v12, v13, "Creating DeviceMotionEstimator with desc=%{public}s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v15, -1, -1);
    MEMORY[0x24C5348D0](v14, -1, -1);
  }

  Transform.init()();
  __n128 v35 = v20;
  __n128 v37 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CircularBuffer<DeviceMotionEstimator.FrameRecord>);
  swift_allocObject();
  v1[10] = specialized CircularBuffer.init(capacity:initialValue:)(4, 0.0, v35, v37);
  swift_release();
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DeviceMotionEstimator.init(desc:));
  __n128 v38 = v21;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of DeviceMotionEstimator.init(desc:));
  __n128 v36 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CircularBuffer<DeviceMotionEstimator.DerivativeRecord>);
  swift_allocObject();
  v1[11] = specialized CircularBuffer.init(capacity:initialValue:)(4, 0.0, v38, v36, 0.0);
  swift_release();
  if (v39 <= 0.0)
  {
    uint64_t v23 = 4;
    if (v40 > 0.0) {
      uint64_t v23 = 6;
    }
    if (v41 <= 0.0) {
      uint64_t v23 = 2 * (v40 > 0.0);
    }
  }
  else
  {
    uint64_t v23 = 5;
    if (v40 > 0.0) {
      uint64_t v23 = 7;
    }
    uint64_t v24 = 3;
    if (v40 <= 0.0) {
      uint64_t v24 = 1;
    }
    if (v41 <= 0.0) {
      uint64_t v23 = v24;
    }
  }
  v1[8] = v23;
  swift_retain_n();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(void *)&v42[0] = v28;
    *(_DWORD *)uint64_t v27 = 136446210;
    uint64_t v43 = v1[8];
    uint64_t v29 = String.init<A>(describing:)();
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v25, v26, "Using activeComponents = %{public}s", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v28, -1, -1);
    MEMORY[0x24C5348D0](v27, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  if (!DeviceMotionEstimator.makeCircularBuffersAsNeeded()())
  {
    swift_release();
    long long v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      long long v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v33 = 0;
      _os_log_impl(&dword_2465C2000, v31, v32, "Can't create all the CircularBuffer's!  Are we low on memory?", v33, 2u);
      MEMORY[0x24C5348D0](v33, -1, -1);
    }

    return 0;
  }
  return v1;
}

void DeviceMotionEstimator.update(time:pose:orbit:)(uint64_t a1, uint64_t a2, char a3, double a4, double a5, __n128 a6, __n128 a7)
{
  if (*(void *)(v7 + 80))
  {
    char v11 = a3 & 1;
    swift_retain();
    specialized CircularBuffer.pushNew(_:)((uint64_t)v15, a4, a7, a6);
    swift_release();
    DeviceMotionEstimator.updateMotionEstimate(time:orbit:)(a1, a2, v11, a4);
    float v12 = 0.45;
    if (*(unsigned char *)(v7 + 140)) {
      float v12 = 0.55;
    }
    *(unsigned char *)(v7 + 140) = *(float *)(v7 + 136) < v12;
    *(double *)(v7 + 72) = a4;
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall DeviceMotionEstimator.reset()()
{
  uint64_t v1 = *(void *)(v0 + 80);
  if (!v1)
  {
    __break(1u);
    goto LABEL_14;
  }
  *(void *)(v1 + 72) = 0;
  *(void *)(v1 + 80) = 0;
  uint64_t v2 = *(void *)(v0 + 88);
  if (!v2)
  {
LABEL_14:
    __break(1u);
    return;
  }
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0;
  uint64_t v3 = *(void *)(v0 + 104);
  if (v3)
  {
    *(void *)(v3 + 40) = 0;
    *(void *)(v3 + 48) = 0;
  }
  uint64_t v4 = *(void *)(v0 + 96);
  if (v4)
  {
    *(void *)(v4 + 40) = 0;
    *(void *)(v4 + 48) = 0;
  }
  uint64_t v5 = *(void *)(v0 + 112);
  if (v5)
  {
    *(void *)(v5 + 40) = 0;
    *(void *)(v5 + 48) = 0;
  }
  *(_DWORD *)(v0 + 132) = 0;
  float v6 = *(float *)(v0 + 56);
  float v7 = 1.0;
  if (v6 <= 0.0)
  {
    float v8 = *(float *)(v0 + 60);
    float v7 = 0.0;
    if (v8 >= 0.0) {
      float v7 = 1.0 - (float)((float)(0.0 - v6) / (float)(v8 - v6));
    }
  }
  *(float *)(v0 + 136) = v7;
}

BOOL DeviceMotionEstimator.makeCircularBuffersAsNeeded()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[8];
  if ((v2 & 2) != 0)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)logger);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      float v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float v6 = 0;
      _os_log_impl(&dword_2465C2000, v4, v5, "Creating linearSpeed buffer.", v6, 2u);
      MEMORY[0x24C5348D0](v6, -1, -1);
    }

    uint64_t v7 = v1[4];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CircularBuffer<DeviceMotionEstimator.SpeedSample>);
    swift_allocObject();
    v1[12] = specialized CircularBuffer.init(capacity:initialValue:)(v7, 0.0, 0.0);
    swift_release();
    if (!v1[12]) {
      return 0;
    }
  }
  if (v2)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    float v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      char v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v11 = 0;
      _os_log_impl(&dword_2465C2000, v9, v10, "Creating angularSpeed buffer.", v11, 2u);
      MEMORY[0x24C5348D0](v11, -1, -1);
    }

    uint64_t v12 = v1[4];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CircularBuffer<DeviceMotionEstimator.SpeedSample>);
    swift_allocObject();
    v1[13] = specialized CircularBuffer.init(capacity:initialValue:)(v12, 0.0, 0.0);
    swift_release();
    if (!v1[13]) {
      return 0;
    }
  }
  if ((v2 & 4) == 0) {
    return 1;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)logger);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    long long v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v16 = 0;
    _os_log_impl(&dword_2465C2000, v14, v15, "Creating orbitalSpeed buffer.", v16, 2u);
    MEMORY[0x24C5348D0](v16, -1, -1);
  }

  uint64_t v17 = v1[4];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CircularBuffer<DeviceMotionEstimator.SpeedSample>);
  swift_allocObject();
  v1[14] = specialized CircularBuffer.init(capacity:initialValue:)(v17, 0.0, 0.0);
  swift_release();
  return v1[14] != 0;
}

void DeviceMotionEstimator.updateMotionEstimate(time:orbit:)(uint64_t a1, uint64_t a2, char a3, double a4)
{
  *(double *)(v4 + 72) = a4;
  if (!*(void *)(v4 + 80))
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  specialized CircularBuffer.at(_:)(0, (uint64_t)v38);
  outlined init with take of Animation?((uint64_t)v38, (uint64_t)v51, &demangling cache variable for type metadata for DeviceMotionEstimator.FrameRecord?);
  if ((v54 & 1) != 0
    || (double v8 = v51[0],
        float32x4_t v35 = v53,
        float32x4_t v36 = v52,
        specialized CircularBuffer.at(_:)(*(void *)(v4 + 48), (uint64_t)v39),
        outlined init with take of Animation?((uint64_t)v39, (uint64_t)v47, &demangling cache variable for type metadata for DeviceMotionEstimator.FrameRecord?), (v50 & 1) != 0))
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)logger);
    os_log_type_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v10, v11)) {
      goto LABEL_9;
    }
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    uint64_t v13 = "Can't get previous framerecords.";
LABEL_8:
    _os_log_impl(&dword_2465C2000, v10, v11, v13, v12, 2u);
    MEMORY[0x24C5348D0](v12, -1, -1);
LABEL_9:

    return;
  }
  double v14 = v8 - v47[0];
  if (v8 - v47[0] <= 0.0)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)logger);
    os_log_type_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v10, v11)) {
      goto LABEL_9;
    }
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    uint64_t v13 = "dt cannot be 0!  Not updating motion estimate...";
    goto LABEL_8;
  }
  if (!*(void *)(v4 + 88)) {
    goto LABEL_34;
  }
  float32x4_t v33 = v49;
  float32x4_t v34 = v48;
  swift_retain();
  double v17 = DeviceMotionEstimator.computeDerivatives(dt:recordNow:recordPrevious:orbit:)(a1, a2, a3 & 1, v14, v15, v36, v35, v16, v34, v33);
  specialized CircularBuffer.pushNew(_:)((uint64_t)v40, v17, v18, v19, v20);
  swift_release();
  if (!*(void *)(v4 + 88))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  specialized CircularBuffer.at(_:)(0, (uint64_t)v41);
  outlined init with take of Animation?((uint64_t)v41, (uint64_t)v42, &demangling cache variable for type metadata for DeviceMotionEstimator.DerivativeRecord?);
  if (v46) {
    return;
  }
  float32x4_t v21 = v43;
  float v22 = v45;
  uint64_t v23 = *(void *)(v4 + 64);
  if (v23)
  {
    float32x4_t v37 = v43;
    if (*(void *)(v4 + 104))
    {
      float32x4_t v24 = vmulq_f32(v44, v44);
      float v25 = sqrtf(v24.f32[2] + vaddv_f32(*(float32x2_t *)v24.f32));
      swift_retain();
      specialized CircularBuffer.pushNew(_:)(v25, v8);
      swift_release();
      float32x4_t v21 = v37;
      goto LABEL_18;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_18:
  if ((v23 & 2) == 0) {
    goto LABEL_21;
  }
  if (!*(void *)(v4 + 96))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  float32x4_t v26 = vmulq_f32(v21, v21);
  float v27 = sqrtf(v26.f32[2] + vaddv_f32(*(float32x2_t *)v26.f32));
  swift_retain();
  specialized CircularBuffer.pushNew(_:)(v27, v8);
  swift_release();
LABEL_21:
  if ((v23 & 4) == 0) {
    goto LABEL_24;
  }
  if (!*(void *)(v4 + 112))
  {
LABEL_38:
    __break(1u);
    return;
  }
  swift_retain();
  specialized CircularBuffer.pushNew(_:)(v22, v8);
  swift_release();
LABEL_24:
  DeviceMotionEstimator.computeSmoothedSpeeds()();
  float32x2_t v28 = vmul_f32(*(float32x2_t *)(v4 + 20), *(float32x2_t *)(v4 + 124));
  float v29 = (float)((float)(*(float *)(v4 + 16) * *(float *)(v4 + 120)) + v28.f32[0]) + v28.f32[1];
  *(float *)(v4 + 132) = v29;
  float v30 = *(float *)(v4 + 56);
  if (v29 >= v30)
  {
    float v32 = *(float *)(v4 + 60);
    if (v32 >= v29) {
      *(float *)(v4 + 136) = 1.0 - (float)((float)(v29 - v30) / (float)(v32 - v30));
    }
    else {
      *(_DWORD *)(v4 + 136) = 0;
    }
  }
  else
  {
    *(_DWORD *)(v4 + 136) = 1065353216;
  }
}

void DeviceMotionEstimator.computeSmoothedSpeeds()()
{
  *(void *)(v0 + 120) = 0;
  *(_DWORD *)(v0 + 128) = 0;
  uint64_t v1 = *(void *)(v0 + 64);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 104);
    if (!v2)
    {
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    uint64_t v3 = specialized DeviceMotionEstimator.numSamplesCoveringDuration(buffer:duration:)(*(void *)(v0 + 104), *(double *)(v0 + 40));
    if (v3 < 0) {
      goto LABEL_71;
    }
    uint64_t v4 = v3;
    if (v3)
    {
      swift_beginAccess();
      uint64_t v5 = v2[4];
      if (!v5)
      {
LABEL_74:
        __break(1u);
        goto LABEL_75;
      }
      uint64_t v6 = 0;
      uint64_t v7 = v2[6];
      uint64_t v8 = v2[7];
      uint64_t v9 = v2[5] & ~((uint64_t)v2[5] >> 63);
      while (v4 != v6)
      {
        if (v9 == v6) {
          goto LABEL_51;
        }
        uint64_t v10 = v7 - v6;
        if (__OFSUB__(v7, v6)) {
          goto LABEL_52;
        }
        BOOL v11 = __OFADD__(v10, v5);
        uint64_t v12 = v10 + v5;
        if (v11) {
          goto LABEL_53;
        }
        if (v5 == -1 && v12 == 0x8000000000000000) {
          goto LABEL_68;
        }
        if (!v8) {
          goto LABEL_77;
        }
        unint64_t v13 = v12 % v5;
        if ((v13 & 0x8000000000000000) != 0) {
          goto LABEL_54;
        }
        if (v13 >= *(void *)(v8 + 16)) {
          goto LABEL_55;
        }
        ++v6;
        *(float *)(v0 + 120) = *(float *)(v0 + 120) + (float)((float)(1.0 / (float)v4) * *(float *)(v8 + 32 + 16 * v13));
        if (v4 == v6) {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
  }
LABEL_17:
  if ((v1 & 2) != 0)
  {
    double v14 = *(void **)(v0 + 96);
    if (!v14)
    {
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    uint64_t v15 = specialized DeviceMotionEstimator.numSamplesCoveringDuration(buffer:duration:)(*(void *)(v0 + 96), *(double *)(v0 + 40));
    if (v15 < 0) {
      goto LABEL_72;
    }
    uint64_t v16 = v15;
    if (v15)
    {
      swift_beginAccess();
      uint64_t v17 = v14[4];
      if (!v17)
      {
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      uint64_t v18 = 0;
      uint64_t v19 = v14[6];
      uint64_t v20 = v14[7];
      uint64_t v21 = v14[5] & ~((uint64_t)v14[5] >> 63);
      while (v16 != v18)
      {
        if (v21 == v18) {
          goto LABEL_57;
        }
        uint64_t v22 = v19 - v18;
        if (__OFSUB__(v19, v18)) {
          goto LABEL_58;
        }
        BOOL v11 = __OFADD__(v22, v17);
        uint64_t v23 = v22 + v17;
        if (v11) {
          goto LABEL_59;
        }
        if (v17 == -1 && v23 == 0x8000000000000000) {
          goto LABEL_69;
        }
        if (!v20) {
          goto LABEL_78;
        }
        unint64_t v24 = v23 % v17;
        if ((v24 & 0x8000000000000000) != 0) {
          goto LABEL_60;
        }
        if (v24 >= *(void *)(v20 + 16)) {
          goto LABEL_61;
        }
        ++v18;
        *(float *)(v0 + 124) = *(float *)(v0 + 124)
                             + (float)((float)(1.0 / (float)v16) * *(float *)(v20 + 32 + 16 * v24));
        if (v16 == v18) {
          goto LABEL_33;
        }
      }
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
  }
LABEL_33:
  if ((v1 & 4) != 0)
  {
    float v25 = *(void **)(v0 + 112);
    if (!v25)
    {
LABEL_82:
      __break(1u);
      return;
    }
    uint64_t v26 = specialized DeviceMotionEstimator.numSamplesCoveringDuration(buffer:duration:)(*(void *)(v0 + 112), *(double *)(v0 + 40));
    if (v26 < 0) {
      goto LABEL_73;
    }
    uint64_t v27 = v26;
    if (v26)
    {
      swift_beginAccess();
      uint64_t v28 = v25[4];
      if (!v28) {
        goto LABEL_76;
      }
      uint64_t v29 = 0;
      uint64_t v30 = v25[6];
      uint64_t v31 = v25[7];
      uint64_t v32 = v25[5] & ~((uint64_t)v25[5] >> 63);
      while (v27 != v29)
      {
        if (v32 == v29) {
          goto LABEL_63;
        }
        uint64_t v33 = v30 - v29;
        if (__OFSUB__(v30, v29)) {
          goto LABEL_64;
        }
        BOOL v11 = __OFADD__(v33, v28);
        uint64_t v34 = v33 + v28;
        if (v11) {
          goto LABEL_65;
        }
        if (v28 == -1 && v34 == 0x8000000000000000) {
          goto LABEL_70;
        }
        if (!v31) {
          goto LABEL_79;
        }
        unint64_t v35 = v34 % v28;
        if ((v35 & 0x8000000000000000) != 0) {
          goto LABEL_66;
        }
        if (v35 >= *(void *)(v31 + 16)) {
          goto LABEL_67;
        }
        ++v29;
        *(float *)(v0 + 128) = *(float *)(v0 + 128)
                             + (float)((float)(1.0 / (float)v27) * *(float *)(v31 + 32 + 16 * v35));
        if (v27 == v29) {
          return;
        }
      }
      goto LABEL_62;
    }
  }
}

double DeviceMotionEstimator.computeDerivatives(dt:recordNow:recordPrevious:orbit:)(uint64_t a1, uint64_t a2, char a3, double a4, double a5, float32x4_t a6, float32x4_t a7, double a8, float32x4_t a9, float32x4_t a10)
{
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of DeviceMotionEstimator.computeDerivatives(dt:recordNow:recordPrevious:orbit:));
  uint64_t v15 = *(void *)(v10 + 64);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of DeviceMotionEstimator.computeDerivatives(dt:recordNow:recordPrevious:orbit:));
  if (v15)
  {
    int8x16_t v16 = (int8x16_t)vmulq_f32(a10, a10);
    *(float32x2_t *)v16.i8 = vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
    v16.i32[0] = vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1)).u32[0];
    float32x2_t v17 = vrecpe_f32((float32x2_t)v16.u32[0]);
    float32x2_t v18 = vmul_f32(v17, vrecps_f32((float32x2_t)v16.u32[0], v17));
    int32x4_t v19 = (int32x4_t)vmulq_n_f32(vmulq_f32(a10, (float32x4_t)xmmword_2466B7770), vmul_f32(v18, vrecps_f32((float32x2_t)v16.u32[0], v18)).f32[0]);
    int32x4_t v20 = (int32x4_t)vnegq_f32((float32x4_t)v19);
    int8x16_t v21 = (int8x16_t)vtrn2q_s32(v19, vtrn1q_s32(v19, v20));
    float32x4_t v22 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 8uLL), *(float32x2_t *)a7.f32, 1), (float32x4_t)vextq_s8(v21, v21, 8uLL), a7.f32[0]);
    float32x4_t v23 = (float32x4_t)vrev64q_s32(v19);
    v23.i32[0] = v20.i32[1];
    v23.i32[3] = v20.i32[2];
    float32x4_t v24 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v19, a7, 3), v23, a7, 2), v22);
    float32x4_t v25 = vmulq_f32(v24, v24);
    atan2f(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]), v24.f32[3]);
  }
  if ((v15 & 4) != 0 && (a3 & 1) == 0)
  {
    v26.i64[0] = a1;
    v26.i64[1] = a2;
    specialized DeviceMotionEstimator.computeOrbitAngle(posNow:posPrev:orbit:)(a6, a9, v26);
  }
  return a4;
}

uint64_t DeviceMotionEstimator.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DeviceMotionEstimator()
{
  return self;
}

void *type metadata accessor for DeviceMotionEstimator.SpeedSample()
{
  return &unk_26FACF670;
}

__n128 __swift_memcpy52_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceMotionEstimator.DerivativeRecord(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 52)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DeviceMotionEstimator.DerivativeRecord(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 52) = v3;
  return result;
}

void *type metadata accessor for DeviceMotionEstimator.DerivativeRecord()
{
  return &unk_26FACF6F0;
}

void *type metadata accessor for DeviceMotionEstimator.FrameRecord()
{
  return &unk_26FACF778;
}

void *type metadata accessor for DeviceMotionEstimator.ActiveComponents()
{
  return &unk_26FACF7A8;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for DeviceMotionEstimator.Descriptor()
{
  return &type metadata for DeviceMotionEstimator.Descriptor;
}

unint64_t lazy protocol witness table accessor for type DeviceMotionEstimator.ActiveComponents and conformance DeviceMotionEstimator.ActiveComponents()
{
  unint64_t result = lazy protocol witness table cache variable for type DeviceMotionEstimator.ActiveComponents and conformance DeviceMotionEstimator.ActiveComponents;
  if (!lazy protocol witness table cache variable for type DeviceMotionEstimator.ActiveComponents and conformance DeviceMotionEstimator.ActiveComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceMotionEstimator.ActiveComponents and conformance DeviceMotionEstimator.ActiveComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DeviceMotionEstimator.ActiveComponents and conformance DeviceMotionEstimator.ActiveComponents;
  if (!lazy protocol witness table cache variable for type DeviceMotionEstimator.ActiveComponents and conformance DeviceMotionEstimator.ActiveComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceMotionEstimator.ActiveComponents and conformance DeviceMotionEstimator.ActiveComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DeviceMotionEstimator.ActiveComponents and conformance DeviceMotionEstimator.ActiveComponents;
  if (!lazy protocol witness table cache variable for type DeviceMotionEstimator.ActiveComponents and conformance DeviceMotionEstimator.ActiveComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceMotionEstimator.ActiveComponents and conformance DeviceMotionEstimator.ActiveComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DeviceMotionEstimator.ActiveComponents and conformance DeviceMotionEstimator.ActiveComponents;
  if (!lazy protocol witness table cache variable for type DeviceMotionEstimator.ActiveComponents and conformance DeviceMotionEstimator.ActiveComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceMotionEstimator.ActiveComponents and conformance DeviceMotionEstimator.ActiveComponents);
  }
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  long long v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

float specialized DeviceMotionEstimator.computeOrbitAngle(posNow:posPrev:orbit:)(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2466B7740;
  int8x16_t v4 = (int8x16_t)vsubq_f32(a1, a3);
  *(int32x2_t *)(inited + 32) = vzip1_s32(*(int32x2_t *)v4.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
  specialized SIMD.init<A>(_:)(inited);
  float32x2_t v6 = v5;
  swift_setDeallocating();
  uint64_t v7 = swift_initStackObject();
  *(_OWORD *)(v7 + 16) = xmmword_2466B7740;
  int8x16_t v8 = (int8x16_t)vsubq_f32(a2, a3);
  *(int32x2_t *)(v7 + 32) = vzip1_s32(*(int32x2_t *)v8.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  specialized SIMD.init<A>(_:)(v7);
  float32x2_t v10 = v9;
  swift_setDeallocating();
  float32x2_t v11 = vmul_f32(v6, v6);
  float32x2_t v12 = vmul_f32(v10, v10);
  int32x2_t v13 = vcgt_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32((int32x2_t)v12, (int32x2_t)v11), (float32x2_t)vzip2_s32((int32x2_t)v12, (int32x2_t)v11))), (float32x2_t)vdup_n_s32(0x3A83126Fu));
  float v14 = 0.0;
  if (v13.i32[1] & v13.i32[0])
  {
    unsigned __int32 v15 = vadd_f32(v11, (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1)).u32[0];
    float32x2_t v16 = vrsqrte_f32((float32x2_t)v15);
    float32x2_t v17 = vmul_f32(v16, vrsqrts_f32((float32x2_t)v15, vmul_f32(v16, v16)));
    LODWORD(v18) = vmul_f32(v17, vrsqrts_f32((float32x2_t)v15, vmul_f32(v17, v17))).u32[0];
    unsigned __int32 v19 = vadd_f32(v12, (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1)).u32[0];
    float32x2_t v20 = vrsqrte_f32((float32x2_t)v19);
    float32x2_t v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v19, vmul_f32(v20, v20)));
    specialized static MathHelpers.angleBetween(_:_:)(vmul_n_f32(v6, v18), vmul_n_f32(v10, vmul_f32(v21, vrsqrts_f32((float32x2_t)v19, vmul_f32(v21, v21))).f32[0]));
    return v22;
  }
  return v14;
}

uint64_t specialized DeviceMotionEstimator.numSamplesCoveringDuration(buffer:duration:)(uint64_t result, double a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (v2 < 1)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 48);
  uint64_t v5 = *(void *)(result + 32);
  uint64_t v6 = v4 + v5;
  if (__OFADD__(v4, v5))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (!v5)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v5 == -1 && v6 == 0x8000000000000000) {
    goto LABEL_34;
  }
  uint64_t result = swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 56);
  if (v9)
  {
    unint64_t v10 = v6 % v5;
    if (v6 % v5 < 0)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    unint64_t v11 = *(void *)(v9 + 16);
    if (v10 >= v11)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v2 == 1) {
      return 1;
    }
    uint64_t v12 = v9 + 32;
    uint64_t result = 1;
    while (v2 != result)
    {
      uint64_t v13 = v4 - result;
      if (__OFSUB__(v4, result)) {
        goto LABEL_25;
      }
      BOOL v14 = __OFADD__(v13, v5);
      uint64_t v15 = v13 + v5;
      if (v14) {
        goto LABEL_26;
      }
      if (v5 == -1 && v15 == 0x8000000000000000) {
        goto LABEL_28;
      }
      unint64_t v16 = v15 % v5;
      if (v16 >= v11) {
        goto LABEL_27;
      }
      if (*(double *)(v12 + 16 * v10 + 8) - *(double *)(v12 + 16 * v16 + 8) >= a2) {
        return result;
      }
      if (v2 == ++result) {
        return v2;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_35:
  __break(1u);
  return result;
}

void *partial apply for specialized implicit closure #2 in implicit closure #1 in CircularBuffer.init(capacity:initialValue:)(void *result, void *a2)
{
  uint64_t v3 = *(void *)(v2 + 32);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v3)
    {
      int v4 = *(_DWORD *)(v2 + 16);
      uint64_t v5 = *(void *)(v2 + 24);
      uint64_t v6 = (void *)(*result + 8);
      uint64_t v7 = *(void *)(v2 + 32);
      do
      {
        *((_DWORD *)v6 - 2) = v4;
        *uint64_t v6 = v5;
        v6 += 2;
        --v7;
      }
      while (v7);
    }
    *a2 = v3;
  }
  return result;
}

void *partial apply for specialized implicit closure #2 in implicit closure #1 in CircularBuffer.init(capacity:initialValue:)(void *a1, void *a2)
{
  return specialized implicit closure #2 in implicit closure #1 in CircularBuffer.init(capacity:initialValue:)(a1, a2, v2);
}

{
  uint64_t v2;

  return specialized implicit closure #2 in implicit closure #1 in CircularBuffer.init(capacity:initialValue:)(a1, a2, v2);
}

uint64_t specialized Collection.first.getter()
{
  type metadata accessor for Scene.AnchorCollection();
  lazy protocol witness table accessor for type UITouch and conformance NSObject(&lazy protocol witness table cache variable for type Scene.AnchorCollection and conformance Scene.AnchorCollection, MEMORY[0x263F164C8]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v0 = 0;
  if (v4[4] != v4[0])
  {
    uint64_t v1 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v0 = *v2;
    swift_retain();
    v1(v4, 0);
  }
  return v0;
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.startIndex.getter();
    uint64_t v5 = v4;
    uint64_t v6 = __CocoaSet.endIndex.getter();
    char v8 = MEMORY[0x24C533A00](v3, v5, v6, v7);
    swift_bridgeObjectRelease();
    if (v8)
    {
LABEL_3:
      outlined consume of Set<AnyCancellable>.Index._Variant(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    specialized Set.subscript.getter(v3, v5, v2 != 0, a1);
    uint64_t v9 = v13;
    outlined consume of Set<AnyCancellable>.Index._Variant(v3, v5, v2 != 0);
    return v9;
  }
  uint64_t result = specialized _NativeSet.startIndex.getter(a1);
  if ((v12 & 1) == 0)
  {
    uint64_t v5 = v11;
    if (*(_DWORD *)(a1 + 36) == v11)
    {
      uint64_t v3 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t DragGestureRecognizer.touchesBegan(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for UITouch();
  lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, (void (*)(uint64_t))type metadata accessor for UITouch);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v27.receiver = v3;
  v27.super_class = (Class)type metadata accessor for DragGestureRecognizer();
  objc_msgSendSuper2(&v27, sel_touchesBegan_withEvent_, isa, a2);

  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = (void *)specialized Collection.first.getter(v6);
  swift_bridgeObjectRelease();
  if (v7)
  {
    id v8 = objc_msgSend(v3, sel_view);
    objc_msgSend(v7, sel_locationInView_, v8);
    uint64_t v10 = v9;
    uint64_t v12 = v11;

    uint64_t v13 = v10;
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v25 = 0;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)logger);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    float32x2_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)float32x2_t v17 = 136446210;
    uint64_t v26 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGPoint?);
    uint64_t v19 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v15, v16, "StartDrag: %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v18, -1, -1);
    MEMORY[0x24C5348D0](v17, -1, -1);
  }

  float32x2_t v21 = &v3[OBJC_IVAR____TtC19_RealityKit_SwiftUI21DragGestureRecognizer_draggable];
  uint64_t result = MEMORY[0x24C5349C0](v21);
  if (result)
  {
    uint64_t v23 = *((void *)v21 + 1);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t))(v23 + 8))(v13, v25, v7 == 0, ObjectType, v23);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t DragGestureRecognizer.touchesEnded(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for UITouch();
  lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, (void (*)(uint64_t))type metadata accessor for UITouch);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v27.receiver = v3;
  v27.super_class = (Class)type metadata accessor for DragGestureRecognizer();
  objc_msgSendSuper2(&v27, sel_touchesEnded_withEvent_, isa, a2);

  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = (void *)specialized Collection.first.getter(v6);
  swift_bridgeObjectRelease();
  if (v7)
  {
    id v8 = objc_msgSend(v3, sel_view);
    objc_msgSend(v7, sel_locationInView_, v8);
    uint64_t v10 = v9;
    uint64_t v12 = v11;

    uint64_t v13 = v10;
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v25 = 0;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)logger);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    float32x2_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)float32x2_t v17 = 136446210;
    uint64_t v26 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGPoint?);
    uint64_t v19 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2465C2000, v15, v16, "Ending drag gesture... %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v18, -1, -1);
    MEMORY[0x24C5348D0](v17, -1, -1);
  }

  float32x2_t v21 = &v3[OBJC_IVAR____TtC19_RealityKit_SwiftUI21DragGestureRecognizer_draggable];
  uint64_t result = MEMORY[0x24C5349C0](v21);
  if (result)
  {
    uint64_t v23 = *((void *)v21 + 1);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t))(v23 + 16))(v13, v25, v7 == 0, ObjectType, v23);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t @objc DragGestureRecognizer.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, id))
{
  type metadata accessor for UITouch();
  lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, (void (*)(uint64_t))type metadata accessor for UITouch);
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a4;
  id v10 = a1;
  a5(v8, v9);

  return swift_bridgeObjectRelease();
}

id DragGestureRecognizer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DragGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for DragGestureRecognizer()
{
  return self;
}

unint64_t type metadata accessor for UITouch()
{
  unint64_t result = lazy cache variable for type metadata for UITouch;
  if (!lazy cache variable for type metadata for UITouch)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  }
  return result;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  id v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      if (a4 < 0) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      MEMORY[0x24C533A50](a1, a2, v7);
      type metadata accessor for UITouch();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
LABEL_27:
    __break(1u);
    return;
  }
  if (a3) {
    goto LABEL_13;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_13:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  __CocoaSet.Index.element.getter();
  type metadata accessor for UITouch();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v17;
  swift_unknownObjectRelease();
  Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v8 & ~v9;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_26:

    __break(1u);
    goto LABEL_27;
  }
  id v10 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v6 = (v6 + 1) & v12;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_26;
      }
      id v13 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v14 = static NSObject.== infix(_:_:)();
    }
    while ((v14 & 1) == 0);
  }

LABEL_20:
  uint64_t v15 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v16 = v15;
}

uint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ExperimentSettings()
{
  return &type metadata for ExperimentSettings;
}

unsigned char *storeEnumTagSinglePayload for ExperimentSettings.PointCloudRenderStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24666320CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExperimentSettings.PointCloudRenderStyle()
{
  return &type metadata for ExperimentSettings.PointCloudRenderStyle;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExperimentSettings.PointCloudRenderStyle()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExperimentSettings.PointCloudRenderStyle()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExperimentSettings.PointCloudRenderStyle()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ExperimentSettings.PointCloudRenderStyle@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExperimentSettings.PointCloudRenderStyle.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ExperimentSettings.PointCloudRenderStyle(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x73746E696F70;
  if (*v1) {
    uint64_t v2 = 0x7365627563;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExperimentSettings.PointCloudRenderStyle(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type ExperimentSettings.PointCloudRenderStyle and conformance ExperimentSettings.PointCloudRenderStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ExperimentSettings.PointCloudRenderStyle and conformance ExperimentSettings.PointCloudRenderStyle;
  if (!lazy protocol witness table cache variable for type ExperimentSettings.PointCloudRenderStyle and conformance ExperimentSettings.PointCloudRenderStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExperimentSettings.PointCloudRenderStyle and conformance ExperimentSettings.PointCloudRenderStyle);
  }
  return result;
}

uint64_t specialized static ExperimentSettings.loadDefaults(forKey:)(uint64_t a1, unint64_t a2)
{
  id v4 = objc_msgSend(self, sel_standardUserDefaults);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)logger);
  swift_bridgeObjectRetain_n();
  unsigned int v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    Swift::Int v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v23 = v9;
    *(_DWORD *)Swift::Int v8 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2465C2000, v6, v7, "Looking for key=\"%s\"", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5348D0](v9, -1, -1);
    MEMORY[0x24C5348D0](v8, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v10 = (void *)MEMORY[0x24C533410](a1, a2);
  id v11 = objc_msgSend(v4, sel_stringForKey_, v10);

  if (v11)
  {
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v23 = v18;
      *(_DWORD *)uint64_t v17 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v17 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2465C2000, v15, v16, "Found defaults \"%s\" == \"%s\"", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v18, -1, -1);
      MEMORY[0x24C5348D0](v17, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      float32x2_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float32x2_t v21 = 0;
      _os_log_impl(&dword_2465C2000, v19, v20, "... key not found!", v21, 2u);
      MEMORY[0x24C5348D0](v21, -1, -1);
    }

    return 0;
  }
  return v12;
}

float specialized static ExperimentSettings.loadDepthHazeStartPercent(default:)(float a1)
{
  return specialized static ExperimentSettings.loadDepthHazeStartPercent(default:)(0xD000000000000030, 0x80000002466C27F0, a1);
}

uint64_t specialized static ExperimentSettings.loadCaptureSoundModuleType(default:)(uint64_t a1, uint64_t a2)
{
  return specialized static ExperimentSettings.loadCaptureSoundModuleType(default:)(a1, a2, 0xD000000000000031, 0x80000002466C27B0);
}

uint64_t specialized static ExperimentSettings.loadIsSoundEnabled(default:)(unsigned __int8 a1)
{
  return specialized static ExperimentSettings.loadIsSoundEnabled(default:)(a1, 0xD000000000000029, 0x80000002466C2780);
}

uint64_t specialized static ExperimentSettings.loadFreeformDynamicScanVolumeEnabled(default:)(unsigned __int8 a1)
{
  return specialized static ExperimentSettings.loadIsSoundEnabled(default:)(a1, 0xD00000000000003BLL, 0x80000002466C2740);
}

id specialized static ExperimentSettings.loadFreeformPointDensityThreshold(default:)(id a1)
{
  uint64_t v2 = specialized static ExperimentSettings.loadDefaults(forKey:)(0xD000000000000038, 0x80000002466C2700);
  if (v3)
  {
    uint64_t v4 = v2;
    unint64_t v5 = v3;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)logger);
    swift_bridgeObjectRetain();
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v14 = v10;
      *(_DWORD *)uint64_t v9 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000038, 0x80000002466C2700, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2465C2000, v7, v8, "Found key \"%s\" = \"%s\"", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5348D0](v10, -1, -1);
      MEMORY[0x24C5348D0](v9, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v11 = objc_msgSend(self, sel_standardUserDefaults);
    uint64_t v12 = (void *)MEMORY[0x24C533410](0xD000000000000038, 0x80000002466C2700);
    a1 = objc_msgSend(v11, sel_integerForKey_, v12);
  }
  return a1;
}