void sub_1C44FB88C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C44FB96C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C44FBB5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

PKOutputFunction *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PKOutputFunction>,PKOutputFunction*,PKOutputFunction*,PKOutputFunction*>(uint64_t a1, PKOutputFunction *a2, PKOutputFunction *a3, PKOutputFunction *this)
{
  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      PKOutputFunction::PKOutputFunction(v4, v6);
      v6 = (const PKOutputFunction *)((char *)v6 + 40);
      v4 = (PKOutputFunction *)((char *)v11 + 40);
      v11 = (PKOutputFunction *)((char *)v11 + 40);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PKOutputFunction>,PKOutputFunction*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C44FBC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void PKOutputFunction::PKOutputFunction(PKOutputFunction *this, const PKOutputFunction *a2)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  uint64_t v3 = *((void *)a2 + 4);
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    uint64_t v5 = *((void *)this + 4);
    *((void *)this + 4) = v4;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    }
  }
  else
  {
    *((void *)this + 4) = 0;
  }
}

void sub_1C44FBCC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  _Unwind_Resume(exception_object);
}

void PKFunctionPiecewiseBezier::clone(PKFunctionPiecewiseBezier *this)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PKOutputFunction>,PKOutputFunction*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<PKOutputFunction>,PKOutputFunction*>::operator()[abi:ne180100]((void **)a1);
  }
  return a1;
}

void sub_1C44FC2A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C44FC330(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C44FC470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C44FC8B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C44FD3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C44FD67C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C44FD9F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C44FDC40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C44FE040(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, ...)
{
  va_start(va, a6);

  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void PKFunctionPiecewiseBezier::solve(PKFunctionPiecewiseBezier *this)
{
  uint64_t v2 = (uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3;
  uint64_t v3 = (uint64_t *)((char *)this + 128);
  uint64_t v4 = v2 - 1;
  if (v2) {
    unint64_t v5 = v2 - 1;
  }
  else {
    unint64_t v5 = 0;
  }
  std::vector<std::vector<double>>::resize((uint64_t *)this + 16, v5);
  v72 = this;
  v6 = (uint64_t *)((char *)this + 152);
  std::vector<std::vector<double>>::resize((uint64_t *)this + 19, v5);
  uint64_t v71 = v4;
  if (v4)
  {
    uint64_t v7 = 0;
    do
    {
      id v8 = objc_alloc(MEMORY[0x1E4F39C10]);
      uint64_t v9 = *((void *)v72 + 13) + 32 * v7;
      double v10 = *(double *)v9;
      double v11 = *(double *)(v9 + 8);
      *(float *)&double v10 = *(double *)v9;
      *(float *)&double v11 = v11;
      double v12 = *(double *)(v9 + 16);
      double v13 = *(double *)(v9 + 24);
      *(float *)&double v12 = v12;
      *(float *)&double v13 = v13;
      v14 = (void *)[v8 initWithControlPoints:v10 :v11 :v12 :v13];
      unint64_t v15 = 0;
      uint64_t v16 = *((void *)v72 + 1);
      double v17 = *(double *)(v16 + 8 * v7);
      uint64_t v69 = v7 + 1;
      double v18 = *(double *)(v16 + 8 * (v7 + 1));
      double v19 = v18 - v17;
      do
      {
        uint64_t v20 = *v3;
        *(float *)&double v18 = (float)v15 / 10.0;
        [v14 _solveForInput:v18];
        double v18 = v21;
        double v22 = v17 + v19 * v18;
        uint64_t v23 = v20 + 24 * v7;
        v26 = *(double **)(v23 + 8);
        uint64_t v25 = v23 + 8;
        v24 = v26;
        unint64_t v27 = *(void *)(v25 + 8);
        if ((unint64_t)v26 >= v27)
        {
          v29 = (void **)(v20 + 24 * v7);
          v30 = (double *)*v29;
          uint64_t v31 = ((char *)v24 - (unsigned char *)*v29) >> 3;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61) {
            std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v33 = v27 - (void)v30;
          if (v33 >> 2 > v32) {
            unint64_t v32 = v33 >> 2;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v32;
          }
          if (v34)
          {
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v25 + 8, v34);
            v24 = *(double **)v25;
            v30 = (double *)*v29;
          }
          else
          {
            v35 = 0;
          }
          v36 = (double *)&v35[8 * v31];
          double *v36 = v22;
          v28 = v36 + 1;
          while (v24 != v30)
          {
            uint64_t v37 = *((void *)v24-- - 1);
            HIDWORD(v18) = HIDWORD(v37);
            *((void *)v36-- - 1) = v37;
          }
          *v29 = v36;
          *(void *)uint64_t v25 = v28;
          *(void *)(v25 + 8) = &v35[8 * v34];
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          double *v24 = v22;
          v28 = v24 + 1;
        }
        *(void *)uint64_t v25 = v28;
        ++v15;
      }
      while (v15 != 11);

      ++v7;
    }
    while (v69 != v71);
    uint64_t v38 = 0;
    do
    {
      id v39 = objc_alloc(MEMORY[0x1E4F39C10]);
      uint64_t v40 = *((void *)v72 + 13) + 32 * v38;
      double v41 = *(double *)v40;
      double v42 = *(double *)(v40 + 8);
      *(float *)&double v41 = *(double *)v40;
      *(float *)&double v42 = v42;
      double v43 = *(double *)(v40 + 16);
      double v44 = *(double *)(v40 + 24);
      *(float *)&double v43 = v43;
      *(float *)&double v44 = v44;
      v45 = (void *)[v39 initWithControlPoints:v41 :v42 :v43 :v44];
      unint64_t v46 = 0;
      uint64_t v47 = *((void *)v72 + 4);
      double v48 = *(double *)(v47 + 8 * v38);
      uint64_t v70 = v38 + 1;
      double v49 = *(double *)(v47 + 8 * (v38 + 1));
      double v50 = v49 - v48;
      do
      {
        uint64_t v51 = *v6;
        *(float *)&double v49 = (float)v46 / 10.0;
        [v45 _solveForInput:v49];
        double v49 = v52;
        double v53 = v48 + v50 * v49;
        uint64_t v54 = v51 + 24 * v38;
        v57 = *(double **)(v54 + 8);
        uint64_t v56 = v54 + 8;
        v55 = v57;
        unint64_t v58 = *(void *)(v56 + 8);
        if ((unint64_t)v57 >= v58)
        {
          v60 = (void **)(v51 + 24 * v38);
          v61 = (double *)*v60;
          uint64_t v62 = ((char *)v55 - (unsigned char *)*v60) >> 3;
          unint64_t v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 61) {
            std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v64 = v58 - (void)v61;
          if (v64 >> 2 > v63) {
            unint64_t v63 = v64 >> 2;
          }
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v65 = v63;
          }
          if (v65)
          {
            v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v56 + 8, v65);
            v55 = *(double **)v56;
            v61 = (double *)*v60;
          }
          else
          {
            v66 = 0;
          }
          v67 = (double *)&v66[8 * v62];
          double *v67 = v53;
          v59 = v67 + 1;
          while (v55 != v61)
          {
            uint64_t v68 = *((void *)v55-- - 1);
            HIDWORD(v49) = HIDWORD(v68);
            *((void *)v67-- - 1) = v68;
          }
          *v60 = v67;
          *(void *)uint64_t v56 = v59;
          *(void *)(v56 + 8) = &v66[8 * v65];
          if (v61) {
            operator delete(v61);
          }
        }
        else
        {
          double *v55 = v53;
          v59 = v55 + 1;
        }
        *(void *)uint64_t v56 = v59;
        ++v46;
      }
      while (v46 != 11);

      ++v38;
    }
    while (v70 != v71);
  }
}

void sub_1C44FE488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::vector<double>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      double v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(v4, v11);
    }
    else {
      double v12 = 0;
    }
    unint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    double v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    double v17 = &v16[v14];
    std::vector<std::vector<double>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1C44FE5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<double>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<double>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        unint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t std::vector<std::vector<double>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<ClipperLib::IntPoint>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void *std::vector<PKOutputFunction>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  for (uint64_t i = result[1]; i != v2; i -= 40)
  {
    uint64_t result = *(void **)(i - 8);
    *(void *)(i - 8) = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void PKFunctionPiecewiseBezier::~PKFunctionPiecewiseBezier(PKFunctionPiecewiseBezier *this)
{
  *(void *)this = &unk_1F1FB0258;
  uint64_t v5 = (void **)((char *)this + 152);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)((char *)this + 128);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  PKFunction::~PKFunction((PKFunction *)this);
  MEMORY[0x1C8783F10]();
}

{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(void *)this = &unk_1F1FB0258;
  uint64_t v5 = (void **)((char *)this + 152);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)((char *)this + 128);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  PKFunction::~PKFunction((PKFunction *)this);
}

void std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<ClipperLib::IntPoint>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<ClipperLib::IntPoint>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

char *PKFunctionPiecewiseBezier::operator=(char *a1, uint64_t a2)
{
  if (a1 != (char *)a2)
  {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a1 + 8, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a1 + 32, *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a1 + 56, *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a1 + 80, *(char **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a1 + 104, *(char **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
    std::vector<std::vector<double>>::__assign_with_size[abi:ne180100]<std::vector<double>*,std::vector<double>*>((uint64_t)(a1 + 128), *(void *)(a2 + 128), *(void *)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3));
    std::vector<std::vector<double>>::__assign_with_size[abi:ne180100]<std::vector<double>*,std::vector<double>*>((uint64_t)(a1 + 152), *(void *)(a2 + 152), *(void *)(a2 + 160), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 3));
  }
  return a1;
}

char *std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<double>::__vallocate[abi:ne180100](v7, v11);
    long long v13 = (char *)v7[1];
    char v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      double v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  char v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    double v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  char *v12 = &v9[v17];
  return result;
}

char *std::vector<double>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void std::vector<std::vector<double>>::__assign_with_size[abi:ne180100]<std::vector<double>*,std::vector<double>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<ClipperLib::IntPoint>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<ClipperLib::IntPoint>::__vallocate[abi:ne180100]((void *)a1, v11);
    char v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<double> *,std::vector<double> *,std::vector<double> *>((int)&v20, a2, v13, v9);
    char v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<double> *,std::vector<double> *,std::vector<double> *>((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      uint64_t v19 = *(void **)(v17 - 24);
      v17 -= 24;
      double v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1C44FEE44(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C44FEE4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<ClipperLib::IntPoint>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<ClipperLib::IntPoint>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<ClipperLib::IntPoint>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C44FEFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C44FF040(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void PKFunction::~PKFunction(PKFunction *this)
{
  *(void *)this = &unk_1F1FAF898;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  PKFunction::~PKFunction(this);

  JUMPOUT(0x1C8783F10);
}

uint64_t std::vector<PKOutputFunction>::__push_back_slow_path<PKOutputFunction>(uint64_t *a1, const PKOutputFunction *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKOutputFunction>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (PKOutputFunction *)&v10[40 * v4];
  uint64_t v16 = &v10[40 * v9];
  PKOutputFunction::PKOutputFunction(v14, a2);
  uint64_t v15 = (char *)v14 + 40;
  std::vector<PKOutputFunction>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<PKOutputFunction>::~__split_buffer(&v13);
  return v11;
}

void sub_1C44FF1E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<PKOutputFunction>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PKOutputFunction>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PKOutputFunction>,std::reverse_iterator<PKOutputFunction*>,std::reverse_iterator<PKOutputFunction*>,std::reverse_iterator<PKOutputFunction*>>((uint64_t)(a1 + 2), a1[1], (const PKOutputFunction *)a1[1], *a1, (const PKOutputFunction *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PKOutputFunction>,std::reverse_iterator<PKOutputFunction*>,std::reverse_iterator<PKOutputFunction*>,std::reverse_iterator<PKOutputFunction*>>(uint64_t a1, uint64_t a2, const PKOutputFunction *a3, uint64_t a4, const PKOutputFunction *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      unint64_t v9 = (const PKOutputFunction *)((char *)v9 - 40);
      PKOutputFunction::PKOutputFunction((PKOutputFunction *)(v7 - 40), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 40;
      *((void *)&v15 + 1) -= 40;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PKOutputFunction>,std::reverse_iterator<PKOutputFunction*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1C44FF31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PKOutputFunction>,std::reverse_iterator<PKOutputFunction*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<PKOutputFunction>,std::reverse_iterator<PKOutputFunction*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void **std::__split_buffer<PKOutputFunction>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<PKOutputFunction>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    unint64_t v4 = result;
    do
    {
      v4[2] = v2 - 40;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

char *std::vector<PKOutputFunction>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKOutputFunction>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PKOutputFunction>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

BOOL PKIsVisionDevice()
{
  v0 = [MEMORY[0x1E4FB16C8] currentDevice];
  BOOL v1 = [v0 userInterfaceIdiom] == 6;

  return v1;
}

uint64_t __PKPerformOnMainThread_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C44FFAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  _Unwind_Resume(a1);
}

void sub_1C44FFDCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id PKDynamicCast(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2 && (objc_opt_isKindOfClass() & 1) != 0) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }

  return v3;
}

void sub_1C4500E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4501364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  a33 = (void **)&a48;
  std::vector<AttachmentTileInfo>::__destroy_vector::operator()[abi:ne180100](&a33);

  _Unwind_Resume(a1);
}

void std::vector<AttachmentTileInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  BOOL v1 = *a1;
  id v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 4);
        v4 -= 32;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C4501FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45024C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  std::vector<AttachmentTileInfo>::__destroy_vector::operator()[abi:ne180100](&a28);
  _Unwind_Resume(a1);
}

void sub_1C45026CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45027D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450289C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C450295C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4502BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4502D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4502DF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4502F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4502FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Swift::Void __swiftcall PKTiledViewAnimationController.didEndDrawing()()
{
  uint64_t v1 = OBJC_IVAR___PKTiledViewAnimationController_drawingContinuations;
  uint64_t v2 = *(void *)(*(void *)(v0 + OBJC_IVAR___PKTiledViewAnimationController_drawingContinuations) + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v2; ++i)
      swift_continuation_throwingResume();
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + v1) = MEMORY[0x1E4FBC860];

  swift_bridgeObjectRelease();
}

void sub_1C4503150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45032EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45036B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4503AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4503C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4503D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4503F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4503FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4504018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4504110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4504180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4504404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450475C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45047E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45048D4(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C4504AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4504D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double PKMaxHoverHeight()
{
  v18[2] = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&hover_height_lock);
  uint64_t v0 = PKMaxHoverHeight_sMaxHoverHeight;
  if (*(double *)&PKMaxHoverHeight_sMaxHoverHeight < 0.0)
  {
    uint64_t v1 = IOHIDEventSystemClientCreateWithType();
    if (v1)
    {
      uint64_t v2 = (__IOHIDEventSystemClient *)v1;
      v17[0] = @"PrimaryUsagePage";
      v17[1] = @"PrimaryUsage";
      v18[0] = &unk_1F200E928;
      v18[1] = &unk_1F200E940;
      id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:v17 count:2];
      IOHIDEventSystemClientSetMatching();
      long long v12 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      CFArrayRef v4 = IOHIDEventSystemClientCopyServices(v2);
      uint64_t v5 = [(__CFArray *)v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      uint64_t v0 = 0;
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void *)v13;
        while (2)
        {
          for (uint64_t i = 0; i != v6; ++i)
          {
            if (*(void *)v13 != v7) {
              objc_enumerationMutation(v4);
            }
            unint64_t v9 = (void *)IOHIDServiceClientCopyProperty(*(IOHIDServiceClientRef *)(*((void *)&v12 + 1) + 8 * i), @"MaxHoverHeight");
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              objc_msgSend(v9, "doubleValue", (void)v12);
              uint64_t v0 = v10;

              goto LABEL_13;
            }
          }
          uint64_t v6 = [(__CFArray *)v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
          if (v6) {
            continue;
          }
          break;
        }
      }
LABEL_13:

      CFRelease(v2);
    }
    else
    {
      uint64_t v0 = 0;
    }
    PKMaxHoverHeight_sMaxHoverHeight = v0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&hover_height_lock);
  return *(double *)&v0;
}

void PKPerformOnMainThread(void *a1)
{
  uint64_t v1 = a1;
  if ([MEMORY[0x1E4F29060] isMainThread])
  {
    v1[2](v1);
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __PKPerformOnMainThread_block_invoke;
    block[3] = &unk_1E64C6060;
    id v3 = v1;
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
}

void sub_1C45059E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL PKIsDeviceLocked()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = (unsigned int (*)(void))getMKBGetDeviceLockStateSymbolLoc_ptr;
  uint64_t v7 = getMKBGetDeviceLockStateSymbolLoc_ptr;
  if (!getMKBGetDeviceLockStateSymbolLoc_ptr)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getMKBGetDeviceLockStateSymbolLoc_block_invoke;
    v3[3] = &unk_1E64C5478;
    v3[4] = &v4;
    __getMKBGetDeviceLockStateSymbolLoc_block_invoke((uint64_t)v3);
    uint64_t v0 = (unsigned int (*)(void))v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    uint64_t v2 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v2);
  }
  return v0(0) - 1 < 2;
}

void *__getMKBGetDeviceLockStateSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!MobileKeyBagLibraryCore_frameworkLibrary)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = __MobileKeyBagLibraryCore_block_invoke;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = __const__block__paths_43;
    uint64_t v7 = 0;
    MobileKeyBagLibraryCore_frameworkLibrary = _sl_dlopen();
    id v3 = (void *)v5[0];
    uint64_t v2 = (void *)MobileKeyBagLibraryCore_frameworkLibrary;
    if (MobileKeyBagLibraryCore_frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      id v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)MobileKeyBagLibraryCore_frameworkLibrary;
LABEL_5:
  uint64_t result = dlsym(v2, "MKBGetDeviceLockState");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKBGetDeviceLockStateSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t PKIsInlineDrawingOrPaperAttachment(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v2 = [v1 fileType];
  char v3 = [v2 isEqualToString:@"com.apple.drawing"];

  if ((v3 & 1) != 0
    || ([v1 fileType],
        uint64_t v4 = objc_claimAutoreleasedReturnValue(),
        int v5 = [v4 isEqualToString:@"com.apple.paper"],
        v4,
        v5))
  {
    char v6 = objc_opt_respondsToSelector();
  }
  else
  {
LABEL_5:
    char v6 = 0;
  }

  return v6 & 1;
}

void sub_1C45067BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4506E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a20 + 40))(a20);
  }

  _Unwind_Resume(a1);
}

void sub_1C4507070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45071A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1C45073C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CGColor *DKUCGColorCreateConvertedToSRGB(uint64_t a1)
{
  v6[1] = *(double *)MEMORY[0x1E4F143B8];
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4FB1618], "colorWithCGColor:", a1), "getRed:green:blue:alpha:", &v3, &v4, &v5, v6);
  id v1 = (CGColor *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4FB1618], "colorWithRed:green:blue:alpha:", v3, v4, v5, v6[0]), "CGColor");
  CGColorRetain(v1);
  return v1;
}

void sub_1C4507728(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);
  _Unwind_Resume(a1);
}

void sub_1C4507924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45079E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4507BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4507C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4507D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4507E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_OWORD *DKUColorGetRGBAComponents(CGColor *a1, _OWORD *a2)
{
  if (!a1) {
    return 0;
  }
  ConvertedToSRGB = a1;
  ColorSpace = CGColorGetColorSpace(a1);
  if (!ColorSpace) {
    return 0;
  }
  if (CGColorSpaceGetModel(ColorSpace) == kCGColorSpaceModelRGB)
  {
    double v5 = 0;
  }
  else
  {
    ConvertedToSRGB = DKUCGColorCreateConvertedToSRGB((uint64_t)ConvertedToSRGB);
    double v5 = ConvertedToSRGB;
  }
  if (CGColorGetNumberOfComponents(ConvertedToSRGB) == 4)
  {
    Components = CGColorGetComponents(ConvertedToSRGB);
    long long v7 = *((_OWORD *)Components + 1);
    *a2 = *(_OWORD *)Components;
    a2[1] = v7;
    if (!v5) {
      return a2;
    }
    goto LABEL_11;
  }
  a2 = 0;
  if (v5) {
LABEL_11:
  }
    CGColorRelease(v5);
  return a2;
}

void sub_1C4508B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38)
{
  _Unwind_Resume(a1);
}

void std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<PKOutputFunction>::__clear[abi:ne180100](v2);
    double v3 = **a1;
    operator delete(v3);
  }
}

PKOutputFunction *std::vector<PKOutputFunction>::__init_with_size[abi:ne180100]<PKOutputFunction*,PKOutputFunction*>(PKOutputFunction *result, PKOutputFunction *a2, PKOutputFunction *a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<PKOutputFunction>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PKOutputFunction>,PKOutputFunction*,PKOutputFunction*,PKOutputFunction*>((uint64_t)v6 + 16, a2, a3, *((PKOutputFunction **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_1C4508FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1C4509390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<PKOutputFunction>::__assign_with_size[abi:ne180100]<PKOutputFunction*,PKOutputFunction*>(uint64_t a1, PKOutputFunction *a2, PKOutputFunction *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<PKOutputFunction>::__vdeallocate((void **)a1);
    if (a4 > 0x666666666666666) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<PKOutputFunction>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t result = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PKOutputFunction>,PKOutputFunction*,PKOutputFunction*,PKOutputFunction*>(v8, a2, a3, *(PKOutputFunction **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    long long v13 = (PKOutputFunction *)((char *)a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PKOutputFunction *,PKOutputFunction *,PKOutputFunction *>(a2, v13, (uint64_t)v9);
    uint64_t result = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PKOutputFunction>,PKOutputFunction*,PKOutputFunction*,PKOutputFunction*>(v8, v13, a3, *(PKOutputFunction **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PKOutputFunction *,PKOutputFunction *,PKOutputFunction *>(a2, a3, (uint64_t)v9);
  uint64_t v14 = result;
  uint64_t v15 = *(void *)(a1 + 8);
  if (v15 != result)
  {
    do
    {
      uint64_t result = *(void *)(v15 - 8);
      *(void *)(v15 - 8) = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
      }
      v15 -= 40;
    }
    while (v15 != v14);
  }
  *(void *)(a1 + 8) = v14;
  return result;
}

void sub_1C4509560(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C4509568(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PKOutputFunction *,PKOutputFunction *,PKOutputFunction *>(PKOutputFunction *a1, PKOutputFunction *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    double v5 = a1;
    do
    {
      PKOutputFunction::PKOutputFunction((PKOutputFunction *)v8, v5);
      PKOutputFunction::operator=(a3, (uint64_t)v8);
      uint64_t v6 = v9;
      uint64_t v9 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
      }
      double v5 = (const PKOutputFunction *)((char *)v5 + 40);
      a3 += 40;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_1C450960C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 40))(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C45097E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void std::vector<PKOutputFunction>::__vdeallocate(void **a1)
{
  if (*a1)
  {
    std::vector<PKOutputFunction>::__clear[abi:ne180100](a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1C4509C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4509D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double DKDScaleForTransform(_OWORD *a1)
{
  v4[9] = *MEMORY[0x1E4F143B8];
  long long v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v3[2] = a1[2];
  DKD_CGAffineTransformDecompose((uint64_t)v3, (uint64_t)v4);
  return *(double *)v4;
}

double DKD_CGAffineTransformDecompose(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 8);
  double v5 = *(double *)(a1 + 16);
  double v6 = *(double *)(a1 + 24);
  double v7 = sqrt(v4 * v4 + *(double *)a1 * *(double *)a1);
  double v8 = sqrt(v6 * v6 + v5 * v5);
  double v9 = *(double *)a1 * v6 - v5 * v4;
  double v10 = -v8;
  double v11 = -v7;
  if (*(double *)a1 < v6) {
    double v10 = v8;
  }
  else {
    double v11 = v7;
  }
  if (v9 < 0.0) {
    double v12 = v11;
  }
  else {
    double v12 = v7;
  }
  if (v9 < 0.0) {
    double v13 = v10;
  }
  else {
    double v13 = v8;
  }
  long long v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v20.a = *(_OWORD *)a1;
  *(_OWORD *)&v20.c = v14;
  *(_OWORD *)&v20.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformScale(&v21, &v20, 1.0 / v12, 1.0 / v13);
  long long v15 = *(_OWORD *)&v21.c;
  *(_OWORD *)a1 = *(_OWORD *)&v21.a;
  *(_OWORD *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v21.tx;
  double v16 = atan2(*(long double *)(a1 + 8), *(long double *)a1);
  long long v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v20.a = *(_OWORD *)a1;
  *(_OWORD *)&v20.c = v17;
  *(_OWORD *)&v20.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformRotate(&v21, &v20, -v16);
  long long v18 = *(_OWORD *)&v21.c;
  *(_OWORD *)a1 = *(_OWORD *)&v21.a;
  *(_OWORD *)(a1 + 16) = v18;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v21.tx;
  *(double *)a2 = v12;
  *(double *)(a2 + 8) = v13;
  *(double *)(a2 + 16) = v16;
  *(void *)(a2 + 24) = *(void *)a1;
  *(void *)(a2 + 32) = *(void *)(a1 + 8);
  *(void *)(a2 + 40) = *(void *)(a1 + 16);
  *(void *)(a2 + 48) = *(void *)(a1 + 24);
  *(void *)(a2 + 56) = *(void *)(a1 + 32);
  double result = *(double *)(a1 + 40);
  *(double *)(a2 + 64) = result;
  return result;
}

void sub_1C4509FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450A0A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450A4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450A67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C450A744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450A7DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PKIsSixChannelBlendEnabledInPaper()
{
  uint64_t v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v1 = [v0 BOOLForKey:@"internalSettings.drawing.disableSixChannelBlendInPaper"] ^ 1;

  return v1;
}

void sub_1C450B1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C450B238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450B310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C450B570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450B834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450B9AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450BA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C450BAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450BCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C450BE3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t DKDIntersectionOfLines(double *a1, double *a2, double *a3, double *a4, double *a5, char a6, char a7)
{
  double v7 = a1[1];
  double v8 = a1[2] - *a1;
  double v9 = a1[3] - v7;
  double v10 = a2[1];
  double v11 = a2[2] - *a2;
  double v12 = a2[3] - v10;
  double v13 = (v9 * (*a2 - *a1) + (v7 - v10) * v8) / (v12 * v8 - v11 * v9);
  *a4 = v13;
  if ((a6 & 1) == 0 && (v13 < 0.0 || v13 > 1.0)) {
    return 0;
  }
  double v15 = (v12 * (*a1 - *a2) + (a2[1] - a1[1]) * v11) / (v9 * v11 - v8 * v12);
  *a3 = v15;
  if ((a7 & 1) == 0 && (v15 < 0.0 || v15 > 1.0)) {
    return 0;
  }
  double v18 = a1[1];
  *a5 = *a1 + v15 * v8;
  a5[1] = v18 + *a3 * v9;
  return 1;
}

void sub_1C450CC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

CGColorRef DKUCGColorCreateDeviceRGB(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  components[4] = *(CGFloat *)MEMORY[0x1E4F143B8];
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  if (qword_1EB3C6138 != -1) {
    dispatch_once(&qword_1EB3C6138, &__block_literal_global_68);
  }
  return CGColorCreate((CGColorSpaceRef)_MergedGlobals_152, components);
}

void sub_1C450D00C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450D20C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450D2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C450D384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450D410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450DA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C450DC28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450DCF0(_Unwind_Exception *a1)
{
  double v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C450DDE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _PencilKitBundle()
{
  uint64_t v0 = (void *)_PencilKitBundle_kitBundle;
  if (!_PencilKitBundle_kitBundle)
  {
    uint64_t v1 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
    uint64_t v2 = (void *)_PencilKitBundle_kitBundle;
    _PencilKitBundle_kitBundle = v1;

    uint64_t v0 = (void *)_PencilKitBundle_kitBundle;
  }

  return v0;
}

void sub_1C450DFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450E2A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450E3C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PKWideGamutPixelFormatForCurrentDevice(void)
{
  uint64_t v0 = [MEMORY[0x1E4FB16C8] currentDevice];
  if ([v0 userInterfaceIdiom] == 1)
  {
    if (qword_1EB3C61C8 != -1) {
      dispatch_once(&qword_1EB3C61C8, &__block_literal_global_231);
    }
    int v1 = _MergedGlobals_154;

    if (v1) {
      return 550;
    }
    else {
      return 552;
    }
  }
  else
  {

    return 550;
  }
}

void sub_1C450E530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450E5E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450ECA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450EE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450F484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  _Unwind_Resume(a1);
}

void sub_1C450F508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<anonymous namespace'::PKMetalKernelKey,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,void *>,std::__hash_node_destructor<std::allocator<void *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(id **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {

    }
    operator delete(v2);
  }
  return a1;
}

uint64_t PKHashBytes(uint64_t a1, int a2)
{
  if (a2 < 4)
  {
    unsigned int v2 = 0;
    int v5 = a2;
  }
  else
  {
    unsigned int v2 = 0;
    unint64_t v3 = a2 + 4;
    double v4 = (unsigned __int8 *)(a1 + 3);
    int v5 = a2;
    do
    {
      unsigned int v6 = *(v4 - 3) + 16 * v2;
      unsigned int v7 = *(v4 - 2) + 16 * (v6 ^ (16 * (v6 >> 28)));
      unsigned int v8 = *(v4 - 1) + 16 * (v7 ^ (16 * (v7 >> 28)));
      int v9 = *v4;
      v4 += 4;
      int v10 = v9 + 16 * (v8 ^ (16 * (v8 >> 28)));
      unsigned int v2 = (v10 ^ ((v10 & 0xF0000000) >> 24)) & ~(v10 & 0xF0000000);
      v3 -= 4;
      v5 -= 4;
    }
    while (v3 > 7);
  }
  uint64_t v11 = a1 + a2;
  switch(v5)
  {
    case 1:
      goto LABEL_11;
    case 2:
LABEL_10:
      int v13 = *(unsigned __int8 *)(v11 - 2) + 16 * v2;
      unsigned int v2 = (v13 ^ ((v13 & 0xF0000000) >> 24)) & ~(v13 & 0xF0000000);
LABEL_11:
      int v14 = *(unsigned __int8 *)(v11 - 1) + 16 * v2;
      return (v14 ^ ((v14 & 0xF0000000) >> 24)) & ~(v14 & 0xF0000000);
    case 3:
      int v12 = *(unsigned __int8 *)(v11 - 3) + 16 * v2;
      unsigned int v2 = (v12 ^ ((v12 & 0xF0000000) >> 24)) & ~(v12 & 0xF0000000);
      goto LABEL_10;
  }
  return v2;
}

void sub_1C450F718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450F820(_Unwind_Exception *a1)
{
  double v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C450F8D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450FA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C450FCDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id PKCheckedDynamicCast(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = PKDynamicCast(a1, v3);
  int v5 = (void *)v4;
  if (v3 && !v4)
  {
    unsigned int v6 = os_log_create("com.apple.pencilkit", "");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 138412546;
      id v10 = (id)objc_opt_class();
      __int16 v11 = 2112;
      uint64_t v12 = a1;
      id v8 = v10;
      _os_log_error_impl(&dword_1C44F8000, v6, OS_LOG_TYPE_ERROR, "Unexpected object type in checked dynamic cast %@ expects %@", (uint8_t *)&v9, 0x16u);
    }
  }

  return v5;
}

void sub_1C4510204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4510808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

id specialized PKTiledViewAnimationController.init(tiledView:)()
{
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR___PKTiledViewAnimationController_drawingContinuations] = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR___PKTiledViewAnimationController_mtkView] = 0;
  *(void *)&v0[OBJC_IVAR___PKTiledViewAnimationController_renderer] = 0;
  *(void *)&v0[OBJC_IVAR___PKTiledViewAnimationController_newBehavior] = 0;
  swift_unknownObjectWeakAssign();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PKTiledViewAnimationController();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for PKTiledViewAnimationController()
{
  return self;
}

void sub_1C4510D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C451103C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id PKLongPressGestureRecognizer.init(target:action:)(uint64_t a1, uint64_t a2)
{
  *(void *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_allowableMovement] = 0x4010000000000000;
  *(void *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_allowableTotalMovement] = 0x4024000000000000;
  *(void *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_minimumPressDuration] = 0x3FE0000000000000;
  int v5 = &v2[OBJC_IVAR___PKLongPressGestureRecognizer_startLocation];
  *(void *)int v5 = 0;
  *((void *)v5 + 1) = 0;
  *(void *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_pressStartLocations] = MEMORY[0x1E4FBC860];
  outlined init with copy of Any?(a1, (uint64_t)v21);
  uint64_t v6 = v22;
  if (v22)
  {
    unsigned int v7 = __swift_project_boxed_opaque_existential_1(v21, v22);
    uint64_t v8 = *(void *)(v6 - 8);
    MEMORY[0x1F4188790](v7, v7);
    id v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v8 + 16))(v10);
    uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (objc_class *)type metadata accessor for PKLongPressGestureRecognizer();
  v20.receiver = v2;
  v20.super_class = v12;
  id v13 = objc_msgSendSuper2(&v20, sel_initWithTarget_action_, v11, a2);
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1C4826F70;
  id v15 = v13;
  *(NSNumber *)(v14 + 32) = Int._bridgeToObjectiveC()();
  v21[0] = v14;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_setAllowedTouchTypes_, isa);

  id v17 = v15;
  double v18 = (void *)MEMORY[0x1C87824B0](0xD000000000000023, 0x80000001C481A830);
  objc_msgSend(v17, sel_setName_, v18);

  outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for Any?);
  return v17;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NSObject(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for PKLongPressGestureRecognizer()
{
  return self;
}

void sub_1C4511C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4511E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4511F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4511FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C451208C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4512180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4512C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4512DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45130FC(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C4513610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45137D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
}

void sub_1C451391C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4513A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4513AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4513BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  id v10 = v9;

  a9.super_class = (Class)PKDrawingConcrete;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

CGColorSpaceRef __DKUDeviceRGBColorSpace_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateDeviceRGB();
  _MergedGlobals_152 = (uint64_t)result;
  return result;
}

void sub_1C4513EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double std::normal_distribution<double>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, unsigned int *a2, double *a3)
{
  if (*(unsigned char *)(a1 + 24))
  {
    *(unsigned char *)(a1 + 24) = 0;
    double v5 = *(double *)(a1 + 16);
  }
  else
  {
    do
    {
      do
      {
        double v7 = std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a2)
           * 2.0
           + -1.0;
        double v8 = std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a2)
           * 2.0
           + -1.0;
        double v9 = v8 * v8 + v7 * v7;
      }
      while (v9 > 1.0);
    }
    while (v9 == 0.0);
    double v10 = sqrt(log(v8 * v8 + v7 * v7) * -2.0 / v9);
    *(double *)(a1 + 16) = v8 * v10;
    *(unsigned char *)(a1 + 24) = 1;
    double v5 = v7 * v10;
  }
  return *a3 + v5 * a3[1];
}

double std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(unsigned int *a1)
{
  unsigned int v1 = 48271 * (*a1 % 0xADC8);
  unsigned int v2 = 3399 * (*a1 / 0xADC8);
  BOOL v3 = v1 >= v2;
  unsigned int v4 = v1 - v2;
  if (v3) {
    int v5 = 0;
  }
  else {
    int v5 = 0x7FFFFFFF;
  }
  unsigned int v6 = v5 + v4;
  unsigned int v7 = v6 - 1;
  unsigned int v8 = v6 / 0xADC8;
  unsigned int v9 = 48271 * (v6 % 0xADC8);
  v8 *= 3399;
  BOOL v3 = v9 >= v8;
  unsigned int v10 = v9 - v8;
  if (v3) {
    int v11 = 0;
  }
  else {
    int v11 = 0x7FFFFFFF;
  }
  unsigned int v12 = v11 + v10;
  *a1 = v12;
  return ((double)v7 + (double)(v12 - 1) * 2147483650.0) / 4.61168601e18;
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

Class ___ZL18PDFScrollViewClassv_block_invoke()
{
  Class result = NSClassFromString(&cfstr_Pdfscrollview.isa);
  qword_1EA3C37F8 = (uint64_t)result;
  return result;
}

void sub_1C4514768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45148A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4514968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
}

void ___ZL41PKAlwaysKeepPredictedTouchesAtEndOfStrokev_block_invoke()
{
  _MergedGlobals_164 = 0;
  uint64_t v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  int v1 = [v0 BOOLForKey:@"internalSettings.drawing.keepPredictedTouchesAtEndOfStroke"];

  if (v1) {
    _MergedGlobals_164 = 1;
  }
}

void sub_1C4514AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4514B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4514B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4514C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4515098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4515364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4515494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4515508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unsigned int v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PKDrawing;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4515668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4515890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL PKIsPadDevice()
{
  uint64_t v0 = [MEMORY[0x1E4FB16C8] currentDevice];
  BOOL v1 = [v0 userInterfaceIdiom] == 1;

  return v1;
}

void sub_1C4515BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4515EB8(_Unwind_Exception *a1)
{
  unsigned int v4 = v3;

  _Unwind_Resume(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PKCustomTool.ParameterError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PKCustomTool.ParameterError()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PKCustomTool.ParameterError()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PKCustomTool.ParameterError()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance PKCustomTool.ParameterError()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t protocol witness for Error._code.getter in conformance PKCustomTool.ParameterError()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance PKCustomTool.ParameterError()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance PKCustomTool.ParameterError()
{
  return MEMORY[0x1F4185E00]();
}

void PKCustomTool.init(customIdentifier:configuration:color:weight:)(void *a1@<X2>, void *a2@<X3>, double a3@<X4>, char a4@<W5>, void *a5@<X8>)
{
  unsigned int v10 = (void *)MEMORY[0x1C87824B0]();
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  self;
  uint64_t v11 = swift_dynamicCastObjCClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    lazy protocol witness table accessor for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError();
    swift_allocError();
    unsigned char *v14 = 0;
    swift_willThrow();

    goto LABEL_7;
  }
  uint64_t v12 = v11;
  if (objc_msgSend(a1, sel_respondsToSelector_, sel_supportsStrokeWeight))
  {
    if ((objc_msgSend(a1, sel_supportsStrokeWeight) & 1) == 0 && (a4 & 1) == 0)
    {
      lazy protocol witness table accessor for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError();
      swift_allocError();
      *id v13 = 1;
      swift_willThrow();

      swift_unknownObjectRelease();
LABEL_7:
      swift_unknownObjectRelease();

      return;
    }
    if (objc_msgSend(a1, sel_respondsToSelector_, sel_supportsStrokeWeight))
    {
      if (objc_msgSend(a1, sel_supportsStrokeWeight))
      {
        if (a4)
        {
          lazy protocol witness table accessor for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError();
          swift_allocError();
          *id v15 = 2;
          swift_willThrow();

          swift_unknownObjectRelease();
          goto LABEL_7;
        }
      }
      else
      {
        double v16 = 0.0;
        if (a4)
        {
LABEL_14:
          id v17 = objc_msgSend(objc_allocWithZone((Class)PKCustomTool), sel_initWithCustomIdentifier_configuration_color_weight_, v10, v12, a2, v16);

          swift_unknownObjectRelease_n();
          *a5 = v17;
          a5[1] = 0;
          return;
        }
      }
      double v16 = a3;
      goto LABEL_14;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError()
{
  unint64_t result = lazy protocol witness table cache variable for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError;
  if (!lazy protocol witness table cache variable for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError;
  if (!lazy protocol witness table cache variable for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError);
  }
  return result;
}

uint64_t PKCustomTool.customIdentifier.getter()
{
  id v1 = objc_msgSend(*v0, sel_customIdentifier);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void key path getter for PKCustomTool.customIdentifier : PKCustomTool(void **a1@<X0>, uint64_t *a2@<X8>)
{
  BOOL v3 = *a1;
  id v4 = a1[1];
  id v5 = v3;
  id v6 = objc_msgSend(v5, sel_customIdentifier);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *a2 = v7;
  a2[1] = v9;
}

void key path setter for PKCustomTool.customIdentifier : PKCustomTool()
{
}

void PKCustomTool.customIdentifier.setter()
{
  id v1 = (void *)MEMORY[0x1C87824B0]();
  swift_bridgeObjectRelease();
  id v2 = *(id *)(v0 + 8);
  if (v2
    || (id v2 = objc_msgSend(*(id *)v0, sel_customConfigurationCopy),
        (*(void *)(v0 + 8) = v2) != 0))
  {
    id v3 = v2;
    unsigned int v4 = objc_msgSend(v3, sel_supportsColor);

    if (v4) {
      id v5 = objc_msgSend(*(id *)v0, sel_color);
    }
    else {
      id v5 = 0;
    }
    double v6 = 0.0;
    if (objc_msgSend(v3, sel_supportsStrokeWeight))
    {
      objc_msgSend(*(id *)v0, sel_weight);
      double v6 = v7;
    }
    id v8 = objc_allocWithZone((Class)PKCustomTool);
    id v9 = v3;
    id v10 = objc_msgSend(v8, sel_initWithCustomIdentifier_configuration_color_weight_, v1, v9, v5, v6);

    *(void *)uint64_t v0 = v10;
  }
  else
  {
    __break(1u);
  }
}

void (*PKCustomTool.customIdentifier.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = (uint64_t)v1;
  id v3 = objc_msgSend(*v1, sel_customIdentifier);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return PKCustomTool.customIdentifier.modify;
}

void PKCustomTool.customIdentifier.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    PKCustomTool.customIdentifier.setter();
    swift_bridgeObjectRelease();
  }
  else
  {
    PKCustomTool.customIdentifier.setter();
  }
}

id PKCustomTool.color.getter()
{
  id v1 = objc_msgSend(*v0, sel_color);

  return v1;
}

id key path getter for PKCustomTool.color : PKCustomTool@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_color);
  *a2 = result;
  return result;
}

void key path setter for PKCustomTool.color : PKCustomTool(id *a1)
{
}

void PKCustomTool.color.setter(void *a1)
{
  id v3 = *(id *)(v1 + 8);
  if (v3
    || (id v3 = objc_msgSend(*(id *)v1, sel_customConfigurationCopy),
        (*(void *)(v1 + 8) = v3) != 0))
  {
    id v4 = v3;
    unsigned int v5 = objc_msgSend(v4, sel_supportsStrokeWeight);

    double v6 = 0.0;
    if (v5)
    {
      objc_msgSend(*(id *)v1, sel_weight);
      double v6 = v7;
    }
    id v8 = *(id *)v1;
    id v9 = objc_msgSend(*(id *)v1, sel_customIdentifier);
    id v10 = objc_msgSend(objc_allocWithZone((Class)PKCustomTool), sel_initWithCustomIdentifier_configuration_color_weight_, v9, v4, a1, v6);

    *(void *)uint64_t v1 = v10;
  }
  else
  {
    __break(1u);
  }
}

void (*PKCustomTool.color.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = objc_msgSend(*v1, sel_color);
  return PKCustomTool.color.modify;
}

void PKCustomTool.color.modify(void **a1, char a2)
{
  id v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    PKCustomTool.color.setter(v3);
  }
  else
  {
    PKCustomTool.color.setter(v2);
  }
}

id PKCustomTool.weight.getter()
{
  return objc_msgSend(*v0, sel_weight);
}

id key path getter for PKCustomTool.weight : PKCustomTool@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_weight);
  *a2 = v4;
  return result;
}

void key path setter for PKCustomTool.weight : PKCustomTool(double *a1)
{
}

void PKCustomTool.weight.setter(double a1)
{
  id v3 = *(id *)(v1 + 8);
  if (v3
    || (id v3 = objc_msgSend(*(id *)v1, sel_customConfigurationCopy),
        (*(void *)(v1 + 8) = v3) != 0))
  {
    id v4 = v3;
    unsigned int v5 = objc_msgSend(v4, sel_supportsColor);

    if (v5) {
      id v6 = objc_msgSend(*(id *)v1, sel_color);
    }
    else {
      id v6 = 0;
    }
    id v7 = *(id *)v1;
    id v8 = objc_msgSend(*(id *)v1, sel_customIdentifier);
    id v9 = objc_allocWithZone((Class)PKCustomTool);
    id v10 = v4;
    id v11 = objc_msgSend(v9, sel_initWithCustomIdentifier_configuration_color_weight_, v8, v10, v6, a1);

    *(void *)uint64_t v1 = v11;
  }
  else
  {
    __break(1u);
  }
}

void (*PKCustomTool.weight.modify(void *a1))(double *a1)
{
  a1[1] = v1;
  objc_msgSend(*v1, sel_weight);
  *a1 = v3;
  return PKCustomTool.weight.modify;
}

void PKCustomTool.weight.modify(double *a1)
{
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    unsigned int v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance MTLTextureUsage(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PKInkRenderingType(void *a1@<X8>)
{
  *a1 = *v1;
}

void protocol witness for SetAlgebra.init() in conformance PKToolPickerCustomItemControlOptions(void *a1@<X8>)
{
  *a1 = 0;
}

void *protocol witness for SetAlgebra.union(_:) in conformance PKToolPickerCustomItemControlOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance PKToolPickerCustomItemControlOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance PKToolPickerCustomItemControlOptions@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance PKToolPickerCustomItemControlOptions@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance PKToolPickerCustomItemControlOptions(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance PKToolPickerCustomItemControlOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance PKToolPickerCustomItemControlOptions(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance PKToolPickerCustomItemControlOptions(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance PKToolPickerCustomItemControlOptions(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance PKToolPickerCustomItemControlOptions()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance PKToolPickerCustomItemControlOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance PKToolPickerCustomItemControlOptions(void *result)
{
  *v1 &= ~*result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UIGestureRecognizerState(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance PKInkInputType@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance PKToolPickerCustomItemControlOptions@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance PKInkInputType@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance PKInkInputType(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance PKInkInputType(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance PKToolPickerCustomItemControlOptions@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t specialized static PKCustomTool.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a2 + 8);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if (static NSObject.== infix(_:_:)())
  {
    if (v2)
    {
      if (v3)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKToolConfiguration);
        id v4 = v3;
        id v5 = v2;
        char v6 = static NSObject.== infix(_:_:)();

        if (v6) {
          return 1;
        }
      }
    }
    else if (!v3)
    {
      return 1;
    }
  }
  return 0;
}

void *initializeBufferWithCopyOfBuffer for PKCustomTool(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  id v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for PKCustomTool(uint64_t a1)
{
  id v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for PKCustomTool(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a1 + 8);
  id v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for PKCustomTool(uint64_t a1, _OWORD *a2)
{
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for PKCustomTool(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PKCustomTool(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PKCustomTool()
{
  return &type metadata for PKCustomTool;
}

void type metadata accessor for PKToolPickerCustomItemControlOptions(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for CGAffineTransform(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CGAffineTransform(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGAffineTransform(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PKCustomTool.ParameterError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PKCustomTool.ParameterError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C45173B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for PKCustomTool.ParameterError(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for PKCustomTool.ParameterError(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

void *type metadata accessor for PKCustomTool.ParameterError()
{
  return &unk_1F1FADB88;
}

uint64_t base witness table accessor for Equatable in PKToolPickerCustomItemControlOptions()
{
  return lazy protocol witness table accessor for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions(&lazy protocol witness table cache variable for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in PKToolPickerCustomItemControlOptions()
{
  return lazy protocol witness table accessor for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions(&lazy protocol witness table cache variable for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions);
}

uint64_t lazy protocol witness table accessor for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PKToolPickerCustomItemControlOptions(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for RawRepresentable in PKToolPickerCustomItemControlOptions()
{
  return lazy protocol witness table accessor for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions(&lazy protocol witness table cache variable for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions);
}

uint64_t base witness table accessor for SetAlgebra in PKToolPickerCustomItemControlOptions()
{
  return lazy protocol witness table accessor for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions(&lazy protocol witness table cache variable for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions);
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  unsigned int v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CGRect(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGRect(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RefineVertex(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RefineVertex(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for RefineVertex(uint64_t a1)
{
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for RefineFragmentUniforms(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RefineFragmentUniforms(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

void type metadata accessor for RefineFragmentUniforms(uint64_t a1)
{
}

void type metadata accessor for PKToolPickerCustomItemControlOptions(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void __swiftcall PKHandwritingTool.init(localeIdentifier:)(PencilKit::PKHandwritingTool *__return_ptr retstr, Swift::String localeIdentifier)
{
  object = localeIdentifier._object;
  uint64_t countAndFlagsBits = localeIdentifier._countAndFlagsBits;
  id v5 = objc_allocWithZone((Class)PKHandwritingTool);
  uint64_t v6 = (void *)MEMORY[0x1C87824B0](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  BOOL v7 = (objc_class *)objc_msgSend(v5, sel_initWithLocaleIdentifier_, v6);

  retstr->tool.super.super.Class isa = v7;
}

void __swiftcall PKHandwritingTool.init()(PencilKit::PKHandwritingTool *__return_ptr retstr)
{
  retstr->tool.super.super.Class isa = (Class)objc_msgSend(objc_allocWithZone((Class)PKHandwritingTool), sel_init);
}

uint64_t PKHandwritingTool.localeIdentifier.getter()
{
  id v1 = objc_msgSend(*v0, sel_localeIdentifier);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void key path getter for PKHandwritingTool.localeIdentifier : PKHandwritingTool(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  id v4 = objc_msgSend(v3, sel_localeIdentifier);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *a2 = v5;
  a2[1] = v7;
}

void key path setter for PKHandwritingTool.localeIdentifier : PKHandwritingTool(uint64_t *a1, id *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  id v5 = objc_allocWithZone((Class)PKHandwritingTool);
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)MEMORY[0x1C87824B0](v3, v4);
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v5, sel_initWithLocaleIdentifier_, v6);

  *a2 = v7;
}

void PKHandwritingTool.localeIdentifier.setter(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone((Class)PKHandwritingTool);
  uint64_t v6 = (void *)MEMORY[0x1C87824B0](a1, a2);
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v5, sel_initWithLocaleIdentifier_, v6);

  id *v2 = v7;
}

void (*PKHandwritingTool.localeIdentifier.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t)v1;
  id v3 = objc_msgSend(*v1, sel_localeIdentifier);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return PKHandwritingTool.localeIdentifier.modify;
}

void PKHandwritingTool.localeIdentifier.modify(uint64_t *a1, char a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  id v6 = objc_allocWithZone((Class)PKHandwritingTool);
  id v7 = (id *)a1[2];
  if (a2)
  {
    swift_bridgeObjectRetain();
    int v8 = (void *)MEMORY[0x1C87824B0](v5, v4);
    swift_bridgeObjectRelease();
    id v9 = objc_msgSend(v6, sel_initWithLocaleIdentifier_, v8);

    *id v7 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    id v10 = (void *)MEMORY[0x1C87824B0](v5, v4);
    swift_bridgeObjectRelease();
    id v11 = objc_msgSend(v6, sel_initWithLocaleIdentifier_, v10);

    *id v7 = v11;
  }
}

uint64_t static PKHandwritingTool.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PKHandwritingTool()
{
  return static NSObject.== infix(_:_:)() & 1;
}

ValueMetadata *type metadata accessor for PKHandwritingTool()
{
  return &type metadata for PKHandwritingTool;
}

PencilKit::PKStroke __swiftcall PKStroke.init(ink:path:transform:mask:)(PencilKit::PKInk *ink, PencilKit::PKStrokePath *path, CGAffineTransform *transform, UIBezierPath_optional mask)
{
  Class isa = mask.value.super.isa;
  id v6 = v4;
  long long v13 = *(_OWORD *)&transform->c;
  CGFloat tx = transform->tx;
  CGFloat ty = transform->ty;
  Class v9 = ink->ink.super.isa;
  Class v10 = path->strokeData.super.isa;
  v14[0] = *(_OWORD *)&transform->a;
  v14[1] = v13;
  CGFloat v15 = tx;
  CGFloat v16 = ty;
  id v11 = objc_msgSend(objc_allocWithZone((Class)PKStroke), sel_initWithInk_strokePath_transform_mask_, v9, v10, v14, mask.value.super.isa);

  void *v6 = v11;
  return result;
}

PencilKit::PKStroke __swiftcall PKStroke.init(ink:path:transform:mask:randomSeed:)(PencilKit::PKInk *ink, PencilKit::PKStrokePath *path, CGAffineTransform *transform, UIBezierPath_optional mask, Swift::UInt32 randomSeed)
{
  Class isa = mask.value.super.isa;
  id v7 = v5;
  long long v14 = *(_OWORD *)&transform->c;
  CGFloat tx = transform->tx;
  CGFloat ty = transform->ty;
  Class v10 = ink->ink.super.isa;
  Class v11 = path->strokeData.super.isa;
  v15[0] = *(_OWORD *)&transform->a;
  v15[1] = v14;
  CGFloat v16 = tx;
  CGFloat v17 = ty;
  id v12 = objc_msgSend(objc_allocWithZone((Class)PKStroke), sel_initWithInk_strokePath_transform_mask_randomSeed_, v10, v11, v15, mask.value.super.isa, *(void *)&mask.is_nil);

  *id v7 = v12;
  return result;
}

void PKStroke.ink.getter(void *a1@<X8>)
{
  id v3 = [*v1 ink];
  if (!v3)
  {
    id v4 = objc_msgSend(self, sel_blackColor);
    uint64_t v5 = (void *)MEMORY[0x1C87824B0](0xD000000000000011, 0x80000001C481A030);
    id v3 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v5, v4);
  }
  *a1 = v3;
}

void key path getter for PKStroke.ink : PKStroke(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = *a1;
  id v4 = [v3 ink];
  if (v4)
  {
    id v5 = v4;
  }
  else
  {
    id v6 = objc_msgSend(self, sel_blackColor);
    id v7 = (void *)MEMORY[0x1C87824B0](0xD000000000000011, 0x80000001C481A030);
    id v5 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v7, v6);

    id v3 = v6;
  }

  *a2 = v5;
}

void PKStroke.ink.setter(void **a1)
{
  uint64_t v2 = *a1;
  id v3 = *v1;
  id v4 = objc_msgSend(*v1, sel_path);
  if (!v4) {
    id v4 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  }
  objc_msgSend(v3, sel_transform);
  long long v11 = v14;
  long long v12 = v13;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  id v7 = objc_msgSend(v3, sel_mask);
  id v8 = objc_msgSend(v3, sel__randomSeed);
  id v9 = objc_allocWithZone((Class)PKStroke);
  long long v13 = v12;
  long long v14 = v11;
  uint64_t v15 = v5;
  uint64_t v16 = v6;
  id v10 = objc_msgSend(v9, sel_initWithInk_strokePath_transform_mask_randomSeed_, v2, v4, &v13, v7, v8);

  id *v1 = v10;
}

double PKStroke.transform.getter@<D0>(_OWORD *a1@<X8>)
{
  objc_msgSend(*v1, sel_transform);
  double result = *(double *)&v4;
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  return result;
}

id PKStroke.mask.getter()
{
  id v1 = objc_msgSend(*v0, sel_mask);

  return v1;
}

void (*PKStroke.ink.modify(void *a1))(char **a1, char a2)
{
  id v3 = malloc(0x40uLL);
  *a1 = v3;
  long long v4 = v3 + 6;
  v3[7] = v1;
  id v5 = [*v1 ink];
  if (!v5)
  {
    id v6 = objc_msgSend(self, sel_blackColor);
    id v7 = (void *)MEMORY[0x1C87824B0](0xD000000000000011, 0x80000001C481A030);
    id v5 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v7, v6);
  }
  void *v4 = v5;
  return PKStroke.ink.modify;
}

void PKStroke.ink.modify(char **a1, char a2)
{
  uint64_t v2 = *a1;
  id v3 = (void *)*((void *)*a1 + 6);
  long long v4 = (void *)**((void **)*a1 + 7);
  if (a2)
  {
    id v5 = v3;
    id v6 = objc_msgSend(v4, sel_path);
    if (!v6) {
      id v6 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
    }
    id v7 = (void *)*((void *)v2 + 7);
    objc_msgSend(v4, sel_transform);
    id v8 = objc_msgSend(v4, sel_mask);
    id v9 = objc_msgSend(v4, sel__randomSeed);
    id v10 = objc_allocWithZone((Class)PKStroke);
    *(void *)uint64_t v2 = v18;
    *(_OWORD *)(v2 + 8) = v19;
    *(_OWORD *)(v2 + 24) = v20;
    *((void *)v2 + 5) = v21;
    id v11 = objc_msgSend(v10, sel_initWithInk_strokePath_transform_mask_randomSeed_, v5, v6, v2, v8, v9);

    *id v7 = v11;
  }
  else
  {
    id v12 = objc_msgSend(**((id **)*a1 + 7), sel_path);
    if (!v12) {
      id v12 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
    }
    long long v13 = (void *)*((void *)v2 + 7);
    objc_msgSend(v4, sel_transform);
    id v14 = objc_msgSend(v4, sel_mask);
    id v15 = objc_msgSend(v4, sel__randomSeed);
    id v16 = objc_allocWithZone((Class)PKStroke);
    *(void *)uint64_t v2 = v18;
    *(_OWORD *)(v2 + 8) = v19;
    *(_OWORD *)(v2 + 24) = v20;
    *((void *)v2 + 5) = v21;
    id v17 = objc_msgSend(v16, sel_initWithInk_strokePath_transform_mask_randomSeed_, v3, v12, v2, v14, v15);

    *long long v13 = v17;
  }

  free(v2);
}

void PKStroke.transform.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  id v8 = *v1;
  id v9 = [*v1 ink];
  if (!v9)
  {
    id v10 = objc_msgSend(self, sel_blackColor);
    id v11 = (void *)MEMORY[0x1C87824B0](0xD000000000000011, 0x80000001C481A030);
    id v9 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v11, v10);
  }
  id v12 = objc_msgSend(v8, sel_path);
  if (!v12) {
    id v12 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  }
  id v13 = objc_msgSend(v8, sel_mask);
  v15[0] = v2;
  v15[1] = v3;
  _OWORD v15[2] = v4;
  v15[3] = v5;
  v15[4] = v6;
  v15[5] = v7;
  id v14 = objc_msgSend(objc_allocWithZone((Class)PKStroke), sel_initWithInk_strokePath_transform_mask_randomSeed_, v9, v12, v15, v13, objc_msgSend(v8, sel__randomSeed));

  id *v1 = v14;
}

void (*PKStroke.transform.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  objc_msgSend(*v1, sel_transform);
  *((_OWORD *)v3 + 6) = v5;
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = v7;
  return PKStroke.transform.modify;
}

void PKStroke.transform.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (_OWORD *)*a1;
  if (a2) {
    uint64_t v3 = *a1;
  }
  else {
    uint64_t v3 = *a1 + 48;
  }
  long long v4 = v2[7];
  *(_OWORD *)uint64_t v3 = v2[6];
  *(_OWORD *)(v3 + 16) = v4;
  *(_OWORD *)(v3 + 32) = v2[8];
  PKStroke.transform.setter((uint64_t *)v3);

  free(v2);
}

id PKStroke.path.getter@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(*v1, sel_path);
  if (!result) {
    id result = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  }
  *a1 = result;
  return result;
}

void key path getter for PKStroke.path : PKStroke(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = *a1;
  id v4 = objc_msgSend(v3, sel_path);
  if (!v4) {
    id v4 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  }

  *a2 = v4;
}

void PKStroke.path.setter(void **a1)
{
  uint64_t v2 = *a1;
  id v3 = *v1;
  id v4 = [*v1 ink];
  if (!v4)
  {
    id v5 = objc_msgSend(self, sel_blackColor);
    long long v6 = (void *)MEMORY[0x1C87824B0](0xD000000000000011, 0x80000001C481A030);
    id v4 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v6, v5);
  }
  objc_msgSend(v3, sel_transform);
  long long v13 = v16;
  long long v14 = v15;
  uint64_t v7 = v17;
  uint64_t v8 = v18;
  id v9 = objc_msgSend(v3, sel_mask);
  id v10 = objc_msgSend(v3, sel__randomSeed);
  id v11 = objc_allocWithZone((Class)PKStroke);
  long long v15 = v14;
  long long v16 = v13;
  uint64_t v17 = v7;
  uint64_t v18 = v8;
  id v12 = objc_msgSend(v11, sel_initWithInk_strokePath_transform_mask_randomSeed_, v4, v2, &v15, v9, v10);

  id *v1 = v12;
}

void (*PKStroke.path.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  id v3 = objc_msgSend(*v1, sel_path);
  if (!v3) {
    id v3 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  }
  *a1 = v3;
  return PKStroke.path.modify;
}

void PKStroke.path.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    id v4 = *a1;
    id v3 = v2;
    PKStroke.path.setter(&v4);
  }
  else
  {
    id v4 = *a1;
    PKStroke.path.setter(&v4);
  }
}

void PKStroke.mask.setter(void *a1)
{
  id v3 = *v1;
  id v4 = [*v1 ink];
  if (!v4)
  {
    id v5 = objc_msgSend(self, sel_blackColor);
    long long v6 = (void *)MEMORY[0x1C87824B0](0xD000000000000011, 0x80000001C481A030);
    id v4 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v6, v5);
  }
  id v7 = objc_msgSend(v3, sel_path);
  if (!v7) {
    id v7 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  }
  objc_msgSend(v3, sel_transform);
  long long v13 = v16;
  long long v14 = v15;
  uint64_t v8 = v17;
  uint64_t v9 = v18;
  id v10 = objc_msgSend(v3, sel__randomSeed);
  id v11 = objc_allocWithZone((Class)PKStroke);
  long long v15 = v14;
  long long v16 = v13;
  uint64_t v17 = v8;
  uint64_t v18 = v9;
  id v12 = objc_msgSend(v11, sel_initWithInk_strokePath_transform_mask_randomSeed_, v4, v7, &v15, a1, v10);

  id *v1 = v12;
}

void (*PKStroke.mask.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = objc_msgSend(*v1, sel_mask);
  return PKStroke.mask.modify;
}

void PKStroke.mask.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    PKStroke.mask.setter(v2);
  }
  else
  {
    PKStroke.mask.setter(*a1);
  }
}

id PKStroke.renderBounds.getter()
{
  return objc_msgSend(*v0, sel_renderBounds);
}

char *PKStroke.maskedPathRanges.getter()
{
  id v1 = objc_msgSend(*v0, sel_maskedPathRanges);
  type metadata accessor for PKFloatRange();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62) {
    goto LABEL_14;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      uint64_t v16 = MEMORY[0x1E4FBC860];
      id result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
      if (v3 < 0) {
        break;
      }
      uint64_t v5 = 0;
      uint64_t v6 = v16;
      while (1)
      {
        id v7 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C8782750](v5, v2) : *(id *)(v2 + 8 * v5 + 32);
        uint64_t v8 = v7;
        objc_msgSend(v7, sel_lowerBound);
        double v10 = v9;
        objc_msgSend(v8, sel_upperBound);
        double v12 = v11;

        if (v10 > v12) {
          break;
        }
        unint64_t v14 = *(void *)(v16 + 16);
        unint64_t v13 = *(void *)(v16 + 24);
        if (v14 >= v13 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
        }
        ++v5;
        *(void *)(v16 + 16) = v14 + 1;
        uint64_t v15 = v16 + 16 * v14;
        *(double *)(v15 + 32) = v10;
        *(double *)(v15 + 40) = v12;
        if (v3 == v5)
        {
          swift_bridgeObjectRelease();
          return (char *)v6;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v3) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E4FBC860];
  }
  return result;
}

id PKStroke.randomSeed.getter()
{
  return objc_msgSend(*v0, sel_randomSeed);
}

void PKStroke.randomSeed.setter(uint64_t a1)
{
  id v3 = *v1;
  id v4 = [*v1 ink];
  if (!v4)
  {
    id v5 = objc_msgSend(self, sel_blackColor);
    uint64_t v6 = (void *)MEMORY[0x1C87824B0](0xD000000000000011, 0x80000001C481A030);
    id v4 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v6, v5);
  }
  id v7 = objc_msgSend(v3, sel_path);
  if (!v7) {
    id v7 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  }
  objc_msgSend(v3, sel_transform);
  long long v13 = v16;
  long long v14 = v15;
  uint64_t v8 = v17;
  uint64_t v9 = v18;
  id v10 = objc_msgSend(v3, sel_mask);
  id v11 = objc_allocWithZone((Class)PKStroke);
  long long v15 = v14;
  long long v16 = v13;
  uint64_t v17 = v8;
  uint64_t v18 = v9;
  id v12 = objc_msgSend(v11, sel_initWithInk_strokePath_transform_mask_randomSeed_, v4, v7, &v15, v10, a1);

  id *v1 = v12;
}

void (*PKStroke.randomSeed.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = objc_msgSend(*v1, sel_randomSeed);
  return PKStroke.randomSeed.modify;
}

void PKStroke.randomSeed.modify(uint64_t a1)
{
}

id PKStroke.requiredContentVersion.getter()
{
  return objc_msgSend(*v0, sel_requiredContentVersion);
}

PKStroke __swiftcall PKStroke._bridgeToObjectiveC()()
{
  return (PKStroke)*v0;
}

id static PKStroke._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;

  return a1;
}

uint64_t static PKStroke._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;
  id v4 = a1;
  return 1;
}

id static PKStroke._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    *a2 = a1;
    return a1;
  }
  else
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance PKStroke()
{
  return *v0;
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance PKStroke(void *a1, id *a2)
{
  *a2 = a1;

  return a1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance PKStroke(void *a1, id *a2)
{
  *a2 = a1;
  id v4 = a1;
  return 1;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance PKStroke@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    *a2 = a1;
    return a1;
  }
  else
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

unint64_t type metadata accessor for PKFloatRange()
{
  unint64_t result = lazy cache variable for type metadata for PKFloatRange;
  if (!lazy cache variable for type metadata for PKFloatRange)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PKFloatRange);
  }
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ClosedRange<CGFloat>>);
  *id v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PKStroke>);
  *id v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *id v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *id v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
  *id v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *id v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *id v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PKStrokePoint>);
  *id v3 = result;
  return result;
}

void sub_1C45192BC(void **a1)
{
  unint64_t v2 = *a1;
  id v1 = v2;
  PKStroke.ink.setter(&v2);
}

double sub_1C45192F8@<D0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  objc_msgSend(*a1, sel_transform);
  double result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  return result;
}

void sub_1C4519344(uint64_t *a1)
{
}

void sub_1C451936C(void **a1)
{
  unint64_t v2 = *a1;
  id v1 = v2;
  PKStroke.path.setter(&v2);
}

id sub_1C45193A8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_mask);
  *a2 = result;
  return result;
}

void sub_1C45193E4(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  PKStroke.mask.setter(v1);
}

id sub_1C4519414@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_randomSeed);
  *a2 = result;
  return result;
}

void sub_1C4519448(unsigned int *a1)
{
}

ValueMetadata *type metadata accessor for PKStroke()
{
  return &type metadata for PKStroke;
}

size_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(size_t a1, int64_t a2, char a3)
{
  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *id v3 = result;
  return result;
}

void *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3)
{
  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *id v3 = result;
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    id v10 = (char *)MEMORY[0x1E4FBC860];
  }
  long long v13 = v10 + 32;
  long long v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKRefineMorph.NStroke>);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    id v10 = (char *)MEMORY[0x1E4FBC860];
  }
  long long v13 = v10 + 32;
  long long v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    id v10 = (char *)MEMORY[0x1E4FBC860];
  }
  long long v13 = v10 + 32;
  long long v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    id v10 = (char *)MEMORY[0x1E4FBC860];
  }
  long long v13 = v10 + 32;
  long long v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  long long v14 = v11 + 32;
  long long v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v9);
  }
  swift_release();
  return v11;
}

{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  long long v14 = v11 + 32;
  long long v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v11;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKLongPressGestureRecognizer.PressStartLocation>);
  uint64_t v10 = *(void *)(type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation() - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKTool>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKTool);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

id TiledViewRenderer.__deallocating_deinit()
{
  return TiledViewRenderer.__deallocating_deinit(type metadata accessor for TiledViewRenderer);
}

uint64_t type metadata accessor for TiledViewRenderer()
{
  return self;
}

uint64_t RefineRenderer.init(metalKitView:from:to:image:toImage:depth:toDepth:)(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = v7;
  id v13 = objc_msgSend(a1, sel_device);
  if (!v13) {
    goto LABEL_50;
  }
  uint64_t v94 = OBJC_IVAR____TtC9PencilKit14RefineRenderer_device;
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_device] = v13;
  uint64_t v14 = *a2;
  uint64_t v15 = *(void *)(*a2 + 16);
  uint64_t v16 = 24 * v15;
  if ((unsigned __int128)(v15 * (__int128)24) >> 64 != (24 * v15) >> 63)
  {
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  id v17 = objc_msgSend(a1, sel_device);
  if (!v17)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  id v18 = objc_msgSend(v17, sel_newBufferWithBytes_length_options_, v14 + 32, v16, 0);
  swift_unknownObjectRelease();
  if (!v18)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_vertices] = v18;
  uint64_t v19 = a2[1];
  uint64_t v20 = *(void *)(v19 + 16);
  if (v20 + 0x4000000000000000 < 0) {
    goto LABEL_39;
  }
  id v21 = objc_msgSend(a1, sel_device);
  if (!v21)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  id v22 = objc_msgSend(v21, sel_newBufferWithBytes_length_options_, v19 + 32, 2 * v20, 0);
  swift_unknownObjectRelease();
  if (!v22)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_indices] = v22;
  uint64_t v23 = *(void *)(v19 + 16);
  outlined release of PKRefineMorph.GridMesh((uint64_t)a2);
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_indicesCount] = v23;
  uint64_t v24 = *a3;
  uint64_t v25 = *(void *)(*a3 + 16);
  uint64_t v26 = 24 * v25;
  if ((unsigned __int128)(v25 * (__int128)24) >> 64 != (24 * v25) >> 63) {
    goto LABEL_40;
  }
  id v27 = objc_msgSend(a1, sel_device);
  if (!v27)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  id v28 = objc_msgSend(v27, sel_newBufferWithBytes_length_options_, v24 + 32, v26, 0);
  swift_unknownObjectRelease();
  if (!v28)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_vertices2] = v28;
  uint64_t v29 = a3[1];
  uint64_t v30 = *(void *)(v29 + 16);
  if (v30 + 0x4000000000000000 < 0) {
    goto LABEL_41;
  }
  id v31 = objc_msgSend(a1, sel_device);
  if (!v31)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  id v32 = objc_msgSend(v31, sel_newBufferWithBytes_length_options_, v29 + 32, 2 * v30, 0);
  swift_unknownObjectRelease();
  if (!v32)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_indices2] = v32;
  uint64_t v33 = *(void *)(v29 + 16);
  outlined release of PKRefineMorph.GridMesh((uint64_t)a3);
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_indicesCount2] = v33;
  id v34 = objc_msgSend(a1, sel_device);
  if (!v34)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F353B8]), sel_initWithDevice_, v34);
  swift_unknownObjectRelease();
  v100 = 0;
  id v36 = objc_msgSend(v35, sel_newTextureWithCGImage_options_error_, a4, 0, &v100);
  id v37 = v100;
  if (!v36)
  {
    v87 = v100;
    id v40 = (id)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_70;
  }
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_texture] = v36;
  v100 = 0;
  id v38 = v37;
  id v39 = objc_msgSend(v35, sel_newTextureWithCGImage_options_error_, a5, 0, &v100);
  id v40 = v100;
  if (!v39)
  {
LABEL_70:
    id v88 = v40;
    id v43 = (id)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_71;
  }
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_texture2] = v39;
  v100 = 0;
  id v41 = v40;
  id v42 = objc_msgSend(v35, sel_newTextureWithCGImage_options_error_, a6, 0, &v100);
  id v43 = v100;
  if (!v42)
  {
LABEL_71:
    id v89 = v43;
    id v46 = (id)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_72;
  }
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_depth] = v42;
  v100 = 0;
  id v44 = v43;
  id v45 = objc_msgSend(v35, sel_newTextureWithCGImage_options_error_, a7, 0, &v100);
  id v46 = v100;
  if (!v45)
  {
LABEL_72:
    id v90 = v46;
    uint64_t v91 = _convertNSErrorToError(_:)();

    v83 = (void *)v91;
    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_73;
  }
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_depth2] = v45;
  id v47 = v46;
  objc_msgSend(a1, sel_bounds);
  specialized PKRefineMorph.GridMesh.init(bounds:step:)(0x7FFFFFFFFFFFFFFFLL, (uint64_t)&v100, v48, v49, v50, v51);
  float v52 = v100;
  uint64_t v53 = *((void *)v100 + 2);
  uint64_t v54 = 24 * v53;
  if ((unsigned __int128)(v53 * (__int128)24) >> 64 != (24 * v53) >> 63)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  id v55 = objc_msgSend(a1, sel_device);
  if (!v55)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  id v56 = objc_msgSend(v55, sel_newBufferWithBytes_length_options_, v52 + 32, v54, 0);
  swift_unknownObjectRelease();
  if (!v56)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_vertices3] = v56;
  uint64_t v57 = v101;
  uint64_t v58 = *(void *)(v101 + 16);
  if (v58 + 0x4000000000000000 < 0) {
    goto LABEL_43;
  }
  id v59 = objc_msgSend(a1, sel_device);
  if (!v59)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  id v60 = objc_msgSend(v59, sel_newBufferWithBytes_length_options_, v57 + 32, 2 * v58, 0);
  swift_unknownObjectRelease();
  if (!v60)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_indices3] = v60;
  uint64_t v61 = *(void *)(v57 + 16);
  outlined release of PKRefineMorph.GridMesh((uint64_t)&v100);
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_indicesCount3] = v61;
  uint64_t v62 = *(void **)&v12[v94];
  id v63 = objc_msgSend(v62, sel_newCommandQueue);
  if (!v63)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_commandQueue] = v63;
  id v64 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F35330]), sel_init);
  objc_msgSend(v64, sel_setTextureType_, 2);
  objc_msgSend(v64, sel_setPixelFormat_, 80);
  objc_msgSend(a1, sel_drawableSize);
  if ((~*(void *)&v65 & 0x7FF0000000000000) == 0) {
    goto LABEL_44;
  }
  if (v65 <= -9.22337204e18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v65 >= 9.22337204e18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  objc_msgSend(v64, sel_setWidth_, (uint64_t)v65);
  objc_msgSend(a1, sel_drawableSize);
  if ((~*(void *)&v66 & 0x7FF0000000000000) == 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v66 <= -9.22337204e18)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v66 >= 9.22337204e18)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  objc_msgSend(v64, sel_setHeight_, (uint64_t)v66);
  objc_msgSend(v64, sel_setUsage_, 4);
  objc_msgSend(v64, sel_setStorageMode_, 3);
  id v67 = objc_msgSend(v62, sel_newTextureWithDescriptor_, v64);
  if (!v67)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v93 = v35;
  *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_maskTexture] = v67;
  uint64_t v68 = self;
  id v69 = +[PKMetalResourceHandler sharedResourceHandlerWithDevice:](v68, v62);
  id v70 = -[PKMetalResourceHandler shaderLibrary]((uint64_t)v69);

  if (!v70)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  uint64_t v71 = (void *)MEMORY[0x1C87824B0](0xD000000000000012, 0x80000001C481A320);
  id v72 = objc_msgSend(v70, sel_newFunctionWithName_, v71);

  v73 = (void *)MEMORY[0x1C87824B0](0xD000000000000014, 0x80000001C481A340);
  id v74 = objc_msgSend(v70, sel_newFunctionWithName_, v73);

  id v75 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F352F0]), sel_init);
  v76 = (void *)MEMORY[0x1C87824B0](0x5020656E69666552, 0xEF656E696C657069);
  objc_msgSend(v75, sel_setLabel_, v76);

  objc_msgSend(v75, sel_setVertexFunction_, v72);
  objc_msgSend(v75, sel_setFragmentFunction_, v74);
  id v77 = objc_msgSend(v75, sel_colorAttachments);
  id v78 = objc_msgSend(v77, sel_objectAtIndexedSubscript_, 0);

  if (!v78)
  {
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
  }
  objc_msgSend(v78, sel_setPixelFormat_, objc_msgSend(a1, sel_colorPixelFormat));

  id v79 = objc_msgSend(v75, sel_colorAttachments);
  id v80 = objc_msgSend(v79, sel_objectAtIndexedSubscript_, 1);

  if (!v80) {
    goto LABEL_68;
  }
  objc_msgSend(v80, sel_setPixelFormat_, 80);

  v81 = *(void **)&v12[v94];
  v99 = 0;
  id v82 = objc_msgSend(v81, sel_newRenderPipelineStateWithDescriptor_error_, v75, &v99);
  v83 = v99;
  if (v82)
  {
    *(void *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_pipelineState] = v82;
    id v84 = v83;

    v98.receiver = v12;
    v98.super_class = (Class)type metadata accessor for RefineRenderer();
    id v85 = objc_msgSendSuper2(&v98, sel_init);
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    return (uint64_t)v85;
  }
LABEL_73:
  id v92 = v83;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

Swift::Void __swiftcall RefineRenderer.draw(in:)(MTKView *in)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v3 = [(MTKView *)in currentDrawable];
  if (!v3) {
    return;
  }
  id v4 = v3;
  id v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC9PencilKit14RefineRenderer_commandQueue), sel_commandBuffer));
  if (!v5)
  {
    swift_unknownObjectRelease();
    return;
  }
  unint64_t v6 = v5;
  int64_t v7 = (void *)MEMORY[0x1C87824B0](0x696665526F747541, 0xEA0000000000656ELL);
  objc_msgSend(v6, sel_setLabel_, v7);

  uint64_t v8 = [(MTKView *)in currentRenderPassDescriptor];
  if (!v8)
  {
LABEL_18:
    objc_msgSend(v6, sel_commit);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return;
  }
  id v36 = v8;
  uint64_t v9 = [(MTLRenderPassDescriptor *)v8 colorAttachments];
  uint64_t v10 = [(MTLRenderPassColorAttachmentDescriptorArray *)v9 objectAtIndexedSubscript:1];

  if (!v10)
  {
    __break(1u);
    goto LABEL_33;
  }
  [(MTLRenderPassColorAttachmentDescriptor *)v10 setTexture:*(void *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_maskTexture)];

  size_t v11 = [(MTLRenderPassDescriptor *)v36 colorAttachments];
  unint64_t v12 = [(MTLRenderPassColorAttachmentDescriptorArray *)v11 objectAtIndexedSubscript:1];

  if (!v12)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  [(MTLRenderPassColorAttachmentDescriptor *)v12 setLoadAction:2];

  id v13 = [(MTLRenderPassDescriptor *)v36 colorAttachments];
  uint64_t v14 = [(MTLRenderPassColorAttachmentDescriptorArray *)v13 objectAtIndexedSubscript:1];

  if (!v14)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  [(MTLRenderPassColorAttachmentDescriptor *)v14 setStoreAction:0];

  uint64_t v15 = [(MTLRenderPassDescriptor *)v36 colorAttachments];
  uint64_t v16 = [(MTLRenderPassColorAttachmentDescriptorArray *)v15 objectAtIndexedSubscript:1];

  if (!v16)
  {
LABEL_35:
    __break(1u);
    return;
  }
  -[MTLRenderPassColorAttachmentDescriptor setClearColor:](v16, sel_setClearColor_, 0.0, 0.0, 0.0, 0.0);

  id v17 = objc_msgSend(v6, sel_renderCommandEncoderWithDescriptor_, v36);
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = (void *)MEMORY[0x1C87824B0](0x696665526F747541, 0xEA0000000000656ELL);
    objc_msgSend(v18, sel_setLabel_, v19);

    [(MTKView *)in drawableSize];
    uint64_t v21 = v20;
    [(MTKView *)in drawableSize];
    v37[0] = 0;
    v37[1] = 0;
    v37[2] = v21;
    v37[3] = v22;
    long long v38 = xmmword_1C48267F0;
    objc_msgSend(v18, sel_setViewport_, v37);
    objc_msgSend(v18, sel_setRenderPipelineState_, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_pipelineState));
    [(MTKView *)in frame];
    float64_t v35 = v23;
    [(MTKView *)in frame];
    v24.f64[0] = v35;
    v24.f64[1] = v25;
    v37[0] = vcvt_f32_f64(v24);
    objc_msgSend(v18, sel_setVertexBytes_length_atIndex_, v37, 8, 1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RefineFragmentUniforms>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C4826800;
    *(_DWORD *)(inited + 32) = 0;
    id v27 = (float *)(inited + 32);
    *(_DWORD *)(inited + 36) = 0;
    *(_DWORD *)(inited + 40) = 0;
    objc_msgSend(self, sel_timeIntervalSinceReferenceDate);
    double v29 = fmin((v28 - *(double *)(v1 + OBJC_IVAR____TtC9PencilKit17TiledViewRenderer_startTime))/ *(double *)(v1 + OBJC_IVAR____TtC9PencilKit17TiledViewRenderer_duration), 1.0);
    if (v29 < 0.0) {
      double v29 = 0.0;
    }
    float v30 = v29 * (v29 * 3.0) - v29 * (v29 * (v29 + v29));
    *id v27 = 1.0 - v30;
    *(float *)(inited + 36) = v30;
    *(_DWORD *)(inited + 40) = 0;
    objc_msgSend(v18, sel_setFragmentBytes_length_atIndex_, v27, 12, 0);
    objc_msgSend(v18, sel_setVertexBytes_length_atIndex_, v27, 12, 2);
    objc_msgSend(v18, sel_setVertexBuffer_offset_atIndex_, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_vertices2), 0, 0);
    objc_msgSend(v18, sel_setFragmentTexture_atIndex_, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_texture2), 0);
    objc_msgSend(v18, sel_setFragmentTexture_atIndex_, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_depth2), 1);
    objc_msgSend(v18, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_, 4, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_indicesCount2), 0, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_indices2), 0);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v31 = *(void *)(inited + 16);
      if (v31) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t inited = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(inited);
      uint64_t v31 = *(void *)(inited + 16);
      if (v31)
      {
LABEL_13:
        *(float *)(inited + 32) = v30;
        *(_DWORD *)(inited + 40) = 1;
        uint64_t v32 = 12 * v31;
        if ((unsigned __int128)(v31 * (__int128)12) >> 64 == (12 * v31) >> 63)
        {
          swift_bridgeObjectRetain();
          objc_msgSend(v18, sel_setFragmentBytes_length_atIndex_, inited + 32, v32, 0);
          objc_msgSend(v18, sel_setVertexBytes_length_atIndex_, inited + 32, v32, 2);
          swift_bridgeObjectRelease();
          objc_msgSend(v18, sel_setVertexBuffer_offset_atIndex_, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_vertices), 0, 0);
          objc_msgSend(v18, sel_setFragmentTexture_atIndex_, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_texture), 0);
          objc_msgSend(v18, sel_setFragmentTexture_atIndex_, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_depth), 1);
          objc_msgSend(v18, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_, 4, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_indicesCount), 0, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_indices), 0);
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v33 = *(void *)(inited + 16);
            if (v33) {
              goto LABEL_16;
            }
            goto LABEL_30;
          }
LABEL_29:
          uint64_t inited = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(inited);
          uint64_t v33 = *(void *)(inited + 16);
          if (v33)
          {
LABEL_16:
            *(_DWORD *)(inited + 40) = 2;
            uint64_t v34 = 12 * v33;
            if ((unsigned __int128)(v33 * (__int128)12) >> 64 == (12 * v33) >> 63)
            {
              swift_bridgeObjectRetain();
              objc_msgSend(v18, sel_setFragmentBytes_length_atIndex_, inited + 32, v34, 0);
              objc_msgSend(v18, sel_setVertexBytes_length_atIndex_, inited + 32, v34, 2);
              swift_bridgeObjectRelease_n();
              objc_msgSend(v18, sel_setVertexBuffer_offset_atIndex_, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_vertices3), 0, 0);
              objc_msgSend(v18, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_, 4, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_indicesCount3), 0, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_indices3), 0);
              objc_msgSend(v18, sel_endEncoding);
              swift_unknownObjectRetain();
              objc_msgSend(v6, sel_presentDrawable_, v4);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();

              goto LABEL_18;
            }
LABEL_31:
            __break(1u);
          }
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
    }
    __break(1u);
    goto LABEL_28;
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
}

uint64_t RefineRenderer.__ivar_destroyer()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

id RefineRenderer.__deallocating_deinit()
{
  return TiledViewRenderer.__deallocating_deinit(type metadata accessor for RefineRenderer);
}

id TiledViewRenderer.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for RefineRenderer()
{
  return self;
}

uint64_t outlined release of PKRefineMorph.GridMesh(uint64_t a1)
{
  return a1;
}

void __swiftcall PKEraserTool.init(_:)(PencilKit::PKEraserTool *__return_ptr retstr, PencilKit::PKEraserTool::EraserType a2)
{
  retstr->tool.super.super.Class isa = (Class)objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_, *(unsigned __int8 *)a2);
}

id PKEraserTool.init(_:width:)@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  id result = objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_width_, *a1, a3);
  *a2 = result;
  return result;
}

id PKEraserTool.EraserType.defaultWidth.getter()
{
  uint64_t v1 = *v0;
  id v2 = self;

  return objc_msgSend(v2, sel_defaultWidthForEraserType_, v1);
}

id PKEraserTool.EraserType.validWidthRange.getter()
{
  int v1 = *v0;
  if (v1 == 2)
  {
    id v2 = self;
    uint64_t v3 = 2;
    objc_msgSend(v2, sel_minimumWidthForEraserType_, 2);
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    id v2 = self;
    uint64_t v3 = 1;
    objc_msgSend(v2, sel_minimumWidthForEraserType_, 1);
LABEL_5:
    double v5 = v4;
    goto LABEL_7;
  }
  id v2 = self;
  objc_msgSend(v2, sel_minimumWidthForEraserType_, 0);
  double v5 = v6;
  uint64_t v3 = 0;
LABEL_7:
  id result = objc_msgSend(v2, sel_maximumWidthForEraserType_, v3);
  if (v5 > v8) {
    __break(1u);
  }
  return result;
}

BOOL static PKEraserTool.EraserType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PKEraserTool.EraserType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int PKEraserTool.EraserType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id PKEraserTool.eraserType.getter@<X0>(unsigned char *a1@<X8>)
{
  id result = objc_msgSend(*v1, sel_eraserType);
  if ((unint64_t)result >= 3)
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a1 = (_BYTE)result;
  }
  return result;
}

id key path getter for PKEraserTool.eraserType : PKEraserTool@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_eraserType);
  if ((unint64_t)result >= 3)
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = (_BYTE)result;
  }
  return result;
}

void key path setter for PKEraserTool.eraserType : PKEraserTool(unsigned __int8 *a1, id *a2)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_, *a1);

  *a2 = v3;
}

void PKEraserTool.eraserType.setter(unsigned __int8 *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_, *a1);

  id *v1 = v2;
}

void (*PKEraserTool.eraserType.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  id v3 = objc_msgSend(*v1, sel_eraserType);
  if ((unint64_t)v3 >= 3)
  {
    id result = (void (*)(uint64_t))_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(unsigned char *)(a1 + 8) = (_BYTE)v3;
    return PKEraserTool.eraserType.modify;
  }
  return result;
}

void PKEraserTool.eraserType.modify(uint64_t a1)
{
  Swift::UInt v1 = *(id **)a1;
  id v2 = objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_, *(unsigned __int8 *)(a1 + 8));

  id *v1 = v2;
}

id PKEraserTool.width.getter()
{
  return objc_msgSend(*v0, sel_width);
}

void PKEraserTool.width.setter(double a1)
{
  id v3 = *v1;
  id v4 = objc_msgSend(*v1, sel_eraserType);
  if ((unint64_t)v4 >= 2)
  {
    if (v4 == (id)2 && (id v5 = objc_msgSend(v3, sel_eraserType), (unint64_t)v5 < 3))
    {
      id v6 = objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_width_, v5, a1);

      id *v1 = v6;
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
}

void (*PKEraserTool.width.modify(void *a1))(double *a1)
{
  a1[1] = v1;
  objc_msgSend(*v1, sel_width);
  *a1 = v3;
  return PKEraserTool.width.modify;
}

void PKEraserTool.width.modify(double *a1)
{
}

uint64_t static PKEraserTool.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

void __swiftcall PKEraserTool._bridgeToObjectiveC()(PKEraserTool *__return_ptr retstr)
{
  id v2 = *v1;
}

id static PKEraserTool._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;

  return a1;
}

uint64_t static PKEraserTool._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;
  id v4 = a1;
  return 1;
}

id static PKEraserTool._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, id *a2@<X8>)
{
  if (result)
  {
    *a2 = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PKEraserTool.EraserType and conformance PKEraserTool.EraserType()
{
  unint64_t result = lazy protocol witness table cache variable for type PKEraserTool.EraserType and conformance PKEraserTool.EraserType;
  if (!lazy protocol witness table cache variable for type PKEraserTool.EraserType and conformance PKEraserTool.EraserType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKEraserTool.EraserType and conformance PKEraserTool.EraserType);
  }
  return result;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance PKEraserTool@<X0>(id result@<X0>, id *a2@<X8>)
{
  if (result)
  {
    *a2 = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1C451BD48@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_width);
  *a2 = v4;
  return result;
}

void sub_1C451BD7C(double *a1)
{
}

ValueMetadata *type metadata accessor for PKEraserTool()
{
  return &type metadata for PKEraserTool;
}

unsigned char *storeEnumTagSinglePayload for PKEraserTool.EraserType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *id result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C451BE80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PKEraserTool.EraserType()
{
  return &type metadata for PKEraserTool.EraserType;
}

id PKStrokePoint.init(location:timeOffset:size:opacity:force:azimuth:altitude:)@<X0>(void *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>, uint64_t a10)
{
  id result = objc_msgSend(objc_allocWithZone((Class)PKStrokePoint), sel_initWithLocation_timeOffset_size_opacity_force_azimuth_altitude_, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  *a1 = result;
  return result;
}

id PKStrokePoint.init(location:timeOffset:size:opacity:force:azimuth:altitude:secondaryScale:)@<X0>(void *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>, uint64_t a10, uint64_t a11)
{
  id result = objc_msgSend(objc_allocWithZone((Class)PKStrokePoint), sel_initWithLocation_timeOffset_size_opacity_force_azimuth_altitude_secondaryScale_, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  *a1 = result;
  return result;
}

id PKStrokePoint.location.getter()
{
  return objc_msgSend(*v0, sel_location);
}

id PKStrokePoint.timeOffset.getter()
{
  return objc_msgSend(*v0, sel_timeOffset);
}

id PKStrokePoint.size.getter()
{
  return objc_msgSend(*v0, sel_size);
}

id PKStrokePoint.opacity.getter()
{
  return objc_msgSend(*v0, sel_opacity);
}

id PKStrokePoint.azimuth.getter()
{
  return objc_msgSend(*v0, sel_azimuth);
}

id PKStrokePoint.force.getter()
{
  return objc_msgSend(*v0, sel_force);
}

id PKStrokePoint.altitude.getter()
{
  return objc_msgSend(*v0, sel_altitude);
}

id PKStrokePoint.secondaryScale.getter()
{
  return objc_msgSend(*v0, sel_secondaryScale);
}

void __swiftcall PKStrokePoint._bridgeToObjectiveC()(PKStrokePoint *__return_ptr retstr)
{
  id v2 = *v1;
}

id static PKStrokePoint._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;

  return a1;
}

uint64_t static PKStrokePoint._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;
  id v4 = a1;
  return 1;
}

id static PKStrokePoint._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    *a2 = a1;
    return a1;
  }
  else
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance PKStrokePoint@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    *a2 = a1;
    return a1;
  }
  else
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for PKStrokePoint()
{
  return &type metadata for PKStrokePoint;
}

PKToolPickerEraserItem __swiftcall PKToolPickerEraserItem.init(type:)(PencilKit::PKEraserTool::EraserType type)
{
  uint64_t v1 = *(unsigned __int8 *)type;
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v3 = objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_width_, v1, 0.0);
  id v4 = (objc_class *)objc_msgSend(v2, sel_initWithTool_, v3);

  int64_t v7 = v4;
  result.super.__tool = v6;
  result.super._observers = v5;
  result.super.super.Class isa = v7;
  return result;
}

id PKToolPickerEraserItem.init(type:width:)(unsigned __int8 *a1, double a2)
{
  uint64_t v3 = *a1;
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v5 = objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_width_, v3, a2);
  id v6 = objc_msgSend(v4, sel_initWithTool_, v5);

  return v6;
}

uint64_t PKToolPickerEraserItem.eraserTool.getter@<X0>(uint64_t *a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel__tool);
  self;
  uint64_t result = swift_dynamicCastObjCClassUnconditional();
  *a1 = result;
  return result;
}

id one-time initialization function for default()
{
  uint64_t v0 = type metadata accessor for Logger();
  MEMORY[0x1F4188790](v0 - 8, v1);
  uint64_t v2 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v2, static OSSignposter.default);
  __swift_project_value_buffer(v2, (uint64_t)static OSSignposter.default);
  id result = _PKSignpostLog();
  if (result)
  {
    Logger.init(_:)();
    return (id)OSSignposter.init(logger:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  v4[122] = v3;
  v4[121] = a2;
  v4[120] = a1;
  uint64_t v6 = type metadata accessor for OSSignpostError();
  v4[123] = v6;
  v4[124] = *(void *)(v6 - 8);
  v4[125] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[126] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OSSignpostID();
  v4[127] = v7;
  v4[128] = *(void *)(v7 - 8);
  v4[129] = swift_task_alloc();
  v4[130] = swift_task_alloc();
  v4[131] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OSSignposter();
  v4[132] = v8;
  v4[133] = *(void *)(v8 - 8);
  v4[134] = swift_task_alloc();
  v4[135] = swift_task_alloc();
  v4[136] = swift_task_alloc();
  v4[137] = *a3;
  type metadata accessor for MainActor();
  v4[138] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[139] = v10;
  v4[140] = v9;
  return MEMORY[0x1F4188298](PKTiledViewAnimationController.setupRefineAnimation(from:to:in:), v10, v9);
}

uint64_t PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)()
{
  uint64_t v1 = (void *)MEMORY[0x1C8784EA0](*(void *)(v0 + 976) + OBJC_IVAR___PKTiledViewAnimationController_tiledView);
  *(void *)(v0 + 1128) = v1;
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_scrollView);
    *(void *)(v0 + 1136) = v3;
    if (v3)
    {
      id v78 = v3;
      id v79 = v2;
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v4 = *(void *)(v0 + 1088);
      uint64_t v5 = *(void *)(v0 + 1080);
      uint64_t v6 = *(void *)(v0 + 1064);
      uint64_t v7 = *(void *)(v0 + 1056);
      uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static OSSignposter.default);
      *(void *)(v0 + 1144) = v8;
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      *(void *)(v0 + 1152) = v9;
      *(void *)(v0 + 1160) = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v9(v4, v8, v7);
      v9(v5, v8, v7);
      OSSignposter.logHandle.getter();
      OSSignpostID.init(log:)();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      *(void *)(v0 + 1168) = v10;
      *(void *)(v0 + 1176) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v86 = v10;
      v10(v5, v7);
      size_t v11 = OSSignposter.logHandle.getter();
      os_signpost_type_t v12 = static os_signpost_type_t.begin.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        uint64_t v13 = *(void *)(v0 + 1040);
        uint64_t v14 = *(void *)(v0 + 1024);
        uint64_t v15 = *(void *)(v0 + 1016);
        uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
        unint64_t v17 = (v14 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v16(v13, *(void *)(v0 + 1048), v15);
        id v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v18 = 0;
        os_signpost_id_t v19 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_1C44F8000, v11, v12, v19, "Refine Animation Setup", "", v18, 2u);
        MEMORY[0x1C8784DC0](v18, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
      }
      else
      {
        uint64_t v20 = *(void *)(v0 + 1024);

        uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
        unint64_t v17 = (v20 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      }
      *(void *)(v0 + 1184) = v16;
      uint64_t v21 = *(void *)(v0 + 1088);
      uint64_t v22 = *(void *)(v0 + 1056);
      uint64_t v23 = *(void *)(v0 + 1048);
      uint64_t v24 = *(void *)(v0 + 1040);
      uint64_t v25 = *(void *)(v0 + 1024);
      uint64_t v26 = *(void *)(v0 + 1016);
      uint64_t v84 = *(void *)(v0 + 960);
      *(void *)(v0 + 1192) = v17;
      v16(v24, v23, v26);
      type metadata accessor for OSSignpostIntervalState();
      swift_allocObject();
      *(void *)(v0 + 1200) = OSSignpostIntervalState.init(id:isOpen:)();
      id v27 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      *(void *)(v0 + 1208) = v27;
      *(void *)(v0 + 1216) = (v25 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v27(v23, v26);
      v86(v21, v22);
      CGFloat v28 = *MEMORY[0x1E4F1DB20];
      CGFloat v29 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
      CGFloat v30 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
      CGFloat v31 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
      uint64_t v32 = *(void *)(v84 + 16);
      double x = *MEMORY[0x1E4F1DB20];
      double y = v29;
      double width = v30;
      double height = v31;
      if (v32)
      {
        id v37 = (void **)(*(void *)(v0 + 960) + 32);
        swift_bridgeObjectRetain();
        double x = v28;
        double y = v29;
        double width = v30;
        double height = v31;
        do
        {
          long long v38 = *v37++;
          id v39 = v38;
          objc_msgSend(v39, sel_renderBounds);
          v117.origin.double x = v40;
          v117.origin.double y = v41;
          v117.size.double width = v42;
          v117.size.double height = v43;
          v98.origin.double x = x;
          v98.origin.double y = y;
          v98.size.double width = width;
          v98.size.double height = height;
          CGRect v99 = CGRectUnion(v98, v117);
          double x = v99.origin.x;
          double y = v99.origin.y;
          double width = v99.size.width;
          double height = v99.size.height;

          --v32;
        }
        while (v32);
        swift_bridgeObjectRelease();
      }
      *(double *)(v0 + 1248) = height;
      *(double *)(v0 + 1240) = width;
      *(double *)(v0 + 1232) = y;
      *(double *)(v0 + 1224) = x;
      uint64_t v44 = *(void *)(v0 + 968);
      uint64_t v45 = *(void *)(v44 + 16);
      if (v45)
      {
        id v46 = (void **)(v44 + 32);
        swift_bridgeObjectRetain();
        do
        {
          id v47 = *v46++;
          id v48 = v47;
          objc_msgSend(v48, sel_renderBounds);
          v118.origin.double x = v49;
          v118.origin.double y = v50;
          v118.size.double width = v51;
          v118.size.double height = v52;
          v100.origin.double x = v28;
          v100.origin.double y = v29;
          v100.size.double width = v30;
          v100.size.double height = v31;
          CGRect v101 = CGRectUnion(v100, v118);
          CGFloat v28 = v101.origin.x;
          CGFloat v29 = v101.origin.y;
          CGFloat v30 = v101.size.width;
          CGFloat v31 = v101.size.height;

          --v45;
        }
        while (v45);
        swift_bridgeObjectRelease();
      }
      objc_msgSend(v79, sel_transformFromStrokeSpaceToViewInDrawing_, *(void *)(v0 + 1096));
      *(double *)(v0 + 832) = x;
      *(double *)(v0 + 840) = y;
      *(double *)(v0 + 848) = width;
      *(double *)(v0 + 856) = height;
      *(CGFloat *)(v0 + 864) = v28;
      *(CGFloat *)(v0 + 872) = v29;
      *(CGFloat *)(v0 + 880) = v30;
      *(CGFloat *)(v0 + 888) = v31;
      v102.origin.double x = x;
      v102.origin.double y = y;
      v102.size.double width = width;
      v102.size.double height = height;
      v119.origin.double x = v28;
      v119.origin.double y = v29;
      v119.size.double width = v30;
      v119.size.double height = v31;
      CGRect v103 = CGRectUnion(v102, v119);
      *(void *)(v0 + 528) = v91;
      *(void *)(v0 + 536) = v92;
      *(void *)(v0 + 544) = v93;
      *(void *)(v0 + 552) = v94;
      *(void *)(v0 + 560) = v95;
      *(void *)(v0 + 568) = v96;
      CGRect v104 = CGRectApplyAffineTransform(v103, (CGAffineTransform *)(v0 + 528));
      objc_msgSend(v78, sel_convertRect_fromCoordinateSpace_, v79, v104.origin.x, v104.origin.y, v104.size.width, v104.size.height);
      CGFloat v82 = v54;
      v83 = v53;
      CGFloat v80 = v56;
      CGFloat v81 = v55;
      *(void *)(v0 + 576) = v91;
      *(void *)(v0 + 584) = v92;
      *(void *)(v0 + 592) = v93;
      *(void *)(v0 + 600) = v94;
      *(void *)(v0 + 608) = v95;
      *(void *)(v0 + 616) = v96;
      v105.origin.double x = x;
      v105.origin.double y = y;
      v105.size.double width = width;
      v105.size.double height = height;
      CGRect v106 = CGRectApplyAffineTransform(v105, (CGAffineTransform *)(v0 + 576));
      objc_msgSend(v78, sel_convertRect_fromCoordinateSpace_, v79, v106.origin.x, v106.origin.y, v106.size.width, v106.size.height);
      *(void *)(v0 + 1256) = v57;
      *(void *)(v0 + 1264) = v58;
      *(void *)(v0 + 1272) = v59;
      *(void *)(v0 + 1280) = v60;
      *(void *)(v0 + 624) = v91;
      *(void *)(v0 + 632) = v92;
      *(void *)(v0 + 640) = v93;
      *(void *)(v0 + 648) = v94;
      *(void *)(v0 + 656) = v95;
      *(void *)(v0 + 664) = v96;
      v107.origin.double x = v28;
      v107.origin.double y = v29;
      v107.size.double width = v30;
      v107.size.double height = v31;
      CGRect v108 = CGRectApplyAffineTransform(v107, (CGAffineTransform *)(v0 + 624));
      objc_msgSend(v78, sel_convertRect_fromCoordinateSpace_, v79, v108.origin.x, v108.origin.y, v108.size.width, v108.size.height);
      *(void *)(v0 + 1288) = v61;
      *(void *)(v0 + 1296) = v62;
      *(void *)(v0 + 1304) = v63;
      *(void *)(v0 + 1312) = v64;
      v109.origin.double y = v82;
      *(void *)&v109.origin.double x = v83;
      *(void *)(v0 + 896) = v83;
      *(CGFloat *)(v0 + 904) = v82;
      v109.size.double height = v80;
      v109.size.double width = v81;
      *(CGFloat *)(v0 + 912) = v81;
      *(CGFloat *)(v0 + 920) = v80;
      double v87 = CGRectGetWidth(v109);
      objc_msgSend(v78, sel_frame);
      if (v87 < CGRectGetWidth(v110))
      {
        v111.origin.double y = v82;
        *(void *)&v111.origin.double x = v83;
        v111.size.double height = v80;
        v111.size.double width = v81;
        double v88 = CGRectGetHeight(v111);
        objc_msgSend(v78, sel_frame);
        if (v88 < CGRectGetHeight(v112))
        {
          uint64_t v65 = *(void *)(v0 + 968);
          uint64_t v66 = *(void *)(v0 + 960);
          v113.origin.double x = x;
          v113.origin.double y = y;
          v113.size.double width = width;
          v113.size.double height = height;
          double v89 = CGRectGetWidth(v113);
          v114.origin.double x = v28;
          v114.origin.double y = v29;
          v114.size.double width = v30;
          v114.size.double height = v31;
          double v67 = CGRectGetWidth(v114);
          if (v89 > v67) {
            double v67 = v89;
          }
          double v90 = v67;
          v115.origin.double x = x;
          v115.origin.double y = y;
          v115.size.double width = width;
          v115.size.double height = height;
          double v85 = CGRectGetHeight(v115);
          v116.origin.double x = v28;
          v116.origin.double y = v29;
          v116.size.double width = v30;
          v116.size.double height = v31;
          double v68 = CGRectGetHeight(v116);
          if (v85 > v68) {
            double v69 = v85;
          }
          else {
            double v69 = v68;
          }
          id v70 = objc_msgSend(objc_allocWithZone((Class)PKImageRenderer), sel_initWithSize_scale_, v90, v69, 2.0);
          *(void *)(v0 + 1320) = v70;
          id v71 = objc_msgSend(v79, sel_traitCollection);
          id v72 = objc_msgSend(v71, sel_userInterfaceStyle);

          objc_msgSend(v70, sel_setInvertColors_, v72 == (id)2);
          PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)(v66, 0, 0);
          *(void *)(v0 + 1328) = v73;
          PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)(v65, 1, 0);
          *(void *)(v0 + 1336) = v74;
          specialized _arrayForceCast<A, B>(_:)(v66);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          *(void *)(v0 + 1344) = isa;
          swift_bridgeObjectRelease();
          *(void *)(v0 + 208) = v0;
          *(void *)(v0 + 248) = v0 + 936;
          *(void *)(v0 + 216) = PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
          *(void *)(v0 + 704) = swift_continuation_init();
          *(void *)(v0 + 672) = MEMORY[0x1E4F143A8];
          *(void *)(v0 + 680) = 0x40000000;
          *(void *)(v0 + 688) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
          *(void *)(v0 + 696) = &block_descriptor_31;
          objc_msgSend(v70, sel_renderStrokes_clippedToStrokeSpaceRect_scale_completion_, isa, v0 + 672, x, y, width, height, 2.0);
          return MEMORY[0x1F41881E8](v0 + 208);
        }
      }
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v76 = *(uint64_t (**)(void))(v0 + 8);
  return v76();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 1120);
  uint64_t v2 = *(void *)(*(void *)v0 + 1112);
  return MEMORY[0x1F4188298](PKTiledViewAnimationController.setupRefineAnimation(from:to:in:), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  Class isa;
  void *v9;
  void *v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  uint64_t v1 = *(void **)(v0 + 1344);
  uint64_t v2 = *(void *)(v0 + 936);
  *(void *)(v0 + 1352) = v2;

  if (v2)
  {
    id v3 = *(void **)(v0 + 1320);
    uint64_t v4 = *(double *)(v0 + 864);
    uint64_t v5 = *(double *)(v0 + 872);
    uint64_t v6 = *(double *)(v0 + 880);
    uint64_t v7 = *(double *)(v0 + 888);
    specialized _arrayForceCast<A, B>(_:)(*(void *)(v0 + 968));
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    *(void *)(v0 + 1360) = isa;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 952;
    *(void *)(v0 + 24) = PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
    *(void *)(v0 + 824) = swift_continuation_init();
    *(void *)(v0 + 792) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 800) = 0x40000000;
    *(void *)(v0 + 808) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
    *(void *)(v0 + 816) = &block_descriptor_32;
    objc_msgSend(v3, sel_renderStrokes_clippedToStrokeSpaceRect_scale_completion_, isa, v0 + 792, v4, v5, v6, v7, 2.0);
    return MEMORY[0x1F41881E8](v0 + 16);
  }
  else
  {
    uint64_t v9 = *(void **)(v0 + 1320);
    uint64_t v10 = *(void **)(v0 + 1136);

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    size_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 1120);
  uint64_t v2 = *(void *)(*(void *)v0 + 1112);
  return MEMORY[0x1F4188298](PKTiledViewAnimationController.setupRefineAnimation(from:to:in:), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  Class isa;
  void *v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  uint64_t v1 = *(void **)(v0 + 1360);
  uint64_t v2 = *(void *)(v0 + 952);
  *(void *)(v0 + 1368) = v2;

  if (v2)
  {
    id v3 = *(void **)(v0 + 1320);
    uint64_t v4 = *(double *)(v0 + 832);
    uint64_t v5 = *(double *)(v0 + 840);
    uint64_t v6 = *(double *)(v0 + 848);
    uint64_t v7 = *(double *)(v0 + 856);
    specialized _arrayForceCast<A, B>(_:)(*(void *)(v0 + 1328));
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    *(void *)(v0 + 1376) = isa;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 184) = v0 + 944;
    *(void *)(v0 + 152) = PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
    *(void *)(v0 + 784) = swift_continuation_init();
    *(void *)(v0 + 752) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 760) = 0x40000000;
    *(void *)(v0 + 768) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
    *(void *)(v0 + 776) = &block_descriptor_33;
    objc_msgSend(v3, sel_renderStrokes_clippedToStrokeSpaceRect_scale_completion_, isa, v0 + 752, v4, v5, v6, v7, 2.0);
    return MEMORY[0x1F41881E8](v0 + 144);
  }
  else
  {
    uint64_t v9 = *(void **)(v0 + 1352);
    uint64_t v10 = *(void **)(v0 + 1320);
    size_t v11 = *(void **)(v0 + 1136);

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_signpost_type_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 1120);
  uint64_t v2 = *(void *)(*(void *)v0 + 1112);
  return MEMORY[0x1F4188298](PKTiledViewAnimationController.setupRefineAnimation(from:to:in:), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  Class isa;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  uint64_t v1 = *(void **)(v0 + 1376);
  uint64_t v2 = *(void *)(v0 + 944);
  *(void *)(v0 + 1384) = v2;

  if (v2)
  {
    id v3 = *(void **)(v0 + 1320);
    uint64_t v4 = *(double *)(v0 + 864);
    uint64_t v5 = *(double *)(v0 + 872);
    uint64_t v6 = *(double *)(v0 + 880);
    uint64_t v7 = *(double *)(v0 + 888);
    specialized _arrayForceCast<A, B>(_:)(*(void *)(v0 + 1336));
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    *(void *)(v0 + 1392) = isa;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 80) = v0;
    *(void *)(v0 + 120) = v0 + 928;
    *(void *)(v0 + 88) = PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
    *(void *)(v0 + 744) = swift_continuation_init();
    *(void *)(v0 + 712) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 720) = 0x40000000;
    *(void *)(v0 + 728) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
    *(void *)(v0 + 736) = &block_descriptor_34;
    objc_msgSend(v3, sel_renderStrokes_clippedToStrokeSpaceRect_scale_completion_, isa, v0 + 712, v4, v5, v6, v7, 2.0);
    return MEMORY[0x1F41881E8](v0 + 80);
  }
  else
  {
    uint64_t v9 = *(void **)(v0 + 1368);
    uint64_t v10 = *(void **)(v0 + 1352);
    size_t v11 = *(void **)(v0 + 1320);
    os_signpost_type_t v12 = *(void **)(v0 + 1136);

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 1120);
  uint64_t v2 = *(void *)(*(void *)v0 + 1112);
  return MEMORY[0x1F4188298](PKTiledViewAnimationController.setupRefineAnimation(from:to:in:), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t (*v25)(void);
  double v27;
  double v28;
  double v29;
  double v30;
  long long v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  uint64_t v1 = *(void **)(v0 + 1392);
  uint64_t v2 = *(void *)(v0 + 928);
  *(void *)(v0 + 1400) = v2;

  if (v2)
  {
    uint64_t v32 = *(void *)(v0 + 1304);
    uint64_t v33 = *(void *)(v0 + 1312);
    CGFloat v31 = *(_OWORD *)(v0 + 1288);
    id v3 = *(double *)(v0 + 1280);
    uint64_t v4 = *(double *)(v0 + 1272);
    uint64_t v5 = *(double *)(v0 + 1264);
    uint64_t v6 = *(double *)(v0 + 1256);
    CGFloat v29 = *(double *)(v0 + 1248);
    CGFloat v30 = *(double *)(v0 + 1232);
    id v27 = *(double *)(v0 + 1240);
    CGFloat v28 = *(double *)(v0 + 1224);
    uint64_t v7 = *(void **)(v0 + 1136);
    uint64_t v8 = *(void *)(v0 + 1008);
    uint64_t v9 = *(void *)(v0 + 968);
    uint64_t v10 = *(void *)(v0 + 960);
    size_t v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F353C8]), sel_initWithFrame_device_, MTLCreateSystemDefaultDevice(), *(double *)(v0 + 896), *(double *)(v0 + 904), *(double *)(v0 + 912), *(double *)(v0 + 920));
    *(void *)(v0 + 1408) = v11;
    swift_unknownObjectRelease();
    os_signpost_type_t v12 = objc_msgSend(v11, sel_layer);
    uint64_t v13 = objc_msgSend(self, sel_orangeColor);
    uint64_t v14 = objc_msgSend(v13, sel_CGColor);

    objc_msgSend(v12, sel_setBorderColor_, v14);
    objc_msgSend(v11, sel_setOpaque_, 0);
    objc_msgSend(v11, sel_setColorPixelFormat_, 80);
    objc_msgSend(v11, sel_setClearColor_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v7, sel_addSubview_, v11);
    objc_msgSend(v11, sel_setPaused_, 1);
    objc_msgSend(v11, sel_setHidden_, 1);
    uint64_t v15 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v8, 1, 1, v15);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = 0;
    *(void *)(v16 + 24) = 0;
    *(void *)(v16 + 32) = v10;
    *(void *)(v16 + 40) = v9;
    *(double *)(v16 + 48) = v6;
    *(double *)(v16 + 56) = v5;
    *(double *)(v16 + 64) = v4;
    *(double *)(v16 + 72) = v3;
    *(_OWORD *)(v16 + 80) = v31;
    *(void *)(v16 + 96) = v32;
    *(void *)(v16 + 104) = v33;
    *(double *)(v16 + 112) = v27 / v4;
    *(void *)(v16 + 120) = 0;
    *(void *)(v16 + 128) = 0;
    *(double *)(v16 + 136) = v29 / v3;
    *(double *)(v16 + 144) = v28 - v6 * (v27 / v4);
    *(double *)(v16 + 152) = v30 - v5 * (v29 / v3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v17 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZ9PencilKit13PKRefineMorphV8GridMeshV_ALt_Tgm5(v8, (uint64_t)&async function pointer to partial apply for closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:), v16);
    *(void *)(v0 + 1416) = v17;
    outlined destroy of TaskPriority?(v8);
    id v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 1424) = v18;
    os_signpost_id_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PKRefineMorph.GridMesh, PKRefineMorph.GridMesh));
    *id v18 = v0;
    v18[1] = PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
    return MEMORY[0x1F4187DC0](v0 + 272, v17, v19);
  }
  else
  {
    uint64_t v20 = *(void **)(v0 + 1384);
    uint64_t v21 = *(void **)(v0 + 1368);
    uint64_t v22 = *(void **)(v0 + 1352);
    uint64_t v23 = *(void **)(v0 + 1320);
    uint64_t v24 = *(void **)(v0 + 1136);

    swift_release();
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 1120);
  id v3 = *(void *)(v1 + 1112);
  return MEMORY[0x1F4188298](PKTiledViewAnimationController.setupRefineAnimation(from:to:in:), v3, v2);
}

id PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)()
{
  uint64_t v1 = *(void **)(v0 + 1352);
  swift_release();
  long long v2 = *(_OWORD *)(v0 + 288);
  *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 272);
  *(_OWORD *)(v0 + 416) = v2;
  long long v3 = *(_OWORD *)(v0 + 320);
  *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 304);
  *(_OWORD *)(v0 + 448) = v3;
  long long v4 = *(_OWORD *)(v0 + 352);
  *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 336);
  *(_OWORD *)(v0 + 480) = v4;
  long long v5 = *(_OWORD *)(v0 + 384);
  *(_OWORD *)(v0 + 496) = *(_OWORD *)(v0 + 368);
  *(_OWORD *)(v0 + 512) = v5;
  id result = objc_msgSend(v1, sel_CGImage);
  if (!result)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = result;
  id result = objc_msgSend(*(id *)(v0 + 1368), sel_CGImage);
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = result;
  id result = objc_msgSend(*(id *)(v0 + 1384), sel_CGImage);
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v9 = result;
  id result = objc_msgSend(*(id *)(v0 + 1400), sel_CGImage);
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  size_t v11 = *(void **)(v0 + 1408);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1152);
  uint64_t v51 = *(void *)(v0 + 1072);
  uint64_t v54 = *(void *)(v0 + 1056);
  uint64_t v57 = *(void *)(v0 + 1144);
  uint64_t v12 = *(void *)(v0 + 976);
  id v13 = objc_allocWithZone((Class)type metadata accessor for RefineRenderer());
  id v14 = v11;
  uint64_t v15 = (void *)RefineRenderer.init(metalKitView:from:to:image:toImage:depth:toDepth:)(v14, (void *)(v0 + 400), (void *)(v0 + 464), v7, v8, v9, v10);
  objc_msgSend(v14, sel_setDelegate_, v15);
  uint64_t v16 = *(void **)(v12 + OBJC_IVAR___PKTiledViewAnimationController_renderer);
  *(void *)(v12 + OBJC_IVAR___PKTiledViewAnimationController_renderer) = v15;
  id v17 = v15;

  id v18 = *(void **)(v12 + OBJC_IVAR___PKTiledViewAnimationController_mtkView);
  *(void *)(v12 + OBJC_IVAR___PKTiledViewAnimationController_mtkView) = v14;
  id v19 = v14;

  id v20 = objc_msgSend(v19, sel_layer);
  objc_msgSend(v20, sel_setDisableUpdateMask_, 2);

  objc_msgSend(v19, sel_draw);
  v60(v51, v57, v54);
  uint64_t v21 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v22 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v23 = *(void *)(v0 + 1000);
    uint64_t v24 = *(void *)(v0 + 992);
    uint64_t v25 = *(void *)(v0 + 984);
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    CGFloat v50 = v17;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v24 + 88))(v23, v25) == *MEMORY[0x1E4FBD340])
    {
      uint64_t v26 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 992) + 8))(*(void *)(v0 + 1000), *(void *)(v0 + 984));
      uint64_t v26 = "";
    }
    CGFloat v49 = *(void **)(v0 + 1408);
    CGFloat v43 = *(void **)(v0 + 1400);
    CGFloat v41 = *(void **)(v0 + 1368);
    CGFloat v42 = *(void **)(v0 + 1384);
    uint64_t v33 = *(void **)(v0 + 1352);
    uint64_t v34 = *(void **)(v0 + 1320);
    uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v0 + 1208);
    uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v0 + 1168);
    uint64_t v45 = *(void **)(v0 + 1136);
    id v47 = *(void **)(v0 + 1128);
    uint64_t v53 = *(void *)(v0 + 1056);
    uint64_t v56 = *(void *)(v0 + 1072);
    uint64_t v35 = *(void *)(v0 + 1040);
    uint64_t v36 = *(void *)(v0 + 1032);
    uint64_t v37 = *(void *)(v0 + 1016);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1184))(v35, v36, v37);
    long long v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v38 = 0;
    os_signpost_id_t v39 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1C44F8000, v21, v22, v39, "Refine Animation Setup", v26, v38, 2u);
    MEMORY[0x1C8784DC0](v38, -1, -1);

    swift_release();
    v59(v36, v37);
    v61(v56, v53);
    swift_release();
    v59(v35, v37);
  }
  else
  {
    id v27 = *(void **)(v0 + 1408);
    CGFloat v28 = *(void **)(v0 + 1400);
    uint64_t v44 = *(void **)(v0 + 1384);
    id v46 = *(void **)(v0 + 1368);
    double v55 = *(void **)(v0 + 1352);
    uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v0 + 1208);
    uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v0 + 1168);
    CGFloat v29 = *(void **)(v0 + 1136);
    CGFloat v30 = *(void **)(v0 + 1128);
    uint64_t v52 = *(void *)(v0 + 1072);
    uint64_t v48 = *(void *)(v0 + 1056);
    uint64_t v31 = *(void *)(v0 + 1032);
    uint64_t v32 = *(void *)(v0 + 1016);

    swift_release();
    v58(v31, v32);
    v62(v52, v48);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  CGFloat v40 = *(uint64_t (**)(void))(v0 + 8);
  return (id)v40();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(*(void *)(v2 + 64) + 40);
  id v4 = a2;
  outlined init with take of UIImage?((uint64_t)&v6, v3);
  return swift_continuation_resume();
}

uint64_t closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v14 + 104) = a14;
  *(double *)(v14 + 88) = a8;
  *(double *)(v14 + 96) = a9;
  *(double *)(v14 + 72) = a6;
  *(double *)(v14 + 80) = a7;
  *(double *)(v14 + 56) = a4;
  *(double *)(v14 + 64) = a5;
  *(double *)(v14 + 40) = a2;
  *(double *)(v14 + 48) = a3;
  *(void *)(v14 + 24) = a12;
  *(void *)(v14 + 32) = a13;
  *(void *)(v14 + 16) = a1;
  return MEMORY[0x1F4188298](closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:), 0, 0);
}

uint64_t closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)()
{
  uint64_t v12 = v0;
  uint64_t v1 = *(_OWORD **)(v0 + 16);
  specialized static PKRefineMorph.computeMorph(from:to:fromViewFrame:toViewFrame:transformViewToModel:)(*(void *)(v0 + 24), *(void *)(v0 + 32), *(CGAffineTransform **)(v0 + 104), v11, *(double *)(v0 + 40), *(double *)(v0 + 48), *(double *)(v0 + 56), *(double *)(v0 + 64), *(double *)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96));
  long long v3 = v11[2];
  long long v2 = v11[3];
  long long v5 = v11[6];
  long long v4 = v11[7];
  long long v6 = v11[1];
  long long v8 = v11[4];
  long long v7 = v11[5];
  _OWORD *v1 = v11[0];
  v1[1] = v6;
  v1[2] = v3;
  v1[3] = v2;
  v1[4] = v8;
  v1[5] = v7;
  v1[6] = v5;
  v1[7] = v4;
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZ9PencilKit13PKRefineMorphV8GridMeshV_ALt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v9);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v9);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PKRefineMorph.GridMesh, PKRefineMorph.GridMesh));
  if (v14 | v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    void v17[2] = v12;
    v17[3] = v14;
  }
  return swift_task_create();
}

uint64_t @objc closure #1 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  type metadata accessor for MainActor();
  v5[8] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](@objc closure #1 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:), v7, v6);
}

uint64_t @objc closure #1 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)()
{
  uint64_t v1 = (void *)v0[7];
  long long v3 = (void *)v0[5];
  long long v2 = (const void *)v0[6];
  swift_release();
  v0[9] = _Block_copy(v2);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[10] = v4;
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[11] = v5;
  v0[2] = v3;
  id v6 = v3;
  id v7 = v1;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[12] = v8;
  *uint64_t v8 = v0;
  v8[1] = @objc closure #1 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
  return PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)(v4, v5, v0 + 2);
}

{
  uint64_t *v0;
  void (**v1)(void);
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;

  uint64_t v1 = *(void (***)(void))(*v0 + 72);
  long long v2 = *(void **)(*v0 + 56);
  long long v3 = *(void **)(*v0 + 40);
  id v6 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v1[2](v1);
  _Block_release(v1);
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)(uint64_t a1, uint64_t *a2)
{
  v3[44] = a1;
  v3[45] = v2;
  uint64_t v5 = type metadata accessor for OSSignpostError();
  v3[46] = v5;
  v3[47] = *(void *)(v5 - 8);
  v3[48] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OSSignpostID();
  v3[49] = v6;
  v3[50] = *(void *)(v6 - 8);
  v3[51] = swift_task_alloc();
  v3[52] = swift_task_alloc();
  v3[53] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OSSignposter();
  v3[54] = v7;
  v3[55] = *(void *)(v7 - 8);
  v3[56] = swift_task_alloc();
  v3[57] = swift_task_alloc();
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = *a2;
  v3[58] = v8;
  v3[59] = v9;
  type metadata accessor for MainActor();
  v3[60] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[61] = v11;
  v3[62] = v10;
  return MEMORY[0x1F4188298](PKTiledViewAnimationController.setupStrokeInAnimation(to:in:), v11, v10);
}

uint64_t PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)()
{
  uint64_t v1 = (void *)MEMORY[0x1C8784EA0](*(void *)(v0 + 360) + OBJC_IVAR___PKTiledViewAnimationController_tiledView);
  *(void *)(v0 + 504) = v1;
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_scrollView);
    *(void *)(v0 + 512) = v3;
    if (v3)
    {
      id v57 = v3;
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v4 = *(void *)(v0 + 456);
      uint64_t v5 = *(void *)(v0 + 464);
      uint64_t v6 = *(void *)(v0 + 432);
      uint64_t v7 = *(void *)(v0 + 440);
      uint64_t v8 = __swift_project_value_buffer(v6, (uint64_t)static OSSignposter.default);
      *(void *)(v0 + 520) = v8;
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      *(void *)(v0 + 528) = v9;
      *(void *)(v0 + 536) = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v9(v5, v8, v6);
      v9(v4, v8, v6);
      OSSignposter.logHandle.getter();
      OSSignpostID.init(log:)();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      *(void *)(v0 + 544) = v10;
      *(void *)(v0 + 552) = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      double v55 = v10;
      v10(v4, v6);
      uint64_t v11 = OSSignposter.logHandle.getter();
      os_signpost_type_t v12 = static os_signpost_type_t.begin.getter();
      uint64_t v58 = v2;
      if (OS_os_log.signpostsEnabled.getter())
      {
        uint64_t v13 = *(void *)(v0 + 416);
        uint64_t v14 = *(void *)(v0 + 392);
        uint64_t v15 = *(void *)(v0 + 400);
        uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
        unint64_t v17 = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v16(v13, *(void *)(v0 + 424), v14);
        id v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v18 = 0;
        os_signpost_id_t v19 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_1C44F8000, v11, v12, v19, "Stroke In Animation Setup", "", v18, 2u);
        MEMORY[0x1C8784DC0](v18, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
      }
      else
      {
        uint64_t v20 = *(void *)(v0 + 400);

        uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
        unint64_t v17 = (v20 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      }
      *(void *)(v0 + 560) = v16;
      uint64_t v21 = *(void *)(v0 + 464);
      uint64_t v23 = *(void *)(v0 + 424);
      uint64_t v22 = *(void *)(v0 + 432);
      uint64_t v24 = *(void *)(v0 + 416);
      uint64_t v26 = *(void *)(v0 + 392);
      uint64_t v25 = *(void *)(v0 + 400);
      uint64_t v54 = *(void *)(v0 + 352);
      *(void *)(v0 + 568) = v17;
      v16(v24, v23, v26);
      type metadata accessor for OSSignpostIntervalState();
      swift_allocObject();
      *(void *)(v0 + 576) = OSSignpostIntervalState.init(id:isOpen:)();
      id v27 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      *(void *)(v0 + 584) = v27;
      *(void *)(v0 + 592) = (v25 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v27(v23, v26);
      v55(v21, v22);
      double x = *MEMORY[0x1E4F1DB20];
      double y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
      double width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
      double height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
      uint64_t v32 = *(void *)(v54 + 16);
      if (v32)
      {
        uint64_t v33 = (void **)(*(void *)(v0 + 352) + 32);
        swift_bridgeObjectRetain();
        uint64_t v2 = v58;
        do
        {
          uint64_t v34 = *v33++;
          id v35 = v34;
          objc_msgSend(v35, sel_renderBounds);
          v71.origin.double x = v36;
          v71.origin.double y = v37;
          v71.size.double width = v38;
          v71.size.double height = v39;
          v63.origin.double x = x;
          v63.origin.double y = y;
          v63.size.double width = width;
          v63.size.double height = height;
          CGRect v64 = CGRectUnion(v63, v71);
          double x = v64.origin.x;
          double y = v64.origin.y;
          double width = v64.size.width;
          double height = v64.size.height;

          --v32;
        }
        while (v32);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v2 = v58;
      }
      objc_msgSend(v2, sel_transformFromStrokeSpaceToViewInDrawing_, *(void *)(v0 + 472));
      *(double *)(v0 + 272) = x;
      *(double *)(v0 + 280) = y;
      *(double *)(v0 + 288) = width;
      *(double *)(v0 + 296) = height;
      *(_OWORD *)(v0 + 144) = v59;
      *(_OWORD *)(v0 + 160) = v60;
      *(_OWORD *)(v0 + 176) = v61;
      v65.origin.double x = x;
      v65.origin.double y = y;
      v65.size.double width = width;
      v65.size.double height = height;
      CGRect v66 = CGRectApplyAffineTransform(v65, (CGAffineTransform *)(v0 + 144));
      objc_msgSend(v57, sel_convertRect_fromCoordinateSpace_, v2, v66.origin.x, v66.origin.y, v66.size.width, v66.size.height);
      CGFloat v40 = v67.origin.x;
      CGFloat v41 = v67.origin.y;
      CGFloat v42 = v67.size.width;
      CGFloat v43 = v67.size.height;
      *(CGRect *)(v0 + 304) = v67;
      double v56 = CGRectGetWidth(v67);
      objc_msgSend(v57, sel_frame);
      if (v56 < CGRectGetWidth(v68))
      {
        v69.origin.double x = v40;
        v69.origin.double y = v41;
        v69.size.double width = v42;
        v69.size.double height = v43;
        double v44 = CGRectGetHeight(v69);
        objc_msgSend(v57, sel_frame);
        if (v44 < CGRectGetHeight(v70))
        {
          uint64_t v45 = *(void *)(v0 + 352);
          id v46 = objc_msgSend(objc_allocWithZone((Class)PKImageRenderer), sel_initWithSize_scale_, width, height, 2.0);
          *(void *)(v0 + 600) = v46;
          id v47 = objc_msgSend(v2, sel_traitCollection);
          id v48 = objc_msgSend(v47, sel_userInterfaceStyle);

          objc_msgSend(v46, sel_setInvertColors_, v48 == (id)2);
          PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)(v45, 1, 1);
          *(void *)(v0 + 608) = v49;
          specialized _arrayForceCast<A, B>(_:)(v45);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          *(void *)(v0 + 616) = isa;
          swift_bridgeObjectRelease();
          *(void *)(v0 + 80) = v0;
          *(void *)(v0 + 120) = v0 + 344;
          *(void *)(v0 + 88) = PKTiledViewAnimationController.setupStrokeInAnimation(to:in:);
          uint64_t v51 = swift_continuation_init();
          *(void *)(v0 + 192) = MEMORY[0x1E4F143A8];
          *(void *)(v0 + 200) = 0x40000000;
          *(void *)(v0 + 208) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
          *(void *)(v0 + 216) = &block_descriptor_29;
          *(void *)(v0 + 224) = v51;
          objc_msgSend(v46, sel_renderStrokes_clippedToStrokeSpaceRect_scale_completion_, isa, v0 + 192, x, y, width, height, 2.0);
          return MEMORY[0x1F41881E8](v0 + 80);
        }
      }
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v52 = *(uint64_t (**)(void))(v0 + 8);
  return v52();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 496);
  uint64_t v2 = *(void *)(*(void *)v0 + 488);
  return MEMORY[0x1F4188298](PKTiledViewAnimationController.setupStrokeInAnimation(to:in:), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  Class isa;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  uint64_t v1 = *(void **)(v0 + 616);
  uint64_t v2 = *(void *)(v0 + 344);
  *(void *)(v0 + 624) = v2;

  if (v2)
  {
    id v3 = *(void **)(v0 + 600);
    uint64_t v4 = *(double *)(v0 + 272);
    uint64_t v5 = *(double *)(v0 + 280);
    uint64_t v6 = *(double *)(v0 + 288);
    uint64_t v7 = *(double *)(v0 + 296);
    specialized _arrayForceCast<A, B>(_:)(*(void *)(v0 + 608));
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    *(void *)(v0 + 632) = isa;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 336;
    *(void *)(v0 + 24) = PKTiledViewAnimationController.setupStrokeInAnimation(to:in:);
    uint64_t v9 = swift_continuation_init();
    *(void *)(v0 + 232) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 240) = 0x40000000;
    *(void *)(v0 + 248) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
    *(void *)(v0 + 256) = &block_descriptor_30;
    *(void *)(v0 + 264) = v9;
    objc_msgSend(v3, sel_renderStrokes_clippedToStrokeSpaceRect_scale_completion_, isa, v0 + 232, v4, v5, v6, v7, 2.0);
    return MEMORY[0x1F41881E8](v0 + 16);
  }
  else
  {
    uint64_t v10 = *(void **)(v0 + 600);
    uint64_t v11 = *(void **)(v0 + 512);

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_signpost_type_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 496);
  uint64_t v2 = *(void *)(*(void *)v0 + 488);
  return MEMORY[0x1F4188298](PKTiledViewAnimationController.setupStrokeInAnimation(to:in:), v2, v1);
}

id PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)()
{
  uint64_t v1 = *(void **)(v0 + 632);
  swift_release();
  uint64_t v2 = *(void **)(v0 + 336);

  id v3 = *(void **)(v0 + 624);
  if (v2)
  {
    uint64_t v4 = *(void **)(v0 + 512);
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F353C8]), sel_initWithFrame_device_, MTLCreateSystemDefaultDevice(), *(double *)(v0 + 304), *(double *)(v0 + 312), *(double *)(v0 + 320), *(double *)(v0 + 328));
    swift_unknownObjectRelease();
    id v6 = objc_msgSend(v5, sel_layer);
    id v7 = objc_msgSend(self, sel_orangeColor);
    id v8 = objc_msgSend(v7, sel_CGColor);

    objc_msgSend(v6, sel_setBorderColor_, v8);
    objc_msgSend(v5, sel_setOpaque_, 0);
    objc_msgSend(v5, sel_setColorPixelFormat_, 80);
    objc_msgSend(v5, sel_setClearColor_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v4, sel_addSubview_, v5);
    objc_msgSend(v5, sel_setPaused_, 1);
    objc_msgSend(v5, sel_setHidden_, 1);
    id result = objc_msgSend(v3, sel_CGImage);
    if (result)
    {
      uint64_t v10 = result;
      double v56 = v2;
      id result = objc_msgSend(v2, sel_CGImage);
      if (result)
      {
        uint64_t v11 = result;
        os_signpost_type_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 528);
        uint64_t v13 = *(void *)(v0 + 520);
        uint64_t v14 = *(void *)(v0 + 448);
        uint64_t v15 = *(void *)(v0 + 432);
        uint64_t v16 = *(void *)(v0 + 360);
        id v17 = objc_allocWithZone((Class)type metadata accessor for StrokeInRenderer());
        id v18 = v5;
        os_signpost_id_t v19 = (void *)StrokeInRenderer.init(metalKitView:toImage:toDepth:)(v18, v10, v11);
        objc_msgSend(v18, sel_setDelegate_, v19);
        uint64_t v20 = *(void **)(v16 + OBJC_IVAR___PKTiledViewAnimationController_renderer);
        *(void *)(v16 + OBJC_IVAR___PKTiledViewAnimationController_renderer) = v19;
        id v54 = v19;

        uint64_t v21 = *(void **)(v16 + OBJC_IVAR___PKTiledViewAnimationController_mtkView);
        *(void *)(v16 + OBJC_IVAR___PKTiledViewAnimationController_mtkView) = v18;
        id v22 = v18;

        id v23 = objc_msgSend(v22, sel_layer);
        objc_msgSend(v23, sel_setDisableUpdateMask_, 2);

        objc_msgSend(v22, sel_draw);
        v12(v14, v13, v15);
        uint64_t v24 = OSSignposter.logHandle.getter();
        OSSignpostIntervalState.signpostID.getter();
        os_signpost_type_t v25 = static os_signpost_type_t.end.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          uint64_t v27 = *(void *)(v0 + 376);
          uint64_t v26 = *(void *)(v0 + 384);
          uint64_t v28 = *(void *)(v0 + 368);
          swift_retain();
          checkForErrorAndConsumeState(state:)();
          swift_release();
          if ((*(unsigned int (**)(uint64_t, uint64_t))(v27 + 88))(v26, v28) == *MEMORY[0x1E4FBD340])
          {
            CGFloat v29 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(void, void))(*(void *)(v0 + 376) + 8))(*(void *)(v0 + 384), *(void *)(v0 + 368));
            CGFloat v29 = "";
          }
          CGFloat v39 = *(void **)(v0 + 600);
          uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
          uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v0 + 544);
          id v46 = *(void **)(v0 + 624);
          id v47 = *(void **)(v0 + 512);
          uint64_t v50 = *(void *)(v0 + 448);
          id v48 = *(void **)(v0 + 504);
          uint64_t v49 = *(void *)(v0 + 432);
          uint64_t v41 = *(void *)(v0 + 408);
          uint64_t v40 = *(void *)(v0 + 416);
          uint64_t v42 = *(void *)(v0 + 392);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 560))(v40, v41, v42);
          CGFloat v43 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)CGFloat v43 = 0;
          os_signpost_id_t v44 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl(&dword_1C44F8000, v24, v25, v44, "Stroke In Animation Setup", v29, v43, 2u);
          MEMORY[0x1C8784DC0](v43, -1, -1);

          v52(v41, v42);
          v53(v50, v49);
          swift_release();
          v52(v40, v42);
        }
        else
        {
          uint64_t v32 = *(void **)(v0 + 624);
          uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
          double v55 = *(void (**)(uint64_t, uint64_t))(v0 + 544);
          uint64_t v33 = *(void **)(v0 + 504);
          uint64_t v34 = *(void **)(v0 + 512);
          uint64_t v35 = *(void *)(v0 + 448);
          uint64_t v36 = *(void *)(v0 + 432);
          uint64_t v37 = *(void *)(v0 + 408);
          uint64_t v38 = *(void *)(v0 + 392);

          v51(v37, v38);
          v55(v35, v36);
          swift_release();
        }
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
  CGFloat v30 = *(void **)(v0 + 600);
  uint64_t v31 = *(void **)(v0 + 512);

  swift_release();
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
  return (id)v45();
}

uint64_t @objc closure #1 in PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  type metadata accessor for MainActor();
  v4[7] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](@objc closure #1 in PKTiledViewAnimationController.setupStrokeInAnimation(to:in:), v6, v5);
}

uint64_t @objc closure #1 in PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)()
{
  uint64_t v1 = (void *)v0[6];
  id v3 = (void *)v0[4];
  uint64_t v2 = (const void *)v0[5];
  swift_release();
  v0[8] = (uint64_t)_Block_copy(v2);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[9] = v4;
  v0[2] = (uint64_t)v3;
  id v5 = v3;
  id v6 = v1;
  id v7 = (void *)swift_task_alloc();
  v0[10] = (uint64_t)v7;
  *id v7 = v0;
  v7[1] = @objc closure #1 in PKTiledViewAnimationController.setupStrokeInAnimation(to:in:);
  return PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)(v4, v0 + 2);
}

{
  uint64_t *v0;
  void (**v1)(void);
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;

  uint64_t v1 = *(void (***)(void))(*v0 + 64);
  uint64_t v2 = *(void **)(*v0 + 48);
  id v3 = *(void **)(*v0 + 32);
  id v6 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  v1[2](v1);
  _Block_release(v1);
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

Swift::Void __swiftcall PKTiledViewAnimationController.startRefineAnimation(duration:)(Swift::Double duration)
{
  uint64_t v2 = *(char **)(v1 + OBJC_IVAR___PKTiledViewAnimationController_renderer);
  if (v2)
  {
    *(Swift::Double *)&v2[OBJC_IVAR____TtC9PencilKit17TiledViewRenderer_duration] = duration;
    id v3 = v2;
    static Date.timeIntervalSinceReferenceDate.getter();
    *(void *)&v3[OBJC_IVAR____TtC9PencilKit17TiledViewRenderer_startTime] = v4;
  }
  uint64_t v5 = OBJC_IVAR___PKTiledViewAnimationController_mtkView;
  id v6 = *(void **)(v1 + OBJC_IVAR___PKTiledViewAnimationController_mtkView);
  if (v6)
  {
    objc_msgSend(v6, sel_setPaused_, 0, duration);
    id v7 = *(void **)(v1 + v5);
    if (v7)
    {
      objc_msgSend(v7, sel_setHidden_, 0);
    }
  }
}

uint64_t PKTiledViewAnimationController.refine(from:to:in:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v4[4] = a2;
  v4[5] = v3;
  v4[3] = a1;
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v4[6] = v6;
  v4[7] = *(void *)(v6 - 8);
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = *a3;
  v4[8] = v7;
  v4[9] = v8;
  void v4[10] = type metadata accessor for MainActor();
  v4[11] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[12] = v10;
  v4[13] = v9;
  return MEMORY[0x1F4188298](PKTiledViewAnimationController.refine(from:to:in:), v10, v9);
}

uint64_t PKTiledViewAnimationController.refine(from:to:in:)()
{
  uint64_t v1 = MEMORY[0x1C8784EA0](v0[5] + OBJC_IVAR___PKTiledViewAnimationController_tiledView);
  v0[14] = v1;
  if (v1)
  {
    v0[2] = v0[9];
    uint64_t v2 = (void *)swift_task_alloc();
    v0[15] = v2;
    void *v2 = v0;
    v2[1] = PKTiledViewAnimationController.refine(from:to:in:);
    uint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    return PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)(v4, v3, v0 + 2);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6(0);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 96);
  return MEMORY[0x1F4188298](PKTiledViewAnimationController.refine(from:to:in:), v3, v2);
}

{
  void *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  id *v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = v0[3];
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v15;
    uint64_t v4 = (id *)(v1 + 32);
    do
    {
      uint64_t v5 = *v4;
      uint64_t v6 = objc_msgSend(v5, sel_copyForMutation);
      objc_msgSend(v6, sel__setHidden_, 1);

      uint64_t v8 = *(void *)(v15 + 16);
      uint64_t v7 = *(void *)(v15 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      }
      *(void *)(v15 + 16) = v8 + 1;
      *(void *)(v15 + 8 * v8 + 32) = v6;
      ++v4;
      --v2;
    }
    while (v2);
  }
  v0[16] = v3;
  uint64_t v9 = v0[14];
  uint64_t v10 = v0[9];
  uint64_t v11 = v0[5];
  v0[17] = static MainActor.shared.getter();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[18] = v12;
  v12[2] = v9;
  void v12[3] = v3;
  v12[4] = v10;
  v12[5] = v11;
  v12[6] = 0x3FE8000000000000;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[19] = v13;
  *uint64_t v13 = v0;
  v13[1] = PKTiledViewAnimationController.refine(from:to:in:);
  return MEMORY[0x1F41880D8]();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 96);
  return MEMORY[0x1F4188298](PKTiledViewAnimationController.refine(from:to:in:), v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v7;

  uint64_t v1 = static Duration.milliseconds(_:)();
  uint64_t v3 = v2;
  ContinuousClock.init()();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v4;
  void *v4 = v0;
  v4[1] = PKTiledViewAnimationController.refine(from:to:in:);
  return v6(v1, v3, 0, 0, 1);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  uint64_t v3 = (void *)*v1;
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  uint64_t v4 = v2[8];
  uint64_t v5 = v2[7];
  uint64_t v6 = v2[6];
  if (v0)
  {

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = v3[12];
    uint64_t v8 = v3[13];
    uint64_t v9 = PKTiledViewAnimationController.refine(from:to:in:);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = v3[12];
    uint64_t v8 = v3[13];
    uint64_t v9 = PKTiledViewAnimationController.refine(from:to:in:);
  }
  return MEMORY[0x1F4188298](v9, v7, v8);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = (void *)v0[14];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[5];
  v0[21] = objc_msgSend(v1, sel_didChangeDrawing_undoable_, v2, 1);
  v0[22] = static MainActor.shared.getter();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[23] = v4;
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[24] = v5;
  *uint64_t v5 = v0;
  v5[1] = PKTiledViewAnimationController.refine(from:to:in:);
  return MEMORY[0x1F41880D8]();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 96);
  return MEMORY[0x1F4188298](PKTiledViewAnimationController.refine(from:to:in:), v3, v2);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  uint64_t v1 = v0[5];
  swift_release();
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___PKTiledViewAnimationController_mtkView);
  if (v2) {
    objc_msgSend(v2, sel_removeFromSuperview);
  }
  uint64_t v3 = (void *)v0[14];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void **)(v4 + OBJC_IVAR___PKTiledViewAnimationController_renderer);
  *(void *)(v4 + OBJC_IVAR___PKTiledViewAnimationController_renderer) = 0;

  uint64_t v6 = v0[21];
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  return v7(v6);
}

void closure #2 in PKTiledViewAnimationController.refine(from:to:in:)(uint64_t a1, void *a2, double a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](v11, v14);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a6;
  *(double *)(v17 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v16, (char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  aBlock[4] = partial apply for closure #1 in closure #2 in PKTiledViewAnimationController.refine(from:to:in:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_28;
  id v18 = _Block_copy(aBlock);
  id v19 = a5;
  id v20 = a6;
  swift_release();
  objc_msgSend(a2, sel__setAdditionalStrokes_inDrawing_invalidateTiles_forceOffscreen_completion_, isa, v19, 0, 1, v18);
  _Block_release(v18);
}

uint64_t closure #1 in closure #2 in PKTiledViewAnimationController.refine(from:to:in:)(Swift::Double a1)
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

void closure #3 in PKTiledViewAnimationController.refine(from:to:in:)(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8, v11);
  objc_msgSend(a2, sel_didChangeDrawing_, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = partial apply for closure #1 in closure #3 in PKTiledViewAnimationController.refine(from:to:in:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = a3;
  id v16 = a4;
  swift_release();
  objc_msgSend(a2, sel__setAdditionalStrokes_inDrawing_completion_, 0, v15, v14);
  _Block_release(v14);
}

uint64_t closure #1 in closure #3 in PKTiledViewAnimationController.refine(from:to:in:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR___PKTiledViewAnimationController_mtkView);
  if (v2) {
    objc_msgSend(v2, sel_removeFromSuperview);
  }
  uint64_t v3 = *(void **)(a1 + OBJC_IVAR___PKTiledViewAnimationController_renderer);
  *(void *)(a1 + OBJC_IVAR___PKTiledViewAnimationController_renderer) = 0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t @objc closure #1 in PKTiledViewAnimationController.refine(from:to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  type metadata accessor for MainActor();
  v5[8] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](@objc closure #1 in PKTiledViewAnimationController.refine(from:to:in:), v7, v6);
}

uint64_t @objc closure #1 in PKTiledViewAnimationController.refine(from:to:in:)()
{
  uint64_t v1 = (void *)v0[7];
  uint64_t v3 = (void *)v0[5];
  uint64_t v2 = (const void *)v0[6];
  swift_release();
  v0[9] = (uint64_t)_Block_copy(v2);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[10] = v4;
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[11] = v5;
  v0[2] = (uint64_t)v3;
  id v6 = v3;
  id v7 = v1;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[12] = (uint64_t)v8;
  *uint64_t v8 = v0;
  v8[1] = @objc closure #1 in PKTiledViewAnimationController.refine(from:to:in:);
  return PKTiledViewAnimationController.refine(from:to:in:)(v4, v5, v0 + 2);
}

uint64_t @objc closure #1 in PKTiledViewAnimationController.refine(from:to:in:)(void *a1)
{
  uint64_t v3 = *(void (***)(void, void))(*v1 + 72);
  uint64_t v4 = *(void **)(*v1 + 56);
  uint64_t v5 = *(void **)(*v1 + 40);
  uint64_t v8 = *v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  ((void (**)(void, void *))v3)[2](v3, a1);
  _Block_release(v3);

  id v6 = *(uint64_t (**)(void))(v8 + 8);
  return v6();
}

double PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)(uint64_t a1, char a2, char a3)
{
  int64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return 0.0;
  }
  uint64_t v5 = v3;
  uint64_t v9 = (id *)(a1 + 32);
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  double v11 = 0.0;
  do
  {
    uint64_t v12 = *(void *)(a1 + 8 * v10++ + 32);
    uint64_t v25 = v12;
    PKStroke.approximateLen.getter();
    double v11 = v11 + v13;
  }
  while (v4 != v10);
  swift_bridgeObjectRelease();
  uint64_t v25 = 0;
  uint64_t v24 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  uint64_t v14 = v24;
  int v15 = a3 & 1;
  int v16 = a2 & 1;
  do
  {
    id v22 = *v9;
    id v17 = v22;
    closure #2 in PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)(&v22, v15, v5, (uint64_t)&v25, v16, &v23);

    uint64_t v18 = v23;
    uint64_t v24 = v14;
    unint64_t v20 = *(void *)(v14 + 16);
    unint64_t v19 = *(void *)(v14 + 24);
    if (v20 >= v19 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1);
      uint64_t v14 = v24;
    }
    *(void *)(v14 + 16) = v20 + 1;
    *(void *)(v14 + 8 * v20 + 32) = v18;
    ++v9;
    --v4;
  }
  while (v4);
  return v11;
}

uint64_t PKStroke.approximateLen.getter()
{
  id v1 = *v0;
  id v2 = objc_msgSend(v1, sel_path);
  if (!v2) {
    id v2 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  }
  id v3 = objc_msgSend(v1, sel_path);
  if (!v3) {
    id v3 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  }

  uint64_t result = (uint64_t)objc_msgSend(v3, sel_count);
  if (result < 1)
  {
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v5 = result;
  uint64_t result = (uint64_t)objc_msgSend(v3, sel_count);
  if (result < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (result >= v5)
  {
    uint64_t v6 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy9PencilKit12PKStrokePathVs5SliceVyAJGG_12CoreGraphics7CGFloatVs5NeverOTB503_s9f4Kit8h19V14approximateLen12k9Graphics7M26VvgAgA0C5PointV_AIt_tXEfU_Tf1cn_n(v2, 1, v5, (char *)v3);

    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      if (v7 == 1)
      {
        uint64_t v8 = 0;
        double v9 = 0.0;
      }
      else
      {
        uint64_t v8 = v7 & 0x7FFFFFFFFFFFFFFELL;
        uint64_t v10 = (double *)(v6 + 40);
        double v9 = 0.0;
        uint64_t v11 = v7 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          double v9 = v9 + *(v10 - 1) + *v10;
          v10 += 2;
          v11 -= 2;
        }
        while (v11);
        if (v7 == v8) {
          return swift_bridgeObjectRelease();
        }
      }
      uint64_t v12 = v7 - v8;
      double v13 = (double *)(v6 + 8 * v8 + 32);
      do
      {
        double v14 = *v13++;
        double v9 = v9 + v14;
        --v12;
      }
      while (v12);
    }
    return swift_bridgeObjectRelease();
  }
LABEL_20:
  __break(1u);
  return result;
}

void closure #2 in PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)(id *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  int v88 = a5;
  uint64_t v87 = a4;
  int v89 = a2;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  double v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = *a1;
  id v15 = objc_msgSend(v14, sel_path);
  if (!v15) {
    id v15 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  }

  id v16 = objc_msgSend(v15, sel_count);
  if (!v16)
  {
    *a6 = v14;
    id v29 = v14;
    return;
  }
  CGFloat v81 = v13;
  uint64_t v82 = v10;
  uint64_t v83 = v9;
  uint64_t v84 = a6;
  id v17 = v14;
  id v18 = [v17 ink];
  id v19 = v17;
  if (!v18)
  {
    id v19 = objc_msgSend(self, sel_blackColor);
    unint64_t v20 = (void *)MEMORY[0x1C87824B0](0xD000000000000011, 0x80000001C481A030);
    id v18 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v20, v19);
  }
  id v80 = v18;
  id v21 = objc_msgSend(v18, sel_behavior);
  if (v89) {
    uint64_t v22 = 2;
  }
  else {
    uint64_t v22 = 1;
  }
  id v23 = objc_msgSend(objc_allocWithZone((Class)PKInkRenderingDescriptor), sel_initWithType_blendMode_alternateMode_particleDescriptor_secondaryParticleDescriptor_, 0, 0, v22, 0, 0);
  uint64_t v24 = OBJC_IVAR___PKTiledViewAnimationController_newBehavior;
  uint64_t v25 = *(void **)(a3 + OBJC_IVAR___PKTiledViewAnimationController_newBehavior);
  uint64_t v26 = &selRef_copyWithWeight_;
  id v79 = v23;
  if (v25)
  {
    uint64_t v27 = v25;
    id v28 = v25;
  }
  else
  {
    CGFloat v30 = v23;
    *(void *)&long long v86 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKInkBehavior);
    long long v95 = 0x3FF0000000000000uLL;
    uint64_t v96 = 0;
    uint64_t v97 = 0x3FF0000000000000;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    *(void *)&long long v85 = v30;
    LODWORD(v78) = objc_msgSend(v21, sel_useUnclampedWeight);
    id v77 = objc_msgSend(v21, sel_smoothingDescriptor);
    id v76 = objc_msgSend(v21, sel_featheringDescriptor);
    id v75 = objc_msgSend(v21, sel_pencilFeatheringDescriptor);
    id v74 = objc_msgSend(v21, sel_version);
    id v31 = objc_msgSend(v21, sel_variant);
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;

    objc_msgSend(v21, sel_defaultWidth);
    double v36 = v35;
    id v37 = objc_msgSend(v21, sel_inkFunctions);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKInkFunction);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v26 = &selRef_copyWithWeight_;
    id v28 = PKInkBehavior.__allocating_init(renderingDescriptor:blendAlpha:targetMultiple:baseAlpha:inkTransform:useUnclampedWeight:smoothingDescriptor:featheringDescriptor:pencilFeatheringDescriptor:animationDescriptor:identifier:version:variant:uiWidths:defaultWidth:showBrushIndicator:supportsCombiningStrokes:rulerOffsetScale:rulerOffsetConstant:weightFunction:inkFunctions:)((void *)v85, &v95, (char)v78, v77, v76, v75, 0, 0x6874706564, 1.0, 1.0, 1.0, v36, 1.0, 0.0, 0xE500000000000000, (uint64_t)v74, v32, v34, MEMORY[0x1E4FBC860],
            0,
            0);
    uint64_t v27 = 0;
    uint64_t v25 = *(void **)(a3 + v24);
  }
  *(void *)(a3 + v24) = v28;
  id v38 = v28;
  id v39 = v27;

  uint64_t v40 = self;
  id v41 = v38;
  id v42 = objc_msgSend(v40, sel_blackColor);
  id v43 = objc_allocWithZone((Class)PKInk);
  os_signpost_id_t v44 = (void *)MEMORY[0x1C87824B0](0x746C7561666564, 0xE700000000000000);
  id v45 = objc_msgSend(v43, sel_initWithBehavior_color_version_variant_weight_, v41, v42, 3, v44, 0.0);

  id v78 = v41;
  id v46 = objc_msgSend(v17, sel_copyForMutation);
  id v47 = v45;
  id v48 = objc_msgSend(v46, sel_path);
  if (!v48) {
    id v48 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  }
  objc_msgSend(v46, sel_transform);
  long long v86 = v91;
  long long v85 = v92;
  uint64_t v49 = v93;
  uint64_t v50 = v94;
  id v51 = objc_msgSend(v46, sel_mask);
  id v52 = objc_msgSend(v46, sel__randomSeed);
  id v53 = objc_allocWithZone((Class)PKStroke);
  long long v91 = v86;
  long long v92 = v85;
  uint64_t v93 = v49;
  uint64_t v94 = v50;
  id v54 = objc_msgSend(v53, sel_initWithInk_strokePath_transform_mask_randomSeed_, v47, v48, &v91, v51, v52);

  *(void *)&long long v91 = v54;
  id v55 = objc_msgSend(v54, sel_path);
  if (!v55) {
    id v55 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  }
  id v56 = objc_msgSend(v54, sel_path);
  if (!v56) {
    id v56 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  }
  uint64_t v57 = (uint64_t)[v56 v26[13]];
  if (v57 < 1)
  {
    __break(1u);
    goto LABEL_31;
  }
  unint64_t v58 = v57;
  unint64_t v59 = (unint64_t)[v56 v26[13]];
  if ((v59 & 0x8000000000000000) != 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v59 < v58)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:

    __break(1u);
    goto LABEL_36;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKStrokePoint>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C4826800;
  id v54 = objc_msgSend(v54, (SEL)&selRef_resetFilter);
  if (!v54) {
    id v54 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  }
  if (![v54 v26[13]]) {
    goto LABEL_35;
  }
  long long v61 = (char *)[v54 v26[13]];
  uint64_t v62 = (uint64_t)(v61 - 1);
  if (__OFSUB__(v61, 1)) {
    goto LABEL_33;
  }
  id v63 = [v54 v26[13]];
  if (v62 < 0 || v62 >= (uint64_t)v63) {
    goto LABEL_34;
  }
  id v64 = objc_msgSend(v54, sel_objectAtIndexedSubscript_, v62);
  if (v64)
  {
    id v65 = v64;

    *(void *)(inited + 32) = v65;
    CGRect v66 = specialized static RangeReplaceableCollection.+ infix<A>(_:_:)(1, v58, v56, inited);
    swift_setDeallocating();
    swift_arrayDestroy();

    MEMORY[0x1F4188790](v67, v68);
    _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy9PencilKit12PKStrokePathVSayAH0H5PointVGG_ALs5NeverOTB503_s9f5Kit13hj20VA2CIgnnr_AC_ACtACs5K11OIegnrzr_TRA3LIgnnr_Tf1cn_nTf4ng_n(v55, (uint64_t)v66, (void (*)(uint64_t *__return_ptr, void **, id *))partial apply for closure #1 in closure #2 in PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:));
    swift_bridgeObjectRelease();

    CGRect v69 = v81;
    static Date.now.getter();
    id v70 = objc_allocWithZone((Class)PKStrokePath);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    Class v72 = Date._bridgeToObjectiveC()().super.isa;
    id v73 = objc_msgSend(v70, sel_initWithControlPoints_creationDate_, isa, v72);

    (*(void (**)(char *, uint64_t))(v82 + 8))(v69, v83);
    swift_bridgeObjectRelease();
    double v90 = v73;
    PKStroke.path.setter(&v90);

    *uint64_t v84 = v91;
    return;
  }
LABEL_36:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

char *specialized static RangeReplaceableCollection.+ infix<A>(_:_:)(uint64_t a1, uint64_t a2, id a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t result = (char *)objc_msgSend(a3, sel_count);
  if (a1 < 0 || (uint64_t)result < a1)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = (char *)objc_msgSend(a3, sel_count);
  if (a2 < 0 || (uint64_t)result < a2) {
    goto LABEL_8;
  }
  if (!__OFADD__(v7, a2 - a1))
  {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v7 + a2 - a1) & ~((v7 + a2 - a1) >> 63), 0, MEMORY[0x1E4FBC860]);
    specialized Array.append<A>(contentsOf:)(a1, a2, a3);
    uint64_t v9 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v9);
    return v10;
  }
LABEL_9:
  __break(1u);
  return result;
}

id closure #1 in closure #2 in PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)@<X0>(void **a1@<X0>, id *a2@<X1>, double *a3@<X2>, char a4@<W3>, char a5@<W4>, void *a6@<X5>, void *a7@<X8>, double a8@<D0>)
{
  id v14 = *a1;
  objc_msgSend(*a2, sel_location);
  double v16 = v15;
  double v18 = v17;
  objc_msgSend(v14, sel_location);
  *a3 = *a3 + sqrt((v16 - v19) * (v16 - v19) + (v18 - v20) * (v18 - v20));
  objc_msgSend(v14, sel_size);
  if (a4)
  {
    double v23 = *a3;
    if (a5) {
      double v24 = pow(1.0 - v23 / a8, 4.0) + (1.0 - v23 / a8) * 0.1 * (1.0 - (1.0 - v23 / a8));
    }
    else {
      double v24 = v23 * 1.2 / a8;
    }
    double v30 = fmin(v24, 1.0);
    if (v30 < 0.0) {
      double v30 = 0.0;
    }
    double v54 = v30;
    objc_msgSend(v14, sel__edgeWidth);
    double v32 = v31;
    objc_msgSend(v14, sel_size);
    double v34 = v32 + v33;
    objc_msgSend(v14, sel_size);
    double v36 = v32 + v35;
  }
  else
  {
    double v25 = v21;
    double v26 = v22;
    id v27 = objc_msgSend(a6, sel_renderingDescriptor);
    id v28 = objc_msgSend(v27, sel_type);

    if (v28) {
      objc_msgSend(v14, sel__edgeWidth);
    }
    else {
      double v29 = -2.0;
    }
    double v37 = v25 + v29 + v25 + v29;
    double v38 = v26 + v29 + v26 + v29;
    double v34 = v37 + 2.0;
    double v36 = v38 + 2.0;
    double v54 = 1.0;
  }
  id v39 = v14;
  objc_msgSend(v39, sel_location);
  double v41 = v40;
  double v43 = v42;
  objc_msgSend(v39, sel_timeOffset);
  double v45 = v44;

  id v46 = v39;
  objc_msgSend(v46, sel_force);
  double v48 = v47;
  objc_msgSend(v46, sel_azimuth);
  double v50 = v49;
  objc_msgSend(v46, sel_altitude);
  uint64_t v52 = v51;

  id result = objc_msgSend(objc_allocWithZone((Class)PKStrokePoint), sel_initWithLocation_timeOffset_size_opacity_force_azimuth_altitude_, v41, v43, v45, v34, v36, v54, v48, v50, v52);
  *a7 = result;
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy9PencilKit12PKStrokePathVs5SliceVyAJGG_12CoreGraphics7CGFloatVs5NeverOTB503_s9f4Kit8h19V14approximateLen12k9Graphics7M26VvgAgA0C5PointV_AIt_tXEfU_Tf1cn_n(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  int64_t v4 = a4;
  uint64_t v6 = a1;
  uint64_t v7 = specialized Zip2Sequence.underestimatedCount.getter(a1, a2, a3, a4);
  uint64_t v58 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if (v7 < 0)
  {
LABEL_45:
    __break(1u);
LABEL_46:

    __break(1u);
    goto LABEL_47;
  }
  id v52 = v6;
  id v53 = v4;
  uint64_t v57 = (char *)v7;
  if (v7)
  {
    if (a3 <= a2) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = a3;
    }
    id v56 = (char *)(v8 - a2);
    id v9 = v6;
    uint64_t v10 = v4;
    uint64_t v11 = 0;
    uint64_t v12 = &selRef_layoutInlineViews;
    int64_t v4 = v57;
    id v55 = v9;
    while (v4 != v11)
    {
      if (v11 == objc_msgSend(v9, sel_count)) {
        goto LABEL_38;
      }
      double v13 = (char *)objc_msgSend(v9, v12[319], v11);
      if (!v13) {
        goto LABEL_47;
      }
      int64_t v4 = v13;
      if ((uint64_t)v11 >= (uint64_t)objc_msgSend(v9, sel_count)) {
        goto LABEL_39;
      }
      if (!&v11[a2 - a3]) {
        goto LABEL_46;
      }
      if (v56 == v11) {
        goto LABEL_40;
      }
      id v14 = v12;
      id v15 = objc_msgSend(v10, v12[319], &v11[a2]);
      if (!v15) {
        goto LABEL_47;
      }
      double v16 = v15;
      double v17 = (char *)objc_msgSend(v10, sel_count);
      if (a2 < 0 || (uint64_t)&v11[a2] >= (uint64_t)v17) {
        goto LABEL_41;
      }
      double v18 = v4;
      objc_msgSend(v18, sel_location);
      double v20 = v19;
      double v22 = v21;

      id v23 = v16;
      objc_msgSend(v23, sel_location);
      double v25 = v24;
      double v27 = v26;

      unint64_t v29 = *(void *)(v58 + 16);
      unint64_t v28 = *(void *)(v58 + 24);
      if (v29 >= v28 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1);
      }
      ++v11;
      *(void *)(v58 + 16) = v29 + 1;
      *(double *)(v58 + 8 * v29 + 32) = sqrt((v20 - v25) * (v20 - v25) + (v22 - v27) * (v22 - v27));
      int64_t v4 = v57;
      uint64_t v12 = v14;
      id v9 = v55;
      if (v57 == v11)
      {
        uint64_t v30 = (uint64_t)&v11[a2];
        uint64_t v6 = v52;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  id v31 = v6;
  double v32 = v4;
  uint64_t v30 = a2;
  int64_t v4 = 0;
LABEL_21:
  if (v4 == objc_msgSend(v6, sel_count))
  {
LABEL_36:

    return v58;
  }
  uint64_t v33 = v30;
  while (1)
  {
    id v34 = objc_msgSend(v6, sel_objectAtIndexedSubscript_, v4);
    if (!v34) {
      break;
    }
    double v35 = v34;
    if ((uint64_t)v4 >= (uint64_t)objc_msgSend(v6, sel_count)) {
      goto LABEL_42;
    }
    if (a3 == v33)
    {

      uint64_t v6 = v52;
      goto LABEL_36;
    }
    if (v30 < a2 || v33 >= a3) {
      goto LABEL_43;
    }
    double v36 = v4;
    double v37 = (char *)objc_msgSend(v53, sel_objectAtIndexedSubscript_, v33);
    if (!v37) {
      break;
    }
    int64_t v4 = v37;
    id v38 = objc_msgSend(v53, sel_count);
    if (v30 < 0 || v33 >= (uint64_t)v38) {
      goto LABEL_44;
    }
    id v39 = v35;
    objc_msgSend(v39, sel_location);
    double v41 = v40;
    double v43 = v42;

    double v44 = v4;
    objc_msgSend(v44, sel_location);
    double v46 = v45;
    double v48 = v47;

    unint64_t v50 = *(void *)(v58 + 16);
    unint64_t v49 = *(void *)(v58 + 24);
    if (v50 >= v49 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1);
    }
    *(void *)(v58 + 16) = v50 + 1;
    int64_t v4 = v36 + 1;
    *(double *)(v58 + 8 * v50 + 32) = sqrt((v41 - v46) * (v41 - v46) + (v43 - v48) * (v43 - v48));
    uint64_t v6 = v52;
    ++v33;
    if (v36 + 1 == objc_msgSend(v52, sel_count)) {
      goto LABEL_36;
    }
  }
LABEL_47:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id PKTiledViewAnimationController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PKTiledViewAnimationController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR9PencilKit13PKRefineMorphV8GridMeshV_AIt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  int64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR9PencilKit13PKRefineMorphV8GridMeshV_AIt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR9PencilKit13PKRefineMorphV8GridMeshV_AIt_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *unint64_t v5 = v4;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v6(a1);
}

id partial apply for closure #1 in closure #2 in PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)@<X0>(void **a1@<X0>, id *a2@<X1>, void *a3@<X8>)
{
  return closure #1 in closure #2 in PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)(a1, a2, *(double **)(v3 + 16), *(unsigned char *)(v3 + 24), *(unsigned char *)(v3 + 25), *(void **)(v3 + 40), a3, *(double *)(v3 + 32));
}

uint64_t specialized Zip2Sequence.underestimatedCount.getter(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = (uint64_t)objc_msgSend(a1, sel_count);
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_count);
  if (result < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_count);
  if (v8 < 0 || result < v8) {
    goto LABEL_12;
  }
  uint64_t result = (uint64_t)objc_msgSend(a4, sel_count);
  if (a2 < 0 || result < a2) {
    goto LABEL_13;
  }
  uint64_t result = (uint64_t)objc_msgSend(a4, sel_count);
  if (a3 < 0 || result < a3) {
    goto LABEL_14;
  }
  if (a3 - a2 >= v8) {
    return v8;
  }
  else {
    return a3 - a2;
  }
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy9PencilKit12PKStrokePathVSayAH0H5PointVGG_ALs5NeverOTB503_s9f5Kit13hj20VA2CIgnnr_AC_ACtACs5K11OIegnrzr_TRA3LIgnnr_Tf1cn_nTf4ng_n(void *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, void **, id *))
{
  unint64_t v5 = &selRef_copyWithWeight_;
  int64_t v6 = (int64_t)objc_msgSend(a1, sel_count);
  if (((unint64_t)objc_msgSend(a1, sel_count) & 0x8000000000000000) != 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  id v7 = objc_msgSend(a1, sel_count);
  if (v6 < 0 || (uint64_t)v7 < v6)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v35 = *(void *)(a2 + 16);
  if (v35 >= v6) {
    int64_t v8 = v6;
  }
  else {
    int64_t v8 = *(void *)(a2 + 16);
  }
  uint64_t v39 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
  uint64_t v9 = v39;
  uint64_t v31 = a2;
  id v32 = a1;
  if (v8)
  {
    uint64_t v33 = a2 + 32;
    id v10 = a1;
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    while (v8 != v11)
    {
      if ((id)v11 == [v10 v5[13]]) {
        goto LABEL_40;
      }
      id v12 = objc_msgSend(v10, sel_objectAtIndexedSubscript_, v11);
      if (!v12) {
        goto LABEL_41;
      }
      id v13 = v12;
      if (v11 >= (uint64_t)[v10 v5[13]]) {
        goto LABEL_34;
      }
      if (v35 == v11) {
        goto LABEL_35;
      }
      id v14 = *(void **)(v33 + 8 * v11);
      double v36 = v13;
      id v37 = v14;
      id v15 = v14;
      a3(&v38, &v36, &v37);
      double v16 = v36;

      uint64_t v17 = v38;
      uint64_t v39 = v9;
      unint64_t v19 = *(void *)(v9 + 16);
      unint64_t v18 = *(void *)(v9 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1);
        uint64_t v9 = v39;
      }
      ++v11;
      *(void *)(v9 + 16) = v19 + 1;
      *(void *)(v9 + 8 * v19 + 32) = v17;
      unint64_t v5 = &selRef_copyWithWeight_;
      if (v8 == v11) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  id v20 = a1;
  swift_bridgeObjectRetain();
LABEL_19:
  double v21 = v32;
  if ((id)v8 == [v32 v5[13]])
  {
LABEL_32:
    swift_bridgeObjectRelease();

    return v9;
  }
  if (v8 <= (unint64_t)v35) {
    int64_t v22 = v35;
  }
  else {
    int64_t v22 = v8;
  }
  while (1)
  {
    id v23 = objc_msgSend(v21, sel_objectAtIndexedSubscript_, v8);
    if (!v23) {
      break;
    }
    double v24 = v23;
    if (v8 >= (uint64_t)[v21 v5[13]]) {
      goto LABEL_36;
    }
    if (v35 == v8)
    {

      double v21 = v32;
      goto LABEL_32;
    }
    if (v22 == v8) {
      goto LABEL_37;
    }
    double v25 = *(void **)(v31 + 32 + 8 * v8);
    double v36 = v24;
    id v37 = v25;
    id v26 = v25;
    a3(&v38, &v36, &v37);

    uint64_t v27 = v38;
    uint64_t v39 = v9;
    unint64_t v29 = *(void *)(v9 + 16);
    unint64_t v28 = *(void *)(v9 + 24);
    if (v29 >= v28 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1);
      uint64_t v9 = v39;
    }
    ++v8;
    *(void *)(v9 + 16) = v29 + 1;
    *(void *)(v9 + 8 * v29 + 32) = v27;
    unint64_t v5 = &selRef_copyWithWeight_;
    double v21 = v32;
    if ((id)v8 == objc_msgSend(v32, sel_count)) {
      goto LABEL_32;
    }
  }
LABEL_41:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void partial apply for closure #2 in PKTiledViewAnimationController.refine(from:to:in:)(uint64_t a1)
{
  closure #2 in PKTiledViewAnimationController.refine(from:to:in:)(a1, *(void **)(v1 + 16), *(double *)(v1 + 48), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40));
}

void partial apply for closure #3 in PKTiledViewAnimationController.refine(from:to:in:)(uint64_t a1)
{
  closure #3 in PKTiledViewAnimationController.refine(from:to:in:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1C4523E44()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #3 in PKTiledViewAnimationController.refine(from:to:in:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v1 = *(void *)(v0 + 16);

  return closure #1 in closure #3 in PKTiledViewAnimationController.refine(from:to:in:)(v1);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_1C4523F94()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #2 in PKTiledViewAnimationController.refine(from:to:in:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  Swift::Double v1 = *(double *)(v0 + 24);

  return closure #1 in closure #2 in PKTiledViewAnimationController.refine(from:to:in:)(v1);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t outlined init with take of UIImage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIImage?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1C45241D4()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 160, 7);
}

uint64_t partial apply for closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)(uint64_t a1)
{
  long long v10 = *(_OWORD *)(v1 + 64);
  long long v11 = *(_OWORD *)(v1 + 48);
  long long v9 = *(_OWORD *)(v1 + 80);
  uint64_t v4 = *(void *)(v1 + 96);
  uint64_t v5 = *(void *)(v1 + 104);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v1 + 32);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = partial apply for closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
  *(void *)(v6 + 104) = v1 + 112;
  *(void *)(v6 + 88) = v4;
  *(void *)(v6 + 96) = v5;
  *(_OWORD *)(v6 + 72) = v9;
  *(_OWORD *)(v6 + 56) = v10;
  *(_OWORD *)(v6 + 40) = v11;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = a1;
  return MEMORY[0x1F4188298](closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:), 0, 0);
}

uint64_t partial apply for closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C45244D8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR9PencilKit13PKRefineMorphV8GridMeshV_AIt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR9PencilKit13PKRefineMorphV8GridMeshV_AIt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR9PencilKit13PKRefineMorphV8GridMeshV_AIt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for @objc closure #1 in PKTiledViewAnimationController.refine(from:to:in:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *long long v7 = v1;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in PKTiledViewAnimationController.refine(from:to:in:)
                                                                           + async function pointer to @objc closure #1 in PKTiledViewAnimationController.refine(from:to:in:));
  return v8(v2, v3, v4, v5, v6);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu);
  return v6(v2, v3, v4);
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *long long v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu + _sIeAgH_ytIeAgHr_TRTu);
  return v8(a1, v4, v5, v6);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu);
  return v6(a1, v4);
}

uint64_t sub_1C45248E0()
{
  _Block_release(*(const void **)(v0 + 32));

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for @objc closure #1 in PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  long long v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)
                                                                  + async function pointer to @objc closure #1 in PKTiledViewAnimationController.setupStrokeInAnimation(to:in:));
  return v7(v2, v3, v5, v4);
}

uint64_t objectdestroy_46Tm()
{
  _Block_release(*(const void **)(v0 + 40));

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for @objc closure #1 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *long long v7 = v1;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)
                                                                           + async function pointer to @objc closure #1 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:));
  return v8(v2, v3, v4, v5, v6);
}

uint64_t objectdestroy_50Tm()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t StrokeInRenderer.init(metalKitView:toImage:toDepth:)(void *a1, void *a2, void *a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  long long v7 = v3;
  id v8 = objc_msgSend(a1, sel_device);
  if (!v8) {
    goto LABEL_18;
  }
  uint64_t v9 = (char *)OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_device;
  *(void *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_device) = v8;
  objc_msgSend(a1, sel_bounds);
  specialized PKRefineMorph.GridMesh.init(bounds:step:)(0x7FFFFFFFFFFFFFFFLL, (uint64_t)&v58, v10, v11, v12, v13);
  uint64_t v14 = v58;
  uint64_t v15 = *(void *)(v58 + 16);
  uint64_t v16 = 24 * v15;
  if ((unsigned __int128)(v15 * (__int128)24) >> 64 != (24 * v15) >> 63)
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id v17 = objc_msgSend(a1, sel_device);
  if (!v17)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v18 = &selRef_layoutInlineViews;
  id v19 = objc_msgSend(v17, sel_newBufferWithBytes_length_options_, v14 + 32, v16, 0);
  swift_unknownObjectRelease();
  if (!v19)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(void *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_vertices) = v19;
  uint64_t v20 = v59;
  uint64_t v21 = *(void *)(v59 + 16);
  if (v21 + 0x4000000000000000 < 0) {
    goto LABEL_17;
  }
  id v22 = objc_msgSend(a1, sel_device);
  if (!v22)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v23 = objc_msgSend(v22, sel_newBufferWithBytes_length_options_, v20 + 32, 2 * v21, 0);
  swift_unknownObjectRelease();
  if (!v23)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  *(void *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_indices) = v23;
  uint64_t v24 = *(void *)(v20 + 16);
  outlined release of PKRefineMorph.GridMesh((uint64_t)&v58);
  *(void *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_indicesCount) = v24;
  id v25 = objc_msgSend(a1, sel_device);
  if (!v25)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F353B8]), sel_initWithDevice_, v25);
  swift_unknownObjectRelease();
  uint64_t v57 = 0;
  id v27 = objc_msgSend(v26, sel_newTextureWithCGImage_options_error_, a2, 0, &v57);
  id v28 = v57;
  if (!v27)
  {
    unint64_t v50 = v57;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_28;
  }
  *(void *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_texture) = v27;
  uint64_t v57 = 0;
  id v29 = v28;
  id v30 = objc_msgSend(v26, sel_newTextureWithCGImage_options_error_, a3, 0, &v57);
  unint64_t v18 = (char **)v57;
  if (!v30)
  {
LABEL_28:
    uint64_t v51 = v18;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_29;
  }
  *(void *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_depth) = v30;
  uint64_t v31 = *(void **)&v9[(void)v7];
  id v32 = v18;
  id v33 = objc_msgSend(v31, sel_newCommandQueue);
  if (!v33)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  id v53 = v9;
  double v54 = a2;
  id v55 = a3;
  *(void *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_commandQueue) = v33;
  uint64_t v34 = self;
  id v35 = +[PKMetalResourceHandler sharedResourceHandlerWithDevice:](v34, v31);
  id v36 = -[PKMetalResourceHandler shaderLibrary]((uint64_t)v35);

  if (!v36)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  id v37 = (void *)MEMORY[0x1C87824B0](0xD000000000000012, 0x80000001C481A320);
  id v38 = objc_msgSend(v36, sel_newFunctionWithName_, v37);

  uint64_t v39 = (void *)MEMORY[0x1C87824B0](0xD000000000000016, 0x80000001C481A6C0);
  id v40 = objc_msgSend(v36, sel_newFunctionWithName_, v39);

  id v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F352F0]), sel_init);
  double v42 = (void *)MEMORY[0x1C87824B0](0xD000000000000011, 0x80000001C481A6E0);
  objc_msgSend(v41, sel_setLabel_, v42);

  objc_msgSend(v41, sel_setVertexFunction_, v38);
  objc_msgSend(v41, sel_setFragmentFunction_, v40);
  id v43 = objc_msgSend(v41, sel_colorAttachments);
  id v44 = objc_msgSend(v43, sel_objectAtIndexedSubscript_, 0);

  if (!v44) {
    goto LABEL_26;
  }
  objc_msgSend(v44, sel_setPixelFormat_, objc_msgSend(a1, sel_colorPixelFormat));

  double v45 = *(void **)&v53[(void)v7];
  uint64_t v57 = 0;
  id v46 = objc_msgSend(v45, sel_newRenderPipelineStateWithDescriptor_error_, v41, &v57);
  uint64_t v9 = v57;
  if (v46)
  {
    *(void *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_pipelineState) = v46;
    double v47 = v9;

    v56.receiver = v7;
    v56.super_class = (Class)type metadata accessor for StrokeInRenderer();
    id v48 = objc_msgSendSuper2(&v56, sel_init);
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    return (uint64_t)v48;
  }
LABEL_29:
  id v52 = v9;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

Swift::Void __swiftcall StrokeInRenderer.draw(in:)(MTKView *in)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = [(MTKView *)in currentDrawable];
  if (v3)
  {
    id v4 = v3;
    id v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                               + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_commandQueue), sel_commandBuffer));
    if (v5)
    {
      uint64_t v6 = v5;
      long long v7 = (void *)MEMORY[0x1C87824B0](0x6E49656B6F727453, 0xE800000000000000);
      objc_msgSend(v6, sel_setLabel_, v7);

      id v8 = [(MTKView *)in currentRenderPassDescriptor];
      if (!v8)
      {
LABEL_6:
        objc_msgSend(v6, sel_commit);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        return;
      }
      uint64_t v21 = v8;
      id v9 = objc_msgSend(v6, sel_renderCommandEncoderWithDescriptor_);
      if (v9)
      {
        CGFloat v10 = v9;
        CGFloat v11 = (void *)MEMORY[0x1C87824B0](0x6E49656B6F727453, 0xE800000000000000);
        objc_msgSend(v10, sel_setLabel_, v11);

        [(MTKView *)in drawableSize];
        uint64_t v13 = v12;
        [(MTKView *)in drawableSize];
        v22[0] = 0;
        v22[1] = 0;
        v22[2] = v13;
        v22[3] = v14;
        long long v23 = xmmword_1C48267F0;
        objc_msgSend(v10, sel_setViewport_, v22);
        objc_msgSend(v10, sel_setRenderPipelineState_, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_pipelineState));
        [(MTKView *)in frame];
        float64_t v20 = v15;
        [(MTKView *)in frame];
        v16.f64[0] = v20;
        v16.f64[1] = v17;
        v22[0] = vcvt_f32_f64(v16);
        objc_msgSend(v10, sel_setVertexBytes_length_atIndex_, v22, 8, 1);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RefineFragmentUniforms>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1C4826800;
        *(_DWORD *)(inited + 32) = 0;
        *(_DWORD *)(inited + 36) = 0;
        *(_DWORD *)(inited + 40) = 0;
        objc_msgSend(self, sel_timeIntervalSinceReferenceDate);
        *(float *)&double v19 = (v19 - *(double *)(v1 + OBJC_IVAR____TtC9PencilKit17TiledViewRenderer_startTime))
                       / *(double *)(v1 + OBJC_IVAR____TtC9PencilKit17TiledViewRenderer_duration);
        *(float *)(inited + 32) = 1.0 - *(float *)&v19;
        *(_DWORD *)(inited + 36) = LODWORD(v19);
        *(_DWORD *)(inited + 40) = 0;
        objc_msgSend(v10, sel_setFragmentBytes_length_atIndex_, inited + 32, 12, 0);
        objc_msgSend(v10, sel_setVertexBytes_length_atIndex_, inited + 32, 12, 2);
        swift_bridgeObjectRelease();
        objc_msgSend(v10, sel_setVertexBuffer_offset_atIndex_, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_vertices), 0, 0);
        objc_msgSend(v10, sel_setFragmentTexture_atIndex_, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_texture), 0);
        objc_msgSend(v10, sel_setFragmentTexture_atIndex_, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_depth), 1);
        objc_msgSend(v10, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_, 4, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_indicesCount), 0, *(void *)(v1 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_indices), 0);
        objc_msgSend(v10, sel_endEncoding);
        swift_unknownObjectRetain();
        objc_msgSend(v6, sel_presentDrawable_, v4);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        goto LABEL_6;
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

uint64_t StrokeInRenderer.__ivar_destroyer()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

id StrokeInRenderer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StrokeInRenderer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for StrokeInRenderer()
{
  return self;
}

void one-time initialization function for nearbyThreshold()
{
  static PKRefineMorph.nearbyThreshold = 0x404E000000000000;
}

void one-time initialization function for warpThreshold()
{
  static PKRefineMorph.warpThreshold = 0x4049000000000000;
}

void one-time initialization function for strokePolygonStep()
{
  static PKRefineMorph.strokePolygonStep = 0x4014000000000000;
}

double PKRefineMorph.NDrawing.bounds.getter(uint64_t a1)
{
  double v1 = *MEMORY[0x1E4F1DB20];
  double v2 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  double v4 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  double v3 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return *MEMORY[0x1E4F1DB20];
  }
  uint64_t v6 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  double x = v1;
  CGFloat y = v2;
  CGFloat width = v4;
  CGFloat height = v3;
  double v21 = v2;
  double v22 = v1;
  double v19 = v3;
  double v20 = v4;
  do
  {
    uint64_t v15 = *(void *)(v6 + 8 * v7);
    uint64_t v16 = *(void *)(v15 + 16);
    CGFloat v24 = y;
    CGFloat v25 = x;
    CGFloat r1 = width;
    if (v16)
    {
      swift_bridgeObjectRetain();
      float64_t v17 = (double *)(v15 + 40);
      do
      {
        double v12 = *(v17 - 1);
        double v13 = *v17;
        v28.origin.double x = v1;
        v28.origin.CGFloat y = v2;
        v28.size.CGFloat width = v4;
        v28.size.CGFloat height = v3;
        double v14 = 0.0;
        if (CGRectIsNull(v28))
        {
          double v3 = 0.0;
        }
        else
        {
          v29.origin.double x = v1;
          v29.origin.CGFloat y = v2;
          v29.size.CGFloat width = v4;
          v29.size.CGFloat height = v3;
          if (v12 >= CGRectGetMinX(v29))
          {
            v31.origin.double x = v1;
            v31.origin.CGFloat y = v2;
            v31.size.CGFloat width = v4;
            v31.size.CGFloat height = v3;
            if (CGRectGetMaxX(v31) >= v12) {
              double v14 = v4;
            }
            else {
              double v14 = v12 - v1;
            }
            double v12 = v1;
          }
          else
          {
            v30.origin.double x = v1;
            v30.origin.CGFloat y = v2;
            v30.size.CGFloat width = v4;
            v30.size.CGFloat height = v3;
            double v14 = v4 + CGRectGetMinX(v30) - v12;
          }
          v32.origin.double x = v1;
          v32.origin.CGFloat y = v2;
          v32.size.CGFloat width = v4;
          v32.size.CGFloat height = v3;
          if (v13 >= CGRectGetMinY(v32))
          {
            v34.origin.double x = v1;
            v34.origin.CGFloat y = v2;
            v34.size.CGFloat width = v4;
            v34.size.CGFloat height = v3;
            if (CGRectGetMaxY(v34) < v13) {
              double v3 = v13 - v2;
            }
            double v13 = v2;
          }
          else
          {
            v33.origin.double x = v1;
            v33.origin.CGFloat y = v2;
            v33.size.CGFloat width = v4;
            v33.size.CGFloat height = v3;
            double v3 = v3 + CGRectGetMinY(v33) - v13;
          }
        }
        v17 += 2;
        double v1 = v12;
        double v2 = v13;
        double v4 = v14;
        --v16;
      }
      while (v16);
    }
    else
    {
      swift_bridgeObjectRetain();
      double v12 = v1;
      double v13 = v2;
      double v14 = v4;
    }
    ++v7;
    v26.origin.CGFloat y = v24;
    v26.origin.double x = v25;
    v26.size.CGFloat width = r1;
    v26.size.CGFloat height = height;
    v35.origin.double x = v12;
    v35.origin.CGFloat y = v13;
    v35.size.CGFloat width = v14;
    v35.size.CGFloat height = v3;
    CGRect v27 = CGRectUnion(v26, v35);
    double x = v27.origin.x;
    CGFloat y = v27.origin.y;
    CGFloat width = v27.size.width;
    CGFloat height = v27.size.height;
    swift_bridgeObjectRelease();
    double v2 = v21;
    double v1 = v22;
    double v3 = v19;
    double v4 = v20;
  }
  while (v7 != v5);
  swift_bridgeObjectRelease();
  return x;
}

Swift::Void __swiftcall PKRefineMorph.NDrawing.transform(by:)(CGAffineTransform *by)
{
  uint64_t v2 = *v1;
  int64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    long long v19 = *(_OWORD *)&by->c;
    long long v20 = *(_OWORD *)&by->a;
    long long v18 = *(_OWORD *)&by->tx;
    uint64_t v23 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = 0;
    uint64_t v5 = v23;
    uint64_t v17 = v2 + 32;
    do
    {
      uint64_t v6 = *(void *)(v17 + 8 * v4);
      int64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {
        int64_t v8 = v3;
        uint64_t v22 = MEMORY[0x1E4FBC860];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
        uint64_t v9 = v22;
        uint64_t v10 = v6 + 40;
        do
        {
          CGPoint v24 = *(CGPoint *)(v10 - 8);
          *(_OWORD *)&v21.a = v20;
          *(_OWORD *)&v21.c = v19;
          *(_OWORD *)&v21.CGFloat tx = v18;
          CGPoint v11 = CGPointApplyAffineTransform(v24, &v21);
          uint64_t v22 = v9;
          unint64_t v13 = *(void *)(v9 + 16);
          unint64_t v12 = *(void *)(v9 + 24);
          if (v13 >= v12 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
            uint64_t v9 = v22;
          }
          *(void *)(v9 + 16) = v13 + 1;
          *(CGPoint *)(v9 + 16 * v13 + 32) = v11;
          v10 += 16;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
        int64_t v3 = v8;
      }
      else
      {
        uint64_t v9 = MEMORY[0x1E4FBC860];
      }
      uint64_t v23 = v5;
      unint64_t v15 = *(void *)(v5 + 16);
      unint64_t v14 = *(void *)(v5 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1);
        uint64_t v5 = v23;
      }
      ++v4;
      *(void *)(v5 + 16) = v15 + 1;
      *(void *)(v5 + 8 * v15 + 32) = v9;
    }
    while (v4 != v3);
    swift_bridgeObjectRelease_n();
    double v1 = v16;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = MEMORY[0x1E4FBC860];
  }
  uint64_t *v1 = v5;
}

Swift::Void __swiftcall PKRefineMorph.GridMesh.morph(matches:toTransform:reversed:transformViewToModel:origin:)(Swift::OpaquePointer matches, CGAffineTransform *toTransform, Swift::Bool reversed, CGAffineTransform *transformViewToModel, CGPoint origin)
{
  double x = origin.x;
  double y = origin.y;
  CGFloat b = toTransform->b;
  CGFloat a = toTransform->a;
  CGFloat d = toTransform->d;
  CGFloat c = toTransform->c;
  CGFloat ty = toTransform->ty;
  CGFloat tx = toTransform->tx;
  CGFloat v8 = transformViewToModel->c;
  CGFloat v9 = transformViewToModel->d;
  CGFloat v10 = transformViewToModel->tx;
  CGFloat v11 = transformViewToModel->ty;
  CGFloat v67 = transformViewToModel->b;
  CGFloat v68 = transformViewToModel->a;
  v75.CGFloat a = transformViewToModel->a;
  v75.CGFloat b = v67;
  CGFloat v65 = v9;
  CGFloat v66 = v8;
  v75.CGFloat c = v8;
  v75.CGFloat d = v9;
  CGFloat v63 = v11;
  CGFloat v64 = v10;
  v75.CGFloat tx = v10;
  v75.CGFloat ty = v11;
  CGAffineTransformInvert(&v74, &v75);
  unint64_t v12 = *v5;
  uint64_t v13 = *((void *)*v5 + 2);
  if (v13)
  {
    CGFloat v53 = v74.b;
    CGFloat v54 = v74.a;
    CGFloat v51 = v74.d;
    CGFloat v52 = v74.c;
    CGFloat v49 = v74.ty;
    CGFloat v50 = v74.tx;
    uint64_t v56 = *((void *)matches._rawValue + 2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_50:
    }
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
    unint64_t v14 = 0;
    unint64_t v15 = v12 + 32;
    v16.f64[0] = x;
    v16.f64[1] = y;
    float64x2_t v47 = v16;
    id v46 = (double *)((char *)matches._rawValue + 56);
    id v55 = v12;
    uint64_t v44 = v13;
    rawValue = matches._rawValue;
    id v48 = v12 + 32;
    while (1)
    {
      if (v14 == v13)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      if (v14 >= *((void *)v12 + 2)) {
        goto LABEL_47;
      }
      uint64_t v17 = (float32x2_t *)&v15[24 * v14];
      CGPoint v18 = (CGPoint)vcvtq_f64_f32(*v17);
      CGFloat v19 = v18.y;
      v75.CGFloat a = v68;
      v75.CGFloat b = v67;
      v75.CGFloat c = v66;
      v75.CGFloat d = v65;
      v75.CGFloat tx = v64;
      v75.CGFloat ty = v63;
      CGPoint v20 = CGPointApplyAffineTransform(v18, &v75);
      double v73 = v20.x;
      double v21 = v20.y;
      unint64_t v12 = (char *)v56;
      if (v56) {
        break;
      }
      double v22 = 0.0;
      unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v37 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (v37) {
        goto LABEL_35;
      }
LABEL_39:
      swift_bridgeObjectRelease();
LABEL_40:
      unint64_t v12 = v55;
      if (v14 >= *((void *)v55 + 2)) {
        goto LABEL_48;
      }
      *uint64_t v17 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*v17), v47));
      v75.CGFloat a = a;
      v75.CGFloat b = b;
      v75.CGFloat c = c;
      v75.CGFloat d = d;
      v75.CGFloat tx = tx;
      v75.CGFloat ty = ty;
      v76.double x = v73;
      v76.double y = v21;
      CGPoint v77 = CGPointApplyAffineTransform(v76, &v75);
      v75.CGFloat a = v54;
      v75.CGFloat b = v53;
      v75.CGFloat c = v52;
      v75.CGFloat d = v51;
      v75.CGFloat tx = v50;
      v75.CGFloat ty = v49;
      CGPoint v41 = CGPointApplyAffineTransform(v77, &v75);
      *(float *)&uint64_t v42 = v41.x - x;
      float v43 = v41.y - y;
      *((float *)&v42 + 1) = v43;
      unint64_t v15 = v48;
      *(void *)&v48[24 * v14++ + 8] = v42;
      if (v14 == v13)
      {
        *uint64_t v5 = v55;
        return;
      }
    }
    if (v56 < 1) {
      goto LABEL_49;
    }
    CGRect v71 = v17;
    swift_bridgeObjectRetain();
    double v22 = 0.0;
    uint64_t v23 = v46;
    uint64_t v13 = v56;
    unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      double v25 = *v23;
      if ((*(void *)v23 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      matches._rawValue = (void *)*((void *)v23 - 1);
      if (*(void *)&v25 >= *((void *)matches._rawValue + 2)) {
        goto LABEL_45;
      }
      CGRect v26 = (double *)((char *)matches._rawValue + 24 * *(void *)&v25);
      if (reversed) {
        double v27 = *(v23 - 3);
      }
      else {
        double v27 = v26[5];
      }
      if (reversed) {
        double v28 = *(v23 - 2);
      }
      else {
        double v28 = v26[6];
      }
      if (reversed) {
        double v29 = v26[5];
      }
      else {
        double v29 = *(v23 - 3);
      }
      if (reversed) {
        double v30 = v26[6];
      }
      else {
        double v30 = *(v23 - 2);
      }
      uint64_t v31 = one-time initialization token for warpThreshold;
      swift_bridgeObjectRetain();
      if (v31 != -1) {
        swift_once();
      }
      double v32 = *(double *)&static PKRefineMorph.warpThreshold;
      swift_bridgeObjectRelease();
      double v33 = fmin((sqrt((v29 - v20.x) * (v29 - v20.x) + (v30 - v20.y) * (v30 - v20.y)) - v32) / (0.0 - v32), 1.0);
      if (v33 < 0.0) {
        double v33 = 0.0;
      }
      double v34 = v33 * (v33 * 3.0) - v33 * (v33 * (v33 + v33));
      if (v34 > 0.01)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
        }
        unint64_t v36 = *((void *)v12 + 2);
        unint64_t v35 = *((void *)v12 + 3);
        matches._rawValue = (void *)(v36 + 1);
        if (v36 >= v35 >> 1) {
          unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v12);
        }
        double v22 = v22 + v34;
        *((Swift::OpaquePointer *)v12 + 2) = matches;
        CGPoint v24 = &v12[16 * v36];
        *((double *)v24 + 4) = (v27 - v29) * v34;
        *((double *)v24 + 5) = (v28 - v30) * v34;
      }
      v23 += 4;
      --v13;
    }
    while (v13);
    matches._rawValue = rawValue;
    swift_bridgeObjectRelease();
    uint64_t v13 = v44;
    uint64_t v17 = v71;
    uint64_t v37 = *((void *)v12 + 2);
    if (!v37) {
      goto LABEL_39;
    }
LABEL_35:
    uint64_t v38 = 0;
    float64x2_t v39 = 0uLL;
    do
    {
      float64x2_t v40 = *(float64x2_t *)&v12[16 * v38++ + 32];
      float64x2_t v39 = vaddq_f64(v39, v40);
    }
    while (v37 != v38);
    float64x2_t v72 = v39;
    swift_bridgeObjectRelease();
    double v73 = v20.x + v72.f64[0] / v22;
    double v21 = v20.y + v72.f64[1] / v22;
    goto LABEL_40;
  }
}

void PKRefineMorph.Match.debugDescription.getter(uint64_t a1, double a2, double a3)
{
  if ((~*(void *)&a2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (a2 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a2 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  dispatch thunk of CustomStringConvertible.description.getter();
  v5._uint64_t countAndFlagsBits = 44;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  if ((~*(void *)&a3 & 0x7FF0000000000000) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (a3 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a3 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 15917;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  if (!*(void *)(a1 + 16))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  double v8 = *(double *)(a1 + 40);
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 44;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  double v11 = *(double *)(a1 + 48);
  if ((~*(void *)&v11 & 0x7FF0000000000000) == 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v11 < 9.22337204e18)
  {
    v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_27:
  __break(1u);
}

Swift::Int PKRefineMorph.Match.MatchTo.hashValue.getter(double a1, double a2, double a3)
{
  Hasher.init(_seed:)();
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = *(void *)&a3;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PKRefineMorph.Match.MatchTo()
{
  return PKRefineMorph.Match.MatchTo.hashValue.getter(*v0, v0[1], v0[2]);
}

void protocol witness for Hashable.hash(into:) in conformance PKRefineMorph.Match.MatchTo()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[2];
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v0[1];
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v1;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PKRefineMorph.Match.MatchTo()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Hasher.init(_seed:)();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v3;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v1;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PKRefineMorph.Match.MatchTo(double *a1, double *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if (a1[2] == a2[2]) {
    return a1[1] == a2[1];
  }
  return 0;
}

uint64_t PKRefineMorph.Match.filterMatches(distanceMatchCanJumpSqr:)(double a1)
{
  specialized MutableCollection.swapAt(_:_:)(0, *(void *)(v1 + 24));
  *(void *)(v1 + 24) = 0;
  uint64_t result = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
    uint64_t v6 = MEMORY[0x1E4FBC860] + 32;
    uint64_t v32 = MEMORY[0x1E4FBC860];
    uint64_t v33 = MEMORY[0x1E4FBC860] + 32;
    uint64_t v34 = 1;
    uint64_t v7 = v4 - 1;
    if (v4 == 1)
    {
      unint64_t v8 = 1;
      int64_t v9 = 1;
    }
    else
    {
      float64x2_t v30 = *(float64x2_t *)(result + 40);
      uint64_t v10 = swift_bridgeObjectRetain();
      float64x2_t v11 = v30;
      uint64_t v29 = v10;
      Swift::String v12 = (void *)(v10 + 72);
      unint64_t v8 = 1;
      do
      {
        float64x2_t v14 = vsubq_f64(*(float64x2_t *)(v12 - 1), v11);
        if (vaddvq_f64(vmulq_f64(v14, v14)) < a1)
        {
          long long v31 = *((_OWORD *)v12 - 1);
          uint64_t v15 = *v12;
          if ((v8 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(), uint64_t v32 = v5, (result & 1) == 0))
          {
            uint64_t result = specialized ArraySlice._copyToNewBuffer(oldCount:)(v8 >> 1);
            unint64_t v8 = v34;
          }
          unint64_t v16 = v8 >> 1;
          int64_t v17 = v8 >> 1;
          if (v8)
          {
            type metadata accessor for __ContiguousArrayStorageBase();
            swift_unknownObjectRetain();
            uint64_t v18 = swift_dynamicCastClass();
            if (!v18)
            {
              swift_unknownObjectRelease();
              uint64_t v18 = MEMORY[0x1E4FBC860];
            }
            uint64_t v19 = *(void *)(v18 + 16);
            if (v33 + 24 * v16 == v18 + 24 * v19 + 32)
            {
              unint64_t v20 = *(void *)(v18 + 24);
              uint64_t result = swift_release();
              uint64_t v21 = (v20 >> 1) - v19;
              BOOL v22 = __OFADD__(v16, v21);
              int64_t v17 = v16 + v21;
              if (v22) {
                goto LABEL_35;
              }
            }
            else
            {
              uint64_t result = swift_release();
              int64_t v17 = v8 >> 1;
            }
          }
          unint64_t v23 = v16 + 1;
          if (v17 < (uint64_t)(v16 + 1))
          {
            uint64_t result = specialized ArraySlice._copyToNewBuffer(oldCount:)(v8 >> 1);
            unint64_t v8 = v34;
          }
          unint64_t v24 = v8 >> 1;
          BOOL v22 = __OFSUB__(v23, v8 >> 1);
          unint64_t v25 = v23 - (v8 >> 1);
          if (v22)
          {
            __break(1u);
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
          uint64_t v5 = v32;
          if (v25)
          {
            type metadata accessor for __ContiguousArrayStorageBase();
            swift_unknownObjectRetain();
            uint64_t result = swift_dynamicCastClass();
            if (!result)
            {
              swift_unknownObjectRelease();
              uint64_t result = MEMORY[0x1E4FBC860];
            }
            uint64_t v26 = *(void *)(result + 16);
            BOOL v22 = __OFADD__(v26, v25);
            uint64_t v27 = v26 + v25;
            if (v22) {
              goto LABEL_32;
            }
            *(void *)(result + 16) = v27;
            uint64_t result = swift_release();
            unint64_t v28 = v24 + v25;
            if (__OFADD__(v24, v25)) {
              goto LABEL_33;
            }
            if ((v28 & 0x8000000000000000) != 0) {
              goto LABEL_34;
            }
            unint64_t v8 = v8 & 1 | (2 * v28);
            uint64_t v34 = v8;
          }
          uint64_t v6 = v33;
          uint64_t v13 = v33 + 24 * v16;
          float64x2_t v11 = v30;
          *(_OWORD *)uint64_t v13 = v31;
          *(void *)(v13 + 16) = v15;
        }
        v12 += 3;
        --v7;
      }
      while (v7);
      uint64_t result = swift_bridgeObjectRelease();
      int64_t v9 = *(void *)(v29 + 16);
      if (!v9) {
        goto LABEL_37;
      }
    }
    specialized Array.subscript.setter(v5, v6, 0, v8, 1uLL, v9);
    return swift_unknownObjectRelease();
  }
  else
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  return result;
}

unint64_t specialized MutableCollection.swapAt(_:_:)(unint64_t result, unint64_t a2)
{
  if (result != a2)
  {
    unint64_t v7 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *v3;
      unint64_t v8 = *(void *)(*v3 + 16);
      if (v8 > result)
      {
        unint64_t v2 = a2;
        if (v8 > a2)
        {
          uint64_t v9 = v4 + 32 + 24 * result;
          uint64_t v5 = *(void *)(v9 + 16);
          uint64_t v10 = v4 + 32 + 24 * a2;
          long long v13 = *(_OWORD *)v10;
          long long v14 = *(_OWORD *)v9;
          uint64_t v6 = *(void *)(v10 + 16);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if (result)
          {
LABEL_6:
            uint64_t v11 = v4 + 32 + 24 * v7;
            *(_OWORD *)uint64_t v11 = v13;
            *(void *)(v11 + 16) = v6;
            uint64_t v12 = v4 + 32 + 24 * v2;
            *(_OWORD *)uint64_t v12 = v14;
            *(void *)(v12 + 16) = v5;
            *Swift::UInt64 v3 = v4;
            return result;
          }
LABEL_11:
          uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
          uint64_t v4 = result;
          goto LABEL_6;
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

void PKRefineMorph.Match.hash(into:)(uint64_t a1, uint64_t a2, Swift::UInt a3, double a4, double a5)
{
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = *(void *)&a4;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = *(void *)&a5;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  specialized Array<A>.hash(into:)(a1, a2);
  Hasher._combine(_:)(a3);
}

Swift::Int PKRefineMorph.Match.hashValue.getter(uint64_t a1, Swift::UInt a2, double a3, double a4)
{
  Hasher.init(_seed:)();
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = *(void *)&a3;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = *(void *)&a4;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  specialized Array<A>.hash(into:)((uint64_t)v11, a1);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

void protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PKRefineMorph.Match()
{
  PKRefineMorph.Match.debugDescription.getter(*(void *)(v0 + 16), *(double *)v0, *(double *)(v0 + 8));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PKRefineMorph.Match()
{
  return PKRefineMorph.Match.hashValue.getter(*(void *)(v0 + 16), *(void *)(v0 + 24), *(double *)v0, *(double *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance PKRefineMorph.Match(uint64_t a1)
{
  PKRefineMorph.Match.hash(into:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(double *)v1, *(double *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PKRefineMorph.Match()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  uint64_t v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v1;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v2;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  specialized Array<A>.hash(into:)((uint64_t)v8, v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PKRefineMorph.Match(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  return specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a2 + 16)) & (v5 == v4);
}

uint64_t specialized morphCost #1 (of:match:in:) in static PKRefineMorph.computeMorph(from:to:fromViewFrame:toViewFrame:transformViewToModel:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, float64_t a6, float64_t a7)
{
  uint64_t result = swift_beginAccess();
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*(void *)(*(void *)a5 + 16) <= a1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v13 = *(void *)(*(void *)a5 + 8 * a1 + 32);
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    if ((a3 & 0x8000000000000000) != 0)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (*(void *)(a2 + 16) <= a3)
    {
LABEL_19:
      __break(1u);
      return result;
    }
    v15.f64[0] = a6;
    v15.f64[1] = a7;
    unint64_t v16 = (double *)(v13 + 40);
    double v17 = 0.0;
    while (*(void *)v16 < *(void *)(a4 + 16))
    {
      uint64_t v18 = a4 + 32 + 32 * *(void *)v16;
      unint64_t v19 = *(void *)(v18 + 24);
      if ((v19 & 0x8000000000000000) != 0) {
        goto LABEL_14;
      }
      uint64_t v20 = *(void *)(v18 + 16);
      if (v19 >= *(void *)(v20 + 16)) {
        goto LABEL_15;
      }
      double v21 = *(v16 - 1);
      v16 += 2;
      float64x2_t v22 = vsubq_f64(vaddq_f64(vsubq_f64(v15, *(float64x2_t *)v18), *(float64x2_t *)(v20 + 24 * v19 + 40)), *(float64x2_t *)(a2 + 24 * a3 + 40));
      double v17 = v17 + v21 * vaddvq_f64(vmulq_f64(v22, v22)) * 1000.0;
      if (!--v14) {
        return result;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

unint64_t specialized morphCost #2 (of:) in static PKRefineMorph.computeMorph(from:to:fromViewFrame:toViewFrame:transformViewToModel:)(unint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    unint64_t v4 = result + 32;
    uint64_t result = swift_beginAccess();
    uint64_t v5 = 0;
    double v6 = 0.0;
    while (v5 != *(void *)(*(void *)a2 + 16))
    {
      uint64_t v8 = *(void *)(*(void *)a2 + 32 + 8 * v5);
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        unint64_t v10 = v4 + 32 * v5;
        unint64_t v11 = *(void *)(v10 + 24);
        if ((v11 & 0x8000000000000000) != 0) {
          goto LABEL_20;
        }
        uint64_t v12 = *(void *)(v10 + 16);
        uint64_t result = *(void *)(v12 + 16);
        if (v11 >= result) {
          goto LABEL_21;
        }
        float64x2_t v13 = *(float64x2_t *)v10;
        float64x2_t v14 = *(float64x2_t *)(v12 + 24 * v11 + 40);
        float64x2_t v15 = (double *)(v8 + 40);
        double v7 = 0.0;
        while (*(void *)v15 < v2)
        {
          unint64_t v16 = v4 + 32 * *(void *)v15;
          unint64_t v17 = *(void *)(v16 + 24);
          if ((v17 & 0x8000000000000000) != 0) {
            goto LABEL_17;
          }
          uint64_t v18 = *(void *)(v16 + 16);
          uint64_t result = *(void *)(v18 + 16);
          if (v17 >= result) {
            goto LABEL_18;
          }
          double v19 = *(v15 - 1);
          v15 += 2;
          float64x2_t v20 = vsubq_f64(vaddq_f64(vsubq_f64(v13, *(float64x2_t *)v16), *(float64x2_t *)(v18 + 24 * v17 + 40)), v14);
          double v7 = v7 + v19 * vaddvq_f64(vmulq_f64(v20, v20)) * 1000.0;
          if (!--v9) {
            goto LABEL_4;
          }
        }
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        break;
      }
      double v7 = 0.0;
LABEL_4:
      ++v5;
      double v6 = v6 + v7;
      if (v5 == v2) {
        return result;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)
    || *(double *)(a1 + 40) != *(double *)(a2 + 40)
    || *(double *)(a1 + 48) != *(double *)(a2 + 48))
  {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v6 = v2 - 2;
  double v7 = (float64x2_t *)(a2 + 64);
  uint64_t v8 = (float64x2_t *)(a1 + 64);
  do
  {
    int32x2_t v9 = vmovn_s64(vceqq_f64(*v8, *v7));
    uint64_t result = ((v8[-1].f64[1] == v7[-1].f64[1]) & v9.i8[0]) & v9.i8[4];
    BOOL v11 = v6-- != 0;
    if (result != 1) {
      break;
    }
    double v7 = (float64x2_t *)((char *)v7 + 24);
    uint64_t v8 = (float64x2_t *)((char *)v8 + 24);
  }
  while (v11);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  unint64_t v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(double a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2, a1);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized static BinaryFloatingPoint<>.random<A>(in:using:)(uint64_t result, double a2, double a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  double v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t result = MEMORY[0x1C8784DD0](&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3) {
    return specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v6, a2, a3);
  }
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, CGFloat>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    uint64_t v34 = v3;
    int64_t v8 = 0;
    int32x2_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *int32x2_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CGFloat, UIImage>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = v3;
    int64_t v8 = 0;
    int32x2_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    char v35 = (unint64_t)(v10 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        int64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v35) {
          goto LABEL_33;
        }
        uint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v35) {
            goto LABEL_33;
          }
          uint64_t v22 = v9[v8];
          if (!v22)
          {
            uint64_t v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_40;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v35);
              }
              else {
                *int32x2_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v35) {
                  goto LABEL_33;
                }
                uint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      char v28 = 8 * v20;
      unint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      BOOL v30 = *(void **)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        uint64_t v31 = v30;
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            uint64_t v16 = 0;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSNumber, UIImage>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    int32x2_t v9 = ~(-1 << v8);
  }
  else {
    int32x2_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    uint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    uint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      uint64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      uint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            uint64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            uint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v14 = v25;
      }
    }
LABEL_30:
    uint64_t v10 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    BOOL v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      uint64_t v33 = v31;
      uint64_t v34 = v32;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        char v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        unint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    int64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  char v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for NSNumber();
    uint64_t v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (uint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; uint64_t i = (i + 1) & v8)
      {
        int32x2_t v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        uint64_t v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, double a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a1 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = *(void *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      uint64_t v7 = ~v4;
      for (unint64_t result = (result + 1) & v7;
            ((*(void *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        unint64_t v7 = 0xE700000000000000;
        if (*(unsigned char *)(*(void *)(v2 + 48) + v4) == 1)
        {
          uint64_t v8 = 0x7974696361706FLL;
          int v9 = a1;
          if (!a1) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v8 = 0x32737569646172;
          int v9 = a1;
          if (!a1)
          {
LABEL_14:
            unint64_t v11 = 0xE600000000000000;
            if (v8 != 0x737569646172) {
              goto LABEL_16;
            }
            goto LABEL_15;
          }
        }
      }
      else
      {
        unint64_t v7 = 0xE600000000000000;
        uint64_t v8 = 0x737569646172;
        int v9 = a1;
        if (!a1) {
          goto LABEL_14;
        }
      }
      if (v9 == 1) {
        uint64_t v10 = 0x7974696361706FLL;
      }
      else {
        uint64_t v10 = 0x32737569646172;
      }
      unint64_t v11 = 0xE700000000000000;
      if (v8 != v10) {
        goto LABEL_16;
      }
LABEL_15:
      if (v7 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_16:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
  }
  return v4;
}

void *specialized _NativeDictionary.copy()()
{
  Swift::UInt64 v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, CGFloat>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  Swift::UInt64 v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CGFloat, UIImage>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  Swift::UInt64 v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSNumber, UIImage>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    int64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    unint64_t v19 = v17;
    id result = v18;
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_138;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v84 = *a1;
      uint64_t v85 = -1;
      uint64_t v86 = 1;
      uint64_t v87 = *a1;
      do
      {
        double v88 = *(double *)(v84 + 24 * v86);
        uint64_t v89 = v85;
        uint64_t v90 = v87;
        do
        {
          if (v88 >= *(double *)v90) {
            break;
          }
          if (!v84) {
            goto LABEL_142;
          }
          long long v91 = *(_OWORD *)(v90 + 32);
          *(_OWORD *)(v90 + 24) = *(_OWORD *)v90;
          *(void *)(v90 + 40) = *(void *)(v90 + 16);
          *(double *)uint64_t v90 = v88;
          *(_OWORD *)(v90 + 8) = v91;
          v90 -= 24;
        }
        while (!__CFADD__(v89++, 1));
        ++v86;
        v87 += 24;
        --v85;
      }
      while (v86 != v3);
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_137;
    }
    uint64_t v6 = result;
    CGRect v101 = a1;
    if (v3 > 1)
    {
      uint64_t v7 = v5 >> 1;
      uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(result + 16) = v7;
      uint64_t v103 = result;
      CGRect v107 = (double *)(result + 32);
LABEL_13:
      Swift::Int v9 = 0;
      uint64_t v10 = *a1;
      uint64_t v102 = *a1 + 48;
      uint64_t v100 = *a1 - 24;
      uint64_t v11 = MEMORY[0x1E4FBC860];
      uint64_t v104 = v6;
      Swift::Int v105 = v3;
      uint64_t v106 = v10;
      while (1)
      {
        Swift::Int v13 = v9++;
        if (v9 < v3)
        {
          double v14 = *(double *)(v10 + 24 * v9);
          double v15 = *(double *)(v10 + 24 * v13);
          Swift::Int v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            uint64_t v16 = (double *)(v102 + 24 * v13);
            double v17 = v14;
            while (1)
            {
              double v18 = v17;
              double v17 = *v16;
              if (v14 < v15 == *v16 >= v18) {
                break;
              }
              ++v9;
              v16 += 3;
              if (v3 == v9)
              {
                Swift::Int v9 = v3;
                break;
              }
            }
          }
          if (v14 < v15)
          {
            if (v9 < v13) {
              goto LABEL_139;
            }
            if (v13 < v9)
            {
              uint64_t v19 = 24 * v9;
              uint64_t v20 = 24 * v13;
              Swift::Int v21 = v9;
              Swift::Int v22 = v13;
              do
              {
                if (v22 != --v21)
                {
                  if (!v10) {
                    goto LABEL_145;
                  }
                  uint64_t v23 = v10 + v20;
                  uint64_t v24 = v10 + v19;
                  uint64_t v25 = *(void *)(v10 + v20 + 16);
                  long long v26 = *(_OWORD *)(v10 + v20);
                  uint64_t v27 = *(void *)(v10 + v19 - 8);
                  *(_OWORD *)uint64_t v23 = *(_OWORD *)(v10 + v19 - 24);
                  *(void *)(v23 + 16) = v27;
                  *(_OWORD *)(v24 - 24) = v26;
                  *(void *)(v24 - 8) = v25;
                }
                ++v22;
                v19 -= 24;
                v20 += 24;
              }
              while (v22 < v21);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13)) {
            goto LABEL_136;
          }
          if (v9 - v13 < v6)
          {
            Swift::Int v28 = v13 + v6;
            if (__OFADD__(v13, v6)) {
              goto LABEL_140;
            }
            if (v28 >= v3) {
              Swift::Int v28 = v3;
            }
            if (v28 < v13)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v9 != v28)
            {
              uint64_t v29 = v100 + 24 * v9;
              do
              {
                double v30 = *(double *)(v10 + 24 * v9);
                Swift::Int v31 = v13;
                uint64_t v32 = v29;
                do
                {
                  if (v30 >= *(double *)v32) {
                    break;
                  }
                  if (!v10) {
                    goto LABEL_143;
                  }
                  long long v33 = *(_OWORD *)(v32 + 32);
                  *(_OWORD *)(v32 + 24) = *(_OWORD *)v32;
                  *(void *)(v32 + 40) = *(void *)(v32 + 16);
                  *(double *)uint64_t v32 = v30;
                  *(_OWORD *)(v32 + 8) = v33;
                  v32 -= 24;
                  ++v31;
                }
                while (v9 != v31);
                ++v9;
                v29 += 24;
              }
              while (v9 != v28);
              Swift::Int v9 = v28;
            }
          }
        }
        if (v9 < v13) {
          goto LABEL_131;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
          uint64_t v11 = result;
        }
        unint64_t v35 = *(void *)(v11 + 16);
        unint64_t v34 = *(void *)(v11 + 24);
        unint64_t v12 = v35 + 1;
        uint64_t v10 = v106;
        if (v35 >= v34 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, (char *)v11);
          uint64_t v10 = v106;
          uint64_t v11 = result;
        }
        *(void *)(v11 + 16) = v12;
        uint64_t v36 = v11 + 32;
        uint64_t v37 = (Swift::Int *)(v11 + 32 + 16 * v35);
        *uint64_t v37 = v13;
        v37[1] = v9;
        if (v35)
        {
          while (1)
          {
            unint64_t v38 = v12 - 1;
            if (v12 >= 4)
            {
              unint64_t v43 = v36 + 16 * v12;
              uint64_t v44 = *(void *)(v43 - 64);
              uint64_t v45 = *(void *)(v43 - 56);
              BOOL v49 = __OFSUB__(v45, v44);
              uint64_t v46 = v45 - v44;
              if (v49) {
                goto LABEL_120;
              }
              uint64_t v48 = *(void *)(v43 - 48);
              uint64_t v47 = *(void *)(v43 - 40);
              BOOL v49 = __OFSUB__(v47, v48);
              uint64_t v41 = v47 - v48;
              char v42 = v49;
              if (v49) {
                goto LABEL_121;
              }
              unint64_t v50 = v12 - 2;
              CGFloat v51 = (uint64_t *)(v36 + 16 * (v12 - 2));
              uint64_t v53 = *v51;
              uint64_t v52 = v51[1];
              BOOL v49 = __OFSUB__(v52, v53);
              uint64_t v54 = v52 - v53;
              if (v49) {
                goto LABEL_122;
              }
              BOOL v49 = __OFADD__(v41, v54);
              uint64_t v55 = v41 + v54;
              if (v49) {
                goto LABEL_124;
              }
              if (v55 >= v46)
              {
                double v73 = (uint64_t *)(v36 + 16 * v38);
                uint64_t v75 = *v73;
                uint64_t v74 = v73[1];
                BOOL v49 = __OFSUB__(v74, v75);
                uint64_t v76 = v74 - v75;
                if (v49) {
                  goto LABEL_130;
                }
                BOOL v66 = v41 < v76;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                uint64_t v67 = *(void *)(v11 + 32);
                uint64_t v68 = *(void *)(v11 + 40);
                BOOL v49 = __OFSUB__(v68, v67);
                uint64_t v60 = v68 - v67;
                char v61 = v49;
                goto LABEL_77;
              }
              uint64_t v40 = *(void *)(v11 + 32);
              uint64_t v39 = *(void *)(v11 + 40);
              BOOL v49 = __OFSUB__(v39, v40);
              uint64_t v41 = v39 - v40;
              char v42 = v49;
            }
            if (v42) {
              goto LABEL_123;
            }
            unint64_t v50 = v12 - 2;
            uint64_t v56 = (uint64_t *)(v36 + 16 * (v12 - 2));
            uint64_t v58 = *v56;
            uint64_t v57 = v56[1];
            BOOL v59 = __OFSUB__(v57, v58);
            uint64_t v60 = v57 - v58;
            char v61 = v59;
            if (v59) {
              goto LABEL_125;
            }
            uint64_t v62 = (uint64_t *)(v36 + 16 * v38);
            uint64_t v64 = *v62;
            uint64_t v63 = v62[1];
            BOOL v49 = __OFSUB__(v63, v64);
            uint64_t v65 = v63 - v64;
            if (v49) {
              goto LABEL_127;
            }
            if (__OFADD__(v60, v65)) {
              goto LABEL_129;
            }
            if (v60 + v65 >= v41)
            {
              BOOL v66 = v41 < v65;
LABEL_83:
              if (v66) {
                unint64_t v38 = v50;
              }
              goto LABEL_85;
            }
LABEL_77:
            if (v61) {
              goto LABEL_126;
            }
            CGRect v69 = (uint64_t *)(v36 + 16 * v38);
            uint64_t v71 = *v69;
            uint64_t v70 = v69[1];
            BOOL v49 = __OFSUB__(v70, v71);
            uint64_t v72 = v70 - v71;
            if (v49) {
              goto LABEL_128;
            }
            if (v72 < v60) {
              goto LABEL_15;
            }
LABEL_85:
            unint64_t v77 = v38 - 1;
            if (v38 - 1 >= v12)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v10) {
              goto LABEL_144;
            }
            uint64_t v78 = v11;
            id v79 = (uint64_t *)(v36 + 16 * v77);
            uint64_t v80 = *v79;
            CGFloat v81 = (void *)(v36 + 16 * v38);
            uint64_t v82 = v81[1];
            uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v10 + 24 * *v79), (double *)(v10 + 24 * *v81), v10 + 24 * v82, v107);
            if (v1) {
              goto LABEL_93;
            }
            if (v82 < v80) {
              goto LABEL_117;
            }
            if (v38 > *(void *)(v78 + 16)) {
              goto LABEL_118;
            }
            *id v79 = v80;
            *(void *)(v36 + 16 * v77 + 8) = v82;
            unint64_t v83 = *(void *)(v78 + 16);
            if (v38 >= v83) {
              goto LABEL_119;
            }
            uint64_t v11 = v78;
            unint64_t v12 = v83 - 1;
            uint64_t result = (uint64_t)memmove((void *)(v36 + 16 * v38), v81 + 2, 16 * (v83 - 1 - v38));
            *(void *)(v78 + 16) = v83 - 1;
            uint64_t v10 = v106;
            if (v83 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v12 = 1;
LABEL_15:
        uint64_t v6 = v104;
        Swift::Int v3 = v105;
        if (v9 >= v105)
        {
          uint64_t v8 = v103;
          goto LABEL_103;
        }
      }
    }
    uint64_t v8 = MEMORY[0x1E4FBC860];
    CGRect v107 = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 == 1)
    {
      uint64_t v103 = MEMORY[0x1E4FBC860];
      goto LABEL_13;
    }
    unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    uint64_t v11 = MEMORY[0x1E4FBC860];
LABEL_103:
    uint64_t result = v11;
    uint64_t v103 = v8;
    if (v12 >= 2)
    {
      uint64_t v93 = *v101;
      do
      {
        unint64_t v94 = v12 - 2;
        if (v12 < 2) {
          goto LABEL_132;
        }
        if (!v93) {
          goto LABEL_146;
        }
        uint64_t v95 = result;
        uint64_t v96 = *(void *)(result + 32 + 16 * v94);
        uint64_t v97 = *(void *)(result + 32 + 16 * (v12 - 1) + 8);
        uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v93 + 24 * v96), (double *)(v93 + 24 * *(void *)(result + 32 + 16 * (v12 - 1))), v93 + 24 * v97, v107);
        if (v1) {
          break;
        }
        if (v97 < v96) {
          goto LABEL_133;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v95);
          uint64_t v95 = result;
        }
        if (v94 >= *(void *)(v95 + 16)) {
          goto LABEL_134;
        }
        uint64_t v98 = (void *)(v95 + 32 + 16 * v94);
        *uint64_t v98 = v96;
        v98[1] = v97;
        unint64_t v99 = *(void *)(v95 + 16);
        if (v12 > v99) {
          goto LABEL_135;
        }
        memmove((void *)(v95 + 32 + 16 * (v12 - 1)), (const void *)(v95 + 32 + 16 * v12), 16 * (v99 - v12));
        uint64_t result = v95;
        *(void *)(v95 + 16) = v99 - 1;
        unint64_t v12 = v99 - 1;
      }
      while (v99 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(void *)(v103 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__dst, double *__src, unint64_t a3, double *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  int64_t v9 = ((char *)__src - (char *)__dst) / 24;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 24;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[3 * v11] <= a4) {
      memmove(a4, __src, 24 * v11);
    }
    unint64_t v12 = &v4[3 * v11];
    if (v7 >= v6 || v10 < 24) {
      goto LABEL_36;
    }
    unint64_t v16 = a3 - 24;
    while (1)
    {
      double v17 = (double *)(v16 + 24);
      double v18 = v6 - 3;
      if (*(v12 - 3) >= *(v6 - 3))
      {
        double v18 = v12 - 3;
        if (v17 != v12)
        {
          v12 -= 3;
          goto LABEL_33;
        }
        BOOL v19 = v16 >= (unint64_t)v12;
        v12 -= 3;
        if (v19) {
          goto LABEL_33;
        }
      }
      else
      {
        if (v17 != v6)
        {
          v6 -= 3;
LABEL_33:
          long long v20 = *(_OWORD *)v18;
          *(double *)(v16 + 16) = v18[2];
          *(_OWORD *)unint64_t v16 = v20;
          goto LABEL_34;
        }
        BOOL v19 = v16 >= (unint64_t)v6;
        v6 -= 3;
        if (v19) {
          goto LABEL_33;
        }
      }
LABEL_34:
      if (v6 > v7)
      {
        v16 -= 24;
        if (v12 > v4) {
          continue;
        }
      }
      goto LABEL_36;
    }
  }
  if (a4 != __dst || &__dst[3 * v9] <= a4) {
    memmove(a4, __dst, 24 * v9);
  }
  unint64_t v12 = &v4[3 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (*v6 < *v4)
    {
      Swift::Int v13 = v6;
      BOOL v14 = v7 == v6;
      v6 += 3;
      if (!v14) {
        goto LABEL_12;
      }
LABEL_13:
      v7 += 3;
      if (v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_15;
      }
    }
    Swift::Int v13 = v4;
    BOOL v14 = v7 == v4;
    v4 += 3;
    if (v14) {
      goto LABEL_13;
    }
LABEL_12:
    long long v15 = *(_OWORD *)v13;
    v7[2] = v13[2];
    *(_OWORD *)uint64_t v7 = v15;
    goto LABEL_13;
  }
LABEL_15:
  uint64_t v6 = v7;
LABEL_36:
  uint64_t v21 = (unsigned __int128)(((char *)v12 - (char *)v4) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  uint64_t v22 = (v21 >> 2) + ((unint64_t)v21 >> 63);
  if (v6 != v4 || v6 >= &v4[3 * v22]) {
    memmove(v6, v4, 24 * v22);
  }
  return 1;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  Swift::Int v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  Swift::Int v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8]) {
      memmove(v13, v14, 2 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 2 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RefineVertex>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  Swift::Int v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RefineFragmentUniforms>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 12);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  Swift::Int v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[12 * v8]) {
      memmove(v12, v13, 12 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 12 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKRefineMorph.Match.MatchTo>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  Swift::Int v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKRefineMorph.Match>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  Swift::Int v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  Swift::Int v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  Swift::Int v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  Swift::Int v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CGFloat, Int)>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  Swift::Int v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKStrokePoint>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  Swift::Int v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt64 *)(a2 + 48);
    do
    {
      Swift::UInt64 v6 = *(v4 - 2);
      Swift::UInt64 v5 = *(v4 - 1);
      Swift::UInt64 v8 = *v4;
      v4 += 3;
      Swift::UInt64 v7 = v8;
      if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v9 = v5;
      }
      else {
        Swift::UInt64 v9 = 0;
      }
      Hasher._combine(_:)(v9);
      if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v10 = v7;
      }
      else {
        Swift::UInt64 v10 = 0;
      }
      Hasher._combine(_:)(v10);
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v11 = v6;
      }
      else {
        Swift::UInt64 v11 = 0;
      }
      Hasher._combine(_:)(v11);
      --v3;
    }
    while (v3);
  }
}

uint64_t specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = v4[2];
  uint64_t v7 = v4[3] >> 1;
  uint64_t result = v7 - v6;
  if (__OFSUB__(v7, v6))
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v10 = *a1;
  uint64_t v11 = *(void *)(*a1 + 16);
  BOOL v29 = __OFSUB__(v11, a2);
  uint64_t v12 = v11 - a2;
  if (v29)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v15 = result - a2;
  if (__OFSUB__(result, a2))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  BOOL v29 = __OFSUB__(v15, v14);
  uint64_t v16 = v15 - v14;
  if (v29)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v35 = v16;
  uint64_t v17 = v10 + 32;
  unint64_t v34 = (char *)(v10 + 32 + 24 * a2 + 24 * a3);
  uint64_t result = specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(result);
  if (result)
  {
    uint64_t v18 = result;
    uint64_t v19 = v4[2];
    long long v20 = (const void *)(v4[1] + 24 * v19);
    unint64_t v21 = (unint64_t)v20 + 24 * a2;
    if ((const void *)(v10 + 32) != v20 || v10 + 32 >= v21) {
      memmove((void *)(v10 + 32), v20, 24 * a2);
    }
    a4(v10 + 32 + 24 * a2, a3);
    uint64_t v23 = (char *)(v21 + 24 * v35);
    if (v34 != v23 || v34 >= &v23[24 * v14]) {
      memmove(v34, v23, 24 * v14);
    }
    *(void *)(v18 + 16) = 0;
    swift_release();
    uint64_t v17 = v10 + 32;
LABEL_27:
    swift_retain();
    uint64_t result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v19))
    {
      uint64_t v32 = *(void *)(v10 + 16);
      BOOL v29 = __OFADD__(v19, v32);
      uint64_t v33 = v19 + v32;
      if (!v29)
      {
        if (v33 >= v19)
        {
          if ((v33 & 0x8000000000000000) == 0)
          {
            void *v4 = v10;
            v4[1] = v17 - 24 * v19;
            v4[2] = v19;
            v4[3] = (2 * v33) | 1;
            return result;
          }
          goto LABEL_40;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v19 = v4[2];
  uint64_t v25 = v19 + a2;
  if (__OFADD__(v19, a2))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v25 < v19)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (__OFSUB__(v25, v19))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v26 = v4[1];
  memcpy((void *)(v10 + 32), (const void *)(v26 + 24 * v19), 24 * a2);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))a4)(v17 + 24 * a2, a3);
  uint64_t v27 = v25 + v35;
  if (__OFADD__(v25, v35))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v28 = v4[3] >> 1;
  BOOL v29 = __OFSUB__(v28, v27);
  BOOL v30 = v28 < v27;
  uint64_t v31 = v28 - v27;
  if (v30)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (!v29)
  {
    memcpy(v34, (const void *)(v26 + 24 * v27), 24 * v31);
    goto LABEL_27;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_32:
    if (v8 >= v7) {
      goto LABEL_21;
    }
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v7 = a2;
  uint64_t v6 = result;
  if ((a6 & 1) == 0) {
    goto LABEL_32;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = a4 + 24 * a5 + 24 * v8;
  if (v13 == v11 + 24 * v12 + 32)
  {
    unint64_t v15 = *(void *)(v11 + 24);
    uint64_t result = swift_release();
    uint64_t v16 = (v15 >> 1) - v12;
    uint64_t v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
  else
  {
    swift_release();
    uint64_t v14 = v8;
  }
  swift_unknownObjectRetain();
  uint64_t v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      uint64_t v17 = MEMORY[0x1E4FBC860];
    }
    uint64_t v18 = *(void *)(v17 + 16);
    if (v13 == v17 + 24 * v18 + 32)
    {
      unint64_t v20 = *(void *)(v17 + 24);
      uint64_t result = swift_release();
      uint64_t v21 = (v20 >> 1) - v18;
      BOOL v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    uint64_t v17 = MEMORY[0x1E4FBC860];
  }
  uint64_t v19 = *(void *)(v17 + 16);
  if (v13 == v17 + 24 * v19 + 32)
  {
    unint64_t v23 = *(void *)(v17 + 24);
    uint64_t result = swift_release();
    uint64_t v24 = (v23 >> 1) - v19;
    BOOL v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22) {
      goto LABEL_21;
    }
LABEL_37:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7) {
    uint64_t v25 = v7;
  }
  else {
    uint64_t v25 = v8;
  }
  if (v25 <= v6) {
    uint64_t v26 = v6;
  }
  else {
    uint64_t v26 = v25;
  }
  if (!v26) {
    return MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKRefineMorph.Match.MatchTo>);
  uint64_t v27 = (void *)swift_allocObject();
  size_t v28 = _swift_stdlib_malloc_size(v27);
  v27[2] = v6;
  v27[3] = 2 * ((uint64_t)(v28 - 32) / 24);
  return (uint64_t)v27;
}

uint64_t (*specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t specialized ArraySlice._copyToNewBuffer(oldCount:)(uint64_t a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  uint64_t v6 = v1[2];
  unint64_t v7 = v1[3];
  swift_unknownObjectRetain();
  uint64_t v8 = specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(a1, v3, v4, v5, v6, v7);
  swift_unknownObjectRelease();
  uint64_t v11 = v8;
  Swift::UInt64 v9 = specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)();
  specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v11, a1, 0, (void (*)(uint64_t, uint64_t))v9);
  swift_release();

  return swift_release();
}

uint64_t specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(uint64_t a1)
{
  int64_t isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!isUniquelyReferenced_nonNull) {
    return 0;
  }
  uint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v8 = v1[1];
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  uint64_t v10 = *(void *)(v9 + 16);
  if (v8 + 24 * v6 + 24 * v7 != v9 + 24 * v10 + 32)
  {
    swift_release();
LABEL_8:
    uint64_t v11 = v7;
    goto LABEL_10;
  }
  unint64_t v12 = *(void *)(v9 + 24);
  uint64_t result = swift_release();
  uint64_t v14 = (v12 >> 1) - v10;
  BOOL v15 = __OFADD__(v7, v14);
  uint64_t v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1) {
      return 0;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x1E4FBC860];
    }
    uint64_t v16 = (v8 + 24 * v6 - a1 - 32) / 24;
    int64_t isUniquelyReferenced_nonNull = v7 + v16;
    if (!__OFADD__(v7, v16))
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4) {
        return a1;
      }
LABEL_19:
      specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

void specialized PKRefineMorph.GridMesh.init(bounds:step:)(uint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  double Width = CGRectGetWidth(*(CGRect *)&a3);
  if ((~*(void *)&Width & 0x7FF0000000000000) == 0)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (Width <= -9.22337204e18)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (Width >= 9.22337204e18)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (!a1)
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if ((uint64_t)Width == 0x8000000000000000 && a1 == -1) {
    goto LABEL_65;
  }
  uint64_t v14 = (uint64_t)Width / a1;
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    goto LABEL_57;
  }
  if (v16 <= 2) {
    uint64_t v17 = 2;
  }
  else {
    uint64_t v17 = v16;
  }
  v59.origin.double x = a3;
  v59.origin.double y = a4;
  v59.size.CGFloat width = a5;
  v59.size.CGFloat height = a6;
  double Height = CGRectGetHeight(v59);
  if ((~*(void *)&Height & 0x7FF0000000000000) == 0) {
    goto LABEL_58;
  }
  if (Height <= -9.22337204e18)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (Height >= 9.22337204e18)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if ((uint64_t)Height == 0x8000000000000000 && a1 == -1) {
    goto LABEL_66;
  }
  uint64_t v19 = (uint64_t)Height / a1;
  BOOL v15 = __OFADD__(v19, 1);
  uint64_t v20 = v19 + 1;
  if (v15) {
    goto LABEL_61;
  }
  if (v20 <= 2) {
    uint64_t v21 = 2;
  }
  else {
    uint64_t v21 = v20;
  }
  if ((unsigned __int128)(v17 * (__int128)v21) >> 64 != (v17 * v21) >> 63) {
    goto LABEL_62;
  }
  uint64_t v55 = a2;
  BOOL v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v17 * v21) & ~((v17 * v21) >> 63), 0, MEMORY[0x1E4FBC860]);
  uint64_t v23 = 0;
  uint64_t v56 = v21 - 1;
  do
  {
    uint64_t v24 = 0;
    double v25 = (double)v23++;
    double v58 = v25 / (double)(v21 - 1);
    *(float *)&double v25 = v58;
    int v57 = LODWORD(v25);
    do
    {
      v60.origin.double x = a3;
      v60.origin.double y = a4;
      v60.size.CGFloat width = a5;
      v60.size.CGFloat height = a6;
      double MinX = CGRectGetMinX(v60);
      v61.origin.double x = a3;
      v61.origin.double y = a4;
      v61.size.CGFloat width = a5;
      v61.size.CGFloat height = a6;
      double v27 = CGRectGetWidth(v61);
      v62.origin.double x = a3;
      v62.origin.double y = a4;
      v62.size.CGFloat width = a5;
      v62.size.CGFloat height = a6;
      double MinY = CGRectGetMinY(v62);
      v63.origin.double x = a3;
      v63.origin.double y = a4;
      v63.size.CGFloat width = a5;
      v63.size.CGFloat height = a6;
      double v29 = CGRectGetHeight(v63);
      unint64_t v31 = *((void *)v22 + 2);
      unint64_t v30 = *((void *)v22 + 3);
      if (v31 >= v30 >> 1) {
        BOOL v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v22);
      }
      double v32 = (double)v24 / (double)(v17 - 1);
      *(float *)&uint64_t v33 = MinX + v32 * v27;
      float v34 = MinY + v58 * v29;
      *((float *)&v33 + 1) = v34;
      *(float *)&double v32 = v32;
      HIDWORD(v32) = v57;
      *((void *)v22 + 2) = v31 + 1;
      uint64_t v35 = &v22[24 * v31];
      *((void *)v35 + 4) = v33;
      *((void *)v35 + 5) = v33;
      *((double *)v35 + 6) = v32;
      ++v24;
    }
    while (v17 != v24);
  }
  while (v23 != v21);
  if (v17 + 0x4000000000000000 < 0) {
    goto LABEL_63;
  }
  uint64_t v36 = (2 * v17) | 1;
  if ((unsigned __int128)(v56 * (__int128)v36) >> 64 == (v56 * v36) >> 63)
  {
    uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v56 * v36) & ~((v56 * v36) >> 63), 0, MEMORY[0x1E4FBC860]);
    uint64_t v38 = v21 - 1;
    uint64_t v39 = v37;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = v17;
    while ((unsigned __int128)(v41 * (__int128)v17) >> 64 == (v41 * v17) >> 63)
    {
      ++v41;
      if ((unsigned __int128)(v41 * (__int128)v17) >> 64 != (v41 * v17) >> 63) {
        goto LABEL_52;
      }
      for (uint64_t i = 0; i != v17; ++i)
      {
        if ((unint64_t)(v40 + i) >> 16)
        {
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        unint64_t v45 = *((void *)v39 + 2);
        unint64_t v44 = *((void *)v39 + 3);
        unint64_t v46 = v45 + 1;
        if (v45 >= v44 >> 1)
        {
          unint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1, v39);
          uint64_t v38 = v21 - 1;
          uint64_t v39 = v50;
        }
        *((void *)v39 + 2) = v46;
        *(_WORD *)&v39[2 * v45 + 32] = v40 + i;
        if (v42 < 0) {
          goto LABEL_49;
        }
        __int16 v47 = v42 + i;
        if ((unint64_t)(v42 + i) >> 16) {
          goto LABEL_50;
        }
        unint64_t v48 = *((void *)v39 + 3);
        int64_t v49 = v45 + 2;
        if (v49 > (uint64_t)(v48 >> 1))
        {
          CGFloat v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), v49, 1, v39);
          uint64_t v38 = v21 - 1;
          uint64_t v39 = v51;
        }
        *((void *)v39 + 2) = v49;
        *(_WORD *)&v39[2 * v46 + 32] = v47;
      }
      unint64_t v53 = *((void *)v39 + 2);
      unint64_t v52 = *((void *)v39 + 3);
      if (v53 >= v52 >> 1)
      {
        uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, v39);
        uint64_t v38 = v21 - 1;
        uint64_t v39 = v54;
      }
      *((void *)v39 + 2) = v53 + 1;
      *(_WORD *)&v39[2 * v53 + 32] = -1;
      v42 += v17;
      v40 += v17;
      if (v41 == v38)
      {
        *(void *)uint64_t v55 = v22;
        *(void *)(v55 + 8) = v39;
        *(CGFloat *)(v55 + 16) = a3;
        *(CGFloat *)(v55 + 24) = a4;
        *(CGFloat *)(v55 + 32) = a5;
        *(CGFloat *)(v55 + 40) = a6;
        *(void *)(v55 + 48) = v17;
        *(void *)(v55 + 56) = v21;
        return;
      }
    }
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
}

char *specialized static PKRefineMorph.NStroke.normalized(stroke:step:)(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  float64x2_t v6 = 0uLL;
  uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
  char v8 = 1;
  double v9 = 0.0;
  do
  {
    float64x2_t v10 = v6;
    float64x2_t v6 = *(float64x2_t *)(v4 + 16 * v5);
    if (v8)
    {
      float64x2_t v37 = *(float64x2_t *)(v4 + 16 * v5);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
      }
      unint64_t v12 = *((void *)v7 + 2);
      unint64_t v11 = *((void *)v7 + 3);
      float64x2_t v6 = v37;
      if (v12 >= v11 >> 1)
      {
        uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v7);
        float64x2_t v6 = v37;
        uint64_t v7 = v23;
      }
      *((void *)v7 + 2) = v12 + 1;
      *(float64x2_t *)&v7[16 * v12 + 32] = v6;
    }
    else
    {
      float64x2_t v13 = vsubq_f64(v6, v10);
      double v14 = sqrt(vaddvq_f64(vmulq_f64(v13, v13)));
      if (v9 + v14 <= a2)
      {
        double v9 = v9 + v14;
      }
      else
      {
        float64x2_t v34 = v10;
        float64x2_t v35 = v13;
        float64x2_t v38 = *(float64x2_t *)(v4 + 16 * v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        unint64_t v16 = *((void *)v7 + 2);
        unint64_t v15 = *((void *)v7 + 3);
        float64x2_t v17 = v35;
        float64x2_t v6 = v38;
        if (v16 >= v15 >> 1)
        {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v7);
          float64x2_t v17 = v35;
          float64x2_t v6 = v38;
          uint64_t v7 = v24;
        }
        float64x2_t v18 = vaddq_f64(v34, vmulq_n_f64(v17, (a2 - v9) / v14));
        *((void *)v7 + 2) = v16 + 1;
        *(float64x2_t *)&v7[16 * v16 + 32] = v18;
        double v19 = v14 - (a2 - v9);
        if (v19 <= a2)
        {
          double v9 = v19;
        }
        else
        {
          unint64_t v20 = v16 + 3;
          do
          {
            unint64_t v21 = *((void *)v7 + 3);
            if (v20 - 2 >= v21 >> 1)
            {
              float64x2_t v36 = v18;
              BOOL v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v20 - 1, 1, v7);
              float64x2_t v18 = v36;
              float64x2_t v6 = v38;
              uint64_t v7 = v22;
            }
            float64x2_t v18 = vaddq_f64(v18, vmulq_n_f64(vsubq_f64(v6, v18), a2 / v19));
            *((void *)v7 + 2) = v20 - 1;
            *(float64x2_t *)&v7[16 * v20] = v18;
            double v19 = v19 - a2;
            double v9 = v19 + 0.0;
            ++v20;
          }
          while (v19 + 0.0 > a2);
        }
      }
    }
    char v8 = 0;
    ++v5;
  }
  while (v5 != v2);
  swift_bridgeObjectRelease();
  unint64_t v25 = *((void *)v7 + 2);
  if (v25)
  {
    unint64_t v26 = v25 - 1;
    float64x2_t v39 = *(float64x2_t *)(v4 + 16 * v2 - 16);
    float64x2_t v27 = vsubq_f64(v39, *(float64x2_t *)&v7[16 * v25 + 16]);
    double v28 = sqrt(vaddvq_f64(vmulq_f64(v27, v27)));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (v28 >= a2 * 0.5)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
      }
      unint64_t v26 = *((void *)v7 + 2);
      unint64_t v31 = *((void *)v7 + 3);
      float64x2_t v30 = v39;
      if (v26 >= v31 >> 1)
      {
        uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v26 + 1, 1, v7);
        float64x2_t v30 = v39;
        uint64_t v7 = v33;
      }
      *((void *)v7 + 2) = v26 + 1;
    }
    else
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
      }
      float64x2_t v30 = v39;
      if (v25 > *((void *)v7 + 2))
      {
        __break(1u);
        return (char *)MEMORY[0x1E4FBC860];
      }
    }
    *(float64x2_t *)&v7[16 * v26 + 32] = v30;
  }
  return v7;
}

uint64_t specialized static PKRefineMorph.calcMatches(fromDrawing:toDrawing:maxDist:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v52 = *(void *)(a1 + 16);
  if (!v52) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = a2;
  uint64_t v5 = a1 + 32;
  double v6 = a3 * a3;
  uint64_t v60 = a2 + 32;
  swift_bridgeObjectRetain();
  uint64_t v7 = v5;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  uint64_t v50 = v5;
  uint64_t v53 = v4;
  while (1)
  {
    uint64_t v12 = *(void *)(v7 + 8 * v8);
    uint64_t v54 = *(void *)(v12 + 16);
    if (v54) {
      break;
    }
LABEL_6:
    if (++v8 == v52) {
      goto LABEL_74;
    }
  }
  uint64_t v51 = v8;
  uint64_t v61 = *(void *)(v4 + 16);
  uint64_t v57 = *(void *)(v7 + 8 * v8);
  uint64_t v58 = v12 + 32;
  uint64_t result = swift_bridgeObjectRetain_n();
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v14 = *(void *)(v57 + 16);
  if (v13 >= v14)
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    return result;
  }
  float64x2_t v65 = *(float64x2_t *)(v58 + 16 * v13);
  unint64_t v59 = v13 + 1;
  float64x2_t v62 = 0u;
  if (v14 >= 2)
  {
    if (v13)
    {
      if (v13 >= v14 - 1)
      {
        float64x2_t v16 = *(float64x2_t *)(v58 + 16 * (v14 - 1));
        float64x2_t v17 = *(float64x2_t *)(v58 + 16 * v14 - 32);
      }
      else
      {
        if (v59 >= v14) {
          goto LABEL_76;
        }
        unint64_t v15 = v13 - 1;
        if (v15 >= v14) {
          goto LABEL_77;
        }
        float64x2_t v16 = *(float64x2_t *)(v58 + 16 * v59);
        float64x2_t v17 = *(float64x2_t *)(v58 + 16 * v15);
      }
    }
    else
    {
      float64x2_t v17 = *(float64x2_t *)(v57 + 32);
      float64x2_t v16 = *(float64x2_t *)(v57 + 48);
    }
    float64x2_t v18 = vsubq_f64(v16, v17);
    float64x2_t v62 = vdivq_f64(v18, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(vaddvq_f64(vmulq_f64(v18, v18)))), 0));
  }
  if (!v61)
  {
    double v19 = (char *)MEMORY[0x1E4FBC860];
    if (!*(void *)(MEMORY[0x1E4FBC860] + 16)) {
      goto LABEL_9;
    }
    goto LABEL_61;
  }
  uint64_t v55 = v10;
  uint64_t v56 = v9;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  double v19 = (char *)MEMORY[0x1E4FBC860];
  while (1)
  {
    unint64_t v20 = v19;
    uint64_t v21 = *(void *)(v60 + 8 * v10);
    uint64_t v22 = *(void *)(v21 + 16);
    if (v22) {
      break;
    }
    unint64_t v25 = (char *)MEMORY[0x1E4FBC860];
LABEL_45:
    double v19 = v20;
    uint64_t v37 = *((void *)v25 + 2);
    int64_t v38 = *((void *)v20 + 2);
    int64_t v39 = v38 + v37;
    if (__OFADD__(v38, v37)) {
      goto LABEL_70;
    }
    char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v39 <= *((void *)v20 + 3) >> 1)
    {
      if (*((void *)v25 + 2)) {
        goto LABEL_54;
      }
    }
    else
    {
      if (v38 <= v39) {
        int64_t v41 = v38 + v37;
      }
      else {
        int64_t v41 = v38;
      }
      double v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v41, 1, v20);
      if (*((void *)v25 + 2))
      {
LABEL_54:
        uint64_t v42 = *((void *)v19 + 2);
        if ((*((void *)v19 + 3) >> 1) - v42 < v37) {
          goto LABEL_72;
        }
        memcpy(&v19[24 * v42 + 32], v25 + 32, 24 * v37);
        if (v37)
        {
          uint64_t v43 = *((void *)v19 + 2);
          BOOL v44 = __OFADD__(v43, v37);
          uint64_t v45 = v43 + v37;
          if (v44) {
            goto LABEL_73;
          }
          *((void *)v19 + 2) = v45;
        }
        goto LABEL_24;
      }
    }
    if (v37) {
      goto LABEL_71;
    }
LABEL_24:
    ++v10;
    swift_bridgeObjectRelease();
    if (v10 == v61)
    {
      uint64_t v4 = v53;
      swift_bridgeObjectRelease();
      uint64_t v10 = v55;
      uint64_t v9 = v56;
      if (!*((void *)v19 + 2))
      {
LABEL_9:
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_10;
      }
LABEL_61:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        double v19 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v19);
      }
      uint64_t v46 = *((void *)v19 + 2);
      v66[0] = (uint64_t)(v19 + 32);
      v66[1] = v46;
      specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v66);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, (char *)v10);
        uint64_t v10 = result;
      }
      unint64_t v48 = *(void *)(v10 + 16);
      unint64_t v47 = *(void *)(v10 + 24);
      if (v48 >= v47 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), v48 + 1, 1, (char *)v10);
        uint64_t v10 = result;
      }
      *(void *)(v10 + 16) = v48 + 1;
      unint64_t v49 = v10 + 32 * v48;
      *(float64x2_t *)(v49 + 32) = v65;
      *(void *)(v49 + 48) = v19;
      *(void *)(v49 + 56) = 0;
LABEL_10:
      unint64_t v13 = v59;
      if (v59 == v54)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v7 = v50;
        uint64_t v8 = v51;
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRetain();
  int64_t v23 = 0;
  uint64_t v24 = (float64x2_t *)(v21 + 32);
  unint64_t v25 = (char *)MEMORY[0x1E4FBC860];
  while (1)
  {
    unint64_t v27 = v23 + 1;
    float64x2_t v28 = vsubq_f64(*v24, v65);
    double v29 = vaddvq_f64(vmulq_f64(v28, v28));
    if (v29 < v6) {
      break;
    }
LABEL_28:
    ++v24;
    int64_t v23 = v27;
    if (v22 == v27)
    {
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
  }
  float64x2_t v64 = *v24;
  unint64_t v30 = *(void *)(v21 + 16);
  float64x2_t v31 = 0uLL;
  if (v30 < 2) {
    goto LABEL_39;
  }
  if (!v23)
  {
    float64x2_t v33 = *(float64x2_t *)(v21 + 32);
    float64x2_t v32 = *(float64x2_t *)(v21 + 48);
    goto LABEL_38;
  }
  if (v23 >= (uint64_t)(v30 - 1))
  {
    float64x2_t v32 = *(float64x2_t *)(v21 + 32 + 16 * (v30 - 1));
    float64x2_t v33 = *(float64x2_t *)(v21 + 16 * v30);
    goto LABEL_38;
  }
  if (v27 < v30)
  {
    if (v23 - 1 >= v30) {
      goto LABEL_69;
    }
    float64x2_t v32 = v24[1];
    float64x2_t v33 = v24[-1];
LABEL_38:
    float64x2_t v34 = vsubq_f64(v32, v33);
    float64x2_t v31 = vdivq_f64(v34, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(vaddvq_f64(vmulq_f64(v34, v34)))), 0));
LABEL_39:
    float64x2_t v63 = v31;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v25 + 2) + 1, 1, v25);
    }
    unint64_t v36 = *((void *)v25 + 2);
    unint64_t v35 = *((void *)v25 + 3);
    if (v36 >= v35 >> 1) {
      unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v25);
    }
    *((void *)v25 + 2) = v36 + 1;
    unint64_t v26 = &v25[24 * v36];
    *((double *)v26 + 4) = v29 / a3 + fabs(vaddvq_f64(vmulq_f64(v62, v63))) * -200.0;
    *(float64x2_t *)(v26 + 40) = v64;
    goto LABEL_28;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t specialized Array.replaceSubrange<A>(_:with:)(unint64_t result, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v8 = *v6;
  int64_t v9 = *(void *)(*v6 + 16);
  if (v9 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v10 = result;
  unint64_t v11 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v13 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v14 = v13 - v11;
  if (__OFSUB__(v13, v11))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int64_t v15 = v9 + v14;
  if (__OFADD__(v9, v14))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    return result;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (!result || v15 > *(void *)(v8 + 24) >> 1)
  {
    if (v9 <= v15) {
      int64_t v17 = v9 + v14;
    }
    else {
      int64_t v17 = v9;
    }
    uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v17, 1, (char *)v8);
    unint64_t v8 = result;
  }
  float64x2_t v18 = (void *)(v8 + 32 + 24 * v10);
  if (!v14) {
    goto LABEL_20;
  }
  uint64_t v19 = *(void *)(v8 + 16);
  BOOL v20 = __OFSUB__(v19, a2);
  uint64_t v21 = v19 - a2;
  if (v20) {
    goto LABEL_29;
  }
  uint64_t result = (unint64_t)v18 + 24 * v13;
  uint64_t v22 = (const void *)(v8 + 32 + 24 * a2);
  if ((const void *)result != v22 || result >= (unint64_t)v22 + 24 * v21) {
    uint64_t result = (unint64_t)memmove((void *)result, v22, 24 * v21);
  }
  uint64_t v23 = *(void *)(v8 + 16);
  BOOL v20 = __OFADD__(v23, v14);
  uint64_t v24 = v23 + v14;
  if (v20) {
    goto LABEL_30;
  }
  *(void *)(v8 + 16) = v24;
LABEL_20:
  if (v13 >= 1) {
    uint64_t result = (unint64_t)memcpy(v18, (const void *)(a4 + 24 * a5), 24 * v13);
  }
  unint64_t *v6 = v8;
  return result;
}

uint64_t specialized Array.subscript.setter(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  if ((a5 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = *(void *)(*(void *)v6 + 16);
  if (v7 < a5 || (uint64_t)v7 < a6) {
    goto LABEL_14;
  }
  if (a6 < 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  if (*(void *)v6 + 24 * a5 + 32 != a2 + 24 * a3) {
    return specialized Array.replaceSubrange<A>(_:with:)(a5, a6, result, a2, a3, a4);
  }
  if ((uint64_t)(a4 >> 1) < a3) {
    goto LABEL_16;
  }
  if (a5 != a3 || a4 >> 1 != a6) {
    return specialized Array.replaceSubrange<A>(_:with:)(a5, a6, result, a2, a3, a4);
  }
  return result;
}

unint64_t specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = a3 - v4;
  if (__OFSUB__(a3, v4))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!v6) {
    goto LABEL_13;
  }
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(v7 + 16);
  BOOL v9 = __OFSUB__(v8, a2);
  uint64_t v10 = v8 - a2;
  if (v9) {
    goto LABEL_17;
  }
  uint64_t result = v7 + 32 + 24 * result + 24 * a3;
  unint64_t v11 = (const void *)(v7 + 32 + 24 * a2);
  if ((const void *)result != v11 || result >= (unint64_t)v11 + 24 * v10) {
    uint64_t result = (unint64_t)memmove((void *)result, v11, 24 * v10);
  }
  uint64_t v13 = *(void *)(v7 + 16);
  BOOL v9 = __OFADD__(v13, v6);
  uint64_t v14 = v13 + v6;
  if (v9) {
    goto LABEL_18;
  }
  *(void *)(v7 + 16) = v14;
LABEL_13:
  if (a3 > 0) {
LABEL_19:
  }
    __break(1u);
  return result;
}

uint64_t specialized static PKRefineMorph.computeMorph(from:to:fromViewFrame:toViewFrame:transformViewToModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, CGAffineTransform *a3@<X2>, _OWORD *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, double a9@<D4>, double a10@<D5>, double a11@<D6>, double a12@<D7>)
{
  uint64_t v14 = a2;
  *(double *)&v222[16] = a11;
  *(double *)&v222[24] = a12;
  *(double *)v222 = a9;
  *(double *)&v222[8] = a10;
  *(double *)&v221[16] = a7;
  *(double *)&v221[24] = a8;
  *(double *)v221 = a5;
  *(double *)&v221[8] = a6;
  int64_t v15 = *(void *)(a1 + 16);
  CGFloat v16 = MEMORY[0x1E4FBC860];
  if (!v15)
  {
    CGFloat v19 = MEMORY[0x1E4FBC860];
LABEL_25:
    uint64_t v249 = *(void *)&v19;
    int64_t v39 = *(void *)(v14 + 16);
    if (v39)
    {
      *(void *)&v253.CGFloat a = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39, 0);
      uint64_t v40 = 0;
      CGFloat a = v253.a;
      int64_t v232 = v39;
      uint64_t v236 = v14 + 32;
      do
      {
        uint64_t v240 = v40;
        CGFloat v244 = a;
        uint64_t v42 = one-time initialization token for strokePolygonStep;
        id v43 = *(id *)(v236 + 8 * v40);
        if (v42 != -1) {
          swift_once();
        }
        double v44 = *(double *)&static PKRefineMorph.strokePolygonStep;
        *(double *)&unint64_t v24 = COERCE_DOUBLE(v43);
        id v45 = objc_msgSend((id)v24, sel_path);
        if (!v45) {
          id v45 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
        }

        int64_t v46 = (int64_t)objc_msgSend(v45, sel_count);
        if (((unint64_t)objc_msgSend(v45, sel_count) & 0x8000000000000000) != 0) {
          goto LABEL_218;
        }
        id v47 = objc_msgSend(v45, sel_count);
        if (v46 < 0 || (uint64_t)v47 < v46) {
          goto LABEL_219;
        }
        if (v46)
        {
          *(void *)&toTransform.CGFloat a = MEMORY[0x1E4FBC860];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46, 0);
          uint64_t v48 = 0;
          CGFloat v49 = toTransform.a;
          do
          {
            if (v46 == v48) {
              goto LABEL_195;
            }
            id v50 = objc_msgSend(v45, sel_objectAtIndexedSubscript_, v48);
            if (!v50) {
              goto LABEL_229;
            }
            uint64_t v51 = v50;
            objc_msgSend(v50, sel_location);
            CGFloat v53 = v52;
            CGFloat v55 = v54;
            objc_msgSend((id)v24, sel_transform);
            v262.CGFloat x = v53;
            v262.CGFloat y = v55;
            CGPoint v56 = CGPointApplyAffineTransform(v262, &v255);

            toTransform.CGFloat a = v49;
            CGFloat v12 = *(double *)(*(void *)&v49 + 16);
            unint64_t v57 = *(void *)(*(void *)&v49 + 24);
            if (*(void *)&v12 >= v57 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), *(void *)&v12 + 1, 1);
              CGFloat v49 = toTransform.a;
            }
            *(void *)(*(void *)&v49 + 16) = *(void *)&v12 + 1;
            *(CGPoint *)(*(void *)&v49 + 16 * *(void *)&v12 + 32) = v56;
            if (v48 >= (uint64_t)objc_msgSend(v45, sel_count)) {
              goto LABEL_196;
            }
            ++v48;
          }
          while (v46 != v48);
        }
        else
        {

          CGFloat v49 = MEMORY[0x1E4FBC860];
        }
        uint64_t v58 = specialized static PKRefineMorph.NStroke.normalized(stroke:step:)(*(uint64_t *)&v49, v44);

        swift_bridgeObjectRelease();
        CGFloat a = v244;
        v253.CGFloat a = v244;
        unint64_t v60 = *(void *)(*(void *)&v244 + 16);
        unint64_t v59 = *(void *)(*(void *)&v244 + 24);
        if (v60 >= v59 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v60 + 1, 1);
          CGFloat a = v253.a;
        }
        uint64_t v40 = v240 + 1;
        *(void *)(*(void *)&a + 16) = v60 + 1;
        *(void *)(*(void *)&a + 8 * v60 + 32) = v58;
      }
      while (v240 + 1 != v232);
      CGFloat v61 = MEMORY[0x1E4FBC860];
    }
    else
    {
      CGFloat a = MEMORY[0x1E4FBC860];
      CGFloat v61 = MEMORY[0x1E4FBC860];
    }
    uint64_t v258 = *(void *)&a;
    uint64_t v62 = swift_bridgeObjectRetain();
    double v63 = PKRefineMorph.NDrawing.bounds.getter(v62);
    double v65 = v64;
    double v67 = v66;
    double v69 = v68;
    swift_bridgeObjectRelease();
    double v70 = PKRefineMorph.NDrawing.bounds.getter(v249);
    double v218 = v71 / v67;
    double v219 = v70 - v63 * (v71 / v67);
    by.CGFloat a = v71 / v67;
    by.CGFloat b = 0.0;
    by.CGFloat c = 0.0;
    double v220 = v72 / v69;
    by.CGFloat d = v72 / v69;
    by.CGFloat tx = v219;
    double v217 = v73 - v65 * (v72 / v69);
    by.CGFloat ty = v217;
    PKRefineMorph.NDrawing.transform(by:)(&by);
    uint64_t v74 = v258;
    uint64_t v75 = swift_bridgeObjectRetain();
    double v76 = PKRefineMorph.NDrawing.bounds.getter(v75);
    CGFloat v78 = v77;
    CGFloat v80 = v79;
    CGFloat v82 = v81;
    swift_bridgeObjectRelease();
    v267.origin.CGFloat x = PKRefineMorph.NDrawing.bounds.getter(v249);
    v267.origin.CGFloat y = v83;
    v267.size.CGFloat width = v84;
    v267.size.CGFloat height = v85;
    v263.origin.CGFloat x = v76;
    v263.origin.CGFloat y = v78;
    v263.size.CGFloat width = v80;
    v263.size.CGFloat height = v82;
    CGRect v264 = CGRectUnion(v263, v267);
    CGFloat x = v264.origin.x;
    CGFloat y = v264.origin.y;
    CGFloat width = v264.size.width;
    CGFloat height = v264.size.height;
    double v90 = CGRectGetWidth(v264);
    v265.origin.CGFloat x = x;
    v265.origin.CGFloat y = y;
    v265.size.CGFloat width = width;
    v265.size.CGFloat height = height;
    double v91 = CGRectGetHeight(v265);
    if (v90 > v91) {
      double v91 = v90;
    }
    double v13 = v91 * 0.25;
    swift_bridgeObjectRetain();
    *(double *)&unint64_t v24 = COERCE_DOUBLE(specialized static PKRefineMorph.calcMatches(fromDrawing:toDrawing:maxDist:)(v249, v74, v13));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    CGFloat v257 = v61;
    uint64_t v92 = *(void *)(v24 + 16);
    if (v92)
    {
      double v226 = v13;
      unint64_t v233 = v24 + 32;
      swift_bridgeObjectRetain();
      CGFloat v12 = 0.0;
      v229 = (double *)(v24 + 40);
      uint64_t v93 = &OBJC_IVAR___PKTextInputResultCommand__queryItem;
      double v13 = 3.0;
      CGFloat v250 = v61;
      unint64_t v227 = v24;
      do
      {
        if (*(void *)&v12 >= *(void *)(v24 + 16)) {
          goto LABEL_216;
        }
        unint64_t v94 = (double *)(v233 + 32 * *(void *)&v12);
        double v96 = *v94;
        double v95 = v94[1];
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          CGFloat v250 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v250 + 16) + 1, 1, *(void **)&v250));
        }
        unint64_t v98 = *(void *)(*(void *)&v250 + 16);
        unint64_t v97 = *(void *)(*(void *)&v250 + 24);
        if (v98 >= v97 >> 1) {
          CGFloat v250 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v97 > 1), v98 + 1, 1, *(void **)&v250));
        }
        uint64_t v237 = *(void *)&v12 + 1;
        *(void *)(*(void *)&v250 + 16) = v98 + 1;
        v245 = (void *)(*(void *)&v250 + 32);
        *(CGFloat *)(*(void *)&v250 + 32 + 8 * v98) = v61;
        swift_bridgeObjectRetain();
        uint64_t v99 = 0;
        uint64_t v100 = v229;
        do
        {
          if (*(void *)&v12 != v99)
          {
            double v103 = *(v100 - 1);
            double v102 = *v100;
            if (*((void *)v93 + 477) != -1) {
              swift_once();
            }
            double v104 = fmin((sqrt((v95 - v102) * (v95 - v102) + (v96 - v103) * (v96 - v103))- *(double *)&static PKRefineMorph.nearbyThreshold)/ (0.0 - *(double *)&static PKRefineMorph.nearbyThreshold), 1.0);
            if (v104 < 0.0) {
              double v104 = 0.0;
            }
            double v105 = v104 * (v104 * 3.0) - v104 * (v104 * (v104 + v104));
            if (v105 > 0.1)
            {
              uint64_t v106 = *(void *)(*(void *)&v250 + 16);
              if (!v106) {
                goto LABEL_197;
              }
              CGRect v107 = v93;
              uint64_t v108 = v106 - 1;
              uint64_t v109 = v106 - 1;
              CGRect v110 = (char *)v245[v109];
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v245[v109] = v110;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                CGRect v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v110 + 2) + 1, 1, v110);
                v245[v108] = v110;
              }
              unint64_t v113 = *((void *)v110 + 2);
              unint64_t v112 = *((void *)v110 + 3);
              if (v113 >= v112 >> 1)
              {
                CGRect v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v112 > 1), v113 + 1, 1, v110);
                v245[v108] = v110;
              }
              *((void *)v110 + 2) = v113 + 1;
              CGRect v101 = &v110[16 * v113];
              *((double *)v101 + 4) = v105;
              *((void *)v101 + 5) = v99;
              uint64_t v93 = v107;
            }
          }
          ++v99;
          v100 += 4;
        }
        while (v92 != v99);
        swift_bridgeObjectRelease();
        unint64_t v24 = v227;
        swift_bridgeObjectRelease();
        ++*(void *)&v12;
        CGFloat v61 = MEMORY[0x1E4FBC860];
      }
      while (v237 != v92);
      swift_bridgeObjectRelease();
      CGFloat v257 = v250;
      double v13 = v226;
    }
    specialized morphCost #2 (of:) in static PKRefineMorph.computeMorph(from:to:fromViewFrame:toViewFrame:transformViewToModel:)(v24, (uint64_t)&v257);
    v255.CGFloat a = v61;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    CGFloat v12 = v255.a;
    uint64_t v114 = *(void *)(v24 + 16);
    swift_bridgeObjectRetain();
    if (v114)
    {
      unint64_t v115 = 0;
      CGRect v116 = (unint64_t *)(v24 + 56);
      do
      {
        specialized morphCost #1 (of:match:in:) in static PKRefineMorph.computeMorph(from:to:fromViewFrame:toViewFrame:transformViewToModel:)(v115, *(v116 - 1), *v116, v24, (uint64_t)&v257, *((float64_t *)v116 - 3), *((float64_t *)v116 - 2));
        uint64_t v118 = v117;
        v255.CGFloat a = v12;
        unint64_t v120 = *(void *)(*(void *)&v12 + 16);
        unint64_t v119 = *(void *)(*(void *)&v12 + 24);
        if (v120 >= v119 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v119 > 1), v120 + 1, 1);
          CGFloat v12 = v255.a;
        }
        ++v115;
        *(void *)(*(void *)&v12 + 16) = v120 + 1;
        *(void *)(*(void *)&v12 + 8 * v120 + 32) = v118;
        v116 += 4;
      }
      while (v114 != v115);
    }
    swift_bridgeObjectRelease_n();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_228;
    }
    while (1)
    {
      *(double *)&uint64_t v121 = MEMORY[0x1E4FBC860];
      swift_beginAccess();
      uint64_t v122 = 0;
      uint64_t v246 = *(void *)&v12 + 32;
      double v225 = v12;
      while (1)
      {
        uint64_t v123 = v122;
        HIDWORD(v124) = -1030792151 * (unsigned __int16)v122;
        LODWORD(v124) = HIDWORD(v124);
        if ((v124 >> 1) <= 0x51EB851)
        {
          uint64_t v152 = *(void *)(v24 + 16);
          if (v152) {
            break;
          }
        }
LABEL_82:
        *(double *)&unint64_t v234 = COERCE_DOUBLE(specialized Dictionary.init(dictionaryLiteral:)(v121));
        unint64_t v125 = *(void *)(v24 + 16);
        unint64_t v126 = v24 + 32;
        swift_bridgeObjectRetain();
        CGFloat v127 = *(double *)&v121;
        unint64_t v128 = 0;
LABEL_83:
        if (v128 <= v125) {
          unint64_t v129 = v125;
        }
        else {
          unint64_t v129 = v128;
        }
        uint64_t v130 = 32 * v128 + 48;
        while (v125 != v128)
        {
          if (v129 == v128)
          {
            __break(1u);
LABEL_201:
            __break(1u);
LABEL_202:
            __break(1u);
LABEL_203:
            __break(1u);
LABEL_204:
            __break(1u);
LABEL_205:
            __break(1u);
LABEL_206:
            __break(1u);
LABEL_207:
            __break(1u);
LABEL_208:
            __break(1u);
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
LABEL_212:
            __break(1u);
LABEL_213:
            __break(1u);
LABEL_214:
            __break(1u);
LABEL_215:
            __break(1u);
LABEL_216:
            __break(1u);
LABEL_217:
            __break(1u);
LABEL_218:
            __break(1u);
LABEL_219:
            __break(1u);
            goto LABEL_220;
          }
          if (v128 >= *(void *)(v24 + 16)) {
            goto LABEL_201;
          }
          ++v128;
          unint64_t v131 = *(void *)(*(void *)(v24 + v130) + 16);
          v130 += 32;
          if (v131 >= 2)
          {
            char v132 = swift_isUniquelyReferenced_nonNull_native();
            v255.CGFloat a = v127;
            if ((v132 & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v127 + 16) + 1, 1);
              CGFloat v127 = v255.a;
            }
            unint64_t v134 = *(void *)(*(void *)&v127 + 16);
            unint64_t v133 = *(void *)(*(void *)&v127 + 24);
            if (v134 >= v133 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v133 > 1), v134 + 1, 1);
              CGFloat v127 = v255.a;
            }
            *(void *)(*(void *)&v127 + 16) = v134 + 1;
            *(void *)(*(void *)&v127 + 8 * v134 + 32) = v128 - 1;
            goto LABEL_83;
          }
        }
        unint64_t v135 = *(void *)(*(void *)&v127 + 16);
        if (!v135) {
          goto LABEL_198;
        }
        uint64_t v228 = v123;
        uint64_t v230 = v123 + 1;
        unint64_t v136 = -(uint64_t)v135;
        do
        {
          v255.CGFloat a = 0.0;
          MEMORY[0x1C8784DD0](&v255, 8);
          uint64_t v137 = (*(unint64_t *)&v255.a * (unsigned __int128)v135) >> 64;
          if (v135 > *(void *)&v255.a * v135 && v136 % v135 > *(void *)&v255.a * v135)
          {
            do
            {
              v255.CGFloat a = 0.0;
              MEMORY[0x1C8784DD0](&v255, 8);
            }
            while (v136 % v135 > *(void *)&v255.a * v135);
            uint64_t v137 = (*(unint64_t *)&v255.a * (unsigned __int128)v135) >> 64;
          }
          if (v137 >= *(void *)(*(void *)&v127 + 16)) {
            goto LABEL_202;
          }
          int64_t v138 = *(void *)(*(void *)&v127 + 32 + 8 * v137);
          if (v138 < 0) {
            goto LABEL_203;
          }
          if ((unint64_t)v138 >= *(void *)(v24 + 16)) {
            goto LABEL_204;
          }
          unint64_t v139 = *(void *)(*(void *)(v126 + 32 * v138 + 16) + 16);
          if (!v139) {
            goto LABEL_205;
          }
          CGFloat v12 = *(double *)&v24;
          v255.CGFloat a = 0.0;
          MEMORY[0x1C8784DD0](&v255, 8);
          uint64_t v140 = (*(unint64_t *)&v255.a * (unsigned __int128)v139) >> 64;
          if (v139 > *(void *)&v255.a * v139)
          {
            unint64_t v24 = -(uint64_t)v139 % v139;
            if (v24 > *(void *)&v255.a * v139)
            {
              do
              {
                v255.CGFloat a = 0.0;
                MEMORY[0x1C8784DD0](&v255, 8);
              }
              while (v24 > *(void *)&v255.a * v139);
              uint64_t v140 = (*(unint64_t *)&v255.a * (unsigned __int128)v139) >> 64;
            }
          }
          if (v138 >= *(void *)(*(void *)&v12 + 16)) {
            goto LABEL_206;
          }
          *(double *)&unint64_t v24 = v12;
        }
        while (v140 == *(void *)(v126 + 32 * v138 + 24));
        swift_release();
        char v141 = swift_isUniquelyReferenced_nonNull_native();
        v142 = *(char **)&v12;
        if ((v141 & 1) == 0) {
          v142 = specialized _ArrayBuffer._consumeAndCreateNew()(*(uint64_t *)&v12);
        }
        if (v138 >= *((void *)v142 + 2)) {
          goto LABEL_226;
        }
        v251 = v142;
        v143 = v142 + 32;
        *(void *)&v142[32 * v138 + 56] = v140;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1C4826800;
        *(void *)(inited + 32) = v138;
        if (v138 >= *(void *)(*(void *)&v257 + 16)) {
          goto LABEL_227;
        }
        uint64_t v145 = *(void *)(*(void *)&v257 + 8 * v138 + 32);
        int64_t v146 = *(void *)(v145 + 16);
        if (v146)
        {
          uint64_t v241 = inited;
          *(void *)&v255.CGFloat a = MEMORY[0x1E4FBC860];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v146, 0);
          CGFloat v147 = v255.a;
          unint64_t v148 = *(void *)(*(void *)&v255.a + 16);
          uint64_t v149 = 40;
          do
          {
            uint64_t v150 = *(void *)(v145 + v149);
            v255.CGFloat a = v147;
            unint64_t v151 = *(void *)(*(void *)&v147 + 24);
            if (v148 >= v151 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v151 > 1), v148 + 1, 1);
              CGFloat v147 = v255.a;
            }
            *(void *)(*(void *)&v147 + 16) = v148 + 1;
            *(void *)(*(void *)&v147 + 8 * v148 + 32) = v150;
            v149 += 16;
            ++v148;
            --v146;
          }
          while (v146);
          swift_bridgeObjectRelease();
          *(double *)&unint64_t v24 = v12;
          uint64_t inited = v241;
        }
        else
        {
          CGFloat v147 = MEMORY[0x1E4FBC860];
        }
        *(void *)&v255.CGFloat a = inited;
        specialized Array.append<A>(contentsOf:)(*(uint64_t *)&v147);
        CGFloat v155 = v255.a;
        CGFloat v12 = v225;
        CGFloat v156 = *(double *)&v234;
        uint64_t v242 = *(void *)(*(void *)&v255.a + 16);
        if (v242)
        {
          unint64_t v157 = 0;
          uint64_t v238 = *(void *)&v255.a + 32;
          double v158 = 0.0;
          while (1)
          {
            if (v157 >= *(void *)(*(void *)&v155 + 16)) {
              goto LABEL_211;
            }
            unint64_t v159 = *(void *)(v238 + 8 * v157);
            if ((v159 & 0x8000000000000000) != 0) {
              goto LABEL_212;
            }
            if (v159 >= *(void *)(*(void *)&v225 + 16)) {
              goto LABEL_213;
            }
            unint64_t v160 = *((void *)v251 + 2);
            if (v159 >= v160) {
              goto LABEL_214;
            }
            if (v159 >= *(void *)(*(void *)&v257 + 16)) {
              goto LABEL_215;
            }
            double v161 = *(double *)(v246 + 8 * v159);
            uint64_t v162 = *(void *)(*(void *)&v257 + 8 * v159 + 32);
            uint64_t v163 = *(void *)(v162 + 16);
            if (v163)
            {
              v164 = &v143[32 * v159];
              unint64_t v165 = *((void *)v164 + 3);
              if ((v165 & 0x8000000000000000) != 0) {
                goto LABEL_222;
              }
              uint64_t v166 = *((void *)v164 + 2);
              if (v165 < *(void *)(v166 + 16))
              {
                float64x2_t v167 = *(float64x2_t *)v164;
                float64x2_t v168 = *(float64x2_t *)(v166 + 24 * v165 + 40);
                v169 = (double *)(v162 + 40);
                double v170 = 0.0;
                while (*(void *)v169 < v160)
                {
                  v171 = &v143[32 * *(void *)v169];
                  unint64_t v172 = *((void *)v171 + 3);
                  if ((v172 & 0x8000000000000000) != 0) {
                    goto LABEL_193;
                  }
                  uint64_t v173 = *((void *)v171 + 2);
                  if (v172 >= *(void *)(v173 + 16)) {
                    goto LABEL_194;
                  }
                  double v174 = *(v169 - 1);
                  v169 += 2;
                  float64x2_t v175 = vsubq_f64(vaddq_f64(vsubq_f64(v167, *(float64x2_t *)v171), *(float64x2_t *)(v173 + 24 * v172 + 40)), v168);
                  double v170 = v170 + v174 * vaddvq_f64(vmulq_f64(v175, v175)) * 1000.0;
                  if (!--v163) {
                    goto LABEL_149;
                  }
                }
                goto LABEL_192;
              }
              goto LABEL_223;
            }
            double v170 = 0.0;
LABEL_149:
            CGFloat v176 = v156;
            char v177 = swift_isUniquelyReferenced_nonNull_native();
            v255.CGFloat a = v176;
            unint64_t v179 = specialized __RawDictionaryStorage.find<A>(_:)(v159);
            uint64_t v180 = *(void *)(*(void *)&v176 + 16);
            BOOL v181 = (v178 & 1) == 0;
            uint64_t v182 = v180 + v181;
            if (__OFADD__(v180, v181)) {
              goto LABEL_217;
            }
            char v183 = v178;
            if (*(void *)(*(void *)&v176 + 24) >= v182)
            {
              if (v177)
              {
                CGFloat v156 = v255.a;
                if ((v178 & 1) == 0) {
                  goto LABEL_156;
                }
              }
              else
              {
                specialized _NativeDictionary.copy()();
                CGFloat v156 = v255.a;
                if ((v183 & 1) == 0) {
                  goto LABEL_156;
                }
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v182, v177);
              unint64_t v184 = specialized __RawDictionaryStorage.find<A>(_:)(v159);
              if ((v183 & 1) != (v185 & 1)) {
                goto LABEL_230;
              }
              unint64_t v179 = v184;
              CGFloat v156 = v255.a;
              if ((v183 & 1) == 0)
              {
LABEL_156:
                *(void *)(*(void *)&v156 + 8 * (v179 >> 6) + 64) |= 1 << v179;
                uint64_t v186 = 8 * v179;
                *(void *)(*(void *)(*(void *)&v156 + 48) + v186) = v159;
                *(double *)(*(void *)(*(void *)&v156 + 56) + v186) = v170;
                uint64_t v187 = *(void *)(*(void *)&v156 + 16);
                BOOL v188 = __OFADD__(v187, 1);
                uint64_t v189 = v187 + 1;
                if (v188) {
                  goto LABEL_224;
                }
                *(void *)(*(void *)&v156 + 16) = v189;
                goto LABEL_133;
              }
            }
            *(double *)(*(void *)(*(void *)&v156 + 56) + 8 * v179) = v170;
LABEL_133:
            ++v157;
            swift_bridgeObjectRelease();
            double v158 = v158 - v161 + v170;
            if (v157 == v242)
            {
              swift_bridgeObjectRelease();
              uint64_t v122 = v230;
              unint64_t v190 = (unint64_t)v251;
              if (v158 < 0.0) {
                goto LABEL_163;
              }
              goto LABEL_162;
            }
          }
        }
        swift_bridgeObjectRelease();
        double v158 = 0.0;
        uint64_t v122 = v230;
        unint64_t v190 = (unint64_t)v251;
LABEL_162:
        double v191 = exp(-v158 / (double)(5000 - v228));
        specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v192, 0.0, 1.0);
        if (v193 < v191)
        {
LABEL_163:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          int64_t v194 = 0;
          uint64_t v195 = *(void *)&v156 + 64;
          uint64_t v196 = 1 << *(unsigned char *)(*(void *)&v156 + 32);
          if (v196 < 64) {
            uint64_t v197 = ~(-1 << v196);
          }
          else {
            uint64_t v197 = -1;
          }
          unint64_t v198 = v197 & *(void *)(*(void *)&v156 + 64);
          int64_t v199 = (unint64_t)(v196 + 63) >> 6;
          if (v198)
          {
LABEL_167:
            unint64_t v200 = __clz(__rbit64(v198));
            v198 &= v198 - 1;
            unint64_t v201 = v200 | (v194 << 6);
            goto LABEL_182;
          }
          while (1)
          {
            int64_t v202 = v194 + 1;
            if (__OFADD__(v194, 1)) {
              goto LABEL_221;
            }
            if (v202 >= v199) {
              goto LABEL_186;
            }
            unint64_t v203 = *(void *)(v195 + 8 * v202);
            ++v194;
            if (!v203)
            {
              int64_t v194 = v202 + 1;
              if (v202 + 1 >= v199) {
                goto LABEL_186;
              }
              unint64_t v203 = *(void *)(v195 + 8 * v194);
              if (!v203)
              {
                int64_t v194 = v202 + 2;
                if (v202 + 2 >= v199) {
                  goto LABEL_186;
                }
                unint64_t v203 = *(void *)(v195 + 8 * v194);
                if (!v203)
                {
                  int64_t v204 = v202 + 3;
                  if (v204 >= v199)
                  {
LABEL_186:
                    swift_bridgeObjectRelease();
                    swift_release();
                    unint64_t v24 = v190;
                    goto LABEL_188;
                  }
                  unint64_t v203 = *(void *)(v195 + 8 * v204);
                  if (!v203)
                  {
                    while (1)
                    {
                      int64_t v194 = v204 + 1;
                      if (__OFADD__(v204, 1)) {
                        goto LABEL_225;
                      }
                      if (v194 >= v199) {
                        goto LABEL_186;
                      }
                      unint64_t v203 = *(void *)(v195 + 8 * v194);
                      ++v204;
                      if (v203) {
                        goto LABEL_181;
                      }
                    }
                  }
                  int64_t v194 = v204;
                }
              }
            }
LABEL_181:
            unint64_t v198 = (v203 - 1) & v203;
            unint64_t v201 = __clz(__rbit64(v203)) + (v194 << 6);
LABEL_182:
            uint64_t v205 = 8 * v201;
            unint64_t v206 = *(void *)(*(void *)(*(void *)&v156 + 48) + 8 * v201);
            if ((v206 & 0x8000000000000000) != 0) {
              goto LABEL_207;
            }
            if (v206 >= *(void *)(*(void *)&v225 + 16)) {
              goto LABEL_208;
            }
            *(void *)(v246 + 8 * v206) = *(void *)(*(void *)(*(void *)&v156 + 56) + v205);
            if (v198) {
              goto LABEL_167;
            }
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_188:
        *(double *)&uint64_t v121 = MEMORY[0x1E4FBC860];
        if (v122 == 5000) {
          goto LABEL_199;
        }
      }
      unint64_t v153 = 0;
      uint64_t v154 = 32;
      while (1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          *(double *)&unint64_t v24 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(v24));
        }
        if (v153 >= *(void *)(v24 + 16)) {
          break;
        }
        ++v153;
        PKRefineMorph.Match.filterMatches(distanceMatchCanJumpSqr:)(v13 * ((double)(5000 - v123) / 5000.0) * (v13 * ((double)(5000 - v123) / 5000.0)));
        v154 += 32;
        if (v152 == v153) {
          goto LABEL_82;
        }
      }
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      CGFloat v12 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(*(uint64_t *)&v12));
    }
  }
  *(void *)&v253.CGFloat a = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
  uint64_t v18 = 0;
  CGFloat v19 = v253.a;
  int64_t v235 = v15;
  uint64_t v239 = a1 + 32;
  while (1)
  {
    uint64_t v243 = v18;
    CGFloat v248 = v19;
    uint64_t v20 = one-time initialization token for strokePolygonStep;
    id v21 = *(id *)(v239 + 8 * v18);
    if (v20 != -1) {
      swift_once();
    }
    double v22 = *(double *)&static PKRefineMorph.strokePolygonStep;
    CGFloat v12 = COERCE_DOUBLE(v21);
    id v23 = objc_msgSend(*(id *)&v12, sel_path);
    if (!v23) {
      id v23 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
    }

    *(double *)&unint64_t v24 = COERCE_DOUBLE(objc_msgSend(v23, sel_count));
    if (((unint64_t)objc_msgSend(v23, sel_count) & 0x8000000000000000) != 0) {
      goto LABEL_209;
    }
    id v25 = objc_msgSend(v23, sel_count);
    if ((v24 & 0x8000000000000000) != 0 || (uint64_t)v25 < (uint64_t)v24) {
      goto LABEL_210;
    }
    if (*(double *)&v24 != 0.0) {
      break;
    }

    CGFloat v27 = v16;
LABEL_20:
    uint64_t v37 = specialized static PKRefineMorph.NStroke.normalized(stroke:step:)(*(uint64_t *)&v27, v22);

    swift_bridgeObjectRelease();
    CGFloat v19 = v248;
    v253.CGFloat a = v248;
    CGFloat v12 = *(double *)(*(void *)&v248 + 16);
    unint64_t v38 = *(void *)(*(void *)&v248 + 24);
    if (*(void *)&v12 >= v38 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), *(void *)&v12 + 1, 1);
      CGFloat v19 = v253.a;
    }
    uint64_t v18 = v243 + 1;
    *(void *)(*(void *)&v19 + 16) = *(void *)&v12 + 1;
    *(void *)(*(void *)&v19 + 8 * *(void *)&v12 + 32) = v37;
    if (v243 + 1 == v15)
    {
      uint64_t v14 = a2;
      goto LABEL_25;
    }
  }
  toTransform.CGFloat a = v16;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
  uint64_t v26 = 0;
  CGFloat v27 = toTransform.a;
  while (v24 != v26)
  {
    id v28 = objc_msgSend(v23, sel_objectAtIndexedSubscript_, v26);
    if (!v28)
    {
LABEL_229:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_230:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    double v29 = v28;
    objc_msgSend(v28, sel_location);
    CGFloat v31 = v30;
    CGFloat v33 = v32;
    objc_msgSend(*(id *)&v12, sel_transform);
    v261.CGFloat x = v31;
    v261.CGFloat y = v33;
    CGPoint v34 = CGPointApplyAffineTransform(v261, &v255);

    toTransform.CGFloat a = v27;
    unint64_t v36 = *(void *)(*(void *)&v27 + 16);
    unint64_t v35 = *(void *)(*(void *)&v27 + 24);
    if (v36 >= v35 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1);
      CGFloat v27 = toTransform.a;
    }
    *(void *)(*(void *)&v27 + 16) = v36 + 1;
    *(CGPoint *)(*(void *)&v27 + 16 * v36 + 32) = v34;
    if (v26 >= (uint64_t)objc_msgSend(v23, sel_count)) {
      goto LABEL_191;
    }
    if (v24 == ++v26)
    {

      CGFloat v16 = MEMORY[0x1E4FBC860];
      int64_t v15 = v235;
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
LABEL_198:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
LABEL_199:
  swift_bridgeObjectRelease();
  CGRect v266 = CGRectUnion(*(CGRect *)v221, *(CGRect *)v222);
  CGFloat v247 = v266.origin.y;
  CGFloat v252 = v266.origin.x;
  specialized PKRefineMorph.GridMesh.init(bounds:step:)(4, (uint64_t)&v255, *(CGFloat *)v221, *(CGFloat *)&v221[8], *(CGFloat *)&v221[16], *(CGFloat *)&v221[24]);
  v253.CGFloat a = v218;
  v253.CGFloat b = 0.0;
  v253.CGFloat c = 0.0;
  v253.CGFloat d = v220;
  v253.CGFloat tx = v219;
  v253.CGFloat ty = v217;
  CGAffineTransformInvert(&toTransform, &v253);
  uint64_t v207 = swift_bridgeObjectRetain();
  PKRefineMorph.GridMesh.morph(matches:toTransform:reversed:transformViewToModel:origin:)((Swift::OpaquePointer)v207, &toTransform, 0, a3, (CGPoint)__PAIR128__(*(unint64_t *)&v247, *(unint64_t *)&v252));
  swift_bridgeObjectRelease();
  specialized PKRefineMorph.GridMesh.init(bounds:step:)(4, (uint64_t)&v253, *(CGFloat *)v222, *(CGFloat *)&v222[8], *(CGFloat *)&v222[16], *(CGFloat *)&v222[24]);
  uint64_t v208 = swift_bridgeObjectRetain();
  PKRefineMorph.GridMesh.morph(matches:toTransform:reversed:transformViewToModel:origin:)((Swift::OpaquePointer)v208, &by, 1, a3, (CGPoint)__PAIR128__(*(unint64_t *)&v247, *(unint64_t *)&v252));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  long long v211 = *(_OWORD *)&v253.tx;
  long long v210 = v254;
  long long v213 = *(_OWORD *)&v253.a;
  long long v212 = *(_OWORD *)&v253.c;
  long long v215 = *(_OWORD *)&v255.tx;
  long long v214 = v256;
  long long v216 = *(_OWORD *)&v255.c;
  *a4 = *(_OWORD *)&v255.a;
  a4[1] = v216;
  a4[2] = v215;
  a4[3] = v214;
  a4[4] = v213;
  a4[5] = v212;
  a4[6] = v211;
  a4[7] = v210;
  return result;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

ValueMetadata *type metadata accessor for PKRefineMorph.NStroke()
{
  return &type metadata for PKRefineMorph.NStroke;
}

uint64_t destroy for PKRefineMorph.Match()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PKRefineMorph.Match(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PKRefineMorph.Match(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for PKRefineMorph.Match(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PKRefineMorph.Match(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PKRefineMorph.Match(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PKRefineMorph.Match()
{
  return &type metadata for PKRefineMorph.Match;
}

ValueMetadata *type metadata accessor for PKRefineMorph.Match.MatchTo()
{
  return &type metadata for PKRefineMorph.Match.MatchTo;
}

ValueMetadata *type metadata accessor for PKRefineMorph()
{
  return &type metadata for PKRefineMorph;
}

uint64_t destroy for PKRefineMorph.GridMesh()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PKRefineMorph.GridMesh(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PKRefineMorph.GridMesh(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_OWORD *assignWithTake for PKRefineMorph.GridMesh(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  long long v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  a1[3] = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for PKRefineMorph.GridMesh(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PKRefineMorph.GridMesh(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PKRefineMorph.GridMesh()
{
  return &type metadata for PKRefineMorph.GridMesh;
}

unint64_t lazy protocol witness table accessor for type PKRefineMorph.Match.MatchTo and conformance PKRefineMorph.Match.MatchTo()
{
  unint64_t result = lazy protocol witness table cache variable for type PKRefineMorph.Match.MatchTo and conformance PKRefineMorph.Match.MatchTo;
  if (!lazy protocol witness table cache variable for type PKRefineMorph.Match.MatchTo and conformance PKRefineMorph.Match.MatchTo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKRefineMorph.Match.MatchTo and conformance PKRefineMorph.Match.MatchTo);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PKRefineMorph.Match and conformance PKRefineMorph.Match()
{
  unint64_t result = lazy protocol witness table cache variable for type PKRefineMorph.Match and conformance PKRefineMorph.Match;
  if (!lazy protocol witness table cache variable for type PKRefineMorph.Match and conformance PKRefineMorph.Match)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKRefineMorph.Match and conformance PKRefineMorph.Match);
  }
  return result;
}

void __swiftcall PKDrawing._bridgeToObjectiveC()(PKDrawing *__return_ptr retstr)
{
  id v2 = *v1;
}

id static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id a1@<X0>, void *a2@<X8>)
{
  id v2 = a1;
  if (!a1)
  {
    a1 = objc_msgSend(objc_allocWithZone((Class)PKDrawing), sel_init);
    id v2 = 0;
  }
  *a2 = a1;

  return v2;
}

void __swiftcall PKDrawing.init()(PencilKit::PKDrawing *__return_ptr retstr)
{
  retstr->drawing.super.Class isa = (Class)objc_msgSend(objc_allocWithZone((Class)PKDrawing), sel_init);
}

uint64_t PKDrawing.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  id v7 = objc_allocWithZone((Class)PKDrawing);
  id v8 = specialized @nonobjc PKDrawing.init(data:)();
  uint64_t result = outlined consume of Data._Representation(a1, a2);
  if (!v3) {
    *a3 = v8;
  }
  return result;
}

uint64_t PKDrawing.dataRepresentation()()
{
  id v1 = objc_msgSend(*v0, sel_dataRepresentation);
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id PKDrawing.bounds.getter()
{
  return objc_msgSend(*v0, sel_bounds);
}

id PKDrawing.image(from:scale:)()
{
  id v1 = objc_msgSend(*v0, sel_imageFromRect_scale_);

  return v1;
}

Swift::Void __swiftcall PKDrawing.transform(using:)(CGAffineTransform *using)
{
  uint64_t v2 = *v1;
  long long v3 = *(_OWORD *)&using->c;
  v6[0] = *(_OWORD *)&using->a;
  v6[1] = v3;
  double v6[2] = *(_OWORD *)&using->tx;
  id v4 = objc_msgSend(v2, sel_drawingByApplyingTransform_, v6);
  if (v4)
  {
    id v5 = v4;

    id *v1 = v5;
  }
  else
  {
    __break(1u);
  }
}

void __swiftcall PKDrawing.transformed(using:)(PencilKit::PKDrawing *__return_ptr retstr, CGAffineTransform *using)
{
  id v4 = *v2;
  long long v5 = *(_OWORD *)&using->c;
  v7[0] = *(_OWORD *)&using->a;
  v7[1] = v5;
  v7[2] = *(_OWORD *)&using->tx;
  uint64_t v6 = (objc_class *)objc_msgSend(v4, sel_drawingByApplyingTransform_, v7);
  if (v6) {
    retstr->drawing.super.Class isa = v6;
  }
  else {
    __break(1u);
  }
}

Swift::Void __swiftcall PKDrawing.append(_:)(PencilKit::PKDrawing *a1)
{
  id v2 = *v1;
  id v3 = objc_msgSend(*v1, sel_drawingByAppendingDrawing_, a1->drawing.super.isa);
  if (v3)
  {
    id v4 = v3;

    id *v1 = v4;
  }
  else
  {
    __break(1u);
  }
}

void __swiftcall PKDrawing.appending(_:)(PencilKit::PKDrawing *__return_ptr retstr, PencilKit::PKDrawing *a2)
{
  id v4 = (objc_class *)objc_msgSend(*v2, sel_drawingByAppendingDrawing_, a2->drawing.super.isa);
  if (!v4) {
    id v4 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)PKDrawing), sel_init);
  }
  retstr->drawing.super.Class isa = v4;
}

id PKDrawing.requiredContentVersion.getter()
{
  return objc_msgSend(*v0, sel_requiredContentVersion);
}

uint64_t PKDrawing.init<A>(strokes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  Array.init<A>(_:)();
  id v8 = objc_allocWithZone((Class)PKDrawing);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v8, sel_initWithStrokes_, isa);

  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v10;
  return result;
}

uint64_t PKDrawing.strokes.getter()
{
  id v1 = objc_msgSend(*v0, sel_strokes);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = 0;
    uint64_t v5 = v10;
    do
    {
      unint64_t v6 = *(void *)(v10 + 16);
      unint64_t v7 = *(void *)(v10 + 24);
      id v8 = *(id *)(v2 + 8 * v4 + 32);
      if (v6 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v6 + 1, 1);
      }
      ++v4;
      *(void *)(v10 + 16) = v6 + 1;
      *(void *)(v10 + 8 * v6 + 32) = v8;
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return v5;
}

void key path setter for PKDrawing.strokes : PKDrawing(uint64_t a1, id *a2)
{
  id v3 = objc_allocWithZone((Class)PKDrawing);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithStrokes_, isa);

  *a2 = v5;
}

void PKDrawing.strokes.setter()
{
  id v1 = objc_allocWithZone((Class)PKDrawing);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v1, sel_initWithStrokes_, isa);

  id *v0 = v3;
}

void (*PKDrawing.strokes.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  *a1 = PKDrawing.strokes.getter();
  return PKDrawing.strokes.modify;
}

void PKDrawing.strokes.modify(uint64_t a1, char a2)
{
  id v4 = objc_allocWithZone((Class)PKDrawing);
  id v5 = *(id **)(a1 + 8);
  if (a2)
  {
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(v4, sel_initWithStrokes_, isa);

    *id v5 = v7;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class v8 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v9 = objc_msgSend(v4, sel_initWithStrokes_, v8);

    *id v5 = v9;
  }
}

uint64_t static PKDrawing.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t PKDrawing.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    id v5 = objc_allocWithZone((Class)PKDrawing);
    id v6 = specialized @nonobjc PKDrawing.init(data:)();
    outlined consume of Data._Representation(v8, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    *a2 = v6;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t PKDrawing.encode(to:)(void *a1)
{
  uint64_t v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  id v3 = objc_msgSend(v2, sel_dataRepresentation);
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
  lazy protocol witness table accessor for type Data and conformance Data();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  outlined consume of Data._Representation(v4, v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PKDrawing@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return PKDrawing.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PKDrawing(void *a1)
{
  return PKDrawing.encode(to:)(a1);
}

id static PKDrawing._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;

  return a1;
}

uint64_t static PKDrawing._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;
  id v4 = a1;
  return 1;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance PKDrawing@<X0>(id a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1;
  if (!a1)
  {
    a1 = objc_msgSend(objc_allocWithZone((Class)PKDrawing), sel_init);
    uint64_t v2 = 0;
  }
  *a2 = a1;

  return v2;
}

id specialized @nonobjc PKDrawing.init(data:)()
{
  v6[1] = *(id *)MEMORY[0x1E4F143B8];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_initWithData_error_, isa, v6);

  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1C452CA54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PKDrawing.strokes.getter();
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for PKDrawing()
{
  return &type metadata for PKDrawing;
}

id static PKInk._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
  }
  else
  {
    id v4 = objc_msgSend(self, sel_blackColor);
    unint64_t v5 = (void *)MEMORY[0x1C87824B0](0xD000000000000011, 0x80000001C481A030);
    id v3 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v5, v4);

    a1 = 0;
  }
  *a2 = v3;

  return a1;
}

void __swiftcall PKInk._bridgeToObjectiveC()(PKInk *__return_ptr retstr)
{
  id v2 = *v1;
}

void __swiftcall PKInk.init(_:color:)(PencilKit::PKInk *__return_ptr retstr, PencilKit::PKInkingTool::InkType _, UIColor color)
{
  uint64_t v4 = *(unsigned __int8 *)_;
  unint64_t v5 = 0xD000000000000011;
  unint64_t v6 = 0x80000001C481A030;
  switch(v4)
  {
    case 1:
      uint64_t v8 = "com.apple.ink.pencil";
      goto LABEL_9;
    case 2:
      uint64_t v8 = "com.apple.ink.marker";
      goto LABEL_9;
    case 3:
      unint64_t v5 = 0xD000000000000016;
      uint64_t v9 = "com.apple.ink.monoline";
      goto LABEL_7;
    case 4:
      unint64_t v5 = 0xD000000000000019;
      uint64_t v9 = "com.apple.ink.fountainpen";
      goto LABEL_7;
    case 5:
      unint64_t v5 = 0xD000000000000018;
      uint64_t v9 = "com.apple.ink.watercolor";
LABEL_7:
      unint64_t v6 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      break;
    case 6:
      uint64_t v8 = "com.apple.ink.crayon";
LABEL_9:
      unint64_t v6 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000014;
      break;
    default:
      break;
  }
  uint64_t v10 = (void *)MEMORY[0x1C87824B0](v5, v6);
  swift_bridgeObjectRelease();
  unint64_t v11 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v10, color.super.isa);

  retstr->ink.super.Class isa = v11;
}

void PKInk.inkType.getter(unsigned char *a1@<X8>)
{
  id v3 = objc_msgSend(*v1, sel_inkType);
  v4._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  PKInkingTool.InkType.init(rawValue:)(v4);
  if (v5 == 7)
  {
    __break(1u);
  }
  else
  {

    *a1 = v5;
  }
}

void key path getter for PKInk.inkType : PKInk(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = *a1;
  id v4 = objc_msgSend(v3, sel_inkType);
  v5._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  PKInkingTool.InkType.init(rawValue:)(v5);
  if (v6 == 7)
  {
    __break(1u);
  }
  else
  {

    *a2 = v6;
  }
}

void PKInk.inkType.setter(unsigned __int8 *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xD000000000000011;
  unint64_t v4 = 0x80000001C481A030;
  switch(v2)
  {
    case 1:
      Swift::String v5 = "com.apple.ink.pencil";
      goto LABEL_9;
    case 2:
      Swift::String v5 = "com.apple.ink.marker";
      goto LABEL_9;
    case 3:
      unint64_t v3 = 0xD000000000000016;
      char v6 = "com.apple.ink.monoline";
      goto LABEL_7;
    case 4:
      unint64_t v3 = 0xD000000000000019;
      char v6 = "com.apple.ink.fountainpen";
      goto LABEL_7;
    case 5:
      unint64_t v3 = 0xD000000000000018;
      char v6 = "com.apple.ink.watercolor";
LABEL_7:
      unint64_t v4 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 6:
      Swift::String v5 = "com.apple.ink.crayon";
LABEL_9:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD000000000000014;
      break;
    default:
      break;
  }
  id v7 = (void *)MEMORY[0x1C87824B0](v3, v4);
  swift_bridgeObjectRelease();
  id v8 = *v1;
  id v9 = objc_msgSend(*v1, sel_color);
  id v10 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v7, v9);

  id *v1 = v10;
}

id PKInk.color.getter()
{
  id v1 = objc_msgSend(*v0, sel_color);

  return v1;
}

char PKInk.inkType.modify(uint64_t a1)
{
  *(void *)a1 = v1;
  id v3 = objc_msgSend(*v1, sel_inkType);
  v4._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  LOBYTE(v5) = PKInkingTool.InkType.init(rawValue:)(v4);
  if (v7 == 7)
  {
    __break(1u);
  }
  else
  {

    *(unsigned char *)(a1 + 8) = v7;
    return (char)PKInk.inkType.modify;
  }
  return v5;
}

void PKInk.inkType.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    char v3 = *(unsigned char *)(a1 + 8);
    uint64_t v2 = (unsigned __int8 *)&v3;
  }
  else
  {
    char v4 = *(unsigned char *)(a1 + 8);
    uint64_t v2 = (unsigned __int8 *)&v4;
  }
  PKInk.inkType.setter(v2);
}

void key path setter for PKInk.color : PKInk(void *a1, void *a2)
{
  char v3 = (void *)*a2;
  id v4 = objc_msgSend(self, sel_inkFromInk_color_, *a2, *a1);

  *a2 = v4;
}

void PKInk.color.setter(void *a1)
{
  char v3 = *v1;
  id v4 = self;
  id v5 = v3;
  id v6 = objc_msgSend(v4, sel_inkFromInk_color_, v5, a1);

  id *v1 = v6;
}

void (*PKInk.color.modify(void *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  *a1 = objc_msgSend(*v1, sel_color);
  return PKInk.color.modify;
}

void PKInk.color.modify(uint64_t a1, char a2)
{
  char v3 = *(void ***)(a1 + 8);
  id v10 = *(id *)a1;
  id v4 = *v3;
  id v5 = self;
  id v6 = v5;
  if (a2)
  {
    id v7 = objc_msgSend(v5, sel_inkFromInk_color_, v4, v10);

    *char v3 = v7;
  }
  else
  {
    id v8 = v4;
    id v9 = objc_msgSend(v6, sel_inkFromInk_color_, v8, v10);

    *char v3 = v9;
  }
}

id PKInk.requiredContentVersion.getter()
{
  return objc_msgSend(*v0, sel_requiredContentVersion);
}

id static PKInk._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;

  return a1;
}

uint64_t static PKInk._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;
  id v4 = a1;
  return 1;
}

void sub_1C452D2B8(unsigned __int8 *a1)
{
  unsigned __int8 v1 = *a1;
  PKInk.inkType.setter(&v1);
}

id sub_1C452D2F0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_color);
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for PKInk()
{
  return &type metadata for PKInk;
}

void __swiftcall PKStrokePath.InterpolatedSlice.next()(PencilKit::PKStrokePoint_optional *__return_ptr retstr)
{
  uint64_t v2 = v1;
  double v5 = *(double *)(v2 + 32);
  double v4 = *(double *)(v2 + 40);
  if (v5 < v4)
  {
    retstr->value.strokePoint.super.Class isa = 0;
    return;
  }
  id v6 = *(id *)v2;
  id v7 = (objc_class *)objc_msgSend(v6, sel_interpolatedPointAt_, v4);
  id v8 = v7;
  if (v5 <= v4 + 0.001)
  {
    if (v7)
    {

      retstr->value.strokePoint.super.Class isa = v8;
      double v10 = v4 + 1.0;
      goto LABEL_8;
    }
  }
  else if (v7)
  {

    retstr->value.strokePoint.super.Class isa = v8;
    id v13 = v6;
    char v9 = *(unsigned char *)(v2 + 16);
    uint64_t v11 = *(void *)(v2 + 8);
    char v12 = v9;
    PKStrokePath.parametricValue(_:offsetBy:)((uint64_t)&v11, v4);
LABEL_8:
    *(double *)(v2 + 40) = v10;
    return;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double protocol witness for Sequence.makeIterator() in conformance PKStrokePath.InterpolatedSlice@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  double result = *(double *)(v1 + 40);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance PKStrokePath.InterpolatedSlice()
{
  return 0;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance PKStrokePath.InterpolatedSlice()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance PKStrokePath.InterpolatedSlice()
{
  long long v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  v4[2] = v0[2];
  uint64_t v2 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v4);
  outlined release of PKStrokePath.InterpolatedSlice((id *)v4);
  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance PKStrokePath.InterpolatedSlice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance PKStrokePath.InterpolatedSlice()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type PKStrokePath.InterpolatedSlice and conformance PKStrokePath.InterpolatedSlice()
{
  unint64_t result = lazy protocol witness table cache variable for type PKStrokePath.InterpolatedSlice and conformance PKStrokePath.InterpolatedSlice;
  if (!lazy protocol witness table cache variable for type PKStrokePath.InterpolatedSlice and conformance PKStrokePath.InterpolatedSlice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokePath.InterpolatedSlice and conformance PKStrokePath.InterpolatedSlice);
  }
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  double v2 = *(double *)(a1 + 32);
  double v1 = *(double *)(a1 + 40);
  char v3 = (void *)MEMORY[0x1E4FBC860];
  if (v2 >= v1)
  {
    outlined init with take of PKStrokePath.InterpolatedSlice.Stride(a1 + 8, (uint64_t)v32);
    id v6 = *(id *)a1;
    outlined retain of PKStrokePath.InterpolatedSlice((id *)a1);
    uint64_t v4 = 0;
    id v7 = v3 + 4;
    id v8 = &selRef_copyWithWeight_;
    while (1)
    {
      id v9 = v6;
      id v10 = objc_msgSend(v9, sel_interpolatedPointAt_, v1);
      id v11 = v10;
      if (v2 <= v1 + 0.001)
      {
        if (!v10) {
          goto LABEL_46;
        }
        outlined release of PKStrokePath.InterpolatedSlice((id *)a1);
        double v1 = v1 + 1.0;
      }
      else
      {
        if (!v10) {
          goto LABEL_46;
        }

        outlined init with take of PKStrokePath.InterpolatedSlice.Stride((uint64_t)v32, (uint64_t)&v33);
        if (!v34)
        {
          objc_msgSend(v9, sel_parametricValue_offsetByDistance_, v1, v33);
          goto LABEL_12;
        }
        if (v34 == 1)
        {
          objc_msgSend(v9, sel_parametricValue_offsetByTime_, v1, v33);
LABEL_12:
          double v1 = v12;
          goto LABEL_13;
        }
        double v24 = v33;
        id v25 = v9;
        int64_t v26 = (int64_t)[v25 v8[13]];
        if (((unint64_t)[v25 v8[13]] & 0x8000000000000000) != 0) {
          goto LABEL_43;
        }
        id v27 = [v25 v8[13]];

        if (v26 < 0 || (uint64_t)v27 < v26) {
          goto LABEL_44;
        }
        if (v1 + v24 >= (double)(v26 - 1)) {
          double v1 = (double)(v26 - 1);
        }
        else {
          double v1 = v1 + v24;
        }
        id v8 = &selRef_copyWithWeight_;
        if (v1 < 0.0) {
          double v1 = 0.0;
        }
      }
LABEL_13:
      if (!v4)
      {
        unint64_t v13 = v3[3];
        if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_42;
        }
        int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
        if (v14 <= 1) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = v14;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKStrokePoint>);
        CGFloat v16 = (void *)swift_allocObject();
        int64_t v17 = _swift_stdlib_malloc_size(v16);
        uint64_t v18 = v17 - 32;
        if (v17 < 32) {
          uint64_t v18 = v17 - 25;
        }
        uint64_t v19 = v18 >> 3;
        v16[2] = v15;
        v16[3] = 2 * (v18 >> 3);
        unint64_t v20 = (unint64_t)(v16 + 4);
        uint64_t v21 = v3[3] >> 1;
        if (v3[2])
        {
          double v22 = v3 + 4;
          if (v16 != v3 || v20 >= (unint64_t)v22 + 8 * v21) {
            memmove(v16 + 4, v22, 8 * v21);
          }
          v3[2] = 0;
        }
        id v7 = (void *)(v20 + 8 * v21);
        uint64_t v4 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - v21;
        swift_release();
        char v3 = v16;
        id v8 = &selRef_copyWithWeight_;
      }
      BOOL v23 = __OFSUB__(v4--, 1);
      if (v23)
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      *v7++ = v11;
      if (v2 < v1)
      {

        goto LABEL_37;
      }
    }
  }
  uint64_t v4 = 0;
LABEL_37:
  unint64_t v28 = v3[3];
  if (v28 >= 2)
  {
    unint64_t v29 = v28 >> 1;
    BOOL v23 = __OFSUB__(v29, v4);
    uint64_t v30 = v29 - v4;
    if (v23) {
      goto LABEL_45;
    }
    v3[2] = v30;
  }
  return (uint64_t)v3;
}

id *outlined release of PKStrokePath.InterpolatedSlice(id *a1)
{
  return a1;
}

uint64_t outlined init with take of PKStrokePath.InterpolatedSlice.Stride(uint64_t a1, uint64_t a2)
{
  return a2;
}

id *outlined retain of PKStrokePath.InterpolatedSlice(id *a1)
{
  id v2 = *a1;
  return a1;
}

void PKInkingTool.init(_:color:width:)(unsigned __int8 *a1@<X0>, void *a2@<X1>, double a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t v6 = *a1;
  unint64_t v7 = 0xD000000000000011;
  unint64_t v8 = 0x80000001C481A030;
  unint64_t v12 = 0xD000000000000011;
  switch(v6)
  {
    case 1:
      unint64_t v13 = "com.apple.ink.pencil";
      goto LABEL_9;
    case 2:
      unint64_t v13 = "com.apple.ink.marker";
      goto LABEL_9;
    case 3:
      unint64_t v12 = 0xD000000000000016;
      int64_t v14 = "com.apple.ink.monoline";
      goto LABEL_7;
    case 4:
      unint64_t v12 = 0xD000000000000019;
      int64_t v14 = "com.apple.ink.fountainpen";
      goto LABEL_7;
    case 5:
      unint64_t v12 = 0xD000000000000018;
      int64_t v14 = "com.apple.ink.watercolor";
LABEL_7:
      unint64_t v8 = (unint64_t)(v14 - 32) | 0x8000000000000000;
      break;
    case 6:
      unint64_t v13 = "com.apple.ink.crayon";
LABEL_9:
      unint64_t v8 = (unint64_t)(v13 - 32) | 0x8000000000000000;
      unint64_t v12 = 0xD000000000000014;
      break;
    default:
      break;
  }
  uint64_t v15 = (void *)MEMORY[0x1C87824B0](v12, v8);
  swift_bridgeObjectRelease();
  if (a4)
  {
    unint64_t v17 = 0x80000001C481A030;
    switch((int)v6)
    {
      case 0:
        break;
      case 1:
        uint64_t v18 = "com.apple.ink.pencil";
        goto LABEL_20;
      case 2:
        uint64_t v18 = "com.apple.ink.marker";
        goto LABEL_20;
      case 3:
        unint64_t v7 = 0xD000000000000016;
        uint64_t v19 = "com.apple.ink.monoline";
        goto LABEL_18;
      case 4:
        unint64_t v7 = 0xD000000000000019;
        uint64_t v19 = "com.apple.ink.fountainpen";
        goto LABEL_18;
      case 5:
        unint64_t v7 = 0xD000000000000018;
        uint64_t v19 = "com.apple.ink.watercolor";
LABEL_18:
        unint64_t v17 = (unint64_t)(v19 - 32) | 0x8000000000000000;
        break;
      case 6:
        uint64_t v18 = "com.apple.ink.crayon";
LABEL_20:
        unint64_t v17 = (unint64_t)(v18 - 32) | 0x8000000000000000;
        unint64_t v7 = 0xD000000000000014;
        break;
      default:
        JUMPOUT(0);
    }
    unint64_t v20 = self;
    uint64_t v21 = (void *)MEMORY[0x1C87824B0](v7, v17);
    swift_bridgeObjectRelease();
    objc_msgSend(v20, sel_defaultWidthForInkType_, v21);
    double v16 = v22;
  }
  else
  {
    double v16 = a3;
  }
  id v23 = objc_msgSend(objc_allocWithZone((Class)PKInkingTool), sel_initWithInkType_color_width_, v15, a2, v16);

  *a5 = v23;
}

double PKInkingTool.InkType.defaultWidth.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = 0xD000000000000011;
  unint64_t v3 = 0x80000001C481A030;
  switch(v1)
  {
    case 1:
      uint64_t v4 = "com.apple.ink.pencil";
      goto LABEL_9;
    case 2:
      uint64_t v4 = "com.apple.ink.marker";
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xD000000000000016;
      double v5 = "com.apple.ink.monoline";
      goto LABEL_7;
    case 4:
      unint64_t v2 = 0xD000000000000019;
      double v5 = "com.apple.ink.fountainpen";
      goto LABEL_7;
    case 5:
      unint64_t v2 = 0xD000000000000018;
      double v5 = "com.apple.ink.watercolor";
LABEL_7:
      unint64_t v3 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      break;
    case 6:
      uint64_t v4 = "com.apple.ink.crayon";
LABEL_9:
      unint64_t v3 = (unint64_t)(v4 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD000000000000014;
      break;
    default:
      break;
  }
  uint64_t v6 = self;
  unint64_t v7 = (void *)MEMORY[0x1C87824B0](v2, v3);
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_defaultWidthForInkType_, v7);
  double v9 = v8;

  return v9;
}

PencilKit::PKInkingTool::InkType_optional __swiftcall PKInkingTool.InkType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PKInkingTool.InkType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 7;
  if (v5 < 7) {
    char v7 = v5;
  }
  char *v4 = v7;
  return result;
}

unint64_t PKInkingTool.InkType.rawValue.getter()
{
  unint64_t result = 0xD000000000000011;
  switch(*v0)
  {
    case 1:
    case 2:
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 0xD000000000000019;
      break;
    case 5:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

double PKInkingTool.InkType.validWidthRange.getter()
{
  int v1 = *v0;
  unint64_t v2 = 0xD000000000000011;
  unint64_t v3 = 0x80000001C481A030;
  unint64_t v4 = 0xD000000000000011;
  switch(*v0)
  {
    case 1:
      unint64_t v5 = "com.apple.ink.pencil";
      goto LABEL_9;
    case 2:
      unint64_t v5 = "com.apple.ink.marker";
      goto LABEL_9;
    case 3:
      unint64_t v4 = 0xD000000000000016;
      uint64_t v6 = "com.apple.ink.monoline";
      goto LABEL_7;
    case 4:
      unint64_t v4 = 0xD000000000000019;
      uint64_t v6 = "com.apple.ink.fountainpen";
      goto LABEL_7;
    case 5:
      unint64_t v4 = 0xD000000000000018;
      uint64_t v6 = "com.apple.ink.watercolor";
LABEL_7:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 6:
      unint64_t v5 = "com.apple.ink.crayon";
LABEL_9:
      unint64_t v3 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      unint64_t v4 = 0xD000000000000014;
      break;
    default:
      break;
  }
  char v7 = self;
  double v8 = (void *)MEMORY[0x1C87824B0](v4, v3);
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_minimumWidthForInkType_, v8);
  double v10 = v9;

  unint64_t v11 = 0x80000001C481A030;
  switch(v1)
  {
    case 0:
      break;
    case 1:
      unint64_t v12 = "com.apple.ink.pencil";
      goto LABEL_18;
    case 2:
      unint64_t v12 = "com.apple.ink.marker";
      goto LABEL_18;
    case 3:
      unint64_t v2 = 0xD000000000000016;
      unint64_t v13 = "com.apple.ink.monoline";
      goto LABEL_16;
    case 4:
      unint64_t v2 = 0xD000000000000019;
      unint64_t v13 = "com.apple.ink.fountainpen";
      goto LABEL_16;
    case 5:
      unint64_t v2 = 0xD000000000000018;
      unint64_t v13 = "com.apple.ink.watercolor";
LABEL_16:
      unint64_t v11 = (unint64_t)(v13 - 32) | 0x8000000000000000;
      break;
    case 6:
      unint64_t v12 = "com.apple.ink.crayon";
LABEL_18:
      unint64_t v11 = (unint64_t)(v12 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD000000000000014;
      break;
    default:
      JUMPOUT(0);
  }
  int64_t v14 = (void *)MEMORY[0x1C87824B0](v2, v11);
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_maximumWidthForInkType_, v14);
  double v16 = v15;

  if (v10 > v16)
  {
    __break(1u);
    JUMPOUT(0x1C452DFFCLL);
  }
  return v10;
}

uint64_t PKInkingTool.InkType.requiredContentVersion.getter()
{
  if (*v0 < 3u) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PKInkingTool.InkType(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PKInkingTool.InkType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PKInkingTool.InkType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PKInkingTool.InkType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

PencilKit::PKInkingTool::InkType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PKInkingTool.InkType(Swift::String *a1)
{
  return PKInkingTool.InkType.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PKInkingTool.InkType@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = PKInkingTool.InkType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id PKInkingTool.color.getter()
{
  id v1 = objc_msgSend(*v0, sel_color);

  return v1;
}

void PKInkingTool.color.setter(void *a1)
{
  id v3 = *v1;
  id v4 = objc_msgSend(*v1, sel_inkType);
  v5._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  PKInkingTool.InkType.init(rawValue:)(v5);
  if (v13 == 7)
  {
    __break(1u);
    JUMPOUT(0x1C452E264);
  }

  unint64_t v6 = 0xD000000000000011;
  unint64_t v7 = 0x80000001C481A030;
  switch(v13)
  {
    case 1:
      double v8 = "com.apple.ink.pencil";
      goto LABEL_10;
    case 2:
      double v8 = "com.apple.ink.marker";
      goto LABEL_10;
    case 3:
      unint64_t v6 = 0xD000000000000016;
      double v9 = "com.apple.ink.monoline";
      goto LABEL_8;
    case 4:
      unint64_t v6 = 0xD000000000000019;
      double v9 = "com.apple.ink.fountainpen";
      goto LABEL_8;
    case 5:
      unint64_t v6 = 0xD000000000000018;
      double v9 = "com.apple.ink.watercolor";
LABEL_8:
      unint64_t v7 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      break;
    case 6:
      double v8 = "com.apple.ink.crayon";
LABEL_10:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v6 = 0xD000000000000014;
      break;
    default:
      break;
  }
  double v10 = (void *)MEMORY[0x1C87824B0](v6, v7);
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_width);
  id v12 = objc_msgSend(objc_allocWithZone((Class)PKInkingTool), sel_initWithInkType_color_width_, v10, a1, v11);

  id *v1 = v12;
}

void PKInkingTool.inkType.getter(unsigned char *a1@<X8>)
{
  id v3 = objc_msgSend(*v1, sel_inkType);
  v4._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  PKInkingTool.InkType.init(rawValue:)(v4);
  if (v5 == 7)
  {
    __break(1u);
  }
  else
  {

    *a1 = v5;
  }
}

id PKInkingTool.width.getter()
{
  return objc_msgSend(*v0, sel_width);
}

void (*PKInkingTool.color.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = objc_msgSend(*v1, sel_color);
  return PKInkingTool.color.modify;
}

void PKInkingTool.color.modify(void **a1, char a2)
{
  unint64_t v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    PKInkingTool.color.setter(v3);
  }
  else
  {
    PKInkingTool.color.setter(v2);
  }
}

id static PKInkingTool.convertColor(_:from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = objc_msgSend(self, sel_convertColor_fromUserInterfaceStyle_to_, a1, a2, a3);

  return v3;
}

void PKInkingTool.width.setter(double a1)
{
  id v3 = *v1;
  id v4 = objc_msgSend(*v1, sel_inkType);
  v5._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  PKInkingTool.InkType.init(rawValue:)(v5);
  if (v13 == 7)
  {
    __break(1u);
    JUMPOUT(0x1C452E5BCLL);
  }

  unint64_t v6 = 0xD000000000000011;
  unint64_t v7 = 0x80000001C481A030;
  switch(v13)
  {
    case 1:
      double v8 = "com.apple.ink.pencil";
      goto LABEL_10;
    case 2:
      double v8 = "com.apple.ink.marker";
      goto LABEL_10;
    case 3:
      unint64_t v6 = 0xD000000000000016;
      double v9 = "com.apple.ink.monoline";
      goto LABEL_8;
    case 4:
      unint64_t v6 = 0xD000000000000019;
      double v9 = "com.apple.ink.fountainpen";
      goto LABEL_8;
    case 5:
      unint64_t v6 = 0xD000000000000018;
      double v9 = "com.apple.ink.watercolor";
LABEL_8:
      unint64_t v7 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      break;
    case 6:
      double v8 = "com.apple.ink.crayon";
LABEL_10:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v6 = 0xD000000000000014;
      break;
    default:
      break;
  }
  double v10 = (void *)MEMORY[0x1C87824B0](v6, v7);
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v3, sel_color);
  id v12 = objc_msgSend(objc_allocWithZone((Class)PKInkingTool), sel_initWithInkType_color_width_, v10, v11, a1);

  id *v1 = v12;
}

void (*PKInkingTool.width.modify(void *a1))(double *a1)
{
  a1[1] = v1;
  objc_msgSend(*v1, sel_width);
  *a1 = v3;
  return PKInkingTool.width.modify;
}

void PKInkingTool.width.modify(double *a1)
{
}

void PKInkingTool.inkType.setter(unsigned __int8 *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xD000000000000011;
  unint64_t v4 = 0x80000001C481A030;
  switch(v2)
  {
    case 1:
      Swift::String v5 = "com.apple.ink.pencil";
      goto LABEL_9;
    case 2:
      Swift::String v5 = "com.apple.ink.marker";
      goto LABEL_9;
    case 3:
      unint64_t v3 = 0xD000000000000016;
      unint64_t v6 = "com.apple.ink.monoline";
      goto LABEL_7;
    case 4:
      unint64_t v3 = 0xD000000000000019;
      unint64_t v6 = "com.apple.ink.fountainpen";
      goto LABEL_7;
    case 5:
      unint64_t v3 = 0xD000000000000018;
      unint64_t v6 = "com.apple.ink.watercolor";
LABEL_7:
      unint64_t v4 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 6:
      Swift::String v5 = "com.apple.ink.crayon";
LABEL_9:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD000000000000014;
      break;
    default:
      break;
  }
  unint64_t v7 = (void *)MEMORY[0x1C87824B0](v3, v4);
  swift_bridgeObjectRelease();
  id v8 = *v1;
  id v9 = objc_msgSend(*v1, sel_color);
  objc_msgSend(v8, sel_width);
  id v11 = objc_msgSend(objc_allocWithZone((Class)PKInkingTool), sel_initWithInkType_color_width_, v7, v9, v10);

  id *v1 = v11;
}

char PKInkingTool.inkType.modify(uint64_t a1)
{
  *(void *)a1 = v1;
  id v3 = objc_msgSend(*v1, sel_inkType);
  v4._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  LOBYTE(v5) = PKInkingTool.InkType.init(rawValue:)(v4);
  if (v7 == 7)
  {
    __break(1u);
  }
  else
  {

    *(unsigned char *)(a1 + 8) = v7;
    return (char)PKInkingTool.inkType.modify;
  }
  return v5;
}

void PKInkingTool.inkType.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    char v3 = *(unsigned char *)(a1 + 8);
    uint64_t v2 = (unsigned __int8 *)&v3;
  }
  else
  {
    char v4 = *(unsigned char *)(a1 + 8);
    uint64_t v2 = (unsigned __int8 *)&v4;
  }
  PKInkingTool.inkType.setter(v2);
}

id PKInkingTool.requiredContentVersion.getter()
{
  return objc_msgSend(*v0, sel_requiredContentVersion);
}

uint64_t static PKInkingTool.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

void PKInkingTool.init(ink:width:)(void *a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  char v4 = (void *)*a1;
  id v5 = objc_msgSend(objc_allocWithZone((Class)PKInkingTool), sel_initWithInk_width_, *a1, a3);

  *a2 = v5;
}

void PKInkingTool.ink.getter(void *a1@<X8>)
{
  id v3 = [*v1 ink];
  if (!v3)
  {
    id v4 = objc_msgSend(self, sel_blackColor);
    id v5 = (void *)MEMORY[0x1C87824B0](0xD000000000000011, 0x80000001C481A030);
    id v3 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v5, v4);
  }
  *a1 = v3;
}

void __swiftcall PKInkingTool._bridgeToObjectiveC()(PKInkingTool *__return_ptr retstr)
{
  id v2 = *v1;
}

id static PKInkingTool._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;

  return a1;
}

uint64_t static PKInkingTool._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;
  id v4 = a1;
  return 1;
}

id static PKInkingTool._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, id *a2@<X8>)
{
  if (result)
  {
    *a2 = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PKInkingTool.InkType and conformance PKInkingTool.InkType()
{
  unint64_t result = lazy protocol witness table cache variable for type PKInkingTool.InkType and conformance PKInkingTool.InkType;
  if (!lazy protocol witness table cache variable for type PKInkingTool.InkType and conformance PKInkingTool.InkType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKInkingTool.InkType and conformance PKInkingTool.InkType);
  }
  return result;
}

id sub_1C452EB10@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_color);
  *a2 = result;
  return result;
}

void sub_1C452EB4C(id *a1)
{
}

id sub_1C452EB78@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_width);
  *a2 = v4;
  return result;
}

void sub_1C452EBAC(double *a1)
{
}

void sub_1C452EBD8(unsigned __int8 *a1)
{
  unsigned __int8 v1 = *a1;
  PKInkingTool.inkType.setter(&v1);
}

ValueMetadata *type metadata accessor for PKInkingTool()
{
  return &type metadata for PKInkingTool;
}

uint64_t getEnumTagSinglePayload for PKInkingTool.InkType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PKInkingTool.InkType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *id result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C452ED7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PKInkingTool.InkType()
{
  return &type metadata for PKInkingTool.InkType;
}

uint64_t PKToolPickerLassoItem.lassoTool.getter@<X0>(uint64_t *a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel__tool);
  self;
  uint64_t result = swift_dynamicCastObjCClassUnconditional();
  *a1 = result;
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSNumber, UIImage>);
  int v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned int v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (!*(void *)(a1 + 16))
  {
    int v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<InkBehavior.InkProperty, [InkFunction]>);
  int v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned int v4 = (void *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *((unsigned char *)v4 - 8);
    id v6 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    *(void *)(v2[7] + 8 * result) = v6;
    char v9 = v2[2];
    uint64_t v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  unsigned __int8 v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, CGFloat>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      id v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      char v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      uint64_t v11 = __OFADD__(v10, 1);
      BOOL v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

uint64_t PKToolPickerCustomItem.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_configuration);

  return PKToolPickerCustomItem.Configuration.init(objcConfig:)(v3, a1);
}

uint64_t PKToolPickerCustomItem.Configuration.init(objcConfig:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  id v66 = objc_msgSend(self, sel_blackColor);
  id v4 = objc_msgSend(a1, sel_identifier);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  swift_bridgeObjectRetain();
  id v8 = objc_msgSend(a1, sel_name);
  uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  uint64_t v69 = v10;
  swift_bridgeObjectRetain();
  id v11 = objc_msgSend(a1, sel_imageProvider);
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    int64_t v14 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned PKToolPickerCustomItem) -> (@autoreleased UIImage);
  }
  else
  {
    int64_t v14 = 0;
    uint64_t v13 = 0;
  }
  uint64_t v65 = (uint64_t)v14;
  uint64_t v67 = v13;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?((uint64_t)v14);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(0);
  id v15 = objc_msgSend(a1, sel_viewControllerProvider);
  uint64_t v72 = v7;
  uint64_t v73 = a2;
  uint64_t v70 = v5;
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v16;
    uint64_t v18 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned PKToolPickerCustomItem) -> (@autoreleased UIViewController);
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v17 = 0;
  }
  uint64_t v63 = (uint64_t)v18;
  uint64_t v64 = v17;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?((uint64_t)v18);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(0);
  objc_msgSend(a1, sel_defaultWidth);
  uint64_t v20 = v19;
  uint64_t v21 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  id v71 = a1;
  id v22 = objc_msgSend(a1, sel_widthVariants);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
  lazy protocol witness table accessor for type NSNumber and conformance NSObject();
  unint64_t v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v23 & 0xC000000000000001) != 0)
  {
    uint64_t v24 = __CocoaDictionary.makeIterator()();
    unint64_t v75 = 0;
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    unint64_t v23 = v24 | 0x8000000000000000;
  }
  else
  {
    uint64_t v27 = -1 << *(unsigned char *)(v23 + 32);
    unint64_t v75 = v23 + 64;
    uint64_t v28 = ~v27;
    uint64_t v29 = -v27;
    if (v29 < 64) {
      uint64_t v30 = ~(-1 << v29);
    }
    else {
      uint64_t v30 = -1;
    }
    unint64_t v26 = v30 & *(void *)(v23 + 64);
    uint64_t v25 = v28;
  }
  uint64_t v31 = 0;
  uint64_t v62 = v25;
  int64_t v74 = (unint64_t)(v25 + 64) >> 6;
  while (1)
  {
    if ((v23 & 0x8000000000000000) != 0)
    {
      if (!__CocoaDictionary.Iterator.next()()) {
        goto LABEL_46;
      }
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v36 = v77;
      swift_unknownObjectRelease();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v37 = v77;
      swift_unknownObjectRelease();
      uint64_t v35 = v31;
      uint64_t v33 = v26;
      if (!v77) {
        goto LABEL_46;
      }
    }
    else
    {
      if (v26)
      {
        uint64_t v33 = (v26 - 1) & v26;
        unint64_t v34 = __clz(__rbit64(v26)) | (v31 << 6);
        uint64_t v35 = v31;
      }
      else
      {
        int64_t v38 = v31 + 1;
        if (__OFADD__(v31, 1)) {
          goto LABEL_49;
        }
        if (v38 >= v74) {
          goto LABEL_46;
        }
        unint64_t v39 = *(void *)(v75 + 8 * v38);
        uint64_t v35 = v31 + 1;
        if (!v39)
        {
          uint64_t v35 = v31 + 2;
          if (v31 + 2 >= v74) {
            goto LABEL_46;
          }
          unint64_t v39 = *(void *)(v75 + 8 * v35);
          if (!v39)
          {
            uint64_t v35 = v31 + 3;
            if (v31 + 3 >= v74) {
              goto LABEL_46;
            }
            unint64_t v39 = *(void *)(v75 + 8 * v35);
            if (!v39)
            {
              uint64_t v35 = v31 + 4;
              if (v31 + 4 >= v74) {
                goto LABEL_46;
              }
              unint64_t v39 = *(void *)(v75 + 8 * v35);
              if (!v39)
              {
                uint64_t v40 = v31 + 5;
                while (v74 != v40)
                {
                  unint64_t v39 = *(void *)(v75 + 8 * v40++);
                  if (v39)
                  {
                    uint64_t v35 = v40 - 1;
                    goto LABEL_35;
                  }
                }
LABEL_46:
                outlined consume of [NSNumber : UIImage].Iterator._Variant();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                id v58 = objc_msgSend(v71, sel_defaultColor);

                unsigned __int8 v76 = objc_msgSend(v71, sel_allowsColorSelection);
                id v59 = objc_msgSend(v71, sel_toolAttributeControls);
                unsigned __int8 v60 = objc_msgSend(v71, sel__supportsLassoBehaviors);

                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v65);
                outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v63);
                outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v63);
                outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v65);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                *(void *)uint64_t v73 = v70;
                *(void *)(v73 + 8) = v72;
                *(void *)(v73 + 16) = v68;
                *(void *)(v73 + 24) = v69;
                *(void *)(v73 + 32) = v65;
                *(void *)(v73 + 40) = v67;
                *(void *)(v73 + 48) = v63;
                *(void *)(v73 + 56) = v64;
                *(void *)(v73 + 64) = v20;
                *(void *)(v73 + 72) = v21;
                *(void *)(v73 + 80) = v58;
                *(unsigned char *)(v73 + 88) = v76;
                *(void *)(v73 + 96) = v59;
                *(unsigned char *)(v73 + 104) = v60;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v65);
                outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v63);

                return swift_bridgeObjectRelease();
              }
            }
          }
        }
LABEL_35:
        uint64_t v33 = (v39 - 1) & v39;
        unint64_t v34 = __clz(__rbit64(v39)) + (v35 << 6);
      }
      uint64_t v41 = 8 * v34;
      uint64_t v42 = *(void **)(*(void *)(v23 + 56) + v41);
      id v36 = *(id *)(*(void *)(v23 + 48) + v41);
      id v37 = v42;
      if (!v36) {
        goto LABEL_46;
      }
    }
    objc_msgSend(v36, sel_floatValue, v62);
    double v44 = v43;
    id v45 = v37;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    double v77 = v21;
    unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v44);
    uint64_t v49 = v21[2];
    BOOL v50 = (v47 & 1) == 0;
    uint64_t v51 = v49 + v50;
    if (__OFADD__(v49, v50)) {
      break;
    }
    char v52 = v47;
    if (v21[3] >= v51)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, isUniquelyReferenced_nonNull_native);
      unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v44);
      if ((v52 & 1) != (v54 & 1)) {
        goto LABEL_50;
      }
      unint64_t v48 = v53;
    }
    if (v52)
    {
      uint64_t v32 = v21[7];

      *(void *)(v32 + 8 * v48) = v45;
    }
    else
    {
      v21[(v48 >> 6) + 8] |= 1 << v48;
      *(double *)(v21[6] + 8 * v48) = v44;
      *(void *)(v21[7] + 8 * v48) = v45;
      uint64_t v55 = v21[2];
      BOOL v56 = __OFADD__(v55, 1);
      uint64_t v57 = v55 + 1;
      if (v56) {
        goto LABEL_48;
      }
      v21[2] = v57;
    }

    swift_bridgeObjectRelease();
    uint64_t v31 = v35;
    unint64_t v26 = v33;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id PKToolPickerCustomItem.init(configuration:)(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = a1[6];
  id v3 = (void *)a1[10];
  id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v4 = (void *)PKToolPickerCustomItem.Configuration.objcInstance.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v2);

  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v7, sel_initWithObjcConfiguration_, v4);

  return v5;
}

uint64_t PKToolPickerCustomItem.Configuration.objcInstance.getter()
{
  double v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = *((void *)v0 + 2);
  uint64_t v4 = *((void *)v0 + 3);
  uint64_t v5 = *((void *)v0 + 4);
  uint64_t v6 = *((void *)v0 + 5);
  uint64_t v8 = *((void *)v0 + 6);
  uint64_t v7 = *((void *)v0 + 7);
  double v9 = v0[8];
  uint64_t v10 = *((void *)v0 + 9);
  uint64_t v55 = *((void *)v0 + 10);
  unsigned int v57 = *((unsigned __int8 *)v0 + 88);
  uint64_t v58 = *((void *)v0 + 12);
  unsigned int v59 = *((unsigned __int8 *)v0 + 104);
  id v11 = objc_allocWithZone((Class)PKToolPickerCustomItemConfiguration);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v12 = (void *)MEMORY[0x1C87824B0](*(void *)&v1, v2);
  swift_bridgeObjectRelease();
  uint64_t v13 = (void *)MEMORY[0x1C87824B0](v3, v4);
  swift_bridgeObjectRelease();
  id v60 = objc_msgSend(v11, sel_initWithIdentifier_name_, v12, v13);

  if (v5)
  {
    uint64_t v66 = v5;
    uint64_t v67 = v6;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v63 = 1107296256;
    uint64_t v64 = thunk for @escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIImage);
    uint64_t v65 = &block_descriptor_16;
    int64_t v14 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
  }
  else
  {
    int64_t v14 = 0;
  }
  objc_msgSend(v60, sel_setImageProvider_, v14, v55);
  _Block_release(v14);
  if (v8)
  {
    uint64_t v66 = v8;
    uint64_t v67 = v7;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v63 = 1107296256;
    uint64_t v64 = thunk for @escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIImage);
    uint64_t v65 = &block_descriptor_0;
    id v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
  }
  else
  {
    id v15 = 0;
  }
  objc_msgSend(v60, sel_setViewControllerProvider_, v15);
  _Block_release(v15);
  objc_msgSend(v60, sel_setDefaultWidth_, v9);
  uint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v61 = v10 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v10 + 64);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v21 = 0;
  while (1)
  {
    if (v19)
    {
      unint64_t v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v24 = v23 | (v21 << 6);
    }
    else
    {
      int64_t v25 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        goto LABEL_48;
      }
      if (v25 >= v20)
      {
LABEL_44:
        swift_release();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
        lazy protocol witness table accessor for type NSNumber and conformance NSObject();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v60, sel_setWidthVariants_, isa);

        objc_msgSend(v60, sel_setDefaultColor_, v56);
        objc_msgSend(v60, sel_setAllowsColorSelection_, v57);
        objc_msgSend(v60, sel_setToolAttributeControls_, v58);
        objc_msgSend(v60, sel__setSupportsLassoBehaviors_, v59);
        return (uint64_t)v60;
      }
      unint64_t v26 = *(void *)(v61 + 8 * v25);
      ++v21;
      if (!v26)
      {
        int64_t v21 = v25 + 1;
        if (v25 + 1 >= v20) {
          goto LABEL_44;
        }
        unint64_t v26 = *(void *)(v61 + 8 * v21);
        if (!v26)
        {
          int64_t v21 = v25 + 2;
          if (v25 + 2 >= v20) {
            goto LABEL_44;
          }
          unint64_t v26 = *(void *)(v61 + 8 * v21);
          if (!v26)
          {
            int64_t v27 = v25 + 3;
            if (v27 >= v20) {
              goto LABEL_44;
            }
            unint64_t v26 = *(void *)(v61 + 8 * v27);
            if (!v26)
            {
              while (1)
              {
                int64_t v21 = v27 + 1;
                if (__OFADD__(v27, 1)) {
                  goto LABEL_49;
                }
                if (v21 >= v20) {
                  goto LABEL_44;
                }
                unint64_t v26 = *(void *)(v61 + 8 * v21);
                ++v27;
                if (v26) {
                  goto LABEL_27;
                }
              }
            }
            int64_t v21 = v27;
          }
        }
      }
LABEL_27:
      unint64_t v19 = (v26 - 1) & v26;
      unint64_t v24 = __clz(__rbit64(v26)) + (v21 << 6);
    }
    uint64_t v28 = 8 * v24;
    uint64_t v29 = *(void **)(*(void *)(v10 + 56) + v28);
    float v30 = *(double *)(*(void *)(v10 + 48) + v28);
    id v31 = objc_allocWithZone(NSNumber);
    id v32 = v29;
    *(float *)&double v33 = v30;
    id v34 = objc_msgSend(v31, sel_initWithFloat_, v33);
    if ((v16 & 0xC000000000000001) != 0)
    {
      if (v16 < 0) {
        uint64_t v35 = v16;
      }
      else {
        uint64_t v35 = v16 & 0xFFFFFFFFFFFFFF8;
      }
      id v36 = v32;
      uint64_t v37 = __CocoaSet.count.getter();
      if (__OFADD__(v37, 1)) {
        goto LABEL_46;
      }
      uint64_t v16 = specialized _NativeDictionary.init(_:capacity:)(v35, v37 + 1);
    }
    else
    {
      id v38 = v32;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t aBlock = v16;
    unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v34);
    uint64_t v42 = *(void *)(v16 + 16);
    BOOL v43 = (v40 & 1) == 0;
    uint64_t v44 = v42 + v43;
    if (__OFADD__(v42, v43)) {
      break;
    }
    char v45 = v40;
    if (*(void *)(v16 + 24) >= v44)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, isUniquelyReferenced_nonNull_native);
      unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v34);
      if ((v45 & 1) != (v47 & 1)) {
        goto LABEL_50;
      }
      unint64_t v41 = v46;
    }
    uint64_t v16 = aBlock;
    uint64_t v48 = 8 * v41;
    if (v45)
    {
      uint64_t v22 = *(void *)(aBlock + 56);

      *(void *)(v22 + v48) = v32;
    }
    else
    {
      *(void *)(aBlock + 8 * (v41 >> 6) + 64) |= 1 << v41;
      *(void *)(*(void *)(v16 + 48) + 8 * v41) = v34;
      *(void *)(*(void *)(v16 + 56) + 8 * v41) = v32;
      uint64_t v49 = *(void *)(v16 + 16);
      BOOL v50 = __OFADD__(v49, 1);
      uint64_t v51 = v49 + 1;
      if (v50) {
        goto LABEL_47;
      }
      *(void *)(v16 + 16) = v51;
      id v52 = v34;
    }

    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t PKToolPickerCustomItem.Configuration.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PKToolPickerCustomItem.Configuration.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration.identifier.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t PKToolPickerCustomItem.Configuration.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PKToolPickerCustomItem.Configuration.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration.name.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t key path getter for PKToolPickerCustomItem.Configuration.imageProvider : PKToolPickerCustomItem.Configuration@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIImage);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;

  return outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v3);
}

uint64_t key path setter for PKToolPickerCustomItem.Configuration.imageProvider : PKToolPickerCustomItem.Configuration(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PKToolPickerCustomItem) -> (@out UIViewController);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 32);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v7);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v5;
  return result;
}

uint64_t PKToolPickerCustomItem.Configuration.imageProvider.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v1);
  return v1;
}

uint64_t PKToolPickerCustomItem.Configuration.imageProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(*(void *)(v2 + 32));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration.imageProvider.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t key path getter for PKToolPickerCustomItem.Configuration.viewControllerProvider : PKToolPickerCustomItem.Configuration@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;

  return outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v3);
}

uint64_t key path setter for PKToolPickerCustomItem.Configuration.viewControllerProvider : PKToolPickerCustomItem.Configuration(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PKToolPickerCustomItem) -> (@out UIViewController);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 48);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v7);
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = v5;
  return result;
}

uint64_t PKToolPickerCustomItem.Configuration.viewControllerProvider.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v1);
  return v1;
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t PKToolPickerCustomItem.Configuration.viewControllerProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(*(void *)(v2 + 48));
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration.viewControllerProvider.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double PKToolPickerCustomItem.Configuration.defaultWidth.getter()
{
  return *(double *)(v0 + 64);
}

void PKToolPickerCustomItem.Configuration.defaultWidth.setter(double a1)
{
  *(double *)(v1 + 64) = a1;
}

uint64_t (*PKToolPickerCustomItem.Configuration.defaultWidth.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t PKToolPickerCustomItem.Configuration.widthVariants.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PKToolPickerCustomItem.Configuration.widthVariants.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 72) = a1;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration.widthVariants.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

id PKToolPickerCustomItem.Configuration.defaultColor.getter()
{
  return *(id *)(v0 + 80);
}

void PKToolPickerCustomItem.Configuration.defaultColor.setter(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
}

uint64_t (*PKToolPickerCustomItem.Configuration.defaultColor.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t PKToolPickerCustomItem.Configuration.allowsColorSelection.getter()
{
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t PKToolPickerCustomItem.Configuration.allowsColorSelection.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 88) = result;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration.allowsColorSelection.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t PKToolPickerCustomItem.Configuration.toolAttributeControls.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t PKToolPickerCustomItem.Configuration.toolAttributeControls.setter(uint64_t result)
{
  *(void *)(v1 + 96) = result;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration.toolAttributeControls.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t PKToolPickerCustomItem.Configuration._supportsLassoBehaviors.getter()
{
  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t PKToolPickerCustomItem.Configuration._supportsLassoBehaviors.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 104) = result;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration._supportsLassoBehaviors.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double PKToolPickerCustomItem.Configuration.init(identifier:name:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  id v11 = objc_msgSend(self, sel_blackColor);
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  double result = 0.0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(void *)(a5 + 64) = 0;
  *(void *)(a5 + 72) = v10;
  *(void *)(a5 + 80) = v11;
  *(unsigned char *)(a5 + 88) = 0;
  *(void *)(a5 + 96) = 3;
  *(unsigned char *)(a5 + 104) = 0;
  return result;
}

id thunk for @escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIImage)(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  uint64_t v5 = (void *)v3();
  swift_release();

  return v5;
}

Swift::Int specialized _NativeDictionary.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSNumber, UIImage>);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      do
      {
        swift_dynamicCast();
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC868];
  }
  return v2;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(double *a1)
{
  uint64_t v1 = *((void *)a1 + 2);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CGFloat, UIImage>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v4 = a1[4];
  uint64_t v5 = (void *)*((void *)a1 + 5);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    id v17 = v5;
    return (unint64_t)v3;
  }
  unint64_t v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(double *)(v3[6] + v9) = v4;
    *(void *)(v3[7] + v9) = v5;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    char v13 = v8 + 2;
    double v4 = *(v8 - 1);
    unint64_t v14 = *(void **)v8;
    id v15 = v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    unint64_t v8 = v13;
    uint64_t v5 = v14;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

void destroy for PKToolPickerCustomItem.Configuration(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[4]) {
    swift_release();
  }
  if (a1[6]) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)a1[10];
}

uint64_t initializeWithCopy for PKToolPickerCustomItem.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  char v7 = (_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v7;
  }
  uint64_t v9 = *(void *)(a2 + 48);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v11;
  uint64_t v12 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v12;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  swift_bridgeObjectRetain();
  id v13 = v12;
  return a1;
}

uint64_t assignWithCopy for PKToolPickerCustomItem.Configuration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v4;
      *(void *)(a1 + 40) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_8:
  uint64_t v7 = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 48))
  {
    if (v7)
    {
      uint64_t v9 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v9;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_15;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  swift_retain();
  swift_release();
LABEL_15:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void **)(a2 + 80);
  uint64_t v11 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = v10;
  id v12 = v10;

  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy105_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for PKToolPickerCustomItem.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v8;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 48))
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v9;
      *(void *)(a1 + 56) = v11;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_15;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  swift_release();
LABEL_15:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  id v12 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);

  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for PKToolPickerCustomItem.Configuration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 105)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PKToolPickerCustomItem.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 105) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PKToolPickerCustomItem.Configuration()
{
  return &type metadata for PKToolPickerCustomItem.Configuration;
}

uint64_t sub_1C4530E4C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PKToolPickerCustomItem) -> (@out UIViewController)(uint64_t a1)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  uint64_t v5 = a1;
  v2(&v4, &v5);
  return v4;
}

unint64_t lazy protocol witness table accessor for type NSNumber and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSNumber and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSNumber and conformance NSObject)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSNumber and conformance NSObject);
  }
  return result;
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_1C4530F84()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

id partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned PKToolPickerCustomItem) -> (@autoreleased UIViewController)()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();

  return v1;
}

void __swiftcall PKLassoTool.init()(PencilKit::PKLassoTool *__return_ptr retstr)
{
  retstr->tool.super.super.Class isa = (Class)objc_msgSend(objc_allocWithZone((Class)PKLassoTool), sel_init);
}

uint64_t static PKLassoTool.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

void __swiftcall PKLassoTool._bridgeToObjectiveC()(PKLassoTool *__return_ptr retstr)
{
  id v2 = *v1;
}

id static PKLassoTool._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;

  return a1;
}

uint64_t static PKLassoTool._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;
  id v4 = a1;
  return 1;
}

id static PKLassoTool._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, id *a2@<X8>)
{
  if (result)
  {
    *a2 = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for PKLassoTool()
{
  return &type metadata for PKLassoTool;
}

#error "1C45313F4: switch analysis failed: failed to propagate the switch expression (funcsize=217)"

id PKToolPickerInkingItem.init(type:color:width:identifier:)(unsigned __int8 *a1, void *a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0xD000000000000011;
  unint64_t v7 = 0x80000001C481A030;
  switch(v5)
  {
    case 1:
      id v12 = "com.apple.ink.pencil";
      goto LABEL_9;
    case 2:
      id v12 = "com.apple.ink.marker";
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xD000000000000016;
      id v13 = "com.apple.ink.monoline";
      goto LABEL_7;
    case 4:
      unint64_t v6 = 0xD000000000000019;
      id v13 = "com.apple.ink.fountainpen";
      goto LABEL_7;
    case 5:
      unint64_t v6 = 0xD000000000000018;
      id v13 = "com.apple.ink.watercolor";
LABEL_7:
      unint64_t v7 = (unint64_t)(v13 - 32) | 0x8000000000000000;
      break;
    case 6:
      id v12 = "com.apple.ink.crayon";
LABEL_9:
      unint64_t v7 = (unint64_t)(v12 - 32) | 0x8000000000000000;
      unint64_t v6 = 0xD000000000000014;
      break;
    default:
      break;
  }
  unint64_t v14 = (void *)MEMORY[0x1C87824B0](v6, v7);
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(objc_allocWithZone((Class)PKInkingTool), sel_initWithInkType_color_width_, v14, a2, a5);

  if (a4)
  {
    char v16 = (void *)MEMORY[0x1C87824B0](a3, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v16 = 0;
  }
  id v17 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithTool_identifier_, v15, v16);

  return v17;
}

uint64_t PKToolPickerInkingItem.inkingTool.getter@<X0>(uint64_t *a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel__tool);
  self;
  uint64_t result = swift_dynamicCastObjCClassUnconditional();
  *a1 = result;
  return result;
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.startIndex.getter();
    uint64_t v5 = v4;
    uint64_t v6 = __CocoaSet.endIndex.getter();
    char v8 = MEMORY[0x1C87826E0](v3, v5, v6, v7);
    swift_bridgeObjectRelease();
    if (v8)
    {
LABEL_3:
      outlined consume of Set<UITouch>.Index._Variant(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    specialized Set.subscript.getter(v3, v5, v2 != 0, a1);
    uint64_t v9 = v13;
    outlined consume of Set<UITouch>.Index._Variant(v3, v5, v2 != 0);
    return v9;
  }
  uint64_t result = specialized _NativeSet.startIndex.getter(a1);
  if ((v12 & 1) == 0)
  {
    uint64_t v5 = v11;
    if (*(_DWORD *)(a1 + 36) == v11)
    {
      uint64_t v3 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall PKLongPressGestureRecognizer.addNewStartLocation(_:)(CGPoint a1)
{
  CGFloat y = a1.y;
  CGFloat x = a1.x;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8, v5);
  char v40 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  starteCGFloat d = type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation();
  uint64_t v8 = started - 8;
  uint64_t v37 = *(void *)(started - 8);
  MEMORY[0x1F4188790](started, v9);
  uint64_t v11 = (CGFloat *)((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v16 = MEMORY[0x1F4188790](v12, v15);
  id v38 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16, v17);
  unint64_t v19 = (char *)&v36 - v18;
  UUID.init()();
  int64_t v20 = (char *)v11 + *(int *)(v8 + 28);
  int64_t v21 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v39 = v12;
  id v36 = v21;
  v21(v20, v19, v12);
  CGFloat *v11 = x;
  v11[1] = y;
  uint64_t v22 = OBJC_IVAR___PKLongPressGestureRecognizer_pressStartLocations;
  unint64_t v23 = *(void **)&v1[OBJC_IVAR___PKLongPressGestureRecognizer_pressStartLocations];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v41 = v1;
  *(void *)&v1[v22] = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v23 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    *(void *)&v41[v22] = v23;
  }
  unint64_t v26 = v23[2];
  unint64_t v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    unint64_t v23 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v23);
    *(void *)&v41[v22] = v23;
  }
  v23[2] = v26 + 1;
  outlined init with take of PKLongPressGestureRecognizer.PressStartLocation((uint64_t)v11, (uint64_t)v23+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(void *)(v37 + 72) * v26);
  uint64_t v27 = type metadata accessor for TaskPriority();
  uint64_t v28 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v40, 1, 1, v27);
  float v30 = v38;
  uint64_t v29 = v39;
  v36(v38, v19, v39);
  type metadata accessor for MainActor();
  id v31 = v41;
  uint64_t v32 = static MainActor.shared.getter();
  unint64_t v33 = (*(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  id v34 = (char *)swift_allocObject();
  uint64_t v35 = MEMORY[0x1E4FBCFD8];
  *((void *)v34 + 2) = v32;
  *((void *)v34 + 3) = v35;
  *((void *)v34 + 4) = v31;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v34[v33], v30, v29);
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v28, (uint64_t)&async function pointer to partial apply for closure #1 in PKLongPressGestureRecognizer.addNewStartLocation(_:), (uint64_t)v34);
  swift_release();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v29);
}

uint64_t closure #1 in PKLongPressGestureRecognizer.addNewStartLocation(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v5[4] = v6;
  v5[5] = *(void *)(v6 - 8);
  void v5[6] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[8] = v8;
  v5[9] = v7;
  return MEMORY[0x1F4188298](closure #1 in PKLongPressGestureRecognizer.addNewStartLocation(_:), v8, v7);
}

uint64_t closure #1 in PKLongPressGestureRecognizer.addNewStartLocation(_:)()
{
  uint64_t v1 = static Duration.milliseconds(_:)();
  uint64_t v3 = v2;
  ContinuousClock.init()();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  void *v4 = v0;
  v4[1] = closure #1 in PKLongPressGestureRecognizer.addNewStartLocation(_:);
  return v6(v1, v3, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 48);
  uint64_t v4 = *(void *)(*v1 + 40);
  uint64_t v5 = *(void *)(*v1 + 32);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 72);
  uint64_t v7 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v8 = closure #1 in PKLongPressGestureRecognizer.addNewStartLocation(_:);
  }
  else {
    uint64_t v8 = closure #1 in PKLongPressGestureRecognizer.addNewStartLocation(_:);
  }
  return MEMORY[0x1F4188298](v8, v7, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  uint64_t v1 = *(void **)(v0 + 16);
  swift_release();
  if (!objc_msgSend(v1, sel_state))
  {
    uint64_t v4 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR___PKLongPressGestureRecognizer_pressStartLocations);
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      uint64_t v6 = *(void *)(type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation() - 8);
      uint64_t v7 = v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      uint64_t v8 = *(void *)(v6 + 72);
      swift_bridgeObjectRetain();
      while ((static UUID.== infix(_:_:)() & 1) == 0)
      {
        v7 += v8;
        if (!--v5)
        {
          swift_bridgeObjectRelease();
          goto LABEL_2;
        }
      }
      uint64_t v9 = *(void **)(v0 + 16);
      swift_bridgeObjectRelease();
      objc_msgSend(v9, sel_setState_, 1);
    }
  }
LABEL_2:
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void @objc PKLongPressGestureRecognizer.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t))
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = a4;
  id v9 = a1;
  a5(v8);
  swift_bridgeObjectRelease();
}

id PKLongPressGestureRecognizer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PKLongPressGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t *initializeBufferWithCopyOfBuffer for PKLongPressGestureRecognizer.PressStartLocation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PKLongPressGestureRecognizer.PressStartLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UUID();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

_OWORD *initializeWithCopy for PKLongPressGestureRecognizer.PressStartLocation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *assignWithCopy for PKLongPressGestureRecognizer.PressStartLocation(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *initializeWithTake for PKLongPressGestureRecognizer.PressStartLocation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_OWORD *assignWithTake for PKLongPressGestureRecognizer.PressStartLocation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PKLongPressGestureRecognizer.PressStartLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C4532884);
}

uint64_t sub_1C4532884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PKLongPressGestureRecognizer.PressStartLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C4532908);
}

uint64_t sub_1C4532908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation()
{
  uint64_t result = type metadata singleton initialization cache for PKLongPressGestureRecognizer.PressStartLocation;
  if (!type metadata singleton initialization cache for PKLongPressGestureRecognizer.PressStartLocation) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for PKLongPressGestureRecognizer.PressStartLocation()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized Clock.sleep(for:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return MEMORY[0x1F4188298](specialized Clock.sleep(for:tolerance:), 0, 0);
}

uint64_t specialized Clock.sleep(for:tolerance:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, MEMORY[0x1E4FBD1A8]);
  dispatch thunk of Clock.now.getter();
  lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant, MEMORY[0x1E4FBD178]);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized Clock.sleep(for:tolerance:);
  uint64_t v8 = v0[11];
  return MEMORY[0x1F4188178](v8, v0 + 2, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return MEMORY[0x1F4188298](specialized Clock.sleep(for:tolerance:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t outlined init with take of PKLongPressGestureRecognizer.PressStartLocation(uint64_t a1, uint64_t a2)
{
  starteCGFloat d = type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 32))(a2, a1, started);
  return a2;
}

uint64_t sub_1C4532F90()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in PKLongPressGestureRecognizer.addNewStartLocation(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
  return closure #1 in PKLongPressGestureRecognizer.addNewStartLocation(_:)(a1, v5, v6, v7, v8);
}

uint64_t lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type UITouch and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UITouch and conformance NSObject)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UITouch);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject);
  }
  return result;
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      if (a4 < 0) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      MEMORY[0x1C8782720](a1, a2, v7);
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
LABEL_27:
    __break(1u);
    return;
  }
  if (a3) {
    goto LABEL_13;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_13:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  __CocoaSet.Index.element.getter();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v17;
  swift_unknownObjectRelease();
  Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v8 & ~v9;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_26:

    __break(1u);
    goto LABEL_27;
  }
  id v10 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v6 = (v6 + 1) & v12;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_26;
      }
      id v13 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v14 = static NSObject.== infix(_:_:)();
    }
    while ((v14 & 1) == 0);
  }

LABEL_20:
  uint64_t v15 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v16 = v15;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void specialized PKLongPressGestureRecognizer.touchesBegan(_:with:)(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter() != 1) {
      return;
    }
  }
  else if (*(void *)(a1 + 16) != 1)
  {
    return;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  id v6 = (id)specialized Collection.first.getter(v2);
  swift_bridgeObjectRelease();
  if (v6)
  {
    if (!objc_msgSend(v1, sel_state))
    {
      objc_msgSend(v6, sel_locationInView_, 0);
      uint64_t v3 = &v1[OBJC_IVAR___PKLongPressGestureRecognizer_startLocation];
      *(void *)uint64_t v3 = v4;
      *((void *)v3 + 1) = v5;
      PKLongPressGestureRecognizer.addNewStartLocation(_:)((CGPoint)__PAIR128__(v5, v4));
    }
  }
}

void specialized PKLongPressGestureRecognizer.touchesMoved(_:with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  starteCGFloat d = type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation();
  uint64_t v5 = *(void *)(started - 8);
  uint64_t v7 = MEMORY[0x1F4188790](started - 8, v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v10);
  uint64_t v12 = (double *)((char *)&v29 - v11);
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter() != 1) {
      return;
    }
  }
  else if (*(void *)(a1 + 16) != 1)
  {
    return;
  }
  uint64_t v13 = swift_bridgeObjectRetain();
  id v33 = (id)specialized Collection.first.getter(v13);
  swift_bridgeObjectRelease();
  if (v33)
  {
    if (objc_msgSend(v2, sel_state) == (id)1 || objc_msgSend(v2, sel_state) == (id)2)
    {
      objc_msgSend(v2, sel_setState_, 2);
LABEL_9:
      id v14 = v33;

      return;
    }
    if (objc_msgSend(v2, sel_state)) {
      goto LABEL_9;
    }
    objc_msgSend(v33, sel_locationInView_, 0);
    double v16 = v15;
    double v18 = v17;
    if (*(double *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_allowableTotalMovement]
       * *(double *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_allowableTotalMovement] < (*(double *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_startLocation]
                                                                                          - v15)
                                                                                         * (*(double *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_startLocation]
                                                                                          - v15)
                                                                                         + (*(double *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_startLocation + 8]
                                                                                          - v17)
                                                                                         * (*(double *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_startLocation + 8]
                                                                                          - v17))
    {
      objc_msgSend(v2, sel_setState_, 5);
      goto LABEL_9;
    }
    uint64_t v19 = OBJC_IVAR___PKLongPressGestureRecognizer_pressStartLocations;
    uint64_t v20 = *(void *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_pressStartLocations];
    uint64_t v21 = MEMORY[0x1E4FBC860];
    uint64_t v34 = MEMORY[0x1E4FBC860];
    uint64_t v22 = *(void *)(v20 + 16);
    uint64_t v32 = OBJC_IVAR___PKLongPressGestureRecognizer_allowableMovement;
    swift_bridgeObjectRetain();
    if (v22)
    {
      uint64_t v30 = v19;
      uint64_t v31 = v22;
      unint64_t v23 = 0;
      while (v23 < *(void *)(v20 + 16))
      {
        unint64_t v24 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        uint64_t v25 = *(void *)(v5 + 72);
        outlined init with copy of PKLongPressGestureRecognizer.PressStartLocation(v20 + v24 + v25 * v23, (uint64_t)v12);
        if ((*v12 - v16) * (*v12 - v16) + (v12[1] - v18) * (v12[1] - v18) >= *(double *)&v2[v32] * *(double *)&v2[v32])
        {
          outlined destroy of PKLongPressGestureRecognizer.PressStartLocation((uint64_t)v12);
        }
        else
        {
          outlined init with take of PKLongPressGestureRecognizer.PressStartLocation((uint64_t)v12, (uint64_t)v9);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1);
          }
          uint64_t v21 = v34;
          unint64_t v27 = *(void *)(v34 + 16);
          unint64_t v26 = *(void *)(v34 + 24);
          unint64_t v28 = v27 + 1;
          if (v27 >= v26 >> 1)
          {
            unint64_t v29 = v27 + 1;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
            unint64_t v28 = v29;
            uint64_t v21 = v34;
          }
          *(void *)(v21 + 16) = v28;
          outlined init with take of PKLongPressGestureRecognizer.PressStartLocation((uint64_t)v9, v21 + v24 + v27 * v25);
          uint64_t v22 = v31;
        }
        if (v22 == ++v23)
        {
          uint64_t v21 = v34;
          uint64_t v19 = v30;
          goto LABEL_27;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_27:
      swift_bridgeObjectRelease();
      *(void *)&v2[v19] = v21;
      swift_bridgeObjectRelease();
      PKLongPressGestureRecognizer.addNewStartLocation(_:)((CGPoint)__PAIR128__(*(unint64_t *)&v18, *(unint64_t *)&v16));
    }
  }
}

uint64_t outlined init with copy of PKLongPressGestureRecognizer.PressStartLocation(uint64_t a1, uint64_t a2)
{
  starteCGFloat d = type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 16))(a2, a1, started);
  return a2;
}

uint64_t outlined destroy of PKLongPressGestureRecognizer.PressStartLocation(uint64_t a1)
{
  starteCGFloat d = type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(started - 8) + 8))(a1, started);
  return a1;
}

uint64_t outlined consume of Set<UITouch>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 7889261;
  }
  else {
    uint64_t v2 = 6579297;
  }
  if (a2) {
    uint64_t v3 = 7889261;
  }
  else {
    uint64_t v3 = 6579297;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  uint64_t v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x796C7069746C756DLL;
  }
  else {
    uint64_t v3 = 0x764F656372756F73;
  }
  if (v2) {
    char v4 = 0xEA00000000007265;
  }
  else {
    char v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x796C7069746C756DLL;
  }
  else {
    uint64_t v5 = 0x764F656372756F73;
  }
  if (a2) {
    uint64_t v6 = 0xE800000000000000;
  }
  else {
    uint64_t v6 = 0xEA00000000007265;
  }
  if (v3 == v5 && v4 == v6) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v2 = 0x657461746F72;
    }
    else {
      uint64_t v2 = 0x6D6F646E6172;
    }
    unint64_t v3 = 0xE600000000000000;
    int v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1) {
        uint64_t v5 = 0x657461746F72;
      }
      else {
        uint64_t v5 = 0x6D6F646E6172;
      }
      unint64_t v6 = 0xE600000000000000;
      if (v2 != v5) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v3 = 0xE400000000000000;
    uint64_t v2 = 1701736302;
    int v4 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }
  unint64_t v6 = 0xE400000000000000;
  if (v2 != 1701736302)
  {
LABEL_15:
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6) {
    goto LABEL_15;
  }
  char v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  if (a1)
  {
    if (a1 == 1) {
      uint64_t v2 = 0x7974696361706FLL;
    }
    else {
      uint64_t v2 = 0x32737569646172;
    }
    unint64_t v3 = 0xE700000000000000;
    int v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1) {
        uint64_t v5 = 0x7974696361706FLL;
      }
      else {
        uint64_t v5 = 0x32737569646172;
      }
      unint64_t v6 = 0xE700000000000000;
      if (v2 != v5) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v3 = 0xE600000000000000;
    uint64_t v2 = 0x737569646172;
    int v4 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }
  unint64_t v6 = 0xE600000000000000;
  if (v2 != 0x737569646172)
  {
LABEL_15:
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6) {
    goto LABEL_15;
  }
  char v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000011;
  unint64_t v3 = 0x80000001C481A030;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000011;
  switch(v4)
  {
    case 1:
      unint64_t v6 = "com.apple.ink.pencil";
      goto LABEL_9;
    case 2:
      unint64_t v6 = "com.apple.ink.marker";
      goto LABEL_9;
    case 3:
      unint64_t v5 = 0xD000000000000016;
      char v7 = "com.apple.ink.monoline";
      goto LABEL_7;
    case 4:
      unint64_t v5 = 0xD000000000000019;
      char v7 = "com.apple.ink.fountainpen";
      goto LABEL_7;
    case 5:
      unint64_t v5 = 0xD000000000000018;
      char v7 = "com.apple.ink.watercolor";
LABEL_7:
      unint64_t v3 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    case 6:
      unint64_t v6 = "com.apple.ink.crayon";
LABEL_9:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000014;
      break;
    default:
      break;
  }
  unint64_t v8 = 0x80000001C481A030;
  switch(a2)
  {
    case 1:
      uint64_t v9 = "com.apple.ink.pencil";
      goto LABEL_20;
    case 2:
      uint64_t v9 = "com.apple.ink.marker";
      goto LABEL_20;
    case 3:
      unint64_t v2 = 0xD000000000000016;
      uint64_t v10 = "com.apple.ink.monoline";
      goto LABEL_16;
    case 4:
      unint64_t v2 = 0xD000000000000019;
      uint64_t v10 = "com.apple.ink.fountainpen";
      goto LABEL_16;
    case 5:
      unint64_t v2 = 0xD000000000000018;
      uint64_t v10 = "com.apple.ink.watercolor";
LABEL_16:
      unint64_t v8 = (unint64_t)(v10 - 32) | 0x8000000000000000;
      goto LABEL_17;
    case 6:
      uint64_t v9 = "com.apple.ink.crayon";
LABEL_20:
      unint64_t v8 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      if (v5 == 0xD000000000000014) {
        goto LABEL_21;
      }
      goto LABEL_23;
    default:
LABEL_17:
      if (v5 != v2) {
        goto LABEL_23;
      }
LABEL_21:
      if (v3 == v8) {
        char v11 = 1;
      }
      else {
LABEL_23:
      }
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v11 & 1;
  }
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  unint64_t v2 = 0x797469636F6C6576;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x797469636F6C6576;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6564757469746C61;
      break;
    case 2:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x6874756D697A61;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x6563726F66;
      break;
    case 4:
      unint64_t v5 = 0x6F69746365726964;
      unint64_t v3 = 0xE90000000000006ELL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 0x6564757469746C61) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x6874756D697A61) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      unint64_t v2 = 0x6563726F66;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE90000000000006ELL;
      if (v5 != 0x6F69746365726964) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  unint64_t v2 = 0x7475706E69;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x7475706E69;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x74757074756FLL;
      break;
    case 2:
      unint64_t v5 = 0x757074754F78616DLL;
      unint64_t v3 = 0xE900000000000074;
      break;
    case 3:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x736C6F72746E6F63;
      break;
    case 4:
      unint64_t v3 = 0x80000001C481A180;
      unint64_t v5 = 0xD000000000000010;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x74757074756FLL) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE900000000000074;
      if (v5 != 0x757074754F78616DLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE800000000000000;
      unint64_t v2 = 0x736C6F72746E6F63;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0x80000001C481A180;
      if (v5 != 0xD000000000000010) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = (id *)(a1 + 32);
    uint64_t v2 = v10;
    do
    {
      id v5 = *v4;
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v10;
      }
      unint64_t v7 = *(void *)(v2 + 16);
      unint64_t v6 = *(void *)(v2 + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
        uint64_t v2 = v10;
      }
      *(void *)(v2 + 16) = v7 + 1;
      outlined init with take of Any(&v9, (_OWORD *)(v2 + 32 * v7 + 32));
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    id v5 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = a1 + 32;
    do
    {
      v4 += 8;
      CGFloat._bridgeToObjectiveC()();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

id PKInkBehavior.__allocating_init(renderingDescriptor:blendAlpha:targetMultiple:baseAlpha:inkTransform:useUnclampedWeight:smoothingDescriptor:featheringDescriptor:pencilFeatheringDescriptor:animationDescriptor:identifier:version:variant:uiWidths:defaultWidth:showBrushIndicator:supportsCombiningStrokes:rulerOffsetScale:rulerOffsetConstant:weightFunction:inkFunctions:)(void *a1, long long *a2, char a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __int16 a20,void *a21)
{
  long long v38 = a2[1];
  long long v39 = *a2;
  uint64_t v28 = *((void *)a2 + 4);
  uint64_t v29 = *((void *)a2 + 5);
  id v30 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v31 = (void *)MEMORY[0x1C87824B0](a8, a15);
  swift_bridgeObjectRelease();
  uint64_t v32 = (void *)MEMORY[0x1C87824B0](a17, a18);
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKInkFunction);
  Class v34 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v46[0] = v39;
  v46[1] = v38;
  uint64_t v47 = v28;
  uint64_t v48 = v29;
  LOWORD(v37) = a20;
  id v35 = objc_msgSend(v30, sel_initWithRenderingDescriptor_blendAlpha_targetMultiple_baseAlpha_inkTransform_useUnclampedWeight_smoothingDescriptor_featheringDescriptor_pencilFeatheringDescriptor_animationDescriptor_identifier_version_variant_uiWidths_defaultWidth_showBrushIndicator_supportsCombiningStrokes_rulerOffsetScale_rulerOffsetConstant_weightFunction_inkFunctions_, a1, v46, a3 & 1, a4, a5, a6, a9, a10, a11, a12, a13, a14, a7, v31, a16, v32, isa,
          v37,
          a21,
          v34);

  return v35;
}

char *specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  unint64_t v8 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v15 = v7;
    long long v16 = *(_OWORD *)(a3 + 16 * v7 + 32);
    a1(&v13, &v15);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    if ((v14 & 1) == 0)
    {
      uint64_t v9 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
      }
      unint64_t v11 = *((void *)v8 + 2);
      unint64_t v10 = *((void *)v8 + 3);
      if (v11 >= v10 >> 1) {
        unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v8);
      }
      *((void *)v8 + 2) = v11 + 1;
      *(void *)&v8[8 * v11 + 32] = v9;
    }
    ++v7;
  }
  while (v4 != v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    uint64_t v10 = v4 + v2;
  }
  else {
    uint64_t v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  BOOL v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, id a3)
{
  id v8 = objc_msgSend(a3, sel_count);
  if (a1 < 0 || (uint64_t)v8 < a1)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v9 = objc_msgSend(a3, sel_count);
  if (a2 < 0 || (uint64_t)v9 < a2) {
    goto LABEL_19;
  }
  uint64_t v3 = *v4;
  int64_t v10 = *((void *)*v4 + 2);
  int64_t v11 = v10 + a2 - a1;
  if (__OFADD__(v10, a2 - a1))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v13 = *((void *)v3 + 3) >> 1, v13 < v11))
  {
    if (v10 <= v11) {
      int64_t v14 = v10 + a2 - a1;
    }
    else {
      int64_t v14 = v10;
    }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
    int64_t v13 = *((void *)v3 + 3) >> 1;
  }
  uint64_t v15 = *((void *)v3 + 2);
  uint64_t v16 = v13 - v15;
  uint64_t v17 = specialized Slice._copyContents(initializing:)(v38, &v3[8 * v15 + 32], v13 - v15, a1, a2, a3);
  if (v17 < a2 - a1) {
    goto LABEL_21;
  }
  if (v17 >= 1)
  {
    uint64_t v18 = *((void *)v3 + 2);
    BOOL v19 = __OFADD__(v18, v17);
    uint64_t v20 = v18 + v17;
    if (v19)
    {
      __break(1u);
      goto LABEL_43;
    }
    *((void *)v3 + 2) = v20;
  }
  if (v17 != v16)
  {
LABEL_17:

    id *v4 = v3;
    return;
  }
LABEL_22:
  uint64_t v21 = *(void *)v41;
  uint64_t v22 = *(void *)v39;
  if (*(void *)v41 == *(void *)v39) {
    goto LABEL_17;
  }
  int64_t v11 = *((void *)v3 + 2);
  id v23 = v40;
  unint64_t v24 = specialized Slice.subscript.read(v37, *(uint64_t *)v41, *(uint64_t *)v38, *(uint64_t *)v39, v40);
  id v26 = *v25;
  ((void (*)(void *, void))v24)(v37, 0);
  id v27 = objc_msgSend(v23, sel_count);
  if ((v21 & 0x8000000000000000) == 0 && v21 < (uint64_t)v27)
  {
    if (!v26) {
      goto LABEL_17;
    }
    *(void *)id v36 = v21 + 1;
    while (1)
    {
      unint64_t v28 = *((void *)v3 + 3);
      int64_t v29 = v28 >> 1;
      if ((uint64_t)(v28 >> 1) < v11 + 1)
      {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v11 + 1, 1, v3);
        int64_t v29 = *((void *)v3 + 3) >> 1;
      }
      if (v11 < v29) {
        break;
      }
      uint64_t v30 = *(void *)v36;
LABEL_40:
      *((void *)v3 + 2) = v11;
      *(void *)id v36 = v30;
      if (!v26) {
        goto LABEL_17;
      }
    }
    uint64_t v30 = *(void *)v36;
    while (1)
    {
      *(void *)&v3[8 * v11++ + 32] = v26;
      if (v22 == v30) {
        break;
      }
      id v31 = v40;
      uint64_t v32 = specialized Slice.subscript.read(v37, v30, *(uint64_t *)v38, v22, v40);
      id v26 = *v33;
      ((void (*)(void *, void))v32)(v37, 0);
      id v34 = objc_msgSend(v31, sel_count);
      if ((*(void *)v36 & 0x8000000000000000) != 0 || v30 >= (uint64_t)v34)
      {
        __break(1u);
        goto LABEL_45;
      }
      ++v30;
      if (v26) {
        BOOL v35 = v11 < v29;
      }
      else {
        BOOL v35 = 0;
      }
      if (!v35) {
        goto LABEL_40;
      }
    }
LABEL_43:
    *((void *)v3 + 2) = v11;
    goto LABEL_17;
  }
LABEL_45:
  __break(1u);
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x1C8782760](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    unint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t InkDescriptor.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InkDescriptor.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*InkDescriptor.id.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkDescriptor.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InkDescriptor.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*InkDescriptor.name.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkDescriptor.rendering.getter@<X0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 176);
  long long v3 = *(_OWORD *)(v1 + 208);
  long long v29 = *(_OWORD *)(v1 + 192);
  long long v30 = v3;
  long long v4 = *(_OWORD *)(v1 + 112);
  long long v5 = *(_OWORD *)(v1 + 144);
  long long v25 = *(_OWORD *)(v1 + 128);
  long long v6 = v25;
  long long v26 = v5;
  long long v7 = *(_OWORD *)(v1 + 144);
  long long v8 = *(_OWORD *)(v1 + 176);
  long long v27 = *(_OWORD *)(v1 + 160);
  long long v9 = v27;
  long long v28 = v8;
  long long v10 = *(_OWORD *)(v1 + 48);
  long long v11 = *(_OWORD *)(v1 + 80);
  long long v21 = *(_OWORD *)(v1 + 64);
  long long v12 = v21;
  long long v22 = v11;
  long long v13 = *(_OWORD *)(v1 + 80);
  long long v14 = *(_OWORD *)(v1 + 112);
  long long v23 = *(_OWORD *)(v1 + 96);
  long long v15 = v23;
  long long v24 = v14;
  long long v16 = *(_OWORD *)(v1 + 48);
  v20[0] = *(_OWORD *)(v1 + 32);
  long long v17 = v20[0];
  v20[1] = v16;
  long long v18 = *(_OWORD *)(v1 + 208);
  *(_OWORD *)(a1 + 160) = v29;
  *(_OWORD *)(a1 + 176) = v18;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v4;
  int v31 = *(_DWORD *)(v1 + 224);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(v1 + 224);
  *(_OWORD *)a1 = v17;
  *(_OWORD *)(a1 + 16) = v10;
  return outlined retain of InkRendering((uint64_t)v20, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, int))outlined copy of InkDescriptorParticles?);
}

uint64_t outlined copy of InkDescriptorParticles?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 InkDescriptor.rendering.setter(uint64_t a1)
{
  long long v3 = *(_OWORD *)(v1 + 208);
  v15[10] = *(_OWORD *)(v1 + 192);
  v15[11] = v3;
  int v16 = *(_DWORD *)(v1 + 224);
  long long v4 = *(_OWORD *)(v1 + 144);
  void v15[6] = *(_OWORD *)(v1 + 128);
  v15[7] = v4;
  long long v5 = *(_OWORD *)(v1 + 176);
  v15[8] = *(_OWORD *)(v1 + 160);
  v15[9] = v5;
  long long v6 = *(_OWORD *)(v1 + 80);
  _OWORD v15[2] = *(_OWORD *)(v1 + 64);
  v15[3] = v6;
  long long v7 = *(_OWORD *)(v1 + 112);
  v15[4] = *(_OWORD *)(v1 + 96);
  v15[5] = v7;
  long long v8 = *(_OWORD *)(v1 + 48);
  v15[0] = *(_OWORD *)(v1 + 32);
  v15[1] = v8;
  outlined retain of InkRendering((uint64_t)v15, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, int))outlined consume of InkDescriptorParticles?);
  long long v9 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v1 + 192) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v1 + 208) = v9;
  *(_DWORD *)(v1 + 224) = *(_DWORD *)(a1 + 192);
  long long v10 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v1 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v1 + 144) = v10;
  long long v11 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v1 + 160) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v1 + 176) = v11;
  long long v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 80) = v12;
  long long v13 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 112) = v13;
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)a1;
  *(__n128 *)(v1 + 48) = result;
  return result;
}

uint64_t outlined retain of InkRendering(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, int))
{
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v15 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 152);
  uint64_t v9 = *(void *)(a1 + 160);
  long long v13 = *(_OWORD *)(a1 + 168);
  uint64_t v10 = *(void *)(a1 + 184);
  int v11 = *(_DWORD *)(a1 + 192);
  a2(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(_DWORD *)(a1 + 96));
  a2(v15, v14, v4, v5, v6, v7, v8, v9, v13, *((void *)&v13 + 1), v10, v11);
  return a1;
}

uint64_t outlined consume of InkDescriptorParticles?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*InkDescriptor.rendering.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkDescriptor.behavior.getter@<X0>(void *a1@<X8>)
{
  long long v3 = (const void *)(v1 + 232);
  memcpy(__dst, v3, 0x102uLL);
  memcpy(a1, v3, 0x102uLL);
  return outlined retain of InkBehavior((uint64_t)__dst);
}

uint64_t outlined retain of InkBehavior(uint64_t a1)
{
  return a1;
}

void *InkDescriptor.behavior.setter(const void *a1)
{
  long long v3 = (void *)(v1 + 232);
  memcpy(__dst, v3, 0x102uLL);
  outlined release of InkBehavior((uint64_t)__dst);
  return memcpy(v3, a1, 0x102uLL);
}

uint64_t outlined release of InkBehavior(uint64_t a1)
{
  return a1;
}

uint64_t (*InkDescriptor.behavior.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkDescriptor.uiWidths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t InkDescriptor.uiWidths.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 496) = a1;
  return result;
}

uint64_t (*InkDescriptor.uiWidths.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkDescriptor.defaultWidth.getter()
{
  return *(double *)(v0 + 504);
}

void InkDescriptor.defaultWidth.setter(double a1)
{
  *(double *)(v1 + 504) = a1;
}

uint64_t (*InkDescriptor.defaultWidth.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

void *InkDescriptor.init(id:name:rendering:behavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const void *a6@<X5>, uint64_t a7@<X8>)
{
  long long v13 = *(_OWORD *)(a5 + 176);
  *(_OWORD *)(a7 + 192) = *(_OWORD *)(a5 + 160);
  *(_OWORD *)(a7 + 208) = v13;
  *(_DWORD *)(a7 + 224) = *(_DWORD *)(a5 + 192);
  long long v14 = *(_OWORD *)(a5 + 112);
  *(_OWORD *)(a7 + 128) = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(a7 + 144) = v14;
  long long v15 = *(_OWORD *)(a5 + 144);
  *(_OWORD *)(a7 + 160) = *(_OWORD *)(a5 + 128);
  *(_OWORD *)(a7 + 176) = v15;
  long long v16 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(a7 + 64) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a7 + 80) = v16;
  long long v17 = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(a7 + 96) = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(a7 + 112) = v17;
  long long v18 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a7 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(a7 + 48) = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1C4826FD0;
  *(_OWORD *)(v19 + 32) = xmmword_1C4826FE0;
  *(_OWORD *)(v19 + 48) = xmmword_1C4826FF0;
  *(void *)(v19 + 64) = 0x4049000000000000;
  memcpy(&__src[4], a6, 0x102uLL);
  *(void *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  uint64_t result = memcpy((void *)(a7 + 228), __src, 0x106uLL);
  *(void *)(a7 + 496) = v19;
  *(void *)(a7 + 504) = 0x403E000000000000;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkDescriptor.CodingKeys()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1701667182;
      break;
    case 2:
      uint64_t result = 0x6E697265646E6572;
      break;
    case 3:
      uint64_t result = 0x726F697661686562;
      break;
    case 4:
      uint64_t result = 0x7368746469576975;
      break;
    case 5:
      uint64_t result = 0x57746C7561666564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkDescriptor.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized InkDescriptor.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance InkDescriptor.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance InkDescriptor.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t InkDescriptor.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkDescriptor.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  uint64_t v24 = v2[2];
  uint64_t v25 = v9;
  uint64_t v10 = v2[3];
  uint64_t v22 = v2[62];
  uint64_t v23 = v10;
  uint64_t v11 = v2[63];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v27[0] = 0;
  uint64_t v12 = v26;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v12) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  uint64_t v14 = v22;
  v27[0] = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  long long v15 = *((_OWORD *)v2 + 13);
  *(_OWORD *)&v27[160] = *((_OWORD *)v2 + 12);
  *(_OWORD *)&v27[176] = v15;
  *(_DWORD *)&v27[192] = *((_DWORD *)v2 + 56);
  long long v16 = *((_OWORD *)v2 + 9);
  *(_OWORD *)&v27[96] = *((_OWORD *)v2 + 8);
  *(_OWORD *)&v27[112] = v16;
  long long v17 = *((_OWORD *)v2 + 11);
  *(_OWORD *)&v27[128] = *((_OWORD *)v2 + 10);
  *(_OWORD *)&v27[144] = v17;
  long long v18 = *((_OWORD *)v2 + 5);
  *(_OWORD *)&v27[32] = *((_OWORD *)v2 + 4);
  *(_OWORD *)&v27[48] = v18;
  long long v19 = *((_OWORD *)v2 + 7);
  *(_OWORD *)&v27[64] = *((_OWORD *)v2 + 6);
  *(_OWORD *)&v27[80] = v19;
  long long v20 = *((_OWORD *)v2 + 3);
  *(_OWORD *)long long v27 = *((_OWORD *)v2 + 2);
  *(_OWORD *)&v27[16] = v20;
  char v28 = 2;
  lazy protocol witness table accessor for type InkRendering and conformance InkRendering();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  memcpy(v27, v2 + 29, sizeof(v27));
  char v28 = 3;
  lazy protocol witness table accessor for type InkBehavior and conformance InkBehavior();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)long long v27 = v14;
  char v28 = 4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGFloat]);
  lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGFloat] and conformance <A> [A], &demangling cache variable for type metadata for [CGFloat], (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)long long v27 = v11;
  char v28 = 5;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, void))(v5 + 8))(v8, 0);
}

unint64_t lazy protocol witness table accessor for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkRendering and conformance InkRendering()
{
  unint64_t result = lazy protocol witness table cache variable for type InkRendering and conformance InkRendering;
  if (!lazy protocol witness table cache variable for type InkRendering and conformance InkRendering)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering and conformance InkRendering);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkRendering and conformance InkRendering;
  if (!lazy protocol witness table cache variable for type InkRendering and conformance InkRendering)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering and conformance InkRendering);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkBehavior and conformance InkBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type InkBehavior and conformance InkBehavior;
  if (!lazy protocol witness table cache variable for type InkBehavior and conformance InkBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior and conformance InkBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkBehavior and conformance InkBehavior;
  if (!lazy protocol witness table cache variable for type InkBehavior and conformance InkBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior and conformance InkBehavior);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

void *InkDescriptor.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkDescriptor.CodingKeys>);
  uint64_t v5 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32, v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C4826FD0;
  *(_OWORD *)(v9 + 32) = xmmword_1C4826FE0;
  *(_OWORD *)(v9 + 48) = xmmword_1C4826FF0;
  *(void *)(v9 + 64) = 0x4049000000000000;
  uint64_t v10 = a1[3];
  id v33 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  lazy protocol witness table accessor for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    return (void *)swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = v5;
    int v31 = a2;
    LOBYTE(v35[0]) = 0;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v14 = v13;
    uint64_t v30 = v12;
    LOBYTE(v35[0]) = 1;
    swift_bridgeObjectRetain();
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v17 = v16;
    uint64_t v28 = v15;
    char v71 = 2;
    lazy protocol witness table accessor for type InkRendering and conformance InkRendering();
    swift_bridgeObjectRetain();
    uint64_t v29 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v18 = v11;
    uint64_t v27 = v17;
    long long v68 = v82;
    long long v69 = v83;
    long long v64 = v78;
    long long v65 = v79;
    long long v67 = v81;
    long long v66 = v80;
    long long v60 = v74;
    long long v61 = v75;
    long long v63 = v77;
    long long v62 = v76;
    long long v59 = v73;
    long long v58 = v72;
    long long v98 = v82;
    long long v99 = v83;
    long long v94 = v78;
    long long v95 = v79;
    long long v97 = v81;
    long long v96 = v80;
    long long v90 = v74;
    long long v91 = v75;
    long long v93 = v77;
    long long v92 = v76;
    int v70 = v84;
    int v100 = v84;
    long long v89 = v73;
    long long v88 = v72;
    v56[263] = 3;
    outlined retain of InkRendering((uint64_t)&v58, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, int))outlined copy of InkDescriptorParticles?);
    lazy protocol witness table accessor for type InkBehavior and conformance InkBehavior();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    memcpy(v56, v57, 0x102uLL);
    memcpy(&v87[4], v57, 0x102uLL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGFloat]);
    LOBYTE(v34[0]) = 4;
    outlined retain of InkBehavior((uint64_t)v56);
    lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGFloat] and conformance <A> [A], &demangling cache variable for type metadata for [CGFloat], (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v19 = v35[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    char v54 = 5;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v32);
    uint64_t v20 = v55;
    uint64_t v21 = v19;
    uint64_t v22 = v30;
    *(void *)&v34[0] = v30;
    *((void *)&v34[0] + 1) = v14;
    uint64_t v23 = v27;
    uint64_t v24 = v28;
    *(void *)&v34[1] = v28;
    *((void *)&v34[1] + 1) = v27;
    v34[12] = v68;
    v34[13] = v69;
    LODWORD(v34[14]) = v70;
    v34[8] = v64;
    v34[9] = v65;
    v34[10] = v66;
    v34[11] = v67;
    v34[4] = v60;
    v34[5] = v61;
    v34[6] = v62;
    v34[7] = v63;
    v34[2] = v58;
    v34[3] = v59;
    memcpy((char *)&v34[14] + 8, v56, 0x102uLL);
    *(void *)&v34[31] = v21;
    *((void *)&v34[31] + 1) = v55;
    outlined retain of InkDescriptor(v34);
    swift_bridgeObjectRelease();
    outlined release of InkBehavior((uint64_t)v56);
    outlined retain of InkRendering((uint64_t)&v58, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, int))outlined consume of InkDescriptorParticles?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    memcpy(v31, v34, 0x200uLL);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    v35[0] = v22;
    v35[1] = v14;
    v35[2] = v24;
    v35[3] = v23;
    long long v46 = v98;
    long long v47 = v99;
    int v48 = v100;
    long long v42 = v94;
    long long v43 = v95;
    long long v44 = v96;
    long long v45 = v97;
    long long v38 = v90;
    long long v39 = v91;
    long long v40 = v92;
    long long v41 = v93;
    long long v36 = v88;
    long long v37 = v89;
    memcpy(v49, v87, sizeof(v49));
    int v50 = v85;
    __int16 v51 = v86;
    uint64_t v52 = v21;
    uint64_t v53 = v20;
    return outlined release of InkDescriptor(v35);
  }
}

uint64_t lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *outlined retain of InkDescriptor(void *a1)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[18];
  uint64_t v6 = a1[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of InkDescriptorParticles?(v4, v3);
  outlined copy of InkDescriptorParticles?(v6, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *outlined release of InkDescriptor(void *a1)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[18];
  uint64_t v6 = a1[17];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of InkDescriptorParticles?(v4, v3);
  outlined consume of InkDescriptorParticles?(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void *protocol witness for Decodable.init(from:) in conformance InkDescriptor@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return InkDescriptor.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkDescriptor(void *a1)
{
  return InkDescriptor.encode(to:)(a1);
}

uint64_t protocol witness for Identifiable.id.getter in conformance InkDescriptor@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

PencilKit::InkRendering::BlendMode_optional __swiftcall InkRendering.BlendMode.init(rawValue:)(Swift::String rawValue)
{
  v2._rawValue = &outlined read-only object #0 of InkRendering.BlendMode.init(rawValue:);
  return (PencilKit::InkRendering::BlendMode_optional)InkRendering.BlendMode.init(rawValue:)(rawValue, v2, v1);
}

uint64_t InkRendering.BlendMode.rawValue.getter()
{
  if (*v0) {
    return 0x796C7069746C756DLL;
  }
  else {
    return 0x764F656372756F73;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InkRendering.BlendMode(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InkRendering.BlendMode()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InkRendering.BlendMode()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InkRendering.BlendMode()
{
  return Hasher._finalize()();
}

PencilKit::InkRendering::BlendMode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InkRendering.BlendMode(Swift::String *a1)
{
  return InkRendering.BlendMode.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance InkRendering.BlendMode(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x764F656372756F73;
  if (*v1) {
    uint64_t v2 = 0x796C7069746C756DLL;
  }
  unint64_t v3 = 0xEA00000000007265;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkRendering.BlendMode()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkRendering.BlendMode()
{
  return RawRepresentable<>.encode(to:)();
}

void InkRendering.blendMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *InkRendering.blendMode.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*InkRendering.blendMode.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkRendering.particle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 72);
  uint64_t v11 = *(void *)(v1 + 80);
  uint64_t v12 = *(void *)(v1 + 88);
  int v13 = *(_DWORD *)(v1 + 96);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(_DWORD *)(a1 + 88) = v13;
  return outlined copy of InkDescriptorParticles?(v2, v3);
}

__n128 InkRendering.particle.setter(long long *a1)
{
  long long v8 = a1[1];
  long long v9 = *a1;
  long long v6 = a1[3];
  long long v7 = a1[2];
  __n128 v5 = (__n128)a1[4];
  uint64_t v2 = *((void *)a1 + 10);
  int v3 = *((_DWORD *)a1 + 22);
  outlined consume of InkDescriptorParticles?(*(void *)(v1 + 8), *(void *)(v1 + 16));
  *(_OWORD *)(v1 + 8) = v9;
  *(_OWORD *)(v1 + 24) = v8;
  *(_OWORD *)(v1 + 40) = v7;
  *(_OWORD *)(v1 + 56) = v6;
  __n128 result = v5;
  *(__n128 *)(v1 + 72) = v5;
  *(void *)(v1 + 88) = v2;
  *(_DWORD *)(v1 + 96) = v3;
  return result;
}

uint64_t (*InkRendering.particle.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkRendering.secondaryParticle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v4 = *(void *)(v1 + 120);
  uint64_t v5 = *(void *)(v1 + 128);
  uint64_t v6 = *(void *)(v1 + 136);
  uint64_t v7 = *(void *)(v1 + 144);
  uint64_t v8 = *(void *)(v1 + 152);
  uint64_t v9 = *(void *)(v1 + 160);
  uint64_t v10 = *(void *)(v1 + 168);
  uint64_t v11 = *(void *)(v1 + 176);
  uint64_t v12 = *(void *)(v1 + 184);
  int v13 = *(_DWORD *)(v1 + 192);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(_DWORD *)(a1 + 88) = v13;
  return outlined copy of InkDescriptorParticles?(v2, v3);
}

__n128 InkRendering.secondaryParticle.setter(long long *a1)
{
  long long v8 = a1[1];
  long long v9 = *a1;
  long long v6 = a1[3];
  long long v7 = a1[2];
  __n128 v5 = (__n128)a1[4];
  uint64_t v2 = *((void *)a1 + 10);
  int v3 = *((_DWORD *)a1 + 22);
  outlined consume of InkDescriptorParticles?(*(void *)(v1 + 104), *(void *)(v1 + 112));
  *(_OWORD *)(v1 + 104) = v9;
  *(_OWORD *)(v1 + 120) = v8;
  *(_OWORD *)(v1 + 136) = v7;
  *(_OWORD *)(v1 + 152) = v6;
  __n128 result = v5;
  *(__n128 *)(v1 + 168) = v5;
  *(void *)(v1 + 184) = v2;
  *(_DWORD *)(v1 + 192) = v3;
  return result;
}

uint64_t (*InkRendering.secondaryParticle.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkRendering.init()@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkRendering.CodingKeys()
{
  unint64_t v1 = 0x656C636974726170;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000011;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x646F4D646E656C62;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkRendering.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized InkRendering.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance InkRendering.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkRendering.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkRendering.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t InkRendering.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkRendering.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  long long v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = *v1;
  uint64_t v10 = *((void *)v1 + 1);
  uint64_t v39 = *((void *)v1 + 2);
  uint64_t v40 = v10;
  uint64_t v11 = *((void *)v1 + 3);
  uint64_t v37 = *((void *)v1 + 4);
  uint64_t v38 = v11;
  uint64_t v12 = *((void *)v1 + 5);
  uint64_t v35 = *((void *)v1 + 6);
  uint64_t v36 = v12;
  uint64_t v13 = *((void *)v1 + 7);
  uint64_t v33 = *((void *)v1 + 8);
  uint64_t v34 = v13;
  uint64_t v32 = *((void *)v1 + 9);
  uint64_t v31 = *((void *)v1 + 10);
  uint64_t v30 = *((void *)v1 + 11);
  int v53 = *((_DWORD *)v1 + 24);
  uint64_t v29 = *((void *)v1 + 13);
  uint64_t v28 = *((void *)v1 + 14);
  uint64_t v27 = *((void *)v1 + 15);
  uint64_t v26 = *((void *)v1 + 16);
  uint64_t v25 = *((void *)v1 + 17);
  uint64_t v24 = *((void *)v1 + 18);
  uint64_t v23 = *((void *)v1 + 19);
  uint64_t v22 = *((void *)v1 + 20);
  uint64_t v21 = *((void *)v1 + 21);
  uint64_t v20 = *((void *)v1 + 22);
  uint64_t v19 = *((void *)v1 + 23);
  HIDWORD(v18) = *((_DWORD *)v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v41) = v9;
  char v54 = 0;
  lazy protocol witness table accessor for type InkRendering.BlendMode and conformance InkRendering.BlendMode();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v14 = v27;
    uint64_t v15 = v28;
    uint64_t v16 = v29;
    uint64_t v41 = v40;
    uint64_t v42 = v39;
    uint64_t v43 = v38;
    uint64_t v44 = v37;
    uint64_t v45 = v36;
    uint64_t v46 = v35;
    uint64_t v47 = v34;
    uint64_t v48 = v33;
    uint64_t v49 = v32;
    uint64_t v50 = v31;
    uint64_t v51 = v30;
    int v52 = v53;
    char v54 = 1;
    lazy protocol witness table accessor for type InkDescriptorParticles and conformance InkDescriptorParticles();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v41 = v16;
    uint64_t v42 = v15;
    uint64_t v43 = v14;
    uint64_t v44 = v26;
    uint64_t v45 = v25;
    uint64_t v46 = v24;
    uint64_t v47 = v23;
    uint64_t v48 = v22;
    uint64_t v49 = v21;
    uint64_t v50 = v20;
    uint64_t v51 = v19;
    int v52 = HIDWORD(v18);
    char v54 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

unint64_t lazy protocol witness table accessor for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkRendering.BlendMode and conformance InkRendering.BlendMode()
{
  unint64_t result = lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode;
  if (!lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode;
  if (!lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode;
  if (!lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode;
  if (!lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkDescriptorParticles and conformance InkDescriptorParticles()
{
  unint64_t result = lazy protocol witness table cache variable for type InkDescriptorParticles and conformance InkDescriptorParticles;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles and conformance InkDescriptorParticles)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles and conformance InkDescriptorParticles);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkDescriptorParticles and conformance InkDescriptorParticles;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles and conformance InkDescriptorParticles)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles and conformance InkDescriptorParticles);
  }
  return result;
}

uint64_t InkRendering.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkRendering.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  char v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1[3];
  int v53 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  lazy protocol witness table accessor for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v54 = v2;
    uint64_t v97 = 0;
    long long v57 = 0uLL;
    long long v56 = 0uLL;
    uint64_t v55 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    LOBYTE(v83) = 0;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    *(void *)long long v88 = v55;
    *(_OWORD *)&v88[8] = v56;
    *(_OWORD *)&v88[24] = v57;
    uint64_t v89 = v97;
    uint64_t v90 = 0;
    int v91 = 0;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    memset(v96, 0, 28);
  }
  else
  {
    uint64_t v52 = a2;
    LOBYTE(v58) = 0;
    lazy protocol witness table accessor for type InkRendering.BlendMode and conformance InkRendering.BlendMode();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v51 = v83;
    LOBYTE(v58) = 1;
    lazy protocol witness table accessor for type InkDescriptorParticles and conformance InkDescriptorParticles();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v48 = v6;
    char v71 = 2;
    int v50 = v90;
    uint64_t v49 = v89;
    uint64_t v97 = *(void *)&v88[32];
    uint64_t v12 = v83;
    uint64_t v13 = v84;
    uint64_t v14 = v85;
    uint64_t v15 = v86;
    uint64_t v55 = v87;
    long long v56 = *(_OWORD *)v88;
    long long v57 = *(_OWORD *)&v88[16];
    outlined copy of InkDescriptorParticles?(v83, v84);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v54 = 0;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v5);
    uint64_t v16 = v72;
    uint64_t v42 = v74;
    uint64_t v43 = v73;
    uint64_t v17 = v76;
    uint64_t v18 = v77;
    uint64_t v47 = v79;
    uint64_t v48 = v78;
    *(void *)uint64_t v44 = v80;
    *(_OWORD *)&v44[8] = v81;
    int v45 = v82;
    uint64_t v19 = v75;
    uint64_t v41 = v75;
    uint64_t v46 = v77;
    outlined copy of InkDescriptorParticles?(v72, v73);
    outlined consume of InkDescriptorParticles?(0, 0);
    LOBYTE(v58) = v51;
    uint64_t v37 = v15;
    uint64_t v38 = v12;
    *((void *)&v58 + 1) = v12;
    *(void *)&long long v59 = v13;
    uint64_t v35 = v13;
    uint64_t v36 = v14;
    *((void *)&v59 + 1) = v14;
    *(void *)&long long v60 = v15;
    *((void *)&v60 + 1) = v55;
    long long v61 = v56;
    long long v62 = v57;
    *(void *)&long long v63 = v97;
    *((void *)&v63 + 1) = v49;
    LODWORD(v64) = v50;
    uint64_t v39 = v17;
    uint64_t v40 = v16;
    uint64_t v20 = v43;
    *((void *)&v64 + 1) = v16;
    *(void *)&long long v65 = v43;
    *((void *)&v65 + 1) = v42;
    *(void *)&long long v66 = v19;
    *((void *)&v66 + 1) = v17;
    *(void *)&long long v67 = v18;
    *((void *)&v67 + 1) = v48;
    *(void *)&long long v68 = v47;
    *((void *)&v68 + 1) = *(void *)v44;
    long long v69 = *(_OWORD *)&v44[8];
    int v70 = v45;
    outlined retain of InkRendering((uint64_t)&v58, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, int))outlined copy of InkDescriptorParticles?);
    outlined consume of InkDescriptorParticles?(v16, v20);
    uint64_t v22 = v37;
    uint64_t v21 = v38;
    uint64_t v24 = v35;
    uint64_t v23 = v36;
    uint64_t v25 = v55;
    long long v26 = v56;
    outlined consume of InkDescriptorParticles?(v38, v35);
    long long v27 = v69;
    uint64_t v28 = v52;
    *(_OWORD *)(v52 + 160) = v68;
    *(_OWORD *)(v28 + 176) = v27;
    *(_DWORD *)(v28 + 192) = v70;
    long long v29 = v65;
    *(_OWORD *)(v28 + 96) = v64;
    *(_OWORD *)(v28 + 112) = v29;
    long long v30 = v67;
    *(_OWORD *)(v28 + 128) = v66;
    *(_OWORD *)(v28 + 144) = v30;
    long long v31 = v61;
    *(_OWORD *)(v28 + 32) = v60;
    *(_OWORD *)(v28 + 48) = v31;
    long long v32 = v63;
    *(_OWORD *)(v28 + 64) = v62;
    *(_OWORD *)(v28 + 80) = v32;
    long long v33 = v59;
    *(_OWORD *)uint64_t v28 = v58;
    *(_OWORD *)(v28 + 16) = v33;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    LOBYTE(v83) = v51;
    uint64_t v84 = v21;
    uint64_t v85 = v24;
    uint64_t v86 = v23;
    uint64_t v87 = v22;
    *(void *)long long v88 = v25;
    *(_OWORD *)&v88[8] = v26;
    *(_OWORD *)&v88[24] = v57;
    uint64_t v89 = v97;
    uint64_t v90 = v49;
    int v91 = v50;
    *(void *)&long long v92 = v40;
    *((void *)&v92 + 1) = v43;
    *(void *)&long long v93 = v42;
    *((void *)&v93 + 1) = v41;
    *(void *)&long long v94 = v39;
    *((void *)&v94 + 1) = v46;
    *(void *)&long long v95 = v48;
    *((void *)&v95 + 1) = v47;
    v96[0] = *(_OWORD *)v44;
    *(void *)&v96[1] = *(void *)&v44[16];
    DWORD2(v96[1]) = v45;
  }
  return outlined retain of InkRendering((uint64_t)&v83, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, int))outlined consume of InkDescriptorParticles?);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkRendering@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return InkRendering.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkRendering(void *a1)
{
  return InkRendering.encode(to:)(a1);
}

uint64_t InkDescriptorParticles.textureName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InkDescriptorParticles.textureName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*InkDescriptorParticles.textureName.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkDescriptorParticles.spacing.getter()
{
  return *(double *)(v0 + 16);
}

void InkDescriptorParticles.spacing.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*InkDescriptorParticles.spacing.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkDescriptorParticles.size.getter()
{
  return *(double *)(v0 + 24);
}

void InkDescriptorParticles.size.setter(double a1, double a2)
{
  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*InkDescriptorParticles.size.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkDescriptorParticles.mask.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 80);
  char v3 = *(unsigned char *)(v1 + 88);
  *(void *)a1 = *(void *)(v1 + 40);
  long long v4 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 40) = v2;
  *(unsigned char *)(a1 + 48) = v3;
  return swift_bridgeObjectRetain();
}

__n128 InkDescriptorParticles.mask.setter(long long *a1)
{
  __n128 v6 = (__n128)a1[1];
  long long v7 = *a1;
  uint64_t v2 = *((void *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 5);
  char v4 = *((unsigned char *)a1 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v1 + 40) = v7;
  __n128 result = v6;
  *(__n128 *)(v1 + 56) = v6;
  *(void *)(v1 + 72) = v2;
  *(void *)(v1 + 80) = v3;
  *(unsigned char *)(v1 + 88) = v4;
  return result;
}

uint64_t (*InkDescriptorParticles.mask.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

PencilKit::InkDescriptorParticles::ParticleRotation_optional __swiftcall InkDescriptorParticles.ParticleRotation.init(rawValue:)(Swift::String rawValue)
{
  v2._rawValue = &outlined read-only object #0 of InkDescriptorParticles.ParticleRotation.init(rawValue:);
  return (PencilKit::InkDescriptorParticles::ParticleRotation_optional)InkDescriptorParticles.ParticleRotation.init(rawValue:)(rawValue, v2, v1);
}

void *static InkDescriptorParticles.ParticleRotation.allCases.getter()
{
  return &outlined read-only object #0 of static InkDescriptorParticles.ParticleRotation.allCases.getter;
}

uint64_t InkDescriptorParticles.ParticleRotation.rawValue.getter()
{
  uint64_t v1 = 0x657461746F72;
  if (*v0 != 1) {
    uint64_t v1 = 0x6D6F646E6172;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701736302;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InkDescriptorParticles.ParticleRotation(char *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InkDescriptorParticles.ParticleRotation()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InkDescriptorParticles.ParticleRotation()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InkDescriptorParticles.ParticleRotation()
{
  return Hasher._finalize()();
}

PencilKit::InkDescriptorParticles::ParticleRotation_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InkDescriptorParticles.ParticleRotation(Swift::String *a1)
{
  return InkDescriptorParticles.ParticleRotation.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance InkDescriptorParticles.ParticleRotation(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = 0x657461746F72;
  if (v2 != 1) {
    uint64_t v4 = 0x6D6F646E6172;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 1701736302;
  }
  if (!v5) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v6;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkDescriptorParticles.ParticleRotation()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkDescriptorParticles.ParticleRotation()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance InkDescriptorParticles.ParticleRotation(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance InkDescriptorParticles.ParticleRotation;
}

void InkDescriptorParticles.rotation.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 89);
}

unsigned char *InkDescriptorParticles.rotation.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 89) = *result;
  return result;
}

uint64_t (*InkDescriptorParticles.rotation.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkDescriptorParticles.initialRandomRotation.getter()
{
  return *(unsigned __int8 *)(v0 + 90);
}

uint64_t InkDescriptorParticles.initialRandomRotation.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 90) = result;
  return result;
}

uint64_t (*InkDescriptorParticles.initialRandomRotation.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

PencilKit::InkDescriptorParticles::ParticleBlendMode_optional __swiftcall InkDescriptorParticles.ParticleBlendMode.init(rawValue:)(Swift::String rawValue)
{
  v2._rawValue = &outlined read-only object #0 of InkDescriptorParticles.ParticleBlendMode.init(rawValue:);
  return (PencilKit::InkDescriptorParticles::ParticleBlendMode_optional)InkRendering.BlendMode.init(rawValue:)(rawValue, v2, v1);
}

uint64_t InkRendering.BlendMode.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  Swift::Int v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v7 == 1) {
    char v9 = 1;
  }
  else {
    char v9 = 2;
  }
  if (!v7) {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t InkDescriptorParticles.ParticleBlendMode.rawValue.getter()
{
  if (*v0) {
    return 7889261;
  }
  else {
    return 6579297;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InkDescriptorParticles.ParticleBlendMode(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InkDescriptorParticles.ParticleBlendMode()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InkDescriptorParticles.ParticleBlendMode()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InkDescriptorParticles.ParticleBlendMode()
{
  return Hasher._finalize()();
}

PencilKit::InkDescriptorParticles::ParticleBlendMode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InkDescriptorParticles.ParticleBlendMode(Swift::String *a1)
{
  return InkDescriptorParticles.ParticleBlendMode.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance InkDescriptorParticles.ParticleBlendMode(uint64_t *a1@<X8>)
{
  uint64_t v2 = 6579297;
  if (*v1) {
    uint64_t v2 = 7889261;
  }
  *a1 = v2;
  a1[1] = 0xE300000000000000;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkDescriptorParticles.ParticleBlendMode()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkDescriptorParticles.ParticleBlendMode()
{
  return RawRepresentable<>.encode(to:)();
}

void InkDescriptorParticles.particleBlendMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 91);
}

unsigned char *InkDescriptorParticles.particleBlendMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 91) = *result;
  return result;
}

uint64_t (*InkDescriptorParticles.particleBlendMode.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkDescriptorParticles.init()@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000010;
  *(void *)(a1 + 8) = 0x80000001C481A860;
  *(_OWORD *)(a1 + 16) = xmmword_1C4827000;
  *(void *)(a1 + 32) = 0x3FF0000000000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 89) = 1;
  *(unsigned char *)(a1 + 91) = 0;
  return result;
}

unint64_t InkDescriptorParticles.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x4E65727574786574;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x676E6963617073;
      break;
    case 2:
      unint64_t result = 1702521203;
      break;
    case 3:
      unint64_t result = 1802723693;
      break;
    case 4:
      unint64_t result = 0x6E6F697461746F72;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance InkDescriptorParticles.CodingKeys()
{
  return InkDescriptorParticles.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkDescriptorParticles.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized InkDescriptorParticles.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance InkDescriptorParticles.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkDescriptorParticles.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkDescriptorParticles.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t InkDescriptorParticles.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkDescriptorParticles.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  Swift::Int v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v10 = *(void *)(v1 + 32);
  uint64_t v11 = *(void *)(v1 + 40);
  uint64_t v32 = *(void *)(v1 + 48);
  uint64_t v33 = v11;
  uint64_t v12 = *(void *)(v1 + 56);
  uint64_t v30 = *(void *)(v1 + 64);
  uint64_t v31 = v12;
  uint64_t v13 = *(void *)(v1 + 72);
  uint64_t v28 = *(void *)(v1 + 80);
  uint64_t v29 = v13;
  LODWORD(v13) = *(unsigned __int8 *)(v1 + 88);
  int v26 = *(unsigned __int8 *)(v1 + 89);
  int v27 = v13;
  v25[1] = *(unsigned __int8 *)(v1 + 90);
  int v14 = *(unsigned __int8 *)(v1 + 91);
  uint64_t v15 = a1[3];
  uint64_t v16 = a1;
  uint64_t v18 = v17;
  __swift_project_boxed_opaque_existential_1(v16, v15);
  lazy protocol witness table accessor for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v35) = 0;
  uint64_t v19 = v34;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v19)
  {
    uint64_t v20 = v30;
    uint64_t v21 = v31;
    uint64_t v23 = v32;
    uint64_t v22 = v33;
    LODWORD(v34) = v14;
    uint64_t v35 = v9;
    char v42 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v35 = v8;
    uint64_t v36 = v10;
    char v42 = 2;
    type metadata accessor for CGSize(0);
    lazy protocol witness table accessor for type CGSize and conformance CGSize(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, type metadata accessor for CGSize);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v35 = v22;
    uint64_t v36 = v23;
    uint64_t v37 = v21;
    uint64_t v38 = v20;
    uint64_t v39 = v29;
    uint64_t v40 = v28;
    char v41 = v27;
    char v42 = 3;
    lazy protocol witness table accessor for type InkMask and conformance InkMask();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v35) = v26;
    char v42 = 4;
    lazy protocol witness table accessor for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v35) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v35) = v34;
    char v42 = 6;
    lazy protocol witness table accessor for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v18);
}

unint64_t lazy protocol witness table accessor for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkMask and conformance InkMask()
{
  unint64_t result = lazy protocol witness table cache variable for type InkMask and conformance InkMask;
  if (!lazy protocol witness table cache variable for type InkMask and conformance InkMask)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkMask and conformance InkMask);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkMask and conformance InkMask;
  if (!lazy protocol witness table cache variable for type InkMask and conformance InkMask)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkMask and conformance InkMask);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation()
{
  unint64_t result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode()
{
  unint64_t result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode);
  }
  return result;
}

uint64_t InkDescriptorParticles.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkDescriptorParticles.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v32) = 0;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = v12;
    char v39 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v14 = v32;
    type metadata accessor for CGSize(0);
    char v39 = 2;
    lazy protocol witness table accessor for type CGSize and conformance CGSize(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, type metadata accessor for CGSize);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v15 = v32;
    uint64_t v16 = v33;
    char v39 = 3;
    lazy protocol witness table accessor for type InkMask and conformance InkMask();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v30 = v32;
    uint64_t v31 = v11;
    uint64_t v17 = v33;
    uint64_t v28 = v35;
    uint64_t v29 = v34;
    uint64_t v26 = v37;
    uint64_t v27 = v36;
    int v25 = v38;
    char v39 = 4;
    lazy protocol witness table accessor for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v24 = v32;
    LOBYTE(v32) = 5;
    int v23 = KeyedDecodingContainer.decode(_:forKey:)();
    char v39 = 6;
    lazy protocol witness table accessor for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v18 = v23 & 1;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    char v19 = v32;
    *(void *)a2 = v31;
    *(void *)(a2 + 8) = v13;
    *(void *)(a2 + 16) = v14;
    *(void *)(a2 + 24) = v15;
    *(void *)(a2 + 32) = v16;
    *(void *)(a2 + 40) = v30;
    *(void *)(a2 + 48) = v17;
    uint64_t v20 = v28;
    *(void *)(a2 + 56) = v29;
    *(void *)(a2 + 64) = v20;
    uint64_t v21 = v26;
    *(void *)(a2 + 72) = v27;
    *(void *)(a2 + 80) = v21;
    *(unsigned char *)(a2 + 88) = v25;
    *(unsigned char *)(a2 + 89) = v24;
    *(unsigned char *)(a2 + 90) = v18;
    *(unsigned char *)(a2 + 91) = v19;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkDescriptorParticles@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return InkDescriptorParticles.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkDescriptorParticles(void *a1)
{
  return InkDescriptorParticles.encode(to:)(a1);
}

uint64_t DecodableDefault.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t DecodableDefault.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*DecodableDefault.wrappedValue.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t DecodableDefault.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t DecodableDefault.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t DecodableDefault.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v8, v10);
  uint64_t v13 = &v21[-v12 - 8];
  uint64_t v14 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v11, v15);
  uint64_t v17 = &v21[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of Decoder(a1, (uint64_t)v21);
  dispatch thunk of Decodable.init(from:)();
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v13, 1, 1, a2);
    (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    __swift_destroy_boxed_opaque_existential_1(a1);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v22, v17, a2);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, a2);
    __swift_destroy_boxed_opaque_existential_1(a1);
    char v19 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v19(v17, v13, a2);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v19)(v22, v17, a2);
  }
}

uint64_t outlined init with copy of Decoder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t DecodableDefault.encode(to:)()
{
  return dispatch thunk of Encodable.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance DecodableDefault<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return DecodableDefault.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DecodableDefault<A>()
{
  return DecodableDefault.encode(to:)();
}

double CGFloat.init(defaultState:)()
{
  return 0.0;
}

uint64_t InkMask.textureName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InkMask.textureName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*InkMask.textureName.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkMask.scale.getter()
{
  return *(double *)(v0 + 16);
}

void InkMask.scale.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*InkMask.scale.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkMask.scaleConstant.getter()
{
  return *(double *)(v0 + 24);
}

void InkMask.scaleConstant.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*InkMask.scaleConstant.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkMask.movement.getter()
{
  return *(double *)(v0 + 32);
}

void InkMask.movement.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*InkMask.movement.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkMask.depth.getter()
{
  return *(double *)(v0 + 40);
}

void InkMask.depth.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

uint64_t (*InkMask.depth.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkMask.initialRandomOffset.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t InkMask.initialRandomOffset.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

uint64_t (*InkMask.initialRandomOffset.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkMask.init()@<D0>(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "default-mask");
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  double result = 8.0;
  *(_OWORD *)(a1 + 16) = xmmword_1C4827010;
  *(_OWORD *)(a1 + 32) = xmmword_1C4827020;
  *(unsigned char *)(a1 + 48) = 0;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance InkMask.CodingKeys()
{
  unint64_t result = 0x4E65727574786574;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x656C616373;
      break;
    case 2:
      unint64_t result = 0x6E6F43656C616373;
      break;
    case 3:
      unint64_t result = 0x746E656D65766F6DLL;
      break;
    case 4:
      unint64_t result = 0x6874706564;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkMask.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized InkMask.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkMask.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkMask.CodingKeys and conformance InkMask.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkMask.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkMask.CodingKeys and conformance InkMask.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t InkMask.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkMask.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v11 = *(void *)(v1 + 32);
  uint64_t v10 = *(void *)(v1 + 40);
  v14[3] = *(unsigned __int8 *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkMask.CodingKeys and conformance InkMask.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17) = 0;
  uint64_t v12 = v15;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v12)
  {
    uint64_t v17 = v9;
    char v16 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v17 = v8;
    char v16 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DecodableDefault<CGFloat>);
    lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(&lazy protocol witness table cache variable for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>, &demangling cache variable for type metadata for DecodableDefault<CGFloat>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v17 = v11;
    char v16 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v17 = v10;
    char v16 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v17) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

unint64_t lazy protocol witness table accessor for type InkMask.CodingKeys and conformance InkMask.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys);
  }
  return result;
}

uint64_t InkMask.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkMask.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkMask.CodingKeys and conformance InkMask.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v22) = 0;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = v12;
    uint64_t v21 = a2;
    char v24 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v20 = v11;
    double v14 = v22;
    char v24 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DecodableDefault<CGFloat>);
    lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(&lazy protocol witness table cache variable for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>, &demangling cache variable for type metadata for DecodableDefault<CGFloat>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if (v23) {
      double v15 = 0.0;
    }
    else {
      double v15 = v22;
    }
    char v24 = 3;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    double v16 = v22;
    char v24 = 4;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    double v17 = v22;
    LOBYTE(v22) = 5;
    char v18 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    char v19 = (double *)v21;
    *uint64_t v21 = v20;
    *((void *)v19 + 1) = v13;
    v19[2] = v14;
    v19[3] = v15;
    v19[4] = v16;
    v19[5] = v17;
    *((unsigned char *)v19 + 48) = v18 & 1;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkMask@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return InkMask.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkMask(void *a1)
{
  return InkMask.encode(to:)(a1);
}

void InkFunction.Input.id.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

PencilKit::InkFunction::Input_optional __swiftcall InkFunction.Input.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of InkFunction.Input.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 5;
  if (v5 < 5) {
    char v7 = v5;
  }
  char *v4 = v7;
  return result;
}

void *static InkFunction.Input.allCases.getter()
{
  return &outlined read-only object #0 of static InkFunction.Input.allCases.getter;
}

uint64_t InkFunction.Input.rawValue.getter()
{
  uint64_t result = 0x797469636F6C6576;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6564757469746C61;
      break;
    case 2:
      uint64_t result = 0x6874756D697A61;
      break;
    case 3:
      uint64_t result = 0x6563726F66;
      break;
    case 4:
      uint64_t result = 0x6F69746365726964;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InkFunction.Input(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InkFunction.Input()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InkFunction.Input()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InkFunction.Input()
{
  return Hasher._finalize()();
}

PencilKit::InkFunction::Input_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InkFunction.Input(Swift::String *a1)
{
  return InkFunction.Input.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance InkFunction.Input(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x797469636F6C6576;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 0x6564757469746C61;
      goto LABEL_3;
    case 2:
      *a1 = 0x6874756D697A61;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 0x6563726F66;
      a1[1] = 0xE500000000000000;
      break;
    case 4:
      *a1 = 0x6F69746365726964;
      a1[1] = 0xE90000000000006ELL;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE800000000000000;
      break;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkFunction.Input()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkFunction.Input()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance InkFunction.Input(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance InkFunction.Input;
}

void protocol witness for Identifiable.id.getter in conformance InkFunction.Input(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t InkFunction.InputProperties.rawValue.getter()
{
  return *(void *)v0;
}

PencilKit::InkFunction::InputProperties __swiftcall InkFunction.InputProperties.init(rawValue:)(PencilKit::InkFunction::InputProperties rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static InkFunction.InputProperties.altitudeAzimuth.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static InkFunction.InputProperties.force.getter(void *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkFunction.InputProperties()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkFunction.InputProperties()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t InkFunction.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t InkFunction.id.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*InkFunction.id.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkFunction.input.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for InkFunction();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t type metadata accessor for InkFunction()
{
  uint64_t result = type metadata singleton initialization cache for InkFunction;
  if (!type metadata singleton initialization cache for InkFunction) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t InkFunction.input.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for InkFunction();
  *(unsigned char *)(v1 + *(int *)(result + 20)) = v2;
  return result;
}

uint64_t (*InkFunction.input.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkFunction.output.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for InkFunction() + 24));
}

uint64_t InkFunction.output.setter(double a1, double a2)
{
  uint64_t result = type metadata accessor for InkFunction();
  uint64_t v6 = (double *)(v2 + *(int *)(result + 24));
  double *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*InkFunction.output.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkFunction.maxOutput.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for InkFunction() + 28));
}

uint64_t InkFunction.maxOutput.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = type metadata accessor for InkFunction();
  uint64_t v8 = v3 + *(int *)(result + 28);
  *(void *)uint64_t v8 = a1;
  *(void *)(v8 + 8) = a2;
  *(unsigned char *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*InkFunction.maxOutput.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkFunction.controls.getter()
{
  type metadata accessor for InkFunction();

  return swift_bridgeObjectRetain();
}

uint64_t InkFunction.controls.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for InkFunction() + 32);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*InkFunction.controls.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkFunction.excludeInputWith.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = type metadata accessor for InkFunction();
  *a1 = *(void *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t InkFunction.excludeInputWith.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = type metadata accessor for InkFunction();
  *(void *)(v1 + *(int *)(result + 36)) = v2;
  return result;
}

uint64_t (*InkFunction.excludeInputWith.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

__n128 InkFunction.init()@<Q0>(uint64_t a1@<X8>)
{
  UUID.init()();
  uint64_t v2 = (int *)type metadata accessor for InkFunction();
  *(unsigned char *)(a1 + v2[5]) = 3;
  *(_OWORD *)(a1 + v2[6]) = xmmword_1C4827030;
  uint64_t v3 = a1 + v2[7];
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(unsigned char *)(v3 + 16) = 1;
  uint64_t v4 = v2[8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C4827040;
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = 0;
  *(_OWORD *)(v5 + 48) = xmmword_1C4827050;
  *(_OWORD *)(v5 + 64) = xmmword_1C4827060;
  __asm { FMOV            V0.2D, #1.0 }
  *(__n128 *)(v5 + 80) = result;
  *(void *)(a1 + v4) = v5;
  *(void *)(a1 + v2[9]) = 0;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InkFunction.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InkFunction.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InkFunction.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InkFunction.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance InkFunction.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized InkFunction.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance InkFunction.CodingKeys(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x7475706E69;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x74757074756FLL;
      goto LABEL_3;
    case 2:
      *a1 = 0x757074754F78616DLL;
      a1[1] = 0xE900000000000074;
      break;
    case 3:
      *a1 = 0x736C6F72746E6F63;
      a1[1] = 0xE800000000000000;
      break;
    case 4:
      *a1 = 0xD000000000000010;
      a1[1] = 0x80000001C481A180;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance InkFunction.CodingKeys()
{
  unint64_t result = 0x7475706E69;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x74757074756FLL;
      break;
    case 2:
      unint64_t result = 0x757074754F78616DLL;
      break;
    case 3:
      unint64_t result = 0x736C6F72746E6F63;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkFunction.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized InkFunction.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance InkFunction.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkFunction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkFunction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t InkFunction.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkFunction.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v10 = (int *)type metadata accessor for InkFunction();
  LOBYTE(v14) = *(unsigned char *)(v3 + v10[5]);
  char v16 = 0;
  lazy protocol witness table accessor for type InkFunction.Input and conformance InkFunction.Input();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v14 = *(_OWORD *)(v3 + v10[6]);
    char v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<CGFloat>);
    lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type ClosedRange<CGFloat> and conformance <> ClosedRange<A>, &demangling cache variable for type metadata for ClosedRange<CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = (long long *)(v3 + v10[7]);
    char v12 = *((unsigned char *)v11 + 16);
    long long v14 = *v11;
    char v15 = v12;
    char v16 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)(v3 + v10[8]);
    char v16 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGPoint]);
    lazy protocol witness table accessor for type [CGPoint] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGPoint] and conformance <A> [A], &lazy protocol witness table cache variable for type CGPoint and conformance CGPoint);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)(v3 + v10[9]);
    char v16 = 4;
    lazy protocol witness table accessor for type InkFunction.InputProperties and conformance InkFunction.InputProperties();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t lazy protocol witness table accessor for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkFunction.Input and conformance InkFunction.Input()
{
  unint64_t result = lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input;
  if (!lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input;
  if (!lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input;
  if (!lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input;
  if (!lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input;
  if (!lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkFunction.InputProperties and conformance InkFunction.InputProperties()
{
  unint64_t result = lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties;
  if (!lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties;
  if (!lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties;
  if (!lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties;
  if (!lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties;
  if (!lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties;
  if (!lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties);
  }
  return result;
}

uint64_t InkFunction.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkFunction.CodingKeys>);
  uint64_t v34 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37, v3);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for InkFunction();
  uint64_t v7 = (int *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v35 = v7[7];
  v10[v35] = 3;
  uint64_t v33 = v7[8];
  *(_OWORD *)&v10[v33] = xmmword_1C4827030;
  uint64_t v11 = &v10[v7[9]];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  v11[16] = 1;
  uint64_t v12 = v7[10];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1C4827040;
  *(void *)(v13 + 32) = 0;
  *(void *)(v13 + 40) = 0;
  *(_OWORD *)(v13 + 48) = xmmword_1C4827050;
  *(_OWORD *)(v13 + 64) = xmmword_1C4827060;
  __asm { FMOV            V0.2D, #1.0 }
  *(void *)&v10[v12] = v13;
  *(_OWORD *)(v13 + 80) = _Q0;
  uint64_t v19 = v7[11];
  unsigned __int8 v38 = a1;
  char v39 = v10;
  *(void *)&v10[v19] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys();
  uint64_t v36 = v5;
  uint64_t v20 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    uint64_t v27 = (uint64_t)v38;
    uint64_t v23 = (uint64_t)v39;
  }
  else
  {
    uint64_t v21 = v35;
    uint64_t v40 = v11;
    uint64_t v30 = v19;
    uint64_t v31 = v12;
    char v43 = 0;
    lazy protocol witness table accessor for type InkFunction.Input and conformance InkFunction.Input();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v23 = (uint64_t)v39;
    v39[v21] = v41;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<CGFloat>);
    char v43 = 1;
    lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type ClosedRange<CGFloat> and conformance <> ClosedRange<A>, &demangling cache variable for type metadata for ClosedRange<CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v23 + v33) = v41;
    char v43 = 2;
    char v24 = v36;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v25 = v42;
    uint64_t v26 = v40;
    *(_OWORD *)uint64_t v40 = v41;
    v26[16] = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGPoint]);
    char v43 = 3;
    lazy protocol witness table accessor for type [CGPoint] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGPoint] and conformance <A> [A], (unint64_t *)&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRelease();
    *(void *)(v23 + v31) = v41;
    char v43 = 4;
    lazy protocol witness table accessor for type InkFunction.InputProperties and conformance InkFunction.InputProperties();
    uint64_t v28 = v37;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v28);
    *(void *)(v23 + v30) = v41;
    outlined init with copy of InkFunction(v23, v32);
    uint64_t v27 = (uint64_t)v38;
  }
  __swift_destroy_boxed_opaque_existential_1(v27);
  return outlined destroy of InkFunction(v23);
}

uint64_t outlined destroy of InkFunction(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InkFunction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type [CGPoint] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CGPoint]);
    lazy protocol witness table accessor for type CGSize and conformance CGSize(a2, type metadata accessor for CGPoint);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of InkFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InkFunction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkFunction@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return InkFunction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkFunction(void *a1)
{
  return InkFunction.encode(to:)(a1);
}

uint64_t protocol witness for Identifiable.id.getter in conformance InkFunction@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

PencilKit::InkBehavior::InkProperty_optional __swiftcall InkBehavior.InkProperty.init(rawValue:)(Swift::String rawValue)
{
  v2._rawValue = &outlined read-only object #0 of InkBehavior.InkProperty.init(rawValue:);
  return (PencilKit::InkBehavior::InkProperty_optional)InkDescriptorParticles.ParticleRotation.init(rawValue:)(rawValue, v2, v1);
}

uint64_t InkDescriptorParticles.ParticleRotation.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  unint64_t v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  char v9 = 3;
  if (v7 < 3) {
    char v9 = v7;
  }
  *a3 = v9;
  return result;
}

uint64_t InkBehavior.InkProperty.rawValue.getter()
{
  uint64_t v1 = 0x7974696361706FLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x32737569646172;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x737569646172;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InkBehavior.InkProperty(char *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InkBehavior.InkProperty()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InkBehavior.InkProperty()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InkBehavior.InkProperty()
{
  return Hasher._finalize()();
}

PencilKit::InkBehavior::InkProperty_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InkBehavior.InkProperty(Swift::String *a1)
{
  return InkBehavior.InkProperty.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance InkBehavior.InkProperty(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = 0x7974696361706FLL;
  if (v2 != 1) {
    uint64_t v4 = 0x32737569646172;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0x737569646172;
  }
  if (!v5) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v6;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkBehavior.InkProperty()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkBehavior.InkProperty()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CodingKeyRepresentable.codingKey.getter in conformance InkBehavior.InkProperty(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty();

  return MEMORY[0x1F4183E58](a1, a2, v4);
}

uint64_t protocol witness for CodingKeyRepresentable.init<A>(codingKey:) in conformance InkBehavior.InkProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty();

  return MEMORY[0x1F4183E60](a1, a4, a2, a5, v10, a3);
}

uint64_t InkBehavior.functions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t InkBehavior.functions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*InkBehavior.functions.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkSmoothing.init()@<D0>(uint64_t a1@<X8>)
{
  double result = 0.12;
  *(_OWORD *)a1 = xmmword_1C4827070;
  *(_OWORD *)(a1 + 16) = xmmword_1C4827080;
  *(void *)(a1 + 32) = 0;
  return result;
}

double InkBehavior.smoothing.getter@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 40);
  long long v3 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v3;
  *(double *)(a1 + 32) = result;
  return result;
}

double InkBehavior.smoothing.setter(uint64_t a1)
{
  double result = *(double *)(a1 + 32);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24) = v3;
  *(double *)(v1 + 40) = result;
  return result;
}

uint64_t (*InkBehavior.smoothing.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

__n128 InkBehavior.inkTransform.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 80);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 InkBehavior.inkTransform.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 48) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 64) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 80) = result;
  return result;
}

uint64_t (*InkBehavior.inkTransform.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

__n128 InkBehavior.feathering.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 160);
  long long v3 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = *(__n128 *)(v1 + 128);
  long long v5 = *(_OWORD *)(v1 + 144);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 64) = v2;
  return result;
}

__n128 InkBehavior.feathering.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 112) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v1 + 128) = result;
  *(_OWORD *)(v1 + 144) = v5;
  *(unsigned char *)(v1 + 160) = v2;
  return result;
}

uint64_t (*InkBehavior.feathering.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

__n128 InkBehavior.pencilFeathering.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 232);
  long long v3 = *(_OWORD *)(v1 + 184);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 168);
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = *(__n128 *)(v1 + 200);
  long long v5 = *(_OWORD *)(v1 + 216);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 64) = v2;
  return result;
}

__n128 InkBehavior.pencilFeathering.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 168) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 184) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v1 + 200) = result;
  *(_OWORD *)(v1 + 216) = v5;
  *(unsigned char *)(v1 + 232) = v2;
  return result;
}

uint64_t (*InkBehavior.pencilFeathering.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

__n128 InkBehavior.animationDescriptor.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[15];
  unsigned __int8 v3 = v1[16].n128_u8[0];
  *a1 = result;
  a1[1].n128_u8[0] = v3;
  return result;
}

__n128 InkBehavior.animationDescriptor.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  v1[15] = *a1;
  v1[16].n128_u8[0] = v2;
  return result;
}

uint64_t (*InkBehavior.animationDescriptor.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkBehavior.supportsCombiningStrokes.getter()
{
  return *(unsigned __int8 *)(v0 + 257);
}

uint64_t InkBehavior.supportsCombiningStrokes.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 257) = result;
  return result;
}

uint64_t (*InkBehavior.supportsCombiningStrokes.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkBehavior.init()@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_OWORD *)(a1 + 8) = xmmword_1C4827070;
  *(_OWORD *)(a1 + 24) = xmmword_1C4827080;
  *(_OWORD *)(a1 + 40) = xmmword_1C4827030;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0x3FF0000000000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(unsigned char *)(a1 + 160) = 1;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 1;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 256) = 1;
  return result;
}

unint64_t InkBehavior.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6E6F6974636E7566;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6968746F6F6D73;
      break;
    case 2:
      unint64_t result = 0x736E6172546B6E69;
      break;
    case 3:
      unint64_t result = 0x6972656874616566;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance InkBehavior.CodingKeys()
{
  return InkBehavior.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkBehavior.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized InkBehavior.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkBehavior.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkBehavior.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t InkBehavior.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkBehavior.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v46 = v1[4];
  uint64_t v11 = v1[6];
  uint64_t v47 = v1[5];
  uint64_t v48 = v10;
  uint64_t v12 = v1[7];
  uint64_t v13 = v1[8];
  uint64_t v14 = v1[9];
  uint64_t v15 = v1[10];
  uint64_t v16 = v1[11];
  uint64_t v45 = v1[12];
  uint64_t v44 = v1[13];
  uint64_t v42 = v1[14];
  uint64_t v41 = v1[15];
  uint64_t v40 = v1[16];
  uint64_t v39 = v1[17];
  uint64_t v38 = v1[18];
  uint64_t v37 = v1[19];
  int v59 = *((unsigned __int8 *)v1 + 160);
  uint64_t v28 = v1[21];
  uint64_t v36 = v1[22];
  uint64_t v35 = v1[23];
  uint64_t v34 = v1[24];
  uint64_t v33 = v1[25];
  uint64_t v32 = v1[26];
  uint64_t v31 = v1[27];
  uint64_t v30 = v1[28];
  int v29 = *((unsigned __int8 *)v1 + 232);
  uint64_t v43 = v1[30];
  uint64_t v27 = v1[31];
  int v17 = *((unsigned __int8 *)v1 + 256);
  uint64_t v18 = a1[3];
  uint64_t v19 = a1;
  uint64_t v20 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v19, v18);
  lazy protocol witness table accessor for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v50 = v7;
  char v60 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [InkBehavior.InkProperty : [InkFunction]]);
  lazy protocol witness table accessor for type [InkBehavior.InkProperty : [InkFunction]] and conformance <> [A : B]();
  uint64_t v21 = v49;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v21) {
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v20, v3);
  }
  uint64_t v22 = v44;
  uint64_t v23 = v45;
  LODWORD(v49) = v17;
  uint64_t v24 = v43;
  uint64_t v50 = v8;
  uint64_t v51 = v9;
  uint64_t v52 = v48;
  uint64_t v53 = v46;
  uint64_t v54 = v47;
  char v60 = 1;
  lazy protocol witness table accessor for type InkSmoothing and conformance InkSmoothing();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v50 = v11;
  uint64_t v51 = v12;
  uint64_t v52 = v13;
  uint64_t v53 = v14;
  uint64_t v54 = v15;
  uint64_t v55 = v16;
  char v60 = 2;
  type metadata accessor for CGAffineTransform(0);
  lazy protocol witness table accessor for type CGSize and conformance CGSize(&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, type metadata accessor for CGAffineTransform);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v50 = v23;
  uint64_t v51 = v22;
  uint64_t v52 = v42;
  uint64_t v53 = v41;
  uint64_t v54 = v40;
  uint64_t v55 = v39;
  uint64_t v56 = v38;
  uint64_t v57 = v37;
  char v58 = v59;
  char v60 = 3;
  lazy protocol witness table accessor for type InkFeathering and conformance InkFeathering();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v50 = v28;
  uint64_t v51 = v36;
  uint64_t v52 = v35;
  uint64_t v53 = v34;
  uint64_t v54 = v33;
  uint64_t v55 = v32;
  uint64_t v56 = v31;
  uint64_t v57 = v30;
  char v58 = v29;
  char v60 = 4;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v50 = v24;
  uint64_t v51 = v27;
  LOBYTE(v52) = v49;
  char v60 = 5;
  lazy protocol witness table accessor for type InkAnimationDescriptor and conformance InkAnimationDescriptor();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v50) = 6;
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, void))(v4 + 8))(v20, 0);
}

unint64_t lazy protocol witness table accessor for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty()
{
  unint64_t result = lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty;
  if (!lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty;
  if (!lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty;
  if (!lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty;
  if (!lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [InkFunction] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [InkFunction]);
    lazy protocol witness table accessor for type CGSize and conformance CGSize(a2, (void (*)(uint64_t))type metadata accessor for InkFunction);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkSmoothing and conformance InkSmoothing()
{
  unint64_t result = lazy protocol witness table cache variable for type InkSmoothing and conformance InkSmoothing;
  if (!lazy protocol witness table cache variable for type InkSmoothing and conformance InkSmoothing)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkSmoothing and conformance InkSmoothing);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkSmoothing and conformance InkSmoothing;
  if (!lazy protocol witness table cache variable for type InkSmoothing and conformance InkSmoothing)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkSmoothing and conformance InkSmoothing);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkFeathering and conformance InkFeathering()
{
  unint64_t result = lazy protocol witness table cache variable for type InkFeathering and conformance InkFeathering;
  if (!lazy protocol witness table cache variable for type InkFeathering and conformance InkFeathering)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering and conformance InkFeathering);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFeathering and conformance InkFeathering;
  if (!lazy protocol witness table cache variable for type InkFeathering and conformance InkFeathering)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering and conformance InkFeathering);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkAnimationDescriptor and conformance InkAnimationDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type InkAnimationDescriptor and conformance InkAnimationDescriptor;
  if (!lazy protocol witness table cache variable for type InkAnimationDescriptor and conformance InkAnimationDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkAnimationDescriptor and conformance InkAnimationDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkAnimationDescriptor and conformance InkAnimationDescriptor;
  if (!lazy protocol witness table cache variable for type InkAnimationDescriptor and conformance InkAnimationDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkAnimationDescriptor and conformance InkAnimationDescriptor);
  }
  return result;
}

uint64_t InkBehavior.init(from:)@<X0>(void *a1@<X0>, double *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkBehavior.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&unint64_t v68 = COERCE_DOUBLE(specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]));
  char v121 = 1;
  char v119 = 1;
  unsigned __int8 v117 = 1;
  uint64_t v10 = a1[3];
  long long v62 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  lazy protocol witness table accessor for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v65 = v2;
    uint64_t v66 = 0;
    double v67 = 0.0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v76 = 0;
    double v77 = 0.0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    double v72 = 0.0;
    double v73 = 0.0;
    double v70 = 0.0;
    double v71 = 0.0;
    uint64_t v69 = 0;
    double v61 = 1.0;
    uint64_t v122 = 0;
    double v60 = 1.0;
    unint64_t v13 = v68;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    double v82 = *(double *)&v13;
    uint64_t v83 = 0x3FBEB851EB851EB8;
    uint64_t v84 = 0x3FC47AE147AE147BLL;
    *(double *)&uint64_t v85 = 0.05;
    double v86 = 0.5;
    double v87 = 0.0;
    double v88 = v61;
    uint64_t v89 = v122;
    uint64_t v90 = 0;
    double v91 = v60;
    double v92 = 0.0;
    double v93 = 0.0;
    double v94 = v67;
    uint64_t v95 = v66;
    uint64_t v96 = v63;
    uint64_t v97 = v64;
    double v98 = 0.0;
    double v99 = 0.0;
    double v100 = 0.0;
    uint64_t v101 = 0;
    char v102 = v121;
    *(_DWORD *)double v103 = *(_DWORD *)v120;
    *(_DWORD *)&v103[3] = *(_DWORD *)&v120[3];
    double v104 = v77;
    uint64_t v105 = v76;
    uint64_t v106 = v75;
    uint64_t v107 = v74;
    double v108 = v73;
    double v109 = v72;
    double v110 = v71;
    uint64_t v111 = 0;
    char v112 = v119;
    *(_DWORD *)&v113[3] = *(_DWORD *)&v118[3];
    *(_DWORD *)unint64_t v113 = *(_DWORD *)v118;
    double v114 = v70;
    uint64_t v115 = v69;
    __int16 v116 = v117;
  }
  else
  {
    uint64_t v11 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [InkBehavior.InkProperty : [InkFunction]]);
    char v81 = 0;
    lazy protocol witness table accessor for type [InkBehavior.InkProperty : [InkFunction]] and conformance <> [A : B]();
    uint64_t v12 = v5;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRelease();
    double v15 = v82;
    char v81 = 1;
    lazy protocol witness table accessor for type InkSmoothing and conformance InkSmoothing();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v17 = *(void *)&v82;
    uint64_t v16 = v83;
    double v18 = *(double *)&v85;
    unint64_t v68 = v84;
    double v19 = v86;
    type metadata accessor for CGAffineTransform(0);
    char v81 = 2;
    lazy protocol witness table accessor for type CGSize and conformance CGSize((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, type metadata accessor for CGAffineTransform);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    double v21 = v82;
    uint64_t v20 = v83;
    uint64_t v22 = v84;
    double v23 = *(double *)&v85;
    double v58 = v87;
    double v59 = v86;
    char v81 = 3;
    lazy protocol witness table accessor for type InkFeathering and conformance InkFeathering();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v122 = v20;
    double v60 = v23;
    double v61 = v21;
    uint64_t v66 = v83;
    double v67 = v82;
    uint64_t v63 = v84;
    uint64_t v64 = v85;
    double v55 = v87;
    double v56 = v86;
    double v54 = v88;
    uint64_t v57 = v89;
    int v24 = v90;
    char v121 = v90;
    char v81 = 4;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    LODWORD(v51) = v24;
    uint64_t v52 = v22;
    uint64_t v76 = v83;
    double v77 = v82;
    uint64_t v74 = v85;
    uint64_t v75 = v84;
    double v72 = v87;
    double v73 = v86;
    double v71 = v88;
    uint64_t v53 = v89;
    LOBYTE(v24) = v90;
    char v119 = v90;
    char v81 = 5;
    lazy protocol witness table accessor for type InkAnimationDescriptor and conformance InkAnimationDescriptor();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v25 = v24;
    double v26 = v21;
    uint64_t v69 = v83;
    double v70 = v82;
    LOBYTE(v24) = v84;
    unsigned __int8 v117 = v84;
    char v81 = 6;
    char v27 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v65 = 0;
    char v28 = v27;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v12);
    char v29 = v28 & 1;
    int v50 = v28 & 1;
    char v80 = v51;
    char v79 = v25;
    char v78 = v24;
    uint64_t v30 = a2;
    *a2 = v15;
    *((void *)a2 + 1) = v17;
    *((void *)a2 + 2) = v16;
    uint64_t v49 = v17;
    uint64_t v51 = v16;
    unint64_t v31 = v68;
    a2[3] = *(double *)&v68;
    a2[4] = v18;
    a2[5] = v19;
    a2[6] = v21;
    uint64_t v32 = v52;
    *((void *)a2 + 7) = v122;
    *((void *)a2 + 8) = v32;
    double v33 = v59;
    a2[9] = v23;
    a2[10] = v33;
    double v34 = v58;
    a2[11] = v58;
    uint64_t v36 = v66;
    double v35 = v67;
    v30[12] = v67;
    *((void *)v30 + 13) = v36;
    uint64_t v38 = v63;
    uint64_t v37 = v64;
    *((void *)v30 + 14) = v63;
    *((void *)v30 + 15) = v37;
    double v40 = v55;
    double v39 = v56;
    v30[16] = v56;
    v30[17] = v40;
    double v41 = v54;
    uint64_t v42 = v57;
    v30[18] = v54;
    *((void *)v30 + 19) = v42;
    *((unsigned char *)v30 + 160) = v80;
    uint64_t v43 = v76;
    v30[21] = v77;
    *((void *)v30 + 22) = v43;
    uint64_t v44 = v74;
    *((void *)v30 + 23) = v75;
    *((void *)v30 + 24) = v44;
    double v45 = v72;
    v30[25] = v73;
    v30[26] = v45;
    uint64_t v46 = v53;
    v30[27] = v71;
    *((void *)v30 + 28) = v46;
    *((unsigned char *)v30 + 232) = v79;
    uint64_t v47 = v69;
    v30[30] = v70;
    *((void *)v30 + 31) = v47;
    *((unsigned char *)v30 + 256) = v78;
    *((unsigned char *)v30 + 257) = v29;
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    double v82 = v15;
    uint64_t v83 = v49;
    uint64_t v84 = v51;
    uint64_t v85 = v31;
    double v86 = v18;
    double v87 = v19;
    double v88 = v26;
    uint64_t v89 = v122;
    uint64_t v90 = v32;
    double v91 = v23;
    double v92 = v33;
    double v93 = v34;
    double v94 = v35;
    uint64_t v95 = v36;
    uint64_t v96 = v38;
    uint64_t v97 = v37;
    double v98 = v39;
    double v99 = v40;
    double v100 = v41;
    uint64_t v101 = v57;
    char v102 = v121;
    *(_DWORD *)double v103 = *(_DWORD *)v120;
    *(_DWORD *)&v103[3] = *(_DWORD *)&v120[3];
    double v104 = v77;
    uint64_t v105 = v76;
    uint64_t v106 = v75;
    uint64_t v107 = v74;
    double v108 = v73;
    double v109 = v72;
    double v110 = v71;
    uint64_t v111 = v53;
    char v112 = v119;
    *(_DWORD *)&v113[3] = *(_DWORD *)&v118[3];
    *(_DWORD *)unint64_t v113 = *(_DWORD *)v118;
    double v114 = v70;
    uint64_t v115 = v69;
    LOBYTE(v116) = v117;
    HIBYTE(v116) = v50;
  }
  return outlined release of InkBehavior((uint64_t)&v82);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkBehavior@<X0>(void *a1@<X0>, double *a2@<X8>)
{
  return InkBehavior.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkBehavior(void *a1)
{
  return InkBehavior.encode(to:)(a1);
}

double InkSmoothing.stylus.getter()
{
  return *(double *)v0;
}

void InkSmoothing.stylus.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*InkSmoothing.stylus.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkSmoothing.touch.getter()
{
  return *(double *)(v0 + 8);
}

void InkSmoothing.touch.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*InkSmoothing.touch.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkSmoothing.velocity.getter()
{
  return *(double *)(v0 + 16);
}

void InkSmoothing.velocity.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*InkSmoothing.velocity.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkSmoothing.direction.getter()
{
  return *(double *)(v0 + 24);
}

void InkSmoothing.direction.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*InkSmoothing.direction.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkSmoothing.radius.getter()
{
  return *(double *)(v0 + 32);
}

void InkSmoothing.radius.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*InkSmoothing.radius.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkSmoothing.CodingKeys()
{
  uint64_t result = 0x73756C797473;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6863756F74;
      break;
    case 2:
      uint64_t result = 0x797469636F6C6576;
      break;
    case 3:
      uint64_t result = 0x6F69746365726964;
      break;
    case 4:
      uint64_t result = 0x737569646172;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkSmoothing.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized InkSmoothing.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkSmoothing.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkSmoothing.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t InkSmoothing.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkSmoothing.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v1;
  uint64_t v9 = v1[1];
  uint64_t v12 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v13 = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v17 = v10;
  char v16 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v17 = v9;
    char v16 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v17 = v12;
    char v16 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v17 = v11;
    char v16 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v17 = v13;
    char v16 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

unint64_t lazy protocol witness table accessor for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys);
  }
  return result;
}

uint64_t InkSmoothing.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkSmoothing.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v17 = 0;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v18;
    char v17 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v11 = v18;
    char v17 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v12 = v18;
    char v17 = 3;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v14 = v18;
    char v17 = 4;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t v15 = v18;
    *a2 = v10;
    a2[1] = v11;
    a2[2] = v12;
    a2[3] = v14;
    a2[4] = v15;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkSmoothing@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return InkSmoothing.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkSmoothing(void *a1)
{
  return InkSmoothing.encode(to:)(a1);
}

double InkAnimationDescriptor.duration.getter()
{
  return *(double *)v0;
}

void InkAnimationDescriptor.duration.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*InkAnimationDescriptor.duration.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkAnimationDescriptor.sizeDelta.getter()
{
  return *(double *)(v0 + 8);
}

void InkAnimationDescriptor.sizeDelta.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*InkAnimationDescriptor.sizeDelta.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

void InkAnimationDescriptor.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkAnimationDescriptor.CodingKeys()
{
  if (*v0) {
    return 0x746C6544657A6973;
  }
  else {
    return 0x6E6F697461727564;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkAnimationDescriptor.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized InkAnimationDescriptor.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance InkAnimationDescriptor.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkAnimationDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkAnimationDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t InkAnimationDescriptor.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkAnimationDescriptor.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = *(void *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v12 = v9;
    v11[15] = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
}

unint64_t lazy protocol witness table accessor for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys);
  }
  return result;
}

uint64_t InkAnimationDescriptor.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkAnimationDescriptor.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v16 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    v14[15] = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t v12 = v15;
    *a2 = v11;
    a2[1] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t InkFeathering.EndCap.encode(to:)(void *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkFeathering.EndCap.CodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    double v18 = a3;
    char v17 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    double v18 = a4;
    char v17 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    double v18 = a5;
    char v17 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkAnimationDescriptor@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return InkAnimationDescriptor.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkAnimationDescriptor(void *a1)
{
  return InkAnimationDescriptor.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkFeathering.EndCap.CodingKeys()
{
  uint64_t result = 0x6E6F697461727564;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65636E6174736964;
      break;
    case 2:
      uint64_t result = 0x447974696361706FLL;
      break;
    case 3:
      uint64_t result = 0x6544737569646172;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkFeathering.EndCap.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized InkFeathering.EndCap.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance InkFeathering.EndCap.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkFeathering.EndCap.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkFeathering.EndCap.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void protocol witness for Decodable.init(from:) in conformance InkFeathering.EndCap(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = specialized InkFeathering.EndCap.init(from:)(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v7;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkFeathering.EndCap(void *a1)
{
  return InkFeathering.EndCap.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InkFeathering.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkFeathering.CodingKeys()
{
  if (*v0) {
    return 0x706143646E65;
  }
  else {
    return 0x7061437472617473;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkFeathering.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized InkFeathering.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkFeathering.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkFeathering.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t InkFeathering.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkFeathering.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v16 = *v1;
  uint64_t v9 = *((void *)v1 + 2);
  uint64_t v10 = *((void *)v1 + 3);
  uint64_t v11 = *((void *)v1 + 4);
  uint64_t v12 = *((void *)v1 + 5);
  uint64_t v13 = *((void *)v1 + 6);
  uint64_t v14 = *((void *)v1 + 7);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v18 = v16;
  uint64_t v19 = v9;
  uint64_t v20 = v10;
  char v17 = 0;
  lazy protocol witness table accessor for type InkFeathering.EndCap and conformance InkFeathering.EndCap();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&long long v18 = v11;
    *((void *)&v18 + 1) = v12;
    uint64_t v19 = v13;
    uint64_t v20 = v14;
    char v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

unint64_t lazy protocol witness table accessor for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkFeathering.EndCap and conformance InkFeathering.EndCap()
{
  unint64_t result = lazy protocol witness table cache variable for type InkFeathering.EndCap and conformance InkFeathering.EndCap;
  if (!lazy protocol witness table cache variable for type InkFeathering.EndCap and conformance InkFeathering.EndCap)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.EndCap and conformance InkFeathering.EndCap);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFeathering.EndCap and conformance InkFeathering.EndCap;
  if (!lazy protocol witness table cache variable for type InkFeathering.EndCap and conformance InkFeathering.EndCap)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.EndCap and conformance InkFeathering.EndCap);
  }
  return result;
}

uint64_t InkFeathering.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkFeathering.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v17 = 0;
    lazy protocol witness table accessor for type InkFeathering.EndCap and conformance InkFeathering.EndCap();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v10 = v15;
    long long v11 = v16;
    char v17 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    long long v12 = v15;
    long long v13 = v16;
    *a2 = v10;
    a2[1] = v11;
    a2[2] = v12;
    a2[3] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkFeathering@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return InkFeathering.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkFeathering(void *a1)
{
  return InkFeathering.encode(to:)(a1);
}

id Array<A>.ns.getter(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v3 = v14;
    uint64_t v4 = (double *)(a1 + 32);
    do
    {
      id v5 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, *v4);
      uint64_t v13 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      uint64_t v14 = v3;
      *(void *)&long long v12 = v5;
      unint64_t v7 = *(void *)(v3 + 16);
      unint64_t v6 = *(void *)(v3 + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
        uint64_t v3 = v14;
      }
      *(void *)(v3 + 16) = v7 + 1;
      outlined init with take of Any(&v12, (_OWORD *)(v3 + 32 * v7 + 32));
      ++v4;
      --v1;
    }
    while (v1);
  }
  id v8 = objc_allocWithZone(MEMORY[0x1E4F1CA48]);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v8, sel_initWithArray_, isa);

  return v10;
}

double InkFunction.Input.inputRange.getter()
{
  return 0.0;
}

id InkFunction.objc(property:)(uint64_t a1)
{
  uint64_t v3 = (int *)type metadata accessor for InkFunction();
  uint64_t v4 = v3[8];
  uint64_t v5 = *(void *)(v1 + v4);
  uint64_t v47 = v1;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in InkFunction.objc(property:), (uint64_t)v46, v5);
  uint64_t v7 = swift_bridgeObjectRelease();
  uint64_t v9 = v1 + v3[7];
  if (*(unsigned char *)(v9 + 16))
  {
    uint64_t v7 = swift_bridgeObjectRetain();
    id v10 = v6;
  }
  else
  {
    uint64_t v44 = 0;
    uint64_t v45 = a1;
    uint64_t v11 = *(void *)(v1 + v4);
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v41 = v4;
      uint64_t v42 = v3;
      uint64_t v43 = v6;
      double v13 = *(double *)v9;
      double v14 = *(double *)(v9 + 8) - *(double *)v9;
      swift_bridgeObjectRetain();
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      id v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v17 = 40;
      do
      {
        if (!(v15 + 3 * (v16 / 3)))
        {
          double v18 = *(double *)(v11 + v17);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
          }
          unint64_t v20 = *((void *)v10 + 2);
          unint64_t v19 = *((void *)v10 + 3);
          if (v20 >= v19 >> 1) {
            id v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v10);
          }
          *((void *)v10 + 2) = v20 + 1;
          *(double *)&v10[8 * v20 + 32] = v13 + v14 * v18;
        }
        ++v16;
        --v15;
        v17 += 16;
        --v12;
      }
      while (v12);
      uint64_t v7 = swift_bridgeObjectRelease();
      a1 = v45;
      uint64_t v3 = v42;
      unint64_t v6 = v43;
      uint64_t v4 = v41;
    }
    else
    {
      id v10 = (char *)MEMORY[0x1E4FBC860];
      a1 = v45;
    }
  }
  uint64_t v21 = *(void *)(v1 + v4);
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v40 = v1;
  swift_bridgeObjectRetain();
  uint64_t v22 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #3 in InkFunction.objc(property:), (uint64_t)&v39, v21);
  uint64_t v23 = swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v1 + v4);
  MEMORY[0x1F4188790](v23, v25);
  uint64_t v40 = v1;
  swift_bridgeObjectRetain();
  double v26 = specialized Sequence.flatMap<A>(_:)((void *(*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #4 in InkFunction.objc(property:), (uint64_t)&v39, v24);
  swift_bridgeObjectRelease();
  uint64_t v27 = qword_1C4828998[*(char *)(v1 + v3[5])];
  uint64_t v28 = *(void *)(v1 + v3[9]);
  uint64_t v29 = 23;
  if ((v28 & 1) == 0) {
    uint64_t v29 = 7;
  }
  uint64_t v30 = 31;
  if ((v28 & 1) == 0) {
    uint64_t v30 = 15;
  }
  if ((v28 & 2) != 0) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = v29;
  }
  id v32 = Array<A>.ns.getter((uint64_t)v22);
  swift_bridgeObjectRelease();
  id v33 = Array<A>.ns.getter((uint64_t)v6);
  id v34 = Array<A>.ns.getter((uint64_t)v10);
  swift_bridgeObjectRelease();
  id v35 = Array<A>.ns.getter((uint64_t)v6);
  swift_bridgeObjectRelease();
  id v36 = Array<A>.ns.getter((uint64_t)v26);
  swift_bridgeObjectRelease();
  id v37 = objc_msgSend(objc_allocWithZone((Class)PKInkFunction), sel_initWithProperty_input_inputMask_deviceMask_inputPoints_minOutputPoints_maxOutputPoints_outputPoints_controlPoints_functionType_, a1, v27, v31, 3, v32, v33, v34, v35, v36, 0);

  return v37;
}

uint64_t closure #3 in InkFunction.objc(property:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4 = 0.0;
  uint64_t v5 = *(void *)result % 3;
  if (!v5)
  {
    double v7 = *(double *)(result + 8);
    unint64_t result = type metadata accessor for InkFunction();
    double v4 = v7 * dbl_1C48289C0[*(char *)(a2 + *(int *)(result + 20))] + 0.0;
  }
  *(double *)a3 = v4;
  *(unsigned char *)(a3 + 8) = v5 != 0;
  return result;
}

uint64_t closure #4 in InkFunction.objc(property:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)a1 / 3;
  if (*(void *)a1 == 3 * v5)
  {
    uint64_t result = MEMORY[0x1E4FBC860];
    goto LABEL_8;
  }
  double v8 = *(double *)(a1 + 8);
  double v7 = *(double *)(a1 + 16);
  uint64_t result = type metadata accessor for InkFunction();
  if (v4 < -2)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(a2 + *(int *)(result + 32));
  unint64_t v11 = *(void *)(v10 + 16);
  if (3 * v5 >= v11)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v12 = 3 * (v5 + 1);
  if ((unsigned __int128)((v5 + 1) * (__int128)3) >> 64 != v12 >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v12 < v11)
  {
    uint64_t v13 = v10 + 32;
    double v14 = (double *)(v13 + 48 * v5);
    double v15 = *v14;
    double v16 = v14[1];
    uint64_t v17 = (double *)(v13 + 48 * (v5 + 1));
    double v18 = *v17;
    double v19 = v17[1];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1C4827090;
    *(double *)(result + 32) = (v8 - v15) / (v18 - v15);
    *(double *)(result + 40) = (v7 - v16) / (v19 - v16);
LABEL_8:
    *a3 = result;
    return result;
  }
LABEL_12:
  __break(1u);
  return result;
}

char *specialized Sequence.flatMap<A>(_:)(void *(*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *(void *)(a3 + 16);
  if (!v17) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  unint64_t v6 = (char *)MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v19 = v5;
    long long v20 = *(_OWORD *)(a3 + 16 * v5 + 32);
    uint64_t result = (char *)a1(&v21, &v19);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    uint64_t v8 = v21;
    uint64_t v9 = *(void *)(v21 + 16);
    int64_t v10 = *((void *)v6 + 2);
    int64_t v11 = v10 + v9;
    if (__OFADD__(v10, v9)) {
      break;
    }
    uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (result && v11 <= *((void *)v6 + 3) >> 1)
    {
      if (*(void *)(v8 + 16)) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v10 <= v11) {
        int64_t v12 = v10 + v9;
      }
      else {
        int64_t v12 = v10;
      }
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v12, 1, v6);
      unint64_t v6 = result;
      if (*(void *)(v8 + 16))
      {
LABEL_15:
        uint64_t v13 = *((void *)v6 + 2);
        if ((*((void *)v6 + 3) >> 1) - v13 < v9) {
          goto LABEL_25;
        }
        uint64_t result = (char *)memcpy(&v6[8 * v13 + 32], (const void *)(v8 + 32), 8 * v9);
        if (v9)
        {
          uint64_t v14 = *((void *)v6 + 2);
          BOOL v15 = __OFADD__(v14, v9);
          uint64_t v16 = v14 + v9;
          if (v15) {
            goto LABEL_26;
          }
          *((void *)v6 + 2) = v16;
        }
        goto LABEL_4;
      }
    }
    if (v9) {
      goto LABEL_24;
    }
LABEL_4:
    ++v5;
    swift_bridgeObjectRelease();
    if (v17 == v5)
    {
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

id specialized InkDescriptorParticles.objc(textureLoader:)(double *a1)
{
  double v1 = *a1;
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *((void *)a1 + 6);
  uint64_t v4 = *((unsigned __int8 *)a1 + 89);
  uint64_t v5 = *((unsigned __int8 *)a1 + 91);
  if (v3)
  {
    double v7 = a1[9];
    double v6 = a1[10];
    double v9 = a1[7];
    double v8 = a1[8];
    char v10 = (_BYTE)a1[11] & 1;
  }
  else
  {
    char v10 = 0;
    double v8 = 0.0;
    double v9 = 1.0;
    double v7 = 0.0;
    double v6 = 1.0;
  }
  uint64_t v11 = *((void *)a1 + 5);
  double v13 = a1[2];
  double v12 = a1[3];
  double v14 = a1[4];
  char v15 = *((unsigned char *)a1 + 90);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = (void *)MEMORY[0x1C87824B0](*(void *)&v1, v2);
  swift_bridgeObjectRelease();
  if (v3)
  {
    uint64_t v17 = (void *)MEMORY[0x1C87824B0](v11, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = 0;
  }
  BYTE2(v20) = 0;
  BYTE1(v20) = v10;
  LOBYTE(v20) = v15;
  id v18 = objc_msgSend(objc_allocWithZone((Class)PKInkParticleDescriptor), sel_initWithTextureName_textureImage_maskTextureName_maskTextureImage_particleSpacing_particleCount_particleSize_particleRotation_maskScale_maskScaleConstant_maskMovement_maskDepth_initialRandomRotation_maskInitialRandomOffset_adjustEndCapParticleAlpha_particleBlendMode_, v16, 0, v17, 0, 1, v4, v13, v12, v14, v9, v8, v7, v6, v20, v5);

  return v18;
}

id InkDescriptorParticles.objc(textureLoader:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  double v4 = *v1;
  uint64_t v3 = *((void *)v1 + 1);
  double v6 = v1[2];
  double v5 = v1[3];
  double v7 = v1[4];
  uint64_t v9 = *((void *)v1 + 5);
  uint64_t v8 = *((void *)v1 + 6);
  double v10 = v1[7];
  double v11 = v1[8];
  double v12 = v1[9];
  double v13 = v1[10];
  char v14 = *((unsigned char *)v1 + 88);
  uint64_t v27 = *((unsigned __int8 *)v1 + 89);
  char v15 = *((unsigned char *)v1 + 90);
  uint64_t v16 = *((unsigned __int8 *)v1 + 91);
  swift_bridgeObjectRetain();
  uint64_t v17 = (void *)a1(*(void *)&v4, v3);
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = (void *)a1(v9, v8);
  }
  else
  {
    uint64_t v20 = 0;
  }
  v18.n128_u64[0] = 0;
  v19.n128_u64[0] = 1.0;
  if (v8) {
    char v21 = v14 & 1;
  }
  else {
    char v21 = 0;
  }
  if (!v8)
  {
    double v10 = 1.0;
    double v11 = 0.0;
    double v12 = 0.0;
    double v13 = 1.0;
  }
  uint64_t v22 = (void *)MEMORY[0x1C87824B0](*(void *)&v4, v3, v18, v19);
  swift_bridgeObjectRelease();
  if (v8)
  {
    uint64_t v23 = (void *)MEMORY[0x1C87824B0](v9, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = 0;
  }
  BYTE2(v26) = 0;
  BYTE1(v26) = v21;
  LOBYTE(v26) = v15;
  id v24 = objc_msgSend(objc_allocWithZone((Class)PKInkParticleDescriptor), sel_initWithTextureName_textureImage_maskTextureName_maskTextureImage_particleSpacing_particleCount_particleSize_particleRotation_maskScale_maskScaleConstant_maskMovement_maskDepth_initialRandomRotation_maskInitialRandomOffset_adjustEndCapParticleAlpha_particleBlendMode_, v22, v17, v23, v20, 1, v27, v6, v5, v7, v10, v11, v12, v13, v26, v16);

  return v24;
}

id specialized InkDescriptor.objc(variant:textureLoader:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v52 = a2;
  uint64_t v53 = a1;
  double v54 = &v75[16];
  uint64_t v4 = type metadata accessor for InkFunction();
  uint64_t v58 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8, v5);
  double v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a3;
  uint64_t v50 = a3[1];
  uint64_t v51 = v8;
  uint64_t v47 = a3 + 4;
  memcpy(v75, a3 + 29, 0x102uLL);
  uint64_t v48 = a3[62];
  double v9 = *((double *)a3 + 63);
  uint64_t v10 = *(void *)&v75[0];
  uint64_t v11 = *(void *)(*(void *)&v75[0] + 64);
  uint64_t v55 = *(void *)&v75[0] + 64;
  uint64_t v12 = 1 << *(unsigned char *)(*(void *)&v75[0] + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  outlined retain of InkBehavior((uint64_t)v75);
  id result = (id)outlined retain of InkBehavior((uint64_t)v75);
  int64_t v16 = 0;
  int64_t v56 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v17 = MEMORY[0x1E4FBC860];
  double v49 = v9;
  uint64_t v57 = v10;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v16 << 6);
      goto LABEL_25;
    }
    int64_t v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    if (v21 >= v56) {
      goto LABEL_29;
    }
    unint64_t v22 = *(void *)(v55 + 8 * v21);
    ++v16;
    if (!v22)
    {
      int64_t v16 = v21 + 1;
      if (v21 + 1 >= v56) {
        goto LABEL_29;
      }
      unint64_t v22 = *(void *)(v55 + 8 * v16);
      if (!v22)
      {
        int64_t v16 = v21 + 2;
        if (v21 + 2 >= v56) {
          goto LABEL_29;
        }
        unint64_t v22 = *(void *)(v55 + 8 * v16);
        if (!v22)
        {
          int64_t v16 = v21 + 3;
          if (v21 + 3 >= v56) {
            goto LABEL_29;
          }
          unint64_t v22 = *(void *)(v55 + 8 * v16);
          if (!v22)
          {
            int64_t v16 = v21 + 4;
            if (v21 + 4 >= v56) {
              goto LABEL_29;
            }
            unint64_t v22 = *(void *)(v55 + 8 * v16);
            if (!v22) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_25:
    uint64_t v24 = *(void *)(*(void *)(v10 + 56) + 8 * v20);
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      unint64_t v59 = v14;
      int64_t v60 = v16;
      uint64_t v61 = v17;
      uint64_t v26 = *(char *)(*(void *)(v10 + 48) + v20);
      *(void *)&long long v62 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v27 = v24 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
      uint64_t v28 = *(void *)(v58 + 72);
      do
      {
        outlined init with copy of InkFunction(v27, (uint64_t)v7);
        InkFunction.objc(property:)(qword_1C48289E8[v26]);
        outlined destroy of InkFunction((uint64_t)v7);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v27 += v28;
        --v25;
      }
      while (v25);
      uint64_t v17 = v61;
      unint64_t v18 = v62;
      uint64_t v10 = v57;
      unint64_t v14 = v59;
      int64_t v16 = v60;
    }
    else
    {
      unint64_t v18 = MEMORY[0x1E4FBC860];
    }
    *(void *)&long long v62 = v17;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v18);
    id result = (id)swift_bridgeObjectRelease();
    uint64_t v17 = v62;
  }
  int64_t v23 = v21 + 5;
  if (v23 < v56)
  {
    unint64_t v22 = *(void *)(v55 + 8 * v23);
    int64_t v16 = v23;
    if (!v22)
    {
      while (1)
      {
        int64_t v16 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          goto LABEL_39;
        }
        if (v16 >= v56) {
          goto LABEL_29;
        }
        unint64_t v22 = *(void *)(v55 + 8 * v16);
        ++v23;
        if (v22) {
          goto LABEL_24;
        }
      }
    }
    goto LABEL_24;
  }
LABEL_29:
  swift_release();
  uint64_t v29 = v47;
  outlined release of InkBehavior((uint64_t)v75);
  long long v30 = *((_OWORD *)v29 + 11);
  long long v72 = *((_OWORD *)v29 + 10);
  long long v73 = v30;
  int v74 = *((_DWORD *)v29 + 48);
  long long v31 = *((_OWORD *)v29 + 7);
  long long v68 = *((_OWORD *)v29 + 6);
  long long v69 = v31;
  long long v32 = *((_OWORD *)v29 + 9);
  long long v70 = *((_OWORD *)v29 + 8);
  long long v71 = v32;
  long long v33 = *((_OWORD *)v29 + 3);
  long long v64 = *((_OWORD *)v29 + 2);
  long long v65 = v33;
  long long v34 = *((_OWORD *)v29 + 5);
  long long v66 = *((_OWORD *)v29 + 4);
  long long v67 = v34;
  long long v35 = *((_OWORD *)v29 + 1);
  long long v62 = *(_OWORD *)v29;
  long long v63 = v35;
  id v36 = specialized InkRendering.objc(textureLoader:)((unsigned __int8 *)&v62);
  id v37 = objc_msgSend(objc_allocWithZone((Class)PKInkSmoothingDescriptor), sel_initWithStylusSmoothing_touch_velocity_angle_radius_, *((double *)v75 + 1), *(double *)&v75[1], *((double *)&v75[1] + 1), *(double *)&v75[2], *((double *)&v75[2] + 1));
  if (v75[10])
  {
    id v38 = 0;
    if ((BYTE8(v75[14]) & 1) == 0) {
      goto LABEL_31;
    }
LABEL_33:
    id v39 = 0;
  }
  else
  {
    id v38 = objc_msgSend(objc_allocWithZone((Class)PKInkFeatheringDescriptor), sel_initWithStartCapTime_startCapDistance_startCapFade_startCapShrink_endCapTime_endCapDistance_endCapFade_endCapShrink_, *(double *)&v75[6], *((double *)&v75[6] + 1), *(double *)&v75[7], *((double *)&v75[7] + 1), *(double *)&v75[8], *((double *)&v75[8] + 1), *(double *)&v75[9], *((double *)&v75[9] + 1));
    if (BYTE8(v75[14])) {
      goto LABEL_33;
    }
LABEL_31:
    id v39 = objc_msgSend(objc_allocWithZone((Class)PKInkFeatheringDescriptor), sel_initWithStartCapTime_startCapDistance_startCapFade_startCapShrink_endCapTime_endCapDistance_endCapFade_endCapShrink_, *((double *)&v75[10] + 1), *(double *)&v75[11], *((double *)&v75[11] + 1), *(double *)&v75[12], *((double *)&v75[12] + 1), *(double *)&v75[13], *((double *)&v75[13] + 1), *(double *)&v75[14]);
  }
  if (*v54) {
    id v40 = 0;
  }
  else {
    id v40 = objc_msgSend(objc_allocWithZone((Class)PKInkAnimationDescriptor), sel_initWithDuration_sizeDelta_, *(double *)&v75[15], *((double *)&v75[15] + 1));
  }
  double v41 = v49;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKInkBehavior);
  long long v62 = v75[3];
  long long v63 = v75[4];
  long long v64 = v75[5];
  uint64_t v42 = v50;
  swift_bridgeObjectRetain();
  uint64_t v43 = v52;
  swift_bridgeObjectRetain();
  uint64_t v44 = specialized _arrayForceCast<A, B>(_:)(v48);
  HIBYTE(v45) = v54[1];
  LOBYTE(v45) = 0;
  return PKInkBehavior.__allocating_init(renderingDescriptor:blendAlpha:targetMultiple:baseAlpha:inkTransform:useUnclampedWeight:smoothingDescriptor:featheringDescriptor:pencilFeatheringDescriptor:animationDescriptor:identifier:version:variant:uiWidths:defaultWidth:showBrushIndicator:supportsCombiningStrokes:rulerOffsetScale:rulerOffsetConstant:weightFunction:inkFunctions:)(v36, &v62, 1, v37, v38, v39, v40, v51, 1.0, 0.0, 1.0, v41, 0.0, 0.0, v42, 3, v53, v43, v44,
           v45,
           0);
}

id InkDescriptor.objc(variant:textureLoader:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v47[0] = a3;
  v47[1] = a4;
  uint64_t v52 = a2;
  uint64_t v53 = a1;
  double v54 = &v88[16];
  uint64_t v5 = type metadata accessor for InkFunction();
  uint64_t v58 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)v4;
  uint64_t v50 = *(void *)(v4 + 8);
  uint64_t v51 = v9;
  long long v10 = *(_OWORD *)(v4 + 208);
  long long v85 = *(_OWORD *)(v4 + 192);
  long long v86 = v10;
  int v87 = *(_DWORD *)(v4 + 224);
  long long v11 = *(_OWORD *)(v4 + 144);
  long long v81 = *(_OWORD *)(v4 + 128);
  long long v82 = v11;
  long long v12 = *(_OWORD *)(v4 + 176);
  long long v83 = *(_OWORD *)(v4 + 160);
  long long v84 = v12;
  long long v13 = *(_OWORD *)(v4 + 80);
  long long v77 = *(_OWORD *)(v4 + 64);
  long long v78 = v13;
  long long v14 = *(_OWORD *)(v4 + 112);
  long long v79 = *(_OWORD *)(v4 + 96);
  long long v80 = v14;
  long long v15 = *(_OWORD *)(v4 + 48);
  long long v75 = *(_OWORD *)(v4 + 32);
  long long v76 = v15;
  memcpy(v88, (const void *)(v4 + 232), 0x102uLL);
  uint64_t v48 = *(void *)(v4 + 496);
  double v16 = *(double *)(v4 + 504);
  uint64_t v17 = *(void *)&v88[0];
  uint64_t v18 = *(void *)(*(void *)&v88[0] + 64);
  uint64_t v55 = *(void *)&v88[0] + 64;
  uint64_t v19 = 1 << *(unsigned char *)(*(void *)&v88[0] + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  outlined retain of InkBehavior((uint64_t)v88);
  id result = (id)outlined retain of InkBehavior((uint64_t)v88);
  int64_t v23 = 0;
  int64_t v56 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v24 = MEMORY[0x1E4FBC860];
  double v49 = v16;
  uint64_t v57 = v17;
  while (1)
  {
    if (v21)
    {
      unint64_t v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v27 = v26 | (v23 << 6);
      goto LABEL_26;
    }
    int64_t v28 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      return result;
    }
    if (v28 >= v56) {
      goto LABEL_30;
    }
    unint64_t v29 = *(void *)(v55 + 8 * v28);
    ++v23;
    if (!v29)
    {
      int64_t v23 = v28 + 1;
      if (v28 + 1 >= v56) {
        goto LABEL_30;
      }
      unint64_t v29 = *(void *)(v55 + 8 * v23);
      if (!v29)
      {
        int64_t v23 = v28 + 2;
        if (v28 + 2 >= v56) {
          goto LABEL_30;
        }
        unint64_t v29 = *(void *)(v55 + 8 * v23);
        if (!v29)
        {
          int64_t v23 = v28 + 3;
          if (v28 + 3 >= v56) {
            goto LABEL_30;
          }
          unint64_t v29 = *(void *)(v55 + 8 * v23);
          if (!v29)
          {
            int64_t v23 = v28 + 4;
            if (v28 + 4 >= v56) {
              goto LABEL_30;
            }
            unint64_t v29 = *(void *)(v55 + 8 * v23);
            if (!v29) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v21 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_26:
    uint64_t v31 = *(void *)(*(void *)(v17 + 56) + 8 * v27);
    uint64_t v32 = *(void *)(v31 + 16);
    if (v32)
    {
      unint64_t v59 = v21;
      int64_t v60 = v23;
      uint64_t v61 = v24;
      uint64_t v33 = *(char *)(*(void *)(v17 + 48) + v27);
      *(void *)&long long v62 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v34 = v31 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
      uint64_t v35 = *(void *)(v58 + 72);
      do
      {
        outlined init with copy of InkFunction(v34, (uint64_t)v8);
        InkFunction.objc(property:)(qword_1C48289E8[v33]);
        outlined destroy of InkFunction((uint64_t)v8);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v34 += v35;
        --v32;
      }
      while (v32);
      uint64_t v24 = v61;
      unint64_t v25 = v62;
      uint64_t v17 = v57;
      unint64_t v21 = v59;
      int64_t v23 = v60;
    }
    else
    {
      unint64_t v25 = MEMORY[0x1E4FBC860];
    }
    *(void *)&long long v62 = v24;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v25);
    id result = (id)swift_bridgeObjectRelease();
    uint64_t v24 = v62;
  }
  int64_t v30 = v28 + 5;
  if (v30 < v56)
  {
    unint64_t v29 = *(void *)(v55 + 8 * v30);
    if (!v29)
    {
      while (1)
      {
        int64_t v23 = v30 + 1;
        if (__OFADD__(v30, 1)) {
          goto LABEL_40;
        }
        if (v23 >= v56) {
          goto LABEL_30;
        }
        unint64_t v29 = *(void *)(v55 + 8 * v23);
        ++v30;
        if (v29) {
          goto LABEL_25;
        }
      }
    }
    int64_t v23 = v30;
    goto LABEL_25;
  }
LABEL_30:
  swift_release();
  id v36 = (uint64_t (*)(uint64_t, uint64_t))v47[0];
  outlined release of InkBehavior((uint64_t)v88);
  long long v72 = v85;
  long long v73 = v86;
  int v74 = v87;
  long long v68 = v81;
  long long v69 = v82;
  long long v70 = v83;
  long long v71 = v84;
  long long v64 = v77;
  long long v65 = v78;
  long long v66 = v79;
  long long v67 = v80;
  long long v62 = v75;
  long long v63 = v76;
  outlined retain of InkRendering((uint64_t)&v75, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, int))outlined copy of InkDescriptorParticles?);
  id v37 = InkRendering.objc(textureLoader:)(v36);
  outlined retain of InkRendering((uint64_t)&v75, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, int))outlined consume of InkDescriptorParticles?);
  id v38 = objc_msgSend(objc_allocWithZone((Class)PKInkSmoothingDescriptor), sel_initWithStylusSmoothing_touch_velocity_angle_radius_, *((double *)v88 + 1), *(double *)&v88[1], *((double *)&v88[1] + 1), *(double *)&v88[2], *((double *)&v88[2] + 1));
  if (v88[10])
  {
    id v39 = 0;
    if ((BYTE8(v88[14]) & 1) == 0) {
      goto LABEL_32;
    }
LABEL_34:
    id v40 = 0;
  }
  else
  {
    id v39 = objc_msgSend(objc_allocWithZone((Class)PKInkFeatheringDescriptor), sel_initWithStartCapTime_startCapDistance_startCapFade_startCapShrink_endCapTime_endCapDistance_endCapFade_endCapShrink_, *(double *)&v88[6], *((double *)&v88[6] + 1), *(double *)&v88[7], *((double *)&v88[7] + 1), *(double *)&v88[8], *((double *)&v88[8] + 1), *(double *)&v88[9], *((double *)&v88[9] + 1));
    if (BYTE8(v88[14])) {
      goto LABEL_34;
    }
LABEL_32:
    id v40 = objc_msgSend(objc_allocWithZone((Class)PKInkFeatheringDescriptor), sel_initWithStartCapTime_startCapDistance_startCapFade_startCapShrink_endCapTime_endCapDistance_endCapFade_endCapShrink_, *((double *)&v88[10] + 1), *(double *)&v88[11], *((double *)&v88[11] + 1), *(double *)&v88[12], *((double *)&v88[12] + 1), *(double *)&v88[13], *((double *)&v88[13] + 1), *(double *)&v88[14]);
  }
  if (*v54) {
    id v41 = 0;
  }
  else {
    id v41 = objc_msgSend(objc_allocWithZone((Class)PKInkAnimationDescriptor), sel_initWithDuration_sizeDelta_, *(double *)&v88[15], *((double *)&v88[15] + 1));
  }
  double v42 = v49;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKInkBehavior);
  long long v62 = v88[3];
  long long v63 = v88[4];
  long long v64 = v88[5];
  uint64_t v43 = v50;
  swift_bridgeObjectRetain();
  uint64_t v44 = v52;
  swift_bridgeObjectRetain();
  uint64_t v45 = specialized _arrayForceCast<A, B>(_:)(v48);
  HIBYTE(v46) = v54[1];
  LOBYTE(v46) = 0;
  return PKInkBehavior.__allocating_init(renderingDescriptor:blendAlpha:targetMultiple:baseAlpha:inkTransform:useUnclampedWeight:smoothingDescriptor:featheringDescriptor:pencilFeatheringDescriptor:animationDescriptor:identifier:version:variant:uiWidths:defaultWidth:showBrushIndicator:supportsCombiningStrokes:rulerOffsetScale:rulerOffsetConstant:weightFunction:inkFunctions:)(v37, &v62, 1, v38, v39, v40, v41, v51, 1.0, 0.0, 1.0, v42, 0.0, 0.0, v43, 3, v53, v44, v45,
           v46,
           0);
}

id specialized InkRendering.objc(textureLoader:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = *((void *)a1 + 13);
  uint64_t v4 = *((void *)a1 + 14);
  long long v5 = *(_OWORD *)(a1 + 120);
  uint64_t v6 = *((void *)a1 + 17);
  long long v7 = *((_OWORD *)a1 + 9);
  long long v8 = *((_OWORD *)a1 + 10);
  long long v9 = *((_OWORD *)a1 + 11);
  int v10 = *((_DWORD *)a1 + 48);
  if (!v2)
  {
    long long v15 = 0;
    if (v4) {
      goto LABEL_3;
    }
LABEL_5:
    id v16 = 0;
    goto LABEL_6;
  }
  int v11 = *((_DWORD *)a1 + 24);
  long long v21 = *((_OWORD *)a1 + 9);
  long long v22 = *(_OWORD *)(a1 + 120);
  uint64_t v12 = *((void *)a1 + 5);
  uint64_t v23 = *((void *)a1 + 1);
  uint64_t v24 = v2;
  long long v25 = *(_OWORD *)(a1 + 24);
  uint64_t v26 = v12;
  long long v13 = *((_OWORD *)a1 + 4);
  long long v27 = *((_OWORD *)a1 + 3);
  long long v28 = v13;
  long long v29 = *((_OWORD *)a1 + 5);
  __int16 v30 = v11;
  char v31 = BYTE2(v11) & 1;
  char v32 = HIBYTE(v11) & 1;
  long long v19 = v9;
  long long v20 = v8;
  id v14 = specialized InkDescriptorParticles.objc(textureLoader:)((double *)&v23);
  long long v9 = v19;
  long long v8 = v20;
  long long v7 = v21;
  long long v5 = v22;
  long long v15 = v14;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v23 = v3;
  uint64_t v24 = v4;
  long long v25 = v5;
  uint64_t v26 = v6;
  long long v27 = v7;
  long long v28 = v8;
  long long v29 = v9;
  __int16 v30 = v10;
  char v31 = BYTE2(v10) & 1;
  char v32 = HIBYTE(v10) & 1;
  id v16 = specialized InkDescriptorParticles.objc(textureLoader:)((double *)&v23);
LABEL_6:
  id v17 = objc_msgSend(objc_allocWithZone((Class)PKInkRenderingDescriptor), sel_initWithType_blendMode_alternateMode_particleDescriptor_secondaryParticleDescriptor_, v2 != 0, v1, 0, v15, v16);

  return v17;
}

id InkRendering.objc(textureLoader:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v13 = *(unsigned __int8 *)v1;
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[14];
  uint64_t v12 = v2;
  uint64_t v14 = v1[13];
  if (!v2)
  {
    id v6 = 0;
    if (v3) {
      goto LABEL_3;
    }
LABEL_5:
    id v7 = 0;
    goto LABEL_6;
  }
  uint64_t v10 = v1[14];
  uint64_t v5 = v1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = InkDescriptorParticles.objc(textureLoader:)(a1);
  uint64_t v3 = v10;
  outlined consume of InkDescriptorParticles?(v5, v2);
  if (!v10) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v7 = InkDescriptorParticles.objc(textureLoader:)(a1);
  outlined consume of InkDescriptorParticles?(v14, v3);
LABEL_6:
  id v8 = objc_msgSend(objc_allocWithZone((Class)PKInkRenderingDescriptor), sel_initWithType_blendMode_alternateMode_particleDescriptor_secondaryParticleDescriptor_, v12 != 0, v13, 0, v6, v7);

  return v8;
}

id InkDescriptor.ink(color:width:textureLoader:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  id v6 = InkDescriptor.objc(variant:textureLoader:)(0x746C7561666564, 0xE700000000000000, a2, a3);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, a1);
  id v8 = objc_allocWithZone((Class)PKInk);
  long long v9 = (void *)MEMORY[0x1C87824B0](0x746C7561666564, 0xE700000000000000);
  id v10 = objc_msgSend(v8, sel_initWithBehavior_color_version_variant_weight_, v6, v7, 3, v9, a4);

  return v10;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in InkDescriptor()
{
  return MEMORY[0x1E4FBB1B0];
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in InkDescriptorParticles.ParticleRotation()
{
  return lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(&lazy protocol witness table cache variable for type [InkDescriptorParticles.ParticleRotation] and conformance [A], &demangling cache variable for type metadata for [InkDescriptorParticles.ParticleRotation]);
}

unint64_t instantiation function for generic protocol witness table for CGFloat(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  unint64_t result = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in InkFunction.Input()
{
  return lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(&lazy protocol witness table cache variable for type [InkFunction.Input] and conformance [A], &demangling cache variable for type metadata for [InkFunction.Input]);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in InkFunction()
{
  return lazy protocol witness table accessor for type CGSize and conformance CGSize(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
}

double sub_1C4540E8C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 24);
  *a2 = result;
  return result;
}

double sub_1C4540E98(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 24) = *a1;
  return result;
}

uint64_t destroy for InkDescriptor(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 144))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InkDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v6)
  {
    long long v12 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v12;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 116) = *(_OWORD *)(a2 + 116);
    long long v13 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v13;
    uint64_t v9 = *(void *)(a2 + 144);
    if (v9) {
      goto LABEL_3;
    }
LABEL_5:
    long long v14 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v14;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 212) = *(_OWORD *)(a2 + 212);
    long long v15 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v15;
    goto LABEL_6;
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(unsigned char *)(a1 + 131) = *(unsigned char *)(a2 + 131);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = *(void *)(a2 + 144);
  if (!v9) {
    goto LABEL_5;
  }
LABEL_3:
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v9;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  uint64_t v10 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v10;
  long long v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(unsigned char *)(a1 + 225) = *(unsigned char *)(a2 + 225);
  *(unsigned char *)(a1 + 226) = *(unsigned char *)(a2 + 226);
  *(unsigned char *)(a1 + 227) = *(unsigned char *)(a2 + 227);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_6:
  uint64_t v17 = *(void *)(a2 + 232);
  uint64_t v16 = a2 + 232;
  *(void *)(a1 + 232) = v17;
  long long v18 = *(_OWORD *)(v16 + 24);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(v16 + 8);
  *(_OWORD *)(a1 + 256) = v18;
  *(void *)(a1 + 272) = *(void *)(v16 + 40);
  long long v19 = *(_OWORD *)(v16 + 64);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(a1 + 296) = v19;
  long long v20 = *(_OWORD *)(v16 + 96);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(v16 + 80);
  *(_OWORD *)(a1 + 328) = v20;
  long long v21 = *(_OWORD *)(v16 + 112);
  long long v22 = *(_OWORD *)(v16 + 128);
  long long v23 = *(_OWORD *)(v16 + 144);
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(v16 + 160);
  *(_OWORD *)(a1 + 360) = v22;
  *(_OWORD *)(a1 + 376) = v23;
  *(_OWORD *)(a1 + 344) = v21;
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(v16 + 232);
  long long v24 = *(_OWORD *)(v16 + 216);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(v16 + 200);
  *(_OWORD *)(a1 + 448) = v24;
  long long v25 = *(_OWORD *)(v16 + 184);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(v16 + 168);
  *(_OWORD *)(a1 + 416) = v25;
  long long v26 = *(_OWORD *)(v16 + 240);
  *(unsigned char *)(a1 + 488) = *(unsigned char *)(v16 + 256);
  *(_OWORD *)(a1 + 472) = v26;
  *(unsigned char *)(a1 + 489) = *(unsigned char *)(v16 + 257);
  uint64_t v27 = *(void *)(v16 + 272);
  *(void *)(a1 + 496) = *(void *)(v16 + 264);
  *(void *)(a1 + 504) = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InkDescriptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = (_OWORD *)(a1 + 40);
  uint64_t v5 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v6)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
      *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
      *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
      *(unsigned char *)(a1 + 131) = *(unsigned char *)(a2 + 131);
    }
    else
    {
      outlined destroy of InkDescriptorParticles(a1 + 40);
      long long v7 = *(_OWORD *)(a2 + 56);
      _OWORD *v4 = *v5;
      *(_OWORD *)(a1 + 56) = v7;
      long long v9 = *(_OWORD *)(a2 + 88);
      long long v8 = *(_OWORD *)(a2 + 104);
      long long v10 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 116) = *(_OWORD *)(a2 + 116);
      *(_OWORD *)(a1 + 88) = v9;
      *(_OWORD *)(a1 + 104) = v8;
      *(_OWORD *)(a1 + 72) = v10;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
    *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
    *(unsigned char *)(a1 + 131) = *(unsigned char *)(a2 + 131);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 56);
    _OWORD *v4 = *v5;
    *(_OWORD *)(a1 + 56) = v11;
    long long v12 = *(_OWORD *)(a2 + 72);
    long long v13 = *(_OWORD *)(a2 + 88);
    long long v14 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 116) = *(_OWORD *)(a2 + 116);
    *(_OWORD *)(a1 + 88) = v13;
    *(_OWORD *)(a1 + 104) = v14;
    *(_OWORD *)(a1 + 72) = v12;
  }
  long long v15 = (_OWORD *)(a1 + 136);
  uint64_t v16 = (_OWORD *)(a2 + 136);
  uint64_t v17 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 144))
  {
    if (v17)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      *(unsigned char *)(a1 + 225) = *(unsigned char *)(a2 + 225);
      *(unsigned char *)(a1 + 226) = *(unsigned char *)(a2 + 226);
      *(unsigned char *)(a1 + 227) = *(unsigned char *)(a2 + 227);
    }
    else
    {
      outlined destroy of InkDescriptorParticles(a1 + 136);
      long long v18 = *(_OWORD *)(a2 + 152);
      *long long v15 = *v16;
      *(_OWORD *)(a1 + 152) = v18;
      long long v20 = *(_OWORD *)(a2 + 184);
      long long v19 = *(_OWORD *)(a2 + 200);
      long long v21 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 212) = *(_OWORD *)(a2 + 212);
      *(_OWORD *)(a1 + 184) = v20;
      *(_OWORD *)(a1 + 200) = v19;
      *(_OWORD *)(a1 + 168) = v21;
    }
  }
  else if (v17)
  {
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
    *(unsigned char *)(a1 + 225) = *(unsigned char *)(a2 + 225);
    *(unsigned char *)(a1 + 226) = *(unsigned char *)(a2 + 226);
    *(unsigned char *)(a1 + 227) = *(unsigned char *)(a2 + 227);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v22 = *(_OWORD *)(a2 + 152);
    *long long v15 = *v16;
    *(_OWORD *)(a1 + 152) = v22;
    long long v23 = *(_OWORD *)(a2 + 168);
    long long v24 = *(_OWORD *)(a2 + 184);
    long long v25 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 212) = *(_OWORD *)(a2 + 212);
    *(_OWORD *)(a1 + 184) = v24;
    *(_OWORD *)(a1 + 200) = v25;
    *(_OWORD *)(a1 + 168) = v23;
  }
  uint64_t v27 = *(void *)(a2 + 232);
  uint64_t v26 = a2 + 232;
  *(void *)(a1 + 232) = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(v26 + 8);
  *(void *)(a1 + 248) = *(void *)(v26 + 16);
  *(void *)(a1 + 256) = *(void *)(v26 + 24);
  *(void *)(a1 + 264) = *(void *)(v26 + 32);
  *(void *)(a1 + 272) = *(void *)(v26 + 40);
  *(void *)(a1 + 280) = *(void *)(v26 + 48);
  *(void *)(a1 + 288) = *(void *)(v26 + 56);
  *(void *)(a1 + 296) = *(void *)(v26 + 64);
  *(void *)(a1 + 304) = *(void *)(v26 + 72);
  *(void *)(a1 + 312) = *(void *)(v26 + 80);
  *(void *)(a1 + 320) = *(void *)(v26 + 88);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(v26 + 96);
  long long v28 = *(_OWORD *)(v26 + 112);
  long long v29 = *(_OWORD *)(v26 + 128);
  long long v30 = *(_OWORD *)(v26 + 144);
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(v26 + 160);
  *(_OWORD *)(a1 + 360) = v29;
  *(_OWORD *)(a1 + 376) = v30;
  *(_OWORD *)(a1 + 344) = v28;
  long long v31 = *(_OWORD *)(v26 + 200);
  long long v32 = *(_OWORD *)(v26 + 216);
  long long v33 = *(_OWORD *)(v26 + 184);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(v26 + 232);
  *(_OWORD *)(a1 + 432) = v31;
  *(_OWORD *)(a1 + 448) = v32;
  *(_OWORD *)(a1 + 416) = v33;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(v26 + 168);
  long long v34 = *(_OWORD *)(v26 + 240);
  *(unsigned char *)(a1 + 488) = *(unsigned char *)(v26 + 256);
  *(_OWORD *)(a1 + 472) = v34;
  *(unsigned char *)(a1 + 489) = *(unsigned char *)(v26 + 257);
  *(void *)(a1 + 496) = *(void *)(v26 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 504) = *(void *)(v26 + 272);
  return a1;
}

uint64_t outlined destroy of InkDescriptorParticles(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy512_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x200uLL);
}

uint64_t assignWithTake for InkDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  if (*(void *)(a1 + 48))
  {
    uint64_t v6 = *(void *)(a2 + 48);
    if (v6)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      uint64_t v7 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v7;
      swift_bridgeObjectRelease();
      long long v8 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v8;
      *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
      *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
      *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
      *(unsigned char *)(a1 + 131) = *(unsigned char *)(a2 + 131);
      goto LABEL_6;
    }
    outlined destroy of InkDescriptorParticles(a1 + 40);
  }
  long long v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 116) = *(_OWORD *)(a2 + 116);
  long long v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v10;
LABEL_6:
  if (!*(void *)(a1 + 144))
  {
LABEL_10:
    long long v14 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v14;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 212) = *(_OWORD *)(a2 + 212);
    long long v15 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v15;
    goto LABEL_11;
  }
  uint64_t v11 = *(void *)(a2 + 144);
  if (!v11)
  {
    outlined destroy of InkDescriptorParticles(a1 + 136);
    goto LABEL_10;
  }
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v11;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  uint64_t v12 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v12;
  swift_bridgeObjectRelease();
  long long v13 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v13;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(unsigned char *)(a1 + 225) = *(unsigned char *)(a2 + 225);
  *(unsigned char *)(a1 + 226) = *(unsigned char *)(a2 + 226);
  *(unsigned char *)(a1 + 227) = *(unsigned char *)(a2 + 227);
LABEL_11:
  uint64_t v17 = *(void *)(a2 + 232);
  uint64_t v16 = a2 + 232;
  *(void *)(a1 + 232) = v17;
  swift_bridgeObjectRelease();
  long long v18 = *(_OWORD *)(v16 + 24);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(v16 + 8);
  *(_OWORD *)(a1 + 256) = v18;
  long long v19 = *(_OWORD *)(v16 + 56);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(v16 + 40);
  *(_OWORD *)(a1 + 288) = v19;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(v16 + 72);
  *(void *)(a1 + 320) = *(void *)(v16 + 88);
  long long v20 = *(_OWORD *)(v16 + 144);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(v16 + 128);
  *(_OWORD *)(a1 + 376) = v20;
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(v16 + 160);
  long long v21 = *(_OWORD *)(v16 + 112);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(v16 + 96);
  *(_OWORD *)(a1 + 344) = v21;
  long long v22 = *(_OWORD *)(v16 + 184);
  long long v23 = *(_OWORD *)(v16 + 216);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(v16 + 200);
  *(_OWORD *)(a1 + 448) = v23;
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(v16 + 232);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(v16 + 168);
  *(_OWORD *)(a1 + 416) = v22;
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(v16 + 240);
  *(unsigned char *)(a1 + 488) = *(unsigned char *)(v16 + 256);
  *(unsigned char *)(a1 + 489) = *(unsigned char *)(v16 + 257);
  *(void *)(a1 + 496) = *(void *)(v16 + 264);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 504) = *(void *)(v16 + 272);
  return a1;
}

uint64_t getEnumTagSinglePayload for InkDescriptor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 512)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InkDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 504) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 512) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 512) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InkDescriptor()
{
  return &type metadata for InkDescriptor;
}

uint64_t destroy for InkRendering(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = *(void *)(a1 + 112);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for InkRendering(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  if (!v5)
  {
    long long v11 = *(_OWORD *)(a2 + 56);
    v4[2] = *(_OWORD *)(a2 + 40);
    _OWORD v4[3] = v11;
    v4[4] = *(_OWORD *)(a2 + 72);
    *(_OWORD *)((char *)v4 + 76) = *(_OWORD *)(a2 + 84);
    long long v12 = *(_OWORD *)(a2 + 24);
    _OWORD *v4 = *(_OWORD *)(a2 + 8);
    v4[1] = v12;
    uint64_t v8 = *(void *)(a2 + 112);
    if (v8) {
      goto LABEL_3;
    }
LABEL_5:
    long long v13 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v13;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 180);
    long long v14 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v14;
    return a1;
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = *(void *)(a2 + 112);
  if (!v8) {
    goto LABEL_5;
  }
LABEL_3:
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v9;
  long long v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v10;
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InkRendering(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16))
  {
    if (v6)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
      *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
      *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
    }
    else
    {
      outlined destroy of InkDescriptorParticles(a1 + 8);
      long long v7 = v5[1];
      _OWORD *v4 = *v5;
      v4[1] = v7;
      long long v9 = v5[3];
      long long v8 = v5[4];
      long long v10 = v5[2];
      *(_OWORD *)((char *)v4 + 76) = *(_OWORD *)((char *)v5 + 76);
      _OWORD v4[3] = v9;
      v4[4] = v8;
      v4[2] = v10;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
    *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
    *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 24);
    _OWORD *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v11;
    long long v12 = *(_OWORD *)(a2 + 40);
    long long v13 = *(_OWORD *)(a2 + 56);
    long long v14 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 84) = *(_OWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 56) = v13;
    *(_OWORD *)(a1 + 72) = v14;
    *(_OWORD *)(a1 + 40) = v12;
  }
  long long v15 = (_OWORD *)(a1 + 104);
  uint64_t v16 = (_OWORD *)(a2 + 104);
  uint64_t v17 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112))
  {
    if (v17)
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
      *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
      *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
      *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
    }
    else
    {
      outlined destroy of InkDescriptorParticles(a1 + 104);
      long long v18 = *(_OWORD *)(a2 + 120);
      *long long v15 = *v16;
      *(_OWORD *)(a1 + 120) = v18;
      long long v20 = *(_OWORD *)(a2 + 152);
      long long v19 = *(_OWORD *)(a2 + 168);
      long long v21 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 180);
      *(_OWORD *)(a1 + 152) = v20;
      *(_OWORD *)(a1 + 168) = v19;
      *(_OWORD *)(a1 + 136) = v21;
    }
  }
  else if (v17)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
    *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
    *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v22 = *(_OWORD *)(a2 + 120);
    *long long v15 = *v16;
    *(_OWORD *)(a1 + 120) = v22;
    long long v23 = *(_OWORD *)(a2 + 136);
    long long v24 = *(_OWORD *)(a2 + 152);
    long long v25 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 180);
    *(_OWORD *)(a1 + 152) = v24;
    *(_OWORD *)(a1 + 168) = v25;
    *(_OWORD *)(a1 + 136) = v23;
  }
  return a1;
}

__n128 __swift_memcpy196_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for InkRendering(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = (_OWORD *)(a1 + 8);
  long long v5 = (_OWORD *)(a2 + 8);
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(void *)(a2 + 16);
    if (v6)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = v6;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      uint64_t v7 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v7;
      swift_bridgeObjectRelease();
      long long v8 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v8;
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
      *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
      *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
      goto LABEL_6;
    }
    outlined destroy of InkDescriptorParticles((uint64_t)v4);
  }
  long long v9 = v5[3];
  v4[2] = v5[2];
  _OWORD v4[3] = v9;
  v4[4] = v5[4];
  *(_OWORD *)((char *)v4 + 76) = *(_OWORD *)((char *)v5 + 76);
  long long v10 = v5[1];
  _OWORD *v4 = *v5;
  v4[1] = v10;
LABEL_6:
  if (!*(void *)(a1 + 112))
  {
LABEL_10:
    long long v14 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v14;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 180);
    long long v15 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v15;
    return a1;
  }
  uint64_t v11 = *(void *)(a2 + 112);
  if (!v11)
  {
    outlined destroy of InkDescriptorParticles(a1 + 104);
    goto LABEL_10;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v11;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v12 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v12;
  swift_bridgeObjectRelease();
  long long v13 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v13;
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
  return a1;
}

uint64_t getEnumTagSinglePayload for InkRendering(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 196)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InkRendering(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 192) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 196) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 196) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InkRendering()
{
  return &type metadata for InkRendering;
}

unsigned char *destructiveInjectEnumTag for InkRendering.BlendMode(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for InkRendering.BlendMode()
{
  return &type metadata for InkRendering.BlendMode;
}

uint64_t destroy for InkDescriptorParticles()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InkDescriptorParticles(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 91);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InkDescriptorParticles(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 91);
  return a1;
}

__n128 __swift_memcpy92_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for InkDescriptorParticles(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 91);
  return a1;
}

uint64_t getEnumTagSinglePayload for InkDescriptorParticles(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 92)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InkDescriptorParticles(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 92) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 92) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InkDescriptorParticles()
{
  return &type metadata for InkDescriptorParticles;
}

ValueMetadata *type metadata accessor for InkDescriptorParticles.ParticleRotation()
{
  return &type metadata for InkDescriptorParticles.ParticleRotation;
}

ValueMetadata *type metadata accessor for InkDescriptorParticles.ParticleBlendMode()
{
  return &type metadata for InkDescriptorParticles.ParticleBlendMode;
}

uint64_t dispatch thunk of DecodableDefaultValue.init(defaultState:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata instantiation function for DecodableDefault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t type metadata completion function for DecodableDefault()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DecodableDefault(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for DecodableDefault(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for DecodableDefault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for DecodableDefault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for DecodableDefault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for DecodableDefault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for DecodableDefault(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for DecodableDefault(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1C4542A00);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for DecodableDefault()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for InkMask()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InkMask(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InkMask(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for InkMask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for InkMask(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InkMask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InkMask()
{
  return &type metadata for InkMask;
}

void *initializeBufferWithCopyOfBuffer for InkFunction(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *(_OWORD *)((char *)a1 + v8) = *(_OWORD *)((char *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = a3[8];
    int v11 = (char *)a1 + v9;
    unsigned int v12 = (char *)a2 + v9;
    unsigned char v11[16] = v12[16];
    *(_OWORD *)int v11 = *(_OWORD *)v12;
    *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
    *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for InkFunction(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InkFunction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InkFunction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  char v13 = *(unsigned char *)(v12 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = v13;
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for InkFunction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for InkFunction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for InkFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C45430A0);
}

uint64_t sub_1C45430A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 32));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for InkFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C4543174);
}

uint64_t sub_1C4543174(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for InkFunction()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for InkFunction.Input()
{
  return &type metadata for InkFunction.Input;
}

ValueMetadata *type metadata accessor for InkFunction.InputProperties()
{
  return &type metadata for InkFunction.InputProperties;
}

uint64_t destroy for InkBehavior()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InkBehavior(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v3;
  long long v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 112) = v5;
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  long long v8 = *(_OWORD *)(a2 + 240);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = v8;
  *(unsigned char *)(a1 + 257) = *(unsigned char *)(a2 + 257);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InkBehavior(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  long long v4 = *(_OWORD *)(a2 + 112);
  long long v5 = *(_OWORD *)(a2 + 128);
  long long v6 = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 112) = v4;
  long long v7 = *(_OWORD *)(a2 + 200);
  long long v8 = *(_OWORD *)(a2 + 216);
  char v9 = *(unsigned char *)(a2 + 232);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(unsigned char *)(a1 + 232) = v9;
  *(_OWORD *)(a1 + 216) = v8;
  *(_OWORD *)(a1 + 200) = v7;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  long long v10 = *(_OWORD *)(a2 + 240);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = v10;
  *(unsigned char *)(a1 + 257) = *(unsigned char *)(a2 + 257);
  return a1;
}

void *__swift_memcpy258_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x102uLL);
}

uint64_t assignWithTake for InkBehavior(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  long long v4 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v4;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  long long v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(unsigned char *)(a1 + 257) = *(unsigned char *)(a2 + 257);
  return a1;
}

uint64_t getEnumTagSinglePayload for InkBehavior(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 258)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InkBehavior(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 256) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 258) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 258) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InkBehavior()
{
  return &type metadata for InkBehavior;
}

ValueMetadata *type metadata accessor for InkBehavior.InkProperty()
{
  return &type metadata for InkBehavior.InkProperty;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for InkSmoothing(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for InkSmoothing(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for InkSmoothing()
{
  return &type metadata for InkSmoothing;
}

ValueMetadata *type metadata accessor for InkAnimationDescriptor()
{
  return &type metadata for InkAnimationDescriptor;
}

uint64_t getEnumTagSinglePayload for InkFeathering(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for InkFeathering(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for InkFeathering()
{
  return &type metadata for InkFeathering;
}

ValueMetadata *type metadata accessor for InkFeathering.EndCap()
{
  return &type metadata for InkFeathering.EndCap;
}

void *type metadata accessor for InkFeathering.CodingKeys()
{
  return &unk_1F1FAE148;
}

uint64_t getEnumTagSinglePayload for InkRendering.BlendMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for InkRendering.BlendMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C45439E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for InkAnimationDescriptor.CodingKeys()
{
  return &unk_1F1FAE630;
}

void *type metadata accessor for InkSmoothing.CodingKeys()
{
  return &unk_1F1FADA68;
}

void *type metadata accessor for InkBehavior.CodingKeys()
{
  return &unk_1F1FAD420;
}

uint64_t getEnumTagSinglePayload for InkFunction.Input(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for InkFunction.Input(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C4543B9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InkFunction.CodingKeys()
{
  return &type metadata for InkFunction.CodingKeys;
}

void *type metadata accessor for InkMask.CodingKeys()
{
  return &unk_1F1FAEAB8;
}

unsigned char *storeEnumTagSinglePayload for InkBehavior.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C4543CB8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for InkDescriptorParticles.CodingKeys()
{
  return &unk_1F1FAE740;
}

unsigned char *storeEnumTagSinglePayload for InkDescriptorParticles.ParticleRotation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C4543DBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for InkRendering.CodingKeys()
{
  return &unk_1F1FAD870;
}

uint64_t getEnumTagSinglePayload for InkMask.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for InkMask.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C4543F50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for InkDescriptor.CodingKeys()
{
  return &unk_1F1FAE028;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[(CGFloat, Int)]>);
    long long v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    long long v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(CGFloat, Int)]);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    char v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKLongPressGestureRecognizer.PressStartLocation>);
  uint64_t v10 = *(void *)(type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  char v13 = (void *)swift_allocObject();
  __n128 result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation() - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  int v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x1C8782750](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)int v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    __n128 result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      __n128 result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(&lazy protocol witness table cache variable for type [PKInkFunction] and conformance [A], &demangling cache variable for type metadata for [PKInkFunction]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKInkFunction]);
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            ((void (*)(void (**)(id *), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKInkFunction);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*specialized Slice.subscript.read(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5))()
{
  if (a2 < a3 || a2 >= a4)
  {
    __break(1u);
  }
  else
  {
    id v6 = objc_msgSend(a5, sel_objectAtIndexedSubscript_, a2);
    if (v6)
    {
      *a1 = v6;
      return Slice.subscript.readspecialized ;
    }
  }
  __n128 result = (uint64_t (*)())_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Slice._copyContents(initializing:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, id a6)
{
  if (!a2) {
    goto LABEL_5;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
LABEL_6:
    uint64_t v11 = a4;
LABEL_7:
    *a1 = a4;
    a1[1] = a5;
    a1[2] = a6;
    a1[3] = v11;
    return v10;
  }
  if (a3 < 0)
  {
LABEL_20:
    __break(1u);
  }
  else
  {
    if (a5 == a4)
    {
LABEL_5:
      uint64_t v10 = 0;
      goto LABEL_6;
    }
    uint64_t v19 = a5 - a4;
    if (a5 <= a4)
    {
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v11 = a5;
      uint64_t v10 = v19;
      goto LABEL_7;
    }
    char v13 = a2;
    uint64_t v14 = a3 - 1;
    uint64_t v11 = a4 + 1;
    while (1)
    {
      id v15 = objc_msgSend(a6, sel_objectAtIndexedSubscript_, v11 - 1);
      if (!v15) {
        break;
      }
      id v16 = v15;
      id v17 = objc_msgSend(a6, sel_count);
      if (a4 < 0 || v11 - 1 >= (uint64_t)v17)
      {
        __break(1u);
        goto LABEL_20;
      }
      *char v13 = v16;
      if (!v14) {
        goto LABEL_7;
      }
      if (a5 == v11) {
        goto LABEL_18;
      }
      if (v11 >= a4)
      {
        ++v13;
        --v14;
        if (v11++ < a5) {
          continue;
        }
      }
      goto LABEL_17;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized InkDescriptor.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E697265646E6572 && a2 == 0xE900000000000067 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x726F697661686562 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7368746469576975 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x57746C7561666564 && a2 == 0xEC00000068746469)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t specialized InkRendering.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x646F4D646E656C62 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C636974726170 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001C481A880)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized InkDescriptorParticles.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4E65727574786574 && a2 == 0xEB00000000656D61;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E6963617073 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1802723693 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F697461746F72 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001C481A8A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001C481A8C0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

double specialized InkFeathering.EndCap.init(from:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkFeathering.EndCap.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  char v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  double v8 = v7;
  HIBYTE(v10) = 1;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  HIBYTE(v10) = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  HIBYTE(v10) = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v8;
}

uint64_t specialized InkMask.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4E65727574786574 && a2 == 0xEB00000000656D61;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C616373 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F43656C616373 && a2 == 0xED0000746E617473 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E656D65766F6DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6874706564 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001C481A8E0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

unint64_t specialized InkFunction.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of InkFunction.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t specialized InkBehavior.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6E6F6974636E7566 && a2 == 0xE900000000000073
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6968746F6F6D73 && a2 == 0xE900000000000067 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736E6172546B6E69 && a2 == 0xEC0000006D726F66 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6972656874616566 && a2 == 0xEA0000000000676ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001C481A900 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001C481A920 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001C481A940)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t specialized InkSmoothing.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73756C797473 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6863756F74 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x797469636F6C6576 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F69746365726964 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x737569646172 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized InkAnimationDescriptor.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746C6544657A6973 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized InkFeathering.EndCap.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65636E6174736964 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x447974696361706FLL && a2 == 0xEC00000061746C65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6544737569646172 && a2 == 0xEB0000000061746CLL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized InkFeathering.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7061437472617473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x706143646E65 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t lazy protocol witness table accessor for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys);
  }
  return result;
}

id specialized static PKInkBehavior.loadInkV2(url:)()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  uint64_t v0 = Data.init(contentsOf:options:)();
  unint64_t v2 = v1;
  lazy protocol witness table accessor for type InkDescriptor and conformance InkDescriptor();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  outlined consume of Data._Representation(v0, v2);
  memcpy(__dst, __src, 0x200uLL);
  memcpy(v5, __src, sizeof(v5));
  id v4 = specialized InkDescriptor.objc(variant:textureLoader:)(0x746C7561666564, 0xE700000000000000, v5);
  swift_release();
  outlined release of InkDescriptor(__dst);
  return v4;
}

uint64_t lazy protocol witness table accessor for type CGSize and conformance CGSize(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkDescriptor and conformance InkDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type InkDescriptor and conformance InkDescriptor;
  if (!lazy protocol witness table cache variable for type InkDescriptor and conformance InkDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptor and conformance InkDescriptor);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in InkFunction.objc(property:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  double v4 = 0.0;
  uint64_t v5 = *(void *)result % 3;
  if (!v5)
  {
    uint64_t v6 = *(void *)(v2 + 16);
    double v7 = *(double *)(result + 16);
    uint64_t result = type metadata accessor for InkFunction();
    double v4 = *(double *)(v6 + *(int *)(result + 24))
       + v7 * (*(double *)(v6 + *(int *)(result + 24) + 8) - *(double *)(v6 + *(int *)(result + 24)));
  }
  *(double *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5 != 0;
  return result;
}

uint64_t partial apply for closure #3 in InkFunction.objc(property:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #3 in InkFunction.objc(property:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t partial apply for closure #4 in InkFunction.objc(property:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #4 in InkFunction.objc(property:)(a1, *(void *)(v2 + 16), a2);
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for InkFeathering.EndCap.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for InkFeathering.EndCap.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C45477CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for InkFeathering.EndCap.CodingKeys()
{
  return &unk_1F1FAE1D8;
}

uint64_t PKToolPicker.selectedTool.getter@<X0>(uint64_t *a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_selectedTool);
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    uint64_t v5 = &type metadata for PKInkingTool;
    unsigned int v6 = &protocol witness table for PKInkingTool;
LABEL_11:
    a1[3] = (uint64_t)v5;
    a1[4] = (uint64_t)v6;
    *a1 = result;
    return result;
  }
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    uint64_t v5 = &type metadata for PKEraserTool;
    unsigned int v6 = &protocol witness table for PKEraserTool;
    goto LABEL_11;
  }
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    uint64_t v5 = &type metadata for PKLassoTool;
    unsigned int v6 = &protocol witness table for PKLassoTool;
    goto LABEL_11;
  }
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    uint64_t v5 = &type metadata for PKRulerTool;
    unsigned int v6 = &protocol witness table for PKRulerTool;
    goto LABEL_11;
  }
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    uint64_t v5 = &type metadata for PKHandwritingTool;
    unsigned int v6 = &protocol witness table for PKHandwritingTool;
    goto LABEL_11;
  }
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    a1[3] = (uint64_t)&type metadata for PKCustomTool;
    a1[4] = (uint64_t)&protocol witness table for PKCustomTool;
    *a1 = result;
    a1[1] = 0;
  }
  else
  {
    self;
    uint64_t result = swift_dynamicCastObjCClass();
    if (result)
    {
      uint64_t v5 = &type metadata for PKGenerationTool;
      unsigned int v6 = &protocol witness table for PKGenerationTool;
      goto LABEL_11;
    }
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t key path setter for PKToolPicker.selectedTool : PKToolPicker(uint64_t a1, void **a2)
{
  outlined init with copy of Decoder(a1, (uint64_t)v6);
  id v3 = *a2;
  unsigned int v4 = (void *)specialized PKToolPicker.toolReferenceFromTool(_:)((uint64_t)v6);
  objc_msgSend(v3, sel_setSelectedTool_, v4);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t PKToolPicker.selectedTool.setter(uint64_t a1)
{
  id v3 = (void *)specialized PKToolPicker.toolReferenceFromTool(_:)(a1);
  objc_msgSend(v1, sel_setSelectedTool_, v3);

  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void (*PKToolPicker.selectedTool.modify(uint64_t **a1))(uint64_t *a1, char a2)
{
  id v3 = (uint64_t *)malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  PKToolPicker.selectedTool.getter(v3);
  return PKToolPicker.selectedTool.modify;
}

void PKToolPicker.selectedTool.modify(uint64_t *a1, char a2)
{
  int v2 = (void *)*a1;
  if (a2)
  {
    id v3 = (void *)v2[10];
    outlined init with copy of Decoder(*a1, (uint64_t)(v2 + 5));
    unsigned int v4 = (void *)specialized PKToolPicker.toolReferenceFromTool(_:)((uint64_t)(v2 + 5));
    objc_msgSend(v3, sel_setSelectedTool_, v4);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v2 + 5));
  }
  else
  {
    uint64_t v5 = (void *)v2[10];
    unsigned int v6 = (void *)specialized PKToolPicker.toolReferenceFromTool(_:)(*a1);
    objc_msgSend(v5, sel_setSelectedTool_, v6);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);

  free(v2);
}

uint64_t PKToolPicker._tools.getter()
{
  id v1 = objc_msgSend(v0, sel__tools);
  type metadata accessor for PKTool();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v3 = v0;
  uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6PKToolCG_9PencilKitAF_ps5NeverOTg506_sSo12d8PickerC9eF36E6_toolsSayAC0A0_pGvgAcE_pSoAECXEfU_So0dJ0CTf1cn_nTf4nd_n(v2);
  swift_bridgeObjectRelease();

  return v4;
}

void PKToolPicker._addTool(_:)(uint64_t a1)
{
}

void PKToolPicker._insertTool(_:atIndex:)(uint64_t a1, uint64_t a2)
{
  id v4 = (id)specialized PKToolPicker.toolReferenceFromTool(_:)(a1);
  objc_msgSend(v2, sel__insertTool_atIndex_, v4, a2);
}

void PKToolPicker._removeTool(_:)(uint64_t a1)
{
}

void PKToolPicker._addTool(_:)(uint64_t a1, SEL *a2)
{
  id v4 = (id)specialized PKToolPicker.toolReferenceFromTool(_:)(a1);
  objc_msgSend(v2, *a2, v4);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6PKToolCG_9PencilKitAF_ps5NeverOTg506_sSo12d8PickerC9eF36E6_toolsSayAC0A0_pGvgAcE_pSoAECXEfU_So0dJ0CTf1cn_nTf4nd_n(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return v3;
  }
  uint64_t v15 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = 0;
    uint64_t v3 = v15;
    while (1)
    {
      if (v2 == v4)
      {
        __break(1u);
        goto LABEL_31;
      }
      if ((a1 & 0xC000000000000001) != 0) {
        MEMORY[0x1C8782750](v4, a1);
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      self;
      uint64_t v6 = swift_dynamicCastObjCClass();
      if (v6)
      {
        uint64_t v14 = &protocol witness table for PKInkingTool;
        BOOL v7 = &type metadata for PKInkingTool;
      }
      else
      {
        self;
        uint64_t v6 = swift_dynamicCastObjCClass();
        if (v6)
        {
          uint64_t v14 = &protocol witness table for PKEraserTool;
          BOOL v7 = &type metadata for PKEraserTool;
        }
        else
        {
          self;
          uint64_t v6 = swift_dynamicCastObjCClass();
          if (v6)
          {
            uint64_t v14 = &protocol witness table for PKLassoTool;
            BOOL v7 = &type metadata for PKLassoTool;
          }
          else
          {
            self;
            uint64_t v6 = swift_dynamicCastObjCClass();
            if (v6)
            {
              uint64_t v14 = &protocol witness table for PKRulerTool;
              BOOL v7 = &type metadata for PKRulerTool;
            }
            else
            {
              self;
              uint64_t v6 = swift_dynamicCastObjCClass();
              if (v6)
              {
                uint64_t v14 = &protocol witness table for PKHandwritingTool;
                BOOL v7 = &type metadata for PKHandwritingTool;
              }
              else
              {
                self;
                uint64_t v10 = swift_dynamicCastObjCClass();
                if (v10)
                {
                  char v13 = &type metadata for PKCustomTool;
                  uint64_t v14 = &protocol witness table for PKCustomTool;
                  long long v12 = (unint64_t)v10;
                  goto LABEL_21;
                }
                self;
                uint64_t v6 = swift_dynamicCastObjCClass();
                if (!v6) {
                  goto LABEL_33;
                }
                uint64_t v14 = &protocol witness table for PKGenerationTool;
                BOOL v7 = &type metadata for PKGenerationTool;
              }
            }
          }
        }
      }
      char v13 = v7;
      *(void *)&long long v12 = v6;
LABEL_21:
      uint64_t v15 = v3;
      unint64_t v9 = *(void *)(v3 + 16);
      unint64_t v8 = *(void *)(v3 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1);
        uint64_t v3 = v15;
      }
      ++v4;
      *(void *)(v3 + 16) = v9 + 1;
      outlined init with take of PKTool(&v12, v3 + 40 * v9 + 32);
      if (v2 == v4) {
        return v3;
      }
    }
  }
  __break(1u);
LABEL_33:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized PKToolPicker.toolReferenceFromTool(_:)(uint64_t a1)
{
  outlined init with copy of Decoder(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKTool);
  if (swift_dynamicCast()) {
    return v4;
  }
  outlined init with copy of Decoder(a1, (uint64_t)v6);
  if (swift_dynamicCast()) {
    return v4;
  }
  outlined init with copy of Decoder(a1, (uint64_t)v6);
  if (swift_dynamicCast()) {
    return v4;
  }
  outlined init with copy of Decoder(a1, (uint64_t)v6);
  if (swift_dynamicCast()) {
    return v4;
  }
  outlined init with copy of Decoder(a1, (uint64_t)v6);
  if (swift_dynamicCast()) {
    return v4;
  }
  outlined init with copy of Decoder(a1, (uint64_t)v6);
  if (swift_dynamicCast())
  {
    uint64_t v2 = v4;

    return v2;
  }
  outlined init with copy of Decoder(a1, (uint64_t)v6);
  if (swift_dynamicCast()) {
    return v4;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t type metadata accessor for PKTool()
{
  unint64_t result = lazy cache variable for type metadata for PKTool;
  if (!lazy cache variable for type metadata for PKTool)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PKTool);
  }
  return result;
}

uint64_t sub_1C454836C@<X0>(uint64_t *a1@<X8>)
{
  return PKToolPicker.selectedTool.getter(a1);
}

uint64_t outlined init with take of PKTool(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void __swiftcall PKRulerTool.init()(PencilKit::PKRulerTool *__return_ptr retstr)
{
  retstr->tool.super.super.Class isa = (Class)objc_msgSend(objc_allocWithZone((Class)PKRulerTool), sel_init);
}

uint64_t static PKRulerTool.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

ValueMetadata *type metadata accessor for PKRulerTool()
{
  return &type metadata for PKRulerTool;
}

uint64_t PKCanvasView.tool.getter@<X0>(uint64_t *a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_tool);
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    id v5 = &protocol witness table for PKInkingTool;
    uint64_t v6 = &type metadata for PKInkingTool;
LABEL_7:
    a1[3] = (uint64_t)v6;
    a1[4] = (uint64_t)v5;
    *a1 = result;
    return result;
  }

  id v7 = objc_msgSend(v1, sel_tool);
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    id v5 = &protocol witness table for PKEraserTool;
    uint64_t v6 = &type metadata for PKEraserTool;
    goto LABEL_7;
  }

  id v8 = objc_msgSend(v1, sel_tool);
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    id v5 = &protocol witness table for PKLassoTool;
    uint64_t v6 = &type metadata for PKLassoTool;
    goto LABEL_7;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PKCanvasView.tool.setter(uint64_t a1)
{
  outlined init with copy of Decoder(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKTool);
  if (swift_dynamicCast()
    || (outlined init with copy of Decoder(a1, (uint64_t)v5), swift_dynamicCast())
    || (outlined init with copy of Decoder(a1, (uint64_t)v5), swift_dynamicCast()))
  {
    objc_msgSend(v1, sel_setTool_, v4);

    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void (*PKCanvasView.tool.modify(uint64_t **a1))(uint64_t *a1, char a2)
{
  id v3 = (uint64_t *)malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  PKCanvasView.tool.getter(v3);
  return PKCanvasView.tool.modify;
}

void PKCanvasView.tool.modify(uint64_t *a1, char a2)
{
  long long v2 = (void *)*a1;
  if (a2)
  {
    outlined init with copy of Decoder(*a1, (uint64_t)v2 + 40);
    PKCanvasView.tool.setter((uint64_t)v2 + 40);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  else
  {
    PKCanvasView.tool.setter(*a1);
  }

  free(v2);
}

uint64_t sub_1C45487A8@<X0>(uint64_t *a1@<X8>)
{
  return PKCanvasView.tool.getter(a1);
}

uint64_t sub_1C45487CC(uint64_t a1)
{
  outlined init with copy of Decoder(a1, (uint64_t)v2);
  return PKCanvasView.tool.setter((uint64_t)v2);
}

void __swiftcall PKGenerationTool.init()(PencilKit::PKGenerationTool *__return_ptr retstr)
{
  retstr->tool.super.super.Class isa = (Class)objc_msgSend(objc_allocWithZone((Class)PKGenerationTool), sel_init);
}

uint64_t static PKGenerationTool.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

ValueMetadata *type metadata accessor for PKGenerationTool()
{
  return &type metadata for PKGenerationTool;
}

id static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id a1@<X0>, void *a2@<X8>)
{
  long long v2 = a1;
  if (!a1)
  {
    a1 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
    long long v2 = 0;
  }
  *a2 = a1;

  return v2;
}

uint64_t PKStrokePath.init<A>(controlPoints:creationDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1, a2);
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  Array.init<A>(_:)();
  id v10 = objc_allocWithZone((Class)PKStrokePath);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v12 = Date._bridgeToObjectiveC()().super.isa;
  id v13 = objc_msgSend(v10, sel_initWithControlPoints_creationDate_, isa, v12);

  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a2, v14);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a3);
  *a4 = v13;
  return result;
}

id PKStrokePath.interpolatedPoint(at:)@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(*v1, sel_interpolatedPointAt_);
  if (result)
  {
    *a1 = result;
  }
  else
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void __swiftcall PKStrokePath.init()(PencilKit::PKStrokePath *__return_ptr retstr)
{
  retstr->strokeData.super.Class isa = (Class)objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
}

void PKStrokePath.creationDate.getter()
{
  id v1 = objc_msgSend(*v0, sel_creationDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

id PKStrokePath.interpolatedLocation(at:)()
{
  return objc_msgSend(*v0, sel_interpolatedLocationAt_);
}

void PKStrokePath.interpolatedPoints(in:by:)(uint64_t a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *a4;
  char v8 = *((unsigned char *)a4 + 8);
  uint64_t v9 = *v5;
  if (a3)
  {
    uint64_t v15 = *v5;
    id v11 = v9;
    int64_t v12 = (int64_t)objc_msgSend(v11, sel_count);
    if (((unint64_t)objc_msgSend(v11, sel_count) & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      id v13 = objc_msgSend(v11, sel_count);

      if ((v12 & 0x8000000000000000) == 0 && (uint64_t)v13 >= v12)
      {
        if (v12)
        {
          a1 = 0;
          a2 = (double)(v12 - 1);
          uint64_t v9 = v15;
          goto LABEL_8;
        }
LABEL_13:
        __break(1u);
        return;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_8:
  *(void *)a5 = v9;
  *(void *)(a5 + 8) = v7;
  *(unsigned char *)(a5 + 16) = v8;
  *(void *)(a5 + 24) = a1;
  *(double *)(a5 + 32) = a2;
  *(void *)(a5 + 40) = a1;

  id v14 = v9;
}

void PKStrokePath.parametricValue(_:offsetBy:)(uint64_t a1, double a2)
{
  double v3 = *(double *)a1;
  int v4 = *(unsigned __int8 *)(a1 + 8);
  id v5 = *v2;
  if (v4)
  {
    if (v4 != 1)
    {
      id v8 = v5;
      int64_t v9 = (int64_t)objc_msgSend(v8, sel_count);
      if (((unint64_t)objc_msgSend(v8, sel_count) & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        id v10 = objc_msgSend(v8, sel_count);

        if ((v9 & 0x8000000000000000) == 0 && (uint64_t)v10 >= v9) {
          return;
        }
      }
      __break(1u);
      return;
    }
    double v6 = v3;
    uint64_t v7 = sel_parametricValue_offsetByTime_;
  }
  else
  {
    double v6 = v3;
    uint64_t v7 = sel_parametricValue_offsetByDistance_;
  }

  objc_msgSend(v5, v7, a2, v6);
}

uint64_t PKStrokePath.startIndex.getter()
{
  return 0;
}

id PKStrokePath.endIndex.getter()
{
  return objc_msgSend(*v0, sel_count);
}

id PKStrokePath.subscript.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*v2, sel_objectAtIndexedSubscript_, a1);
  if (result)
  {
    *a2 = result;
  }
  else
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(int64_t a1, uint64_t a2, int64_t a3, id a4)
{
  id result = objc_msgSend(a4, sel_count);
  if (a1 < 0 || (uint64_t)result < a1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id result = objc_msgSend(a4, sel_count);
  if (a3 < 0 || (uint64_t)result < a3) {
    goto LABEL_17;
  }
  uint64_t v9 = a3 - a1;
  if (a2 >= 1)
  {
    if (v9 < 0 || v9 >= a2) {
      goto LABEL_12;
    }
    return 0;
  }
  if (v9 <= 0 && v9 > a2) {
    return 0;
  }
LABEL_12:
  BOOL v11 = __OFADD__(a1, a2);
  int64_t v10 = a1 + a2;
  if (v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id result = objc_msgSend(a4, sel_count);
  if ((v10 & 0x8000000000000000) == 0 && (uint64_t)result >= v10) {
    return (id)v10;
  }
LABEL_19:
  __break(1u);
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance PKStrokePath@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    id result = objc_msgSend(*v2, sel_count);
    if ((v4 & 0x8000000000000000) == 0 && v4 < (uint64_t)result)
    {
      *a2 = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance PKStrokePath(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    double v3 = result;
    id result = (uint64_t *)objc_msgSend(*v1, sel_count);
    if ((v2 & 0x8000000000000000) == 0 && v2 < (uint64_t)result)
    {
      *double v3 = v2;
      return result;
    }
  }
  __break(1u);
  return result;
}

id protocol witness for Collection.endIndex.getter in conformance PKStrokePath@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(*v1, sel_count);
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance PKStrokePath(void *a1, void *a2))(id *a1)
{
  id v4 = objc_msgSend(*v2, sel_objectAtIndexedSubscript_, *a2);
  if (v4)
  {
    *a1 = v4;
    return Array.subscript.readspecialized ;
  }
  else
  {
    id result = (void (*)(id *))_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Collection.subscript.getter in conformance PKStrokePath@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  id v7 = *v2;
  uint64_t result = (uint64_t)objc_msgSend(*v2, sel_count);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v5 < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < v4)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  a2[1] = v4;
  a2[2] = v7;
  *a2 = v5;

  return (uint64_t)v7;
}

unint64_t protocol witness for Collection.indices.getter in conformance PKStrokePath@<X0>(void *a1@<X8>)
{
  unint64_t result = (unint64_t)objc_msgSend(*v1, sel_count);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = result;
  }
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance PKStrokePath()
{
  return objc_msgSend(*v0, sel_count) == 0;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance PKStrokePath(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance PKStrokePath@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    unint64_t result = objc_msgSend(*v3, sel_count);
    if ((v5 & 0x8000000000000000) == 0 && (uint64_t)result >= v5)
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

id protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance PKStrokePath@<X0>(int64_t *a1@<X0>, uint64_t a2@<X1>, int64_t *a3@<X2>, uint64_t a4@<X8>)
{
  id result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

id protocol witness for RandomAccessCollection.distance(from:to:) in conformance PKStrokePath(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  id v5 = *v2;
  id result = objc_msgSend(*v2, sel_count);
  if (v3 < 0 || (uint64_t)result < v3)
  {
    __break(1u);
  }
  else
  {
    id result = objc_msgSend(v5, sel_count);
    if ((v4 & 0x8000000000000000) == 0 && (uint64_t)result >= v4) {
      return (id)(v4 - v3);
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance PKStrokePath(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance PKStrokePath(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

id protocol witness for Collection.index(after:) in conformance PKStrokePath@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  id result = objc_msgSend(*v2, sel_count);
  if (v4 < 0 || v4 >= (uint64_t)result) {
    __break(1u);
  }
  else {
    *a2 = v4 + 1;
  }
  return result;
}

id protocol witness for Collection.formIndex(after:) in conformance PKStrokePath(uint64_t *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *a1;
  id result = objc_msgSend(v3, sel_count);
  if (v4 < 0 || v4 >= (uint64_t)result) {
    __break(1u);
  }
  else {
    *a1 = v4 + 1;
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance PKStrokePath(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

int64_t protocol witness for Collection.count.getter in conformance PKStrokePath()
{
  id v1 = *v0;
  int64_t v2 = (int64_t)objc_msgSend(v1, sel_count);
  int64_t result = (int64_t)objc_msgSend(v1, sel_count);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    int64_t result = (int64_t)objc_msgSend(v1, sel_count);
    if ((v2 & 0x8000000000000000) == 0 && result >= v2) {
      return v2;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance PKStrokePath()
{
  id v1 = *v0;
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);

  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance PKStrokePath(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

void __swiftcall PKStrokePath._bridgeToObjectiveC()(PKStrokePath *__return_ptr retstr)
{
  id v2 = *v1;
}

id static PKStrokePath._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;

  return a1;
}

uint64_t static PKStrokePath._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = a1;
  id v4 = a1;
  return 1;
}

unint64_t lazy protocol witness table accessor for type PKStrokePath and conformance PKStrokePath()
{
  unint64_t result = lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath;
  if (!lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath;
  if (!lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath;
  if (!lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath;
  if (!lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in PKStrokePath()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in PKStrokePath()
{
  return lazy protocol witness table accessor for type Slice<PKStrokePath> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PKStrokePath> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type PKStrokePath and conformance PKStrokePath);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in PKStrokePath()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in PKStrokePath()
{
  return lazy protocol witness table accessor for type Slice<PKStrokePath> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PKStrokePath> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type PKStrokePath and conformance PKStrokePath);
}

uint64_t lazy protocol witness table accessor for type Slice<PKStrokePath> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<PKStrokePath>);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in PKStrokePath()
{
  return MEMORY[0x1E4FBB568];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in PKStrokePath()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in PKStrokePath()
{
  return lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(&lazy protocol witness table cache variable for type Slice<PKStrokePath> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<PKStrokePath>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in PKStrokePath()
{
  return lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(&lazy protocol witness table cache variable for type IndexingIterator<PKStrokePath> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<PKStrokePath>);
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance PKStrokePath@<X0>(id a1@<X0>, void *a2@<X8>)
{
  id v2 = a1;
  if (!a1)
  {
    a1 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
    id v2 = 0;
  }
  *a2 = a1;

  return v2;
}

ValueMetadata *type metadata accessor for PKStrokePath()
{
  return &type metadata for PKStrokePath;
}

uint64_t initializeWithCopy for PKStrokePath.InterpolatedSlice(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for PKStrokePath.InterpolatedSlice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for PKStrokePath.InterpolatedSlice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for PKStrokePath.InterpolatedSlice(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PKStrokePath.InterpolatedSlice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PKStrokePath.InterpolatedSlice()
{
  return &type metadata for PKStrokePath.InterpolatedSlice;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PKStrokePath.InterpolatedSlice.Stride(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PKStrokePath.InterpolatedSlice.Stride(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PKStrokePath.InterpolatedSlice.Stride(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for PKStrokePath.InterpolatedSlice.Stride(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PKStrokePath.InterpolatedSlice.Stride()
{
  return &type metadata for PKStrokePath.InterpolatedSlice.Stride;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(void *a1)
{
  uint64_t v2 = (uint64_t)objc_msgSend(a1, sel_count);
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_count);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = (uint64_t)objc_msgSend(a1, sel_count);
    if ((v2 & 0x8000000000000000) == 0 && result >= v2)
    {
      if (v2)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKStrokePoint>);
        int v4 = (void *)swift_allocObject();
        int64_t v5 = _swift_stdlib_malloc_size(v4);
        uint64_t v6 = v5 - 32;
        if (v5 < 32) {
          uint64_t v6 = v5 - 25;
        }
        v4[2] = v2;
        _OWORD v4[3] = 2 * (v6 >> 3);
        uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)(v8, (uint64_t)(v4 + 4), v2, a1);

        if (v7 == v2) {
          return (uint64_t)v4;
        }
        __break(1u);
      }
      return MEMORY[0x1E4FBC860];
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = (id *)v3;
  if (!a2)
  {
    a3 = 0;
    long long v12 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v3;
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
    return a3;
  }
  double v6 = *(double *)(v3 + 32);
  double v5 = *(double *)(v3 + 40);
  uint64_t v7 = *(void *)(v3 + 24);
  int v8 = *(unsigned __int8 *)(v3 + 16);
  id v10 = *(id *)v3;
  double v9 = *(double *)(v3 + 8);
  if (!a3)
  {
LABEL_29:
    *(void *)a1 = v10;
    *(double *)(a1 + 8) = v9;
    *(unsigned char *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v7;
    *(double *)(a1 + 32) = v6;
    *(double *)(a1 + 40) = v5;
    return a3;
  }
  if (a3 < 0) {
    goto LABEL_33;
  }
  uint64_t v29 = a1;
  double v30 = *(double *)(v3 + 8);
  if (v6 < v5)
  {
    uint64_t v11 = 0;
LABEL_27:
    *(void *)uint64_t v29 = v10;
    *(double *)(v29 + 8) = v30;
    *(unsigned char *)(v29 + 16) = v8;
    *(void *)(v29 + 24) = v7;
    *(double *)(v29 + 32) = v6;
    a3 = v11;
    *(double *)(v29 + 40) = v5;
    return a3;
  }
  uint64_t v13 = a2;
  uint64_t v11 = 0;
  double v14 = v9;
  uint64_t v26 = a3;
  uint64_t v32 = a3 - 1;
  uint64_t v15 = &selRef_initWithProofreadingItem_inDrawing_;
  int v31 = v8;
  long long v28 = v4;
  while (1)
  {
    id v16 = v10;
    id v17 = objc_msgSend(v16, v15[197], v5);
    id v18 = v17;
    if (v6 <= v5 + 0.001)
    {
      if (!v17) {
        goto LABEL_34;
      }
      outlined release of PKStrokePath.InterpolatedSlice(v4);
      double v5 = v5 + 1.0;
      goto LABEL_25;
    }
    if (!v17) {
      goto LABEL_34;
    }

    if (!v31)
    {
      objc_msgSend(v16, sel_parametricValue_offsetByDistance_, v5, v14);
      double v5 = v20;
      LOBYTE(v8) = 0;
      goto LABEL_25;
    }
    if (v31 == 1)
    {
      objc_msgSend(v16, sel_parametricValue_offsetByTime_, v5, v14);
      double v5 = v19;
      LOBYTE(v8) = 1;
      goto LABEL_25;
    }
    id v21 = v16;
    int64_t v22 = (int64_t)objc_msgSend(v21, sel_count);
    if (((unint64_t)objc_msgSend(v21, sel_count) & 0x8000000000000000) != 0) {
      break;
    }
    long long v23 = v10;
    id v24 = objc_msgSend(v21, (SEL)&selRef_entryIndex);

    if (v22 < 0 || (uint64_t)v24 < v22) {
      goto LABEL_32;
    }
    if (v5 + v14 >= (double)(v22 - 1)) {
      double v5 = (double)(v22 - 1);
    }
    else {
      double v5 = v5 + v14;
    }
    LOBYTE(v8) = 2;
    if (v5 < 0.0) {
      double v5 = 0.0;
    }
    id v10 = v23;
    uint64_t v15 = &selRef_initWithProofreadingItem_inDrawing_;
    uint64_t v13 = a2;
    int v4 = v28;
LABEL_25:
    *(void *)(v13 + 8 * v11) = v18;
    if (v32 == v11)
    {
      a3 = v26;
      a1 = v29;
      double v9 = v30;
      LOBYTE(v8) = v31;
      goto LABEL_29;
    }
    ++v11;
    if (v6 < v5) {
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, id a4)
{
  if (!a2)
  {
    uint64_t v8 = 0;
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_11:
    uint64_t v8 = a3;
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = 0;
    if (objc_msgSend(a4, sel_count))
    {
      do
      {
        id v9 = objc_msgSend(a4, sel_objectAtIndexedSubscript_, v8);
        if (!v9) {
          goto LABEL_15;
        }
        id v10 = v9;
        if (v8 >= (uint64_t)objc_msgSend(a4, sel_count))
        {
          __break(1u);
          goto LABEL_14;
        }
        *(void *)(a2 + 8 * v8) = v10;
        if (a3 - 1 == v8) {
          goto LABEL_11;
        }
      }
      while ((id)++v8 != objc_msgSend(a4, sel_count));
    }
LABEL_12:
    *a1 = a4;
    a1[1] = v8;
    return v8;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ResourceBundleClass.__deallocating_deinit()
{
  return MEMORY[0x1F4186488](v0, 16, 7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

void sub_1C454A21C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C454AA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }

  _Unwind_Resume(a1);
}

void sub_1C454ABD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C454AC4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C454AF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a22;
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&a25);

  _Unwind_Resume(a1);
}

void sub_1C454B060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C454B98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23)
{
  if (__p) {
    operator delete(__p);
  }
  a23 = &a12;
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);

  _Unwind_Resume(a1);
}

void sub_1C454BEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void **a15)
{
  a15 = (void **)(v21 - 120);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&a15);

  _Unwind_Resume(a1);
}

void ClipperLib::Clipper::~Clipper(ClipperLib::Clipper *this)
{
  uint64_t v2 = off_1F1FAF880;
  *(void *)((char *)*(v3 - 3) + (void)this) = v2;
  std::__list_imp<long long>::clear((void *)this + 11);
  int v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
  double v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::Clipper *)((char *)this + 144));
}

{
  ClipperLib::ClipperBase *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &off_1F1FB03A8;
  uint64_t v2 = (ClipperLib::Clipper *)((char *)this + 144);
  *((void *)this + 18) = off_1F1FB03F0;
  std::__list_imp<long long>::clear((void *)this + 11);
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
  ClipperLib::ClipperBase::~ClipperBase(v2);

  JUMPOUT(0x1C8783F10);
}

void sub_1C454C130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void std::vector<CGPoint>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E64C4DE8, MEMORY[0x1E4FBA1C8]);
}

void sub_1C454C1C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  id v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void *std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<ClipperLib::IntPoint>::__init_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(v3, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1C454C2CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  id v17 = a1 + 2;
  if (v9) {
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(v7, v9);
  }
  else {
    id v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  id v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<ClipperLib::IntPoint>::__init_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(v11, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  v15 += 24;
  std::vector<std::vector<ClipperLib::IntPoint>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1C454C3E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<ClipperLib::IntPoint>::__init_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    double v6 = result;
    uint64_t result = std::vector<ClipperLib::IntPoint>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C454C458(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<ClipperLib::IntPoint>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ClipperLib::IntPoint>>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ClipperLib::IntPoint>>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

void *std::__list_imp<long long>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        unint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sub_1C454C818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C454CA80(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1C454CB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C454CBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C454CC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_1C454CD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C454CD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C454CFB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C454D224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  uint64_t v21 = v17;

  _Unwind_Resume(a1);
}

void sub_1C454D510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C454D6A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C454D898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C454DA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C454DCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C454DE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C454E0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C454E35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_1C454E5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C454E808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C454EB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C454F02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C454F31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C454F490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C454F620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C454F8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C454FA00(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C454FC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C455007C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45502EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t drawing::Color::Color(uint64_t this)
{
  *(void *)this = &unk_1F1FB07B0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_1F1FB07B0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void drawing::Color::~Color(drawing::Color *this)
{
  PB::Base::~Base(this);

  JUMPOUT(0x1C8783F10);
}

float drawing::Color::Color(drawing::Color *this, const drawing::Color *a2)
{
  *(void *)this = &unk_1F1FB07B0;
  *((_DWORD *)this + 6) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if ((v2 & 8) != 0)
  {
    float result = *((float *)a2 + 5);
    char v3 = 8;
    *((unsigned char *)this + 24) = 8;
    *((float *)this + 5) = result;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 4);
    v3 |= 4u;
    *((unsigned char *)this + 24) = v3;
    *((float *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 24) = v3 | 1;
    *((float *)this + 2) = result;
    return result;
  }
  float result = *((float *)a2 + 3);
  v3 |= 2u;
  *((unsigned char *)this + 24) = v3;
  *((float *)this + 3) = result;
  if (*((unsigned char *)a2 + 24)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t drawing::Color::operator=(uint64_t a1, const drawing::Color *a2)
{
  if ((const drawing::Color *)a1 != a2)
  {
    drawing::Color::Color((drawing::Color *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float drawing::swap(drawing *this, drawing::Color *a2, drawing::Color *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  int v4 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  int v6 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
  float result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float drawing::Color::Color(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1FB07B0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_1F1FB07B0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t drawing::Color::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = &unk_1F1FB07B0;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t drawing::Color::formatText(drawing::Color *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "alpha", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "blue", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "green", *((float *)this + 4));
  if ((*((unsigned char *)this + 24) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "red", *((float *)this + 5));
LABEL_6:

  return MEMORY[0x1F4147498](a2);
}

uint64_t drawing::Color::readFrom(drawing::Color *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_37;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 24) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t drawing::Color::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 20));
    char v4 = *(unsigned char *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 12));
      if ((*(unsigned char *)(v3 + 24) & 1) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 8);

  return PB::Writer::write(a2, v5);
}

BOOL drawing::Color::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 24) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if (*(unsigned char *)(a1 + 24)) {
    return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  }
  return v2;
}

uint64_t drawing::Color::hash_value(drawing::Color *this)
{
  if ((*((unsigned char *)this + 24) & 8) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 24) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  float v8 = *((float *)this + 5);
  uint64_t v1 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 24) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 24) & 2) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 3);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if (*((unsigned char *)this + 24)) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 2);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ v1 ^ v5 ^ v7;
}

void sub_1C4551C44(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

Class __getBETextDocumentRequestClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1EB3C5DD0)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    _OWORD v4[3] = __BrowserEngineKitLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E64C5498;
    uint64_t v6 = 0;
    qword_1EB3C5DD0 = _sl_dlopen();
    float v2 = (void *)v4[0];
    if (!qword_1EB3C5DD0)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("BETextDocumentRequest");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    float v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1EB3C5DC8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __BrowserEngineKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB3C5DD0 = result;
  return result;
}

void sub_1C4552664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45527A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PKSelectionView;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4552920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4552A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4552B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4552BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4552C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4552CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4553118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C455345C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4553758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C45538A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4553AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  char v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1C4553BF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4553C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4553CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4553D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4553DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4553E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4553EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4553F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4553FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C455406C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45540EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C455416C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45543B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4554620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C455484C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45549B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4554BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4554C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4554CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4554E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4555190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45556FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4555858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4555A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4555C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4555D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4555E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C455620C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45562D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4556348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45564A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45568E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4556A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4556AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4556C48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4556D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4556DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4556FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C455717C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v17 = v15;

  _Unwind_Resume(a1);
}

void sub_1C45572E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v17 = v15;

  _Unwind_Resume(a1);
}

void sub_1C45573D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45574A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45576A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C45577CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45578B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45579A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4557A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1C4557B7C(_Unwind_Exception *a1)
{
  float v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4558A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4558D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4558DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

void sub_1C4558E7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1C455904C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45591F4(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v5 - 96));

  _Unwind_Resume(a1);
}

void sub_1C45595CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4559710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4559A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4559ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4559F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C455A148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C455A298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C455A44C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C455A8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C455AB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C455AEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_1C455B0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C455B27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C455D5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C455EFAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C455F200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)PKTiledView;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C455F2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C455F4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C455F5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1C455F6FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C455F86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C455F924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C455F9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C455FAAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C455FC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C455FD00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C455FDD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C455FE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4560378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Unwind_Resume(a1);
}

void sub_1C4560508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45605C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4560648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4560794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4560828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4560A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4560B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4560C04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4560CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4560D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4560E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1C456102C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456111C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4561220(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C45612C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45613B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4561414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45614D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45615D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4561674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4561778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45618EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4561B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4561BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4561D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a18, 8);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  float v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4561F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456204C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  char v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1C45620FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4562168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45622DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4562514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45628F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4562B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4562CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4562F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456308C(_Unwind_Exception *a1)
{
  float v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C45631C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4563298(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C456335C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45634CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4563628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45637A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  PKTransformAppliedStrokeData::~PKTransformAppliedStrokeData((id *)va);
  _Unwind_Resume(a1);
}

void sub_1C45638FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PKTransformAppliedStrokeData::~PKTransformAppliedStrokeData(id *this)
{
}

void sub_1C4563D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C45641AC(_Unwind_Exception *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, ...)
{
  va_start(va, a15);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4564358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45643FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45645A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4564638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4564710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  PKTransformAppliedStrokeData::~PKTransformAppliedStrokeData((id *)va);
  _Unwind_Resume(a1);
}

void sub_1C4564874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45649B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4564CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1C4564D38()
{
}

void sub_1C456563C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20)
{
  _Block_object_dispose((const void *)(v24 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1C4565814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4565A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4565F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4566800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x210], 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__526(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__527(uint64_t a1)
{
}

void sub_1C4566A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4566BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4566E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4566F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45670C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C456725C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45673F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C456763C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45676F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4567894(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1C45679AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4567AC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4567D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4567ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4568090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45681AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  BOOL v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1C4568318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45684A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4568668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45687B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4568900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456899C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4568A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4568EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  _Unwind_Resume(a1);
}

void sub_1C4569150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45691D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C456923C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456937C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4569508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4569608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1C45696C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45697A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4569B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4569F88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456A0AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456A19C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456A25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C456A3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1C456A4FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456A760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C456A884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456A904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C456AB4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456AC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C456B744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21)
{
  _Block_object_dispose(&STACK[0x310], 8);
  _Block_object_dispose(&STACK[0x340], 8);
  objc_destroyWeak((id *)&STACK[0x430]);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__554(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_1C456BE64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456C72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C456CF10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456D290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456D39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C456D6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C456DA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1C456DCB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456DF9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456E1B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456E470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456E75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C456EE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  STACK[0x228] = (unint64_t)&a60;
  std::vector<AttachmentTileInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x228]);

  _Unwind_Resume(a1);
}

void sub_1C456F424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C456FBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C45701B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C45702F4()
{
}

void sub_1C4570300()
{
}

void sub_1C4570440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4570814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45709B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4570BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4570D00(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C4570DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4570ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4570F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4570FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4571050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45710C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C457116C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45712D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C457145C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4571520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4571664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45716D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C457189C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4571938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45719F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4571B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4571C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4571E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4571FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4572030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C457243C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4572600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45728B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45729CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4573240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  _Unwind_Resume(a1);
}

void sub_1C45735EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C457376C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4573834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C457392C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4573A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4573AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4573C44(_Unwind_Exception *a1)
{
  if ((v2 & 1) == 0) {
  _Unwind_Resume(a1);
  }
}

void sub_1C4573DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4573EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4573F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4574090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45741DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C457454C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C45746FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45748F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4575484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,id location)
{
  _Unwind_Resume(a1);
}

void sub_1C4575670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4575D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4576388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45764FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4576588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1C4576690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4576724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45767E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45769EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4576DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, id a18)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a18);

  _Unwind_Resume(a1);
}

void sub_1C4577048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4577150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1C45772E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4577388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4577408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL29PKAllowVisionOSGestureDrawingv_block_invoke()
{
  id v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  byte_1EA3C37E1 = [v0 BOOLForKey:@"internalSettings.drawing.allowVisionOSGestureDrawing"];
}

void sub_1C4577A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(uint64_t a1, uint64_t a2)
{
  float v4 = *(void **)a1;
  *(void *)a1 = 0;
  __n128 v10 = *(__n128 *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v5 = *(void **)a2;
  *(void *)a2 = 0;
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;

  long long v7 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v7;
  float v8 = *(void **)a2;
  *(void *)a2 = v4;

  __n128 result = v10;
  *(__n128 *)(a2 + 8) = v10;
  *(void *)(a2 + 24) = v11;
  return result;
}

double std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  double result = *(double *)(a2 + 24);
  double v7 = *(double *)(a3 + 24);
  if (result >= *(double *)(a1 + 24))
  {
    if (v7 >= result) {
      return result;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(a2, a3);
    double result = *(double *)(a2 + 24);
    if (result >= *(double *)(v5 + 24)) {
      return result;
    }
    a1 = v5;
    uint64_t v8 = a2;
  }
  else
  {
    if (v7 >= result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(a1, a2);
      double result = *(double *)(a3 + 24);
      if (result >= *(double *)(a2 + 24)) {
        return result;
      }
      a1 = a2;
    }
    uint64_t v8 = a3;
  }

  *(void *)&double result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(a1, v8).n128_u64[0];
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(double *a1, double *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) < a1[3])
      {
        uint64_t v6 = (uint64_t)(a2 - 4);
        uint64_t v7 = (uint64_t)a1;
        goto LABEL_4;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>((uint64_t)a1, (uint64_t)(a1 + 4), (uint64_t)(a2 - 4));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>((uint64_t)a1, (uint64_t)(a1 + 4), (uint64_t)(a1 + 8), (uint64_t)(a2 - 4));
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>((uint64_t)a1, (uint64_t)(a1 + 4), (uint64_t)(a1 + 8), (uint64_t)(a1 + 12));
      if (*(a2 - 1) < a1[15])
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>((uint64_t)(a1 + 12), (uint64_t)(a2 - 4));
        if (a1[15] < a1[11])
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>((uint64_t)(a1 + 8), (uint64_t)(a1 + 12));
          if (a1[11] < a1[7])
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>((uint64_t)(a1 + 4), (uint64_t)(a1 + 8));
            if (a1[7] < a1[3])
            {
              uint64_t v7 = (uint64_t)a1;
              uint64_t v6 = (uint64_t)(a1 + 4);
LABEL_4:
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>((uint64_t)a1, (uint64_t)(a1 + 4), (uint64_t)(a1 + 8));
      char v9 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    double v12 = v9[3];
    if (v12 < v8[3])
    {
      uint64_t v13 = *(void *)v9;
      *char v9 = 0.0;
      long long v20 = *(_OWORD *)(v9 + 1);
      uint64_t v14 = v10;
      while (1)
      {
        char v15 = (char *)a1 + v14;
        uint64_t v16 = *(void *)((char *)a1 + v14 + 64);
        *((void *)v15 + 8) = 0;
        unint64_t v17 = *(void **)((char *)a1 + v14 + 96);
        *((void *)v15 + 12) = v16;

        *(_OWORD *)(v15 + 104) = *(_OWORD *)(v15 + 72);
        *((void *)v15 + 15) = *((void *)v15 + 11);
        if (v14 == -64) {
          break;
        }
        v14 -= 32;
        if (v12 >= *((double *)v15 + 7))
        {
          uint64_t v18 = (uint64_t)a1 + v14 + 96;
          goto LABEL_14;
        }
      }
      uint64_t v18 = (uint64_t)a1;
LABEL_14:
      double v19 = *(void **)v18;
      *(void *)uint64_t v18 = v13;

      *(_OWORD *)(v15 + 72) = v20;
      *(double *)(v18 + 24) = v12;
      if (++v11 == 8) {
        return v9 + 4 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 32;
    v9 += 4;
    if (v9 == a2) {
      return 1;
    }
  }
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(a1, a2, a3);
  double result = *(double *)(a4 + 24);
  if (result < *(double *)(a3 + 24))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(a3, a4);
    double result = *(double *)(a3 + 24);
    if (result < *(double *)(a2 + 24))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(a2, a3);
      double result = *(double *)(a2 + 24);
      if (result < *(double *)(a1 + 24))
      {
        *(void *)&double result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(a1, a2).n128_u64[0];
      }
    }
  }
  return result;
}

void sub_1C457B470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_1C457E720(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C4587098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C45879FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4587A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4587B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4587B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4587CB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4587EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  uint64_t v21 = va_arg(va2, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Block_object_dispose((const void *)(v10 - 96), 8);
  objc_sync_exit(v9);

  _Unwind_Resume(a1);
}

void sub_1C4588038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4588144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458832C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458847C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4588618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45887A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4588914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45889A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4588AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4588DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458911C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458934C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4589444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _PKVectorSafeGet(void *a1, int a2)
{
  unint64_t v2 = ((uint64_t)(a1[1] - *a1) >> 3) - 1;
  if (v2 >= a2) {
    unint64_t v2 = a2;
  }
  return *(double *)(*a1 + 8 * v2);
}

void _PKTriangularWindow(int a1, uint64_t a2)
{
  if (a1 >= 1)
  {
    int v4 = 0;
    double v5 = (double)a1;
    double v6 = (float)(2.0 / (float)a1);
    uint64_t v7 = (void *)(a2 + 16);
    uint64_t v8 = *(double **)(a2 + 8);
    do
    {
      int v9 = 2 * v4 - a1;
      if (v9 < 0) {
        int v9 = a1 - 2 * v4;
      }
      double v10 = (double)(a1 - v9) / v5 * v6;
      if ((unint64_t)v8 >= *v7)
      {
        uint64_t v12 = *(double **)a2;
        uint64_t v13 = ((uint64_t)v8 - *(void *)a2) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = *v7 - (void)v12;
        if (v15 >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v7, v16);
          uint64_t v12 = *(double **)a2;
          uint64_t v8 = *(double **)(a2 + 8);
        }
        else
        {
          uint64_t v17 = 0;
        }
        uint64_t v18 = (double *)&v17[8 * v13];
        *uint64_t v18 = v10;
        int v11 = v18 + 1;
        while (v8 != v12)
        {
          uint64_t v19 = *((void *)v8-- - 1);
          *((void *)v18-- - 1) = v19;
        }
        *(void *)a2 = v18;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v17[8 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *uint64_t v8 = v10;
        int v11 = v8 + 1;
      }
      *(void *)(a2 + 8) = v11;
      ++v4;
      uint64_t v8 = v11;
    }
    while (v4 != a1);
  }
}

void _PKTrapezoidWindow(int a1, int a2, uint64_t a3)
{
  int v3 = a1 - 1;
  if (a1 >= 1)
  {
    if ((a2 & ~(a2 >> 31)) < v3) {
      int v3 = a2 & ~(a2 >> 31);
    }
    int v5 = (((_BYTE)a1 - (_BYTE)v3) & 1) + v3;
    int v7 = a1 - v5;
    if (a1 >= v5) {
      int v8 = a1 - v5;
    }
    else {
      int v8 = v7 + 1;
    }
    int v9 = v8 >> 1;
    float v6 = 2.0 / (double)(v5 + a1);
    double v10 = v6;
    if (v7 > 1)
    {
      int v11 = 0;
      uint64_t v12 = (void *)(a3 + 16);
      uint64_t v13 = *(double **)(a3 + 8);
      do
      {
        double v14 = (double)v11 / (double)v9 * v10;
        if ((unint64_t)v13 >= *v12)
        {
          unint64_t v16 = *(double **)a3;
          uint64_t v17 = ((uint64_t)v13 - *(void *)a3) >> 3;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61) {
LABEL_65:
          }
            std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
          uint64_t v19 = *v12 - (void)v16;
          if (v19 >> 2 > v18) {
            unint64_t v18 = v19 >> 2;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a3 + 16, v20);
            unint64_t v16 = *(double **)a3;
            uint64_t v13 = *(double **)(a3 + 8);
          }
          else
          {
            uint64_t v21 = 0;
          }
          int64_t v22 = (double *)&v21[8 * v17];
          *int64_t v22 = v14;
          uint64_t v15 = v22 + 1;
          while (v13 != v16)
          {
            uint64_t v23 = *((void *)v13-- - 1);
            *((void *)v22-- - 1) = v23;
          }
          *(void *)a3 = v22;
          *(void *)(a3 + 8) = v15;
          *(void *)(a3 + 16) = &v21[8 * v20];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *uint64_t v13 = v14;
          uint64_t v15 = v13 + 1;
        }
        *(void *)(a3 + 8) = v15;
        ++v11;
        uint64_t v13 = v15;
      }
      while (v11 != v9);
    }
    if (v5 >= 1)
    {
      int v24 = 0;
      long long v25 = (void *)(a3 + 16);
      uint64_t v26 = *(double **)(a3 + 8);
      do
      {
        if ((unint64_t)v26 >= *v25)
        {
          uint64_t v28 = *(double **)a3;
          uint64_t v29 = ((uint64_t)v26 - *(void *)a3) >> 3;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61) {
            goto LABEL_65;
          }
          uint64_t v31 = *v25 - (void)v28;
          if (v31 >> 2 > v30) {
            unint64_t v30 = v31 >> 2;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32)
          {
            long long v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a3 + 16, v32);
            uint64_t v28 = *(double **)a3;
            uint64_t v26 = *(double **)(a3 + 8);
          }
          else
          {
            long long v33 = 0;
          }
          long long v34 = (double *)&v33[8 * v29];
          *long long v34 = v10;
          uint64_t v27 = v34 + 1;
          while (v26 != v28)
          {
            uint64_t v35 = *((void *)v26-- - 1);
            *((void *)v34-- - 1) = v35;
          }
          *(void *)a3 = v34;
          *(void *)(a3 + 8) = v27;
          *(void *)(a3 + 16) = &v33[8 * v32];
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          double *v26 = v10;
          uint64_t v27 = v26 + 1;
        }
        *(void *)(a3 + 8) = v27;
        ++v24;
        uint64_t v26 = v27;
      }
      while (v24 != v5);
    }
    if (v7 > 1)
    {
      int v36 = 0;
      id v37 = (void *)(a3 + 16);
      id v38 = *(double **)(a3 + 8);
      do
      {
        double v39 = (1.0 - (double)v36 / (double)v9) * v10;
        if ((unint64_t)v38 >= *v37)
        {
          uint64_t v41 = *(double **)a3;
          uint64_t v42 = ((uint64_t)v38 - *(void *)a3) >> 3;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61) {
            goto LABEL_65;
          }
          uint64_t v44 = *v37 - (void)v41;
          if (v44 >> 2 > v43) {
            unint64_t v43 = v44 >> 2;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v43;
          }
          if (v45)
          {
            __int16 v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a3 + 16, v45);
            uint64_t v41 = *(double **)a3;
            id v38 = *(double **)(a3 + 8);
          }
          else
          {
            __int16 v46 = 0;
          }
          uint64_t v47 = (double *)&v46[8 * v42];
          *uint64_t v47 = v39;
          id v40 = v47 + 1;
          while (v38 != v41)
          {
            uint64_t v48 = *((void *)v38-- - 1);
            *((void *)v47-- - 1) = v48;
          }
          *(void *)a3 = v47;
          *(void *)(a3 + 8) = v40;
          *(void *)(a3 + 16) = &v46[8 * v45];
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *id v38 = v39;
          id v40 = v38 + 1;
        }
        *(void *)(a3 + 8) = v40;
        ++v36;
        id v38 = v40;
      }
      while (v36 != v9);
    }
  }
}

void _PKConvolve(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(void *)(a1 + 8) != *(void *)a1)
  {
    unint64_t v6 = 0;
    uint64_t v7 = a3 + 16;
    do
    {
      uint64_t v8 = a2[1] - *a2;
      if (v8)
      {
        unint64_t v9 = 0;
        unint64_t v10 = v8 >> 3;
        double v11 = 0.0;
        do
        {
          long long v25 = 0;
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v25, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
          if (v9 >= (uint64_t)(a2[1] - *a2) >> 3) {
            std::vector<double>::__throw_out_of_range[abi:ne180100]();
          }
          unint64_t v12 = v26 - v25 - 1;
          if ((v10 & 0x80000000) == 0) {
            int v13 = v10;
          }
          else {
            int v13 = v10 + 1;
          }
          if (v12 >= (int)v6 + (int)v9 - (v13 >> 1) + 1) {
            unint64_t v12 = (int)v6 + (int)v9 - (v13 >> 1) + 1;
          }
          double v11 = v11 + v25[v12] * *(double *)(*a2 + 8 * v9);
          uint64_t v26 = v25;
          operator delete(v25);
          ++v9;
          unint64_t v10 = (uint64_t)(a2[1] - *a2) >> 3;
        }
        while (v10 > v9);
      }
      else
      {
        double v11 = 0.0;
      }
      uint64_t v15 = *(double **)(a3 + 8);
      unint64_t v14 = *(void *)(a3 + 16);
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = *(double **)a3;
        uint64_t v18 = ((uint64_t)v15 - *(void *)a3) >> 3;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61) {
          std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v14 - (void)v17;
        if (v20 >> 2 > v19) {
          unint64_t v19 = v20 >> 2;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          int64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v21);
          uint64_t v17 = *(double **)a3;
          uint64_t v15 = *(double **)(a3 + 8);
        }
        else
        {
          int64_t v22 = 0;
        }
        uint64_t v23 = (double *)&v22[8 * v18];
        *uint64_t v23 = v11;
        unint64_t v16 = v23 + 1;
        while (v15 != v17)
        {
          uint64_t v24 = *((void *)v15-- - 1);
          *((void *)v23-- - 1) = v24;
        }
        *(void *)a3 = v23;
        *(void *)(a3 + 8) = v16;
        *(void *)(a3 + 16) = &v22[8 * v21];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *uint64_t v15 = v11;
        unint64_t v16 = v15 + 1;
      }
      *(void *)(a3 + 8) = v16;
      ++v6;
    }
    while (v6 < (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  }
}

void sub_1C4589F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _PKCurvature(uint64_t *a1, uint64_t a2)
{
  __p = 0;
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  uint64_t v2 = *a1;
  if (a1[1] != *a1)
  {
    int v5 = 0;
    unint64_t v6 = 0;
    do
    {
      *(_OWORD *)&v40[16] = 0u;
      *(void *)id v40 = 0;
      *(_OWORD *)&v40[8] = *(_OWORD *)(v2 + 16 * v6);
      if (v5 >= (_OWORD *)v43)
      {
        uint64_t v7 = __p;
        uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * (((char *)v5 - (unsigned char *)__p) >> 3);
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) > 0x2E8BA2E8BA2E8BALL) {
          std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
        }
        if (0x5D1745D1745D1746 * ((v43 - (unsigned char *)__p) >> 3) > v9) {
          unint64_t v9 = 0x5D1745D1745D1746 * ((v43 - (unsigned char *)__p) >> 3);
        }
        if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v43 - (unsigned char *)__p) >> 3)) >= 0x1745D1745D1745DLL) {
          unint64_t v10 = 0x2E8BA2E8BA2E8BALL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10)
        {
          double v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)&v43, v10);
          uint64_t v7 = __p;
          int v5 = v42;
        }
        else
        {
          double v11 = 0;
        }
        unint64_t v12 = &v11[88 * v8];
        *((_OWORD *)v12 + 2) = 0u;
        *((_OWORD *)v12 + 3) = 0u;
        *((_OWORD *)v12 + 4) = 0u;
        *((void *)v12 + 10) = 0;
        *(_OWORD *)unint64_t v12 = *(_OWORD *)v40;
        *((_OWORD *)v12 + 1) = *(_OWORD *)&v40[16];
        if (v5 == v7)
        {
          uint64_t v18 = &v11[88 * v8];
        }
        else
        {
          int v13 = &v11[88 * v8];
          do
          {
            long long v14 = *(_OWORD *)((char *)v5 - 88);
            *(_OWORD *)(v13 - 72) = *(_OWORD *)((char *)v5 - 72);
            *(_OWORD *)(v13 - 88) = v14;
            long long v15 = *(_OWORD *)((char *)v5 - 56);
            long long v16 = *(_OWORD *)((char *)v5 - 40);
            long long v17 = *(_OWORD *)((char *)v5 - 24);
            uint64_t v18 = v13 - 88;
            *((void *)v13 - 1) = *((void *)v5 - 1);
            *(_OWORD *)(v13 - 24) = v17;
            *(_OWORD *)(v13 - 40) = v16;
            *(_OWORD *)(v13 - 56) = v15;
            int v5 = (_OWORD *)((char *)v5 - 88);
            v13 -= 88;
          }
          while (v5 != v7);
        }
        int v5 = v12 + 88;
        __p = v18;
        uint64_t v42 = v12 + 88;
        unint64_t v43 = &v11[88 * v10];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *int v5 = *(_OWORD *)v40;
        v5[1] = *(_OWORD *)&v40[16];
        *((void *)v5 + 10) = 0;
        v5[3] = 0u;
        v5[4] = 0u;
        v5[2] = 0u;
        int v5 = (_OWORD *)((char *)v5 + 88);
      }
      uint64_t v42 = v5;
      ++v6;
      uint64_t v2 = *a1;
      uint64_t v19 = a1[1];
    }
    while (v6 < (v19 - *a1) >> 4);
    if (v19 != v2)
    {
      unint64_t v20 = 0;
      do
      {
        double v21 = splinePoint(&__p, v20, (double (*)(void, double))b2, 0.0);
        double v23 = v22;
        double v24 = splinePoint(&__p, v20, (double (*)(void, double))b3, 0.0);
        double v26 = v25;
        double v27 = pow(v23 * v23 + v21 * v21, 1.5);
        if (v27 <= 0.001) {
          double v28 = 100.0;
        }
        else {
          double v28 = fabs((v21 * v26 - v23 * v24) / v27);
        }
        unint64_t v30 = *(double **)(a2 + 8);
        unint64_t v29 = *(void *)(a2 + 16);
        if ((unint64_t)v30 >= v29)
        {
          unint64_t v32 = *(double **)a2;
          uint64_t v33 = ((uint64_t)v30 - *(void *)a2) >> 3;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61) {
            std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v35 = v29 - (void)v32;
          if (v35 >> 2 > v34) {
            unint64_t v34 = v35 >> 2;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            id v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a2 + 16, v36);
            unint64_t v32 = *(double **)a2;
            unint64_t v30 = *(double **)(a2 + 8);
          }
          else
          {
            id v37 = 0;
          }
          id v38 = (double *)&v37[8 * v33];
          *id v38 = v28;
          uint64_t v31 = v38 + 1;
          while (v30 != v32)
          {
            uint64_t v39 = *((void *)v30-- - 1);
            *((void *)v38-- - 1) = v39;
          }
          *(void *)a2 = v38;
          *(void *)(a2 + 8) = v31;
          *(void *)(a2 + 16) = &v37[8 * v36];
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          double *v30 = v28;
          uint64_t v31 = v30 + 1;
        }
        *(void *)(a2 + 8) = v31;
        ++v20;
      }
      while (v20 < (a1[1] - *a1) >> 4);
    }
    if (__p)
    {
      uint64_t v42 = __p;
      operator delete(__p);
    }
  }
}

void sub_1C458A2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PKSmoothedCurvature(uint64_t a1, uint64_t a2)
{
  long long v15 = 0;
  long long v16 = 0;
  uint64_t v17 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  unint64_t v12 = 0;
  std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(&v12, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  _PKCurvature((uint64_t *)&v12, (uint64_t)&v15);
  if (v12)
  {
    int v13 = v12;
    operator delete(v12);
  }
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  _PKTrapezoidWindow(15, 5, (uint64_t)&v9);
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v6, v15, (uint64_t)v16, (v16 - (unsigned char *)v15) >> 3);
  __p = 0;
  int v4 = 0;
  uint64_t v5 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&__p, v9, (uint64_t)v10, (v10 - (unsigned char *)v9) >> 3);
  _PKConvolve((uint64_t)&v6, &__p, a2);
  if (__p)
  {
    int v4 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  if (v9)
  {
    unint64_t v10 = v9;
    operator delete(v9);
  }
  if (v15)
  {
    long long v16 = v15;
    operator delete(v15);
  }
}

void sub_1C458A410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  uint64_t v19 = *(void **)(v17 - 40);
  if (v19)
  {
    *(void *)(v17 - 32) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void PKIntegrate(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v5 = 0;
    unint64_t v6 = (void *)(a2 + 16);
    uint64_t v7 = *(double **)(a2 + 8);
    double v8 = 0.0;
    do
    {
      double v8 = v8 + *(double *)(v2 + 8 * v5);
      if ((unint64_t)v7 >= *v6)
      {
        unint64_t v10 = *(double **)a2;
        uint64_t v11 = ((uint64_t)v7 - *(void *)a2) >> 3;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = *v6 - (void)v10;
        if (v13 >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v6, v14);
          unint64_t v10 = *(double **)a2;
          uint64_t v7 = *(double **)(a2 + 8);
        }
        else
        {
          long long v15 = 0;
        }
        long long v16 = (double *)&v15[8 * v11];
        *long long v16 = v8;
        unint64_t v9 = v16 + 1;
        while (v7 != v10)
        {
          uint64_t v17 = *((void *)v7-- - 1);
          *((void *)v16-- - 1) = v17;
        }
        *(void *)a2 = v16;
        *(void *)(a2 + 8) = v9;
        *(void *)(a2 + 16) = &v15[8 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *uint64_t v7 = v8;
        unint64_t v9 = v7 + 1;
      }
      *(void *)(a2 + 8) = v9;
      ++v5;
      uint64_t v2 = *a1;
      uint64_t v7 = v9;
    }
    while (v5 < (a1[1] - *a1) >> 3);
  }
}

double PKInterpolatedValue(uint64_t *a1, double a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 3;
  double v4 = (double)(unint64_t)v3 * a2;
  if (v4 < 0.0) {
    return *(double *)v2;
  }
  unint64_t v6 = v3 - 1;
  if (v4 > (double)v6) {
    return *(double *)(v2 + 8 * v6);
  }
  signed int v7 = vcvtmd_s64_f64(v4);
  int v8 = vcvtpd_s64_f64(v4);
  if (v7 == v8) {
    return *(double *)(v2 + 8 * v7);
  }
  else {
    return (1.0 - ((double)v8 - v4)) * *(double *)(v2 + 8 * v8) + ((double)v8 - v4) * *(double *)(v2 + 8 * v7);
  }
}

void PKRunningStat::PKRunningStat(PKRunningStat *this, BOOL a2)
{
  this->isAngle = a2;
  this->limit = 0.0;
  this->lock._os_unfair_lock_opaque = 0;
  this->numValues = 0;
  this->numValuesOverLimit = 0;
}

{
  this->isAngle = a2;
  this->limit = 0.0;
  this->lock._os_unfair_lock_opaque = 0;
  this->numValues = 0;
  this->numValuesOverLimit = 0;
}

void PKRunningStat::clear(PKRunningStat *this, double a2)
{
  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  this->numValues = 0;
  this->numValuesOverLimit = 0;
  this->limit = a2;

  os_unfair_lock_unlock(p_lock);
}

void PKRunningStat::push(PKRunningStat *this, long double a2)
{
  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  int64_t numValues = this->numValues;
  uint64_t v6 = numValues + 1;
  this->int64_t numValues = numValues + 1;
  if (this->limit < a2) {
    ++this->numValuesOverLimit;
  }
  if (numValues)
  {
    double minValue = this->minValue;
    double maxValue = this->maxValue;
    if (minValue > a2) {
      double minValue = a2;
    }
    if (maxValue < a2) {
      double maxValue = a2;
    }
    this->double minValue = minValue;
    this->double maxValue = maxValue;
    long double oldM = this->oldM;
    if (this->isAngle)
    {
      DKDMixAnglesInRadians(this->oldM, a2, 1.0 / (double)v6);
      double v11 = v10;
      double oldS = this->oldS;
      DKDDiffAngleInRadians(a2, oldM);
      double v14 = v13;
      DKDDiffAngleInRadians(a2, v11);
      double v16 = oldS + v14 * v15;
      a2 = v11;
    }
    else
    {
      double v16 = this->oldS + (a2 - oldM) * (a2 - (oldM + (a2 - oldM) / (double)v6));
      a2 = oldM + (a2 - oldM) / (double)v6;
    }
    this->newM = a2;
    this->newS = v16;
  }
  else
  {
    this->double minValue = a2;
    this->double maxValue = a2;
    double v16 = 0.0;
    this->newM = a2;
  }
  this->long double oldM = a2;
  this->double oldS = v16;

  os_unfair_lock_unlock(p_lock);
}

uint64_t PKRunningStat::count(PKRunningStat *this)
{
  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  int64_t numValues = this->numValues;
  os_unfair_lock_unlock(p_lock);
  return numValues;
}

uint64_t PKRunningStat::countOverLimit(PKRunningStat *this)
{
  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  int64_t numValuesOverLimit = this->numValuesOverLimit;
  os_unfair_lock_unlock(p_lock);
  return numValuesOverLimit;
}

double PKRunningStat::min(PKRunningStat *this)
{
  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  if (this->numValues < 1) {
    double minValue = 0.0;
  }
  else {
    double minValue = this->minValue;
  }
  os_unfair_lock_unlock(p_lock);
  return minValue;
}

double PKRunningStat::max(PKRunningStat *this)
{
  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  if (this->numValues < 1) {
    double maxValue = 0.0;
  }
  else {
    double maxValue = this->maxValue;
  }
  os_unfair_lock_unlock(p_lock);
  return maxValue;
}

double PKRunningStat::mean(PKRunningStat *this)
{
  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  if (this->numValues < 1) {
    double newM = 0.0;
  }
  else {
    double newM = this->newM;
  }
  os_unfair_lock_unlock(p_lock);
  return newM;
}

double PKRunningStat::variance(PKRunningStat *this)
{
  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  int64_t numValues = this->numValues;
  double v4 = 0.0;
  if (numValues >= 2) {
    double v4 = this->newS / (double)(numValues - 1);
  }
  os_unfair_lock_unlock(p_lock);
  return v4;
}

double PKRunningStat::standardDeviation(PKRunningStat *this)
{
  return sqrt(PKRunningStat::variance(this));
}

void std::vector<double>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E64C4DF0, MEMORY[0x1E4FBA1D0]);
}

void sub_1C458AA2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a2);
}

void *std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<CGPoint>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C458AB20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CGPoint>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

double legacy_drawing::VectorTimestampClock::VectorTimestampClock(legacy_drawing::VectorTimestampClock *this)
{
  *(void *)this = &unk_1F1FB04D8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F1FB04D8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

void legacy_drawing::VectorTimestampClock::~VectorTimestampClock(legacy_drawing::VectorTimestampClock *this)
{
  *(void *)this = &unk_1F1FB04D8;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 4, 0);
  if (*((void *)this + 1))
  {
    std::vector<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::__clear[abi:ne180100]((void *)this + 1);
    operator delete(*((void **)this + 1));
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  legacy_drawing::VectorTimestampClock::~VectorTimestampClock(this);

  JUMPOUT(0x1C8783F10);
}

uint64_t legacy_drawing::VectorTimestampClock::VectorTimestampClock(uint64_t this, const legacy_drawing::VectorTimestampClock *a2)
{
  *(void *)this = &unk_1F1FB04D8;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<legacy_drawing::VectorTimestampClockReplicaClock>::emplace_back<legacy_drawing::VectorTimestampClockReplicaClock const&>();
  }
  return this;
}

void PB::PtrVector<legacy_drawing::VectorTimestampClockReplicaClock>::emplace_back<legacy_drawing::VectorTimestampClockReplicaClock const&>()
{
}

void sub_1C458CE70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t legacy_drawing::VectorTimestampClock::operator=(uint64_t a1, const legacy_drawing::VectorTimestampClock *a2)
{
  if ((const legacy_drawing::VectorTimestampClock *)a1 != a2)
  {
    legacy_drawing::VectorTimestampClock::VectorTimestampClock((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    legacy_drawing::VectorTimestampClock::~VectorTimestampClock((legacy_drawing::VectorTimestampClock *)v6);
  }
  return a1;
}

void *legacy_drawing::swap(void *this, legacy_drawing::VectorTimestampClock *a2, legacy_drawing::VectorTimestampClock *a3)
{
  uint64_t v3 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v3;
  uint64_t v4 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  return this;
}

uint64_t legacy_drawing::VectorTimestampClock::VectorTimestampClock(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1FB04D8;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = *(void ***)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 32), v5);
  if (*v4)
  {
    std::vector<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::__clear[abi:ne180100](v4);
    operator delete(*v4);
    void *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t legacy_drawing::VectorTimestampClock::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    legacy_drawing::VectorTimestampClock::VectorTimestampClock((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    legacy_drawing::VectorTimestampClock::~VectorTimestampClock((legacy_drawing::VectorTimestampClock *)v6);
  }
  return a1;
}

uint64_t legacy_drawing::VectorTimestampClock::formatText(legacy_drawing::VectorTimestampClock *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "replicaClock");
  }
  if (*((void *)this + 4)) {
    PB::TextFormatter::format();
  }

  return MEMORY[0x1F4147498](a2);
}

uint64_t legacy_drawing::VectorTimestampClock::readFrom(legacy_drawing::VectorTimestampClock *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        PB::PtrVector<legacy_drawing::VectorTimestampClockReplicaClock>::emplace_back<>();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void PB::PtrVector<legacy_drawing::VectorTimestampClockReplicaClock>::emplace_back<>()
{
}

void sub_1C458D454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t legacy_drawing::VectorTimestampClock::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Data **)(this + 32);
  if (v4) {
    this = PB::Writer::write(a2, v4);
  }
  uint64_t v6 = *(const PB::Base ***)(v3 + 8);
  uint64_t v5 = *(const PB::Base ***)(v3 + 16);
  while (v6 != v5)
  {
    uint64_t v7 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  return this;
}

BOOL legacy_drawing::VectorTimestampClock::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (!v4) {
      goto LABEL_5;
    }
    return 0;
  }
  if (!v4 || (PB::Data::operator==() & 1) == 0 && *(void *)(a1 + 32) | *(void *)(a2 + 32)) {
    return 0;
  }
LABEL_5:

  return PB::PtrVector<legacy_drawing::VectorTimestampClockReplicaClock>::operator==((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL PB::PtrVector<legacy_drawing::VectorTimestampClockReplicaClock>::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = legacy_drawing::VectorTimestampClockReplicaClock::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t legacy_drawing::VectorTimestampClock::hash_value(legacy_drawing::VectorTimestampClock *this)
{
  if (*((void *)this + 4)) {
    uint64_t v2 = PBHashBytes();
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (uint64_t *)*((void *)this + 1);
  uint64_t v4 = (uint64_t *)*((void *)this + 2);
  if (v3 != v4)
  {
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = *v3;
      if (*(unsigned char *)(*v3 + 16))
      {
        uint64_t v7 = *(unsigned int *)(v6 + 8);
        if ((*(unsigned char *)(*v3 + 16) & 2) == 0)
        {
LABEL_10:
          uint64_t v8 = 0;
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v7 = 0;
        if ((*(unsigned char *)(*v3 + 16) & 2) == 0) {
          goto LABEL_10;
        }
      }
      uint64_t v8 = *(unsigned int *)(v6 + 12);
LABEL_11:
      v5 ^= v7 ^ v8;
      if (++v3 == v4) {
        return v5 ^ v2;
      }
    }
  }
  uint64_t v5 = 0;
  return v5 ^ v2;
}

void *std::vector<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    BOOL result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      BOOL result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void ***std::unique_ptr<PB::Data>::reset[abi:ne180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  *BOOL result = a2;
  if (v2)
  {
    free(*v2);
    JUMPOUT(0x1C8783F10);
  }
  return result;
}

uint64_t std::vector<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unsigned int v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    void *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void sub_1C458DB78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458DD60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458DF10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458DFC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458E08C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C458E178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C458E208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458E378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458E540(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C458E5F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458E77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C458E914(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1C458EB84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458ECB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458EDA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458EF44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458F124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C458F378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C458F62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C458F71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C458F8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C458FAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458FB8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458FC78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458FD60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458FE54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C458FF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C458FF98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4590078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459014C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459021C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4590348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4590434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459067C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C45907F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45909E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4590C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4591280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4591444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45914D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4591638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45916F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45919B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4591B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<PKProtobufUnknownFields>::reset[abi:ne180100]((PB::Writer ***)va, 0);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100]<PKProtobufUnknownFields,std::default_delete<PKProtobufUnknownFields>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<PKProtobufUnknownFields>::shared_ptr[abi:ne180100]<PKProtobufUnknownFields,std::default_delete<PKProtobufUnknownFields>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

PB::Writer ***std::unique_ptr<PKProtobufUnknownFields>::reset[abi:ne180100](PB::Writer ***result, PB::Writer **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::unique_ptr<PB::Writer>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x1C8783F10);
  }
  return result;
}

uint64_t *std::shared_ptr<PKProtobufUnknownFields>::shared_ptr[abi:ne180100]<PKProtobufUnknownFields,std::default_delete<PKProtobufUnknownFields>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<PKProtobufUnknownFields  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C8783F10);
}

uint64_t std::__shared_ptr_pointer<PKProtobufUnknownFields  *>::__on_zero_shared(uint64_t result)
{
  if (*(void *)(result + 24))
  {
    std::unique_ptr<PB::Writer>::reset[abi:ne180100](*(PB::Writer ***)(result + 24), 0);
    JUMPOUT(0x1C8783F10);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<PKProtobufUnknownFields  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void __CheckSandboxAccess_block_invoke()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  getpid();
  int v0 = sandbox_check();
  _MergedGlobals_117 = v0 == 0;
  if (v0)
  {
    uint64_t v1 = os_log_create("com.apple.pencilkit", "PencilTextInput");
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      uint64_t v2 = objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle", "com.apple.PencilKit");
      uint64_t v3 = [v2 bundleIdentifier];
      *(_DWORD *)buf = 138412290;
      uint64_t v5 = v3;
      _os_log_error_impl(&dword_1C44F8000, v1, OS_LOG_TYPE_ERROR, "Sandbox disabled Scribble for :%@", buf, 0xCu);
    }
  }
}

void sub_1C4597600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4597714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)PKTiledCanvasView;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C459789C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4597A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4597B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4597D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4597E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4598008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4598284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4598424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4598770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4598864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4598CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4598FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4599200(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1C45992B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C459932C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C459941C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4599584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45996C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45998E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4599988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C459A610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_1C459A820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C459A8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C459A914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C459AA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C459ABB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459AF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  _Unwind_Resume(a1);
}

void sub_1C459B070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459B13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C459B23C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459B3BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459B594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459B6BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459B77C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459B810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459B8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459B96C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459B9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459BA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459BAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459BB48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459BBF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459BC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C459BE08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459C0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459C5F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459C720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C459C7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459C87C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459C98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459CA74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LogTouchIfEnabled(UITouch *a1, int a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  if (v3)
  {
    if (qword_1EA3C6B38 != -1) {
      dispatch_once(&qword_1EA3C6B38, &__block_literal_global_843);
    }
    if (_MergedGlobals_283)
    {
      [(UITouch *)v3 timestamp];
      uint64_t v5 = v4;
      [(UITouch *)v3 preciseLocationInView:0];
      uint64_t v7 = v6;
      uint64_t v9 = v8;
      [(UITouch *)v3 azimuthAngleInView:0];
      uint64_t v11 = v10;
      [(UITouch *)v3 altitudeAngle];
      uint64_t v13 = v12;
      [(UITouch *)v3 force];
      uint64_t v15 = v14;
      long long v16 = os_log_create("com.apple.pencilkit", "PencilKit Touch Events");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        if (a2) {
          char v17 = @"Update";
        }
        else {
          char v17 = @"Touch";
        }
        uint64_t v18 = [(UITouch *)v3 estimationUpdateIndex];
        int v19 = 138414082;
        unint64_t v20 = v17;
        __int16 v21 = 2048;
        uint64_t v22 = v5;
        __int16 v23 = 2048;
        uint64_t v24 = v7;
        __int16 v25 = 2048;
        uint64_t v26 = v9;
        __int16 v27 = 2048;
        uint64_t v28 = v11;
        __int16 v29 = 2048;
        uint64_t v30 = v13;
        __int16 v31 = 2048;
        uint64_t v32 = v15;
        __int16 v33 = 2048;
        uint64_t v34 = [v18 unsignedIntegerValue];
        _os_log_impl(&dword_1C44F8000, v16, OS_LOG_TYPE_DEFAULT, "%@: Timestamp: %.4f, location: %.3f %.3f, azimuth: %g, altitude: %g, force: %g, updateCorrelationToken: %lu", (uint8_t *)&v19, 0x52u);
      }
    }
  }
}

void sub_1C459CC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C459D7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void std::vector<PKInputPoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 7;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + (a2 << 7);
    }
  }
  else
  {
    std::vector<PKInputPoint>::__append((void **)a1, a2 - v2);
  }
}

void sub_1C459DAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C459DC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C459DE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C459DF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C459ECE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::vector<PKInputPoint>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 7)
  {
    if (a2 >> 57) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKInputPoint>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFF80];
    uint64_t v9 = &v6[128 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 8);
        long long v14 = *((_OWORD *)v10 - 7);
        long long v15 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v15;
        *((_OWORD *)v12 - 8) = v13;
        *((_OWORD *)v12 - 7) = v14;
        long long v16 = *((_OWORD *)v10 - 4);
        long long v17 = *((_OWORD *)v10 - 3);
        long long v18 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v18;
        *((_OWORD *)v12 - 4) = v16;
        *((_OWORD *)v12 - 3) = v17;
        v12 -= 128;
        v10 -= 128;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1C459F350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C459F634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C459FDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C45A0718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C45A0B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  objc_destroyWeak(v20);
  _Unwind_Resume(a1);
}

void sub_1C45A0D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A0EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A12D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A1430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A14E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A1794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45A1920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A1E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C45A21EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C45A22EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A250C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A2770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A28A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45A2A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A2AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45A2C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A2D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45A302C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C45A3170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45A3604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45A375C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A3A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1C45A3B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45A3D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45A41E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A428C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A4348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A459C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A4878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  objc_destroyWeak(v32);
  objc_destroyWeak(&location);

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__171(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__172(uint64_t a1)
{
}

void sub_1C45A4E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A4FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45A506C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45A511C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45A51CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45A549C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A5568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A55E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A56FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A5784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A5AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A5BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A5C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL22PKShouldLogTouchEventsv_block_invoke()
{
  if (os_variant_has_internal_diagnostics())
  {
    id v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
    _MergedGlobals_283 = [v0 BOOLForKey:@"PKLogTouchEventsInPencilKit"];
  }
  else
  {
    _MergedGlobals_283 = 0;
  }
}

void sub_1C45A65E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<PKInputPoint>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 7)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 7);
      v7 += 128 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 7);
    if (v9 >> 57) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 7;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 6 > v9) {
      unint64_t v9 = v11 >> 6;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKInputPoint>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    long long v14 = &v13[128 * v10];
    long long v15 = &v13[128 * v12];
    bzero(v14, a2 << 7);
    long long v16 = &v14[128 * a2];
    long long v18 = (char *)*a1;
    long long v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 8);
        long long v20 = *((_OWORD *)v17 - 7);
        long long v21 = *((_OWORD *)v17 - 5);
        *((_OWORD *)v14 - 6) = *((_OWORD *)v17 - 6);
        *((_OWORD *)v14 - 5) = v21;
        *((_OWORD *)v14 - 8) = v19;
        *((_OWORD *)v14 - 7) = v20;
        long long v22 = *((_OWORD *)v17 - 4);
        long long v23 = *((_OWORD *)v17 - 3);
        long long v24 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v24;
        *((_OWORD *)v14 - 4) = v22;
        *((_OWORD *)v14 - 3) = v23;
        v14 -= 128;
        v17 -= 128;
      }
      while (v17 != v18);
      long long v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PKInputPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 7);
}

void ___ZL25PKRenderFullStrokePreviewv_block_invoke()
{
  id v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  byte_1EA3C6B31 = [v0 BOOLForKey:@"PKRenderFullStrokePreview"];
}

void sub_1C45A67CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL29PKRenderAfterTouchRollUpdatesv_block_invoke()
{
  id v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  byte_1EA3C6B32 = [v0 BOOLForKey:@"PKRenderAfterTouchRollUpdates"];
}

void sub_1C45A6840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::vector<PKInputPoint>::__init_with_size[abi:ne180100]<PKInputPoint*,PKInputPoint*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<PKInputPoint>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C45A68B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<PKInputPoint>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 57) {
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKInputPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

void ___ZL34PKAlwaysRenderLiveStrokesAsPreviewv_block_invoke()
{
  id v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  byte_1EA3C6B33 = [v0 BOOLForKey:@"PKAlwaysRenderLiveStrokesAsPreview"];
}

void sub_1C45A6974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45A6A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A6B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45A6B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45A6BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PKTitleQuery;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C45A6C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A6DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C45A7004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45A8A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C45A8AF0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1C45ACB88(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1C45AF31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1C45AF4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

id PKSpecificCast(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3 && [v3 isMemberOfClass:a1]) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }

  return v5;
}

id PKProtocolCast(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v4 && [v4 conformsToProtocol:v3]) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }

  return v6;
}

id PKClassAndProtocolCast(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10 = a1;
  if (v10 && (objc_opt_isKindOfClass() & 1) != 0)
  {
    long long v14 = &a9;
    if (!a3)
    {
LABEL_6:
      id v12 = v10;
      goto LABEL_8;
    }
    while (1)
    {
      uint64_t v11 = v14++;
      if (([v10 conformsToProtocol:*v11] & 1) == 0) {
        break;
      }
      if (!--a3) {
        goto LABEL_6;
      }
    }
  }
  id v12 = 0;
LABEL_8:

  return v12;
}

CFTypeRef PKCFTypeCast(uint64_t a1, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  if (CFGetTypeID(cf) == a1) {
    return cf;
  }
  return 0;
}

id PKCheckedProtocolCast(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    id v5 = os_log_create("com.apple.pencilkit", "");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12) = 0;
      _os_log_error_impl(&dword_1C44F8000, v5, OS_LOG_TYPE_ERROR, "Protocol is nil", (uint8_t *)&v12, 2u);
    }
  }
  uint64_t v6 = PKProtocolCast(v3, v4);
  uint64_t v7 = (void *)v6;
  if (v4 && !v6)
  {
    size_t v8 = os_log_create("com.apple.pencilkit", "");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v10 = (id)objc_opt_class();
      if (v3) {
        Name = protocol_getName((Protocol *)v3);
      }
      else {
        Name = "<No protocol supplied>";
      }
      int v12 = 138412546;
      id v13 = v10;
      __int16 v14 = 2080;
      long long v15 = Name;
      _os_log_error_impl(&dword_1C44F8000, v8, OS_LOG_TYPE_ERROR, "Unexpected object type in checked protocol cast %@ expects %s", (uint8_t *)&v12, 0x16u);
    }
  }

  return v7;
}

void sub_1C45B3344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C45B5890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *a13, id *location, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  objc_destroyWeak(v67);
  _Block_object_dispose(&a39, 8);
  objc_destroyWeak(location);
  objc_destroyWeak(a13);
  objc_destroyWeak(&a67);
  _Unwind_Resume(a1);
}

void sub_1C45B6CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double drawing::Stroke::Stroke(drawing::Stroke *this)
{
  *(void *)this = &unk_1F1FB0820;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 46) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F1FB0820;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 46) = 0;
  return result;
}

void drawing::Stroke::~Stroke(drawing::Stroke *this)
{
  *(void *)this = &unk_1F1FB0820;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v11 = (void **)((char *)this + 136);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v11);
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 15, 0);
  uint64_t v6 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 11, 0);
  uint64_t v11 = (void **)((char *)this + 64);
  std::vector<PB::Data>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v8 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 5, 0);
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  id v10 = (void *)*((void *)this + 1);
  if (v10)
  {
    *((void *)this + 2) = v10;
    operator delete(v10);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  drawing::Stroke::~Stroke(this);

  JUMPOUT(0x1C8783F10);
}

drawing::Stroke *drawing::Stroke::Stroke(drawing::Stroke *this, const drawing::Stroke *a2)
{
  *(void *)this = &unk_1F1FB0820;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (void *)((char *)this + 8);
  *((void *)this + 5) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 15) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 14) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  uint64_t v5 = *((void *)a2 + 24);
  uint64_t v6 = *((void *)a2 + 25);
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 25);
    *((void *)this + 24) = v5;
    *((void *)this + 25) = v6;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  else
  {
    *((void *)this + 24) = v5;
    *((void *)this + 25) = 0;
  }
  *((_DWORD *)this + 46) = 0;
  if (*((void *)a2 + 15)) {
    operator new();
  }
  if (*((void *)a2 + 13)) {
    operator new();
  }
  if (*((void *)a2 + 22)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 184))
  {
    uint64_t v8 = *((void *)a2 + 6);
    *((unsigned char *)this + 184) |= 1u;
    *((void *)this + 6) = v8;
  }
  if (*((void *)a2 + 14)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 21)) {
    operator new();
  }
  if ((*((unsigned char *)a2 + 184) & 4) != 0)
  {
    uint64_t v9 = *((void *)a2 + 16);
    *((unsigned char *)this + 184) |= 4u;
    *((void *)this + 16) = v9;
  }
  if (*((void *)a2 + 20)) {
    operator new();
  }
  if (this != a2) {
    std::vector<PB::Data>::__assign_with_size[abi:ne180100]<PB::Data*,PB::Data*>((uint64_t)this + 64, *((PB::Data **)a2 + 8), *((PB::Data **)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 4);
  }
  if (*((void *)a2 + 17) != *((void *)a2 + 18)) {
    PB::PtrVector<drawing::Stroke>::emplace_back<drawing::Stroke const&>();
  }
  if (this != a2)
  {
    uint64_t v11 = (char *)*((void *)a2 + 1);
    id v10 = (unsigned char *)*((void *)a2 + 2);
    size_t v12 = v10 - v11;
    unint64_t v13 = (v10 - v11) >> 2;
    uint64_t v14 = *((void *)this + 3);
    long long v15 = (char *)*((void *)this + 1);
    if (v13 <= (v14 - (uint64_t)v15) >> 2)
    {
      long long v18 = (void **)((char *)this + 16);
      long long v20 = (unsigned char *)*((void *)this + 2);
      unint64_t v21 = (v20 - v15) >> 2;
      if (v21 < v13)
      {
        long long v22 = &v11[4 * v21];
        if (v20 != v15)
        {
          memmove(*((void **)this + 1), *((const void **)a2 + 1), v20 - v15);
          long long v15 = (char *)*v18;
        }
        size_t v12 = v10 - v22;
        if (v10 == v22) {
          goto LABEL_47;
        }
        long long v23 = v15;
        long long v24 = v22;
        goto LABEL_46;
      }
    }
    else
    {
      if (v15)
      {
        *((void *)this + 2) = v15;
        operator delete(v15);
        uint64_t v14 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
      }
      if ((v12 & 0x8000000000000000) != 0) {
        goto LABEL_57;
      }
      uint64_t v16 = v14 >> 1;
      if (v14 >> 1 <= v13) {
        uint64_t v16 = (v10 - v11) >> 2;
      }
      unint64_t v17 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v16;
      if (v17 >> 62) {
LABEL_57:
      }
        std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
      long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 24, v17);
      *((void *)this + 2) = v15;
      long long v18 = (void **)((char *)this + 16);
      *((void *)this + 1) = v15;
      *((void *)this + 3) = &v15[4 * v19];
    }
    if (v10 == v11)
    {
LABEL_47:
      *long long v18 = &v15[v12];
      goto LABEL_48;
    }
    long long v23 = v15;
    long long v24 = v11;
LABEL_46:
    memmove(v23, v24, v12);
    goto LABEL_47;
  }
LABEL_48:
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if ((*((unsigned char *)a2 + 184) & 2) != 0)
  {
    uint64_t v25 = *((void *)a2 + 12);
    *((unsigned char *)this + 184) |= 2u;
    *((void *)this + 12) = v25;
  }
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((void *)a2 + 11)) {
    operator new();
  }
  return this;
}

void PB::PtrVector<drawing::Stroke>::emplace_back<drawing::Stroke const&>()
{
}

void sub_1C45B7AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t drawing::Stroke::operator=(uint64_t a1, const drawing::Stroke *a2)
{
  if ((const drawing::Stroke *)a1 != a2)
  {
    drawing::Stroke::Stroke((drawing::Stroke *)v5, a2);
    drawing::swap(a1, (drawing::Stroke *)v5, v3);
    drawing::Stroke::~Stroke((drawing::Stroke *)v5);
  }
  return a1;
}

uint64_t drawing::swap(uint64_t this, drawing::Stroke *a2, drawing::Stroke *a3)
{
  uint64_t v3 = *(void *)(this + 192);
  *(void *)(this + 192) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v3;
  uint64_t v4 = *(void *)(this + 200);
  *(void *)(this + 200) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 184);
  *(_DWORD *)(this + 184) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v4;
  uint64_t v5 = *(void *)(this + 120);
  *(void *)(this + 120) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v5;
  uint64_t v6 = *(void *)(this + 104);
  *(void *)(this + 104) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v6;
  uint64_t v7 = *(void *)(this + 176);
  *(void *)(this + 176) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v7;
  uint64_t v8 = *(void *)(this + 112);
  *(void *)(this + 112) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v8;
  uint64_t v9 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = *(void *)(this + 168);
  *(void *)(this + 168) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v10;
  uint64_t v11 = *(void *)(this + 160);
  *(void *)(this + 160) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v11;
  uint64_t v12 = *(void *)(this + 64);
  *(void *)(this + 64) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  uint64_t v13 = *(void *)(this + 72);
  *(void *)(this + 72) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v13;
  uint64_t v14 = *(void *)(this + 80);
  *(void *)(this + 80) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v14;
  uint64_t v15 = *(void *)(this + 136);
  *(void *)(this + 136) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v15;
  uint64_t v16 = *(void *)(this + 144);
  *(void *)(this + 144) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v16;
  uint64_t v17 = *(void *)(this + 152);
  *(void *)(this + 152) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v17;
  uint64_t v18 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v18;
  uint64_t v19 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v19;
  uint64_t v20 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v20;
  uint64_t v22 = *(void *)(this + 40);
  uint64_t v21 = *(void *)(this + 48);
  uint64_t v23 = *((void *)a2 + 6);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *(void *)(this + 48) = v23;
  *((void *)a2 + 6) = v21;
  uint64_t v24 = *(void *)(this + 128);
  *(void *)(this + 128) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v24;
  *((void *)a2 + 5) = v22;
  uint64_t v25 = *(void *)(this + 56);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v25;
  uint64_t v27 = *(void *)(this + 88);
  uint64_t v26 = *(void *)(this + 96);
  uint64_t v28 = *((void *)a2 + 12);
  *(void *)(this + 88) = *((void *)a2 + 11);
  *(void *)(this + 96) = v28;
  *((void *)a2 + 11) = v27;
  *((void *)a2 + 12) = v26;
  return this;
}

uint64_t drawing::Stroke::Stroke(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1FB0820;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = (void ***)(a1 + 40);
  *(void *)(a1 + 120) = 0;
  uint64_t v6 = (void ***)(a1 + 120);
  *(_OWORD *)(a1 + 136) = 0u;
  uint64_t v7 = (void **)(a1 + 136);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  long long v8 = *(_OWORD *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 200);
  *(_OWORD *)(a1 + 192) = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a2 + 184) = 0;
  uint64_t v10 = *(void ***)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](v6, v10);
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v12 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v11;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  uint64_t v14 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = v13;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v16 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v15;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v18 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v17;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  uint64_t v20 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v19;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  uint64_t v22 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = v21;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  std::vector<PB::Data>::__vdeallocate((void **)(a1 + 64));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  std::vector<std::unique_ptr<drawing::Stroke>>::__vdeallocate(v7);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  uint64_t v23 = *(void **)(a1 + 8);
  if (v23)
  {
    *(void *)(a1 + 16) = v23;
    operator delete(v23);
    void *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v24 = *(void ***)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](v5, v24);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v25 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v26 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v25;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *(void ***)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 88), v27);
  return a1;
}

uint64_t drawing::Stroke::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    drawing::Stroke::Stroke((uint64_t)v5, a2);
    drawing::swap(a1, (drawing::Stroke *)v5, v3);
    drawing::Stroke::~Stroke((drawing::Stroke *)v5);
  }
  return a1;
}

uint64_t drawing::Stroke::formatText(drawing::Stroke *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "bounds");
  }
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "centerlineSlices", v8);
  }
  if (*((void *)this + 5)) {
    PB::TextFormatter::format();
  }
  if (*((unsigned char *)this + 184)) {
    PB::TextFormatter::format(a2, "inkIndex");
  }
  uint64_t v9 = *((void *)this + 7);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "inkTransform");
  }
  uint64_t v10 = *((void *)this + 8);
  for (uint64_t i = *((void *)this + 9); v10 != i; v10 += 16)
    PB::TextFormatter::format();
  if (*((void *)this + 11)) {
    PB::TextFormatter::format();
  }
  if ((*((unsigned char *)this + 184) & 2) != 0) {
    PB::TextFormatter::format(a2, "shapeType");
  }
  uint64_t v12 = *((void *)this + 13);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, a2, "sortID");
  }
  uint64_t v13 = *((void *)this + 14);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "strokeData");
  }
  if (*((void *)this + 15)) {
    PB::TextFormatter::format();
  }
  if ((*((unsigned char *)this + 184) & 4) != 0) {
    PB::TextFormatter::format(a2, "styleFlags");
  }
  uint64_t v14 = (uint64_t *)*((void *)this + 17);
  uint64_t v15 = (uint64_t *)*((void *)this + 18);
  while (v14 != v15)
  {
    uint64_t v16 = *v14++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v16 + 32))(v16, a2, "substrokes");
  }
  uint64_t v17 = *((void *)this + 20);
  if (v17) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, a2, "substrokesVersion");
  }
  uint64_t v18 = *((void *)this + 21);
  if (v18) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v18 + 32))(v18, a2, "transform");
  }
  uint64_t v19 = *((void *)this + 22);
  if (v19) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v19 + 32))(v19, a2, "version");
  }

  return MEMORY[0x1F4147498](a2);
}

BOOL drawing::Stroke::readFrom(drawing::Stroke *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  float v8 = (void **)((char *)this + 8);
  uint64_t v97 = (char *)this + 24;
  double v98 = (uint64_t *)((char *)this + 64);
  uint64_t v96 = (char *)this + 80;
  uint64_t v9 = (PKProtobufUnknownFields **)((char *)this + 192);
  while (1)
  {
    uint64_t v10 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3) {
      break;
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_25;
      }
      v17 += 7;
      unint64_t v2 = v19;
      BOOL v16 = v18++ > 8;
    }
    while (!v16);
LABEL_20:
    int v21 = 0;
    LODWORD(v22) = 0;
LABEL_21:
    if (!*v9) {
      operator new();
    }
    if (!PKProtobufUnknownFields::add(*v9, v22, v21, a2)) {
      return 0;
    }
LABEL_151:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v11 = 0;
  unsigned int v12 = 0;
  unint64_t v13 = 0;
  while (1)
  {
    unint64_t v14 = v2 + 1;
    *((void *)a2 + 1) = v2 + 1;
    char v15 = *(unsigned char *)(v10 + v2);
    v13 |= (unint64_t)(v15 & 0x7F) << v11;
    if ((v15 & 0x80) == 0) {
      break;
    }
    v11 += 7;
    unint64_t v2 = v14;
    BOOL v16 = v12++ > 8;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_25:
  int v21 = v13 & 7;
  if (v21 != 4)
  {
    unint64_t v22 = v13 >> 3;
    switch((v13 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        operator new();
      case 3u:
        operator new();
      case 4u:
        *((unsigned char *)this + 184) |= 1u;
        unint64_t v23 = *((void *)a2 + 1);
        unint64_t v24 = *((void *)a2 + 2);
        uint64_t v25 = *(void *)a2;
        if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          do
          {
            unint64_t v29 = v23 + 1;
            *((void *)a2 + 1) = v23 + 1;
            char v30 = *(unsigned char *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0) {
              goto LABEL_133;
            }
            v26 += 7;
            unint64_t v23 = v29;
            BOOL v16 = v27++ > 8;
          }
          while (!v16);
LABEL_92:
          uint64_t v28 = 0;
          goto LABEL_133;
        }
        char v64 = 0;
        unsigned int v65 = 0;
        uint64_t v28 = 0;
        if (v24 <= v23) {
          unint64_t v24 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v24 == v23)
          {
            uint64_t v28 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v66 = v23 + 1;
            char v67 = *(unsigned char *)(v25 + v23);
            *((void *)a2 + 1) = v66;
            v28 |= (unint64_t)(v67 & 0x7F) << v64;
            if (v67 < 0)
            {
              v64 += 7;
              unint64_t v23 = v66;
              BOOL v16 = v65++ > 8;
              if (v16) {
                goto LABEL_92;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v28 = 0;
            }
          }
          break;
        }
LABEL_133:
        *((void *)this + 6) = v28;
        goto LABEL_151;
      case 5u:
        operator new();
      case 6u:
        operator new();
      case 7u:
        operator new();
      case 8u:
        *((unsigned char *)this + 184) |= 4u;
        unint64_t v31 = *((void *)a2 + 1);
        unint64_t v32 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v36 = 0;
          do
          {
            unint64_t v37 = v31 + 1;
            *((void *)a2 + 1) = v31 + 1;
            char v38 = *(unsigned char *)(v33 + v31);
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if ((v38 & 0x80) == 0) {
              goto LABEL_136;
            }
            v34 += 7;
            unint64_t v31 = v37;
            BOOL v16 = v35++ > 8;
          }
          while (!v16);
LABEL_99:
          uint64_t v36 = 0;
          goto LABEL_136;
        }
        char v68 = 0;
        unsigned int v69 = 0;
        uint64_t v36 = 0;
        if (v32 <= v31) {
          unint64_t v32 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v32 == v31)
          {
            uint64_t v36 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v70 = v31 + 1;
            char v71 = *(unsigned char *)(v33 + v31);
            *((void *)a2 + 1) = v70;
            v36 |= (unint64_t)(v71 & 0x7F) << v68;
            if (v71 < 0)
            {
              v68 += 7;
              unint64_t v31 = v70;
              BOOL v16 = v69++ > 8;
              if (v16) {
                goto LABEL_99;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v36 = 0;
            }
          }
          break;
        }
LABEL_136:
        *((void *)this + 16) = v36;
        goto LABEL_151;
      case 9u:
        operator new();
      case 0xAu:
        id v40 = (void *)*((void *)this + 9);
        unint64_t v39 = *((void *)this + 10);
        if ((unint64_t)v40 >= v39)
        {
          uint64_t v72 = ((uint64_t)v40 - *v98) >> 4;
          unint64_t v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 60) {
            std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v74 = v39 - *v98;
          if (v74 >> 3 > v73) {
            unint64_t v73 = v74 >> 3;
          }
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v75 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v75 = v73;
          }
          v99[4] = v96;
          if (v75) {
            long long v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)v96, v75);
          }
          else {
            long long v76 = 0;
          }
          uint64_t v90 = &v76[16 * v72];
          v99[0] = v76;
          v99[1] = v90;
          v99[3] = &v76[16 * v75];
          *(void *)uint64_t v90 = 0;
          *((void *)v90 + 1) = 0;
          v99[2] = v90 + 16;
          std::vector<PB::Data>::__swap_out_circular_buffer(v98, v99);
          uint64_t v41 = (void *)*((void *)this + 9);
          std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)v99);
        }
        else
        {
          *id v40 = 0;
          v40[1] = 0;
          uint64_t v41 = v40 + 2;
          *((void *)this + 9) = v40 + 2;
        }
        *((void *)this + 9) = v41;
        PB::Reader::read(a2, (PB::Data *)(v41 - 2));
        goto LABEL_151;
      case 0xBu:
        PB::PtrVector<drawing::Stroke>::emplace_back<>();
      case 0xCu:
        if (v21 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v42 = *((void *)a2 + 1);
          unint64_t v43 = *((void *)a2 + 2);
          while (v42 < v43 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v45 = (char *)*((void *)this + 2);
            unint64_t v44 = *((void *)this + 3);
            if ((unint64_t)v45 >= v44)
            {
              uint64_t v47 = (char *)*v8;
              uint64_t v48 = (v45 - (unsigned char *)*v8) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                goto LABEL_161;
              }
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v97, v51);
                uint64_t v47 = (char *)*((void *)this + 1);
                unint64_t v45 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v52 = 0;
              }
              uint64_t v53 = &v52[4 * v48];
              *(_DWORD *)uint64_t v53 = 0;
              __int16 v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *((void *)this + 1) = v53;
              *((void *)this + 2) = v46;
              *((void *)this + 3) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v45 = 0;
              __int16 v46 = v45 + 4;
            }
            *((void *)this + 2) = v46;
            unint64_t v55 = *((void *)a2 + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)a2 + v55);
            unint64_t v43 = *((void *)a2 + 2);
            unint64_t v42 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v42;
          }
          PB::Reader::recallMark();
        }
        else
        {
          long long v78 = (char *)*((void *)this + 2);
          unint64_t v77 = *((void *)this + 3);
          if ((unint64_t)v78 >= v77)
          {
            long long v84 = (char *)*v8;
            uint64_t v85 = (v78 - (unsigned char *)*v8) >> 2;
            unint64_t v86 = v85 + 1;
            if ((unint64_t)(v85 + 1) >> 62) {
LABEL_161:
            }
              std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
            uint64_t v87 = v77 - (void)v84;
            if (v87 >> 1 > v86) {
              unint64_t v86 = v87 >> 1;
            }
            if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v88 = v86;
            }
            if (v88)
            {
              uint64_t v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v97, v88);
              long long v84 = (char *)*((void *)this + 1);
              long long v78 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v89 = 0;
            }
            double v91 = &v89[4 * v85];
            *(_DWORD *)double v91 = 0;
            long long v79 = v91 + 4;
            while (v78 != v84)
            {
              int v92 = *((_DWORD *)v78 - 1);
              v78 -= 4;
              *((_DWORD *)v91 - 1) = v92;
              v91 -= 4;
            }
            *((void *)this + 1) = v91;
            *((void *)this + 2) = v79;
            *((void *)this + 3) = &v89[4 * v88];
            if (v84) {
              operator delete(v84);
            }
          }
          else
          {
            *(_DWORD *)long long v78 = 0;
            long long v79 = v78 + 4;
          }
          *((void *)this + 2) = v79;
          unint64_t v93 = *((void *)a2 + 1);
          if (v93 <= 0xFFFFFFFFFFFFFFFBLL && v93 + 4 <= *((void *)a2 + 2))
          {
            *(v79 - 1) = *(_DWORD *)(*(void *)a2 + v93);
            *((void *)a2 + 1) += 4;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
        }
        break;
      case 0xDu:
        operator new();
      case 0xEu:
        *((unsigned char *)this + 184) |= 2u;
        unint64_t v56 = *((void *)a2 + 1);
        unint64_t v57 = *((void *)a2 + 2);
        uint64_t v58 = *(void *)a2;
        if (v56 <= 0xFFFFFFFFFFFFFFF5 && v56 + 10 <= v57)
        {
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v61 = 0;
          do
          {
            unint64_t v62 = v56 + 1;
            *((void *)a2 + 1) = v56 + 1;
            char v63 = *(unsigned char *)(v58 + v56);
            v61 |= (unint64_t)(v63 & 0x7F) << v59;
            if ((v63 & 0x80) == 0) {
              goto LABEL_139;
            }
            v59 += 7;
            unint64_t v56 = v62;
            BOOL v16 = v60++ > 8;
          }
          while (!v16);
LABEL_116:
          uint64_t v61 = 0;
          goto LABEL_139;
        }
        char v80 = 0;
        unsigned int v81 = 0;
        uint64_t v61 = 0;
        if (v57 <= v56) {
          unint64_t v57 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v57 == v56)
          {
            uint64_t v61 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v82 = v56 + 1;
            char v83 = *(unsigned char *)(v58 + v56);
            *((void *)a2 + 1) = v82;
            v61 |= (unint64_t)(v83 & 0x7F) << v80;
            if (v83 < 0)
            {
              v80 += 7;
              unint64_t v56 = v82;
              BOOL v16 = v81++ > 8;
              if (v16) {
                goto LABEL_116;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v61 = 0;
            }
          }
          break;
        }
LABEL_139:
        *((void *)this + 12) = v61;
        goto LABEL_151;
      case 0xFu:
        operator new();
      case 0x10u:
        operator new();
      default:
        goto LABEL_21;
    }
    goto LABEL_151;
  }
  int v4 = 0;
  return v4 == 0;
}

void sub_1C45B8F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void PB::PtrVector<drawing::Stroke>::emplace_back<>()
{
}

void sub_1C45B9120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

const void ***drawing::Stroke::writeTo(drawing::Stroke *this, PB::Writer *a2)
{
  int v4 = (const PB::Data *)*((void *)this + 15);
  if (v4) {
    PB::Writer::write(a2, v4);
  }
  uint64_t v5 = (const PB::Base *)*((void *)this + 13);
  if (v5) {
    PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = (const PB::Base *)*((void *)this + 22);
  if (v6) {
    PB::Writer::writeSubmessage(a2, v6);
  }
  if (*((unsigned char *)this + 184)) {
    PB::Writer::writeVarInt(a2);
  }
  uint64_t v7 = (const PB::Base *)*((void *)this + 14);
  if (v7) {
    PB::Writer::writeSubmessage(a2, v7);
  }
  float v8 = (const PB::Base *)*((void *)this + 4);
  if (v8) {
    PB::Writer::writeSubmessage(a2, v8);
  }
  uint64_t v9 = (const PB::Base *)*((void *)this + 21);
  if (v9) {
    PB::Writer::writeSubmessage(a2, v9);
  }
  if ((*((unsigned char *)this + 184) & 4) != 0) {
    PB::Writer::writeVarInt(a2);
  }
  uint64_t v10 = (const PB::Base *)*((void *)this + 20);
  if (v10) {
    PB::Writer::writeSubmessage(a2, v10);
  }
  char v11 = (const PB::Data *)*((void *)this + 8);
  unsigned int v12 = (const PB::Data *)*((void *)this + 9);
  while (v11 != v12)
  {
    PB::Writer::write(a2, v11);
    char v11 = (const PB::Data *)((char *)v11 + 16);
  }
  unint64_t v13 = (const PB::Base **)*((void *)this + 17);
  unint64_t v14 = (const PB::Base **)*((void *)this + 18);
  while (v13 != v14)
  {
    char v15 = *v13++;
    PB::Writer::writeSubmessage(a2, v15);
  }
  BOOL v16 = (float *)*((void *)this + 1);
  char v17 = (float *)*((void *)this + 2);
  while (v16 != v17)
  {
    float v18 = *v16++;
    PB::Writer::write(a2, v18);
  }
  unint64_t v19 = (const PB::Data *)*((void *)this + 5);
  if (v19) {
    PB::Writer::write(a2, v19);
  }
  if ((*((unsigned char *)this + 184) & 2) != 0) {
    PB::Writer::writeVarInt(a2);
  }
  char v20 = (const PB::Base *)*((void *)this + 7);
  if (v20) {
    PB::Writer::writeSubmessage(a2, v20);
  }
  int v21 = (const PB::Data *)*((void *)this + 11);
  if (v21) {
    PB::Writer::write(a2, v21);
  }
  double result = (const void ***)*((void *)this + 24);
  if (result)
  {
    return PKProtobufUnknownFields::writeTo(result, (char **)a2);
  }
  return result;
}

uint64_t drawing::Stroke::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = PKProtobufUnknownFieldsCompare((void ***)(a1 + 192), (void ***)(a2 + 192));
  if (result)
  {
    uint64_t v5 = *(void *)(a2 + 120);
    if (*(void *)(a1 + 120))
    {
      if (!v5 || (PB::Data::operator==() & 1) == 0 && *(void *)(a1 + 120) | *(void *)(a2 + 120)) {
        return 0;
      }
    }
    else if (v5)
    {
      return 0;
    }
    uint64_t v6 = *(void *)(a1 + 104);
    uint64_t v7 = *(void *)(a2 + 104);
    if (v6)
    {
      if (!v7 || !drawing::StrokeID::operator==(v6, v7)) {
        return 0;
      }
    }
    else if (v7)
    {
      return 0;
    }
    uint64_t v8 = *(void *)(a1 + 176);
    uint64_t v9 = *(void *)(a2 + 176);
    if (v8)
    {
      if (!v9 || !drawing::StrokeID::operator==(v8, v9)) {
        return 0;
      }
    }
    else if (v9)
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 184))
    {
      if ((*(unsigned char *)(a2 + 184) & 1) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a2 + 184))
    {
      return 0;
    }
    uint64_t v10 = *(void *)(a1 + 112);
    uint64_t v11 = *(void *)(a2 + 112);
    if (v10)
    {
      if (!v11 || !drawing::StrokeData::operator==(v10, v11) && *(void *)(a1 + 112) | *(void *)(a2 + 112)) {
        return 0;
      }
    }
    else if (v11)
    {
      return 0;
    }
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a2 + 32);
    if (v12)
    {
      if (!v13 || !drawing::Rectangle::operator==(v12, v13)) {
        return 0;
      }
    }
    else if (v13)
    {
      return 0;
    }
    uint64_t v14 = *(void *)(a1 + 168);
    uint64_t v15 = *(void *)(a2 + 168);
    if (v14)
    {
      if (!v15 || !drawing::Transform::operator==(v14, v15)) {
        return 0;
      }
    }
    else if (v15)
    {
      return 0;
    }
    if ((*(unsigned char *)(a1 + 184) & 4) != 0)
    {
      if ((*(unsigned char *)(a2 + 184) & 4) == 0 || *(void *)(a1 + 128) != *(void *)(a2 + 128)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 184) & 4) != 0)
    {
      return 0;
    }
    uint64_t v16 = *(void *)(a1 + 160);
    uint64_t v17 = *(void *)(a2 + 160);
    if (v16)
    {
      if (!v17 || !drawing::StrokeID::operator==(v16, v17)) {
        return 0;
      }
    }
    else if (v17)
    {
      return 0;
    }
    uint64_t v18 = *(void *)(a1 + 64);
    uint64_t v19 = *(void *)(a1 + 72);
    uint64_t v20 = *(void *)(a2 + 64);
    if (v19 - v18 != *(void *)(a2 + 72) - v20) {
      return 0;
    }
    while (v18 != v19)
    {
      uint64_t result = PB::Data::operator==();
      if (!result) {
        return result;
      }
      v18 += 16;
      v20 += 16;
    }
    uint64_t result = PB::PtrVector<drawing::Stroke>::operator==((void *)(a1 + 136), (void *)(a2 + 136));
    if (result)
    {
      unint64_t v22 = *(float **)(a1 + 8);
      int v21 = *(float **)(a1 + 16);
      unint64_t v23 = *(float **)(a2 + 8);
      if ((char *)v21 - (char *)v22 == *(void *)(a2 + 16) - (void)v23)
      {
        while (v22 != v21)
        {
          if (*v22 != *v23) {
            return 0;
          }
          ++v22;
          ++v23;
        }
        uint64_t v24 = *(void *)(a2 + 40);
        if (*(void *)(a1 + 40))
        {
          if (!v24 || (PB::Data::operator==() & 1) == 0 && *(void *)(a1 + 40) | *(void *)(a2 + 40)) {
            return 0;
          }
        }
        else if (v24)
        {
          return 0;
        }
        if ((*(unsigned char *)(a1 + 184) & 2) != 0)
        {
          if ((*(unsigned char *)(a2 + 184) & 2) == 0 || *(void *)(a1 + 96) != *(void *)(a2 + 96)) {
            return 0;
          }
        }
        else if ((*(unsigned char *)(a2 + 184) & 2) != 0)
        {
          return 0;
        }
        uint64_t v25 = *(void *)(a1 + 56);
        uint64_t v26 = *(void *)(a2 + 56);
        if (v25)
        {
          if (!v26 || !drawing::Transform::operator==(v25, v26)) {
            return 0;
          }
LABEL_74:
          if (!*(void *)(a1 + 88)) {
            return *(void *)(a2 + 88) == 0;
          }
          if (*(void *)(a2 + 88))
          {
            if (PB::Data::operator==()) {
              return 1;
            }
            if (!*(void *)(a1 + 88)) {
              return *(void *)(a2 + 88) == 0;
            }
          }
          return 0;
        }
        if (!v26) {
          goto LABEL_74;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t PB::PtrVector<drawing::Stroke>::operator==(void *a1, void *a2)
{
  unint64_t v3 = (void *)*a1;
  unint64_t v2 = (void *)a1[1];
  int v4 = (void *)*a2;
  if ((void *)((char *)v2 - *a1) != (void *)(a2[1] - *a2)) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  do
  {
    uint64_t result = drawing::Stroke::operator==(*v3, *v4);
    if (!result) {
      break;
    }
    ++v3;
    ++v4;
  }
  while (v3 != (void *)a1[1]);
  return result;
}

uint64_t drawing::Stroke::hash_value(drawing::Stroke *this)
{
  if (*((void *)this + 15)) {
    uint64_t v2 = PBHashBytes();
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *((void *)this + 13);
  if (!v3)
  {
    uint64_t v7 = 0;
    goto LABEL_14;
  }
  if ((*(unsigned char *)(v3 + 32) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(v3 + 32) & 2) != 0) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v5 = 0;
    if ((*(unsigned char *)(v3 + 32) & 4) != 0) {
      goto LABEL_8;
    }
LABEL_12:
    uint64_t v6 = 0;
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v5 = *(void *)(v3 + 16);
  if ((*(unsigned char *)(v3 + 32) & 4) == 0) {
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v6 = *(void *)(v3 + 24);
LABEL_13:
  uint64_t v7 = v5 ^ v4 ^ v6;
LABEL_14:
  uint64_t v8 = *((void *)this + 22);
  if (!v8)
  {
    uint64_t v12 = 0;
    goto LABEL_24;
  }
  if ((*(unsigned char *)(v8 + 32) & 1) == 0)
  {
    uint64_t v9 = 0;
    if ((*(unsigned char *)(v8 + 32) & 2) != 0) {
      goto LABEL_17;
    }
LABEL_21:
    uint64_t v10 = 0;
    if ((*(unsigned char *)(v8 + 32) & 4) != 0) {
      goto LABEL_18;
    }
LABEL_22:
    uint64_t v11 = 0;
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)(v8 + 8);
  if ((*(unsigned char *)(v8 + 32) & 2) == 0) {
    goto LABEL_21;
  }
LABEL_17:
  uint64_t v10 = *(void *)(v8 + 16);
  if ((*(unsigned char *)(v8 + 32) & 4) == 0) {
    goto LABEL_22;
  }
LABEL_18:
  uint64_t v11 = *(void *)(v8 + 24);
LABEL_23:
  uint64_t v12 = v10 ^ v9 ^ v11;
LABEL_24:
  uint64_t v40 = v2;
  if (*((unsigned char *)this + 184)) {
    uint64_t v36 = *((void *)this + 6);
  }
  else {
    uint64_t v36 = 0;
  }
  uint64_t v13 = (drawing::StrokeData *)*((void *)this + 14);
  if (v13) {
    uint64_t v39 = drawing::StrokeData::hash_value(v13);
  }
  else {
    uint64_t v39 = 0;
  }
  uint64_t v14 = (drawing::Rectangle *)*((void *)this + 4);
  if (v14) {
    uint64_t v38 = drawing::Rectangle::hash_value(v14);
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v15 = (drawing::Transform *)*((void *)this + 21);
  if (v15) {
    uint64_t v37 = drawing::Transform::hash_value(v15);
  }
  else {
    uint64_t v37 = 0;
  }
  if ((*((unsigned char *)this + 184) & 4) != 0) {
    uint64_t v35 = *((void *)this + 16);
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v16 = *((void *)this + 20);
  if (!v16)
  {
    uint64_t v20 = 0;
    goto LABEL_49;
  }
  if ((*(unsigned char *)(v16 + 32) & 1) == 0)
  {
    uint64_t v17 = 0;
    if ((*(unsigned char *)(v16 + 32) & 2) != 0) {
      goto LABEL_42;
    }
LABEL_46:
    uint64_t v18 = 0;
    if ((*(unsigned char *)(v16 + 32) & 4) != 0) {
      goto LABEL_43;
    }
LABEL_47:
    uint64_t v19 = 0;
    goto LABEL_48;
  }
  uint64_t v17 = *(void *)(v16 + 8);
  if ((*(unsigned char *)(v16 + 32) & 2) == 0) {
    goto LABEL_46;
  }
LABEL_42:
  uint64_t v18 = *(void *)(v16 + 16);
  if ((*(unsigned char *)(v16 + 32) & 4) == 0) {
    goto LABEL_47;
  }
LABEL_43:
  uint64_t v19 = *(void *)(v16 + 24);
LABEL_48:
  uint64_t v20 = v18 ^ v17 ^ v19;
LABEL_49:
  uint64_t v21 = *((void *)this + 8);
  uint64_t v22 = *((void *)this + 9);
  if (v21 == v22)
  {
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = 0;
    do
    {
      v21 += 16;
      v23 ^= PBHashBytes();
    }
    while (v21 != v22);
  }
  uint64_t v24 = (drawing::Stroke **)*((void *)this + 17);
  uint64_t v25 = (drawing::Stroke **)*((void *)this + 18);
  if (v24 == v25)
  {
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = 0;
    do
    {
      unsigned int v27 = *v24++;
      v26 ^= drawing::Stroke::hash_value(v27);
    }
    while (v24 != v25);
  }
  uint64_t v28 = PBHashBytes();
  if (*((void *)this + 5)) {
    uint64_t v29 = PBHashBytes();
  }
  else {
    uint64_t v29 = 0;
  }
  if ((*((unsigned char *)this + 184) & 2) != 0) {
    uint64_t v30 = *((void *)this + 12);
  }
  else {
    uint64_t v30 = 0;
  }
  unint64_t v31 = (drawing::Transform *)*((void *)this + 7);
  if (v31) {
    uint64_t v32 = drawing::Transform::hash_value(v31);
  }
  else {
    uint64_t v32 = 0;
  }
  if (*((void *)this + 11)) {
    uint64_t v33 = PBHashBytes();
  }
  else {
    uint64_t v33 = 0;
  }
  return v7 ^ v40 ^ v12 ^ v36 ^ v39 ^ v38 ^ v37 ^ v28 ^ v35 ^ v20 ^ v23 ^ v26 ^ v29 ^ v30 ^ v32 ^ v33;
}

uint64_t drawing::Stroke::makeSortID(uint64_t this)
{
  if (!*(void *)(this + 104)) {
    operator new();
  }
  return this;
}

uint64_t drawing::Stroke::makeVersion(uint64_t this)
{
  if (!*(void *)(this + 176)) {
    operator new();
  }
  return this;
}

uint64_t drawing::Stroke::makeStrokeData(uint64_t this)
{
  if (!*(void *)(this + 112)) {
    operator new();
  }
  return this;
}

uint64_t drawing::Stroke::makeBounds(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t drawing::Stroke::makeTransform(uint64_t this)
{
  if (!*(void *)(this + 168)) {
    operator new();
  }
  return this;
}

uint64_t drawing::Stroke::makeSubstrokesVersion(uint64_t this)
{
  if (!*(void *)(this + 160)) {
    operator new();
  }
  return this;
}

uint64_t drawing::Stroke::makeInkTransform(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

void std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<PB::Data>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 2);
        v4 -= 16;
        free(v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<PB::Data>::__assign_with_size[abi:ne180100]<PB::Data*,PB::Data*>(uint64_t a1, PB::Data *a2, PB::Data *a3, unint64_t a4)
{
  int v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<PB::Data>::__vdeallocate((void **)a1);
    if (a4 >> 60) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<CGPoint>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PB::Data>,PB::Data*,PB::Data*,PB::Data*>(v8, a2, a3, *(PB::Data **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = (PB::Data *)((char *)a2 + 16 * v14);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PB::Data *,PB::Data *,PB::Data *>((int)&v20, a2, v15, (uint64_t)v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PB::Data>,PB::Data*,PB::Data*,PB::Data*>(v8, v15, a3, *(PB::Data **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PB::Data *,PB::Data *,PB::Data *>((int)&v21, a2, a3, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(void **)(v18 - 16);
      v18 -= 16;
      free(v19);
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1C45BA030(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C45BA038(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<PB::Data>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 2);
        v3 -= 16;
        free(v5);
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

PB::Data *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PB::Data>,PB::Data*,PB::Data*,PB::Data*>(int a1, PB::Data *a2, PB::Data *a3, PB::Data *this)
{
  uint64_t v7 = this;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      PB::Data::Data(this, v5);
      uint64_t v5 = (const PB::Data *)((char *)v5 + 16);
      this = (PB::Data *)((char *)v7 + 16);
      uint64_t v7 = (PB::Data *)((char *)v7 + 16);
    }
    while (v5 != a3);
  }
  return this;
}

void sub_1C45BA11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PB::Data>,PB::Data*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 16);
      v3 -= 16;
      free(v5);
    }
  }
  return a1;
}

PB::Data *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PB::Data *,PB::Data *,PB::Data *>(int a1, PB::Data *a2, PB::Data *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      PB::Data::Data((PB::Data *)&v8, v5);
      free(v8);
      uint64_t v5 = (const PB::Data *)((char *)v5 + 16);
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void std::vector<std::unique_ptr<drawing::Stroke>>::__vdeallocate(void **a1)
{
  if (*a1)
  {
    std::vector<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::__clear[abi:ne180100](a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::vector<PB::Data>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PB::Data>,std::reverse_iterator<PB::Data*>,std::reverse_iterator<PB::Data*>,std::reverse_iterator<PB::Data*>>((uint64_t)(a1 + 2), a1[1], (const PB::Data *)a1[1], *a1, (const PB::Data *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PB::Data>,std::reverse_iterator<PB::Data*>,std::reverse_iterator<PB::Data*>,std::reverse_iterator<PB::Data*>>(uint64_t a1, uint64_t a2, const PB::Data *a3, uint64_t a4, const PB::Data *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a6;
  uint64_t v11 = a7;
  if (a3 != a5)
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v8 = (const PB::Data *)((char *)v8 - 16);
      PB::Data::Data((PB::Data *)(a7 - 16), v8);
      a7 = v11 - 16;
      v11 -= 16;
    }
    while (v8 != a5);
    return v10;
  }
  return a6;
}

void sub_1C45BA364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PB::Data>,std::reverse_iterator<PB::Data*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void ***)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void ***)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *v3;
      v3 += 2;
      free(v5);
    }
  }
  return a1;
}

uint64_t std::__split_buffer<PB::Data>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void **)(i - 16);
    *(void *)(a1 + 16) = i - 16;
    free(v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::unique_ptr<drawing::Stroke>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<drawing::Stroke>>,std::reverse_iterator<std::unique_ptr<drawing::Stroke>*>,std::reverse_iterator<std::unique_ptr<drawing::Stroke>*>,std::reverse_iterator<std::unique_ptr<drawing::Stroke>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<drawing::Stroke>>,std::reverse_iterator<std::unique_ptr<drawing::Stroke>*>,std::reverse_iterator<std::unique_ptr<drawing::Stroke>*>,std::reverse_iterator<std::unique_ptr<drawing::Stroke>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<drawing::Stroke>>,std::reverse_iterator<std::unique_ptr<drawing::Stroke>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<drawing::Stroke>>,std::reverse_iterator<std::unique_ptr<drawing::Stroke>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void sub_1C45BAA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45BAD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45BB3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  _Unwind_Resume(a1);
}

id PKPaletteEraserNameForEraserType(uint64_t a1)
{
  if (a1 == 1)
  {
    uint64_t v1 = _PencilKitBundle();
    uint64_t v2 = v1;
    uint64_t v3 = @"Object Eraser";
    goto LABEL_5;
  }
  if (!a1)
  {
    uint64_t v1 = _PencilKitBundle();
    uint64_t v2 = v1;
    uint64_t v3 = @"Pixel Eraser";
LABEL_5:
    uint64_t v4 = [v1 localizedStringForKey:v3 value:v3 table:@"Localizable"];

    goto LABEL_7;
  }
  uint64_t v4 = 0;
LABEL_7:

  return v4;
}

uint64_t drawingV1::Color::Color(uint64_t this)
{
  *(void *)this = &unk_1F1FB0970;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_1F1FB0970;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void drawingV1::Color::~Color(drawingV1::Color *this)
{
  PB::Base::~Base(this);

  JUMPOUT(0x1C8783F10);
}

float drawingV1::Color::Color(drawingV1::Color *this, const drawingV1::Color *a2)
{
  *(void *)this = &unk_1F1FB0970;
  *((_DWORD *)this + 6) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if ((v2 & 8) != 0)
  {
    float result = *((float *)a2 + 5);
    char v3 = 8;
    *((unsigned char *)this + 24) = 8;
    *((float *)this + 5) = result;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 4);
    v3 |= 4u;
    *((unsigned char *)this + 24) = v3;
    *((float *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 24) = v3 | 1;
    *((float *)this + 2) = result;
    return result;
  }
  float result = *((float *)a2 + 3);
  v3 |= 2u;
  *((unsigned char *)this + 24) = v3;
  *((float *)this + 3) = result;
  if (*((unsigned char *)a2 + 24)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t drawingV1::Color::operator=(uint64_t a1, const drawingV1::Color *a2)
{
  if ((const drawingV1::Color *)a1 != a2)
  {
    drawingV1::Color::Color((drawingV1::Color *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float drawingV1::swap(drawingV1 *this, drawingV1::Color *a2, drawingV1::Color *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  int v4 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  int v6 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
  float result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float drawingV1::Color::Color(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1FB0970;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_1F1FB0970;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t drawingV1::Color::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = &unk_1F1FB0970;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t drawingV1::Color::formatText(drawingV1::Color *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "alpha", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "blue", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "green", *((float *)this + 4));
  if ((*((unsigned char *)this + 24) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "red", *((float *)this + 5));
LABEL_6:

  return MEMORY[0x1F4147498](a2);
}

uint64_t drawingV1::Color::readFrom(drawingV1::Color *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_37;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 24) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t drawingV1::Color::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 20));
    char v4 = *(unsigned char *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 12));
      if ((*(unsigned char *)(v3 + 24) & 1) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 8);

  return PB::Writer::write(a2, v5);
}

BOOL drawingV1::Color::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 24) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if (*(unsigned char *)(a1 + 24)) {
    return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  }
  return v2;
}

uint64_t drawingV1::Color::hash_value(drawingV1::Color *this)
{
  if ((*((unsigned char *)this + 24) & 8) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 24) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  float v8 = *((float *)this + 5);
  uint64_t v1 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 24) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 24) & 2) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 3);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if (*((unsigned char *)this + 24)) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 2);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ v1 ^ v5 ^ v7;
}

void sub_1C45BE5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45BE690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45BE7E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45BE874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45BEAB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _PKStrokeIDCompare(_PKStrokeID *a1, _PKStrokeID *a2)
{
  if (a1->clock < a2->clock) {
    return -1;
  }
  if (a1->clock > a2->clock) {
    return 1;
  }
  int v5 = uuid_compare(a1->replicaUUID, a2->replicaUUID);
  if (v5 < 0) {
    uint64_t result = -1;
  }
  else {
    uint64_t result = v5 != 0;
  }
  if (result != -1 && result != 1)
  {
    unsigned int subclock = a1->subclock;
    unsigned int v7 = a2->subclock;
    BOOL v8 = subclock >= v7;
    BOOL v9 = subclock > v7;
    if (v8) {
      return v9;
    }
    else {
      return -1;
    }
  }
  return result;
}

BOOL _PKStrokeIDEqual(_PKStrokeID *a1, _PKStrokeID *a2)
{
  return a1->clock == a2->clock && !uuid_compare(a1->replicaUUID, a2->replicaUUID) && a1->subclock == a2->subclock;
}

__n128 _PKStrokeIDCreate@<Q0>(__n128 *a1@<X1>, int a2@<W0>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = a2;
  __n128 result = *a1;
  *(__n128 *)(a4 + 4) = *a1;
  *(_DWORD *)(a4 + 20) = a3;
  return result;
}

void _PKStrokeIDUnique(void)
{
}

double PKLengthOfPointArray(uint64_t a1)
{
  uint64_t v1 = *(double **)a1;
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  unint64_t v3 = v2 - 1;
  if (v2 == 1) {
    return 0.0;
  }
  if (v2 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  }
  unint64_t v5 = v4 - 1;
  if (v2 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  }
  if (v6 >= v2 - 2) {
    unint64_t v6 = v2 - 2;
  }
  if (v2 == v6 || v5 == v6) {
    std::vector<double>::__throw_out_of_range[abi:ne180100]();
  }
  double v9 = *v1;
  double v8 = v1[1];
  unsigned int v7 = v1 + 3;
  double result = 0.0;
  do
  {
    double v11 = *(v7 - 1);
    double v12 = *v7;
    double result = result + sqrt((v8 - *v7) * (v8 - *v7) + (v9 - v11) * (v9 - v11));
    v7 += 2;
    double v8 = v12;
    double v9 = v11;
    --v3;
  }
  while (v3);
  return result;
}

void _PKSplitPathApplier(CGMutablePathRef **a1, const CGPathElement *a2)
{
  switch(a2->type)
  {
    case kCGPathElementMoveToPoint:
      CGMutablePathRef Mutable = CGPathCreateMutable();
      unint64_t v5 = Mutable;
      unsigned int v7 = a1[1];
      unint64_t v6 = (unint64_t)a1[2];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v32 = *a1;
        uint64_t v33 = v7 - *a1;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61) {
          std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v35 = v6 - (void)v32;
        if (v35 >> 2 > v34) {
          unint64_t v34 = v35 >> 2;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36)
        {
          if (v36 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v37 = (char *)operator new(8 * v36);
        }
        else
        {
          uint64_t v37 = 0;
        }
        uint64_t v38 = (CGPath **)&v37[8 * v33];
        *uint64_t v38 = v5;
        double v8 = v38 + 1;
        if (v7 != v32)
        {
          do
          {
            uint64_t v39 = *--v7;
            *--uint64_t v38 = v39;
          }
          while (v7 != v32);
          unsigned int v7 = *a1;
        }
        *a1 = v38;
        a1[1] = v8;
        a1[2] = (CGMutablePathRef *)&v37[8 * v36];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *unsigned int v7 = Mutable;
        double v8 = v7 + 1;
      }
      a1[1] = v8;
      points = a2->points;
      CGFloat x = points->x;
      CGFloat y = points->y;
      CGPathMoveToPoint(v5, 0, x, y);
      return;
    case kCGPathElementAddLineToPoint:
      double v9 = a1[1];
      if (v9 == *a1) {
        goto LABEL_38;
      }
      unsigned int v10 = *(v9 - 1);
      double v11 = a2->points;
      CGFloat v12 = v11->x;
      CGFloat v13 = v11->y;
      CGPathAddLineToPoint(v10, 0, v12, v13);
      break;
    case kCGPathElementAddQuadCurveToPoint:
      BOOL v14 = a1[1];
      if (v14 == *a1) {
        goto LABEL_38;
      }
      char v15 = *(v14 - 1);
      unsigned int v16 = a2->points;
      CGFloat v17 = v16->x;
      CGFloat v18 = v16->y;
      CGFloat v19 = v16[1].x;
      CGFloat v20 = v16[1].y;
      CGPathAddQuadCurveToPoint(v15, 0, v17, v18, v19, v20);
      break;
    case kCGPathElementAddCurveToPoint:
      char v21 = a1[1];
      if (v21 == *a1) {
        goto LABEL_38;
      }
      uint64_t v22 = *(v21 - 1);
      uint64_t v23 = a2->points;
      CGFloat v24 = v23->x;
      CGFloat v25 = v23->y;
      CGFloat v26 = v23[1].x;
      CGFloat v27 = v23[1].y;
      CGFloat v28 = v23[2].x;
      CGFloat v29 = v23[2].y;
      CGPathAddCurveToPoint(v22, 0, v24, v25, v26, v27, v28, v29);
      break;
    case kCGPathElementCloseSubpath:
      uint64_t v30 = a1[1];
      if (v30 == *a1) {
LABEL_38:
      }
        std::vector<double>::__throw_out_of_range[abi:ne180100]();
      unint64_t v31 = *(v30 - 1);
      CGPathCloseSubpath(v31);
      break;
    default:
      return;
  }
}

void PKSplitPath(const CGPath *a1, void *a2)
{
}

void CGPathAddFlattenedCurve(CGPath *a1, CGPoint a2, CGPoint a3, CGPoint a4, double a5)
{
  double y = a4.y;
  double x = a4.x;
  double v7 = a3.y;
  double v8 = a3.x;
  double v9 = a2.y;
  double v10 = a2.x;
  CGPoint CurrentPoint = CGPathGetCurrentPoint(a1);
  double v13 = CurrentPoint.x;
  double v14 = CurrentPoint.y;
  double v15 = v10 - CurrentPoint.x;
  CGFloat v34 = x;
  CGFloat v35 = y;
  double v16 = v8 - v10 - (v10 - CurrentPoint.x);
  double v17 = x - v8 - (v8 - v10);
  double v18 = v7 - v9 - (v9 - CurrentPoint.y);
  double v19 = y - v7 - (v7 - v9);
  double v20 = v18 * v18 + v16 * v16;
  if (v20 <= v19 * v19 + v17 * v17) {
    double v20 = v19 * v19 + v17 * v17;
  }
  double v21 = v20 * 9.0 * 0.0625;
  if (v21 > a5 * a5)
  {
    double v22 = v19 - v18;
    double v23 = v22 + (v9 - CurrentPoint.y + v18) * 3.0;
    double v24 = (v18 + v22) * 6.0;
    double v25 = v22 * 6.0;
    double v26 = v17 - v16;
    double v27 = v26 + (v15 + v16) * 3.0;
    double v28 = (v16 + v26) * 6.0;
    double v29 = v26 * 6.0;
    int v30 = 1;
    do
    {
      int v31 = v30;
      double v29 = v29 * 0.125;
      double v28 = v28 * 0.25 - v29;
      double v27 = v27 * 0.5 - v28 * 0.5;
      double v25 = v25 * 0.125;
      double v24 = v24 * 0.25 - v25;
      double v23 = v23 * 0.5 - v24 * 0.5;
      v30 *= 2;
      double v21 = v21 * 0.0625;
    }
    while (v21 > a5 * a5 && v30 <= 0x10000);
    if (v30 >= 2)
    {
      unsigned int v32 = (2 * v31) | 1;
      do
      {
        double v13 = v27 + v13;
        double v27 = v28 + v27;
        double v28 = v29 + v28;
        double v14 = v14 + v23;
        double v23 = v24 + v23;
        double v24 = v25 + v24;
        CGPathAddLineToPoint(a1, 0, v13, v14);
        --v32;
      }
      while (v32 > 2);
    }
  }

  CGPathAddLineToPoint(a1, 0, v34, v35);
}

void CGPathAddFlattenedQuadCurve(CGPath *a1, CGPoint a2, CGPoint a3, double a4)
{
  double y = a3.y;
  double x = a3.x;
  double v7 = a2.y;
  double v8 = a2.x;
  CGPoint CurrentPoint = CGPathGetCurrentPoint(a1);
  double v11 = x;
  double v12 = y;

  v15.double x = (x + v8 * 2.0) / 3.0;
  v15.double y = (y + v7 * 2.0) / 3.0;
  v14.double x = (CurrentPoint.x + v8 * 2.0) / 3.0;
  v14.double y = (CurrentPoint.y + v7 * 2.0) / 3.0;
  CGPathAddFlattenedCurve(a1, v14, v15, *(CGPoint *)&v11, a4);
}

void _PKAddFlattenedElementApplier(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      CGPathMoveToPoint(*(CGMutablePathRef *)a1, 0, **(CGFloat **)(a2 + 8), *(CGFloat *)(*(void *)(a2 + 8) + 8));
      break;
    case 1:
      CGPathAddLineToPoint(*(CGMutablePathRef *)a1, 0, **(CGFloat **)(a2 + 8), *(CGFloat *)(*(void *)(a2 + 8) + 8));
      break;
    case 2:
      CGPathAddFlattenedQuadCurve(*(CGPath **)a1, *(CGPoint *)*(void *)(a2 + 8), *(CGPoint *)(*(void *)(a2 + 8) + 16), *(double *)(a1 + 8));
      break;
    case 3:
      CGPathAddFlattenedCurve(*(CGPath **)a1, *(CGPoint *)*(void *)(a2 + 8), *(CGPoint *)(*(void *)(a2 + 8) + 16), *(CGPoint *)(*(void *)(a2 + 8) + 32), *(double *)(a1 + 8));
      break;
    case 4:
      CGPathCloseSubpath(*(CGMutablePathRef *)a1);
      break;
    default:
      return;
  }
}

void _PKControlPointsFromFlattenedPathApplier(uint64_t a1, int *a2)
{
  int v3 = *a2;
  if (*a2 == 4)
  {
    CGPoint v14 = *(_OWORD **)a1;
    double v13 = *(_OWORD **)(a1 + 8);
    uint64_t v15 = (uint64_t)v13 - *(void *)a1;
    if (v13 == *(_OWORD **)a1) {
      return;
    }
    uint64_t v16 = a1 + 16;
    unint64_t v17 = *(void *)(a1 + 16);
    if ((unint64_t)v13 >= v17)
    {
      uint64_t v26 = v15 >> 4;
      unint64_t v27 = (v15 >> 4) + 1;
      if (!(v27 >> 60))
      {
        unint64_t v28 = v17 - (void)v14;
        unint64_t v29 = (uint64_t)(v17 - (void)v14) >> 3;
        if (v29 > v27) {
          unint64_t v27 = v29;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v27;
        }
        if (v30) {
          int v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v16, v30);
        }
        else {
          int v31 = 0;
        }
        unsigned int v32 = &v31[16 * v26];
        uint64_t v33 = &v31[16 * v30];
        *(_OWORD *)unsigned int v32 = *v14;
        double v18 = v32 + 16;
        uint64_t v37 = *(_OWORD **)a1;
        CGFloat v34 = *(_OWORD **)(a1 + 8);
        if (v34 == *(_OWORD **)a1) {
          goto LABEL_46;
        }
        do
        {
          *((_OWORD *)v32 - 1) = *(v34 - 1);
          v32 -= 16;
          --v34;
        }
        while (v34 != v37);
        goto LABEL_45;
      }
LABEL_50:
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    *double v13 = *v14;
    double v18 = v13 + 1;
  }
  else
  {
    if (v3 == 1)
    {
      uint64_t v4 = (_OWORD *)*((void *)a2 + 1);
      uint64_t v19 = a1 + 16;
      unint64_t v20 = *(void *)(a1 + 16);
      double v7 = *(_OWORD **)(a1 + 8);
      if ((unint64_t)v7 >= v20)
      {
        uint64_t v21 = ((uint64_t)v7 - *(void *)a1) >> 4;
        unint64_t v22 = v21 + 1;
        if (!((unint64_t)(v21 + 1) >> 60))
        {
          uint64_t v23 = v20 - *(void *)a1;
          if (v23 >> 3 > v22) {
            unint64_t v22 = v23 >> 3;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24) {
            double v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v19, v24);
          }
          else {
            double v25 = 0;
          }
          unsigned int v32 = &v25[16 * v21];
          uint64_t v33 = &v25[16 * v24];
          *(_OWORD *)unsigned int v32 = *v4;
          double v18 = v32 + 16;
          unint64_t v36 = *(_OWORD **)a1;
          CGFloat v34 = *(_OWORD **)(a1 + 8);
          if (v34 == *(_OWORD **)a1) {
            goto LABEL_46;
          }
          do
          {
            *((_OWORD *)v32 - 1) = *(v34 - 1);
            v32 -= 16;
            --v34;
          }
          while (v34 != v36);
          goto LABEL_45;
        }
        goto LABEL_50;
      }
    }
    else
    {
      if (v3) {
        __assert_rtn("_PKControlPointsFromFlattenedPathApplier", "PKCGPathUtility.mm", 218, "element->type == kCGPathElementCloseSubpath");
      }
      uint64_t v4 = (_OWORD *)*((void *)a2 + 1);
      uint64_t v5 = a1 + 16;
      unint64_t v6 = *(void *)(a1 + 16);
      double v7 = *(_OWORD **)(a1 + 8);
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v8 = ((uint64_t)v7 - *(void *)a1) >> 4;
        unint64_t v9 = v8 + 1;
        if (!((unint64_t)(v8 + 1) >> 60))
        {
          uint64_t v10 = v6 - *(void *)a1;
          if (v10 >> 3 > v9) {
            unint64_t v9 = v10 >> 3;
          }
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v9;
          }
          if (v11) {
            double v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v5, v11);
          }
          else {
            double v12 = 0;
          }
          unsigned int v32 = &v12[16 * v8];
          uint64_t v33 = &v12[16 * v11];
          *(_OWORD *)unsigned int v32 = *v4;
          double v18 = v32 + 16;
          CGFloat v35 = *(_OWORD **)a1;
          CGFloat v34 = *(_OWORD **)(a1 + 8);
          if (v34 == *(_OWORD **)a1) {
            goto LABEL_46;
          }
          do
          {
            *((_OWORD *)v32 - 1) = *(v34 - 1);
            v32 -= 16;
            --v34;
          }
          while (v34 != v35);
LABEL_45:
          CGFloat v34 = *(_OWORD **)a1;
LABEL_46:
          *(void *)a1 = v32;
          *(void *)(a1 + 8) = v18;
          *(void *)(a1 + 16) = v33;
          if (v34) {
            operator delete(v34);
          }
          goto LABEL_48;
        }
        goto LABEL_50;
      }
    }
    *double v7 = *v4;
    double v18 = v7 + 1;
  }
LABEL_48:
  *(void *)(a1 + 8) = v18;
}

void PKPointsFromPath(const CGPath *a1, const void **a2, double a3, double a4)
{
  if (a1)
  {
    CGMutablePathRef Mutable = CGPathCreateMutable();
    info[0] = Mutable;
    double v9 = 0.01;
    if (a4 > 0.0) {
      double v9 = a4;
    }
    *(double *)&info[1] = v9;
    CGPathApply(a1, info, (CGPathApplierFunction)_PKAddFlattenedElementApplier);
    CGPathApply(Mutable, a2, (CGPathApplierFunction)_PKControlPointsFromFlattenedPathApplier);
    CGPathRelease(Mutable);
    uint64_t v10 = *a2;
    uint64_t v11 = (uint64_t)a2[1];
    uint64_t v12 = v11 - (void)*a2;
    if (a3 < 1.79769313e308 && (unint64_t)v12 >= 0x11)
    {
      __p = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(&__p, v10, v11, v12 >> 4);
      PKPointsFromLineSegments((uint64_t *)&__p, (double **)a2, a3);
      if (__p)
      {
        uint64_t v15 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1C45BF5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PKPointsFromLineSegments(uint64_t *a1, double **a2, double a3)
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = ((v6 - *a1) >> 4) - 1;
  std::vector<CGPoint>::resize((uint64_t)a2, 0);
  uint64_t v36 = v8;
  if (v6 != v7 && v8 != 0)
  {
    uint64_t v10 = 0;
    uint64_t v11 = a2 + 2;
    do
    {
      uint64_t v12 = (double *)(*a1 + 16 * v10);
      double v13 = *v12;
      double v14 = v12[1];
      ++v10;
      uint64_t v15 = (double *)(*a1 + 16 * v10);
      double v16 = v15[1];
      double v17 = sqrt((v14 - v16) * (v14 - v16) + (*v12 - *v15) * (*v12 - *v15));
      if (v17 != 0.0)
      {
        double v18 = 1.0;
        if (a3 > 0.0) {
          double v18 = ceil(v17 / a3);
        }
        unint64_t v19 = 0;
        unint64_t v20 = (unint64_t)v18;
        double v21 = (double)(unint64_t)v18;
        double v22 = *v15 - v13;
        double v23 = v16 - v14;
        unint64_t v24 = a2[1];
        do
        {
          double v25 = (double)v19 / v21;
          double v26 = v13 + v22 * v25;
          double v27 = v14 + v23 * v25;
          if ((unint64_t)v24 >= *v11)
          {
            unint64_t v28 = *a2;
            uint64_t v29 = ((char *)v24 - (char *)*a2) >> 4;
            unint64_t v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 60) {
              std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v31 = *v11 - (void)v28;
            if (v31 >> 3 > v30) {
              unint64_t v30 = v31 >> 3;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v30;
            }
            if (v32)
            {
              uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(a2 + 2), v32);
              unint64_t v28 = *a2;
              unint64_t v24 = a2[1];
            }
            else
            {
              uint64_t v33 = 0;
            }
            CGFloat v34 = (double *)&v33[16 * v29];
            *CGFloat v34 = v26;
            v34[1] = v27;
            CGFloat v35 = v34;
            if (v24 != v28)
            {
              do
              {
                *((_OWORD *)v35 - 1) = *((_OWORD *)v24 - 1);
                v35 -= 2;
                v24 -= 2;
              }
              while (v24 != v28);
              unint64_t v28 = *a2;
            }
            unint64_t v24 = v34 + 2;
            *a2 = v35;
            a2[1] = v34 + 2;
            a2[2] = (double *)&v33[16 * v32];
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            double *v24 = v26;
            v24[1] = v27;
            v24 += 2;
          }
          a2[1] = v24;
          ++v19;
        }
        while (v19 <= v20);
      }
    }
    while (v10 != v36);
  }
}

void std::vector<CGPoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<CGPoint>::__append((void **)a1, a2 - v2);
  }
}

void PKArcLengthsFromPointArray(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 16);
  uint64_t v6 = *(double **)(a2 + 8);
  if ((unint64_t)v6 >= v4)
  {
    uint64_t v8 = *(double **)a2;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a2) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
LABEL_40:
    }
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      double v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v5, v12);
      uint64_t v8 = *(double **)a2;
      uint64_t v6 = *(double **)(a2 + 8);
    }
    else
    {
      double v13 = 0;
    }
    double v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)double v14 = 0;
    uint64_t v7 = (double *)(v14 + 8);
    while (v6 != v8)
    {
      uint64_t v16 = *((void *)v6-- - 1);
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    double *v6 = 0.0;
    uint64_t v7 = v6 + 1;
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v17 = *a1;
  uint64_t v18 = a1[1] - *a1;
  if (v18 != 16)
  {
    unint64_t v19 = 0;
    unint64_t v20 = v18 >> 4;
    do
    {
      if (v20 <= v19 || (unint64_t v21 = v19 + 1, v20 <= v19 + 1)) {
        std::vector<double>::__throw_out_of_range[abi:ne180100]();
      }
      double v22 = (double *)(v17 + 16 * v19);
      double v23 = sqrt((v22[1] - *(double *)(v17 + 16 * v21 + 8)) * (v22[1] - *(double *)(v17 + 16 * v21 + 8))+ (*v22 - *(double *)(v17 + 16 * v21)) * (*v22 - *(double *)(v17 + 16 * v21)));
      if ((unint64_t)v7 >= *v5)
      {
        double v25 = *(double **)a2;
        uint64_t v26 = ((uint64_t)v7 - *(void *)a2) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          goto LABEL_40;
        }
        uint64_t v28 = *v5 - (void)v25;
        if (v28 >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v5, v29);
          double v25 = *(double **)a2;
          uint64_t v7 = *(double **)(a2 + 8);
        }
        else
        {
          unint64_t v30 = 0;
        }
        uint64_t v31 = (double *)&v30[8 * v26];
        *uint64_t v31 = v23;
        unint64_t v24 = v31 + 1;
        while (v7 != v25)
        {
          uint64_t v32 = *((void *)v7-- - 1);
          *((void *)v31-- - 1) = v32;
        }
        *(void *)a2 = v31;
        *(void *)(a2 + 8) = v24;
        *(void *)(a2 + 16) = &v30[8 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *uint64_t v7 = v23;
        unint64_t v24 = v7 + 1;
      }
      *(void *)(a2 + 8) = v24;
      uint64_t v17 = *a1;
      unint64_t v20 = (a1[1] - *a1) >> 4;
      uint64_t v7 = v24;
      unint64_t v19 = v21;
    }
    while (v20 - 1 > v21);
  }
}

void std::vector<CGPoint>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      double v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v4, v12);
    }
    else {
      double v13 = 0;
    }
    double v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

uint64_t drawing::Transform::Transform(uint64_t this)
{
  *(void *)this = &unk_1F1FB0900;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_1F1FB0900;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void drawing::Transform::~Transform(drawing::Transform *this)
{
  PB::Base::~Base(this);

  JUMPOUT(0x1C8783F10);
}

float drawing::Transform::Transform(drawing::Transform *this, const drawing::Transform *a2)
{
  *(void *)this = &unk_1F1FB0900;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    float result = *((float *)a2 + 2);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((float *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 3);
    v3 |= 2u;
    *((unsigned char *)this + 32) = v3;
    *((float *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    float result = *((float *)a2 + 4);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((float *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 5);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((float *)this + 5) = result;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_14:
    float result = *((float *)a2 + 7);
    *((unsigned char *)this + 32) = v3 | 0x20;
    *((float *)this + 7) = result;
    return result;
  }
LABEL_13:
  float result = *((float *)a2 + 6);
  v3 |= 0x10u;
  *((unsigned char *)this + 32) = v3;
  *((float *)this + 6) = result;
  if ((*((unsigned char *)a2 + 32) & 0x20) != 0) {
    goto LABEL_14;
  }
  return result;
}

uint64_t drawing::Transform::operator=(uint64_t a1, const drawing::Transform *a2)
{
  if ((const drawing::Transform *)a1 != a2)
  {
    drawing::Transform::Transform((drawing::Transform *)v6, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v9;
    int v9 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float drawing::swap(drawing *this, drawing::Transform *a2, drawing::Transform *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  int v7 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v7;
  int v8 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v8;
  float result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  return result;
}

float drawing::Transform::Transform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1FB0900;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_1F1FB0900;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

uint64_t drawing::Transform::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v8 = &unk_1F1FB0900;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    long long v4 = *(_OWORD *)(a2 + 8);
    long long v9 = *(_OWORD *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(void *)(a1 + 24) = v6;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t drawing::Transform::formatText(drawing::Transform *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "a", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "b", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "c", *((float *)this + 4));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "d", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "tx", *((float *)this + 6));
  if ((*((unsigned char *)this + 32) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "ty", *((float *)this + 7));
LABEL_8:

  return MEMORY[0x1F4147498](a2);
}

uint64_t drawing::Transform::readFrom(drawing::Transform *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_43;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 2u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 3u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 4u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 5u:
        *((unsigned char *)this + 32) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 6u:
        *((unsigned char *)this + 32) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_42:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_40:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_43:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t drawing::Transform::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2, *(float *)(v3 + 24));
    if ((*(unsigned char *)(v3 + 32) & 0x20) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_13:
  float v5 = *(float *)(v3 + 28);

  return PB::Writer::write(a2, v5);
}

BOOL drawing::Transform::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 0x20) == 0;
  if ((*(unsigned char *)(a1 + 32) & 0x20) != 0) {
    return (*(unsigned char *)(a2 + 32) & 0x20) != 0 && *(float *)(a1 + 28) == *(float *)(a2 + 28);
  }
  return v2;
}

uint64_t drawing::Transform::hash_value(drawing::Transform *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_21:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_6;
    }
LABEL_22:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_23:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
  float v12 = *((float *)this + 2);
  uint64_t v1 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_21;
  }
LABEL_3:
  float v2 = *((float *)this + 3);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_22;
  }
LABEL_6:
  float v4 = *((float *)this + 4);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_23;
  }
LABEL_9:
  float v6 = *((float *)this + 5);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 32) & 0x10) != 0)
  {
LABEL_12:
    float v8 = *((float *)this + 6);
    uint64_t v9 = LODWORD(v8);
    if (v8 == 0.0) {
      uint64_t v9 = 0;
    }
    if ((*((unsigned char *)this + 32) & 0x20) != 0) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v11 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11;
  }
LABEL_24:
  uint64_t v9 = 0;
  if ((*((unsigned char *)this + 32) & 0x20) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  float v10 = *((float *)this + 7);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11;
}

uint64_t legacy_drawing::Color::Color(uint64_t this)
{
  *(void *)this = &unk_1F1FB0548;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_1F1FB0548;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void legacy_drawing::Color::~Color(legacy_drawing::Color *this)
{
  PB::Base::~Base(this);

  JUMPOUT(0x1C8783F10);
}

float legacy_drawing::Color::Color(legacy_drawing::Color *this, const legacy_drawing::Color *a2)
{
  *(void *)this = &unk_1F1FB0548;
  *((_DWORD *)this + 6) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if ((v2 & 8) != 0)
  {
    float result = *((float *)a2 + 5);
    char v3 = 8;
    *((unsigned char *)this + 24) = 8;
    *((float *)this + 5) = result;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 4);
    v3 |= 4u;
    *((unsigned char *)this + 24) = v3;
    *((float *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 24) = v3 | 1;
    *((float *)this + 2) = result;
    return result;
  }
  float result = *((float *)a2 + 3);
  v3 |= 2u;
  *((unsigned char *)this + 24) = v3;
  *((float *)this + 3) = result;
  if (*((unsigned char *)a2 + 24)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t legacy_drawing::Color::operator=(uint64_t a1, const legacy_drawing::Color *a2)
{
  if ((const legacy_drawing::Color *)a1 != a2)
  {
    legacy_drawing::Color::Color((legacy_drawing::Color *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float legacy_drawing::swap(legacy_drawing *this, legacy_drawing::Color *a2, legacy_drawing::Color *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  int v4 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  int v6 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
  float result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float legacy_drawing::Color::Color(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1FB0548;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_1F1FB0548;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t legacy_drawing::Color::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = &unk_1F1FB0548;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t legacy_drawing::Color::formatText(legacy_drawing::Color *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "alpha", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "blue", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "green", *((float *)this + 4));
  if ((*((unsigned char *)this + 24) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "red", *((float *)this + 5));
LABEL_6:

  return MEMORY[0x1F4147498](a2);
}

uint64_t legacy_drawing::Color::readFrom(legacy_drawing::Color *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_37;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 24) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t legacy_drawing::Color::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 20));
    char v4 = *(unsigned char *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 12));
      if ((*(unsigned char *)(v3 + 24) & 1) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 8);

  return PB::Writer::write(a2, v5);
}

BOOL legacy_drawing::Color::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 24) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if (*(unsigned char *)(a1 + 24)) {
    return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  }
  return v2;
}

uint64_t legacy_drawing::Color::hash_value(legacy_drawing::Color *this)
{
  if ((*((unsigned char *)this + 24) & 8) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 24) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  float v8 = *((float *)this + 5);
  uint64_t v1 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 24) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 24) & 2) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 3);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if (*((unsigned char *)this + 24)) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 2);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ v1 ^ v5 ^ v7;
}

id hidQueue()
{
  if (qword_1EB3C5EA0 != -1) {
    dispatch_once(&qword_1EB3C5EA0, &__block_literal_global_88_0);
  }
  id v0 = (void *)qword_1EB3C5EA8;

  return v0;
}

void stylusDeviceAddedCallback(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    if (PKQueryIsRollSupported()) {
      uint64_t v2 = 4;
    }
    else {
      uint64_t v2 = 0;
    }
    uint64_t v3 = os_log_create("com.apple.pencilkit", "PencilDevice");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v8 = v2;
      _os_log_impl(&dword_1C44F8000, v3, OS_LOG_TYPE_DEFAULT, "HID pencil device added callback: %lu", buf, 0xCu);
    }

    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = __stylusDeviceAddedCallback_block_invoke;
    _OWORD v4[3] = &unk_1E64C61E8;
    id v5 = v1;
    uint64_t v6 = v2;
    dispatch_async(MEMORY[0x1E4F14428], v4);
  }
}

void stylusDeviceRemovedCallback(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = os_log_create("com.apple.pencilkit", "PencilDevice");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C44F8000, v2, OS_LOG_TYPE_DEFAULT, "HID pencil device removed callback.", buf, 2u);
    }

    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __stylusDeviceRemovedCallback_block_invoke;
    block[3] = &unk_1E64C61C0;
    id v4 = v1;
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
}

uint64_t PKQueryIsRollSupported()
{
  void v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = IOHIDEventSystemClientCreateWithType();
  if (!v0) {
    return 0;
  }
  id v1 = (__IOHIDEventSystemClient *)v0;
  v16[0] = @"PrimaryUsagePage";
  v16[1] = @"PrimaryUsage";
  v17[0] = &unk_1F200E2E0;
  v17[1] = &unk_1F200E3A0;
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:v16 count:2];
  IOHIDEventSystemClientSetMatching();
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  CFArrayRef v3 = IOHIDEventSystemClientCopyServices(v1);
  uint64_t v4 = [(__CFArray *)v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    while (2)
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = (void *)IOHIDServiceClientCopyProperty(*(IOHIDServiceClientRef *)(*((void *)&v11 + 1) + 8 * v7), @"IsRollSupported");
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v9 = objc_msgSend(v8, "BOOLValue", (void)v11);

          goto LABEL_12;
        }

        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [(__CFArray *)v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  uint64_t v9 = 0;
LABEL_12:

  CFRelease(v1);
  return v9;
}

void __hidQueue_block_invoke()
{
  uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_UTILITY, 0);

  dispatch_queue_t v1 = dispatch_queue_create("com.apple.pencilkit.pencildevice", attr);
  uint64_t v2 = (void *)qword_1EB3C5EA8;
  qword_1EB3C5EA8 = (uint64_t)v1;
}

void __stylusDeviceAddedCallback_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && (*(void *)(v1 + 48) = *(void *)(a1 + 40), (uint64_t v2 = *(void *)(a1 + 32)) != 0))
  {
    *(unsigned char *)(v2 + 32) = 1;
    -[PKPencilDevice resetRollSupportedState](*(void *)(a1 + 32));
  }
  else
  {
    -[PKPencilDevice resetRollSupportedState](0);
  }
}

void __stylusDeviceRemovedCallback_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    *(unsigned char *)(v1 + 32) = 0;
    -[PKPencilDevice resetRollSupportedState](*(void *)(a1 + 32));
  }
  else
  {
    -[PKPencilDevice resetRollSupportedState](0);
  }
}

void sub_1C45C496C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45C4A18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45C4A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unsigned int v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PKLRUCache;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C45C4B88(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C45C4BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45C4CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45C4DC0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1C45C4F38(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1C45C5114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45C51AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45C53D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void sub_1C45C5488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45C5548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void sub_1C45C978C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  drawing::StrokeDelta::~StrokeDelta((drawing::StrokeDelta *)va);

  _Unwind_Resume(a1);
}

uint64_t PKProtobufUtilitiesParseArchiveFromNSDataWithHeader<drawing::StrokeDelta>(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if ((unint64_t)[v5 length] <= 7)
  {
    PKProtobufUtilitiesMalformedError(a3);
LABEL_3:
    uint64_t v6 = 0;
    goto LABEL_4;
  }
  int v17 = 0;
  objc_msgSend(v5, "getBytes:range:", &v17, 0, 4);
  if (v17 == -260869013)
  {
    unsigned __int8 v15 = 0;
    objc_msgSend(v5, "getBytes:range:", &v15, 4, 1);
    if (v15 >= 2u)
    {
      PKProtobufUtilitiesFormatTooNew(a3);
      goto LABEL_3;
    }
    unsigned __int16 v14 = 0;
    objc_msgSend(v5, "getBytes:range:", &v14, 6, 2);
    unint64_t v10 = v14;
    if (v14 < 8uLL || [v5 length] <= v10)
    {
      PKProtobufUtilitiesMalformedError(a3);
      goto LABEL_3;
    }
    id v11 = v5;
    uint64_t v12 = [v11 bytes];
    uint64_t v13 = v14;
    [v11 length];
    PB::Reader::Reader((PB::Reader *)v16, (const unsigned __int8 *)(v12 + v13));
    uint64_t v6 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v16);
    if ((v6 & 1) == 0) {
      PKProtobufUtilitiesMalformedError(a3);
    }
  }
  else
  {
    id v8 = v5;
    uint64_t v9 = (const unsigned __int8 *)[v8 bytes];
    [v8 length];
    PB::Reader::Reader((PB::Reader *)v16, v9);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v16);
    if ((v6 & 1) == 0) {
      PKProtobufUtilitiesMalformedError(a3);
    }
  }
LABEL_4:

  return v6;
}

void sub_1C45C9988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45C9A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45C9B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  drawing::StrokeDelta::~StrokeDelta((drawing::StrokeDelta *)va);
  _Unwind_Resume(a1);
}

id PKProtobufUtilitiesNSDataFromArchiveWithHeader<drawing::StrokeDelta>(uint64_t a1)
{
  int v11 = -260869013;
  char v10 = 1;
  char v9 = 0;
  PB::Writer::Writer((PB::Writer *)&v7);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, &v7);
  id v2 = objc_alloc(MEMORY[0x1E4F1CA58]);
  CFArrayRef v3 = (void *)[v2 initWithCapacity:v7 - v8 + 8];
  [v3 appendBytes:&v11 length:4];
  [v3 appendBytes:&v10 length:1];
  [v3 appendBytes:&v9 length:1];
  __int16 v6 = 8;
  [v3 appendBytes:&v6 length:2];
  [v3 appendBytes:v8 length:v7 - v8];
  uint64_t v4 = (void *)[v3 copy];

  PB::Writer::~Writer((PB::Writer *)&v7);

  return v4;
}

void sub_1C45C9C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void sub_1C45C9E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1C45C9F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45CA080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45CA0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45CA100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45CA130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45CA1F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  drawing::StrokeDelta::~StrokeDelta((drawing::StrokeDelta *)va);

  _Unwind_Resume(a1);
}

void sub_1C45CA374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45CA448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  drawing::StrokeDelta::~StrokeDelta((drawing::StrokeDelta *)va);
  _Unwind_Resume(a1);
}

void sub_1C45CA70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45CA940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45CAAF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45CB1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
}

void sub_1C45CB7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void _PKPaletteViewUpdateUI(void *a1, uint64_t a2)
{
  id v16 = a1;
  int v3 = [v16 isToolPreviewInstalled];
  uint64_t v4 = [v16 traitCollection];
  int v5 = [v16 wantsToolPreviewForTraitCollection:v4];

  if (!v5 || (v3 & 1) != 0)
  {
    uint64_t v7 = v16;
    if ((v5 | v3 ^ 1)) {
      goto LABEL_7;
    }
    [v16 _uninstallToolPreview];
  }
  else
  {
    __int16 v6 = [v16 clippingView];
    [v16 _installToolPreviewInView:v6];
  }
  uint64_t v7 = v16;
LABEL_7:
  double v8 = 1.0;
  if (([v7 useCompactSize] & 1) == 0)
  {
    char v9 = [v16 paletteScaleFactorPolicy];
    [v16 adjustedWindowSceneBounds];
    objc_msgSend(v9, "scaleFactorForWindowBounds:");
    double v8 = v10;
  }
  [v16 _setPaletteScaleFactor:a2 notifyDidChange:v8];
  int v11 = [v16 traitCollection];
  uint64_t v12 = [v16 window];
  uint64_t v13 = [v12 windowScene];
  BOOL v14 = PKUseCompactSize(v11, v13);

  unsigned __int8 v15 = [v16 clippingView];
  [v15 setClipsToBounds:!v14];
}

void sub_1C45D2FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45D3078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45D329C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Unwind_Resume(a1);
}

void sub_1C45D3440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45D35E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  int v17 = v16;
  objc_destroyWeak(v17);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C45D3708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1C45D3B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45D3BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45D3C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45D3CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45D43C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL PKIsRightHandedGrip(double a1)
{
  if (a1 < 0.0) {
    a1 = -a1;
  }
  return a1 < 1.57079633;
}

double PKSqueezePaletteViewStartAngle(int a1, double a2)
{
  if (a2 < 0.0) {
    a2 = -a2;
  }
  double v2 = 4.38077642;
  if (a1) {
    double v2 = 5.70722665;
  }
  BOOL v3 = a2 < 1.57079633;
  double result = 3.45575192;
  if (!v3) {
    return v2;
  }
  return result;
}

double PKSqueezePaletteViewSize()
{
  double v0 = *(double *)&PKSqueezePaletteViewRadius
     + *(double *)&PKSqueezePaletteViewContentHeight * 0.5
     + *(double *)&PKSqueezePaletteViewRadius
     + *(double *)&PKSqueezePaletteViewContentHeight * 0.5;
  uint64_t v1 = [MEMORY[0x1E4FB1BA8] mainScreen];
  [v1 scale];
  double v3 = round(v0 * v2) / v2;

  return v3;
}

void PKSqueezePaletteViewConfigureShadow(void *a1, int a2)
{
  id v3 = a1;
  id v8 = v3;
  LODWORD(v4) = 1034147594;
  if (a2)
  {
    *(float *)&double v4 = 0.13;
    double v5 = 16.0;
  }
  else
  {
    double v5 = 0.5;
  }
  if (a2) {
    double v6 = 5.0;
  }
  else {
    double v6 = 0.0;
  }
  [v3 setShadowOpacity:v4];
  [v8 setShadowRadius:v5];
  objc_msgSend(v8, "setShadowOffset:", 0.0, v6);
  id v7 = [MEMORY[0x1E4FB1618] blackColor];
  objc_msgSend(v8, "setShadowColor:", objc_msgSend(v7, "CGColor"));
}

double PKSqueezePaletteViewDisplayRectForWindowBounds()
{
  return 20.0;
}

double PKSqueezePaletteViewScaleFactor(void *a1, double a2, double a3, double a4, double a5, double a6)
{
  id v8 = a1;
  char v9 = v8;
  if (v8) {
    double v10 = -[PKToolPicker _fullScreenWindowScaleFactor]((uint64_t)v8);
  }
  else {
    double v10 = 1.0;
  }
  if (a6 > a4) {
    double v10 = a4 / a6 * v10;
  }

  return v10;
}

double PKSqueezePaletteViewExpandedToolsLayoutEndAngleOffsetX(double a1)
{
  return a1 / 6.0;
}

double PKSqueezePaletteViewAdjustedHoverLocation(double a1, double a2, double a3)
{
  if (a3 < 0.0) {
    a3 = -a3;
  }
  BOOL v3 = a3 < 1.57079633;
  double v4 = -30.0;
  if (v3) {
    double v4 = 30.0;
  }
  return a1 + v4;
}

double PKSqueezePaletteButtonSize()
{
  return 37.0;
}

id PKSqueezePaletteButtonBaseBackgroundColor(void *a1)
{
  if ([a1 userInterfaceStyle] == 2)
  {
    uint64_t v1 = [MEMORY[0x1E4FB1618] whiteColor];
    double v2 = v1;
    double v3 = 0.1;
  }
  else
  {
    uint64_t v1 = [MEMORY[0x1E4FB1618] blackColor];
    double v2 = v1;
    double v3 = 0.05;
  }
  double v4 = [v1 colorWithAlphaComponent:v3];

  return v4;
}

id PKSqueezePaletteButtonBaseForegroundColor(void *a1)
{
  if ([a1 userInterfaceStyle] == 2)
  {
    uint64_t v1 = [MEMORY[0x1E4FB1618] whiteColor];
    double v2 = [v1 colorWithAlphaComponent:0.6];
  }
  else
  {
    double v2 = [MEMORY[0x1E4FB1618] colorWithRed:0.235294119 green:0.235294119 blue:0.262745112 alpha:1.0];
  }

  return v2;
}

id PKSqueezePaletteButtonExpandedLayoutBaseBackgroundColor(void *a1)
{
  if ([a1 userInterfaceStyle] == 2) {
    [MEMORY[0x1E4FB1618] blackColor];
  }
  else {
  uint64_t v1 = [MEMORY[0x1E4FB1618] whiteColor];
  }
  double v2 = [v1 colorWithAlphaComponent:0.95];

  return v2;
}

id PKSqueezePaletteStrokeWeightButtonForegroundColor(void *a1)
{
  if ([a1 userInterfaceStyle] == 2) {
    [MEMORY[0x1E4FB1618] whiteColor];
  }
  else {
  uint64_t v1 = [MEMORY[0x1E4FB1618] blackColor];
  }

  return v1;
}

id PKSqueezePaletteStrokeWeightButtonSelectedForegroundColor(void *a1)
{
  if ([a1 userInterfaceStyle] == 2) {
    [MEMORY[0x1E4FB1618] blackColor];
  }
  else {
  uint64_t v1 = [MEMORY[0x1E4FB1618] whiteColor];
  }

  return v1;
}

uint64_t PKSqueezePaletteStrokeWeightButtonBackgroundColor()
{
  return [MEMORY[0x1E4FB1618] clearColor];
}

id PKSqueezePaletteStrokeWeightButtonSelectedBackgroundColor(void *a1)
{
  if ([a1 userInterfaceStyle] == 2) {
    [MEMORY[0x1E4FB1618] whiteColor];
  }
  else {
  uint64_t v1 = [MEMORY[0x1E4FB1618] blackColor];
  }

  return v1;
}

double PKSqueezePaletteToolClipIndicatorCenterXOffset(int a1)
{
  double result = 10.0;
  if (a1) {
    return 17.0;
  }
  return result;
}

uint64_t PKSqueezePaletteToolClipIndicatorColor()
{
  return [MEMORY[0x1E4FB1618] colorWithDynamicProvider:&__block_literal_global_20];
}

id __PKSqueezePaletteToolClipIndicatorColor_block_invoke(uint64_t a1, void *a2)
{
  if ([a2 userInterfaceStyle] == 2) {
    [MEMORY[0x1E4FB1618] whiteColor];
  }
  else {
  double v2 = [MEMORY[0x1E4FB1618] blackColor];
  }
  double v3 = [v2 colorWithAlphaComponent:0.1];

  return v3;
}

double PKSqueezePaletteToolOffsetY(int a1)
{
  double result = 8.0;
  if (a1) {
    return -16.0;
  }
  return result;
}

double PKSqueezePaletteExpandedLassoToolTrailingMargin()
{
  return 0.0523598776;
}

void sub_1C45D5B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C45D5D0C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1C45DA148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C45DB6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1C45DB808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45DB904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45DBA5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45DBBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::vector<PKCompressedStrokePoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<PKCompressedStrokePoint>::__append((void **)a1, a2 - v2);
  }
}

void sub_1C45DBD88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45DBEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, PKStrokePathPointsPrivate *a12)
{
  _Unwind_Resume(a1);
}

void PKStrokePathPointsPrivate::~PKStrokePathPointsPrivate(PKStrokePathPointsPrivate *this)
{
  begin = this->pointsData.__begin_;
  if (begin)
  {
    this->pointsData.__end_ = begin;
    operator delete(begin);
  }
  cntrl = this->constants.__cntrl_;
  if (cntrl) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cntrl);
  }
}

void sub_1C45DC0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, PKStrokePathPointsPrivate *a4)
{
  _Unwind_Resume(a1);
}

void sub_1C45DC224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, PKStrokePathPointsPrivate *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  PKStrokePathPointsPrivate::~PKStrokePathPointsPrivate((PKStrokePathPointsPrivate *)&a12);

  _Unwind_Resume(a1);
}

void sub_1C45DC36C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t PKStrokePathPointsPrivate::count(PKStrokePathPointsPrivate *this)
{
  unint64_t v1 = this->pointsData.__end_ - this->pointsData.__begin_;
  if (v1) {
    return v1 / *((void *)this->constants.__ptr_ + 6);
  }
  else {
    return 0;
  }
}

double PKStrokePathPointsPrivate::locationAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  unint64_t v5 = end - begin;
  if (end != begin && (unint64_t v6 = *((void *)ptr + 6), v5 / v6 > a2) && (*((unsigned char *)ptr + 32) & 1) != 0) {
    id v7 = &begin[*((unsigned __int8 *)ptr + 88) + v6 * a2];
  }
  else {
    id v7 = (char *)ptr + 56;
  }
  return *(float *)v7;
}

float PKStrokePathPointsPrivate::setLocation(PKStrokePathPointsPrivate *this, CGPoint a2, unint64_t a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  unint64_t v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    unint64_t v7 = *((void *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((unsigned char *)ptr + 32) & 1) != 0)
    {
      id v8 = &begin[*((unsigned __int8 *)ptr + 88) + v7 * a3];
      *(float *)&a2.double x = a2.x;
      float y = a2.y;
      *(_DWORD *)id v8 = LODWORD(a2.x);
      *((float *)v8 + 1) = y;
    }
  }
  return *(float *)&a2.x;
}

uint64_t PKStrokePathPointsPrivate::pointFlags(PKStrokePathPointsPrivate *this)
{
  return *((void *)this->constants.__ptr_ + 4);
}

double PKStrokePathPointsPrivate::radiusAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  unint64_t v5 = end - begin;
  if (end != begin && (unint64_t v6 = *((void *)ptr + 6), v5 / v6 > a2) && (*((unsigned char *)ptr + 32) & 4) != 0) {
    unint64_t v7 = &begin[*((unsigned __int8 *)ptr + 90) + v6 * a2];
  }
  else {
    unint64_t v7 = (char *)ptr + 68;
  }
  return *(float *)v7;
}

float PKStrokePathPointsPrivate::setRadius(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  unint64_t v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    unint64_t v7 = *((void *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((unsigned char *)ptr + 32) & 4) != 0)
    {
      *(float *)&a2 = a2;
      *(_DWORD *)&begin[*((unsigned __int8 *)ptr + 90) + v7 * a3] = LODWORD(a2);
    }
  }
  return *(float *)&a2;
}

PKStrokePathPointsShared *PKStrokePathPointsShared::updateFromCachedValues(PKStrokePathPointsShared *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1)
  {
    unint64_t v2 = this;
    unint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = *((void *)this + 1);
    do
    {
      if ((v1 & (1 << v3)) != 0) {
        unint64_t v4 = v3;
      }
      ++v3;
    }
    while (v3 != 10);
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if ((*((void *)v2 + 5) & (1 << v6)) != 0)
      {
      }
      ++v6;
    }
    while (v6 <= v4);
  }
  return this;
}

double PKStrokePathPointsPrivate::radius2AtIndex(PKStrokePathPointsPrivate *this, unint64_t a2)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  unint64_t v5 = end - begin;
  if (end != begin && (unint64_t v6 = *((void *)ptr + 6), v5 / v6 > a2) && (*((unsigned char *)ptr + 33) & 2) != 0) {
    uint64_t v7 = &begin[*((unsigned __int8 *)ptr + 97) + v6 * a2];
  }
  else {
    uint64_t v7 = (char *)ptr + 84;
  }
  return *(float *)v7;
}

float PKStrokePathPointsPrivate::setRadius2(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  unint64_t v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    unint64_t v7 = *((void *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((unsigned char *)ptr + 33) & 2) != 0)
    {
      *(float *)&a2 = a2;
      *(_DWORD *)&begin[*((unsigned __int8 *)ptr + 97) + v7 * a3] = LODWORD(a2);
    }
  }
  return *(float *)&a2;
}

uint64_t PKStrokePathPointsPrivate::constantFlags(PKStrokePathPointsPrivate *this)
{
  return *((void *)this->constants.__ptr_ + 5);
}

double PKStrokePathPointsPrivate::timestampAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  unint64_t v5 = end - begin;
  if (end != begin && (unint64_t v6 = *((void *)ptr + 6), v5 / v6 > a2) && (*((unsigned char *)ptr + 32) & 2) != 0) {
    unint64_t v7 = &begin[*((unsigned __int8 *)ptr + 89) + v6 * a2];
  }
  else {
    unint64_t v7 = (char *)ptr + 64;
  }
  return *(float *)v7;
}

double PKStrokePathPointsPrivate::azimuthAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2, double a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  unint64_t v6 = end - begin;
  if (end != begin && (unint64_t v7 = *((void *)ptr + 6), v6 / v7 > a2) && (*((unsigned char *)ptr + 32) & 0x40) != 0) {
    id v8 = &begin[*((unsigned __int8 *)ptr + 94) + v7 * a2];
  }
  else {
    id v8 = (char *)ptr + 78;
  }
  LOWORD(a3) = *(_WORD *)v8;
  return (double)*(unint64_t *)&a3 / 10430.2192;
}

void sub_1C45DCCDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

PKStrokePathPointsShared *PKStrokePathPointsShared::computeCachedValues(PKStrokePathPointsShared *this)
{
  long long v15 = 0u;
  long long v16 = 0u;
  BOOL v14 = this;
  uint64_t v1 = *((void *)this + 5);
  if (v1)
  {
    unint64_t v2 = 0;
    unint64_t v3 = 0;
    uint64_t v4 = *((void *)this + 1);
    do
    {
      if ((v1 & (1 << v2)) != 0) {
        unint64_t v3 = v2;
      }
      ++v2;
    }
    while (v2 != 10);
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      if ((v1 & (1 << v5)) != 0)
      {
        v6 += v7;
      }
      ++v5;
    }
    while (v5 <= v3);
  }
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = *((void *)v14 + 4);
  do
  {
    *((unsigned char *)v14 + v8 + 88) = v9;
    if ((v10 & (1 << v8)) != 0) {
    ++v8;
    }
  }
  while (v8 != 10);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  long long v13 = v16;
  *(_OWORD *)((char *)v14 + 56) = v15;
  *(_OWORD *)((char *)v14 + 72) = v13;
  do
  {
    if ((v10 & (1 << v11)) != 0) {
      uint64_t v12 = v11;
    }
    ++v11;
  }
  while (v11 != 10);
  *((void *)v14 + 13) = v12;
  return this;
}

double PKStrokePathPointsPrivate::slice(PKStrokePathPointsPrivate *this, _NSRange a2, PKStrokePathPointsPrivate *a3)
{
  NSUInteger length = a2.length;
  NSUInteger location = a2.location;
  ptr = this->constants.__ptr_;
  cntrl = this->constants.__cntrl_;
  if (cntrl) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)cntrl + 1, 1uLL, memory_order_relaxed);
  }
  char v9 = a3->constants.__cntrl_;
  a3->constants.__ptr_ = ptr;
  a3->constants.__cntrl_ = cntrl;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
  }
  uint64_t v10 = *((void *)this->constants.__ptr_ + 6);
  begin = this->pointsData.__begin_;
  long long v15 = 0;
  long long v14 = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v14, &begin[v10 * location], (uint64_t)&begin[v10 * (location + length)], v10 * length);
  uint64_t v12 = a3->pointsData.__begin_;
  if (v12)
  {
    a3->pointsData.__end_ = v12;
    operator delete(v12);
  }
  double result = *(double *)&v14;
  *(_OWORD *)&a3->pointsData.__begin_ = v14;
  a3->pointsData.__end_cap_.__value_ = v15;
  return result;
}

void *PKStrokePathPointsPrivate::operator[]@<X0>(void *result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = (void *)*result;
  long long v5 = *(_OWORD *)(*result + 72);
  *a3 = *(_OWORD *)(*result + 56);
  a3[1] = v5;
  uint64_t v6 = v4[4];
  if (v6)
  {
    uint64_t v7 = result[2];
    uint64_t v8 = v4[6];
    uint64_t v9 = v8 * a2;
    if (v8 * a2 + v8 <= (unint64_t)(result[3] - v7))
    {
      unint64_t v10 = 0;
      unint64_t v11 = v4[13];
      do
      {
        if ((v6 & (1 << v10)) != 0)
        {
          v9 += v12;
        }
        ++v10;
      }
      while (v10 <= v11);
    }
  }
  return result;
}

void sub_1C45DD9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float PKStrokePathPointsPrivate::setTimestamp(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  unint64_t v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    unint64_t v7 = *((void *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((unsigned char *)ptr + 32) & 2) != 0)
    {
      *(float *)&a2 = a2;
      *(_DWORD *)&begin[*((unsigned __int8 *)ptr + 89) + v7 * a3] = LODWORD(a2);
    }
  }
  return *(float *)&a2;
}

double PKStrokePathPointsPrivate::aspectRatioAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2, double a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  unint64_t v6 = end - begin;
  if (end != begin && (unint64_t v7 = *((void *)ptr + 6), v6 / v7 > a2) && (*((unsigned char *)ptr + 32) & 8) != 0) {
    uint64_t v8 = &begin[*((unsigned __int8 *)ptr + 91) + v7 * a2];
  }
  else {
    uint64_t v8 = (char *)ptr + 72;
  }
  LOWORD(a3) = *(_WORD *)v8;
  return (double)*(unint64_t *)&a3 / 1000.0;
}

PKStrokePathPointsPrivate *PKStrokePathPointsPrivate::setAspectRatio(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  unint64_t v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    unint64_t v7 = *((void *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((unsigned char *)ptr + 32) & 8) != 0)
    {
      unint64_t v8 = *((unsigned __int8 *)ptr + 91) + v7 * a3;
      double v9 = a2 * 1000.0;
      double v10 = 0.0;
      if (v9 >= 0.0)
      {
        double v10 = v9;
        if (v9 > 65535.0) {
          double v10 = 65535.0;
        }
      }
      *(_WORD *)&begin[v8] = (int)v10;
    }
  }
  return this;
}

double PKStrokePathPointsPrivate::edgeWidthAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2, double a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  unint64_t v6 = end - begin;
  if (end != begin && (unint64_t v7 = *((void *)ptr + 6), v6 / v7 > a2) && (*((unsigned char *)ptr + 32) & 0x10) != 0) {
    unint64_t v8 = &begin[*((unsigned __int8 *)ptr + 92) + v7 * a2];
  }
  else {
    unint64_t v8 = (char *)ptr + 74;
  }
  LOWORD(a3) = *(_WORD *)v8;
  return (double)*(unint64_t *)&a3 / 10.0;
}

PKStrokePathPointsPrivate *PKStrokePathPointsPrivate::setEdgeWidth(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  unint64_t v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    unint64_t v7 = *((void *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((unsigned char *)ptr + 32) & 0x10) != 0)
    {
      unint64_t v8 = *((unsigned __int8 *)ptr + 92) + v7 * a3;
      double v9 = a2 * 10.0;
      double v10 = 0.0;
      if (v9 >= 0.0)
      {
        double v10 = v9;
        if (v9 > 65535.0) {
          double v10 = 65535.0;
        }
      }
      *(_WORD *)&begin[v8] = (int)v10;
    }
  }
  return this;
}

double PKStrokePathPointsPrivate::forceAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2, double a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  unint64_t v6 = end - begin;
  if (end != begin && (unint64_t v7 = *((void *)ptr + 6), v6 / v7 > a2) && (*((unsigned char *)ptr + 32) & 0x20) != 0) {
    unint64_t v8 = &begin[*((unsigned __int8 *)ptr + 93) + v7 * a2];
  }
  else {
    unint64_t v8 = (char *)ptr + 76;
  }
  LOWORD(a3) = *(_WORD *)v8;
  return (double)*(unint64_t *)&a3 / 1000.0;
}

PKStrokePathPointsPrivate *PKStrokePathPointsPrivate::setForce(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  unint64_t v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    unint64_t v7 = *((void *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((unsigned char *)ptr + 32) & 0x20) != 0)
    {
      unint64_t v8 = *((unsigned __int8 *)ptr + 93) + v7 * a3;
      double v9 = a2 * 1000.0;
      double v10 = 0.0;
      if (v9 >= 0.0)
      {
        double v10 = v9;
        if (v9 > 65535.0) {
          double v10 = 65535.0;
        }
      }
      *(_WORD *)&begin[v8] = (int)v10;
    }
  }
  return this;
}

PKStrokePathPointsPrivate *PKStrokePathPointsPrivate::setAzimuth(PKStrokePathPointsPrivate *this, long double a2, unint64_t a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  unint64_t v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    unint64_t v7 = *((void *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((unsigned char *)ptr + 32) & 0x40) != 0)
    {
      unint64_t v8 = *((unsigned __int8 *)ptr + 94) + v7 * a3;
      this = (PKStrokePathPointsPrivate *)PKCompressedStrokePoint::compressAzimuth((PKCompressedStrokePoint *)this, a2);
      *(_WORD *)&begin[v8] = (_WORD)this;
    }
  }
  return this;
}

double PKStrokePathPointsPrivate::altitudeAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2, double a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  unint64_t v6 = end - begin;
  if (end != begin && (unint64_t v7 = *((void *)ptr + 6), v6 / v7 > a2) && (*((unsigned char *)ptr + 32) & 0x80) != 0) {
    unint64_t v8 = &begin[*((unsigned __int8 *)ptr + 95) + v7 * a2];
  }
  else {
    unint64_t v8 = (char *)ptr + 80;
  }
  LOWORD(a3) = *(_WORD *)v8;
  return (double)*(unint64_t *)&a3 / 41720.8768;
}

PKStrokePathPointsPrivate *PKStrokePathPointsPrivate::setAltitude(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  unint64_t v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    unint64_t v7 = *((void *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((unsigned char *)ptr + 32) & 0x80) != 0)
    {
      unint64_t v8 = *((unsigned __int8 *)ptr + 95) + v7 * a3;
      double v9 = a2 * 41720.8768;
      double v10 = 0.0;
      if (v9 >= 0.0)
      {
        double v10 = v9;
        if (v9 > 65535.0) {
          double v10 = 65535.0;
        }
      }
      *(_WORD *)&begin[v8] = (int)v10;
    }
  }
  return this;
}

double PKStrokePathPointsPrivate::opacityAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2, double a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  unint64_t v6 = end - begin;
  if (end != begin && (unint64_t v7 = *((void *)ptr + 6), v6 / v7 > a2) && (*((unsigned char *)ptr + 33) & 1) != 0) {
    unint64_t v8 = &begin[*((unsigned __int8 *)ptr + 96) + v7 * a2];
  }
  else {
    unint64_t v8 = (char *)ptr + 82;
  }
  LOWORD(a3) = *(_WORD *)v8;
  return (double)*(unint64_t *)&a3 / 32767.5;
}

PKStrokePathPointsPrivate *PKStrokePathPointsPrivate::setOpacity(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  begin = this->pointsData.__begin_;
  enCGFloat d = this->pointsData.__end_;
  unint64_t v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    unint64_t v7 = *((void *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((unsigned char *)ptr + 33) & 1) != 0)
    {
      unint64_t v8 = *((unsigned __int8 *)ptr + 96) + v7 * a3;
      double v9 = a2 * 32767.5;
      double v10 = 0.0;
      if (v9 >= 0.0)
      {
        double v10 = v9;
        if (v9 > 65535.0) {
          double v10 = 65535.0;
        }
      }
      *(_WORD *)&begin[v8] = (int)v10;
    }
  }
  return this;
}

double PKStrokePathPointsPrivate::pointAtIndex@<D0>(PKStrokePathPointsPrivate *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  memset(&v7, 0, sizeof(v7));
  PKStrokePathPointsPrivate::operator[](this, a2, &v7);
  PKCompressedStrokePoint v6 = v7;
  return PKDecompressStrokePoint(&v6, *(double *)this->constants.__ptr_, a3);
}

void sub_1C45DE34C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45DE808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45DE8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45DE958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45DEDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C45DF098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45DF198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  drawing::StrokeData::~StrokeData((drawing::StrokeData *)va);

  _Unwind_Resume(a1);
}

void sub_1C45DF26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  drawing::StrokeData::~StrokeData((drawing::StrokeData *)va);
  _Unwind_Resume(a1);
}

void sub_1C45DF2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  PKCompressedStrokePoint v7 = result;
  unint64_t v8 = result[2];
  double v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *PKCompressedStrokePoint v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    double result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    double v9 = (char *)v7[1];
    goto LABEL_17;
  }
  size_t v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      double result = memmove(v9, __src, v16);
    }
    long long v15 = &v9[v16];
    goto LABEL_20;
  }
  long long v14 = &__src[v13];
  if (v12 != v9)
  {
    double result = memmove((void *)*result, __src, v13);
    double v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    double result = memmove(v9, v14, a3 - v14);
  }
  long long v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<PKCompressedStrokePoint>::__append(void **a1, unint64_t a2)
{
  PKCompressedStrokePoint v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  PKCompressedStrokePoint v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCompressedStrokePoint>>(v4, v12);
    }
    else {
      size_t v13 = 0;
    }
    long long v14 = &v13[32 * v10];
    long long v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    size_t v16 = &v14[32 * a2];
    char v18 = (char *)*a1;
    int v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      int v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PKCompressedStrokePoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    PKCompressedStrokePoint v6 = result;
    double result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C45DF824(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  unint64_t v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v12 = &v7[v11];
    size_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      long long v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      unint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    unint64_t v6 = result;
    double result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C45DF9DC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<PKStrokePathPointsShared>::shared_ptr[abi:ne180100]<PKStrokePathPointsShared,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C45DFA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<PKStrokePathPointsShared>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<PKStrokePathPointsShared *,std::shared_ptr<PKStrokePathPointsShared>::__shared_ptr_default_delete<PKStrokePathPointsShared,PKStrokePathPointsShared>,std::allocator<PKStrokePathPointsShared>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C8783F10);
}

void std::__shared_ptr_pointer<PKStrokePathPointsShared *,std::shared_ptr<PKStrokePathPointsShared>::__shared_ptr_default_delete<PKStrokePathPointsShared,PKStrokePathPointsShared>,std::allocator<PKStrokePathPointsShared>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<PKStrokePathPointsShared *,std::shared_ptr<PKStrokePathPointsShared>::__shared_ptr_default_delete<PKStrokePathPointsShared,PKStrokePathPointsShared>,std::allocator<PKStrokePathPointsShared>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<PKStrokePathPointsShared>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = *(void **)(a2 + 8);
    if (v2)
    {
      *(void *)(a2 + 16) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1C8783F10);
  }
}

void NotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = +[PKTextInputLanguageSelectionController sharedInstance];
  [v4 performSelectorOnMainThread:sel__pencilPreferencesChangedCallback_ withObject:a3 waitUntilDone:0];
}

void sub_1C45E1E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void sub_1C45E2230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __PKDictationControllerClass_block_invoke()
{
  Class result = NSClassFromString(&cfstr_Uidictationcon.isa);
  _MergedGlobals_123 = (uint64_t)result;
  return result;
}

void sub_1C45E5770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::vector<ClipperLib::IntPoint>>::__assign_with_size[abi:ne180100]<std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<ClipperLib::IntPoint>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<ClipperLib::IntPoint>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<ClipperLib::IntPoint> *,std::vector<ClipperLib::IntPoint> *,std::vector<ClipperLib::IntPoint> *>((int)&v20, a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<ClipperLib::IntPoint> *,std::vector<ClipperLib::IntPoint> *,std::vector<ClipperLib::IntPoint> *>((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      long long v19 = *(void **)(v17 - 24);
      v17 -= 24;
      char v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1C45E597C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C45E5984(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  id v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<ClipperLib::IntPoint>::__init_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(v4, *(const void **)v6, *(void *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
      id v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C45E5A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      unint64_t v5 = *(void **)(v3 - 24);
      v3 -= 24;
      id v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<ClipperLib::IntPoint> *,std::vector<ClipperLib::IntPoint> *,std::vector<ClipperLib::IntPoint> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        std::vector<ClipperLib::IntPoint>::__assign_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(a4, *(char **)v5, *(void *)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3));
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *std::vector<ClipperLib::IntPoint>::__assign_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  char v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    Class result = std::vector<ClipperLib::IntPoint>::__vallocate[abi:ne180100](v7, v12);
    uint64_t v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    char v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      char v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    Class result = (char *)memmove(*(void **)result, __src, v15 - v9);
    char v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    char v18 = v9;
    long long v19 = v16;
LABEL_18:
    Class result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

void sub_1C45E7004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<PKStrokePathPointsShared>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void sub_1C45E70C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45E714C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45E724C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45E7778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45E815C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1C45E9100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location)
{
}

double DKULinearstep(double a1, double a2, double a3)
{
  double v3 = (a3 - a1) / (a2 - a1);
  double result = 0.0;
  if (v3 >= 0.0)
  {
    double result = v3;
    if (v3 > 1.0) {
      return 1.0;
    }
  }
  return result;
}

double DKUClamp(double a1, double a2, double a3)
{
  if (a1 >= a2)
  {
    a2 = a1;
    if (a1 > a3) {
      return a3;
    }
  }
  return a2;
}

double DKUSmoothstep(double a1, double a2, double a3)
{
  double v3 = (a3 - a1) / (a2 - a1);
  double v4 = 0.0;
  if (v3 >= 0.0)
  {
    double v4 = v3;
    if (v3 > 1.0) {
      double v4 = 1.0;
    }
  }
  return v4 * v4 * (v4 * -2.0 + 3.0);
}

double DKURound(double a1)
{
  return round(a1);
}

double DKUFractionalPart(double a1)
{
  BOOL v1 = a1 <= 0.0;
  double v2 = -(-a1 - floor(-a1));
  double result = a1 - floor(a1);
  if (v1) {
    return v2;
  }
  return result;
}

double DKUMix(double a1, double a2, double a3)
{
  return a1 + (a2 - a1) * a3;
}

double DKURandom()
{
  return (double)random() / 2147483650.0;
}

double DKURandomBetween(double a1, double a2)
{
  return a1 + (a2 - a1) * ((double)random() / 2147483650.0);
}

double DKUReverseSquare(double a1)
{
  return 1.0 - (1.0 - a1) * (1.0 - a1);
}

long double DKUSineMap(double a1)
{
  return (sin(a1 * 3.14159265 + -1.57079633) + 1.0) * 0.5;
}

uint64_t PKSqueezePaletteViewLayoutIsExpandedOptionsLayout(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

uint64_t PKSqueezePaletteViewLayoutIsUndoRedoLayout(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    char isKindOfClass = 1;
  }
  else
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
  }

  return isKindOfClass & 1;
}

double PKPointOnArc(double a1, double a2, double a3, double a4)
{
  double v4 = a1 + a3 * __sincos_stret(a4).__cosval;
  uint64_t v5 = [MEMORY[0x1E4FB1BA8] mainScreen];
  [v5 scale];
  double v7 = 1.0 / v6 * round(v4 * v6);

  return v7;
}

void PKAngleForOffsetPosition(double a1, double a2, double a3, double a4)
{
  long double v4 = atan2(a2 - a4, a1 - a3);
  fmod(v4, 6.28318531);
}

void sub_1C45ECA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C45ED1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C45ED7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class __getTUICandidateLabelClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1EA3C6BB0)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    _OWORD v4[3] = __TextInputUILibraryCore_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E64C7050;
    uint64_t v6 = 0;
    qword_1EA3C6BB0 = _sl_dlopen();
    double v2 = (void *)v4[0];
    if (!qword_1EA3C6BB0)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("TUICandidateLabel");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    double v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  _MergedGlobals_5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextInputUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EA3C6BB0 = result;
  return result;
}

void sub_1C45EE61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45EE6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45EE768(_Unwind_Exception *a1)
{
  double v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C45EE7E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45EE840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45EE928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45EE9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45EEA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C45EEB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C45EEBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C45EECBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C45EED80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C45EEE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45EEF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45EF0C4(_Unwind_Exception *a1)
{
  long long v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1C45EF104()
{
}

void sub_1C45EF1D8(_Unwind_Exception *a1)
{
  long long v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C45EF2CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45EFA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_1C45EFD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

double PKFunctionPiecewiseSimpleLinear::_solveLinearPiecewise(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  if (*a1 >= a5) {
    return *(double *)a3;
  }
  if (*(double *)(a2 - 8) <= a5) {
    return *(double *)(a4 - 8);
  }
  size_t v5 = (double *)(a3 - 8);
  do
  {
    double v6 = *a1++;
    double v7 = v6;
    ++v5;
  }
  while (v6 < a5);
  return *(v5 - 1) + (a5 - *(a1 - 2)) / (v7 - *(a1 - 2)) * (*v5 - *(v5 - 1));
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,WeightInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,WeightInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,WeightInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,WeightInfo>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v4 + v7 + v8 + a3;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v8 + a3 + v5 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v6 + v9 + v17;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      double v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v30 + v28 + v39 + v29;
        uint64_t v21 = __ROR8__(v30 + v28 + v39, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)) ^ v5);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,WeightInfo>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t PKPencilSqueezeThresholdMap(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  [v1 doubleValue];
  uint64_t v3 = llround(v2);
  if (v3 <= 449)
  {
    if (v3 > 199)
    {
      if (v3 == 200)
      {
        uint64_t v4 = 3;
        goto LABEL_25;
      }
      if (v3 == 300)
      {
        uint64_t v4 = 4;
        goto LABEL_25;
      }
    }
    else
    {
      if (v3 == 100)
      {
        uint64_t v4 = 1;
        goto LABEL_25;
      }
      if (v3 == 135)
      {
        uint64_t v4 = 2;
        goto LABEL_25;
      }
    }
  }
  else if (v3 <= 999)
  {
    if (v3 == 450)
    {
      uint64_t v4 = 5;
      goto LABEL_25;
    }
    if (v3 == 675)
    {
      uint64_t v4 = 6;
      goto LABEL_25;
    }
  }
  else
  {
    switch(v3)
    {
      case 1000:
        uint64_t v4 = 7;
        goto LABEL_25;
      case 1500:
        uint64_t v4 = 8;
        goto LABEL_25;
      case 2275:
        uint64_t v4 = 9;
        goto LABEL_25;
    }
  }
  int v5 = PKPencilSqueezeAnalyticsLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    int v7 = 138412290;
    id v8 = v1;
    _os_log_error_impl(&dword_1C44F8000, v5, OS_LOG_TYPE_ERROR, "Unable to map squeeze threshold: %@", (uint8_t *)&v7, 0xCu);
  }

  uint64_t v4 = 0;
LABEL_25:

  return v4;
}

CGImageRef createDiffImageIfImageComparisonFails(CGImage *a1, CGImage *a2, int a3, int32x4_t *a4, int32x4_t *a5, float64x2_t *a6, int64x2_t *a7, int *a8, double a9)
{
  unint64_t Width = CGImageGetWidth(a1);
  unint64_t Height = CGImageGetHeight(a1);
  if (CGImageGetWidth(a2) == Width && CGImageGetHeight(a2) == Height)
  {
    uint64_t v96 = a5;
    CGImageRef v20 = 0;
    int v21 = 2;
    if (Width && Height)
    {
      double v94 = a4;
      uint64_t v95 = a6;
      uint64_t v22 = 4 * Width;
      uint64_t v23 = (char *)malloc_type_calloc(Height, 4 * Width, 0xE0BBBF5EuLL);
      unint64_t v24 = (char *)malloc_type_calloc(Height, 4 * Width, 0x97FC31EBuLL);
      uint64_t v25 = (char *)malloc_type_calloc(Height, 4 * Width, 0x81E45F04uLL);
      if (v23 && v24 && v25)
      {
        int v92 = v25;
        unint64_t v93 = v24;
        double v91 = a7;
        uint64_t v26 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
        uint64_t v27 = CGBitmapContextCreate(v23, Width, Height, 8uLL, 4 * Width, v26, 0x2002u);
        if (v27)
        {
          uint64_t v28 = v27;
          v97.origin.double x = 0.0;
          v97.origin.float y = 0.0;
          v97.size.CGFloat width = (double)Width;
          v97.size.CGFloat height = (double)Height;
          CGContextDrawImage(v27, v97, a1);
          CGContextFlush(v28);
          CGContextRelease(v28);
          uint64_t v29 = v93;
          uint64_t v30 = CGBitmapContextCreate(v93, Width, Height, 8uLL, 4 * Width, v26, 0x2002u);
          CGColorSpaceRelease(v26);
          if (v30)
          {
            v98.origin.double x = 0.0;
            v98.origin.float y = 0.0;
            v98.size.CGFloat width = (double)Width;
            v98.size.CGFloat height = (double)Height;
            CGContextDrawImage(v30, v98, a2);
            CGContextFlush(v30);
            CGContextRelease(v30);
            LODWORD(v31) = 0;
            uint64_t v32 = 0;
            float64x2_t v33 = (float64x2_t)vdupq_n_s64(0x4070000000000000uLL);
            float64x2_t v34 = 0uLL;
            uint64_t v35 = v23;
            uint64_t v36 = v93;
            uint64_t v37 = v92;
            unint64_t v38 = v92;
            float64x2_t v39 = 0uLL;
            float64x2_t v40 = 0uLL;
            float64x2_t v41 = 0uLL;
            float64x2_t v42 = 0uLL;
            float64x2_t v43 = 0uLL;
            float64x2_t v44 = v33;
            unint64_t v45 = v94;
            do
            {
              for (uint64_t i = 0; i != Width; ++i)
              {
                unsigned int v47 = *(_DWORD *)&v35[4 * i];
                unsigned int v48 = *(_DWORD *)&v36[4 * i];
                if (v47 == v48)
                {
                  BOOL v49 = (v47 & 0xFF000000) != 0;
                  float64x2_t v33 = 0uLL;
                  double v50 = 0.0;
                  float64x2_t v44 = 0uLL;
                  int64x2_t v51 = 0uLL;
                }
                else
                {
                  v52.f64[0] = (double)HIBYTE(v47);
                  v53.i32[0] = v47 >> 8;
                  v53.i32[1] = *(_DWORD *)&v35[4 * i];
                  int8x8_t v54 = vand_s8(v53, (int8x8_t)0xFF000000FFLL);
                  v55.i64[0] = v54.u32[0];
                  v55.i64[1] = v54.u32[1];
                  float64x2_t v56 = vcvtq_f64_u64(v55);
                  v57.f64[0] = (double)HIBYTE(v48);
                  v58.i32[0] = v48 >> 8;
                  v58.i32[1] = *(_DWORD *)&v36[4 * i];
                  int8x8_t v59 = vand_s8(v58, (int8x8_t)0xFF000000FFLL);
                  v55.i64[0] = v59.u32[0];
                  v55.i64[1] = v59.u32[1];
                  v52.f64[1] = (double)BYTE2(v47);
                  v57.f64[1] = (double)BYTE2(v48);
                  float64x2_t v60 = vsubq_f64(v52, v57);
                  float64x2_t v61 = (float64x2_t)vbslq_s8((int8x16_t)vcgtzq_f64(v60), (int8x16_t)v60, (int8x16_t)vnegq_f64(v60));
                  double v50 = v61.f64[1];
                  float64x2_t v39 = vaddq_f64(v39, v61);
                  float64x2_t v62 = vsubq_f64(v56, vcvtq_f64_u64(v55));
                  float64x2_t v63 = (float64x2_t)vbslq_s8((int8x16_t)vcgtzq_f64(v62), (int8x16_t)v62, (int8x16_t)vnegq_f64(v62));
                  float64x2_t v33 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v61, v33), (int8x16_t)v33, (int8x16_t)v61);
                  float64x2_t v44 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v63, v44), (int8x16_t)v44, (int8x16_t)v63);
                  float64x2_t v42 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v42, v61), (int8x16_t)v42, (int8x16_t)v61);
                  float64x2_t v43 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v43, v63), (int8x16_t)v43, (int8x16_t)v63);
                  float64x2_t v41 = vaddq_f64(v41, v63);
                  float64x2_t v34 = vaddq_f64(v34, vmulq_f64(v61, v61));
                  float64x2_t v40 = vaddq_f64(v40, vmulq_f64(v63, v63));
                  if (a3)
                  {
                    if (v63.f64[1] > v61.f64[0]) {
                      v61.f64[0] = v63.f64[1];
                    }
                    if (v63.f64[0] <= v61.f64[0]) {
                      v63.f64[0] = v61.f64[0];
                    }
                    if (v61.f64[1] <= v63.f64[0]) {
                      double v50 = v63.f64[0];
                    }
                    int64x2_t v51 = vdupq_lane_s64(*(uint64_t *)&v50, 0);
                  }
                  else
                  {
                    if (v61.f64[1] > 255.0) {
                      double v50 = 255.0;
                    }
                    float64x2_t v64 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
                    int64x2_t v51 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v63, v64), (int8x16_t)v64, (int8x16_t)v63);
                  }
                  BOOL v49 = 1;
                }
                unint64_t v31 = (v49 + v31);
                *(_DWORD *)&v38[4 * i] = *(double *)&v51.i64[1] | (*(double *)v51.i64 << 8) | (v50 << 16) | 0xFF000000;
              }
              v35 += v22;
              v36 += v22;
              v38 += v22;
              ++v32;
            }
            while (v32 != Height);
            if (!v31) {
              unint64_t v31 = Height * Width;
            }
            double v65 = 1.0 / (double)v31;
            float64x2_t v66 = vmulq_n_f64(v39, v65);
            float64x2_t v67 = vsubq_f64(vmulq_n_f64(v34, v65), vmulq_f64(v66, v66));
            int64x2_t v68 = (int64x2_t)vsqrtq_f64((float64x2_t)vbicq_s8((int8x16_t)v67, (int8x16_t)vcltzq_f64(v67)));
            float64x2_t v69 = vmulq_n_f64(v41, v65);
            float64x2_t v70 = vsubq_f64(vmulq_n_f64(v40, v65), vmulq_f64(v69, v69));
            int64x2_t v71 = (int64x2_t)vsqrtq_f64((float64x2_t)vbicq_s8((int8x16_t)v70, (int8x16_t)vcltzq_f64(v70)));
            float64x2_t v72 = (float64x2_t)vzip1q_s64((int64x2_t)v66, v68);
            int64x2_t v87 = v68;
            float64x2_t v88 = v66;
            float64x2_t v73 = (float64x2_t)vzip2q_s64((int64x2_t)v66, v68);
            float64x2_t v74 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v72, v73), (int8x16_t)v72, (int8x16_t)v73);
            float64x2_t v75 = (float64x2_t)vzip1q_s64((int64x2_t)v69, v71);
            float64x2_t v76 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v74, v75), (int8x16_t)v74, (int8x16_t)v75);
            int64x2_t v85 = v71;
            float64x2_t v86 = v69;
            float64x2_t v77 = (float64x2_t)vzip2q_s64((int64x2_t)v69, v71);
            int8x16_t v78 = vbslq_s8((int8x16_t)vcgtq_f64(v76, v77), (int8x16_t)v76, (int8x16_t)v77);
            if (*(double *)v78.i64 <= *(double *)&v78.i64[1]) {
              v78.i64[0] = v78.i64[1];
            }
            float64x2_t v83 = v44;
            float64x2_t v84 = v33;
            float64x2_t v89 = v43;
            float64x2_t v90 = v42;
            if (*(double *)v78.i64 <= a9)
            {
              CGImageRef v20 = 0;
            }
            else
            {
              long long v79 = CGDataProviderCreateWithData(0, v92, v22 * Height, (CGDataProviderReleaseDataCallback)free_ptr);
              CGImageRef v20 = CGImageCreate(Width, Height, 8uLL, 0x20uLL, 4 * Width, v26, 0x2002u, v79, 0, 1, kCGRenderingIntentDefault);
              char v80 = v79;
              unint64_t v45 = v94;
              CGDataProviderRelease(v80);
              uint64_t v37 = v92;
              uint64_t v29 = v93;
            }
            if (v20) {
              unint64_t v82 = 0;
            }
            else {
              unint64_t v82 = v37;
            }
            cleanup(v23, v29, v82);
            if (v45) {
              int32x4_t *v45 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v84), (int32x4_t)vcvtq_s64_f64(v83));
            }
            if (v96) {
              *uint64_t v96 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v90), (int32x4_t)vcvtq_s64_f64(v89));
            }
            if (v95)
            {
              *uint64_t v95 = v88;
              v95[1] = v86;
            }
            int v21 = 0;
            if (v91)
            {
              *double v91 = v87;
              v91[1] = v85;
            }
          }
          else
          {
            cleanup(v23, v93, v92);
            CGImageRef v20 = 0;
            int v21 = 4;
          }
        }
        else
        {
          free(v23);
          free(v93);
          free(v92);
          CGColorSpaceRelease(v26);
          CGImageRef v20 = 0;
          int v21 = 3;
        }
      }
      else
      {
        cleanup(v23, v24, v25);
        CGImageRef v20 = 0;
        int v21 = 2;
      }
    }
  }
  else
  {
    CGImageRef v20 = 0;
    int v21 = 1;
  }
  *a8 = v21;
  return v20;
}

void cleanup(void *a1, void *a2, void *a3)
{
  if (a1) {
    free(a1);
  }
  if (a2) {
    free(a2);
  }
  if (a3)
  {
    free(a3);
  }
}

void free_ptr(int a1, void *a2)
{
}

void _PKHandleAutoRefineSettingsDidChange(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  BOOL v3 = +[PKSettingsDaemon autoRefineEnabled];
  uint64_t v4 = os_log_create("com.apple.pencilkit", "PKAutoRefineSettingsObserver");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    uint64_t v9 = @"PKRemoteAutoRefineSettingsDidChange";
    __int16 v10 = 1024;
    BOOL v11 = v3;
    _os_log_impl(&dword_1C44F8000, v4, OS_LOG_TYPE_DEFAULT, "Handle remote notification %@, autoRefineEnableCGFloat d = %{BOOL}d", (uint8_t *)&v8, 0x12u);
  }

  id v5 = a2;
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = *((void *)v5 + 1);
    if (v7) {
      (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v6);
    }
  }
}

void sub_1C45F19E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vSyncCallback(__IOMobileFramebuffer *a1, unsigned int a2, const __CFDictionary *a3, void *a4)
{
  CFDictionaryRef v12 = a3;
  id v5 = [(__CFDictionary *)v12 objectForKeyedSubscript:@"Presentation_delta"];
  uint64_t v6 = [v5 integerValue];
  uint64_t v7 = timebase_info;
  unint64_t v8 = *(unsigned int *)algn_1EA3C3814;

  uint64_t v9 = [(__CFDictionary *)v12 objectForKeyedSubscript:@"Presentation_time"];
  uint64_t v10 = [v9 unsignedIntegerValue];

  if (a4)
  {
    BOOL v11 = a4[1];
    block[1] = 3221225472;
    block[0] = MEMORY[0x1E4F143A8];
    block[2] = __67__PKRendererVSyncController_signalVSyncSemaphore_presentationTime___block_invoke;
    block[3] = &unk_1E64C55F0;
    void block[4] = a4;
    *(double *)&block[5] = (double)(v6 * v7 / v8) / 1000000000.0;
    block[6] = v10;
    dispatch_async(v11, block);
  }
}

void sub_1C45F2024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_1C45F2150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45F23E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CGColorRef CGColorCreateRGBA(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  components[4] = *(CGFloat *)MEMORY[0x1E4F143B8];
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  CGColorRef v9 = CGColorCreate(DeviceRGB, components);
  CGColorSpaceRelease(DeviceRGB);
  CFAutorelease(v9);
  return v9;
}

void sub_1C45F28BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C45F2A64(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1C45F2C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C45F2D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  drawing::Ink::~Ink((drawing::Ink *)va);

  _Unwind_Resume(a1);
}

void sub_1C45F2E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  drawing::Ink::~Ink((drawing::Ink *)va);
  _Unwind_Resume(a1);
}

void std::default_delete<std::string>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x1C8783F10);
  }
}

void sub_1C45F2FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45F3120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)PKMetalRenderState;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C45F360C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void sub_1C45F3840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45F38F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45F3A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C45F3A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45F3AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C45F3B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *PKTextInputDescriptionForHandwritingShotState(unint64_t a1)
{
  if (a1 > 4) {
    return &stru_1F1FB2C00;
  }
  else {
    return off_1E64C7230[a1];
  }
}

void sub_1C45F5540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void sub_1C45F5D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C45F6698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C45F771C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1C45F83C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose((const void *)(v46 - 216), 8);
  _Block_object_dispose((const void *)(v46 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t drawingV1::Point::Point(uint64_t this)
{
  *(void *)this = &unk_1F1FB09A8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1F1FB09A8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void drawingV1::Point::~Point(drawingV1::Point *this)
{
  PB::Base::~Base(this);

  JUMPOUT(0x1C8783F10);
}

float drawingV1::Point::Point(drawingV1::Point *this, const drawingV1::Point *a2)
{
  *(void *)this = &unk_1F1FB09A8;
  *((_DWORD *)this + 4) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 16) = 1;
    *((float *)this + 2) = result;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 3);
    *((unsigned char *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

uint64_t drawingV1::Point::operator=(uint64_t a1, const drawingV1::Point *a2)
{
  if ((const drawingV1::Point *)a1 != a2)
  {
    drawingV1::Point::Point((drawingV1::Point *)v6, a2);
    int v3 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float drawingV1::swap(drawingV1 *this, drawingV1::Point *a2, drawingV1::Point *a3)
{
  int v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  float result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float drawingV1::Point::Point(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1FB09A8;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_1F1FB09A8;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

uint64_t drawingV1::Point::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v7[0] = &unk_1F1FB09A8;
    int v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v8 = *(_DWORD *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(void *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t drawingV1::Point::formatText(drawingV1::Point *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "x", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "y", *((float *)this + 3));
  }

  return MEMORY[0x1F4147498](a2);
}

uint64_t drawingV1::Point::readFrom(drawingV1::Point *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_26;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
        {
LABEL_30:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 4;
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t drawingV1::Point::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if (v4)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 12);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

BOOL drawingV1::Point::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 2) == 0;
  if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
    return (*(unsigned char *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  }
  return v2;
}

uint64_t drawingV1::Point::hash_value(drawingV1::Point *this)
{
  if (*((unsigned char *)this + 16))
  {
    float v4 = *((float *)this + 2);
    uint64_t v1 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v1 = 0;
    }
    if ((*((unsigned char *)this + 16) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v3 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 16) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  float v2 = *((float *)this + 3);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ v1;
}

void sub_1C45F9C74(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 96));
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

uint64_t _UIColorFromRGB(int a1, int a2, int a3)
{
  return [MEMORY[0x1E4FB1618] colorWithRed:(double)a1 / 255.0 green:(double)a2 / 255.0 blue:(double)a3 / 255.0 alpha:1.0];
}

unint64_t PKHashUInt(unint64_t a1)
{
  unint64_t v1 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) >> 27));
  return v1 ^ (v1 >> 31);
}

void PKCrash()
{
}

void sub_1C45FE5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

{
  void *v2;

  float v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t PKHasScribbleInteractionInView(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  unint64_t v1 = objc_msgSend(a1, "interactions", 0, 0);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_respondsToSelector())
        {
          uint64_t v6 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      uint64_t v6 = 0;
      if (v3) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
LABEL_13:

  return v6;
}

id PKScribbleInteractionInView(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v2 = objc_msgSend(v1, "interactions", 0);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    float v5 = 0;
    id v6 = 0;
    uint64_t v7 = *(void *)v16;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v2);
        }
        long long v9 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v11 = [v9 scribbleInteractionWrapper];

          id v6 = (id)v11;
          goto LABEL_16;
        }
        if (objc_opt_respondsToSelector())
        {
          long long v10 = [v9 scribbleInteractionWrapper];

          if ([v10 isElementContainer])
          {
            id v6 = v10;

            float v5 = v6;
          }
          else
          {
            id v6 = v10;
          }
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  else
  {
    float v5 = 0;
    id v6 = 0;
  }
LABEL_16:

  if (v5) {
    unint64_t v12 = v5;
  }
  else {
    unint64_t v12 = v6;
  }
  id v13 = v12;

  return v13;
}

id PKScribbleInteractionInTextInput(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = PKScribbleInteractionInView(v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v3 = [v1 view];
    uint64_t v4 = PKScribbleInteractionInView(v3);

    uint64_t v2 = (void *)v4;
  }
  if (!v2)
  {
    if (objc_opt_respondsToSelector())
    {
      float v5 = [v1 textInputView];
      uint64_t v2 = PKScribbleInteractionInView(v5);
    }
    else
    {
      uint64_t v2 = 0;
    }
  }

  return v2;
}

void sub_1C45FFFC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4600094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4600128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46001EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4600270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4600320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C460048C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4600690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46007B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46008DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)PKMetalUnpurgeableStrokeRenderCache;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C460098C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4600A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4600AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4603E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46041BC(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1C460493C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PKMetalRendererController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4604F2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4605110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4605278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4605504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C460556C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4605854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4606408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36)
{
  a36 = (void **)&a24;
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&a36);
  _Unwind_Resume(a1);
}

void sub_1C46066B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4606D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C460743C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C46076F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4607AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4607EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C460826C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4608628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46087EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4608E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46092F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4609454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4609DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4609FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C460A794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C460A9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C460ACC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C460ADF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id CacheFileURLForUUID(void *a1)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1);
  uint64_t v3 = [v2 firstObject];

  uint64_t v4 = 0;
  if (v1 && v3)
  {
    float v5 = [v1 uniqueCacheFilePath];
    id v6 = [v5 stringByAppendingPathExtension:@"sessionCache"];

    uint64_t v7 = (void *)MEMORY[0x1E4F1CB10];
    v10[0] = v3;
    v10[1] = @"com.apple.PencilKit.handwriting";
    v10[2] = v6;
    long long v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:3];
    uint64_t v4 = [v7 fileURLWithPathComponents:v8];
  }

  return v4;
}

id PKLoadRecognitionSession(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = CacheFileURLForUUID(v1);
  uint64_t v3 = [v1 AES128Key];
  if (!v2)
  {
    uint64_t v7 = 0;
    goto LABEL_18;
  }
  id v15 = 0;
  uint64_t v4 = +[PKDataEncryption decryptFile:key:error:]((uint64_t)PKDataEncryption, v2, v3, (uint64_t)&v15);
  float v5 = v15;
  id v6 = v5;
  if (!v4)
  {
    if (!v5 || [v5 code] == 4)
    {
      uint64_t v7 = 0;
LABEL_17:

      goto LABEL_18;
    }
    uint64_t v11 = os_log_create("com.apple.pencilkit", "");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      long long v17 = v6;
      _os_log_error_impl(&dword_1C44F8000, v11, OS_LOG_TYPE_ERROR, "Failed to load session cache data file: %@", buf, 0xCu);
    }
    uint64_t v7 = 0;
LABEL_16:

    goto LABEL_17;
  }
  BOOL v14 = v5;
  uint64_t v7 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClass:objc_opt_class() fromData:v4 error:&v14];
  long long v8 = v14;

  if (v7 && !v8)
  {

LABEL_13:
    uint64_t v11 = os_log_create("com.apple.pencilkit", "");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v12 = [v1 uniqueCacheFilePath];
      *(_DWORD *)buf = 138412290;
      long long v17 = v12;
      _os_log_impl(&dword_1C44F8000, v11, OS_LOG_TYPE_DEFAULT, "Successfully loaded recognition session for: %@", buf, 0xCu);
    }
    id v6 = v11;
    goto LABEL_16;
  }
  long long v9 = v8;
  long long v10 = os_log_create("com.apple.pencilkit", "");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    long long v17 = v9;
    _os_log_error_impl(&dword_1C44F8000, v10, OS_LOG_TYPE_ERROR, "Failed to unarchive session cache data: %@", buf, 0xCu);
  }

  if (v7) {
    goto LABEL_13;
  }
LABEL_18:

  return v7;
}

uint64_t PKSaveRecognitionSession(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  float v5 = v4;
  if (v3)
  {
    id v6 = CacheFileURLForUUID(v4);
    if (!v6)
    {
      uint64_t v17 = 0;
LABEL_16:

      goto LABEL_17;
    }
    id v21 = 0;
    uint64_t v7 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v21];
    id v8 = v21;
    if (v7)
    {
      long long v9 = [MEMORY[0x1E4F28CB8] defaultManager];
      long long v10 = [v6 URLByDeletingLastPathComponent];
      id v20 = v8;
      char v11 = [v9 createDirectoryAtURL:v10 withIntermediateDirectories:1 attributes:0 error:&v20];
      id v12 = v20;

      if (v11)
      {
        id v13 = [v5 AES128Key];
        id v19 = v12;
        char v14 = +[PKDataEncryption encryptData:to:key:error:]((uint64_t)PKDataEncryption, v7, v6, v13, (uint64_t)&v19);
        id v8 = v19;

        if (v14)
        {
          id v15 = os_log_create("com.apple.pencilkit", "");
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            long long v16 = [v5 uniqueCacheFilePath];
            *(_DWORD *)buf = 138412290;
            id v23 = v16;
            _os_log_impl(&dword_1C44F8000, v15, OS_LOG_TYPE_DEFAULT, "Successfully saved recognition session for: %@", buf, 0xCu);
          }
          uint64_t v17 = 1;
LABEL_15:

          goto LABEL_16;
        }
      }
      else
      {
        id v8 = v12;
      }
    }
    id v15 = os_log_create("com.apple.pencilkit", "");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = v8;
      _os_log_error_impl(&dword_1C44F8000, v15, OS_LOG_TYPE_ERROR, "Failed to save session cache: %@", buf, 0xCu);
    }
    uint64_t v17 = 0;
    goto LABEL_15;
  }
  uint64_t v17 = 0;
LABEL_17:

  return v17;
}

void sub_1C460C0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id a42)
{
  objc_destroyWeak(v43);
  objc_destroyWeak(v42);
  objc_destroyWeak(v44);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a42);
  _Unwind_Resume(a1);
}

void sub_1C460C4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C460CEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C460E1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void sub_1C4610CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4610D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4610DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4610DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4610F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4611030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C46110F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461114C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4611258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461136C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C46113EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C46115CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void sub_1C4611824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C46119A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4611A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4611B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4611D38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4611EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4611F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4612124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46122F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46123CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4612410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461252C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4612570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46125A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46125E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46126D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461277C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4612818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4612B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4612BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4612D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4612E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4612EF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4612FC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461308C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46130BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46130EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4613248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4613408(_Unwind_Exception *a1)
{
  id v8 = v7;

  _Unwind_Resume(a1);
}

void sub_1C46137D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C46138E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4613920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4613964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46139A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46139F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4613A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4613BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4613D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_1C4613ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4613F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4614034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461407C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46140AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46140E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46142F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C46143A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461441C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46144D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C46145FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46148F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4614970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46149D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4614B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4614C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4614CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4614E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4614FBC(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C4615160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4615524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C46156D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4615840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4615B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4615CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4615DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4615F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4616010(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 40))(v1);
  _Unwind_Resume(a1);
}

void sub_1C4616AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  uint64_t v17 = *(void *)(a10 + 32);
  *(void *)(a10 + 32) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
  }

  _Unwind_Resume(a1);
}

void sub_1C4616D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4617098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46171CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46172B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4617524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4617628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4617E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_1C46184F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1C4618958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44)
{
  *(void *)(v45 - 144) = &a35;
  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 144));
  *(void *)(v45 - 144) = &a38;
  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 144));
  *(void *)(v45 - 144) = &a41;
  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 144));
  *(void *)(v45 - 144) = &a44;
  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 144));
  *(void *)(v45 - 144) = v45 - 240;
  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 144));
  *(void *)(v45 - 144) = v45 - 216;
  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 144));

  _Unwind_Resume(a1);
}

void sub_1C4618B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4618C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4618F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461914C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46196E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  _Unwind_Resume(a1);
}

void sub_1C46198F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4619AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 40))(a14);
  }

  _Unwind_Resume(a1);
}

void sub_1C4619BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t PKOutputFunction::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  return a1;
}

void sub_1C4619E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4619FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18 = v17;
  *(void *)(v16 + 8) = v18;

  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 40))(a14);
  }

  _Unwind_Resume(a1);
}

void sub_1C461A100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461A450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461A508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461A5E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461A77C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461A878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461ACD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461AD28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461AD90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double PKFunctionPiecewiseBezier::solveForInput(double **this, double a2, double a3)
{
  double v6 = PKFunctionPiecewiseBezier::solveForMinValue(this, a2);
  return (a3 + 1.0) * 0.5 * PKFunctionPiecewiseBezier::solveForMaxValue(this, a2) + (1.0 - (a3 + 1.0) * 0.5) * v6;
}

double PKFunctionPiecewiseBezier::maxInput(PKFunctionPiecewiseBezier *this)
{
  return *(double *)(*((void *)this + 8) - 8);
}

uint64_t PKFunctionPiecewiseBezier::isKindOfFunction(PKFunctionPiecewiseBezier *this)
{
  return 3;
}

double PKFunction::solveForInput(PKFunction *this, double a2, double a3)
{
  return 0.0;
}

double PKFunction::maxInput(PKFunction *this)
{
  return 1.0;
}

uint64_t PKFunction::isKindOfFunction(PKFunction *this)
{
  return 0;
}

double PKFunctionPiecewiseBezier::solveForMinValue(double **this, double a2)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (PKFunctionPiecewiseBezier::solveForMinValue(double)::onceToken != -1) {
      dispatch_once(&PKFunctionPiecewiseBezier::solveForMinValue(double)::onceToken, &__block_literal_global_399);
    }
    return *this[1];
  }
  uint64_t v3 = this[7];
  if (*v3 >= a2) {
    return *this[1];
  }
  if (*(this[8] - 1) <= a2) {
    return *(this[2] - 1);
  }
  uint64_t v4 = 0x1FFFFFFFFFFFFFFALL;
  do
  {
    double v5 = *v3++;
    double v6 = v5;
    v4 += 3;
  }
  while (v5 < a2);
  double v7 = (a2 - *(v3 - 2)) / (v6 - *(v3 - 2));
  double v8 = this[16][v4];
  double v9 = *(double *)(*(void *)&v8 + 8 * vcvtmd_u64_f64(v7 * 10.0));
  return v9 + (*(double *)(*(void *)&v8 + 8 * vcvtpd_u64_f64(v7 * 10.0)) - v9) * -(floor(v7 * 10.0) - v7 * 10.0);
}

double PKFunctionPiecewiseBezier::solveForMaxValue(double **this, double a2)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (PKFunctionPiecewiseBezier::solveForMaxValue(double)::onceToken != -1) {
      dispatch_once(&PKFunctionPiecewiseBezier::solveForMaxValue(double)::onceToken, &__block_literal_global_403);
    }
    return *this[4];
  }
  uint64_t v3 = this[7];
  if (*v3 >= a2) {
    return *this[4];
  }
  if (*(this[8] - 1) <= a2) {
    return *(this[5] - 1);
  }
  uint64_t v4 = 0x1FFFFFFFFFFFFFFALL;
  do
  {
    double v5 = *v3++;
    double v6 = v5;
    v4 += 3;
  }
  while (v5 < a2);
  double v7 = (a2 - *(v3 - 2)) / (v6 - *(v3 - 2));
  double v8 = this[19][v4];
  double v9 = *(double *)(*(void *)&v8 + 8 * vcvtmd_u64_f64(v7 * 10.0));
  return v9 + (*(double *)(*(void *)&v8 + 8 * vcvtpd_u64_f64(v7 * 10.0)) - v9) * -(floor(v7 * 10.0) - v7 * 10.0);
}

void ___ZN25PKFunctionPiecewiseBezier16solveForMinValueEd_block_invoke()
{
  double v0 = os_log_create("com.apple.pencilkit", "");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_fault_impl(&dword_1C44F8000, v0, OS_LOG_TYPE_FAULT, "Detected invalid inValue", v1, 2u);
  }
}

void ___ZN25PKFunctionPiecewiseBezier16solveForMaxValueEd_block_invoke()
{
  double v0 = os_log_create("com.apple.pencilkit", "");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_fault_impl(&dword_1C44F8000, v0, OS_LOG_TYPE_FAULT, "Detected invalid inValue", v1, 2u);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<double> *,std::vector<double> *,std::vector<double> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void **std::_AllocatorDestroyRangeReverse<std::allocator<PKOutputFunction>,PKOutputFunction*>::operator()[abi:ne180100](void **result)
{
  uint64_t v1 = *result[2];
  uint64_t v2 = *result[1];
  while (v1 != v2)
  {
    uint64_t result = *(void ***)(v1 - 8);
    *(void *)(v1 - 8) = 0;
    if (result) {
      uint64_t result = (void **)((uint64_t (*)(void **))(*result)[5])(result);
    }
    v1 -= 40;
  }
  return result;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<PKOutputFunction>,std::reverse_iterator<PKOutputFunction*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *(void **)(v1 + 32);
    *(void *)(v1 + 32) = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
    }
    v1 += 40;
  }
  return result;
}

double PKFunctionConstant::solveForInput(PKFunctionConstant *this, double a2, double a3)
{
  return (a3 + 1.0) * 0.5 * *((double *)this + 9) + (1.0 - (a3 + 1.0) * 0.5) * *((double *)this + 8);
}

double PKFunctionConstant::maxInput(PKFunctionConstant *this)
{
  return *((double *)this + 7);
}

uint64_t PKFunctionConstant::isKindOfFunction(PKFunctionConstant *this)
{
  return 1;
}

void PKFunctionConstant::clone(PKFunctionConstant *this)
{
}

void PKFunctionConstant::~PKFunctionConstant(PKFunction *this)
{
  PKFunction::~PKFunction(this);

  JUMPOUT(0x1C8783F10);
}

void sub_1C461B484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461B54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461B620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461B6F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461B750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461B8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C461B928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C461B988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461BCEC(_Unwind_Exception *a1)
{
  uint64_t v4 = v1;

  _Unwind_Resume(a1);
}

void sub_1C461BEA4(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C461C0C0(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C461C6B0(_Unwind_Exception *a1)
{
  double v9 = v5;

  _Unwind_Resume(a1);
}

void sub_1C461C840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C461CB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461CD28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461D404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461D66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C461D72C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461D89C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CGFloat DKDNearestTValueOnLineToPoint(CGPoint *a1, CGPoint a2)
{
  double y = a1->y;
  return ((a2.y - y) * (a1[1].y - y) + (a2.x - a1->x) * (a1[1].x - a1->x))
       / ((a1[1].y - y) * (a1[1].y - y) + (a1[1].x - a1->x) * (a1[1].x - a1->x));
}

void sub_1C461DB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C461DE44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461E534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461E8EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C461EAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PKTouchDetectionUpdateCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return [a2 didUpdateWithUserInfo:a5];
}

void sub_1C46202D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C462037C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4620518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4620630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4620748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4620848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4620B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4620C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4620DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C462157C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C46217A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4622044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location)
{
  objc_destroyWeak(v32);
  objc_destroyWeak(v33);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4622180(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1C4622324(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1C46239A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  objc_destroyWeak(v69);
  objc_destroyWeak(v72);
  if (v74) {
    objc_destroyWeak(v71);
  }
  if (v73) {
    objc_destroyWeak(v70);
  }
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4624AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4626B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4629394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4629B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C462A104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C462DBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C462E2A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C462E3F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C462E470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C462E644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C462E808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C462E8A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C462EA40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C462EDF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C462F018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C462F108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C462F1D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C462F2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C462F428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C462FECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  id v21 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

void sub_1C46300D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C463030C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4630534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46305DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4630994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4630A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4630AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PKPaintAreaViewSurface;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4630C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4630CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4631144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void sub_1C4631340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4631540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4631698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4631848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46319AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1C4631AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4631B84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1C4631D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4632168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_1C4632264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C463235C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C46324B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4632708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4632884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4632A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4632B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4632D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double PKSmoothstep(double a1, double a2, double a3, double a4, double a5)
{
  double v5 = fmax(fmin((a1 - a2) / (a3 - a2), 1.0), 0.0);
  return a4 + (v5 * (v5 * (v5 * -2.0)) + v5 * 3.0 * v5) * (a5 - a4);
}

double PKLinearstep(double a1, double a2, double a3, double a4, double a5)
{
  return a4 + fmax(fmin((a1 - a2) / (a3 - a2), 1.0), 0.0) * (a5 - a4);
}

void sub_1C46335A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

void __FilteredFoundItems_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v3 = [a2 dataDetectorResult];
  [v2 addObject:v3];
}

id getDDDetectionControllerClass()
{
  uint64_t v4 = 0;
  double v5 = &v4;
  uint64_t v6 = 0x2050000000;
  double v0 = (void *)_MergedGlobals_132;
  uint64_t v7 = _MergedGlobals_132;
  if (!_MergedGlobals_132)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getDDDetectionControllerClass_block_invoke;
    _OWORD v3[3] = &unk_1E64C5478;
    v3[4] = &v4;
    __getDDDetectionControllerClass_block_invoke((uint64_t)v3);
    double v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1C4633FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __FilteredFoundItems_block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v6 = v3;
  double v5 = [v3 dataDetectorResult];
  LODWORD(v4) = [v4 containsObject:v5];

  if (v4) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v6];
  }
}

Class __getDDDetectionControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1EB3C5F68)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    _OWORD v4[3] = __DataDetectorsUILibraryCore_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E64C7DA0;
    uint64_t v6 = 0;
    qword_1EB3C5F68 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_1EB3C5F68)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("DDDetectionController");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  _MergedGlobals_132 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __DataDetectorsUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB3C5F68 = result;
  return result;
}

uint64_t versioned_document::Document::Document(uint64_t this)
{
  *(void *)this = &unk_1F1FB06D0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = &unk_1F1FB06D0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void versioned_document::Document::~Document(versioned_document::Document *this)
{
  *(void *)this = &unk_1F1FB06D0;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = &unk_1F1FB06D0;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = &unk_1F1FB06D0;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  MEMORY[0x1C8783F10]();
}

uint64_t versioned_document::Document::Document(uint64_t this, const versioned_document::Document *a2)
{
  *(void *)this = &unk_1F1FB06D0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  if (*((unsigned char *)a2 + 36))
  {
    int v2 = *((_DWORD *)a2 + 8);
    *(unsigned char *)(this + 36) = 1;
    *(_DWORD *)(this + 32) = v2;
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<versioned_document::Version>::emplace_back<versioned_document::Version const&>();
  }
  return this;
}

void PB::PtrVector<versioned_document::Version>::emplace_back<versioned_document::Version const&>()
{
}

void sub_1C463455C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t versioned_document::Document::operator=(uint64_t a1, const versioned_document::Document *a2)
{
  if ((const versioned_document::Document *)a1 != a2)
  {
    versioned_document::Document::Document((uint64_t)&v7, a2);
    uint64_t v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    uint64_t v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    uint64_t v7 = &unk_1F1FB06D0;
    uint64_t v11 = (void **)&v8;
    std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v11);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t versioned_document::swap(uint64_t this, versioned_document::Document *a2, versioned_document::Document *a3)
{
  int v3 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  int v4 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  return this;
}

uint64_t versioned_document::Document::Document(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1FB06D0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  if (*(void *)(a1 + 8))
  {
    std::vector<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::__clear[abi:ne180100]((void *)(a1 + 8));
    operator delete(*(void **)v4);
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t versioned_document::Document::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    versioned_document::Document::Document((uint64_t)&v7, a2);
    uint64_t v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    uint64_t v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    uint64_t v7 = &unk_1F1FB06D0;
    uint64_t v11 = (void **)&v8;
    std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v11);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t versioned_document::Document::formatText(versioned_document::Document *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 36)) {
    PB::TextFormatter::format(a2, "serializationVersion");
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "version");
  }

  return MEMORY[0x1F4147498](a2);
}

uint64_t versioned_document::Document::readFrom(versioned_document::Document *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2) {
        PB::PtrVector<versioned_document::Version>::emplace_back<>();
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 36) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v20 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v20)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v24 = 0;
          if (v20 <= v19) {
            unint64_t v20 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v20 == v19)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v30 = v19 + 1;
            char v31 = *(unsigned char *)(v21 + v19);
            *((void *)a2 + 1) = v30;
            v24 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v19 = v30;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v24) = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v25 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v26 = *(unsigned char *)(v21 + v19);
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v19 = v25;
            BOOL v14 = v23++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 8) = v24;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void PB::PtrVector<versioned_document::Version>::emplace_back<>()
{
}

void sub_1C4634C70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t versioned_document::Document::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 36)) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v5 = *(const PB::Base ***)(v3 + 8);
  int v4 = *(const PB::Base ***)(v3 + 16);
  while (v5 != v4)
  {
    uint64_t v6 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  return this;
}

BOOL versioned_document::Document::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  uint64_t v3 = *(uint64_t **)(a2 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  int v4 = *(uint64_t **)(a1 + 16);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 16) - (void)v3) {
    return 0;
  }
  if (v5 == v4) {
    return 1;
  }
  do
  {
    BOOL result = versioned_document::Version::operator==(*v5, *v3);
    if (!result) {
      break;
    }
    ++v5;
    ++v3;
  }
  while (v5 != *(uint64_t **)(a1 + 16));
  return result;
}

uint64_t versioned_document::Document::hash_value(versioned_document::Document *this)
{
  if (*((unsigned char *)this + 36)) {
    uint64_t v1 = *((unsigned int *)this + 8);
  }
  else {
    uint64_t v1 = 0;
  }
  unint64_t v2 = (versioned_document::Version **)*((void *)this + 1);
  uint64_t v3 = (versioned_document::Version **)*((void *)this + 2);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *v2++;
      v4 ^= versioned_document::Version::hash_value(v5);
    }
    while (v2 != v3);
  }
  return v4 ^ v1;
}

uint64_t std::vector<std::unique_ptr<versioned_document::Version>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<versioned_document::Version>>,std::reverse_iterator<std::unique_ptr<versioned_document::Version>*>,std::reverse_iterator<std::unique_ptr<versioned_document::Version>*>,std::reverse_iterator<std::unique_ptr<versioned_document::Version>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<versioned_document::Version>>,std::reverse_iterator<std::unique_ptr<versioned_document::Version>*>,std::reverse_iterator<std::unique_ptr<versioned_document::Version>*>,std::reverse_iterator<std::unique_ptr<versioned_document::Version>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    char v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<versioned_document::Version>>,std::reverse_iterator<std::unique_ptr<versioned_document::Version>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<versioned_document::Version>>,std::reverse_iterator<std::unique_ptr<versioned_document::Version>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void sub_1C4635074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46351CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4635458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4635748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46359EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4635AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4635BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4635CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4635E48(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C4635F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463602C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4636244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46364EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4636608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46366EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4636788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4636A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4636C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4636E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4636F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4637248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C46376D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4637850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<PKProtobufUnknownFields>::reset[abi:ne180100]((PB::Writer ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_1C4639558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void sub_1C463A724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C463B320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void std::vector<CGPoint>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    char v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::vector<PKCompressedStrokePoint>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<PKCompressedStrokePoint>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_1C463B6C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<PKCompressedStrokePoint>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCompressedStrokePoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void sub_1C463B8A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463B9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463BA10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463BAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463BB34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463BB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463BBEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463BD38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463BDB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463BE0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463BE6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463BEAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463C23C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463C284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463C340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463C384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463C3FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463C584(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C463C608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463C638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463C680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463C6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463C718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463C7B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463C7EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463CA68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PKBSplineFilter::splineFromStroke(id *this, PKStrokePath *a2, PKInk *a3, double a4)
{
  uint64_t v8 = a2;
  char v9 = a3;
  PKBSplineFilter::configureForInk((PKBSplineFilter *)this, v9);
  uint64_t v10 = v8;
  char v14 = v10;
  objc_storeStrong(this + 14, a2);
  uint64_t v11 = [(PKStrokePath *)v10 count];
  this[20] = 0;
  *((double *)this + 21) = (double)(unint64_t)(v11 - 1);
  this[16] = 0;
  (*((void (**)(id *))*this + 4))(this);
  (*(void (**)(id *, PKInk *, void, double))*this)(this, v9, 0, 1.0);
  if (a4 >= 0.0) {
    *((double *)this + 15) = a4;
  }
  this[1] = &v13;
  (*((void (**)(id *))*this + 5))(this);
  (*((void (**)(id *))*this + 1))(this);
  id v12 = this[14];
  this[14] = 0;

  this[1] = 0;
}

void sub_1C463CC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C463CF48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463D05C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463D330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v43 - 208), 8);
  _Block_object_dispose((const void *)(v43 - 176), 8);

  _Unwind_Resume(a1);
}

void sub_1C463D49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C463D594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463D5D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463D9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463DA04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463DBC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463DD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463E00C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463E044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463E1C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463E3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1C463E510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463E5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C463E664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C463E6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463E730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463E854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463E8B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463E918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463E99C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463EA1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463EBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 136), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__14(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1C463EE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463EF8C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8783F10](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void sub_1C463F06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463F0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463F234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463F398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463F424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463F540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463F5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C463F63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void PKBSplineFilter::drawingBeganWithInk(PKBSplineFilter *a1, void *a2, uint64_t a3, double a4)
{
  uint64_t v7 = a2;
  PKBSplineFilter::configureForInk(a1, v7);
  PKInputBaseFilter<_PKStrokePoint,_PKStrokePoint>::drawingBeganWithInk((uint64_t)a1, v7, a3, a4);
  *((unsigned char *)a1 + 108) = 0;
}

void sub_1C463F6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t PKBSplineFilter::drawingEnded(PKBSplineFilter *this)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((unsigned char *)this + 16) = 1;
  *((void *)this + 9) = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 3);
  *((unsigned char *)this + 108) = 1;
  return result;
}

void PKInputProvider<_PKStrokePoint>::getUpdatedRangeFromIndex()
{
}

uint64_t PKInputBufferedFilter<_PKStrokePoint,_PKStrokePoint>::copyUpdatedRangeFromIndex(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 40))(a1);
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 48))(a1);
  std::vector<_PKStrokePoint>::__insert_with_size[abi:ne180100]<std::__wrap_iter<_PKStrokePoint*>,std::__wrap_iter<_PKStrokePoint*>>(a3, *(void *)(a3 + 8), (char *)(*(void *)v6 + 88 * a2), *(char **)(v6 + 8), 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v6 + 8) - (*(void *)v6 + 88 * a2)) >> 3));
  return a1[9];
}

void *PKBSplineFilter::reset(PKBSplineFilter *this)
{
  uint64_t result = PKInputFilter<_PKStrokePoint,_PKStrokePoint>::reset((uint64_t)this);
  *((unsigned char *)this + 108) = 1;
  return result;
}

uint64_t PKBSplineFilter::fetchInput(PKBSplineFilter *this)
{
  if (*((unsigned char *)this + 108)) {
    return (*(uint64_t (**)(void))(*(void *)this + 56))();
  }
  else {
    return PKInputBufferedFilter<_PKStrokePoint,_PKStrokePoint>::fetchInput((uint64_t)this);
  }
}

uint64_t PKInputFilter<_PKStrokePoint,_PKStrokePoint>::outputVector(uint64_t a1)
{
  return a1 + 80;
}

void PKBSplineFilter::run(PKBSplineFilter *this)
{
  if (*((void *)this + 7) != *((void *)this + 6) && !*((unsigned char *)this + 108))
  {
    unint64_t v2 = (void **)((char *)this + 80);
    std::vector<_PKStrokePoint>::resize((uint64_t)this + 80, *((void *)this + 9));
    if (*((void *)this + 14) && (double v3 = *((double *)this + 20), v4 = *((double *)this + 21), v3 < v4))
    {
      PKBSplineFilter::calcSplinePathInRange(this, v3, v4);
      if (*((double *)this + 20) > 0.01)
      {
        uint64_t v5 = *((void *)this + 10);
        long long v6 = *(_OWORD *)(v5 + 16);
        *(_OWORD *)unint64_t v38 = *(_OWORD *)v5;
        *(_OWORD *)&v38[16] = v6;
        long long v7 = *(_OWORD *)(v5 + 32);
        long long v8 = *(_OWORD *)(v5 + 48);
        long long v9 = *(_OWORD *)(v5 + 64);
        uint64_t v42 = *(void *)(v5 + 80);
        long long v40 = v8;
        long long v41 = v9;
        long long v39 = v7;
        float64x2_t v10 = vsubq_f64(*(float64x2_t *)&v38[8], *(float64x2_t *)(v5 + 96));
        *(float64x2_t *)&v38[8] = vaddq_f64(*(float64x2_t *)&v38[8], vmulq_n_f64(vmulq_n_f64(v10, 1.0/ sqrt(vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v10, v10).f64[1]), v10.f64[0], v10.f64[0]))), *(double *)&v38[24] + 0.0 + *((double *)this + 16)));
        std::vector<_PKStrokePoint>::insert((uint64_t)this + 80, (char *)v5, (unint64_t)v38);
      }
      double v11 = *((double *)this + 21);
      if (v11 < (double)(unint64_t)([*((id *)this + 14) _pointsCount] - 1) + -0.01)
      {
        uint64_t v13 = *((void *)this + 10);
        unint64_t v12 = *((void *)this + 11);
        uint64_t v14 = *(void *)(v12 - 88);
        double v15 = *(double *)(v12 - 64);
        *(_OWORD *)unint64_t v38 = *(_OWORD *)(v12 - 56);
        *(_OWORD *)&v38[16] = *(_OWORD *)(v12 - 40);
        long long v39 = *(_OWORD *)(v12 - 24);
        *(void *)&long long v40 = *(void *)(v12 - 8);
        unint64_t v16 = *((void *)this + 12);
        float64x2_t v17 = *(float64x2_t *)(v12 - 80);
        float64x2_t v18 = vsubq_f64(v17, *(float64x2_t *)(v12 - 168));
        float64x2_t v19 = vaddq_f64(v17, vmulq_n_f64(vmulq_n_f64(v18, 1.0/ sqrt(vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v18, v18).f64[1]), v18.f64[0], v18.f64[0]))), v15 + 0.0 + *((double *)this + 16)));
        if (v12 >= v16)
        {
          uint64_t v24 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - v13) >> 3);
          if ((unint64_t)(v24 + 1) > 0x2E8BA2E8BA2E8BALL) {
            std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v25 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v16 - v13) >> 3);
          uint64_t v26 = 2 * v25;
          if (2 * v25 <= v24 + 1) {
            uint64_t v26 = v24 + 1;
          }
          if (v25 >= 0x1745D1745D1745DLL) {
            unint64_t v27 = 0x2E8BA2E8BA2E8BALL;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27)
          {
            float64x2_t v37 = v19;
            char v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)this + 96, v27);
            float64x2_t v19 = v37;
          }
          else
          {
            char v28 = 0;
          }
          unsigned int v29 = &v28[88 * v24];
          unint64_t v30 = &v28[88 * v27];
          *(void *)unsigned int v29 = v14;
          *(float64x2_t *)(v29 + 8) = v19;
          *((double *)v29 + 3) = v15;
          *((_OWORD *)v29 + 2) = *(_OWORD *)v38;
          *((_OWORD *)v29 + 3) = *(_OWORD *)&v38[16];
          *((_OWORD *)v29 + 4) = v39;
          *((void *)v29 + 10) = v40;
          uint64_t v21 = v29 + 88;
          uint64_t v32 = (char *)*((void *)this + 10);
          char v31 = (char *)*((void *)this + 11);
          if (v31 != v32)
          {
            do
            {
              long long v33 = *(_OWORD *)(v31 - 88);
              *(_OWORD *)(v29 - 72) = *(_OWORD *)(v31 - 72);
              *(_OWORD *)(v29 - 88) = v33;
              long long v34 = *(_OWORD *)(v31 - 56);
              long long v35 = *(_OWORD *)(v31 - 40);
              long long v36 = *(_OWORD *)(v31 - 24);
              *((void *)v29 - 1) = *((void *)v31 - 1);
              *(_OWORD *)(v29 - 24) = v36;
              *(_OWORD *)(v29 - 40) = v35;
              *(_OWORD *)(v29 - 56) = v34;
              v29 -= 88;
              v31 -= 88;
            }
            while (v31 != v32);
            char v31 = (char *)*v2;
          }
          *((void *)this + 10) = v29;
          *((void *)this + 11) = v21;
          *((void *)this + 12) = v30;
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *(void *)unint64_t v12 = v14;
          *(float64x2_t *)(v12 + 8) = v19;
          *(double *)(v12 + 24) = v15;
          long long v20 = *(_OWORD *)&v38[16];
          *(_OWORD *)(v12 + 32) = *(_OWORD *)v38;
          *(_OWORD *)(v12 + 48) = v20;
          *(_OWORD *)(v12 + 64) = v39;
          *(void *)(v12 + 80) = v40;
          uint64_t v21 = (char *)(v12 + 88);
        }
        *((void *)this + 11) = v21;
      }
    }
    else
    {
      double v22 = (double)*((uint64_t *)this + 5);
      double v23 = (double)(unint64_t)(0x2E8BA2E8BA2E8BA3
                                     * ((uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3)
                                     - 1);
      PKBSplineFilter::calcSplinePathInRange(this, v22, v23);
    }
  }
}

uint64_t PKInputFilter<_PKStrokePoint,_PKStrokePoint>::complete()
{
  return 0;
}

void PKInputBaseFilter<_PKStrokePoint,_PKStrokePoint>::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v8 = a2;
  long long v7 = *(void (****)(void, id, uint64_t, double))(a1 + 8);
  if (v7) {
    (**v7)(v7, v8, a3, a4);
  }
  *(double *)(a1 + 24) = a4;
  *(unsigned char *)(a1 + 16) = 0;
}

void sub_1C463FD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t PKInputBaseFilter<_PKStrokePoint,_PKStrokePoint>::drawingEnded(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void *PKInputFilter<_PKStrokePoint,_PKStrokePoint>::reset(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  result[1] = *result;
  return result;
}

uint64_t PKInputBufferedFilter<_PKStrokePoint,_PKStrokePoint>::fetchInput(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  std::vector<_PKStrokePoint>::resize(a1 + 48, *(void *)(a1 + 32));
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *(void *)(a1 + 32), v2);
  double v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 56);

  return v3(a1);
}

uint64_t PKInputBufferedFilter<_PKStrokePoint,_PKStrokePoint>::reset(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  return result;
}

void std::vector<_PKStrokePoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<_PKStrokePoint>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 88 * a2;
  }
}

void std::vector<_PKStrokePoint>::__append(void **a1, unint64_t a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  long long v7 = *(char **)(v4 - 8);
  if (0x2E8BA2E8BA2E8BA3 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 88 * ((88 * a2 - 88) / 0x58) + 88;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x2E8BA2E8BA2E8BALL) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x1745D1745D1745DLL) {
      unint64_t v11 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v14 = &v12[88 * v8];
    double v15 = &v12[88 * v11];
    size_t v16 = 88 * ((88 * a2 - 88) / 0x58) + 88;
    bzero(v14, v16);
    float64x2_t v17 = &v14[v16];
    float64x2_t v19 = (char *)*a1;
    float64x2_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 88);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v18 - 72);
        *(_OWORD *)(v14 - 88) = v20;
        long long v21 = *(_OWORD *)(v18 - 56);
        long long v22 = *(_OWORD *)(v18 - 40);
        long long v23 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v23;
        *(_OWORD *)(v14 - 40) = v22;
        *(_OWORD *)(v14 - 56) = v21;
        v14 -= 88;
        v18 -= 88;
      }
      while (v18 != v19);
      float64x2_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void PKBSplineFilter::configureForInk(PKBSplineFilter *this, PKInk *a2)
{
  BOOL v3 = [(PKInk *)a2 behavior];
  uint64_t v4 = [v3 renderingDescriptor];
  uint64_t v5 = [v4 type];

  if (v5 == 1) {
    int v6 = 2;
  }
  else {
    int v6 = 4;
  }
  double v7 = 0.2;
  if (v5 == 1) {
    double v7 = 0.5;
  }
  *((_DWORD *)this + 38) = v6;
  *((double *)this + 15) = v7;
}

void sub_1C46401AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::vector<_PKStrokePoint>::__insert_with_size[abi:ne180100]<std::__wrap_iter<_PKStrokePoint*>,std::__wrap_iter<_PKStrokePoint*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  double v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v12) >> 3) < a5)
  {
    size_t v13 = *(void **)a1;
    unint64_t v14 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 > 0x2E8BA2E8BA2E8BALL) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((__dst - (uint64_t)v13) >> 3);
    unint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((v10 - (uint64_t)v13) >> 3);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x1745D1745D1745DLL) {
      unint64_t v18 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v43 = v9;
    if (v18) {
      float64x2_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>(v9, v18);
    }
    else {
      float64x2_t v19 = 0;
    }
    char v31 = &v19[88 * v15];
    __p = v19;
    long long v40 = v31;
    uint64_t v42 = &v19[88 * v18];
    uint64_t v32 = 88 * a5;
    long long v33 = &v31[88 * a5];
    do
    {
      long long v34 = *((_OWORD *)v7 + 1);
      *(_OWORD *)char v31 = *(_OWORD *)v7;
      *((_OWORD *)v31 + 1) = v34;
      long long v35 = *((_OWORD *)v7 + 2);
      long long v36 = *((_OWORD *)v7 + 3);
      long long v37 = *((_OWORD *)v7 + 4);
      *((void *)v31 + 10) = *((void *)v7 + 10);
      *((_OWORD *)v31 + 3) = v36;
      *((_OWORD *)v31 + 4) = v37;
      *((_OWORD *)v31 + 2) = v35;
      v31 += 88;
      v7 += 88;
      v32 -= 88;
    }
    while (v32);
    long long v41 = v33;
    uint64_t v5 = (char *)std::vector<_PKStrokePoint>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v41 != v40) {
      long long v41 = &v40[(v41 - v40 - 88) % 0x58uLL];
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - __dst) >> 3) >= a5)
  {
    long long v21 = &__src[88 * a5];
    long long v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[88 * a5];
    unint64_t v25 = &v23[-88 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        long long v27 = *((_OWORD *)v25 + 1);
        *(_OWORD *)uint64_t v26 = *(_OWORD *)v25;
        *((_OWORD *)v26 + 1) = v27;
        long long v28 = *((_OWORD *)v25 + 2);
        long long v29 = *((_OWORD *)v25 + 3);
        long long v30 = *((_OWORD *)v25 + 4);
        *((void *)v26 + 10) = *((void *)v25 + 10);
        *((_OWORD *)v26 + 3) = v29;
        *((_OWORD *)v26 + 4) = v30;
        *((_OWORD *)v26 + 2) = v28;
        v25 += 88;
        v26 += 88;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v5[88 * a5], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  long long v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  }
  long long v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1C4640470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<_PKStrokePoint>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  int v6 = (char *)*a1;
  double v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v8 - 88);
      *(_OWORD *)(v9 - 72) = *(_OWORD *)(v8 - 72);
      *(_OWORD *)(v9 - 88) = v10;
      long long v11 = *(_OWORD *)(v8 - 56);
      long long v12 = *(_OWORD *)(v8 - 40);
      long long v13 = *(_OWORD *)(v8 - 24);
      double v7 = (void *)(v9 - 88);
      *(void *)(v9 - 8) = *((void *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v13;
      *(_OWORD *)(v9 - 40) = v12;
      *(_OWORD *)(v9 - 56) = v11;
      v8 -= 88;
      v9 -= 88;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  unint64_t v14 = a1[1];
  uint64_t v15 = *(void *)(a2 + 16);
  int64_t v16 = v14 - __src;
  if (v14 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v14 - __src);
    double v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v15 + v16;
  uint64_t v17 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v17;
  unint64_t v18 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v18;
  float64x2_t v19 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v19;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void PKBSplineFilter::calcSplinePathInRange(PKBSplineFilter *this, double a2, double a3)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)*((void *)this + 6);
  uint64_t v5 = *((void *)this + 7) - (void)v4;
  unint64_t v6 = 0x2E8BA2E8BA2E8BA3 * (v5 >> 3);
  if ((double)(v6 - 1) >= a3) {
    double v7 = a3;
  }
  else {
    double v7 = (double)(v6 - 1);
  }
  if (v6 > 1)
  {
    if (v5 == 176)
    {
      unint64_t v16 = *((void *)this + 12);
      long long v12 = (void *)((char *)this + 80);
      unint64_t v17 = *((void *)this + 11);
      if (v17 >= v16)
      {
        uint64_t v86 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v17 - *v12) >> 3);
        unint64_t v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) > 0x2E8BA2E8BA2E8BALL) {
          goto LABEL_127;
        }
        unint64_t v88 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v16 - *v12) >> 3);
        if (2 * v88 > v87) {
          unint64_t v87 = 2 * v88;
        }
        if (v88 >= 0x1745D1745D1745DLL) {
          unint64_t v89 = 0x2E8BA2E8BA2E8BALL;
        }
        else {
          unint64_t v89 = v87;
        }
        if (v89) {
          float64x2_t v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)this + 96, v89);
        }
        else {
          float64x2_t v90 = 0;
        }
        uint64_t v118 = &v90[88 * v86];
        char v119 = &v90[88 * v89];
        long long v120 = *((_OWORD *)v4 + 1);
        *(_OWORD *)uint64_t v118 = *(_OWORD *)v4;
        *((_OWORD *)v118 + 1) = v120;
        long long v121 = *((_OWORD *)v4 + 2);
        long long v122 = *((_OWORD *)v4 + 3);
        long long v123 = *((_OWORD *)v4 + 4);
        *((void *)v118 + 10) = v4[10];
        *((_OWORD *)v118 + 3) = v122;
        *((_OWORD *)v118 + 4) = v123;
        *((_OWORD *)v118 + 2) = v121;
        int64_t v22 = v118 + 88;
        unint64_t v125 = (char *)*((void *)this + 10);
        unint64_t v124 = (char *)*((void *)this + 11);
        if (v124 != v125)
        {
          do
          {
            long long v126 = *(_OWORD *)(v124 - 88);
            *(_OWORD *)(v118 - 72) = *(_OWORD *)(v124 - 72);
            *(_OWORD *)(v118 - 88) = v126;
            long long v127 = *(_OWORD *)(v124 - 56);
            long long v128 = *(_OWORD *)(v124 - 40);
            long long v129 = *(_OWORD *)(v124 - 24);
            *((void *)v118 - 1) = *((void *)v124 - 1);
            *(_OWORD *)(v118 - 24) = v129;
            *(_OWORD *)(v118 - 40) = v128;
            *(_OWORD *)(v118 - 56) = v127;
            v118 -= 88;
            v124 -= 88;
          }
          while (v124 != v125);
          unint64_t v124 = (char *)*v12;
        }
        *((void *)this + 10) = v118;
        *((void *)this + 11) = v22;
        *((void *)this + 12) = v119;
        if (v124) {
          operator delete(v124);
        }
      }
      else
      {
        long long v18 = *((_OWORD *)v4 + 1);
        *(_OWORD *)unint64_t v17 = *(_OWORD *)v4;
        *(_OWORD *)(v17 + 16) = v18;
        long long v19 = *((_OWORD *)v4 + 2);
        long long v20 = *((_OWORD *)v4 + 3);
        long long v21 = *((_OWORD *)v4 + 4);
        *(void *)(v17 + 80) = v4[10];
        *(_OWORD *)(v17 + 48) = v20;
        *(_OWORD *)(v17 + 64) = v21;
        *(_OWORD *)(v17 + 32) = v19;
        int64_t v22 = (char *)(v17 + 88);
      }
      *((void *)this + 11) = v22;
      uint64_t v130 = *((void *)this + 6) + 88;
      unint64_t v131 = *((void *)this + 12);
      if ((unint64_t)v22 < v131)
      {
        long long v132 = *(_OWORD *)(*((void *)this + 6) + 104);
        *(_OWORD *)int64_t v22 = *(_OWORD *)v130;
        *((_OWORD *)v22 + 1) = v132;
        long long v133 = *(_OWORD *)(v130 + 32);
        long long v134 = *(_OWORD *)(v130 + 48);
        long long v135 = *(_OWORD *)(v130 + 64);
        *((void *)v22 + 10) = *(void *)(v130 + 80);
        *((_OWORD *)v22 + 3) = v134;
        *((_OWORD *)v22 + 4) = v135;
        *((_OWORD *)v22 + 2) = v133;
        double v104 = v22 + 88;
        goto LABEL_123;
      }
      uint64_t v136 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v22[-*v12] >> 3);
      if ((unint64_t)(v136 + 1) <= 0x2E8BA2E8BA2E8BALL)
      {
        unint64_t v137 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v131 - *v12) >> 3);
        uint64_t v138 = 2 * v137;
        if (2 * v137 <= v136 + 1) {
          uint64_t v138 = v136 + 1;
        }
        if (v137 >= 0x1745D1745D1745DLL) {
          unint64_t v139 = 0x2E8BA2E8BA2E8BALL;
        }
        else {
          unint64_t v139 = v138;
        }
        if (v139) {
          uint64_t v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)this + 96, v139);
        }
        else {
          uint64_t v140 = 0;
        }
        double v110 = &v140[88 * v136];
        uint64_t v111 = &v140[88 * v139];
        long long v141 = *(_OWORD *)(v130 + 16);
        *(_OWORD *)double v110 = *(_OWORD *)v130;
        *((_OWORD *)v110 + 1) = v141;
        long long v142 = *(_OWORD *)(v130 + 32);
        long long v143 = *(_OWORD *)(v130 + 48);
        long long v144 = *(_OWORD *)(v130 + 64);
        *((void *)v110 + 10) = *(void *)(v130 + 80);
        *((_OWORD *)v110 + 3) = v143;
        *((_OWORD *)v110 + 4) = v144;
        *((_OWORD *)v110 + 2) = v142;
        double v104 = v110 + 88;
        uint64_t v145 = (char *)*((void *)this + 10);
        char v112 = (char *)*((void *)this + 11);
        if (v112 == v145) {
          goto LABEL_121;
        }
        do
        {
          long long v146 = *(_OWORD *)(v112 - 88);
          *(_OWORD *)(v110 - 72) = *(_OWORD *)(v112 - 72);
          *(_OWORD *)(v110 - 88) = v146;
          long long v147 = *(_OWORD *)(v112 - 56);
          long long v148 = *(_OWORD *)(v112 - 40);
          long long v149 = *(_OWORD *)(v112 - 24);
          *((void *)v110 - 1) = *((void *)v112 - 1);
          *(_OWORD *)(v110 - 24) = v149;
          *(_OWORD *)(v110 - 40) = v148;
          *(_OWORD *)(v110 - 56) = v147;
          v110 -= 88;
          v112 -= 88;
        }
        while (v112 != v145);
        goto LABEL_120;
      }
LABEL_127:
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    double v28 = fmax(a2, 0.0);
    double v156 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    double v157 = *MEMORY[0x1E4F1DAD8];
    PKBSplineFilter::calculateVStartAndVEnd(this, &v166, &v165);
    unint64_t v153 = (unint64_t)v28;
    if ((unint64_t)v28 > (unint64_t)v7) {
      return;
    }
    unint64_t v29 = (unint64_t)v7;
    char v30 = 0;
    double v151 = v7 - (double)(unint64_t)v7;
    double v152 = v28 - (double)(unint64_t)v28;
    p_id location = &v166.location;
    uint64_t v32 = &v165.location;
    uint64_t v154 = (char *)this + 96;
    CGFloat v155 = (void **)((char *)this + 80);
    unint64_t v33 = (unint64_t)v28;
    unint64_t v150 = (unint64_t)v7;
    while (1)
    {
      uint64_t v34 = v33 != v153;
      double v35 = v152;
      if (v33 != v153) {
        double v35 = 0.0;
      }
      double v161 = v35;
      double v36 = v33 == v29 ? v151 : 1.0;
      double v37 = (v36 - v35) / (1.0 / (double)(int)PKBSplineFilter::calculateStepsForSegment(this, v33, &v166, &v165));
      int64_t v160 = vcvtpd_s64_f64(v37);
      if (v34 <= v160) {
        break;
      }
LABEL_68:
      if ((int64_t)(v33 + 2) >= *((void *)this + 4))
      {
        ++v33;
      }
      else
      {
        *((void *)this + 9) = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 3);
        *((void *)this + 5) = ++v33;
      }
      unint64_t v29 = v150;
      if (v33 > v150) {
        return;
      }
    }
    unint64_t v158 = v33 + 1;
    double v159 = (v36 - v161) / (double)(uint64_t)ceil(v37);
    while (1)
    {
      double v164 = v161 + v159 * (double)v34;
      double v38 = PKBSplineFilter::bsplineInterpolate(this, v33, v6, v164, p_location, v32);
      double v40 = v39;
      uint64_t v41 = *((void *)this + 6);
      uint64_t v42 = (float64x2_t *)(v41 + 88 * v33);
      if (v158 >= 0x2E8BA2E8BA2E8BA3 * ((*((void *)this + 7) - v41) >> 3))
      {
        double v53 = v42->f64[0];
        double v48 = v42[1].f64[1];
        float64x2_t v162 = v42[2];
        double v54 = v42[3].f64[0];
        float64_t v50 = v42[3].f64[1];
        float64_t v52 = v42[4].f64[0];
        double v163 = v42[4].f64[1];
        double v56 = v42[5].f64[0];
        if ((v30 & 1) == 0)
        {
LABEL_29:
          unint64_t v58 = *((void *)this + 11);
          unint64_t v57 = *((void *)this + 12);
          if (v58 < v57)
          {
            *(double *)unint64_t v58 = v53;
            *(double *)(v58 + 8) = v38;
            *(double *)(v58 + 16) = v40;
            *(double *)(v58 + 24) = v48;
            *(float64x2_t *)(v58 + 32) = v162;
            *(double *)(v58 + 48) = v54;
            *(float64_t *)(v58 + 56) = v50;
            *(float64_t *)(v58 + 64) = v52;
            *(double *)(v58 + 72) = v163;
            int8x8_t v59 = (char *)(v58 + 88);
            goto LABEL_35;
          }
          float64x2_t v61 = *v155;
          uint64_t v62 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v58 - (void)*v155) >> 3);
          unint64_t v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) > 0x2E8BA2E8BA2E8BALL) {
            std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v64 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v57 - (void)v61) >> 3);
          if (2 * v64 > v63) {
            unint64_t v63 = 2 * v64;
          }
          if (v64 >= 0x1745D1745D1745DLL) {
            unint64_t v65 = 0x2E8BA2E8BA2E8BALL;
          }
          else {
            unint64_t v65 = v63;
          }
          if (v65)
          {
            float64x2_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)v154, v65);
            float64x2_t v61 = (void *)*((void *)this + 10);
            unint64_t v58 = *((void *)this + 11);
          }
          else
          {
            float64x2_t v66 = 0;
          }
          int v73 = (float64x2_t *)&v66[88 * v62];
          v73->f64[0] = v53;
          v73->f64[1] = v38;
          v73[1].f64[0] = v40;
          v73[1].f64[1] = v48;
          v73[2] = v162;
          v73[3].f64[0] = v54;
          v73[3].f64[1] = v50;
          v73[4].f64[0] = v52;
          v73[4].f64[1] = v163;
          v73[5].f64[0] = v56;
          int v74 = v73;
          if ((void *)v58 != v61)
          {
            do
            {
              float64x2_t v75 = *(float64x2_t *)(v58 - 88);
              *(float64x2_t *)((char *)v74 - 72) = *(float64x2_t *)(v58 - 72);
              *(float64x2_t *)((char *)v74 - 88) = v75;
              float64x2_t v76 = *(float64x2_t *)(v58 - 56);
              float64x2_t v77 = *(float64x2_t *)(v58 - 40);
              float64x2_t v78 = *(float64x2_t *)(v58 - 24);
              v74[-1].f64[1] = *(float64_t *)(v58 - 8);
              *(float64x2_t *)((char *)v74 - 24) = v78;
              *(float64x2_t *)((char *)v74 - 40) = v77;
              *(float64x2_t *)((char *)v74 - 56) = v76;
              int v74 = (float64x2_t *)((char *)v74 - 88);
              v58 -= 88;
            }
            while ((void *)v58 != v61);
            float64x2_t v61 = *v155;
          }
          int8x8_t v59 = (char *)&v73[5].f64[1];
          *((void *)this + 10) = v74;
          *((void *)this + 11) = (char *)v73 + 88;
          *((void *)this + 12) = &v66[88 * v65];
          if (v61) {
            operator delete(v61);
          }
LABEL_65:
          *((void *)this + 11) = v59;
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v43 = v32;
        float64x2_t v44 = p_location;
        unint64_t v45 = v6;
        uint64_t v46 = (float64x2_t *)(v41 + 88 * v33);
        unsigned int v47 = (float64x2_t *)(v41 + 88 * v158);
        double v163 = v164 * v47[4].f64[1] + v46[4].f64[1] * (1.0 - v164);
        double v48 = v164 * v47[1].f64[1] + v46[1].f64[1] * (1.0 - v164);
        DKDMixAnglesInRadians(v46[3].f64[1], v47[3].f64[1], v164);
        float64_t v50 = v49;
        DKDMixAnglesInRadians(v46[4].f64[0], v47[4].f64[0], v164);
        float64_t v52 = v51;
        float64x2_t v162 = vmlaq_n_f64(vmulq_n_f64(v47[2], v164), v46[2], 1.0 - v164);
        double v53 = v164 * v47->f64[0] + v42->f64[0] * (1.0 - v164);
        double v54 = v164 * v47[3].f64[0] + v46[3].f64[0] * (1.0 - v164);
        double v55 = v46[5].f64[0];
        unint64_t v6 = v45;
        p_id location = v44;
        uint64_t v32 = v43;
        double v56 = v164 * v47[5].f64[0] + v55 * (1.0 - v164);
        if ((v30 & 1) == 0) {
          goto LABEL_29;
        }
      }
      if ((v156 - v40) * (v156 - v40) + (v157 - v38) * (v157 - v38) > 0.01)
      {
        unint64_t v58 = *((void *)this + 11);
        unint64_t v60 = *((void *)this + 12);
        if (v58 >= v60)
        {
          float64x2_t v67 = *v155;
          uint64_t v68 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v58 - (void)*v155) >> 3);
          unint64_t v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) > 0x2E8BA2E8BA2E8BALL) {
            std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v70 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v60 - (void)v67) >> 3);
          if (2 * v70 > v69) {
            unint64_t v69 = 2 * v70;
          }
          if (v70 >= 0x1745D1745D1745DLL) {
            unint64_t v71 = 0x2E8BA2E8BA2E8BALL;
          }
          else {
            unint64_t v71 = v69;
          }
          if (v71)
          {
            float64x2_t v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)v154, v71);
            float64x2_t v67 = (void *)*((void *)this + 10);
            unint64_t v58 = *((void *)this + 11);
          }
          else
          {
            float64x2_t v72 = 0;
          }
          long long v79 = (float64x2_t *)&v72[88 * v68];
          v79->f64[0] = v53;
          v79->f64[1] = v38;
          v79[1].f64[0] = v40;
          v79[1].f64[1] = v48;
          v79[2] = v162;
          v79[3].f64[0] = v54;
          v79[3].f64[1] = v50;
          v79[4].f64[0] = v52;
          v79[4].f64[1] = v163;
          v79[5].f64[0] = v56;
          char v80 = v79;
          if ((void *)v58 != v67)
          {
            do
            {
              float64x2_t v81 = *(float64x2_t *)(v58 - 88);
              *(float64x2_t *)((char *)v80 - 72) = *(float64x2_t *)(v58 - 72);
              *(float64x2_t *)((char *)v80 - 88) = v81;
              float64x2_t v82 = *(float64x2_t *)(v58 - 56);
              float64x2_t v83 = *(float64x2_t *)(v58 - 40);
              float64x2_t v84 = *(float64x2_t *)(v58 - 24);
              v80[-1].f64[1] = *(float64_t *)(v58 - 8);
              *(float64x2_t *)((char *)v80 - 24) = v84;
              *(float64x2_t *)((char *)v80 - 40) = v83;
              *(float64x2_t *)((char *)v80 - 56) = v82;
              char v80 = (float64x2_t *)((char *)v80 - 88);
              v58 -= 88;
            }
            while ((void *)v58 != v67);
            float64x2_t v67 = *v155;
          }
          int8x8_t v59 = (char *)&v79[5].f64[1];
          *((void *)this + 10) = v80;
          *((void *)this + 11) = (char *)v79 + 88;
          *((void *)this + 12) = &v72[88 * v71];
          if (v67) {
            operator delete(v67);
          }
          double v156 = v40;
          double v157 = v38;
        }
        else
        {
          *(double *)unint64_t v58 = v53;
          *(double *)(v58 + 8) = v38;
          *(double *)(v58 + 16) = v40;
          *(double *)(v58 + 24) = v48;
          *(float64x2_t *)(v58 + 32) = v162;
          *(double *)(v58 + 48) = v54;
          *(float64_t *)(v58 + 56) = v50;
          *(float64_t *)(v58 + 64) = v52;
          *(double *)(v58 + 72) = v163;
          int8x8_t v59 = (char *)(v58 + 88);
          double v156 = v40;
          double v157 = v38;
LABEL_35:
          *(double *)(v58 + 80) = v56;
        }
        goto LABEL_65;
      }
LABEL_66:
      char v30 = 1;
      if (v34++ == v160) {
        goto LABEL_68;
      }
    }
  }
  uint64_t v8 = *v4;
  double v9 = *((double *)v4 + 1);
  long long v10 = *((_OWORD *)v4 + 3);
  *(_OWORD *)&v166.location.double y = *((_OWORD *)v4 + 2);
  *(_OWORD *)&v166.aspectRatio = v10;
  *(_OWORD *)&v166.force = *((_OWORD *)v4 + 4);
  *(void *)&v166.double altitude = v4[10];
  *(_OWORD *)&v166.timestamp = *((_OWORD *)v4 + 1);
  unint64_t v11 = *((void *)this + 12);
  long long v12 = (void *)((char *)this + 80);
  unint64_t v13 = *((void *)this + 11);
  if (v13 >= v11)
  {
    uint64_t v23 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v13 - *v12) >> 3);
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) > 0x2E8BA2E8BA2E8BALL) {
      goto LABEL_127;
    }
    unint64_t v25 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - *v12) >> 3);
    if (2 * v25 > v24) {
      unint64_t v24 = 2 * v25;
    }
    if (v25 >= 0x1745D1745D1745DLL) {
      unint64_t v26 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26) {
      long long v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)this + 96, v26);
    }
    else {
      long long v27 = 0;
    }
    double v91 = (double *)&v27[88 * v23];
    int v92 = &v27[88 * v26];
    *(void *)double v91 = v8;
    v91[1] = v9;
    *((_OWORD *)v91 + 1) = *(_OWORD *)&v166.timestamp;
    v91[10] = v166.altitude;
    *((_OWORD *)v91 + 4) = *(_OWORD *)&v166.force;
    *((_OWORD *)v91 + 3) = *(_OWORD *)&v166.aspectRatio;
    *((_OWORD *)v91 + 2) = *(_OWORD *)&v166.location.y;
    uint64_t v15 = (char *)(v91 + 11);
    double v94 = (char *)*((void *)this + 10);
    unint64_t v93 = (char *)*((void *)this + 11);
    if (v93 != v94)
    {
      do
      {
        long long v95 = *(_OWORD *)(v93 - 88);
        *(_OWORD *)(v91 - 9) = *(_OWORD *)(v93 - 72);
        *(_OWORD *)(v91 - 11) = v95;
        long long v96 = *(_OWORD *)(v93 - 56);
        long long v97 = *(_OWORD *)(v93 - 40);
        long long v98 = *(_OWORD *)(v93 - 24);
        *(v91 - 1) = *((double *)v93 - 1);
        *(_OWORD *)(v91 - 3) = v98;
        *(_OWORD *)(v91 - 5) = v97;
        *(_OWORD *)(v91 - 7) = v96;
        v91 -= 11;
        v93 -= 88;
      }
      while (v93 != v94);
      unint64_t v93 = (char *)*v12;
    }
    *((void *)this + 10) = v91;
    *((void *)this + 11) = v15;
    *((void *)this + 12) = v92;
    if (v93) {
      operator delete(v93);
    }
  }
  else
  {
    *(void *)unint64_t v13 = v8;
    *(double *)(v13 + 8) = v9;
    long long v14 = *(_OWORD *)&v166.timestamp;
    *(_OWORD *)(v13 + 32) = *(_OWORD *)&v166.location.y;
    *(_OWORD *)(v13 + 48) = *(_OWORD *)&v166.aspectRatio;
    *(_OWORD *)(v13 + 64) = *(_OWORD *)&v166.force;
    *(double *)(v13 + 80) = v166.altitude;
    *(_OWORD *)(v13 + 16) = v14;
    uint64_t v15 = (char *)(v13 + 88);
  }
  *((void *)this + 11) = v15;
  double v99 = v9 + 0.01;
  unint64_t v100 = *((void *)this + 12);
  if ((unint64_t)v15 >= v100)
  {
    uint64_t v105 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v15[-*v12] >> 3);
    if ((unint64_t)(v105 + 1) <= 0x2E8BA2E8BA2E8BALL)
    {
      unint64_t v106 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v100 - *v12) >> 3);
      uint64_t v107 = 2 * v106;
      if (2 * v106 <= v105 + 1) {
        uint64_t v107 = v105 + 1;
      }
      if (v106 >= 0x1745D1745D1745DLL) {
        unint64_t v108 = 0x2E8BA2E8BA2E8BALL;
      }
      else {
        unint64_t v108 = v107;
      }
      if (v108) {
        double v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)this + 96, v108);
      }
      else {
        double v109 = 0;
      }
      double v110 = &v109[88 * v105];
      uint64_t v111 = &v109[88 * v108];
      *(void *)double v110 = v8;
      *((double *)v110 + 1) = v99;
      *((_OWORD *)v110 + 1) = *(_OWORD *)&v166.timestamp;
      *((void *)v110 + 10) = *(void *)&v166.altitude;
      *((_OWORD *)v110 + 4) = *(_OWORD *)&v166.force;
      *((_OWORD *)v110 + 3) = *(_OWORD *)&v166.aspectRatio;
      *((_OWORD *)v110 + 2) = *(_OWORD *)&v166.location.y;
      double v104 = v110 + 88;
      unint64_t v113 = (char *)*((void *)this + 10);
      char v112 = (char *)*((void *)this + 11);
      if (v112 == v113) {
        goto LABEL_121;
      }
      do
      {
        long long v114 = *(_OWORD *)(v112 - 88);
        *(_OWORD *)(v110 - 72) = *(_OWORD *)(v112 - 72);
        *(_OWORD *)(v110 - 88) = v114;
        long long v115 = *(_OWORD *)(v112 - 56);
        long long v116 = *(_OWORD *)(v112 - 40);
        long long v117 = *(_OWORD *)(v112 - 24);
        *((void *)v110 - 1) = *((void *)v112 - 1);
        *(_OWORD *)(v110 - 24) = v117;
        *(_OWORD *)(v110 - 40) = v116;
        *(_OWORD *)(v110 - 56) = v115;
        v110 -= 88;
        v112 -= 88;
      }
      while (v112 != v113);
LABEL_120:
      char v112 = (char *)*v12;
LABEL_121:
      *((void *)this + 10) = v110;
      *((void *)this + 11) = v104;
      *((void *)this + 12) = v111;
      if (v112) {
        operator delete(v112);
      }
      goto LABEL_123;
    }
    goto LABEL_127;
  }
  *(void *)uint64_t v15 = v8;
  *((double *)v15 + 1) = v99;
  double altitude = v166.altitude;
  long long v102 = *(_OWORD *)&v166.force;
  *((_OWORD *)v15 + 3) = *(_OWORD *)&v166.aspectRatio;
  *((_OWORD *)v15 + 4) = v102;
  *((double *)v15 + 10) = altitude;
  long long v103 = *(_OWORD *)&v166.location.y;
  *((_OWORD *)v15 + 1) = *(_OWORD *)&v166.timestamp;
  *((_OWORD *)v15 + 2) = v103;
  double v104 = v15 + 88;
LABEL_123:
  *((void *)this + 11) = v104;
}

char *std::vector<_PKStrokePoint>::insert(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v16 = *(char **)a1;
    unint64_t v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v17 > 0x2E8BA2E8BA2E8BALL) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = __src - v16;
    uint64_t v19 = 0x2E8BA2E8BA2E8BA3 * ((__src - v16) >> 3);
    unint64_t v20 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7 - (void)v16) >> 3);
    if (2 * v20 > v17) {
      unint64_t v17 = 2 * v20;
    }
    if (v20 >= 0x1745D1745D1745DLL) {
      unint64_t v21 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v21 = v17;
    }
    uint64_t v45 = a1 + 16;
    if (v21) {
      int64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>(a1 + 16, v21);
    }
    else {
      int64_t v22 = 0;
    }
    char v31 = &v22[88 * v19];
    __p = v22;
    uint64_t v42 = v31;
    uint64_t v43 = v31;
    float64x2_t v44 = &v22[88 * v21];
    if (v19 == v21)
    {
      if (v18 < 1)
      {
        if (v16 == v4) {
          unint64_t v33 = 1;
        }
        else {
          unint64_t v33 = 2 * v19;
        }
        uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>(v8, v33);
        char v31 = &v34[88 * (v33 >> 2)];
        __p = v34;
        uint64_t v42 = v31;
        float64x2_t v44 = &v34[88 * v35];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        uint64_t v32 = v19 + 2;
        if (v19 >= -1) {
          uint64_t v32 = v19 + 1;
        }
        v31 -= 88 * (v32 >> 1);
        uint64_t v42 = v31;
      }
    }
    long long v36 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)char v31 = *(_OWORD *)v3;
    *((_OWORD *)v31 + 1) = v36;
    long long v37 = *(_OWORD *)(v3 + 32);
    long long v38 = *(_OWORD *)(v3 + 48);
    long long v39 = *(_OWORD *)(v3 + 64);
    *((void *)v31 + 10) = *(void *)(v3 + 80);
    *((_OWORD *)v31 + 3) = v38;
    *((_OWORD *)v31 + 4) = v39;
    *((_OWORD *)v31 + 2) = v37;
    uint64_t v43 = v31 + 88;
    uint64_t v4 = (char *)std::vector<_PKStrokePoint>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v43 != v42) {
      uint64_t v43 = &v42[(v43 - v42 - 88) % 0x58uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    long long v27 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)__srCGFloat c = *(_OWORD *)a3;
    *((_OWORD *)__src + 1) = v27;
    long long v28 = *(_OWORD *)(a3 + 32);
    long long v29 = *(_OWORD *)(a3 + 48);
    long long v30 = *(_OWORD *)(a3 + 64);
    *((void *)__src + 10) = *(void *)(a3 + 80);
    *((_OWORD *)__src + 3) = v29;
    *((_OWORD *)__src + 4) = v30;
    *((_OWORD *)__src + 2) = v28;
    *(void *)(a1 + 8) = __src + 88;
  }
  else
  {
    double v9 = __src + 88;
    long long v10 = v6 - 88;
    uint64_t v11 = *(void *)(a1 + 8);
    while (v10 < v6)
    {
      long long v12 = *((_OWORD *)v10 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v10;
      *(_OWORD *)(v11 + 16) = v12;
      long long v13 = *((_OWORD *)v10 + 2);
      long long v14 = *((_OWORD *)v10 + 3);
      long long v15 = *((_OWORD *)v10 + 4);
      *(void *)(v11 + 80) = *((void *)v10 + 10);
      *(_OWORD *)(v11 + 48) = v14;
      *(_OWORD *)(v11 + 64) = v15;
      *(_OWORD *)(v11 + 32) = v13;
      v10 += 88;
      v11 += 88;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(__src + 88, __src, v6 - v9);
    }
    if ((unint64_t)v4 <= v3) {
      v3 += 88 * (*(void *)(a1 + 8) > v3);
    }
    long long v23 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
    *((_OWORD *)v4 + 1) = v23;
    long long v24 = *(_OWORD *)(v3 + 32);
    long long v25 = *(_OWORD *)(v3 + 48);
    long long v26 = *(_OWORD *)(v3 + 64);
    *((void *)v4 + 10) = *(void *)(v3 + 80);
    *((_OWORD *)v4 + 3) = v25;
    *((_OWORD *)v4 + 4) = v26;
    *((_OWORD *)v4 + 2) = v24;
  }
  return v4;
}

void sub_1C46414B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float64x2_t PKBSplineFilter::calculateVStartAndVEnd(PKBSplineFilter *this, _PKStrokePoint *a2, _PKStrokePoint *a3)
{
  uint64_t v3 = *((void *)this + 6);
  uint64_t v4 = *((void *)this + 7) - v3;
  long long v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)&a2->timestamp = *(_OWORD *)v3;
  *(_OWORD *)&a2->location.double y = v5;
  long long v6 = *(_OWORD *)(v3 + 32);
  long long v7 = *(_OWORD *)(v3 + 48);
  long long v8 = *(_OWORD *)(v3 + 64);
  a2->radius2 = *(double *)(v3 + 80);
  *(_OWORD *)&a2->force = v7;
  *(_OWORD *)&a2->double altitude = v8;
  *(_OWORD *)&a2->aspectRatio = v6;
  uint64_t v9 = *((void *)this + 7);
  __asm { FMOV            V2.2D, #2.0 }
  a2->id location = (CGPoint)vmlaq_f64(vnegq_f64(*(float64x2_t *)(*((void *)this + 6) + 96)), _Q2, *(float64x2_t *)(*((void *)this + 6) + 8));
  long long v15 = *(_OWORD *)(v9 - 56);
  long long v16 = *(_OWORD *)(v9 - 40);
  long long v17 = *(_OWORD *)(v9 - 24);
  a3->radius2 = *(double *)(v9 - 8);
  *(_OWORD *)&a3->force = v16;
  *(_OWORD *)&a3->double altitude = v17;
  *(_OWORD *)&a3->aspectRatio = v15;
  long long v18 = *(_OWORD *)(v9 - 72);
  *(_OWORD *)&a3->timestamp = *(_OWORD *)(v9 - 88);
  *(_OWORD *)&a3->location.double y = v18;
  uint64_t v19 = v4 + *((void *)this + 6);
  float64x2_t result = *(float64x2_t *)(v19 - 80);
  a3->id location = (CGPoint)vmlaq_f64(vnegq_f64(*(float64x2_t *)(v19 - 168)), _Q2, result);
  return result;
}

uint64_t PKBSplineFilter::calculateStepsForSegment(PKBSplineFilter *this, uint64_t a2, const _PKStrokePoint *a3, const _PKStrokePoint *a4)
{
  v55[63] = *MEMORY[0x1E4F143B8];
  uint64_t result = *((unsigned int *)this + 26);
  if ((int)result <= 0)
  {
    long long v7 = (double *)*((void *)this + 6);
    unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 7) - (void)v7) >> 3);
    if (*((unsigned char *)this + 109))
    {
      if (a2)
      {
        uint64_t v9 = &v7[11 * a2];
        double v10 = *(v9 - 10);
        double v11 = *(v9 - 9);
        double v12 = v9[1];
        double v13 = v9[2];
        double v14 = v9[12];
        double v15 = v9[13];
        if (a2 + 2 >= v8)
        {
          double x = a4->location.x;
          double y = a4->location.y;
        }
        else
        {
          long long v16 = &v7[11 * a2 + 22];
          double x = v16[1];
          double y = v16[2];
        }
      }
      else
      {
        double v10 = a3->location.x;
        double v11 = a3->location.y;
        double v12 = v7[1];
        double v13 = v7[2];
        double v14 = v7[12];
        double v15 = v7[13];
        double x = v7[23];
        double y = v7[24];
      }
      int v48 = vcvtpd_s64_f64(approximateSplineLength(v10, v11, v12, v13, v14, v15, x, y) / *((double *)this + 17));
      if (v48 >= 8) {
        int v48 = 8;
      }
      int v49 = *((_DWORD *)this + 38);
      if (v48 <= v49) {
        return v49;
      }
      else {
        return v48;
      }
    }
    else
    {
      int v19 = 8 * *((_DWORD *)this + 36);
      if (v19 >= 32) {
        unint64_t v20 = 32;
      }
      else {
        unint64_t v20 = v19;
      }
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_31;
      }
      uint64_t v21 = 0;
      double v22 = (double)(int)v20;
      p_id location = &a3->location;
      long long v24 = &a4->location;
      long long v25 = (double *)&v54 + 1;
      do
      {
        *(v25 - 1) = PKBSplineFilter::bsplineInterpolate(this, a2, v8, (double)(int)v21 / v22, p_location, v24);
        *(void *)long long v25 = v26;
        ++v21;
        v25 += 2;
      }
      while ((v20 | 1) != v21);
      if ((int)v20 < 2)
      {
LABEL_31:
        BOOL v38 = 0;
        int v33 = 1;
      }
      else
      {
        double v27 = *((double *)this + 15) / (double)(uint64_t)(*((void *)this + 18) * *((void *)this + 18));
        double v28 = v27 * v27;
        int v29 = 1;
        int v30 = v20;
        do
        {
          int v51 = v29;
          int v50 = v30;
          int v31 = v30 + v29;
          if (v30 + v29 < 0 != __OFADD__(v30, v29)) {
            int v32 = v31 + 1;
          }
          else {
            int v32 = v30 + v29;
          }
          int v33 = v32 >> 1;
          v52[0] = v54;
          v52[v32 >> 1] = *(_OWORD *)&v55[2 * v20 - 1];
          if (v31 >= 4)
          {
            if (v33 <= 2) {
              uint64_t v34 = 2;
            }
            else {
              uint64_t v34 = v33;
            }
            uint64_t v35 = (double *)&v53;
            for (uint64_t i = 1; i != v34; ++i)
            {
              *(v35 - 1) = PKBSplineFilter::bsplineInterpolate(this, a2, v8, (double)(int)i / (double)v33, p_location, v24);
              *(void *)uint64_t v35 = v37;
              v35 += 2;
            }
          }
          BOOL v38 = 0;
          long long v39 = (double *)v55;
          int v40 = v33;
          uint64_t v41 = 1;
          do
          {
            double v42 = (double)v40 / v22;
            int v43 = vcvtmd_s64_f64(v42);
            double v44 = v42 - (double)v43;
            uint64_t v45 = (double *)&v52[v43];
            double v46 = v45[2] * v44 + *v45 * (1.0 - v44);
            double v47 = v45[3] * v44 + v45[1] * (1.0 - v44);
            if ((v47 - *v39) * (v47 - *v39) + (v46 - *(v39 - 1)) * (v46 - *(v39 - 1)) > v28) {
              break;
            }
            BOOL v38 = ++v41 >= v20;
            v40 += v33;
            v39 += 2;
          }
          while (v20 != v41);
          int v30 = v50;
          if (v38)
          {
            int v30 = v33 - 1;
            int v29 = v51;
          }
          else
          {
            int v29 = v33 + 1;
          }
        }
        while (v29 < v30);
      }
      return v33 + (v33 < (int)v20 && !v38);
    }
  }
  return result;
}

double PKBSplineFilter::bsplineInterpolate(PKBSplineFilter *this, uint64_t a2, uint64_t a3, double a4, const CGPoint *a5, const CGPoint *a6)
{
  double v13 = *MEMORY[0x1E4F1DAD8];
  double v12 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  p_double y = &a6->y;
  double v15 = &a5->y;
  uint64_t v16 = 88 * a2 - 80;
  double v17 = 0.0;
  uint64_t v18 = -4;
  do
  {
    int v19 = v15;
    unint64_t v20 = a5;
    if (a2 + v18 + 2 >= -1)
    {
      int v19 = p_y;
      unint64_t v20 = a6;
      if (a2 + v18 + 3 < a3)
      {
        unint64_t v20 = (const CGPoint *)(*((void *)this + 6) + v16);
        int v19 = &v20->y;
      }
    }
    double x = v20->x;
    double v22 = *v19;
    double v23 = b((int)v18 + 2, a4);
    double v13 = v13 + v23 * x;
    double v12 = v12 + v23 * v22;
    double v17 = v17 + v23;
    v16 += 88;
  }
  while (!__CFADD__(v18++, 1));
  return v13 / v17;
}

uint64_t PKStrokeInputProvider::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = [*(id *)(a1 + 8) _pointsCount];
  uint64_t v6 = a3[1] - *a3;
  std::vector<_PKStrokePoint>::resize((uint64_t)a3, v5 + 0x2E8BA2E8BA2E8BA3 * (v6 >> 3));
  if (v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a3 + v6;
    do
    {
      uint64_t v9 = *(void **)(a1 + 8);
      if (v9)
      {
        [v9 decompressedPointAt:v7];
      }
      else
      {
        uint64_t v16 = 0;
        long long v14 = 0u;
        long long v15 = 0u;
        long long v12 = 0u;
        long long v13 = 0u;
        long long v11 = 0u;
      }
      *(_OWORD *)uint64_t v8 = v11;
      *(_OWORD *)(v8 + 16) = v12;
      *(void *)(v8 + 80) = v16;
      *(_OWORD *)(v8 + 48) = v14;
      *(_OWORD *)(v8 + 64) = v15;
      *(_OWORD *)(v8 + 32) = v13;
      ++v7;
      v8 += 88;
    }
    while (v5 != v7);
  }
  return objc_msgSend(*(id *)(a1 + 8), "_pointsCount", v11, v12, v13, v14, v15, v16);
}

void std::default_delete<PKBSplineFilter>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    *(void *)a2 = &unk_1F1FAF9E0;
    uint64_t v3 = *(void **)(a2 + 80);
    if (v3)
    {
      *(void *)(a2 + 88) = v3;
      operator delete(v3);
    }
    *(void *)a2 = &unk_1F1FAFFB0;
    uint64_t v4 = *(void **)(a2 + 48);
    if (v4)
    {
      *(void *)(a2 + 56) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1C8783F10);
  }
}

void sub_1C4641D54(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C4641E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4641EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4641FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4642098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C46421B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C46422F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4642508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C46428DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4642E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C464336C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t drawingV1::StrokeID::StrokeID(uint64_t this)
{
  *(void *)this = &unk_1F1FB0A50;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_1F1FB0A50;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void drawingV1::StrokeID::~StrokeID(drawingV1::StrokeID *this)
{
  PB::Base::~Base(this);

  JUMPOUT(0x1C8783F10);
}

uint64_t drawingV1::StrokeID::StrokeID(uint64_t this, const drawingV1::StrokeID *a2)
{
  *(void *)this = &unk_1F1FB0A50;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 32) = v3;
    *(void *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 3);
    *(unsigned char *)(this + 32) = v3 | 4;
    *(void *)(this + 24) = v6;
  }
  return this;
}

uint64_t drawingV1::StrokeID::operator=(uint64_t a1, const drawingV1::StrokeID *a2)
{
  if ((const drawingV1::StrokeID *)a1 != a2)
  {
    drawingV1::StrokeID::StrokeID((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t drawingV1::swap(uint64_t this, drawingV1::StrokeID *a2, drawingV1::StrokeID *a3)
{
  int v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  return this;
}

uint64_t drawingV1::StrokeID::StrokeID(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_1F1FB0A50;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  return result;
}

{
  *(void *)uint64_t result = &unk_1F1FB0A50;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  return result;
}

uint64_t drawingV1::StrokeID::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v9 = &unk_1F1FB0A50;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 24);
    int v12 = *(_DWORD *)(a1 + 32);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v10 = v5;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t drawingV1::StrokeID::formatText(drawingV1::StrokeID *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "clock");
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "replicaIndex");
  if ((*((unsigned char *)this + 32) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "subclock");
LABEL_5:

  return MEMORY[0x1F4147498](a2);
}

uint64_t drawingV1::StrokeID::readFrom(drawingV1::StrokeID *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_31;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              uint64_t v31 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_83;
            }
            unint64_t v45 = v27++;
            char v46 = *(unsigned char *)(v28 + v45);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0) {
              break;
            }
            v43 += 7;
            BOOL v14 = v44++ > 8;
            if (v14)
            {
              uint64_t v31 = 0;
              goto LABEL_82;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v31 = 0;
          }
LABEL_82:
          unint64_t v3 = v45 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              uint64_t v31 = 0;
              break;
            }
          }
        }
LABEL_83:
        *((void *)this + 3) = v31;
      }
      else if (v19 == 2)
      {
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v33)
            {
              uint64_t v37 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_88;
            }
            unint64_t v49 = v33++;
            char v50 = *(unsigned char *)(v34 + v49);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0) {
              break;
            }
            v47 += 7;
            BOOL v14 = v48++ > 8;
            if (v14)
            {
              uint64_t v37 = 0;
              goto LABEL_87;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v37 = 0;
          }
LABEL_87:
          unint64_t v3 = v49 + 1;
        }
        else
        {
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v37 = 0;
          while (1)
          {
            unint64_t v3 = v33 + 1;
            *((void *)a2 + 1) = v33 + 1;
            char v38 = *(unsigned char *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0) {
              break;
            }
            v35 += 7;
            unint64_t v33 = v3;
            BOOL v14 = v36++ > 8;
            if (v14)
            {
              uint64_t v37 = 0;
              break;
            }
          }
        }
LABEL_88:
        *((void *)this + 2) = v37;
      }
      else if (v19 == 1)
      {
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_78;
            }
            unint64_t v41 = v20++;
            char v42 = *(unsigned char *)(v21 + v41);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0) {
              break;
            }
            v39 += 7;
            BOOL v14 = v40++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_77;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
LABEL_77:
          unint64_t v3 = v41 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v3 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v3;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_78:
        *((void *)this + 1) = v24;
      }
      else
      {
LABEL_31:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_31;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t drawingV1::StrokeID::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 32) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 32) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:

  return PB::Writer::writeVarInt(a2);
}

BOOL drawingV1::StrokeID::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 4) == 0;
  if ((*(unsigned char *)(a1 + 32) & 4) != 0) {
    return (*(unsigned char *)(a2 + 32) & 4) != 0 && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  }
  return v2;
}

uint64_t drawingV1::StrokeID::hash_value(drawingV1::StrokeID *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  uint64_t v1 = *((void *)this + 1);
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *((void *)this + 2);
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v3 = *((void *)this + 3);
  return v2 ^ v1 ^ v3;
}

double drawingV1::Drawing::Drawing(drawingV1::Drawing *this)
{
  *(void *)this = &unk_1F1FB0A18;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F1FB0A18;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  return result;
}

void drawingV1::Drawing::~Drawing(void ***this)
{
  *this = (void **)&unk_1F1FB0A18;
  char v4 = (void **)(this + 14);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 13, 0);
  char v4 = (void **)(this + 10);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v4);
  char v4 = (void **)(this + 6);
  std::vector<PB::Data>::__destroy_vector::operator()[abi:ne180100](&v4);
  char v4 = (void **)(this + 3);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = this[2];
  this[2] = 0;
  if (v2) {
    (*((void (**)(void **))*v2 + 1))(v2);
  }
  uint64_t v3 = this[1];
  this[1] = 0;
  if (v3) {
    (*((void (**)(void **))*v3 + 1))(v3);
  }
  PB::Base::~Base((PB::Base *)this);
}

{
  uint64_t vars8;

  drawingV1::Drawing::~Drawing(this);

  JUMPOUT(0x1C8783F10);
}

drawingV1::Drawing *drawingV1::Drawing::Drawing(drawingV1::Drawing *this, const drawingV1::Drawing *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(void *)this = &unk_1F1FB0A18;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  if (*((void *)a2 + 13)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 136))
  {
    uint64_t v4 = *((void *)a2 + 9);
    *((unsigned char *)this + 136) |= 1u;
    *((void *)this + 9) = v4;
  }
  if (this != a2) {
    std::vector<PB::Data>::__assign_with_size[abi:ne180100]<PB::Data*,PB::Data*>((uint64_t)this + 48, *((PB::Data **)a2 + 6), *((PB::Data **)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 4);
  }
  if (*((void *)a2 + 14) != *((void *)a2 + 15)) {
    operator new();
  }
  if (*((void *)a2 + 3) != *((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 10) != *((void *)a2 + 11)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

void sub_1C4647D50(void *a1)
{
}

uint64_t drawingV1::Drawing::operator=(uint64_t a1, const drawingV1::Drawing *a2)
{
  if ((const drawingV1::Drawing *)a1 != a2)
  {
    drawingV1::Drawing::Drawing((drawingV1::Drawing *)v5, a2);
    drawingV1::swap(a1, (drawingV1::Drawing *)v5, v3);
    drawingV1::Drawing::~Drawing(v5);
  }
  return a1;
}

uint64_t drawingV1::swap(uint64_t this, drawingV1::Drawing *a2, drawingV1::Drawing *a3)
{
  int v3 = *(_DWORD *)(this + 136);
  *(_DWORD *)(this + 136) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  uint64_t v4 = *(void *)(this + 104);
  *(void *)(this + 104) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v4;
  uint64_t v5 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v5;
  uint64_t v6 = *(void *)(this + 56);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v6;
  uint64_t v8 = *(void *)(this + 64);
  uint64_t v7 = *(void *)(this + 72);
  uint64_t v9 = *((void *)a2 + 9);
  *(void *)(this + 64) = *((void *)a2 + 8);
  *(void *)(this + 72) = v9;
  *((void *)a2 + 8) = v8;
  *((void *)a2 + 9) = v7;
  uint64_t v10 = *(void *)(this + 112);
  *(void *)(this + 112) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v10;
  uint64_t v11 = *(void *)(this + 120);
  *(void *)(this + 120) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v11;
  uint64_t v12 = *(void *)(this + 128);
  *(void *)(this + 128) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v12;
  uint64_t v13 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  uint64_t v15 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v15;
  uint64_t v16 = *(void *)(this + 80);
  *(void *)(this + 80) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v16;
  uint64_t v17 = *(void *)(this + 88);
  *(void *)(this + 88) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v17;
  uint64_t v18 = *(void *)(this + 96);
  *(void *)(this + 96) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v18;
  uint64_t v19 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v19;
  uint64_t v20 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v20;
  return this;
}

uint64_t drawingV1::Drawing::Drawing(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1FB0A18;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v4 = (void **)(a1 + 24);
  uint64_t v5 = (void **)(a1 + 48);
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v6 = (void **)(a1 + 80);
  *(_OWORD *)(a1 + 112) = 0u;
  uint64_t v7 = (void **)(a1 + 112);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  uint64_t v8 = *(void ***)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 104), v8);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  std::vector<PB::Data>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  if (*v7)
  {
    std::vector<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::__clear[abi:ne180100]((void *)(a1 + 112));
    operator delete(*v7);
    *uint64_t v7 = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  if (*(void *)(a1 + 24))
  {
    std::vector<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::__clear[abi:ne180100](v4);
    operator delete(*v4);
    void *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  if (*(void *)(a1 + 80))
  {
    std::vector<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::__clear[abi:ne180100](v6);
    operator delete(*v6);
    char *v6 = 0;
    v6[1] = 0;
    id v6[2] = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return a1;
}

uint64_t drawingV1::Drawing::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    drawingV1::Drawing::Drawing((uint64_t)v5, a2);
    drawingV1::swap(a1, (drawingV1::Drawing *)v5, v3);
    drawingV1::Drawing::~Drawing(v5);
  }
  return a1;
}

uint64_t drawingV1::Drawing::formatText(drawingV1::Drawing *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "bounds");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "boundsVersion");
  }
  uint64_t v7 = (uint64_t *)*((void *)this + 3);
  uint64_t v8 = (uint64_t *)*((void *)this + 4);
  while (v7 != v8)
  {
    uint64_t v9 = *v7++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "inks");
  }
  uint64_t v10 = *((void *)this + 6);
  for (uint64_t i = *((void *)this + 7); v10 != i; v10 += 16)
    PB::TextFormatter::format();
  if (*((unsigned char *)this + 136)) {
    PB::TextFormatter::format(a2, "serializationVersion");
  }
  uint64_t v12 = (uint64_t *)*((void *)this + 10);
  uint64_t v13 = (uint64_t *)*((void *)this + 11);
  while (v12 != v13)
  {
    uint64_t v14 = *v12++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, a2, "strokes");
  }
  if (*((void *)this + 13)) {
    PB::TextFormatter::format();
  }
  uint64_t v15 = (uint64_t *)*((void *)this + 14);
  uint64_t v16 = (uint64_t *)*((void *)this + 15);
  while (v15 != v16)
  {
    uint64_t v17 = *v15++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, a2, "versionVector");
  }

  return MEMORY[0x1F4147498](a2);
}

uint64_t drawingV1::Drawing::readFrom(drawingV1::Drawing *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  uint64_t v8 = (uint64_t *)((char *)this + 48);
  uint64_t v9 = (char *)this + 64;
  while (1)
  {
    uint64_t v10 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      unint64_t v14 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v15 = *(unsigned char *)(v10 + v2);
      v13 |= (unint64_t)(v15 & 0x7F) << v11;
      if ((v15 & 0x80) == 0) {
        break;
      }
      v11 += 7;
      unint64_t v2 = v14;
      BOOL v16 = v12++ > 8;
      if (v16) {
        goto LABEL_20;
      }
    }
LABEL_22:
    if ((v13 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 136) |= 1u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        uint64_t v24 = *(void *)a2;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          do
          {
            unint64_t v28 = v22 + 1;
            *((void *)a2 + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              goto LABEL_60;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v16 = v26++ > 8;
          }
          while (!v16);
LABEL_45:
          uint64_t v27 = 0;
          goto LABEL_60;
        }
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v27 = 0;
        if (v23 <= v22) {
          unint64_t v23 = *((void *)a2 + 1);
        }
        break;
      case 2u:
        uint64_t v31 = (void *)*((void *)this + 7);
        unint64_t v30 = *((void *)this + 8);
        if ((unint64_t)v31 >= v30)
        {
          uint64_t v37 = ((uint64_t)v31 - *v8) >> 4;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 60) {
            std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v39 = v30 - *v8;
          if (v39 >> 3 > v38) {
            unint64_t v38 = v39 >> 3;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          v44[4] = v9;
          if (v40) {
            unint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)v9, v40);
          }
          else {
            unint64_t v41 = 0;
          }
          char v42 = &v41[16 * v37];
          v44[0] = v41;
          v44[1] = v42;
          v44[3] = &v41[16 * v40];
          *(void *)char v42 = 0;
          *((void *)v42 + 1) = 0;
          v44[2] = v42 + 16;
          std::vector<PB::Data>::__swap_out_circular_buffer(v8, v44);
          char v32 = (void *)*((void *)this + 7);
          std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)v44);
        }
        else
        {
          *uint64_t v31 = 0;
          v31[1] = 0;
          char v32 = v31 + 2;
          *((void *)this + 7) = v31 + 2;
        }
        *((void *)this + 7) = v32;
        PB::Reader::read(a2, (PB::Data *)(v32 - 2));
        goto LABEL_61;
      case 3u:
        PB::PtrVector<drawingV1::StrokeID>::emplace_back<>();
      case 4u:
        PB::PtrVector<drawingV1::Ink>::emplace_back<>();
      case 5u:
        PB::PtrVector<drawingV1::Stroke>::emplace_back<>();
      case 8u:
        operator new();
      case 9u:
        operator new();
      case 0xAu:
        operator new();
      default:
        goto LABEL_20;
    }
    while (1)
    {
      if (v23 == v22)
      {
        uint64_t v27 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_60;
      }
      unint64_t v35 = v22 + 1;
      char v36 = *(unsigned char *)(v24 + v22);
      *((void *)a2 + 1) = v35;
      v27 |= (unint64_t)(v36 & 0x7F) << v33;
      if ((v36 & 0x80) == 0) {
        break;
      }
      v33 += 7;
      unint64_t v22 = v35;
      BOOL v16 = v34++ > 8;
      if (v16) {
        goto LABEL_45;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v27 = 0;
    }
LABEL_60:
    *((void *)this + 9) = v27;
LABEL_61:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v17 = 0;
  unsigned int v18 = 0;
  unint64_t v13 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v19 = v2 + 1;
    char v20 = *(unsigned char *)(v10 + v2);
    *((void *)a2 + 1) = v19;
    v13 |= (unint64_t)(v20 & 0x7F) << v17;
    if ((v20 & 0x80) == 0) {
      goto LABEL_22;
    }
    v17 += 7;
    unint64_t v2 = v19;
    BOOL v16 = v18++ > 8;
  }
  while (!v16);
LABEL_20:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_61;
  }
  return result;
}

void sub_1C46488BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void PB::PtrVector<drawingV1::StrokeID>::emplace_back<>()
{
}

void sub_1C4648A10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void PB::PtrVector<drawingV1::Ink>::emplace_back<>()
{
}

void sub_1C4648B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void PB::PtrVector<drawingV1::Stroke>::emplace_back<>()
{
}

void sub_1C4648CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t drawingV1::Drawing::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 136)) {
    this = PB::Writer::writeVarInt(a2);
  }
  int v4 = (const PB::Data *)v3[6];
  uint64_t v5 = (const PB::Data *)v3[7];
  while (v4 != v5)
  {
    this = PB::Writer::write(a2, v4);
    int v4 = (const PB::Data *)((char *)v4 + 16);
  }
  uint64_t v6 = (const PB::Base **)v3[14];
  uint64_t v7 = (const PB::Base **)v3[15];
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  uint64_t v9 = (const PB::Base **)v3[3];
  uint64_t v10 = (const PB::Base **)v3[4];
  while (v9 != v10)
  {
    char v11 = *v9++;
    this = PB::Writer::writeSubmessage(a2, v11);
  }
  unsigned int v12 = (const PB::Base **)v3[10];
  unint64_t v13 = (const PB::Base **)v3[11];
  while (v12 != v13)
  {
    unint64_t v14 = *v12++;
    this = PB::Writer::writeSubmessage(a2, v14);
  }
  char v15 = (const PB::Base *)v3[1];
  if (v15) {
    this = PB::Writer::writeSubmessage(a2, v15);
  }
  BOOL v16 = (const PB::Data *)v3[13];
  if (v16) {
    this = PB::Writer::write(a2, v16);
  }
  char v17 = (const PB::Base *)v3[2];
  if (v17)
  {
    return PB::Writer::writeSubmessage(a2, v17);
  }
  return this;
}

uint64_t drawingV1::Drawing::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (!v4 || (PB::Data::operator==() & 1) == 0 && *(void *)(a1 + 104) | *(void *)(a2 + 104)) {
      return 0;
    }
  }
  else if (v4)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 136))
  {
    if ((*(unsigned char *)(a2 + 136) & 1) == 0 || *(void *)(a1 + 72) != *(void *)(a2 + 72)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 136))
  {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a2 + 48);
  if (v6 - v5 != *(void *)(a2 + 56) - v7) {
    return 0;
  }
  while (v5 != v6)
  {
    uint64_t result = PB::Data::operator==();
    if (!result) {
      return result;
    }
    v5 += 16;
    v7 += 16;
  }
  uint64_t v9 = *(uint64_t **)(a1 + 112);
  uint64_t v10 = *(uint64_t **)(a1 + 120);
  char v11 = *(uint64_t **)(a2 + 112);
  if ((char *)v10 - (char *)v9 != *(void *)(a2 + 120) - (void)v11) {
    return 0;
  }
  while (v9 != v10)
  {
    uint64_t result = drawingV1::StrokeID::operator==(*v9, *v11);
    if (!result) {
      return result;
    }
    ++v9;
    ++v11;
  }
  unsigned int v12 = *(uint64_t **)(a2 + 24);
  unint64_t v14 = *(uint64_t **)(a1 + 24);
  unint64_t v13 = *(uint64_t **)(a1 + 32);
  if ((char *)v13 - (char *)v14 != *(void *)(a2 + 32) - (void)v12) {
    return 0;
  }
  while (v14 != v13)
  {
    uint64_t result = drawingV1::Ink::operator==(*v14, *v12);
    if (!result) {
      return result;
    }
    ++v14;
    ++v12;
    unint64_t v13 = *(uint64_t **)(a1 + 32);
  }
  uint64_t result = PB::PtrVector<drawingV1::Stroke>::operator==((uint64_t **)(a1 + 80), *(uint64_t **)(a2 + 80), *(void *)(a2 + 88));
  if (result)
  {
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a2 + 8);
    if (v15)
    {
      if (!v16 || !drawingV1::Rectangle::operator==(v15, v16)) {
        return 0;
      }
      goto LABEL_28;
    }
    if (!v16)
    {
LABEL_28:
      uint64_t v17 = *(void *)(a1 + 16);
      uint64_t v18 = *(void *)(a2 + 16);
      uint64_t result = (v17 | v18) == 0;
      if (v17 && v18)
      {
        uint64_t v19 = *(void *)(a1 + 16);
        return drawingV1::StrokeID::operator==(v19, v18);
      }
      return result;
    }
    return 0;
  }
  return result;
}

BOOL PB::PtrVector<drawingV1::Stroke>::operator==(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  if ((char *)v3 - (char *)*a1 != a3 - (void)a2) {
    return 0;
  }
  if (v4 == v3) {
    return 1;
  }
  uint64_t v5 = a2;
  do
  {
    BOOL result = drawingV1::Stroke::operator==(*v4, *v5);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 != a1[1]);
  return result;
}

unint64_t drawingV1::Drawing::hash_value(drawingV1::Drawing *this)
{
  if (*((void *)this + 13)) {
    uint64_t v2 = PBHashBytes();
  }
  else {
    uint64_t v2 = 0;
  }
  if (*((unsigned char *)this + 136)) {
    uint64_t v3 = *((void *)this + 9);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 6);
  uint64_t v5 = *((void *)this + 7);
  if (v4 == v5)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      v4 += 16;
      v6 ^= PBHashBytes();
    }
    while (v4 != v5);
  }
  uint64_t v7 = *((void *)this + 14);
  uint64_t v8 = *((void *)this + 15);
  if (v7 != v8)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = *(void **)v7;
      if (*(unsigned char *)(*(void *)v7 + 32))
      {
        uint64_t v11 = v10[1];
        if ((*(unsigned char *)(*(void *)v7 + 32) & 2) != 0)
        {
LABEL_16:
          uint64_t v12 = v10[2];
          if ((*(unsigned char *)(*(void *)v7 + 32) & 4) == 0) {
            goto LABEL_20;
          }
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v11 = 0;
        if ((*(unsigned char *)(*(void *)v7 + 32) & 2) != 0) {
          goto LABEL_16;
        }
      }
      uint64_t v12 = 0;
      if ((*(unsigned char *)(*(void *)v7 + 32) & 4) == 0)
      {
LABEL_20:
        uint64_t v13 = 0;
        goto LABEL_21;
      }
LABEL_17:
      uint64_t v13 = v10[3];
LABEL_21:
      v9 ^= v11 ^ v12 ^ v13;
      v7 += 8;
      if (v7 == v8) {
        goto LABEL_24;
      }
    }
  }
  uint64_t v9 = 0;
LABEL_24:
  unint64_t v14 = (drawingV1::Ink **)*((void *)this + 3);
  uint64_t v15 = (drawingV1::Ink **)*((void *)this + 4);
  if (v14 == v15)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = *v14++;
      v16 ^= drawingV1::Ink::hash_value(v17);
    }
    while (v14 != v15);
  }
  uint64_t v18 = (drawingV1::Stroke **)*((void *)this + 10);
  uint64_t v19 = (drawingV1::Stroke **)*((void *)this + 11);
  if (v18 == v19)
  {
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = *v18++;
      v20 ^= drawingV1::Stroke::hash_value(v21);
    }
    while (v18 != v19);
  }
  unint64_t v22 = *((void *)this + 1);
  if (v22) {
    unint64_t v22 = drawingV1::Rectangle::hash_value((drawingV1::Rectangle *)v22);
  }
  uint64_t v23 = *((void *)this + 2);
  if (v23)
  {
    if (*(unsigned char *)(v23 + 32))
    {
      uint64_t v24 = *(void *)(v23 + 8);
      if ((*(unsigned char *)(v23 + 32) & 2) != 0)
      {
LABEL_39:
        uint64_t v25 = *(void *)(v23 + 16);
        if ((*(unsigned char *)(v23 + 32) & 4) != 0)
        {
LABEL_40:
          uint64_t v26 = *(void *)(v23 + 24);
LABEL_44:
          uint64_t v23 = v25 ^ v24 ^ v26;
          return v3 ^ v2 ^ v6 ^ v9 ^ v22 ^ v23 ^ v16 ^ v20;
        }
LABEL_43:
        uint64_t v26 = 0;
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v24 = 0;
      if ((*(unsigned char *)(v23 + 32) & 2) != 0) {
        goto LABEL_39;
      }
    }
    uint64_t v25 = 0;
    if ((*(unsigned char *)(v23 + 32) & 4) != 0) {
      goto LABEL_40;
    }
    goto LABEL_43;
  }
  return v3 ^ v2 ^ v6 ^ v9 ^ v22 ^ v23 ^ v16 ^ v20;
}

uint64_t drawingV1::Drawing::makeBounds(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t drawingV1::Drawing::makeBoundsVersion(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t std::vector<std::unique_ptr<drawingV1::StrokeID>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<drawingV1::StrokeID>>,std::reverse_iterator<std::unique_ptr<drawingV1::StrokeID>*>,std::reverse_iterator<std::unique_ptr<drawingV1::StrokeID>*>,std::reverse_iterator<std::unique_ptr<drawingV1::StrokeID>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<drawingV1::StrokeID>>,std::reverse_iterator<std::unique_ptr<drawingV1::StrokeID>*>,std::reverse_iterator<std::unique_ptr<drawingV1::StrokeID>*>,std::reverse_iterator<std::unique_ptr<drawingV1::StrokeID>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<drawingV1::StrokeID>>,std::reverse_iterator<std::unique_ptr<drawingV1::StrokeID>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<drawingV1::StrokeID>>,std::reverse_iterator<std::unique_ptr<drawingV1::StrokeID>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

uint64_t std::vector<std::unique_ptr<drawingV1::Ink>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<drawingV1::Ink>>,std::reverse_iterator<std::unique_ptr<drawingV1::Ink>*>,std::reverse_iterator<std::unique_ptr<drawingV1::Ink>*>,std::reverse_iterator<std::unique_ptr<drawingV1::Ink>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<drawingV1::Ink>>,std::reverse_iterator<std::unique_ptr<drawingV1::Ink>*>,std::reverse_iterator<std::unique_ptr<drawingV1::Ink>*>,std::reverse_iterator<std::unique_ptr<drawingV1::Ink>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<drawingV1::Ink>>,std::reverse_iterator<std::unique_ptr<drawingV1::Ink>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<drawingV1::Ink>>,std::reverse_iterator<std::unique_ptr<drawingV1::Ink>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

uint64_t std::vector<std::unique_ptr<drawingV1::Stroke>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<drawingV1::Stroke>>,std::reverse_iterator<std::unique_ptr<drawingV1::Stroke>*>,std::reverse_iterator<std::unique_ptr<drawingV1::Stroke>*>,std::reverse_iterator<std::unique_ptr<drawingV1::Stroke>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<drawingV1::Stroke>>,std::reverse_iterator<std::unique_ptr<drawingV1::Stroke>*>,std::reverse_iterator<std::unique_ptr<drawingV1::Stroke>*>,std::reverse_iterator<std::unique_ptr<drawingV1::Stroke>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<drawingV1::Stroke>>,std::reverse_iterator<std::unique_ptr<drawingV1::Stroke>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<drawingV1::Stroke>>,std::reverse_iterator<std::unique_ptr<drawingV1::Stroke>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

uint64_t legacy_drawing::Drawing::Drawing(uint64_t this)
{
  *(void *)this = &unk_1F1FB05F0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 64) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = &unk_1F1FB05F0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 64) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  return this;
}

void legacy_drawing::Drawing::~Drawing(legacy_drawing::Drawing *this)
{
  *(void *)this = &unk_1F1FB05F0;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v4);
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  legacy_drawing::Drawing::~Drawing(this);

  JUMPOUT(0x1C8783F10);
}

uint64_t legacy_drawing::Drawing::Drawing(uint64_t this, const legacy_drawing::Drawing *a2)
{
  *(void *)this = &unk_1F1FB05F0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 64) = 0;
  *(void *)(this + 48) = 0;
  if ((*((unsigned char *)a2 + 64) & 4) != 0)
  {
    int v2 = *((_DWORD *)a2 + 15);
    *(unsigned char *)(this + 64) = 4;
    *(_DWORD *)(this + 60) = v2;
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  char v3 = *((unsigned char *)a2 + 64);
  if ((v3 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 14);
    *(unsigned char *)(this + 64) |= 2u;
    *(_DWORD *)(this + 56) = v4;
    char v3 = *((unsigned char *)a2 + 64);
  }
  if (v3)
  {
    uint64_t v5 = *((void *)a2 + 4);
    *(unsigned char *)(this + 64) |= 1u;
    *(void *)(this + 32) = v5;
  }
  if (*((void *)a2 + 6)) {
    operator new();
  }
  return this;
}

void sub_1C4649B6C(void *a1)
{
}

uint64_t legacy_drawing::Drawing::operator=(uint64_t a1, const legacy_drawing::Drawing *a2)
{
  if ((const legacy_drawing::Drawing *)a1 != a2)
  {
    legacy_drawing::Drawing::Drawing((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v5;
    *(void *)&long long v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v14;
    uint64_t v14 = v4;
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v7;
    legacy_drawing::Drawing::~Drawing((legacy_drawing::Drawing *)v9);
  }
  return a1;
}

double legacy_drawing::swap(legacy_drawing *this, legacy_drawing::Drawing *a2, legacy_drawing::Drawing *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  int v4 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v8;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  return result;
}

uint64_t legacy_drawing::Drawing::Drawing(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1FB05F0;
  *(void *)(a1 + 8) = 0;
  int v4 = (void **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (*v4)
  {
    std::vector<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::__clear[abi:ne180100](v4);
    operator delete(*v4);
    uint64_t *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t legacy_drawing::Drawing::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    legacy_drawing::Drawing::Drawing((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v5;
    *(void *)&long long v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v14;
    uint64_t v14 = v4;
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v7;
    legacy_drawing::Drawing::~Drawing((legacy_drawing::Drawing *)v9);
  }
  return a1;
}

uint64_t legacy_drawing::Drawing::formatText(legacy_drawing::Drawing *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "command");
  }
  char v8 = *((unsigned char *)this + 64);
  if ((v8 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "orientation");
    char v8 = *((unsigned char *)this + 64);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*((unsigned char *)this + 64) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "orientationTimestamp", *((double *)this + 4));
  if ((*((unsigned char *)this + 64) & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "serializationVersion");
LABEL_7:
  uint64_t v9 = *((void *)this + 5);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "timestamp");
  }
  uint64_t v10 = *((void *)this + 6);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "unrotatedBounds");
  }

  return MEMORY[0x1F4147498](a2);
}

uint64_t legacy_drawing::Drawing::readFrom(legacy_drawing::Drawing *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 64) |= 4u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_65;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_56:
          LODWORD(v25) = 0;
          goto LABEL_65;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v21 == v20)
          {
            LODWORD(v25) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v43 = v20 + 1;
            char v44 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v43;
            v25 |= (unint64_t)(v44 & 0x7F) << v41;
            if (v44 < 0)
            {
              v41 += 7;
              unint64_t v20 = v43;
              BOOL v14 = v42++ > 8;
              if (v14) {
                goto LABEL_56;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v25) = 0;
            }
          }
          break;
        }
LABEL_65:
        *((_DWORD *)this + 15) = v25;
        goto LABEL_66;
      case 2u:
        operator new();
      case 3u:
        operator new();
      case 4u:
        *((unsigned char *)this + 64) |= 2u;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          do
          {
            unint64_t v35 = v29 + 1;
            *((void *)a2 + 1) = v29 + 1;
            char v36 = *(unsigned char *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0) {
              goto LABEL_62;
            }
            v32 += 7;
            unint64_t v29 = v35;
            BOOL v14 = v33++ > 8;
          }
          while (!v14);
LABEL_49:
          LODWORD(v34) = 0;
          goto LABEL_62;
        }
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v34 = 0;
        if (v30 <= v29) {
          unint64_t v30 = *((void *)a2 + 1);
        }
        break;
      case 5u:
        *((unsigned char *)this + 64) |= 1u;
        unint64_t v28 = *((void *)a2 + 1);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 4) = *(void *)(*(void *)a2 + v28);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_66;
      case 6u:
        operator new();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v30 == v29)
      {
        LODWORD(v34) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_62;
      }
      unint64_t v39 = v29 + 1;
      char v40 = *(unsigned char *)(v31 + v29);
      *((void *)a2 + 1) = v39;
      v34 |= (unint64_t)(v40 & 0x7F) << v37;
      if ((v40 & 0x80) == 0) {
        break;
      }
      v37 += 7;
      unint64_t v29 = v39;
      BOOL v14 = v38++ > 8;
      if (v14) {
        goto LABEL_49;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v34) = 0;
    }
LABEL_62:
    *((_DWORD *)this + 14) = v34;
LABEL_66:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_66;
  }
  return result;
}

void sub_1C464A650(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t legacy_drawing::Drawing::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 64) & 4) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  int v4 = *(const PB::Base **)(v3 + 40);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base ***)(v3 + 8);
  uint64_t v6 = *(const PB::Base ***)(v3 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  char v8 = *(unsigned char *)(v3 + 64);
  if ((v8 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v8 = *(unsigned char *)(v3 + 64);
  }
  if (v8) {
    this = PB::Writer::write(a2, *(double *)(v3 + 32));
  }
  char v9 = *(const PB::Base **)(v3 + 48);
  if (v9)
  {
    return PB::Writer::writeSubmessage(a2, v9);
  }
  return this;
}

BOOL legacy_drawing::Drawing::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 64) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 64) & 4) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 64) & 4) != 0)
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 40);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    if (PB::PtrVector<legacy_drawing::VectorTimestampClock>::operator==((uint64_t **)(v4 + 8), v5 + 8)) {
      goto LABEL_11;
    }
    uint64_t v5 = *(void *)(a1 + 40) | *(void *)(a2 + 40);
  }
  if (v5) {
    return 0;
  }
LABEL_11:
  uint64_t v6 = *(uint64_t **)(a2 + 8);
  char v8 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *(uint64_t **)(a1 + 16);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 16) - (void)v6) {
    return 0;
  }
  while (v8 != v7)
  {
    BOOL result = legacy_drawing::Command::operator==(*v8, *v6);
    if (!result) {
      return result;
    }
    ++v8;
    ++v6;
    uint64_t v7 = *(uint64_t **)(a1 + 16);
  }
  if ((*(unsigned char *)(a1 + 64) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 64) & 2) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 64) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    if ((*(unsigned char *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 64))
  {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a2 + 48);
  BOOL result = (v10 | v11) == 0;
  if (v10 && v11)
  {
    uint64_t v12 = *(void *)(a1 + 48);
    return legacy_drawing::Rectangle::operator==(v12, v11);
  }
  return result;
}

unint64_t legacy_drawing::Drawing::hash_value(legacy_drawing::Drawing *this)
{
  if ((*((unsigned char *)this + 64) & 4) != 0) {
    uint64_t v2 = *((unsigned int *)this + 15);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *((void *)this + 5);
  if (!v3
    || (uint64_t v4 = *(legacy_drawing::VectorTimestampClock ***)(v3 + 8),
        uint64_t v5 = *(legacy_drawing::VectorTimestampClock ***)(v3 + 16),
        v4 == v5))
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v4++;
      v6 ^= legacy_drawing::VectorTimestampClock::hash_value(v7);
    }
    while (v4 != v5);
  }
  char v8 = (legacy_drawing::Command **)*((void *)this + 1);
  char v9 = (legacy_drawing::Command **)*((void *)this + 2);
  if (v8 == v9)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *v8++;
      v10 ^= legacy_drawing::Command::hash_value(v11);
    }
    while (v8 != v9);
  }
  if ((*((unsigned char *)this + 64) & 2) == 0)
  {
    uint64_t v12 = 0;
    if (*((unsigned char *)this + 64)) {
      goto LABEL_17;
    }
LABEL_21:
    uint64_t v13 = 0;
    goto LABEL_22;
  }
  uint64_t v12 = *((unsigned int *)this + 14);
  if ((*((unsigned char *)this + 64) & 1) == 0) {
    goto LABEL_21;
  }
LABEL_17:
  if (*((double *)this + 4) == 0.0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *((void *)this + 4);
  }
LABEL_22:
  unint64_t v14 = *((void *)this + 6);
  if (v14) {
    unint64_t v14 = legacy_drawing::Rectangle::hash_value((legacy_drawing::Rectangle *)v14);
  }
  return v6 ^ v2 ^ v13 ^ v14 ^ v10 ^ v12;
}

uint64_t legacy_drawing::Drawing::makeTimestamp(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

uint64_t legacy_drawing::Drawing::makeUnrotatedBounds(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::Command>>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

uint64_t std::__split_buffer<std::unique_ptr<legacy_drawing::Command>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double PKPaletteToolsContainerMinimumWidth()
{
  BOOL v0 = PKIsVisionDevice();
  double result = 372.0;
  if (v0) {
    return 534.0;
  }
  return result;
}

double PKPaletteToolsContainerMaximumWidth(int a1)
{
  if (PKIsVisionDevice())
  {
    BOOL v2 = !PKIsVisionDevice();
    double result = 372.0;
    double v4 = 534.0;
  }
  else
  {
    BOOL v2 = a1 == 0;
    double result = 394.0;
    double v4 = 268.0;
  }
  if (!v2) {
    return v4;
  }
  return result;
}

double PKPaletteToolSize()
{
  return 46.0;
}

double PKPaletteToolSizeWidth(int a1)
{
  double result = 46.0;
  if (a1) {
    return 34.0;
  }
  return result;
}

double PKPaletteToolsInterItemSpacing(uint64_t a1)
{
  double result = 15.0;
  if (a1 < 8) {
    return 12.0;
  }
  return result;
}

double PKPaletteToolsInterItemSpacingInCompactSize(uint64_t a1)
{
  double result = 7.0;
  if (a1 < 8) {
    return 5.0;
  }
  return result;
}

BOOL PKToolPickerCanScroll(uint64_t a1)
{
  return a1 > 7;
}

double PKPaletteButtonSize(int a1)
{
  double result = 36.0;
  if (a1) {
    return 28.0;
  }
  return result;
}

double PKPaletteDragHandleSize(int a1)
{
  if (a1) {
    return 6.0;
  }
  else {
    return 40.0;
  }
}

double PKPaletteColorSwatchSize(int a1)
{
  double result = 36.0;
  if (a1) {
    return 28.0;
  }
  return result;
}

double PKPaletteColorSwatchesSize(int a1)
{
  if (a1) {
    return 84.0;
  }
  else {
    return 132.0;
  }
}

void *legacy_drawing::VectorTimestamp::VectorTimestamp(void *this)
{
  *this = &unk_1F1FB04A0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F1FB04A0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void legacy_drawing::VectorTimestamp::~VectorTimestamp(legacy_drawing::VectorTimestamp *this)
{
  *(void *)this = &unk_1F1FB04A0;
  BOOL v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = &unk_1F1FB04A0;
  BOOL v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = &unk_1F1FB04A0;
  BOOL v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  MEMORY[0x1C8783F10]();
}

void *legacy_drawing::VectorTimestamp::VectorTimestamp(void *this, const legacy_drawing::VectorTimestamp *a2)
{
  this[1] = 0;
  *this = &unk_1F1FB04A0;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<legacy_drawing::VectorTimestampClock>::emplace_back<legacy_drawing::VectorTimestampClock const&>();
  }
  return this;
}

void PB::PtrVector<legacy_drawing::VectorTimestampClock>::emplace_back<legacy_drawing::VectorTimestampClock const&>()
{
}

void sub_1C464C084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t legacy_drawing::VectorTimestamp::operator=(uint64_t a1, const legacy_drawing::VectorTimestamp *a2)
{
  if ((const legacy_drawing::VectorTimestamp *)a1 != a2)
  {
    legacy_drawing::VectorTimestamp::VectorTimestamp(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = &unk_1F1FB04A0;
    char v9 = (void **)&v7;
    std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *legacy_drawing::swap(void *this, legacy_drawing::VectorTimestamp *a2, legacy_drawing::VectorTimestamp *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t legacy_drawing::VectorTimestamp::VectorTimestamp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1FB04A0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__vdeallocate((void **)(a1 + 8));
  _OWORD *v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_1F1FB04A0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__vdeallocate((void **)(a1 + 8));
  _OWORD *v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t legacy_drawing::VectorTimestamp::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v9 = &unk_1F1FB04A0;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    std::vector<std::unique_ptr<drawing::Stroke>>::__vdeallocate((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    uint64_t v12 = (void **)&v10;
    char v9 = &unk_1F1FB04A0;
    std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t legacy_drawing::VectorTimestamp::formatText(legacy_drawing::VectorTimestamp *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "clock");
  }

  return MEMORY[0x1F4147498](a2);
}

uint64_t legacy_drawing::VectorTimestamp::readFrom(legacy_drawing::VectorTimestamp *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        PB::PtrVector<legacy_drawing::VectorTimestampClock>::emplace_back<>();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void PB::PtrVector<legacy_drawing::VectorTimestampClock>::emplace_back<>()
{
}

void sub_1C464C6B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t legacy_drawing::VectorTimestamp::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (uint64_t i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    long long v5 = *v2++;
  return this;
}

BOOL legacy_drawing::VectorTimestamp::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<legacy_drawing::VectorTimestampClock>::operator==((uint64_t **)(a1 + 8), a2 + 8);
}

BOOL PB::PtrVector<legacy_drawing::VectorTimestampClock>::operator==(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  int v4 = *(uint64_t **)a2;
  if ((char *)v2 - (char *)*a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  do
  {
    BOOL result = legacy_drawing::VectorTimestampClock::operator==(*v3, *v4);
    if (!result) {
      break;
    }
    ++v3;
    ++v4;
  }
  while (v3 != a1[1]);
  return result;
}

uint64_t legacy_drawing::VectorTimestamp::hash_value(legacy_drawing::VectorTimestamp *this)
{
  uint64_t v1 = (legacy_drawing::VectorTimestampClock **)*((void *)this + 1);
  unint64_t v2 = (legacy_drawing::VectorTimestampClock **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= legacy_drawing::VectorTimestampClock::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t std::vector<std::unique_ptr<legacy_drawing::VectorTimestampClock>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClock>*>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClock>*>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClock>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClock>*>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClock>*>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClock>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unsigned int v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClock>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClock>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>,std::reverse_iterator<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

uint64_t legacy_drawing::Point::Point(uint64_t this)
{
  *(void *)this = &unk_1F1FB0580;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = &unk_1F1FB0580;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void legacy_drawing::Point::~Point(legacy_drawing::Point *this)
{
  PB::Base::~Base(this);

  JUMPOUT(0x1C8783F10);
}

float legacy_drawing::Point::Point(legacy_drawing::Point *this, const legacy_drawing::Point *a2)
{
  *(void *)this = &unk_1F1FB0580;
  *((_DWORD *)this + 9) = 0;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 0x20) != 0)
  {
    float result = *((float *)a2 + 7);
    char v3 = 32;
    *((unsigned char *)this + 36) = 32;
    *((float *)this + 7) = result;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 36) & 0x40) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 8);
    v3 |= 0x40u;
    *((unsigned char *)this + 36) = v3;
    *((float *)this + 8) = result;
    char v2 = *((unsigned char *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    float result = *((float *)a2 + 6);
    v3 |= 0x10u;
    *((unsigned char *)this + 36) = v3;
    *((float *)this + 6) = result;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 5);
  v3 |= 8u;
  *((unsigned char *)this + 36) = v3;
  *((float *)this + 5) = result;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  float result = *((float *)a2 + 3);
  v3 |= 2u;
  *((unsigned char *)this + 36) = v3;
  *((float *)this + 3) = result;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_16:
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 36) = v3 | 1;
    *((float *)this + 2) = result;
    return result;
  }
LABEL_15:
  float result = *((float *)a2 + 4);
  v3 |= 4u;
  *((unsigned char *)this + 36) = v3;
  *((float *)this + 4) = result;
  if (*((unsigned char *)a2 + 36)) {
    goto LABEL_16;
  }
  return result;
}

uint64_t legacy_drawing::Point::operator=(uint64_t a1, const legacy_drawing::Point *a2)
{
  if ((const legacy_drawing::Point *)a1 != a2)
  {
    legacy_drawing::Point::Point((legacy_drawing::Point *)v8, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v12;
    int v12 = v3;
    int v4 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    int v11 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float legacy_drawing::swap(legacy_drawing *this, legacy_drawing::Point *a2, legacy_drawing::Point *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  int v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  int v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  int v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  int v7 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v7;
  int v8 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v8;
  int v9 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v9;
  float result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float legacy_drawing::Point::Point(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1FB0580;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_1F1FB0580;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t legacy_drawing::Point::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v9 = &unk_1F1FB0580;
    int v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    int v4 = *(_DWORD *)(a2 + 32);
    int v13 = *(_DWORD *)(a1 + 36);
    int v12 = *(_DWORD *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 24);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 36) = v3;
    *(_DWORD *)(a1 + 32) = v4;
    *(void *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 8) = v6;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t legacy_drawing::Point::formatText(legacy_drawing::Point *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 36);
  if (v5)
  {
    PB::TextFormatter::format(a2, "aspectRatio", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "azimuth", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "edgeWidth", *((float *)this + 4));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "opacity", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "radius", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "x", *((float *)this + 7));
  if ((*((unsigned char *)this + 36) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "y", *((float *)this + 8));
LABEL_9:

  return MEMORY[0x1F4147498](a2);
}

uint64_t legacy_drawing::Point::readFrom(legacy_drawing::Point *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_46;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 36) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 2u:
        *((unsigned char *)this + 36) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 3u:
        *((unsigned char *)this + 36) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 4u:
        *((unsigned char *)this + 36) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 5u:
        *((unsigned char *)this + 36) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 6u:
        *((unsigned char *)this + 36) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 7u:
        *((unsigned char *)this + 36) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_45:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_43:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_46:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t legacy_drawing::Point::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 36);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 28));
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 36) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(float *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 36) & 1) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_15:
  float v5 = *(float *)(v3 + 8);

  return PB::Writer::write(a2, v5);
}

BOOL legacy_drawing::Point::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 36) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 0x40) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 36) & 1) == 0;
  if (*(unsigned char *)(a1 + 36)) {
    return (*(unsigned char *)(a2 + 36) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  }
  return v2;
}

uint64_t legacy_drawing::Point::hash_value(legacy_drawing::Point *this)
{
  if ((*((unsigned char *)this + 36) & 0x20) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 36) & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_24:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 36) & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_25:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 36) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_26:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 36) & 2) != 0) {
      goto LABEL_12;
    }
LABEL_27:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 36) & 4) != 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
  float v14 = *((float *)this + 7);
  uint64_t v1 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 36) & 0x40) == 0) {
    goto LABEL_24;
  }
LABEL_3:
  float v2 = *((float *)this + 8);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 36) & 0x10) == 0) {
    goto LABEL_25;
  }
LABEL_6:
  float v4 = *((float *)this + 6);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 36) & 8) == 0) {
    goto LABEL_26;
  }
LABEL_9:
  float v6 = *((float *)this + 5);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 36) & 2) == 0) {
    goto LABEL_27;
  }
LABEL_12:
  float v8 = *((float *)this + 3);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 36) & 4) != 0)
  {
LABEL_15:
    float v10 = *((float *)this + 4);
    uint64_t v11 = LODWORD(v10);
    if (v10 == 0.0) {
      uint64_t v11 = 0;
    }
    if (*((unsigned char *)this + 36)) {
      goto LABEL_18;
    }
LABEL_29:
    uint64_t v13 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
  }
LABEL_28:
  uint64_t v11 = 0;
  if ((*((unsigned char *)this + 36) & 1) == 0) {
    goto LABEL_29;
  }
LABEL_18:
  float v12 = *((float *)this + 2);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
}

void sub_1C464F6EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C464F7C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C464F890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C464FB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1C464FBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C464FC54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C464FD30(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C464FF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4650020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46500FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46502FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4650470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465052C(_Unwind_Exception *a1)
{
  float v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4650630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v11);

  _Unwind_Resume(a1);
}

void sub_1C46506D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_1C46507FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4650938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4650AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4650CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4650DD4(_Unwind_Exception *a1)
{
  float v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4650F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4659154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C46597CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  float v10 = v9;

  a9.super_class = (Class)PKSelectionController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4659850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46598A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4659A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4659B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4659E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4659FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C465A18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C465A458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C465A63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465A800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C465AB8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465AC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C465AD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  objc_destroyWeak(v15);

  _Unwind_Resume(a1);
}

void sub_1C465AF80(_Unwind_Exception *a1)
{
  float v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C465B02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C465B338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C465B470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C465B5B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465B7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C465B934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C465BA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C465BA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C465BB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C465C170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C465C378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C465C4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465C644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C465CD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, id *location, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a32);

  _Unwind_Resume(a1);
}

void sub_1C465CF44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465D1A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465D2F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465D528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465D608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465D7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1C465D980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465DC34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465DE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465E07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C465E3F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465E9D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465EB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C465ED80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t v25 = v22;

  _Unwind_Resume(a1);
}

void sub_1C465F09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C465F1C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465F2C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C465FE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,_Unwind_Exception *exception_object,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44)
{
  _Unwind_Resume(a1);
}

void sub_1C4660268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4660304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46603AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4660480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1C4660770(_Unwind_Exception *a1)
{
  uint64_t v7 = v2;

  _Unwind_Resume(a1);
}

void sub_1C46609AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4660B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned int v16 = v13;

  _Unwind_Resume(a1);
}

void sub_1C4660DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4660F88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4661180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466143C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1C46615B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4661744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466186C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  float v14 = v12;

  _Unwind_Resume(a1);
}

void sub_1C4661D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4661E2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4661F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4662078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46620F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4662208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4662328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4662638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4662840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4662A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4662B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4662D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4662F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46639A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C466412C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4664324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46644B0(_Unwind_Exception *a1)
{
  float v8 = v5;

  _Unwind_Resume(a1);
}

void sub_1C4664628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned int v16 = v13;

  _Unwind_Resume(a1);
}

void sub_1C46646E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4664990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v25);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4664A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4664D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4664E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4664FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46651D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1C4665414(_Unwind_Exception *exception_object)
{
}

void sub_1C466565C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C466582C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned int v16 = v13;

  _Unwind_Resume(a1);
}

void sub_1C46659E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4665B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4665D30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4665D74()
{
}

void sub_1C4665D7C()
{
}

void sub_1C4665EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4666068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1C4666334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466645C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C466653C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4666798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46668C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4666A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4666AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4666BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4666DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4667354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4667568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4667730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46677CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C466784C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4667970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4667AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4667B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4667BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4667C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4667D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4667DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1C4667E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4668230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C46687F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4668988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4668B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4668CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4668E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  float v14 = v12;

  _Unwind_Resume(a1);
}

void sub_1C4668F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  float v14 = v12;

  _Unwind_Resume(a1);
}

void sub_1C46690AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  float v14 = v12;

  _Unwind_Resume(a1);
}

void sub_1C4669164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4669208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4669370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466950C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4669678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v17 = v14;

  _Unwind_Resume(a1);
}

void sub_1C466980C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4669964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4669AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4669CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4669E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned int v16 = v13;

  _Unwind_Resume(a1);
}

void sub_1C4669FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C466A170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466A238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466A318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466A46C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466A600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466A798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  char v18 = v15;

  _Unwind_Resume(a1);
}

void sub_1C466A93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  char v18 = v15;

  _Unwind_Resume(a1);
}

void sub_1C466AA00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466AA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466AE6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466B080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466B1FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466B310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C466B460(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C466B508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C466B638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C466B854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466BAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void sub_1C466BBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C466BD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C466BE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C466BF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C466C120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v11;

  _Unwind_Resume(a1);
}

id getLTUITranslationViewControllerClass(void)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  BOOL v0 = (void *)getLTUITranslationViewControllerClass(void)::softClass;
  uint64_t v7 = getLTUITranslationViewControllerClass(void)::softClass;
  if (!getLTUITranslationViewControllerClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___ZL37getLTUITranslationViewControllerClassv_block_invoke;
    _OWORD v3[3] = &unk_1E64C8720;
    v3[4] = &v4;
    ___ZL37getLTUITranslationViewControllerClassv_block_invoke((uint64_t)v3);
    BOOL v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1C466C240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C466C304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  float v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1C466C3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  float v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1C466C504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466C684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466CF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,id location,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  objc_destroyWeak(v69);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1C466D2A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466D55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C466D774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C466D8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

Class ___ZL31getVKCStickerFromPKDrawingClassv_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1EB3C5FC0)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    _OWORD v4[3] = ___ZL24VisionKitCoreLibraryCorePPc_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E64C8740;
    uint64_t v6 = 0;
    qword_1EB3C5FC0 = _sl_dlopen();
    float v2 = (void *)v4[0];
    if (!qword_1EB3C5FC0)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("VKCStickerFromPKDrawing");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    float v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  _MergedGlobals_136 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ___ZL24VisionKitCoreLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB3C5FC0 = result;
  return result;
}

Class ___ZL37getLTUITranslationViewControllerClassv_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!TranslationUIServicesLibraryCore(char **)::frameworkLibrary)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    _OWORD v4[3] = ___ZL32TranslationUIServicesLibraryCorePPc_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E64C8758;
    uint64_t v6 = 0;
    TranslationUIServicesLibraryCore(char **)::frameworkLibrardouble y = _sl_dlopen();
    float v2 = (void *)v4[0];
    if (!TranslationUIServicesLibraryCore(char **)::frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("LTUITranslationViewController");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    float v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  getLTUITranslationViewControllerClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ___ZL32TranslationUIServicesLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  TranslationUIServicesLibraryCore(char **)::frameworkLibrardouble y = result;
  return result;
}

__CFString *PKTextInputDescriptionForCursorStyle(unint64_t a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return off_1E64C8770[a1];
  }
}

__CFString *PKTextInputDescriptionForCursorMode(unint64_t a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return off_1E64C8790[a1];
  }
}

void sub_1C466E92C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C466FD98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466FE78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C466FF78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4670004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C46700B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4670250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4670444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4670800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C46708E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  float v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PKRulerController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4670BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4670C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4670D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4670FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4671108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4671210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46712E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4671DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4672124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4672248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46723C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PKClipperPathsFromCGPath(const CGPath *a1, double a2)
{
  CGPathRandomAccess::CGPathRandomAccess((CGPathRandomAccess *)v3, a1);
  CGPathRandomAccess::clipperPaths((CGPathRandomAccess *)v3, a2);
}

void sub_1C46724B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void CGPathRandomAccess::clipperPaths(CGPathRandomAccess *this, double a2)
{
}

void sub_1C4672B78(_Unwind_Exception *a1)
{
  std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer(v1 - 192);
  _Unwind_Resume(a1);
}

void CGPathRandomAccess::CGPathRandomAccess(CGPathRandomAccess *this, const CGPath *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  CGPathRandomAccess::addPath(this, a2);
}

void sub_1C4672C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t CGPathRandomAccess::addPath(CGPathRandomAccess *this, CGPathRef path)
{
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x4812000000;
  v10[3] = __Block_byref_object_copy__16;
  void v10[4] = __Block_byref_object_dispose__16;
  v10[5] = "";
  float v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN18CGPathRandomAccess7addPathEPK6CGPath_block_invoke;
  block[3] = &unk_1E64C87B0;
  void block[4] = v10;
  CGPathApplyWithBlock(path, block);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
  v7[0] = 0;
  v7[1] = v7;
  void v7[2] = 0x4012000000;
  _OWORD v7[3] = __Block_byref_object_copy__2;
  v7[4] = __Block_byref_object_dispose__3;
  v7[5] = "";
  long long v8 = *MEMORY[0x1E4F1DAD8];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  id v6[2] = ___ZN18CGPathRandomAccess7addPathEPK6CGPath_block_invoke_5;
  _OWORD v6[3] = &unk_1E64C87D8;
  v6[6] = this;
  v6[7] = v4;
  v6[4] = v10;
  v6[5] = v7;
  CGPathApplyWithBlock(path, v6);
  CGPathRandomAccessSubpath::closeIfNeeded((CGPathRandomAccessSubpath *)(*((void *)this + 1) - 48));
  _Block_object_dispose(v7, 8);
  _Block_object_dispose(v10, 8);
  if (v11)
  {
    float v12 = v11;
    operator delete(v11);
  }
  return v4;
}

void sub_1C4672E18(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  uint64_t v3 = *(void **)(v1 - 88);
  if (v3)
  {
    *(void *)(v1 - 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__16(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN18CGPathRandomAccess7addPathEPK6CGPath_block_invoke(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if ((*a2 - 2) < 2)
  {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 56);
    ++*(void *)(v7 - 16);
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 56);
    uint64_t v9 = *(void *)(v8 - 8) + 3;
LABEL_8:
    *(void *)(v8 - 8) = v9;
    return;
  }
  if (v2 == 1)
  {
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 56);
    ++*(void *)(v10 - 16);
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 56);
    uint64_t v9 = *(void *)(v8 - 8) + 1;
    goto LABEL_8;
  }
  if (!v2)
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 8);
    long long v5 = (int64x2_t *)v3[7];
    unint64_t v4 = v3[8];
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v11 = (int64x2_t *)v3[6];
      uint64_t v12 = v5 - v11;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
        std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v4 - (void)v11;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        if (v15 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unsigned int v16 = (char *)operator new(16 * v15);
      }
      else
      {
        unsigned int v16 = 0;
      }
      unint64_t v17 = (int64x2_t *)&v16[16 * v12];
      *unint64_t v17 = vdupq_n_s64(1uLL);
      uint64_t v6 = v17 + 1;
      if (v5 != v11)
      {
        do
        {
          v17[-1] = v5[-1];
          --v17;
          --v5;
        }
        while (v5 != v11);
        long long v5 = (int64x2_t *)v3[6];
      }
      v3[6] = v17;
      v3[7] = v6;
      v3[8] = &v16[16 * v15];
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *long long v5 = vdupq_n_s64(1uLL);
      uint64_t v6 = v5 + 1;
    }
    v3[7] = v6;
  }
}

__n128 __Block_byref_object_copy__2(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void ___ZN18CGPathRandomAccess7addPathEPK6CGPath_block_invoke_5(void *a1, uint64_t a2)
{
  unint64_t v4 = (char **)a1[6];
  switch(*(_DWORD *)a2)
  {
    case 0:
      long long v5 = v4[1];
      if (v5 != *v4)
      {
        CGPathRandomAccessSubpath::closeIfNeeded((CGPathRandomAccessSubpath *)(v5 - 48));
        long long v5 = v4[1];
      }
      unint64_t v6 = (unint64_t)v4[2];
      if ((unint64_t)v5 >= v6)
      {
        float64x2_t v67 = *v4;
        unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *v4) >> 4);
        unint64_t v69 = v68 + 1;
        if (v68 + 1 > 0x555555555555555) {
          std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v6 - (void)v67) >> 4) > v69) {
          unint64_t v69 = 0x5555555555555556 * ((uint64_t)(v6 - (void)v67) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v67) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v70 = 0x555555555555555;
        }
        else {
          unint64_t v70 = v69;
        }
        float64x2_t v175 = v4 + 2;
        if (v70)
        {
          if (v70 > 0x555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v71 = (char *)operator new(48 * v70);
        }
        else
        {
          unint64_t v71 = 0;
        }
        long long v103 = &v71[48 * v68];
        double v104 = &v71[48 * v70];
        *(_OWORD *)long long v103 = 0u;
        *((_OWORD *)v103 + 1) = 0u;
        *((_OWORD *)v103 + 2) = 0u;
        uint64_t v7 = v103 + 48;
        uint64_t v173 = v103 + 48;
        double v174 = v104;
        if (v5 == v67)
        {
          unint64_t v108 = v5;
        }
        else
        {
          uint64_t v105 = 0;
          do
          {
            unint64_t v106 = &v103[v105];
            uint64_t v107 = &v5[v105];
            *((void *)v106 - 6) = 0;
            *((void *)v106 - 5) = 0;
            *((void *)v106 - 4) = 0;
            *((_OWORD *)v106 - 3) = *(_OWORD *)&v5[v105 - 48];
            *((void *)v106 - 4) = *(void *)&v5[v105 - 32];
            *((void *)v107 - 6) = 0;
            *((void *)v107 - 5) = 0;
            *((void *)v107 - 4) = 0;
            *((void *)v106 - 3) = 0;
            *((void *)v106 - 2) = 0;
            *((void *)v106 - 1) = 0;
            *(_OWORD *)(v106 - 24) = *(_OWORD *)&v5[v105 - 24];
            *((void *)v106 - 1) = *(void *)&v5[v105 - 8];
            *((void *)v107 - 3) = 0;
            *((void *)v107 - 2) = 0;
            *((void *)v107 - 1) = 0;
            v105 -= 48;
          }
          while (&v5[v105] != v67);
          unint64_t v108 = *v4;
          long long v5 = v4[1];
          unint64_t v6 = (unint64_t)v4[2];
          v103 += v105;
          uint64_t v7 = v173;
          double v104 = v174;
        }
        void *v4 = v103;
        __p = v108;
        unint64_t v172 = v108;
        v4[1] = v7;
        uint64_t v173 = v5;
        v4[2] = v104;
        double v174 = (char *)v6;
        std::__split_buffer<CGPathRandomAccessSubpath>::~__split_buffer((uint64_t)&__p);
      }
      else
      {
        *((_OWORD *)v5 + 1) = 0u;
        *((_OWORD *)v5 + 2) = 0u;
        *(_OWORD *)long long v5 = 0u;
        uint64_t v7 = v5 + 48;
        v4[1] = v5 + 48;
      }
      v4[1] = v7;
      uint64_t v130 = (unint64_t *)(*(void *)(*(void *)(a1[4] + 8) + 48)
                                + 16 * (~a1[7] - 0x5555555555555555 * ((unint64_t)(v7 - *v4) >> 4)));
      unint64_t v131 = *v130;
      unint64_t v132 = v130[1];
      uint64_t v133 = *((void *)v7 - 6);
      if (v131 <= (*((void *)v7 - 4) - v133) >> 4) {
        goto LABEL_124;
      }
      if (v131 >> 60) {
        goto LABEL_165;
      }
      uint64_t v134 = *((void *)v7 - 5) - v133;
      long long v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v131);
      uint64_t v136 = &v135[v134];
      uint64_t v138 = &v135[16 * v137];
      uint64_t v140 = (unsigned char *)*((void *)v7 - 6);
      unint64_t v139 = (unsigned char *)*((void *)v7 - 5);
      long long v141 = v136;
      if (v139 != v140)
      {
        do
        {
          uint64_t v142 = *((void *)v139 - 2);
          v139 -= 16;
          char v143 = v139[8];
          *((void *)v141 - 2) = v142;
          v141 -= 16;
          v141[8] = v143;
        }
        while (v139 != v140);
        unint64_t v139 = (unsigned char *)*((void *)v7 - 6);
      }
      *((void *)v7 - 6) = v141;
      *((void *)v7 - 5) = v136;
      *((void *)v7 - 4) = v138;
      if (v139) {
        operator delete(v139);
      }
LABEL_124:
      std::vector<CGPoint>::reserve((void **)v4[1] - 3, v132);
      *(_OWORD *)(*(void *)(a1[5] + 8) + 48) = *(_OWORD *)*(void *)(a2 + 8);
      long long v144 = v4[1];
      uint64_t v145 = (_OWORD *)(*(void *)(a1[5] + 8) + 48);
      long long v146 = (_OWORD *)*((void *)v144 - 2);
      unint64_t v147 = *((void *)v144 - 1);
      if ((unint64_t)v146 < v147)
      {
        *long long v146 = *v145;
        long long v148 = v146 + 1;
LABEL_156:
        *((void *)v144 - 2) = v148;
        return;
      }
      uint64_t v149 = *((void *)v144 - 3);
      uint64_t v150 = ((uint64_t)v146 - v149) >> 4;
      unint64_t v151 = v150 + 1;
      if (!((unint64_t)(v150 + 1) >> 60))
      {
        uint64_t v152 = v147 - v149;
        if (v152 >> 3 > v151) {
          unint64_t v151 = v152 >> 3;
        }
        if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v153 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v153 = v151;
        }
        if (v153) {
          uint64_t v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(v144 - 8), v153);
        }
        else {
          uint64_t v154 = 0;
        }
        double v164 = &v154[16 * v150];
        _PKStrokePoint v165 = &v154[16 * v153];
        *(_OWORD *)double v164 = *v145;
        long long v148 = v164 + 16;
        uint64_t v167 = (char *)*((void *)v144 - 3);
        _PKStrokePoint v166 = (char *)*((void *)v144 - 2);
        if (v166 != v167)
        {
          do
          {
            *((_OWORD *)v164 - 1) = *((_OWORD *)v166 - 1);
            v164 -= 16;
            v166 -= 16;
          }
          while (v166 != v167);
          _PKStrokePoint v166 = (char *)*((void *)v144 - 3);
        }
        *((void *)v144 - 3) = v164;
        *((void *)v144 - 2) = v148;
        *((void *)v144 - 1) = v165;
        if (v166) {
          operator delete(v166);
        }
        goto LABEL_156;
      }
      goto LABEL_166;
    case 1:
      char v18 = v4[1];
      uint64_t v19 = ((uint64_t)(*((void *)v18 - 2) - *((void *)v18 - 3)) >> 4) - 1;
      unint64_t v21 = *((void *)v18 - 5);
      unint64_t v20 = *((void *)v18 - 4);
      if (v21 < v20)
      {
        *(void *)unint64_t v21 = v19;
        *(unsigned char *)(v21 + 8) = 0;
        uint64_t v22 = (char *)(v21 + 16);
        goto LABEL_65;
      }
      uint64_t v72 = *((void *)v18 - 6);
      uint64_t v73 = (uint64_t)(v21 - v72) >> 4;
      unint64_t v74 = v73 + 1;
      if (!((unint64_t)(v73 + 1) >> 60))
      {
        uint64_t v75 = v20 - v72;
        if (v75 >> 3 > v74) {
          unint64_t v74 = v75 >> 3;
        }
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v76 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v76 = v74;
        }
        float64x2_t v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v76);
        float64x2_t v78 = &v77[16 * v73];
        char v80 = &v77[16 * v79];
        *(void *)float64x2_t v78 = v19;
        v78[8] = 0;
        uint64_t v22 = v78 + 16;
        float64x2_t v82 = (unsigned char *)*((void *)v18 - 6);
        float64x2_t v81 = (unsigned char *)*((void *)v18 - 5);
        if (v81 != v82)
        {
          do
          {
            uint64_t v83 = *((void *)v81 - 2);
            v81 -= 16;
            char v84 = v81[8];
            *((void *)v78 - 2) = v83;
            v78 -= 16;
            v78[8] = v84;
          }
          while (v81 != v82);
          float64x2_t v81 = (unsigned char *)*((void *)v18 - 6);
        }
        *((void *)v18 - 6) = v78;
        *((void *)v18 - 5) = v22;
        *((void *)v18 - 4) = v80;
        if (v81) {
          operator delete(v81);
        }
LABEL_65:
        *((void *)v18 - 5) = v22;
        int64x2_t v85 = v4[1];
        uint64_t v86 = *(_OWORD **)(a2 + 8);
        unint64_t v87 = (_OWORD *)*((void *)v85 - 2);
        unint64_t v88 = *((void *)v85 - 1);
        if ((unint64_t)v87 >= v88)
        {
          unint64_t v89 = (void **)(v85 - 24);
          uint64_t v90 = *((void *)v85 - 3);
          uint64_t v91 = ((uint64_t)v87 - v90) >> 4;
          unint64_t v92 = v91 + 1;
          if (!((unint64_t)(v91 + 1) >> 60))
          {
            uint64_t v93 = v88 - v90;
            if (v93 >> 3 > v92) {
              unint64_t v92 = v93 >> 3;
            }
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v94 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v94 = v92;
            }
            if (v94) {
              long long v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(v85 - 8), v94);
            }
            else {
              long long v95 = 0;
            }
            unint64_t v125 = &v95[16 * v91];
            long long v126 = &v95[16 * v94];
            *(_OWORD *)unint64_t v125 = *v86;
            long long v127 = v125 + 16;
            long long v129 = (char *)*((void *)v85 - 3);
            long long v128 = (char *)*((void *)v85 - 2);
            if (v128 == v129) {
              goto LABEL_161;
            }
            do
            {
              *((_OWORD *)v125 - 1) = *((_OWORD *)v128 - 1);
              v125 -= 16;
              v128 -= 16;
            }
            while (v128 != v129);
LABEL_160:
            long long v128 = (char *)*v89;
LABEL_161:
            *((void *)v85 - 3) = v125;
            *((void *)v85 - 2) = v127;
            *((void *)v85 - 1) = v126;
            if (v128) {
              operator delete(v128);
            }
            goto LABEL_163;
          }
          goto LABEL_166;
        }
        goto LABEL_141;
      }
      goto LABEL_165;
    case 2:
      uint64_t v8 = v4[1];
      uint64_t v9 = ((uint64_t)(*((void *)v8 - 2) - *((void *)v8 - 3)) >> 4) - 1;
      unint64_t v11 = *((void *)v8 - 5);
      unint64_t v10 = *((void *)v8 - 4);
      if (v11 < v10)
      {
        *(void *)unint64_t v11 = v9;
        *(unsigned char *)(v11 + 8) = 1;
        uint64_t v12 = (char *)(v11 + 16);
        goto LABEL_23;
      }
      uint64_t v23 = *((void *)v8 - 6);
      uint64_t v24 = (uint64_t)(v11 - v23) >> 4;
      unint64_t v25 = v24 + 1;
      if (!((unint64_t)(v24 + 1) >> 60))
      {
        uint64_t v26 = v10 - v23;
        if (v26 >> 3 > v25) {
          unint64_t v25 = v26 >> 3;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        unint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v27);
        unint64_t v29 = &v28[16 * v24];
        uint64_t v31 = &v28[16 * v30];
        *(void *)unint64_t v29 = v9;
        v29[8] = 1;
        uint64_t v12 = v29 + 16;
        unsigned int v33 = (unsigned char *)*((void *)v8 - 6);
        char v32 = (unsigned char *)*((void *)v8 - 5);
        if (v32 != v33)
        {
          do
          {
            uint64_t v34 = *((void *)v32 - 2);
            v32 -= 16;
            char v35 = v32[8];
            *((void *)v29 - 2) = v34;
            v29 -= 16;
            v29[8] = v35;
          }
          while (v32 != v33);
          char v32 = (unsigned char *)*((void *)v8 - 6);
        }
        *((void *)v8 - 6) = v29;
        *((void *)v8 - 5) = v12;
        *((void *)v8 - 4) = v31;
        if (v32) {
          operator delete(v32);
        }
LABEL_23:
        *((void *)v8 - 5) = v12;
        char v36 = v4[1];
        char v37 = (float64x2_t *)*((void *)v36 - 2);
        float64x2_t v38 = vmlaq_f64(v37[-1], (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL), vsubq_f64(*(float64x2_t *)*(void *)(a2 + 8), v37[-1]));
        unint64_t v39 = *((void *)v36 - 1);
        if ((unint64_t)v37 >= v39)
        {
          long long v96 = (float64x2_t *)*((void *)v36 - 3);
          uint64_t v97 = v37 - v96;
          unint64_t v98 = v97 + 1;
          if ((unint64_t)(v97 + 1) >> 60) {
            goto LABEL_167;
          }
          uint64_t v99 = v39 - (void)v96;
          if (v99 >> 3 > v98) {
            unint64_t v98 = v99 >> 3;
          }
          if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v100 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v100 = v98;
          }
          if (v100)
          {
            float64x2_t v169 = v38;
            uint64_t v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(v36 - 8), v100);
            float64x2_t v38 = v169;
            long long v102 = v101;
            long long v96 = (float64x2_t *)*((void *)v36 - 3);
            char v37 = (float64x2_t *)*((void *)v36 - 2);
          }
          else
          {
            long long v102 = 0;
          }
          double v109 = (float64x2_t *)&v102[16 * v97];
          double v110 = &v102[16 * v100];
          *double v109 = v38;
          f64 = (_OWORD *)v109[1].f64;
          if (v37 != v96)
          {
            do
            {
              v109[-1] = v37[-1];
              --v109;
              --v37;
            }
            while (v37 != v96);
            long long v96 = (float64x2_t *)*((void *)v36 - 3);
          }
          *((void *)v36 - 3) = v109;
          *((void *)v36 - 2) = f64;
          *((void *)v36 - 1) = v110;
          if (v96) {
            operator delete(v96);
          }
        }
        else
        {
          *char v37 = v38;
          f64 = (_OWORD *)v37[1].f64;
        }
        *((void *)v36 - 2) = f64;
        uint64_t v111 = v4[1];
        float64x2_t v112 = vmlaq_f64(*(float64x2_t *)(*(void *)(a2 + 8) + 16), (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL), vsubq_f64(*(float64x2_t *)*(void *)(a2 + 8), *(float64x2_t *)(*(void *)(a2 + 8) + 16)));
        unint64_t v113 = (char *)*((void *)v111 - 2);
        unint64_t v114 = *((void *)v111 - 1);
        if ((unint64_t)v113 < v114)
        {
          *(float64x2_t *)unint64_t v113 = v112;
          long long v115 = v113 + 16;
          goto LABEL_140;
        }
        long long v116 = (char *)*((void *)v111 - 3);
        uint64_t v117 = (v113 - v116) >> 4;
        unint64_t v118 = v117 + 1;
        if (!((unint64_t)(v117 + 1) >> 60))
        {
          uint64_t v119 = v114 - (void)v116;
          if (v119 >> 3 > v118) {
            unint64_t v118 = v119 >> 3;
          }
          if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v120 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v120 = v118;
          }
          if (v120)
          {
            float64x2_t v170 = v112;
            long long v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(v111 - 8), v120);
            float64x2_t v112 = v170;
            long long v122 = v121;
            long long v116 = (char *)*((void *)v111 - 3);
            unint64_t v113 = (char *)*((void *)v111 - 2);
          }
          else
          {
            long long v122 = 0;
          }
          CGFloat v155 = (float64x2_t *)&v122[16 * v117];
          double v156 = &v122[16 * v120];
          *CGFloat v155 = v112;
          long long v115 = (_OWORD *)v155[1].f64;
          if (v113 != v116)
          {
            do
            {
              v155[-1] = *((float64x2_t *)v113 - 1);
              --v155;
              v113 -= 16;
            }
            while (v113 != v116);
            long long v116 = (char *)*((void *)v111 - 3);
          }
          *((void *)v111 - 3) = v155;
          *((void *)v111 - 2) = v115;
          *((void *)v111 - 1) = v156;
          if (v116) {
            operator delete(v116);
          }
LABEL_140:
          *((void *)v111 - 2) = v115;
          int64x2_t v85 = v4[1];
          uint64_t v86 = (_OWORD *)(*(void *)(a2 + 8) + 16);
          unint64_t v87 = (_OWORD *)*((void *)v85 - 2);
          unint64_t v157 = *((void *)v85 - 1);
          if ((unint64_t)v87 >= v157)
          {
            unint64_t v89 = (void **)(v85 - 24);
            uint64_t v158 = *((void *)v85 - 3);
            uint64_t v159 = ((uint64_t)v87 - v158) >> 4;
            unint64_t v160 = v159 + 1;
            if (!((unint64_t)(v159 + 1) >> 60))
            {
              uint64_t v161 = v157 - v158;
              if (v161 >> 3 > v160) {
                unint64_t v160 = v161 >> 3;
              }
              if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v162 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v162 = v160;
              }
              if (v162) {
                double v163 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(v85 - 8), v162);
              }
              else {
                double v163 = 0;
              }
              unint64_t v125 = &v163[16 * v159];
              long long v126 = &v163[16 * v162];
              *(_OWORD *)unint64_t v125 = *v86;
              long long v127 = v125 + 16;
              float64x2_t v168 = (char *)*((void *)v85 - 3);
              long long v128 = (char *)*((void *)v85 - 2);
              if (v128 == v168) {
                goto LABEL_161;
              }
              do
              {
                *((_OWORD *)v125 - 1) = *((_OWORD *)v128 - 1);
                v125 -= 16;
                v128 -= 16;
              }
              while (v128 != v168);
              goto LABEL_160;
            }
LABEL_166:
            std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
          }
LABEL_141:
          _OWORD *v87 = *v86;
          long long v127 = v87 + 1;
LABEL_163:
          *((void *)v85 - 2) = v127;
          return;
        }
LABEL_167:
        std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
      }
      goto LABEL_165;
    case 3:
      unint64_t v13 = v4[1];
      uint64_t v14 = ((uint64_t)(*((void *)v13 - 2) - *((void *)v13 - 3)) >> 4) - 1;
      unint64_t v16 = *((void *)v13 - 5);
      unint64_t v15 = *((void *)v13 - 4);
      if (v16 >= v15)
      {
        uint64_t v41 = *((void *)v13 - 6);
        uint64_t v42 = (uint64_t)(v16 - v41) >> 4;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60) {
LABEL_165:
        }
          std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
        uint64_t v44 = v15 - v41;
        if (v44 >> 3 > v43) {
          unint64_t v43 = v44 >> 3;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        char v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v45);
        char v47 = &v46[16 * v42];
        unint64_t v49 = &v46[16 * v48];
        *(void *)char v47 = v14;
        v47[8] = 1;
        unint64_t v17 = v47 + 16;
        int v51 = (unsigned char *)*((void *)v13 - 6);
        char v50 = (unsigned char *)*((void *)v13 - 5);
        if (v50 != v51)
        {
          do
          {
            uint64_t v52 = *((void *)v50 - 2);
            v50 -= 16;
            char v53 = v50[8];
            *((void *)v47 - 2) = v52;
            v47 -= 16;
            v47[8] = v53;
          }
          while (v50 != v51);
          char v50 = (unsigned char *)*((void *)v13 - 6);
        }
        *((void *)v13 - 6) = v47;
        *((void *)v13 - 5) = v17;
        *((void *)v13 - 4) = v49;
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *(void *)unint64_t v16 = v14;
        *(unsigned char *)(v16 + 8) = 1;
        unint64_t v17 = (char *)(v16 + 16);
      }
      *((void *)v13 - 5) = v17;
      long long v54 = v4[1];
      double v55 = (char *)*((void *)v54 - 2);
      double v56 = *(char **)(a2 + 8);
      uint64_t v57 = (uint64_t)(v54 - 8);
      uint64_t v58 = *((void *)v54 - 1);
      if (v58 - (uint64_t)v55 >= 48)
      {
        memmove(*((void **)v54 - 2), v56, 0x30uLL);
        *((void *)v54 - 2) = v55 + 48;
      }
      else
      {
        uint64_t v61 = *((void *)v54 - 3);
        unint64_t v60 = (void **)(v54 - 24);
        uint64_t v59 = v61;
        uint64_t v62 = (uint64_t)&v55[-v61] >> 4;
        if ((unint64_t)(v62 + 3) >> 60) {
          std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v63 = v58 - v59;
        uint64_t v64 = v63 >> 3;
        if (v63 >> 3 <= (unint64_t)(v62 + 3)) {
          uint64_t v64 = v62 + 3;
        }
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v65 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v64;
        }
        float64x2_t v175 = (void *)v57;
        if (v65) {
          float64x2_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v57, v65);
        }
        else {
          float64x2_t v66 = 0;
        }
        uint64_t v123 = 0;
        unint64_t v124 = &v66[16 * v62];
        __p = v66;
        unint64_t v172 = v124;
        double v174 = &v66[16 * v65];
        do
        {
          *(_OWORD *)&v124[v123] = *(_OWORD *)&v56[v123];
          v123 += 16;
        }
        while (v123 != 48);
        uint64_t v173 = v124 + 48;
        std::vector<CGPoint>::__swap_out_circular_buffer(v60, (uint64_t)&__p, v55);
        if (v173 != v172) {
          v173 += (v172 - v173 + 15) & 0xFFFFFFFFFFFFFFF0;
        }
        if (__p) {
          operator delete(__p);
        }
      }
      return;
    default:
      return;
  }
}

void sub_1C4673B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CGPathRandomAccessSubpath::closeIfNeeded(CGPathRandomAccessSubpath *this)
{
  unint64_t v1 = *((void *)this + 1);
  uint64_t v2 = v1 - *(void *)this;
  if ((unint64_t)v2 >= 0x20)
  {
    unint64_t v4 = (double *)*((void *)this + 3);
    uint64_t v5 = *((void *)this + 4);
    uint64_t v6 = ((v5 - (uint64_t)v4) >> 4) - 1;
    if (*(void *)(v1 - 16) != v6 && (*(double *)(v5 - 16) != *v4 || *(double *)(v5 - 8) != v4[1]))
    {
      unint64_t v8 = *((void *)this + 2);
      if (v1 >= v8)
      {
        uint64_t v10 = v2 >> 4;
        unint64_t v11 = (v2 >> 4) + 1;
        if (v11 >> 60) {
          std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v8 - *(void *)this;
        if (v12 >> 3 > v11) {
          unint64_t v11 = v12 >> 3;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v13);
        unint64_t v15 = &v14[16 * v10];
        unint64_t v17 = &v14[16 * v16];
        *(void *)unint64_t v15 = v6;
        v15[8] = 0;
        uint64_t v9 = v15 + 16;
        uint64_t v19 = *(unsigned char **)this;
        char v18 = (unsigned char *)*((void *)this + 1);
        if (v18 != *(unsigned char **)this)
        {
          do
          {
            uint64_t v20 = *((void *)v18 - 2);
            v18 -= 16;
            char v21 = v18[8];
            *((void *)v15 - 2) = v20;
            v15 -= 16;
            v15[8] = v21;
          }
          while (v18 != v19);
          char v18 = *(unsigned char **)this;
        }
        *(void *)this = v15;
        *((void *)this + 1) = v9;
        *((void *)this + 2) = v17;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(void *)unint64_t v1 = v6;
        *(unsigned char *)(v1 + 8) = 0;
        uint64_t v9 = (char *)(v1 + 16);
      }
      *((void *)this + 1) = v9;
    }
  }
}

void std::__destroy_at[abi:ne180100]<CGPathRandomAccessSubpath,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t std::__split_buffer<CGPathRandomAccessSubpath>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::__destroy_at[abi:ne180100]<CGPathRandomAccessSubpath,0>(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

void *std::vector<CGPoint>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    unint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      uint64_t v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  uint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  unint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<CGPathRandomAccessSubpath,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ___ZNK25CGPathRandomAccessSubpath11clipperPathEdRNSt3__16vectorIN10ClipperLib8IntPointENS0_9allocatorIS3_EEEE_block_invoke(uint64_t a1, double a2, double a3)
{
  double v3 = *(double *)(a1 + 48);
  int v4 = (int)(a2 * v3);
  int v5 = (int)(a3 * v3);
  uint64_t v6 = *(void ***)(a1 + 40);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  unint64_t v8 = v6[1];
  unint64_t v9 = (unint64_t)v6[2];
  if ((unint64_t)v8 >= v9)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (unsigned char *)*v6) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*v6) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v12;
    }
    unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)(v6 + 2), v14);
    uint64_t v16 = &v15[24 * v11];
    char v18 = &v15[24 * v17];
    *(void *)uint64_t v16 = v4;
    *((void *)v16 + 1) = v5;
    *((void *)v16 + 2) = *(void *)(v7 + 48);
    uint64_t v10 = v16 + 24;
    uint64_t v20 = (char *)*v6;
    uint64_t v19 = (char *)v6[1];
    if (v19 != *v6)
    {
      do
      {
        long long v21 = *(_OWORD *)(v19 - 24);
        *((void *)v16 - 1) = *((void *)v19 - 1);
        *(_OWORD *)(v16 - 24) = v21;
        v16 -= 24;
        v19 -= 24;
      }
      while (v19 != v20);
      uint64_t v19 = (char *)*v6;
    }
    char *v6 = v16;
    v6[1] = v10;
    id v6[2] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unint64_t v8 = v4;
    v8[1] = v5;
    id v8[2] = *(void *)(v7 + 48);
    uint64_t v10 = v8 + 3;
  }
  v6[1] = v10;
}

void sub_1C46741C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4674280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4674590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4674614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)PKTextInputCanvasController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C46746D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C46747A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46748AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4674964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4674F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46751E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4675244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46752D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C46753FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C467558C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46756F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4675838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46759EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4675EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

void sub_1C4676078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_1C4676238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1C467635C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v12 = v11;

  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_1C46764EC(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C46765B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C46766D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4676828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C46769F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4676AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4676CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4676D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4676E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4676EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4677034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4677210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (v13)
  {
  }
  _Unwind_Resume(a1);
}

void PKInputSmoother::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v10 = a2;
  PKInputBaseFilter<_PKStrokePoint,_PKStrokePoint>::drawingBeganWithInk(a1, v10, a3, a4);
  [v10 behavior];
  if (a3 == 1) {
    uint64_t v7 = {;
  }
    unint64_t v8 = [v7 smoothingDescriptor];
    [v8 stylusSmoothing];
  }
  else {
    uint64_t v7 = {;
  }
    unint64_t v8 = [v7 smoothingDescriptor];
    [v8 touchSmoothing];
  }
  *(void *)(a1 + 104) = v9;
}

void sub_1C4677D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void PKInputSmoother::run(PKInputSmoother *this)
{
  unint64_t v1 = (void *)((char *)this + 48);
  unint64_t v2 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3);
  unint64_t v3 = *((void *)this + 5);
  BOOL v90 = v2 > v3;
  unint64_t v4 = v2 - v3;
  if (v90)
  {
    int v5 = this;
    uint64_t v6 = *((void *)this + 14);
    long long v141 = (uint64_t *)((char *)this + 112);
    if (*((void *)this + 15) != v6) {
      *((void *)this + 15) = v6;
    }
    if (0x6DB6DB6DB6DB6DB7 * ((*((void *)this + 16) - v6) >> 3) < 8 * v4)
    {
      if (8 * v4 > 0x492492492492492) {
LABEL_107:
      }
        std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
      this = (PKInputSmoother *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKSmoothingPoint>>(8 * v4);
      uint64_t v9 = (PKInputSmoother *)*((void *)v5 + 14);
      unint64_t v8 = (PKInputSmoother *)*((void *)v5 + 15);
      id v10 = this;
      if (v8 != v9)
      {
        do
        {
          long long v11 = *(_OWORD *)((char *)v8 - 56);
          long long v12 = *(_OWORD *)((char *)v8 - 40);
          long long v13 = *(_OWORD *)((char *)v8 - 24);
          *((void *)v10 - 1) = *((void *)v8 - 1);
          *(_OWORD *)((char *)v10 - 24) = v13;
          *(_OWORD *)((char *)v10 - 40) = v12;
          *(_OWORD *)((char *)v10 - 56) = v11;
          id v10 = (PKInputSmoother *)((char *)v10 - 56);
          unint64_t v8 = (PKInputSmoother *)((char *)v8 - 56);
        }
        while (v8 != v9);
        unint64_t v8 = (PKInputSmoother *)*v141;
      }
      *((void *)v5 + 14) = v10;
      *((void *)v5 + 15) = this;
      *((void *)v5 + 16) = (char *)this + 56 * v7;
      if (v8) {
        operator delete(v8);
      }
    }
    unint64_t v14 = *((void *)v5 + 5);
    if (v14 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)v5 + 7) - *((void *)v5 + 6)) >> 3) - 1)
    {
      double v15 = 1.0 / *((double *)v5 + 3);
      do
      {
        uint64_t v16 = 0;
        unint64_t v17 = v14 + 1;
        do
        {
          double v18 = (double)v16 * 0.125;
          double v19 = splinePoint(v1, v14, (double (*)(void, double))b, v18);
          double v21 = v20;
          double v22 = splinePoint(v1, v14, (double (*)(void, double))b2, v18);
          double v24 = v23;
          double v25 = splinePoint(v1, v14, (double (*)(void, double))b3, v18);
          double v27 = v26;
          double v28 = pow(v24 * v24 + v22 * v22, 1.5);
          if (v28 <= 0.001) {
            double v29 = 100.0;
          }
          else {
            double v29 = fabs((v22 * v27 - v24 * v25) / v28);
          }
          this = (PKInputSmoother *)*((void *)v5 + 14);
          unint64_t v30 = *((void *)v5 + 15);
          double v31 = 0.0;
          if ((PKInputSmoother *)v30 != this) {
            double v31 = sqrt((v21 - *(double *)(v30 - 48)) * (v21 - *(double *)(v30 - 48))+ (v19 - *(double *)(v30 - 56)) * (v19 - *(double *)(v30 - 56)));
          }
          double v32 = fmax(v29 * *((double *)v5 + 3), 0.0);
          uint64_t v33 = *((void *)v5 + 6);
          uint64_t v34 = (double *)(v33 + 88 * v14);
          char v35 = (double *)(v33 + 88 * v17);
          double v36 = v18 * *v35 + *v34 * (1.0 - v18);
          double v37 = v18 * v35[3] + v34[3] * (1.0 - v18);
          double v38 = v15 * v31;
          unint64_t v39 = *((void *)v5 + 16);
          if (v30 >= v39)
          {
            uint64_t v41 = (uint64_t)(v30 - (void)this) / 56;
            unint64_t v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) > 0x492492492492492) {
              goto LABEL_107;
            }
            unint64_t v43 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v39 - (void)this) >> 3);
            if (2 * v43 > v42) {
              unint64_t v42 = 2 * v43;
            }
            if (v43 >= 0x249249249249249) {
              unint64_t v42 = 0x492492492492492;
            }
            if (v42)
            {
              unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PKSmoothingPoint>>(v42);
              this = (PKInputSmoother *)*((void *)v5 + 14);
              unint64_t v30 = *((void *)v5 + 15);
            }
            else
            {
              uint64_t v44 = 0;
            }
            unint64_t v45 = v42 + 56 * v41;
            *(double *)unint64_t v45 = v19;
            *(double *)(v45 + 8) = v21;
            *(double *)(v45 + 16) = v32;
            *(void *)(v45 + 24) = 0;
            *(double *)(v45 + 32) = v38;
            *(double *)(v45 + 40) = v36;
            *(double *)(v45 + 48) = v37;
            unint64_t v46 = v45;
            if ((PKInputSmoother *)v30 != this)
            {
              do
              {
                long long v47 = *(_OWORD *)(v30 - 56);
                long long v48 = *(_OWORD *)(v30 - 40);
                long long v49 = *(_OWORD *)(v30 - 24);
                *(void *)(v46 - 8) = *(void *)(v30 - 8);
                *(_OWORD *)(v46 - 24) = v49;
                *(_OWORD *)(v46 - 40) = v48;
                *(_OWORD *)(v46 - 56) = v47;
                v46 -= 56;
                v30 -= 56;
              }
              while ((PKInputSmoother *)v30 != this);
              this = (PKInputSmoother *)*v141;
            }
            unint64_t v40 = v45 + 56;
            *((void *)v5 + 14) = v46;
            *((void *)v5 + 15) = v45 + 56;
            *((void *)v5 + 16) = v42 + 56 * v44;
            if (this) {
              operator delete(this);
            }
          }
          else
          {
            *(double *)unint64_t v30 = v19;
            *(double *)(v30 + 8) = v21;
            *(double *)(v30 + 16) = v32;
            *(void *)(v30 + 24) = 0;
            *(double *)(v30 + 32) = v38;
            *(double *)(v30 + 40) = v36;
            unint64_t v40 = v30 + 56;
            *(double *)(v30 + 48) = v37;
          }
          *((void *)v5 + 15) = v40;
          ++v16;
        }
        while (v16 != 8);
        ++v14;
      }
      while (v17 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)v5 + 7) - *((void *)v5 + 6)) >> 3) - 1);
    }
    PKInputSmoother::smoothCurvaturesDistance((uint64_t)this, v141);
    int64_t v50 = *((void *)v5 + 5);
    char v143 = (void **)((char *)v5 + 80);
    std::vector<_PKStrokePoint>::resize((uint64_t)v5 + 80, *((void *)v5 + 9));
    int v51 = (unsigned char *)*((void *)v5 + 10);
    uint64_t v52 = (_OWORD *)*((void *)v5 + 11);
    if (v52 == (_OWORD *)v51)
    {
      unint64_t v53 = *((void *)v5 + 12);
      uint64_t v54 = *((void *)v5 + 6);
      if ((unint64_t)v52 >= v53)
      {
        uint64_t v59 = ((char *)v52 - v51) / 88;
        unint64_t v60 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v53 - (void)v51) >> 3);
        uint64_t v61 = 2 * v60;
        if (2 * v60 <= v59 + 1) {
          uint64_t v61 = v59 + 1;
        }
        if (v60 >= 0x1745D1745D1745DLL) {
          unint64_t v62 = 0x2E8BA2E8BA2E8BALL;
        }
        else {
          unint64_t v62 = v61;
        }
        uint64_t v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)v5 + 96, v62);
        uint64_t v64 = &v63[88 * v59];
        float64x2_t v66 = &v63[88 * v65];
        long long v67 = *(_OWORD *)(v54 + 16);
        *(_OWORD *)uint64_t v64 = *(_OWORD *)v54;
        *((_OWORD *)v64 + 1) = v67;
        long long v68 = *(_OWORD *)(v54 + 32);
        long long v69 = *(_OWORD *)(v54 + 48);
        long long v70 = *(_OWORD *)(v54 + 64);
        *((void *)v64 + 10) = *(void *)(v54 + 80);
        *((_OWORD *)v64 + 3) = v69;
        *((_OWORD *)v64 + 4) = v70;
        *((_OWORD *)v64 + 2) = v68;
        uint64_t v52 = v64 + 88;
        uint64_t v72 = (char *)*((void *)v5 + 10);
        unint64_t v71 = (char *)*((void *)v5 + 11);
        if (v71 != v72)
        {
          do
          {
            long long v73 = *(_OWORD *)(v71 - 88);
            *(_OWORD *)(v64 - 72) = *(_OWORD *)(v71 - 72);
            *(_OWORD *)(v64 - 88) = v73;
            long long v74 = *(_OWORD *)(v71 - 56);
            long long v75 = *(_OWORD *)(v71 - 40);
            long long v76 = *(_OWORD *)(v71 - 24);
            *((void *)v64 - 1) = *((void *)v71 - 1);
            *(_OWORD *)(v64 - 24) = v76;
            *(_OWORD *)(v64 - 40) = v75;
            *(_OWORD *)(v64 - 56) = v74;
            v64 -= 88;
            v71 -= 88;
          }
          while (v71 != v72);
          unint64_t v71 = (char *)*v143;
        }
        *((void *)v5 + 10) = v64;
        *((void *)v5 + 11) = v52;
        *((void *)v5 + 12) = v66;
        if (v71) {
          operator delete(v71);
        }
      }
      else
      {
        long long v55 = *(_OWORD *)(v54 + 16);
        *uint64_t v52 = *(_OWORD *)v54;
        v52[1] = v55;
        long long v56 = *(_OWORD *)(v54 + 32);
        long long v57 = *(_OWORD *)(v54 + 48);
        long long v58 = *(_OWORD *)(v54 + 64);
        *((void *)v52 + 10) = *(void *)(v54 + 80);
        v52[3] = v57;
        v52[4] = v58;
        v52[2] = v56;
        uint64_t v52 = (_OWORD *)((char *)v52 + 88);
      }
      *((void *)v5 + 11) = v52;
    }
    uint64_t v77 = *((void *)v5 + 14);
    uint64_t v78 = *((void *)v5 + 15) - v77;
    int64_t v142 = v50;
    if (v78 && v78 != 56)
    {
      unint64_t v79 = 0;
      char v80 = (void *)((char *)v5 + 96);
      double v81 = 0.0;
      int64_t v82 = v50;
      do
      {
        uint64_t v83 = (double *)(v77 + 56 * v79);
        double v84 = v83[11];
        double v85 = v83[6];
        double v86 = v83[13];
        double v87 = (v83[12] - v83[5]) * 1000.0;
        if (v87 > 2.0) {
          double v87 = 2.0;
        }
        if (v84 >= v87) {
          double v87 = v83[11];
        }
        double v88 = v84 * 0.4 + (v83[3] + v83[10]) * 0.5 * v87;
        double v89 = v85 - v86;
        if (v85 - v86 < 0.0) {
          double v89 = -(v85 - v86);
        }
        double v81 = v81 + v89 + v88;
        int64_t v50 = *((void *)v5 + 5) + (v79 >> 3);
        BOOL v90 = v81 > *((double *)v5 + 13) && v82 < v50;
        if (v90)
        {
          uint64_t v91 = *v1 + 88 * v50;
          if ((unint64_t)v52 >= *v80)
          {
            uint64_t v96 = 0x2E8BA2E8BA2E8BA3 * (((char *)v52 - (unsigned char *)*v143) >> 3);
            unint64_t v97 = v96 + 1;
            if ((unint64_t)(v96 + 1) > 0x2E8BA2E8BA2E8BALL) {
              goto LABEL_108;
            }
            if (0x5D1745D1745D1746 * ((uint64_t)(*v80 - (void)*v143) >> 3) > v97) {
              unint64_t v97 = 0x5D1745D1745D1746 * ((uint64_t)(*v80 - (void)*v143) >> 3);
            }
            if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*v80 - (void)*v143) >> 3)) >= 0x1745D1745D1745DLL) {
              unint64_t v98 = 0x2E8BA2E8BA2E8BALL;
            }
            else {
              unint64_t v98 = v97;
            }
            if (v98) {
              uint64_t v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)v5 + 96, v98);
            }
            else {
              uint64_t v99 = 0;
            }
            unint64_t v100 = &v99[88 * v96];
            long long v101 = *(_OWORD *)(v91 + 16);
            *(_OWORD *)unint64_t v100 = *(_OWORD *)v91;
            *((_OWORD *)v100 + 1) = v101;
            long long v102 = *(_OWORD *)(v91 + 32);
            long long v103 = *(_OWORD *)(v91 + 48);
            long long v104 = *(_OWORD *)(v91 + 64);
            *((void *)v100 + 10) = *(void *)(v91 + 80);
            *((_OWORD *)v100 + 3) = v103;
            *((_OWORD *)v100 + 4) = v104;
            *((_OWORD *)v100 + 2) = v102;
            unint64_t v106 = (char *)*((void *)v5 + 10);
            uint64_t v105 = (char *)*((void *)v5 + 11);
            uint64_t v107 = v100;
            if (v105 != v106)
            {
              do
              {
                long long v108 = *(_OWORD *)(v105 - 88);
                *(_OWORD *)(v107 - 72) = *(_OWORD *)(v105 - 72);
                *(_OWORD *)(v107 - 88) = v108;
                long long v109 = *(_OWORD *)(v105 - 56);
                long long v110 = *(_OWORD *)(v105 - 40);
                long long v111 = *(_OWORD *)(v105 - 24);
                *((void *)v107 - 1) = *((void *)v105 - 1);
                *(_OWORD *)(v107 - 24) = v111;
                *(_OWORD *)(v107 - 40) = v110;
                *(_OWORD *)(v107 - 56) = v109;
                v107 -= 88;
                v105 -= 88;
              }
              while (v105 != v106);
              uint64_t v105 = (char *)*v143;
            }
            uint64_t v52 = v100 + 88;
            *((void *)v5 + 10) = v107;
            *((void *)v5 + 11) = v100 + 88;
            *((void *)v5 + 12) = &v99[88 * v98];
            if (v105) {
              operator delete(v105);
            }
          }
          else
          {
            long long v92 = *(_OWORD *)(v91 + 16);
            *uint64_t v52 = *(_OWORD *)v91;
            v52[1] = v92;
            long long v93 = *(_OWORD *)(v91 + 32);
            long long v94 = *(_OWORD *)(v91 + 48);
            long long v95 = *(_OWORD *)(v91 + 64);
            *((void *)v52 + 10) = *(void *)(v91 + 80);
            v52[3] = v94;
            v52[4] = v95;
            v52[2] = v93;
            uint64_t v52 = (_OWORD *)((char *)v52 + 88);
          }
          *((void *)v5 + 11) = v52;
          double v81 = 0.0;
          if (v50 < *((void *)v5 + 4))
          {
            *((void *)v5 + 9) = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v52 - *((void *)v5 + 10)) >> 3);
            int64_t v142 = v50;
          }
        }
        else
        {
          int64_t v50 = v82;
        }
        ++v79;
        uint64_t v77 = *((void *)v5 + 14);
        int64_t v82 = v50;
      }
      while (v79 < 0x6DB6DB6DB6DB6DB7 * ((*((void *)v5 + 15) - v77) >> 3) - 1);
    }
    *((void *)v5 + 5) = v142;
    uint64_t v112 = *((void *)v5 + 7);
    unint64_t v113 = 0x2E8BA2E8BA2E8BA3 * ((v112 - *((void *)v5 + 6)) >> 3);
    if (v50 + 1 < v113)
    {
      unint64_t v114 = (_OWORD *)(v112 - 88);
      long long v115 = *(_OWORD *)(v112 - 40);
      long long v150 = *(_OWORD *)(v112 - 56);
      long long v151 = v115;
      long long v152 = *(_OWORD *)(v112 - 24);
      uint64_t v153 = *(void *)(v112 - 8);
      long long v116 = *(_OWORD *)(v112 - 72);
      long long v148 = *(_OWORD *)(v112 - 88);
      long long v149 = v116;
      uint64_t v117 = *v143;
      uint64_t v118 = (char *)v52 - (unsigned char *)*v143;
      if (v52 == *v143) {
        goto LABEL_87;
      }
      long long v119 = *(_OWORD *)((char *)v52 - 72);
      __s1[0] = *(_OWORD *)((char *)v52 - 88);
      __s1[1] = v119;
      long long v120 = *(_OWORD *)((char *)v52 - 56);
      long long v121 = *(_OWORD *)((char *)v52 - 40);
      long long v122 = *(_OWORD *)((char *)v52 - 24);
      uint64_t v147 = *((void *)v52 - 1);
      __s1[3] = v121;
      __s1[4] = v122;
      __s1[2] = v120;
      long long v123 = *(_OWORD *)(v112 - 40);
      __s2[2] = *(_OWORD *)(v112 - 56);
      __s2[3] = v123;
      __s2[4] = *(_OWORD *)(v112 - 24);
      uint64_t v145 = *(void *)(v112 - 8);
      long long v124 = *(_OWORD *)(v112 - 72);
      __s2[0] = *v114;
      __s2[1] = v124;
      if (memcmp(__s1, __s2, 0x58uLL))
      {
LABEL_87:
        unint64_t v125 = *((void *)v5 + 12);
        if ((unint64_t)v52 >= v125)
        {
          unint64_t v126 = 0x2E8BA2E8BA2E8BA3 * (v118 >> 3) + 1;
          if (v126 > 0x2E8BA2E8BA2E8BALL) {
LABEL_108:
          }
            std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
          unint64_t v127 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v125 - (void)v117) >> 3);
          if (2 * v127 > v126) {
            unint64_t v126 = 2 * v127;
          }
          if (v127 >= 0x1745D1745D1745DLL) {
            unint64_t v128 = 0x2E8BA2E8BA2E8BALL;
          }
          else {
            unint64_t v128 = v126;
          }
          if (v128) {
            long long v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)v5 + 96, v128);
          }
          else {
            long long v129 = 0;
          }
          uint64_t v130 = &v129[8 * (v118 >> 3)];
          unint64_t v131 = &v129[88 * v128];
          long long v132 = v149;
          *(_OWORD *)uint64_t v130 = v148;
          *((_OWORD *)v130 + 1) = v132;
          *((void *)v130 + 10) = v153;
          long long v133 = v152;
          long long v134 = v150;
          *((_OWORD *)v130 + 3) = v151;
          *((_OWORD *)v130 + 4) = v133;
          *((_OWORD *)v130 + 2) = v134;
          uint64_t v52 = v130 + 88;
          uint64_t v136 = (char *)*((void *)v5 + 10);
          long long v135 = (char *)*((void *)v5 + 11);
          if (v135 != v136)
          {
            do
            {
              long long v137 = *(_OWORD *)(v135 - 88);
              *(_OWORD *)(v130 - 72) = *(_OWORD *)(v135 - 72);
              *(_OWORD *)(v130 - 88) = v137;
              long long v138 = *(_OWORD *)(v135 - 56);
              long long v139 = *(_OWORD *)(v135 - 40);
              long long v140 = *(_OWORD *)(v135 - 24);
              *((void *)v130 - 1) = *((void *)v135 - 1);
              *(_OWORD *)(v130 - 24) = v140;
              *(_OWORD *)(v130 - 40) = v139;
              *(_OWORD *)(v130 - 56) = v138;
              v130 -= 88;
              v135 -= 88;
            }
            while (v135 != v136);
            long long v135 = (char *)*v143;
          }
          *((void *)v5 + 10) = v130;
          *((void *)v5 + 11) = v52;
          *((void *)v5 + 12) = v131;
          if (v135) {
            operator delete(v135);
          }
        }
        else
        {
          memmove(v52, v114, 0x58uLL);
          uint64_t v52 = (_OWORD *)((char *)v52 + 88);
        }
        *((void *)v5 + 11) = v52;
        unint64_t v113 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)v5 + 7) - *((void *)v5 + 6)) >> 3);
      }
      if (*((void *)v5 + 4) >= v113) {
        *((void *)v5 + 9) = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v52 - *((void *)v5 + 10)) >> 3);
      }
    }
  }
}

void PKInputSmoother::smoothCurvaturesDistance(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1] - *a2;
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = v3 / 56;
    BOOL v6 = v3 / 56 != 0;
    unint64_t v7 = v3 / 56 - 1;
    if (v7 == 0 || !v6) {
      uint64_t v5 = 1;
    }
    uint64_t v8 = v2 + 88;
    do
    {
      int64_t v9 = v4 - 1;
      if (!v4) {
        int64_t v9 = 0;
      }
      if (v4 >= 2)
      {
        id v10 = (double *)(v8 - 56 * (v4 != 0));
        double v11 = 0.0;
        do
        {
          uint64_t v12 = v9--;
          if (v12 < 2) {
            break;
          }
          double v13 = *v10;
          v10 -= 7;
          double v11 = v11 + v13;
        }
        while (v11 < 0.85);
      }
      if (v4 < v7) {
        unint64_t v14 = v4 + 1;
      }
      else {
        unint64_t v14 = v7;
      }
      if (v14 < v7)
      {
        double v15 = (double *)(v2 + 32 + 56 * v14);
        double v16 = 0.0;
        do
        {
          if (++v14 >= v7) {
            break;
          }
          double v17 = *v15;
          v15 += 7;
          double v16 = v16 + v17;
        }
        while (v16 < 0.85);
      }
      double v18 = 0.0;
      if (v9 <= (uint64_t)v14)
      {
        uint64_t v19 = v14 - v9 + 1;
        double v20 = (double *)(v2 + 16 + 56 * v9);
        do
        {
          double v21 = *v20;
          v20 += 7;
          double v22 = v21;
          if (v18 < v21) {
            double v18 = v22;
          }
          --v19;
        }
        while (v19);
      }
      *(double *)(v2 + 56 * v4 + 24) = v18;
      v8 += 56;
      ++v4;
    }
    while (v4 != v5);
  }
}

uint64_t PKInputSmoother::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WeakRetaineCGFloat d = objc_loadWeakRetained((id *)(a1 + 136));
  int v7 = [WeakRetained isSnappedToRuler];

  if (v7)
  {
    uint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 24);
    return v8();
  }
  else
  {
    return PKInputBufferedFilter<_PKStrokePoint,_PKStrokePoint>::copyUpdatedRangeFromIndex((void *)a1, a2, a3);
  }
}

void sub_1C46789E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PKSmoothingPoint>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a1);
}

id PKPencilSqueezeAnalyticsLog()
{
  if (PKPencilSqueezeAnalyticsLog_onceToken != -1) {
    dispatch_once(&PKPencilSqueezeAnalyticsLog_onceToken, &__block_literal_global_45);
  }
  BOOL v0 = (void *)PKPencilSqueezeAnalyticsLog_log;

  return v0;
}

void __PKPencilSqueezeAnalyticsLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.PencilKit", "PencilSqueezeAnalytics");
  unint64_t v1 = (void *)PKPencilSqueezeAnalyticsLog_log;
  PKPencilSqueezeAnalyticsLog_log = (uint64_t)v0;
}

void sub_1C467A9B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  BOOL v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
      uint64_t v8 = *a1;
      int v7 = a1[1];
    }
    else
    {
      unint64_t v14 = 0;
    }
    double v15 = &v14[8 * v11];
    double v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    double v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void ClipperLib::PolyTree::Clear(ClipperLib::PolyTree *this)
{
  uint64_t v2 = *((void *)this + 10);
  uint64_t v3 = *((void *)this + 11);
  uint64_t v4 = (char *)this + 80;
  if (v3 != v2)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(v2 + 8 * v5);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        uint64_t v2 = *((void *)this + 10);
        uint64_t v3 = *((void *)this + 11);
      }
      ++v5;
    }
    while (v5 < (v3 - v2) >> 3);
  }
  std::vector<ClipperLib::PolyNode *>::resize((uint64_t)v4, 0);

  std::vector<ClipperLib::PolyNode *>::resize((uint64_t)this + 32, 0);
}

void std::vector<ClipperLib::PolyNode *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<ClipperLib::PolyNode *>::__append((void **)a1, a2 - v2);
  }
}

uint64_t ClipperLib::PolyTree::GetFirst(ClipperLib::PolyTree *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1 == *((void *)this + 5)) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t ClipperLib::PolyTree::Total(ClipperLib::PolyTree *this)
{
  unint64_t v2 = (void *)*((void *)this + 10);
  uint64_t result = (*((void *)this + 11) - (void)v2) >> 3;
  if ((int)result >= 1) {
    return result - (**((void **)this + 4) != *v2);
  }
  return result;
}

double ClipperLib::PolyNode::PolyNode(ClipperLib::PolyNode *this)
{
  *(void *)this = &unk_1F1FB0428;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 53) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F1FB0428;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 53) = 0u;
  return result;
}

uint64_t ClipperLib::PolyNode::ChildCount(ClipperLib::PolyNode *this)
{
  return (*((void *)this + 5) - *((void *)this + 4)) >> 3;
}

void ClipperLib::PolyNode::AddChild(ClipperLib::PolyNode *this, ClipperLib::PolyNode *a2)
{
  uint64_t v4 = *((void *)this + 4);
  uint64_t v6 = (void *)*((void *)this + 5);
  unint64_t v5 = (void **)((char *)this + 32);
  uint64_t v7 = (uint64_t)v6 - v4;
  uint64_t v8 = (char *)this + 32;
  unint64_t v11 = *((void *)v8 + 2);
  uint64_t v9 = (uint64_t)(v8 + 16);
  unint64_t v10 = v11;
  if ((unint64_t)v6 >= v11)
  {
    unint64_t v13 = (v7 >> 3) + 1;
    if (v13 >> 61) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v10 - v4;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= v13) {
      uint64_t v15 = (v7 >> 3) + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      double v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v9, v16);
    }
    else {
      double v17 = 0;
    }
    uint64_t v18 = &v17[8 * (v7 >> 3)];
    uint64_t v19 = &v17[8 * v16];
    *(void *)uint64_t v18 = a2;
    uint64_t v12 = v18 + 8;
    double v21 = (char *)*((void *)this + 4);
    double v20 = (char *)*((void *)this + 5);
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      double v20 = (char *)*v5;
    }
    *((void *)this + 4) = v18;
    *((void *)this + 5) = v12;
    *((void *)this + 6) = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    void *v6 = a2;
    uint64_t v12 = v6 + 1;
  }
  *((void *)this + 5) = v12;
  *((void *)a2 + 7) = this;
  *((_DWORD *)a2 + 16) = (unint64_t)v7 >> 3;
}

uint64_t ClipperLib::PolyNode::GetNext(ClipperLib::PolyNode *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1 == *((void *)this + 5))
  {
    do
    {
      uint64_t v4 = *((void *)this + 7);
      if (!v4) {
        return 0;
      }
      uint64_t v2 = *((unsigned int *)this + 16);
      uint64_t v3 = *(void *)(v4 + 32);
      this = (ClipperLib::PolyNode *)*((void *)this + 7);
    }
    while (((*(void *)(v4 + 40) - v3) >> 3) - 1 == v2);
    uint64_t v1 = v3 + 8 * (v2 + 1);
  }
  return *(void *)v1;
}

uint64_t ClipperLib::PolyNode::GetNextSiblingUp(ClipperLib::PolyNode *this)
{
  while (1)
  {
    uint64_t v1 = *((void *)this + 7);
    if (!v1) {
      break;
    }
    uint64_t v2 = *((unsigned int *)this + 16);
    uint64_t v3 = *(void *)(v1 + 32);
    this = (ClipperLib::PolyNode *)*((void *)this + 7);
    if (((*(void *)(v1 + 40) - v3) >> 3) - 1 != v2) {
      return *(void *)(v3 + 8 * (v2 + 1));
    }
  }
  return 0;
}

uint64_t ClipperLib::PolyNode::IsHole(ClipperLib::PolyNode *this)
{
  int v1 = 1;
  do
  {
    char v2 = v1;
    this = (ClipperLib::PolyNode *)*((void *)this + 7);
    v1 ^= 1u;
  }
  while (this);
  return v2 & 1;
}

uint64_t ClipperLib::PolyNode::IsOpen(ClipperLib::PolyNode *this)
{
  return *((unsigned __int8 *)this + 68);
}

unint64_t ClipperLib::Int128Mul@<X0>(unint64_t this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  if ((this & 0x8000000000000000) == 0) {
    uint64_t v3 = this;
  }
  else {
    uint64_t v3 = -(uint64_t)this;
  }
  if (a2 >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = -a2;
  }
  unint64_t v5 = v4 * (unint64_t)v3;
  unint64_t v6 = ((HIDWORD(v4) * (unint64_t)v3 + v4 * (unint64_t)HIDWORD(v3)) >> 32)
     + HIDWORD(v4) * (unint64_t)HIDWORD(v3);
  unint64_t v7 = v4 * v3;
  *a3 = v7;
  a3[1] = v6;
  if (v7 < v5) {
    a3[1] = ++v6;
  }
  if (this >> 63 != (unint64_t)a2 >> 63)
  {
    unint64_t v8 = -(uint64_t)v6;
    if (v7) {
      unint64_t v8 = ~v6;
    }
    *a3 = -(uint64_t)v7;
    a3[1] = v8;
  }
  return this;
}

BOOL ClipperLib::Orientation(uint64_t *a1)
{
  return ClipperLib::Area(a1) >= 0.0;
}

double ClipperLib::Area(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  double result = 0.0;
  if ((int)v2 >= 3)
  {
    uint64_t v4 = 0;
    int v5 = v2 - 1;
    unint64_t v6 = (uint64_t *)(v1 + 8);
    do
    {
      unint64_t v7 = (uint64_t *)(v1 + 24 * v5);
      double v8 = (double)*v7 + (double)*(v6 - 1);
      uint64_t v9 = *v6;
      v6 += 3;
      double result = result + v8 * ((double)v7[1] - (double)v9);
      int v5 = v4++;
    }
    while (-1431655765 * ((a1[1] - *a1) >> 3) != v4);
    return result * -0.5;
  }
  return result;
}

double ClipperLib::Area(void *a1)
{
  double result = 0.0;
  if (a1)
  {
    unint64_t v2 = a1;
    do
    {
      double result = result
             + (double)(uint64_t)(v2[1] + *(void *)(v2[5] + 8))
             * (double)(uint64_t)(*(void *)(v2[5] + 16) - v2[2]);
      unint64_t v2 = (void *)v2[4];
    }
    while (v2 != a1);
    return result * 0.5;
  }
  return result;
}

double ClipperLib::Area(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (!v1) {
    return 0.0;
  }
  double v2 = 0.0;
  uint64_t v3 = *(void **)(a1 + 24);
  do
  {
    double v2 = v2 + (double)(uint64_t)(v3[1] + *(void *)(v3[5] + 8)) * (double)(uint64_t)(*(void *)(v3[5] + 16) - v3[2]);
    uint64_t v3 = (void *)v3[4];
  }
  while (v3 != v1);
  return v2 * 0.5;
}

uint64_t ClipperLib::PointIsVertex(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a2;
  do
  {
    BOOL v5 = v4[1] == v2 && v4[2] == v3;
    uint64_t result = v5;
    if (v5) {
      break;
    }
    uint64_t v4 = (void *)v4[4];
  }
  while (v4 != a2);
  return result;
}

uint64_t ClipperLib::PointInPolygon(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  if (v3 < 3) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = *v2;
  uint64_t v7 = v2[1];
  unint64_t v8 = 1;
  unint64_t v11 = a1;
  uint64_t v9 = *a1;
  uint64_t v10 = v11[1];
  while (1)
  {
    unint64_t v12 = v3 == v8 ? 0 : v8;
    unint64_t v13 = &v2[3 * v12];
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    if (v15 == v10 && (v14 == v9 || v7 == v10 && v6 < v9 != v14 <= v9)) {
      return 0xFFFFFFFFLL;
    }
    if (v7 >= v10 == v15 < v10)
    {
      BOOL v17 = __OFSUB__(v6, v9);
      BOOL v16 = v6 - v9 < 0;
      uint64_t v18 = v6 - v9;
      if (v16 != v17)
      {
        uint64_t v19 = v14 - v9;
        if (v14 <= v9) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v19 = v14 - v9;
        if (v14 > v9)
        {
          uint64_t result = (1 - result);
          goto LABEL_22;
        }
      }
      double v20 = (double)v18 * (double)(v15 - v10) - (double)v19 * (double)(v7 - v10);
      if (v20 == 0.0) {
        return 0xFFFFFFFFLL;
      }
      if (v15 > v7 != v20 <= 0.0) {
        uint64_t result = (1 - result);
      }
      else {
        uint64_t result = result;
      }
    }
LABEL_22:
    ++v8;
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    if (v8 > v3) {
      return result;
    }
  }
}

uint64_t ClipperLib::PointInPolygon(void *a1, void *a2)
{
  uint64_t result = 0;
  uint64_t v6 = a1;
  uint64_t v4 = *a1;
  uint64_t v5 = v6[1];
  uint64_t v7 = a2;
  while (1)
  {
    unint64_t v8 = v7;
    uint64_t v7 = (void *)v7[4];
    uint64_t v9 = v7[2];
    if (v9 == v5)
    {
      uint64_t v10 = v7[1];
      if (v10 == v4) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v11 = v8[2];
      if (v11 == v5)
      {
        if (v10 <= v4 != v8[1] < v4) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v11 = v8[2];
    }
    if (v9 < v5 != v11 >= v5) {
      goto LABEL_20;
    }
    uint64_t v12 = v8[1];
    uint64_t v13 = v7[1];
    BOOL v15 = __OFSUB__(v12, v4);
    BOOL v14 = v12 - v4 < 0;
    uint64_t v16 = v12 - v4;
    if (v14 == v15) {
      break;
    }
    BOOL v15 = __OFSUB__(v13, v4);
    BOOL v17 = v13 == v4;
    BOOL v14 = v13 - v4 < 0;
    uint64_t v18 = v13 - v4;
    if (!(v14 ^ v15 | v17)) {
      goto LABEL_16;
    }
LABEL_20:
    if (v7 == a2) {
      return result;
    }
  }
  BOOL v15 = __OFSUB__(v13, v4);
  BOOL v17 = v13 == v4;
  BOOL v14 = v13 - v4 < 0;
  uint64_t v18 = v13 - v4;
  if (!(v14 ^ v15 | v17))
  {
    uint64_t result = (1 - result);
    goto LABEL_20;
  }
LABEL_16:
  double v19 = (double)v16 * (double)(v9 - v5) - (double)v18 * (double)(v11 - v5);
  if (v19 != 0.0)
  {
    if (v9 > v11 != v19 <= 0.0) {
      uint64_t result = (1 - result);
    }
    else {
      uint64_t result = result;
    }
    goto LABEL_20;
  }
  return 0xFFFFFFFFLL;
}

BOOL ClipperLib::Poly2ContainsPoly1(uint64_t a1, void *a2)
{
  uint64_t v4 = a1;
  while (1)
  {
    int v5 = ClipperLib::PointInPolygon((void *)(v4 + 8), a2);
    if ((v5 & 0x80000000) == 0) {
      break;
    }
    uint64_t v4 = *(void *)(v4 + 32);
    if (v4 == a1) {
      return 1;
    }
  }
  return v5 != 0;
}

BOOL ClipperLib::SlopesEqual(void *a1, void *a2, int a3)
{
  if (a3)
  {
    ClipperLib::Int128Mul(a1[7] - a1[1], a2[6] - *a2, v8);
    ClipperLib::Int128Mul(a1[6] - *a1, a2[7] - a2[1], v7);
    return v8[1] == v7[1] && v8[0] == v7[0];
  }
  else
  {
    return (a2[6] - *a2) * (a1[7] - a1[1]) == (a2[7] - a2[1]) * (a1[6] - *a1);
  }
}

BOOL ClipperLib::SlopesEqual(void *a1, uint64_t *a2, void *a3, int a4)
{
  if (a4)
  {
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    ClipperLib::Int128Mul(a1[1] - v6, *a2 - *a3, v11);
    ClipperLib::Int128Mul(*a1 - v7, v6 - a3[1], v10);
    return v11[1] == v10[1] && v11[0] == v10[0];
  }
  else
  {
    return (*a2 - *a3) * (a1[1] - a2[1]) == (a2[1] - a3[1]) * (*a1 - *a2);
  }
}

BOOL ClipperLib::SlopesEqual(void *a1, void *a2, void *a3, void *a4, int a5)
{
  if (a5)
  {
    ClipperLib::Int128Mul(a1[1] - a2[1], *a3 - *a4, v12);
    ClipperLib::Int128Mul(*a1 - *a2, a3[1] - a4[1], v11);
    return v12[1] == v11[1] && v12[0] == v11[0];
  }
  else
  {
    return (*a3 - *a4) * (a1[1] - a2[1]) == (a3[1] - a4[1]) * (*a1 - *a2);
  }
}

uint64_t ClipperLib::IntersectPoint(uint64_t result, uint64_t a2, uint64_t *a3)
{
  a3[2] = 0xBF800000BF800000;
  double v3 = *(double *)(result + 72);
  double v4 = *(double *)(a2 + 72);
  if (v3 == v4)
  {
    uint64_t v5 = *(void *)(result + 32);
    a3[1] = v5;
    if (*(void *)(result + 56) != v5)
    {
      double v11 = v3 * (double)(v5 - *(void *)(result + 8));
      double v12 = 0.5;
      if (v11 < 0.0) {
        double v12 = -0.5;
      }
      uint64_t v6 = *(void *)result + (uint64_t)(v11 + v12);
      goto LABEL_55;
    }
    goto LABEL_3;
  }
  if (v3 == 0.0)
  {
    uint64_t v7 = *(void *)result;
    *a3 = *(void *)result;
    uint64_t v8 = *(void *)(a2 + 8);
    if (v4 != -1.0e40)
    {
      double v9 = (double)v8 - (double)*(uint64_t *)a2 / v4;
      double v10 = (double)v7 / v4;
LABEL_13:
      double v14 = v10 + v9;
      double v15 = 0.5;
      if (v14 < 0.0) {
        double v15 = -0.5;
      }
      uint64_t v8 = (uint64_t)(v14 + v15);
      goto LABEL_16;
    }
    goto LABEL_16;
  }
  if (v4 == 0.0)
  {
    uint64_t v13 = *(void *)a2;
    *a3 = *(void *)a2;
    uint64_t v8 = *(void *)(result + 8);
    if (v3 != -1.0e40)
    {
      double v9 = (double)v8 - (double)*(uint64_t *)result / v3;
      double v10 = (double)v13 / v3;
      goto LABEL_13;
    }
LABEL_16:
    a3[1] = v8;
    goto LABEL_17;
  }
  double v20 = (double)*(uint64_t *)result - (double)*(uint64_t *)(result + 8) * v3;
  double v21 = (double)*(uint64_t *)a2 - (double)*(uint64_t *)(a2 + 8) * v4;
  double v22 = (v21 - v20) / (v3 - v4);
  if (v22 >= 0.0) {
    double v23 = 0.5;
  }
  else {
    double v23 = -0.5;
  }
  uint64_t v8 = (uint64_t)(v22 + v23);
  double v24 = v21 + v4 * v22;
  double v25 = v20 + v3 * v22;
  if (fabs(v3) >= fabs(v4)) {
    double v25 = v24;
  }
  if (v25 >= 0.0) {
    double v26 = 0.5;
  }
  else {
    double v26 = -0.5;
  }
  *a3 = (uint64_t)(v25 + v26);
  a3[1] = v8;
LABEL_17:
  uint64_t v16 = *(void *)(result + 56);
  uint64_t v17 = *(void *)(a2 + 56);
  if (v8 < v16 || v8 < v17)
  {
    if (v16 <= v17) {
      uint64_t v8 = *(void *)(a2 + 56);
    }
    else {
      uint64_t v8 = *(void *)(result + 56);
    }
    a3[1] = v8;
    if (fabs(v3) >= fabs(v4))
    {
      if (*(void *)(a2 + 56) == v8)
      {
        uint64_t v19 = *(void *)(a2 + 48);
        goto LABEL_44;
      }
      uint64_t v27 = *(void *)a2;
      double v28 = v4 * (double)(v8 - *(void *)(a2 + 8));
    }
    else
    {
      if (*(void *)(result + 56) == v8)
      {
        uint64_t v19 = *(void *)(result + 48);
LABEL_44:
        *a3 = v19;
        goto LABEL_45;
      }
      uint64_t v27 = *(void *)result;
      double v28 = v3 * (double)(v8 - *(void *)(result + 8));
    }
    double v29 = 0.5;
    if (v28 < 0.0) {
      double v29 = -0.5;
    }
    uint64_t v19 = v27 + (uint64_t)(v28 + v29);
    goto LABEL_44;
  }
LABEL_45:
  uint64_t v30 = *(void *)(result + 32);
  if (v8 <= v30) {
    return result;
  }
  a3[1] = v30;
  if (fabs(v3) > fabs(v4))
  {
    if (*(void *)(a2 + 56) == v30)
    {
      uint64_t v6 = *(void *)(a2 + 48);
      goto LABEL_55;
    }
    uint64_t v31 = *(void *)a2;
    double v32 = v4 * (double)(v30 - *(void *)(a2 + 8));
LABEL_52:
    double v33 = 0.5;
    if (v32 < 0.0) {
      double v33 = -0.5;
    }
    uint64_t v6 = v31 + (uint64_t)(v32 + v33);
    goto LABEL_55;
  }
  if (*(void *)(result + 56) != v30)
  {
    uint64_t v31 = *(void *)result;
    double v32 = v3 * (double)(v30 - *(void *)(result + 8));
    goto LABEL_52;
  }
LABEL_3:
  uint64_t v6 = *(void *)(result + 48);
LABEL_55:
  *a3 = v6;
  return result;
}

int8x16_t ClipperLib::ReversePolyPtLinks(__n128 *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      int8x16_t result = (int8x16_t)v1[2];
      v1[2] = (__n128)vextq_s8(result, result, 8uLL);
      uint64_t v1 = (__n128 *)result.i64[0];
    }
    while ((__n128 *)result.i64[0] != a1);
  }
  return result;
}

void *ClipperLib::DisposeOutPts(void *result)
{
  if (*result)
  {
    uint64_t v1 = (void **)result;
    *(void *)(*(void *)(*result + 40) + 32) = 0;
    while (1)
    {
      int8x16_t result = *v1;
      if (!*v1) {
        break;
      }
      __n128 *v1 = (void *)result[4];
      MEMORY[0x1C8783F10]();
    }
  }
  return result;
}

uint64_t ClipperLib::InitEdge2(uint64_t result, int a2)
{
  uint64_t v2 = (_OWORD *)(result + 24);
  uint64_t v3 = *(void *)(result + 104);
  if (*(void *)(result + 32) >= *(void *)(v3 + 32))
  {
    *(_OWORD *)int8x16_t result = *v2;
    *(void *)(result + 16) = *(void *)(result + 40);
    uint64_t v5 = *(void *)(v3 + 40);
    *(_OWORD *)(result + 48) = *(_OWORD *)(v3 + 24);
    *(void *)(result + 64) = v5;
  }
  else
  {
    *(_OWORD *)(result + 48) = *v2;
    *(void *)(result + 64) = *(void *)(result + 40);
    uint64_t v4 = *(void *)(v3 + 40);
    *(_OWORD *)int8x16_t result = *(_OWORD *)(v3 + 24);
    *(void *)(result + 16) = v4;
  }
  uint64_t v6 = *(void *)(result + 56) - *(void *)(result + 8);
  if (v6) {
    double v7 = (double)(uint64_t)(*(void *)(result + 48) - *(void *)result) / (double)v6;
  }
  else {
    double v7 = -1.0e40;
  }
  *(double *)(result + 72) = v7;
  *(_DWORD *)(result + 80) = a2;
  return result;
}

uint64_t ClipperLib::RemoveEdge(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 112);
  *(void *)(v1 + 104) = *(void *)(a1 + 104);
  uint64_t v2 = *(void *)(a1 + 104);
  *(void *)(v2 + 112) = v1;
  *(void *)(a1 + 112) = 0;
  return v2;
}

__n128 ClipperLib::SwapPoints(ClipperLib *this, IntPoint *a2, IntPoint *a3)
{
  uint64_t v3 = *((void *)this + 2);
  __n128 result = *(__n128 *)this;
  uint64_t v5 = *((void *)a2 + 2);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((void *)this + 2) = v5;
  *(__n128 *)a2 = result;
  *((void *)a2 + 2) = v3;
  return result;
}

BOOL ClipperLib::GetOverlapSegment(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a2[1];
  uint64_t v8 = *a1 - *a2;
  if (v8 < 0) {
    uint64_t v8 = *a2 - *a1;
  }
  unint64_t v9 = v6 - v7;
  if (v6 - v7 < 0) {
    unint64_t v9 = v7 - v6;
  }
  if (v8 <= v9)
  {
    if (v6 < v7)
    {
      uint64_t v22 = a1[2];
      long long v23 = *(_OWORD *)a1;
      uint64_t v24 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v24;
      *(_OWORD *)a2 = v23;
      a2[2] = v22;
    }
    uint64_t v25 = a3[1];
    if (v25 < a4[1])
    {
      uint64_t v26 = a3[2];
      long long v27 = *(_OWORD *)a3;
      uint64_t v28 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v28;
      *(_OWORD *)a4 = v27;
      a4[2] = v26;
      uint64_t v25 = a3[1];
    }
    if (a1[1] >= v25) {
      double v29 = a3;
    }
    else {
      double v29 = a1;
    }
    long long v30 = *(_OWORD *)v29;
    *(void *)(a5 + 16) = v29[2];
    *(_OWORD *)a5 = v30;
    if (a2[1] <= a4[1]) {
      uint64_t v31 = a4;
    }
    else {
      uint64_t v31 = a2;
    }
    long long v32 = *(_OWORD *)v31;
    *(void *)(a6 + 16) = v31[2];
    *(_OWORD *)a6 = v32;
    return *(void *)(a5 + 8) > *(void *)(a6 + 8);
  }
  else
  {
    if (*a1 > *a2)
    {
      uint64_t v10 = a1[2];
      long long v11 = *(_OWORD *)a1;
      uint64_t v12 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v12;
      *(_OWORD *)a2 = v11;
      a2[2] = v10;
    }
    uint64_t v13 = *a3;
    if (*a3 > *a4)
    {
      uint64_t v14 = a3[2];
      long long v15 = *(_OWORD *)a3;
      uint64_t v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      uint64_t v13 = *a3;
    }
    if (*a1 <= v13) {
      uint64_t v17 = a3;
    }
    else {
      uint64_t v17 = a1;
    }
    long long v18 = *(_OWORD *)v17;
    *(void *)(a5 + 16) = v17[2];
    *(_OWORD *)a5 = v18;
    if (*a2 >= *a4) {
      uint64_t v19 = a4;
    }
    else {
      uint64_t v19 = a2;
    }
    long long v20 = *(_OWORD *)v19;
    *(void *)(a6 + 16) = v19[2];
    *(_OWORD *)a6 = v20;
    return *(void *)a5 < *(void *)a6;
  }
}

uint64_t ClipperLib::FirstIsBottomPt(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = (void *)result;
  do
  {
    uint64_t v4 = (void *)v4[5];
    uint64_t v5 = v4[1];
    uint64_t v6 = v4[2];
  }
  while (v4 != (void *)result && v5 == v2 && v6 == v3);
  uint64_t v9 = v6 - v3;
  if (v9) {
    double v10 = (double)(v5 - v2) / (double)v9;
  }
  else {
    double v10 = -1.0e40;
  }
  long long v11 = (void *)result;
  do
  {
    long long v11 = (void *)v11[4];
    uint64_t v12 = v11[1];
    uint64_t v13 = v11[2];
  }
  while (v11 != (void *)result && v12 == v2 && v13 == v3);
  uint64_t v16 = v13 - v3;
  if (v16) {
    double v17 = (double)(v12 - v2) / (double)v16;
  }
  else {
    double v17 = -1.0e40;
  }
  double v18 = fabs(v10);
  uint64_t v19 = a2[1];
  uint64_t v20 = a2[2];
  double v21 = a2;
  do
  {
    double v21 = (void *)v21[5];
    uint64_t v22 = v21[1];
    uint64_t v23 = v21[2];
  }
  while (v21 != a2 && v22 == v19 && v23 == v20);
  if (v23 == v20) {
    double v26 = -1.0e40;
  }
  else {
    double v26 = (double)(v22 - v19) / (double)(v23 - v20);
  }
  double v27 = fabs(v17);
  uint64_t v28 = a2;
  do
  {
    uint64_t v28 = (void *)v28[4];
    uint64_t v29 = v28[1];
    uint64_t v30 = v28[2];
  }
  while (v28 != a2 && v29 == v19 && v30 == v20);
  double v33 = fabs(v26);
  uint64_t v34 = v30 - v20;
  if (v34) {
    double v35 = (double)(v29 - v19) / (double)v34;
  }
  else {
    double v35 = -1.0e40;
  }
  double v36 = fabs(v35);
  if (v18 >= v27) {
    double v37 = v18;
  }
  else {
    double v37 = v27;
  }
  if (v33 >= v36) {
    double v38 = v33;
  }
  else {
    double v38 = v36;
  }
  if (v37 == v38 && (v27 >= v18 ? (double v39 = v18) : (double v39 = v27), v36 >= v33 ? (v40 = v33) : (v40 = v36), v39 == v40))
  {
    if (result)
    {
      double v41 = 0.0;
      unint64_t v42 = (void *)result;
      do
      {
        double v41 = v41
            + (double)(uint64_t)(v42[1] + *(void *)(v42[5] + 8))
            * (double)(uint64_t)(*(void *)(v42[5] + 16) - v42[2]);
        unint64_t v42 = (void *)v42[4];
      }
      while (v42 != (void *)result);
      return v41 * 0.5 > 0.0;
    }
  }
  else
  {
    BOOL v43 = v27 >= v33;
    if (v27 < v36) {
      BOOL v43 = 0;
    }
    return v18 >= v33 && v18 >= v36 || v43;
  }
  return result;
}

uint64_t ClipperLib::GetBottomPt(void *a1)
{
  uint64_t v1 = (uint64_t)a1;
  uint64_t v2 = (void *)a1[4];
  if (v2 == a1) {
    return v1;
  }
  uint64_t v3 = 0;
  do
  {
    uint64_t v4 = v2[2];
    uint64_t v5 = *(void *)(v1 + 16);
    if (v4 > v5)
    {
LABEL_4:
      uint64_t v3 = 0;
      uint64_t v1 = (uint64_t)v2;
      goto LABEL_11;
    }
    if (v4 == v5)
    {
      uint64_t v6 = v2[1];
      uint64_t v7 = *(void *)(v1 + 8);
      if (v6 <= v7)
      {
        if (v6 < v7) {
          goto LABEL_4;
        }
        if (v2[4] != v1 && v2[5] != v1) {
          uint64_t v3 = v2;
        }
      }
    }
LABEL_11:
    uint64_t v2 = (void *)v2[4];
  }
  while (v2 != (void *)v1);
  if (!v3 || v3 == (void *)v1) {
    return v1;
  }
  uint64_t v8 = (void *)v1;
  do
  {
    if (!ClipperLib::FirstIsBottomPt(v1, v3)) {
      uint64_t v8 = v3;
    }
    do
      uint64_t v3 = (void *)v3[4];
    while (v3[1] != v8[1] || v3[2] != v8[2]);
  }
  while (v3 != (void *)v1);
  return (uint64_t)v8;
}

uint64_t ClipperLib::Pt2IsBetweenPt1AndPt3(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a1 == *a3 && v4 == v6) {
    return 0;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (v3 == *a2 && v4 == v9) {
    return 0;
  }
  if (v5 == v8 && v6 == v9) {
    return 0;
  }
  unsigned int v12 = (v9 <= v4) ^ (v9 < v6);
  unsigned int v13 = (v8 <= v3) ^ (v8 < v5);
  if (v3 == v5) {
    return v12;
  }
  else {
    return v13;
  }
}

BOOL ClipperLib::HorzSegmentsOverlap(ClipperLib *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((uint64_t)this >= a2) {
    uint64_t v4 = (ClipperLib *)a2;
  }
  else {
    uint64_t v4 = this;
  }
  if ((uint64_t)this <= a2) {
    uint64_t v5 = (ClipperLib *)a2;
  }
  else {
    uint64_t v5 = this;
  }
  if (a3 >= a4) {
    uint64_t v6 = a4;
  }
  else {
    uint64_t v6 = a3;
  }
  if (a3 <= a4) {
    uint64_t v7 = a4;
  }
  else {
    uint64_t v7 = a3;
  }
  return (uint64_t)v4 < v7 && v6 < (uint64_t)v5;
}

double ClipperLib::ClipperBase::ClipperBase(ClipperLib::ClipperBase *this)
{
  *(void *)this = &unk_1F1FB0340;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 14) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((unsigned char *)this + 40) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F1FB0340;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 14) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((unsigned char *)this + 40) = 0;
  return result;
}

void ClipperLib::ClipperBase::~ClipperBase(ClipperLib::ClipperBase *this)
{
  *(void *)this = &unk_1F1FB0340;
  ClipperLib::ClipperBase::Clear(this);
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 6);
  if (v4)
  {
    *((void *)this + 7) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }
}

{
  uint64_t vars8;

  ClipperLib::ClipperBase::~ClipperBase(this);

  JUMPOUT(0x1C8783F10);
}

uint64_t *ClipperLib::RangeTest(uint64_t *this, IntPoint *a2, BOOL *a3)
{
  uint64_t v3 = *this;
  if (!*(unsigned char *)a2)
  {
    if (v3 <= 0x3FFFFFFF && v3 >= -1073741823 && (unint64_t)(this[1] - 0x40000000) >= 0xFFFFFFFF80000001) {
      return this;
    }
    *(unsigned char *)a2 = 1;
  }
  if (v3 > 0x3FFFFFFFFFFFFFFFLL
    || (v3 >= (uint64_t)0xC000000000000001
      ? (BOOL v6 = (unint64_t)(this[1] - 0x4000000000000000) > 0x8000000000000000)
      : (BOOL v6 = 0),
        !v6))
  {
    exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
    ClipperLib::clipperException::clipperException(exception, "Coordinate outside allowed range");
  }
  return this;
}

void sub_1C467DB00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ClipperLib::FindNextLocMin(uint64_t result)
{
  while (1)
  {
    while (1)
    {
      uint64_t v1 = *(void *)(result + 112);
      if (*(void *)result == *(void *)v1
        && *(void *)(result + 8) == *(void *)(v1 + 8)
        && (*(void *)(result + 24) != *(void *)(result + 48) || *(void *)(result + 32) != *(void *)(result + 56)))
      {
        break;
      }
      double result = *(void *)(result + 104);
    }
    if (*(double *)(result + 72) != -1.0e40 && *(double *)(v1 + 72) != -1.0e40) {
      break;
    }
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 112);
    }
    while (*(double *)(v4 + 72) == -1.0e40);
    uint64_t v6 = v4;
    double result = v5;
    if (*(double *)(v5 + 72) == -1.0e40)
    {
      double result = v5;
      do
        double result = *(void *)(result + 104);
      while (*(double *)(result + 72) == -1.0e40);
      uint64_t v6 = *(void *)(result + 112);
    }
    if (*(void *)(result + 56) != *(void *)(v6 + 8))
    {
      if (*(void *)v4 < *(void *)result) {
        return v5;
      }
      return result;
    }
  }
  return result;
}

uint64_t ClipperLib::ClipperBase::ProcessBound(void *a1, uint64_t *a2, int a3, __n128 a4)
{
  if (*((_DWORD *)a2 + 25) == -2)
  {
    uint64_t v5 = (double *)a2;
    if (a3)
    {
      do
      {
        uint64_t v6 = v5;
        uint64_t v7 = *((void *)v5 + 7);
        uint64_t v5 = (double *)*((void *)v5 + 13);
      }
      while (v7 == *((void *)v5 + 1));
      if (v6 == (double *)a2) {
        goto LABEL_27;
      }
      a4.n128_u64[0] = 0xC83D6329F1C35CA5;
      while (v6[9] == -1.0e40)
      {
        uint64_t v6 = (double *)*((void *)v6 + 14);
        if (v6 == (double *)a2) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      do
      {
        uint64_t v6 = v5;
        uint64_t v8 = *((void *)v5 + 7);
        uint64_t v5 = (double *)*((void *)v5 + 14);
      }
      while (v8 == *((void *)v5 + 1));
      if (v6 == (double *)a2) {
        goto LABEL_27;
      }
      a4.n128_u64[0] = 0xC83D6329F1C35CA5;
      while (v6[9] == -1.0e40)
      {
        uint64_t v6 = (double *)*((void *)v6 + 13);
        if (v6 == (double *)a2) {
          goto LABEL_27;
        }
      }
    }
    if (v6 != (double *)a2)
    {
      uint64_t v13 = 14;
      if (a3) {
        uint64_t v13 = 13;
      }
      uint64_t v14 = a2[v13];
      uint64_t v15 = *(void *)(v14 + 8);
      *(_DWORD *)(v14 + 88) = 0;
      uint64_t v16 = ClipperLib::ClipperBase::ProcessBound(a1, v14, a4);
      double v18 = (void *)a1[3];
      unint64_t v17 = a1[4];
      if ((unint64_t)v18 >= v17)
      {
        uint64_t v43 = a1[2];
        unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - v43) >> 3);
        unint64_t v45 = v44 + 1;
        if (v44 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v43) >> 3);
        if (2 * v46 > v45) {
          unint64_t v45 = 2 * v46;
        }
        if (v46 >= 0x555555555555555) {
          unint64_t v47 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v47 = v45;
        }
        if (v47) {
          unint64_t v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::LocalMinimum>>(v47);
        }
        else {
          uint64_t v48 = 0;
        }
        long long v49 = (void *)(v47 + 24 * v44);
        unint64_t v50 = v47 + 24 * v48;
        *long long v49 = v15;
        v49[1] = 0;
        v49[2] = v14;
        uint64_t v19 = v49 + 3;
        uint64_t v52 = (char *)a1[2];
        int v51 = (char *)a1[3];
        if (v51 != v52)
        {
          do
          {
            long long v53 = *(_OWORD *)(v51 - 24);
            *(v49 - 1) = *((void *)v51 - 1);
            *(_OWORD *)(v49 - 3) = v53;
            v49 -= 3;
            v51 -= 24;
          }
          while (v51 != v52);
          int v51 = (char *)a1[2];
        }
        a1[2] = v49;
        a1[3] = v19;
        a1[4] = v50;
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *double v18 = v15;
        v18[1] = 0;
        uint64_t v19 = v18 + 3;
        v18[2] = v14;
      }
      a1[3] = v19;
      return v16;
    }
LABEL_27:
    if (a3) {
      return a2[13];
    }
    else {
      return a2[14];
    }
  }
  if (*((double *)a2 + 9) == -1.0e40)
  {
    uint64_t v9 = 13;
    if (a3) {
      uint64_t v9 = 14;
    }
    double v10 = (double *)a2[v9];
    double v11 = *v10;
    double v12 = *(double *)a2;
    if (v10[9] == -1.0e40)
    {
      if (*(void *)&v11 == *(void *)&v12 || *((void *)v10 + 6) == *(void *)&v12) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
    if (*(void *)&v11 != *(void *)&v12)
    {
LABEL_31:
      uint64_t v20 = a2[6];
      *((double *)a2 + 6) = v12;
      *a2 = v20;
      uint64_t v21 = a2[8];
      a2[8] = a2[2];
      a2[2] = v21;
    }
  }
LABEL_32:
  uint64_t v22 = a2;
  if (a3)
  {
    do
    {
      uint64_t v23 = v22;
      uint64_t v24 = v22[7];
      uint64_t v22 = (uint64_t *)v22[13];
    }
    while (v24 == v22[1] && *((_DWORD *)v22 + 25) != -2);
    if (*((double *)v23 + 9) == -1.0e40 && *((_DWORD *)v22 + 25) != -2)
    {
      uint64_t v25 = (double *)v23;
      do
        uint64_t v25 = (double *)*((void *)v25 + 14);
      while (v25[9] == -1.0e40);
      if (*((void *)v25 + 6) > v22[6]) {
        uint64_t v23 = (uint64_t *)v25;
      }
    }
    if (v23 != a2)
    {
      double v26 = (double *)a2;
      do
      {
        double v27 = (uint64_t *)*((void *)v26 + 13);
        *((void *)v26 + 15) = v27;
        if (v26 != (double *)a2 && v26[9] == -1.0e40 && *(void *)v26 != *(void *)(*((void *)v26 + 14) + 48))
        {
          uint64_t v28 = *((void *)v26 + 6);
          v26[6] = *v26;
          *(void *)double v26 = v28;
          uint64_t v29 = *((void *)v26 + 8);
          v26[8] = v26[2];
          *((void *)v26 + 2) = v29;
        }
        double v26 = (double *)v27;
      }
      while (v27 != v23);
      if (*((double *)v23 + 9) == -1.0e40 && *v23 != *(void *)(v23[14] + 48))
      {
        uint64_t v30 = v23[6];
        v23[6] = *v23;
        *uint64_t v23 = v30;
        uint64_t v31 = v23[8];
        v23[8] = v23[2];
        v23[2] = v31;
      }
    }
    long long v32 = v23 + 13;
  }
  else
  {
    do
    {
      double v33 = v22;
      uint64_t v34 = v22[7];
      uint64_t v22 = (uint64_t *)v22[14];
    }
    while (v34 == v22[1] && *((_DWORD *)v22 + 25) != -2);
    if (*((double *)v33 + 9) == -1.0e40 && *((_DWORD *)v22 + 25) != -2)
    {
      double v35 = (double *)v33;
      do
        double v35 = (double *)*((void *)v35 + 13);
      while (v35[9] == -1.0e40);
      if (*((void *)v35 + 6) >= v22[6]) {
        double v33 = (uint64_t *)v35;
      }
    }
    if (v33 != a2)
    {
      double v36 = (double *)a2;
      do
      {
        double v37 = (uint64_t *)*((void *)v36 + 14);
        *((void *)v36 + 15) = v37;
        if (v36 != (double *)a2 && v36[9] == -1.0e40 && *(void *)v36 != *(void *)(*((void *)v36 + 13) + 48))
        {
          uint64_t v38 = *((void *)v36 + 6);
          v36[6] = *v36;
          *(void *)double v36 = v38;
          uint64_t v39 = *((void *)v36 + 8);
          v36[8] = v36[2];
          *((void *)v36 + 2) = v39;
        }
        double v36 = (double *)v37;
      }
      while (v37 != v33);
      if (*((double *)v33 + 9) == -1.0e40 && *v33 != *(void *)(v33[13] + 48))
      {
        uint64_t v40 = v33[6];
        v33[6] = *v33;
        *double v33 = v40;
        uint64_t v41 = v33[8];
        v33[8] = v33[2];
        v33[2] = v41;
      }
    }
    long long v32 = v33 + 14;
  }
  return *v32;
}

uint64_t ClipperLib::ClipperBase::AddPath(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a3 == 1 && (a4 & 1) == 0)
  {
    exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
    ClipperLib::clipperException::clipperException(exception, "AddPath: Open paths must be subject.");
  }
  uint64_t v4 = *(void **)a2;
  int v5 = -1431655765 * ((*(void *)(a2 + 8) - *(void *)a2) >> 3);
  int v6 = v5 - 1;
  if (a4 && v5 >= 2)
  {
    do
    {
      uint64_t v7 = &v4[3 * --v5];
      uint64_t v9 = *v7;
      uint64_t v8 = v7[1];
      if (v9 != *v4 || v8 != v4[1])
      {
        int v6 = v5;
        goto LABEL_12;
      }
    }
    while (v5 > 1);
    int v6 = 0;
  }
LABEL_12:
  int v11 = v6 & (v6 >> 31);
  double v12 = (int64x2_t *)&v4[3 * v6];
  while (1)
  {
    BOOL v13 = __OFSUB__(v6--, 1);
    if (v6 < 0 != v13) {
      break;
    }
    int64x2_t v14 = *v12;
    double v12 = (int64x2_t *)((char *)v12 - 24);
    int32x2_t v15 = vmovn_s64(vceqq_s64(v14, *(int64x2_t *)&v4[3 * v6]));
    if ((v15.i32[0] & v15.i32[1] & 1) == 0)
    {
      int v11 = v6 + 1;
      break;
    }
  }
  if (v11 > a4)
  {
    is_mul_ok(v11 + 1, 0xA0uLL);
    operator new[]();
  }
  return 0;
}

void sub_1C467EA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ClipperLib::ClipperBase::AddPaths(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  if (a2[1] == *a2)
  {
    LOBYTE(v11) = 0;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v11 = 0;
    do
    {
      v11 |= (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v4 + v9, a3, a4);
      ++v10;
      uint64_t v4 = *a2;
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return v11 & 1;
}

void *ClipperLib::ClipperBase::Clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[2];
  this[3] = v2;
  this[1] = v2;
  uint64_t v4 = this[6];
  uint64_t v3 = this[7];
  if (v3 == v4)
  {
    uint64_t v4 = this[7];
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      this = *(void **)(v4 + 8 * v5);
      if (this)
      {
        this = (void *)MEMORY[0x1C8783EF0](this, 0x1020C80A8A5F671);
        uint64_t v4 = v1[6];
        uint64_t v3 = v1[7];
      }
      ++v5;
    }
    while (v5 < (v3 - v4) >> 3);
  }
  v1[7] = v4;
  *((unsigned char *)v1 + 40) = 0;
  *((unsigned char *)v1 + 73) = 0;
  return this;
}

void *ClipperLib::ClipperBase::DisposeLocalMinimaList(void *this)
{
  uint64_t v1 = this[2];
  this[3] = v1;
  this[1] = v1;
  return this;
}

void ClipperLib::ClipperBase::Reset(ClipperLib::ClipperBase *this)
{
  unint64_t v2 = *((void *)this + 2);
  unint64_t v3 = *((void *)this + 3);
  *((void *)this + 1) = v2;
  if (v2 != v3)
  {
    std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(v2, v3, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v2) >> 3)), 1);
    uint64_t v4 = (void *)*((void *)this + 14);
    if (v4)
    {
      *((void *)this + 15) = v4;
      operator delete(v4);
    }
    *((void *)this + 14) = 0;
    *((void *)this + 15) = 0;
    *((void *)this + 16) = 0;
    unint64_t v5 = (uint64_t *)*((void *)this + 2);
    if (v5 != *((uint64_t **)this + 3))
    {
      do
      {
        std::priority_queue<long long>::push((uint64_t)this + 112, *v5);
        uint64_t v6 = v5[1];
        if (v6)
        {
          *(_OWORD *)(v6 + 24) = *(_OWORD *)v6;
          *(void *)(v6 + 40) = *(void *)(v6 + 16);
          *(_DWORD *)(v6 + 84) = 1;
          *(_DWORD *)(v6 + 100) = -1;
        }
        uint64_t v7 = v5[2];
        if (v7)
        {
          *(_OWORD *)(v7 + 24) = *(_OWORD *)v7;
          *(void *)(v7 + 40) = *(void *)(v7 + 16);
          *(_DWORD *)(v7 + 84) = 2;
          *(_DWORD *)(v7 + 100) = -1;
        }
        v5 += 3;
      }
      while (v5 != *((uint64_t **)this + 3));
      unint64_t v5 = (uint64_t *)*((void *)this + 2);
    }
    *((void *)this + 13) = 0;
    *((void *)this + 1) = v5;
  }
}

void ClipperLib::ClipperBase::InsertScanbeam(ClipperLib::ClipperBase *this, uint64_t a2)
{
}

uint64_t ClipperLib::ClipperBase::PopLocalMinima(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = *(void **)(a1 + 8);
  if (v3 == *(void **)(a1 + 24) || *v3 != a2) {
    return 0;
  }
  *a3 = v3;
  *(void *)(a1 + 8) += 24;
  return 1;
}

double ClipperLib::ClipperBase::GetBounds@<D0>(ClipperLib::ClipperBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *((void *)this + 3);
  if (v2 == v3)
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    uint64_t v4 = *(uint64_t **)(v2 + 8);
    uint64_t v6 = *v4;
    uint64_t v5 = v4[1];
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    uint64_t v7 = v6;
    uint64_t v8 = v5;
    do
    {
      uint64_t v9 = *(uint64_t **)(v2 + 8);
      unint64_t v10 = *(uint64_t **)(v2 + 16);
      if (v5 <= v9[1]) {
        uint64_t v5 = v9[1];
      }
      *(void *)(a2 + 24) = v5;
      int v11 = v9;
      do
      {
        double v12 = (uint64_t *)v11[15];
        if (v12)
        {
          BOOL v13 = v11;
          do
          {
            uint64_t v14 = *v13;
            BOOL v13 = v12;
            if (v14 < v6)
            {
              *(void *)a2 = v14;
              uint64_t v6 = v14;
            }
            if (v14 > v7)
            {
              *(void *)(a2 + 16) = v14;
              uint64_t v7 = v14;
            }
            double v12 = (uint64_t *)v12[15];
          }
          while (v12);
        }
        else
        {
          BOOL v13 = v11;
        }
        if (*v13 < v6) {
          uint64_t v6 = *v13;
        }
        *(void *)a2 = v6;
        if (v7 <= *v13) {
          uint64_t v7 = *v13;
        }
        *(void *)(a2 + 16) = v7;
        if (v13[6] < v6) {
          uint64_t v6 = v13[6];
        }
        *(void *)a2 = v6;
        if (v7 <= v13[6]) {
          uint64_t v7 = v13[6];
        }
        *(void *)(a2 + 16) = v7;
        uint64_t v15 = v13[7];
        if (v15 < v8) {
          uint64_t v8 = v15;
        }
        *(void *)(a2 + 8) = v8;
        BOOL v16 = v11 == v9;
        int v11 = v10;
      }
      while (v16);
      v2 += 24;
    }
    while (v2 != v3);
  }
  return result;
}

void std::priority_queue<long long>::push(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *(void **)a1;
    uint64_t v8 = ((uint64_t)v5 - *(void *)a1) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      double v12 = (char *)operator new(8 * v11);
    }
    else
    {
      double v12 = 0;
    }
    BOOL v13 = &v12[8 * v8];
    *(void *)BOOL v13 = a2;
    uint64_t v6 = v13 + 8;
    while (v5 != v7)
    {
      uint64_t v14 = *--v5;
      *((void *)v13 - 1) = v14;
      v13 -= 8;
    }
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = &v12[8 * v11];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    uint64_t v6 = v5 + 1;
  }
  *(void *)(a1 + 8) = v6;
  uint64_t v15 = *(void **)a1;
  uint64_t v16 = (uint64_t)v6 - *(void *)a1;
  if (v16 >= 9)
  {
    unint64_t v17 = (((unint64_t)v16 >> 3) - 2) >> 1;
    double v18 = &v15[v17];
    uint64_t v21 = *(v6 - 1);
    uint64_t v20 = v6 - 1;
    uint64_t v19 = v21;
    uint64_t v22 = *v18;
    if (*v18 < v21)
    {
      do
      {
        *uint64_t v20 = v22;
        uint64_t v20 = v18;
        if (!v17) {
          break;
        }
        unint64_t v17 = (v17 - 1) >> 1;
        double v18 = &v15[v17];
        uint64_t v22 = *v18;
      }
      while (*v18 < v19);
      *uint64_t v20 = v19;
    }
  }
}

BOOL ClipperLib::ClipperBase::PopScanbeam(ClipperLib::ClipperBase *this, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 14);
  uint64_t v3 = (uint64_t *)*((void *)this + 15);
  if (v2 != v3)
  {
    *a2 = *v2;
    uint64_t v4 = (char *)v3 - (char *)v2;
    if ((char *)v3 - (char *)v2 >= 9)
    {
      uint64_t v5 = 0;
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *v2;
      int64_t v8 = (unint64_t)((v4 >> 3) - 2) >> 1;
      unint64_t v9 = v2;
      do
      {
        uint64_t v10 = &v9[v5 + 1];
        uint64_t v11 = (2 * v5) | 1;
        uint64_t v5 = 2 * v5 + 2;
        if (v5 >= v6)
        {
          uint64_t v12 = *v10;
          uint64_t v5 = v11;
        }
        else
        {
          uint64_t v12 = *v10;
          uint64_t v13 = v10[1];
          if (*v10 <= v13) {
            uint64_t v12 = v10[1];
          }
          if (*v10 >= v13) {
            uint64_t v5 = v11;
          }
          else {
            ++v10;
          }
        }
        *unint64_t v9 = v12;
        unint64_t v9 = v10;
      }
      while (v5 <= v8);
      uint64_t v14 = v3 - 1;
      if (v10 == v3 - 1)
      {
        uint64_t *v10 = v7;
      }
      else
      {
        uint64_t *v10 = *v14;
        uint64_t *v14 = v7;
        uint64_t v15 = (char *)v10 - (char *)v2 + 8;
        if (v15 >= 9)
        {
          unint64_t v16 = (((unint64_t)v15 >> 3) - 2) >> 1;
          unint64_t v17 = &v2[v16];
          uint64_t v18 = *v17;
          uint64_t v19 = *v10;
          if (*v17 < *v10)
          {
            do
            {
              uint64_t *v10 = v18;
              uint64_t v10 = v17;
              if (!v16) {
                break;
              }
              unint64_t v16 = (v16 - 1) >> 1;
              unint64_t v17 = &v2[v16];
              uint64_t v18 = *v17;
            }
            while (*v17 < v19);
            uint64_t *v10 = v19;
          }
        }
      }
    }
    uint64_t v20 = v3 - 1;
    if (v2 == v3 - 1)
    {
LABEL_40:
      uint64_t v21 = v2;
    }
    else
    {
      uint64_t v21 = v3;
      while (1)
      {
        uint64_t v22 = v21;
        uint64_t v21 = v20;
        uint64_t v23 = *a2;
        if (*a2 != *v2) {
          break;
        }
        uint64_t v24 = (char *)v20 - (char *)v2;
        if ((char *)v21 - (char *)v2 >= 9)
        {
          uint64_t v25 = 0;
          uint64_t v26 = v24 >> 3;
          int64_t v27 = (unint64_t)((v24 >> 3) - 2) >> 1;
          uint64_t v28 = v2;
          do
          {
            uint64_t v29 = &v28[v25 + 1];
            uint64_t v30 = (2 * v25) | 1;
            uint64_t v25 = 2 * v25 + 2;
            if (v25 >= v26)
            {
              uint64_t v31 = *v29;
              uint64_t v25 = v30;
            }
            else
            {
              uint64_t v31 = *v29;
              uint64_t v32 = v29[1];
              if (*v29 <= v32) {
                uint64_t v31 = v29[1];
              }
              if (*v29 >= v32) {
                uint64_t v25 = v30;
              }
              else {
                ++v29;
              }
            }
            uint64_t *v28 = v31;
            uint64_t v28 = v29;
          }
          while (v25 <= v27);
          double v33 = v22 - 2;
          if (v29 == v33)
          {
            *uint64_t v29 = v23;
          }
          else
          {
            *uint64_t v29 = *v33;
            *double v33 = v23;
            uint64_t v34 = (char *)v29 - (char *)v2 + 8;
            if (v34 >= 9)
            {
              unint64_t v35 = (((unint64_t)v34 >> 3) - 2) >> 1;
              double v36 = &v2[v35];
              uint64_t v37 = *v36;
              uint64_t v38 = *v29;
              if (*v36 < *v29)
              {
                do
                {
                  *uint64_t v29 = v37;
                  uint64_t v29 = v36;
                  if (!v35) {
                    break;
                  }
                  unint64_t v35 = (v35 - 1) >> 1;
                  double v36 = &v2[v35];
                  uint64_t v37 = *v36;
                }
                while (*v36 < v38);
                *uint64_t v29 = v38;
              }
            }
          }
        }
        uint64_t v20 = v21 - 1;
        if (v2 == v21 - 1) {
          goto LABEL_40;
        }
      }
    }
    *((void *)this + 15) = v21;
  }
  return v2 != v3;
}

ClipperLib::ClipperBase *ClipperLib::ClipperBase::DisposeAllOutRecs(ClipperLib::ClipperBase *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 11);
  if (v2 != *((void *)this + 10))
  {
    unint64_t v3 = 0;
    do
    {
      this = (ClipperLib::ClipperBase *)ClipperLib::ClipperBase::DisposeOutRec(v1, v3++);
      uint64_t v2 = *((void *)v1 + 10);
    }
    while (v3 < (*((void *)v1 + 11) - v2) >> 3);
  }
  *((void *)v1 + 11) = v2;
  return this;
}

uint64_t ClipperLib::ClipperBase::DisposeOutRec(ClipperLib::ClipperBase *this, uint64_t a2)
{
  uint64_t v4 = *(void *)(*((void *)this + 10) + 8 * a2);
  if (*(void *)(v4 + 24)) {
    ClipperLib::DisposeOutPts((void *)(v4 + 24));
  }
  uint64_t result = MEMORY[0x1C8783F10](v4, 0x1020C401FC46325);
  *(void *)(*((void *)this + 10) + 8 * a2) = 0;
  return result;
}

uint64_t ClipperLib::ClipperBase::DeleteFromAEL(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 128);
  uint64_t v3 = *(void *)(a2 + 136);
  if (*(_OWORD *)(a2 + 128) == 0)
  {
    if (*(void *)(result + 104) != a2) {
      return result;
    }
    goto LABEL_5;
  }
  if (!v3)
  {
LABEL_5:
    uint64_t v4 = (void *)(result + 104);
    goto LABEL_6;
  }
  uint64_t v4 = (void *)(v3 + 128);
LABEL_6:
  void *v4 = v2;
  if (v2) {
    *(void *)(v2 + 136) = v3;
  }
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  return result;
}

void ClipperLib::ClipperBase::CreateOutRec(ClipperLib::ClipperBase *this)
{
}

uint64_t ClipperLib::ClipperBase::SwapPositionsInAEL(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 128);
  uint64_t v3 = *(void *)(a2 + 136);
  if (v4 != v3)
  {
    uint64_t v6 = *(void *)(a3 + 128);
    uint64_t v5 = *(void *)(a3 + 136);
    if (v6 != v5)
    {
      if (v4 == a3)
      {
        if (v6)
        {
          *(void *)(v6 + 136) = a2;
          uint64_t v3 = *(void *)(a2 + 136);
        }
        if (v3) {
          *(void *)(v3 + 128) = a3;
        }
        *(void *)(a3 + 128) = a2;
        *(void *)(a3 + 136) = v3;
        *(void *)(a2 + 128) = v6;
        *(void *)(a2 + 136) = a3;
        uint64_t v3 = *(void *)(a3 + 136);
      }
      else
      {
        if (v6 == a2)
        {
          if (v4)
          {
            *(void *)(v4 + 136) = a3;
            uint64_t v5 = *(void *)(a3 + 136);
          }
          if (v5) {
            *(void *)(v5 + 128) = a2;
          }
          *(void *)(a2 + 128) = a3;
          *(void *)(a2 + 136) = v5;
          uint64_t v3 = a2;
          *(void *)(a3 + 128) = v4;
          *(void *)(a3 + 136) = a2;
        }
        else
        {
          *(void *)(a2 + 128) = v6;
          if (v6)
          {
            *(void *)(v6 + 136) = a2;
            uint64_t v5 = *(void *)(a3 + 136);
          }
          *(void *)(a2 + 136) = v5;
          if (v5) {
            *(void *)(v5 + 128) = a2;
          }
          *(void *)(a3 + 128) = v4;
          if (v4) {
            *(void *)(v4 + 136) = a3;
          }
          *(void *)(a3 + 136) = v3;
          if (v3) {
            *(void *)(v3 + 128) = a3;
          }
        }
        if (!*(void *)(a2 + 136)) {
          goto LABEL_26;
        }
      }
      a2 = a3;
      if (v3) {
        return result;
      }
LABEL_26:
      *(void *)(result + 104) = a2;
    }
  }
  return result;
}

void ClipperLib::ClipperBase::UpdateEdgeIntoAEL(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(*a2 + 120);
  if (!v3)
  {
    exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
    ClipperLib::clipperException::clipperException(exception, "UpdateEdgeIntoAEL: invalid call");
  }
  *(_DWORD *)(v3 + 100) = *(_DWORD *)(v2 + 100);
  uint64_t v6 = v2 + 128;
  uint64_t v5 = *(void *)(v2 + 128);
  uint64_t v4 = *(void *)(v6 + 8);
  uint64_t v7 = (void *)(a1 + 104);
  if (v4) {
    uint64_t v7 = (void *)(v4 + 128);
  }
  *uint64_t v7 = v3;
  if (v5) {
    *(void *)(v5 + 136) = *(void *)(*a2 + 120);
  }
  uint64_t v8 = *(void *)(*a2 + 120);
  *(_OWORD *)(v8 + 84) = *(_OWORD *)(*a2 + 84);
  *a2 = v8;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)v8;
  *(void *)(v8 + 40) = *(void *)(v8 + 16);
  *(void *)(*a2 + 136) = v4;
  *(void *)(*a2 + 128) = v5;
  if (*(double *)(*a2 + 72) != -1.0e40)
  {
    uint64_t v9 = *(void *)(*a2 + 56);
    uint64_t v10 = a1 + 112;
    std::priority_queue<long long>::push(v10, v9);
  }
}

void sub_1C467F5C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL ClipperLib::ClipperBase::LocalMinimaPending(ClipperLib::ClipperBase *this)
{
  return *((void *)this + 1) != *((void *)this + 3);
}

ClipperLib *ClipperLib::Clipper::Clipper(ClipperLib *this, uint64_t *a2, char a3)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[1];
  *((void *)this + 9) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 11) = (char *)this + 88;
  *((void *)this + 12) = (char *)this + 88;
  *((void *)this + 13) = 0;
  *((unsigned char *)this + 120) = 0;
  uint64_t v4 = *(void *)this;
  *((unsigned char *)this + *(void *)(*(void *)this - 24) + 40) = 0;
  *((unsigned char *)this + 132) = a3 & 1;
  *((unsigned char *)this + 134) = (a3 & 2) != 0;
  *((unsigned char *)this + *(void *)(v4 - 24) + 72) = (a3 & 4) != 0;
  *((unsigned char *)this + *(void *)(v4 - 24) + 73) = 0;
  *((void *)this + 17) = 0;
  return this;
}

double ClipperLib::Clipper::Clipper(ClipperLib::Clipper *this, char a2)
{
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 32) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(void *)this = &off_1F1FB03A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *((void *)this + 11) = (char *)this + 88;
  *((void *)this + 12) = (char *)this + 88;
  *((void *)this + 13) = 0;
  *((unsigned char *)this + 120) = 0;
  *((unsigned char *)this + 184) = 0;
  *((unsigned char *)this + 132) = a2 & 1;
  *((unsigned char *)this + 134) = (a2 & 2) != 0;
  *((unsigned char *)this + 216) = (a2 & 4) != 0;
  *((unsigned char *)this + 217) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = off_1F1FB03F0;
  return result;
}

uint64_t ClipperLib::Clipper::ZFillFunction(uint64_t this, void (*a2)(IntPoint *, IntPoint *, IntPoint *, IntPoint *, IntPoint *))
{
  *(void *)(this + 136) = a2;
  return this;
}

uint64_t ClipperLib::Clipper::Execute(uint64_t a1, int a2, uint64_t *a3, int a4)
{
  return ClipperLib::Clipper::Execute(a1, a2, a3, a4, a4);
}

uint64_t ClipperLib::Clipper::Execute(uint64_t a1, int a2, uint64_t *a3, int a4, int a5)
{
  if (*(unsigned char *)(a1 + 120)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 73))
  {
    exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
    ClipperLib::clipperException::clipperException(exception, "Error: PolyTree struct is needed for open path clipping.");
  }
  *(unsigned char *)(a1 + 120) = 1;
  std::vector<std::vector<ClipperLib::IntPoint>>::resize(a3, 0);
  *(_DWORD *)(a1 + 124) = a5;
  *(_DWORD *)(a1 + 128) = a4;
  *(_DWORD *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 133) = 0;
  uint64_t v5 = (**(uint64_t (***)(uint64_t))a1)(a1);
  if (v5) {
    ClipperLib::Clipper::BuildResult((uint64_t *)a1, a3);
  }
  ClipperLib::ClipperBase::DisposeAllOutRecs((ClipperLib::ClipperBase *)(a1 + *(void *)(*(void *)a1 - 24)));
  *(unsigned char *)(a1 + 120) = 0;
  return v5;
}

void sub_1C467F90C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ClipperLib::Clipper::Execute(uint64_t a1, int a2, void **a3, int a4)
{
  return ClipperLib::Clipper::Execute(a1, a2, a3, a4, a4);
}

uint64_t ClipperLib::Clipper::Execute(uint64_t a1, int a2, void **a3, int a4, int a5)
{
  if (*(unsigned char *)(a1 + 120)) {
    return 0;
  }
  *(unsigned char *)(a1 + 120) = 1;
  *(_DWORD *)(a1 + 124) = a5;
  *(_DWORD *)(a1 + 128) = a4;
  *(_DWORD *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 133) = 1;
  uint64_t v5 = (**(uint64_t (***)(void))a1)();
  if (v5) {
    ClipperLib::Clipper::BuildResult2((ClipperLib::Clipper *)a1, a3);
  }
  ClipperLib::ClipperBase::DisposeAllOutRecs((ClipperLib::ClipperBase *)(a1 + *(void *)(*(void *)a1 - 24)));
  *(unsigned char *)(a1 + 120) = 0;
  return v5;
}

void std::vector<std::vector<ClipperLib::IntPoint>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<ClipperLib::IntPoint>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void ClipperLib::Clipper::BuildResult(uint64_t *a1, uint64_t *a2)
{
  std::vector<std::vector<ClipperLib::IntPoint>>::reserve(a2, (*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 88) - *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 80)) >> 3);
  uint64_t v4 = *a1;
  BOOL v5 = (void *)(*a1 - 24);
  uint64_t v6 = *(uint64_t *)((char *)a1 + *v5 + 80);
  if (*(uint64_t *)((char *)a1 + *v5 + 88) != v6)
  {
    unint64_t v7 = 0;
    uint64_t v28 = a2;
    do
    {
      if (*(void *)(*(void *)(v6 + 8 * v7) + 24))
      {
        __p = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v8 = *(void *)(*(void *)(*(uint64_t *)((char *)a1 + *v5 + 80) + 8 * v7) + 24);
        uint64_t v9 = *(void *)(v8 + 40);
        if (v9)
        {
          unint64_t v10 = 0;
          uint64_t v11 = *(void *)(v8 + 40);
          do
          {
            uint64_t v11 = *(void *)(v11 + 32);
            ++v10;
          }
          while (v11 != v9);
          if (v10 != 1)
          {
            std::vector<ClipperLib::IntPoint>::reserve(&__p, v10);
            int v12 = 0;
            uint64_t v13 = v30;
            do
            {
              uint64_t v14 = (long long *)(v9 + 8);
              if (v13 >= v31)
              {
                unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)__p) >> 3);
                unint64_t v17 = v16 + 1;
                if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * ((v31 - (unsigned char *)__p) >> 3) > v17) {
                  unint64_t v17 = 0x5555555555555556 * ((v31 - (unsigned char *)__p) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v31 - (unsigned char *)__p) >> 3) >= 0x555555555555555) {
                  unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v18 = v17;
                }
                if (v18) {
                  uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)&v31, v18);
                }
                else {
                  uint64_t v19 = 0;
                }
                uint64_t v20 = &v19[24 * v16];
                long long v21 = *v14;
                *((void *)v20 + 2) = *(void *)(v9 + 24);
                *(_OWORD *)uint64_t v20 = v21;
                uint64_t v23 = (char *)__p;
                uint64_t v22 = v30;
                uint64_t v24 = v20;
                if (v30 != __p)
                {
                  do
                  {
                    long long v25 = *(_OWORD *)(v22 - 24);
                    *((void *)v24 - 1) = *((void *)v22 - 1);
                    *(_OWORD *)(v24 - 24) = v25;
                    v24 -= 24;
                    v22 -= 24;
                  }
                  while (v22 != v23);
                  uint64_t v22 = (char *)__p;
                }
                uint64_t v13 = v20 + 24;
                __p = v24;
                uint64_t v30 = v20 + 24;
                uint64_t v31 = &v19[24 * v18];
                if (v22) {
                  operator delete(v22);
                }
              }
              else
              {
                long long v15 = *v14;
                *((void *)v13 + 2) = *(void *)(v9 + 24);
                *(_OWORD *)uint64_t v13 = v15;
                v13 += 24;
              }
              uint64_t v30 = v13;
              uint64_t v9 = *(void *)(v9 + 40);
              ++v12;
            }
            while (v10 != v12);
            unint64_t v26 = v28[1];
            if (v26 >= v28[2])
            {
              uint64_t v27 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v28, (uint64_t)&__p);
            }
            else
            {
              std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)v28, (uint64_t)&__p);
              uint64_t v27 = v26 + 24;
            }
            v28[1] = v27;
            if (__p)
            {
              uint64_t v30 = (char *)__p;
              operator delete(__p);
            }
          }
        }
        uint64_t v4 = *a1;
      }
      ++v7;
      BOOL v5 = (void *)(v4 - 24);
      uint64_t v6 = *(uint64_t *)((char *)a1 + *(void *)(v4 - 24) + 80);
    }
    while (v7 < (*(uint64_t *)((char *)a1 + *(void *)(v4 - 24) + 88) - v6) >> 3);
  }
}

void sub_1C467FD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ClipperLib::Clipper::BuildResult2(ClipperLib::Clipper *this, void **a2)
{
  ClipperLib::PolyTree::Clear((ClipperLib::PolyTree *)a2);
  std::vector<ClipperLib::PolyNode *>::reserve(a2 + 10, (uint64_t)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 88)- *(void *)((char *)this + *(void *)(*(void *)this - 24) + 80)) >> 3);
  uint64_t v5 = *(void *)this;
  uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 80);
  uint64_t v7 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 88) - v6;
  if (v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v6 + 8 * v8);
      uint64_t v10 = *(void *)(v9 + 24);
      if (v10)
      {
        int v11 = 0;
        uint64_t v12 = *(void *)(v9 + 24);
        do
        {
          uint64_t v12 = *(void *)(v12 + 32);
          --v11;
        }
        while (v12 != v10);
        unsigned int v13 = *(unsigned char *)(v9 + 5) ? 1 : 2;
        if (~v11 >= v13)
        {
          ClipperLib::Clipper::FixHoleLinkage(v4, v9);
          operator new();
        }
      }
      ++v8;
      uint64_t v6 = *(void *)((char *)this + *(void *)(v5 - 24) + 80);
      uint64_t v7 = *(void *)((char *)this + *(void *)(v5 - 24) + 88) - v6;
    }
    while (v8 < v7 >> 3);
  }
  std::vector<ClipperLib::PolyNode *>::reserve(a2 + 4, v7 >> 3);
  uint64_t v14 = *(void *)this;
  uint64_t v15 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 80);
  if (*(void *)((char *)this + *(void *)(*(void *)this - 24) + 88) != v15)
  {
    unint64_t v16 = 0;
    while (1)
    {
      uint64_t v17 = *(void *)(v15 + 8 * v16);
      unint64_t v18 = *(ClipperLib::PolyNode **)(v17 + 16);
      if (v18) {
        break;
      }
LABEL_19:
      ++v16;
      uint64_t v15 = *(void *)((char *)this + *(void *)(v14 - 24) + 80);
      if (v16 >= (*(void *)((char *)this + *(void *)(v14 - 24) + 88) - v15) >> 3) {
        return;
      }
    }
    if (*(unsigned char *)(v17 + 5))
    {
      *((unsigned char *)v18 + 68) = 1;
    }
    else
    {
      uint64_t v20 = *(void *)(v17 + 8);
      if (v20)
      {
        uint64_t v19 = *(ClipperLib::PolyNode **)(v20 + 16);
        if (v19) {
          goto LABEL_18;
        }
      }
    }
    uint64_t v19 = (ClipperLib::PolyNode *)a2;
LABEL_18:
    ClipperLib::PolyNode::AddChild(v19, v18);
    uint64_t v14 = *(void *)this;
    goto LABEL_19;
  }
}

void ClipperLib::Clipper::FixHoleLinkage(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(a2 + 4);
    if (v3 == *(unsigned __int8 *)(v2 + 4) || !*(void *)(v2 + 24))
    {
      do
      {
        if (*(unsigned __int8 *)(v2 + 4) != v3 && *(void *)(v2 + 24)) {
          break;
        }
        uint64_t v2 = *(void *)(v2 + 8);
      }
      while (v2);
      *(void *)(a2 + 8) = v2;
    }
  }
}

uint64_t ClipperLib::Clipper::ExecuteInternal(ClipperLib::Clipper *this)
{
  (*(void (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 32))((char *)this + *(void *)(*(void *)this - 24));
  uint64_t v26 = (uint64_t)&v26;
  uint64_t v27 = &v26;
  uint64_t v28 = 0;
  std::__list_imp<long long>::clear((void *)this + 11);
  uint64_t v2 = v28;
  if (v28)
  {
    uint64_t v4 = v26;
    int v3 = v27;
    uint64_t v5 = *v27;
    *(void *)(v5 + 8) = *(void *)(v26 + 8);
    **(void **)(v4 + 8) = v5;
    uint64_t v6 = *((void *)this + 11);
    *(void *)(v6 + 8) = v3;
    *int v3 = v6;
    *((void *)this + 11) = v4;
    *(void *)(v4 + 8) = (char *)this + 88;
    *((void *)this + 13) += v2;
    uint64_t v28 = 0;
  }
  std::__list_imp<long long>::clear(&v26);
  *((void *)this + 14) = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if (!ClipperLib::ClipperBase::PopScanbeam((ClipperLib::Clipper *)((char *)this + *(void *)(*(void *)this - 24)), &v26))return 0; {
  ClipperLib::Clipper::InsertLocalMinimaIntoAEL(this, v26);
  }
  while (1)
  {
    uint64_t v7 = ClipperLib::ClipperBase::PopScanbeam((ClipperLib::Clipper *)((char *)this + *(void *)(*(void *)this - 24)), &v25);
    if ((v7 & 1) == 0)
    {
      uint64_t v8 = *(void *)this;
      uint64_t v9 = *(void *)this;
      uint64_t v10 = *(void *)(*(void *)this - 24);
      int v11 = (char *)this + v10;
      if (*(void *)((char *)this + v10 + 8) == *(void *)((char *)this + v10 + 24)) {
        break;
      }
    }
    ClipperLib::Clipper::ProcessHorizontals(this);
    ClipperLib::Clipper::ClearGhostJoins((uint64_t)this);
    uint64_t v12 = v25;
    if (!ClipperLib::Clipper::ProcessIntersections(this, v25))
    {
      uint64_t v13 = 0;
      goto LABEL_32;
    }
    ClipperLib::Clipper::ProcessEdgesAtTopOfScanbeam(this, v12);
    ClipperLib::Clipper::InsertLocalMinimaIntoAEL(this, v12);
  }
  uint64_t v15 = v11 + 80;
  uint64_t v14 = *((void *)v11 + 10);
  if (*((void *)v15 + 1) != v14)
  {
    unint64_t v16 = 0;
    do
    {
      uint64_t v7 = *(void *)(v14 + 8 * v16);
      uint64_t v17 = *(int8x16_t **)(v7 + 24);
      if (v17)
      {
        if (!*(unsigned char *)(v7 + 5))
        {
          int v18 = *((unsigned __int8 *)this + 132) ^ *(unsigned __int8 *)(v7 + 4);
          if (v18 == ClipperLib::Area(v7) > 0.0)
          {
            uint64_t v19 = v17;
            do
            {
              int8x16_t v20 = v19[2];
              v19[2] = vextq_s8(v20, v20, 8uLL);
              uint64_t v19 = (int8x16_t *)v20.i64[0];
            }
            while ((int8x16_t *)v20.i64[0] != v17);
            uint64_t v10 = *(void *)(v9 - 24);
          }
        }
      }
      ++v16;
      uint64_t v14 = *(void *)((char *)this + v10 + 80);
    }
    while (v16 < (*(void *)((char *)this + v10 + 88) - v14) >> 3);
  }
  if (*((void *)this + 1) != *((void *)this + 2))
  {
    uint64_t v7 = ClipperLib::Clipper::JoinCommonEdges((uint64_t)this);
    uint64_t v8 = *(void *)this;
  }
  uint64_t v21 = *(void *)((char *)this + *(void *)(v8 - 24) + 80);
  if (*(void *)((char *)this + *(void *)(v8 - 24) + 88) != v21)
  {
    unint64_t v22 = 0;
    do
    {
      uint64_t v23 = *(void *)(v21 + 8 * v22);
      if (*(void *)(v23 + 24))
      {
        if (*(unsigned char *)(v23 + 5)) {
          uint64_t v7 = (uint64_t)ClipperLib::Clipper::FixupOutPolyline(v7, v23);
        }
        else {
          uint64_t v7 = ClipperLib::Clipper::FixupOutPolygon((uint64_t)this, v23);
        }
      }
      ++v22;
      uint64_t v21 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 80);
    }
    while (v22 < (*(void *)((char *)this + *(void *)(*(void *)this - 24) + 88) - v21) >> 3);
  }
  if (*((unsigned char *)this + 134)) {
    ClipperLib::Clipper::DoSimplePolygons((uint64_t *)this);
  }
  uint64_t v13 = 1;
LABEL_32:
  ClipperLib::Clipper::ClearJoins((uint64_t)this);
  ClipperLib::Clipper::ClearGhostJoins((uint64_t)this);
  return v13;
}

void ClipperLib::Clipper::InsertLocalMinimaIntoAEL(ClipperLib::Clipper *this, uint64_t a2)
{
  uint64_t v2 = (char *)this + 40;
  int v3 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v6 = (void *)*((void *)v3 + 1);
  uint64_t v4 = v3 + 8;
  uint64_t v5 = v6;
  if (v6 != (void *)v4[2])
  {
    uint64_t v9 = (uint64_t *)((char *)this + 112);
    do
    {
      if (*v5 != a2) {
        return;
      }
      void *v4 = v5 + 3;
      uint64_t v10 = v5[1];
      uint64_t v11 = v5[2];
      if (v10)
      {
        ClipperLib::Clipper::InsertEdgeIntoAEL((uint64_t *)this, v5[1], 0);
        if (!v11)
        {
          ClipperLib::Clipper::SetWindingCount((uint64_t)this, v10);
          if (ClipperLib::Clipper::IsContributing((uint64_t)this, (_DWORD *)v10)) {
            ClipperLib::Clipper::AddOutPt(this, v10, (void *)v10);
          }
          std::priority_queue<long long>::push((uint64_t)v9 + *(void *)(*(void *)this - 24), *(void *)(v10 + 56));
          goto LABEL_65;
        }
        ClipperLib::Clipper::InsertEdgeIntoAEL((uint64_t *)this, v11, v10);
        ClipperLib::Clipper::SetWindingCount((uint64_t)this, v10);
        *(void *)(v11 + 92) = *(void *)(v10 + 92);
        if (ClipperLib::Clipper::IsContributing((uint64_t)this, (_DWORD *)v10)) {
          uint64_t v12 = ClipperLib::Clipper::AddLocalMinPoly(this, v10, v11, (void *)v10);
        }
        else {
          uint64_t v12 = 0;
        }
        std::priority_queue<long long>::push((uint64_t)v9 + *(void *)(*(void *)this - 24), *(void *)(v10 + 56));
      }
      else
      {
        ClipperLib::Clipper::InsertEdgeIntoAEL((uint64_t *)this, v5[2], 0);
        ClipperLib::Clipper::SetWindingCount((uint64_t)this, v11);
        uint64_t v12 = 0;
        if (ClipperLib::Clipper::IsContributing((uint64_t)this, (_DWORD *)v11)) {
          uint64_t v12 = ClipperLib::Clipper::AddOutPt(this, v11, (void *)v11);
        }
        if (!v11) {
          goto LABEL_65;
        }
      }
      uint64_t v13 = v11;
      if (*(double *)(v11 + 72) != -1.0e40) {
        goto LABEL_21;
      }
      uint64_t v14 = *v9;
      *(void *)(v11 + 152) = 0;
      if (v14) {
        *(void *)(v14 + 152) = v11;
      }
      *uint64_t v9 = v11;
      *(void *)(v11 + 144) = v14;
      uint64_t v13 = *(void *)(v11 + 120);
      if (v13) {
LABEL_21:
      }
        std::priority_queue<long long>::push((uint64_t)v9 + *(void *)(*(void *)this - 24), *(void *)(v13 + 56));
      if (v10)
      {
        if (v12)
        {
          if (*(double *)(v11 + 72) == -1.0e40)
          {
            uint64_t v16 = *((void *)this + 4);
            uint64_t v15 = *((void *)this + 5);
            if (v15 != v16)
            {
              if (*(_DWORD *)(v11 + 88))
              {
                unint64_t v17 = 0;
                do
                {
                  int v18 = *(void **)(v16 + 8 * v17);
                  uint64_t v19 = *(void *)(*v18 + 8);
                  uint64_t v22 = v18[2];
                  int8x16_t v20 = v18 + 2;
                  uint64_t v21 = v22;
                  uint64_t v23 = *(void *)v11;
                  uint64_t v24 = *(void *)(v11 + 48);
                  BOOL v25 = v19 <= v22;
                  if (v19 >= v22) {
                    uint64_t v26 = v21;
                  }
                  else {
                    uint64_t v26 = v19;
                  }
                  if (v25) {
                    uint64_t v19 = v21;
                  }
                  if (v23 >= v24) {
                    uint64_t v27 = *(void *)(v11 + 48);
                  }
                  else {
                    uint64_t v27 = *(void *)v11;
                  }
                  if (v23 <= v24) {
                    uint64_t v23 = *(void *)(v11 + 48);
                  }
                  if (v26 < v23 && v27 < v19)
                  {
                    long long v53 = *(_OWORD *)v20;
                    uint64_t v54 = v20[2];
                    ClipperLib::Clipper::AddJoin();
                  }
                  ++v17;
                }
                while (v17 < (v15 - v16) >> 3);
              }
            }
          }
        }
        if ((*(_DWORD *)(v10 + 100) & 0x80000000) == 0)
        {
          uint64_t v29 = *(void *)(v10 + 136);
          if (v29)
          {
            if (*(void *)(v29 + 24) == *(void *)v10 && (*(_DWORD *)(v29 + 100) & 0x80000000) == 0)
            {
              long long v51 = *(_OWORD *)v29;
              uint64_t v52 = *(void *)(v29 + 16);
              long long v49 = *(_OWORD *)(v29 + 48);
              uint64_t v50 = *(void *)(v29 + 64);
              long long v47 = *(_OWORD *)(v10 + 24);
              uint64_t v48 = *(void *)(v10 + 40);
              uint64_t v46 = *(void *)(v10 + 64);
              long long v45 = *(_OWORD *)(v10 + 48);
              if (ClipperLib::SlopesEqual(&v51, &v49, &v47, &v45, v2[*(void *)(*(void *)this - 24)])&& *(_DWORD *)(v10 + 88)&& *(_DWORD *)(v29 + 88))
              {
                ClipperLib::Clipper::AddOutPt(this, v29, (void *)v10);
                long long v43 = *(_OWORD *)(v10 + 48);
                uint64_t v44 = *(void *)(v10 + 64);
                ClipperLib::Clipper::AddJoin();
              }
            }
          }
        }
        uint64_t v30 = *(void *)(v10 + 128);
        if (v30 != v11)
        {
          if ((*(_DWORD *)(v11 + 100) & 0x80000000) == 0)
          {
            uint64_t v31 = *(void *)(v11 + 136);
            if ((*(_DWORD *)(v31 + 100) & 0x80000000) == 0)
            {
              long long v41 = *(_OWORD *)(v31 + 24);
              uint64_t v42 = *(void *)(v31 + 40);
              long long v39 = *(_OWORD *)(v31 + 48);
              uint64_t v40 = *(void *)(v31 + 64);
              long long v37 = *(_OWORD *)(v11 + 24);
              uint64_t v38 = *(void *)(v11 + 40);
              uint64_t v36 = *(void *)(v11 + 64);
              long long v35 = *(_OWORD *)(v11 + 48);
              if (ClipperLib::SlopesEqual(&v41, &v39, &v37, &v35, v2[*(void *)(*(void *)this - 24)])&& *(_DWORD *)(v11 + 88)&& *(_DWORD *)(v31 + 88))
              {
                ClipperLib::Clipper::AddOutPt(this, v31, (void *)v11);
                ClipperLib::Clipper::AddJoin();
              }
            }
          }
          if (v30 && v30 != v11)
          {
            uint64_t v32 = (void *)(v10 + 24);
            do
            {
              ClipperLib::Clipper::IntersectEdges((uint64_t)this, (_DWORD *)v11, (_DWORD *)v30, v32);
              uint64_t v30 = *(void *)(v30 + 128);
            }
            while (v30 != v11);
          }
        }
      }
LABEL_65:
      double v33 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v34 = (void *)*((void *)v33 + 1);
      uint64_t v4 = v33 + 8;
      uint64_t v5 = v34;
    }
    while (v34 != (void *)v4[2]);
  }
}

void ClipperLib::Clipper::ProcessHorizontals(ClipperLib::Clipper *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 112);
  for (uint64_t i = (uint64_t *)*((void *)this + 14); i; uint64_t i = (uint64_t *)*((void *)this + 14))
  {
    uint64_t v4 = i[18];
    uint64_t v5 = i[19];
    if (*((_OWORD *)i + 9) == 0)
    {
      uint64_t *v2 = 0;
    }
    else
    {
      uint64_t v6 = (uint64_t *)(v5 + 144);
      if (!v5) {
        uint64_t v6 = v2;
      }
      uint64_t *v6 = v4;
      if (v4) {
        *(void *)(v4 + 152) = v5;
      }
    }
    i[18] = 0;
    i[19] = 0;
    ClipperLib::Clipper::ProcessHorizontal((uint64_t *)this, i);
  }
}

uint64_t ClipperLib::Clipper::ClearGhostJoins(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 32);
  uint64_t v2 = *(void *)(this + 40);
  if (v2 != v1)
  {
    uint64_t v3 = this;
    unint64_t v4 = 0;
    do
    {
      this = *(void *)(v1 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x1C8783F10](this, 0x1020C40E349F4B1);
        uint64_t v1 = *(void *)(v3 + 32);
        uint64_t v2 = *(void *)(v3 + 40);
      }
      ++v4;
    }
    while (v4 < (v2 - v1) >> 3);
    if (v2 != v1) {
      *(void *)(v3 + 40) = v1;
    }
  }
  return this;
}

BOOL ClipperLib::Clipper::ProcessIntersections(ClipperLib::Clipper *this, uint64_t a2)
{
  if (!*(void *)((char *)this + *(void *)(*(void *)this - 24) + 104)) {
    return 1;
  }
  ClipperLib::Clipper::BuildIntersectList(this, a2);
  uint64_t v3 = (uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3;
  if (!v3) {
    return 1;
  }
  if (v3 == 1 || (BOOL result = ClipperLib::Clipper::FixupIntersectionOrder(this)))
  {
    ClipperLib::Clipper::ProcessIntersectList(this);
    *((void *)this + 14) = 0;
    return 1;
  }
  return result;
}

void sub_1C4680B1C(void *a1)
{
  __cxa_begin_catch(a1);
  *(void *)(v1 + 112) = 0;
  ClipperLib::Clipper::DisposeIntersectNodes(v1);
  exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
  ClipperLib::clipperException::clipperException(exception, "ProcessIntersections error");
}

void sub_1C4680B6C(_Unwind_Exception *a1)
{
}

void ClipperLib::Clipper::ProcessEdgesAtTopOfScanbeam(ClipperLib::Clipper *this, uint64_t a2)
{
  unint64_t v4 = (void *)((char *)this + 104);
  uint64_t v5 = *(void **)((char *)this + *(void *)(*(void *)this - 24) + 104);
  long long v51 = v5;
  if (v5)
  {
    uint64_t v6 = (uint64_t *)((char *)this + 88);
    do
    {
      if (v5[7] == a2)
      {
        uint64_t v7 = v5[15];
        if (v7)
        {
          if (*(double *)(v7 + 72) == -1.0e40)
          {
            ClipperLib::ClipperBase::UpdateEdgeIntoAEL((uint64_t)this + *(void *)(*(void *)this - 24), (uint64_t *)&v51);
            uint64_t v5 = v51;
            if ((*((_DWORD *)v51 + 25) & 0x80000000) == 0) {
              ClipperLib::Clipper::AddOutPt(this, (uint64_t)v51, v51);
            }
            uint64_t v8 = *((void *)this + 14);
            v5[19] = 0;
            if (v8) {
              *(void *)(v8 + 152) = v5;
            }
            *((void *)this + 14) = v5;
            v5[18] = v8;
            goto LABEL_23;
          }
        }
        else
        {
          ClipperLib::GetMaximaPairEx(v5);
          if (!v12 || *(double *)(v12 + 72) != -1.0e40)
          {
            if (*((unsigned char *)this + 134))
            {
              uint64_t v13 = operator new(0x18uLL);
              uint64_t v14 = v5[6];
              v13[1] = v6;
              v13[2] = v14;
              uint64_t v15 = *v6;
              *uint64_t v13 = *v6;
              *(void *)(v15 + 8) = v13;
              uint64_t *v6 = (uint64_t)v13;
              ++*v4;
            }
            uint64_t v16 = v5[17];
            ClipperLib::Clipper::DoMaxima((uint64_t *)this, (uint64_t)v5);
            if (v16) {
              unint64_t v17 = (void **)(v16 + 128);
            }
            else {
              unint64_t v17 = (void **)((char *)v4 + *(void *)(*(void *)this - 24));
            }
            goto LABEL_34;
          }
        }
        uint64_t v11 = v5[6];
      }
      else
      {
        double v9 = *((double *)v5 + 9) * (double)(a2 - v5[1]);
        if (v9 >= 0.0) {
          double v10 = 0.5;
        }
        else {
          double v10 = -0.5;
        }
        uint64_t v11 = *v5 + (uint64_t)(v9 + v10);
      }
      v5[3] = v11;
      v5[4] = a2;
LABEL_23:
      if (*((unsigned char *)this + 134))
      {
        if ((*((_DWORD *)v5 + 25) & 0x80000000) == 0)
        {
          if (*((_DWORD *)v5 + 22))
          {
            uint64_t v18 = v5[17];
            if (v18)
            {
              if ((*(_DWORD *)(v18 + 100) & 0x80000000) == 0 && *(void *)(v18 + 24) == v5[3] && *(_DWORD *)(v18 + 88))
              {
                long long v49 = *(_OWORD *)(v5 + 3);
                uint64_t v50 = v5[5];
                uint64_t v19 = (void (*)(uint64_t, uint64_t, void *, void *, long long *))*((void *)this + 17);
                if (v19) {
                  v19(v18, v18 + 48, v5, v5 + 6, &v49);
                }
                ClipperLib::Clipper::AddOutPt(this, v18, &v49);
                ClipperLib::Clipper::AddOutPt(this, (uint64_t)v5, &v49);
                long long v47 = v49;
                uint64_t v48 = v50;
                ClipperLib::Clipper::AddJoin();
              }
            }
          }
        }
      }
      unint64_t v17 = (void **)(v5 + 16);
LABEL_34:
      long long v51 = *v17;
      uint64_t v5 = v51;
    }
    while (v51);
  }
  std::list<long long>::__sort<std::__less<void,void>>(*((uint64_t **)this + 12), (uint64_t *)this + 11, *((void *)this + 13));
  ClipperLib::Clipper::ProcessHorizontals(this);
  std::__list_imp<long long>::clear((void *)this + 11);
  int8x16_t v20 = *(void **)((char *)this + *(void *)(*(void *)this - 24) + 104);
  long long v51 = v20;
  if (v20)
  {
    uint64_t v21 = (char *)this + 40;
    do
    {
      if (v20[7] == a2 && v20[15])
      {
        if ((*((_DWORD *)v20 + 25) & 0x80000000) != 0) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = ClipperLib::Clipper::AddOutPt(this, (uint64_t)v20, v20 + 6);
        }
        ClipperLib::ClipperBase::UpdateEdgeIntoAEL((uint64_t)this + *(void *)(*(void *)this - 24), (uint64_t *)&v51);
        int8x16_t v20 = v51;
        uint64_t v23 = v51[16];
        uint64_t v24 = v51[17];
        if (v24 && *(void *)(v24 + 24) == *v51)
        {
          uint64_t v25 = *(void *)(v24 + 32);
          if (v25 == v51[1] && v22 != 0 && (*(_DWORD *)(v24 + 100) & 0x80000000) == 0 && v25 > *(void *)(v24 + 56))
          {
            long long v45 = *(_OWORD *)(v51 + 3);
            uint64_t v46 = v51[5];
            long long v43 = *((_OWORD *)v51 + 3);
            uint64_t v44 = v51[8];
            long long v41 = *(_OWORD *)(v24 + 24);
            uint64_t v42 = *(void *)(v24 + 40);
            uint64_t v40 = *(void *)(v24 + 64);
            long long v39 = *(_OWORD *)(v24 + 48);
            if (ClipperLib::SlopesEqual(&v45, &v43, &v41, &v39, v21[*(void *)(*(void *)this - 24)])&& *((_DWORD *)v20 + 22)&& *(_DWORD *)(v24 + 88))
            {
              ClipperLib::Clipper::AddOutPt(this, v24, v20);
              long long v37 = *((_OWORD *)v20 + 3);
              uint64_t v38 = v20[8];
              goto LABEL_68;
            }
          }
        }
        if (v23 && *(void *)(v23 + 24) == *v20)
        {
          uint64_t v27 = *(void *)(v23 + 32);
          if (v27 == v20[1] && v22 != 0 && (*(_DWORD *)(v23 + 100) & 0x80000000) == 0 && v27 > *(void *)(v23 + 56))
          {
            long long v35 = *(_OWORD *)(v20 + 3);
            uint64_t v36 = v20[5];
            long long v33 = *((_OWORD *)v20 + 3);
            uint64_t v34 = v20[8];
            long long v31 = *(_OWORD *)(v23 + 24);
            uint64_t v32 = *(void *)(v23 + 40);
            uint64_t v30 = *(void *)(v23 + 64);
            long long v29 = *(_OWORD *)(v23 + 48);
            if (ClipperLib::SlopesEqual(&v35, &v33, &v31, &v29, v21[*(void *)(*(void *)this - 24)])&& *((_DWORD *)v20 + 22)&& *(_DWORD *)(v23 + 88))
            {
              ClipperLib::Clipper::AddOutPt(this, v23, v20);
LABEL_68:
              ClipperLib::Clipper::AddJoin();
            }
          }
        }
      }
      int8x16_t v20 = (void *)v20[16];
      long long v51 = v20;
    }
    while (v20);
  }
}

uint64_t ClipperLib::Clipper::JoinCommonEdges(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  if (*(void *)(this + 16) != v1)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    uint64_t v4 = this + 80;
    do
    {
      uint64_t v5 = *(int ***)(v1 + 8 * v3);
      uint64_t v6 = *(void *)(v4 + *(void *)(*(void *)v2 - 24));
      uint64_t v7 = *(int **)(v6 + 8 * **v5);
      do
      {
        uint64_t v8 = (uint64_t)v7;
        uint64_t v7 = *(int **)(v6 + 8 * *v7);
      }
      while ((int *)v8 != v7);
      double v9 = *(int **)(v6 + 8 * *v5[1]);
      do
      {
        uint64_t v10 = (uint64_t)v9;
        double v9 = *(int **)(v6 + 8 * *v9);
      }
      while ((int *)v10 != v9);
      if (*(void *)(v8 + 24) && *(void *)(v10 + 24) && !*(unsigned char *)(v8 + 5) && !*(unsigned char *)(v10 + 5))
      {
        if (v8 == v10)
        {
          this = ClipperLib::Clipper::JoinPoints((uint64_t *)v2, v5, v8, v8);
          if (this)
          {
            *(void *)(v8 + 24) = *v5;
            *(void *)(v8 + 32) = 0;
            ClipperLib::ClipperBase::CreateOutRec((ClipperLib::ClipperBase *)(v2 + *(void *)(*(void *)v2 - 24)));
          }
        }
        else
        {
          uint64_t v11 = v8;
          do
            uint64_t v11 = *(void *)(v11 + 8);
          while (v11 != v10 && v11 != 0);
          LowermostReCGFloat c = v10;
          if (v11 != v10)
          {
            uint64_t v14 = v10;
            do
              uint64_t v14 = *(void *)(v14 + 8);
            while (v14 != v8 && v14 != 0);
            LowermostReCGFloat c = v8;
            if (v14 != v8) {
              LowermostReCGFloat c = ClipperLib::GetLowermostRec(v8, v10);
            }
          }
          this = ClipperLib::Clipper::JoinPoints((uint64_t *)v2, v5, v8, v10);
          if (this)
          {
            *(void *)(v10 + 24) = 0;
            *(void *)(v10 + 32) = 0;
            *(_DWORD *)uint64_t v10 = *(_DWORD *)v8;
            *(unsigned char *)(v8 + 4) = *(unsigned char *)(LowermostRec + 4);
            if (LowermostRec == v10) {
              *(void *)(v8 + 8) = *(void *)(v10 + 8);
            }
            *(void *)(v10 + 8) = v8;
            if (*(unsigned char *)(v2 + 133)) {
              this = (uint64_t)ClipperLib::Clipper::FixupFirstLefts3((uint64_t *)v2, v10, v8);
            }
          }
        }
      }
      ++v3;
      uint64_t v1 = *(void *)(v2 + 8);
    }
    while (v3 < (*(void *)(v2 + 16) - v1) >> 3);
  }
  return this;
}

void *ClipperLib::Clipper::FixupOutPolyline(uint64_t a1, uint64_t a2)
{
  BOOL result = *(void **)(a2 + 24);
  uint64_t v4 = (void *)result[5];
  if (result == v4)
  {
    uint64_t v8 = *(void **)(a2 + 24);
LABEL_14:
    BOOL result = ClipperLib::DisposeOutPts(&v8);
    *(void *)(a2 + 24) = 0;
    return result;
  }
  do
  {
    BOOL result = (void *)result[4];
    uint64_t v5 = (void *)result[5];
    if (result[1] == v5[1] && result[2] == v5[2])
    {
      if (result == v4) {
        uint64_t v4 = (void *)result[5];
      }
      v5[4] = result[4];
      *(void *)(result[4] + 40) = v5;
      MEMORY[0x1C8783F10]();
      BOOL result = v5;
    }
  }
  while (result != v4);
  uint64_t v7 = (void *)result[5];
  uint64_t v8 = result;
  if (result == v7) {
    goto LABEL_14;
  }
  return result;
}

uint64_t ClipperLib::Clipper::FixupOutPolygon(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  uint64_t v4 = *(void **)(a2 + 24);
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 72)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = *(unsigned char *)(a1 + 134) != 0;
  }
  BOOL v20 = v5;
  uint64_t v6 = v4 + 5;
  uint64_t v7 = (void *)v4[5];
  if (v7 != v4)
  {
    uint64_t v8 = 0;
    uint64_t v21 = a1 + 40;
    while (1)
    {
      double v9 = (void *)v4[4];
      if (v7 == v9) {
        break;
      }
      uint64_t v10 = v4[1];
      uint64_t v11 = v4[2];
      uint64_t v12 = (long long *)(v4 + 1);
      uint64_t v13 = (long long *)(v9 + 1);
      if (v10 == v9[1] && v11 == v9[2]) {
        goto LABEL_22;
      }
      uint64_t v15 = (long long *)(v7 + 1);
      if (v10 == v7[1] && v11 == v7[2]) {
        goto LABEL_22;
      }
      uint64_t v33 = v7[3];
      long long v32 = *v15;
      long long v17 = *v12;
      uint64_t v31 = v4[3];
      long long v30 = v17;
      long long v28 = *v13;
      uint64_t v29 = v9[3];
      uint64_t result = ClipperLib::SlopesEqual(&v32, (uint64_t *)&v30, &v28, *(unsigned __int8 *)(v21 + *(void *)(*(void *)a1 - 24)));
      if (!result) {
        goto LABEL_18;
      }
      if (!v20) {
        goto LABEL_22;
      }
      uint64_t v27 = v7[3];
      long long v26 = *v15;
      long long v19 = *v12;
      uint64_t v25 = v4[3];
      long long v24 = v19;
      long long v22 = *v13;
      uint64_t v23 = v9[3];
      uint64_t result = ClipperLib::Pt2IsBetweenPt1AndPt3((uint64_t *)&v26, (uint64_t *)&v24, (uint64_t *)&v22);
      if ((result & 1) == 0)
      {
LABEL_22:
        v7[4] = v9;
        *(void *)(v4[4] + 40) = v7;
        double v9 = (void *)*v6;
        MEMORY[0x1C8783F10](v4, 0x1020C404ACFEA97);
        uint64_t v8 = 0;
      }
      else
      {
LABEL_18:
        if (v4 == v8) {
          goto LABEL_27;
        }
        if (!v8) {
          uint64_t v8 = v4;
        }
      }
      uint64_t v6 = v9 + 5;
      uint64_t v7 = (void *)v9[5];
      uint64_t v4 = v9;
      if (v7 == v9) {
        goto LABEL_26;
      }
    }
  }
  double v9 = v4;
LABEL_26:
  uint64_t v34 = v9;
  uint64_t result = (uint64_t)ClipperLib::DisposeOutPts(&v34);
  uint64_t v8 = 0;
LABEL_27:
  *(void *)(a2 + 24) = v8;
  return result;
}

uint64_t *ClipperLib::Clipper::DoSimplePolygons(uint64_t *this)
{
  uint64_t v1 = *this;
  uint64_t v2 = *(uint64_t *)((char *)this + *(void *)(*this - 24) + 80);
  if (*(uint64_t *)((char *)this + *(void *)(*this - 24) + 88) != v2)
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(v2 + 8 * v3);
      BOOL v5 = *(void **)(v4 + 24);
      if (v5 && !*(unsigned char *)(v4 + 5))
      {
        uint64_t v6 = *(void **)(v4 + 24);
        do
        {
          if ((void *)v6[4] == v5) {
            break;
          }
          BOOL v5 = (void *)v6[4];
          do
          {
            BOOL v7 = v6[1] == v5[1] && v6[2] == v5[2];
            if (v7 && (void *)v5[4] != v6)
            {
              uint64_t v8 = (void *)v5[5];
              if (v8 != v6)
              {
                uint64_t v9 = v6[5];
                v6[5] = v8;
                v8[4] = v6;
                v5[5] = v9;
                *(void *)(v9 + 32) = v5;
                *(void *)(v4 + 24) = v6;
                ClipperLib::ClipperBase::CreateOutRec((ClipperLib::ClipperBase *)((char *)this + *(void *)(*this - 24)));
              }
            }
            BOOL v5 = (void *)v5[4];
          }
          while (v5 != *(void **)(v4 + 24));
          uint64_t v6 = (void *)v6[4];
        }
        while (v6 != v5);
        uint64_t v1 = *this;
      }
      ++v3;
      uint64_t v2 = *(uint64_t *)((char *)this + *(void *)(v1 - 24) + 80);
    }
    while (v3 < (*(uint64_t *)((char *)this + *(void *)(v1 - 24) + 88) - v2) >> 3);
  }
  return this;
}

uint64_t ClipperLib::Clipper::ClearJoins(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  uint64_t v2 = *(void *)(this + 16);
  if (v2 != v1)
  {
    uint64_t v3 = this;
    unint64_t v4 = 0;
    do
    {
      this = *(void *)(v1 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x1C8783F10](this, 0x1020C40E349F4B1);
        uint64_t v1 = *(void *)(v3 + 8);
        uint64_t v2 = *(void *)(v3 + 16);
      }
      ++v4;
    }
    while (v4 < (v2 - v1) >> 3);
    if (v2 != v1) {
      *(void *)(v3 + 16) = v1;
    }
  }
  return this;
}

uint64_t ClipperLib::Clipper::SetWindingCount(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 136);
  int v3 = *(_DWORD *)(a2 + 80);
  if (v2)
  {
    while (1)
    {
      if (*(_DWORD *)(v2 + 80) == v3)
      {
        int v4 = *(_DWORD *)(v2 + 88);
        if (v4) {
          break;
        }
      }
      uint64_t v2 = *(void *)(v2 + 136);
      if (!v2) {
        goto LABEL_5;
      }
    }
    unsigned int v9 = *(_DWORD *)(a2 + 88);
    if (v9)
    {
      uint64_t v10 = 124;
      if (!v3) {
        uint64_t v10 = 128;
      }
      if (!*(_DWORD *)(result + v10)) {
        goto LABEL_45;
      }
      int v11 = *(_DWORD *)(v2 + 92);
      if (((v11 * v4) & 0x80000000) == 0)
      {
        if (((v9 * v4) & 0x80000000) == 0) {
          int v12 = *(_DWORD *)(a2 + 88);
        }
        else {
          int v12 = 0;
        }
        unsigned int v9 = v11 + v12;
        goto LABEL_45;
      }
LABEL_28:
      if (v11 >= 0) {
        unsigned int v14 = v11;
      }
      else {
        unsigned int v14 = -v11;
      }
      if (v9 <= 1) {
        int v15 = 1;
      }
      else {
        int v15 = *(_DWORD *)(a2 + 88);
      }
      if (((v9 * v4) & 0x80000000) == 0) {
        int v16 = *(_DWORD *)(a2 + 88);
      }
      else {
        int v16 = 0;
      }
      unsigned int v17 = v11 + v16;
      if (v14 >= 2) {
        unsigned int v9 = v17;
      }
      else {
        unsigned int v9 = v15;
      }
      goto LABEL_45;
    }
    if (*(_DWORD *)(result + 80) == 1)
    {
      uint64_t v13 = 124;
      if (!v3) {
        uint64_t v13 = 128;
      }
      if (!*(_DWORD *)(result + v13))
      {
        uint64_t v18 = *(void *)(v2 + 136);
        for (i = 1; v18; uint64_t v18 = *(void *)(v18 + 136))
        {
          if (*(_DWORD *)(v18 + 80) == v3) {
            i ^= *(_DWORD *)(v18 + 88) != 0;
          }
        }
        unsigned int v9 = (i & 1) == 0;
        goto LABEL_45;
      }
      int v11 = *(_DWORD *)(v2 + 92);
      if (v11 * v4 < 0) {
        goto LABEL_28;
      }
      unsigned int v9 = ((v11 >> 31) | 1) + v11;
    }
    else
    {
      unsigned int v9 = 1;
    }
LABEL_45:
    int v7 = *(_DWORD *)(v2 + 96);
    *(_DWORD *)(a2 + 92) = v9;
    *(_DWORD *)(a2 + 96) = v7;
    uint64_t v8 = (uint64_t *)(v2 + 128);
    goto LABEL_46;
  }
LABEL_5:
  int v5 = *(_DWORD *)(a2 + 88);
  if (!v5)
  {
    uint64_t v6 = 124;
    if (!v3) {
      uint64_t v6 = 128;
    }
    if (*(_DWORD *)(result + v6) == 3) {
      int v5 = -1;
    }
    else {
      int v5 = 1;
    }
  }
  int v7 = 0;
  *(_DWORD *)(a2 + 92) = v5;
  *(_DWORD *)(a2 + 96) = 0;
  uint64_t v8 = (uint64_t *)(result + *(void *)(*(void *)result - 24) + 104);
LABEL_46:
  uint64_t v20 = *v8;
  BOOL v21 = v3 == 0;
  uint64_t v22 = 128;
  if (v21) {
    uint64_t v22 = 124;
  }
  if (*(_DWORD *)(result + v22))
  {
    if (v20 != a2)
    {
      do
      {
        v7 += *(_DWORD *)(v20 + 88);
        uint64_t v20 = *(void *)(v20 + 128);
      }
      while (v20 != a2);
      *(_DWORD *)(a2 + 96) = v7;
    }
  }
  else
  {
    while (v20 != a2)
    {
      if (*(_DWORD *)(v20 + 88))
      {
        int v7 = v7 == 0;
        *(_DWORD *)(a2 + 96) = v7;
      }
      uint64_t v20 = *(void *)(v20 + 128);
    }
  }
  return result;
}

BOOL ClipperLib::Clipper::IsEvenOddFillType(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 124;
  if (!*(_DWORD *)(a2 + 80)) {
    uint64_t v2 = 128;
  }
  return *(_DWORD *)(a1 + v2) == 0;
}

BOOL ClipperLib::Clipper::IsEvenOddAltFillType(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 128;
  if (!*(_DWORD *)(a2 + 80)) {
    uint64_t v2 = 124;
  }
  return *(_DWORD *)(a1 + v2) == 0;
}

uint64_t ClipperLib::Clipper::IsContributing(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[20];
  uint64_t v3 = 124;
  if (v2) {
    uint64_t v4 = 124;
  }
  else {
    uint64_t v4 = 128;
  }
  if (v2) {
    uint64_t v3 = 128;
  }
  unsigned int v5 = *(_DWORD *)(a1 + v3);
  int v6 = *(_DWORD *)(a1 + v4);
  switch(v6)
  {
    case 2:
LABEL_10:
      int v7 = a2[23];
      goto LABEL_13;
    case 1:
      int v7 = a2[23];
      if (v7 < 0) {
        int v7 = -v7;
      }
LABEL_13:
      if (v7 == 1) {
        goto LABEL_14;
      }
      return 0;
    case 0:
      if (a2[22]) {
        goto LABEL_14;
      }
      goto LABEL_10;
  }
  if (a2[23] != -1) {
    return 0;
  }
LABEL_14:
  switch(*(_DWORD *)(a1 + 80))
  {
    case 0:
      BOOL v8 = v5 == 2;
      if (v5 >= 2) {
        goto LABEL_21;
      }
      return a2[24] != 0;
    case 1:
      goto LABEL_26;
    case 2:
      BOOL v8 = v5 == 2;
      if (v2)
      {
        if (v5 < 2) {
          return a2[24] != 0;
        }
LABEL_21:
        if (v8) {
          return a2[24] > 0;
        }
        unsigned int v10 = a2[24];
      }
      else
      {
        if (v5 < 2) {
          return a2[24] == 0;
        }
LABEL_29:
        if (v8) {
          return a2[24] < 1;
        }
        unsigned int v10 = ~a2[24];
      }
      uint64_t result = v10 >> 31;
      break;
    case 3:
      if (a2[22]) {
        return 1;
      }
LABEL_26:
      BOOL v8 = v5 == 2;
      if (v5 < 2) {
        return a2[24] == 0;
      }
      goto LABEL_29;
    default:
      return 1;
  }
  return result;
}

uint64_t ClipperLib::Clipper::AddLocalMinPoly(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = a2;
  double v8 = *(double *)(a3 + 72);
  if (v8 != -1.0e40 && *(double *)(a2 + 72) <= v8)
  {
    uint64_t v9 = ClipperLib::Clipper::AddOutPt(a1, a3, a4);
    *(_DWORD *)(v6 + 100) = *(_DWORD *)(a3 + 100);
    *(_DWORD *)(v6 + 84) = 2;
    *(_DWORD *)(a3 + 84) = 1;
    uint64_t v10 = *(void *)(a3 + 136);
    uint64_t v11 = v6;
    _ZF = v10 == v6;
    uint64_t v6 = a3;
    if (!_ZF) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v9 = ClipperLib::Clipper::AddOutPt(a1, a2, a4);
  *(_DWORD *)(a3 + 100) = *(_DWORD *)(v6 + 100);
  *(_DWORD *)(v6 + 84) = 1;
  *(_DWORD *)(a3 + 84) = 2;
  uint64_t v10 = *(void *)(v6 + 136);
  uint64_t v11 = a3;
  if (v10 == a3) {
LABEL_4:
  }
    uint64_t v10 = *(void *)(v11 + 136);
LABEL_5:
  if (v10 && (*(_DWORD *)(v10 + 100) & 0x80000000) == 0)
  {
    uint64_t v12 = a4[1];
    if (*(void *)(v10 + 56) == v12)
    {
      uint64_t v13 = *(void *)(v10 + 48);
    }
    else
    {
      double v14 = *(double *)(v10 + 72) * (double)(v12 - *(void *)(v10 + 8));
      double v15 = 0.5;
      if (v14 < 0.0) {
        double v15 = -0.5;
      }
      uint64_t v13 = *(void *)v10 + (uint64_t)(v14 + v15);
    }
    if (*(void *)(v6 + 56) == v12)
    {
      uint64_t v16 = *(void *)(v6 + 48);
    }
    else
    {
      double v17 = *(double *)(v6 + 72) * (double)(v12 - *(void *)(v6 + 8));
      double v18 = 0.5;
      if (v17 < 0.0) {
        double v18 = -0.5;
      }
      uint64_t v16 = *(void *)v6 + (uint64_t)(v17 + v18);
    }
    if (v13 == v16)
    {
      if (*(_DWORD *)(v6 + 88))
      {
        if (*(_DWORD *)(v10 + 88))
        {
          v30[0] = v13;
          v30[1] = v12;
          __asm { FMOV            V0.2S, #-1.0 }
          v30[2] = _D0;
          long long v28 = *(_OWORD *)(v10 + 48);
          uint64_t v29 = *(void *)(v10 + 64);
          v27[0] = v13;
          v27[1] = v12;
          v27[2] = _D0;
          long long v25 = *(_OWORD *)(v6 + 48);
          uint64_t v26 = *(void *)(v6 + 64);
          if (ClipperLib::SlopesEqual(v30, &v28, v27, &v25, *((unsigned __int8 *)a1 + *(void *)(*a1 - 24) + 40)))
          {
            ClipperLib::Clipper::AddOutPt(a1, v10, a4);
            ClipperLib::Clipper::AddJoin();
          }
        }
      }
    }
  }
  return v9;
}

uint64_t ClipperLib::Clipper::AddOutPt(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 100);
  uint64_t v4 = (ClipperLib::ClipperBase *)((char *)a1 + *(void *)(*a1 - 24));
  if ((v3 & 0x80000000) != 0) {
    ClipperLib::ClipperBase::CreateOutRec(v4);
  }
  uint64_t v5 = *(void *)(*((void *)v4 + 10) + 8 * v3);
  uint64_t v6 = *(void **)(v5 + 24);
  if (*(_DWORD *)(a2 + 84) == 1)
  {
    if (*a3 != v6[1] || a3[1] != v6[2]) {
      goto LABEL_14;
    }
    return *(void *)(v5 + 24);
  }
  else
  {
    uint64_t v8 = v6[5];
    if (*a3 != *(void *)(v8 + 8) || a3[1] != *(void *)(v8 + 16)) {
LABEL_14:
    }
      operator new();
  }
  return v8;
}

void ClipperLib::Clipper::AddJoin()
{
}

uint64_t ClipperLib::Clipper::AddLocalMaxPoly(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = ClipperLib::Clipper::AddOutPt(a1, a2, a4);
  if (!*(_DWORD *)(a3 + 88)) {
    uint64_t result = ClipperLib::Clipper::AddOutPt(a1, a3, a4);
  }
  int v9 = *(_DWORD *)(a2 + 100);
  int v10 = *(_DWORD *)(a3 + 100);
  if (v9 == v10)
  {
    *(_DWORD *)(a2 + 100) = -1;
    *(_DWORD *)(a3 + 100) = -1;
  }
  else
  {
    if (v9 < v10)
    {
      uint64_t v11 = a2;
      uint64_t v12 = a3;
    }
    else
    {
      uint64_t v11 = a3;
      uint64_t v12 = a2;
    }
    return ClipperLib::Clipper::AppendPolygon(a1, v11, v12);
  }
  return result;
}

uint64_t ClipperLib::Clipper::AppendPolygon(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 80);
  uint64_t v7 = *(void *)(v6 + 8 * *(int *)(a2 + 100));
  uint64_t v8 = *(void *)(v6 + 8 * *(int *)(a3 + 100));
  uint64_t v9 = v7;
  do
    uint64_t v9 = *(void *)(v9 + 8);
  while (v9 != v8 && v9 != 0);
  uint64_t result = v8;
  if (v9 != v8)
  {
    uint64_t v12 = v8;
    do
      uint64_t v12 = *(void *)(v12 + 8);
    while (v12 != v7 && v12 != 0);
    uint64_t result = v7;
    if (v12 != v7) {
      uint64_t result = ClipperLib::GetLowermostRec(v7, v8);
    }
  }
  uint64_t v14 = *(void *)(v7 + 24);
  uint64_t v15 = *(void *)(v14 + 40);
  uint64_t v16 = *(void *)(v8 + 24);
  uint64_t v17 = *(void *)(v16 + 40);
  int v18 = *(_DWORD *)(a2 + 84);
  int v19 = *(_DWORD *)(a3 + 84);
  if (v18 == 1)
  {
    if (v19 == 1)
    {
      uint64_t v20 = *(int8x16_t **)(v8 + 24);
      do
      {
        int8x16_t v21 = v20[2];
        _OWORD v20[2] = vextq_s8(v21, v21, 8uLL);
        uint64_t v20 = (int8x16_t *)v21.i64[0];
      }
      while (v21.i64[0] != v16);
      *(void *)(v16 + 32) = v14;
      *(void *)(v14 + 40) = v16;
      *(void *)(v15 + 32) = v17;
      *(void *)(v17 + 40) = v15;
      *(void *)(v7 + 24) = v17;
    }
    else
    {
      *(void *)(v17 + 32) = v14;
      *(void *)(v14 + 40) = v17;
      *(void *)(v16 + 40) = v15;
      *(void *)(v15 + 32) = v16;
      *(void *)(v7 + 24) = v16;
    }
  }
  else if (v19 == 2)
  {
    uint64_t v22 = *(int8x16_t **)(v8 + 24);
    do
    {
      int8x16_t v23 = v22[2];
      v22[2] = vextq_s8(v23, v23, 8uLL);
      uint64_t v22 = (int8x16_t *)v23.i64[0];
    }
    while (v23.i64[0] != v16);
    *(void *)(v15 + 32) = v17;
    *(void *)(v17 + 40) = v15;
    *(void *)(v16 + 32) = v14;
    *(void *)(v14 + 40) = v16;
  }
  else
  {
    *(void *)(v15 + 32) = v16;
    *(void *)(v16 + 40) = v15;
    *(void *)(v14 + 40) = v17;
    *(void *)(v17 + 32) = v14;
  }
  *(void *)(v7 + 32) = 0;
  if (result == v8)
  {
    uint64_t v24 = *(void *)(v8 + 8);
    if (v24 != v7) {
      *(void *)(v7 + 8) = v24;
    }
    *(unsigned char *)(v7 + 4) = *(unsigned char *)(v8 + 4);
  }
  *(void *)(v8 + 24) = 0;
  *(void *)(v8 + 32) = 0;
  *(void *)(v8 + 8) = v7;
  int v25 = *(_DWORD *)(a2 + 100);
  int v26 = *(_DWORD *)(a3 + 100);
  *(_DWORD *)(a2 + 100) = -1;
  *(_DWORD *)(a3 + 100) = -1;
  uint64_t v27 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 104);
  if (v27)
  {
    while (*(_DWORD *)(v27 + 100) != v26)
    {
      uint64_t v27 = *(void *)(v27 + 128);
      if (!v27) {
        goto LABEL_36;
      }
    }
    *(_DWORD *)(v27 + 100) = v25;
    *(_DWORD *)(v27 + 84) = v18;
  }
LABEL_36:
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v7;
  return result;
}

uint64_t ClipperLib::Clipper::AddEdgeToSEL(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 112);
  *(void *)(a2 + 152) = 0;
  if (v2) {
    *(void *)(v2 + 152) = a2;
  }
  *(void *)(result + 112) = a2;
  *(void *)(a2 + 144) = v2;
  return result;
}

BOOL ClipperLib::Clipper::PopEdgeFromSEL(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v2 = (void *)(a1 + 112);
  uint64_t v3 = v4;
  if (v4)
  {
    *a2 = v3;
    uint64_t v6 = *(void *)(*v2 + 144);
    uint64_t v7 = *(void *)(*v2 + 152);
    uint64_t v5 = *v2 + 144;
    if (*(_OWORD *)v5 == 0)
    {
      void *v2 = 0;
    }
    else
    {
      uint64_t v8 = (void *)(v7 + 144);
      if (!v7) {
        uint64_t v8 = v2;
      }
      *uint64_t v8 = v6;
      if (v6) {
        *(void *)(v6 + 152) = v7;
      }
    }
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
  }
  return v3 != 0;
}

uint64_t ClipperLib::Clipper::DeleteFromSEL(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 144);
  uint64_t v3 = *(void *)(a2 + 152);
  if (*(_OWORD *)(a2 + 144) == 0)
  {
    if (*(void *)(result + 112) != a2) {
      return result;
    }
    goto LABEL_5;
  }
  if (!v3)
  {
LABEL_5:
    uint64_t v4 = (void *)(result + 112);
    goto LABEL_6;
  }
  uint64_t v4 = (void *)(v3 + 144);
LABEL_6:
  void *v4 = v2;
  if (v2) {
    *(void *)(v2 + 152) = v3;
  }
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  return result;
}

__n128 ClipperLib::Clipper::CopyAELToSEL(ClipperLib::Clipper *this)
{
  uint64_t v1 = *(__n128 **)((char *)this + *(void *)(*(void *)this - 24) + 104);
  *((void *)this + 14) = v1;
  if (v1)
  {
    do
    {
      __n128 result = v1[8];
      v1[9] = result;
      uint64_t v1 = (__n128 *)result.n128_u64[0];
    }
    while (result.n128_u64[0]);
  }
  return result;
}

void ClipperLib::Clipper::AddGhostJoin()
{
}

uint64_t *ClipperLib::Clipper::InsertEdgeIntoAEL(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result;
  if (!*(uint64_t *)((char *)result + *(void *)(*result - 24) + 104))
  {
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 136) = 0;
LABEL_43:
    uint64_t v16 = (uint64_t *)((char *)result + *(void *)(v3 - 24) + 104);
    goto LABEL_44;
  }
  if (!a3)
  {
    a3 = *(uint64_t *)((char *)result + *(void *)(*result - 24) + 104);
    uint64_t v18 = *(void *)(a2 + 24);
    uint64_t v19 = *(void *)(a3 + 24);
    BOOL v20 = v18 < v19;
    if (v18 == v19)
    {
      uint64_t v21 = *(void *)(a2 + 56);
      uint64_t v22 = *(void *)(a3 + 56);
      if (v21 <= v22)
      {
        if (v21 == v22)
        {
          uint64_t v25 = *(void *)(a2 + 48);
        }
        else
        {
          double v26 = *(double *)(a2 + 72) * (double)(v22 - *(void *)(a2 + 8));
          double v27 = 0.5;
          if (v26 < 0.0) {
            double v27 = -0.5;
          }
          uint64_t v25 = *(void *)a2 + (uint64_t)(v26 + v27);
        }
        if (*(void *)(a3 + 48) <= v25) {
          goto LABEL_3;
        }
LABEL_42:
        *(void *)(a2 + 136) = 0;
        *(void *)(a2 + 128) = *(uint64_t *)((char *)result + *(void *)(v3 - 24) + 104);
        *(void *)(*(uint64_t *)((char *)result + *(void *)(v3 - 24) + 104) + 136) = a2;
        goto LABEL_43;
      }
      double v23 = *(double *)(a3 + 72) * (double)(v21 - *(void *)(a3 + 8));
      double v24 = 0.5;
      if (v23 < 0.0) {
        double v24 = -0.5;
      }
      BOOL v20 = *(void *)(a2 + 48) < *(void *)a3 + (uint64_t)(v23 + v24);
    }
    if (!v20) {
      goto LABEL_3;
    }
    goto LABEL_42;
  }
LABEL_3:
  uint64_t v4 = *(void *)(a3 + 128);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    uint64_t v6 = a3;
    while (1)
    {
      a3 = v6;
      uint64_t v6 = v4;
      uint64_t v7 = *(void *)(v4 + 24);
      BOOL v8 = v5 < v7;
      if (v5 == v7)
      {
        uint64_t v9 = *(void *)(a2 + 56);
        uint64_t v10 = *(void *)(v6 + 56);
        if (v9 <= v10)
        {
          if (v9 == v10)
          {
            uint64_t v13 = *(void *)(a2 + 48);
          }
          else
          {
            double v14 = *(double *)(a2 + 72) * (double)(v10 - *(void *)(a2 + 8));
            if (v14 >= 0.0) {
              double v15 = 0.5;
            }
            else {
              double v15 = -0.5;
            }
            uint64_t v13 = *(void *)a2 + (uint64_t)(v14 + v15);
          }
          if (*(void *)(v6 + 48) > v13) {
            goto LABEL_24;
          }
          goto LABEL_21;
        }
        double v11 = *(double *)(v6 + 72) * (double)(v9 - *(void *)(v6 + 8));
        if (v11 >= 0.0) {
          double v12 = 0.5;
        }
        else {
          double v12 = -0.5;
        }
        BOOL v8 = *(void *)(a2 + 48) < *(void *)v6 + (uint64_t)(v11 + v12);
      }
      if (v8) {
        goto LABEL_24;
      }
LABEL_21:
      uint64_t v4 = *(void *)(v6 + 128);
      if (!v4)
      {
        a3 = v6;
        break;
      }
    }
  }
  uint64_t v6 = 0;
LABEL_24:
  *(void *)(a2 + 128) = v6;
  uint64_t v16 = (void *)(a3 + 128);
  uint64_t v17 = *(void *)(a3 + 128);
  if (v17) {
    *(void *)(v17 + 136) = a2;
  }
  *(void *)(a2 + 136) = a3;
LABEL_44:
  *uint64_t v16 = a2;
  return result;
}

uint64_t ClipperLib::Clipper::IntersectEdges(uint64_t result, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v7 = result;
  int v8 = a2[25];
  int v9 = a3[25];
  uint64_t v10 = *(uint64_t (**)(_DWORD *, _DWORD *, _DWORD *, _DWORD *, void *))(result + 136);
  if (v10) {
    __n128 result = v10(a2, a2 + 12, a3, a3 + 12, a4);
  }
  int v11 = a2[22];
  int v12 = a3[22];
  if (!v11)
  {
    if (!v12) {
      return result;
    }
    if (a2[20] == a3[20])
    {
      if (*(_DWORD *)(v7 + 80) != 1 || v9 < 0) {
        return result;
      }
    }
    else
    {
      int v26 = a3[23];
      if (v26 < 0) {
        int v26 = -v26;
      }
      if (v26 != 1 || *(_DWORD *)(v7 + 80) == 1 && a3[24]) {
        return result;
      }
    }
    __n128 result = ClipperLib::Clipper::AddOutPt((void *)v7, (uint64_t)a2, a4);
    if ((v8 & 0x80000000) == 0) {
      a2[25] = -1;
    }
    return result;
  }
  int v13 = a2[20];
  int v14 = a3[20];
  if (!v12)
  {
    if (v13 == v14)
    {
      if (*(_DWORD *)(v7 + 80) != 1 || v8 < 0) {
        return result;
      }
    }
    else
    {
      int v27 = a2[23];
      if (v27 < 0) {
        int v27 = -v27;
      }
      if (v27 != 1 || *(_DWORD *)(v7 + 80) == 1 && a2[24]) {
        return result;
      }
    }
    __n128 result = ClipperLib::Clipper::AddOutPt((void *)v7, (uint64_t)a3, a4);
    if (v9 < 0) {
      return result;
    }
    int v28 = -1;
    goto LABEL_100;
  }
  double v15 = (int *)(v7 + 128);
  if (v13 == v14)
  {
    if (v13) {
      uint64_t v16 = (int *)(v7 + 124);
    }
    else {
      uint64_t v16 = (int *)(v7 + 128);
    }
    int v17 = *v16;
    int v18 = a2[23];
    if (v17)
    {
      int v19 = v18 + v12;
      if (!v19) {
        int v19 = -v18;
      }
      a2[23] = v19;
      int v20 = a3[23] - v11;
      if (v20) {
        a3[23] = v20;
      }
      else {
        a3[23] = -v11;
      }
      goto LABEL_59;
    }
    a2[23] = a3[23];
    a3[23] = v18;
LABEL_49:
    BOOL v29 = v13 == 0;
    if (v13) {
      long long v30 = (int *)(v7 + 128);
    }
    else {
      long long v30 = (int *)(v7 + 124);
    }
    int v31 = *v30;
    if (v14) {
      long long v32 = (int *)(v7 + 124);
    }
    else {
      long long v32 = (int *)(v7 + 128);
    }
    if (!v14) {
      double v15 = (int *)(v7 + 124);
    }
    int v33 = *v15;
    int v34 = *v32;
    goto LABEL_70;
  }
  if (v14) {
    uint64_t v21 = (_DWORD *)(v7 + 124);
  }
  else {
    uint64_t v21 = (_DWORD *)(v7 + 128);
  }
  int v22 = a2[24];
  int v23 = v22 + v12;
  if (!*v21) {
    int v23 = v22 == 0;
  }
  a2[24] = v23;
  if (v13) {
    double v24 = (int *)(v7 + 124);
  }
  else {
    double v24 = (int *)(v7 + 128);
  }
  int v17 = *v24;
  int v25 = a3[24];
  if (!v17)
  {
    a3[24] = v25 == 0;
    goto LABEL_49;
  }
  a3[24] = v25 - v11;
LABEL_59:
  BOOL v29 = v13 == 0;
  if (v13) {
    long long v35 = (int *)(v7 + 128);
  }
  else {
    long long v35 = (int *)(v7 + 124);
  }
  int v31 = *v35;
  if (v14) {
    uint64_t v36 = (int *)(v7 + 124);
  }
  else {
    uint64_t v36 = (int *)(v7 + 128);
  }
  if (!v14) {
    double v15 = (int *)(v7 + 124);
  }
  int v33 = *v15;
  int v34 = *v36;
  if (v17 == 3)
  {
    unint64_t v37 = -(uint64_t)(int)a2[23];
    goto LABEL_74;
  }
  if (v17 == 2)
  {
    unint64_t v37 = (int)a2[23];
    goto LABEL_74;
  }
LABEL_70:
  LODWORD(v37) = a2[23];
  if ((v37 & 0x80000000) == 0) {
    unint64_t v37 = v37;
  }
  else {
    unint64_t v37 = -(int)v37;
  }
LABEL_74:
  if (v34 == 3)
  {
    unint64_t v38 = -(uint64_t)(int)a3[23];
    if (v8 < 0) {
      goto LABEL_90;
    }
  }
  else if (v34 == 2)
  {
    unint64_t v38 = (int)a3[23];
    if (v8 < 0) {
      goto LABEL_90;
    }
  }
  else
  {
    LODWORD(v38) = a3[23];
    if ((v38 & 0x80000000) == 0) {
      unint64_t v38 = v38;
    }
    else {
      unint64_t v38 = -(int)v38;
    }
    if (v8 < 0) {
      goto LABEL_90;
    }
  }
  if (v9 < 0)
  {
LABEL_90:
    if ((v8 & 0x80000000) == 0)
    {
      if (v38 > 1) {
        return result;
      }
      long long v39 = (void *)v7;
      uint64_t v40 = (uint64_t)a2;
      goto LABEL_99;
    }
    if ((v9 & 0x80000000) == 0)
    {
      if (v37 > 1) {
        return result;
      }
      goto LABEL_98;
    }
    if (v37 <= 1 && v38 <= 1)
    {
      if (v31 == 3)
      {
        uint64_t v42 = -(uint64_t)(int)a2[24];
      }
      else if (v31 == 2)
      {
        uint64_t v42 = (int)a2[24];
      }
      else
      {
        LODWORD(v42) = a2[24];
        if ((int)v42 >= 0) {
          uint64_t v42 = v42;
        }
        else {
          uint64_t v42 = -(int)v42;
        }
      }
      if (v33 == 3)
      {
        uint64_t v43 = -(uint64_t)(int)a3[24];
      }
      else if (v33 == 2)
      {
        uint64_t v43 = (int)a3[24];
      }
      else
      {
        LODWORD(v43) = a3[24];
        if ((int)v43 >= 0) {
          uint64_t v43 = v43;
        }
        else {
          uint64_t v43 = -(int)v43;
        }
      }
      if (v13 == v14)
      {
        if (v37 == 1 && v38 == 1)
        {
          switch(*(_DWORD *)(v7 + 80))
          {
            case 0:
              if (v42 >= 1 && v43 >= 1) {
                goto LABEL_136;
              }
              return result;
            case 1:
              if (v42 > 0) {
                return result;
              }
              goto LABEL_135;
            case 2:
              if (v13 == 1 && v42 >= 1 && v43 > 0) {
                goto LABEL_136;
              }
              if (v42 >= 1 || !v29) {
                return result;
              }
LABEL_135:
              if (v43 <= 0) {
                goto LABEL_136;
              }
              return result;
            case 3:
              goto LABEL_136;
            default:
              return result;
          }
        }
        int v44 = a2[21];
        a2[21] = a3[21];
        a3[21] = v44;
      }
      else
      {
LABEL_136:
        return ClipperLib::Clipper::AddLocalMinPoly((void *)v7, (uint64_t)a2, (uint64_t)a3, a4);
      }
    }
    return result;
  }
  if (v37 <= 1 && v38 <= 1 && (v13 == v14 || *(_DWORD *)(v7 + 80) == 3))
  {
    ClipperLib::Clipper::AddOutPt((void *)v7, (uint64_t)a2, a4);
LABEL_98:
    long long v39 = (void *)v7;
    uint64_t v40 = (uint64_t)a3;
LABEL_99:
    __n128 result = ClipperLib::Clipper::AddOutPt(v39, v40, a4);
    int v41 = a2[21];
    a2[21] = a3[21];
    a3[21] = v41;
    int v28 = a2[25];
    a2[25] = a3[25];
LABEL_100:
    a3[25] = v28;
    return result;
  }

  return ClipperLib::Clipper::AddLocalMaxPoly((void *)v7, (uint64_t)a2, (uint64_t)a3, a4);
}

uint64_t ClipperLib::Clipper::SetZ(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(result + 136);
  if (v4) {
    return v4(a3, a3 + 48, a4, a4 + 48, a2);
  }
  return result;
}

void *ClipperLib::Clipper::SetHoleState(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 136);
  if (v3)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = v4;
      int v6 = *(_DWORD *)(v3 + 100);
      if ((v6 & 0x80000000) == 0)
      {
        if (*(_DWORD *)(v3 + 88))
        {
          uint64_t v4 = v3;
          if (v5)
          {
            if (*(_DWORD *)(v5 + 100) == v6) {
              uint64_t v4 = 0;
            }
            else {
              uint64_t v4 = v5;
            }
          }
        }
      }
      uint64_t v3 = *(void *)(v3 + 136);
    }
    while (v3);
    if (v4)
    {
      uint64_t v3 = *(void *)(*(void *)((char *)result + *(void *)(*result - 24) + 80) + 8 * *(int *)(v4 + 100));
      LOBYTE(v4) = *(unsigned char *)(v3 + 4) ^ 1;
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  *(void *)(a3 + 8) = v3;
  *(unsigned char *)(a3 + 4) = v4;
  return result;
}

uint64_t ClipperLib::GetLowermostRec(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  BottomPt = *(void **)(a1 + 32);
  if (!BottomPt)
  {
    BottomPt = (void *)ClipperLib::GetBottomPt(*(void **)(v3 + 24));
    *(void *)(v3 + 32) = BottomPt;
  }
  uint64_t v5 = *(void **)(a2 + 32);
  if (!v5)
  {
    uint64_t v5 = (void *)ClipperLib::GetBottomPt(*(void **)(a2 + 24));
    *(void *)(a2 + 32) = v5;
    BottomPt = *(void **)(v3 + 32);
  }
  uint64_t v6 = BottomPt[2];
  uint64_t v7 = v5[2];
  if (v6 <= v7)
  {
    if (v6 < v7) {
      return a2;
    }
    uint64_t v8 = BottomPt[1];
    uint64_t v9 = v5[1];
    if (v8 < v9) {
      return v3;
    }
    if (v8 > v9 || (void *)BottomPt[4] == BottomPt)
    {
      return a2;
    }
    else if ((void *)v5[4] != v5 && !ClipperLib::FirstIsBottomPt((uint64_t)BottomPt, v5))
    {
      return a2;
    }
  }
  return v3;
}

BOOL ClipperLib::OutRec1RightOfOutRec2(uint64_t a1, uint64_t a2)
{
  do
    a1 = *(void *)(a1 + 8);
  while (a1 != a2 && a1 != 0);
  return a1 == a2;
}

int *ClipperLib::Clipper::GetOutRec(ClipperLib::Clipper *this, int a2)
{
  uint64_t v2 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 80);
  uint64_t v3 = *(int **)(v2 + 8 * a2);
  do
  {
    __n128 result = v3;
    uint64_t v3 = *(int **)(v2 + 8 * *v3);
  }
  while (result != v3);
  return result;
}

uint64_t ClipperLib::Clipper::GetLastOutPt(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 80) + 8 * *(int *)(a2 + 100)) + 24;
  if (*(_DWORD *)(a2 + 84) != 1) {
    uint64_t v2 = *(void *)v2 + 40;
  }
  return *(void *)v2;
}

void ClipperLib::Clipper::ProcessHorizontal(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  v86[0] = a2;
  int v4 = *((_DWORD *)a2 + 22);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[6];
  BOOL v7 = *a2 < v6;
  if (*a2 >= v6) {
    uint64_t v8 = a2[6];
  }
  else {
    uint64_t v8 = *a2;
  }
  if (*a2 < v6) {
    uint64_t v9 = a2[6];
  }
  else {
    uint64_t v9 = *a2;
  }
  uint64_t v79 = v9;
  uint64_t v80 = v8;
  uint64_t v10 = a2;
  while (1)
  {
    int v11 = v10;
    uint64_t v10 = (uint64_t *)v10[15];
    if (!v10) {
      break;
    }
    if (*((double *)v10 + 9) != -1.0e40)
    {
      MaximaPair = 0;
      goto LABEL_12;
    }
  }
  MaximaPair = ClipperLib::GetMaximaPair(v11);
LABEL_12:
  int v13 = a1 + 11;
  uint64_t v78 = (uint64_t)MaximaPair;
  if (a1[13])
  {
    int v14 = (void *)a1[12];
    if (v5 < v6)
    {
      while (1)
      {
        if (v14 == v13)
        {
          int v14 = 0;
          uint64_t v16 = a1 + 11;
          goto LABEL_30;
        }
        uint64_t v15 = v14[2];
        if (v15 > v5) {
          break;
        }
        int v14 = (void *)v14[1];
      }
      if (v15 >= v11[6]) {
        uint64_t v16 = a1 + 11;
      }
      else {
        uint64_t v16 = v14;
      }
      int v14 = 0;
      goto LABEL_30;
    }
    int v17 = a1 + 11;
    while (v17 != v14)
    {
      int v18 = v17;
      int v17 = (void *)*v17;
      uint64_t v19 = v17[2];
      if (v19 <= v5)
      {
        uint64_t v16 = 0;
        if (v19 > v11[6]) {
          int v14 = v18;
        }
        goto LABEL_30;
      }
    }
  }
  else
  {
    int v14 = 0;
  }
  uint64_t v16 = 0;
LABEL_30:
  uint64_t v81 = (uint64_t)v11;
  __asm { FMOV            V9.2S, #-1.0 }
  while (1)
  {
    uint64_t v77 = v2 + 16;
    uint64_t v25 = 17;
    if (v7) {
      uint64_t v25 = 16;
    }
    uint64_t v26 = v2[v25];
    if (v26)
    {
      int64_t v82 = v2 + 6;
      do
      {
        if (a1[13])
        {
          if (v7)
          {
            if (v16 == v13)
            {
              uint64_t v16 = a1 + 11;
              goto LABEL_55;
            }
            while (v16[2] < *(void *)(v26 + 24))
            {
              if ((*((_DWORD *)v2 + 25) & 0x80000000) == 0 && v4)
              {
                uint64_t v27 = v2[1];
                uint64_t v83 = v16[2];
                uint64_t v84 = v27;
                uint64_t v85 = _D9;
                ClipperLib::Clipper::AddOutPt(a1, (uint64_t)v2, &v83);
              }
              uint64_t v16 = (void *)v16[1];
              if (v16 == v13)
              {
                uint64_t v16 = a1 + 11;
                break;
              }
            }
          }
          else
          {
            int v28 = (void *)a1[12];
            if (v14 == v28) {
              goto LABEL_52;
            }
            while (1)
            {
              BOOL v29 = (void *)*v14;
              if (*(void *)(*v14 + 16) <= *(void *)(v26 + 24)) {
                break;
              }
              if ((*((_DWORD *)v2 + 25) & 0x80000000) == 0 && v4)
              {
                uint64_t v30 = v2[1];
                uint64_t v83 = *(void *)(*v14 + 16);
                uint64_t v84 = v30;
                uint64_t v85 = _D9;
                ClipperLib::Clipper::AddOutPt(a1, (uint64_t)v2, &v83);
                BOOL v29 = (void *)*v14;
                int v28 = (void *)a1[12];
              }
              int v14 = v29;
              if (v29 == v28)
              {
                int v14 = v28;
                break;
              }
            }
          }
        }
        if (!v7)
        {
LABEL_52:
          uint64_t v31 = *(void *)(v26 + 24);
          if (v31 < v80) {
            break;
          }
          goto LABEL_56;
        }
LABEL_55:
        uint64_t v31 = *(void *)(v26 + 24);
        if (v31 > v79) {
          break;
        }
LABEL_56:
        if (v31 == *v82)
        {
          uint64_t v32 = v2[15];
          if (v32)
          {
            if (*(double *)(v26 + 72) < *(double *)(v32 + 72)) {
              break;
            }
          }
        }
        if ((*((_DWORD *)v2 + 25) & 0x80000000) == 0 && v4)
        {
          ClipperLib::Clipper::AddOutPt(a1, (uint64_t)v2, (void *)(v26 + 24));
          for (char i = (uint64_t *)a1[14]; i; char i = (uint64_t *)i[18])
          {
            if ((*((_DWORD *)i + 25) & 0x80000000) == 0)
            {
              uint64_t v34 = *v2;
              uint64_t v35 = v2[6];
              uint64_t v36 = *i;
              uint64_t v37 = i[6];
              if (*v2 >= v35) {
                uint64_t v38 = v2[6];
              }
              else {
                uint64_t v38 = *v2;
              }
              if (*v2 <= v35) {
                uint64_t v34 = v2[6];
              }
              if (v36 >= v37) {
                uint64_t v39 = i[6];
              }
              else {
                uint64_t v39 = *i;
              }
              if (v36 <= v37) {
                uint64_t v36 = i[6];
              }
              if (v38 < v36 && v39 < v34) {
                ClipperLib::Clipper::AddJoin();
              }
            }
          }
          ClipperLib::Clipper::AddGhostJoin();
        }
        if (v2 == (void *)v81 && v26 == v78)
        {
          if ((*(_DWORD *)(v81 + 100) & 0x80000000) == 0) {
            ClipperLib::Clipper::AddLocalMaxPoly(a1, v81, v78, v82);
          }
          uint64_t v50 = *a1;
          long long v51 = (char *)a1 + *(void *)(*a1 - 24);
          uint64_t v53 = v2[16];
          uint64_t v52 = v2[17];
          if (*((_OWORD *)v2 + 8) == 0)
          {
            if (*((void *)v51 + 13) == v81) {
              goto LABEL_105;
            }
          }
          else
          {
            if (v52)
            {
              uint64_t v54 = (void *)(v52 + 128);
              goto LABEL_106;
            }
LABEL_105:
            uint64_t v54 = v51 + 104;
LABEL_106:
            *uint64_t v54 = v53;
            if (v53) {
              *(void *)(v53 + 136) = v52;
            }
            *uint64_t v77 = 0;
            v2[17] = 0;
            uint64_t v50 = *a1;
          }
          long long v55 = (char *)a1 + *(void *)(v50 - 24);
          uint64_t v56 = *(void *)(v78 + 128);
          uint64_t v57 = *(void *)(v78 + 136);
          if (*(_OWORD *)(v78 + 128) == 0)
          {
            if (*((void *)v55 + 13) == v78) {
              goto LABEL_113;
            }
          }
          else
          {
            if (v57)
            {
              long long v58 = (void *)(v57 + 128);
              goto LABEL_114;
            }
LABEL_113:
            long long v58 = v55 + 104;
LABEL_114:
            *long long v58 = v56;
            if (v56) {
              *(void *)(v56 + 136) = v57;
            }
            *(void *)(v78 + 128) = 0;
            *(void *)(v78 + 136) = 0;
          }
          return;
        }
        uint64_t v41 = v2[4];
        uint64_t v83 = *(void *)(v26 + 24);
        uint64_t v84 = v41;
        uint64_t v85 = _D9;
        if (v7)
        {
          uint64_t v42 = v2;
          uint64_t v43 = (_DWORD *)v26;
        }
        else
        {
          uint64_t v42 = (_DWORD *)v26;
          uint64_t v43 = v2;
        }
        ClipperLib::Clipper::IntersectEdges((uint64_t)a1, v42, v43, &v83);
        uint64_t v44 = 136;
        if (v7) {
          uint64_t v44 = 128;
        }
        uint64_t v45 = *(void *)(v26 + v44);
        ClipperLib::ClipperBase::SwapPositionsInAEL((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)v2, v26);
        uint64_t v26 = v45;
      }
      while (v45);
    }
    uint64_t v46 = v2[15];
    if (!v46 || *(double *)(v46 + 72) != -1.0e40) {
      break;
    }
    ClipperLib::ClipperBase::UpdateEdgeIntoAEL((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t *)v86);
    uint64_t v2 = v86[0];
    if ((*((_DWORD *)v86[0] + 25) & 0x80000000) == 0) {
      ClipperLib::Clipper::AddOutPt(a1, (uint64_t)v86[0], v86[0]);
    }
    uint64_t v47 = *v2;
    uint64_t v48 = v2[6];
    BOOL v7 = *v2 < v48;
    if (*v2 >= v48) {
      uint64_t v49 = v2[6];
    }
    else {
      uint64_t v49 = *v2;
    }
    if (*v2 < v48) {
      uint64_t v47 = v2[6];
    }
    uint64_t v79 = v47;
    uint64_t v80 = v49;
  }
  int v59 = *((_DWORD *)v2 + 25);
  if ((v59 & 0x80000000) == 0)
  {
    for (j = (uint64_t *)a1[14]; j; j = (uint64_t *)j[18])
    {
      if ((*((_DWORD *)j + 25) & 0x80000000) == 0)
      {
        uint64_t v61 = *v2;
        uint64_t v62 = v2[6];
        uint64_t v63 = *j;
        uint64_t v64 = j[6];
        if (*v2 >= v62) {
          uint64_t v65 = v2[6];
        }
        else {
          uint64_t v65 = *v2;
        }
        if (*v2 <= v62) {
          uint64_t v61 = v2[6];
        }
        if (v63 >= v64) {
          uint64_t v66 = j[6];
        }
        else {
          uint64_t v66 = *j;
        }
        if (v63 <= v64) {
          uint64_t v63 = j[6];
        }
        if (v65 < v63 && v66 < v61) {
          ClipperLib::Clipper::AddJoin();
        }
      }
    }
    ClipperLib::Clipper::AddGhostJoin();
  }
  if (!v46)
  {
    if ((v59 & 0x80000000) == 0) {
      ClipperLib::Clipper::AddOutPt(a1, (uint64_t)v2, v2 + 6);
    }
    uint64_t v72 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v74 = v2[16];
    uint64_t v73 = v2[17];
    if (*((_OWORD *)v2 + 8) == 0)
    {
      if (*((void **)v72 + 13) != v2) {
        return;
      }
    }
    else if (v73)
    {
      long long v75 = (void *)(v73 + 128);
LABEL_167:
      *long long v75 = v74;
      if (v74) {
        *(void *)(v74 + 136) = v73;
      }
      *uint64_t v77 = 0;
      v2[17] = 0;
      return;
    }
    long long v75 = v72 + 104;
    goto LABEL_167;
  }
  if (v59 < 0)
  {
    ClipperLib::ClipperBase::UpdateEdgeIntoAEL((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t *)v86);
    return;
  }
  ClipperLib::Clipper::AddOutPt(a1, (uint64_t)v2, v2 + 6);
  ClipperLib::ClipperBase::UpdateEdgeIntoAEL((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t *)v86);
  long long v68 = v86[0];
  if (*((_DWORD *)v86[0] + 22))
  {
    uint64_t v69 = v86[0][16];
    uint64_t v70 = v86[0][17];
    if (v70
      && *(void *)(v70 + 24) == *v86[0]
      && (uint64_t v71 = *(void *)(v70 + 32), v71 == v86[0][1])
      && *(_DWORD *)(v70 + 88)
      && (*(_DWORD *)(v70 + 100) & 0x80000000) == 0
      && v71 > *(void *)(v70 + 56)
      && ClipperLib::SlopesEqual(v86[0], *((void **)v86[0] + 17), *((unsigned __int8 *)a1 + *(void *)(*a1 - 24) + 40)))
    {
      ClipperLib::Clipper::AddOutPt(a1, v70, v68);
    }
    else
    {
      if (!v69) {
        return;
      }
      if (*(void *)(v69 + 24) != *v68) {
        return;
      }
      uint64_t v76 = *(void *)(v69 + 32);
      if (v76 != v68[1]
        || !*(_DWORD *)(v69 + 88)
        || (*(_DWORD *)(v69 + 100) & 0x80000000) != 0
        || v76 <= *(void *)(v69 + 56)
        || !ClipperLib::SlopesEqual(v68, (void *)v69, *((unsigned __int8 *)a1 + *(void *)(*a1 - 24) + 40)))
      {
        return;
      }
      ClipperLib::Clipper::AddOutPt(a1, v69, v68);
    }
    ClipperLib::Clipper::AddJoin();
  }
}

void *ClipperLib::GetMaximaPair(void *a1)
{
  __n128 result = (void *)a1[13];
  uint64_t v4 = a1[6];
  uint64_t v3 = a1[7];
  BOOL v5 = result[6] == v4 && result[7] == v3;
  if (!v5 || result[15])
  {
    __n128 result = (void *)a1[14];
    BOOL v6 = result[6] == v4 && result[7] == v3;
    if (!v6 || result[15]) {
      return 0;
    }
  }
  return result;
}

double ClipperLib::GetMaximaPairEx(void *a1)
{
  MaximaPair = (double *)ClipperLib::GetMaximaPair(a1);
  if (MaximaPair && *((_DWORD *)MaximaPair + 25) != -2 && *((void *)MaximaPair + 16) == *((void *)MaximaPair + 17)) {
    return MaximaPair[9];
  }
  return result;
}

uint64_t ClipperLib::Clipper::SwapPositionsInSEL(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 144);
  if (!v3 && !*(void *)(a2 + 152)) {
    return result;
  }
  uint64_t v4 = *(void *)(a3 + 144);
  if (!v4)
  {
    BOOL v6 = (void *)(a3 + 152);
    uint64_t v7 = *(void *)(a3 + 152);
    if (!v7) {
      return result;
    }
    if (v3 != a3)
    {
      uint64_t v5 = *(void *)(a2 + 152);
      *(void *)(a2 + 144) = 0;
      *(void *)(a2 + 152) = v7;
LABEL_11:
      *(void *)(v7 + 144) = a2;
      goto LABEL_12;
    }
LABEL_17:
    uint64_t v8 = *(void *)(a2 + 152);
    if (v8) {
      *(void *)(v8 + 144) = a3;
    }
    *(void *)(a3 + 144) = a2;
    *(void *)(a3 + 152) = v8;
    *(void *)(a2 + 144) = v4;
    *(void *)(a2 + 152) = a3;
    goto LABEL_25;
  }
  if (v3 == a3)
  {
    *(void *)(v4 + 152) = a2;
    goto LABEL_17;
  }
  if (v4 == a2)
  {
    if (v3) {
      *(void *)(v3 + 152) = a3;
    }
    uint64_t v9 = *(void *)(a3 + 152);
    if (v9) {
      *(void *)(v9 + 144) = a2;
    }
    *(void *)(a2 + 144) = a3;
    *(void *)(a2 + 152) = v9;
    *(void *)(a3 + 144) = v3;
    *(void *)(a3 + 152) = a2;
    goto LABEL_25;
  }
  uint64_t v5 = *(void *)(a2 + 152);
  *(void *)(v4 + 152) = a2;
  BOOL v6 = (void *)(a3 + 152);
  uint64_t v7 = *(void *)(a3 + 152);
  *(void *)(a2 + 144) = v4;
  *(void *)(a2 + 152) = v7;
  if (v7) {
    goto LABEL_11;
  }
LABEL_12:
  *(void *)(a3 + 144) = v3;
  if (v3) {
    *(void *)(v3 + 152) = a3;
  }
  void *v6 = v5;
  if (v5) {
    *(void *)(v5 + 144) = a3;
  }
LABEL_25:
  if (!*(void *)(a2 + 152) || (a2 = a3, !*(void *)(a3 + 152))) {
    *(void *)(result + 112) = a2;
  }
  return result;
}

uint64_t ClipperLib::GetNextInAEL(uint64_t a1, int a2)
{
  uint64_t v2 = 136;
  if (a2 == 1) {
    uint64_t v2 = 128;
  }
  return *(void *)(a1 + v2);
}

uint64_t *ClipperLib::GetHorzDirection(uint64_t *result, int *a2, void *a3, void *a4)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[6];
  BOOL v6 = *result < v5;
  if (*result >= v5) {
    uint64_t v4 = result[6];
  }
  *a3 = v4;
  if (v6) {
    uint64_t v7 = result + 6;
  }
  else {
    uint64_t v7 = result;
  }
  uint64_t v8 = *v7;
  int v9 = v6;
  *a4 = v8;
  *a2 = v9;
  return result;
}

void *ClipperLib::Clipper::BuildIntersectList(void *this, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)this + *(void *)(*this - 24) + 104);
  if (v2)
  {
    this[14] = v2;
    do
    {
      long long v4 = *(_OWORD *)(v2 + 128);
      *(_OWORD *)(v2 + 144) = v4;
      if (*(void *)(v2 + 56) == a2)
      {
        uint64_t v5 = *(void *)(v2 + 48);
      }
      else
      {
        double v6 = *(double *)(v2 + 72) * (double)(a2 - *(void *)(v2 + 8));
        if (v6 >= 0.0) {
          double v7 = 0.5;
        }
        else {
          double v7 = -0.5;
        }
        uint64_t v5 = *(void *)v2 + (uint64_t)(v6 + v7);
      }
      *(void *)(v2 + 24) = v5;
      uint64_t v2 = v4;
    }
    while ((void)v4);
    __asm { FMOV            V8.2S, #-1.0 }
    uint64_t v13 = this[14];
    uint64_t v14 = *(void *)(v13 + 144);
    if (v14)
    {
      do
      {
        long long v20 = 0uLL;
        uint64_t v21 = _D8;
        if (*(void *)(v13 + 24) > *(void *)(v14 + 24))
        {
          ClipperLib::IntersectPoint(v13, v14, (uint64_t *)&v20);
          if (*((uint64_t *)&v20 + 1) < a2)
          {
            if (*(void *)(v13 + 56) == a2)
            {
              uint64_t v15 = *(void *)(v13 + 48);
            }
            else
            {
              double v16 = *(double *)(v13 + 72) * (double)(a2 - *(void *)(v13 + 8));
              if (v16 >= 0.0) {
                double v17 = 0.5;
              }
              else {
                double v17 = -0.5;
              }
              uint64_t v15 = *(void *)v13 + (uint64_t)(v16 + v17);
            }
            *(void *)&long long v20 = v15;
            *((void *)&v20 + 1) = a2;
            uint64_t v21 = _D8;
          }
          operator new();
        }
        uint64_t v13 = v14;
        uint64_t v14 = *(void *)(v14 + 144);
      }
      while (v14);
      uint64_t v18 = *(void *)(v13 + 152);
      if (v18) {
        *(void *)(v18 + 144) = 0;
      }
    }
    else
    {
      uint64_t v19 = *(void *)(v13 + 152);
      if (v19) {
        *(void *)(v19 + 144) = 0;
      }
    }
    this[14] = 0;
  }
  return this;
}

BOOL ClipperLib::Clipper::FixupIntersectionOrder(ClipperLib::Clipper *this)
{
  uint64_t v2 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 104);
  *((void *)this + 14) = v2;
  if (v2)
  {
    do
    {
      long long v3 = *(_OWORD *)(v2 + 128);
      *(_OWORD *)(v2 + 144) = v3;
      uint64_t v2 = v3;
    }
    while ((void)v3);
  }
  uint64_t v4 = *((void *)this + 7);
  uint64_t v5 = (uint64_t *)*((void *)this + 8);
  unint64_t v6 = 126 - 2 * __clz(((uint64_t)v5 - v4) >> 3);
  uint64_t v27 = ClipperLib::IntersectListSort;
  if (v5 == (uint64_t *)v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  BOOL v8 = 1;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **,false>(v4, v5, (uint64_t (**)(void))&v27, v7, 1);
  uint64_t v9 = *((void *)this + 8) - *((void *)this + 7);
  if (v9)
  {
    BOOL v8 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = v9 >> 3;
    if ((unint64_t)(v9 >> 3) <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v9 >> 3;
    }
    unint64_t v13 = 1;
    do
    {
      if (v11 <= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v11;
      }
      uint64_t v15 = *((void *)this + 7);
      double v16 = *(uint64_t **)(v15 + 8 * v10);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      uint64_t v19 = *(void *)(*v16 + 144);
      if (v19 != v18)
      {
        if (*(void *)(v17 + 152) == v18)
        {
          uint64_t v19 = v16[1];
        }
        else
        {
          unint64_t v20 = v13;
          unint64_t v21 = v10;
          while (1)
          {
            if (v20 >= v11)
            {
              unint64_t v21 = v14;
              goto LABEL_24;
            }
            int v22 = *(uint64_t **)(v15 + 8 * v20);
            uint64_t v24 = *v22;
            uint64_t v23 = v22[1];
            if (*(void *)(v24 + 144) == v23) {
              break;
            }
            ++v20;
            ++v21;
            if (*(void *)(v24 + 152) == v23) {
              goto LABEL_24;
            }
          }
          unint64_t v21 = v20;
LABEL_24:
          if (v21 == v11) {
            return v8;
          }
          *(void *)(v15 + 8 * v10) = *(void *)(v15 + 8 * v21);
          *(void *)(v15 + 8 * v21) = v16;
          uint64_t v25 = *(uint64_t **)(*((void *)this + 7) + 8 * v10);
          uint64_t v17 = *v25;
          uint64_t v19 = v25[1];
        }
      }
      ClipperLib::Clipper::SwapPositionsInSEL((uint64_t)this, v17, v19);
      BOOL v8 = ++v10 >= v11;
      ++v13;
    }
    while (v10 != v12);
  }
  return v8;
}

void *ClipperLib::Clipper::ProcessIntersectList(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[8];
  if (v2 != this[7])
  {
    unint64_t v3 = 0;
    uint64_t v2 = this[7];
    do
    {
      uint64_t v4 = *(uint64_t **)(v2 + 8 * v3);
      ClipperLib::Clipper::IntersectEdges((uint64_t)v1, (_DWORD *)*v4, (_DWORD *)v4[1], v4 + 2);
      ClipperLib::ClipperBase::SwapPositionsInAEL((uint64_t)v1 + *(void *)(*v1 - 24), *v4, v4[1]);
      this = (void *)MEMORY[0x1C8783F10](v4, 0x1020C40E349F4B1);
      ++v3;
      uint64_t v2 = v1[7];
    }
    while (v3 < (v1[8] - v2) >> 3);
  }
  v1[8] = v2;
  return this;
}

uint64_t ClipperLib::Clipper::DisposeIntersectNodes(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v3 = *(void *)(this + 56);
  uint64_t v2 = *(void *)(this + 64);
  if (v2 == v3)
  {
    uint64_t v3 = *(void *)(this + 64);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void *)(v3 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x1C8783F10](this, 0x1020C40E349F4B1);
        uint64_t v3 = *(void *)(v1 + 56);
        uint64_t v2 = *(void *)(v1 + 64);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  *(void *)(v1 + 64) = v3;
  return this;
}

BOOL ClipperLib::IntersectListSort(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) < *(void *)(a1 + 24);
}

void ClipperLib::Clipper::DoMaxima(uint64_t *a1, uint64_t a2)
{
  ClipperLib::GetMaximaPairEx((void *)a2);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v7 = (void *)(a2 + 128);
    uint64_t v6 = *(void *)(a2 + 128);
    BOOL v8 = v6 != 0;
    if (v6) {
      BOOL v9 = v6 == v4;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      do
      {
        ClipperLib::Clipper::IntersectEdges((uint64_t)a1, (_DWORD *)a2, (_DWORD *)v6, (void *)(a2 + 48));
        ClipperLib::ClipperBase::SwapPositionsInAEL((uint64_t)a1 + *(void *)(*a1 - 24), a2, v6);
        uint64_t v6 = *(void *)(a2 + 128);
        BOOL v8 = v6 != 0;
        if (v6) {
          BOOL v10 = v6 == v5;
        }
        else {
          BOOL v10 = 1;
        }
      }
      while (!v10);
    }
    int v11 = *(_DWORD *)(a2 + 100);
    if (v11 != -1)
    {
      if ((v11 & 0x80000000) == 0)
      {
        if ((*(_DWORD *)(v5 + 100) & 0x80000000) == 0)
        {
          ClipperLib::Clipper::AddLocalMaxPoly(a1, a2, v5, (void *)(a2 + 48));
          uint64_t v12 = *a1;
          unint64_t v13 = (char *)a1 + *(void *)(*a1 - 24);
          uint64_t v15 = *(void *)(a2 + 128);
          uint64_t v14 = *(void *)(a2 + 136);
          if (*(_OWORD *)(a2 + 128) != 0)
          {
            if (v14)
            {
              double v16 = (void *)(v14 + 128);
              goto LABEL_46;
            }
LABEL_45:
            double v16 = v13 + 104;
LABEL_46:
            *double v16 = v15;
            if (v15) {
              *(void *)(v15 + 136) = v14;
            }
LABEL_52:
            *uint64_t v7 = 0;
            *(void *)(a2 + 136) = 0;
            uint64_t v12 = *a1;
            goto LABEL_53;
          }
          if (*((void *)v13 + 13) == a2) {
            goto LABEL_45;
          }
LABEL_53:
          uint64_t v25 = v12;
          goto LABEL_54;
        }
        if (!*(_DWORD *)(a2 + 88))
        {
          ClipperLib::Clipper::AddOutPt(a1, a2, (void *)(a2 + 48));
          *(_DWORD *)(a2 + 100) = -1;
LABEL_27:
          unint64_t v21 = (char *)a1 + *(void *)(*a1 - 24);
          uint64_t v23 = *(void *)(a2 + 128);
          uint64_t v22 = *(void *)(a2 + 136);
          if (*(_OWORD *)(a2 + 128) == 0)
          {
            if (*((void *)v21 + 13) != a2)
            {
LABEL_35:
              if ((*(_DWORD *)(v5 + 100) & 0x80000000) == 0)
              {
                ClipperLib::Clipper::AddOutPt(a1, v5, (void *)(a2 + 48));
                *(_DWORD *)(v5 + 100) = -1;
              }
              uint64_t v25 = *a1;
LABEL_54:
              uint64_t v17 = (char *)a1 + *(void *)(v25 - 24);
              uint64_t v19 = *(void *)(v5 + 128);
              uint64_t v20 = *(void *)(v5 + 136);
              uint64_t v18 = (void *)(v5 + 128);
              if (*(_OWORD *)(v5 + 128) == 0)
              {
                if (*((void *)v17 + 13) != v5) {
                  return;
                }
                goto LABEL_58;
              }
              goto LABEL_55;
            }
          }
          else if (v22)
          {
            uint64_t v24 = (void *)(v22 + 128);
LABEL_32:
            void *v24 = v23;
            if (v23) {
              *(void *)(v23 + 136) = v22;
            }
            *uint64_t v7 = 0;
            *(void *)(a2 + 136) = 0;
            goto LABEL_35;
          }
          uint64_t v24 = v21 + 104;
          goto LABEL_32;
        }
LABEL_63:
        exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
        ClipperLib::clipperException::clipperException(exception, "DoMaxima error");
      }
LABEL_23:
      if (!*(_DWORD *)(a2 + 88)) {
        goto LABEL_27;
      }
      goto LABEL_63;
    }
    if (*(_DWORD *)(v5 + 100) != -1) {
      goto LABEL_23;
    }
    uint64_t v12 = *a1;
    uint64_t v26 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v27 = *(void *)(a2 + 136);
    if (v27) {
      char v28 = 1;
    }
    else {
      char v28 = v8;
    }
    if (v28)
    {
      if (v27)
      {
        BOOL v29 = (uint64_t *)(v27 + 128);
        goto LABEL_50;
      }
    }
    else if (*((void *)v26 + 13) != a2)
    {
      goto LABEL_53;
    }
    BOOL v29 = (uint64_t *)(v26 + 104);
LABEL_50:
    *BOOL v29 = v6;
    if (v8) {
      *(void *)(v6 + 136) = v27;
    }
    goto LABEL_52;
  }
  if ((*(_DWORD *)(a2 + 100) & 0x80000000) == 0) {
    ClipperLib::Clipper::AddOutPt(a1, a2, (void *)(a2 + 48));
  }
  uint64_t v17 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v19 = *(void *)(a2 + 128);
  uint64_t v20 = *(void *)(a2 + 136);
  uint64_t v18 = (void *)(a2 + 128);
  if (*(_OWORD *)(a2 + 128) == 0)
  {
    if (*((void *)v17 + 13) != a2) {
      return;
    }
    goto LABEL_58;
  }
LABEL_55:
  if (!v20)
  {
LABEL_58:
    uint64_t v30 = v17 + 104;
    goto LABEL_59;
  }
  uint64_t v30 = (void *)(v20 + 128);
LABEL_59:
  void *v30 = v19;
  if (v19) {
    *(void *)(v19 + 136) = v20;
  }
  *uint64_t v18 = 0;
  v18[1] = 0;
}

void sub_1C46841E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ClipperLib::PointCount(uint64_t a1)
{
  uint64_t v1 = 0;
  if (a1)
  {
    uint64_t v2 = a1;
    do
    {
      uint64_t v1 = (v1 + 1);
      uint64_t v2 = *(void *)(v2 + 32);
    }
    while (v2 != a1);
  }
  return v1;
}

uint64_t std::vector<std::vector<ClipperLib::IntPoint>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(result, a2);
    v7[1] = v7[0] + v5;
    unint64_t v7[2] = v7[0] + v5;
    _OWORD v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<ClipperLib::IntPoint>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1C46842C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<ClipperLib::IntPoint>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(v3, a2);
    uint64_t v7 = &v6[24 * v5];
    BOOL v9 = &v6[24 * v8];
    int v11 = (char *)*a1;
    BOOL v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      BOOL v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<ClipperLib::PolyNode *>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    BOOL v9 = &v6[8 * v8];
    int v11 = (char *)*a1;
    BOOL v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      BOOL v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

__n128 ClipperLib::SwapIntersectNodes(long long *a1, long long *a2)
{
  uint64_t v2 = *((void *)a1 + 4);
  long long v4 = *a1;
  long long v3 = a1[1];
  *a1 = *a2;
  __n128 result = (__n128)a2[1];
  *((void *)a1 + 4) = *((void *)a2 + 4);
  a1[1] = (__int128)result;
  *a2 = v4;
  a2[1] = v3;
  *((void *)a2 + 4) = v2;
  return result;
}

BOOL ClipperLib::GetOverlap(ClipperLib *this, uint64_t a2, uint64_t a3, uint64_t a4, ClipperLib **a5, ClipperLib **a6, uint64_t *a7)
{
  if ((uint64_t)this >= a2)
  {
    if (a3 >= a4)
    {
      if (a2 <= a4) {
        uint64_t v11 = a4;
      }
      else {
        uint64_t v11 = a2;
      }
      *a5 = (ClipperLib *)v11;
      if (a3 >= (uint64_t)this) {
        uint64_t v8 = this;
      }
      else {
        uint64_t v8 = (ClipperLib *)a3;
      }
    }
    else
    {
      if (a2 <= a3) {
        uint64_t v9 = a3;
      }
      else {
        uint64_t v9 = a2;
      }
      *a5 = (ClipperLib *)v9;
      if (a4 >= (uint64_t)this) {
        uint64_t v8 = this;
      }
      else {
        uint64_t v8 = (ClipperLib *)a4;
      }
    }
  }
  else if (a3 >= a4)
  {
    if ((uint64_t)this <= a4) {
      BOOL v10 = (ClipperLib *)a4;
    }
    else {
      BOOL v10 = this;
    }
    *a5 = v10;
    if (a3 >= a2) {
      uint64_t v8 = (ClipperLib *)a2;
    }
    else {
      uint64_t v8 = (ClipperLib *)a3;
    }
  }
  else
  {
    if ((uint64_t)this <= a3) {
      uint64_t v7 = (ClipperLib *)a3;
    }
    else {
      uint64_t v7 = this;
    }
    *a5 = v7;
    if (a4 >= a2) {
      uint64_t v8 = (ClipperLib *)a2;
    }
    else {
      uint64_t v8 = (ClipperLib *)a4;
    }
  }
  *a6 = v8;
  return (uint64_t)*a5 < (uint64_t)v8;
}

void ClipperLib::DupOutPt()
{
}

uint64_t ClipperLib::JoinHorz(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = v5 <= v6;
  unsigned int v8 = *(void *)(a3 + 8) <= *(void *)(a4 + 8);
  if (v7 != v8)
  {
    uint64_t v9 = *a5;
    if (v5 <= v6)
    {
      do
      {
        BOOL v10 = a1;
        a1 = (void *)a1[4];
        uint64_t v11 = a1[1];
      }
      while (v11 <= v9 && v11 >= v10[1] && a1[2] == a5[1]);
      ClipperLib::DupOutPt();
    }
    do
    {
      uint64_t v12 = a1;
      a1 = (void *)a1[4];
      uint64_t v13 = a1[1];
    }
    while (v13 >= v9 && v13 <= v12[1] && a1[2] == a5[1]);
    ClipperLib::DupOutPt();
  }
  return v7 ^ v8;
}

uint64_t ClipperLib::Clipper::JoinPoints(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)*a2;
  uint64_t v5 = (void *)a2[1];
  unsigned int v8 = (uint64_t *)(*a2 + 8);
  uint64_t v7 = *v8;
  uint64_t v9 = *(void *)(*a2 + 16);
  BOOL v10 = a2 + 2;
  if (v9 != a2[3])
  {
    uint64_t v47 = (uint64_t)(v6 + 4);
    do
    {
      uint64_t v48 = *(void **)v47;
      uint64_t v50 = *(void *)(*(void *)v47 + 8);
      uint64_t v49 = *(void *)(*(void *)v47 + 16);
      uint64_t v47 = *(void *)v47 + 32;
    }
    while (v48 != v6 && v50 == v7 && v49 == v9);
    if (v49 <= v9
      && (long long v108 = *(_OWORD *)v8,
          uint64_t v109 = v8[2],
          long long v106 = *(_OWORD *)(v48 + 1),
          uint64_t v107 = v48[3],
          long long v104 = *(_OWORD *)v10,
          uint64_t v105 = a2[4],
          uint64_t v53 = *a1,
          ClipperLib::SlopesEqual(&v108, (uint64_t *)&v106, &v104, *((unsigned __int8 *)a1 + *(void *)(*a1 - 24) + 40))))
    {
      uint64_t v82 = a4;
      uint64_t v83 = v53;
      int v81 = 0;
    }
    else
    {
      uint64_t v48 = v6;
      do
      {
        uint64_t v48 = (void *)v48[5];
        uint64_t v54 = v48[2];
      }
      while (v48 != v6 && v48[1] == v7 && v54 == v9);
      if (v54 > v9) {
        return 0;
      }
      long long v102 = *(_OWORD *)v8;
      uint64_t v103 = v8[2];
      long long v100 = *(_OWORD *)(v48 + 1);
      uint64_t v101 = v48[3];
      long long v98 = *(_OWORD *)v10;
      uint64_t v99 = v10[2];
      uint64_t v57 = *a1;
      uint64_t result = ClipperLib::SlopesEqual(&v102, (uint64_t *)&v100, &v98, *((unsigned __int8 *)a1 + *(void *)(*a1 - 24) + 40));
      if (!result) {
        return result;
      }
      uint64_t v82 = a4;
      uint64_t v83 = v57;
      int v81 = 1;
    }
    int v59 = (long long *)(v5 + 1);
    uint64_t v60 = v5[1];
    uint64_t v61 = (uint64_t)(v5 + 4);
    uint64_t v62 = v5[2];
    do
    {
      uint64_t v63 = *(void **)v61;
      uint64_t v65 = *(void *)(*(void *)v61 + 8);
      uint64_t v64 = *(void *)(*(void *)v61 + 16);
      uint64_t v61 = *(void *)v61 + 32;
    }
    while (v65 == v60 && v64 == v62 && v63 != v5);
    if (v64 <= v62
      && (long long v96 = *v59,
          uint64_t v97 = v5[3],
          long long v94 = *(_OWORD *)(v63 + 1),
          uint64_t v95 = v63[3],
          long long v92 = *(_OWORD *)v10,
          uint64_t v93 = v10[2],
          ClipperLib::SlopesEqual(&v96, (uint64_t *)&v94, &v92, *((unsigned __int8 *)a1 + *(void *)(v83 - 24) + 40))))
    {
      int v68 = 0;
    }
    else
    {
      uint64_t v63 = v5;
      do
      {
        uint64_t v63 = (void *)v63[5];
        uint64_t v69 = v63[2];
      }
      while (v63[1] == v60 && v69 == v62 && v63 != v5);
      if (v69 > v62) {
        return 0;
      }
      long long v90 = *v59;
      uint64_t v91 = v5[3];
      long long v88 = *(_OWORD *)(v63 + 1);
      uint64_t v89 = v63[3];
      long long v86 = *(_OWORD *)v10;
      uint64_t v87 = v10[2];
      uint64_t result = ClipperLib::SlopesEqual(&v90, (uint64_t *)&v88, &v86, *((unsigned __int8 *)a1 + *(void *)(v83 - 24) + 40));
      if (!result) {
        return result;
      }
      int v68 = 1;
    }
    uint64_t result = 0;
    if (v48 == v63 || v48 == v6 || v63 == v5) {
      return result;
    }
    if (a3 != v82 || v81 != v68) {
      operator new();
    }
    return 0;
  }
  uint64_t v11 = (void *)*a2;
  if (*v10 == v7)
  {
    BOOL v12 = v7 == v5[1] && v9 == v5[2];
    uint64_t v11 = (void *)*a2;
    if (v12)
    {
      if (a3 == a4)
      {
        uint64_t v72 = (void *)*a2;
        while (1)
        {
          uint64_t v72 = (void *)v72[4];
          if (v72 == v6) {
            break;
          }
          uint64_t v73 = v72[2];
          if (v72[1] != v7 || v73 != v9) {
            goto LABEL_150;
          }
        }
        uint64_t v73 = *(void *)(*a2 + 16);
LABEL_150:
        long long v75 = (void *)a2[1];
        do
        {
          long long v75 = (void *)v75[4];
          if (v75 == v5)
          {
            if (v73 > v9) {
              goto LABEL_159;
            }
            return 0;
          }
          uint64_t v76 = v75[2];
        }
        while (v75[1] == v7 && v76 == v9);
        if (v73 > v9 == v76 <= v9) {
LABEL_159:
        }
          operator new();
      }
      return 0;
    }
  }
  do
  {
    uint64_t v13 = v11;
    uint64_t v11 = (void *)v11[5];
  }
  while (v11 != v6 && v11[2] == v9 && v11 != v5);
  do
  {
    uint64_t v16 = (uint64_t)v6;
    uint64_t v6 = (void *)v6[4];
  }
  while (v6 != v13 && v6[2] == v9 && v6 != v5);
  if (v6 == v13 || v6 == v5) {
    return 0;
  }
  uint64_t v20 = v13 + 2;
  uint64_t v21 = v5[2];
  uint64_t v22 = v5;
  do
  {
    uint64_t v23 = (uint64_t)v22;
    uint64_t v22 = (void *)v22[5];
  }
  while (v22 != (void *)v16 && v22[2] == v21 && v22 != v5);
  do
  {
    uint64_t v26 = (uint64_t)v5;
    uint64_t v5 = (void *)v5[4];
  }
  while (v5 != v13 && v5 != (void *)v23 && v5[2] == v21);
  if (v5 == (void *)v23 || v5 == v13) {
    return 0;
  }
  uint64_t v30 = v13[1];
  uint64_t v31 = *(void *)(v16 + 8);
  uint64_t v32 = *(void *)(v23 + 8);
  uint64_t v33 = *(void *)(v26 + 8);
  uint64_t v34 = v31 <= v33 ? *(void *)(v26 + 8) : *(void *)(v16 + 8);
  uint64_t v35 = v32 >= v30 ? v13[1] : *(void *)(v23 + 8);
  uint64_t v36 = v31 <= v32 ? *(void *)(v23 + 8) : *(void *)(v16 + 8);
  uint64_t v37 = v33 >= v30 ? v13[1] : *(void *)(v26 + 8);
  if (v32 >= v33) {
    uint64_t v37 = v35;
  }
  else {
    uint64_t v34 = v36;
  }
  uint64_t v38 = v30 <= v33 ? *(void *)(v26 + 8) : v13[1];
  uint64_t v39 = v32 >= v31 ? *(void *)(v16 + 8) : *(void *)(v23 + 8);
  uint64_t v40 = v30 <= v32 ? *(void *)(v23 + 8) : v13[1];
  uint64_t v41 = v33 >= v31 ? *(void *)(v16 + 8) : *(void *)(v26 + 8);
  if (v32 >= v33)
  {
    uint64_t v42 = v39;
  }
  else
  {
    uint64_t v38 = v40;
    uint64_t v42 = v41;
  }
  if (v30 < v31)
  {
    uint64_t v43 = v42;
  }
  else
  {
    uint64_t v38 = v34;
    uint64_t v43 = v37;
  }
  if (v38 >= v43) {
    return 0;
  }
  if (v30 < v38 || v30 > v43)
  {
    if (v32 < v38 || v32 > v43)
    {
      if (v31 < v38 || v31 > v43)
      {
        uint64_t v20 = (uint64_t *)(v26 + 16);
        uint64_t v44 = (int *)(v26 + 24);
        uint64_t v45 = (int *)(v26 + 28);
      }
      else
      {
        uint64_t v44 = (int *)(v16 + 24);
        uint64_t v45 = (int *)(v16 + 28);
        uint64_t v20 = (uint64_t *)(v16 + 16);
        uint64_t v33 = *(void *)(v16 + 8);
      }
    }
    else
    {
      uint64_t v20 = (uint64_t *)(v23 + 16);
      uint64_t v44 = (int *)(v23 + 24);
      uint64_t v45 = (int *)(v23 + 28);
      uint64_t v33 = *(void *)(v23 + 8);
    }
  }
  else
  {
    uint64_t v44 = (int *)(v13 + 3);
    uint64_t v45 = (int *)v13 + 7;
    uint64_t v33 = v13[1];
  }
  uint64_t v78 = *v20;
  int v79 = *v44;
  int v80 = *v45;
  *a2 = v13;
  a2[1] = v23;
  v110[0] = v33;
  v110[1] = v78;
  int v111 = v79;
  int v112 = v80;
  return ClipperLib::JoinHorz(v13, v16, v23, v26, v110);
}

uint64_t ClipperLib::Clipper::FixupFirstLefts1(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(*(void *)result - 24);
  uint64_t v5 = *(void *)(result + v4 + 80);
  if (*(void *)(result + v4 + 88) != v5)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(v5 + 8 * v9);
      for (uint64_t i = *(void *)(v10 + 8); i; uint64_t i = *(void *)(i + 8))
      {
        if (*(void *)(i + 24)) {
          break;
        }
      }
      if (i == a2)
      {
        uint64_t v12 = *(void *)(v10 + 24);
        if (v12)
        {
          uint64_t v13 = *(void **)(a3 + 24);
          uint64_t v14 = *(void *)(v10 + 24);
          while (1)
          {
            uint64_t result = ClipperLib::PointInPolygon((void *)(v14 + 8), v13);
            if ((result & 0x80000000) == 0) {
              break;
            }
            uint64_t v14 = *(void *)(v14 + 32);
            if (v14 == v12) {
              goto LABEL_13;
            }
          }
          if (!result) {
            goto LABEL_14;
          }
LABEL_13:
          *(void *)(v10 + 8) = a3;
          uint64_t v4 = *(void *)(v3 - 24);
        }
      }
LABEL_14:
      ++v9;
      uint64_t v5 = *(void *)(v8 + v4 + 80);
    }
    while (v9 < (*(void *)(v8 + v4 + 88) - v5) >> 3);
  }
  return result;
}

uint64_t ClipperLib::Clipper::FixupFirstLefts2(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *(void *)result;
  uint64_t v21 = *(void *)(a3 + 8);
  uint64_t v3 = *(void *)(*(void *)result - 24);
  uint64_t v4 = *(void *)(result + v3 + 80);
  if (*(void *)(result + v3 + 88) != v4)
  {
    uint64_t v7 = result;
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v4 + 8 * v8);
      uint64_t v10 = *(void *)(v9 + 24);
      if (v9 != a2 && v9 != a3 && v10 != 0)
      {
        uint64_t v13 = *(void *)(v9 + 8);
        if (v13)
        {
          uint64_t v14 = *(void *)(v9 + 8);
          do
          {
            if (*(void *)(v14 + 24)) {
              break;
            }
            uint64_t v14 = *(void *)(v14 + 8);
          }
          while (v14);
        }
        else
        {
          uint64_t v14 = 0;
        }
        if (v14 == a3 || v14 == v21 || v14 == a2)
        {
          uint64_t v15 = *(void **)(a2 + 24);
          uint64_t v16 = *(void *)(v9 + 24);
          while (1)
          {
            uint64_t result = ClipperLib::PointInPolygon((void *)(v16 + 8), v15);
            if ((result & 0x80000000) == 0) {
              break;
            }
            uint64_t v16 = *(void *)(v16 + 32);
            if (v16 == v10)
            {
              uint64_t v17 = a2;
LABEL_29:
              *(void *)(v9 + 8) = v17;
              uint64_t v3 = *(void *)(v20 - 24);
              goto LABEL_30;
            }
          }
          uint64_t v17 = a2;
          if (result) {
            goto LABEL_29;
          }
          uint64_t v18 = *(void **)(a3 + 24);
          uint64_t v19 = v10;
          while (1)
          {
            uint64_t result = ClipperLib::PointInPolygon((void *)(v19 + 8), v18);
            if ((result & 0x80000000) == 0) {
              break;
            }
            uint64_t v19 = *(void *)(v19 + 32);
            if (v19 == v10)
            {
              uint64_t v17 = a3;
              goto LABEL_29;
            }
          }
          uint64_t v17 = a3;
          if (result) {
            goto LABEL_29;
          }
          uint64_t v17 = v21;
          if (v13 == a2) {
            goto LABEL_29;
          }
          uint64_t v17 = v21;
          if (v13 == a3) {
            goto LABEL_29;
          }
        }
      }
LABEL_30:
      ++v8;
      uint64_t v4 = *(void *)(v7 + v3 + 80);
    }
    while (v8 < (*(void *)(v7 + v3 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t *ClipperLib::Clipper::FixupFirstLefts3(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result;
  uint64_t v4 = *(void *)(*result - 24);
  uint64_t v5 = *(uint64_t *)((char *)result + v4 + 80);
  if (*(uint64_t *)((char *)result + v4 + 88) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (*(void *)(v7 + 8) == a2 && *(void *)(v7 + 24) != 0)
      {
        *(void *)(v7 + 8) = a3;
        uint64_t v4 = *(void *)(v3 - 24);
      }
      ++v6;
      uint64_t v5 = *(uint64_t *)((char *)result + v4 + 80);
    }
    while (v6 < (*(uint64_t *)((char *)result + v4 + 88) - v5) >> 3);
  }
  return result;
}

double ClipperLib::GetUnitNormal(ClipperLib *this, const IntPoint *a2, const IntPoint *a3)
{
  uint64_t v3 = *((void *)a2 + 1);
  uint64_t v4 = *((void *)this + 1);
  BOOL v5 = *(void *)a2 == *(void *)this && v3 == v4;
  double result = 0.0;
  if (!v5) {
    return 1.0
  }
         / sqrt((double)(v3 - v4) * (double)(v3 - v4)+ (double)(uint64_t)(*(void *)a2 - *(void *)this) * (double)(uint64_t)(*(void *)a2 - *(void *)this))* (double)(v3 - v4);
  return result;
}

double ClipperLib::ClipperOffset::ClipperOffset(ClipperLib::ClipperOffset *this, double a2, double a3)
{
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  __asm { FMOV            V3.2S, #-1.0 }
  *((void *)this + 22) = _D3;
  *((void *)this + 23) = &unk_1F1FB0428;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 237) = 0u;
  *(double *)this = a2;
  *((double *)this + 1) = a3;
  double result = NAN;
  *((_OWORD *)this + 10) = xmmword_1C482A290;
  return result;
}

{
  double result;

  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  __asm { FMOV            V3.2S, #-1.0 }
  *((void *)this + 22) = _D3;
  *((void *)this + 23) = &unk_1F1FB0428;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 237) = 0u;
  *(double *)this = a2;
  *((double *)this + 1) = a3;
  double result = NAN;
  *((_OWORD *)this + 10) = xmmword_1C482A290;
  return result;
}

void ClipperLib::ClipperOffset::~ClipperOffset(ClipperLib::ClipperOffset *this)
{
  ClipperLib::ClipperOffset::Clear(this);
  ClipperLib::PolyNode::~PolyNode((ClipperLib::ClipperOffset *)((char *)this + 184));
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
  BOOL v5 = (void **)((char *)this + 16);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void *ClipperLib::ClipperOffset::Clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[27];
  uint64_t v3 = this[28];
  if ((int)((unint64_t)(v3 - v2) >> 3) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[27];
        uint64_t v3 = v1[28];
      }
      ++v4;
    }
    while (v4 < (int)((unint64_t)(v3 - v2) >> 3));
  }
  v1[28] = v2;
  v1[20] = -1;
  return this;
}

void ClipperLib::ClipperOffset::AddPath(uint64_t a1, void *a2)
{
  if ((int)(-1431655765 * ((a2[1] - *a2) >> 3)) >= 1) {
    operator new();
  }
}

void ClipperLib::ClipperOffset::AddPaths(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      ClipperLib::ClipperOffset::AddPath(a1, (void *)(v2 + v5));
      ++v6;
      uint64_t v2 = *a2;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
}

void ClipperLib::ClipperOffset::FixOrientations(ClipperLib::ClipperOffset *this)
{
  uint64_t v2 = *((void *)this + 20);
  if (v2 < 0)
  {
    uint64_t v3 = *((void *)this + 27);
  }
  else
  {
    uint64_t v3 = *((void *)this + 27);
    if (ClipperLib::Area((uint64_t *)(*(void *)(v3 + 8 * (int)v2) + 8)) < 0.0)
    {
      uint64_t v4 = *((void *)this + 28);
      if ((int)((unint64_t)(v4 - v3) >> 3) >= 1)
      {
        uint64_t v5 = 0;
        do
        {
          uint64_t v6 = *(void *)(v3 + 8 * v5);
          int v7 = *(_DWORD *)(v6 + 76);
          if (!v7 || v7 == 1 && ClipperLib::Area((uint64_t *)(v6 + 8)) >= 0.0)
          {
            unint64_t v8 = *(void *)(v6 + 8);
            uint64_t v9 = *(void *)(v6 + 16);
            unint64_t v10 = v9 - 24;
            if (v8 != v9 && v10 > v8)
            {
              unint64_t v12 = v8 + 24;
              do
              {
                uint64_t v13 = *(void *)(v12 - 8);
                long long v14 = *(_OWORD *)(v12 - 24);
                uint64_t v15 = *(void *)(v10 + 16);
                *(_OWORD *)(v12 - 24) = *(_OWORD *)v10;
                *(void *)(v12 - 8) = v15;
                *(_OWORD *)unint64_t v10 = v14;
                *(void *)(v10 + 16) = v13;
                v10 -= 24;
                BOOL v16 = v12 >= v10;
                v12 += 24;
              }
              while (!v16);
              uint64_t v3 = *((void *)this + 27);
              uint64_t v4 = *((void *)this + 28);
            }
          }
          ++v5;
        }
        while (v5 < (int)((unint64_t)(v4 - v3) >> 3));
      }
      return;
    }
  }
  uint64_t v17 = *((void *)this + 28);
  if ((int)((unint64_t)(v17 - v3) >> 3) >= 1)
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(void *)(v3 + 8 * v18);
      if (*(_DWORD *)(v19 + 76) == 1 && ClipperLib::Area((uint64_t *)(v19 + 8)) < 0.0)
      {
        unint64_t v20 = *(void *)(v19 + 8);
        uint64_t v21 = *(void *)(v19 + 16);
        unint64_t v22 = v21 - 24;
        if (v20 != v21 && v22 > v20)
        {
          unint64_t v24 = v20 + 24;
          do
          {
            uint64_t v25 = *(void *)(v24 - 8);
            long long v26 = *(_OWORD *)(v24 - 24);
            uint64_t v27 = *(void *)(v22 + 16);
            *(_OWORD *)(v24 - 24) = *(_OWORD *)v22;
            *(void *)(v24 - 8) = v27;
            *(_OWORD *)unint64_t v22 = v26;
            *(void *)(v22 + 16) = v25;
            v22 -= 24;
            BOOL v16 = v24 >= v22;
            v24 += 24;
          }
          while (!v16);
          uint64_t v3 = *((void *)this + 27);
          uint64_t v17 = *((void *)this + 28);
        }
      }
      ++v18;
    }
    while (v18 < (int)((unint64_t)(v17 - v3) >> 3));
  }
}

__n128 ClipperLib::ReversePath(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  unint64_t v3 = v2 - 24;
  if (*a1 != v2 && v3 > v1)
  {
    unint64_t v5 = v1 + 24;
    do
    {
      uint64_t v6 = *(void *)(v5 - 8);
      __n128 result = *(__n128 *)(v5 - 24);
      uint64_t v8 = *(void *)(v3 + 16);
      *(_OWORD *)(v5 - 24) = *(_OWORD *)v3;
      *(void *)(v5 - 8) = v8;
      *(__n128 *)unint64_t v3 = result;
      *(void *)(v3 + 16) = v6;
      v3 -= 24;
      BOOL v9 = v5 >= v3;
      v5 += 24;
    }
    while (!v9);
  }
  return result;
}

void ClipperLib::ClipperOffset::Execute(uint64_t *a1, uint64_t *a2, double a3)
{
  std::vector<std::vector<ClipperLib::IntPoint>>::__clear[abi:ne180100](a2);
  ClipperLib::ClipperOffset::FixOrientations((ClipperLib::ClipperOffset *)a1);
  ClipperLib::ClipperOffset::DoOffset((ClipperLib::ClipperOffset *)a1, a3);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v52 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v30 = &off_1F1FB03A8;
  *(_OWORD *)uint64_t v31 = 0u;
  *(_OWORD *)uint64_t v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v35 = 0;
  v36[0] = v36;
  v36[1] = v36;
  int v36[2] = 0;
  char v37 = 0;
  char v44 = 0;
  char v38 = 0;
  char v39 = 0;
  __int16 v48 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = off_1F1FB03F0;
  ClipperLib::ClipperBase::AddPaths((uint64_t)&v41, a1 + 2, 0, 1);
  if (a3 <= 0.0)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    uint64_t v6 = (ClipperLib::ClipperBase *)((char *)&v31[-1] + (void)*(v30 - 3));
    ClipperLib::ClipperBase::GetBounds(v6, (uint64_t)&v28);
    int v7 = operator new(0x60uLL);
    uint64_t v8 = v7;
    uint64_t v9 = 0;
    v27[0] = v7;
    v27[2] = v7 + 12;
    __asm { FMOV            V0.2S, #-1.0 }
    do
    {
      uint64_t v15 = &v7[v9];
      *uint64_t v15 = 0;
      v15[1] = 0;
      _OWORD v15[2] = _D0;
      v9 += 3;
    }
    while (v9 != 12);
    v27[1] = v7 + 12;
    uint64_t v16 = *((void *)&v28 + 1);
    uint64_t v17 = v28 - 10;
    uint64_t v18 = v29;
    uint64_t v19 = *((void *)&v29 + 1) + 10;
    *int v7 = v28 - 10;
    v7[1] = v19;
    v18 += 10;
    _OWORD v7[3] = v18;
    v7[4] = v19;
    unint64_t v7[2] = _D0;
    void v7[5] = _D0;
    v16 -= 10;
    void v7[6] = v18;
    v7[7] = v16;
    unsigned char v7[8] = _D0;
    v7[9] = v17;
    v7[10] = v16;
    v7[11] = _D0;
    ClipperLib::ClipperBase::AddPath((uint64_t)v6, (uint64_t)v27, 0, 1);
    char v38 = 1;
    ClipperLib::Clipper::Execute((uint64_t)&v30, 1, a2, 3, 3);
    uint64_t v20 = *a2;
    uint64_t v21 = a2[1];
    if (v21 != *a2)
    {
      if (v20 + 24 != v21)
      {
        do
        {
          uint64_t v22 = v20 + 24;
          std::vector<ClipperLib::IntPoint>::__move_assign(v20, (__n128 *)(v20 + 24));
          uint64_t v23 = v20 + 48;
          v20 += 24;
        }
        while (v23 != v21);
        uint64_t v21 = a2[1];
        uint64_t v20 = v22;
      }
      if (v21 != v20)
      {
        uint64_t v24 = v21;
        do
        {
          long long v26 = *(void **)(v24 - 24);
          v24 -= 24;
          uint64_t v25 = v26;
          if (v26)
          {
            *(void *)(v21 - 16) = v25;
            operator delete(v25);
          }
          uint64_t v21 = v24;
        }
        while (v24 != v20);
      }
      a2[1] = v20;
    }
    operator delete(v8);
  }
  else
  {
    ClipperLib::Clipper::Execute((uint64_t)&v30, 1, a2, 2, 2);
  }
  uint64_t v30 = &off_1F1FB03A8;
  uint64_t v41 = off_1F1FB03F0;
  std::__list_imp<long long>::clear(v36);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v32[1])
  {
    *(void **)&long long v33 = v32[1];
    operator delete(v32[1]);
  }
  if (v31[0])
  {
    v31[1] = v31[0];
    operator delete(v31[0]);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v41);
}

void sub_1C4685FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)va);
  _Unwind_Resume(a1);
}

unint64_t ClipperLib::ClipperOffset::DoOffset(ClipperLib::ClipperOffset *this, double a2)
{
  unint64_t v3 = (uint64_t *)((char *)this + 16);
  std::vector<std::vector<ClipperLib::IntPoint>>::__clear[abi:ne180100]((uint64_t *)this + 2);
  *((double *)this + 14) = a2;
  if (a2 > -1.0e-20 && a2 < 1.0e-20)
  {
    unint64_t result = std::vector<std::vector<ClipperLib::IntPoint>>::reserve(v3, (int)((uint64_t)(*((void *)this + 28) - *((void *)this + 27)) >> 3));
    uint64_t v6 = *((void *)this + 27);
    uint64_t v5 = *((void *)this + 28);
    if ((int)((unint64_t)(v5 - v6) >> 3) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(v6 + 8 * v7);
        if (!*(_DWORD *)(v8 + 76))
        {
          uint64_t v9 = v8 + 8;
          unint64_t v10 = *((void *)this + 3);
          if (v10 >= *((void *)this + 4))
          {
            unint64_t result = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v3, v9);
          }
          else
          {
            std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)v3, v9);
            unint64_t result = v10 + 24;
          }
          *((void *)this + 3) = result;
          uint64_t v6 = *((void *)this + 27);
          uint64_t v5 = *((void *)this + 28);
        }
        ++v7;
      }
      while (v7 < (int)((unint64_t)(v5 - v6) >> 3));
    }
    return result;
  }
  double v11 = 0.5;
  if (*(double *)this > 2.0) {
    double v11 = 2.0 / (*(double *)this * *(double *)this);
  }
  *((double *)this + 18) = v11;
  double v12 = *((double *)this + 1);
  double v13 = fabs(a2);
  double v14 = v13 * 0.25;
  if (v12 <= v13 * 0.25) {
    double v14 = *((double *)this + 1);
  }
  if (v12 <= 0.0) {
    double v15 = 0.25;
  }
  else {
    double v15 = v14;
  }
  double v16 = 3.14159265 / acos(1.0 - v15 / v13);
  if (v16 <= v13 * 3.14159265) {
    double v17 = v16;
  }
  else {
    double v17 = v13 * 3.14159265;
  }
  __double2 v18 = __sincos_stret(6.28318531 / v17);
  *((__double2 *)this + 8) = v18;
  *((double *)this + 19) = v17 / 6.28318531;
  if (a2 < 0.0) {
    *((double *)this + 16) = -v18.__sinval;
  }
  unint64_t result = std::vector<std::vector<ClipperLib::IntPoint>>::reserve(v3, (int)((uint64_t)(*((void *)this + 28) - *((void *)this + 27)) >> 2) & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v20 = *((void *)this + 27);
  if ((int)((unint64_t)(*((void *)this + 28) - v20) >> 3) >= 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = (int64x2_t **)((char *)this + 40);
    float64x2_t v204 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v205 = (void **)((char *)this + 64);
    uint64_t v23 = (int64x2_t **)((char *)this + 80);
    __asm
    {
      FMOV            V1.2D, #0.5
      FMOV            V0.2D, #-0.5
    }
    int8x16_t v202 = _Q0;
    int8x16_t v203 = _Q1;
    __asm { FMOV            V12.2S, #-1.0 }
    int64_t v194 = v3;
    do
    {
      uint64_t v31 = *(void *)(v20 + 8 * v21);
      if (v22 != (int64x2_t **)(v31 + 8)) {
        unint64_t result = (unint64_t)std::vector<ClipperLib::IntPoint>::__assign_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>((char *)this + 40, *(char **)(v31 + 8), *(void *)(v31 + 16), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v31 + 16) - *(void *)(v31 + 8)) >> 3));
      }
      uint64_t v32 = (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3;
      unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * v32;
      if (!(-1431655765 * v32)) {
        goto LABEL_266;
      }
      if (a2 <= 0.0)
      {
        if ((int)v33 < 3 || *(_DWORD *)(v31 + 76)) {
          goto LABEL_266;
        }
        *((void *)this + 9) = *((void *)this + 8);
      }
      else
      {
        uint64_t v34 = (int64x2_t *)*((void *)this + 8);
        *((void *)this + 9) = v34;
        if (v33 == 1)
        {
          if (*(_DWORD *)(v31 + 72) == 1)
          {
            uint64_t v35 = (void **)((char *)this + 64);
            if (v17 >= 1.0)
            {
              uint64_t v36 = 1;
              float64x2_t v37 = (float64x2_t)xmmword_1C482A2A0;
              do
              {
                float64x2_t v38 = vmlaq_f64(vcvtq_f64_s64(**v22), v204, v37);
                int64x2_t v39 = vcvtq_s64_f64(vaddq_f64(v38, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v38), v202, v203)));
                if (v34 >= *v23)
                {
                  uint64_t v40 = (int64x2_t *)*v205;
                  unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (unsigned char *)*v205) >> 3);
                  unint64_t v42 = v41 + 1;
                  if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
                  }
                  float64x2_t v197 = v37;
                  if (0x5555555555555556 * (((char *)*v23 - (char *)v40) >> 3) > v42) {
                    unint64_t v42 = 0x5555555555555556 * (((char *)*v23 - (char *)v40) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)*v23 - (char *)v40) >> 3) >= 0x555555555555555) {
                    unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v43 = v42;
                  }
                  if (v43)
                  {
                    *(int64x2_t *)uint64_t v195 = v39;
                    char v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v43);
                    int64x2_t v39 = *(int64x2_t *)v195;
                    uint64_t v45 = v44;
                    uint64_t v40 = (int64x2_t *)*((void *)this + 8);
                    uint64_t v34 = (int64x2_t *)*((void *)this + 9);
                  }
                  else
                  {
                    uint64_t v45 = 0;
                  }
                  uint64_t v46 = (int64x2_t *)&v45[24 * v41];
                  *uint64_t v46 = v39;
                  v46[1].i64[0] = _D12;
                  uint64_t v47 = v46;
                  if (v34 != v40)
                  {
                    do
                    {
                      int64x2_t v48 = *(int64x2_t *)((char *)v34 - 24);
                      v47[-1].i64[1] = v34[-1].i64[1];
                      *(int64x2_t *)((char *)v47 - 24) = v48;
                      uint64_t v47 = (int64x2_t *)((char *)v47 - 24);
                      uint64_t v34 = (int64x2_t *)((char *)v34 - 24);
                    }
                    while (v34 != v40);
                    uint64_t v40 = (int64x2_t *)*v205;
                  }
                  uint64_t v34 = (int64x2_t *)((char *)v46 + 24);
                  *((void *)this + 8) = v47;
                  *((void *)this + 9) = (char *)v46 + 24;
                  *((void *)this + 10) = &v45[24 * v43];
                  if (v40) {
                    operator delete(v40);
                  }
                  float64x2_t v37 = v197;
                }
                else
                {
                  *uint64_t v34 = v39;
                  v34[1].i64[0] = _D12;
                  uint64_t v34 = (int64x2_t *)((char *)v34 + 24);
                }
                *((void *)this + 9) = v34;
                float64x2_t v49 = *((float64x2_t *)this + 8);
                float64x2_t v50 = (float64x2_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL);
                v49.f64[0] = -v49.f64[0];
                ++v36;
                float64x2_t v37 = vmlaq_n_f64(vmulq_laneq_f64(v49, v37, 1), v50, v37.f64[0]);
              }
              while (v17 >= (double)v36);
            }
          }
          else
          {
            int v83 = 0;
            double v84 = -1.0;
            double v85 = -1.0;
            uint64_t v35 = (void **)((char *)this + 64);
            do
            {
              double v86 = (double)(*v22)->i64[0] + v84 * a2;
              if (v86 >= 0.0) {
                double v87 = 0.5;
              }
              else {
                double v87 = -0.5;
              }
              uint64_t v88 = (uint64_t)(v86 + v87);
              double v89 = (double)(*v22)->i64[1] + v85 * a2;
              if (v89 >= 0.0) {
                double v90 = 0.5;
              }
              else {
                double v90 = -0.5;
              }
              uint64_t v91 = (uint64_t)(v89 + v90);
              if (v34 >= *v23)
              {
                long long v92 = (int64x2_t *)*v35;
                unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (unsigned char *)*v35) >> 3);
                unint64_t v94 = v93 + 1;
                if (v93 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_269;
                }
                if (0x5555555555555556 * (((char *)*v23 - (char *)v92) >> 3) > v94) {
                  unint64_t v94 = 0x5555555555555556 * (((char *)*v23 - (char *)v92) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * (((char *)*v23 - (char *)v92) >> 3) >= 0x555555555555555) {
                  unint64_t v95 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v95 = v94;
                }
                if (v95)
                {
                  long long v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v95);
                  long long v92 = (int64x2_t *)*((void *)this + 8);
                  uint64_t v34 = (int64x2_t *)*((void *)this + 9);
                }
                else
                {
                  long long v96 = 0;
                }
                uint64_t v97 = (uint64_t *)&v96[24 * v93];
                *uint64_t v97 = v88;
                v97[1] = v91;
                v97[2] = _D12;
                long long v98 = v97;
                if (v34 == v92)
                {
                  uint64_t v35 = (void **)((char *)this + 64);
                }
                else
                {
                  uint64_t v35 = (void **)((char *)this + 64);
                  do
                  {
                    long long v99 = *(long long *)((char *)&v34[-2] + 8);
                    *(v98 - 1) = v34[-1].i64[1];
                    *(_OWORD *)(v98 - 3) = v99;
                    v98 -= 3;
                    uint64_t v34 = (int64x2_t *)((char *)v34 - 24);
                  }
                  while (v34 != v92);
                  long long v92 = (int64x2_t *)*v205;
                }
                uint64_t v34 = (int64x2_t *)(v97 + 3);
                *((void *)this + 8) = v98;
                *((void *)this + 9) = v97 + 3;
                *((void *)this + 10) = &v96[24 * v95];
                if (v92) {
                  operator delete(v92);
                }
              }
              else
              {
                v34->i64[0] = v88;
                v34->i64[1] = v91;
                v34[1].i64[0] = _D12;
                uint64_t v34 = (int64x2_t *)((char *)v34 + 24);
              }
              *((void *)this + 9) = v34;
              if (v85 >= 0.0) {
                double v100 = v85;
              }
              else {
                double v100 = 1.0;
              }
              if (v85 >= 0.0) {
                double v101 = -1.0;
              }
              else {
                double v101 = v84;
              }
              if (v84 < 0.0)
              {
                double v84 = 1.0;
              }
              else
              {
                double v85 = v100;
                double v84 = v101;
              }
              ++v83;
            }
            while (v83 != 4);
          }
          unint64_t v102 = *((void *)this + 3);
          if (v102 >= *((void *)this + 4))
          {
            unint64_t result = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v194, (uint64_t)v35);
          }
          else
          {
            std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)v194, (uint64_t)v35);
            unint64_t result = v102 + 24;
          }
          *((void *)this + 3) = result;
          goto LABEL_266;
        }
      }
      uint64_t v51 = *((void *)this + 11);
      *((void *)this + 12) = v51;
      if ((int)v33 > (unint64_t)((*((void *)this + 13) - v51) >> 4))
      {
        if (((v33 << 32) & 0x8000000000000000) != 0) {
          goto LABEL_268;
        }
        uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>((int)v33);
        long long v55 = (char *)*((void *)this + 11);
        uint64_t v54 = (char *)*((void *)this + 12);
        uint64_t v56 = v52;
        if (v54 != v55)
        {
          do
          {
            *((_OWORD *)v56 - 1) = *((_OWORD *)v54 - 1);
            v56 -= 16;
            v54 -= 16;
          }
          while (v54 != v55);
          uint64_t v54 = (char *)*((void *)this + 11);
        }
        *((void *)this + 11) = v56;
        *((void *)this + 12) = v52;
        *((void *)this + 13) = &v52[16 * v53];
        if (v54) {
          operator delete(v54);
        }
      }
      uint64_t v57 = (v33 - 1);
      int v196 = v33 - 2;
      if ((int)v33 >= 2)
      {
        uint64_t v58 = 0;
        int v59 = (double *)*((void *)this + 12);
        do
        {
          double UnitNormal = ClipperLib::GetUnitNormal((ClipperLib *)(*((void *)this + 5) + 24 * v58), (const IntPoint *)(*((void *)this + 5) + 24 * v58 + 24), v19);
          double v62 = UnitNormal;
          uint64_t v63 = v61;
          unint64_t v64 = *((void *)this + 13);
          if ((unint64_t)v59 >= v64)
          {
            uint64_t v65 = (double *)*((void *)this + 11);
            uint64_t v66 = ((char *)v59 - (char *)v65) >> 4;
            unint64_t v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 60) {
              goto LABEL_268;
            }
            uint64_t v68 = v64 - (void)v65;
            if (v68 >> 3 > v67) {
              unint64_t v67 = v68 >> 3;
            }
            _CF = (unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0;
            unint64_t v69 = 0xFFFFFFFFFFFFFFFLL;
            if (!_CF) {
              unint64_t v69 = v67;
            }
            if (v69)
            {
              unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v69);
              uint64_t v65 = (double *)*((void *)this + 11);
              int v59 = (double *)*((void *)this + 12);
            }
            else
            {
              uint64_t v70 = 0;
            }
            uint64_t v71 = (void *)(v69 + 16 * v66);
            *(double *)uint64_t v71 = v62;
            v71[1] = v63;
            uint64_t v72 = v71;
            if (v59 != v65)
            {
              do
              {
                *((_OWORD *)v72 - 1) = *((_OWORD *)v59 - 1);
                v72 -= 2;
                v59 -= 2;
              }
              while (v59 != v65);
              uint64_t v65 = (double *)*((void *)this + 11);
            }
            int v59 = (double *)(v71 + 2);
            *((void *)this + 11) = v72;
            *((void *)this + 12) = v71 + 2;
            *((void *)this + 13) = v69 + 16 * v70;
            if (v65) {
              operator delete(v65);
            }
          }
          else
          {
            double *v59 = UnitNormal;
            *((void *)v59 + 1) = v61;
            v59 += 2;
          }
          ++v58;
          *((void *)this + 12) = v59;
        }
        while (v58 != v57);
      }
      if (*(_DWORD *)(v31 + 76) >= 2u)
      {
        uint64_t v79 = *((void *)this + 11);
        uint64_t v78 = (void *)*((void *)this + 12);
        int v80 = (_OWORD *)(v79 + ((uint64_t)((v33 << 32) - 0x200000000) >> 28));
        *(_OWORD *)uint64_t v207 = *v80;
        unint64_t v81 = *((void *)this + 13);
        if ((unint64_t)v78 < v81)
        {
          *(_OWORD *)uint64_t v78 = *v80;
          goto LABEL_86;
        }
        uint64_t v109 = ((uint64_t)v78 - v79) >> 4;
        unint64_t v110 = v109 + 1;
        if ((unint64_t)(v109 + 1) >> 60) {
LABEL_268:
        }
          std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
        uint64_t v111 = v81 - v79;
        if (v111 >> 3 > v110) {
          unint64_t v110 = v111 >> 3;
        }
        if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v112 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v112 = v110;
        }
        if (v112) {
          unint64_t v112 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v112);
        }
        else {
          uint64_t v113 = 0;
        }
        long long v116 = (_OWORD *)(v112 + 16 * v109);
        *long long v116 = *(_OWORD *)v207;
        uint64_t v118 = (char *)*((void *)this + 11);
        uint64_t v117 = (char *)*((void *)this + 12);
        long long v119 = v116;
        if (v117 != v118)
        {
          do
          {
            *--long long v119 = *((_OWORD *)v117 - 1);
            v117 -= 16;
          }
          while (v117 != v118);
          uint64_t v117 = (char *)*((void *)this + 11);
        }
        uint64_t v82 = v116 + 1;
        *((void *)this + 11) = v119;
        *((void *)this + 12) = v116 + 1;
        *((void *)this + 13) = v112 + 16 * v113;
        if (v117)
        {
          uint64_t v103 = v117;
LABEL_153:
          operator delete(v103);
        }
      }
      else
      {
        double v73 = ClipperLib::GetUnitNormal((ClipperLib *)(*((void *)this + 5) + 24 * (int)v57), *((const IntPoint **)this + 5), v19);
        double v75 = v73;
        uint64_t v76 = v74;
        uint64_t v78 = (void *)*((void *)this + 12);
        unint64_t v77 = *((void *)this + 13);
        if ((unint64_t)v78 < v77)
        {
          *(double *)uint64_t v78 = v73;
          v78[1] = v74;
LABEL_86:
          uint64_t v82 = v78 + 2;
          goto LABEL_154;
        }
        uint64_t v103 = (void *)*((void *)this + 11);
        uint64_t v104 = ((char *)v78 - (char *)v103) >> 4;
        unint64_t v105 = v104 + 1;
        if ((unint64_t)(v104 + 1) >> 60) {
          goto LABEL_268;
        }
        uint64_t v106 = v77 - (void)v103;
        if (v106 >> 3 > v105) {
          unint64_t v105 = v106 >> 3;
        }
        _CF = (unint64_t)v106 >= 0x7FFFFFFFFFFFFFF0;
        unint64_t v107 = 0xFFFFFFFFFFFFFFFLL;
        if (!_CF) {
          unint64_t v107 = v105;
        }
        if (v107)
        {
          unint64_t v107 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v107);
          uint64_t v103 = (void *)*((void *)this + 11);
          uint64_t v78 = (void *)*((void *)this + 12);
        }
        else
        {
          uint64_t v108 = 0;
        }
        unint64_t v114 = (void *)(v107 + 16 * v104);
        *(double *)unint64_t v114 = v75;
        v114[1] = v76;
        long long v115 = v114;
        if (v78 != v103)
        {
          do
          {
            *((_OWORD *)v115 - 1) = *((_OWORD *)v78 - 1);
            v115 -= 2;
            v78 -= 2;
          }
          while (v78 != v103);
          uint64_t v103 = (void *)*((void *)this + 11);
        }
        uint64_t v82 = v114 + 2;
        *((void *)this + 11) = v115;
        *((void *)this + 12) = v114 + 2;
        *((void *)this + 13) = v107 + 16 * v108;
        if (v103) {
          goto LABEL_153;
        }
      }
LABEL_154:
      *((void *)this + 12) = v82;
      int v120 = *(_DWORD *)(v31 + 76);
      if (v120 == 1)
      {
        v207[0] = v33 - 1;
        if ((int)v33 >= 1)
        {
          int v125 = 0;
          do
            ClipperLib::ClipperOffset::OffsetPoint(this, v125++, v207, *(_DWORD *)(v31 + 72));
          while (v33 != v125);
        }
        unint64_t v126 = *((void *)this + 3);
        if (v126 >= *((void *)this + 4))
        {
          unint64_t v127 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v194, (uint64_t)v205);
        }
        else
        {
          std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)v194, (uint64_t)v205);
          unint64_t v127 = v126 + 24;
        }
        *((void *)this + 3) = v127;
        *((void *)this + 9) = *((void *)this + 8);
        long long v134 = (float64x2_t *)*((void *)this + 11);
        float64x2_t v135 = v134[(int)v57];
        if ((int)v33 > 1)
        {
          unint64_t v136 = (v33 - 1);
          do
          {
            BOOL v137 = v136 > 1;
            v134[v136] = vnegq_f64(v134[(v136 - 1)]);
            --v136;
          }
          while (v137);
        }
        *long long v134 = vnegq_f64(v135);
        v207[0] = 0;
        if ((int)v33 >= 1)
        {
          do
          {
            ClipperLib::ClipperOffset::OffsetPoint(this, v57, v207, *(_DWORD *)(v31 + 72));
            LODWORD(v57) = v57 - 1;
          }
          while (v57 != -1);
          unint64_t v127 = *((void *)this + 3);
        }
        if (v127 >= *((void *)this + 4))
        {
          unint64_t result = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v194, (uint64_t)v205);
        }
        else
        {
          std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)v194, (uint64_t)v205);
          unint64_t result = v127 + 24;
        }
        goto LABEL_265;
      }
      if (v120)
      {
        v207[0] = 0;
        if ((int)v33 >= 3)
        {
          int v128 = 2;
          do
            ClipperLib::ClipperOffset::OffsetPoint(this, v128++ - 1, v207, *(_DWORD *)(v31 + 72));
          while (v33 != v128);
          int v120 = *(_DWORD *)(v31 + 76);
        }
        if (v120 == 2)
        {
          float64x2_t v129 = vmlaq_f64(vcvtq_f64_s64(*(int64x2_t *)(*((void *)this + 5) + 24 * (int)v57)), v204, *(float64x2_t *)(*((void *)this + 11) + 16 * (int)v57));
          int64x2_t v130 = vcvtq_s64_f64(vaddq_f64(v129, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v129), v202, v203)));
          long long v132 = (int64x2_t *)*((void *)this + 9);
          unint64_t v131 = (int64x2_t *)*((void *)this + 10);
          if (v132 >= v131)
          {
            long long v139 = (int64x2_t *)*v205;
            unint64_t v140 = 0xAAAAAAAAAAAAAAABLL * (((char *)v132 - (unsigned char *)*v205) >> 3);
            unint64_t v141 = v140 + 1;
            if (v140 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_269;
            }
            unint64_t v142 = 0xAAAAAAAAAAAAAAABLL * (((char *)v131 - (char *)v139) >> 3);
            if (2 * v142 > v141) {
              unint64_t v141 = 2 * v142;
            }
            if (v142 >= 0x555555555555555) {
              unint64_t v143 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v143 = v141;
            }
            if (v143)
            {
              int64x2_t v198 = v130;
              long long v144 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v143);
              int64x2_t v130 = v198;
              uint64_t v145 = v144;
              long long v139 = (int64x2_t *)*((void *)this + 8);
              long long v132 = (int64x2_t *)*((void *)this + 9);
            }
            else
            {
              uint64_t v145 = 0;
            }
            long long v146 = (int64x2_t *)&v145[24 * v140];
            *long long v146 = v130;
            v146[1].i64[0] = _D12;
            uint64_t v147 = v146;
            if (v132 != v139)
            {
              do
              {
                int64x2_t v148 = *(int64x2_t *)((char *)v132 - 24);
                v147[-1].i64[1] = v132[-1].i64[1];
                *(int64x2_t *)((char *)v147 - 24) = v148;
                uint64_t v147 = (int64x2_t *)((char *)v147 - 24);
                long long v132 = (int64x2_t *)((char *)v132 - 24);
              }
              while (v132 != v139);
              long long v139 = (int64x2_t *)*v205;
            }
            unint64_t v131 = (int64x2_t *)&v145[24 * v143];
            long long v133 = (int64x2_t *)((char *)v146 + 24);
            *((void *)this + 8) = v147;
            *((void *)this + 9) = (char *)v146 + 24;
            *((void *)this + 10) = v131;
            if (v139)
            {
              operator delete(v139);
              unint64_t v131 = *v23;
            }
          }
          else
          {
            *long long v132 = v130;
            v132[1].i64[0] = _D12;
            long long v133 = (int64x2_t *)((char *)v132 + 24);
          }
          *((void *)this + 9) = v133;
          float64x2_t v149 = vmlsq_f64(vcvtq_f64_s64(*(int64x2_t *)(*((void *)this + 5) + 24 * (int)v57)), v204, *(float64x2_t *)(*((void *)this + 11) + 16 * (int)v57));
          int64x2_t v150 = vcvtq_s64_f64(vaddq_f64(v149, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v149), v202, v203)));
          if (v133 >= v131)
          {
            long long v152 = (int64x2_t *)*v205;
            unint64_t v153 = 0xAAAAAAAAAAAAAAABLL * (((char *)v133 - (unsigned char *)*v205) >> 3);
            unint64_t v154 = v153 + 1;
            if (v153 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_269:
            }
              std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
            unint64_t v155 = 0xAAAAAAAAAAAAAAABLL * (((char *)v131 - (char *)v152) >> 3);
            if (2 * v155 > v154) {
              unint64_t v154 = 2 * v155;
            }
            if (v155 >= 0x555555555555555) {
              unint64_t v156 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v156 = v154;
            }
            if (v156)
            {
              int64x2_t v199 = v150;
              unint64_t v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v156);
              int64x2_t v150 = v199;
              uint64_t v158 = v157;
              long long v152 = (int64x2_t *)*((void *)this + 8);
              long long v133 = (int64x2_t *)*((void *)this + 9);
            }
            else
            {
              uint64_t v158 = 0;
            }
            uint64_t v159 = (int64x2_t *)&v158[24 * v153];
            *uint64_t v159 = v150;
            v159[1].i64[0] = _D12;
            unint64_t v160 = v159;
            if (v133 != v152)
            {
              do
              {
                int64x2_t v161 = *(int64x2_t *)((char *)v133 - 24);
                v160[-1].i64[1] = v133[-1].i64[1];
                *(int64x2_t *)((char *)v160 - 24) = v161;
                unint64_t v160 = (int64x2_t *)((char *)v160 - 24);
                long long v133 = (int64x2_t *)((char *)v133 - 24);
              }
              while (v133 != v152);
              long long v152 = (int64x2_t *)*v205;
            }
            long long v151 = &v159[1].i8[8];
            *((void *)this + 8) = v160;
            *((void *)this + 9) = (char *)v159 + 24;
            *((void *)this + 10) = &v158[24 * v156];
            if (v152) {
              operator delete(v152);
            }
          }
          else
          {
            *long long v133 = v150;
            v133[1].i64[0] = _D12;
            long long v151 = &v133[1].i8[8];
          }
          *((void *)this + 9) = v151;
        }
        else
        {
          *((void *)this + 15) = 0;
          *(float64x2_t *)(*((void *)this + 11) + 16 * (int)v57) = vnegq_f64(*(float64x2_t *)(*((void *)this + 11)
                                                                                                + 16 * (int)v57));
          int v138 = v33 - 1;
          if (v120 == 3) {
            ClipperLib::ClipperOffset::DoSquare(this, v138, v196);
          }
          else {
            ClipperLib::ClipperOffset::DoRound(this, v138, v196);
          }
        }
        if ((int)v33 >= 2)
        {
          uint64_t v162 = *((void *)this + 11);
          unint64_t v163 = (v33 - 1);
          do
          {
            BOOL v137 = v163 > 1;
            *(float64x2_t *)(v162 + 16 * v163) = vnegq_f64(*(float64x2_t *)(v162 + 16 * (v163 - 1)));
            --v163;
          }
          while (v137);
        }
        *(float64x2_t *)*((void *)this + 11) = vnegq_f64(*(float64x2_t *)(*((void *)this + 11) + 16));
        v207[0] = v33 - 1;
        if ((int)v33 > 2)
        {
          do
          {
            LODWORD(v57) = v57 - 1;
            ClipperLib::ClipperOffset::OffsetPoint(this, v57, v207, *(_DWORD *)(v31 + 72));
          }
          while (v57 > 1);
        }
        int v164 = *(_DWORD *)(v31 + 76);
        if (v164 == 2)
        {
          float64x2_t v165 = vmlsq_f64(vcvtq_f64_s64(*(int64x2_t *)*((void *)this + 5)), v204, *(float64x2_t *)*((void *)this + 11));
          int64x2_t v166 = vcvtq_s64_f64(vaddq_f64(v165, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v165), v202, v203)));
          float64x2_t v168 = (int64x2_t *)*((void *)this + 9);
          uint64_t v167 = (int64x2_t *)*((void *)this + 10);
          float64x2_t v169 = v194;
          if (v168 >= v167)
          {
            v171 = (int64x2_t *)*v205;
            unint64_t v172 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168 - (unsigned char *)*v205) >> 3);
            unint64_t v173 = v172 + 1;
            if (v172 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_271;
            }
            unint64_t v174 = 0xAAAAAAAAAAAAAAABLL * (((char *)v167 - (char *)v171) >> 3);
            if (2 * v174 > v173) {
              unint64_t v173 = 2 * v174;
            }
            if (v174 >= 0x555555555555555) {
              unint64_t v175 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v175 = v173;
            }
            if (v175)
            {
              int64x2_t v200 = v166;
              CGFloat v176 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v175);
              int64x2_t v166 = v200;
              char v177 = v176;
              v171 = (int64x2_t *)*((void *)this + 8);
              float64x2_t v168 = (int64x2_t *)*((void *)this + 9);
            }
            else
            {
              char v177 = 0;
            }
            char v178 = (int64x2_t *)&v177[24 * v172];
            *char v178 = v166;
            v178[1].i64[0] = _D12;
            unint64_t v179 = v178;
            if (v168 != v171)
            {
              do
              {
                int64x2_t v180 = *(int64x2_t *)((char *)v168 - 24);
                v179[-1].i64[1] = v168[-1].i64[1];
                *(int64x2_t *)((char *)v179 - 24) = v180;
                unint64_t v179 = (int64x2_t *)((char *)v179 - 24);
                float64x2_t v168 = (int64x2_t *)((char *)v168 - 24);
              }
              while (v168 != v171);
              v171 = (int64x2_t *)*v205;
            }
            uint64_t v167 = (int64x2_t *)&v177[24 * v175];
            float64x2_t v170 = (int64x2_t *)((char *)v178 + 24);
            *((void *)this + 8) = v179;
            *((void *)this + 9) = (char *)v178 + 24;
            *((void *)this + 10) = v167;
            if (v171)
            {
              operator delete(v171);
              uint64_t v167 = *v23;
            }
          }
          else
          {
            *float64x2_t v168 = v166;
            v168[1].i64[0] = _D12;
            float64x2_t v170 = (int64x2_t *)((char *)v168 + 24);
          }
          *((void *)this + 9) = v170;
          float64x2_t v181 = vmlaq_f64(vcvtq_f64_s64(*(int64x2_t *)*((void *)this + 5)), v204, *(float64x2_t *)*((void *)this + 11));
          int64x2_t v182 = vcvtq_s64_f64(vaddq_f64(v181, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v181), v202, v203)));
          if (v170 >= v167)
          {
            unint64_t v184 = (int64x2_t *)*v205;
            unint64_t v185 = 0xAAAAAAAAAAAAAAABLL * (((char *)v170 - (unsigned char *)*v205) >> 3);
            unint64_t v186 = v185 + 1;
            if (v185 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_271:
            }
              std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
            unint64_t v187 = 0xAAAAAAAAAAAAAAABLL * (((char *)v167 - (char *)v184) >> 3);
            if (2 * v187 > v186) {
              unint64_t v186 = 2 * v187;
            }
            if (v187 >= 0x555555555555555) {
              unint64_t v188 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v188 = v186;
            }
            if (v188)
            {
              int64x2_t v201 = v182;
              uint64_t v189 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v188);
              int64x2_t v182 = v201;
              unint64_t v190 = v189;
              unint64_t v184 = (int64x2_t *)*((void *)this + 8);
              float64x2_t v170 = (int64x2_t *)*((void *)this + 9);
            }
            else
            {
              unint64_t v190 = 0;
            }
            double v191 = (int64x2_t *)&v190[24 * v185];
            *double v191 = v182;
            v191[1].i64[0] = _D12;
            uint64_t v192 = v191;
            if (v170 == v184)
            {
              float64x2_t v169 = v194;
            }
            else
            {
              float64x2_t v169 = v194;
              do
              {
                int64x2_t v193 = *(int64x2_t *)((char *)v170 - 24);
                v192[-1].i64[1] = v170[-1].i64[1];
                *(int64x2_t *)((char *)v192 - 24) = v193;
                uint64_t v192 = (int64x2_t *)((char *)v192 - 24);
                float64x2_t v170 = (int64x2_t *)((char *)v170 - 24);
              }
              while (v170 != v184);
              unint64_t v184 = (int64x2_t *)*v205;
            }
            char v183 = &v191[1].i8[8];
            *((void *)this + 8) = v192;
            *((void *)this + 9) = (char *)v191 + 24;
            *((void *)this + 10) = &v190[24 * v188];
            if (v184) {
              operator delete(v184);
            }
          }
          else
          {
            *float64x2_t v170 = v182;
            v170[1].i64[0] = _D12;
            char v183 = &v170[1].i8[8];
          }
          *((void *)this + 9) = v183;
        }
        else
        {
          *((void *)this + 15) = 0;
          float64x2_t v169 = v194;
          if (v164 == 3) {
            ClipperLib::ClipperOffset::DoSquare(this, 0, 1);
          }
          else {
            ClipperLib::ClipperOffset::DoRound(this, 0, 1);
          }
        }
        unint64_t v122 = *((void *)this + 3);
        long long v123 = v169;
        long long v124 = (char *)this + 64;
        if (v122 >= *((void *)this + 4)) {
          goto LABEL_264;
        }
      }
      else
      {
        v207[0] = v33 - 1;
        if ((int)v33 >= 1)
        {
          int v121 = 0;
          do
            ClipperLib::ClipperOffset::OffsetPoint(this, v121++, v207, *(_DWORD *)(v31 + 72));
          while (v33 != v121);
        }
        unint64_t v122 = *((void *)this + 3);
        if (v122 >= *((void *)this + 4))
        {
          long long v123 = v194;
          long long v124 = (char *)this + 64;
LABEL_264:
          unint64_t result = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v123, (uint64_t)v124);
          goto LABEL_265;
        }
        long long v123 = v194;
        long long v124 = (char *)this + 64;
      }
      std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)v123, (uint64_t)v124);
      unint64_t result = v122 + 24;
LABEL_265:
      *((void *)this + 3) = result;
LABEL_266:
      ++v21;
      uint64_t v20 = *((void *)this + 27);
    }
    while (v21 < (int)((unint64_t)(*((void *)this + 28) - v20) >> 3));
  }
  return result;
}

void ClipperLib::ClipperOffset::Execute(ClipperLib::ClipperOffset *this, void **a2, double a3)
{
  ClipperLib::PolyTree::Clear((ClipperLib::PolyTree *)a2);
  ClipperLib::ClipperOffset::FixOrientations(this);
  ClipperLib::ClipperOffset::DoOffset(this, a3);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v51 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v29 = &off_1F1FB03A8;
  *(_OWORD *)uint64_t v30 = 0u;
  *(_OWORD *)uint64_t v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v34 = 0;
  v35[0] = v35;
  v35[1] = v35;
  v35[2] = 0;
  char v36 = 0;
  char v43 = 0;
  char v37 = 0;
  char v38 = 0;
  __int16 v47 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = off_1F1FB03F0;
  ClipperLib::ClipperBase::AddPaths((uint64_t)&v40, (uint64_t *)this + 2, 0, 1);
  if (a3 <= 0.0)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v6 = (ClipperLib::ClipperBase *)((char *)&v30[-1] + (void)*(v29 - 3));
    ClipperLib::ClipperBase::GetBounds(v6, (uint64_t)&v27);
    uint64_t v7 = operator new(0x60uLL);
    uint64_t v8 = v7;
    uint64_t v9 = 0;
    v26[0] = v7;
    v26[2] = v7 + 12;
    __asm { FMOV            V0.2S, #-1.0 }
    do
    {
      double v15 = &v7[v9];
      *double v15 = 0;
      v15[1] = 0;
      _OWORD v15[2] = _D0;
      v9 += 3;
    }
    while (v9 != 12);
    v26[1] = v7 + 12;
    uint64_t v16 = *((void *)&v27 + 1);
    uint64_t v17 = v27 - 10;
    uint64_t v18 = v28;
    uint64_t v19 = *((void *)&v28 + 1) + 10;
    *uint64_t v7 = v27 - 10;
    v7[1] = v19;
    v18 += 10;
    _OWORD v7[3] = v18;
    v7[4] = v19;
    unint64_t v7[2] = _D0;
    void v7[5] = _D0;
    v16 -= 10;
    void v7[6] = v18;
    v7[7] = v16;
    unsigned char v7[8] = _D0;
    v7[9] = v17;
    v7[10] = v16;
    v7[11] = _D0;
    ClipperLib::ClipperBase::AddPath((uint64_t)v6, (uint64_t)v26, 0, 1);
    char v37 = 1;
    ClipperLib::Clipper::Execute((uint64_t)&v29, 1, a2, 3, 3);
    uint64_t v20 = a2[4];
    uint64_t v21 = (char *)(a2 + 4);
    if ((((unsigned char *)a2[5] - v20) & 0x7FFFFFFF8) == 8
      && (uint64_t v22 = *(void *)v20,
          unint64_t v23 = *(void *)(*(void *)v20 + 40) - *(void *)(*(void *)v20 + 32),
          (int)(v23 >> 3) >= 1))
    {
      std::vector<ClipperLib::PolyNode *>::reserve(a2 + 4, (v23 >> 3));
      **(void **)uint64_t v21 = **(void **)(v22 + 32);
      *(void *)(**(void **)v21 + 56) = *(void *)(v22 + 56);
      uint64_t v24 = *(void *)(v22 + 32);
      if ((int)((unint64_t)(*(void *)(v22 + 40) - v24) >> 3) >= 2)
      {
        uint64_t v25 = 1;
        do
        {
          ClipperLib::PolyNode::AddChild((ClipperLib::PolyNode *)a2, *(ClipperLib::PolyNode **)(v24 + 8 * v25++));
          uint64_t v24 = *(void *)(v22 + 32);
        }
        while (v25 < (int)((unint64_t)(*(void *)(v22 + 40) - v24) >> 3));
      }
    }
    else
    {
      ClipperLib::PolyTree::Clear((ClipperLib::PolyTree *)a2);
    }
    operator delete(v8);
  }
  else
  {
    ClipperLib::Clipper::Execute((uint64_t)&v29, 1, a2, 2, 2);
  }
  long long v29 = &off_1F1FB03A8;
  uint64_t v40 = off_1F1FB03F0;
  std::__list_imp<long long>::clear(v35);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v31[1])
  {
    *(void **)&long long v32 = v31[1];
    operator delete(v31[1]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v40);
}

void sub_1C46873D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  operator delete(v17);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a17);
  _Unwind_Resume(a1);
}

void ClipperLib::ClipperOffset::OffsetPoint(ClipperLib::ClipperOffset *this, int a2, int *a3, int a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = *((void *)this + 11);
  uint64_t v9 = a2;
  unint64_t v10 = (double *)(v8 + 16 * a2);
  double v12 = *v10;
  double v11 = v10[1];
  float64x2_t v13 = *(float64x2_t *)(v8 + 16 * v7);
  double v14 = *(double *)(v8 + 16 * v7 + 8);
  double v15 = vmlad_n_f64(vmuld_lane_f64(-*v10, v13, 1), v11, v13.f64[0]);
  *((double *)this + 15) = v15;
  double v16 = *((double *)this + 14);
  double v17 = v15 * v16;
  double v18 = 1.0;
  if (fabs(v15 * v16) >= 1.0)
  {
    if (v15 > 1.0 || (double v18 = -1.0, v15 < -1.0))
    {
      *((double *)this + 15) = v18;
      double v17 = v16 * v18;
    }
LABEL_8:
    if (v17 < 0.0)
    {
      uint64_t v30 = (int64x2_t *)*((void *)this + 10);
      uint64_t v31 = (void **)((char *)this + 64);
      float64x2_t v32 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((void *)this + 5) + 24 * a2)), v13, v16);
      __asm
      {
        FMOV            V3.2D, #0.5
        FMOV            V4.2D, #-0.5
      }
      int64x2_t v35 = vcvtq_s64_f64(vaddq_f64(v32, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v32), _Q4, _Q3)));
      char v36 = (int64x2_t *)*((void *)this + 9);
      int8x16_t v93 = _Q4;
      int8x16_t v94 = _Q3;
      if (v36 >= v30)
      {
        uint64_t v40 = (int64x2_t *)*v31;
        unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (unsigned char *)*v31) >> 3);
        unint64_t v42 = v41 + 1;
        if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_83;
        }
        unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v40) >> 3);
        if (2 * v43 > v42) {
          unint64_t v42 = 2 * v43;
        }
        if (v43 >= 0x555555555555555) {
          unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v44 = v42;
        }
        if (v44)
        {
          int64x2_t v92 = v35;
          uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v44);
          int64x2_t v35 = v92;
          uint64_t v46 = v45;
          uint64_t v40 = (int64x2_t *)*((void *)this + 8);
          char v36 = (int64x2_t *)*((void *)this + 9);
        }
        else
        {
          uint64_t v46 = 0;
        }
        uint64_t v54 = (int64x2_t *)&v46[24 * v41];
        uint64_t v30 = (int64x2_t *)&v46[24 * v44];
        *uint64_t v54 = v35;
        __asm { FMOV            V0.2S, #-1.0 }
        v54[1].i64[0] = _D0;
        char v38 = &v54[1].i8[8];
        if (v36 != v40)
        {
          do
          {
            int64x2_t v56 = *(int64x2_t *)((char *)v36 - 24);
            v54[-1].i64[1] = v36[-1].i64[1];
            *(int64x2_t *)((char *)v54 - 24) = v56;
            uint64_t v54 = (int64x2_t *)((char *)v54 - 24);
            char v36 = (int64x2_t *)((char *)v36 - 24);
          }
          while (v36 != v40);
          uint64_t v40 = (int64x2_t *)*v31;
        }
        *((void *)this + 8) = v54;
        *((void *)this + 9) = v38;
        *((void *)this + 10) = v30;
        if (v40)
        {
          operator delete(v40);
          uint64_t v30 = (int64x2_t *)*((void *)this + 10);
        }
        _Q4 = v93;
        _Q3 = v94;
      }
      else
      {
        int64x2_t *v36 = v35;
        __asm { FMOV            V0.2S, #-1.0 }
        v36[1].i64[0] = _D0;
        char v38 = &v36[1].i8[8];
      }
      *((void *)this + 9) = v38;
      uint64_t v57 = *((void *)this + 5) + 24 * (int)v9;
      if (v38 >= (__int8 *)v30)
      {
        unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((v38 - (unsigned char *)*v31) >> 3);
        if (v60 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_83;
        }
        unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (unsigned char *)*v31) >> 3);
        uint64_t v62 = 2 * v61;
        if (2 * v61 <= v60 + 1) {
          uint64_t v62 = v60 + 1;
        }
        if (v61 >= 0x555555555555555) {
          unint64_t v63 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v63 = v62;
        }
        if (v63) {
          unint64_t v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v63);
        }
        else {
          unint64_t v64 = 0;
        }
        uint64_t v65 = &v64[24 * v60];
        uint64_t v66 = &v64[24 * v63];
        long long v67 = *(_OWORD *)v57;
        *((void *)v65 + 2) = *(void *)(v57 + 16);
        *(_OWORD *)uint64_t v65 = v67;
        int v59 = (int64x2_t *)(v65 + 24);
        unint64_t v69 = (char *)*((void *)this + 8);
        uint64_t v68 = (char *)*((void *)this + 9);
        if (v68 != v69)
        {
          do
          {
            long long v70 = *(_OWORD *)(v68 - 24);
            *((void *)v65 - 1) = *((void *)v68 - 1);
            *(_OWORD *)(v65 - 24) = v70;
            v65 -= 24;
            v68 -= 24;
          }
          while (v68 != v69);
          uint64_t v68 = (char *)*v31;
        }
        *((void *)this + 8) = v65;
        *((void *)this + 9) = v59;
        *((void *)this + 10) = v66;
        if (v68) {
          operator delete(v68);
        }
        _Q4 = v93;
        _Q3 = v94;
      }
      else
      {
        long long v58 = *(_OWORD *)v57;
        *((void *)v38 + 2) = *(void *)(v57 + 16);
        *(_OWORD *)char v38 = v58;
        int v59 = (int64x2_t *)(v38 + 24);
      }
      *((void *)this + 9) = v59;
      unint64_t v71 = *((void *)this + 10);
      float64x2_t v72 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((void *)this + 5) + 24 * (int)v9)), *(float64x2_t *)(*((void *)this + 11) + 16 * v9), *((double *)this + 14));
      int64x2_t v73 = vcvtq_s64_f64(vaddq_f64(v72, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v72), _Q4, _Q3)));
      if ((unint64_t)v59 < v71)
      {
        int64x2_t *v59 = v73;
        __asm { FMOV            V0.2S, #-1.0 }
        v59[1].i64[0] = _D0;
        double v75 = &v59[1].i8[8];
LABEL_73:
        *((void *)this + 9) = v75;
        goto LABEL_74;
      }
      uint64_t v76 = (int64x2_t *)*v31;
      unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (unsigned char *)*v31) >> 3);
      unint64_t v78 = v77 + 1;
      if (v77 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - (void)v76) >> 3);
        if (2 * v79 > v78) {
          unint64_t v78 = 2 * v79;
        }
        if (v79 >= 0x555555555555555) {
          unint64_t v80 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v80 = v78;
        }
        if (v80)
        {
          int64x2_t v96 = v73;
          unint64_t v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v80);
          int64x2_t v73 = v96;
          uint64_t v82 = v81;
          uint64_t v76 = (int64x2_t *)*((void *)this + 8);
          int v59 = (int64x2_t *)*((void *)this + 9);
        }
        else
        {
          uint64_t v82 = 0;
        }
        int v83 = (int64x2_t *)&v82[24 * v77];
        double v84 = &v82[24 * v80];
        int64x2_t *v83 = v73;
        __asm { FMOV            V0.2S, #-1.0 }
        v83[1].i64[0] = _D0;
        double v75 = &v83[1].i8[8];
        if (v59 != v76)
        {
          do
          {
            int64x2_t v86 = *(int64x2_t *)((char *)v59 - 24);
            v83[-1].i64[1] = v59[-1].i64[1];
            *(int64x2_t *)((char *)v83 - 24) = v86;
            int v83 = (int64x2_t *)((char *)v83 - 24);
            int v59 = (int64x2_t *)((char *)v59 - 24);
          }
          while (v59 != v76);
          uint64_t v76 = (int64x2_t *)*v31;
        }
        *((void *)this + 8) = v83;
        *((void *)this + 9) = v75;
        *((void *)this + 10) = v84;
        if (v76) {
          operator delete(v76);
        }
        goto LABEL_73;
      }
LABEL_83:
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    if (a4)
    {
      if (a4 == 1)
      {
        ClipperLib::ClipperOffset::DoRound(this, a2, v7);
        goto LABEL_74;
      }
      if (a4 != 2)
      {
LABEL_74:
        *a3 = a2;
        return;
      }
      double v39 = v11 * v14 + v12 * v13.f64[0] + 1.0;
      if (v39 >= *((double *)this + 18))
      {
        ClipperLib::ClipperOffset::DoMiter(this, a2, v7, v39);
        goto LABEL_74;
      }
    }
    ClipperLib::ClipperOffset::DoSquare(this, a2, v7);
    goto LABEL_74;
  }
  if (v11 * v14 + v13.f64[0] * v12 <= 0.0) {
    goto LABEL_8;
  }
  unint64_t v19 = *((void *)this + 10);
  float64x2_t v20 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((void *)this + 5) + 24 * a2)), v13, v16);
  __asm
  {
    FMOV            V1.2D, #0.5
    FMOV            V3.2D, #-0.5
  }
  int64x2_t v27 = vcvtq_s64_f64(vaddq_f64(v20, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v20), _Q3, _Q1)));
  long long v28 = (int64x2_t *)*((void *)this + 9);
  if ((unint64_t)v28 >= v19)
  {
    __int16 v47 = (int64x2_t *)*((void *)this + 8);
    unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v47) >> 3);
    unint64_t v49 = v48 + 1;
    if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (void)v47) >> 3);
    if (2 * v50 > v49) {
      unint64_t v49 = 2 * v50;
    }
    if (v50 >= 0x555555555555555) {
      unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v51 = v49;
    }
    if (v51)
    {
      int64x2_t v95 = v27;
      uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v51);
      int64x2_t v27 = v95;
      uint64_t v53 = v52;
      __int16 v47 = (int64x2_t *)*((void *)this + 8);
      long long v28 = (int64x2_t *)*((void *)this + 9);
    }
    else
    {
      uint64_t v53 = 0;
    }
    double v87 = (int64x2_t *)&v53[24 * v48];
    uint64_t v88 = &v53[24 * v51];
    int64x2_t *v87 = v27;
    __asm { FMOV            V0.2S, #-1.0 }
    v87[1].i64[0] = _D0;
    double v90 = &v87[1].i8[8];
    if (v28 != v47)
    {
      do
      {
        int64x2_t v91 = *(int64x2_t *)((char *)v28 - 24);
        v87[-1].i64[1] = v28[-1].i64[1];
        *(int64x2_t *)((char *)v87 - 24) = v91;
        double v87 = (int64x2_t *)((char *)v87 - 24);
        long long v28 = (int64x2_t *)((char *)v28 - 24);
      }
      while (v28 != v47);
      __int16 v47 = (int64x2_t *)*((void *)this + 8);
    }
    *((void *)this + 8) = v87;
    *((void *)this + 9) = v90;
    *((void *)this + 10) = v88;
    if (v47) {
      operator delete(v47);
    }
    *((void *)this + 9) = v90;
  }
  else
  {
    int64x2_t *v28 = v27;
    __asm { FMOV            V0.2S, #-1.0 }
    v28[1].i64[0] = _D0;
    *((void *)this + 9) = (char *)v28 + 24;
  }
}

void ClipperLib::ClipperOffset::DoSquare(ClipperLib::ClipperOffset *this, int a2, int a3)
{
  uint64_t v5 = *((void *)this + 11);
  uint64_t v6 = (double *)(v5 + 16 * a3);
  double v7 = *v6;
  double v8 = v6[1];
  long double v9 = atan2(*((long double *)this + 15), v8 * *(double *)(v5 + 16 * a2 + 8) + *v6 * *(double *)(v5 + 16 * a2));
  double v10 = tan(v9 * 0.25);
  double v11 = (int64x2_t *)*((void *)this + 10);
  double v12 = (uint64_t *)(*((void *)this + 5) + 24 * a2);
  double v13 = *((double *)this + 14);
  double v14 = (double)*v12 + v13 * (v7 - v8 * v10);
  if (v14 >= 0.0) {
    double v15 = 0.5;
  }
  else {
    double v15 = -0.5;
  }
  double v16 = (void **)((char *)this + 64);
  uint64_t v17 = (uint64_t)(v14 + v15);
  double v18 = (double)v12[1] + v13 * (v8 + v7 * v10);
  if (v18 >= 0.0) {
    double v19 = 0.5;
  }
  else {
    double v19 = -0.5;
  }
  uint64_t v20 = (uint64_t)(v18 + v19);
  uint64_t v21 = (uint64_t *)*((void *)this + 9);
  if (v21 >= (uint64_t *)v11)
  {
    long long v28 = (uint64_t *)*v16;
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (unsigned char *)*v16) >> 3);
    unint64_t v30 = v29 + 1;
    if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_41;
    }
    double v56 = v10;
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v28) >> 3);
    if (2 * v31 > v30) {
      unint64_t v30 = 2 * v31;
    }
    if (v31 >= 0x555555555555555) {
      unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v32 = v30;
    }
    if (v32)
    {
      unint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v32);
      long long v28 = (uint64_t *)*((void *)this + 8);
      uint64_t v21 = (uint64_t *)*((void *)this + 9);
    }
    else
    {
      unint64_t v33 = 0;
    }
    uint64_t v34 = (uint64_t *)&v33[24 * v29];
    double v11 = (int64x2_t *)&v33[24 * v32];
    *uint64_t v34 = v17;
    v34[1] = v20;
    __asm { FMOV            V0.2S, #-1.0 }
    v34[2] = _D0;
    int64x2_t v27 = (int64x2_t *)(v34 + 3);
    if (v21 != v28)
    {
      do
      {
        long long v36 = *(_OWORD *)(v21 - 3);
        *(v34 - 1) = *(v21 - 1);
        *(_OWORD *)(v34 - 3) = v36;
        v34 -= 3;
        v21 -= 3;
      }
      while (v21 != v28);
      long long v28 = (uint64_t *)*v16;
    }
    *((void *)this + 8) = v34;
    *((void *)this + 9) = v27;
    *((void *)this + 10) = v11;
    if (v28)
    {
      operator delete(v28);
      double v11 = (int64x2_t *)*((void *)this + 10);
    }
    double v10 = v56;
  }
  else
  {
    *uint64_t v21 = v17;
    v21[1] = v20;
    __asm { FMOV            V1.2S, #-1.0 }
    v21[2] = _D1;
    int64x2_t v27 = (int64x2_t *)(v21 + 3);
  }
  *((void *)this + 9) = v27;
  float64x2_t v37 = *(float64x2_t *)(*((void *)this + 11) + 16 * a2);
  *(void *)&v38.f64[0] = vdupq_laneq_s64((int64x2_t)v37, 1).u64[0];
  v38.f64[1] = -v37.f64[0];
  float64x2_t v39 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((void *)this + 5) + 24 * a2)), vmlaq_n_f64(v37, v38, v10), *((double *)this + 14));
  __asm
  {
    FMOV            V1.2D, #0.5
    FMOV            V3.2D, #-0.5
  }
  int64x2_t v42 = vcvtq_s64_f64(vaddq_f64(v39, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v39), _Q3, _Q1)));
  if (v27 < v11)
  {
    *int64x2_t v27 = v42;
    __asm { FMOV            V0.2S, #-1.0 }
    v27[1].i64[0] = _D0;
    unint64_t v44 = &v27[1].i8[8];
    goto LABEL_40;
  }
  uint64_t v45 = (int64x2_t *)*v16;
  unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (unsigned char *)*v16) >> 3);
  unint64_t v47 = v46 + 1;
  if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_41:
  }
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v45) >> 3);
  if (2 * v48 > v47) {
    unint64_t v47 = 2 * v48;
  }
  if (v48 >= 0x555555555555555) {
    unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v49 = v47;
  }
  if (v49)
  {
    int64x2_t v57 = v42;
    unint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v49);
    int64x2_t v42 = v57;
    unint64_t v51 = v50;
    uint64_t v45 = (int64x2_t *)*((void *)this + 8);
    int64x2_t v27 = (int64x2_t *)*((void *)this + 9);
  }
  else
  {
    unint64_t v51 = 0;
  }
  uint64_t v52 = (int64x2_t *)&v51[24 * v46];
  uint64_t v53 = &v51[24 * v49];
  *uint64_t v52 = v42;
  __asm { FMOV            V0.2S, #-1.0 }
  v52[1].i64[0] = _D0;
  unint64_t v44 = &v52[1].i8[8];
  if (v27 != v45)
  {
    do
    {
      int64x2_t v55 = *(int64x2_t *)((char *)v27 - 24);
      v52[-1].i64[1] = v27[-1].i64[1];
      *(int64x2_t *)((char *)v52 - 24) = v55;
      uint64_t v52 = (int64x2_t *)((char *)v52 - 24);
      int64x2_t v27 = (int64x2_t *)((char *)v27 - 24);
    }
    while (v27 != v45);
    uint64_t v45 = (int64x2_t *)*v16;
  }
  *((void *)this + 8) = v52;
  *((void *)this + 9) = v44;
  *((void *)this + 10) = v53;
  if (v45) {
    operator delete(v45);
  }
LABEL_40:
  *((void *)this + 9) = v44;
}

void ClipperLib::ClipperOffset::DoRound(ClipperLib::ClipperOffset *this, int a2, int a3)
{
  uint64_t v4 = *((void *)this + 11);
  uint64_t v5 = (double *)(v4 + 16 * a3);
  uint64_t v6 = a2;
  double v8 = *v5;
  double v7 = v5[1];
  int v9 = 0;
  double v10 = *((double *)this + 19)
      * fabs(atan2(*((long double *)this + 15), v7 * *(double *)(v4 + 16 * a2 + 8) + *v5 * *(double *)(v4 + 16 * a2)));
  if (v10 >= 0.0) {
    double v11 = 0.5;
  }
  else {
    double v11 = -0.5;
  }
  if ((int)(uint64_t)(v10 + v11) <= 1) {
    int v12 = 1;
  }
  else {
    int v12 = (uint64_t)(v10 + v11);
  }
  double v13 = (void **)((char *)this + 64);
  double v14 = (uint64_t *)*((void *)this + 9);
  __asm { FMOV            V8.2S, #-1.0 }
  do
  {
    uint64_t v20 = (uint64_t *)(*((void *)this + 5) + 24 * (int)v6);
    double v21 = *((double *)this + 14);
    double v22 = (double)*v20 + v8 * v21;
    if (v22 >= 0.0) {
      double v23 = 0.5;
    }
    else {
      double v23 = -0.5;
    }
    uint64_t v24 = (uint64_t)(v22 + v23);
    double v25 = (double)v20[1] + v7 * v21;
    if (v25 >= 0.0) {
      double v26 = 0.5;
    }
    else {
      double v26 = -0.5;
    }
    uint64_t v27 = (uint64_t)(v25 + v26);
    unint64_t v28 = *((void *)this + 10);
    if ((unint64_t)v14 >= v28)
    {
      unint64_t v29 = (uint64_t *)*v13;
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (unsigned char *)*v13) >> 3);
      unint64_t v31 = v30 + 1;
      if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_48;
      }
      unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (void)v29) >> 3);
      if (2 * v32 > v31) {
        unint64_t v31 = 2 * v32;
      }
      if (v32 >= 0x555555555555555) {
        unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v33 = v31;
      }
      if (v33)
      {
        uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v33);
        unint64_t v29 = (uint64_t *)*((void *)this + 8);
        double v14 = (uint64_t *)*((void *)this + 9);
      }
      else
      {
        uint64_t v34 = 0;
      }
      int64x2_t v35 = (uint64_t *)&v34[24 * v30];
      uint64_t *v35 = v24;
      v35[1] = v27;
      v35[2] = _D8;
      long long v36 = v35;
      if (v14 != v29)
      {
        do
        {
          long long v37 = *(_OWORD *)(v14 - 3);
          *(v36 - 1) = *(v14 - 1);
          *(_OWORD *)(v36 - 3) = v37;
          v36 -= 3;
          v14 -= 3;
        }
        while (v14 != v29);
        unint64_t v29 = (uint64_t *)*v13;
      }
      double v14 = v35 + 3;
      *((void *)this + 8) = v36;
      *((void *)this + 9) = v35 + 3;
      *((void *)this + 10) = &v34[24 * v33];
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      uint64_t *v14 = v24;
      v14[1] = v27;
      void v14[2] = _D8;
      v14 += 3;
    }
    *((void *)this + 9) = v14;
    double v39 = *((double *)this + 16);
    double v38 = *((double *)this + 17);
    double v40 = -(v39 * v7);
    double v7 = v7 * v38 + v8 * v39;
    double v8 = v40 + v8 * v38;
    ++v9;
  }
  while (v9 != v12);
  unint64_t v41 = *((void *)this + 10);
  float64x2_t v42 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((void *)this + 5) + 24 * (int)v6)), *(float64x2_t *)(*((void *)this + 11) + 16 * v6), *((double *)this + 14));
  __asm
  {
    FMOV            V2.2D, #0.5
    FMOV            V3.2D, #-0.5
  }
  int64x2_t v45 = vcvtq_s64_f64(vaddq_f64(v42, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v42), _Q3, _Q2)));
  if ((unint64_t)v14 >= v41)
  {
    unint64_t v47 = (uint64_t *)*v13;
    unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (unsigned char *)*v13) >> 3);
    unint64_t v49 = v48 + 1;
    if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_48:
    }
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - (void)v47) >> 3);
    if (2 * v50 > v49) {
      unint64_t v49 = 2 * v50;
    }
    if (v50 >= 0x555555555555555) {
      unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v51 = v49;
    }
    if (v51)
    {
      int64x2_t v57 = v45;
      uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v51);
      int64x2_t v45 = v57;
      uint64_t v53 = v52;
      unint64_t v47 = (uint64_t *)*((void *)this + 8);
      double v14 = (uint64_t *)*((void *)this + 9);
    }
    else
    {
      uint64_t v53 = 0;
    }
    uint64_t v54 = (int64x2_t *)&v53[24 * v48];
    int64x2_t v55 = &v53[24 * v51];
    *uint64_t v54 = v45;
    v54[1].i64[0] = _D8;
    unint64_t v46 = &v54[1].i64[1];
    if (v14 != v47)
    {
      do
      {
        int64x2_t v56 = *(int64x2_t *)(v14 - 3);
        v54[-1].i64[1] = *(v14 - 1);
        *(int64x2_t *)((char *)v54 - 24) = v56;
        uint64_t v54 = (int64x2_t *)((char *)v54 - 24);
        v14 -= 3;
      }
      while (v14 != v47);
      unint64_t v47 = (uint64_t *)*v13;
    }
    *((void *)this + 8) = v54;
    *((void *)this + 9) = v46;
    *((void *)this + 10) = v55;
    if (v47) {
      operator delete(v47);
    }
  }
  else
  {
    *(int64x2_t *)double v14 = v45;
    void v14[2] = _D8;
    unint64_t v46 = v14 + 3;
  }
  *((void *)this + 9) = v46;
}

void ClipperLib::ClipperOffset::DoMiter(ClipperLib::ClipperOffset *this, int a2, int a3, double a4)
{
  uint64_t v5 = (char *)this + 80;
  unint64_t v6 = *((void *)this + 10);
  float64x2_t v7 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((void *)this + 5) + 24 * a2)), vaddq_f64(*(float64x2_t *)(*((void *)this + 11) + 16 * a3), *(float64x2_t *)(*((void *)this + 11) + 16 * a2)), *((double *)this + 14) / a4);
  __asm
  {
    FMOV            V2.2D, #0.5
    FMOV            V3.2D, #-0.5
  }
  int64x2_t v14 = vcvtq_s64_f64(vaddq_f64(v7, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v7), _Q3, _Q2)));
  double v15 = (int64x2_t *)*((void *)this + 9);
  if ((unint64_t)v15 >= v6)
  {
    double v18 = (void **)((char *)this + 64);
    double v19 = (int64x2_t *)*((void *)this + 8);
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v19) >> 3);
    unint64_t v21 = v20 + 1;
    if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v19) >> 3);
    if (2 * v22 > v21) {
      unint64_t v21 = 2 * v22;
    }
    if (v22 >= 0x555555555555555) {
      unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      int64x2_t v30 = v14;
      uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)v5, v23);
      int64x2_t v14 = v30;
      double v25 = v24;
      double v19 = (int64x2_t *)*((void *)this + 8);
      double v15 = (int64x2_t *)*((void *)this + 9);
    }
    else
    {
      double v25 = 0;
    }
    double v26 = (int64x2_t *)&v25[24 * v20];
    uint64_t v27 = &v25[24 * v23];
    int64x2_t *v26 = v14;
    __asm { FMOV            V0.2S, #-1.0 }
    v26[1].i64[0] = _D0;
    uint64_t v17 = &v26[1].i8[8];
    if (v15 != v19)
    {
      do
      {
        int64x2_t v29 = *(int64x2_t *)((char *)v15 - 24);
        v26[-1].i64[1] = v15[-1].i64[1];
        *(int64x2_t *)((char *)v26 - 24) = v29;
        double v26 = (int64x2_t *)((char *)v26 - 24);
        double v15 = (int64x2_t *)((char *)v15 - 24);
      }
      while (v15 != v19);
      double v19 = (int64x2_t *)*v18;
    }
    *((void *)this + 8) = v26;
    *((void *)this + 9) = v17;
    *((void *)this + 10) = v27;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *double v15 = v14;
    __asm { FMOV            V0.2S, #-1.0 }
    v15[1].i64[0] = _D0;
    uint64_t v17 = &v15[1].i8[8];
  }
  *((void *)this + 9) = v17;
}

uint64_t *ClipperLib::ReversePaths(uint64_t *result)
{
  uint64_t v2 = *result;
  uint64_t v1 = result[1];
  if (v1 != *result)
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = (unint64_t *)(v2 + 24 * v3);
      unint64_t v5 = *v4;
      unint64_t v6 = v4[1];
      unint64_t v7 = v6 - 24;
      if (v5 != v6 && v7 > v5)
      {
        unint64_t v9 = v5 + 24;
        do
        {
          uint64_t v10 = *(void *)(v9 - 8);
          long long v11 = *(_OWORD *)(v9 - 24);
          uint64_t v12 = *(void *)(v7 + 16);
          *(_OWORD *)(v9 - 24) = *(_OWORD *)v7;
          *(void *)(v9 - 8) = v12;
          *(_OWORD *)unint64_t v7 = v11;
          *(void *)(v7 + 16) = v10;
          v7 -= 24;
          BOOL v13 = v9 >= v7;
          v9 += 24;
        }
        while (!v13);
        uint64_t v2 = *result;
        uint64_t v1 = result[1];
      }
      ++v3;
    }
    while (v3 < 0xAAAAAAAAAAAAAAABLL * ((v1 - v2) >> 3));
  }
  return result;
}

void ClipperLib::SimplifyPolygon(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  unint64_t v5 = &off_1F1FB03A8;
  *(_OWORD *)unint64_t v6 = 0u;
  *(_OWORD *)unint64_t v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v10 = 0;
  v11[0] = v11;
  v11[1] = v11;
  unint64_t v11[2] = 0;
  char v12 = 0;
  char v19 = 0;
  char v13 = 0;
  __int16 v23 = 0;
  uint64_t v15 = 0;
  double v16 = off_1F1FB03F0;
  char v14 = 1;
  ClipperLib::ClipperBase::AddPath((uint64_t)&v16, a1, 0, 1);
  ClipperLib::Clipper::Execute((uint64_t)&v5, 1, a2, a3, a3);
  unint64_t v5 = &off_1F1FB03A8;
  double v16 = off_1F1FB03F0;
  std::__list_imp<long long>::clear(v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v7[1])
  {
    *(void **)&long long v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v16);
}

void sub_1C46883AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ClipperLib::SimplifyPolygons(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  unint64_t v5 = &off_1F1FB03A8;
  *(_OWORD *)unint64_t v6 = 0u;
  *(_OWORD *)unint64_t v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v10 = 0;
  v11[0] = v11;
  v11[1] = v11;
  unint64_t v11[2] = 0;
  char v12 = 0;
  char v19 = 0;
  char v13 = 0;
  __int16 v23 = 0;
  uint64_t v15 = 0;
  double v16 = off_1F1FB03F0;
  char v14 = 1;
  ClipperLib::ClipperBase::AddPaths((uint64_t)&v16, a1, 0, 1);
  ClipperLib::Clipper::Execute((uint64_t)&v5, 1, a2, a3, a3);
  unint64_t v5 = &off_1F1FB03A8;
  double v16 = off_1F1FB03F0;
  std::__list_imp<long long>::clear(v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v7[1])
  {
    *(void **)&long long v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v16);
}

void sub_1C468851C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ClipperLib::SimplifyPolygons(uint64_t *a1, int a2)
{
}

double ClipperLib::DistanceFromLineSqrd(ClipperLib *this, const IntPoint *a2, const IntPoint *a3, const IntPoint *a4)
{
  uint64_t v4 = *((void *)a2 + 1);
  double v5 = (double)(v4 - *((void *)a3 + 1));
  uint64_t v6 = *(void *)a3 - *(void *)a2;
  double v7 = (double)v6 * (double)*((uint64_t *)this + 1)
     + v5 * (double)*(uint64_t *)this
     - ((double)v4 * (double)v6
      + v5 * (double)*(void *)a2);
  return v7 * v7 / ((double)v6 * (double)v6 + v5 * v5);
}

BOOL ClipperLib::SlopesNearCollinear(ClipperLib *this, const IntPoint *a2, const IntPoint *a3, const IntPoint *a4, double a5)
{
  uint64_t v6 = *(void *)this;
  uint64_t v5 = *((void *)this + 1);
  uint64_t v8 = *(void *)a2;
  uint64_t v7 = *((void *)a2 + 1);
  if ((uint64_t)(*(void *)this - *(void *)a2) >= 0) {
    unint64_t v9 = *(void *)this - *(void *)a2;
  }
  else {
    unint64_t v9 = *(void *)a2 - *(void *)this;
  }
  uint64_t v10 = v5 - v7;
  if (v5 - v7 >= 0) {
    unint64_t v11 = v5 - v7;
  }
  else {
    unint64_t v11 = v7 - v5;
  }
  if (v9 <= v11)
  {
    uint64_t v15 = *((void *)a3 + 1);
    if (v5 <= v7 != v5 < v15)
    {
      double v13 = (double)(v7 - v15);
      uint64_t v14 = *(void *)a3 - v8;
      goto LABEL_12;
    }
    if (v5 >= v7 != v7 < v15)
    {
      double v13 = (double)(v5 - v15);
      double v16 = (double)(*(void *)a3 - v6);
      goto LABEL_17;
    }
    double v13 = (double)v10;
    double v16 = (double)(v8 - v6);
    double v17 = (double)v5 * v16 + (double)v10 * (double)v6;
    double v18 = (double)*(void *)a3;
    double v22 = (double)v15;
LABEL_21:
    double v21 = v16 * v22;
    return (v21 + v13 * v18 - v17) * (v21 + v13 * v18 - v17) / (v16 * v16 + v13 * v13) < a5;
  }
  uint64_t v12 = *(void *)a3;
  if (v8 >= v6 == *(void *)a3 > v6)
  {
    uint64_t v20 = v8 - v6;
    if (v8 <= v6 != v12 > v8)
    {
      double v13 = (double)(v5 - *((void *)a3 + 1));
      double v16 = (double)(*(void *)a3 - v6);
LABEL_17:
      double v17 = (double)v5 * v16 + v13 * (double)v6;
      double v18 = (double)v8;
      double v19 = (double)v7;
      goto LABEL_18;
    }
    double v13 = (double)v10;
    double v16 = (double)v20;
    double v17 = (double)v5 * (double)v20 + (double)v10 * (double)v6;
    double v18 = (double)v12;
    double v22 = (double)*((uint64_t *)a3 + 1);
    goto LABEL_21;
  }
  double v13 = (double)(v7 - *((void *)a3 + 1));
  uint64_t v14 = v12 - v8;
LABEL_12:
  double v16 = (double)v14;
  double v17 = (double)v7 * (double)v14 + v13 * (double)v8;
  double v18 = (double)v6;
  double v19 = (double)v5;
LABEL_18:
  double v21 = v19 * v16;
  return (v21 + v13 * v18 - v17) * (v21 + v13 * v18 - v17) / (v16 * v16 + v13 * v13) < a5;
}

BOOL ClipperLib::PointsAreClose(uint64_t *a1, uint64_t *a2, double a3)
{
  double v3 = (double)*a1 - (double)*a2;
  double v4 = (double)a1[1] - (double)a2[1];
  return v4 * v4 + v3 * v3 <= a3;
}

uint64_t ClipperLib::ExcludeOp(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(void *)(v1 + 32) = *(void *)(a1 + 32);
  *(void *)(*(void *)(a1 + 32) + 40) = v1;
  *(_DWORD *)uint64_t v1 = 0;
  return v1;
}

void *ClipperLib::CleanPolygon(void *result, void *a2)
{
  uint64_t v2 = result[1] - *result;
  if (v2)
  {
    is_mul_ok(v2 / 24, 0x30uLL);
    operator new[]();
  }
  a2[1] = *a2;
  return result;
}

void std::vector<ClipperLib::IntPoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<ClipperLib::IntPoint>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void *ClipperLib::CleanPolygon(void *a1)
{
  return ClipperLib::CleanPolygon(a1, a1);
}

void ClipperLib::CleanPolygons(uint64_t *a1, uint64_t *a2)
{
  std::vector<std::vector<ClipperLib::IntPoint>>::resize(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      ClipperLib::CleanPolygon((void *)(v4 + v5), (void *)(*a2 + v5));
      ++v6;
      uint64_t v4 = *a1;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  }
}

void ClipperLib::CleanPolygons(uint64_t *a1)
{
}

void ClipperLib::Minkowski(uint64_t *a1, void *a2, uint64_t *a3, char a4, unsigned int a5)
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a2[1] - *a2;
  if (v8) {
    _ZF = v6 == v7;
  }
  else {
    _ZF = 1;
  }
  if (_ZF)
  {
    std::vector<std::vector<ClipperLib::IntPoint>>::__clear[abi:ne180100](a3);
  }
  else
  {
    unint64_t v13 = v8 / 24;
    uint64_t v127 = 0;
    int v128 = 0;
    unint64_t v129 = 0;
    std::vector<std::vector<ClipperLib::IntPoint>>::reserve(&v127, v8 / 24);
    unsigned int v116 = a5;
    unint64_t v14 = (v6 - v7) / 24;
    if (v13 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v13;
    }
    uint64_t v117 = v15;
    __asm { FMOV            V8.2S, #-1.0 }
    uint64_t v20 = 0;
    if (a4)
    {
      double v21 = a2;
      do
      {
        __p[0] = 0;
        __p[1] = 0;
        v131[0] = 0;
        std::vector<ClipperLib::IntPoint>::reserve(__p, v14);
        uint64_t v22 = *a1;
        if (a1[1] != *a1)
        {
          unint64_t v23 = 0;
          uint64_t v24 = (char *)__p[1];
          do
          {
            int64x2_t v25 = vaddq_s64(*(int64x2_t *)(v22 + 24 * v23), *(int64x2_t *)(*v21 + 24 * v20));
            if ((unint64_t)v24 >= v131[0])
            {
              int64x2_t v120 = v25;
              uint64_t v26 = (char *)__p[0];
              unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (char *)__p[0]) >> 3);
              unint64_t v28 = v27 + 1;
              if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((uint64_t)(v131[0] - (unint64_t)__p[0]) >> 3) > v28) {
                unint64_t v28 = 0x5555555555555556 * ((uint64_t)(v131[0] - (unint64_t)__p[0]) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v131[0] - (unint64_t)__p[0]) >> 3) >= 0x555555555555555) {
                unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v29 = v28;
              }
              if (v29)
              {
                int64x2_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)v131, v29);
                uint64_t v26 = (char *)__p[0];
                uint64_t v24 = (char *)__p[1];
              }
              else
              {
                int64x2_t v30 = 0;
              }
              unint64_t v31 = &v30[24 * v27];
              *(int64x2_t *)unint64_t v31 = v120;
              *((void *)v31 + 2) = _D8;
              unint64_t v32 = v31;
              if (v24 == v26)
              {
                double v21 = a2;
              }
              else
              {
                double v21 = a2;
                do
                {
                  long long v33 = *(_OWORD *)(v24 - 24);
                  *((void *)v32 - 1) = *((void *)v24 - 1);
                  *(_OWORD *)(v32 - 24) = v33;
                  v32 -= 24;
                  v24 -= 24;
                }
                while (v24 != v26);
                uint64_t v26 = (char *)__p[0];
              }
              uint64_t v24 = v31 + 24;
              __p[0] = v32;
              __p[1] = v31 + 24;
              v131[0] = &v30[24 * v29];
              if (v26) {
                operator delete(v26);
              }
            }
            else
            {
              *(int64x2_t *)uint64_t v24 = v25;
              *((void *)v24 + 2) = _D8;
              v24 += 24;
            }
            __p[1] = v24;
            ++v23;
            uint64_t v22 = *a1;
          }
          while (v23 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
        }
        uint64_t v34 = v128;
        if ((unint64_t)v128 >= v129)
        {
          uint64_t v35 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(&v127, (uint64_t)__p);
        }
        else
        {
          *int v128 = 0;
          v34[1] = 0;
          v34[2] = 0;
          std::vector<ClipperLib::IntPoint>::__init_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(v34, __p[0], (uint64_t)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
          uint64_t v35 = (uint64_t)(v34 + 3);
        }
        int v128 = (void *)v35;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        ++v20;
      }
      while (v20 != v117);
    }
    else
    {
      long long v36 = a2;
      do
      {
        __p[0] = 0;
        __p[1] = 0;
        v131[0] = 0;
        std::vector<ClipperLib::IntPoint>::reserve(__p, v14);
        uint64_t v37 = *a1;
        if (a1[1] != *a1)
        {
          unint64_t v38 = 0;
          double v39 = (char *)__p[1];
          do
          {
            int64x2_t v40 = vsubq_s64(*(int64x2_t *)(*v36 + 24 * v20), *(int64x2_t *)(v37 + 24 * v38));
            if ((unint64_t)v39 >= v131[0])
            {
              int64x2_t v121 = v40;
              unint64_t v41 = (char *)__p[0];
              unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((v39 - (char *)__p[0]) >> 3);
              unint64_t v43 = v42 + 1;
              if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((uint64_t)(v131[0] - (unint64_t)__p[0]) >> 3) > v43) {
                unint64_t v43 = 0x5555555555555556 * ((uint64_t)(v131[0] - (unint64_t)__p[0]) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v131[0] - (unint64_t)__p[0]) >> 3) >= 0x555555555555555) {
                unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v44 = v43;
              }
              if (v44)
              {
                int64x2_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)v131, v44);
                unint64_t v41 = (char *)__p[0];
                double v39 = (char *)__p[1];
              }
              else
              {
                int64x2_t v45 = 0;
              }
              unint64_t v46 = &v45[24 * v42];
              *(int64x2_t *)unint64_t v46 = v121;
              *((void *)v46 + 2) = _D8;
              unint64_t v47 = v46;
              if (v39 == v41)
              {
                long long v36 = a2;
              }
              else
              {
                long long v36 = a2;
                do
                {
                  long long v48 = *(_OWORD *)(v39 - 24);
                  *((void *)v47 - 1) = *((void *)v39 - 1);
                  *(_OWORD *)(v47 - 24) = v48;
                  v47 -= 24;
                  v39 -= 24;
                }
                while (v39 != v41);
                unint64_t v41 = (char *)__p[0];
              }
              double v39 = v46 + 24;
              __p[0] = v47;
              __p[1] = v46 + 24;
              v131[0] = &v45[24 * v44];
              if (v41) {
                operator delete(v41);
              }
            }
            else
            {
              *(int64x2_t *)double v39 = v40;
              *((void *)v39 + 2) = _D8;
              v39 += 24;
            }
            __p[1] = v39;
            ++v38;
            uint64_t v37 = *a1;
          }
          while (v38 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
        }
        unint64_t v49 = v128;
        if ((unint64_t)v128 >= v129)
        {
          uint64_t v50 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(&v127, (uint64_t)__p);
        }
        else
        {
          *int v128 = 0;
          v49[1] = 0;
          v49[2] = 0;
          std::vector<ClipperLib::IntPoint>::__init_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(v49, __p[0], (uint64_t)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
          uint64_t v50 = (uint64_t)(v49 + 3);
        }
        int v128 = (void *)v50;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        ++v20;
      }
      while (v20 != v117);
    }
    std::vector<std::vector<ClipperLib::IntPoint>>::__clear[abi:ne180100](a3);
    unint64_t v51 = v13 + v116;
    std::vector<std::vector<ClipperLib::IntPoint>>::reserve(a3, v51 + v51 * v14);
    unint64_t v118 = v51 - 1;
    if (v51 != 1)
    {
      unint64_t v52 = 0;
      if (v14 <= 1) {
        uint64_t v53 = 1;
      }
      else {
        uint64_t v53 = v14;
      }
      uint64_t v119 = v53;
      do
      {
        unint64_t v54 = 0;
        unint64_t v122 = v52;
        unint64_t v55 = v52 + 1;
        do
        {
          long long v124 = 0;
          int v125 = 0;
          unint64_t v126 = 0;
          std::vector<ClipperLib::IntPoint>::reserve(&v124, 4uLL);
          uint64_t v56 = *(void *)(v127 + 24 * (v122 % v13)) + 24 * (v54 % v14);
          int64x2_t v57 = v125;
          if (v125 >= v126)
          {
            unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((v125 - (unsigned char *)v124) >> 3);
            unint64_t v61 = v60 + 1;
            if (v60 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_154;
            }
            if (0x5555555555555556 * ((v126 - (unsigned char *)v124) >> 3) > v61) {
              unint64_t v61 = 0x5555555555555556 * ((v126 - (unsigned char *)v124) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v126 - (unsigned char *)v124) >> 3) >= 0x555555555555555) {
              unint64_t v62 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v62 = v61;
            }
            if (v62) {
              unint64_t v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)&v126, v62);
            }
            else {
              unint64_t v63 = 0;
            }
            unint64_t v64 = &v63[24 * v60];
            long long v65 = *(_OWORD *)v56;
            *((void *)v64 + 2) = *(void *)(v56 + 16);
            *(_OWORD *)unint64_t v64 = v65;
            long long v67 = (char *)v124;
            uint64_t v66 = v125;
            uint64_t v68 = v64;
            if (v125 != v124)
            {
              do
              {
                long long v69 = *(_OWORD *)(v66 - 24);
                *((void *)v68 - 1) = *((void *)v66 - 1);
                *(_OWORD *)(v68 - 24) = v69;
                v68 -= 24;
                v66 -= 24;
              }
              while (v66 != v67);
              uint64_t v66 = (char *)v124;
            }
            int v59 = v64 + 24;
            long long v124 = v68;
            int v125 = v64 + 24;
            unint64_t v126 = &v63[24 * v62];
            if (v66) {
              operator delete(v66);
            }
          }
          else
          {
            long long v58 = *(_OWORD *)v56;
            *((void *)v125 + 2) = *(void *)(v56 + 16);
            _OWORD *v57 = v58;
            int v59 = (char *)v57 + 24;
          }
          int v125 = v59;
          uint64_t v70 = *(void *)(v127 + 24 * (v55 % v13)) + 24 * (v54 % v14);
          if (v59 >= v126)
          {
            unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((v59 - (unsigned char *)v124) >> 3);
            unint64_t v74 = v73 + 1;
            if (v73 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_154;
            }
            if (0x5555555555555556 * ((v126 - (unsigned char *)v124) >> 3) > v74) {
              unint64_t v74 = 0x5555555555555556 * ((v126 - (unsigned char *)v124) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v126 - (unsigned char *)v124) >> 3) >= 0x555555555555555) {
              unint64_t v75 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v75 = v74;
            }
            if (v75) {
              uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)&v126, v75);
            }
            else {
              uint64_t v76 = 0;
            }
            unint64_t v77 = &v76[24 * v73];
            long long v78 = *(_OWORD *)v70;
            *((void *)v77 + 2) = *(void *)(v70 + 16);
            *(_OWORD *)unint64_t v77 = v78;
            unint64_t v80 = (char *)v124;
            unint64_t v79 = v125;
            unint64_t v81 = v77;
            if (v125 != v124)
            {
              do
              {
                long long v82 = *(_OWORD *)(v79 - 24);
                *((void *)v81 - 1) = *((void *)v79 - 1);
                *(_OWORD *)(v81 - 24) = v82;
                v81 -= 24;
                v79 -= 24;
              }
              while (v79 != v80);
              unint64_t v79 = (char *)v124;
            }
            float64x2_t v72 = v77 + 24;
            long long v124 = v81;
            int v125 = v77 + 24;
            unint64_t v126 = &v76[24 * v75];
            if (v79) {
              operator delete(v79);
            }
          }
          else
          {
            long long v71 = *(_OWORD *)v70;
            *((void *)v59 + 2) = *(void *)(v70 + 16);
            *(_OWORD *)int v59 = v71;
            float64x2_t v72 = v59 + 24;
          }
          int v125 = v72;
          uint64_t v83 = *(void *)(v127 + 24 * (v55 % v13)) + 24 * (++v54 % v14);
          if (v72 >= v126)
          {
            unint64_t v86 = 0xAAAAAAAAAAAAAAABLL * ((v72 - (unsigned char *)v124) >> 3);
            unint64_t v87 = v86 + 1;
            if (v86 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_154;
            }
            if (0x5555555555555556 * ((v126 - (unsigned char *)v124) >> 3) > v87) {
              unint64_t v87 = 0x5555555555555556 * ((v126 - (unsigned char *)v124) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v126 - (unsigned char *)v124) >> 3) >= 0x555555555555555) {
              unint64_t v88 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v88 = v87;
            }
            if (v88) {
              double v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)&v126, v88);
            }
            else {
              double v89 = 0;
            }
            double v90 = &v89[24 * v86];
            long long v91 = *(_OWORD *)v83;
            *((void *)v90 + 2) = *(void *)(v83 + 16);
            *(_OWORD *)double v90 = v91;
            int8x16_t v93 = (char *)v124;
            int64x2_t v92 = v125;
            int8x16_t v94 = v90;
            if (v125 != v124)
            {
              do
              {
                long long v95 = *(_OWORD *)(v92 - 24);
                *((void *)v94 - 1) = *((void *)v92 - 1);
                *(_OWORD *)(v94 - 24) = v95;
                v94 -= 24;
                v92 -= 24;
              }
              while (v92 != v93);
              int64x2_t v92 = (char *)v124;
            }
            double v85 = v90 + 24;
            long long v124 = v94;
            int v125 = v90 + 24;
            unint64_t v126 = &v89[24 * v88];
            if (v92) {
              operator delete(v92);
            }
          }
          else
          {
            long long v84 = *(_OWORD *)v83;
            *((void *)v72 + 2) = *(void *)(v83 + 16);
            *(_OWORD *)float64x2_t v72 = v84;
            double v85 = v72 + 24;
          }
          int v125 = v85;
          uint64_t v96 = *(void *)(v127 + 24 * (v122 % v13)) + 24 * (v54 % v14);
          if (v85 >= v126)
          {
            unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((v85 - (unsigned char *)v124) >> 3);
            unint64_t v100 = v99 + 1;
            if (v99 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_154:
            }
              std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v126 - (unsigned char *)v124) >> 3) > v100) {
              unint64_t v100 = 0x5555555555555556 * ((v126 - (unsigned char *)v124) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v126 - (unsigned char *)v124) >> 3) >= 0x555555555555555) {
              unint64_t v101 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v101 = v100;
            }
            if (v101) {
              unint64_t v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)&v126, v101);
            }
            else {
              unint64_t v102 = 0;
            }
            uint64_t v103 = &v102[24 * v99];
            long long v104 = *(_OWORD *)v96;
            *((void *)v103 + 2) = *(void *)(v96 + 16);
            *(_OWORD *)uint64_t v103 = v104;
            uint64_t v106 = (char *)v124;
            unint64_t v105 = v125;
            unint64_t v107 = v103;
            if (v125 != v124)
            {
              do
              {
                long long v108 = *(_OWORD *)(v105 - 24);
                *((void *)v107 - 1) = *((void *)v105 - 1);
                *(_OWORD *)(v107 - 24) = v108;
                v107 -= 24;
                v105 -= 24;
              }
              while (v105 != v106);
              unint64_t v105 = (char *)v124;
            }
            long long v98 = v103 + 24;
            long long v124 = v107;
            int v125 = v103 + 24;
            unint64_t v126 = &v102[24 * v101];
            if (v105) {
              operator delete(v105);
            }
          }
          else
          {
            long long v97 = *(_OWORD *)v96;
            *((void *)v85 + 2) = *(void *)(v96 + 16);
            *(_OWORD *)double v85 = v97;
            long long v98 = v85 + 24;
          }
          int v125 = v98;
          if (ClipperLib::Area((uint64_t *)&v124) < 0.0 && v124 != v98)
          {
            uint64_t v109 = v98 - 24;
            if (v98 - 24 > v124)
            {
              unint64_t v110 = (char *)v124 + 24;
              do
              {
                *(_OWORD *)__p = *(_OWORD *)(v110 - 24);
                long long v111 = *(_OWORD *)__p;
                v131[0] = *((void *)v110 - 1);
                uint64_t v112 = v131[0];
                uint64_t v113 = *((void *)v109 + 2);
                *(_OWORD *)(v110 - 24) = *(_OWORD *)v109;
                *((void *)v110 - 1) = v113;
                *((void *)v109 + 2) = v112;
                *(_OWORD *)uint64_t v109 = v111;
                v109 -= 24;
                _CF = v110 >= v109;
                v110 += 24;
              }
              while (!_CF);
            }
          }
          unint64_t v114 = a3[1];
          if (v114 >= a3[2])
          {
            uint64_t v115 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(a3, (uint64_t)&v124);
          }
          else
          {
            std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)a3, (uint64_t)&v124);
            uint64_t v115 = v114 + 24;
          }
          a3[1] = v115;
          if (v124)
          {
            int v125 = (char *)v124;
            operator delete(v124);
          }
        }
        while (v54 != v119);
        unint64_t v52 = v55;
      }
      while (v55 != v118);
    }
    __p[0] = &v127;
    std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_1C4689544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *__p,uint64_t a24)
{
  __p = &a20;
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void ClipperLib::MinkowskiSum(uint64_t *a1, void *a2, uint64_t *a3, unsigned int a4)
{
  ClipperLib::Minkowski(a1, a2, a3, 1, a4);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v5 = &off_1F1FB03A8;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v10 = 0;
  v11[0] = v11;
  v11[1] = v11;
  unint64_t v11[2] = 0;
  char v12 = 0;
  char v19 = 0;
  char v13 = 0;
  char v14 = 0;
  __int16 v23 = 0;
  uint64_t v15 = 0;
  double v16 = off_1F1FB03F0;
  ClipperLib::ClipperBase::AddPaths((uint64_t)&v16, a3, 0, 1);
  ClipperLib::Clipper::Execute((uint64_t)&v5, 1, a3, 1, 1);
  uint64_t v5 = &off_1F1FB03A8;
  double v16 = off_1F1FB03F0;
  std::__list_imp<long long>::clear(v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v7[1])
  {
    *(void **)&long long v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v16);
}

void sub_1C468970C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ClipperLib::TranslatePath(void *a1, int64x2_t **a2, int64x2_t *a3)
{
  std::vector<ClipperLib::IntPoint>::resize((uint64_t)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
  uint64_t v6 = (_OWORD *)*a1;
  uint64_t v7 = a1[1] - *a1;
  if (v7)
  {
    unint64_t v8 = v7 / 24;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    unint64_t v9 = *a2 + 1;
    __asm { FMOV            V0.2S, #-1.0 }
    do
    {
      int64x2_t v15 = *(int64x2_t *)v6;
      uint64_t v6 = (_OWORD *)((char *)v6 + 24);
      v9[-1] = vaddq_s64(*a3, v15);
      v9->i64[0] = _D0;
      unint64_t v9 = (int64x2_t *)((char *)v9 + 24);
      --v8;
    }
    while (v8);
  }
}

void ClipperLib::MinkowskiSum(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v46 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v24 = &off_1F1FB03A8;
  *(_OWORD *)uint64_t v25 = 0u;
  *(_OWORD *)uint64_t v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v29 = 0;
  v30[0] = v30;
  v30[1] = v30;
  v30[2] = 0;
  char v31 = 0;
  char v38 = 0;
  char v32 = 0;
  char v33 = 0;
  __int16 v42 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = off_1F1FB03F0;
  uint64_t v4 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      ClipperLib::Minkowski(a1, (void *)(v4 + 24 * v8), &v21, 1, a4);
      uint64_t v9 = v21;
      if (v22 != v21)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        char v12 = (char *)&v25[-1] + (void)*(v24 - 3);
        do
        {
          (*(void (**)(char *, uint64_t, void, uint64_t))(*(void *)v12 + 16))(v12, v9 + v10, 0, 1);
          ++v11;
          uint64_t v9 = v21;
          v10 += 24;
        }
        while (v11 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v21) >> 3));
      }
      if (a4)
      {
        __p = 0;
        char v19 = 0;
        uint64_t v20 = 0;
        char v13 = (void *)(*a2 + 24 * v8);
        uint64_t v14 = *a1;
        int64x2_t v16 = *(int64x2_t *)*a1;
        uint64_t v17 = *(void *)(v14 + 16);
        ClipperLib::TranslatePath(v13, (int64x2_t **)&__p, &v16);
        ClipperLib::ClipperBase::AddPath((uint64_t)&v25[-1] + (void)*(v24 - 3), (uint64_t)&__p, 1, 1);
        if (__p)
        {
          char v19 = __p;
          operator delete(__p);
        }
      }
      __p = &v21;
      std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      ++v8;
      uint64_t v4 = *a2;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  ClipperLib::Clipper::Execute((uint64_t)&v24, 1, a3, 1, 1);
  uint64_t v24 = &off_1F1FB03A8;
  uint64_t v35 = off_1F1FB03F0;
  std::__list_imp<long long>::clear(v30);
  if ((void)v28)
  {
    *((void *)&v28 + 1) = v28;
    operator delete((void *)v28);
  }
  if (v26[1])
  {
    *(void **)&long long v27 = v26[1];
    operator delete(v26[1]);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v35);
}

void sub_1C4689A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
}

void ClipperLib::MinkowskiDiff(uint64_t *a1, void *a2, uint64_t *a3)
{
  ClipperLib::Minkowski(a1, a2, a3, 0, 1u);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v4 = &off_1F1FB03A8;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  long long v7 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v9 = 0;
  v10[0] = v10;
  v10[1] = v10;
  unint64_t v10[2] = 0;
  char v11 = 0;
  char v18 = 0;
  char v12 = 0;
  char v13 = 0;
  __int16 v22 = 0;
  uint64_t v14 = 0;
  int64x2_t v15 = off_1F1FB03F0;
  ClipperLib::ClipperBase::AddPaths((uint64_t)&v15, a3, 0, 1);
  ClipperLib::Clipper::Execute((uint64_t)&v4, 1, a3, 1, 1);
  uint64_t v4 = &off_1F1FB03A8;
  int64x2_t v15 = off_1F1FB03F0;
  std::__list_imp<long long>::clear(v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[1])
  {
    *(void **)&long long v7 = v6[1];
    operator delete(v6[1]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v15);
}

void sub_1C4689C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ClipperLib::AddPolyNodeToPaths(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (a2 != 1)
  {
    uint64_t v5 = result;
    if (a2 != 2 || !*(unsigned char *)(result + 68))
    {
      uint64_t v6 = result + 8;
      if (*(void *)(result + 8) != *(void *)(result + 16))
      {
        unint64_t v7 = a3[1];
        if (v7 >= a3[2])
        {
          unint64_t result = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(a3, v6);
        }
        else
        {
          std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)a3, v6);
          unint64_t result = v7 + 24;
        }
        a3[1] = result;
      }
    }
    uint64_t v8 = *(void *)(v5 + 32);
    if ((int)((unint64_t)(*(void *)(v5 + 40) - v8) >> 3) >= 1)
    {
      uint64_t v9 = 0;
      do
      {
        unint64_t result = ClipperLib::AddPolyNodeToPaths(*(void *)(v8 + 8 * v9++), a2, a3);
        uint64_t v8 = *(void *)(v5 + 32);
      }
      while (v9 < (int)((unint64_t)(*(void *)(v5 + 40) - v8) >> 3));
    }
  }
  return result;
}

uint64_t ClipperLib::PolyTreeToPaths(uint64_t a1, uint64_t *a2)
{
  std::vector<std::vector<ClipperLib::IntPoint>>::resize(a2, 0);
  uint64_t v4 = *(void **)(a1 + 80);
  uint64_t v5 = (*(void *)(a1 + 88) - (void)v4) >> 3;
  if ((int)v5 >= 1) {
    LODWORD(v5) = v5 - (**(void **)(a1 + 32) != *v4);
  }
  std::vector<std::vector<ClipperLib::IntPoint>>::reserve(a2, (int)v5);

  return ClipperLib::AddPolyNodeToPaths(a1, 0, a2);
}

uint64_t ClipperLib::ClosedPathsFromPolyTree(uint64_t a1, uint64_t *a2)
{
  std::vector<std::vector<ClipperLib::IntPoint>>::resize(a2, 0);
  uint64_t v4 = *(void **)(a1 + 80);
  uint64_t v5 = (*(void *)(a1 + 88) - (void)v4) >> 3;
  if ((int)v5 >= 1) {
    LODWORD(v5) = v5 - (**(void **)(a1 + 32) != *v4);
  }
  std::vector<std::vector<ClipperLib::IntPoint>>::reserve(a2, (int)v5);

  return ClipperLib::AddPolyNodeToPaths(a1, 2, a2);
}

uint64_t ClipperLib::OpenPathsFromPolyTree(uint64_t a1, uint64_t *a2)
{
  std::vector<std::vector<ClipperLib::IntPoint>>::resize(a2, 0);
  uint64_t v4 = *(void **)(a1 + 80);
  uint64_t v5 = (*(void *)(a1 + 88) - (void)v4) >> 3;
  if ((int)v5 >= 1) {
    LODWORD(v5) = v5 - (**(void **)(a1 + 32) != *v4);
  }
  uint64_t result = std::vector<std::vector<ClipperLib::IntPoint>>::reserve(a2, (int)v5);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  if ((int)((unint64_t)(v7 - v8) >> 3) >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(v8 + 8 * v9);
      if (*(unsigned char *)(v10 + 68))
      {
        uint64_t v11 = v10 + 8;
        unint64_t v12 = a2[1];
        if (v12 >= a2[2])
        {
          uint64_t result = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(a2, v11);
        }
        else
        {
          std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)a2, v11);
          uint64_t result = v12 + 24;
        }
        a2[1] = result;
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v7 = *(void *)(a1 + 40);
      }
      ++v9;
    }
    while (v9 < (int)((unint64_t)(v7 - v8) >> 3));
  }
  return result;
}

void *ClipperLib::operator<<(void *a1)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)",", 1);
  BOOL v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)")", 1);
  return a1;
}

void *ClipperLib::operator<<(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = (v3 - *a2) >> 3;
    if (0xAAAAAAAAAAAAAAABLL * v4 != 1)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * v4 - 1;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
        uint64_t v7 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
        uint64_t v8 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"), ", 3);
        v5 += 24;
        --v6;
      }
      while (v6);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",", 1);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")\n", 2);
  }
  return a1;
}

void *ClipperLib::operator<<(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      a1 = ClipperLib::operator<<(a1, (void *)(v2 + v4));
      ++v5;
      uint64_t v2 = *a2;
      v4 += 24;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n", 1);
}

void virtual thunk to'ClipperLib::Clipper::~Clipper(ClipperLib::Clipper *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  void *v1 = &off_1F1FB03A8;
  v1[18] = off_1F1FB03F0;
  std::__list_imp<long long>::clear(v1 + 11);
  uint64_t v2 = (void *)v1[7];
  if (v2)
  {
    v1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)v1[4];
  if (v3)
  {
    v1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }

  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)(v1 + 18));
}

{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  void *v1 = &off_1F1FB03A8;
  v1[18] = off_1F1FB03F0;
  std::__list_imp<long long>::clear(v1 + 11);
  uint64_t v2 = (void *)v1[7];
  if (v2)
  {
    v1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)v1[4];
  if (v3)
  {
    v1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)(v1 + 18));

  JUMPOUT(0x1C8783F10);
}

void ClipperLib::PolyNode::~PolyNode(ClipperLib::PolyNode *this)
{
  ClipperLib::PolyNode::~PolyNode(this);

  JUMPOUT(0x1C8783F10);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1F1FB0428;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void std::vector<ClipperLib::PolyNode *>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    }
    else {
      char v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    int64x2_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    long long v16 = &v14[8 * a2];
    char v18 = (char *)*a1;
    long long v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      long long v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

ClipperLib::clipperException *ClipperLib::clipperException::clipperException(ClipperLib::clipperException *this, char *a2)
{
  *(void *)this = &unk_1F1FB0378;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 1, a2);
  return this;
}

void sub_1C468A4D0(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void ClipperLib::clipperException::~clipperException(std::exception *this)
{
  ClipperLib::clipperException::~clipperException(this);

  JUMPOUT(0x1C8783F10);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_1F1FB0378;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }

  std::exception::~exception(this);
}

uint64_t ClipperLib::clipperException::what(ClipperLib::clipperException *this)
{
  uint64_t result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::LocalMinimum>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

void std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v41 = *(void *)(a2 - 24);
                unint64_t v40 = a2 - 24;
                if (*(void *)v10 < v41)
                {
                  uint64_t v97 = *(void *)(v10 + 16);
                  long long v89 = *(_OWORD *)v10;
                  long long v42 = *(_OWORD *)v40;
                  *(void *)(v10 + 16) = *(void *)(v40 + 16);
                  *(_OWORD *)unint64_t v10 = v42;
                  *(void *)(v40 + 16) = v97;
                  *(_OWORD *)unint64_t v40 = v89;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((long long *)v10, (uint64_t *)(v10 + 24), (uint64_t *)(a2 - 24));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(v10, (uint64_t *)(v10 + 24), (uint64_t *)(v10 + 48), a2 - 24);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__n128 *)v10, (uint64_t *)(v10 + 24), (uint64_t *)(v10 + 48), (__n128 *)(v10 + 72), (__n128 *)(a2 - 24));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            unint64_t v43 = v10 + 24;
            BOOL v45 = v10 == a2 || v43 == a2;
            if (a4)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                unint64_t v47 = v10;
                do
                {
                  unint64_t v48 = v43;
                  uint64_t v49 = *(void *)(v47 + 24);
                  if (*(void *)v47 < v49)
                  {
                    long long v90 = *(_OWORD *)(v47 + 32);
                    uint64_t v50 = v46;
                    while (1)
                    {
                      uint64_t v51 = v10 + v50;
                      *(_OWORD *)(v51 + 24) = *(_OWORD *)(v10 + v50);
                      *(void *)(v51 + 40) = *(void *)(v10 + v50 + 16);
                      if (!v50) {
                        break;
                      }
                      v50 -= 24;
                      if (*(void *)(v51 - 24) >= v49)
                      {
                        uint64_t v52 = v10 + v50 + 24;
                        goto LABEL_78;
                      }
                    }
                    uint64_t v52 = v10;
LABEL_78:
                    *(void *)uint64_t v52 = v49;
                    *(_OWORD *)(v52 + 8) = v90;
                  }
                  unint64_t v43 = v48 + 24;
                  v46 += 24;
                  unint64_t v47 = v48;
                }
                while (v48 + 24 != a2);
              }
            }
            else if (!v45)
            {
              do
              {
                unint64_t v80 = v43;
                uint64_t v81 = *(void *)(a1 + 24);
                if (*(void *)a1 < v81)
                {
                  long long v93 = *(_OWORD *)(a1 + 32);
                  do
                  {
                    *(_OWORD *)unint64_t v43 = *(_OWORD *)(v43 - 24);
                    *(void *)(v43 + 16) = *(void *)(v43 - 8);
                    uint64_t v82 = *(void *)(v43 - 48);
                    v43 -= 24;
                  }
                  while (v82 < v81);
                  *(void *)unint64_t v43 = v81;
                  *(_OWORD *)(v43 + 8) = v93;
                }
                unint64_t v43 = v80 + 24;
                a1 = v80;
              }
              while (v80 + 24 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v53 = (v12 - 2) >> 1;
              int64_t v54 = v53;
              do
              {
                int64_t v55 = v54;
                if (v53 >= v54)
                {
                  uint64_t v56 = (2 * v54) | 1;
                  int64x2_t v57 = (void *)(v10 + 24 * v56);
                  if (2 * v55 + 2 < (uint64_t)v12)
                  {
                    uint64_t v58 = v57[3];
                    if (v58 < *v57)
                    {
                      v57 += 3;
                      uint64_t v56 = 2 * v55 + 2;
                    }
                    else
                    {
                      uint64_t v58 = *v57;
                    }
                  }
                  else
                  {
                    uint64_t v58 = *v57;
                  }
                  int v59 = (void *)(v10 + 24 * v55);
                  uint64_t v60 = *v59;
                  if (*v59 >= v58)
                  {
                    long long v91 = *(_OWORD *)(v59 + 1);
                    do
                    {
                      unint64_t v61 = v59;
                      int v59 = v57;
                      long long v62 = *(_OWORD *)v57;
                      v61[2] = v57[2];
                      *(_OWORD *)unint64_t v61 = v62;
                      if (v53 < v56) {
                        break;
                      }
                      uint64_t v63 = (2 * v56) | 1;
                      int64x2_t v57 = (void *)(v10 + 24 * v63);
                      uint64_t v56 = 2 * v56 + 2;
                      if (v56 < (uint64_t)v12)
                      {
                        uint64_t v64 = v57[3];
                        if (v64 < *v57)
                        {
                          v57 += 3;
                        }
                        else
                        {
                          uint64_t v64 = *v57;
                          uint64_t v56 = v63;
                        }
                      }
                      else
                      {
                        uint64_t v64 = *v57;
                        uint64_t v56 = v63;
                      }
                    }
                    while (v60 >= v64);
                    void *v59 = v60;
                    *(_OWORD *)(v59 + 1) = v91;
                  }
                }
                int64_t v54 = v55 - 1;
              }
              while (v55);
              int64_t v65 = v11 / 0x18uLL;
              do
              {
                uint64_t v66 = 0;
                uint64_t v98 = *(void *)(v10 + 16);
                long long v92 = *(_OWORD *)v10;
                unint64_t v67 = v10;
                do
                {
                  uint64_t v68 = v67 + 24 * v66 + 24;
                  uint64_t v69 = (2 * v66) | 1;
                  uint64_t v70 = 2 * v66 + 2;
                  if (v70 < v65 && *(void *)(v68 + 24) < *(void *)v68)
                  {
                    v68 += 24;
                    uint64_t v69 = v70;
                  }
                  long long v71 = *(_OWORD *)v68;
                  *(void *)(v67 + 16) = *(void *)(v68 + 16);
                  *(_OWORD *)unint64_t v67 = v71;
                  unint64_t v67 = v68;
                  uint64_t v66 = v69;
                }
                while (v69 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
                a2 -= 24;
                if (v68 == a2)
                {
                  *(void *)(v68 + 16) = v98;
                  *(_OWORD *)uint64_t v68 = v92;
                }
                else
                {
                  long long v72 = *(_OWORD *)a2;
                  *(void *)(v68 + 16) = *(void *)(a2 + 16);
                  *(_OWORD *)uint64_t v68 = v72;
                  *(void *)(a2 + 16) = v98;
                  *(_OWORD *)a2 = v92;
                  uint64_t v73 = v68 - v10 + 24;
                  if (v73 >= 25)
                  {
                    unint64_t v74 = (v73 / 0x18uLL - 2) >> 1;
                    uint64_t v75 = v10 + 24 * v74;
                    uint64_t v76 = *(void *)v68;
                    if (*(void *)v68 < *(void *)v75)
                    {
                      long long v85 = *(_OWORD *)(v68 + 8);
                      do
                      {
                        uint64_t v77 = v68;
                        uint64_t v68 = v75;
                        long long v78 = *(_OWORD *)v75;
                        *(void *)(v77 + 16) = *(void *)(v75 + 16);
                        *(_OWORD *)uint64_t v77 = v78;
                        if (!v74) {
                          break;
                        }
                        unint64_t v74 = (v74 - 1) >> 1;
                        uint64_t v75 = v10 + 24 * v74;
                      }
                      while (v76 < *(void *)v75);
                      *(void *)uint64_t v68 = v76;
                      *(_OWORD *)(v68 + 8) = v85;
                    }
                  }
                }
              }
              while (v65-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (uint64_t *)(v10 + 24 * (v12 >> 1));
          if ((unint64_t)v11 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((long long *)a1, (uint64_t *)(a1 + 24 * (v12 >> 1)), (uint64_t *)(a2 - 24));
            uint64_t v15 = 3 * v13;
            long long v16 = (uint64_t *)(a1 + 24 * v13 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((long long *)(a1 + 24), v16, (uint64_t *)(a2 - 48));
            long long v17 = (uint64_t *)(a1 + 24 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((long long *)(a1 + 48), v17, (uint64_t *)(a2 - 72));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((long long *)v16, v14, v17);
            uint64_t v94 = *(void *)(a1 + 16);
            long long v86 = *(_OWORD *)a1;
            uint64_t v18 = v14[2];
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(void *)(a1 + 16) = v18;
            void v14[2] = v94;
            *(_OWORD *)uint64_t v14 = v86;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((long long *)(a1 + 24 * (v12 >> 1)), (uint64_t *)a1, (uint64_t *)(a2 - 24));
          }
          --a3;
          uint64_t v19 = *(void *)a1;
          if ((a4 & 1) != 0 || v19 < *(void *)(a1 - 24)) {
            break;
          }
          long long v84 = *(_OWORD *)(a1 + 8);
          if (*(void *)(a2 - 24) >= v19)
          {
            unint64_t v33 = a1 + 24;
            do
            {
              unint64_t v10 = v33;
              if (v33 >= a2) {
                break;
              }
              v33 += 24;
            }
            while (*(void *)v10 >= v19);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              uint64_t v32 = *(void *)(v10 + 24);
              v10 += 24;
            }
            while (v32 >= v19);
          }
          unint64_t v34 = a2;
          if (v10 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              uint64_t v35 = *(void *)(v34 - 24);
              v34 -= 24;
            }
            while (v35 < v19);
          }
          while (v10 < v34)
          {
            uint64_t v96 = *(void *)(v10 + 16);
            long long v88 = *(_OWORD *)v10;
            long long v36 = *(_OWORD *)v34;
            *(void *)(v10 + 16) = *(void *)(v34 + 16);
            *(_OWORD *)unint64_t v10 = v36;
            *(void *)(v34 + 16) = v96;
            *(_OWORD *)unint64_t v34 = v88;
            do
            {
              uint64_t v37 = *(void *)(v10 + 24);
              v10 += 24;
            }
            while (v37 >= v19);
            do
            {
              uint64_t v38 = *(void *)(v34 - 24);
              v34 -= 24;
            }
            while (v38 < v19);
          }
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 != a1)
          {
            long long v39 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 16) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v39;
          }
          a4 = 0;
          *(void *)(v10 - 24) = v19;
          *(_OWORD *)(v10 - 16) = v84;
        }
        uint64_t v20 = 0;
        long long v83 = *(_OWORD *)(a1 + 8);
        do
        {
          uint64_t v21 = *(void *)(a1 + v20 + 24);
          v20 += 24;
        }
        while (v19 < v21);
        unint64_t v22 = a1 + v20;
        unint64_t v23 = a2;
        if (v20 == 24)
        {
          unint64_t v23 = a2;
          do
          {
            if (v22 >= v23) {
              break;
            }
            uint64_t v25 = *(void *)(v23 - 24);
            v23 -= 24;
          }
          while (v19 >= v25);
        }
        else
        {
          do
          {
            uint64_t v24 = *(void *)(v23 - 24);
            v23 -= 24;
          }
          while (v19 >= v24);
        }
        unint64_t v10 = a1 + v20;
        if (v22 < v23)
        {
          unint64_t v26 = v23;
          do
          {
            uint64_t v95 = *(void *)(v10 + 16);
            long long v87 = *(_OWORD *)v10;
            long long v27 = *(_OWORD *)v26;
            *(void *)(v10 + 16) = *(void *)(v26 + 16);
            *(_OWORD *)unint64_t v10 = v27;
            *(void *)(v26 + 16) = v95;
            *(_OWORD *)unint64_t v26 = v87;
            do
            {
              uint64_t v28 = *(void *)(v10 + 24);
              v10 += 24;
            }
            while (v19 < v28);
            do
            {
              uint64_t v29 = *(void *)(v26 - 24);
              v26 -= 24;
            }
            while (v19 >= v29);
          }
          while (v10 < v26);
        }
        if (v10 - 24 != a1)
        {
          long long v30 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 16) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v30;
        }
        *(void *)(v10 - 24) = v19;
        *(_OWORD *)(v10 - 16) = v83;
        if (v22 >= v23) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(a1, v10 - 24);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(v10, a2))
      {
        break;
      }
      if (!v31) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 24;
    if (!v31) {
      continue;
    }
    break;
  }
}

long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(long long *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  if (*(void *)result >= *a2)
  {
    if (v3 < v4)
    {
      uint64_t v8 = a2[2];
      long long v9 = *(_OWORD *)a2;
      uint64_t v10 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v10;
      *(_OWORD *)a3 = v9;
      a3[2] = v8;
      if (*(void *)result < *a2)
      {
        uint64_t v11 = *((void *)result + 2);
        long long v12 = *result;
        uint64_t v13 = a2[2];
        *uint64_t result = *(_OWORD *)a2;
        *((void *)result + 2) = v13;
        *(_OWORD *)a2 = v12;
        a2[2] = v11;
      }
    }
  }
  else
  {
    if (v3 >= v4)
    {
      uint64_t v14 = *((void *)result + 2);
      long long v15 = *result;
      uint64_t v16 = a2[2];
      *uint64_t result = *(_OWORD *)a2;
      *((void *)result + 2) = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
      if (*a2 >= *a3) {
        return result;
      }
      uint64_t v5 = a2[2];
      long long v6 = *(_OWORD *)a2;
      uint64_t v17 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v17;
    }
    else
    {
      uint64_t v5 = *((void *)result + 2);
      long long v6 = *result;
      uint64_t v7 = a3[2];
      *uint64_t result = *(_OWORD *)a3;
      *((void *)result + 2) = v7;
    }
    *(_OWORD *)a3 = v6;
    a3[2] = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v6 = (long long *)(a2 - 24);
      if (*(void *)a1 < *(void *)(a2 - 24))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v9;
        long long *v6 = v8;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((long long *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__n128 *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      uint64_t v10 = (void *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((long long *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    uint64_t v14 = *(void *)v11;
    if (*v10 < *(void *)v11)
    {
      long long v18 = *(_OWORD *)(v11 + 8);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(void *)(v16 + 88) = *(void *)(a1 + v15 + 64);
        if (v15 == -48) {
          break;
        }
        v15 -= 24;
        if (*(void *)(v16 + 24) >= v14)
        {
          uint64_t v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(void *)uint64_t v17 = v14;
      *(_OWORD *)(v17 + 8) = v18;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    uint64_t v10 = (void *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((long long *)a1, a2, a3);
  if (*a3 < *(void *)a4)
  {
    uint64_t v9 = a3[2];
    __n128 result = *(__n128 *)a3;
    uint64_t v10 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v10;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v9;
    if (*a2 < *a3)
    {
      uint64_t v11 = a2[2];
      __n128 result = *(__n128 *)a2;
      uint64_t v12 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v12;
      *(__n128 *)a3 = result;
      a3[2] = v11;
      if (*(void *)a1 < *a2)
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v14 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        a2[2] = v13;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(__n128 *a1, uint64_t *a2, uint64_t *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((uint64_t)a1, a2, a3, (uint64_t)a4).n128_u64[0];
  if ((int64_t)a4->n128_u64[0] < (int64_t)a5->n128_u64[0])
  {
    unint64_t v11 = a4[1].n128_u64[0];
    __n128 result = *a4;
    unint64_t v12 = a5[1].n128_u64[0];
    *a4 = *a5;
    a4[1].n128_u64[0] = v12;
    *a5 = result;
    a5[1].n128_u64[0] = v11;
    if (*a3 < (int64_t)a4->n128_u64[0])
    {
      uint64_t v13 = a3[2];
      __n128 result = *(__n128 *)a3;
      uint64_t v14 = a4[1].n128_i64[0];
      *(__n128 *)a3 = *a4;
      a3[2] = v14;
      *a4 = result;
      a4[1].n128_u64[0] = v13;
      if (*a2 < *a3)
      {
        uint64_t v15 = a2[2];
        __n128 result = *(__n128 *)a2;
        uint64_t v16 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v16;
        *(__n128 *)a3 = result;
        a3[2] = v15;
        if ((int64_t)a1->n128_u64[0] < *a2)
        {
          uint64_t v17 = a1[1].n128_i64[0];
          __n128 result = *a1;
          uint64_t v18 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v18;
          *(__n128 *)a2 = result;
          a2[2] = v17;
        }
      }
    }
  }
  return result;
}

void std::vector<std::vector<ClipperLib::IntPoint>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<ClipperLib::IntPoint>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1C468B3D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(void), uint64_t a4, char a5)
{
  unint64_t v10 = (uint64_t *)result;
  while (2)
  {
    unint64_t v11 = a2 - 1;
    long long v84 = a2 - 2;
    long long v87 = a2;
    uint64_t v82 = a2 - 3;
    unint64_t v12 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v10 = v12;
          size_t v13 = v87;
          uint64_t v14 = (char *)v87 - (char *)v12;
          uint64_t v15 = v87 - v12;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0:
              case 1:
                return result;
              case 2:
                __n128 result = ((uint64_t (*)(void, uint64_t))*a3)(*(v87 - 1), *v10);
                if (result)
                {
                  uint64_t v42 = *v10;
                  uint64_t *v10 = *(v87 - 1);
                  *(v87 - 1) = v42;
                }
                break;
              case 3:
                __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v10, v10 + 1, v11, a3);
                break;
              case 4:
                __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v10, v10 + 1, v10 + 2, v11, a3);
                break;
              case 5:
                __n128 result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v10, v10 + 1, v10 + 2, v10 + 3, v11, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 191)
          {
            unint64_t v43 = v10 + 1;
            BOOL v45 = v10 == v87 || v43 == v87;
            if (a5)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                unint64_t v47 = v10;
                do
                {
                  uint64_t v49 = *v47;
                  uint64_t v48 = v47[1];
                  unint64_t v47 = v43;
                  __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v48, v49);
                  if (result)
                  {
                    uint64_t v50 = *v47;
                    uint64_t v51 = v46;
                    while (1)
                    {
                      *(uint64_t *)((char *)v10 + v51 + 8) = *(uint64_t *)((char *)v10 + v51);
                      if (!v51) {
                        break;
                      }
                      __n128 result = ((uint64_t (*)(uint64_t, void))*a3)(v50, *(uint64_t *)((char *)v10 + v51 - 8));
                      v51 -= 8;
                      if ((result & 1) == 0)
                      {
                        uint64_t v52 = (uint64_t *)((char *)v10 + v51 + 8);
                        goto LABEL_81;
                      }
                    }
                    uint64_t v52 = v10;
LABEL_81:
                    *uint64_t v52 = v50;
                  }
                  unint64_t v43 = v47 + 1;
                  v46 += 8;
                }
                while (v47 + 1 != v87);
              }
            }
            else if (!v45)
            {
              do
              {
                uint64_t v77 = *v10;
                uint64_t v76 = v10[1];
                unint64_t v10 = v43;
                __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v76, v77);
                if (result)
                {
                  uint64_t v78 = *v10;
                  unint64_t v79 = v10;
                  do
                  {
                    unint64_t v80 = v79;
                    uint64_t v81 = *--v79;
                    *unint64_t v80 = v81;
                    __n128 result = ((uint64_t (*)(uint64_t, void))*a3)(v78, *(v80 - 2));
                  }
                  while ((result & 1) != 0);
                  *unint64_t v79 = v78;
                }
                unint64_t v43 = v10 + 1;
              }
              while (v10 + 1 != v87);
            }
            return result;
          }
          if (!a4)
          {
            if (v10 != v87)
            {
              int64_t v53 = (unint64_t)(v15 - 2) >> 1;
              int64_t v85 = v53;
              do
              {
                int64_t v54 = v53;
                if (v85 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  uint64_t v56 = &v10[v55];
                  if (2 * v53 + 2 < v15 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v56, v56[1]))
                  {
                    ++v56;
                    uint64_t v55 = 2 * v54 + 2;
                  }
                  int64x2_t v57 = &v10[v54];
                  __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v56, *v57);
                  if ((result & 1) == 0)
                  {
                    int64_t v83 = v54;
                    uint64_t v58 = *v57;
                    do
                    {
                      int v59 = v56;
                      uint64_t *v57 = *v56;
                      if (v85 < v55) {
                        break;
                      }
                      uint64_t v60 = (2 * v55) | 1;
                      uint64_t v56 = &v10[v60];
                      if (2 * v55 + 2 < v15 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v56, v56[1]))
                      {
                        ++v56;
                        uint64_t v60 = 2 * v55 + 2;
                      }
                      __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v56, v58);
                      int64x2_t v57 = v59;
                      uint64_t v55 = v60;
                    }
                    while (!result);
                    uint64_t *v59 = v58;
                    size_t v13 = v87;
                    int64_t v54 = v83;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v61 = (unint64_t)v14 >> 3;
              do
              {
                long long v62 = v13;
                uint64_t v63 = 0;
                uint64_t v64 = v61 - 2;
                uint64_t v86 = *v10;
                if (v61 < 2) {
                  uint64_t v64 = v61 - 1;
                }
                uint64_t v65 = v64 >> 1;
                uint64_t v66 = v10;
                do
                {
                  unint64_t v67 = &v66[v63 + 1];
                  uint64_t v68 = (2 * v63) | 1;
                  uint64_t v69 = 2 * v63 + 2;
                  if (v69 < v61)
                  {
                    __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v66[v63 + 1], v66[v63 + 2]);
                    if (result)
                    {
                      ++v67;
                      uint64_t v68 = v69;
                    }
                  }
                  uint64_t *v66 = *v67;
                  uint64_t v66 = v67;
                  uint64_t v63 = v68;
                }
                while (v68 <= v65);
                size_t v13 = v62 - 1;
                if (v67 == v62 - 1)
                {
                  uint64_t *v67 = v86;
                }
                else
                {
                  uint64_t *v67 = *v13;
                  *size_t v13 = v86;
                  uint64_t v70 = (char *)v67 - (char *)v10 + 8;
                  if (v70 >= 9)
                  {
                    unint64_t v71 = (((unint64_t)v70 >> 3) - 2) >> 1;
                    long long v72 = &v10[v71];
                    __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v72, *v67);
                    if (result)
                    {
                      uint64_t v73 = *v67;
                      do
                      {
                        unint64_t v74 = v72;
                        uint64_t *v67 = *v72;
                        if (!v71) {
                          break;
                        }
                        unint64_t v71 = (v71 - 1) >> 1;
                        long long v72 = &v10[v71];
                        __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v72, v73);
                        unint64_t v67 = v74;
                      }
                      while ((result & 1) != 0);
                      *unint64_t v74 = v73;
                    }
                  }
                }
              }
              while (v61-- > 2);
            }
            return result;
          }
          unint64_t v16 = (unint64_t)v15 >> 1;
          uint64_t v17 = &v10[(unint64_t)v15 >> 1];
          if ((unint64_t)v14 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v17, v10, v11, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v10, v17, v11, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v10 + 1, v17 - 1, v84, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v10 + 2, &v10[v16 + 1], v82, a3);
            size_t v13 = v87;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v17 - 1, v17, &v10[v16 + 1], a3);
            uint64_t v18 = *v10;
            uint64_t *v10 = *v17;
            *uint64_t v17 = v18;
          }
          --a4;
          if (a5 & 1) != 0 || (((uint64_t (*)(void, uint64_t))*a3)(*(v10 - 1), *v10)) {
            break;
          }
          uint64_t v33 = *v10;
          __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v10, *v11);
          if (result)
          {
            unint64_t v12 = v10;
            do
            {
              uint64_t v34 = v12[1];
              ++v12;
              __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v34);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v35 = v10 + 1;
            do
            {
              unint64_t v12 = v35;
              if (v35 >= v87) {
                break;
              }
              ++v35;
              __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, *v12);
            }
            while (!result);
          }
          long long v36 = v87;
          if (v12 < v87)
          {
            long long v36 = v87;
            do
            {
              uint64_t v37 = *--v36;
              __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v37);
            }
            while ((result & 1) != 0);
          }
          while (v12 < v36)
          {
            uint64_t v38 = *v12;
            uint64_t *v12 = *v36;
            uint64_t *v36 = v38;
            do
            {
              uint64_t v39 = v12[1];
              ++v12;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v33, v39));
            do
            {
              uint64_t v40 = *--v36;
              __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v40);
            }
            while ((result & 1) != 0);
          }
          uint64_t v41 = v12 - 1;
          BOOL v5 = v12 - 1 >= v10;
          BOOL v6 = v12 - 1 == v10;
          if (v12 - 1 != v10) {
            uint64_t *v10 = *v41;
          }
          a5 = 0;
          *uint64_t v41 = v33;
        }
        uint64_t v19 = 0;
        uint64_t v20 = *v10;
        do
          char v21 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10[++v19], v20);
        while ((v21 & 1) != 0);
        unint64_t v22 = &v10[v19];
        unint64_t v23 = v13;
        if (v19 == 1)
        {
          unint64_t v23 = v13;
          do
          {
            if (v22 >= v23) {
              break;
            }
            uint64_t v25 = *--v23;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v25, v20) & 1) == 0);
        }
        else
        {
          do
            uint64_t v24 = *--v23;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v24, v20));
        }
        if (v22 >= v23)
        {
          BOOL v31 = v22 - 1;
        }
        else
        {
          unint64_t v26 = &v10[v19];
          long long v27 = v23;
          do
          {
            uint64_t v28 = *v26;
            uint64_t *v26 = *v27;
            *long long v27 = v28;
            do
            {
              uint64_t v29 = v26[1];
              ++v26;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v29, v20) & 1) != 0);
            do
              uint64_t v30 = *--v27;
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v30, v20));
          }
          while (v26 < v27);
          BOOL v31 = v26 - 1;
        }
        if (v31 != v10) {
          uint64_t *v10 = *v31;
        }
        *BOOL v31 = v20;
        if (v22 >= v23) {
          break;
        }
LABEL_33:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **,false>(v10, v31, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v31 + 1;
      }
      BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v10, v31, a3);
      unint64_t v12 = v31 + 1;
      __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v31 + 1, v87, a3);
      if (result) {
        break;
      }
      if (!v32) {
        goto LABEL_33;
      }
    }
    a2 = v31;
    if (!v32) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(void *a1, void *a2, void *a3, uint64_t (**a4)(void))
{
  char v8 = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
  uint64_t result = ((uint64_t (*)(void, void))*a4)(*a3, *a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      uint64_t result = (*a4)(*a3);
      if (result)
      {
        uint64_t v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
    if (result)
    {
      uint64_t v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(void *a1, void *a2, uint64_t (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unint64_t v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          unint64_t v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      *unint64_t v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    unint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(void *a1, void *a2, void *a3, void *a4, uint64_t (**a5)(void))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(a1, a2, a3, a5);
  uint64_t result = ((uint64_t (*)(void, void))*a5)(*a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t (**a6)(void))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(a1, a2, a3, a4, a6);
  uint64_t result = ((uint64_t (*)(void, void))*a6)(*a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = ((uint64_t (*)(void, void))*a6)(*a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = ((uint64_t (*)(void, void))*a6)(*a3, *a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = ((uint64_t (*)(void, void))*a6)(*a2, *a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

__n128 std::vector<ClipperLib::IntPoint>::__move_assign(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void std::vector<ClipperLib::IntPoint>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  BOOL v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[3 * a2];
      __asm { FMOV            V0.2S, #-1.0 }
      do
      {
        *uint64_t v7 = 0;
        v7[1] = 0;
        unint64_t v7[2] = _D0;
        v7 += 3;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v19 = &v12[24 * v8];
    uint64_t v20 = &v19[24 * a2];
    __asm { FMOV            V0.2S, #-1.0 }
    unint64_t v22 = v19;
    do
    {
      *(void *)unint64_t v22 = 0;
      *((void *)v22 + 1) = 0;
      *((void *)v22 + 2) = _D0;
      v22 += 24;
    }
    while (v22 != v20);
    unint64_t v23 = &v12[24 * v11];
    uint64_t v25 = (char *)*a1;
    uint64_t v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        long long v26 = *(_OWORD *)(v24 - 24);
        *((void *)v19 - 1) = *((void *)v24 - 1);
        *(_OWORD *)(v19 - 24) = v26;
        v19 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      uint64_t v24 = (char *)*a1;
    }
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v23;
    if (v24)
    {
      operator delete(v24);
    }
  }
}

uint64_t *std::list<long long>::__sort<std::__less<void,void>>(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      uint64_t v4 = (uint64_t *)*a2;
      if (*(void *)(*a2 + 16) < result[2])
      {
        uint64_t v5 = *v4;
        *(void *)(v5 + 8) = v4[1];
        *(void *)v4[1] = v5;
        uint64_t v6 = *result;
        *(void *)(v6 + 8) = v4;
        uint64_t *v4 = v6;
        *__n128 result = (uint64_t)v4;
        v4[1] = (uint64_t)result;
        return v4;
      }
    }
    else
    {
      unint64_t v8 = a3 >> 1;
      unint64_t v9 = (a3 >> 1) + 1;
      unint64_t v10 = result;
      do
      {
        unint64_t v10 = (uint64_t *)v10[1];
        --v9;
      }
      while (v9 > 1);
      unint64_t v11 = (uint64_t *)std::list<long long>::__sort<std::__less<void,void>>(result, v10, a3 >> 1);
      __n128 result = (uint64_t *)std::list<long long>::__sort<std::__less<void,void>>(v10, a2, a3 - v8);
      uint64_t v12 = v11[2];
      if (result[2] >= v12)
      {
        uint64_t v14 = (uint64_t *)v11[1];
        uint64_t i = result;
        __n128 result = v11;
      }
      else
      {
        for (uint64_t i = (uint64_t *)result[1]; i != a2; uint64_t i = (uint64_t *)i[1])
        {
          if (i[2] >= v12) {
            goto LABEL_14;
          }
        }
        uint64_t i = a2;
LABEL_14:
        uint64_t v15 = *i;
        uint64_t v16 = *result;
        *(void *)(v16 + 8) = *(void *)(*i + 8);
        **(void **)(v15 + 8) = v16;
        uint64_t v17 = *v11;
        uint64_t v14 = (uint64_t *)v11[1];
        *(void *)(v17 + 8) = result;
        *__n128 result = v17;
        uint64_t *v11 = v15;
        *(void *)(v15 + 8) = v11;
      }
      if (v14 != i && i != a2)
      {
        uint64_t v18 = i;
        do
        {
          uint64_t v19 = v14[2];
          if (i[2] >= v19)
          {
            uint64_t v14 = (uint64_t *)v14[1];
          }
          else
          {
            for (j = (uint64_t *)i[1]; j != a2; j = (uint64_t *)j[1])
            {
              if (j[2] >= v19) {
                goto LABEL_25;
              }
            }
            j = a2;
LABEL_25:
            uint64_t v21 = *j;
            uint64_t v22 = *i;
            *(void *)(v22 + 8) = *(void *)(*j + 8);
            **(void **)(v21 + 8) = v22;
            if (v18 == i) {
              uint64_t v18 = j;
            }
            uint64_t v24 = *v14;
            unint64_t v23 = (uint64_t *)v14[1];
            *(void *)(v24 + 8) = i;
            *uint64_t i = v24;
            uint64_t *v14 = v21;
            *(void *)(v21 + 8) = v14;
            uint64_t v14 = v23;
            uint64_t i = j;
          }
        }
        while (v14 != v18 && i != a2);
      }
    }
  }
  return result;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1C8783E40](v23, a1);
  if (v23[0])
  {
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_29;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    size_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v16 >= 0x17)
      {
        uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v18 = v16 | 7;
        }
        uint64_t v19 = v18 + 1;
        p_CGFloat b = (std::locale::__imp *)operator new(v18 + 1);
        size_t v25 = v16;
        int64_t v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_CGFloat b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((unsigned char *)p_b + v16) = 0;
      uint64_t v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(void *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0) {
        operator delete(__b.__locale_);
      }
      if (v21 != v16) {
        goto LABEL_29;
      }
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((void *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1C8783E50](v23);
  return a1;
}

void sub_1C468C668(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8783E50](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1C468C638);
}

void sub_1C468C6D4(_Unwind_Exception *a1)
{
}

uint64_t drawingV1::Transform::Transform(uint64_t this)
{
  *(void *)this = &unk_1F1FB0AC0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_1F1FB0AC0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void drawingV1::Transform::~Transform(drawingV1::Transform *this)
{
  PB::Base::~Base(this);

  JUMPOUT(0x1C8783F10);
}

float drawingV1::Transform::Transform(drawingV1::Transform *this, const drawingV1::Transform *a2)
{
  *(void *)this = &unk_1F1FB0AC0;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    float result = *((float *)a2 + 2);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((float *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 3);
    v3 |= 2u;
    *((unsigned char *)this + 32) = v3;
    *((float *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    float result = *((float *)a2 + 4);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((float *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 5);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((float *)this + 5) = result;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_14:
    float result = *((float *)a2 + 7);
    *((unsigned char *)this + 32) = v3 | 0x20;
    *((float *)this + 7) = result;
    return result;
  }
LABEL_13:
  float result = *((float *)a2 + 6);
  v3 |= 0x10u;
  *((unsigned char *)this + 32) = v3;
  *((float *)this + 6) = result;
  if ((*((unsigned char *)a2 + 32) & 0x20) != 0) {
    goto LABEL_14;
  }
  return result;
}