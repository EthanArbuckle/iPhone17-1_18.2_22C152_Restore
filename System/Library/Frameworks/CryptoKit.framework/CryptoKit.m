ValueMetadata *type metadata accessor for SHA512()
{
  return &type metadata for SHA512;
}

ValueMetadata *type metadata accessor for SHA512Digest()
{
  return &type metadata for SHA512Digest;
}

ValueMetadata *type metadata accessor for SHA256()
{
  return &type metadata for SHA256;
}

ValueMetadata *type metadata accessor for SHA256Digest()
{
  return &type metadata for SHA256Digest;
}

uint64_t dispatch thunk of HashFunction.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of HashFunction.finalize()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t sub_1A8D88860@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8D89318(MEMORY[0x1E4F14718], &qword_1EB4769A8, a1);
}

uint64_t sub_1A8D88880(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v3;
  if (isUniquelyReferenced_nonNull_native)
  {
    v9 = *(void **)(v8 + 16);
    v10 = *(void **)(v8 + 24);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v11 = swift_allocObject();
    v9 = *(void **)(v8 + 16);
    *(void *)(v11 + 16) = v9;
    size_t DigestSizeForDigestInfo = getDigestSizeForDigestInfo();
    v13 = (void *)swift_slowAlloc();
    if ((DigestSizeForDigestInfo & 0x8000000000000000) != 0)
    {
      __break(1u);
      return MEMORY[0x1F40CA9C0](v13, v14, v15, v16);
    }
    v10 = v13;
    memmove(v13, *(const void **)(v8 + 24), DigestSizeForDigestInfo);
    swift_release();
    *(void *)(v11 + 24) = v10;
    uint64_t *v3 = v11;
  }
  if (a1) {
    uint64_t v15 = a2 - a1;
  }
  else {
    uint64_t v15 = 0;
  }
  v13 = v9;
  v14 = v10;
  uint64_t v16 = a1;

  return MEMORY[0x1F40CA9C0](v13, v14, v15, v16);
}

uint64_t sub_1A8D8895C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1A8D889A4@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = sub_1A8DE97D0();
  *(void *)(v3 + 16) = 64;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  ccdigest_final(*(void *)(v1 + 16));
  sub_1A8D89640((long long *)(v3 + 32), v3 + 32 + *(void *)(v3 + 16), (uint64_t)v8);
  uint64_t result = swift_bridgeObjectRelease();
  if (v9)
  {
    __break(1u);
  }
  else
  {
    long long v5 = v8[1];
    long long v6 = v8[2];
    long long v7 = v8[3];
    *a1 = v8[0];
    a1[1] = v5;
    a1[2] = v6;
    a1[3] = v7;
  }
  return result;
}

uint64_t sub_1A8D88A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Insecure.MD5Digest.withUnsafeBytes<A>(_:)(a1, a2, a3);
}

uint64_t sub_1A8D88A60@<X0>(void *a1@<X8>)
{
  return sub_1A8D88A84(a1);
}

uint64_t sub_1A8D88A84@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)sub_1A8DE97D0();
  v3[2] = 16;
  v3[5] = 0;
  v3[4] = 0;
  ccdigest_final(*(void *)(v1 + 16));
  if (v3[2] != 16)
  {
    swift_bridgeObjectRelease();
    __break(1u);
  }
  uint64_t v4 = v3[4];
  uint64_t v5 = v3[5];
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v4;
  a1[1] = v5;
  return result;
}

uint64_t sub_1A8D88B38@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a1();
  if (result)
  {
    uint64_t v6 = result;
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v7 = swift_allocObject();
    getDigestSizeForDigestInfo();
    uint64_t v8 = swift_slowAlloc();
    uint64_t result = ccdigest_init();
    *(void *)(v7 + 16) = v6;
    *(void *)(v7 + 24) = v8;
    *a3 = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Digest.makeIterator()()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476938);
  sub_1A8DE9390();
  return v1;
}

uint64_t sub_1A8D88C2C()
{
  MEMORY[0x1AD0E8530](*(void *)(v0 + 24), -1, -1);

  return swift_deallocClassInstance();
}

uint64_t sub_1A8D88C6C(uint64_t a1, uint64_t a2)
{
  return sub_1A8D88C8C(a1, a2, &qword_1EB4769A8);
}

uint64_t sub_1A8D88C8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v7 = *v3;
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = *(void *)(v7 + 16);
    swift_retain();
    size_t DigestSizeForDigestInfo = getDigestSizeForDigestInfo();
    v10 = (void *)swift_slowAlloc();
    if ((DigestSizeForDigestInfo & 0x8000000000000000) != 0)
    {
      __break(1u);
      return MEMORY[0x1F40CA9C0](v10, v11, v12, v13);
    }
    v14 = v10;
    memmove(v10, *(const void **)(v7 + 24), DigestSizeForDigestInfo);
    swift_release();
    *(void *)(v8 + 24) = v14;
    uint64_t *v3 = v8;
    swift_release();
  }
  v10 = *(void **)(*v3 + 16);
  uint64_t v11 = *(void *)(*v3 + 24);
  if (a1) {
    uint64_t v12 = a2 - a1;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = a1;

  return MEMORY[0x1F40CA9C0](v10, v11, v12, v13);
}

uint64_t sub_1A8D88D70@<X0>(uint64_t a1@<X8>)
{
  return sub_1A8D88D94(a1);
}

uint64_t sub_1A8D88D94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1A8DE97D0();
  *(void *)(v3 + 16) = 32;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  ccdigest_final(*(void *)(v1 + 16));
  if (*(void *)(v3 + 16) == 32)
  {
    long long v7 = *(_OWORD *)(v3 + 32);
    uint64_t v4 = *(void *)(v3 + 48);
    uint64_t v5 = *(void *)(v3 + 56);
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v5;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

size_t sub_1A8D88E30@<X0>(size_t *a1@<X8>)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  long long v3 = v1[1];
  v5[0] = *v1;
  v5[1] = v3;
  size_t result = sub_1A8D891D0((size_t)v5, (unint64_t)v6);
  *a1 = result;
  a1[1] = 0;
  return result;
}

uint64_t Insecure.MD5Digest.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = *v3;
  uint64_t v11 = a3;
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476678);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476998);
  return sub_1A8D89068((uint64_t)&v9, (uint64_t)sub_1A8D89284, (uint64_t)v10, v5, v6, a3, MEMORY[0x1E4FBC0F0], (uint64_t)&v8);
}

uint64_t sub_1A8D88F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SHA256Digest.withUnsafeBytes<A>(_:)(a1, a2, a3);
}

uint64_t SHA256Digest.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v5 = v3[1];
  v10[0] = *v3;
  v10[1] = v5;
  uint64_t v12 = a3;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB476968);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476998);
  return sub_1A8D89068((uint64_t)v10, (uint64_t)sub_1A8D8915C, (uint64_t)v11, v6, v7, a3, MEMORY[0x1E4FBC0F0], (uint64_t)&v9);
}

uint64_t sub_1A8D89068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790]();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t sub_1A8D8915C(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1) {
    uint64_t v6 = a1 + 32;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(a1, v6);
  if (v4) {
    *a3 = v4;
  }
  return result;
}

size_t sub_1A8D891A0@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  size_t result = sub_1A8D891D0(a1, a2);
  *a3 = result;
  a3[1] = 0;
  return result;
}

size_t sub_1A8D891D0(size_t result, unint64_t a2)
{
  if (!result) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = (const void *)result;
  int64_t v4 = a2 - result;
  if (a2 == result) {
    return MEMORY[0x1E4FBC860];
  }
  if (v4 < 1)
  {
    long long v5 = (void *)MEMORY[0x1E4FBC860];
    if (!a2) {
      goto LABEL_13;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A0);
    long long v5 = (void *)swift_allocObject();
    size_t result = _swift_stdlib_malloc_size(v5);
    _OWORD v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2) {
      goto LABEL_13;
    }
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1A8D89284(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1) {
    uint64_t v6 = a1 + 16;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(a1, v6);
  if (v4) {
    *a3 = v4;
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t ccdigest_final(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 56))();
}

uint64_t sub_1A8D89318@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a1();
  if (result)
  {
    uint64_t v6 = result;
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v7 = swift_allocObject();
    getDigestSizeForDigestInfo();
    uint64_t v8 = swift_slowAlloc();
    uint64_t result = ccdigest_init();
    *(void *)(v7 + 16) = v6;
    *(void *)(v7 + 24) = v8;
    *a3 = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A8D893A4()
{
  return 0;
}

ValueMetadata *type metadata accessor for Insecure.MD5Digest()
{
  return &type metadata for Insecure.MD5Digest;
}

ValueMetadata *type metadata accessor for Insecure.MD5()
{
  return &type metadata for Insecure.MD5;
}

uint64_t sub_1A8D893D0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8D88B38(MEMORY[0x1E4F146F0], qword_1EB4764E0, a1);
}

uint64_t type metadata accessor for CoreCryptoDigestBuffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _s9CryptoKit8InsecureO3MD5V6update13bufferPointerySW_tF_0(uint64_t a1, uint64_t a2)
{
  return sub_1A8D88880(a1, a2, qword_1EB4764E0);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

unint64_t sub_1A8D8946C()
{
  unint64_t result = qword_1EB476658;
  if (!qword_1EB476658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476658);
  }
  return result;
}

unint64_t sub_1A8D894C0(uint64_t a1)
{
  unint64_t result = sub_1A8D8946C();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1A8D894E8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8D89318(MEMORY[0x1E4F14728], &qword_1E97A8BE8, a1);
}

uint64_t sub_1A8D89508@<X0>(_OWORD *a1@<X8>)
{
  return sub_1A8D889A4(a1);
}

uint64_t sub_1A8D8952C(uint64_t a1, uint64_t a2)
{
  return sub_1A8D88C8C(a1, a2, &qword_1E97A8BE8);
}

unint64_t sub_1A8D8954C()
{
  unint64_t result = qword_1EB4769B0[0];
  if (!qword_1EB4769B0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB4769B0);
  }
  return result;
}

unint64_t sub_1A8D895A0(uint64_t a1)
{
  unint64_t result = sub_1A8D8954C();
  *(void *)(a1 + 16) = result;
  return result;
}

size_t sub_1A8D895C8@<X0>(size_t *a1@<X8>)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  long long v3 = v1[1];
  v6[0] = *v1;
  v6[1] = v3;
  long long v4 = v1[3];
  void v6[2] = v1[2];
  v6[3] = v4;
  size_t result = sub_1A8D891D0((size_t)v6, (unint64_t)v7);
  *a1 = result;
  a1[1] = 0;
  return result;
}

long long *sub_1A8D89640@<X0>(long long *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result) {
    BOOL v3 = a2 - (void)result == 64;
  }
  else {
    BOOL v3 = 0;
  }
  char v4 = !v3;
  long long v5 = 0uLL;
  long long v6 = 0uLL;
  long long v7 = 0uLL;
  long long v8 = 0uLL;
  if (v3)
  {
    long long v5 = *result;
    long long v6 = result[1];
    long long v7 = result[2];
    long long v8 = result[3];
  }
  *(_OWORD *)a3 = v5;
  *(_OWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 32) = v7;
  *(_OWORD *)(a3 + 48) = v8;
  *(unsigned char *)(a3 + 64) = v4;
  return result;
}

uint64_t HPKE.KDF.value.getter()
{
  return *v0 + 1;
}

BOOL static HPKE.KDF.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HPKE.KDF.hash(into:)()
{
  return sub_1A8DE9BF0();
}

void *static HPKE.KDF.allCases.getter()
{
  return &unk_1EFF5E810;
}

uint64_t HPKE.KDF.hashValue.getter()
{
  return sub_1A8DE9C20();
}

BOOL sub_1A8D89764(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_1A8D89778(void *a1@<X8>)
{
  *a1 = &unk_1EFF5E838;
}

uint64_t sub_1A8D89788()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8D897D0()
{
  return sub_1A8DE9BF0();
}

uint64_t sub_1A8D897FC()
{
  return sub_1A8DE9C20();
}

unint64_t sub_1A8D89844()
{
  unint64_t result = qword_1E97A8C80;
  if (!qword_1E97A8C80)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E97A8C88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8C80);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_1A8D898EC()
{
  unint64_t result = qword_1E97A8C90;
  if (!qword_1E97A8C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8C90);
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t _s3KDFOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s3KDFOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A8D89AA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_1A8D89AD0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1A8D89ADC(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HPKE.KDF()
{
  return &type metadata for HPKE.KDF;
}

void type metadata accessor for ccdigest_ctx(uint64_t a1)
{
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1A8D89B2C(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1A8D89B88(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

void type metadata accessor for ccdigest_info(uint64_t a1)
{
}

__n128 __swift_memcpy256_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v13;
  *(__n128 *)(a1 + 192) = result;
  *(_OWORD *)(a1 + 208) = v12;
  return result;
}

uint64_t sub_1A8D89C44(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 256)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1A8D89C64(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 256) = v3;
  return result;
}

void type metadata accessor for ccchacha20poly1305_ctx(uint64_t a1)
{
}

uint64_t _s11KeyScheduleVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t sub_1A8D89D34(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1A8D89D90(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

void type metadata accessor for ccmode_gcm(uint64_t a1)
{
}

void type metadata accessor for ccgcm_ctx(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for SHA256Digest(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SHA256Digest(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for ccec_cp(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for cc_impl(uint64_t a1)
{
}

void type metadata accessor for ccdigest_state(uint64_t a1)
{
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t sub_1A8D89ED8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1A8D89EF8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 96) = v3;
  return result;
}

void type metadata accessor for ccpoly1305_ctx(uint64_t a1)
{
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_1A8D89F84(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 136)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1A8D89FA4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 136) = v3;
  return result;
}

void type metadata accessor for ccchacha20_ctx(uint64_t a1)
{
}

void sub_1A8D8A004(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1A8D8A04C()
{
  return sub_1A8DE9550();
}

uint64_t sub_1A8D8A098()
{
  return sub_1A8DE9540();
}

uint64_t sub_1A8D8A0F0()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8D8A158(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4186958](v4, v5, a3, WitnessTable);
}

uint64_t sub_1A8D8A1C4()
{
  return sub_1A8D8A22C((unint64_t *)&qword_1E97A8BF8);
}

uint64_t sub_1A8D8A1F8()
{
  return sub_1A8D8A22C(&qword_1EB476708);
}

uint64_t sub_1A8D8A22C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CFString(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static ANSIKDFx963.deriveKey<A>(inputKeyMaterial:info:outputByteCount:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v46 = a5;
  uint64_t v47 = a7;
  uint64_t v45 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v18 = (char *)&v32 - v17;
  uint64_t v19 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v16);
  v48 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 0x8000000000000000) != 0) {
    goto LABEL_18;
  }
  uint64_t v8 = *a1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v22 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  uint64_t v43 = AssociatedConformanceWitness + 40;
  uint64_t v44 = AssociatedConformanceWitness;
  v42 = v22;
  unint64_t v23 = ((uint64_t (*)(uint64_t))v22)(AssociatedTypeWitness);
  if ((v23 & 0x8000000000000000) != 0) {
    goto LABEL_19;
  }
  if (!is_mul_ok(v23, 0xFFFFFFFFuLL)) {
    goto LABEL_20;
  }
  v32 = a8;
  if (0xFFFFFFFF * v23 > a3)
  {
    if (qword_1EB476778 != -1) {
      goto LABEL_21;
    }
    while (1)
    {
      v50 = off_1EB476770;
      swift_retain();
      sub_1A8D97F24(a3);
      unint64_t v33 = a3;
      v24 = v48;
      if (!a3) {
        break;
      }
      a3 = v19;
      v25 = *(void (**)(uint64_t, uint64_t))(a6 + 32);
      uint64_t v39 = v8 + 32;
      v40 = v25;
      v38 = (void *)(v8 + 16);
      swift_beginAccess();
      uint64_t v41 = a6 + 32;
      v36 = (void (**)(char *, uint64_t))(v15 + 8);
      uint64_t v37 = a6 + 48;
      v34 = (void (**)(char *, uint64_t))(v19 + 8);
      uint64_t v8 = 1;
      uint64_t v35 = MEMORY[0x1E4FBC848] + 8;
      uint64_t v15 = v33;
      while (1)
      {
        uint64_t v19 = (uint64_t)v24;
        v40(a4, a6);
        uint64_t v26 = v39 + *v38;
        v49[0] = v39;
        v49[1] = v26;
        unint64_t v27 = sub_1A8D8A898();
        HashFunction.update<A>(data:)((uint64_t)v49, a4, MEMORY[0x1E4FBB2B8], a6, v27);
        sub_1A8DBDE34(bswap32(v8), a4, a6);
        HashFunction.update<A>(data:)(v45, a4, v46, a6, v47);
        (*(void (**)(uint64_t, uint64_t))(a6 + 48))(a4, a6);
        if (v8 == -1) {
          break;
        }
        uint64_t v19 = a6;
        a6 = AssociatedTypeWitness;
        uint64_t v28 = v42(AssociatedTypeWitness, v44);
        if (v28 >= v15) {
          a3 = v15;
        }
        else {
          a3 = v28;
        }
        MEMORY[0x1F4188790](v28);
        sub_1A8DE9390();
        (*v36)(v18, AssociatedTypeWitness);
        BOOL v29 = __OFSUB__(v15, a3);
        v15 -= a3;
        if (v29) {
          goto LABEL_17;
        }
        v24 = v48;
        (*v34)(v48, a4);
        uint64_t v8 = (v8 + 1);
        a6 = v19;
        if (v15 <= 0) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      swift_once();
    }
LABEL_14:
    v30 = v50;
    uint64_t result = swift_beginAccess();
    if (v30[2] == v33)
    {
      void *v32 = v30;
      return result;
    }
    __break(1u);
  }
  uint64_t result = sub_1A8DE9B00();
  __break(1u);
  return result;
}

uint64_t static ANSIKDFx963.deriveKey(inputKeyMaterial:outputByteCount:)@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v13 = *a1;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
  unint64_t v10 = sub_1A8D8A81C();
  return static ANSIKDFx963.deriveKey<A>(inputKeyMaterial:info:outputByteCount:)(&v13, (uint64_t)&v12, a2, a3, v9, a4, v10, a5);
}

size_t sub_1A8D8A7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1A8DBAE78(*(void *)(v2 + 24), a1, a2);
  return sub_1A8DAD6EC(v3, v4, v5, v6);
}

unint64_t sub_1A8D8A81C()
{
  unint64_t result = qword_1EB476928;
  if (!qword_1EB476928)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB476940);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476928);
  }
  return result;
}

uint64_t sub_1A8D8A878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t type metadata accessor for ANSIKDFx963()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1A8D8A898()
{
  unint64_t result = qword_1EB4767A8;
  if (!qword_1EB4767A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB4767A8);
  }
  return result;
}

uint64_t sub_1A8D8A8EC()
{
  uint64_t result = sub_1A8D918C0(0x685F64695F6B7370uLL, 0xEB00000000687361);
  qword_1E97A8D60 = result;
  *(void *)algn_1E97A8D68 = v1;
  return result;
}

uint64_t sub_1A8D8A92C()
{
  uint64_t result = sub_1A8D918C0(0x7361685F6F666E69uLL, 0xE900000000000068);
  qword_1E97A8D70 = result;
  *(void *)algn_1E97A8D78 = v1;
  return result;
}

uint64_t sub_1A8D8A968()
{
  uint64_t result = sub_1A8D918C0(0x746572636573uLL, 0xE600000000000000);
  qword_1E97A8D80 = result;
  *(void *)algn_1E97A8D88 = v1;
  return result;
}

uint64_t sub_1A8D8A99C()
{
  uint64_t result = sub_1A8D918C0(0x79656BuLL, 0xE300000000000000);
  qword_1E97A8D90 = result;
  *(void *)algn_1E97A8D98 = v1;
  return result;
}

uint64_t sub_1A8D8A9CC()
{
  uint64_t result = sub_1A8D918C0(0x6E6F6E5F65736162uLL, 0xEA00000000006563);
  qword_1E97A8DA0 = result;
  *(void *)algn_1E97A8DA8 = v1;
  return result;
}

uint64_t sub_1A8D8AA08()
{
  uint64_t result = sub_1A8D918C0(0x707865uLL, 0xE300000000000000);
  qword_1E97A8DB0 = result;
  *(void *)algn_1E97A8DB8 = v1;
  return result;
}

uint64_t sub_1A8D8AA38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  char v14 = a1;
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = *a5;
  uint64_t v16 = *a8;
  uint64_t v17 = a8[1];
  uint64_t v18 = a8[2];
  *(void *)&v159[0] = *a5;
  sub_1A8D8BE5C(a1, v159, a6, a7);
  if (v9)
  {
    sub_1A8D8BF9C(a6, a7);
    sub_1A8D8BD58(a3, a4);
    __swift_destroy_boxed_opaque_existential_1(a2);
    swift_release();
    return sub_1A8D8BF9C(0, 0xF000000000000000);
  }
  else
  {
    __int16 v149 = v17;
    char v137 = v14;
    unint64_t v145 = a4;
    uint64_t v144 = a3;
    if (qword_1E97A8C00 != -1) {
      swift_once();
    }
    if (a7 >> 60 == 15)
    {
      uint64_t v20 = 0;
      memset((char *)v159 + 8, 0, 32);
    }
    else
    {
      *((void *)&v159[1] + 1) = &type metadata for SymmetricKey;
      *(void *)&v159[2] = sub_1A8D8C060();
      sub_1A8D8BE04(a6, a7);
      uint64_t v20 = sub_1A8DADB28(a6, a7);
      sub_1A8D8BF9C(a6, a7);
    }
    uint64_t v21 = v16;
    uint64_t v139 = a6;
    unint64_t v140 = a7;
    *(void *)&v159[0] = v20;
    if (qword_1E97A8C40 != -1)
    {
      swift_once();
      uint64_t v21 = v16;
    }
    uint64_t v134 = v15;
    long long v158 = xmmword_1E97A8FF0;
    uint64_t v22 = qword_1A8DEAA60[v21];
    sub_1A8D8BE04(xmmword_1E97A8FF0, *((unint64_t *)&xmmword_1E97A8FF0 + 1));
    uint64_t v148 = v22;
    sub_1A8DB8584(v22, 2);
    uint64_t v24 = v23;
    unint64_t v26 = v25;
    sub_1A8DE94F0();
    sub_1A8D8BD58(v24, v26);
    uint64_t v150 = v17 + 1;
    sub_1A8DB8584(v17 + 1, 2);
    uint64_t v28 = v27;
    unint64_t v30 = v29;
    sub_1A8DE94F0();
    sub_1A8D8BD58(v28, v30);
    uint64_t v151 = qword_1A8DEAA80[v18];
    sub_1A8DB8584(v151, 2);
    uint64_t v32 = v31;
    unint64_t v34 = v33;
    sub_1A8DE94F0();
    sub_1A8D8BD58(v32, v34);
    long long v35 = v158;
    if (qword_1E97A8C68 != -1) {
      swift_once();
    }
    long long v158 = xmmword_1E97A9528;
    sub_1A8D8BE04(xmmword_1E97A9528, *((unint64_t *)&xmmword_1E97A9528 + 1));
    sub_1A8DE94F0();
    sub_1A8DE94F0();
    sub_1A8DC259C((uint64_t)v159);
    long long v36 = v158;
    sub_1A8D8BE04(v158, *((unint64_t *)&v158 + 1));
    sub_1A8DADB28(v158, *((unint64_t *)&v158 + 1));
    sub_1A8D8BD58(v158, *((unint64_t *)&v158 + 1));
    sub_1A8DC20E8(0, 0xC000000000000000, v17, (uint64_t *)&v157);
    swift_release();
    sub_1A8D8BD58(v36, *((unint64_t *)&v36 + 1));
    uint64_t v37 = v157;
    swift_beginAccess();
    uint64_t v38 = v37 + 32 + *(void *)(v37 + 16);
    swift_retain();
    uint64_t v39 = sub_1A8D91DF0(v37 + 32, v38);
    unint64_t v142 = v40;
    uint64_t v143 = v39;
    swift_release_n();
    sub_1A8D8BD58(v35, *((unint64_t *)&v35 + 1));
    sub_1A8D8C000((uint64_t)v159);
    if (qword_1E97A8C08 != -1) {
      swift_once();
    }
    *((void *)&v159[1] + 1) = &type metadata for SymmetricKey;
    unint64_t v131 = sub_1A8D8C060();
    *(void *)&v159[2] = v131;
    sub_1A8D8BE04(a3, v145);
    uint64_t v41 = sub_1A8DADB28(a3, v145);
    sub_1A8D8BD58(a3, v145);
    *(void *)&v159[0] = v41;
    long long v157 = xmmword_1E97A8FF0;
    sub_1A8D8BE04(xmmword_1E97A8FF0, *((unint64_t *)&xmmword_1E97A8FF0 + 1));
    sub_1A8DB8584(v148, 2);
    uint64_t v43 = v42;
    unint64_t v45 = v44;
    sub_1A8DE94F0();
    sub_1A8D8BD58(v43, v45);
    sub_1A8DB8584(v150, 2);
    uint64_t v47 = v46;
    unint64_t v49 = v48;
    sub_1A8DE94F0();
    sub_1A8D8BD58(v47, v49);
    sub_1A8DB8584(v151, 2);
    uint64_t v51 = v50;
    unint64_t v53 = v52;
    sub_1A8DE94F0();
    sub_1A8D8BD58(v51, v53);
    long long v54 = v157;
    long long v157 = xmmword_1E97A9528;
    sub_1A8D8BE04(xmmword_1E97A9528, *((unint64_t *)&xmmword_1E97A9528 + 1));
    sub_1A8DE94F0();
    sub_1A8DE94F0();
    sub_1A8DC259C((uint64_t)v159);
    long long v55 = v157;
    sub_1A8D8BE04(v157, *((unint64_t *)&v157 + 1));
    sub_1A8DADB28(v55, *((unint64_t *)&v55 + 1));
    sub_1A8D8BD58(v55, *((unint64_t *)&v55 + 1));
    sub_1A8DC20E8(0, 0xC000000000000000, v17, (uint64_t *)&v156);
    swift_release();
    sub_1A8D8BD58(v55, *((unint64_t *)&v55 + 1));
    uint64_t v56 = v156;
    swift_beginAccess();
    uint64_t v57 = v56 + 32 + *(void *)(v56 + 16);
    swift_retain();
    uint64_t v58 = sub_1A8D91DF0(v56 + 32, v57);
    unint64_t v60 = v59;
    swift_release_n();
    sub_1A8D8BD58(v54, *((unint64_t *)&v54 + 1));
    sub_1A8D8C000((uint64_t)v159);
    long long v156 = xmmword_1A8DEAA40;
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8DD0);
    *((void *)&v159[1] + 1) = v61;
    *(void *)&v159[2] = sub_1A8D8C0B4();
    LOBYTE(v159[0]) = v137;
    LOBYTE(v155) = *(unsigned char *)__swift_project_boxed_opaque_existential_1(v159, v61);
    sub_1A8DE9440();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v159);
    sub_1A8DE94F0();
    unint64_t v136 = v60;
    uint64_t v138 = v58;
    sub_1A8DE94F0();
    sub_1A8D8C154(a2, (uint64_t)v159);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v159, *((uint64_t *)&v159[1] + 1));
    uint64_t v62 = sub_1A8DC2DC4();
    unint64_t v64 = v63;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v159);
    if (qword_1E97A8C10 != -1) {
      swift_once();
    }
    char v152 = v18;
    if (v134)
    {
      *((void *)&v159[1] + 1) = &type metadata for SymmetricKey;
      *(void *)&v159[2] = v131;
      *(void *)&v159[0] = sub_1A8DADA24(v134);
      swift_release();
    }
    else
    {
      memset(v159, 0, 40);
    }
    char v141 = v16;
    long long v155 = xmmword_1E97A8FF0;
    sub_1A8D8BE04(xmmword_1E97A8FF0, *((unint64_t *)&xmmword_1E97A8FF0 + 1));
    sub_1A8DB8584(v148, 2);
    uint64_t v66 = v65;
    unint64_t v68 = v67;
    sub_1A8DE94F0();
    sub_1A8D8BD58(v66, v68);
    sub_1A8DB8584(v150, 2);
    uint64_t v70 = v69;
    unint64_t v72 = v71;
    sub_1A8DE94F0();
    sub_1A8D8BD58(v70, v72);
    sub_1A8DB8584(v151, 2);
    uint64_t v74 = v73;
    unint64_t v76 = v75;
    sub_1A8DE94F0();
    sub_1A8D8BD58(v74, v76);
    long long v77 = v155;
    long long v155 = xmmword_1E97A9528;
    sub_1A8D8BE04(xmmword_1E97A9528, *((unint64_t *)&xmmword_1E97A9528 + 1));
    sub_1A8DE94F0();
    sub_1A8DE94F0();
    sub_1A8DC259C((uint64_t)v159);
    long long v78 = v155;
    sub_1A8D8BE04(v62, v64);
    sub_1A8D8BE04(v155, *((unint64_t *)&v155 + 1));
    sub_1A8DADB28(v155, *((unint64_t *)&v155 + 1));
    sub_1A8D8BD58(v155, *((unint64_t *)&v155 + 1));
    __int16 v79 = v149;
    sub_1A8DC20E8(v62, v64, v149, &v154);
    swift_release();
    sub_1A8D8BD58(v62, v64);
    sub_1A8D8BD58(v78, *((unint64_t *)&v78 + 1));
    sub_1A8D8BD58(v77, *((unint64_t *)&v77 + 1));
    sub_1A8D8BD58(v62, v64);
    sub_1A8D8C000((uint64_t)v159);
    uint64_t v146 = v154;
    if (v18 == 3)
    {
      uint64_t v133 = 0;
      uint64_t v135 = 0;
      unint64_t v132 = 0xF000000000000000;
    }
    else
    {
      if (qword_1E97A8C18 != -1) {
        swift_once();
      }
      long long v80 = v156;
      long long v81 = xmmword_1E97A8FF0;
      v159[0] = xmmword_1E97A8FF0;
      sub_1A8D8BE04(v156, *((unint64_t *)&v156 + 1));
      sub_1A8D8BE04(v81, *((unint64_t *)&v81 + 1));
      sub_1A8DB8584(v148, 2);
      uint64_t v83 = v82;
      unint64_t v85 = v84;
      sub_1A8DE94F0();
      sub_1A8D8BD58(v83, v85);
      sub_1A8DB8584(v150, 2);
      uint64_t v87 = v86;
      unint64_t v89 = v88;
      sub_1A8DE94F0();
      sub_1A8D8BD58(v87, v89);
      sub_1A8DB8584(v151, 2);
      uint64_t v91 = v90;
      unint64_t v93 = v92;
      sub_1A8DE94F0();
      sub_1A8D8BD58(v91, v93);
      long long v94 = v159[0];
      sub_1A8DC2684(v146, v80, *((unint64_t *)&v80 + 1), 0x2000200010uLL >> (16 * v18), (size_t *)v159, v149);
      sub_1A8D8BD58(v94, *((unint64_t *)&v94 + 1));
      sub_1A8D8BD58(v80, *((unint64_t *)&v80 + 1));
      uint64_t v135 = *(void *)&v159[0];
      if (qword_1E97A8C20 != -1) {
        swift_once();
      }
      long long v95 = xmmword_1E97A8FF0;
      v159[0] = xmmword_1E97A8FF0;
      sub_1A8D8BE04(v80, *((unint64_t *)&v80 + 1));
      sub_1A8D8BE04(v95, *((unint64_t *)&v95 + 1));
      sub_1A8DB8584(v148, 2);
      uint64_t v97 = v96;
      unint64_t v99 = v98;
      sub_1A8DE94F0();
      sub_1A8D8BD58(v97, v99);
      sub_1A8DB8584(v150, 2);
      uint64_t v101 = v100;
      unint64_t v103 = v102;
      sub_1A8DE94F0();
      sub_1A8D8BD58(v101, v103);
      sub_1A8DB8584(v151, 2);
      uint64_t v105 = v104;
      unint64_t v107 = v106;
      sub_1A8DE94F0();
      sub_1A8D8BD58(v105, v107);
      long long v108 = v159[0];
      __int16 v79 = v149;
      sub_1A8DC2684(v146, v80, *((unint64_t *)&v80 + 1), 0xCu, (size_t *)&v155, v149);
      uint64_t v109 = v155;
      swift_beginAccess();
      uint64_t v110 = v109 + 32 + *(void *)(v109 + 16);
      swift_retain();
      uint64_t v111 = sub_1A8D91DF0(v109 + 32, v110);
      unint64_t v132 = v112;
      uint64_t v133 = v111;
      swift_release_n();
      sub_1A8D8BD58(v108, *((unint64_t *)&v108 + 1));
      sub_1A8D8BD58(v80, *((unint64_t *)&v80 + 1));
      sub_1A8D8BF9C(0, 0xF000000000000000);
    }
    if (qword_1E97A8C28 != -1) {
      swift_once();
    }
    long long v113 = v156;
    unsigned __int16 v114 = 16 * v79 + 32;
    long long v115 = xmmword_1E97A8FF0;
    long long v155 = xmmword_1E97A8FF0;
    sub_1A8D8BE04(v156, *((unint64_t *)&v156 + 1));
    sub_1A8D8BE04(v115, *((unint64_t *)&v115 + 1));
    sub_1A8DB8584(v148, 2);
    uint64_t v117 = v116;
    char v118 = v79;
    unint64_t v120 = v119;
    sub_1A8DE94F0();
    sub_1A8D8BD58(v117, v120);
    sub_1A8DB8584(v150, 2);
    uint64_t v122 = v121;
    unint64_t v124 = v123;
    sub_1A8DE94F0();
    sub_1A8D8BD58(v122, v124);
    sub_1A8DB8584(v151, 2);
    uint64_t v126 = v125;
    unint64_t v128 = v127;
    sub_1A8DE94F0();
    sub_1A8D8BD58(v126, v128);
    long long v129 = v155;
    sub_1A8DC2684(v146, v113, *((unint64_t *)&v113 + 1), v114, (size_t *)&v155, v118);
    sub_1A8D8BD58(v129, *((unint64_t *)&v129 + 1));
    sub_1A8D8BD58(v138, v136);
    sub_1A8D8BD58(v143, v142);
    sub_1A8D8BF9C(v139, v140);
    sub_1A8D8BD58(v144, v145);
    __swift_destroy_boxed_opaque_existential_1(a2);
    sub_1A8D8BD58(v113, *((unint64_t *)&v113 + 1));
    sub_1A8D8BD58(v113, *((unint64_t *)&v113 + 1));
    swift_release();
    uint64_t v130 = v155;
    *(void *)a9 = 0;
    *(void *)(a9 + 8) = v135;
    *(void *)(a9 + 16) = v133;
    *(void *)(a9 + 24) = v132;
    *(void *)(a9 + 32) = v130;
    *(unsigned char *)(a9 + 40) = v141;
    *(unsigned char *)(a9 + 41) = v118;
    *(unsigned char *)(a9 + 42) = v152;
    swift_retain();
    sub_1A8D8C208(v133, v132);
    swift_retain();
    swift_release();
    sub_1A8D8BF9C(v133, v132);
    return swift_release();
  }
}

uint64_t sub_1A8D8B7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v9 = *((unsigned __int8 *)v6 + 42);
  if (v9 == 3)
  {
    sub_1A8D8BDB0();
    swift_allocError();
    unsigned char *v10 = 2;
    swift_willThrow();
    return v8;
  }
  char v35 = *((unsigned char *)v6 + 42);
  uint64_t v14 = v6[3];
  uint64_t v15 = v6[4];
  __int16 v16 = *((_WORD *)v6 + 20);
  uint64_t v25 = *v6;
  uint64_t v29 = *v6;
  long long v30 = *(_OWORD *)(v6 + 1);
  uint64_t v31 = v14;
  uint64_t v32 = v15;
  __int16 v33 = v16;
  char v34 = v9;
  uint64_t v17 = sub_1A8D8B99C();
  if ((void)v30)
  {
    uint64_t v19 = v17;
    unint64_t v20 = v18;
    uint64_t v29 = v30;
    swift_retain();
    uint64_t v8 = sub_1A8DA29A8(a1, a2, v19, v20, &v29, a3, a4, a5, a6);
    unint64_t v22 = v21;
    swift_release();
    sub_1A8D8BD58(v19, v20);
    if (v7) {
      return v8;
    }
    if (v9 < 3)
    {
      if (v25 == -1)
      {
        sub_1A8D8BDB0();
        swift_allocError();
        unsigned char *v24 = 6;
        swift_willThrow();
        sub_1A8D8BD58(v8, v22);
      }
      else
      {
        *uint64_t v6 = v25 + 1;
      }
      return v8;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = sub_1A8DE9B00();
  __break(1u);
  return result;
}

uint64_t sub_1A8D8B99C()
{
  v11[5] = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(v0 + 42) >= 3u)
  {
    sub_1A8DE9B00();
    __break(1u);
    JUMPOUT(0x1A8D8BB38);
  }
  unint64_t v1 = *(void *)v0;
  uint64_t v3 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  uint64_t v4 = sub_1A8DE97D0();
  *(void *)(v4 + 16) = 4;
  *(_DWORD *)(v4 + 32) = 0;
  unint64_t v9 = bswap64(v1);
  uint64_t v10 = v4;
  sub_1A8DE608C((uint64_t)&v9, (char *)&v10);
  if (v2 >> 60 == 15) {
LABEL_14:
  }
    __break(1u);
  uint64_t v5 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v3), v3)) {
        goto LABEL_12;
      }
      uint64_t v5 = HIDWORD(v3) - (int)v3;
LABEL_8:
      sub_1A8D8BE04(v3, v2);
LABEL_9:
      if (v5 != *(void *)(v10 + 16))
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      v11[0] = v10;
      v11[1] = v3;
      v11[2] = v2;
      v11[3] = sub_1A8D8BD44;
      v11[4] = 0;
      return sub_1A8D91EAC((uint64_t)v11);
    case 2uLL:
      uint64_t v7 = *(void *)(v3 + 16);
      uint64_t v6 = *(void *)(v3 + 24);
      uint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_8;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v5 = BYTE6(v2);
      goto LABEL_9;
  }
}

uint64_t sub_1A8D8BB48(void (*a1)(void, void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v9 = *(unsigned __int8 *)(v6 + 42);
  if (v9 == 3)
  {
    sub_1A8D8BDB0();
    swift_allocError();
    unsigned char *v10 = 2;
    swift_willThrow();
    return (uint64_t)v8;
  }
  char v35 = *(unsigned char *)(v6 + 42);
  uint64_t v14 = *(void *)(v6 + 24);
  uint64_t v15 = *(void *)(v6 + 32);
  __int16 v16 = *(_WORD *)(v6 + 40);
  uint64_t v25 = *(void *)v6;
  uint64_t v29 = *(void *)v6;
  long long v30 = *(_OWORD *)(v6 + 8);
  uint64_t v31 = v14;
  uint64_t v32 = v15;
  __int16 v33 = v16;
  char v34 = v9;
  uint64_t v17 = sub_1A8D8B99C();
  if ((void)v30)
  {
    unint64_t v19 = v17;
    unint64_t v20 = v18;
    uint64_t v29 = v30;
    swift_retain();
    uint64_t v8 = sub_1A8DA2DB8(a1, v19, v20, a2, &v29, a3, a4, a5, a6);
    unint64_t v22 = v21;
    swift_release();
    sub_1A8D8BD58(v19, v20);
    if (v7) {
      return (uint64_t)v8;
    }
    if (v9 < 3)
    {
      if (v25 == -1)
      {
        sub_1A8D8BDB0();
        swift_allocError();
        unsigned char *v24 = 6;
        swift_willThrow();
        sub_1A8D8BD58((uint64_t)v8, v22);
      }
      else
      {
        *(void *)uint64_t v6 = v25 + 1;
      }
      return (uint64_t)v8;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = sub_1A8DE9B00();
  __break(1u);
  return result;
}

unsigned char *sub_1A8D8BD44@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result[1] ^ *result;
  return result;
}

uint64_t sub_1A8D8BD58(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

unint64_t sub_1A8D8BDB0()
{
  unint64_t result = qword_1E97A8DC0;
  if (!qword_1E97A8DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8DC0);
  }
  return result;
}

uint64_t sub_1A8D8BE04(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_1A8D8BE5C(uint64_t result, void *a2, uint64_t a3, unint64_t a4)
{
  if ((a4 >> 60 == 15) == (*a2 != 0))
  {
    char v6 = 3;
LABEL_12:
    sub_1A8D8BDB0();
    swift_allocError();
    *uint64_t v7 = v6;
    return swift_willThrow();
  }
  if (*a2)
  {
    if (qword_1EFF5E7F8)
    {
      if (byte_1EFF5E808 == result) {
        return result;
      }
      if (qword_1EFF5E7F8 != 1)
      {
        uint64_t v4 = 0x21u;
        while (1)
        {
          uint64_t v5 = v4 - 31;
          if (__OFADD__(v4 - 32, 1)) {
            break;
          }
          if (byte_1EFF5E7E8[v4] == result) {
            return result;
          }
          ++v4;
          if (v5 == qword_1EFF5E7F8) {
            goto LABEL_10;
          }
        }
        __break(1u);
LABEL_24:
        __break(1u);
        return result;
      }
    }
LABEL_10:
    char v6 = 5;
    goto LABEL_12;
  }
  if (qword_1EFF5E7D0)
  {
    if (byte_1EFF5E7E0 == result)
    {
LABEL_16:
      char v6 = 4;
      goto LABEL_12;
    }
    if (qword_1EFF5E7D0 != 1)
    {
      for (uint64_t i = 0x21u; ; ++i)
      {
        uint64_t v9 = i - 31;
        if (__OFADD__(i - 32, 1)) {
          break;
        }
        if (byte_1EFF5E7C0[i] == result) {
          goto LABEL_16;
        }
        if (v9 == qword_1EFF5E7D0) {
          return result;
        }
      }
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t sub_1A8D8BF9C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1A8D8BD58(a1, a2);
  }
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1A8D8C000(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4766C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1A8D8C060()
{
  unint64_t result = qword_1E97A8DC8;
  if (!qword_1E97A8DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8DC8);
  }
  return result;
}

unint64_t sub_1A8D8C0B4()
{
  unint64_t result = qword_1E97A8DD8;
  if (!qword_1E97A8DD8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E97A8DD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8DD8);
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1A8D8C154(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1A8D8C208(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1A8D8BE04(a1, a2);
  }
  return a1;
}

uint64_t _s11KeyScheduleVwxx(uint64_t a1)
{
  swift_release();
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >> 60 != 15) {
    sub_1A8D8BD58(*(void *)(a1 + 16), v2);
  }

  return swift_release();
}

uint64_t _s11KeyScheduleVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = (_OWORD *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  swift_retain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    uint64_t v7 = *(void *)v5;
    sub_1A8D8BE04(v7, v6);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v6;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  swift_retain();
  return a1;
}

uint64_t _s11KeyScheduleVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_1A8D8BE04(*v4, *(void *)(a2 + 24));
      uint64_t v8 = *(void *)(a1 + 16);
      unint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v5;
      sub_1A8D8BD58(v8, v9);
      goto LABEL_8;
    }
    sub_1A8D8C404(a1 + 16);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  sub_1A8D8BE04(*v4, *(void *)(a2 + 24));
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
LABEL_8:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  return a1;
}

uint64_t sub_1A8D8C404(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy43_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a2 + 27);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s11KeyScheduleVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  unint64_t v5 = (void *)(a2 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v5;
      *(void *)(a1 + 24) = v7;
      sub_1A8D8BD58(v8, v6);
      goto LABEL_6;
    }
    sub_1A8D8C404(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
LABEL_6:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  return a1;
}

uint64_t _s11KeyScheduleVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 43)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s11KeyScheduleVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 42) = 0;
    *(_WORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 43) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 43) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s11KeyScheduleVMa()
{
  return &_s11KeyScheduleVN;
}

size_t sub_1A8D8C5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (swift_isUniquelyReferenced_nonNull_native()) {
    return sub_1A8D8D680(a1, a2, a3);
  }
  uint64_t v7 = *v3;
  type metadata accessor for CoreCryptoGCMImpl.Context();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = *(void *)(v7 + 24);
  *(void *)(v8 + 24) = v9;
  swift_retain();
  MEMORY[0x1AD0E8050](v9);
  uint64_t v10 = (void *)swift_slowAlloc();
  uint64_t v11 = *(const void **)(v7 + 16);
  size_t result = MEMORY[0x1AD0E8050](v9);
  if ((result & 0x8000000000000000) == 0)
  {
    memmove(v10, v11, result);
    swift_release();
    *(void *)(v8 + 16) = v10;
    uint64_t *v3 = v8;
    swift_release();
    return sub_1A8D8D680(a1, a2, a3);
  }
  __break(1u);
  return result;
}

size_t sub_1A8D8C6B4(uint64_t a1, uint64_t *a2)
{
  if (swift_isUniquelyReferenced_nonNull_native()) {
    return sub_1A8D8D968(a1, a2);
  }
  uint64_t v5 = *v2;
  type metadata accessor for CoreCryptoGCMImpl.Context();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = *(void *)(v5 + 24);
  *(void *)(v6 + 24) = v7;
  swift_retain();
  MEMORY[0x1AD0E8050](v7);
  uint64_t v8 = (void *)swift_slowAlloc();
  uint64_t v9 = *(const void **)(v5 + 16);
  size_t result = MEMORY[0x1AD0E8050](v7);
  if ((result & 0x8000000000000000) == 0)
  {
    memmove(v8, v9, result);
    swift_release();
    *(void *)(v6 + 16) = v8;
    *unint64_t v2 = v6;
    swift_release();
    return sub_1A8D8D968(a1, a2);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8D8C7C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, long long *a9@<X8>)
{
  uint64_t v39 = a8;
  uint64_t v40 = a2;
  uint64_t v41 = a5;
  uint64_t v42 = a7;
  uint64_t v43 = a4;
  uint64_t v37 = a9;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = sub_1A8DE9910();
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  __int16 v16 = (char *)&v36 - v15;
  uint64_t v45 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v38 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a1;
  uint64_t v19 = *a3;
  unint64_t v20 = a3[1];
  uint64_t v21 = *a3;
  unint64_t v22 = v20;
  if (v20 >> 60 == 15)
  {
    *(void *)((char *)&v48 + 6) = 0;
    *(void *)&long long v48 = 0;
    BYTE14(v48) = 12;
    LODWORD(v47) = 0;
    if (!ccrng())
    {
      __break(1u);
      JUMPOUT(0x1A8D8CC8CLL);
    }
    if (v47)
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
    }
    ccrng_generate_bridge();
    uint64_t v21 = v48;
    unint64_t v22 = DWORD2(v48) | ((unint64_t)BYTE12(v48) << 32) | ((unint64_t)BYTE13(v48) << 40) | ((unint64_t)BYTE14(v48) << 48);
  }
  swift_retain();
  sub_1A8D8BE04(v21, v22);
  sub_1A8D8C208(v19, v20);
  uint64_t v23 = ccaes_gcm_encrypt_mode();
  if (!v23) {
    goto LABEL_24;
  }
  uint64_t v24 = v23;
  uint64_t v46 = v18;
  *(void *)&long long v48 = v21;
  *((void *)&v48 + 1) = v22;
  type metadata accessor for CoreCryptoGCMImpl.Context();
  swift_allocObject();
  uint64_t v25 = sub_1A8D8D2BC(&v46, (uint64_t *)&v48, v24);
  if (v9) {
    return sub_1A8D8BD58(v21, v22);
  }
  uint64_t v47 = v25;
  uint64_t v27 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v16, v43, v13);
  uint64_t v28 = v45;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v16, 1, a6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v13);
  }
  else
  {
    uint64_t v29 = (uint64_t)v38;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v38, v16, a6);
    sub_1A8D8C5C0(v29, a6, v39);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, a6);
  }
  uint64_t v30 = v40;
  uint64_t v31 = 0;
  switch(v22 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v21), v21)) {
        goto LABEL_22;
      }
      uint64_t v31 = HIDWORD(v21) - (int)v21;
LABEL_16:
      long long v48 = xmmword_1A8DEAA40;
      uint64_t v34 = sub_1A8DE9840();
      if (__OFADD__(v31, v34)) {
        goto LABEL_20;
      }
      if (__OFADD__(v31 + v34, 16)) {
        goto LABEL_21;
      }
      sub_1A8DE9450();
      sub_1A8D8BE04(v21, v22);
      sub_1A8DBB13C(v21, v22);
      sub_1A8D8BD58(v21, v22);
      sub_1A8D8C6B4(v30, (uint64_t *)&v48);
      swift_retain();
      sub_1A8D8DE30();
      swift_release();
      sub_1A8D8BD58(v21, v22);
      uint64_t result = swift_release();
      char v35 = v37;
      *uint64_t v37 = v48;
      *((void *)v35 + 2) = v31;
      break;
    case 2uLL:
      uint64_t v33 = *(void *)(v21 + 16);
      uint64_t v32 = *(void *)(v21 + 24);
      uint64_t v31 = v32 - v33;
      if (!__OFSUB__(v32, v33)) {
        goto LABEL_16;
      }
      goto LABEL_23;
    case 3uLL:
      goto LABEL_16;
    default:
      uint64_t v31 = BYTE6(v22);
      goto LABEL_16;
  }
  return result;
}

uint64_t sub_1A8D8CC9C(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v51 = a5;
  uint64_t v53 = a3;
  uint64_t v56 = sub_1A8DE9910();
  uint64_t v54 = *(void *)(v56 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v56);
  uint64_t v10 = (char *)&v50 - v9;
  uint64_t v55 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *a1;
  uint64_t v14 = *a2;
  unint64_t v15 = a2[1];
  uint64_t v16 = a2[2];
  sub_1A8D8BE04(*a2, v15);
  sub_1A8D8BE04(v14, v15);
  swift_retain();
  sub_1A8DBAE90(v16, v14, v15, (uint64_t *)&v62);
  unint64_t v17 = *((void *)&v62 + 1);
  uint64_t v18 = (void *)v62;
  switch(*((void *)&v62 + 1) >> 62)
  {
    case 1:
      LODWORD(v19) = DWORD1(v62) - v62;
      if (__OFSUB__(DWORD1(v62), v62))
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      uint64_t v19 = (int)v19;
LABEL_6:
      if (v19 < 12)
      {
LABEL_32:
        sub_1A8D8E240();
        swift_allocError();
        *(_DWORD *)uint64_t v49 = 1;
        *(unsigned char *)(v49 + 4) = 1;
        swift_willThrow();
        sub_1A8D8BD58((uint64_t)v18, v17);
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x1A8D8D29CLL);
      }
      uint64_t v52 = v16;
      uint64_t v18 = (void *)sub_1A8D924B0(v62, *((unint64_t *)&v62 + 1));
      uint64_t v24 = v23;
      sub_1A8D8BD58(v14, v15);
      uint64_t v25 = ccaes_gcm_decrypt_mode();
      if (!v25)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      uint64_t v26 = v25;
      unint64_t v60 = v13;
      *(void *)&long long v62 = v18;
      *((void *)&v62 + 1) = v24;
      uint64_t v27 = (const void *)type metadata accessor for CoreCryptoGCMImpl.Context();
      swift_allocObject();
      unint64_t v28 = (unint64_t)v57;
      uint64_t result = sub_1A8D8D2BC((uint64_t *)&v60, (uint64_t *)&v62, v26);
      unint64_t v17 = v28;
      if (!v28)
      {
        uint64_t v57 = v27;
        unint64_t v63 = (void *)result;
        uint64_t v18 = (void *)v54;
        uint64_t v30 = v56;
        (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v10, v53, v56);
        uint64_t v31 = v55;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v10, 1, a4) == 1)
        {
          uint64_t v32 = (void (*)(char *, uint64_t))v18[1];
          ++v18;
          v32(v10, v30);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v12, v10, a4);
          sub_1A8D8C5C0((uint64_t)v12, a4, v51);
          (*(void (**)(char *, uint64_t))(v31 + 8))(v12, a4);
        }
        uint64_t v33 = v52;
        long long v62 = xmmword_1A8DEAA40;
        sub_1A8D8BE04(v14, v15);
        sub_1A8DBC268(v33, v14, v15, &v58);
        sub_1A8DBC924(16, v58, v59, (uint64_t *)&v60);
        uint64_t v35 = v60;
        unint64_t v34 = v61;
        switch(v61 >> 62)
        {
          case 1uLL:
            unint64_t v36 = HIDWORD(v60);
            sub_1A8D8BD58(v60, v61);
            if (!__OFSUB__(v36, v35)) {
              goto LABEL_20;
            }
            goto LABEL_30;
          case 2uLL:
            uint64_t v38 = *(void *)(v60 + 16);
            uint64_t v37 = *(void *)(v60 + 24);
            sub_1A8D8BD58(v60, v61);
            if (!__OFSUB__(v37, v38)) {
              goto LABEL_20;
            }
            __break(1u);
LABEL_19:
            sub_1A8D8BD58(v35, v34);
LABEL_20:
            sub_1A8DE9450();
            sub_1A8D8BE04(v14, v15);
            sub_1A8DBC268(v33, v14, v15, &v58);
            sub_1A8DBC924(16, v58, v59, (uint64_t *)&v60);
            uint64_t v39 = v60;
            unint64_t v40 = v61;
            uint64_t v41 = v63;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              goto LABEL_23;
            }
            uint64_t v18 = (void *)swift_allocObject();
            uint64_t v42 = v41[3];
            v18[3] = v42;
            swift_retain();
            MEMORY[0x1AD0E8050](v42);
            uint64_t v43 = (void *)swift_slowAlloc();
            uint64_t v57 = (const void *)v41[2];
            size_t v44 = MEMORY[0x1AD0E8050](v42);
            if ((v44 & 0x8000000000000000) != 0) {
              goto LABEL_29;
            }
            memmove(v43, v57, v44);
            swift_release();
            v18[2] = v43;
            unint64_t v63 = v18;
            swift_release();
LABEL_23:
            sub_1A8DBC048(v39, v40, (uint64_t *)&v62);
            sub_1A8D8BD58(v39, v40);
            sub_1A8D8BE04(v14, v15);
            swift_retain();
            sub_1A8DBC780(16, v14, v15, (uint64_t *)&v60);
            uint64_t v45 = v60;
            unint64_t v46 = v61;
            BOOL v47 = sub_1A8D8DF24(v60, v61);
            sub_1A8D8BD58(v45, v46);
            swift_release();
            if (v47)
            {
              swift_release();
              uint64_t result = v62;
            }
            else
            {
              sub_1A8D8E240();
              swift_allocError();
              *(_DWORD *)uint64_t v48 = 2;
              *(unsigned char *)(v48 + 4) = 1;
              swift_willThrow();
              sub_1A8D8BD58(v62, *((unint64_t *)&v62 + 1));
              uint64_t result = swift_release();
            }
            break;
          case 3uLL:
            goto LABEL_19;
          default:
            sub_1A8D8BD58(v60, v61);
            goto LABEL_20;
        }
      }
      return result;
    case 2:
      uint64_t v21 = *(void *)(v62 + 16);
      uint64_t v20 = *(void *)(v62 + 24);
      BOOL v22 = __OFSUB__(v20, v21);
      uint64_t v19 = v20 - v21;
      if (!v22) {
        goto LABEL_6;
      }
      goto LABEL_28;
    case 3:
      goto LABEL_32;
    default:
      uint64_t v19 = BYTE14(v62);
      goto LABEL_6;
  }
}

uint64_t sub_1A8D8D2BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *a1;
  uint64_t v8 = *a2;
  unint64_t v7 = a2[1];
  swift_beginAccess();
  unint64_t v9 = *(void *)(v6 + 16);
  if (v9 >> 60)
  {
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  uint64_t v10 = 8 * v9;
  if (v10 == 128 || v10 == 192 || v10 == 256)
  {
    MEMORY[0x1AD0E8050](a3);
    *(void *)(v4 + 16) = swift_slowAlloc();
    *(void *)(v4 + 24) = a3;
    int v11 = ccgcm_init();
    if (v11)
    {
      int v12 = v11;
      sub_1A8D8E240();
      swift_allocError();
      *(_DWORD *)uint64_t v13 = v12;
      *(unsigned char *)(v13 + 4) = 0;
      swift_willThrow();
      sub_1A8D8BD58(v8, v7);
      swift_release();
LABEL_25:
      swift_release();
      return v4;
    }
    swift_release();
    switch(v7 >> 62)
    {
      case 1uLL:
        if ((int)v8 > v8 >> 32) {
          goto LABEL_28;
        }
        swift_retain();
        uint64_t v15 = sub_1A8DE9340();
        if (!v15) {
          goto LABEL_13;
        }
        uint64_t v16 = sub_1A8DE9370();
        if (__OFSUB__((int)v8, v16)) {
          goto LABEL_32;
        }
        v15 += (int)v8 - v16;
LABEL_13:
        sub_1A8DE9360();
        if (__OFSUB__(HIDWORD(v8), v8)) {
          goto LABEL_30;
        }
        if (!v15)
        {
          __break(1u);
LABEL_34:
          __break(1u);
          JUMPOUT(0x1A8D8D670);
        }
LABEL_22:
        int v20 = ccgcm_set_iv();
        break;
      case 2uLL:
        uint64_t v17 = *(void *)(v8 + 16);
        sub_1A8D8BE04(v8, v7);
        swift_retain();
        swift_retain();
        uint64_t v18 = sub_1A8DE9340();
        if (!v18) {
          goto LABEL_19;
        }
        uint64_t v19 = sub_1A8DE9370();
        if (__OFSUB__(v17, v19)) {
          goto LABEL_31;
        }
        v18 += v17 - v19;
LABEL_19:
        sub_1A8DE9360();
        if (__OFSUB__(*(void *)(v8 + 24), *(void *)(v8 + 16))) {
          goto LABEL_29;
        }
        if (!v18) {
          goto LABEL_34;
        }
        int v20 = ccgcm_set_iv();
        swift_release();
        swift_release();
        break;
      default:
        goto LABEL_22;
    }
    sub_1A8D8BD58(v8, v7);
    sub_1A8D8BD58(v8, v7);
    if (v20)
    {
      sub_1A8D8E240();
      swift_allocError();
      *(_DWORD *)uint64_t v21 = v20;
      *(unsigned char *)(v21 + 4) = 0;
      swift_willThrow();
      goto LABEL_25;
    }
  }
  else
  {
    sub_1A8D8BD58(v8, v7);
    swift_release();
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v14 = 0;
    *(unsigned char *)(v14 + 4) = 1;
    swift_willThrow();
    type metadata accessor for CoreCryptoGCMImpl.Context();
    swift_deallocPartialClassInstance();
  }
  return v4;
}

uint64_t sub_1A8D8D680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v9 = &v11[-v8];
  sub_1A8DE92B0();
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = v3;
  swift_getAssociatedConformanceWitness();
  sub_1A8DE9770();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t sub_1A8D8D7EC()
{
  return sub_1A8DE9390();
}

uint64_t sub_1A8D8D8F0(uint64_t result)
{
  if (result)
  {
    uint64_t result = ccgcm_aad();
    if (result)
    {
      int v1 = result;
      sub_1A8D8E240();
      swift_allocError();
      *(_DWORD *)uint64_t v2 = v1;
      *(unsigned char *)(v2 + 4) = 0;
      return swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8D8D968(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  switch((unint64_t)a2[1] >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(v2), v2)) {
        goto LABEL_5;
      }
      goto LABEL_8;
    case 2uLL:
      if (!__OFSUB__(*(void *)(v2 + 24), *(void *)(v2 + 16))) {
        goto LABEL_5;
      }
      goto LABEL_9;
    default:
LABEL_5:
      uint64_t v3 = sub_1A8DE9840();
      if (v3 < 0)
      {
        __break(1u);
LABEL_8:
        __break(1u);
LABEL_9:
        __break(1u);
        JUMPOUT(0x1A8D8DA88);
      }
      uint64_t v4 = sub_1A8DBB360(v3);
      MEMORY[0x1F4188790](v4);
      return sub_1A8DB7CA4(sub_1A8D8E294);
  }
}

uint64_t sub_1A8D8DA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v23 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = sub_1A8DBC418(a3, a1, a2);
  uint64_t v18 = v17 + v16;
  uint64_t v20 = v17 + v19;
  if (!v17)
  {
    uint64_t v20 = 0;
    uint64_t v18 = 0;
  }
  v28[0] = v18;
  v28[1] = v20;
  sub_1A8DE92B0();
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  uint64_t v26 = v28;
  uint64_t v27 = v23;
  swift_getAssociatedConformanceWitness();
  sub_1A8DE9770();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
}

uint64_t sub_1A8D8DC4C()
{
  return sub_1A8DE9390();
}

uint64_t sub_1A8D8DD50(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2 - result;
  if (result) {
    uint64_t v5 = a2 - result;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!*a3)
  {
    if (v5 <= 0) {
      goto LABEL_6;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a3[1] - *a3 < v5) {
    goto LABEL_10;
  }
LABEL_6:
  if (!result)
  {
    __break(1u);
    return result;
  }
  int v6 = ccgcm_update();
  if (v6)
  {
    int v7 = v6;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(unsigned char *)(v8 + 4) = 0;
    return swift_willThrow();
  }
LABEL_11:
  uint64_t result = sub_1A8DBC418(v4, *a3, a3[1]);
  uint64_t v10 = v9 + result;
  uint64_t v12 = v9 + v11;
  if (!v9)
  {
    uint64_t v12 = 0;
    uint64_t v10 = 0;
  }
  *a3 = v10;
  a3[1] = v12;
  return result;
}

uint64_t sub_1A8D8DE30()
{
  v5[5] = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  v4[1] = 0;
  int v0 = ccgcm_finalize();
  if (v0)
  {
    int v1 = v0;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v2 = v1;
    *(unsigned char *)(v2 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    v5[3] = MEMORY[0x1E4FBB2B8];
    v5[4] = MEMORY[0x1E4F27EF0];
    v5[0] = v4;
    v5[1] = v5;
    __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x1E4FBB2B8]);
    sub_1A8DE9460();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
}

BOOL sub_1A8D8DF24(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  __dst[2] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a2 >> 62;
  BOOL result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_35;
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      if (v8 != 16) {
        return 0;
      }
      __dst[0] = 0;
      __dst[1] = 0;
      uint64_t v12 = *(void *)(v3 + 24);
      uint64_t v13 = ccaes_gcm_decrypt_mode();
      if (!v13)
      {
        __break(1u);
        JUMPOUT(0x1A8D8E1A8);
      }
      if (v12 != v13)
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      if (v4)
      {
        if (v4 != 1)
        {
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v21 = *(void *)(a1 + 24);
          swift_retain();
          swift_retain();
          uint64_t v22 = (char *)sub_1A8DE9340();
          if (v22)
          {
            uint64_t v23 = sub_1A8DE9370();
            if (__OFSUB__(v20, v23)) {
              goto LABEL_40;
            }
            v22 += v20 - v23;
          }
          BOOL v11 = __OFSUB__(v21, v20);
          int64_t v24 = v21 - v20;
          if (!v11)
          {
            uint64_t v25 = sub_1A8DE9360();
            if (v22)
            {
              if (v25 >= v24) {
                size_t v26 = v24;
              }
              else {
                size_t v26 = v25;
              }
              memmove(__dst, v22, v26);
            }
            swift_release();
            swift_release();
            return ccgcm_finalize() == 0;
          }
          goto LABEL_38;
        }
        if (a1 >> 32 >= (int)a1)
        {
          sub_1A8D8BE04(a1, a2);
          uint64_t v14 = sub_1A8DE9340();
          if (!v14)
          {
            sub_1A8DE9360();
LABEL_31:
            sub_1A8D8BD58(a1, a2);
            return ccgcm_finalize() == 0;
          }
          uint64_t v15 = v14;
          uint64_t v16 = sub_1A8DE9370();
          uint64_t v17 = (int)a1 - v16;
          if (!__OFSUB__((int)a1, v16))
          {
            uint64_t v18 = sub_1A8DE9360();
            if (v18 >= (a1 >> 32) - (int)a1) {
              size_t v19 = (a1 >> 32) - (int)a1;
            }
            else {
              size_t v19 = v18;
            }
            memmove(__dst, (const void *)(v15 + v17), v19);
            goto LABEL_31;
          }
          goto LABEL_39;
        }
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
      }
      uint64_t __src = a1;
      __int16 v28 = a2;
      char v29 = BYTE2(a2);
      char v30 = BYTE3(a2);
      char v31 = BYTE4(a2);
      char v32 = BYTE5(a2);
      memcpy(__dst, &__src, BYTE6(a2));
      return ccgcm_finalize() == 0;
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_36;
    case 3uLL:
      return result;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1A8D8E1B8()
{
  int v1 = *(void **)(v0 + 16);
  rsize_t v2 = MEMORY[0x1AD0E8050](*(void *)(v0 + 24));
  memset_s(v1, v2, 0, v2);
  MEMORY[0x1AD0E8530](v1, -1, -1);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CoreCryptoGCMImpl.Context()
{
  return self;
}

unint64_t sub_1A8D8E240()
{
  unint64_t result = qword_1E97A8DE0;
  if (!qword_1E97A8DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8DE0);
  }
  return result;
}

uint64_t sub_1A8D8E294(uint64_t a1, uint64_t a2)
{
  return sub_1A8D8DA98(a1, a2, v2[4], v2[5], v2[6], v2[2], v2[3]);
}

uint64_t sub_1A8D8E2B8()
{
  return sub_1A8D8DC4C();
}

uint64_t sub_1A8D8E2D8(uint64_t a1, uint64_t a2)
{
  return sub_1A8D8DD50(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_1A8D8E2F4()
{
  return sub_1A8D8D7EC();
}

uint64_t sub_1A8D8E314(uint64_t a1)
{
  return sub_1A8D8D8F0(a1);
}

ValueMetadata *type metadata accessor for CoreCryptoGCMImpl()
{
  return &type metadata for CoreCryptoGCMImpl;
}

uint64_t Curve25519.Signing.PublicKey.isValidSignature<A, B>(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  return sub_1A8DA3790(a1, a2, a3, a4, a5, a6) & 1;
}

uint64_t Curve25519.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8DA4030(a1, a2, a3);
}

uint64_t sub_1A8D8E3A4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  sub_1A8DE9BF0();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_1A8DE9BF0();
      --v2;
    }
    while (v2);
  }
  if (!v0[1]) {
    return sub_1A8DE9C00();
  }
  uint64_t v4 = v0[3];
  unint64_t v5 = v0[4];
  uint64_t v6 = v0[2];
  sub_1A8DE9C00();
  unint64_t v7 = v5 >> 1;
  uint64_t result = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = sub_1A8DE9BF0();
  BOOL v9 = __OFSUB__(v7, v4);
  uint64_t v10 = v7 - v4;
  if (!v10) {
    return result;
  }
  if ((v10 < 0) ^ v9 | (v10 == 0))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v11 = v6 + v4;
  do
  {
    ++v11;
    uint64_t result = sub_1A8DE9C00();
    --v10;
  }
  while (v10);
  return result;
}

uint64_t sub_1A8D8E45C()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8D8E4A0()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8D8E4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  if (sub_1A8DA102C(*(void **)a1, *(void **)a2))
  {
    if (v2)
    {
      if (v6 && (sub_1A8D94168(v3, v4, v5, v7, v8, v9) & 1) != 0) {
        return 1;
      }
    }
    else if (!v6)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1A8D8E570()
{
  if (qword_1E97A8BA0 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1E97AD698;
  uint64_t v1 = qword_1E97A8BA8;
  sub_1A8DE97C0();
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E97AD6A0;
  sub_1A8DE97C0();
  uint64_t v7 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  MEMORY[0x1F4188790](v7);
  void v6[2] = v2;
  sub_1A8DCA8E4(6, &v7, (uint64_t (*)(char **))sub_1A8D8F024, (uint64_t)v6);
  uint64_t v3 = v7;
  uint64_t v4 = *((void *)v7 + 2);
  uint64_t result = swift_bridgeObjectRelease();
  qword_1E97AD6B8 = v0;
  unk_1E97AD6C0 = v3;
  xmmword_1E97AD6C8 = (unint64_t)(v3 + 32);
  qword_1E97AD6D8 = (2 * v4) | 1;
  return result;
}

uint64_t sub_1A8D8E6C0()
{
  if (qword_1E97A8BA0 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1E97AD698;
  uint64_t v1 = qword_1E97A8C48;
  sub_1A8DE97C0();
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E97AD740;
  sub_1A8DE97C0();
  uint64_t v7 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  MEMORY[0x1F4188790](v7);
  void v6[2] = v2;
  sub_1A8DCA8E4(6, &v7, (uint64_t (*)(char **))sub_1A8D8F024, (uint64_t)v6);
  uint64_t v3 = v7;
  uint64_t v4 = *((void *)v7 + 2);
  uint64_t result = swift_bridgeObjectRelease();
  qword_1E97AD6F0 = v0;
  *(void *)algn_1E97AD6F8 = v3;
  xmmword_1E97AD700 = (unint64_t)(v3 + 32);
  qword_1E97AD710 = (2 * v4) | 1;
  return result;
}

uint64_t sub_1A8D8E810()
{
  if (qword_1E97A8BA0 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1E97AD698;
  uint64_t v1 = qword_1E97A8C50;
  sub_1A8DE97C0();
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E97AD748;
  sub_1A8DE97C0();
  uint64_t v7 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  MEMORY[0x1F4188790](v7);
  void v6[2] = v2;
  sub_1A8DCA8E4(6, &v7, (uint64_t (*)(char **))sub_1A8D8E960, (uint64_t)v6);
  uint64_t v3 = v7;
  uint64_t v4 = *((void *)v7 + 2);
  uint64_t result = swift_bridgeObjectRelease();
  qword_1E97AD718 = v0;
  unk_1E97AD720 = v3;
  xmmword_1E97AD728 = (unint64_t)(v3 + 32);
  qword_1E97AD738 = (2 * v4) | 1;
  return result;
}

uint64_t sub_1A8D8E960(uint64_t a1)
{
  return sub_1A8DA0BCC(a1, *(void **)(v1 + 16));
}

uint64_t sub_1A8D8E97C@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, char **a3@<X8>)
{
  if (*a1 != a2 || (a1[48] & 1) != 0)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v6 = 1;
    swift_willThrow();
    return sub_1A8D8EC68((uint64_t)a1);
  }
  swift_unknownObjectRetain_n();
  sub_1A8DB95B8(0x30u, &v23);
  if (v3)
  {
LABEL_9:
    swift_unknownObjectRelease();
    sub_1A8D8EC68((uint64_t)a1);
    return sub_1A8D8EC68((uint64_t)a1);
  }
  uint64_t v7 = v23;
  unint64_t v34 = (char *)v24[0];
  uint64_t v8 = (char *)v24[1];
  unint64_t v9 = (char *)v24[2];
  uint64_t v10 = (char *)v24[3];
  sub_1A8DC3DAC((uint64_t)v25);
  sub_1A8D8ECD0((uint64_t)v25, (uint64_t)v28, &qword_1EB476750);
  if (v29 == 255)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v17 = 3;
    swift_willThrow();
    uint64_t v33 = v23;
    sub_1A8D8ECA4((uint64_t)&v33);
    sub_1A8D8ECD0((uint64_t)v24, (uint64_t)v32, &qword_1E97A8BB0);
    sub_1A8D8ED34((uint64_t)v32);
    goto LABEL_9;
  }
  v30[0] = v28[0];
  v30[1] = v28[1];
  v30[2] = v28[2];
  unsigned __int8 v31 = v29;
  uint64_t v11 = sub_1A8D944F0((unsigned __int8 *)v30, 3u);
  uint64_t v20 = v13;
  uint64_t v21 = v12;
  uint64_t v22 = v14;
  uint64_t v15 = v11;
  sub_1A8DC3DAC((uint64_t)v26);
  sub_1A8D8ED60((uint64_t)v26);
  sub_1A8D8ECD0((uint64_t)v26, (uint64_t)v27, &qword_1EB476750);
  if (v27[48] != 255)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v16 = 3;
    swift_willThrow();
    sub_1A8D8EC68((uint64_t)a1);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return sub_1A8D8EC68((uint64_t)a1);
  }
  swift_unknownObjectRelease();
  sub_1A8D8EC68((uint64_t)a1);
  uint64_t result = sub_1A8D8EC68((uint64_t)a1);
  size_t v19 = v34;
  *a3 = v7;
  a3[1] = v19;
  a3[2] = v8;
  a3[3] = v9;
  a3[4] = v10;
  a3[5] = (char *)v15;
  a3[6] = v22;
  a3[7] = v21;
  a3[8] = v20;
  return result;
}

unint64_t sub_1A8D8EC14()
{
  unint64_t result = qword_1E97A8DE8;
  if (!qword_1E97A8DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8DE8);
  }
  return result;
}

uint64_t sub_1A8D8EC68(uint64_t a1)
{
  return a1;
}

uint64_t sub_1A8D8ECA4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1A8D8ECD0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1A8D8ED34(uint64_t a1)
{
  return a1;
}

uint64_t sub_1A8D8ED60(uint64_t a1)
{
  return a1;
}

uint64_t sub_1A8D8ED9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a7 != 255) {
    return j__swift_unknownObjectRelease(a2, a3, a4, a5, a6, a7 & 1);
  }
  return result;
}

uint64_t _s26RFC5480AlgorithmIdentifierVwxx()
{
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _s26RFC5480AlgorithmIdentifierVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_1A8DE97C0();
  swift_unknownObjectRetain();
  return a1;
}

void *_s26RFC5480AlgorithmIdentifierVwca(void *a1, void *a2)
{
  *a1 = *a2;
  sub_1A8DE97C0();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s26RFC5480AlgorithmIdentifierVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t _s26RFC5480AlgorithmIdentifierVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s26RFC5480AlgorithmIdentifierVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s26RFC5480AlgorithmIdentifierVMa()
{
  return &_s26RFC5480AlgorithmIdentifierVN;
}

unint64_t sub_1A8D8EFD0()
{
  unint64_t result = qword_1E97A8DF0;
  if (!qword_1E97A8DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8DF0);
  }
  return result;
}

uint64_t sub_1A8D8F024(uint64_t a1)
{
  return sub_1A8D8E960(a1);
}

uint64_t sub_1A8D8F03C()
{
  return sub_1A8D8F1CC(&qword_1E97A8DF8, &qword_1E97A8E00);
}

uint64_t sub_1A8D8F064()
{
  return sub_1A8D8F1CC(&qword_1E97A8E08, &qword_1E97A8E10);
}

uint64_t sub_1A8D8F08C()
{
  return sub_1A8D8F1CC(&qword_1E97A8E18, &qword_1E97A8E20);
}

uint64_t sub_1A8D8F0B4()
{
  return sub_1A8D8F1CC(&qword_1E97A8E28, &qword_1E97A8E30);
}

uint64_t sub_1A8D8F0DC()
{
  return sub_1A8D8F1CC(&qword_1E97A8E38, &qword_1E97A8E40);
}

uint64_t sub_1A8D8F104()
{
  return sub_1A8D8F1CC(&qword_1E97A8E48, &qword_1E97A8E50);
}

uint64_t sub_1A8D8F12C()
{
  return sub_1A8D8F1CC(&qword_1E97A8E58, &qword_1E97A8E60);
}

uint64_t sub_1A8D8F154()
{
  return sub_1A8D8F1CC(&qword_1E97A8E68, &qword_1E97A8E70);
}

uint64_t sub_1A8D8F17C()
{
  return sub_1A8D8F1CC(&qword_1E97A8E78, &qword_1E97A8E80);
}

uint64_t sub_1A8D8F1A4()
{
  return sub_1A8D8F1CC(&qword_1E97A8E88, qword_1E97A8E90);
}

uint64_t sub_1A8D8F1CC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A8D8F21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t sub_1A8D8F224()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A8D8F2B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    uint64_t *v3 = *a2;
    long long v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1A8D8F36C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1A8D8F398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1A8D8F3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1A8D8F438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1A8D8F488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1A8D8F4D8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_1A8D8F634(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1A8D8F84CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for IntegerBytesCollection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1A8D8F88C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A8D8F8A8()
{
  return MEMORY[0x1E4FBB568];
}

uint64_t sub_1A8D8F8B4()
{
  return MEMORY[0x1E4FBB5A0];
}

uint64_t sub_1A8D8F8C0(uint64_t result)
{
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else if ((unint64_t)(result - 0x1000000000000001) >> 61 == 7)
  {
    sub_1A8D912A4();
    return sub_1A8DE9A20();
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8D8F948()
{
  return sub_1A8DC3F20();
}

uint64_t sub_1A8D8F954(void (*a1)(char *, char *, uint64_t), uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v49 = *(void *)(a2 + 24);
  uint64_t v50 = a1;
  uint64_t v4 = *(void *)(*(void *)(v49 + 8) + 24);
  uint64_t v47 = v3;
  uint64_t v48 = v4;
  swift_getAssociatedTypeWitness();
  uint64_t v51 = *(void *)(swift_getAssociatedConformanceWitness() + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unsigned int v7 = (char *)&v44 - v6;
  uint64_t v8 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v5);
  unsigned int v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  size_t v44 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v45 = (char *)&v44 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v56 = (char *)&v44 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v53 = (char *)&v44 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v44 - v21;
  unint64_t v46 = (char *)&v44 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v52 = (char *)&v44 - v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v2, v3);
  swift_getAssociatedConformanceWitness();
  sub_1A8DE99C0();
  sub_1A8D8F8C0((uint64_t)v50);
  sub_1A8DE99E0();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v3);
  uint64_t v24 = v54 + 8;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v54 + 8);
  v25(v22, v11);
  swift_getAssociatedConformanceWitness();
  sub_1A8DE9B70();
  sub_1A8DE9B30();
  size_t v26 = v53;
  sub_1A8DE99D0();
  v25(v22, v11);
  uint64_t v27 = v26;
  __int16 v28 = v7;
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  v50(v56, v27, v11);
  if ((sub_1A8DE9A10() & 1) == 0
    || (sub_1A8DE9B70(),
        unsigned __int8 v29 = v46,
        sub_1A8DE9B30(),
        swift_getAssociatedConformanceWitness(),
        char v30 = sub_1A8DE95D0(),
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v29, v11),
        (v30 & 1) != 0))
  {
    char v32 = v56;
    if (sub_1A8DE9A00() < 8) {
      goto LABEL_15;
    }
    uint64_t v49 = v24;
    uint64_t v33 = v45;
    v50(v45, v32, v11);
    unsigned __int8 v57 = -1;
    char v34 = sub_1A8DE9A10();
    uint64_t v35 = sub_1A8DE9A00();
    if (v34)
    {
      if (v35 <= 8)
      {
        sub_1A8DE9B70();
        unint64_t v36 = v46;
        sub_1A8DE9B30();
        swift_getAssociatedConformanceWitness();
        char v37 = sub_1A8DE95B0();
        v25(v36, v11);
        unsigned int v38 = v57;
        __int16 v28 = v44;
        (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v44, v33, v11);
        if ((v37 & 1) == 0)
        {
LABEL_14:
          v25(v28, v11);
          char v32 = v56;
          goto LABEL_15;
        }
        unsigned __int8 v39 = sub_1A8DE99F0();
        v25(v28, v11);
        char v32 = v56;
        if (v38 < v39)
        {
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }
LABEL_15:
        uint64_t v43 = sub_1A8DE99F0();
        v25(v32, v11);
        v25(v53, v11);
        v25(v52, v11);
        return v43;
      }
    }
    else if (v35 < 9)
    {
      unsigned __int8 v42 = sub_1A8DE99F0();
      v25(v33, v11);
      char v32 = v56;
      if (v57 < v42) {
        goto LABEL_13;
      }
      goto LABEL_15;
    }
    sub_1A8D91250();
    unint64_t v40 = v46;
    sub_1A8DE99C0();
    swift_getAssociatedConformanceWitness();
    char v41 = sub_1A8DE95C0();
    v25(v40, v11);
    v25(v33, v11);
    char v32 = v56;
    if (v41) {
      goto LABEL_13;
    }
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8D900D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for IntegerBytesCollection.Index();
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41842B8](a1, a2, a3, a4, WitnessTable);
}

uint64_t sub_1A8D90164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for IntegerBytesCollection.Index();
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41842C8](a1, a2, a3, a4, WitnessTable);
}

uint64_t sub_1A8D901EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8D906A4(a1, a2, a3, MEMORY[0x1E4FBB618]);
}

void *sub_1A8D90204(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8D90770(a1, a2, a3, MEMORY[0x1E4FBB618]);
}

uint64_t sub_1A8D90220()
{
  swift_getWitnessTable();

  return sub_1A8DE97F0();
}

uint64_t sub_1A8D902A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1A8D8F948();
  *a1 = result;
  return result;
}

uint64_t sub_1A8D902D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1A8D893A4();
  *a1 = result;
  return result;
}

void (*sub_1A8D90300(void *a1, void (**a2)(char *, char *, uint64_t), uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  unsigned int v7 = sub_1A8D903C0((uint64_t)v6, *a2, a3);
  v6[40] = v8;
  *((void *)v6 + 4) = v7;
  return sub_1A8D90378;
}

void sub_1A8D90378(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_1A8D903C0(uint64_t a1, void (*a2)(char *, char *, uint64_t), uint64_t a3))()
{
  return nullsub_1;
}

uint64_t sub_1A8D9040C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for IntegerBytesCollection.Index();
  uint64_t v3 = swift_getWitnessTable();

  return MEMORY[0x1F41842C0](a1, WitnessTable, v3);
}

void sub_1A8D904A8(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_1A8D904B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for IntegerBytesCollection.Index();
  uint64_t v7 = swift_getWitnessTable();

  return MEMORY[0x1F41842B8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1A8D90564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for IntegerBytesCollection.Index();
  uint64_t v7 = swift_getWitnessTable();

  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1A8D90608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A8D90DD0(a1, a2, a3, a4, MEMORY[0x1E4FBB6A0], MEMORY[0x1E4FBAFC8]);
}

uint64_t sub_1A8D90648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A8D90DD0(a1, a2, a3, a4, MEMORY[0x1E4FBB010], MEMORY[0x1E4FBAFD8]);
}

uint64_t sub_1A8D9068C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8D906A4(a1, a2, a3, MEMORY[0x1E4FBB610]);
}

uint64_t sub_1A8D906A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for IntegerBytesCollection.Index();
  uint64_t v7 = swift_getWitnessTable();

  return a4(a1, a2, WitnessTable, v7);
}

void *sub_1A8D90758(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8D90770(a1, a2, a3, MEMORY[0x1E4FBB610]);
}

void *sub_1A8D90770(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for IntegerBytesCollection.Index();
  uint64_t v8 = swift_getWitnessTable();
  uint64_t result = a4(&v10, a1, a2, WitnessTable, v8);
  *a1 = v10;
  return result;
}

uint64_t sub_1A8D90818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  uint64_t v6 = sub_1A8D8F948();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  swift_getWitnessTable();
  uint64_t result = sub_1A8DE9AD0();
  *(void *)(a2 + *(int *)(result + 36)) = v6;
  return result;
}

uint64_t sub_1A8D90904(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t sub_1A8D90958()
{
  return 2;
}

uint64_t sub_1A8D90960(uint64_t a1)
{
  swift_getWitnessTable();
  uint64_t v3 = sub_1A8D91040();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

uint64_t sub_1A8D909F0()
{
  return sub_1A8DE9760();
}

uint64_t sub_1A8D90A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184840](a1, a2, a3, WitnessTable);
}

BOOL sub_1A8D90A80(uint64_t a1, uint64_t a2)
{
  return a2 < a1;
}

BOOL sub_1A8D90A8C(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL sub_1A8D90A98(uint64_t a1, uint64_t a2)
{
  return a1 >= a2;
}

BOOL sub_1A8D90AA4(uint64_t a1, uint64_t a2)
{
  return a2 >= a1;
}

BOOL sub_1A8D90AB0(uint64_t *a1, uint64_t *a2)
{
  return sub_1A8D90A80(*a1, *a2);
}

BOOL sub_1A8D90ABC(uint64_t *a1, uint64_t *a2)
{
  return sub_1A8D90A98(*a1, *a2);
}

BOOL sub_1A8D90AC8(uint64_t *a1, uint64_t *a2)
{
  return sub_1A8D90AA4(*a1, *a2);
}

BOOL sub_1A8D90AD4(uint64_t *a1, uint64_t *a2)
{
  return sub_1A8D90A8C(*a1, *a2);
}

uint64_t sub_1A8D90AE0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8D90AF0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1A8D90AE0(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1A8D90B20()
{
  return sub_1A8DE99B0();
}

uint64_t sub_1A8D90B40()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A8D90B5C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A8D90B78()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A8D90B94()
{
  return sub_1A8D90CE8();
}

unint64_t sub_1A8D90BAC()
{
  unint64_t result = qword_1E97A8F18;
  if (!qword_1E97A8F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8F18);
  }
  return result;
}

uint64_t sub_1A8D90C00()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A8D90C1C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A8D90C38()
{
  return sub_1A8D90CE8();
}

uint64_t sub_1A8D90C50()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A8D90CB4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A8D90CD0()
{
  return sub_1A8D90CE8();
}

uint64_t sub_1A8D90CE8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A8D90D54()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for IntegerBytesCollection.Index()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1A8D90DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v22 - v17;
  char v19 = sub_1A8DE95E0();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_1A8D91044(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = sub_1A8DE98D0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v17 - v10;
  v17[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = sub_1A8DE95E0();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v12(v9, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v9, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
    goto LABEL_5;
  }
  char v13 = sub_1A8DE95E0();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v9, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

unint64_t sub_1A8D91250()
{
  unint64_t result = qword_1E97A8F20;
  if (!qword_1E97A8F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8F20);
  }
  return result;
}

unint64_t sub_1A8D912A4()
{
  unint64_t result = qword_1E97A8F28[0];
  if (!qword_1E97A8F28[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E97A8F28);
  }
  return result;
}

ValueMetadata *type metadata accessor for Curve25519()
{
  return &type metadata for Curve25519;
}

uint64_t AES.CCM.SealedBox.tag.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_1A8D8BE04(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t AES.CCM.SealedBox.ciphertext.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_1A8D8BE04(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t AES.CCM.SealedBox.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t v3 = *(void *)(v1 + 40);
  *a1 = v2;
  a1[1] = v3;
  return sub_1A8D8BE04(v2, v3);
}

void AES.CCM.SealedBox.securityLevel.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 48);
}

uint64_t AES.CCM.SealedBox.init<A, B>(nonce:ciphertext:tag:securityLevel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v40 = a2;
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  char v13 = (uint64_t *)MEMORY[0x1F4188790](v8);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = v13[1];
  uint64_t v36 = *v13;
  unint64_t v37 = v16;
  int v18 = *v17;
  uint64_t v38 = v19;
  uint64_t v20 = sub_1A8DE9840();
  uint64_t v21 = 8;
  if (v18) {
    uint64_t v21 = 16;
  }
  if (v20 == v21)
  {
    uint64_t v22 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v40, v39);
    uint64_t v23 = sub_1A8DE9520();
    uint64_t v34 = v24;
    uint64_t v35 = v23;
    uint64_t v25 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v38, a3);
    uint64_t v26 = sub_1A8DE9520();
    uint64_t v28 = v27;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v25, a3);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v40, v22);
    *(void *)a5 = v26;
    *(void *)(a5 + 8) = v28;
    uint64_t v30 = v34;
    *(void *)(a5 + 16) = v35;
    *(void *)(a5 + 24) = v30;
    unint64_t v31 = v37;
    *(void *)(a5 + 32) = v36;
    *(void *)(a5 + 40) = v31;
    *(unsigned char *)(a5 + 48) = v18;
  }
  else
  {
    sub_1A8D8BD58(v36, v37);
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v32 = 1;
    *(unsigned char *)(v32 + 4) = 1;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v38, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v40, v39);
  }
  return result;
}

uint64_t _s9SealedBoxVwxx(uint64_t *a1)
{
  sub_1A8D8BD58(*a1, a1[1]);
  sub_1A8D8BD58(a1[2], a1[3]);
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];

  return sub_1A8D8BD58(v2, v3);
}

uint64_t _s9SealedBoxVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1A8D8BE04(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_1A8D8BE04(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  sub_1A8D8BE04(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t _s9SealedBoxVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1A8D8BE04(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_1A8D8BD58(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_1A8D8BE04(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  sub_1A8D8BD58(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  unint64_t v13 = *(void *)(a2 + 40);
  sub_1A8D8BE04(v12, v13);
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  sub_1A8D8BD58(v14, v15);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s9SealedBoxVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1A8D8BD58(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_1A8D8BD58(v6, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_1A8D8BD58(v8, v9);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t _s9SealedBoxVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s9SealedBoxVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AES.CCM.SealedBox()
{
  return &type metadata for AES.CCM.SealedBox;
}

uint64_t sub_1A8D918C0(unint64_t a1, unint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  sub_1A8DE97C0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476718);
  if (swift_dynamicCast())
  {
    sub_1A8D934C8(v38, (uint64_t)&v41);
    __swift_project_boxed_opaque_existential_1(&v41, v43);
    sub_1A8DE9390();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_1A8D93414((uint64_t)v38, &qword_1EB4766C8);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      unint64_t v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = sub_1A8DE9AB0();
      }
      if (v4) {
        uint64_t v6 = (unsigned char *)(v4 + v5);
      }
      else {
        uint64_t v6 = 0;
      }
      unint64_t v7 = (uint64_t *)v4;
    }
    uint64_t v8 = sub_1A8D93014(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    uint64_t v11 = sub_1A8DE9690();
    goto LABEL_17;
  }
LABEL_69:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v11 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = sub_1A8D93078(v11);
  *((void *)&v38[0] + 1) = v12;
  MEMORY[0x1F4188790](*(void *)&v38[0]);
  unint64_t v13 = (unint64_t)sub_1A8DB7754((void *(*)(uint64_t *__return_ptr, char *, char *))sub_1A8D93500);
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        sub_1A8DE9440();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = sub_1A8D9D9A8(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = sub_1A8DE96E0();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = sub_1A8DE9AB0();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = sub_1A8D9D9A8(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = sub_1A8DE96A0();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      sub_1A8DE9460();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  uint64_t v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    sub_1A8DE9460();
    sub_1A8D8BF9C(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  sub_1A8D8BF9C((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

uint64_t sub_1A8D91DF0(uint64_t a1, uint64_t a2)
{
  v8[3] = MEMORY[0x1E4FBB2B8];
  _OWORD v8[4] = MEMORY[0x1E4F27EF0];
  v8[0] = a1;
  v8[1] = a2;
  unint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E4FBB2B8]);
  unint64_t v3 = (unsigned char *)*v2;
  if (*v2 && (v4 = (unsigned char *)v2[1], uint64_t v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_1A8DCEE40(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_1A8D92F14((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      uint64_t v6 = sub_1A8D92F90((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t sub_1A8D91EAC(uint64_t a1)
{
  void (*v36)(uint64_t *__return_ptr, long long *);
  void v37[2];
  uint64_t v38;
  char *v39;
  uint64_t v40;
  long long v41[2];
  uint64_t v42;
  long long v43;
  long long v44;
  uint64_t v45;
  void v46[5];
  long long v47;
  long long v48;
  uint64_t v49;
  uint64_t v50;

  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8FB0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8FB8);
  MEMORY[0x1F4188790](v5);
  unint64_t v7 = (void *)((char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v47 = *(_OWORD *)a1;
  long long v8 = *(_OWORD *)a1;
  uint64_t v48 = *(_OWORD *)(a1 + 16);
  uint64_t v49 = *(void *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 16);
  uint64_t v43 = v8;
  uint64_t v44 = v9;
  uint64_t v45 = *(void *)(a1 + 32);
  sub_1A8D93340(a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8FC0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476718);
  if (swift_dynamicCast())
  {
    sub_1A8D934C8(v41, (uint64_t)v46);
    __swift_project_boxed_opaque_existential_1(v46, v46[3]);
    sub_1A8DE9390();
    uint64_t v10 = *((void *)&v47 + 1);
    unint64_t v11 = v48;
    swift_bridgeObjectRelease();
    sub_1A8D8BD58(v10, v11);
    swift_release();
    uint64_t v43 = v41[0];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    return v43;
  }
  uint64_t v42 = 0;
  memset(v41, 0, sizeof(v41));
  sub_1A8D93414((uint64_t)v41, &qword_1EB4766C8);
  uint64_t v12 = 0;
  switch((unint64_t)v48 >> 62)
  {
    case 1uLL:
      LODWORD(v13) = HIDWORD(v47) - DWORD2(v47);
      if (__OFSUB__(HIDWORD(v47), DWORD2(v47))) {
        goto LABEL_45;
      }
      uint64_t v13 = (int)v13;
LABEL_8:
      if (v13 >= *(void *)(v47 + 16)) {
        uint64_t v12 = *(void *)(v47 + 16);
      }
      else {
        uint64_t v12 = v13;
      }
      break;
    case 2uLL:
      uint64_t v14 = *(void *)(*((void *)&v47 + 1) + 16);
      uint64_t v15 = *(void *)(*((void *)&v47 + 1) + 24);
      BOOL v16 = __OFSUB__(v15, v14);
      uint64_t v13 = v15 - v14;
      if (!v16) {
        goto LABEL_8;
      }
      goto LABEL_46;
    case 3uLL:
      break;
    default:
      uint64_t v13 = BYTE6(v48);
      goto LABEL_8;
  }
  *(void *)&uint64_t v43 = sub_1A8D93078(v12);
  *((void *)&v43 + 1) = v17;
  MEMORY[0x1F4188790](v43);
  v37[-2] = &v47;
  sub_1A8DB7A58(sub_1A8D93390);
  uint64_t v18 = *(void *)&v4[*(int *)(v2 + 48)];
  sub_1A8D933AC((uint64_t)v4, (uint64_t)v7);
  uint64_t v19 = *((void *)&v43 + 1) >> 62;
  switch(*((void *)&v43 + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v43) - v43;
      if (__OFSUB__(DWORD1(v43), v43)) {
        goto LABEL_47;
      }
      uint64_t v20 = (int)v20;
LABEL_16:
      if (v18 != v20)
      {
        if (v19)
        {
          if (v19 == 1) {
            uint64_t v23 = (uint64_t)v43 >> 32;
          }
          else {
            uint64_t v23 = *(void *)(v43 + 24);
          }
        }
        else
        {
          uint64_t v23 = BYTE14(v43);
        }
LABEL_27:
        if (v23 >= v18)
        {
          sub_1A8DE9440();
          goto LABEL_29;
        }
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
      }
LABEL_22:
      memset(v46, 0, 15);
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8FC8);
      uint64_t v25 = *(int *)(v24 + 56);
      if (*((unsigned char *)v7 + v25)) {
        goto LABEL_29;
      }
      uint64_t v26 = *v7;
      unint64_t v27 = v7[1];
      unint64_t v28 = *(void *)(*v7 + 16);
      if (v27 == v28)
      {
        *((unsigned char *)v7 + v25) = 1;
        goto LABEL_29;
      }
      v37[0] = *(int *)(v24 + 56);
      LOBYTE(v32) = 0;
      uint64_t v39 = (char *)v7 + *(int *)(v24 + 52);
      uint64_t v38 = v26 + 32;
      v37[1] = (char *)v41 + 14;
      do
      {
        if (v27 >= v28)
        {
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        unint64_t v33 = v27 + 1;
        if (__OFADD__(v27, 1)) {
          goto LABEL_42;
        }
        char v34 = *(unsigned char *)(v38 + v27);
        sub_1A8DE9500();
        sub_1A8D93470();
        sub_1A8DE9980();
        if (BYTE1(v41[0]) == 1) {
          break;
        }
        char v35 = v41[0];
        uint64_t v36 = *(void (**)(uint64_t *__return_ptr, long long *))((char *)v7 + *(int *)(v5 + 44));
        LOBYTE(v41[0]) = v34;
        BYTE1(v41[0]) = v35;
        v36(&v40, v41);
        *((unsigned char *)v46 + v32) = v40;
        unsigned int v32 = v32 + 1;
        if ((v32 >> 8)) {
          goto LABEL_43;
        }
        BYTE6(v46[1]) = v32;
        if (v32 == 14)
        {
          *(void *)&v41[0] = v46[0];
          DWORD2(v41[0]) = v46[1];
          WORD6(v41[0]) = WORD2(v46[1]);
          sub_1A8DE9460();
          LOBYTE(v32) = 0;
          BYTE6(v46[1]) = 0;
        }
        unint64_t v28 = *(void *)(v26 + 16);
        ++v27;
      }
      while (v33 != v28);
      v7[1] = v33;
      *((unsigned char *)v7 + v37[0]) = 1;
      if ((_BYTE)v32)
      {
        *(void *)&v41[0] = v46[0];
        DWORD2(v41[0]) = v46[1];
        WORD6(v41[0]) = WORD2(v46[1]);
        sub_1A8DE9460();
      }
LABEL_29:
      sub_1A8D93414((uint64_t)v7, &qword_1E97A8FB8);
      uint64_t v29 = *((void *)&v47 + 1);
      unint64_t v30 = v48;
      swift_bridgeObjectRelease();
      sub_1A8D8BD58(v29, v30);
      swift_release();
      return v43;
    case 2:
      uint64_t v22 = *(void *)(v43 + 16);
      uint64_t v21 = *(void *)(v43 + 24);
      BOOL v16 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v16) {
        goto LABEL_16;
      }
      goto LABEL_48;
    case 3:
      if (!v18) {
        goto LABEL_22;
      }
      uint64_t v23 = 0;
      goto LABEL_27;
    default:
      uint64_t v20 = BYTE14(v43);
      goto LABEL_16;
  }
}

uint64_t sub_1A8D924B0(uint64_t a1, unint64_t a2)
{
  v28[5] = *MEMORY[0x1E4F143B8];
  _OWORD v28[3] = MEMORY[0x1E4F277C0];
  v28[4] = MEMORY[0x1E4F277B0];
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v28, MEMORY[0x1E4F277C0]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_1A8D8BE04(a1, a2);
      sub_1A8D8BE04(v5, v6);
      long long v8 = (unsigned char *)sub_1A8DE9340();
      if (v8)
      {
        uint64_t v9 = sub_1A8DE9370();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = sub_1A8DE9360();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      sub_1A8D92C5C(v8, v13, &v27);
      sub_1A8D8BD58(v5, v6);
LABEL_27:
      sub_1A8D8BD58(a1, a2);
      uint64_t v24 = v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_1A8D8BE04(a1, a2);
      swift_retain();
      swift_retain();
      BOOL v16 = (unsigned char *)sub_1A8DE9340();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = sub_1A8DE9370();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = sub_1A8DE9360();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = &v16[v21];
      if (v16) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      sub_1A8D92C5C(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_1A8D8BE04(a1, a2);
      unint64_t v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_1A8D8BE04(a1, a2);
      unint64_t v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_1A8D92C5C(v26, v7, &v27);
      goto LABEL_27;
  }
}

uint64_t sub_1A8D92764(uint64_t a1, unint64_t a2)
{
  v28[5] = *MEMORY[0x1E4F143B8];
  _OWORD v28[3] = &type metadata for ChaChaPoly.Nonce;
  v28[4] = sub_1A8D9358C();
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v28, (uint64_t)&type metadata for ChaChaPoly.Nonce);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_1A8D8BE04(a1, a2);
      sub_1A8D8BE04(v5, v6);
      long long v8 = (unsigned char *)sub_1A8DE9340();
      if (v8)
      {
        uint64_t v9 = sub_1A8DE9370();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = sub_1A8DE9360();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      sub_1A8D92C5C(v8, v13, &v27);
      sub_1A8D8BD58(v5, v6);
LABEL_27:
      sub_1A8D8BD58(a1, a2);
      uint64_t v24 = v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_1A8D8BE04(a1, a2);
      swift_retain();
      swift_retain();
      BOOL v16 = (unsigned char *)sub_1A8DE9340();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = sub_1A8DE9370();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = sub_1A8DE9360();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = &v16[v21];
      if (v16) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      sub_1A8D92C5C(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_1A8D8BE04(a1, a2);
      unint64_t v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_1A8D8BE04(a1, a2);
      unint64_t v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_1A8D92C5C(v26, v7, &v27);
      goto LABEL_27;
  }
}

uint64_t Curve448.Signing.PrivateKey.init()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1A8DE97D0();
  *(void *)(v2 + 16) = 57;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 73) = 0u;
  uint64_t v5 = v2;
  unint64_t v3 = sub_1A8D9BD6C(0x39uLL, (uint64_t)&v5);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

size_t Curve448.Signing.PrivateKey.publicKey.getter@<X0>(size_t *a1@<X8>)
{
  size_t result = sub_1A8DC1C90();
  *a1 = result;
  return result;
}

uint64_t Curve448.Signing.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_1A8DC1FE8();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t Curve448.Signing.PrivateKey.rawRepresentation.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = sub_1A8D9BD98(v0);
  swift_release();
  return v1;
}

uint64_t Curve448.Signing.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_1A8DC2064();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t Curve448.Signing.PublicKey.rawRepresentation.getter()
{
  uint64_t v0 = sub_1A8DE97C0();
  uint64_t v1 = sub_1A8D93118(v0);
  swift_bridgeObjectRelease();
  return v1;
}

unsigned char *sub_1A8D92C5C@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_1A8DCEE40(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_1A8D92F14((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_1A8D92F90((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void *sub_1A8D92CD4(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_1A8D92D44(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    return a1(a3, a4 - a3);
  }
  else {
    return a1(0, 0);
  }
}

uint64_t sub_1A8D92D9C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    sub_1A8DE97C0();
    uint64_t result = sub_1A8DE9AA0();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8D92E28(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  long long v3 = *(_OWORD *)(a3 + 3);
  long long v7 = *(_OWORD *)(a3 + 1);
  long long v8 = v3;
  _OWORD v5[2] = &v6;
  return sub_1A8D92D44((uint64_t (*)(uint64_t, uint64_t))sub_1A8D934E0, (uint64_t)v5, a1, a2);
}

uint64_t sub_1A8D92E8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v7 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v7;
  uint64_t v11 = *(void *)(a3 + 32);
  uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8FB0) + 48);
  sub_1A8D93340((uint64_t)v10);
  uint64_t result = sub_1A8DC8F88(a4, a1, a2);
  *(void *)(a4 + v8) = result;
  return result;
}

uint64_t sub_1A8D92F14(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_1A8DE9380();
  swift_allocObject();
  uint64_t result = sub_1A8DE9330();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1A8DE9420();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_1A8D92F90(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_1A8DE9380();
  swift_allocObject();
  uint64_t result = sub_1A8DE9330();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

unsigned char *sub_1A8D93014(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)sub_1A8DCEE40(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)sub_1A8D92F14((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)sub_1A8D92F90((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_1A8D93078(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_1A8DE9380();
      swift_allocObject();
      sub_1A8DE9350();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_1A8DE9420();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_1A8D93118(uint64_t a1)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
  uint64_t v10 = sub_1A8D935E0((unint64_t *)&qword_1EB476948, &qword_1EB476940);
  v8[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  long long v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  sub_1A8DE97C0();
  sub_1A8D92C5C(v3, v4, &v7);
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

void *sub_1A8D931D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476690);
  v19[3] = v8;
  v19[4] = sub_1A8D935E0((unint64_t *)&qword_1EB476688, &qword_1EB476690);
  uint64_t v9 = (void *)swift_allocObject();
  v19[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  uint64_t result = __swift_project_boxed_opaque_existential_1(v19, v8);
  uint64_t v11 = result[2];
  uint64_t v12 = result[3] >> 1;
  BOOL v13 = __OFSUB__(v12, v11);
  uint64_t v14 = v12 - v11;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = (unsigned char *)(result[1] + v11);
    BOOL v16 = &v15[v14];
    swift_unknownObjectRetain();
    sub_1A8D92C5C(v15, v16, &v18);
    uint64_t v17 = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return (void *)v17;
  }
  return result;
}

ValueMetadata *type metadata accessor for Curve448.Signing()
{
  return &type metadata for Curve448.Signing;
}

ValueMetadata *type metadata accessor for Curve448.Signing.PrivateKey()
{
  return &type metadata for Curve448.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for Curve448.Signing.PublicKey()
{
  return &type metadata for Curve448.Signing.PublicKey;
}

uint64_t sub_1A8D93308()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1A8D93340(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  sub_1A8DE97C0();
  sub_1A8D8BE04(v2, v3);
  swift_retain();
  return a1;
}

uint64_t sub_1A8D93390(uint64_t a1, uint64_t a2)
{
  return sub_1A8D92E28(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_1A8D933AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8FB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A8D93414(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1A8D93470()
{
  unint64_t result = qword_1E97A8B40;
  if (!qword_1E97A8B40)
  {
    sub_1A8DE9500();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8B40);
  }
  return result;
}

uint64_t sub_1A8D934C8(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1A8D934E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1A8D92E8C(a1, a2, *(void *)(v3 + 16), a3);
}

void *sub_1A8D93500@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  unint64_t result = sub_1A8D92CD4((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1A8D9356C, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_1A8D9356C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1A8D92D9C(a1, a2);
}

unint64_t sub_1A8D9358C()
{
  unint64_t result = qword_1E97A8FD0;
  if (!qword_1E97A8FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8FD0);
  }
  return result;
}

uint64_t sub_1A8D935E0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Curve448.Signing.PublicKey.isValidSignature<A, B>(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  return sub_1A8DA4C98(a1, a2, a3, a4, a5, a6) & 1;
}

uint64_t Curve448.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8DA5538(a1, a2, a3);
}

uint64_t KEM.EncapsulationResult.sharedSecret.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t KEM.EncapsulationResult.encapsulated.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_1A8D8BE04(v1, *(void *)(v0 + 16));
  return v1;
}

void *KEM.EncapsulationResult.init(sharedSecret:encapsulated:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = *result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

ValueMetadata *type metadata accessor for KEM()
{
  return &type metadata for KEM;
}

uint64_t destroy for KEM.EncapsulationResult(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);

  return sub_1A8D8BD58(v2, v3);
}

void *_s9CryptoKit3KEMO19EncapsulationResultVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  unint64_t v4 = a2[2];
  swift_retain();
  sub_1A8D8BE04(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

void *assignWithCopy for KEM.EncapsulationResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[1];
  unint64_t v4 = a2[2];
  sub_1A8D8BE04(v5, v4);
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  a1[1] = v5;
  a1[2] = v4;
  sub_1A8D8BD58(v6, v7);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for KEM.EncapsulationResult(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_1A8D8BD58(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for KEM.EncapsulationResult(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KEM.EncapsulationResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KEM.EncapsulationResult()
{
  return &type metadata for KEM.EncapsulationResult;
}

uint64_t dispatch thunk of KEMPublicKey.encapsulate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static KEMPrivateKey.generate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of KEMPrivateKey.decapsulate(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of KEMPrivateKey.publicKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

unint64_t HPKE.KEM.value.getter()
{
  return 0x20001200110010uLL >> (16 * *v0);
}

unint64_t HPKE.KEM.nEnc.getter()
{
  return 0x20008500610041uLL >> (16 * *v0);
}

BOOL static HPKE.KEM.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HPKE.KEM.hash(into:)()
{
  return sub_1A8DE9BF0();
}

void *static HPKE.KEM.allCases.getter()
{
  return &unk_1EFF5E860;
}

uint64_t HPKE.KEM.hashValue.getter()
{
  return sub_1A8DE9C20();
}

void sub_1A8D93A2C(void *a1@<X8>)
{
  *a1 = &unk_1EFF5E888;
}

unint64_t sub_1A8D93A40()
{
  unint64_t result = qword_1E97A8FD8;
  if (!qword_1E97A8FD8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E97A8FE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8FD8);
  }
  return result;
}

unint64_t sub_1A8D93AA0()
{
  unint64_t result = qword_1E97A8FE8;
  if (!qword_1E97A8FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8FE8);
  }
  return result;
}

uint64_t _s3KEMOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s3KEMOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A8D93C50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKE.KEM()
{
  return &type metadata for HPKE.KEM;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CryptoTokenKitError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CryptoTokenKitError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_1A8D93CEC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1A8D93D08(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoTokenKitError()
{
  return &type metadata for CryptoTokenKitError;
}

unsigned char *HPKE.Ciphersuite.init(kem:kdf:aead:)@<X0>(unsigned char *result@<X0>, char *a2@<X1>, char *a3@<X2>, unsigned char *a4@<X8>)
{
  char v4 = *a2;
  char v5 = *a3;
  *a4 = *result;
  a4[1] = v4;
  a4[2] = v5;
  return result;
}

void static HPKE.Ciphersuite.P256_SHA256_AES_GCM_256.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 1;
}

void static HPKE.Ciphersuite.P384_SHA384_AES_GCM_256.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 257;
  *(unsigned char *)(a1 + 2) = 1;
}

void static HPKE.Ciphersuite.P521_SHA512_AES_GCM_256.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 514;
  *(unsigned char *)(a1 + 2) = 1;
}

void static HPKE.Ciphersuite.Curve25519_SHA256_ChachaPoly.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 3;
  *(unsigned char *)(a1 + 2) = 2;
}

uint64_t sub_1A8D93DB0()
{
  uint64_t result = sub_1A8D918C0(0x454B5048uLL, 0xE400000000000000);
  qword_1E97A8FF0 = result;
  *(void *)algn_1E97A8FF8 = v1;
  return result;
}

void HPKE.Ciphersuite.kem.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void HPKE.Ciphersuite.kdf.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

void HPKE.Ciphersuite.aead.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 2);
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)uint64_t result = v2;
  return result;
}

uint64_t _s11CiphersuiteVwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    if ((a2 + 33554178) >> 24)
    {
      int v2 = a1[3];
      if (a1[3]) {
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776962;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)(a1 + 3);
      if (*(_WORD *)(a1 + 3)) {
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776962;
      }
    }
  }
  unsigned int v4 = a1[1];
  BOOL v5 = v4 >= 3;
  int v6 = v4 - 3;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t _s11CiphersuiteVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554178) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFD) {
    int v3 = 0;
  }
  if (a2 > 0xFD)
  {
    *(_WORD *)uint64_t result = a2 - 254;
    *(unsigned char *)(result + 2) = (a2 - 254) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 254) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)(result + 1) = a2 + 2;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKE.Ciphersuite()
{
  return &type metadata for HPKE.Ciphersuite;
}

uint64_t sub_1A8D93F24(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = sub_1A8D96298(0, *((void *)v9 + 2) + 1, 1, v9);
  }
  unint64_t v11 = *((void *)v9 + 2);
  unint64_t v10 = *((void *)v9 + 3);
  if (v11 >= v10 >> 1) {
    uint64_t v9 = sub_1A8D96298((char *)(v10 > 1), v11 + 1, 1, v9);
  }
  *((void *)v9 + 2) = v11 + 1;
  v9[v11 + 32] = 0;
  *a1 = v9;
  uint64_t v12 = swift_unknownObjectRetain();
  sub_1A8DE8FC4(v12, a3, a4, a5);
  return swift_unknownObjectRelease();
}

uint64_t sub_1A8D94010()
{
  return sub_1A8D94654(*(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1A8D9401C(uint64_t a1)
{
  return sub_1A8D945EC(a1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1A8D94028()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_1A8DE9BD0();
  unint64_t v4 = v3 >> 1;
  uint64_t result = v4 - v2;
  if (__OFSUB__(v4, v2))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = sub_1A8DE9BF0();
    BOOL v6 = __OFSUB__(v4, v2);
    uint64_t v7 = v4 - v2;
    if (!v7) {
      return sub_1A8DE9C20();
    }
    if (!((v7 < 0) ^ v6 | (v7 == 0)))
    {
      uint64_t v8 = v1 + v2;
      do
      {
        ++v8;
        sub_1A8DE9C00();
        --v7;
      }
      while (v7);
      return sub_1A8DE9C20();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8D940AC(uint64_t a1, uint64_t a2)
{
  return sub_1A8D94168(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_1A8D940C8()
{
  return sub_1A8DE9A40();
}

uint64_t sub_1A8D940EC()
{
  return sub_1A8D940C8();
}

unint64_t sub_1A8D94114()
{
  unint64_t result = qword_1E97A9000;
  if (!qword_1E97A9000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9000);
  }
  return result;
}

uint64_t sub_1A8D94168(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6 = a3 >> 1;
  uint64_t v7 = (a3 >> 1) - a2;
  if (!__OFSUB__(a3 >> 1, a2))
  {
    int64_t v8 = a6 >> 1;
    if (__OFSUB__(a6 >> 1, a5)) {
      goto LABEL_20;
    }
    if (v7 != (a6 >> 1) - a5) {
      return 0;
    }
    if (!v7 || result + a2 == a4 + a5 || v6 == a2) {
      return 1;
    }
    if (v6 <= a2) {
      goto LABEL_22;
    }
    uint64_t v9 = a2 + 1;
    int v10 = *(unsigned __int8 *)(result + a2);
    if (v6 == a2) {
      return 1;
    }
    uint64_t v11 = a5;
    if (v8 == a5) {
      return 0;
    }
    while (v11 >= a5 && v11 < v8)
    {
      if (v10 != *(unsigned __int8 *)(a4 + v11)) {
        return 0;
      }
      if (v6 == v9) {
        return 1;
      }
      if (v9 >= v6) {
        goto LABEL_21;
      }
      int v10 = *(unsigned __int8 *)(result + v9++);
      if (v8 == ++v11) {
        return 0;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1A8D9423C(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6 = a3 >> 1;
  uint64_t v7 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v8 = a5;
  int64_t v9 = a6 >> 1;
  if (__OFSUB__(a6 >> 1, a5)) {
    goto LABEL_34;
  }
  if (v7 != (a6 >> 1) - a5)
  {
    char v13 = 0;
    return v13 & 1;
  }
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v11 = result;
  uint64_t v12 = (unsigned __int8 *)(result + 48 * a2);
  if (v12 == (unsigned __int8 *)(a4 + 48 * a5) || v6 == a2) {
    goto LABEL_11;
  }
  if (v6 <= a2)
  {
LABEL_37:
    __break(1u);
    return result;
  }
  uint64_t v14 = *v12;
  uint64_t v15 = (void *)(result + 48 * a2);
  uint64_t v17 = v15[4];
  unint64_t v16 = v15[5];
  uint64_t v18 = v15[2];
  uint64_t v35 = a2 + 1;
  uint64_t v37 = v15[3];
  uint64_t v38 = v15[1];
  unint64_t result = swift_unknownObjectRetain();
  uint64_t v19 = v35;
  if (v18 == 1)
  {
LABEL_11:
    char v13 = 1;
    return v13 & 1;
  }
  uint64_t v20 = 0;
  uint64_t v36 = a4 + 48 * v8;
  uint64_t v32 = v11 + 48 * v19;
  uint64_t v33 = v9;
  uint64_t v21 = v8;
  while (1)
  {
    if (v9 == v21)
    {
      sub_1A8D946E0(v14, v38, v18);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 1;
      goto LABEL_31;
    }
    if (v21 < v8 || v21 >= v9) {
      goto LABEL_35;
    }
    uint64_t v22 = (void *)(v36 + v20);
    if (*(unsigned __int8 *)(v36 + v20) != v14 || v38 != v22[1])
    {
      uint64_t v29 = v14;
      uint64_t v30 = v38;
      uint64_t v31 = v18;
LABEL_31:
      sub_1A8D946E0(v29, v30, v31);
      char v13 = 0;
      return v13 & 1;
    }
    uint64_t v23 = v22[2];
    if (!v18) {
      break;
    }
    if (!v23) {
      goto LABEL_32;
    }
    uint64_t v34 = v18;
    uint64_t v24 = v20;
    char v13 = sub_1A8D94168(v37, v17, v16, v22[3], v22[4], v22[5]);
    unint64_t result = sub_1A8D946E0(v14, v38, v34);
    if ((v13 & 1) == 0 || v6 == v19) {
      return v13 & 1;
    }
LABEL_26:
    if (v19 >= v6) {
      goto LABEL_36;
    }
    uint64_t v25 = v6;
    uint64_t v26 = v8;
    uint64_t v27 = v24 + 48;
    ++v19;
    ++v21;
    uint64_t v28 = v32 + v24;
    uint64_t v14 = *(unsigned __int8 *)(v32 + v24);
    uint64_t v17 = *(void *)(v32 + v24 + 32);
    unint64_t v16 = *(void *)(v32 + v24 + 40);
    uint64_t v18 = *(void *)(v32 + v24 + 16);
    uint64_t v37 = *(void *)(v28 + 24);
    uint64_t v38 = *(void *)(v28 + 8);
    unint64_t result = swift_unknownObjectRetain();
    char v13 = 1;
    uint64_t v20 = v27;
    uint64_t v8 = v26;
    int64_t v6 = v25;
    int64_t v9 = v33;
    if (v18 == 1) {
      return v13 & 1;
    }
  }
  if (!v23)
  {
    uint64_t v24 = v20;
    unint64_t result = sub_1A8D946E0(v14, v38, 0);
    if (v6 == v19) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_32:
  swift_unknownObjectRelease();
  char v13 = 0;
  return v13 & 1;
}

uint64_t sub_1A8D944F0(unsigned __int8 *a1, unsigned __int8 a2)
{
  if (*a1 != a2)
  {
    sub_1A8D8EC14();
    swift_allocError();
    char v5 = 1;
    goto LABEL_9;
  }
  sub_1A8D946F4((uint64_t)(a1 + 8), (uint64_t)v6);
  uint64_t result = sub_1A8D946F4((uint64_t)v6, (uint64_t)v7);
  if (v10)
  {
    if (v8 != v9 >> 1)
    {
      if (v8 >= (uint64_t)(v9 >> 1))
      {
        __break(1u);
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
      if (!*(unsigned char *)(v7[1] + v8))
      {
        if (!__OFSUB__(v9 >> 1, v8)) {
          return v7[0];
        }
        goto LABEL_12;
      }
    }
    sub_1A8D8EC14();
    swift_allocError();
    char v5 = 3;
LABEL_9:
    *unint64_t v4 = v5;
    swift_willThrow();
    return sub_1A8D8EC68((uint64_t)a1);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1A8D945EC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t result = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = sub_1A8DE9BF0();
  BOOL v8 = __OFSUB__(v4, a3);
  uint64_t v9 = v4 - a3;
  if (!v9) {
    return result;
  }
  if ((v9 < 0) ^ v8 | (v9 == 0))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v10 = a2 + a3;
  do
  {
    ++v10;
    uint64_t result = sub_1A8DE9C00();
    --v9;
  }
  while (v9);
  return result;
}

uint64_t sub_1A8D94654(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_1A8DE9BD0();
  unint64_t v6 = a3 >> 1;
  uint64_t result = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = sub_1A8DE9BF0();
    BOOL v8 = __OFSUB__(v6, a2);
    uint64_t v9 = v6 - a2;
    if (!v9) {
      return sub_1A8DE9C20();
    }
    if (!((v9 < 0) ^ v8 | (v9 == 0)))
    {
      uint64_t v10 = a1 + a2;
      do
      {
        ++v10;
        sub_1A8DE9C00();
        --v9;
      }
      while (v9);
      return sub_1A8DE9C20();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8D946E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1A8D946F4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _s7ASN1AnyVwxx()
{
  return swift_unknownObjectRelease();
}

uint64_t _s7ASN1AnyVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

void *_s7ASN1AnyVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *_s7ASN1AnyVwta(_OWORD *a1, _OWORD *a2)
{
  swift_unknownObjectRelease();
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

uint64_t _s7ASN1AnyVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s7ASN1AnyVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s13ASN1BitStringVMa()
{
  return &_s13ASN1BitStringVN;
}

uint64_t static HMAC.isValidAuthenticationCode(_:authenticating:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a4;
  v15[0] = a2;
  v15[1] = a3;
  uint64_t v14 = v9;
  uint64_t v10 = type metadata accessor for HashedAuthenticationCode();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v12 = sub_1A8D8A898();
  return sub_1A8D9497C(a1, (uint64_t)v15, &v14, a5, v10, MEMORY[0x1E4FBB2B8], a6, WitnessTable, v12) & 1;
}

uint64_t sub_1A8D9497C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v26 = a5;
  uint64_t v27 = a8;
  uint64_t v24 = a6;
  uint64_t v25 = a1;
  uint64_t v23 = a9;
  uint64_t v13 = type metadata accessor for HashedAuthenticationCode();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  unint64_t v16 = (char *)&v23 - v15;
  uint64_t v17 = type metadata accessor for HMAC();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v23 - v19;
  uint64_t v28 = *a3;
  swift_retain();
  HMAC.init(key:)(&v28, a4, a7);
  HMAC.update<A>(data:)(a2, v17, v24, v23);
  HMAC.finalize()(v17, v16);
  uint64_t WitnessTable = swift_getWitnessTable();
  LOBYTE(a4) = sub_1A8DCC05C(v25, v16, v26, v13, v27, WitnessTable);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  return a4 & 1;
}

uint64_t type metadata accessor for HashedAuthenticationCode()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t HMAC.init(key:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t *)(*a1 + 16);
  swift_beginAccess();
  uint64_t v7 = *(void *)(v5 + 16);
  BOOL v8 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 24);
  if (v7 == v8(a2, a3))
  {
    uint64_t v27 = &type metadata for SymmetricKey;
    unint64_t v28 = sub_1A8D8C060();
    v26[0] = v5;
    goto LABEL_18;
  }
  unint64_t v9 = *v6;
  uint64_t v10 = a2;
  if (v8(a2, a3) >= (uint64_t)v9)
  {
    uint64_t v15 = v8(a2, a3);
    if ((v15 & 0x8000000000000000) == 0)
    {
      unint64_t v9 = v15;
      if (v15)
      {
        uint64_t v10 = sub_1A8DE97D0();
        *(void *)(v10 + 16) = v9;
        bzero((void *)(v10 + 32), v9);
      }
      else
      {
        uint64_t v10 = MEMORY[0x1E4FBC860];
        unint64_t v9 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      }
      size_t v12 = *(void *)(v5 + 16);
      if (v9 >= v12)
      {
        if (v9 <= *(void *)(v10 + 24) >> 1)
        {
          if (!v12)
          {
LABEL_17:
            swift_release();
            uint64_t v27 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
            unint64_t v28 = sub_1A8D935E0((unint64_t *)&qword_1EB476948, &qword_1EB476940);
            v26[0] = v10;
            goto LABEL_18;
          }
LABEL_16:
          memcpy((void *)(v10 + 32), (const void *)(v5 + 32), v12);
          goto LABEL_17;
        }
LABEL_22:
        size_t v21 = v12;
        uint64_t v22 = sub_1A8D96298((char *)1, v9, 1, (char *)v10);
        size_t v12 = v21;
        uint64_t v10 = (uint64_t)v22;
        if (!v21) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v11 = v8(a2, a3);
  if (v11 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  size_t v13 = v11;
  if (v11)
  {
    uint64_t v14 = sub_1A8DE97D0();
    *(void *)(v14 + 16) = v13;
    bzero((void *)(v14 + 32), v13);
  }
  else
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
  }
  uint64_t v25 = v14;
  sub_1A8D94F80(v5 + 32, v5 + 32 + *(void *)(v5 + 16), (uint64_t)&v25, a2, a3);
  swift_release();
  sub_1A8D934C8(v24, (uint64_t)v26);
  swift_bridgeObjectRelease();
LABEL_18:
  unint64_t v16 = *(void (**)(uint64_t, uint64_t))(a3 + 32);
  uint64_t v23 = v16;
  type metadata accessor for HMAC();
  v16(a2, a3);
  uint64_t v17 = a3;
  __swift_project_boxed_opaque_existential_1(v26, (uint64_t)v27);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
  sub_1A8DE9390();
  uint64_t v19 = sub_1A8D935E0((unint64_t *)&qword_1EB476928, &qword_1EB476940);
  HashFunction.update<A>(data:)((uint64_t)v24, a2, v18, v17, v19);
  swift_bridgeObjectRelease();
  v23(a2, v17);
  __swift_project_boxed_opaque_existential_1(v26, (uint64_t)v27);
  sub_1A8DE9390();
  HashFunction.update<A>(data:)((uint64_t)v24, a2, v18, v17, v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A8D94F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  size_t v13 = &v15[-v12];
  static HashFunction.hash(bufferPointer:)(a1, a2, a4, a5);
  uint64_t v16 = a3;
  swift_getAssociatedConformanceWitness();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476718);
  sub_1A8DE9390();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t sub_1A8D9510C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char **a3@<X2>, char **a4@<X8>)
{
  if (result)
  {
    unint64_t v6 = (const void *)result;
    BOOL v8 = *a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      BOOL v8 = sub_1A8D96298(0, *((void *)v8 + 2), 0, v8);
    }
    *a3 = v8;
    memcpy(v8 + 32, v6, a2 - (void)v6);
    uint64_t v10 = *a3;
    a4[3] = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
    a4[4] = (char *)sub_1A8D935E0((unint64_t *)&qword_1EB476948, &qword_1EB476940);
    *a4 = v10;
    return sub_1A8DE97C0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1A8D951E4@<X0>(char *result@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  if (!result)
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
    goto LABEL_10;
  }
  long long v4 = result;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  uint64_t v6 = a2 - result;
  if (a2 == result)
  {
LABEL_10:
    *a3 = v5;
    return result;
  }
  uint64_t v11 = MEMORY[0x1E4FBC860];
  uint64_t result = sub_1A8D967E4(0, v6 & ~(v6 >> 63), 0);
  if (v6 >= 1)
  {
    uint64_t v5 = v11;
    unint64_t v7 = *(void *)(v11 + 16);
    do
    {
      char v9 = *v4++;
      char v8 = v9;
      uint64_t v12 = v5;
      unint64_t v10 = *(void *)(v5 + 24);
      if (v7 >= v10 >> 1)
      {
        uint64_t result = sub_1A8D967E4((char *)(v10 > 1), v7 + 1, 1);
        uint64_t v5 = v12;
      }
      *(void *)(v5 + 16) = v7 + 1;
      *(unsigned char *)(v5 + v7++ + 32) = v8 ^ 0x36;
      --v6;
    }
    while (v6);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

char *sub_1A8D952E0@<X0>(char *result@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  if (!result)
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
    goto LABEL_10;
  }
  long long v4 = result;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  uint64_t v6 = a2 - result;
  if (a2 == result)
  {
LABEL_10:
    *a3 = v5;
    return result;
  }
  uint64_t v11 = MEMORY[0x1E4FBC860];
  uint64_t result = sub_1A8D967E4(0, v6 & ~(v6 >> 63), 0);
  if (v6 >= 1)
  {
    uint64_t v5 = v11;
    unint64_t v7 = *(void *)(v11 + 16);
    do
    {
      char v9 = *v4++;
      char v8 = v9;
      uint64_t v12 = v5;
      unint64_t v10 = *(void *)(v5 + 24);
      if (v7 >= v10 >> 1)
      {
        uint64_t result = sub_1A8D967E4((char *)(v10 > 1), v7 + 1, 1);
        uint64_t v5 = v12;
      }
      *(void *)(v5 + 16) = v7 + 1;
      *(unsigned char *)(v5 + v7++ + 32) = v8 ^ 0x5C;
      --v6;
    }
    while (v6);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t static HMAC.authenticationCode<A>(for:using:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v14 = type metadata accessor for HMAC();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v19 - v16;
  uint64_t v20 = *a2;
  swift_retain();
  HMAC.init(key:)(&v20, a3, a5);
  HMAC.update<A>(data:)(a1, v14, a4, a6);
  HMAC.finalize()(v14, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t HMAC.update<A>(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = &v14[-v10];
  sub_1A8DE92B0();
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v16 = a3;
  uint64_t v17 = v12;
  uint64_t v18 = a4;
  uint64_t v19 = v4;
  swift_getAssociatedConformanceWitness();
  sub_1A8DE9770();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
}

uint64_t HMAC.finalize()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v4 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v20 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v20 - v16;
  (*(void (**)(uint64_t, uint64_t))(v7 + 48))(v3, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v6, v2, v3);
  uint64_t v22 = v3;
  uint64_t v23 = v7;
  uint64_t v24 = v6;
  swift_getAssociatedConformanceWitness();
  sub_1A8DE9390();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v17, AssociatedTypeWitness);
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v18(v12, v15, AssociatedTypeWitness);
  v18(v20, v12, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v6, v3);
}

uint64_t static HMAC.isValidAuthenticationCode<A>(_:authenticating:using:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v16 = *a3;
  uint64_t v13 = type metadata accessor for HashedAuthenticationCode();
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_1A8D9497C(a1, a2, &v16, a4, v13, a5, a6, WitnessTable, a7) & 1;
}

uint64_t static HMAC.isValidAuthenticationCode<A, B>(_:authenticating:using:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = *a3;
  return sub_1A8D9497C(a1, a2, &v10, a4, a5, a6, a7, a8, a9) & 1;
}

uint64_t sub_1A8D95A08()
{
  return sub_1A8DE9390();
}

uint64_t sub_1A8D95B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a3 + 24) + 40))(a1, a2, *(void *)(a3 + 16));
}

uint64_t sub_1A8D95B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = MEMORY[0x1F4188790]();
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v12 + 40))(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a4);
}

uint64_t HashedAuthenticationCode.byteCount.getter()
{
  return sub_1A8D96C3C();
}

uint64_t HashedAuthenticationCode.description.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v4 = (char *)&v10 - v3;
  uint64_t v13 = 0;
  unint64_t v14 = 0xE000000000000000;
  sub_1A8DE9A90();
  swift_bridgeObjectRelease();
  uint64_t v13 = 0x7469772043414D48;
  unint64_t v14 = 0xEA00000000002068;
  sub_1A8DE9C30();
  sub_1A8DE9680();
  swift_bridgeObjectRelease();
  sub_1A8DE9680();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  uint64_t result = sub_1A8DE97E0();
  uint64_t v6 = *(void *)(result + 16);
  if (v6 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  size_t v7 = 2 * v6;
  if (2 * v6 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v8 = result;
  if (v6)
  {
    uint64_t v9 = sub_1A8DE97D0();
    *(void *)(v9 + 16) = v7;
    bzero((void *)(v9 + 32), v7);
  }
  else
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  uint64_t v11 = 0;
  uint64_t v12 = v9;
  sub_1A8DE97C0();
  sub_1A8D96AEC(v8, &v12, &v11);
  swift_bridgeObjectRelease();
  sub_1A8DE97C0();
  sub_1A8DE9650();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A8DE9680();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t HashedAuthenticationCode.withUnsafeBytes<A>(_:)()
{
  return sub_1A8DE9390();
}

uint64_t HashedAuthenticationCode.hash(into:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(swift_getAssociatedConformanceWitness() + 24);

  return MEMORY[0x1F41835C8](a1, AssociatedTypeWitness, v3);
}

uint64_t HashedAuthenticationCode.hashValue.getter()
{
  sub_1A8DE9BD0();
  HashedAuthenticationCode.hash(into:)((uint64_t)v1);
  return sub_1A8DE9C20();
}

uint64_t sub_1A8D9608C()
{
  return sub_1A8D96C3C();
}

uint64_t sub_1A8D960A0()
{
  sub_1A8DE9BD0();
  HashedAuthenticationCode.hash(into:)((uint64_t)v1);
  return sub_1A8DE9C20();
}

uint64_t sub_1A8D960E4()
{
  return HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
}

uint64_t sub_1A8D9610C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  swift_getWitnessTable();
  uint64_t v5 = MessageAuthenticationCode.makeIterator()();
  uint64_t v7 = v6;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v2, a1);
  *a2 = v5;
  a2[1] = v7;
  return result;
}

uint64_t sub_1A8D961A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1A8D96804(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v2, a1);
  return v4;
}

uint64_t sub_1A8D96214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static MessageAuthenticationCode.== infix(_:_:)(a1, a2, a3, WitnessTable);
}

uint64_t type metadata accessor for HMAC()
{
  return __swift_instantiateGenericMetadata();
}

char *sub_1A8D96298(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1A8D96384()
{
  return sub_1A8D95A08();
}

uint64_t sub_1A8D963A8(uint64_t a1, uint64_t a2)
{
  return sub_1A8D95B50(a1, a2, v2[4], v2[2], v2[3]);
}

char *sub_1A8D963C8(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1A8D963E0(a1, a2, a3, a4, &qword_1EB476758);
}

char *sub_1A8D963D4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1A8D963E0(a1, a2, a3, a4, &qword_1EB476760);
}

char *sub_1A8D963E0(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    size_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1A8D964D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A9008);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A8D965DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476768);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A8D966F8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

char *sub_1A8D967E4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1A8D966F8(a1, a2, a3, *v3);
  unsigned char *v3 = result;
  return result;
}

uint64_t sub_1A8D96808(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v6 = (a4 >> 1) - a3;
  if (a4 >> 1 != a3)
  {
    if ((uint64_t)(a4 >> 1) > a3)
    {
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v12 = *a6;
      uint64_t v13 = (unsigned __int8 *)(a2 + a3);
      while (v12 + 0x4000000000000000 >= 0)
      {
        unsigned int v15 = *v13++;
        char v14 = v15;
        int v16 = (v15 >> 4) + 87;
        int v17 = (v15 >> 4) | 0x30;
        if (v15 <= 0x9F) {
          char v18 = v17;
        }
        else {
          char v18 = v16;
        }
        uint64_t v19 = *a5;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        *a5 = v19;
        if (result)
        {
          unint64_t v20 = 2 * v12;
          if (2 * v12 < 0) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t result = (uint64_t)sub_1A8DAF578(v19);
          uint64_t v19 = result;
          unint64_t v20 = 2 * v12;
          if (2 * v12 < 0)
          {
LABEL_20:
            __break(1u);
            return swift_unknownObjectRelease();
          }
        }
        unint64_t v21 = *(void *)(v19 + 16);
        if (v20 >= v21) {
          goto LABEL_24;
        }
        *(unsigned char *)(v19 + 32 + v20) = v18;
        uint64_t v22 = *a6;
        if (*a6 + 0x4000000000000000 < 0) {
          goto LABEL_25;
        }
        if (v22 < 0) {
          goto LABEL_26;
        }
        uint64_t v23 = (2 * v22) | 1;
        if (v23 >= (uint64_t)v21) {
          goto LABEL_26;
        }
        if ((v14 & 0xFu) <= 9) {
          char v24 = v14 & 0xF | 0x30;
        }
        else {
          char v24 = (v14 & 0xF) + 87;
        }
        *(unsigned char *)(v19 + 32 + v23) = v24;
        *a5 = v19;
        uint64_t v12 = v22 + 1;
        *a6 = v22 + 1;
        if (!--v6) {
          return swift_unknownObjectRelease();
        }
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8D96960(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = (void *)(a1 + 16);
  swift_retain();
  uint64_t result = swift_beginAccess();
  uint64_t v20 = a1;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = 32;
  while (1)
  {
    if (v9 - 32 == v8) {
      return swift_release();
    }
    uint64_t v10 = v9 - 31;
    if (__OFADD__(v9 - 32, 1)) {
      break;
    }
    uint64_t v11 = *a3;
    if (*a3 + 0x4000000000000000 < 0) {
      goto LABEL_24;
    }
    unsigned int v12 = *(unsigned __int8 *)(v20 + v9);
    if (v12 <= 0x9F) {
      char v13 = (*(unsigned char *)(v20 + v9) >> 4) | 0x30;
    }
    else {
      char v13 = (*(unsigned char *)(v20 + v9) >> 4) + 87;
    }
    uint64_t v14 = *a2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v14;
    if (result)
    {
      unint64_t v15 = 2 * v11;
      if (2 * v11 < 0) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t result = (uint64_t)sub_1A8DAF578(v14);
      uint64_t v14 = result;
      unint64_t v15 = 2 * v11;
      if (2 * v11 < 0)
      {
LABEL_21:
        __break(1u);
        return swift_release();
      }
    }
    unint64_t v16 = *(void *)(v14 + 16);
    if (v15 >= v16) {
      goto LABEL_25;
    }
    *(unsigned char *)(v14 + 32 + v15) = v13;
    uint64_t v17 = *a3;
    if (*a3 + 0x4000000000000000 < 0) {
      goto LABEL_26;
    }
    if (v17 < 0) {
      goto LABEL_27;
    }
    uint64_t v18 = (2 * v17) | 1;
    if (v18 >= (uint64_t)v16) {
      goto LABEL_27;
    }
    if ((v12 & 0xF) <= 9) {
      char v19 = v12 & 0xF | 0x30;
    }
    else {
      char v19 = (v12 & 0xF) + 87;
    }
    *(unsigned char *)(v14 + 32 + v18) = v19;
    *a2 = v14;
    *a3 = v17 + 1;
    uint64_t v8 = *v6;
    ++v9;
    if (__OFSUB__(*v6, v10)) {
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A8D96AEC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v16 = *(void *)(result + 16);
  if (v16)
  {
    uint64_t v5 = result;
    uint64_t result = sub_1A8DE97C0();
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    while (v7 + 0x4000000000000000 >= 0)
    {
      unsigned int v8 = *(unsigned __int8 *)(v5 + v6 + 32);
      if (v8 <= 0x9F) {
        char v9 = (*(unsigned char *)(v5 + v6 + 32) >> 4) | 0x30;
      }
      else {
        char v9 = (*(unsigned char *)(v5 + v6 + 32) >> 4) + 87;
      }
      uint64_t v10 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v10;
      if (result)
      {
        unint64_t v11 = 2 * v7;
        if (2 * v7 < 0) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t result = (uint64_t)sub_1A8DAF578(v10);
        uint64_t v10 = result;
        unint64_t v11 = 2 * v7;
        if (2 * v7 < 0)
        {
LABEL_19:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      unint64_t v12 = *(void *)(v10 + 16);
      if (v11 >= v12) {
        goto LABEL_23;
      }
      *(unsigned char *)(v10 + 32 + v11) = v9;
      uint64_t v13 = *a3;
      if (*a3 + 0x4000000000000000 < 0) {
        goto LABEL_24;
      }
      if (v13 < 0) {
        goto LABEL_25;
      }
      uint64_t v14 = (2 * v13) | 1;
      if (v14 >= (uint64_t)v12) {
        goto LABEL_25;
      }
      ++v6;
      if ((v8 & 0xF) <= 9) {
        char v15 = v8 & 0xF | 0x30;
      }
      else {
        char v15 = (v8 & 0xF) + 87;
      }
      *(unsigned char *)(v10 + 32 + v14) = v15;
      *a2 = v10;
      uint64_t v7 = v13 + 1;
      *a3 = v13 + 1;
      if (v16 == v6) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8D96C3C()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t sub_1A8D96CC8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A8D96CE4(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  a1[3] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[4] = result;
  return result;
}

uint64_t sub_1A8D96D84()
{
  return swift_getWitnessTable();
}

uint64_t sub_1A8D96DA0()
{
  return sub_1A8D935E0((unint64_t *)&qword_1EB476790, &qword_1EB476938);
}

uint64_t sub_1A8D96DDC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A8D96E6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    char v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, v5);
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
  }
  return v4;
}

uint64_t sub_1A8D96F78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8) + 8;
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))v6;
  (*(void (**)(uint64_t, uint64_t))v6)(a1, v3);
  unint64_t v4 = (*(void *)(v6 + 56) + a1 + *(unsigned __int8 *)(v6 + 72)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 72);

  return v7(v4, v3);
}

unint64_t sub_1A8D97014(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = v6 + 16;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 48) + *(unsigned __int8 *)(v8 + 64) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64), (*(void *)(v8 + 48) + *(unsigned __int8 *)(v8 + 64) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64), v5);
  return a1;
}

unint64_t sub_1A8D970A8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  uint64_t v8 = v6 + 24;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 40) + *(unsigned __int8 *)(v8 + 56) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 56), (*(void *)(v8 + 40) + *(unsigned __int8 *)(v8 + 56) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 56), v5);
  return a1;
}

unint64_t sub_1A8D9713C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  uint64_t v8 = v6 + 32;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 32) + *(unsigned __int8 *)(v8 + 48) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 48), (*(void *)(v8 + 32) + *(unsigned __int8 *)(v8 + 48) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 48), v5);
  return a1;
}

unint64_t sub_1A8D971D0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  uint64_t v8 = v6 + 40;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 24) + *(unsigned __int8 *)(v8 + 40) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 40), (*(void *)(v8 + 24) + *(unsigned __int8 *)(v8 + 40) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 40), v5);
  return a1;
}

uint64_t sub_1A8D97264(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v8 = ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v6;
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void sub_1A8D973D0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1A8D975F8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_1A8D97620()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A8D976C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1A8D9779C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t sub_1A8D97818(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1A8D97890(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1A8D97908(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1A8D97980(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1A8D979F8(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        int v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void sub_1A8D97BA8(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1A8D97DE4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t sub_1A8D97E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HMAC();
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v4 + 24) + 40))(a1, a2, *(void *)(v4 + 16));
}

uint64_t sub_1A8D97E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  return sub_1A8D9510C(a1, a2, *(char ***)(v3 + 16), a3);
}

uint64_t type metadata accessor for SecureBytes.Backing()
{
  uint64_t result = qword_1EB476958;
  if (!qword_1EB476958) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1A8D97EE4()
{
  return swift_initClassMetadata2();
}

size_t sub_1A8D97F24(int64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (char *)*v2;
  size_t result = _swift_stdlib_malloc_size(*v2);
  if ((uint64_t)(result - 32) < a1)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (!HIDWORD(a1))
    {
      if (a1)
      {
        unsigned int v6 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
        unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
        int v8 = v7 | HIWORD(v7);
        if (v8 == -1) {
          uint64_t v9 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v9 = (v8 + 1);
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      type metadata accessor for SecureBytes.Backing();
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + 24) = v9;
      size_t result = swift_beginAccess();
      uint64_t v11 = *((void *)v4 + 2);
      if ((v11 & 0x8000000000000000) == 0)
      {
        sub_1A8D98CE8(v4, 0, v11);
        size_t result = swift_release();
        *uint64_t v2 = (const void *)v10;
        return result;
      }
LABEL_14:
      __break(1u);
      return result;
    }
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1A8D98010(uint64_t result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = (void *)result;
  if (!a2)
  {
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  uint64_t v6 = a3;
  if (!a3)
  {
LABEL_14:
    *unsigned int v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    size_t result = swift_beginAccess();
    uint64_t v8 = *(void *)(a4 + 16);
    if (v8)
    {
      *a2 = *(unsigned char *)(a4 + 32);
      uint64_t v9 = v6 - 1;
      if (v6 != 1)
      {
        uint64_t v10 = 0;
        while (v9 != v10)
        {
          if (__OFSUB__(v8, v10 + 1)) {
            goto LABEL_16;
          }
          if (v8 - 1 == v10) {
            goto LABEL_13;
          }
          a2[v10 + 1] = *(unsigned char *)(a4 + 33 + v10);
          if (v9 == ++v10) {
            goto LABEL_14;
          }
        }
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
LABEL_13:
      uint64_t v6 = v8;
    }
    goto LABEL_14;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1A8D980E8()
{
  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  off_1EB476770 = (_UNKNOWN *)result;
  return result;
}

uint64_t sub_1A8D9811C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7 = sub_1A8DBB02C(a3, a1, a2);
  uint64_t v9 = v8 + v7;
  uint64_t v11 = v8 + v10;
  if (!v8)
  {
    uint64_t v11 = 0;
    uint64_t v9 = 0;
  }
  v17[0] = v9;
  v17[1] = v11;
  swift_beginAccess();
  sub_1A8DCF3E8(a5 + 32, v17, v16);
  int v12 = v16[0];
  if (v16[0])
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = v12;
    *(unsigned char *)(v13 + 4) = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    uint64_t v15 = *a4;
    swift_beginAccess();
    *(void *)(v15 + 16) = 32;
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1A8D98244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7 = sub_1A8DBB02C(a3, a1, a2);
  uint64_t v9 = v8 + v7;
  uint64_t v11 = v8 + v10;
  if (!v8)
  {
    uint64_t v11 = 0;
    uint64_t v9 = 0;
  }
  v15[0] = v9;
  v15[1] = v11;
  swift_beginAccess();
  uint64_t result = sub_1A8DBAC44(a5 + 32, v15, v14);
  if (v14[0])
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = *a4;
    swift_beginAccess();
    *(void *)(v13 + 16) = 56;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A8D98324(const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  uint64_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v25 = a3;
  uint64_t v18 = (uint64_t)a1 + 32;
  uint64_t v19 = (uint64_t)a1 + result;
  uint64_t v20 = result - 32;
  uint64_t result = sub_1A8DBD8C8(0, a2, result - 32, v18, v19);
  if (v21) {
    uint64_t v22 = v20;
  }
  else {
    uint64_t v22 = result;
  }
  if (v22 < 0) {
    goto LABEL_10;
  }
  v26[0] = v18;
  v26[1] = v18 + v22;
  uint64_t v27 = 0;
  sub_1A8D9B500(v26, &v27, a4, a5, a6, a7, a8);
  if (!v8)
  {
    uint64_t v23 = *v25;
    uint64_t v24 = v27;
    swift_beginAccess();
    *(void *)(v23 + 16) = v24;
  }
  return sub_1A8D8BD58(a4, a5);
}

uint64_t sub_1A8D98438(const void *a1, uint64_t a2, uint64_t *a3)
{
  size_t v6 = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v7 = (uint64_t)a1 + 32;
  uint64_t v8 = (uint64_t)a1 + v6;
  size_t v9 = v6 - 32;
  uint64_t v10 = sub_1A8DBD8C8(0, a2, v6 - 32, v7, v8);
  if (v11) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12 < 0) {
    goto LABEL_10;
  }
  if (!ccrng()) {
    goto LABEL_12;
  }
  if (cccurve25519_make_priv())
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  uint64_t v13 = *a3;
  uint64_t result = swift_beginAccess();
  *(void *)(v13 + 16) = 32;
  return result;
}

size_t sub_1A8D98538(const void *a1, uint64_t a2, uint64_t *a3, char a4, uint64_t a5, uint64_t (*a6)(void))
{
  size_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v14 = (uint64_t)a1 + 32;
  uint64_t v15 = (uint64_t)a1 + result;
  size_t v16 = result - 32;
  size_t result = sub_1A8DBD8C8(0, a2, result - 32, v14, v15);
  if (v17) {
    size_t v18 = v16;
  }
  else {
    size_t v18 = result;
  }
  if ((v18 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  v22[0] = v14;
  v22[1] = v14 + v18;
  uint64_t v21 = 0;
  size_t result = (size_t)sub_1A8D9B36C(v22, &v21, a4 & 1, a5, a6);
  if (!v6)
  {
    uint64_t v19 = *a3;
    uint64_t v20 = v21;
    size_t result = swift_beginAccess();
    *(void *)(v19 + 16) = v20;
  }
  return result;
}

uint64_t sub_1A8D98620(const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  size_t v11 = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    __break(1u);
LABEL_12:
    __break(1u);
  }
  uint64_t v12 = (uint64_t)a1 + 32;
  uint64_t v13 = (uint64_t)a1 + v11;
  size_t v14 = v11 - 32;
  uint64_t v15 = sub_1A8DBD8C8(0, a2, v11 - 32, v12, v13);
  if (v16) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v17 = v15;
  }
  if (v17 < 0) {
    goto LABEL_11;
  }
  if (!ccrng()) {
    goto LABEL_12;
  }
  int v18 = ccecdh_compute_shared_secret();
  if (v18)
  {
    int v19 = v18;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v20 = v19;
    *(unsigned char *)(v20 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    uint64_t v22 = *a3;
    uint64_t result = swift_beginAccess();
    *(void *)(v22 + 16) = a7;
  }
  return result;
}

uint64_t sub_1A8D98780(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = &a1[_swift_stdlib_malloc_size(a1)];
  swift_retain();
  sub_1A8DE97C0();
  a6(a1 + 32, v12, a2, a3, a4, a5);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1A8D98830(const void *a1, uint64_t a2, uint64_t *a3)
{
  size_t v6 = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v7 = (uint64_t)a1 + 32;
  uint64_t v8 = (uint64_t)a1 + v6;
  size_t v9 = v6 - 32;
  uint64_t v10 = sub_1A8DBD8C8(0, a2, v6 - 32, v7, v8);
  if (v11) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12 < 0) {
    goto LABEL_10;
  }
  if (!ccrng()) {
    goto LABEL_12;
  }
  if (cccurve448_make_priv())
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  uint64_t v13 = *a3;
  uint64_t result = swift_beginAccess();
  *(void *)(v13 + 16) = 56;
  return result;
}

uint64_t sub_1A8D98930(const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(void *, uint64_t *, uint64_t))
{
  uint64_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v12 = (uint64_t)a1 + 32;
  uint64_t v13 = (uint64_t)a1 + result;
  uint64_t v14 = result - 32;
  uint64_t result = sub_1A8DBD8C8(0, a2, result - 32, v12, v13);
  if (v15) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = result;
  }
  if (v16 < 0) {
    goto LABEL_10;
  }
  v19[0] = v12;
  v19[1] = v12 + v16;
  uint64_t v20 = 0;
  uint64_t result = a5(v19, &v20, a4);
  if (!v5)
  {
    uint64_t v17 = *a3;
    uint64_t v18 = v20;
    uint64_t result = swift_beginAccess();
    *(void *)(v17 + 16) = v18;
  }
  return result;
}

uint64_t sub_1A8D98A10(const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7)
{
  uint64_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = (uint64_t)a1 + 32;
    uint64_t v15 = (uint64_t)a1 + result;
    uint64_t v16 = result - 32;
    uint64_t result = sub_1A8DBD8C8(0, a2, result - 32, v14, v15);
    if (v17) {
      uint64_t v18 = v16;
    }
    else {
      uint64_t v18 = result;
    }
    if ((v18 & 0x8000000000000000) == 0)
    {
      swift_retain();
      init_ccec_ctx_full();
      swift_beginAccess();
      sub_1A8DCDCE8(a5 + 32, a5 + 32 + *(void *)(a5 + 16), a6);
      uint64_t v19 = *a3;
      swift_beginAccess();
      *(void *)(v19 + 16) = a7;
      return swift_release_n();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8D98B28(const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v12 = (uint64_t)a1 + 32;
  uint64_t v13 = (uint64_t)a1 + result;
  uint64_t v14 = result - 32;
  uint64_t result = sub_1A8DBD8C8(0, a2, result - 32, v12, v13);
  if (v15) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = result;
  }
  if (v16 < 0) {
    goto LABEL_10;
  }
  uint64_t result = a6();
  if (result)
  {
    cckem_full_ctx_init();
    uint64_t result = cckem_generate_key();
    if (!result)
    {
      uint64_t v17 = *a3;
      uint64_t result = swift_beginAccess();
      *(void *)(v17 + 16) = a5;
      return result;
    }
    goto LABEL_11;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1A8D98C0C(const void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t *), uint64_t a4, uint64_t *a5)
{
  uint64_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v11 = (uint64_t)a1 + 32;
  uint64_t v12 = (uint64_t)a1 + result;
  uint64_t v13 = result - 32;
  uint64_t result = sub_1A8DBD8C8(0, a2, result - 32, v11, v12);
  if (v14) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = result;
  }
  if (v15 < 0) {
    goto LABEL_10;
  }
  v18[0] = v11;
  v18[1] = v11 + v15;
  uint64_t v19 = 0;
  uint64_t result = a3(v18, &v19);
  if (!v5)
  {
    uint64_t v16 = *a5;
    uint64_t v17 = v19;
    uint64_t result = swift_beginAccess();
    *(void *)(v16 + 16) = v17;
  }
  return result;
}

char *sub_1A8D98CE8(char *result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v4 = v3;
  uint64_t v7 = result;
  uint64_t result = (char *)_swift_stdlib_malloc_size(result);
  if ((uint64_t)(result - 32) < a3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  size_t v8 = _swift_stdlib_malloc_size(v4) - 32;
  size_t v9 = v4 + 2;
  uint64_t result = (char *)swift_beginAccess();
  uint64_t v10 = v4[2];
  size_t v11 = v8 - v10;
  if (__OFSUB__(v8, v10))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  BOOL v12 = __OFSUB__(a3, a2);
  size_t v13 = a3 - a2;
  if (v12)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  BOOL v12 = __OFSUB__(v11, v13);
  size_t v14 = v11 - v13;
  if (v12)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t result = (char *)_swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = (char *)memmove((char *)v4 + v10 + 32, &v7[a2 + 32], v13);
  size_t v15 = *v9 + v13;
  if (!__OFADD__(*v9, v13))
  {
    uint64_t result = (char *)swift_beginAccess();
    void *v9 = v15;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

size_t sub_1A8D98DFC()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_1A8DE9840();
  size_t v3 = _swift_stdlib_malloc_size(v1) - 32;
  size_t result = swift_beginAccess();
  int64_t v5 = v1[2];
  size_t v6 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
    __break(1u);
    goto LABEL_8;
  }
  BOOL v7 = __OFSUB__(v6, v2);
  size_t v8 = v6 - v2;
  if (v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  size_t result = _swift_stdlib_malloc_size(v1);
  if ((uint64_t)(result - 32) < v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  size_t result = sub_1A8DE9990();
  uint64_t v9 = v1[2];
  BOOL v7 = __OFADD__(v9, v2);
  uint64_t v10 = v9 + v2;
  if (!v7)
  {
    v1[2] = v10;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1A8D98EEC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return sub_1A8DB87B8(v2 + 32, v2 + 32 + *(void *)(v2 + 16), v3) & 1;
}

void sub_1A8D98F50(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1A8D98F58@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *a1 = *(void *)(v3 + 16);
  return result;
}

uint64_t (*sub_1A8D98FA0(unsigned char *a1, void *a2))()
{
  *a1 = *(unsigned char *)(*v2 + *a2 + 32);
  return nullsub_1;
}

uint64_t sub_1A8D98FD8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = *v2;
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *(void *)(v6 + 16);
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v8 >= v4)
  {
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v6;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1A8D99054@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v5;
  }
  return result;
}

BOOL sub_1A8D990A4()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(v1 + 16) == 0;
}

uint64_t *sub_1A8D990F8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *sub_1A8D99114(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_1A8D99130(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *sub_1A8D9914C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *sub_1A8D99164(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

void sub_1A8D9917C(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_1A8D99188()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(v1 + 16);
}

uint64_t sub_1A8D991C8()
{
  uint64_t v1 = sub_1A8D9BB14(*v0);
  swift_release();
  return v1;
}

uint64_t sub_1A8D99200(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  return sub_1A8D98010(a1, a2, a3, *v3);
}

uint64_t sub_1A8D99208@<X0>(uint64_t (*a1)(uint64_t, void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1A8D99228(a1, a2, a3);
}

uint64_t sub_1A8D99228@<X0>(uint64_t (*a1)(uint64_t, void)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_1A8D9A400(a1, a2, a3);
}

void *sub_1A8D99250@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1;
  }
  return result;
}

void *sub_1A8D99268(void *result)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

void *sub_1A8D99280@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *v3;
    uint64_t result = (void *)swift_beginAccess();
    if ((v5 & 0x8000000000000000) == 0 && *(void *)(v6 + 16) >= v5)
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8D992F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_1A8DAD870(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t sub_1A8D9932C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *v2;
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7 >= v4 && ((v4 | v3) & 0x8000000000000000) == 0 && v7 >= v3) {
    return v4 - v3;
  }
  __break(1u);
  return result;
}

unsigned char *sub_1A8D9939C(unsigned char *result, void *a2)
{
  *(unsigned char *)(*v2 + *a2 + 32) = *result;
  return result;
}

uint64_t (*sub_1A8D993B4(uint64_t a1, uint64_t *a2))(uint64_t result)
{
  uint64_t v3 = *a2;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(*v2 + v3 + 32);
  return sub_1A8D993EC;
}

uint64_t sub_1A8D993EC(uint64_t result)
{
  *(unsigned char *)(**(void **)result + *(void *)(result + 8) + 32) = *(unsigned char *)(result + 16);
  return result;
}

uint64_t sub_1A8D99404(uint64_t *a1, uint64_t *a2)
{
  sub_1A8D9B96C(v2, *a2, a2[1], *a1, a1[1], a1[2]);

  return swift_release();
}

void (*sub_1A8D99450(void *a1, uint64_t *a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_1A8D994F8(v4, *a2, a2[1]);
  return sub_1A8D994B0;
}

void sub_1A8D994B0(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_1A8D994F8(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1)
{
  uint64_t v7 = malloc(0x48uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  uint64_t v8 = *v3;
  uint64_t result = (void (*)(uint64_t **))swift_beginAccess();
  uint64_t v10 = *(void *)(v8 + 16);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v10 >= a3)
  {
    *uint64_t v7 = a2;
    v7[1] = a3;
    void v7[2] = v8;
    swift_retain();
    return sub_1A8D995B0;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_1A8D995B0(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_1A8D9B96C((uint64_t *)(*a1)[8], v1[6], (*a1)[7], *v1, v1[1], v1[2]);
  swift_release();

  free(v1);
}

uint64_t sub_1A8D99600@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1A8D9BBF0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void *sub_1A8D9962C(void *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v4 = *a2;
  if (__OFSUB__(*a2, *result))
  {
    __break(1u);
  }
  else if (*a2 != *result)
  {
    uint64_t v5 = *v2 + 32;
    char v6 = *(unsigned char *)(v5 + v3);
    *(unsigned char *)(v5 + v3) = *(unsigned char *)(v5 + v4);
    *(unsigned char *)(v5 + v4) = v6;
  }
  return result;
}

uint64_t sub_1A8D99660()
{
  return sub_1A8DE9610();
}

uint64_t sub_1A8D99684()
{
  return sub_1A8DE9600();
}

uint64_t sub_1A8D996A8(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = (char *)*v4 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  int64_t v13 = *v10 - v12;
  if (__OFSUB__(*v10, v12))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t result = sub_1A8DE9840();
  BOOL v14 = __OFADD__(v13, result);
  uint64_t v15 = v13 + result;
  if (v14)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v5);
    if (result - 32 >= v15)
    {
      if (a2 >= a1) {
        return sub_1A8D99878(a1, a2, a3, a4);
      }
      goto LABEL_26;
    }
  }
  if (v15 < 0) {
    goto LABEL_22;
  }
  if (HIDWORD(v15))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v15)
  {
    unsigned int v16 = (v15 - 1) | ((v15 - 1) >> 1) | (((v15 - 1) | ((v15 - 1) >> 1)) >> 2);
    unsigned int v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
    int v18 = v17 | HIWORD(v17);
    if (v18 == -1) {
      uint64_t v19 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v19 = (v18 + 1);
    }
  }
  else
  {
    uint64_t v19 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v19;
  if (a1 < 0) {
    goto LABEL_24;
  }
  uint64_t v20 = (const void *)result;
  uint64_t v21 = (char *)*v5;
  uint64_t result = swift_beginAccess();
  uint64_t v22 = *((void *)v21 + 2);
  if (v22 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  sub_1A8D98CE8(v21, 0, a1);
  sub_1A8D98DFC();
  sub_1A8D98CE8((char *)*v5, a2, v22);
  *uint64_t v5 = v20;
  return swift_release();
}

uint64_t sub_1A8D99878(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  int64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v14);
  uint64_t v15 = v5 + 2;
  uint64_t result = swift_beginAccess();
  int64_t v17 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }
  int64_t v27 = a2;
  int64_t v18 = *v15 - v17;
  if (__OFSUB__(*v15, v17))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = sub_1A8DE9840();
  BOOL v19 = __OFADD__(v18, result);
  int64_t v20 = v18 + result;
  if (v19)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v26 = a1;
  int64_t v21 = _swift_stdlib_malloc_size(v5) - 32;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a4);
  if (v21 < v20)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = sub_1A8DE9840();
  uint64_t v22 = result - v17;
  if (__OFSUB__(result, v17))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = v27;
  if (*v15 < v27)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_1A8D9A960(v27, *v15, v22);
  sub_1A8D9AA28(a3, v26, a4);
  uint64_t result = sub_1A8DE9840();
  uint64_t v23 = result - v17;
  if (__OFSUB__(result, v17))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  BOOL v19 = __OFADD__(*v15, v23);
  int64_t v24 = *v15 + v23;
  if (!v19)
  {
    *uint64_t v15 = v24;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1A8D99A60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int64_t v12 = &v16[-v11];
  int64_t v17 = v3;
  uint64_t result = sub_1A8DE9740();
  if (v18 == 1)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    sub_1A8DE9730();
    swift_getAssociatedConformanceWitness();
    sub_1A8DE9980();
    if ((v20 & 1) == 0)
    {
      size_t v14 = v19;
      do
      {
        uint64_t v15 = *v3;
        swift_beginAccess();
        sub_1A8DD0D00(*(void *)(v15 + 16), *(void *)(v15 + 16), v14);
        sub_1A8DE9980();
        size_t v14 = v19;
      }
      while (v20 != 1);
    }
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_1A8D99CD0@<X0>(void *a1@<X8>)
{
  if (qword_1EB476778 != -1) {
    swift_once();
  }
  *a1 = off_1EB476770;

  return swift_retain();
}

uint64_t sub_1A8D99D3C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_1A8D996A8(*a1, a1[1], a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v5(a2, a3);
}

void *sub_1A8D99DC0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_1A8D9CB2C(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A8D99DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184548](a1, a4, a2, a5, a3);
}

uint64_t sub_1A8D99E04(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  size_t v3 = *a1;
  swift_beginAccess();
  return sub_1A8DD0D00(*(void *)(v2 + 16), *(void *)(v2 + 16), v3);
}

uint64_t sub_1A8D99E60(uint64_t a1, uint64_t a2)
{
  sub_1A8D99A60(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);

  return v4(a1, a2);
}

uint64_t sub_1A8D99ECC(unsigned __int8 *a1, int64_t *a2)
{
  return sub_1A8DD0D00(*a2, *a2, *a1);
}

uint64_t sub_1A8D99EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F4184510](a1, a2, a5, a3, a6, a4);
}

uint64_t sub_1A8D99EF4@<X0>(int64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  int64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(v5 + 16))
  {
    __break(1u);
    goto LABEL_6;
  }
  int64_t v7 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v7 >= v4)
  {
    char v8 = *(unsigned char *)(v5 + v4 + 32);
    uint64_t result = sub_1A8DD3E48(v4, v7);
    *a2 = v8;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1A8D99F78(int64_t *a1)
{
  return sub_1A8DD3E48(*a1, a1[1]);
}

void sub_1A8D99F84(_WORD *a1@<X8>)
{
  *a1 = 256;
}

uint64_t sub_1A8D99F90()
{
  return 0;
}

int64_t sub_1A8D99F98@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 16);
  if (!v5)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  char v6 = *(unsigned char *)(v3 + 32);
  int64_t result = sub_1A8DAD870(0, 1, v5, v3);
  if ((v7 & 1) == 0)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      int64_t result = sub_1A8DD3E48(0, result);
      *a1 = v6;
      return result;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

int64_t sub_1A8D9A024(int64_t result)
{
  if (result)
  {
    uint64_t v2 = result;
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = *v1;
      swift_beginAccess();
      int64_t result = sub_1A8DAD870(0, v2, *(void *)(v3 + 16), v3);
      if (v4)
      {
LABEL_9:
        __break(1u);
        return result;
      }
      if ((result & 0x8000000000000000) == 0) {
        return sub_1A8DD3E48(0, result);
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1A8D9A0AC(char a1)
{
  uint64_t v2 = *v1;
  if (a1)
  {
    swift_beginAccess();
    int64_t v3 = *(void *)(v2 + 16);
    if ((v3 & 0x8000000000000000) == 0) {
      return sub_1A8DD3E48(0, v3);
    }
    __break(1u);
    goto LABEL_9;
  }
  swift_release();
  if (qword_1EB476778 != -1) {
LABEL_9:
  }
    swift_once();
  *uint64_t v1 = (uint64_t)off_1EB476770;

  return swift_retain();
}

uint64_t sub_1A8D9A164(uint64_t (*a1)(char *))
{
  return sub_1A8D9A17C(a1);
}

uint64_t sub_1A8D9A17C(uint64_t (*a1)(char *))
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)(*v1 + 16);
  swift_retain();
  uint64_t result = swift_beginAccess();
  int64_t v7 = 0;
  uint64_t v8 = v4 + 32;
  do
  {
    if (__OFSUB__(*v5, v7))
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v7 == *v5) {
      goto LABEL_9;
    }
    char v12 = *(unsigned char *)(v4 + v7 + 32);
    uint64_t result = a1(&v12);
    if (v2) {
      return swift_release();
    }
    if (result)
    {
      uint64_t result = swift_release();
      int64_t v10 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_14;
      }
      while (!__OFSUB__(*v5, v10))
      {
        if (*v5 == v10)
        {
          if (v10 < v7) {
            goto LABEL_29;
          }
          return sub_1A8DD3E48(v7, v10);
        }
        char v12 = *(unsigned char *)(v8 + v10);
        uint64_t result = a1(&v12);
        if ((result & 1) == 0)
        {
          if (__OFSUB__(v10, v7)) {
            goto LABEL_28;
          }
          if (v10 != v7)
          {
            char v11 = *(unsigned char *)(v8 + v7);
            *(unsigned char *)(v8 + v7) = *(unsigned char *)(v8 + v10);
            *(unsigned char *)(v8 + v10) = v11;
          }
LABEL_14:
          BOOL v9 = __OFADD__(v7++, 1);
          if (v9) {
            goto LABEL_27;
          }
        }
        BOOL v9 = __OFADD__(v10++, 1);
        if (v9) {
          goto LABEL_26;
        }
      }
      goto LABEL_25;
    }
    BOOL v9 = __OFADD__(v7++, 1);
  }
  while (!v9);
  __break(1u);
LABEL_9:
  swift_release();
  int64_t v10 = *(void *)(v4 + 16);
  int64_t v7 = v10;
  return sub_1A8DD3E48(v7, v10);
}

uint64_t sub_1A8D9A30C(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3 + 32, a3 + 32 + *(void *)(a3 + 16));
}

uint64_t sub_1A8D9A388(uint64_t (*a1)(uint64_t, uint64_t))
{
  swift_beginAccess();
  return a1(v1 + 32, v1 + 32 + *(void *)(v1 + 16));
}

uint64_t sub_1A8D9A400@<X0>(uint64_t (*a1)(uint64_t, void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  swift_beginAccess();
  uint64_t result = a1(v3 + 32, *(void *)(v3 + 16));
  if (!v4) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 0, 1, a2);
  }
  return result;
}

uint64_t sub_1A8D9A4BC(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return sub_1A8D9A30C(a1, a2, *v2);
}

uint64_t sub_1A8D9A4D8@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t sub_1A8D9A4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MEMORY[0x1F40E3440](a1, a2, a7, a3, a4, a8, a5, a6);
}

uint64_t sub_1A8D9A508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MEMORY[0x1F40E3478](a1, a2, a7, a3, a4, a8, a5, a6);
}

uint64_t sub_1A8D9A530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40E3458](a1, a2, a3, a5, a4);
}

uint64_t sub_1A8D9A540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return MEMORY[0x1F40E3450](a1, a2, a3, a6, a4, a7, a5);
}

uint64_t sub_1A8D9A558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MEMORY[0x1F40E3448](a1, a2, a3, a7, a4, a5, a8, a6);
}

uint64_t sub_1A8D9A574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40E41C8](a1, a4, a2, a5, a3);
}

uint64_t sub_1A8D9A58C()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8D9A5D4()
{
  return sub_1A8DE9BF0();
}

uint64_t sub_1A8D9A600()
{
  return sub_1A8DE9C20();
}

void *sub_1A8D9A644(void *result, void *a2)
{
  if (!__OFSUB__(*a2, *result)) {
    return (void *)(*a2 == *result);
  }
  __break(1u);
  return result;
}

BOOL sub_1A8D9A660(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_1A8D9A674(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1A8D9A688(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1A8D9A69C(void *a1, void *a2)
{
  return *a2 < *a1;
}

void *sub_1A8D9A6B0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, *v2)) {
    __break(1u);
  }
  else {
    *a2 = *result - *v2;
  }
  return result;
}

void *sub_1A8D9A6CC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*v2, *result)) {
    __break(1u);
  }
  else {
    *a2 = *v2 + *result;
  }
  return result;
}

void *sub_1A8D9A6E8(void *result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  if (__OFADD__(*a4, *a6))
  {
    __break(1u);
  }
  else
  {
    *uint64_t result = *a4 + *a6;
    return 0;
  }
  return result;
}

uint64_t sub_1A8D9A70C()
{
  type metadata accessor for SecureBytes.Backing();
  sub_1A8DE9390();
  return v1;
}

size_t sub_1A8D9A780@<X0>(size_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int64_t v4 = a2 - result;
  if (result) {
    size_t v5 = a2 - result;
  }
  else {
    size_t v5 = 0;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (HIDWORD(v5))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  char v6 = (const void *)result;
  if (v5)
  {
    unsigned int v7 = (v5 - 1) | ((v5 - 1) >> 1) | (((v5 - 1) | ((v5 - 1) >> 1)) >> 2);
    unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    int v9 = v8 | HIWORD(v8);
    if (v9 == -1) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = (v9 + 1);
    }
  }
  else
  {
    uint64_t v10 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  char v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = v10;
  _swift_stdlib_malloc_size(v11);
  if (v6) {
    memmove(v11 + 4, v6, v4);
  }
  else {
    int64_t v4 = 0;
  }
  swift_beginAccess();
  v11[2] = v4;
  uint64_t result = _swift_stdlib_malloc_size(v11);
  if ((uint64_t)(result - 32) >= v4)
  {
    *a3 = v11;
    return result;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1A8D9A89C()
{
  swift_beginAccess();
  memset_s((void *)(v0 + 32), *(void *)(v0 + 24), 0, *(void *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t sub_1A8D9A8F0()
{
  return type metadata accessor for SecureBytes.Backing();
}

uint64_t getEnumTagSinglePayload for SecureBytes.BackingHeader(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SecureBytes.BackingHeader(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SecureBytes.BackingHeader()
{
  return &type metadata for SecureBytes.BackingHeader;
}

ValueMetadata *type metadata accessor for SecureBytes()
{
  return &type metadata for SecureBytes;
}

size_t sub_1A8D9A960(size_t result, int64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  int64_t v4 = v3;
  size_t v7 = result;
  uint64_t result = _swift_stdlib_malloc_size(v4);
  uint64_t v8 = v7 + a3;
  if (__OFADD__(v7, a3))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  BOOL v9 = __OFADD__(a2, a3);
  uint64_t v10 = a2 + a3;
  if (v9)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v10 < v8)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v8 < 1 || (uint64_t)(result - 32) < a2) {
    goto LABEL_15;
  }
  uint64_t result = _swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v10)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  _swift_stdlib_malloc_size(v4);

  return (size_t)memmove(&v4[v8 + 32], &v4[v7 + 32], a2 - v7);
}

uint64_t sub_1A8D9AA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t result = MEMORY[0x1F4188790](a1);
  char v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a3);
  uint64_t result = sub_1A8DE9840();
  int64_t v13 = a2 + result;
  if (__OFADD__(a2, result))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  int64_t v14 = _swift_stdlib_malloc_size(v4) - 32;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a3);
  if (v14 < v13)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = sub_1A8DE9840();
  if (__OFADD__(a2, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a2 + result >= a2)
  {
    _swift_stdlib_malloc_size(v4);
    return sub_1A8DE9990();
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1A8D9ABA4(uint64_t (*a1)(uint64_t, uint64_t))
{
  return sub_1A8D9A388(a1);
}

unint64_t sub_1A8D9ABCC()
{
  unint64_t result = qword_1E97A9010;
  if (!qword_1E97A9010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9010);
  }
  return result;
}

unint64_t sub_1A8D9AC24()
{
  unint64_t result = qword_1E97A9018;
  if (!qword_1E97A9018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9018);
  }
  return result;
}

unint64_t sub_1A8D9AC7C()
{
  unint64_t result = qword_1EB4767B8;
  if (!qword_1EB4767B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB4767B8);
  }
  return result;
}

unint64_t sub_1A8D9ACD4()
{
  unint64_t result = qword_1E97A9020;
  if (!qword_1E97A9020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9020);
  }
  return result;
}

unint64_t sub_1A8D9AD2C()
{
  unint64_t result = qword_1EB476780;
  if (!qword_1EB476780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476780);
  }
  return result;
}

unint64_t sub_1A8D9AD84()
{
  unint64_t result = qword_1EB4767D0;
  if (!qword_1EB4767D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB4767D0);
  }
  return result;
}

uint64_t sub_1A8D9ADD8()
{
  return sub_1A8D9B2FC(&qword_1E97A9028, (void (*)(void))sub_1A8D9AD2C);
}

uint64_t sub_1A8D9AE20()
{
  return sub_1A8D9B2FC(&qword_1E97A9030, (void (*)(void))sub_1A8D9ACD4);
}

unint64_t sub_1A8D9AE6C()
{
  unint64_t result = qword_1EB4767C0;
  if (!qword_1EB4767C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB4767C0);
  }
  return result;
}

uint64_t sub_1A8D9AEC0()
{
  return sub_1A8D9B128(&qword_1E97A9038);
}

unint64_t sub_1A8D9AEF4()
{
  unint64_t result = qword_1E97A9048;
  if (!qword_1E97A9048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9048);
  }
  return result;
}

uint64_t sub_1A8D9AF48()
{
  return sub_1A8D9B2FC(&qword_1E97A9050, (void (*)(void))sub_1A8D9AF90);
}

unint64_t sub_1A8D9AF90()
{
  unint64_t result = qword_1EB4767C8;
  if (!qword_1EB4767C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB4767C8);
  }
  return result;
}

uint64_t sub_1A8D9AFE4()
{
  return sub_1A8D9B128(&qword_1E97A9058);
}

uint64_t sub_1A8D9B018()
{
  return sub_1A8D9B2FC(&qword_1E97A9060, (void (*)(void))sub_1A8D9AE6C);
}

uint64_t sub_1A8D9B060()
{
  return sub_1A8D935E0(&qword_1E97A9068, &qword_1E97A9070);
}

unint64_t sub_1A8D9B0A0()
{
  unint64_t result = qword_1EB4767A0;
  if (!qword_1EB4767A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB4767A0);
  }
  return result;
}

uint64_t sub_1A8D9B0F4()
{
  return sub_1A8D9B128(&qword_1E97A9078);
}

uint64_t sub_1A8D9B128(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E97A9040);
    sub_1A8D9AEF4();
    sub_1A8D90BAC();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A8D9B198()
{
  return sub_1A8D935E0(&qword_1E97A9080, &qword_1EB4767B0);
}

uint64_t sub_1A8D9B1D8()
{
  return sub_1A8D935E0(&qword_1EB4767D8, &qword_1EB4767E0);
}

uint64_t sub_1A8D9B214()
{
  return sub_1A8D9B2FC(&qword_1E97A9088, (void (*)(void))sub_1A8D9AC7C);
}

unint64_t sub_1A8D9B260()
{
  unint64_t result = qword_1EB476798;
  if (!qword_1EB476798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476798);
  }
  return result;
}

uint64_t sub_1A8D9B2B4()
{
  return sub_1A8D9B2FC(&qword_1E97A9090, (void (*)(void))sub_1A8D9B260);
}

uint64_t sub_1A8D9B2FC(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB4767B0);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_1A8D9B36C(uint64_t *result, void *a2, char a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = *result;
  if ((a3 & 1) == 0) {
    goto LABEL_7;
  }
  if (!v7)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = (uint64_t *)a5();
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  swift_dynamicCast();
  uint64_t result = (uint64_t *)ccrng();
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t result = (uint64_t *)ccec_compact_generate_key();
  if (!result)
  {
LABEL_11:
    *a2 = a4;
    return result;
  }
  __break(1u);
LABEL_7:
  if (!v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = (uint64_t *)a5();
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  swift_dynamicCast();
  uint64_t result = (uint64_t *)ccrng();
  if (result)
  {
    uint64_t result = (uint64_t *)ccec_generate_key_fips();
    if (result) {
      __break(1u);
    }
    goto LABEL_11;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1A8D9B500(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  v37[2] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a6;
  int64_t v13 = a2;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v27 = (a3 >> 32) - (int)a3;
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
      }
      else
      {
        uint64_t v35 = a2;
        uint64_t v36 = a6;
        sub_1A8D8BE04(a3, a4);
        uint64_t v28 = sub_1A8DE9340();
        if (!v28) {
          goto LABEL_21;
        }
        uint64_t v29 = sub_1A8DE9370();
        if (!__OFSUB__((int)a3, v29))
        {
          v28 += (int)a3 - v29;
LABEL_21:
          uint64_t v30 = sub_1A8DE9360();
          if (v30 >= v27) {
            uint64_t v31 = (a3 >> 32) - (int)a3;
          }
          else {
            uint64_t v31 = v30;
          }
          uint64_t v32 = v28 + v31;
          if (v28) {
            uint64_t v33 = v32;
          }
          else {
            uint64_t v33 = 0;
          }
          sub_1A8D9B7E0(v28, v33, a1, a3, a4, a5, a7);
          if (!v7)
          {
            uint64_t result = sub_1A8D8BD58(a3, a4);
            goto LABEL_29;
          }
LABEL_36:
          sub_1A8D8BD58(a3, a4);
          __break(1u);
          JUMPOUT(0x1A8D9B7D0);
        }
      }
      __break(1u);
      return result;
    case 2uLL:
      uint64_t v35 = a2;
      uint64_t v36 = a6;
      uint64_t v16 = *(void *)(a3 + 16);
      uint64_t v17 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      uint64_t v18 = sub_1A8DE9340();
      if (!v18) {
        goto LABEL_6;
      }
      uint64_t v19 = sub_1A8DE9370();
      if (__OFSUB__(v16, v19)) {
        goto LABEL_33;
      }
      v18 += v16 - v19;
LABEL_6:
      BOOL v20 = __OFSUB__(v17, v16);
      uint64_t v21 = v17 - v16;
      if (v20) {
        goto LABEL_32;
      }
      uint64_t v22 = sub_1A8DE9360();
      if (v22 >= v21) {
        uint64_t v23 = v21;
      }
      else {
        uint64_t v23 = v22;
      }
      uint64_t v24 = v18 + v23;
      if (v18) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      sub_1A8D9B7E0(v18, v25, a1, a3, a4, a5, a7);
      if (v7)
      {
        swift_release();
        swift_release();
        __break(1u);
        goto LABEL_36;
      }
      swift_release();
      uint64_t result = swift_release();
LABEL_29:
      int64_t v13 = v35;
      uint64_t v9 = v36;
LABEL_30:
      void *v13 = v9;
      return result;
    case 3uLL:
      memset(v37, 0, 14);
      uint64_t v15 = (char *)v37;
      goto LABEL_16;
    default:
      v37[0] = a3;
      LOWORD(v37[1]) = a4;
      BYTE2(v37[1]) = BYTE2(a4);
      BYTE3(v37[1]) = BYTE3(a4);
      BYTE4(v37[1]) = BYTE4(a4);
      BYTE5(v37[1]) = BYTE5(a4);
      uint64_t v15 = (char *)v37 + BYTE6(a4);
LABEL_16:
      uint64_t result = sub_1A8D9B7E0((uint64_t)v37, (uint64_t)v15, a1, a3, a4, a5, a7);
      goto LABEL_30;
  }
}

uint64_t sub_1A8D9B7E0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  if (!a1) {
    goto LABEL_13;
  }
  if (!*a3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!a7())
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  swift_dynamicCast();
  switch(a5 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(a4), a4)) {
        goto LABEL_8;
      }
      goto LABEL_11;
    case 2uLL:
      if (!__OFSUB__(*(void *)(a4 + 24), *(void *)(a4 + 16))) {
        goto LABEL_8;
      }
      goto LABEL_12;
    default:
LABEL_8:
      if (!ccrng()) {
        goto LABEL_16;
      }
      uint64_t result = ccec_generate_key_deterministic();
      if (result)
      {
        __break(1u);
LABEL_11:
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      return result;
  }
}

uint64_t sub_1A8D9B96C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a1;
  uint64_t result = swift_beginAccess();
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (a2 < 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v13 < a3)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (__OFSUB__(a3, a2))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (a3 != a2)
  {
    if (__OFSUB__(a5, a4))
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (a5 == a4)
    {
LABEL_29:
      __break(1u);
      return result;
    }
    while (a4 < a5)
    {
      *(unsigned char *)(v11 + 32 + a2) = *(unsigned char *)(a6 + 32 + a4);
      uint64_t v14 = a2 + 1;
      if (__OFADD__(a2, 1)) {
        goto LABEL_19;
      }
      if (__OFSUB__(a3, v14)) {
        goto LABEL_20;
      }
      ++a4;
      if (v14 == a3) {
        goto LABEL_6;
      }
      if (__OFSUB__(a5, a4)) {
        goto LABEL_21;
      }
      ++a2;
      if (a5 == a4)
      {
        __break(1u);
        break;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_6:
  if (__OFSUB__(a5, a4))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (a4 != a5)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  return result;
}

void *sub_1A8D9BA84(const void *a1, int64_t a2)
{
  if (!a2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  if (a2 <= 0)
  {
    int64_t v4 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A0);
    int64_t v4 = (void *)swift_allocObject();
    size_t v5 = _swift_stdlib_malloc_size(v4);
    void v4[2] = a2;
    v4[3] = 2 * v5 - 64;
  }
  memcpy(v4 + 4, a1, a2);
  return v4;
}

uint64_t sub_1A8D9BB14(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
  if (v2 <= 0)
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A0);
    uint64_t v3 = swift_allocObject();
    size_t v4 = _swift_stdlib_malloc_size((const void *)v3);
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = 2 * v4 - 64;
  }
  uint64_t v5 = sub_1A8D98010((uint64_t)&v7, (unsigned char *)(v3 + 32), v2, a1);
  swift_retain();
  uint64_t result = swift_release();
  if (v5 == v2) {
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8D9BBF0(uint64_t (*a1)(char *))
{
  uint64_t v4 = *v1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5 < 1) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = v4 + 32;
  uint64_t v8 = v4 + 31;
  do
  {
    char v14 = *(unsigned char *)(v7 + v6);
    char v9 = a1(&v14);
    if (v2) {
      break;
    }
    if (v9)
    {
      if (v6 >= v5 - 1) {
        return v6;
      }
      while (1)
      {
        char v14 = *(unsigned char *)(v8 + v5);
        uint64_t result = a1(&v14);
        uint64_t v11 = v5 - 1;
        if ((result & 1) == 0) {
          break;
        }
        uint64_t v12 = v5 - 2;
        if (__OFSUB__(v11, 1))
        {
          __break(1u);
          goto LABEL_17;
        }
        --v5;
        if (v6 >= v12) {
          return v6;
        }
      }
      if (!__OFSUB__(v11, v6))
      {
        char v13 = *(unsigned char *)(v7 + v6);
        *(unsigned char *)(v7 + v6) = *(unsigned char *)(v8 + v5);
        *(unsigned char *)(v8 + v5--) = v13;
        goto LABEL_3;
      }
LABEL_17:
      __break(1u);
      return result;
    }
LABEL_3:
    ++v6;
  }
  while (v6 < v5);
  return v6;
}

uint64_t sub_1A8D9BD24()
{
  return sub_1A8D9A70C();
}

unint64_t sub_1A8D9BD6C(unint64_t a1, uint64_t a2)
{
  return sub_1A8D9C684(a1, a2, (uint64_t (*)(void *, uint64_t *, uint64_t))sub_1A8DC1D9C);
}

uint64_t sub_1A8D9BD98(uint64_t a1)
{
  uint64_t v2 = sub_1A8DE93E0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t (**)())((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *uint64_t v5 = sub_1A8D9CD28;
  v5[1] = (uint64_t (*)())v7;
  (*(void (**)(uint64_t (**)(), void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4F27758], v2);
  swift_retain();
  sub_1A8DE93D0();
  if (v6)
  {
    sub_1A8DE9380();
    swift_allocObject();
    swift_retain();
    uint64_t v8 = sub_1A8DE9320();
    uint64_t v9 = sub_1A8DCEF04(v8, v6);
    swift_release();
  }
  else
  {
    uint64_t v10 = (void (*)(uint64_t, void))sub_1A8DE93D0();
    v10(a1 + 32, 0);
    swift_release();
    swift_release();
    uint64_t v9 = 0;
  }
  (*(void (**)(uint64_t (**)(), uint64_t))(v3 + 8))(v5, v2);
  return v9;
}

unint64_t sub_1A8D9BF90(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A8D9BFE8(a1, a2, a3, a4, a5, MEMORY[0x1E4F14660]);
}

unint64_t sub_1A8D9BFBC(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A8D9BFE8(a1, a2, a3, a4, a5, MEMORY[0x1E4F14668]);
}

unint64_t sub_1A8D9BFE8(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v7 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result)
  {
    unsigned int v13 = (result - 1) | ((result - 1) >> 1) | (((result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v14 = v13 | (v13 >> 4) | ((v13 | (v13 >> 4)) >> 8);
    int v15 = v14 | HIWORD(v14);
    if (v15 == -1) {
      uint64_t v16 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v16 = (v15 + 1);
    }
  }
  else
  {
    uint64_t v16 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 24) = v16;
  uint64_t v19 = v17;
  sub_1A8D8BE04(a2, a3);
  uint64_t v18 = (const void *)swift_retain();
  sub_1A8D98324(v18, v7, &v19, a2, a3, a4, a5, a6);
  swift_release();
  if (v6) {
    swift_release();
  }
  return v17;
}

unint64_t sub_1A8D9C104(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A8D9BFE8(a1, a2, a3, a4, a5, MEMORY[0x1E4F14670]);
}

unint64_t sub_1A8D9C130(unint64_t a1)
{
  return sub_1A8D9C57C(a1, (void (*)(uint64_t, unint64_t, uint64_t *))sub_1A8D98438);
}

unint64_t sub_1A8D9C15C(unint64_t a1, char a2, uint64_t a3)
{
  return sub_1A8D9C1E0(a1, a2, a3, MEMORY[0x1E4F14660]);
}

unint64_t sub_1A8D9C188(unint64_t a1, char a2, uint64_t a3)
{
  return sub_1A8D9C1E0(a1, a2, a3, MEMORY[0x1E4F14668]);
}

unint64_t sub_1A8D9C1B4(unint64_t a1, char a2, uint64_t a3)
{
  return sub_1A8D9C1E0(a1, a2, a3, MEMORY[0x1E4F14670]);
}

unint64_t sub_1A8D9C1E0(unint64_t result, char a2, uint64_t a3, uint64_t (*a4)(void))
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result)
  {
    unsigned int v9 = (result - 1) | ((result - 1) >> 1) | (((result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
    int v11 = v10 | HIWORD(v10);
    if (v11 == -1) {
      uint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v12 = (v11 + 1);
    }
  }
  else
  {
    uint64_t v12 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = v12;
  uint64_t v15 = v13;
  unsigned int v14 = (const void *)swift_retain();
  sub_1A8D98538(v14, v5, &v15, a2 & 1, a3, a4);
  swift_release();
  if (v4) {
    swift_release();
  }
  return v13;
}

unint64_t sub_1A8D9C2D4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8D9C448(a1, a2, a3, (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8D9811C);
}

unint64_t sub_1A8D9C300(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A8D9C318(a1, a2, a3, a4, a5);
}

unint64_t sub_1A8D9C318(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v6 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result)
  {
    unsigned int v11 = (result - 1) | ((result - 1) >> 1) | (((result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
    int v13 = v12 | HIWORD(v12);
    if (v13 == -1) {
      uint64_t v14 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v14 = (v13 + 1);
    }
  }
  else
  {
    uint64_t v14 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = v14;
  uint64_t v17 = v15;
  uint64_t v16 = (const void *)swift_retain();
  sub_1A8D98620(v16, v6, &v17, a2, a3, a4, a5);
  swift_release();
  if (v5) {
    swift_release();
  }
  return v15;
}

unint64_t sub_1A8D9C41C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8D9C448(a1, a2, a3, (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8D98244);
}

unint64_t sub_1A8D9C448(unint64_t result, uint64_t a2, uint64_t a3, void (*a4)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result)
  {
    unsigned int v9 = (result - 1) | ((result - 1) >> 1) | (((result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
    int v11 = v10 | HIWORD(v10);
    if (v11 == -1) {
      uint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v12 = (v11 + 1);
    }
  }
  else
  {
    uint64_t v12 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = v12;
  uint64_t v15 = v13;
  swift_retain();
  sub_1A8DE97C0();
  uint64_t v14 = (char *)swift_retain();
  sub_1A8D98780(v14, v5, (uint64_t)&v15, a2, a3, a4);
  swift_release();
  if (v4) {
    swift_release();
  }
  return v13;
}

unint64_t sub_1A8D9C550(unint64_t a1)
{
  return sub_1A8D9C57C(a1, (void (*)(uint64_t, unint64_t, uint64_t *))sub_1A8D98830);
}

unint64_t sub_1A8D9C57C(unint64_t result, void (*a2)(uint64_t, unint64_t, uint64_t *))
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v3 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result)
  {
    unsigned int v5 = (result - 1) | ((result - 1) >> 1) | (((result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
    int v7 = v6 | HIWORD(v6);
    if (v7 == -1) {
      uint64_t v8 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v8 = (v7 + 1);
    }
  }
  else
  {
    uint64_t v8 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = v8;
  uint64_t v11 = v9;
  uint64_t v10 = swift_retain();
  a2(v10, v3, &v11);
  swift_release();
  if (v2) {
    swift_release();
  }
  return v9;
}

unint64_t sub_1A8D9C658(unint64_t a1, uint64_t a2)
{
  return sub_1A8D9C684(a1, a2, (uint64_t (*)(void *, uint64_t *, uint64_t))sub_1A8DCE260);
}

unint64_t sub_1A8D9C684(unint64_t result, uint64_t a2, uint64_t (*a3)(void *, uint64_t *, uint64_t))
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result)
  {
    unsigned int v7 = (result - 1) | ((result - 1) >> 1) | (((result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    int v9 = v8 | HIWORD(v8);
    if (v9 == -1) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = (v9 + 1);
    }
  }
  else
  {
    uint64_t v10 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = v10;
  uint64_t v13 = v11;
  uint64_t v12 = (const void *)swift_retain();
  sub_1A8D98930(v12, v4, &v13, a2, a3);
  swift_release();
  if (v3) {
    swift_release();
  }
  return v11;
}

unint64_t sub_1A8D9C770(unint64_t result, uint64_t a2, uint64_t a3, void **a4, uint64_t a5)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v6 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result)
  {
    unsigned int v11 = (result - 1) | ((result - 1) >> 1) | (((result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
    int v13 = v12 | HIWORD(v12);
    if (v13 == -1) {
      uint64_t v14 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v14 = (v13 + 1);
    }
  }
  else
  {
    uint64_t v14 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = v14;
  uint64_t v17 = v15;
  swift_retain();
  uint64_t v16 = (const void *)swift_retain();
  sub_1A8D98A10(v16, v6, &v17, a2, a3, a4, a5);
  swift_release();
  if (v5) {
    swift_release();
  }
  return v15;
}

unint64_t sub_1A8D9C880(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8D9C8D8(a1, a2, a3, MEMORY[0x1E4F146D8]);
}

unint64_t sub_1A8D9C8AC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8D9C8D8(a1, a2, a3, MEMORY[0x1E4F146D0]);
}

unint64_t sub_1A8D9C8D8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result)
  {
    unsigned int v9 = (result - 1) | ((result - 1) >> 1) | (((result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
    int v11 = v10 | HIWORD(v10);
    if (v11 == -1) {
      uint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v12 = (v11 + 1);
    }
  }
  else
  {
    uint64_t v12 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = v12;
  uint64_t v15 = v13;
  uint64_t v14 = (const void *)swift_retain();
  sub_1A8D98B28(v14, v5, &v15, a2, a3, a4);
  swift_release();
  if (v4) {
    swift_release();
  }
  return v13;
}

unint64_t sub_1A8D9C9CC(unint64_t result, uint64_t (*a2)(void *, uint64_t *), uint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result)
  {
    unsigned int v7 = (result - 1) | ((result - 1) >> 1) | (((result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    int v9 = v8 | HIWORD(v8);
    if (v9 == -1) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = (v9 + 1);
    }
  }
  else
  {
    uint64_t v10 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = v10;
  uint64_t v13 = v11;
  uint64_t v12 = (const void *)swift_retain();
  sub_1A8D98C0C(v12, v4, a2, a3, &v13);
  swift_release();
  if (v3) {
    swift_release();
  }
  return v11;
}

uint64_t sub_1A8D9CAB8(void *a1, size_t a2)
{
  uint64_t v5 = **(void **)(v2 + 16);
  swift_beginAccess();
  return sub_1A8DD0EA0(*(void *)(v5 + 16), *(void *)(v5 + 16), a1, a2);
}

void *sub_1A8D9CB2C(size_t a1, uint64_t a2)
{
  if (qword_1EB476778 != -1) {
    swift_once();
  }
  uint64_t result = off_1EB476770;
  uint64_t v5 = off_1EB476770;
  if (!a2) {
    return (void *)swift_retain();
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    do
    {
      swift_beginAccess();
      sub_1A8DD0D00(v5[2], v5[2], a1);
      --a2;
    }
    while (a2);
    return v5;
  }
  return result;
}

uint64_t sub_1A8D9CBEC(int64_t a1)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (HIDWORD(a1))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a1)
  {
    unsigned int v2 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
    unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
    int v4 = v3 | HIWORD(v3);
    if (v4 == -1) {
      uint64_t v5 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v5 = (v4 + 1);
    }
  }
  else
  {
    uint64_t v5 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = 0;
  v6[3] = v5;
  size_t v7 = _swift_stdlib_malloc_size(v6);
  if (!a1) {
    goto LABEL_12;
  }
  if ((uint64_t)(v7 - 32) < a1)
  {
LABEL_15:
    __break(1u);
    __break(1u);
  }
  uint64_t result = ccrng();
  if (result)
  {
    ccrng_generate_bridge();
LABEL_12:
    swift_beginAccess();
    void v6[2] = a1;
    return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8D9CD18()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A8D9CD28()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for SecureBytes.Index()
{
  return &type metadata for SecureBytes.Index;
}

unint64_t sub_1A8D9CD44(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_1A8D9D9A8(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_1A8D9D9A8(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return sub_1A8DE96D0();
}

uint64_t sub_1A8D9CE44(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  int64_t v5 = a5 >> 1;
  unint64_t v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = v6 - result;
  if (__OFSUB__(v6, result))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v7 < 1)
  {
    uint64_t v7 = 0;
  }
  else if ((v6 & 0x8000000000000000) == 0)
  {
    int64_t v8 = a5 >> 1;
    if (v6 < v7)
    {
LABEL_10:
      if (v8 >= a4)
      {
        if (v5 >= a4)
        {
          if (v5 >= v8)
          {
            if ((v8 & 0x8000000000000000) == 0) {
              return a2;
            }
            goto LABEL_21;
          }
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  int64_t v8 = a4 + v7;
  if (!__OFADD__(a4, v7)) {
    goto LABEL_10;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1A8D9CED8(unint64_t a1)
{
  sub_1A8DE94B0();
  int64_t v6 = v5;
  unint64_t v7 = sub_1A8DE9720();
  unint64_t v9 = v8;
  unint64_t v11 = v10;
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  unint64_t v14 = sub_1A8D9CD44(v7, v9, v11, v13);
  uint64_t v16 = v14 + 64;
  if (__OFADD__(v14, 64)) {
    goto LABEL_21;
  }
  unint64_t v49 = v11;
  if (v16 < 0) {
    uint64_t v16 = v14 + 127;
  }
  uint64_t v17 = v16 >> 6;
  if (v17 <= -2) {
    uint64_t v17 = -2;
  }
  uint64_t v18 = sub_1A8D964D8(0, v17 + 2, 0, MEMORY[0x1E4FBC860]);
  sub_1A8DE9A90();
  swift_bridgeObjectRelease();
  sub_1A8DE97C0();
  sub_1A8DE9680();
  swift_bridgeObjectRelease();
  sub_1A8DE9680();
  unint64_t v11 = MEMORY[0x1AD0E7760](0x4745422D2D2D2D2DLL, 0xEB00000000204E49);
  uint64_t v3 = v19;
  a1 = v20;
  uint64_t v2 = v21;
  uint64_t v15 = v18;
  unint64_t v1 = *((void *)v18 + 2);
  uint64_t v16 = *((void *)v18 + 3);
  int64_t v6 = v1 + 1;
  if (v1 >= (unint64_t)v16 >> 1) {
    goto LABEL_22;
  }
  while (1)
  {
    *((void *)v15 + 2) = v6;
    uint64_t v22 = v15;
    uint64_t v23 = &v15[32 * v1];
    *((void *)v23 + 4) = v11;
    *((void *)v23 + 5) = v3;
    *((void *)v23 + 6) = a1;
    *((void *)v23 + 7) = v2;
    sub_1A8DE97C0();
    a1 = v49;
    uint64_t v24 = sub_1A8DE9950();
    swift_bridgeObjectRelease();
    if (v24 < 1) {
      break;
    }
    while (1)
    {
      sub_1A8DE97C0();
      int64_t v6 = sub_1A8DE9920();
      char v26 = v25;
      swift_bridgeObjectRelease();
      unint64_t v11 = (v26 & 1) != 0 ? v9 : v6;
      unint64_t v1 = v11 >> 14;
      if (v11 >> 14 < v7 >> 14) {
        break;
      }
      sub_1A8DE97C0();
      unint64_t v49 = a1;
      uint64_t v2 = sub_1A8DE9970();
      uint64_t v3 = v27;
      a1 = v28;
      uint64_t v48 = v29;
      swift_bridgeObjectRelease();
      uint64_t v15 = v22;
      unint64_t v30 = *((void *)v22 + 2);
      unint64_t v31 = *((void *)v15 + 3);
      int64_t v6 = v30 + 1;
      if (v30 >= v31 >> 1) {
        uint64_t v15 = sub_1A8D964D8((char *)(v31 > 1), v30 + 1, 1, v15);
      }
      *((void *)v15 + 2) = v6;
      uint64_t v16 = (uint64_t)&v15[32 * v30];
      *(void *)(v16 + 32) = v2;
      *(void *)(v16 + 40) = v3;
      *(void *)(v16 + 48) = a1;
      *(void *)(v16 + 56) = v48;
      if (v1 > v9 >> 14) {
        goto LABEL_20;
      }
      uint64_t v22 = v15;
      sub_1A8DE97C0();
      unint64_t v7 = sub_1A8DE9970();
      unint64_t v9 = v32;
      a1 = v33;
      uint64_t v2 = v34;
      swift_bridgeObjectRelease_n();
      sub_1A8DE97C0();
      uint64_t v35 = sub_1A8DE9950();
      swift_bridgeObjectRelease();
      if (v35 <= 0) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    uint64_t v15 = sub_1A8D964D8((char *)((unint64_t)v16 > 1), v6, 1, v15);
  }
LABEL_16:
  sub_1A8DE9A90();
  swift_bridgeObjectRelease();
  sub_1A8DE97C0();
  sub_1A8DE9680();
  swift_bridgeObjectRelease();
  sub_1A8DE9680();
  uint64_t v36 = MEMORY[0x1AD0E7760](0x444E452D2D2D2D2DLL, 0xE900000000000020);
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  unint64_t v44 = *((void *)v22 + 2);
  unint64_t v43 = *((void *)v22 + 3);
  if (v44 >= v43 >> 1) {
    uint64_t v22 = sub_1A8D964D8((char *)(v43 > 1), v44 + 1, 1, v22);
  }
  *((void *)v22 + 2) = v44 + 1;
  uint64_t v45 = &v22[32 * v44];
  *((void *)v45 + 4) = v36;
  *((void *)v45 + 5) = v38;
  *((void *)v45 + 6) = v40;
  *((void *)v45 + 7) = v42;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A9098);
  sub_1A8D935E0(&qword_1E97A90A0, &qword_1E97A9098);
  sub_1A8D9D954();
  uint64_t v46 = sub_1A8DE9780();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v46;
}

unint64_t sub_1A8D9D3B8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  if (a6 >> 14 < a5 >> 14)
  {
    __break(1u);
LABEL_24:
    unint64_t result = sub_1A8DE9690();
    uint64_t v20 = result;
    if ((v8 & 0x1000000000000000) == 0) {
      goto LABEL_7;
    }
LABEL_25:
    unint64_t result = sub_1A8DE9690();
    uint64_t v21 = result;
    if ((v20 & 0x8000000000000000) == 0) {
      goto LABEL_11;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }
  unint64_t v8 = a4;
  unint64_t v10 = a3;
  unint64_t v9 = a2;
  unint64_t v11 = a1;
  unint64_t result = sub_1A8D9DA24(a5, a6, a5, a6, a7, a8);
  unint64_t v13 = result;
  unint64_t v14 = v17;
  unint64_t v15 = v18;
  uint64_t v12 = v19;
  if ((v9 & 0x1000000000000000) != 0) {
    goto LABEL_24;
  }
  if ((v9 & 0x2000000000000000) != 0) {
    uint64_t v20 = HIBYTE(v9) & 0xF;
  }
  else {
    uint64_t v20 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if ((v8 & 0x1000000000000000) != 0) {
    goto LABEL_25;
  }
LABEL_7:
  if ((v8 & 0x2000000000000000) != 0) {
    uint64_t v21 = HIBYTE(v8) & 0xF;
  }
  else {
    uint64_t v21 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (v20 < 0) {
    goto LABEL_26;
  }
LABEL_11:
  sub_1A8DE97C0();
  unint64_t result = sub_1A8DE9930();
  if (v22) {
    unint64_t v23 = v14;
  }
  else {
    unint64_t v23 = result;
  }
  if (v23 >> 14 < v13 >> 14) {
    goto LABEL_27;
  }
  unint64_t v58 = v11;
  uint64_t v24 = sub_1A8D9DA24(v13, v23, v13, v14, v15, v12);
  uint64_t v56 = v25;
  unint64_t v57 = v24;
  unint64_t v55 = v26;
  unint64_t v28 = v27;
  sub_1A8DE97C0();
  sub_1A8DE97C0();
  unint64_t result = sub_1A8DE9930();
  if (v29) {
    unint64_t result = v14;
  }
  if (v14 >> 14 < result >> 14) {
    goto LABEL_28;
  }
  unint64_t v54 = v10;
  unint64_t v30 = sub_1A8D9DA24(result, v14, v13, v14, v15, v12);
  unint64_t v32 = v31;
  unint64_t v34 = v33;
  unint64_t v36 = v35;
  sub_1A8DE97C0();
  swift_bridgeObjectRelease_n();
  unint64_t v37 = sub_1A8DBDAB8(v21, v30, v32, v34, v36);
  uint64_t v52 = v38;
  unint64_t v53 = v37;
  unint64_t v51 = v39;
  unint64_t v41 = v40;
  unint64_t v42 = sub_1A8DBDBF8(v21, v30, v32, v34, v36);
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  sub_1A8DE97C0();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  sub_1A8DE97C0();
  LOBYTE(v32) = sub_1A8D9D6B0(v58, v9, v57, v56, v55, v28);
  swift_bridgeObjectRelease();
  if ((v32 & 1) != 0
    && (sub_1A8DE97C0(), char v49 = sub_1A8D9D6B0(v54, v8, v53, v52, v51, v41), swift_bridgeObjectRelease(), (v49 & 1) != 0))
  {
    uint64_t v50 = MEMORY[0x1AD0E7510](v42, v44, v46, v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v50 = 0;
  }
  swift_bridgeObjectRelease();
  return v50;
}

unint64_t sub_1A8D9D6B0(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v9 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  if ((a6 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v10 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v11 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v12 = 4 << v9;
  uint64_t v29 = 4 * v11;
  uint64_t v13 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v14 = 4 << v13;
  uint64_t v25 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v26 = v12;
  unint64_t v23 = v10;
  uint64_t v24 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  sub_1A8DE97C0();
  sub_1A8DE97C0();
  unint64_t v15 = 15;
  while (1)
  {
    unint64_t v16 = a3 ^ a4;
    if ((a3 ^ a4) < 0x4000)
    {
      if (v29 != v15 >> 14)
      {
        char v17 = 0;
        goto LABEL_19;
      }
      uint64_t v22 = 1;
LABEL_43:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v22;
    }
    unint64_t result = sub_1A8DE9940();
    char v17 = result;
    if ((a3 & 0xC) == v26)
    {
      unint64_t result = sub_1A8D9D9A8(a3, a5, a6);
      a3 = result;
      if ((a6 & 0x1000000000000000) == 0)
      {
LABEL_17:
        a3 = (a3 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_18;
      }
    }
    else if ((a6 & 0x1000000000000000) == 0)
    {
      goto LABEL_17;
    }
    if (v23 <= a3 >> 16) {
      goto LABEL_46;
    }
    a3 = sub_1A8DE96A0();
LABEL_18:
    if (v29 == v15 >> 14)
    {
      uint64_t v22 = 0;
      goto LABEL_43;
    }
LABEL_19:
    unint64_t v19 = v15 & 0xC;
    unint64_t result = v15;
    if (v19 == v14) {
      unint64_t result = sub_1A8D9D9A8(v15, a1, a2);
    }
    unint64_t v20 = result >> 16;
    if (result >> 16 >= v11) {
      break;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t result = sub_1A8DE96E0();
      char v21 = result;
      if (v19 != v14) {
        goto LABEL_29;
      }
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v31[0] = a1;
      v31[1] = v25;
      char v21 = *((unsigned char *)v31 + v20);
      if (v19 != v14) {
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t result = v24;
      if ((a1 & 0x1000000000000000) == 0) {
        unint64_t result = sub_1A8DE9AB0();
      }
      char v21 = *(unsigned char *)(result + v20);
      if (v19 != v14)
      {
LABEL_29:
        if ((a2 & 0x1000000000000000) != 0) {
          goto LABEL_33;
        }
        goto LABEL_30;
      }
    }
    unint64_t result = sub_1A8D9D9A8(v15, a1, a2);
    unint64_t v15 = result;
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_33:
      if (v11 <= v15 >> 16) {
        goto LABEL_45;
      }
      unint64_t v15 = sub_1A8DE96A0();
      goto LABEL_35;
    }
LABEL_30:
    unint64_t v15 = (v15 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_35:
    uint64_t v22 = 0;
    if (v16 < 0x4000 || v17 != v21) {
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

unint64_t sub_1A8D9D954()
{
  unint64_t result = qword_1E97A90A8;
  if (!qword_1E97A90A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A90A8);
  }
  return result;
}

uint64_t sub_1A8D9D9A8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_1A8DE96F0();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1AD0E74C0](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_1A8D9DA24(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  unint64_t v11 = result;
  uint64_t v12 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  if ((a2 & 0xC) == 4 << v12)
  {
    unint64_t result = sub_1A8D9D9A8(a2, a5, a6);
    unint64_t v10 = result;
  }
  if ((v11 & 0xC) == v13)
  {
    unint64_t result = sub_1A8D9D9A8(v11, a5, a6);
    unint64_t v11 = result;
  }
  if (v10 >> 14 <= a4 >> 14 && v11 >> 14 >= a3 >> 14 && v10 >> 14 >= v11 >> 14) {
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8D9DB04(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v2 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (v2) {
      goto LABEL_32;
    }
LABEL_48:
    sub_1A8D8EC14();
    swift_allocError();
    *char v49 = 7;
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1;
  unint64_t v5 = 4 * v3;
  uint64_t v6 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v7 = 15;
  unint64_t v8 = 15;
  unint64_t v9 = 15;
  uint64_t v70 = 4 * v3;
  do
  {
    while (1)
    {
      uint64_t v11 = sub_1A8DE9700();
      if ((v12 & 0x2000000000000000) != 0) {
        uint64_t v13 = HIBYTE(v12) & 0xF;
      }
      else {
        uint64_t v13 = v11 & 0xFFFFFFFFFFFFLL;
      }
      if (!v13)
      {
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      if ((v12 & 0x1000000000000000) != 0)
      {
        uint64_t v14 = sub_1A8DE9A80();
      }
      else
      {
        if ((v12 & 0x2000000000000000) == 0 && (v11 & 0x1000000000000000) == 0) {
          sub_1A8DE9AB0();
        }
        uint64_t v14 = sub_1A8DE9AC0();
      }
      unint64_t v2 = v14;
      swift_bridgeObjectRelease();
      if ((v2 - 14) <= 0xFFFFFFFB && (v2 - 8232) >= 2 && v2 != 133) {
        break;
      }
      if (v8 >> 14 != v7 >> 14)
      {
        if (v7 >> 14 < v8 >> 14) {
          goto LABEL_80;
        }
        uint64_t v15 = sub_1A8DE9720();
        uint64_t v17 = v16;
        uint64_t v19 = v18;
        unint64_t v2 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = sub_1A8D964D8(0, *((void *)v6 + 2) + 1, 1, v6);
        }
        unint64_t v22 = *((void *)v6 + 2);
        unint64_t v21 = *((void *)v6 + 3);
        unint64_t v23 = v6;
        if (v22 >= v21 >> 1) {
          unint64_t v23 = sub_1A8D964D8((char *)(v21 > 1), v22 + 1, 1, v6);
        }
        *((void *)v23 + 2) = v22 + 1;
        uint64_t v6 = v23;
        unint64_t v10 = &v23[32 * v22];
        *((void *)v10 + 4) = v15;
        *((void *)v10 + 5) = v17;
        *((void *)v10 + 6) = v19;
        *((void *)v10 + 7) = v2;
        unint64_t v5 = v70;
      }
      unint64_t v7 = sub_1A8DE9670();
      unint64_t v8 = v7;
      unint64_t v9 = v7;
      if (v5 == v7 >> 14) {
        goto LABEL_28;
      }
    }
    unint64_t v7 = sub_1A8DE9670();
  }
  while (v5 != v7 >> 14);
LABEL_28:
  if (v5 != v8 >> 14)
  {
    if (v5 >= v9 >> 14)
    {
      uint64_t v4 = sub_1A8DE9720();
      unint64_t v2 = v42;
      unint64_t v7 = v43;
      unint64_t v8 = v44;
      swift_bridgeObjectRelease();
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_42;
      }
      goto LABEL_83;
    }
LABEL_82:
    __break(1u);
LABEL_83:
    uint64_t v6 = sub_1A8D964D8(0, *((void *)v6 + 2) + 1, 1, v6);
LABEL_42:
    unint64_t v46 = *((void *)v6 + 2);
    unint64_t v45 = *((void *)v6 + 3);
    uint64_t v47 = v6;
    if (v46 >= v45 >> 1) {
      uint64_t v47 = sub_1A8D964D8((char *)(v45 > 1), v46 + 1, 1, v6);
    }
    *((void *)v47 + 2) = v46 + 1;
    uint64_t v6 = v47;
    uint64_t v48 = &v47[32 * v46];
    *((void *)v48 + 4) = v4;
    *((void *)v48 + 5) = v2;
    *((void *)v48 + 6) = v7;
    *((void *)v48 + 7) = v8;
    unint64_t v2 = *((void *)v47 + 2);
    if (v2) {
      goto LABEL_32;
    }
    goto LABEL_48;
  }
  swift_bridgeObjectRelease();
  unint64_t v2 = *((void *)v6 + 2);
  if (!v2) {
    goto LABEL_48;
  }
LABEL_32:
  uint64_t v24 = v6 + 32;
  uint64_t v25 = v6;
  unint64_t v27 = *((void *)v6 + 4);
  unint64_t v26 = *((void *)v6 + 5);
  unint64_t v28 = *((void *)v25 + 6);
  uint64_t v29 = *((void *)v25 + 7);
  uint64_t v30 = (uint64_t)v25;
  uint64_t v69 = (uint64_t)v24;
  unint64_t v31 = &v24[32 * v2];
  unint64_t v32 = *((void *)v31 - 4);
  unint64_t v33 = *((void *)v31 - 3);
  unint64_t v35 = *((void *)v31 - 2);
  uint64_t v34 = *((void *)v31 - 1);
  sub_1A8DE97C0();
  sub_1A8DE97C0();
  unint64_t v71 = sub_1A8D9D3B8(0x4745422D2D2D2D2DuLL, 0xEB00000000204E49, 0x2D2D2D2D2DuLL, 0xE500000000000000, v27, v26, v28, v29);
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_46:
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  sub_1A8DE97C0();
  unint64_t v38 = sub_1A8D9D3B8(0x444E452D2D2D2D2DuLL, 0xE900000000000020, 0x2D2D2D2D2DuLL, 0xE500000000000000, v32, v33, v35, v34);
  unint64_t v8 = v39;
  swift_bridgeObjectRelease();
  if (!v8)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_48;
  }
  if (v71 == v38 && v37 == v8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v41 = sub_1A8DE9B40();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v41 & 1) == 0) {
      goto LABEL_46;
    }
  }
  uint64_t result = sub_1A8D9CE44(1, v30, v69, 1, (2 * v2) | 1);
  if (__OFSUB__(v53 >> 1, v52))
  {
    __break(1u);
    goto LABEL_85;
  }
  unint64_t v7 = result;
  if ((uint64_t)((v53 >> 1) - v52) < 1)
  {
LABEL_76:
    swift_bridgeObjectRelease();
LABEL_77:
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v65 = 7;
    swift_willThrow();
    return swift_unknownObjectRelease();
  }
  uint64_t v66 = v51;
  int64_t v67 = v53 >> 1;
  uint64_t v68 = v52;
  uint64_t result = sub_1A8D9CE44(1, result, v51, v52, v53);
  unint64_t v56 = result;
  uint64_t v4 = v57 >> 1;
  if (v55 != v57 >> 1)
  {
    uint64_t v58 = v55;
    uint64_t v6 = (char *)(v54 + 32 * v55 + 16);
    do
    {
      if (v58 >= v4) {
        goto LABEL_81;
      }
      unint64_t v59 = *((void *)v6 - 2);
      unint64_t v8 = *((void *)v6 - 1);
      uint64_t v60 = *(void *)v6;
      unint64_t v2 = *((void *)v6 + 1);
      uint64_t v61 = (*(void *)v6 >> 59) & 1;
      if ((v2 & 0x1000000000000000) == 0) {
        LOBYTE(v61) = 1;
      }
      unint64_t v7 = 4 << v61;
      if ((*((void *)v6 - 2) & 0xCLL) == 4 << v61)
      {
        uint64_t result = sub_1A8D9D9A8(*((void *)v6 - 2), *(void *)v6, *((void *)v6 + 1));
        unint64_t v59 = result;
      }
      if ((v8 & 0xC) == v7)
      {
        unint64_t v7 = v56;
        uint64_t result = sub_1A8D9D9A8(v8, v60, v2);
        unint64_t v8 = result;
        if ((v2 & 0x1000000000000000) == 0)
        {
LABEL_65:
          uint64_t result = (v8 >> 16) - (v59 >> 16);
          if (result != 64) {
            goto LABEL_74;
          }
          goto LABEL_66;
        }
      }
      else if ((v2 & 0x1000000000000000) == 0)
      {
        goto LABEL_65;
      }
      unint64_t v62 = HIBYTE(v2) & 0xF;
      if ((v2 & 0x2000000000000000) == 0) {
        unint64_t v62 = v60 & 0xFFFFFFFFFFFFLL;
      }
      if (v62 < v59 >> 16) {
        goto LABEL_87;
      }
      if (v62 < v8 >> 16) {
        goto LABEL_88;
      }
      unint64_t v7 = v56;
      uint64_t result = sub_1A8DE96D0();
      if (result != 64)
      {
LABEL_74:
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_77;
      }
LABEL_66:
      ++v58;
      v6 += 32;
    }
    while (v4 != v58);
  }
  swift_unknownObjectRetain_n();
  uint64_t result = swift_unknownObjectRelease();
  if (v68 == v67)
  {
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    return result;
  }
  if (v67 <= v68) {
    goto LABEL_86;
  }
  if ((uint64_t)sub_1A8D9CD44(*(void *)(v66 + 32 * v67 - 32), *(void *)(v66 + 32 * v67 - 24), *(void *)(v66 + 32 * v67 - 16), *(void *)(v66 + 32 * v67 - 8)) > 64)
  {
    swift_unknownObjectRelease();
    goto LABEL_76;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A90B0);
  sub_1A8D935E0(qword_1E97A90B8, &qword_1E97A90B0);
  sub_1A8D9D954();
  sub_1A8DE9780();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A8DE9410();
  unint64_t v64 = v63;
  swift_bridgeObjectRelease();
  if (v64 >> 60 == 15) {
    goto LABEL_76;
  }
  swift_unknownObjectRelease();
  return v71;
}

uint64_t static AES.CCM.seal<A, B>(_:using:nonce:authenticating:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v24 = a7;
  uint64_t v22 = a1;
  uint64_t v23 = a5;
  uint64_t v15 = sub_1A8DE9910();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v21 - v17;
  uint64_t v27 = *a2;
  long long v26 = *a3;
  uint64_t v19 = *(void *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v21 - v17, a4, a6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v18, 0, 1, a6);
  unsigned __int8 v25 = 1;
  sub_1A8DB0EDC(v22, &v27, (uint64_t *)&v26, (uint64_t)v18, &v25, v23, a6, v24, a9, a8);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t static AES.CCM.seal<A>(_:using:nonce:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v16 = *a2;
  long long v10 = *a3;
  long long v14 = xmmword_1A8DEBCE0;
  long long v15 = v10;
  unsigned __int8 v13 = 1;
  unint64_t v11 = sub_1A8D9E548();
  return sub_1A8DB0EDC(a1, &v16, (uint64_t *)&v15, (uint64_t)&v14, &v13, a4, MEMORY[0x1E4F277C0], a5, a6, v11);
}

unint64_t sub_1A8D9E548()
{
  unint64_t result = qword_1EB476680;
  if (!qword_1EB476680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476680);
  }
  return result;
}

uint64_t static AES.CCM.open<A>(_:using:authenticating:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_1A8DE9910();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unsigned __int8 v13 = (char *)v19 - v12;
  LOBYTE(v12) = *(unsigned char *)(a1 + 48);
  uint64_t v14 = *a2;
  long long v15 = *(_OWORD *)(a1 + 16);
  v19[0] = *(_OWORD *)a1;
  v19[1] = v15;
  void v19[2] = *(_OWORD *)(a1 + 32);
  char v20 = v12;
  uint64_t v21 = v14;
  uint64_t v16 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, a3, a4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, a4);
  uint64_t v17 = sub_1A8DB11A8(v19, &v21, (uint64_t)v13, a4, a5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v17;
}

uint64_t sub_1A8D9E748(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  ccaes_ccm_decrypt_mode();
  swift_beginAccess();
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >> 60)
  {
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  uint64_t v6 = 8 * v5;
  if (v6 == 128 || v6 == 256 || v6 == 192)
  {
    long long v27 = *(_OWORD *)(a1 + 16);
    sub_1A8D9F2CC((uint64_t)&v27, (uint64_t)v28);
    sub_1A8D9F2CC((uint64_t)v28, (uint64_t)&v29);
    unsigned __int8 v7 = BYTE6(v30);
    uint64_t v8 = 0;
    switch(v30 >> 62)
    {
      case 1uLL:
        v30 &= 0x3FFFFFFFFFFFFFFFuLL;
        if (__OFSUB__(HIDWORD(v29), v29)) {
          goto LABEL_31;
        }
        uint64_t v8 = HIDWORD(v29) - (int)v29;
LABEL_11:
        *(void *)&long long v23 = sub_1A8D93078(v8);
        *((void *)&v23 + 1) = v12;
        sub_1A8DD9764(&v23, 0);
        long long v13 = v23;
        long long v23 = v27;
        long long v24 = v13;
        long long v25 = *(_OWORD *)a1;
        if (*(unsigned char *)(a1 + 48)) {
          size_t v14 = 16;
        }
        else {
          size_t v14 = 8;
        }
        sub_1A8D9F424((uint64_t)&v27);
        sub_1A8D9F424((uint64_t)&v25);
        uint64_t v15 = sub_1A8DE97D0();
        *(void *)(v15 + 16) = v14;
        bzero((void *)(v15 + 32), v14);
        sub_1A8D9ECE0(a2 + 32, a2 + 32 + *(void *)(a2 + 16), a1);
        if (!v2)
        {
          sub_1A8D9F2CC((uint64_t)&v25, (uint64_t)v26);
          sub_1A8D9F2CC((uint64_t)v26, (uint64_t)&v31);
          switch(v32 >> 62)
          {
            case 1uLL:
              v32 &= 0x3FFFFFFFFFFFFFFFuLL;
              uint64_t v16 = (int)v31;
              if (SHIDWORD(v31) < (int)v31) {
                goto LABEL_33;
              }
              sub_1A8D9F424((uint64_t)&v25);
              sub_1A8D9F484((uint64_t *)a1, (void (*)(uint64_t, uint64_t))sub_1A8D8BE04);
              if (!sub_1A8DE9340())
              {
                sub_1A8DE9360();
                __break(1u);
LABEL_37:
                sub_1A8DE9360();
                __break(1u);
                JUMPOUT(0x1A8D9EC68);
              }
              if (__OFSUB__(v16, sub_1A8DE9370())) {
                goto LABEL_35;
              }
              sub_1A8DE9360();
              sub_1A8DE97C0();
              int v17 = cc_cmp_safe();
              swift_bridgeObjectRelease();
              sub_1A8D9F454((uint64_t)&v25);
LABEL_26:
              sub_1A8D9F484((uint64_t *)a1, (void (*)(uint64_t, uint64_t))sub_1A8D8BD58);
              if (v17) {
                goto LABEL_27;
              }
              goto LABEL_24;
            case 2uLL:
              v32 &= 0x3FFFFFFFFFFFFFFFuLL;
              uint64_t v18 = *(void *)(v31 + 16);
              sub_1A8D9F484((uint64_t *)a1, (void (*)(uint64_t, uint64_t))sub_1A8D8BE04);
              swift_retain();
              swift_retain();
              if (!sub_1A8DE9340()) {
                goto LABEL_37;
              }
              if (__OFSUB__(v18, sub_1A8DE9370())) {
                goto LABEL_34;
              }
              sub_1A8DE9360();
              sub_1A8DE97C0();
              int v19 = cc_cmp_safe();
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              sub_1A8D9F484((uint64_t *)a1, (void (*)(uint64_t, uint64_t))sub_1A8D8BD58);
              if (!v19)
              {
LABEL_24:
                sub_1A8D9F454((uint64_t)&v25);
                unint64_t v20 = *((void *)&v24 + 1);
                a1 = v24;
                sub_1A8D8BE04(v24, *((unint64_t *)&v24 + 1));
                swift_bridgeObjectRelease();
                sub_1A8D8BD58(v23, *((unint64_t *)&v23 + 1));
                sub_1A8D8BD58(a1, v20);
                return a1;
              }
LABEL_27:
              sub_1A8D8E240();
              swift_allocError();
              *(_DWORD *)uint64_t v21 = 2;
              *(unsigned char *)(v21 + 4) = 1;
              swift_willThrow();
              break;
            case 3uLL:
              goto LABEL_25;
            default:
              v32 &= 0x3FFFFFFFFFFFFFFFuLL;
LABEL_25:
              sub_1A8D9F484((uint64_t *)a1, (void (*)(uint64_t, uint64_t))sub_1A8D8BE04);
              sub_1A8DE97C0();
              int v17 = cc_cmp_safe();
              swift_bridgeObjectRelease();
              goto LABEL_26;
          }
        }
        sub_1A8D9F454((uint64_t)&v25);
        swift_bridgeObjectRelease();
        sub_1A8D8BD58(v23, *((unint64_t *)&v23 + 1));
        sub_1A8D8BD58(v24, *((unint64_t *)&v24 + 1));
        break;
      case 2uLL:
        v30 &= 0x3FFFFFFFFFFFFFFFuLL;
        uint64_t v10 = *(void *)(v29 + 16);
        uint64_t v11 = *(void *)(v29 + 24);
        uint64_t v8 = v11 - v10;
        if (!__OFSUB__(v11, v10)) {
          goto LABEL_11;
        }
        goto LABEL_32;
      case 3uLL:
        goto LABEL_11;
      default:
        v30 &= 0x3FFFFFFFFFFFFFFFuLL;
        uint64_t v8 = v7;
        goto LABEL_11;
    }
  }
  else
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = 0;
    *(unsigned char *)(v9 + 4) = 1;
    swift_willThrow();
  }
  return a1;
}

uint64_t static AES.CCM.open(_:using:)(uint64_t a1, uint64_t *a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v2;
  void v4[2] = *(_OWORD *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 48);
  return sub_1A8D9E748((uint64_t)v4, *a2);
}

ValueMetadata *type metadata accessor for AES.CCM()
{
  return &type metadata for AES.CCM;
}

uint64_t sub_1A8D9ECE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = *(_OWORD *)(a3 + 32);
  long long v10 = v9;
  sub_1A8D9F2CC((uint64_t)&v10, (uint64_t)v11);
  uint64_t v3 = sub_1A8D9F2CC((uint64_t)v11, (uint64_t)&v12);
  switch(v13 >> 62)
  {
    case 1uLL:
      v13 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v4 = (int)v12;
      uint64_t v5 = SHIDWORD(v12);
      if (SHIDWORD(v12) < (int)v12) {
        __break(1u);
      }
      sub_1A8D9F424((uint64_t)&v9);
      sub_1A8DD39A8(v4, v5, (uint64_t (*)(uint64_t, uint64_t))sub_1A8D9F4F4);
      return sub_1A8D9F454((uint64_t)&v9);
    case 2uLL:
      v13 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v6 = *(void *)(v12 + 16);
      uint64_t v7 = *(void *)(v12 + 24);
      sub_1A8D9F424((uint64_t)&v9);
      swift_retain();
      swift_retain();
      sub_1A8DD39A8(v6, v7, (uint64_t (*)(uint64_t, uint64_t))sub_1A8D9F4F4);
      swift_release();
      swift_release();
      return sub_1A8D9F454((uint64_t)&v9);
    case 3uLL:
      MEMORY[0x1F4188790](v3);
      goto LABEL_8;
    default:
      v13 &= 0x3FFFFFFFFFFFFFFFuLL;
      MEMORY[0x1F4188790](v3);
LABEL_8:
      sub_1A8DB7CA4((uint64_t (*)(uint64_t, uint64_t))sub_1A8D9F568);
      return sub_1A8D9F454((uint64_t)&v9);
  }
}

uint64_t sub_1A8D9EFB4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char **a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v29[2] = *MEMORY[0x1E4F143B8];
  if (a4 >> 60 == 15) {
    __break(1u);
  }
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v15 = (char *)(int)a3;
      uint64_t v17 = a3 >> 32;
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
        goto LABEL_14;
      }
      sub_1A8D8BE04(a3, a4);
      sub_1A8D9F328((int)a3, a3 >> 32, a4 & 0x3FFFFFFFFFFFFFFFLL, a5, a6, a7, a8, a9, a10, a1, a2, a11, a12);
      break;
    case 2uLL:
      uint64_t v19 = *(void *)(a3 + 16);
      uint64_t v20 = *(void *)(a3 + 24);
      sub_1A8D8C208(a3, a4);
      swift_retain();
      swift_retain();
      sub_1A8D9F328(v19, v20, a4 & 0x3FFFFFFFFFFFFFFFLL, a5, a6, a7, a8, a9, a10, a1, a2, a11, a12);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      uint64_t v17 = a2;
      memset(v29, 0, 14);
      uint64_t v15 = *a5;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a5 = v15;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
LABEL_14:
        uint64_t v15 = sub_1A8DAF578((uint64_t)v15);
        *a5 = v15;
      }
      sub_1A8DB2764((uint64_t)(v15 + 32), (uint64_t)&v15[*((void *)v15 + 2) + 32], a6, a7, a8, a9, a10, a1, v17, a11, a12, (uint64_t)v29);
      goto LABEL_11;
    default:
      v29[0] = a3;
      LOWORD(v29[1]) = a4;
      BYTE2(v29[1]) = BYTE2(a4);
      BYTE3(v29[1]) = BYTE3(a4);
      BYTE4(v29[1]) = BYTE4(a4);
      BYTE5(v29[1]) = BYTE5(a4);
      uint64_t v15 = *a5;
      char v16 = swift_isUniquelyReferenced_nonNull_native();
      *a5 = v15;
      if ((v16 & 1) == 0)
      {
        uint64_t v15 = sub_1A8DAF578((uint64_t)v15);
        *a5 = v15;
      }
      sub_1A8DB2764((uint64_t)(v15 + 32), (uint64_t)&v15[*((void *)v15 + 2) + 32], a6, a7, a8, a9, a10, a1, a2, a11, a12, (uint64_t)v29);
LABEL_11:
      *a5 = v15;
      break;
  }
  return sub_1A8D8BF9C(a3, a4);
}

uint64_t sub_1A8D9F2CC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1A8D9F328(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result = sub_1A8DE9340();
  uint64_t v20 = result;
  if (result)
  {
    uint64_t result = sub_1A8DE9370();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v20 += a1 - result;
  }
  BOOL v21 = __OFSUB__(a2, a1);
  uint64_t v22 = a2 - a1;
  if (v21)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v23 = sub_1A8DE9360();
  if (v23 >= v22) {
    uint64_t v24 = v22;
  }
  else {
    uint64_t v24 = v23;
  }
  uint64_t v25 = v20 + v24;
  if (v20) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  return sub_1A8DB2698(v20, v26, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_1A8D9F424(uint64_t a1)
{
  return a1;
}

uint64_t sub_1A8D9F454(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1A8D9F484(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  return a1;
}

uint64_t sub_1A8D9F4F4()
{
  return sub_1A8DB7CA4((uint64_t (*)(uint64_t, uint64_t))sub_1A8D9F568);
}

uint64_t sub_1A8D9F568()
{
  return sub_1A8D9F5C0();
}

uint64_t sub_1A8D9F580(uint64_t a1, uint64_t a2)
{
  return sub_1A8D9EFB4(a1, a2, **(void **)(v2 + 16), *(void *)(*(void *)(v2 + 16) + 8), *(char ***)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80));
}

uint64_t sub_1A8D9F5C0()
{
  return sub_1A8DB7CA4(sub_1A8D9F580);
}

uint64_t static P256.hash2fieldL.getter()
{
  return 48;
}

uint64_t static P256.curveType.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8D9F6D4(MEMORY[0x1E4F14660], a1);
}

uint64_t sub_1A8D9F654@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8D9F7E8(MEMORY[0x1E4F14660], a1);
}

uint64_t sub_1A8D9F66C()
{
  return 48;
}

uint64_t static P384.hash2fieldL.getter()
{
  return 72;
}

uint64_t static P384.curveType.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8D9F6D4(MEMORY[0x1E4F14668], a1);
}

uint64_t sub_1A8D9F694@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8D9F7E8(MEMORY[0x1E4F14668], a1);
}

uint64_t sub_1A8D9F6AC()
{
  return 72;
}

uint64_t static P521.hash2fieldL.getter()
{
  return 98;
}

uint64_t static P521.curveType.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8D9F6D4(MEMORY[0x1E4F14670], a1);
}

uint64_t sub_1A8D9F6D4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    a2[3] = result;
    *a2 = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1A8D9F724()
{
  unint64_t result = qword_1EB476818;
  if (!qword_1EB476818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476818);
  }
  return result;
}

unint64_t sub_1A8D9F77C()
{
  unint64_t result = qword_1E97A8BF0;
  if (!qword_1E97A8BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8BF0);
  }
  return result;
}

uint64_t sub_1A8D9F7D0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8D9F7E8(MEMORY[0x1E4F14670], a1);
}

uint64_t sub_1A8D9F7E8@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    a2[3] = result;
    *a2 = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8D9F830()
{
  return 98;
}

uint64_t dispatch thunk of static CorecryptoSupportedNISTCurve.curveType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static CorecryptoSupportedNISTCurve.hash2fieldL.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for CoreCryptoNISTCurvePrivateKeyImpl()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CoreCryptoNISTCurvePublicKeyImpl()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1A8D9F890(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = self;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 24))(v7, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  swift_dynamicCast();
  unint64_t result = (unint64_t)objc_msgSend(v4, sel_groupOrderByteCountForCP_, v6);
  if ((result & 0x8000000000000000) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8D9F93C(uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = result;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a6 + 24))(v9, a4, a6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  unint64_t result = swift_dynamicCast();
  if (!v6)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  unint64_t result = ccec_x963_import_priv();
  if (result)
  {
    int v7 = result;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(unsigned char *)(v8 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1A8D9FA30(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *a3;
  if (!*a3)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = result;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a6 + 24))(v17, a4, a6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  unint64_t result = swift_dynamicCast();
  if (!v10)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  int v11 = ccec_raw_import_priv_only();
  int v18 = v11;
  if (v11)
  {
    int v12 = v11;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = v12;
    *(unsigned char *)(v13 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    int64_t v14 = ccec_der_export_priv_size();
    if (v14)
    {
      uint64_t v15 = (void *)sub_1A8D9CBEC(v14);
    }
    else
    {
      if (qword_1EB476778 != -1) {
        swift_once();
      }
      uint64_t v15 = off_1EB476770;
      swift_retain();
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      size_t v16 = sub_1A8DADA24((uint64_t)v15);
      swift_release();
      uint64_t v15 = (void *)v16;
    }
    swift_beginAccess();
    sub_1A8D9FC10((uint64_t)(v15 + 4), (uint64_t)v15 + v15[2] + 32, &v18, v6, a4, a5, a6);
    return swift_release();
  }
}

uint64_t sub_1A8D9FC10(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!result)
  {
    __break(1u);
    return result;
  }
  int v10 = ccec_der_export_priv();
  *a3 = v10;
  if (v10)
  {
    int v11 = v10;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = v11;
  }
  else
  {
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a7 + 24))(v14, a5, a7);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    swift_dynamicCast();
    unint64_t result = ccec_der_import_priv();
    *a3 = result;
    if (!result) {
      return result;
    }
    int v13 = result;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = v13;
  }
  *(unsigned char *)(v12 + 4) = 0;
  return swift_willThrow();
}

uint64_t sub_1A8D9FD5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = 0;
  uint64_t v9 = a1;
  sub_1A8DE9390();
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  }
  else
  {
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v14, a2, a4);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    swift_dynamicCast();
    uint64_t v10 = getccec_pub_ctx_size();
    uint64_t v13 = MEMORY[0x1F4188790](v10);
    uint64_t v9 = sub_1A8DE4458(v13, (uint64_t (*)(void *, uint64_t *))sub_1A8DA0A74);
    if (v15)
    {
      sub_1A8D8E240();
      swift_allocError();
      *(_DWORD *)uint64_t v11 = 1;
      *(unsigned char *)(v11 + 4) = 1;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    }
  }
  return v9;
}

unint64_t sub_1A8D9FF8C(unsigned char *a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_1A8D9F890(a3, a5);
  if ((uint64_t)(result + 0x4000000000000000) < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (!a1 || a2 - a1 != ((2 * result) | 1))
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = 1;
    goto LABEL_8;
  }
  if (a2 == a1)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if (*a1 == 4) {
    return result;
  }
  sub_1A8D8E240();
  swift_allocError();
  *(_DWORD *)uint64_t v8 = 5;
LABEL_8:
  *(unsigned char *)(v8 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_1A8DA0070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a1;
  sub_1A8DE9390();
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  }
  else
  {
    uint64_t v15 = 0;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v14, a2, a4);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    swift_dynamicCast();
    uint64_t v10 = getccec_pub_ctx_size();
    uint64_t v13 = MEMORY[0x1F4188790](v10);
    uint64_t v9 = sub_1A8DE4458(v13, (uint64_t (*)(void *, uint64_t *))sub_1A8DA0754);
    if (v15)
    {
      sub_1A8D8E240();
      swift_allocError();
      *(_DWORD *)uint64_t v11 = 1;
      *(unsigned char *)(v11 + 4) = 1;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    }
  }
  return v9;
}

unint64_t sub_1A8DA02A0(unsigned char *a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_1A8D9F890(a3, a5);
  if (__OFADD__(result, 1))
  {
    __break(1u);
    return result;
  }
  uint64_t v8 = a2 - a1;
  if (!a1) {
    uint64_t v8 = 0;
  }
  if (v8 != result + 1)
  {
    sub_1A8D8E240();
    swift_allocError();
    int v10 = 1;
    goto LABEL_10;
  }
  if (!a1 || a2 == a1 || (*a1 & 0xFE) != 2)
  {
    sub_1A8D8E240();
    swift_allocError();
    int v10 = 5;
LABEL_10:
    *(_DWORD *)uint64_t v9 = v10;
    *(unsigned char *)(v9 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

void *sub_1A8DA0380(void *result)
{
  if (*result) {
    return (void *)sub_1A8DE9390();
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DA03E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  (*(void (**)(void *__return_ptr, uint64_t))(a9 + 24))(v19, a7);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  uint64_t result = swift_dynamicCast();
  if (a1)
  {
    uint64_t result = a11(v18, a2 - a1, a1, a4);
    *a3 = (int)result;
    *a5 = a6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1A8DA04C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A8DA0518(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t *))sub_1A8DA0638);
}

unint64_t sub_1A8DA04EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A8DA0518(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t *))sub_1A8DA05E0);
}

unint64_t sub_1A8DA0518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t *))
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v15, a2, a4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  swift_dynamicCast();
  void v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  v13[6] = a1;
  unint64_t v14 = getccec_full_ctx_size();
  return sub_1A8D9C9CC(v14, a6, (uint64_t)v13);
}

uint64_t sub_1A8DA05E0(uint64_t a1, void *a2)
{
  return sub_1A8DA0664(a1, a2);
}

uint64_t sub_1A8DA060C(uint64_t a1, uint64_t a2)
{
  return sub_1A8DA0708(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_1A8D9FA30);
}

uint64_t sub_1A8DA0638(uint64_t a1, void *a2)
{
  return sub_1A8DA0664(a1, a2);
}

uint64_t sub_1A8DA0664(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t result = sub_1A8DE9390();
  if (!v3) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1A8DA06DC(uint64_t a1, uint64_t a2)
{
  return sub_1A8DA0708(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_1A8D9F93C);
}

uint64_t sub_1A8DA0708(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[6], v3[2], v3[3], v3[4], v3[5]);
}

unint64_t sub_1A8DA0734(unsigned char *a1, unsigned char *a2)
{
  return sub_1A8DA02A0(a1, a2, v2[2], v2[3], v2[4]);
}

void *sub_1A8DA0754(void *a1)
{
  return sub_1A8DA0804(a1);
}

uint64_t sub_1A8DA0780(uint64_t a1, uint64_t a2)
{
  return sub_1A8DA0868(a1, a2, MEMORY[0x1E4F14658]);
}

uint64_t sub_1A8DA07AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A8DA08D0(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t *))sub_1A8DA07D8);
}

void *sub_1A8DA07D8(void *a1)
{
  return sub_1A8DA0804(a1);
}

void *sub_1A8DA0804(void *a1)
{
  return sub_1A8DA0380(a1);
}

uint64_t sub_1A8DA083C(uint64_t a1, uint64_t a2)
{
  return sub_1A8DA0868(a1, a2, MEMORY[0x1E4F14650]);
}

uint64_t sub_1A8DA0868(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return sub_1A8DA03E4(a1, a2, *(void **)(v3 + 48), *(void *)(v3 + 56), *(void **)(v3 + 64), *(void *)(v3 + 72), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), a3);
}

uint64_t sub_1A8DA08A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A8DA08D0(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t *))sub_1A8DA09FC);
}

uint64_t sub_1A8DA08D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t *))
{
  uint64_t v12 = 0;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v11, a2, a4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  swift_dynamicCast();
  uint64_t v10 = getccec_pub_ctx_size();
  uint64_t v7 = sub_1A8DE4458(v10, a6);
  if (v12)
  {
    swift_bridgeObjectRelease();
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = 1;
    *(unsigned char *)(v8 + 4) = 1;
    swift_willThrow();
  }
  return v7;
}

void *sub_1A8DA09FC(void *a1)
{
  return sub_1A8DA0804(a1);
}

uint64_t sub_1A8DA0A28(uint64_t a1, uint64_t a2)
{
  return sub_1A8DA0868(a1, a2, MEMORY[0x1E4F14680]);
}

unint64_t sub_1A8DA0A54(unsigned char *a1, unsigned char *a2)
{
  return sub_1A8D9FF8C(a1, a2, v2[2], v2[3], v2[4]);
}

void *sub_1A8DA0A74(void *a1)
{
  return sub_1A8DA0804(a1);
}

uint64_t sub_1A8DA0AA0(uint64_t a1, uint64_t a2)
{
  return sub_1A8DA0868(a1, a2, MEMORY[0x1E4F14678]);
}

void sub_1A8DA0ACC()
{
  uint64_t v1 = v0[2];
  unint64_t v2 = v0[3];
  uint64_t v3 = v2 >> 1;
  if (v1 == v2 >> 1) {
    goto LABEL_2;
  }
  if (v1 >= (uint64_t)(v2 >> 1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v5 = v0[1];
  uint64_t v6 = v0[2];
  if (*(char *)(v5 + v1) < 0)
  {
    uint64_t v6 = v1 + 1;
    if (v1 + 1 == v3)
    {
LABEL_2:
      sub_1A8D8EC14();
      swift_allocError();
      *uint64_t v4 = 3;
      swift_willThrow();
      return;
    }
    while (v6 < v3)
    {
      if ((*(char *)(v5 + v6) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      uint64_t v10 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_15;
      }
      ++v6;
      if (v10 == v3) {
        goto LABEL_2;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = v6 + 1;
  if (v6 + 1 < v1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 >= -1)
  {
    unint64_t v8 = v0[3] & 1 | (2 * v7);
    v0[2] = v7;
    uint64_t v9 = swift_unknownObjectRetain();
    sub_1A8DA0EB4(v9, v5, v1, v8);
    return;
  }
LABEL_18:
  __break(1u);
}

uint64_t sub_1A8DA0BCC(uint64_t result, void *a2)
{
  uint64_t v2 = a2[2];
  if (!v2)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v2 == 1)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v4 = a2[4];
  if (!is_mul_ok(v4, 0x28uLL))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v5 = 40 * v4;
  uint64_t v6 = a2[5];
  unint64_t v7 = v5 + v6;
  if (!__CFADD__(v5, v6))
  {
    unint64_t v8 = (char **)result;
    sub_1A8DE97C0();
    uint64_t result = sub_1A8DA14A8(v7, v8);
    uint64_t v9 = v2 - 2;
    if (!v9) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v10 = 0;
    while (v9 != v10)
    {
      uint64_t result = sub_1A8DA14A8(a2[v10++ + 6], v8);
      if (v9 == v10) {
        return swift_unknownObjectRelease();
      }
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1A8DA0CAC(uint64_t a1)
{
  sub_1A8DE9BD0();
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1A8DE9BF0();
  if (v2)
  {
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 8;
      sub_1A8DE9BF0();
      --v2;
    }
    while (v2);
  }
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DA0D1C()
{
  return sub_1A8DA0CAC(*v0);
}

uint64_t sub_1A8DA0D24()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  uint64_t result = sub_1A8DE9BF0();
  if (v2)
  {
    uint64_t v4 = v1 + 32;
    do
    {
      v4 += 8;
      uint64_t result = sub_1A8DE9BF0();
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1A8DA0D78()
{
  uint64_t v1 = *v0;
  sub_1A8DE9BD0();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_1A8DE9BF0();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_1A8DE9BF0();
      --v2;
    }
    while (v2);
  }
  return sub_1A8DE9C20();
}

BOOL sub_1A8DA0DE4(void **a1, void **a2)
{
  return sub_1A8DA102C(*a1, *a2);
}

uint64_t sub_1A8DA0DF0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

unint64_t sub_1A8DA0DFC()
{
  unint64_t result = qword_1E97A91C0;
  if (!qword_1E97A91C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A91C0);
  }
  return result;
}

void sub_1A8DA0E50()
{
  qword_1E97AD6A0 = (uint64_t)&unk_1EFF5E670;
}

void sub_1A8DA0E64()
{
  qword_1E97AD740 = (uint64_t)&unk_1EFF5E6C8;
}

void sub_1A8DA0E78()
{
  qword_1E97AD748 = (uint64_t)&unk_1EFF5E710;
}

void sub_1A8DA0E8C()
{
  qword_1E97AD6B0 = (uint64_t)&unk_1EFF5E758;
}

void sub_1A8DA0EA0()
{
  qword_1E97AD698 = (uint64_t)&unk_1EFF5E5C8;
}

void sub_1A8DA0EB4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v7 = 7 * v5;
  if ((unsigned __int128)(v5 * (__int128)7) >> 64 != (7 * v5) >> 63)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (!__OFADD__(v7, 7))
  {
    if (v7 + 7 > 71)
    {
      sub_1A8D8EC14();
      swift_allocError();
      *unint64_t v8 = 3;
      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }
    uint64_t v10 = sub_1A8DDF8D0(0, v7, 7);
    uint64_t v11 = *(void *)(v10 + 16);
    if (!v11)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return;
    }
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    if (a3 <= v4) {
      uint64_t v14 = v4;
    }
    else {
      uint64_t v14 = a3;
    }
    unint64_t v15 = v14 - a3;
    while (v15 > v11 - 1)
    {
      unint64_t v17 = *(void *)(v10 + 8 * v13 + 32);
      if (v17 - 65 <= 0xFFFFFFFFFFFFFF7ELL)
      {
        unint64_t v16 = 0;
      }
      else
      {
        unint64_t v18 = *(unsigned char *)(a2 + a3 + v13) & 0x7F;
        if ((v17 & 0x8000000000000000) != 0)
        {
          unint64_t v20 = v18 >> -(char)v17;
          if (v17 <= 0xFFFFFFFFFFFFFFC0) {
            unint64_t v16 = 0;
          }
          else {
            unint64_t v16 = v20;
          }
        }
        else
        {
          uint64_t v19 = v18 << v17;
          if (v17 >= 0x40) {
            unint64_t v16 = 0;
          }
          else {
            unint64_t v16 = v19;
          }
        }
      }
      ++v13;
      v12 |= v16;
      if (v11 == v13) {
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_26:
  __break(1u);
}

BOOL sub_1A8DA102C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  uint64_t v3 = a1 + 5;
  int64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

char *sub_1A8DA1098(char *result, char a2, uint64_t a3, char *a4)
{
  uint64_t v8 = (uint64_t)result;
  if (*result != a2)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *unint64_t v16 = 1;
    swift_willThrow();
    return (char *)sub_1A8D8EC68(v8);
  }
  if (result[48] != 1)
  {
LABEL_48:
    __break(1u);
    return result;
  }
  uint64_t v9 = v5;
  unint64_t v10 = *((void *)result + 3);
  unint64_t v40 = v10;
  unint64_t v41 = *((void *)result + 4);
  int64_t v11 = v41 >> 1;
  uint64_t v12 = (v41 >> 1) - v10;
  if (__OFSUB__(v41 >> 1, v10))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  swift_unknownObjectRetain();
  uint64_t v6 = (char *)MEMORY[0x1E4FBC860];
  if (v12 >= 1)
  {
    do
    {
      sub_1A8DA0ACC();
      if (v9)
      {
        sub_1A8D8EC68(v8);
        swift_bridgeObjectRelease();
        return (char *)swift_unknownObjectRelease();
      }
      uint64_t v14 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_1A8D963D4(0, *((void *)v6 + 2) + 1, 1, v6);
      }
      unint64_t v7 = *((void *)v6 + 2);
      unint64_t v15 = *((void *)v6 + 3);
      unint64_t v4 = v7 + 1;
      if (v7 >= v15 >> 1) {
        uint64_t v6 = sub_1A8D963D4((char *)(v15 > 1), v7 + 1, 1, v6);
      }
      *((void *)v6 + 2) = v4;
      *(void *)&v6[8 * v7 + 32] = v14;
      unint64_t v10 = v41 >> 1;
      int64_t v11 = (v41 >> 1) - v40;
      if (__OFSUB__(v41 >> 1, v40))
      {
        __break(1u);
        goto LABEL_39;
      }
    }
    while (v11 > 0);
    if (v4 < 2) {
      goto LABEL_15;
    }
LABEL_19:
    BOOL result = sub_1A8D963D4(0, v4 + 1, 0, MEMORY[0x1E4FBC860]);
    int64_t v11 = *((void *)v6 + 2);
    if (v11)
    {
      a4 = result;
      unint64_t v7 = (unint64_t)(v6 + 32);
      unint64_t v19 = *((void *)v6 + 4);
      if (v19 <= 0x27)
      {
        int64_t v11 = *((void *)result + 2);
        unint64_t v10 = *((void *)result + 3);
        unint64_t v4 = v11 + 1;
        if (v11 < v10 >> 1) {
          goto LABEL_22;
        }
        goto LABEL_41;
      }
      unint64_t v21 = *((void *)result + 2);
      unint64_t v22 = *((void *)result + 3);
      unint64_t v23 = v22 >> 1;
      unint64_t v24 = v21 + 1;
      if (v19 <= 0x4F)
      {
        if (v23 <= v21)
        {
          unint64_t v30 = v21 + 1;
          unint64_t v37 = *((void *)result + 2);
          BOOL result = sub_1A8D963D4((char *)(v22 > 1), v21 + 1, 1, result);
          unint64_t v21 = v37;
          unint64_t v24 = v30;
          a4 = result;
        }
        *((void *)a4 + 2) = v24;
        *(void *)&a4[8 * v21 + 32] = 1;
        unint64_t v22 = *((void *)v6 + 2);
        if (!v22)
        {
          __break(1u);
          goto LABEL_45;
        }
        unint64_t v22 = *(void *)v7 - 40;
        if (*(void *)v7 >= 0x28uLL)
        {
LABEL_34:
          unint64_t v25 = *((void *)a4 + 3);
          unint64_t v26 = v21 + 2;
          if (v24 >= v25 >> 1)
          {
            unint64_t v33 = v22;
            unint64_t v36 = v24;
            uint64_t v29 = sub_1A8D963D4((char *)(v25 > 1), v21 + 2, 1, a4);
            unint64_t v22 = v33;
            unint64_t v24 = v36;
            a4 = v29;
          }
          *((void *)a4 + 2) = v26;
          *(void *)&a4[8 * v24 + 32] = v22;
          goto LABEL_37;
        }
        __break(1u);
      }
      if (v23 > v21)
      {
LABEL_32:
        *((void *)a4 + 2) = v24;
        *(void *)&a4[8 * v21 + 32] = 2;
        if (*((void *)v6 + 2))
        {
          unint64_t v22 = *(void *)v7 - 80;
          if (*(void *)v7 >= 0x50uLL) {
            goto LABEL_34;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_48;
      }
LABEL_45:
      unint64_t v31 = v24;
      unint64_t v38 = v21;
      BOOL result = sub_1A8D963D4((char *)(v22 > 1), v24, 1, a4);
      unint64_t v21 = v38;
      unint64_t v24 = v31;
      a4 = result;
      goto LABEL_32;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    int64_t v34 = v11;
    long long v27 = sub_1A8D963D4((char *)(v10 > 1), v4, 1, a4);
    int64_t v11 = v34;
    a4 = v27;
LABEL_22:
    *((void *)a4 + 2) = v4;
    *(void *)&a4[8 * v11 + 32] = 0;
    uint64_t v20 = *((void *)v6 + 2);
    if (v20)
    {
      uint64_t v20 = *(void *)v7;
      unint64_t v18 = *((void *)a4 + 3);
      v11 += 2;
      if (v4 < v18 >> 1)
      {
LABEL_24:
        *((void *)a4 + 2) = v11;
        *(void *)&a4[8 * v4 + 32] = v20;
LABEL_37:
        unint64_t v39 = a4;
        sub_1A8DE8ECC((uint64_t)v6, v7, *((void *)v6 + 2) != 0, (2 * *((void *)v6 + 2)) | 1);
        swift_bridgeObjectRelease();
        sub_1A8D8EC68(v8);
        swift_unknownObjectRelease();
        return v39;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v32 = v20;
    int64_t v35 = v11;
    unint64_t v28 = sub_1A8D963D4((char *)(v18 > 1), v11, 1, a4);
    uint64_t v20 = v32;
    int64_t v11 = v35;
    a4 = v28;
    goto LABEL_24;
  }
  unint64_t v4 = *(void *)(MEMORY[0x1E4FBC860] + 16);
  if (v4 >= 2) {
    goto LABEL_19;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  sub_1A8D8EC14();
  swift_allocError();
  *unint64_t v17 = 2;
  swift_willThrow();
  sub_1A8D8EC68(v8);
  return (char *)swift_unknownObjectRelease();
}

uint64_t sub_1A8DA14A8(unint64_t a1, char **a2)
{
  if (a1)
  {
    unint64_t v4 = __clz(a1);
    uint64_t v5 = *a2;
    if (v4 - 57 >= 7)
    {
      uint64_t v6 = (((37 * (70 - v4)) >> 8)
          + (((70 - v4 - ((unsigned __int16)(37 * (70 - v4)) >> 8)) & 0xFE) >> 1)) >> 2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_1A8D96298(0, *((void *)v5 + 2) + 1, 1, v5);
      }
      uint64_t v7 = 7 * v6 - 7;
      uint64_t v8 = v6;
      while (v8 <= v6)
      {
        unint64_t v10 = *((void *)v5 + 2);
        unint64_t v9 = *((void *)v5 + 3);
        if (v10 >= v9 >> 1) {
          uint64_t v5 = sub_1A8D96298((char *)(v9 > 1), v10 + 1, 1, v5);
        }
        --v8;
        *((void *)v5 + 2) = v10 + 1;
        v5[v10 + 32] = (a1 >> v7) | 0x80;
        v7 -= 7;
        if (v8 == 1) {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_17:
      *a2 = v5;
    }
    char v15 = a1 & 0x7F;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1A8D96298(0, *((void *)v5 + 2) + 1, 1, v5);
      uint64_t v5 = (char *)result;
    }
    unint64_t v13 = *((void *)v5 + 2);
    unint64_t v16 = *((void *)v5 + 3);
    unint64_t v14 = v13 + 1;
    if (v13 >= v16 >> 1)
    {
      uint64_t result = (uint64_t)sub_1A8D96298((char *)(v16 > 1), v13 + 1, 1, v5);
      uint64_t v5 = (char *)result;
    }
  }
  else
  {
    uint64_t v5 = *a2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1A8D96298(0, *((void *)v5 + 2) + 1, 1, v5);
      uint64_t v5 = (char *)result;
    }
    unint64_t v13 = *((void *)v5 + 2);
    unint64_t v12 = *((void *)v5 + 3);
    unint64_t v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      uint64_t result = (uint64_t)sub_1A8D96298((char *)(v12 > 1), v13 + 1, 1, v5);
      uint64_t v5 = (char *)result;
    }
    char v15 = 0;
  }
  *((void *)v5 + 2) = v14;
  v5[v13 + 32] = v15;
  *a2 = v5;
  return result;
}

ValueMetadata *_s20ASN1ObjectIdentifierVMa()
{
  return &_s20ASN1ObjectIdentifierVN;
}

ValueMetadata *type metadata accessor for P256()
{
  return &type metadata for P256;
}

ValueMetadata *type metadata accessor for P384()
{
  return &type metadata for P384;
}

ValueMetadata *type metadata accessor for P521()
{
  return &type metadata for P521;
}

uint64_t static HMAC.isValidAuthenticationCode<A>(_:authenticating:using:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a2;
  uint64_t v13 = type metadata accessor for HashedAuthenticationCode();
  uint64_t v31 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  char v15 = (char *)&v25 - v14;
  uint64_t v16 = type metadata accessor for HMAC();
  uint64_t v30 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  unint64_t v18 = (char *)&v25 - v17;
  uint64_t v33 = *a3;
  swift_retain();
  uint64_t v26 = a4;
  uint64_t v28 = a6;
  HMAC.init(key:)(&v33, a4, a6);
  uint64_t v19 = v29;
  uint64_t v27 = a5;
  uint64_t v29 = a7;
  HMAC.update<A>(data:)(v19, v16, a5, a7);
  HMAC.finalize()(v16, v15);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A8DE9390();
  uint64_t v20 = v33;
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
  if (v20 == v32)
  {
    unint64_t v21 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    MEMORY[0x1F4188790](v21);
    uint64_t v22 = v27;
    *(&v25 - 6) = v26;
    *(&v25 - 5) = v22;
    uint64_t v23 = v29;
    *(&v25 - 4) = v28;
    *(&v25 - 3) = v23;
    *(&v25 - 2) = (uint64_t)v15;
    sub_1A8DE9390();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v16);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v13);
    return v33;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v16);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v13);
    return 0;
  }
}

uint64_t sub_1A8DA1A18@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a2 - result;
  if (!result) {
    uint64_t v3 = 0;
  }
  *a3 = v3;
  return result;
}

uint64_t sub_1A8DA1A2C()
{
  return HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
}

uint64_t sub_1A8DA1AAC@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  if (a2)
  {
    if (result)
    {
      uint64_t result = cc_cmp_safe();
      *a3 = result == 0;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DA1B00@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1A8DA1AAC(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1A8DA1B1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1A8DA1A18(a1, a2, a3);
}

uint64_t static Digest.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A8DCC05C(a1, a2, a3, a3, *(void *)(a4 + 8), *(void *)(a4 + 8));
}

uint64_t static Digest.== infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = a3;
  uint64_t v41 = a5;
  uint64_t v42 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1A8DE9910();
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  unint64_t v39 = (char *)&v36 - v11;
  uint64_t v37 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  unint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v36 - v19;
  uint64_t v43 = a6;
  sub_1A8DE92B0();
  uint64_t v21 = sub_1A8DE9840();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v20, v14);
  if (v21 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v13, a2, a4);
    uint64_t v33 = sub_1A8DE9520();
    unint64_t v35 = v34;
    v44[0] = v33;
    v44[1] = v34;
    char v32 = sub_1A8DCC05C(v42, v44, v40, MEMORY[0x1E4F277C0], *(void *)(v41 + 8), MEMORY[0x1E4F277B0]);
    sub_1A8D8BD58(v33, v35);
    return v32 & 1;
  }
  uint64_t v23 = v41;
  uint64_t v24 = v42;
  sub_1A8DE92B0();
  uint64_t v25 = v39;
  sub_1A8DE9870();
  v22(v18, v14);
  uint64_t v26 = AssociatedTypeWitness;
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, AssociatedTypeWitness);
  if (result != 1)
  {
    uint64_t v29 = *(void *)(v23 + 8);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v31 = v39;
    char v32 = sub_1A8DCC05C(v24, v39, v40, v26, v29, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v26);
    return v32 & 1;
  }
  __break(1u);
  return result;
}

uint64_t Digest.description.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1A8DE9C30();
  uint64_t v16 = v6;
  sub_1A8DE9680();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  uint64_t result = sub_1A8DE97E0();
  uint64_t v8 = *(void *)(result + 16);
  if (v8 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  size_t v9 = 2 * v8;
  if (2 * v8 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  if (v8)
  {
    uint64_t v11 = sub_1A8DE97D0();
    *(void *)(v11 + 16) = v9;
    bzero((void *)(v11 + 32), v9);
  }
  else
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = 0;
  uint64_t v14 = v11;
  sub_1A8DE97C0();
  sub_1A8D96AEC(v10, &v14, &v13);
  swift_bridgeObjectRelease();
  sub_1A8DE97C0();
  sub_1A8DE9650();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A8DE9680();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t dispatch thunk of static Digest.byteCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t static AES.permute<A>(_:key:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1A8DA2338(a1, a2, a3, a4, 0);
}

uint64_t sub_1A8DA2134(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a2;
  if (sub_1A8DE9840() != 16)
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v16 = 1;
LABEL_11:
    *(unsigned char *)(v16 + 4) = 1;
    return swift_willThrow();
  }
  uint64_t v11 = swift_beginAccess();
  unint64_t v12 = *(void *)(v10 + 16);
  if (v12 >> 60) {
    __break(1u);
  }
  uint64_t v13 = 8 * v12;
  if (v13 != 128 && v13 != 192 && v13 != 256)
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v16 = 0;
    goto LABEL_11;
  }
  int v14 = a3 & 1;
  MEMORY[0x1F4188790](v11);
  uint64_t result = sub_1A8DE95F0();
  if (!v5 && (LOBYTE(v17[0]) == 2 || (v17[0] & 1) != 0))
  {
    v17[0] = 0;
    v17[1] = 0;
    return sub_1A8DA23C4((char *)v17, (uint64_t)v18, a1, v10, v14, a4, a5);
  }
  return result;
}

uint64_t static AES.inversePermute<A>(_:key:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1A8DA2338(a1, a2, a3, a4, 1);
}

uint64_t sub_1A8DA2338(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = *a2;
  return sub_1A8DA2134(a1, &v6, a5, a3, a4);
}

uint64_t sub_1A8DA2374@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unsigned char *a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *a1 + a1[1];
  if (!*a1) {
    uint64_t v7 = 0;
  }
  uint64_t v9 = a2;
  uint64_t result = sub_1A8DA277C(v6, v7, &v9, a3 & 1);
  if (!v4) {
    *a4 = 0;
  }
  return result;
}

uint64_t sub_1A8DA23C4(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v35 = a4;
  LODWORD(v32) = a5;
  uint64_t v38 = a7;
  uint64_t v11 = *(void (**)(char *, uint64_t))(a7 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v41 = AssociatedTypeWitness;
  uint64_t v13 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v37 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v32 - v16;
  uint64_t v18 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a2;
  uint64_t v21 = a2 - (void)a1;
  if (!a1) {
    uint64_t v21 = 0;
  }
  uint64_t v39 = v21;
  uint64_t v22 = v18 + 16;
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v42(v20, a3, a6);
  uint64_t v23 = sub_1A8DE9840();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v24 = (char *)(v18 + 8);
  uint64_t v33 = v25;
  v25(v20, a6);
  if (v39 != v23)
  {
    __break(1u);
    goto LABEL_11;
  }
  char v26 = v32 & 1;
  uint64_t v39 = a3;
  v42(v20, a3, a6);
  uint64_t v27 = v34;
  sub_1A8DE9990();
  v33(v20, a6);
  uint64_t v28 = v36;
  uint64_t v44 = v35;
  uint64_t result = sub_1A8DA277C((uint64_t)a1, v27, &v44, v26);
  if (!v28)
  {
    uint64_t v32 = 0;
    uint64_t v36 = v22;
    v42(v20, v39, a6);
    uint64_t v35 = (uint64_t)v11;
    sub_1A8DE9830();
    uint64_t v11 = v33;
    v33(v20, a6);
    uint64_t v24 = (char *)v34;
    if (a1)
    {
      if (v34) {
        goto LABEL_11;
      }
    }
    else
    {
      if (!v34) {
        return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v17, v41);
      }
      a1 = 0;
    }
    do
    {
      do
      {
        char v30 = *a1++;
        (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v17, v41);
        char v43 = v30;
        uint64_t v31 = v39;
        sub_1A8DE9620();
        v42(v20, v31, a6);
        sub_1A8DE9850();
        v11(v20, a6);
      }
      while (!v24);
LABEL_11:
      ;
    }
    while (a1 != v24);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v17, v41);
  }
  return result;
}

uint64_t sub_1A8DA275C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1A8DA2374(a1, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24), a2);
}

uint64_t sub_1A8DA277C(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v7 = *a3;
  uint64_t result = swift_beginAccess();
  unint64_t v9 = *(void *)(v7 + 16);
  if (v9 >> 60)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = 8 * v9;
  if (v10 != 128 && v10 != 192 && v10 != 256) {
    goto LABEL_16;
  }
  if (!a1 || a2 - a1 != 16)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((a4 & 1) == 0)
  {
    if (ccaes_ecb_encrypt_mode()) {
      goto LABEL_11;
    }
    __break(1u);
  }
  uint64_t result = ccaes_ecb_decrypt_mode();
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }
LABEL_11:
  uint64_t result = ccecb_one_shot();
  if (result)
  {
    int v11 = result;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = v11;
    *(unsigned char *)(v12 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t HPKE.AEAD.keyByteCount.getter()
{
  uint64_t result = 16;
  switch(*v0)
  {
    case 1:
    case 2:
      uint64_t result = 32;
      break;
    case 3:
      sub_1A8DE9B00();
      __break(1u);
      JUMPOUT(0x1A8DA2920);
    default:
      return result;
  }
  return result;
}

uint64_t HPKE.AEAD.nonceByteCount.getter()
{
  if (*v0 <= 2u) {
    return 12;
  }
  uint64_t result = sub_1A8DE9B00();
  __break(1u);
  return result;
}

uint64_t sub_1A8DA29A8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11 = v10;
  unint64_t v17 = a4 >> 62;
  if (*(unsigned char *)v9 == 2)
  {
    *(void *)&long long v43 = *a5;
    switch(v17)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(a3), a3))
        {
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        uint64_t v9 = HIDWORD(a3) - (int)a3;
LABEL_11:
        sub_1A8D8BE04(a3, a4);
        if (v9 == 12)
        {
LABEL_12:
          uint64_t v9 = sub_1A8D924B0(a3, a4);
          unint64_t v11 = v20;
          *(void *)&long long v44 = v9;
          *((void *)&v44 + 1) = v20;
          uint64_t v21 = static ChaChaPoly.seal<A, B>(_:using:nonce:authenticating:)(a1, (uint64_t *)&v43, &v44, a2, a6, a7, a8, a9);
          unint64_t v23 = v22;
          uint64_t result = sub_1A8D8BD58(v9, v11);
          if (!v10)
          {
            if (v17)
            {
              if (v17 == 1)
              {
                if (__OFSUB__(HIDWORD(a3), a3)) {
                  goto LABEL_51;
                }
                uint64_t v25 = HIDWORD(a3) - (int)a3;
              }
              else
              {
                uint64_t v34 = *(void *)(a3 + 16);
                uint64_t v33 = *(void *)(a3 + 24);
                uint64_t v25 = v33 - v34;
                if (__OFSUB__(v33, v34))
                {
LABEL_53:
                  __break(1u);
                  goto LABEL_54;
                }
              }
            }
            else
            {
              uint64_t v25 = BYTE6(a4);
            }
            uint64_t v35 = 0;
            switch(v23 >> 62)
            {
              case 1uLL:
                uint64_t v35 = v21 >> 32;
                break;
              case 2uLL:
                uint64_t v35 = *(void *)(v21 + 24);
                break;
              case 3uLL:
                break;
              default:
                uint64_t v35 = BYTE6(v23);
                break;
            }
            if (v35 >= v25)
            {
              uint64_t v39 = sub_1A8DE9470();
              sub_1A8D8BD58(v21, v23);
              return v39;
            }
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
            goto LABEL_52;
          }
        }
        else
        {
LABEL_21:
          sub_1A8D8E240();
          swift_allocError();
          *(_DWORD *)uint64_t v28 = 1;
          *(unsigned char *)(v28 + 4) = 1;
          swift_willThrow();
          uint64_t result = sub_1A8D8BD58(a3, a4);
        }
        break;
      case 2uLL:
        uint64_t v19 = *(void *)(a3 + 16);
        uint64_t v18 = *(void *)(a3 + 24);
        uint64_t v9 = v18 - v19;
        if (!__OFSUB__(v18, v19)) {
          goto LABEL_11;
        }
        goto LABEL_46;
      case 3uLL:
        goto LABEL_21;
      default:
        if (BYTE6(a4) != 12) {
          goto LABEL_21;
        }
        goto LABEL_12;
    }
  }
  else
  {
    uint64_t v46 = *a5;
    switch(v17)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(a3), a3)) {
          goto LABEL_47;
        }
        uint64_t v9 = HIDWORD(a3) - (int)a3;
LABEL_20:
        sub_1A8D8BE04(a3, a4);
        if (v9 < 12) {
          goto LABEL_21;
        }
LABEL_23:
        uint64_t v29 = sub_1A8D924B0(a3, a4);
        unint64_t v31 = v30;
        *(void *)&long long v43 = v29;
        *((void *)&v43 + 1) = v30;
        static AES.GCM.seal<A, B>(_:using:nonce:authenticating:)(a1, &v46, &v43, a2, a6, a7, a8, a9, &v44);
        uint64_t result = sub_1A8D8BD58(v29, v31);
        if (v10) {
          return result;
        }
        uint64_t v9 = *((void *)&v44 + 1);
        unint64_t v11 = v44;
        if (v45 != 12) {
          goto LABEL_55;
        }
        if (v17)
        {
          if (v17 == 1)
          {
            if (__OFSUB__(HIDWORD(a3), a3))
            {
LABEL_52:
              __break(1u);
              goto LABEL_53;
            }
            uint64_t v32 = HIDWORD(a3) - (int)a3;
          }
          else
          {
            uint64_t v37 = *(void *)(a3 + 16);
            uint64_t v36 = *(void *)(a3 + 24);
            uint64_t v32 = v36 - v37;
            if (__OFSUB__(v36, v37))
            {
LABEL_54:
              __break(1u);
LABEL_55:
              sub_1A8D8BD58(v11, v9);
              __break(1u);
              JUMPOUT(0x1A8DA2D78);
            }
          }
        }
        else
        {
          uint64_t v32 = BYTE6(a4);
        }
        uint64_t v38 = 0;
        switch(*((void *)&v44 + 1) >> 62)
        {
          case 1:
            uint64_t v38 = (uint64_t)v44 >> 32;
            break;
          case 2:
            uint64_t v38 = *(void *)(v44 + 24);
            break;
          case 3:
            break;
          default:
            uint64_t v38 = BYTE14(v44);
            break;
        }
        if (v38 < v32) {
          goto LABEL_50;
        }
        uint64_t v40 = sub_1A8DE9470();
        sub_1A8D8BD58(v11, v9);
        uint64_t result = v40;
        break;
      case 2uLL:
        uint64_t v27 = *(void *)(a3 + 16);
        uint64_t v26 = *(void *)(a3 + 24);
        uint64_t v9 = v26 - v27;
        if (!__OFSUB__(v26, v27)) {
          goto LABEL_20;
        }
        goto LABEL_48;
      case 3uLL:
        goto LABEL_21;
      default:
        if (BYTE6(a4) >= 0xCuLL) {
          goto LABEL_23;
        }
        goto LABEL_21;
    }
  }
  return result;
}

void (*sub_1A8DA2DB8(void (*a1)(void, void), unint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9))(void, void)
{
  unint64_t v10 = v9;
  uint64_t v67 = a4;
  uint64_t v68 = a7;
  unint64_t v80 = a2;
  uint64_t v14 = a1;
  uint64_t v72 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v73 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = v16;
  uint64_t v71 = *(void *)(*(void *)(v16 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v69 = (char *)&v64 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v64 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v64 - v25;
  uint64_t v66 = *a5;
  unsigned int v27 = *v10;
  uint64_t v28 = v14;
  uint64_t v29 = sub_1A8DE9840();
  if (v27 >= 3) {
    goto LABEL_33;
  }
  if (v29 >= 16)
  {
    uint64_t v14 = (void (*)(void, void))a9;
    unint64_t v31 = a3;
    unint64_t v32 = a3 >> 62;
    if (v27 > 1)
    {
      uint64_t v33 = v80;
      switch((int)v32)
      {
        case 1:
          if (__OFSUB__(HIDWORD(v80), v80)) {
            goto LABEL_30;
          }
          uint64_t v35 = HIDWORD(v80) - (int)v80;
LABEL_20:
          sub_1A8D8BE04(v80, v31);
          if (v35 != 12) {
            goto LABEL_24;
          }
LABEL_21:
          uint64_t v65 = a9;
          uint64_t v47 = sub_1A8D924B0(v33, v31);
          unint64_t v49 = v48;
          uint64_t v78 = v47;
          *(void *)&long long v79 = v48;
          uint64_t v50 = v73;
          uint64_t v51 = *(void (**)(char *, void (*)(void, void), uint64_t))(v72 + 16);
          v51(v73, v28, a6);
          unint64_t v80 = v49;
          sub_1A8D8BE04(v47, v49);
          uint64_t v52 = v69;
          sub_1A8DE95A0();
          v51(v50, v28, a6);
          sub_1A8DE9590();
          uint64_t v53 = AssociatedTypeWitness;
          swift_getAssociatedConformanceWitness();
          uint64_t v54 = v76;
          uint64_t v55 = sub_1A8DB5910(&v78);
          if (v54)
          {
            uint64_t v14 = *(void (**)(void, void))(v70 + 8);
            v14(v19, v53);
            v14(v52, v53);
            uint64_t v44 = v47;
            goto LABEL_23;
          }
          uint64_t v61 = v55;
          unint64_t v62 = v56;
          unint64_t v63 = *(void (**)(char *, uint64_t))(v70 + 8);
          v63(v19, v53);
          v63(v52, v53);
          uint64_t v78 = v66;
          uint64_t v14 = (void (*)(void, void))static ChaChaPoly.open<A>(_:using:authenticating:)(v61, v62, &v78, v67, v68, v65);
          sub_1A8D8BD58(v47, v80);
          uint64_t v44 = v61;
          unint64_t v57 = v62;
          break;
        case 2:
          uint64_t v46 = *(void *)(v80 + 16);
          uint64_t v45 = *(void *)(v80 + 24);
          uint64_t v35 = v45 - v46;
          if (!__OFSUB__(v45, v46)) {
            goto LABEL_20;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_24;
        default:
          if (BYTE6(v31) != 12) {
            goto LABEL_24;
          }
          goto LABEL_21;
      }
      goto LABEL_25;
    }
    uint64_t v33 = v80;
    switch((int)v32)
    {
      case 1:
        if (!__OFSUB__(HIDWORD(v80), v80))
        {
          uint64_t v34 = HIDWORD(v80) - (int)v80;
LABEL_16:
          sub_1A8D8BE04(v80, v31);
          if (v34 < 12)
          {
LABEL_24:
            sub_1A8D8E240();
            swift_allocError();
            *(_DWORD *)uint64_t v58 = 1;
            *(unsigned char *)(v58 + 4) = 1;
            swift_willThrow();
            uint64_t v44 = v33;
            unint64_t v57 = v31;
          }
          else
          {
LABEL_17:
            uint64_t v65 = a9;
            uint64_t v38 = sub_1A8D924B0(v33, v31);
            unint64_t v40 = v39;
            v77[0] = v38;
            v77[1] = v39;
            uint64_t v14 = (void (*)(void, void))v73;
            uint64_t v41 = *(void (**)(char *, void (*)(void, void), uint64_t))(v72 + 16);
            v41(v73, v28, a6);
            unint64_t v80 = v40;
            sub_1A8D8BE04(v38, v40);
            sub_1A8DE95A0();
            v41((char *)v14, v28, a6);
            sub_1A8DE9590();
            uint64_t v42 = AssociatedTypeWitness;
            swift_getAssociatedConformanceWitness();
            uint64_t v43 = v76;
            AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)(v77, (uint64_t)v26, (uint64_t)v24, v42, v42, (uint64_t)&v78);
            if (v43)
            {
              uint64_t v44 = v38;
LABEL_23:
              unint64_t v57 = v80;
            }
            else
            {
              uint64_t v60 = v78;
              long long v76 = v79;
              v77[0] = v66;
              uint64_t v14 = (void (*)(void, void))static AES.GCM.open<A>(_:using:authenticating:)((long long *)&v78, (unint64_t *)v77, v67, v68, v65);
              sub_1A8D8BD58(v38, v80);
              unint64_t v57 = v76;
              uint64_t v44 = v60;
            }
          }
LABEL_25:
          sub_1A8D8BD58(v44, v57);
          return v14;
        }
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        break;
      case 2:
        uint64_t v37 = *(void *)(v80 + 16);
        uint64_t v36 = *(void *)(v80 + 24);
        uint64_t v34 = v36 - v37;
        if (!__OFSUB__(v36, v37)) {
          goto LABEL_16;
        }
        goto LABEL_31;
      case 3:
        goto LABEL_24;
      default:
        if (BYTE6(v31) < 0xCuLL) {
          goto LABEL_24;
        }
        goto LABEL_17;
    }
LABEL_33:
    sub_1A8DE9B00();
    __break(1u);
    JUMPOUT(0x1A8DA347CLL);
  }
  sub_1A8D8BDB0();
  swift_allocError();
  unsigned char *v30 = 4;
  swift_willThrow();
  return v14;
}

unint64_t HPKE.AEAD.value.getter()
{
  return 0xFFFF000300020001 >> (16 * *v0);
}

BOOL static HPKE.AEAD.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HPKE.AEAD.tagByteCount.getter()
{
  if (*v0 <= 2u) {
    return 16;
  }
  uint64_t result = sub_1A8DE9B00();
  __break(1u);
  return result;
}

uint64_t HPKE.AEAD.hash(into:)()
{
  return sub_1A8DE9BF0();
}

void *static HPKE.AEAD.allCases.getter()
{
  return &unk_1EFF5E8B0;
}

uint64_t HPKE.AEAD.hashValue.getter()
{
  return sub_1A8DE9C20();
}

void sub_1A8DA35C4(void *a1@<X8>)
{
  *a1 = &unk_1EFF5E8D8;
}

unint64_t sub_1A8DA35D8()
{
  unint64_t result = qword_1E97A91C8;
  if (!qword_1E97A91C8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E97A91D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A91C8);
  }
  return result;
}

unint64_t sub_1A8DA3638()
{
  unint64_t result = qword_1E97A91D8;
  if (!qword_1E97A91D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A91D8);
  }
  return result;
}

unsigned char *_s4AEADOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A8DA3758);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKE.AEAD()
{
  return &type metadata for HPKE.AEAD;
}

uint64_t sub_1A8DA3790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v68 = a2;
  uint64_t v72 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v69 = a6;
  uint64_t v67 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_1A8DE9910();
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  unint64_t v59 = (char *)&v54 - v12;
  uint64_t v70 = a4;
  uint64_t v58 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v57 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = swift_checkMetadataState();
  uint64_t v65 = *(void *)(v66 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v66);
  unint64_t v56 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v64 = (char *)&v54 - v16;
  swift_getAssociatedTypeWitness();
  uint64_t v71 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v63 = swift_getAssociatedTypeWitness();
  uint64_t v17 = sub_1A8DE9910();
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  unint64_t v62 = (char *)&v54 - v19;
  uint64_t v61 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = swift_checkMetadataState();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v54 - v27;
  uint64_t v29 = *v73;
  uint64_t v73 = a5;
  uint64_t v30 = v72;
  if (sub_1A8DE9840() != 64) {
    return 0;
  }
  uint64_t v55 = v29;
  sub_1A8DE92B0();
  uint64_t v31 = sub_1A8DE9840();
  unint64_t v32 = *(void (**)(char *, uint64_t))(v23 + 8);
  v32(v28, v22);
  if (v31 == 1)
  {
    sub_1A8DE92B0();
    uint64_t v33 = v62;
    sub_1A8DE9870();
    v32(v26, v22);
    uint64_t v34 = v63;
    uint64_t v35 = *(void *)(v63 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v63);
    if (result == 1)
    {
      __break(1u);
      goto LABEL_14;
    }
    uint64_t v79 = v34;
    unint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v78);
    (*(void (**)(uint64_t *, char *, uint64_t))(v35 + 32))(boxed_opaque_existential_1, v33, v34);
    sub_1A8D934C8(&v78, (uint64_t)v81);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v21, v30, a3);
    uint64_t v39 = sub_1A8DE97E0();
    v81[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
    v81[4] = sub_1A8DA44FC();
    v81[0] = v39;
  }
  uint64_t v40 = v70;
  uint64_t v41 = v68;
  uint64_t v42 = v66;
  uint64_t v43 = v65;
  uint64_t v44 = v64;
  sub_1A8DE92B0();
  uint64_t v45 = sub_1A8DE9840();
  uint64_t v46 = *(void (**)(char *, uint64_t))(v43 + 8);
  v46(v44, v42);
  if (v45 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v41, v40);
    uint64_t v52 = sub_1A8DE97E0();
    uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
    unint64_t AssociatedConformanceWitness = sub_1A8DA44FC();
    *(void *)&long long v78 = v52;
    goto LABEL_11;
  }
  uint64_t v47 = v56;
  sub_1A8DE92B0();
  unint64_t v48 = v59;
  sub_1A8DE9870();
  v46(v47, v42);
  uint64_t v49 = AssociatedTypeWitness;
  uint64_t v50 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, AssociatedTypeWitness);
  if (result != 1)
  {
    uint64_t v76 = v49;
    uint64_t v77 = swift_getAssociatedConformanceWitness();
    uint64_t v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v75);
    (*(void (**)(uint64_t *, char *, uint64_t))(v50 + 32))(v51, v48, v49);
    sub_1A8D934C8(&v75, (uint64_t)&v78);
LABEL_11:
    sub_1A8D8C154((uint64_t)&v78, (uint64_t)&v75);
    uint64_t v53 = __swift_project_boxed_opaque_existential_1(&v75, v76);
    MEMORY[0x1F4188790](v53);
    *(&v54 - 2) = (uint64_t)v81;
    *(&v54 - 1) = v55;
    sub_1A8DE9390();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
    uint64_t v38 = v74;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
    return v38;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1A8DA4030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = v3;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1A8DE9910();
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v38 = (char *)&v34 - v11;
  uint64_t v36 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v35 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_checkMetadataState();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v40 = *v4;
  uint64_t v20 = a1;
  uint64_t v42 = a3;
  sub_1A8DE92B0();
  uint64_t v37 = v8;
  uint64_t v21 = sub_1A8DE9840();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v19, v13);
  if (v21 == 1)
  {
    sub_1A8DE92B0();
    uint64_t v23 = v38;
    sub_1A8DE9870();
    v22(v17, v13);
    uint64_t v24 = AssociatedTypeWitness;
    uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, AssociatedTypeWitness);
    if (result == 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v44 = v24;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v43);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
    sub_1A8D934C8(&v43, (uint64_t)v48);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, v20, a2);
    uint64_t v28 = sub_1A8DE97E0();
    v48[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
    v48[4] = sub_1A8DA44FC();
    v48[0] = v28;
  }
  uint64_t v30 = v40;
  uint64_t v29 = v41;
  sub_1A8DE9380();
  swift_allocObject();
  uint64_t v31 = sub_1A8DE9350();
  *(void *)&long long v43 = 0x4000000000;
  *((void *)&v43 + 1) = v31;
  sub_1A8DA5CDC((int *)&v43, 0);
  uint64_t v46 = v43;
  unint64_t v47 = *((void *)&v43 + 1) | 0x4000000000000000;
  uint64_t v32 = sub_1A8DE97D0();
  *(void *)(v32 + 16) = 32;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  uint64_t v49 = (char *)v32;
  swift_beginAccess();
  uint64_t v33 = v30 + 32 + *(void *)(v30 + 16);
  swift_retain();
  sub_1A8DA4680(v30 + 32, v33, &v49, v48);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  swift_release();
  if (v29)
  {
    swift_bridgeObjectRelease();
    sub_1A8D8BD58(v46, v47);
  }
  else
  {
    uint64_t v33 = v46;
    swift_bridgeObjectRelease();
  }
  return v33;
}

unint64_t sub_1A8DA44FC()
{
  unint64_t result = qword_1EB476948;
  if (!qword_1EB476948)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB476940);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476948);
  }
  return result;
}

uint64_t sub_1A8DA4558(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1A8DE9390();
}

uint64_t sub_1A8DA45FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  uint64_t result = ccsha512_di();
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (!a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a1)
  {
    uint64_t result = cced25519_verify();
    *a3 = result == 0;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1A8DA4680(uint64_t result, uint64_t a2, char **a3, void *a4)
{
  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = ccsha512_di();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  unsigned int v6 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unsigned int v6 = sub_1A8D96298(0, *((void *)v6 + 2), 0, v6);
  }
  *a3 = v6;
  int pub = cced25519_make_pub();
  if (pub)
  {
    int v9 = pub;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = v9;
LABEL_9:
    *(unsigned char *)(v10 + 4) = 0;
    return swift_willThrow();
  }
  uint64_t v11 = __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  MEMORY[0x1F4188790](v11);
  uint64_t result = sub_1A8DE9390();
  if (v12)
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = v12;
    goto LABEL_9;
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1A8DA4874(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v7 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_1A8DEAA40;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v9 = v3 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_15;
      }
      if (v9 < (int)v3) {
        goto LABEL_19;
      }
      if (sub_1A8DE9340() && __OFSUB__((int)v3, sub_1A8DE9370())) {
        goto LABEL_20;
      }
      sub_1A8DE9380();
      swift_allocObject();
      uint64_t v10 = sub_1A8DE9320();
      swift_release();
      uint64_t v7 = v10;
      uint64_t v9 = v3 >> 32;
LABEL_15:
      if (v9 < (int)v3)
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
      }
      uint64_t result = sub_1A8DA4BB4((int)v3, v7, a2);
      *a1 = v3;
      a1[1] = v7 | 0x4000000000000000;
      return result;
    case 2uLL:
      uint64_t v11 = *a1;
      uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1A8DE93C0();
      uint64_t result = sub_1A8DA4BB4(*(void *)(v11 + 16), v13, a2);
      *a1 = v11;
      a1[1] = v13 | 0x8000000000000000;
      return result;
    case 3uLL:
      if (!ccsha512_di()) {
        goto LABEL_23;
      }
      if (!a2) {
        goto LABEL_24;
      }
      return cced25519_sign();
    default:
      LOWORD(v12) = a1[1];
      BYTE2(v12) = BYTE2(a1[1]);
      HIBYTE(v12) = BYTE3(a1[1]);
      __int16 v14 = WORD2(a1[1]);
      unsigned __int8 v15 = BYTE6(a1[1]);
      if (!ccsha512_di())
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        JUMPOUT(0x1A8DA4B6CLL);
      }
      if (!a2) {
        goto LABEL_22;
      }
      uint64_t result = cced25519_sign();
      *a1 = v3;
      a1[1] = v12 | ((unint64_t)v14 << 32) | ((unint64_t)HIBYTE(v14) << 40) | ((unint64_t)v15 << 48);
      return result;
  }
}

uint64_t sub_1A8DA4B7C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_1A8DA4874(*(uint64_t **)(v2 + 16), a1);
  *a2 = result;
  return result;
}

uint64_t sub_1A8DA4BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1A8DE9340();
  if (!result) {
    goto LABEL_7;
  }
  uint64_t result = sub_1A8DE9370();
  if (__OFSUB__(a1, result))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  sub_1A8DE9360();
  uint64_t result = ccsha512_di();
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a3) {
    return cced25519_sign();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1A8DA4C5C(uint64_t a1, uint64_t a2)
{
  return sub_1A8DA4558(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1A8DA4C78@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1A8DA45FC(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1A8DA4C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v68 = a2;
  uint64_t v72 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v69 = a6;
  uint64_t v67 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_1A8DE9910();
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  unint64_t v59 = (char *)&v54 - v12;
  uint64_t v70 = a4;
  uint64_t v58 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v57 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = swift_checkMetadataState();
  uint64_t v65 = *(void *)(v66 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v66);
  unint64_t v56 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v64 = (char *)&v54 - v16;
  swift_getAssociatedTypeWitness();
  uint64_t v71 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v63 = swift_getAssociatedTypeWitness();
  uint64_t v17 = sub_1A8DE9910();
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  unint64_t v62 = (char *)&v54 - v19;
  uint64_t v61 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = swift_checkMetadataState();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v54 - v27;
  uint64_t v29 = *v73;
  uint64_t v73 = a5;
  uint64_t v30 = v72;
  if (sub_1A8DE9840() != 114) {
    return 0;
  }
  uint64_t v55 = v29;
  sub_1A8DE92B0();
  uint64_t v31 = sub_1A8DE9840();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v23 + 8);
  v32(v28, v22);
  if (v31 == 1)
  {
    sub_1A8DE92B0();
    uint64_t v33 = v62;
    sub_1A8DE9870();
    v32(v26, v22);
    uint64_t v34 = v63;
    uint64_t v35 = *(void *)(v63 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v63);
    if (result == 1)
    {
      __break(1u);
      goto LABEL_14;
    }
    uint64_t v79 = v34;
    unint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v78);
    (*(void (**)(uint64_t *, char *, uint64_t))(v35 + 32))(boxed_opaque_existential_1, v33, v34);
    sub_1A8D934C8(&v78, (uint64_t)v81);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v21, v30, a3);
    uint64_t v39 = sub_1A8DE97E0();
    v81[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
    v81[4] = sub_1A8DA44FC();
    v81[0] = v39;
  }
  uint64_t v40 = v70;
  uint64_t v41 = v68;
  uint64_t v42 = v66;
  uint64_t v43 = v65;
  uint64_t v44 = v64;
  sub_1A8DE92B0();
  uint64_t v45 = sub_1A8DE9840();
  uint64_t v46 = *(void (**)(char *, uint64_t))(v43 + 8);
  v46(v44, v42);
  if (v45 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v41, v40);
    uint64_t v52 = sub_1A8DE97E0();
    uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
    unint64_t AssociatedConformanceWitness = sub_1A8DA44FC();
    *(void *)&long long v78 = v52;
    goto LABEL_11;
  }
  unint64_t v47 = v56;
  sub_1A8DE92B0();
  unint64_t v48 = v59;
  sub_1A8DE9870();
  v46(v47, v42);
  uint64_t v49 = AssociatedTypeWitness;
  uint64_t v50 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, AssociatedTypeWitness);
  if (result != 1)
  {
    uint64_t v76 = v49;
    uint64_t v77 = swift_getAssociatedConformanceWitness();
    uint64_t v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v75);
    (*(void (**)(uint64_t *, char *, uint64_t))(v50 + 32))(v51, v48, v49);
    sub_1A8D934C8(&v75, (uint64_t)&v78);
LABEL_11:
    sub_1A8D8C154((uint64_t)&v78, (uint64_t)&v75);
    uint64_t v53 = __swift_project_boxed_opaque_existential_1(&v75, v76);
    MEMORY[0x1F4188790](v53);
    *(&v54 - 2) = (uint64_t)v81;
    *(&v54 - 1) = v55;
    sub_1A8DE9390();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
    uint64_t v38 = v74;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
    return v38;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1A8DA5538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = v3;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1A8DE9910();
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v38 = (char *)&v34 - v11;
  uint64_t v36 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v35 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_checkMetadataState();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v40 = *v4;
  uint64_t v20 = a1;
  uint64_t v42 = a3;
  sub_1A8DE92B0();
  uint64_t v37 = v8;
  uint64_t v21 = sub_1A8DE9840();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v19, v13);
  if (v21 == 1)
  {
    sub_1A8DE92B0();
    uint64_t v23 = v38;
    sub_1A8DE9870();
    v22(v17, v13);
    uint64_t v24 = AssociatedTypeWitness;
    uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, AssociatedTypeWitness);
    if (result == 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v44 = v24;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v43);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
    sub_1A8D934C8(&v43, (uint64_t)v48);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, v20, a2);
    uint64_t v28 = sub_1A8DE97E0();
    v48[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
    v48[4] = sub_1A8DA44FC();
    v48[0] = v28;
  }
  uint64_t v30 = v40;
  uint64_t v29 = v41;
  sub_1A8DE9380();
  swift_allocObject();
  uint64_t v31 = sub_1A8DE9350();
  *(void *)&long long v43 = 0x7200000000;
  *((void *)&v43 + 1) = v31;
  sub_1A8DA5CDC((int *)&v43, 0);
  uint64_t v46 = v43;
  unint64_t v47 = *((void *)&v43 + 1) | 0x4000000000000000;
  uint64_t v32 = sub_1A8DE97D0();
  *(void *)(v32 + 16) = 57;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  *(_OWORD *)(v32 + 64) = 0u;
  *(_OWORD *)(v32 + 73) = 0u;
  uint64_t v49 = (char *)v32;
  swift_beginAccess();
  uint64_t v33 = v30 + 32 + *(void *)(v30 + 16);
  swift_retain();
  sub_1A8DA5B08(v30 + 32, v33, &v49, v48);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  swift_release();
  if (v29)
  {
    swift_bridgeObjectRelease();
    sub_1A8D8BD58(v46, v47);
  }
  else
  {
    uint64_t v33 = v46;
    swift_bridgeObjectRelease();
  }
  return v33;
}

uint64_t sub_1A8DA5A0C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1A8DE9390();
}

uint64_t sub_1A8DA5AB0@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  if (a2)
  {
    if (result)
    {
      uint64_t result = cced448_verify();
      *a3 = result == 0;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DA5B08(uint64_t a1, uint64_t a2, char **a3, void *a4)
{
  if (!a1)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (!ccrng()) {
    goto LABEL_9;
  }
  unsigned int v6 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unsigned int v6 = sub_1A8D96298(0, *((void *)v6 + 2), 0, v6);
  }
  *a3 = v6;
  int pub = cced448_make_pub();
  if (pub)
  {
    int v9 = pub;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = v9;
    *(unsigned char *)(v10 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    uint64_t v11 = __swift_project_boxed_opaque_existential_1(a4, a4[3]);
    MEMORY[0x1F4188790](v11);
    return sub_1A8DE9390();
  }
}

char *sub_1A8DA5CDC(int *a1, int a2)
{
  uint64_t result = (char *)sub_1A8DE93F0();
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if ((int)v6 < (int)v5)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = (char *)sub_1A8DE9340();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v7 = result;
  uint64_t result = (char *)sub_1A8DE9370();
  uint64_t v8 = v5 - (void)result;
  if (__OFSUB__(v5, result))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  int64_t v9 = v6 - v5;
  uint64_t v10 = sub_1A8DE9360();
  if (v10 >= v9) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = v10;
  }

  return (char *)memset(&v7[v8], a2, v11);
}

uint64_t sub_1A8DA5D70(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v7 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_1A8DEAA40;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v9 = v3 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_15;
      }
      if (v9 < (int)v3) {
        goto LABEL_19;
      }
      if (sub_1A8DE9340() && __OFSUB__((int)v3, sub_1A8DE9370())) {
        goto LABEL_20;
      }
      sub_1A8DE9380();
      swift_allocObject();
      uint64_t v10 = sub_1A8DE9320();
      swift_release();
      uint64_t v7 = v10;
      uint64_t v9 = v3 >> 32;
LABEL_15:
      if (v9 < (int)v3)
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
      }
      uint64_t result = sub_1A8DA60D8((int)v3, v7, a2);
      *a1 = v3;
      a1[1] = v7 | 0x4000000000000000;
      return result;
    case 2uLL:
      uint64_t v11 = *a1;
      uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1A8DE93C0();
      uint64_t result = sub_1A8DA60D8(*(void *)(v11 + 16), v13, a2);
      *a1 = v11;
      a1[1] = v13 | 0x8000000000000000;
      return result;
    case 3uLL:
      if (!ccrng()) {
        goto LABEL_23;
      }
      if (!a2) {
        goto LABEL_24;
      }
      return cced448_sign();
    default:
      LOWORD(v12) = a1[1];
      BYTE2(v12) = BYTE2(a1[1]);
      HIBYTE(v12) = BYTE3(a1[1]);
      __int16 v14 = WORD2(a1[1]);
      unsigned __int8 v15 = BYTE6(a1[1]);
      if (!ccrng())
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        JUMPOUT(0x1A8DA6090);
      }
      if (!a2) {
        goto LABEL_22;
      }
      uint64_t result = cced448_sign();
      *a1 = v3;
      a1[1] = v12 | ((unint64_t)v14 << 32) | ((unint64_t)HIBYTE(v14) << 40) | ((unint64_t)v15 << 48);
      return result;
  }
}

uint64_t sub_1A8DA60A0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_1A8DA5D70(*(uint64_t **)(v2 + 16), a1);
  *a2 = result;
  return result;
}

uint64_t sub_1A8DA60D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_1A8DE9340()) {
    goto LABEL_7;
  }
  if (__OFSUB__(a1, sub_1A8DE9370()))
  {
    __break(1u);
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  sub_1A8DE9360();
  if (!ccrng())
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (!a3) {
    goto LABEL_9;
  }
  return cced448_sign();
}

uint64_t sub_1A8DA61C8(uint64_t a1, uint64_t a2)
{
  return sub_1A8DA5A0C(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1A8DA61E4@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1A8DA5AB0(a1, *(void *)(v2 + 16), a2);
}

double AES.CCM.Nonce.init()@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = sub_1A8D9CBEC(12);
  sub_1A8DA6274(v2, &v4);
  double result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t sub_1A8DA6274@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_beginAccess();
  if (*(uint64_t *)(a1 + 16) < 1)
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 1;
    *(unsigned char *)(v10 + 4) = 1;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    v12[3] = &type metadata for SecureBytes;
    void v12[4] = sub_1A8D9B260();
    v12[0] = a1;
    uint64_t v4 = *__swift_project_boxed_opaque_existential_1(v12, (uint64_t)&type metadata for SecureBytes);
    swift_beginAccess();
    uint64_t v5 = (unsigned char *)(v4 + 32);
    uint64_t v6 = (unsigned char *)(v4 + 32 + *(void *)(v4 + 16));
    swift_retain_n();
    sub_1A8D92C5C(v5, v6, v11);
    swift_release();
    uint64_t v7 = v11[0];
    uint64_t v8 = v11[1];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    uint64_t result = swift_release();
    *a2 = v7;
    a2[1] = v8;
  }
  return result;
}

uint64_t AES.CCM.Nonce.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1A8DE9840() < 1)
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 1;
    *(unsigned char *)(v13 + 4) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    uint64_t v9 = sub_1A8DE9520();
    uint64_t v11 = v10;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
    *a3 = v9;
    a3[1] = v11;
  }
  return result;
}

uint64_t AES.CCM.Nonce.withUnsafeBytes<A>(_:)()
{
  return sub_1A8DE9490();
}

size_t AES.CCM.Nonce.makeIterator()()
{
  uint64_t v22[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      if (v1 >> 32 < (int)v1)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_1A8D8BE04(v1, v2);
      size_t v4 = sub_1A8DE9340();
      if (v4)
      {
        uint64_t v5 = sub_1A8DE9370();
        if (!__OFSUB__((int)v1, v5))
        {
          v4 += (int)v1 - v5;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v6 = sub_1A8DE9360();
      if (v6 >= (v1 >> 32) - (int)v1) {
        uint64_t v7 = (v1 >> 32) - (int)v1;
      }
      else {
        uint64_t v7 = v6;
      }
      unint64_t v8 = v4 + v7;
      if (v4) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = 0;
      }
      size_t v10 = sub_1A8D891D0(v4, v9);
      sub_1A8D8BD58(v1, v2);
      return v10;
    case 2uLL:
      uint64_t v11 = *(void *)(v1 + 16);
      uint64_t v12 = *(void *)(v1 + 24);
      swift_retain();
      swift_retain();
      size_t v13 = sub_1A8DE9340();
      if (!v13) {
        goto LABEL_17;
      }
      uint64_t v14 = sub_1A8DE9370();
      if (__OFSUB__(v11, v14)) {
        goto LABEL_30;
      }
      v13 += v11 - v14;
LABEL_17:
      BOOL v15 = __OFSUB__(v12, v11);
      uint64_t v16 = v12 - v11;
      if (v15) {
        goto LABEL_29;
      }
      uint64_t v17 = sub_1A8DE9360();
      if (v17 >= v16) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = v17;
      }
      unint64_t v19 = v13 + v18;
      if (v13) {
        unint64_t v20 = v19;
      }
      else {
        unint64_t v20 = 0;
      }
      size_t v10 = sub_1A8D891D0(v13, v20);
      swift_release();
      swift_release();
      return v10;
    case 3uLL:
      memset(v22, 0, 14);
      uint64_t v3 = (char *)v22;
      return sub_1A8D891D0((size_t)v22, (unint64_t)v3);
    default:
      v22[0] = *v0;
      LOWORD(v22[1]) = v2;
      BYTE2(v22[1]) = BYTE2(v2);
      BYTE3(v22[1]) = BYTE3(v2);
      BYTE4(v22[1]) = BYTE4(v2);
      BYTE5(v22[1]) = BYTE5(v2);
      uint64_t v3 = (char *)v22 + BYTE6(v2);
      return sub_1A8D891D0((size_t)v22, (unint64_t)v3);
  }
}

uint64_t sub_1A8DA6768()
{
  return AES.CCM.Nonce.withUnsafeBytes<A>(_:)();
}

uint64_t sub_1A8DA6780@<X0>(size_t *a1@<X8>)
{
  size_t v3 = AES.CCM.Nonce.makeIterator()();
  uint64_t result = sub_1A8D8BD58(*(void *)v1, *(void *)(v1 + 8));
  *a1 = v3;
  a1[1] = 0;
  return result;
}

uint64_t sub_1A8DA67BC()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = sub_1A8DC97A0(v1, v2);
  sub_1A8D8BD58(v1, v2);
  return v3;
}

uint64_t sub_1A8DA6804(uint64_t *a1, unsigned char *a2, uint64_t a3)
{
  return sub_1A8DC86A4(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
}

unint64_t sub_1A8DA6810()
{
  unint64_t result = qword_1EB476790;
  if (!qword_1EB476790)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB476938);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476790);
  }
  return result;
}

uint64_t *_s5NonceVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1A8D8BE04(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t _s5NonceVwxx(uint64_t a1)
{
  return sub_1A8D8BD58(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *_s5NonceVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1A8D8BE04(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1A8D8BD58(v5, v6);
  return a1;
}

uint64_t *_s5NonceVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1A8D8BD58(v3, v4);
  return a1;
}

uint64_t _s5NonceVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s5NonceVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AES.CCM.Nonce()
{
  return &type metadata for AES.CCM.Nonce;
}

uint64_t sub_1A8DA69F0()
{
  uint64_t result = sub_1A8D918C0(0x4D454BuLL, 0xE300000000000000);
  qword_1E97A91E0 = result;
  *(void *)algn_1E97A91E8 = v1;
  return result;
}

uint64_t sub_1A8DA6A20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, unint64_t a3@<X6>, char *a4@<X7>, size_t *a5@<X8>, char *a6)
{
  uint64_t v8 = *a4;
  char v19 = *a4;
  char v9 = *a6;
  if (qword_1E97A8C58 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_1E97A91E0;
  unint64_t v25 = *(void *)algn_1E97A91E8;
  uint64_t v10 = qword_1A8DEC0F0[v8];
  sub_1A8D8BE04(qword_1E97A91E0, *(unint64_t *)algn_1E97A91E8);
  sub_1A8DB8584(v10, 2);
  uint64_t v12 = v11;
  unint64_t v14 = v13;
  sub_1A8DE94F0();
  sub_1A8D8BD58(v12, v14);
  long long v23 = xmmword_1A8DEAA40;
  sub_1A8DE94F0();
  sub_1A8DE94F0();
  if (a3 >> 60 != 15)
  {
    sub_1A8D8BE04(a2, a3);
    sub_1A8DE94F0();
    sub_1A8D8BF9C(a2, a3);
  }
  long long v15 = v23;
  uint64_t v16 = v24;
  unint64_t v17 = v25;
  LOBYTE(v23) = v19;
  char v22 = v9;
  sub_1A8D8BE04(v24, v25);
  sub_1A8DC29D4(a1, v15, *((unint64_t *)&v15 + 1), (unsigned __int8 *)&v23, &v22, a5);
  sub_1A8D8BD58(v16, v17);
  sub_1A8D8BD58(v15, *((unint64_t *)&v15 + 1));

  return sub_1A8D8BD58(v16, v17);
}

uint64_t sub_1A8DA6BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return swift_unknownObjectRelease();
}

unint64_t sub_1A8DA6C50()
{
  unint64_t result = qword_1E97A91F0;
  if (!qword_1E97A91F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A91F0);
  }
  return result;
}

ValueMetadata *_s15ASN1OctetStringVMa()
{
  return &_s15ASN1OctetStringVN;
}

BOOL static IEEESecurity.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t IEEESecurity.hash(into:)()
{
  return sub_1A8DE9BF0();
}

void *static IEEESecurity.allCases.getter()
{
  return &unk_1EFF5DEC8;
}

uint64_t IEEESecurity.hashValue.getter()
{
  return sub_1A8DE9C20();
}

BOOL sub_1A8DA6D4C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t sub_1A8DA6D68()
{
  unint64_t result = qword_1E97A91F8;
  if (!qword_1E97A91F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A91F8);
  }
  return result;
}

unint64_t sub_1A8DA6DC0()
{
  unint64_t result = qword_1E97A9200;
  if (!qword_1E97A9200)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E97A9208);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9200);
  }
  return result;
}

void sub_1A8DA6E1C(void *a1@<X8>)
{
  *a1 = &unk_1EFF5DF60;
}

uint64_t getEnumTagSinglePayload for IEEESecurity(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IEEESecurity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A8DA6F88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1A8DA6FB0(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for IEEESecurity()
{
  return &type metadata for IEEESecurity;
}

uint64_t SecureEnclave.P256.Signing.PrivateKey.signature<A>(for:)()
{
  return sub_1A8DA706C();
}

uint64_t sub_1A8DA7000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_1A8DA70CC(a1, a2, *(void **)(v3 + 40), MEMORY[0x1E4F14660], 32, a3);
}

uint64_t SecureEnclave.P384.Signing.PrivateKey.signature<A>(for:)()
{
  return sub_1A8DA706C();
}

uint64_t sub_1A8DA706C()
{
  return sub_1A8DE9390();
}

uint64_t sub_1A8DA70CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X5>, uint64_t (*a4)(uint64_t)@<X6>, uint64_t a5@<X7>, _OWORD *a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v27 = a4;
  uint64_t v10 = sub_1A8DE93E0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4F27740], v10);
    sub_1A8DE93D0();
    uint64_t v14 = a2 - a1;
    if (v14)
    {
      sub_1A8DE9380();
      swift_allocObject();
      swift_retain();
      uint64_t v18 = sub_1A8DE9320();
      uint64_t v16 = sub_1A8DCEF04(v18, v14);
      unint64_t v17 = v19;
      swift_release();
    }
    else
    {
      long long v15 = (void (*)(uint64_t, void))sub_1A8DE93D0();
      v15(a1, 0);
      swift_release();
      swift_release();
      uint64_t v16 = 0;
      unint64_t v17 = 0xC000000000000000;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    unint64_t v20 = sub_1A8DA7350(a3);
    if (!v6)
    {
      uint64_t v22 = (uint64_t)v20;
      unint64_t v23 = v21;
      sub_1A8D8BE04((uint64_t)v20, v21);
      sub_1A8DA74E0(v22, v23, v27, v26);
      sub_1A8D8BD58(v22, v23);
    }
    return sub_1A8D8BD58(v16, v17);
  }
  else
  {
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8DA7318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_1A8DA70CC(a1, a2, *(void **)(v3 + 40), MEMORY[0x1E4F14668], 61, a3);
}

void *sub_1A8DA7350(void *a1)
{
  v11[1] = *(id *)MEMORY[0x1E4F143B8];
  int v2 = (void *)sub_1A8DE94A0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8B60);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1A8DEC2F0;
  *(void *)(v3 + 32) = sub_1A8DE9640();
  *(void *)(v3 + 40) = v4;
  uint64_t v5 = (void *)sub_1A8DE97A0();
  swift_bridgeObjectRelease();
  sub_1A8DB2F1C(MEMORY[0x1E4FBC860]);
  uint64_t v6 = (void *)sub_1A8DE9560();
  swift_bridgeObjectRelease();
  v11[0] = 0;
  id v7 = objc_msgSend(a1, sel_sign_algorithms_parameters_error_, v2, v5, v6, v11);

  id v8 = v11[0];
  if (v7)
  {
    char v9 = (void *)sub_1A8DE94C0();
  }
  else
  {
    char v9 = v8;
    sub_1A8DE93B0();

    swift_willThrow();
  }
  return v9;
}

uint64_t sub_1A8DA74E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, _OWORD *a4@<X8>)
{
  char v9 = sub_1A8DCCEB8(a1, a2);
  sub_1A8DCAA70((uint64_t)v9, (uint64_t)(v9 + 4), 0, (2 * v9[2]) | 1, (uint64_t)v37);
  if (v4)
  {
    sub_1A8D8BD58(a1, a2);
    return swift_release();
  }
  swift_release();
  sub_1A8D946F4((uint64_t)&v38, (uint64_t)v39);
  sub_1A8DA81F4((uint64_t)v39);
  uint64_t v11 = sub_1A8DE70D0(v37, 0x30u, (uint64_t *)&v31);
  uint64_t v12 = v32;
  unint64_t v29 = v33;
  long long v27 = v34;
  long long v28 = v31;
  unint64_t v25 = v36;
  uint64_t v26 = v35;
  uint64_t result = a3(v11);
  if (!result) {
    goto LABEL_34;
  }
  uint64_t v13 = result;
  uint64_t v14 = self;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  uint64_t v33 = v15;
  *(void *)&long long v31 = v13;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v14, sel_groupOrderByteCountForCP_, v30);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v24 = v12;
  BOOL v16 = __OFSUB__(v29 >> 1, v12);
  uint64_t v17 = (v29 >> 1) - v12;
  if (v16)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result < v17)
  {
LABEL_9:
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v18 = 1;
    *(unsigned char *)(v18 + 4) = 1;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1A8D8EC68((uint64_t)v37);
    return sub_1A8D8BD58(a1, a2);
  }
  if (__OFSUB__(v25 >> 1, v26)) {
    goto LABEL_23;
  }
  if (result < (uint64_t)((v25 >> 1) - v26)) {
    goto LABEL_9;
  }
  uint64_t v23 = (v25 >> 1) - v26;
  uint64_t v33 = v15;
  *(void *)&long long v31 = v13;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v14, sel_groupOrderByteCountForCP_, v40);
  if (result < 0) {
    goto LABEL_24;
  }
  if (result + 0x4000000000000000 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  sub_1A8DE9450();
  uint64_t v33 = v15;
  *(void *)&long long v31 = v13;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v14, sel_groupOrderByteCountForCP_, v40);
  if (result < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  BOOL v16 = __OFSUB__(result, v17);
  result -= v17;
  if (v16)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (result < 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  sub_1A8DBB360(result);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476690);
  uint64_t v33 = v19;
  unint64_t v22 = sub_1A8DA8230();
  *(void *)&long long v34 = v22;
  uint64_t v20 = swift_allocObject();
  *(void *)&long long v31 = v20;
  *(_OWORD *)(v20 + 16) = v28;
  *(void *)(v20 + 32) = v24;
  *(void *)(v20 + 40) = v29;
  uint64_t result = (uint64_t)__swift_project_boxed_opaque_existential_1(&v31, v19);
  if (__OFSUB__(*(void *)(result + 24) >> 1, *(void *)(result + 16)))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_unknownObjectRetain_n();
  sub_1A8DE9460();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
  swift_unknownObjectRelease();
  uint64_t v33 = v15;
  *(void *)&long long v31 = v13;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v14, sel_groupOrderByteCountForCP_, v40);
  if (result < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  BOOL v16 = __OFSUB__(result, v23);
  result -= v23;
  if (v16)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    sub_1A8DBB360(result);
    uint64_t v33 = v19;
    *(void *)&long long v34 = v22;
    uint64_t v21 = swift_allocObject();
    *(void *)&long long v31 = v21;
    *(_OWORD *)(v21 + 16) = v27;
    *(void *)(v21 + 32) = v26;
    *(void *)(v21 + 40) = v25;
    uint64_t result = (uint64_t)__swift_project_boxed_opaque_existential_1(&v31, v19);
    if (!__OFSUB__(*(void *)(result + 24) >> 1, *(void *)(result + 16)))
    {
      swift_unknownObjectRetain_n();
      sub_1A8DE9460();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_1A8D8EC68((uint64_t)v37);
      sub_1A8D8BD58(a1, a2);
      uint64_t result = swift_unknownObjectRelease();
      *a4 = xmmword_1A8DEAA40;
      return result;
    }
    goto LABEL_33;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t SecureEnclave.P256.Signing.PrivateKey.signature<A>(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v23 = a3;
  v26[1] = *MEMORY[0x1E4F143B8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v9 = (char *)&v18 - v8;
  uint64_t v10 = *v3;
  uint64_t v21 = v3[1];
  uint64_t v22 = v10;
  uint64_t v11 = v3[2];
  uint64_t v19 = (void *)v3[3];
  uint64_t v20 = v11;
  uint64_t v12 = ccsha256_di();
  if (!v12) {
    __break(1u);
  }
  uint64_t v13 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A8);
  uint64_t v14 = swift_allocObject();
  getDigestSizeForDigestInfo();
  uint64_t v15 = swift_slowAlloc();
  ccdigest_init();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = v15;
  v26[0] = v14;
  uint64_t v16 = sub_1A8DE92B0();
  MEMORY[0x1F4188790](v16);
  *(&v18 - 4) = a1;
  *(&v18 - 3) = a2;
  *(&v18 - 2) = (uint64_t)v26;
  swift_getAssociatedConformanceWitness();
  sub_1A8DE9770();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  swift_retain();
  sub_1A8D88D94((uint64_t)v25);
  swift_release();
  v24[0] = v25[0];
  v24[1] = v25[1];
  sub_1A8DA70CC((uint64_t)v24, (uint64_t)v25, v19, MEMORY[0x1E4F14660], 32, v23);
  return swift_release();
}

uint64_t sub_1A8DA7C58()
{
  return sub_1A8DA7F30();
}

uint64_t SecureEnclave.P384.Signing.PrivateKey.signature<A>(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v23 = a3;
  v26[1] = *MEMORY[0x1E4F143B8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v9 = (char *)&v18 - v8;
  uint64_t v10 = *v3;
  uint64_t v21 = v3[1];
  uint64_t v22 = v10;
  uint64_t v11 = v3[2];
  uint64_t v19 = (void *)v3[3];
  uint64_t v20 = v11;
  uint64_t v12 = ccsha384_di();
  if (!v12) {
    __break(1u);
  }
  uint64_t v13 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4767E8);
  uint64_t v14 = swift_allocObject();
  getDigestSizeForDigestInfo();
  uint64_t v15 = swift_slowAlloc();
  ccdigest_init();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = v15;
  v26[0] = v14;
  uint64_t v16 = sub_1A8DE92B0();
  MEMORY[0x1F4188790](v16);
  *(&v18 - 4) = a1;
  *(&v18 - 3) = a2;
  *(&v18 - 2) = (uint64_t)v26;
  swift_getAssociatedConformanceWitness();
  sub_1A8DE9770();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  swift_retain();
  sub_1A8DA8030((uint64_t)v25);
  swift_release();
  v24[0] = v25[0];
  v24[1] = v25[1];
  _OWORD v24[2] = v25[2];
  sub_1A8DA70CC((uint64_t)v24, (uint64_t)v25, v19, MEMORY[0x1E4F14668], 61, v23);
  return swift_release();
}

uint64_t sub_1A8DA7F30()
{
  return sub_1A8DE9390();
}

uint64_t sub_1A8DA8030@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1A8DE97D0();
  *(void *)(v3 + 16) = 48;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  ccdigest_final(*(void *)(v1 + 16));
  if (*(void *)(v3 + 16) == 48)
  {
    long long v7 = *(_OWORD *)(v3 + 48);
    long long v8 = *(_OWORD *)(v3 + 32);
    uint64_t v4 = *(void *)(v3 + 64);
    uint64_t v5 = *(void *)(v3 + 72);
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = v5;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8DA80D4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_1A8DE97D0();
  *(void *)(v3 + 16) = 20;
  *(void *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  ccdigest_final(*(void *)(v1 + 16));
  if (*(void *)(v3 + 16) == 20)
  {
    uint64_t v4 = *(void *)(v3 + 32);
    uint64_t v5 = *(void *)(v3 + 40);
    uint64_t v6 = *(unsigned int *)(v3 + 48);
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v4;
    a1[1] = v5;
    a1[2] = v6;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8DA8168()
{
  return sub_1A8DA7F30();
}

uint64_t sub_1A8DA819C(uint64_t a1, uint64_t a2)
{
  return sub_1A8DAFA74(a1, a2);
}

uint64_t sub_1A8DA81C8(uint64_t a1, uint64_t a2)
{
  return sub_1A8DAFA80(a1, a2);
}

uint64_t sub_1A8DA81F4(uint64_t a1)
{
  return a1;
}

unint64_t sub_1A8DA8230()
{
  unint64_t result = qword_1EB476688;
  if (!qword_1EB476688)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB476690);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476688);
  }
  return result;
}

uint64_t sub_1A8DA828C()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t _s7ContextVwxx(uint64_t *a1)
{
  swift_release();
  unint64_t v2 = a1[3];
  if (v2 >> 60 != 15) {
    sub_1A8D8BD58(a1[2], v2);
  }
  swift_release();
  uint64_t v3 = a1[6];
  unint64_t v4 = a1[7];

  return sub_1A8D8BD58(v3, v4);
}

uint64_t _s7ContextVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = (_OWORD *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  swift_retain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    uint64_t v7 = *(void *)v5;
    sub_1A8D8BE04(v7, v6);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v6;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  uint64_t v9 = *(void *)(a2 + 48);
  unint64_t v8 = *(void *)(a2 + 56);
  swift_retain();
  sub_1A8D8BE04(v9, v8);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v8;
  return a1;
}

uint64_t _s7ContextVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_1A8D8BE04(*v4, *(void *)(a2 + 24));
      uint64_t v8 = *(void *)(a1 + 16);
      unint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v5;
      sub_1A8D8BD58(v8, v9);
      goto LABEL_8;
    }
    sub_1A8D8C404(a1 + 16);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  sub_1A8D8BE04(*v4, *(void *)(a2 + 24));
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
LABEL_8:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  uint64_t v11 = *(void *)(a2 + 48);
  unint64_t v10 = *(void *)(a2 + 56);
  sub_1A8D8BE04(v11, v10);
  uint64_t v12 = *(void *)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v10;
  sub_1A8D8BD58(v12, v13);
  return a1;
}

uint64_t _s7ContextVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  unint64_t v5 = (void *)(a2 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v5;
      *(void *)(a1 + 24) = v7;
      sub_1A8D8BD58(v8, v6);
      goto LABEL_6;
    }
    sub_1A8D8C404(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
LABEL_6:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  uint64_t v9 = *(void *)(a1 + 48);
  unint64_t v10 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_1A8D8BD58(v9, v10);
  return a1;
}

uint64_t _s7ContextVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s7ContextVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s7ContextVMa()
{
  return &_s7ContextVN;
}

uint64_t sub_1A8DA8648@<X0>(char *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  unint64_t v47 = a5;
  uint64_t v44 = a7;
  unint64_t v45 = a8;
  uint64_t v46 = a4;
  unsigned int v40 = a2;
  uint64_t v38 = a9;
  uint64_t v14 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = _s5DHKEMO9PublicKeyVMa();
  uint64_t v42 = *(void *)(v17 - 8);
  uint64_t v43 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v37 - v18;
  char v20 = *a1;
  int v41 = a1[1];
  int v39 = a1[2];
  uint64_t v21 = *a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a6, a10);
  LOBYTE(v51) = v20;
  uint64_t v22 = v48;
  sub_1A8DA9AF4((uint64_t)v16, (char *)&v51, a10, a11, v19);
  if (v22)
  {
    swift_release();
    sub_1A8D8BD58(v44, v45);
    sub_1A8D8BF9C(v46, v47);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a6, a10);
  }
  else
  {
    char v24 = v41;
    uint64_t v48 = a6;
    sub_1A8DA9BF0(v43, &v51);
    uint64_t v37 = v19;
    uint64_t v26 = v51;
    uint64_t v25 = v52;
    unint64_t v27 = v53;
    v50[3] = &type metadata for SymmetricKey;
    v50[4] = sub_1A8D8C060();
    v50[0] = v26;
    uint64_t v58 = v21;
    unint64_t v28 = v27;
    v49[0] = v20;
    v49[1] = v24;
    v49[2] = v39;
    sub_1A8D8BE04(v25, v27);
    sub_1A8D8BE04(v25, v27);
    swift_retain();
    sub_1A8D8AA38(v40, (uint64_t)v50, v44, v45, &v58, v46, v47, v49, (uint64_t)&v51);
    uint64_t v29 = v48;
    swift_release();
    sub_1A8D8BD58(v25, v28);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v29, a10);
    (*(void (**)(unsigned char *, uint64_t))(v42 + 8))(v37, v43);
    uint64_t v31 = v51;
    uint64_t v30 = v52;
    uint64_t v32 = v53;
    unint64_t v33 = v54;
    uint64_t v34 = v55;
    LODWORD(v48) = v56;
    char v35 = v57;
    swift_retain();
    sub_1A8D8C208(v32, v33);
    swift_retain();
    sub_1A8D8BE04(v25, v28);
    sub_1A8D8BD58(v25, v28);
    unint64_t v36 = v38;
    void *v38 = v31;
    v36[1] = v30;
    v36[2] = v32;
    v36[3] = v33;
    v36[4] = v34;
    *((_WORD *)v36 + 20) = v48;
    *((unsigned char *)v36 + 42) = v35;
    v36[6] = v25;
    v36[7] = v28;
    swift_release();
    sub_1A8D8BF9C(v32, v33);
    swift_release();
    return sub_1A8D8BD58(v25, v28);
  }
}

uint64_t sub_1A8DA8A6C@<X0>(char *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, size_t *a9@<X8>, size_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v63 = a8;
  uint64_t v62 = a7;
  uint64_t v70 = a6;
  uint64_t v64 = a4;
  unint64_t v65 = a5;
  uint64_t v67 = a3;
  unsigned int v55 = a2;
  uint64_t v52 = a9;
  size_t v71 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v66 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v60 = (unint64_t)&v50 - v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v69 = AssociatedTypeWitness;
  uint64_t v59 = AssociatedConformanceWitness;
  uint64_t v56 = _s5DHKEMO9PublicKeyVMa();
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v56);
  uint64_t v61 = (char *)&v50 - v17;
  uint64_t v18 = *(void *)(a11 - 8);
  MEMORY[0x1F4188790](v16);
  char v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = _s5DHKEMO10PrivateKeyVMa();
  uint64_t v58 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (uint64_t *)((char *)&v50 - v22);
  char v24 = *a1;
  int v54 = a1[1];
  int v53 = a1[2];
  uint64_t v25 = *v67;
  size_t v26 = v71;
  (*(void (**)(char *))(v18 + 16))(v20);
  LOBYTE(v74[0]) = v24;
  uint64_t v27 = v68;
  sub_1A8DA9FF0((uint64_t)v20, (char *)v74, a11, a12, v23);
  if (v27)
  {
    swift_release();
    sub_1A8D8BD58(v62, v63);
    sub_1A8D8BF9C(v64, v65);
    (*(void (**)(size_t, uint64_t))(v18 + 8))(v26, a11);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 8))(v70, v69);
  }
  else
  {
    uint64_t v50 = v25;
    uint64_t v51 = a11;
    uint64_t v67 = v23;
    uint64_t v68 = v21;
    uint64_t v29 = v66;
    uint64_t v30 = v60;
    uint64_t v31 = v69;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v66 + 16))(v60, v70, v69);
    LOBYTE(v74[0]) = v24;
    uint64_t v32 = v61;
    sub_1A8DA9AF4(v30, (char *)v74, v31, v59, v61);
    uint64_t v33 = v31;
    uint64_t v34 = sub_1A8DAA20C(v74, (uint64_t)v32, v68);
    size_t v35 = v74[0];
    unint64_t v37 = v36;
    uint64_t v38 = v34;
    swift_retain();
    sub_1A8D8BE04(v38, v37);
    swift_release();
    v73[3] = &type metadata for SymmetricKey;
    v73[4] = sub_1A8D8C060();
    v73[0] = v35;
    uint64_t v77 = v50;
    v72[0] = v24;
    v72[1] = v54;
    v72[2] = v53;
    swift_retain();
    uint64_t v59 = v38;
    unint64_t v60 = v37;
    sub_1A8D8BE04(v38, v37);
    sub_1A8D8AA38(v55, (uint64_t)v73, v62, v63, &v77, v64, v65, v72, (uint64_t)v74);
    uint64_t v39 = v33;
    size_t v40 = v71;
    uint64_t v41 = v58;
    uint64_t v42 = v57;
    swift_release();
    uint64_t v43 = v59;
    unint64_t v44 = v60;
    sub_1A8D8BD58(v59, v60);
    (*(void (**)(size_t, uint64_t))(v18 + 8))(v40, v51);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v70, v39);
    (*(void (**)(unsigned char *, uint64_t))(v42 + 8))(v61, v56);
    (*(void (**)(uint64_t *, uint64_t))(v41 + 8))(v67, v68);
    size_t v45 = v74[1];
    size_t v71 = v74[0];
    uint64_t v46 = v74[2];
    unint64_t v47 = v74[3];
    size_t v48 = v74[4];
    LOWORD(v42) = v75;
    LOBYTE(v39) = v76;
    swift_retain();
    sub_1A8D8C208(v46, v47);
    swift_retain();
    sub_1A8D8BE04(v43, v44);
    sub_1A8D8BD58(v43, v44);
    uint64_t v49 = v52;
    *uint64_t v52 = v71;
    v49[1] = v45;
    v49[2] = v46;
    char v49[3] = v47;
    v49[4] = v48;
    *((_WORD *)v49 + 20) = v42;
    *((unsigned char *)v49 + 42) = v39;
    v49[6] = v43;
    v49[7] = v44;
    swift_release();
    sub_1A8D8BF9C(v46, v47);
    swift_release();
    return sub_1A8D8BD58(v43, v44);
  }
}

uint64_t sub_1A8DA9244@<X0>(unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, size_t a8@<X7>, size_t *a9@<X8>, uint64_t a10, unint64_t a11, unsigned char *a12, uint64_t a13, uint64_t a14)
{
  size_t v90 = a8;
  unint64_t v82 = a7;
  uint64_t v81 = a6;
  uint64_t v83 = a3;
  unint64_t v84 = a4;
  unsigned int v74 = a2;
  uint64_t v72 = a9;
  unint64_t v88 = a12;
  unint64_t v85 = a11;
  uint64_t v80 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v89 = sub_1A8DE9910();
  uint64_t v87 = *(void *)(v89 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v89);
  uint64_t v77 = &v64[-v18];
  uint64_t v79 = AssociatedTypeWitness;
  uint64_t v78 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  char v76 = &v64[-v20];
  uint64_t v21 = *(void *)(a13 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = &v64[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v24 = (char *)_s5DHKEMO10PrivateKeyVMa();
  uint64_t v75 = *((void *)v24 - 1);
  MEMORY[0x1F4188790](v24);
  size_t v26 = &v64[-v25];
  int v27 = *a1;
  int v73 = a1[1];
  int v28 = a1[2];
  uint64_t v29 = *a5;
  (*(void (**)(unsigned char *, size_t, uint64_t))(v21 + 16))(v23, v90, a13);
  LOBYTE(v93[0]) = v27;
  uint64_t v30 = v86;
  sub_1A8DA9FF0((uint64_t)v23, (char *)v93, a13, a14, v26);
  if (v30)
  {
    swift_release();
    sub_1A8D8BD58(v80, v85);
    sub_1A8D8BF9C(v81, v82);
    sub_1A8D8BD58(v83, v84);
    (*(void (**)(unsigned char *, uint64_t))(v87 + 8))(v88, v89);
    return (*(uint64_t (**)(size_t, uint64_t))(v21 + 8))(v90, a13);
  }
  int v65 = v28;
  uint64_t v69 = 0;
  int v70 = v27;
  uint64_t v66 = v29;
  uint64_t v32 = (uint64_t)v76;
  uint64_t v68 = a13;
  size_t v71 = v26;
  uint64_t v86 = v24;
  uint64_t v67 = v21;
  uint64_t v34 = v83;
  unint64_t v33 = v84;
  uint64_t v36 = v87;
  size_t v35 = v88;
  unint64_t v37 = v77;
  uint64_t v38 = v89;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v87 + 16))(v77, v88, v89);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v78 + 48))(v37, 1, v79) == 1)
  {
    uint64_t v39 = *(void (**)(unsigned char *, uint64_t))(v36 + 8);
    v39(v37, v38);
    uint64_t v40 = v34;
    uint64_t v41 = v34;
    uint64_t v42 = v86;
    uint64_t v43 = v71;
    uint64_t v44 = v69;
    sub_1A8DAB570(v41, v33, v86, v93);
    unint64_t v45 = v85;
    char v46 = v70;
    if (v44)
    {
      swift_release();
      sub_1A8D8BD58(v80, v45);
      sub_1A8D8BF9C(v81, v82);
      sub_1A8D8BD58(v40, v33);
      v39(v88, v89);
      (*(void (**)(size_t, uint64_t))(v67 + 8))(v90, v68);
      return (*(uint64_t (**)(unsigned char *, char *))(v75 + 8))(v43, v42);
    }
    uint64_t v50 = v40;
    unint64_t v51 = v33;
  }
  else
  {
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v78 + 32))(v32, v37, v79);
    uint64_t v47 = v34;
    uint64_t v48 = v34;
    uint64_t v42 = v86;
    uint64_t v43 = v71;
    uint64_t v49 = v69;
    sub_1A8DAAC40(v48, v33, v32, (uint64_t)v86, v93);
    unint64_t v45 = v85;
    char v46 = v70;
    if (v49)
    {
      swift_release();
      sub_1A8D8BD58(v80, v45);
      sub_1A8D8BF9C(v81, v82);
      sub_1A8D8BD58(v47, v33);
      (*(void (**)(unsigned char *, uint64_t))(v87 + 8))(v35, v89);
      (*(void (**)(size_t, uint64_t))(v67 + 8))(v90, v68);
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v32, v79);
      return (*(uint64_t (**)(unsigned char *, char *))(v75 + 8))(v43, v42);
    }
    uint64_t v50 = v47;
    unint64_t v51 = v33;
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v32, v79);
  }
  size_t v52 = v93[0];
  uint64_t v53 = v67;
  uint64_t v54 = v75;
  uint64_t v55 = v66;
  v92[3] = &type metadata for SymmetricKey;
  v92[4] = sub_1A8D8C060();
  v92[0] = v52;
  uint64_t v96 = v55;
  v91[0] = v46;
  v91[1] = v73;
  v91[2] = v65;
  unint64_t v56 = v51;
  sub_1A8D8BE04(v50, v51);
  swift_retain();
  sub_1A8D8AA38(v74, (uint64_t)v92, v80, v45, &v96, v81, v82, v91, (uint64_t)v93);
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v87 + 8))(v88, v89);
  (*(void (**)(size_t, uint64_t))(v53 + 8))(v90, v68);
  (*(void (**)(unsigned char *, char *))(v54 + 8))(v71, v86);
  size_t v57 = v93[1];
  size_t v90 = v93[0];
  uint64_t v58 = v93[2];
  unint64_t v59 = v93[3];
  uint64_t v60 = v50;
  size_t v61 = v93[4];
  __int16 v62 = v94;
  LOBYTE(v53) = v95;
  swift_retain();
  sub_1A8D8C208(v58, v59);
  swift_retain();
  sub_1A8D8BE04(v60, v56);
  sub_1A8D8BD58(v60, v56);
  unint64_t v63 = v72;
  *uint64_t v72 = v90;
  v63[1] = v57;
  v63[2] = v58;
  v63[3] = v59;
  v63[4] = v61;
  *((_WORD *)v63 + 20) = v62;
  *((unsigned char *)v63 + 42) = v53;
  v63[6] = v60;
  v63[7] = v56;
  swift_release();
  sub_1A8D8BF9C(v58, v59);
  swift_release();
  return sub_1A8D8BD58(v60, v56);
}

uint64_t dispatch thunk of HPKEPublicKeySerialization.init<A>(_:kem:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of HPKEPublicKeySerialization.hpkeRepresentation(kem:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of HPKEDiffieHellmanPrivateKeyGeneration.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for HPKE.DHKEM()
{
  return &type metadata for HPKE.DHKEM;
}

uint64_t sub_1A8DA9AF4@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  char v9 = *a2;
  char v14 = *a2;
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(a4 + 8) + 16))(&v14, a3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  }
  sub_1A8D8BD58(v10, v11);
  uint64_t v13 = _s5DHKEMO9PublicKeyVMa();
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(&a5[*(int *)(v13 + 36)], a1, a3);
  *a5 = v9;
  return result;
}

uint64_t sub_1A8DA9BF0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  unint64_t v33 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v11 = (char *)&v26 - v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v13 = *(int *)(a1 + 36);
  uint64_t v34 = v2;
  uint64_t v14 = *(void *)(*(void *)(AssociatedConformanceWitness + 8) + 8);
  uint64_t v15 = v35;
  (*(void (**)(void *__return_ptr, unsigned char *, uint64_t, uint64_t))(v14 + 24))(v38, &v2[v13], AssociatedTypeWitness, v14);
  if (v15) {
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  }
  uint64_t v35 = v9;
  uint64_t v30 = v38[0];
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(AssociatedTypeWitness, v14);
  LOBYTE(v38[0]) = *v34;
  uint64_t v17 = *(void *)(v7 + 8);
  int v27 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v28 = v27(v38, v4, v17);
  uint64_t v29 = v18;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v4);
  LOBYTE(v38[0]) = *v34;
  char v19 = v38[0];
  uint64_t v20 = v27(v38, v4, v17);
  unint64_t v22 = v21;
  v38[3] = &type metadata for SharedSecret;
  v38[4] = sub_1A8DAB4C8();
  v38[0] = v30;
  char v37 = v19;
  char v36 = 0x20100u >> (8 * v19);
  swift_retain();
  uint64_t v24 = v28;
  uint64_t v23 = v29;
  sub_1A8DA6A20((uint64_t)v38, 0, 0xF000000000000000, &v37, &v39, &v36);
  sub_1A8D8BD58(v20, v22);
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, AssociatedTypeWitness);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  uint64_t v25 = v31;
  *uint64_t v31 = v39;
  v25[1] = v24;
  _OWORD v25[2] = v23;
  return result;
}

uint64_t sub_1A8DA9FF0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  unint64_t v22 = a5;
  uint64_t v9 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v22 - v12;
  char v14 = *a2;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v9 + 16);
  uint64_t v23 = a1;
  v15(a3, v9);
  char v24 = v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 16))(&v24, AssociatedTypeWitness);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(v23, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  else
  {
    sub_1A8D8BD58(v17, v18);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
    uint64_t v20 = _s5DHKEMO10PrivateKeyVMa();
    unint64_t v21 = v22;
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(&v22[*(int *)(v20 + 36)], v23, a3);
    *unint64_t v21 = v14;
  }
  return result;
}

uint64_t sub_1A8DAA20C(size_t *a1, uint64_t a2, uint64_t a3)
{
  void (*v18)(void *__return_ptr, uint64_t (*)(void, void, void), uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  void (*v29)(void *__return_ptr, uint64_t (*)(uint64_t *, uint64_t, uint64_t), uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  long long v63;
  uint64_t v64;
  unint64_t v65;
  void v66[2];
  uint64_t v67;
  uint64_t v68;
  char *v69;
  size_t *v70;
  char *v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t *, uint64_t, uint64_t);
  char *v79;
  char v80;
  long long v81;
  uint64_t v82;
  unint64_t v83;
  void v84[3];
  ValueMetadata *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;

  int v70 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v75 = a3;
  uint64_t v77 = *(void *)(v4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v72 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  size_t v71 = (char *)v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int v73 = (char *)v66 - v9;
  char v76 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  char v14 = (char *)v66 - v13;
  uint64_t v15 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v11, v15);
  uint64_t v16 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))(a2 + *(int *)(_s5DHKEMO9PublicKeyVMa() + 36));
  uint64_t v17 = *(void *)(*(void *)(v15 + 8) + 8);
  unint64_t v18 = *(void (**)(void *__return_ptr, uint64_t (*)(void, void, void), uint64_t, uint64_t))(v17 + 24);
  unint64_t v85 = &type metadata for SharedSecret;
  unsigned int v74 = sub_1A8DAB4C8();
  uint64_t v86 = v74;
  uint64_t v78 = v16;
  char v19 = v89;
  v18(v84, (uint64_t (*)(void, void, void))v16, v11, v17);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return __swift_deallocate_boxed_opaque_existential_1((uint64_t)v84);
  }
  else
  {
    uint64_t v67 = AssociatedTypeWitness;
    uint64_t v69 = v14;
    uint64_t v89 = v11;
    uint64_t v68 = v12;
    uint64_t v20 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v84, (uint64_t)v85);
    MEMORY[0x1F4188790](v20);
    unint64_t v22 = (void *)((char *)v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v23 + 16))(v22);
    char v24 = *v22;
    swift_beginAccess();
    uint64_t v25 = sub_1A8D91DF0(v24 + 32, v24 + 32 + *(void *)(v24 + 16));
    int v27 = v26;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
    uint64_t v87 = v25;
    unint64_t v88 = v27;
    uint64_t v28 = v79;
    uint64_t v29 = *(void (**)(void *__return_ptr, uint64_t (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v77 + 24);
    unint64_t v85 = &type metadata for SharedSecret;
    uint64_t v86 = v74;
    v29(v84, v78, v76);
    uint64_t v75 = 0;
    uint64_t v31 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v84, (uint64_t)v85);
    uint64_t v32 = v28;
    MEMORY[0x1F4188790](v31);
    uint64_t v34 = (void *)((char *)v66 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v35 + 16))(v34);
    char v36 = *v34;
    swift_beginAccess();
    char v37 = sub_1A8D91DF0(v36 + 32, v36 + 32 + *(void *)(v36 + 16));
    size_t v39 = v38;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
    sub_1A8DE94F0();
    sub_1A8D8BD58(v37, v39);
    uint64_t v40 = v73;
    uint64_t v41 = v69;
    uint64_t v42 = v89;
    (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v89, v17);
    LOBYTE(v84[0]) = *v32;
    uint64_t v43 = *(void *)(AssociatedConformanceWitness + 8);
    uint64_t v44 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v43 + 16);
    unint64_t v45 = v75;
    char v46 = v67;
    uint64_t v47 = v44(v84, v67, v43);
    if (v45)
    {
      (*(void (**)(char *, uint64_t))(v72 + 8))(v40, v46);
      sub_1A8D8BD58(v87, v88);
      return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v41, v42);
    }
    else
    {
      v66[1] = v48;
      unsigned int v74 = v47;
      int v73 = *(char **)(v72 + 8);
      ((void (*)(char *, uint64_t))v73)(v40, v46);
      unint64_t v85 = (ValueMetadata *)MEMORY[0x1E4F277C0];
      uint64_t v86 = MEMORY[0x1E4F277B0];
      v84[0] = v87;
      v84[1] = v88;
      LODWORD(v75) = *v79;
      LOBYTE(v82) = v75;
      sub_1A8D8BE04(v87, v88);
      uint64_t v78 = v44;
      v66[0] = v44(&v82, v46, v43);
      uint64_t v72 = v49;
      uint64_t v50 = v71;
      (*(void (**)(uint64_t))(v77 + 16))(v76);
      LOBYTE(v82) = v75;
      unint64_t v51 = v67;
      size_t v52 = v78(&v82, v67, v43);
      uint64_t v54 = v53;
      uint64_t v75 = 0;
      ((void (*)(char *, uint64_t))v73)(v50, v51);
      uint64_t v55 = *v79;
      LODWORD(v79) = *v79;
      LODWORD(v78) = 0x20100u >> (8 * (_BYTE)v79);
      if (qword_1E97A8C58 != -1) {
        swift_once();
      }
      unint64_t v82 = qword_1E97A91E0;
      uint64_t v83 = *(void *)algn_1E97A91E8;
      unint64_t v56 = qword_1A8DEC480[v55];
      sub_1A8D8BE04(qword_1E97A91E0, *(unint64_t *)algn_1E97A91E8);
      sub_1A8DB8584(v56, 2);
      uint64_t v58 = v57;
      uint64_t v60 = v59;
      sub_1A8DE94F0();
      sub_1A8D8BD58(v58, v60);
      uint64_t v81 = xmmword_1A8DEAA40;
      sub_1A8DE94F0();
      size_t v61 = v66[0];
      __int16 v62 = v72;
      sub_1A8DE94F0();
      sub_1A8D8BE04(v52, v54);
      sub_1A8DE94F0();
      sub_1A8D8BD58(v52, v54);
      unint64_t v63 = v81;
      uint64_t v64 = v82;
      int v65 = v83;
      LOBYTE(v81) = (_BYTE)v79;
      uint64_t v80 = (char)v78;
      sub_1A8D8BE04(v82, v83);
      sub_1A8DC29D4((uint64_t)v84, v63, *((unint64_t *)&v63 + 1), (unsigned __int8 *)&v81, &v80, v70);
      sub_1A8D8BD58(v64, v65);
      sub_1A8D8BD58(v63, *((unint64_t *)&v63 + 1));
      sub_1A8D8BD58(v64, v65);
      sub_1A8D8BD58(v52, v54);
      sub_1A8D8BD58(v61, v62);
      sub_1A8D8BD58(v87, v88);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v89);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
      return v74;
    }
  }
}

uint64_t sub_1A8DAAC40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, size_t *a5@<X8>)
{
  void (*v22)(uint64_t *__return_ptr, char *, unint64_t, uint64_t);
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void (*v43)(unint64_t, uint64_t);
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t *, uint64_t, uint64_t);
  unint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  long long v64;
  uint64_t v65;
  unint64_t v66;
  void v67[2];
  void (*v68)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t);
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  size_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  char v81;
  long long v82;
  uint64_t v83;
  unint64_t v84;
  char v85[24];
  uint64_t v86;
  unint64_t v87;
  ValueMetadata *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;

  uint64_t v75 = a3;
  unsigned int v74 = a5;
  unint64_t v9 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(a4 + 24);
  char v76 = a4;
  uint64_t v77 = *(void *)(v8 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v78 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v67 - v14;
  uint64_t v86 = a1;
  uint64_t v87 = a2;
  uint64_t v79 = v5;
  v85[0] = *v5;
  uint64_t v80 = v9;
  uint64_t v16 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t *, char *, void, void, uint64_t, uint64_t))(v16 + 8);
  sub_1A8D8BE04(a1, a2);
  unint64_t v18 = v92;
  uint64_t result = v17(&v86, v85, MEMORY[0x1E4F277C0], MEMORY[0x1E4F277B0], AssociatedTypeWitness, v16);
  if (!v18)
  {
    uint64_t v72 = v16;
    unint64_t v92 = v13;
    int v70 = a1;
    size_t v71 = a2;
    int v73 = AssociatedTypeWitness;
    uint64_t v20 = &v79[*(int *)(v76 + 36)];
    uint64_t v21 = v77;
    unint64_t v22 = *(void (**)(uint64_t *__return_ptr, char *, unint64_t, uint64_t))(v77 + 24);
    unint64_t v88 = &type metadata for SharedSecret;
    uint64_t v23 = sub_1A8DAB4C8();
    uint64_t v89 = v23;
    v22(&v86, v15, v80, v21);
    char v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v86, (uint64_t)v88);
    uint64_t v69 = (char *)v67;
    MEMORY[0x1F4188790](v24);
    uint64_t v68 = (void (*)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t))v22;
    char v76 = 0;
    uint64_t v26 = (void *)((char *)v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v27 + 16))(v26);
    uint64_t v28 = *v26;
    swift_beginAccess();
    uint64_t v29 = sub_1A8D91DF0(v28 + 32, v28 + 32 + *(void *)(v28 + 16));
    uint64_t v31 = v30;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
    uint64_t v32 = v29;
    size_t v90 = v29;
    uint64_t v91 = v31;
    uint64_t v69 = (char *)v31;
    unint64_t v88 = &type metadata for SharedSecret;
    uint64_t v89 = v23;
    v67[1] = v20;
    unint64_t v33 = v76;
    v68(&v86, v75, v80, v21);
    uint64_t v34 = v73;
    if (v33)
    {
      sub_1A8D8BD58(v32, (unint64_t)v69);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v15, v34);
      return __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v86);
    }
    else
    {
      uint64_t v69 = v15;
      uint64_t v35 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v86, (uint64_t)v88);
      MEMORY[0x1F4188790](v35);
      char v37 = (void *)((char *)v67 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v38 + 16))(v37);
      size_t v39 = *v37;
      swift_beginAccess();
      uint64_t v40 = sub_1A8D91DF0(v39 + 32, v39 + 32 + *(void *)(v39 + 16));
      uint64_t v42 = v41;
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
      sub_1A8DE94F0();
      sub_1A8D8BD58(v40, v42);
      unint64_t v88 = (ValueMetadata *)MEMORY[0x1E4F277C0];
      uint64_t v89 = MEMORY[0x1E4F277B0];
      uint64_t v86 = v90;
      uint64_t v87 = v91;
      uint64_t v43 = *(void (**)(unint64_t, uint64_t))(v21 + 16);
      sub_1A8D8BE04(v90, v91);
      uint64_t v44 = v92;
      v43(v80, v21);
      unint64_t v45 = v79;
      LOBYTE(v83) = *v79;
      char v46 = v72;
      uint64_t v47 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v72 + 16);
      uint64_t v77 = v47(&v83, v34, v72);
      uint64_t v80 = v48;
      uint64_t v49 = v78 + 8;
      uint64_t v50 = v44;
      unint64_t v51 = *(void (**)(char *, uint64_t))(v78 + 8);
      v51(v50, v34);
      size_t v52 = *v45;
      LOBYTE(v83) = v52;
      uint64_t v53 = v47(&v83, v34, v46);
      uint64_t v55 = v54;
      unint64_t v56 = v53;
      char v76 = 0;
      uint64_t v78 = v49;
      LODWORD(v92) = v52;
      LODWORD(v79) = 0x20100u >> (8 * v52);
      if (qword_1E97A8C58 != -1) {
        swift_once();
      }
      uint64_t v83 = qword_1E97A91E0;
      unint64_t v84 = *(void *)algn_1E97A91E8;
      size_t v57 = qword_1A8DEC480[v52];
      sub_1A8D8BE04(qword_1E97A91E0, *(unint64_t *)algn_1E97A91E8);
      sub_1A8DB8584(v57, 2);
      unint64_t v59 = v58;
      size_t v61 = v60;
      sub_1A8DE94F0();
      sub_1A8D8BD58(v59, v61);
      unint64_t v82 = xmmword_1A8DEAA40;
      sub_1A8DE94F0();
      __int16 v62 = v77;
      unint64_t v63 = v80;
      sub_1A8DE94F0();
      sub_1A8D8BE04(v56, v55);
      sub_1A8DE94F0();
      sub_1A8D8BD58(v56, v55);
      uint64_t v64 = v82;
      int v65 = v83;
      uint64_t v66 = v84;
      LOBYTE(v82) = (_BYTE)v92;
      uint64_t v81 = (char)v79;
      sub_1A8D8BE04(v83, v84);
      sub_1A8DC29D4((uint64_t)&v86, v64, *((unint64_t *)&v64 + 1), (unsigned __int8 *)&v82, &v81, v74);
      sub_1A8D8BD58(v65, v66);
      sub_1A8D8BD58(v64, *((unint64_t *)&v64 + 1));
      sub_1A8D8BD58(v65, v66);
      sub_1A8D8BD58(v56, v55);
      sub_1A8D8BD58(v62, v63);
      sub_1A8D8BD58(v90, v91);
      v51(v69, v73);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
    }
  }
  return result;
}

unint64_t sub_1A8DAB4C8()
{
  unint64_t result = qword_1E97A9210[0];
  if (!qword_1E97A9210[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E97A9210);
  }
  return result;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x1AD0E8530);
  }
  return result;
}

uint64_t sub_1A8DAB570@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, size_t *a4@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v8 = *((void *)a3 + 2);
  uint64_t v7 = *((void *)a3 + 3);
  uint64_t v32 = a3;
  uint64_t v33 = *(void *)(v7 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v34 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v31 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v28 - v12;
  v38[0] = a1;
  v38[1] = a2;
  uint64_t v35 = v4;
  uint64_t v36 = v8;
  int v14 = *v4;
  char v40 = *v4;
  uint64_t v15 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v16 = *(uint64_t (**)(void *, char *, void, void, uint64_t, uint64_t))(v15 + 8);
  sub_1A8D8BE04(a1, a2);
  uint64_t v17 = v37;
  uint64_t result = v16(v38, &v40, MEMORY[0x1E4F277C0], MEMORY[0x1E4F277B0], AssociatedTypeWitness, v15);
  if (!v17)
  {
    v28[1] = a2;
    uint64_t v29 = v15;
    LODWORD(v37) = v14;
    char v19 = v31;
    v28[0] = a1;
    uint64_t v20 = v33;
    (*(void (**)(void *__return_ptr, char *, uint64_t, uint64_t))(v33 + 24))(v38, v13, v36, v33);
    uint64_t v32 = v13;
    uint64_t v21 = v38[0];
    v38[3] = &type metadata for SharedSecret;
    v38[4] = sub_1A8DAB4C8();
    v38[0] = v21;
    unint64_t v22 = *(void (**)(uint64_t, uint64_t))(v20 + 16);
    swift_retain();
    v22(v36, v20);
    char v40 = v37;
    uint64_t v23 = AssociatedTypeWitness;
    uint64_t v24 = (*(uint64_t (**)(char *, uint64_t))(v29 + 16))(&v40, AssociatedTypeWitness);
    unint64_t v26 = v25;
    int v27 = *(void (**)(char *, uint64_t))(v34 + 8);
    v27(v19, v23);
    char v40 = *v35;
    char v39 = 0x20100u >> (8 * v40);
    sub_1A8DA6A20((uint64_t)v38, 0, 0xF000000000000000, &v40, v30, &v39);
    sub_1A8D8BD58(v24, v26);
    swift_release();
    v27(v32, v23);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  }
  return result;
}

uint64_t sub_1A8DAB8E0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1A8DA9BF0(a1, a2);
}

void sub_1A8DAB8F8()
{
}

uint64_t sub_1A8DAB954@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  char v12 = *v2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1A8DA9AF4((uint64_t)v8, &v12, AssociatedTypeWitness, AssociatedConformanceWitness, a2);
}

void sub_1A8DABA94()
{
}

uint64_t sub_1A8DABAA4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, size_t *a4@<X8>)
{
  return sub_1A8DAB570(a1, a2, a3, a4);
}

uint64_t _s5DHKEMO10PrivateKeyVMa()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _s5DHKEMO9PublicKeyVMa()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1A8DABB14()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A8DABBB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = ~v5;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 1) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 1) & v6, ((unint64_t)a2 + v5 + 1) & v6);
  }
  return v3;
}

uint64_t sub_1A8DABC94(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

unsigned char *sub_1A8DABCD0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

unsigned char *sub_1A8DABD40(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

unsigned char *sub_1A8DABDB0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

unsigned char *sub_1A8DABE20(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_1A8DABE90(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFC) {
    unsigned int v7 = 252;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 1) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)&a1[v9];
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9]) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFC) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v6 + 1] & ~v6);
      }
      unsigned int v15 = *a1;
      if (v15 >= 4) {
        return v15 - 3;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = a1[v9];
  if (!a1[v9]) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_1A8DAC030(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFC) {
    unsigned int v8 = 252;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 1) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x1A8DAC284);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFC)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 1] & ~v9;
          char v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else
        {
          *a1 = a2 + 3;
        }
      }
      return;
  }
}

_UNKNOWN **sub_1A8DAC2AC()
{
  return &off_1EFF603B0;
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>(void *a1@<X8>)
{
  return sub_1A8DAC300(a1);
}

uint64_t sub_1A8DAC2D0@<X0>(void *a1@<X8>)
{
  return sub_1A8DAC300(a1);
}

uint64_t SecureEnclave.P384.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>(void *a1@<X8>)
{
  return sub_1A8DAC300(a1);
}

uint64_t sub_1A8DAC300@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)sub_1A8DAC380(*(void **)(v1 + 24));
  if (!v2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v5;
    sub_1A8D8BE04(result, v5);
    unsigned int v8 = sub_1A8DADB28(v6, v7);
    sub_1A8D8BD58(v6, v7);
    uint64_t result = sub_1A8D8BD58(v6, v7);
    *a1 = v8;
  }
  return result;
}

void *sub_1A8DAC380(void *a1)
{
  v16[1] = *(id *)MEMORY[0x1E4F143B8];
  sub_1A8DE97C0();
  unint64_t v2 = ccec_export_pub_size();
  uint64_t v3 = sub_1A8DE97D0();
  *(void *)(v3 + 16) = v2;
  ccec_export_pub();
  *(void *)(v3 + 16) = v2;
  uint64_t v4 = sub_1A8D93118(v3);
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v7 = (void *)sub_1A8DE94A0();
  sub_1A8D8BD58(v4, v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8B60);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1A8DEC2F0;
  *(void *)(v8 + 32) = sub_1A8DE9640();
  *(void *)(v8 + 40) = v9;
  size_t v10 = (void *)sub_1A8DE97A0();
  swift_bridgeObjectRelease();
  sub_1A8DB2F1C(MEMORY[0x1E4FBC860]);
  BOOL v11 = (void *)sub_1A8DE9560();
  swift_bridgeObjectRelease();
  v16[0] = 0;
  id v12 = objc_msgSend(a1, sel_exchangeKey_algorithms_parameters_error_, v7, v10, v11, v16);

  id v13 = v16[0];
  if (v12)
  {
    unsigned int v14 = (void *)sub_1A8DE94C0();
  }
  else
  {
    unsigned int v14 = v13;
    sub_1A8DE93B0();

    swift_willThrow();
  }
  return v14;
}

uint64_t SecureEnclave.Curve25519.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (uint64_t)sub_1A8DAC5FC(*(void **)(v2 + 24), *a1);
  if (!v3)
  {
    uint64_t v7 = result;
    unint64_t v8 = v6;
    sub_1A8D8BE04(result, v6);
    uint64_t v9 = sub_1A8DADB28(v7, v8);
    sub_1A8D8BD58(v7, v8);
    uint64_t result = sub_1A8D8BD58(v7, v8);
    *a2 = v9;
  }
  return result;
}

void *sub_1A8DAC5FC(void *a1, uint64_t a2)
{
  v16[1] = *(id *)MEMORY[0x1E4F143B8];
  sub_1A8DE97C0();
  uint64_t v4 = sub_1A8D93118(a2);
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)sub_1A8DE94A0();
  sub_1A8D8BD58(v4, v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8B60);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1A8DEC2F0;
  *(void *)(v8 + 32) = sub_1A8DE9640();
  *(void *)(v8 + 40) = v9;
  size_t v10 = (void *)sub_1A8DE97A0();
  swift_bridgeObjectRelease();
  sub_1A8DB2F1C(MEMORY[0x1E4FBC860]);
  BOOL v11 = (void *)sub_1A8DE9560();
  swift_bridgeObjectRelease();
  v16[0] = 0;
  id v12 = objc_msgSend(a1, sel_exchangeKey_algorithms_parameters_error_, v7, v10, v11, v16);

  id v13 = v16[0];
  if (v12)
  {
    unsigned int v14 = (void *)sub_1A8DE94C0();
  }
  else
  {
    unsigned int v14 = v13;
    sub_1A8DE93B0();

    swift_willThrow();
  }
  return v14;
}

uint64_t sub_1A8DAC7BC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (uint64_t)sub_1A8DAC5FC(*(void **)(v2 + 24), *a1);
  if (!v3)
  {
    uint64_t v7 = result;
    unint64_t v8 = v6;
    sub_1A8D8BE04(result, v6);
    uint64_t v9 = sub_1A8DADB28(v7, v8);
    sub_1A8D8BD58(v7, v8);
    uint64_t result = sub_1A8D8BD58(v7, v8);
    *a2 = v9;
  }
  return result;
}

unint64_t ccec_export_pub_size()
{
  return ((unint64_t)(cczp_bitlen() + 7) >> 2) | 1;
}

uint64_t static HKDF.extract<A>(inputKeyMaterial:salt:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v43 = a3;
  uint64_t v44 = a5;
  char v46 = a1;
  uint64_t v47 = a2;
  uint64_t v45 = a7;
  swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1A8DE9910();
  MEMORY[0x1F4188790](v9 - 8);
  char v39 = (char *)&v38 - v10;
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v38 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  int v15 = (char *)&v38 - v14;
  uint64_t v16 = sub_1A8DE9910();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v38 - v19;
  uint64_t v21 = *((void *)a4 - 1);
  uint64_t v22 = MEMORY[0x1F4188790](v18);
  uint64_t v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  unint64_t v26 = (char *)&v38 - v25;
  char v46 = (void *)*v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v47, v16);
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v21 + 48))(v20, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    size_t v27 = sub_1A8DAD938(MEMORY[0x1E4FBC860]);
    size_t v28 = v27;
LABEL_7:
    uint64_t v48 = v46;
    MEMORY[0x1F4188790](v27);
    *(&v38 - 6) = v36;
    *(&v38 - 5) = a4;
    *(&v38 - 4) = v37;
    *(&v38 - 3) = a6;
    *(&v38 - 2) = (char *)v28;
    type metadata accessor for HashedAuthenticationCode();
    SymmetricKey.withUnsafeBytes<A>(_:)((uint64_t (*)(uint64_t, uint64_t))sub_1A8DAE4C4, (uint64_t)(&v38 - 8));
    return swift_release();
  }
  (*(void (**)(char *, char *, char *))(v21 + 32))(v26, v20, a4);
  sub_1A8DE92B0();
  uint64_t v29 = sub_1A8DE9840();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v41 + 8);
  v30(v15, v11);
  if (v29 != 1)
  {
    (*(void (**)(char *, char *, char *))(v21 + 16))(v24, v26, a4);
    size_t v35 = sub_1A8DE97E0();
    size_t v28 = sub_1A8DAD938(v35);
    swift_bridgeObjectRelease();
    size_t v27 = (*(uint64_t (**)(char *, char *))(v21 + 8))(v26, a4);
    goto LABEL_7;
  }
  uint64_t v31 = v38;
  sub_1A8DE92B0();
  uint64_t v32 = (uint64_t)v39;
  sub_1A8DE9870();
  v30(v31, v11);
  uint64_t v33 = AssociatedTypeWitness;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v32, 1, AssociatedTypeWitness);
  if (result != 1)
  {
    swift_getAssociatedConformanceWitness();
    SymmetricKey.init<A>(data:)(v32, v33, (uint64_t *)&v48);
    size_t v27 = (*(uint64_t (**)(char *, char *))(v21 + 8))(v26, a4);
    size_t v28 = (size_t)v48;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned int (**a8)(char *, uint64_t, uint64_t)@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v66 = a8;
  uint64_t v71 = a2;
  uint64_t v65 = a1;
  unint64_t v56 = a9;
  v80[3] = *MEMORY[0x1E4F143B8];
  uint64_t v70 = type metadata accessor for HashedAuthenticationCode();
  uint64_t v64 = *(void (***)(char *, uint64_t))(v70 - 8);
  MEMORY[0x1F4188790](v70);
  uint64_t v69 = (char *)&v54 - v15;
  uint64_t v68 = sub_1A8DE9910();
  unint64_t v63 = *(void (***)(char *, uint64_t))(v68 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v68);
  uint64_t v67 = (char *)&v54 - v17;
  uint64_t v73 = a6;
  unint64_t v59 = *(void (***)(uint64_t, uint64_t))(a6 - 8);
  MEMORY[0x1F4188790](v16);
  __int16 v62 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for HMAC();
  uint64_t v57 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v54 - v21;
  uint64_t v23 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v25 = (char *)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v74 = a7;
  uint64_t v72 = a4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  double v28 = ceil((double)a3/ (double)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness));
  if ((~*(void *)&v28 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v28 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v28 < 256.0)
  {
    a7 = (int)v28;
    if (qword_1EB476778 == -1) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  swift_once();
LABEL_5:
  uint64_t v29 = off_1EB476770;
  uint64_t v79 = off_1EB476770;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v25, v65, a5);
  swift_retain();
  SymmetricKey.init<A>(data:)((uint64_t)v25, a5, v80);
  if (!a7)
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  uint64_t v55 = a3;
  uint64_t v61 = a10;
  uint64_t v30 = (void (**)(char *, uint64_t, uint64_t))(v63 + 2);
  uint64_t v66 = (unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 6);
  uint64_t v60 = (void (**)(char *, char *, uint64_t))(v59 + 4);
  ++v59;
  uint64_t v31 = v80[0];
  uint64_t v58 = v63 + 1;
  uint64_t v65 = (uint64_t)v80 + 1;
  ++v64;
  unint64_t v63 = (void (**)(char *, uint64_t))(v57 + 8);
  swift_retain();
  LOBYTE(v32) = 1;
  while (1)
  {
    v80[0] = v31;
    swift_retain();
    HMAC.init(key:)(v80, v72, v74);
    v80[0] = (uint64_t)v29;
    unint64_t v33 = sub_1A8D9AC7C();
    HMAC.update<A>(data:)((uint64_t)v80, v19, (uint64_t)&type metadata for SecureBytes, v33);
    size_t v35 = v67;
    uint64_t v34 = v68;
    (*v30)(v67, v71, v68);
    uint64_t v36 = v73;
    if ((*v66)(v35, 1, v73) == 1)
    {
      (*v58)(v35, v34);
    }
    else
    {
      uint64_t v37 = v22;
      uint64_t v38 = v30;
      uint64_t v39 = a7;
      uint64_t v40 = v31;
      uint64_t v41 = (uint64_t)v62;
      (*v60)(v62, v35, v36);
      HMAC.update<A>(data:)(v41, v19, v36, v61);
      uint64_t v42 = v41;
      uint64_t v31 = v40;
      a7 = v39;
      uint64_t v30 = v38;
      uint64_t v22 = v37;
      (*v59)(v42, v36);
    }
    LOBYTE(v80[0]) = v32;
    sub_1A8D95B14((uint64_t)v80, v65, v19);
    uint64_t v43 = v69;
    HMAC.finalize()(v19, v69);
    uint64_t v44 = v70;
    swift_getWitnessTable();
    uint64_t v45 = sub_1A8D9BD24();
    (*v64)(v43, v44);
    swift_release();
    uint64_t v46 = swift_retain();
    sub_1A8DAD5A8(v46);
    swift_release();
    (*v63)(v22, v19);
    if (a7 == v32) {
      break;
    }
    __int16 v32 = v32 + 1;
    uint64_t v29 = (void *)v45;
    if ((v32 & 0x100) != 0)
    {
      __break(1u);
      break;
    }
  }
  uint64_t v47 = v55;
  if (v55 < 0) {
    goto LABEL_25;
  }
  uint64_t v48 = (uint64_t)v79;
  swift_beginAccess();
  uint64_t v49 = *(void *)(v48 + 16);
  uint64_t v50 = sub_1A8DAD870(0, v47, v49, v48);
  if (v51) {
    uint64_t v52 = v49;
  }
  else {
    uint64_t v52 = v50;
  }
  if ((v52 | v49) < 0) {
    goto LABEL_26;
  }
  if (v49 < v52) {
    goto LABEL_27;
  }
  uint64_t v75 = 0;
  uint64_t v76 = v52;
  uint64_t v77 = v48;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4767B0);
  type metadata accessor for SecureBytes.Backing();
  sub_1A8D9B260();
  sub_1A8DE9BC0();
  swift_release();
  swift_release();
  uint64_t result = swift_release_n();
  *unint64_t v56 = v78;
  return result;
}

uint64_t sub_1A8DAD5A8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  swift_beginAccess();
  uint64_t v5 = v4[2];
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(a1 + 16);
  BOOL v8 = __OFADD__(v5, v7);
  uint64_t v9 = v5 + v7;
  if (v8)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v2);
    if (result - 32 >= v9) {
      return sub_1A8DD09A0(a1);
    }
  }
  if (v9 < 0) {
    goto LABEL_15;
  }
  if (HIDWORD(v9))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v9)
  {
    unsigned int v10 = (v9 - 1) | ((v9 - 1) >> 1) | (((v9 - 1) | ((v9 - 1) >> 1)) >> 2);
    unsigned int v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
    int v12 = v11 | HIWORD(v11);
    if (v12 == -1) {
      uint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v13 = (v12 + 1);
    }
  }
  else
  {
    uint64_t v13 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = v13;
  uint64_t v15 = (char *)*v2;
  uint64_t result = swift_beginAccess();
  uint64_t v16 = *((void *)v15 + 2);
  if ((v16 & 0x8000000000000000) == 0)
  {
    sub_1A8D98CE8(v15, 0, v16);
    *uint64_t v2 = (const void *)v14;
    swift_release();
    return sub_1A8DD09A0(a1);
  }
LABEL_17:
  __break(1u);
  return result;
}

size_t sub_1A8DAD6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  unsigned int v10 = *v4;
  size_t result = swift_beginAccess();
  uint64_t v12 = a4 - a3;
  if (!a3) {
    uint64_t v12 = 0;
  }
  if (a1 < 0 || v12 < a1)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (a2 < 0 || v12 < a2) {
    goto LABEL_21;
  }
  uint64_t v13 = v10[2];
  int64_t v14 = v13 + a2 - a1;
  if (__OFADD__(v13, a2 - a1))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  size_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    size_t result = _swift_stdlib_malloc_size(*v5);
    if ((uint64_t)(result - 32) >= v14) {
      return sub_1A8DD0A70(a1, a2, a3, a4);
    }
  }
  if (v14 < 0) {
    goto LABEL_23;
  }
  if (HIDWORD(v14))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v14)
  {
    unsigned int v15 = (v14 - 1) | ((v14 - 1) >> 1) | (((v14 - 1) | ((v14 - 1) >> 1)) >> 2);
    unsigned int v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
    int v17 = v16 | HIWORD(v16);
    if (v17 == -1) {
      uint64_t v18 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v18 = (v17 + 1);
    }
  }
  else
  {
    uint64_t v18 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  *(void *)(v19 + 24) = v18;
  uint64_t v20 = (char *)*v5;
  size_t result = swift_beginAccess();
  uint64_t v21 = *((void *)v20 + 2);
  if ((v21 & 0x8000000000000000) == 0)
  {
    sub_1A8D98CE8(v20, 0, v21);
    *uint64_t v5 = (const void *)v19;
    swift_release();
    return sub_1A8DD0A70(a1, a2, a3, a4);
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1A8DAD870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_beginAccess();
  uint64_t v9 = *(void *)(a4 + 16);
  if (v9 < a3 || (a3 | a1) < 0 || v9 < a1)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v10 = a3 - a1;
  if (a2 >= 1)
  {
    if (v10 < 0 || v10 >= a2) {
      goto LABEL_11;
    }
    return 0;
  }
  if (v10 <= 0 && v10 > a2) {
    return 0;
  }
LABEL_11:
  uint64_t result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (result < 0 || v9 < result) {
    goto LABEL_17;
  }
  return result;
}

size_t sub_1A8DAD938(size_t result)
{
  size_t v1 = *(void *)(result + 16);
  if (HIDWORD(v1))
  {
    __break(1u);
  }
  else
  {
    if (v1)
    {
      unsigned int v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
      unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
      int v4 = v3 | HIWORD(v3);
      if (v4 == -1) {
        uint64_t v5 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v5 = (v4 + 1);
      }
    }
    else
    {
      uint64_t v5 = 1;
    }
    unint64_t v6 = (const void *)(result + 32);
    type metadata accessor for SecureBytes.Backing();
    uint64_t v7 = (void *)swift_allocObject();
    void v7[2] = 0;
    v7[3] = v5;
    _swift_stdlib_malloc_size(v7);
    memcpy(v7 + 4, v6, v1);
    swift_beginAccess();
    void v7[2] = v1;
    uint64_t result = _swift_stdlib_malloc_size(v7);
    if ((uint64_t)(result - 32) >= (uint64_t)v1) {
      return (size_t)v7;
    }
  }
  __break(1u);
  return result;
}

size_t sub_1A8DADA24(uint64_t a1)
{
  size_t result = swift_beginAccess();
  size_t v3 = *(void *)(a1 + 16);
  if (HIDWORD(v3))
  {
    __break(1u);
  }
  else
  {
    int v4 = (const void *)(a1 + 32);
    if (v3)
    {
      unsigned int v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
      unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
      int v7 = v6 | HIWORD(v6);
      if (v7 == -1) {
        uint64_t v8 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v8 = (v7 + 1);
      }
    }
    else
    {
      uint64_t v8 = 1;
    }
    type metadata accessor for SecureBytes.Backing();
    uint64_t v9 = (void *)swift_allocObject();
    v9[2] = 0;
    v9[3] = v8;
    _swift_stdlib_malloc_size(v9);
    memcpy(v9 + 4, v4, v3);
    swift_beginAccess();
    v9[2] = v3;
    size_t result = _swift_stdlib_malloc_size(v9);
    if ((uint64_t)(result - 32) >= (uint64_t)v3) {
      return (size_t)v9;
    }
  }
  __break(1u);
  return result;
}

void *sub_1A8DADB28(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  int64_t v4 = a1;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v2 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      sub_1A8D8BE04(a1, a2);
      uint64_t v6 = sub_1A8DE9340();
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = sub_1A8DE9370();
        if (__OFSUB__((int)v4, v8))
        {
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
          JUMPOUT(0x1A8DADF40);
        }
        uint64_t v9 = (const void *)(v7 + (int)v4 - v8);
      }
      else
      {
LABEL_28:
        uint64_t v9 = 0;
      }
      uint64_t v23 = sub_1A8DE9360();
      if (v23 >= v2) {
        int64_t v24 = v2;
      }
      else {
        int64_t v24 = v23;
      }
      if (v9) {
        int64_t v25 = v24;
      }
      else {
        int64_t v25 = 0;
      }
      if (v25 < 0) {
        goto LABEL_57;
      }
      if (v25)
      {
        unsigned int v26 = (v25 - 1) | ((v25 - 1) >> 1) | (((v25 - 1) | ((v25 - 1) >> 1)) >> 2);
        unsigned int v27 = v26 | (v26 >> 4) | ((v26 | (v26 >> 4)) >> 8);
        int v28 = v27 | HIWORD(v27);
        if (v28 == -1) {
          uint64_t v29 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v29 = (v28 + 1);
        }
      }
      else
      {
        uint64_t v29 = 1;
      }
      type metadata accessor for SecureBytes.Backing();
      uint64_t v22 = (void *)swift_allocObject();
      uint64_t v22[2] = 0;
      void v22[3] = v29;
      _swift_stdlib_malloc_size(v22);
      if (v9) {
        memmove(v22 + 4, v9, v24);
      }
      else {
        int64_t v24 = 0;
      }
      swift_beginAccess();
      uint64_t v22[2] = v24;
      int64_t v16 = _swift_stdlib_malloc_size(v22);
      sub_1A8D8BD58(v4, v3);
      if (v16 - 32 < v24)
      {
        __break(1u);
LABEL_47:
        uint64_t v21 = 0xFFFFFFFFLL;
LABEL_48:
        type metadata accessor for SecureBytes.Backing();
        uint64_t v22 = (void *)swift_allocObject();
        uint64_t v22[2] = 0;
        void v22[3] = v21;
        _swift_stdlib_malloc_size(v22);
        if (v3) {
          memmove(v22 + 4, (const void *)v3, v16);
        }
        else {
          int64_t v16 = 0;
        }
        swift_beginAccess();
        uint64_t v22[2] = v16;
        size_t v30 = _swift_stdlib_malloc_size(v22);
        swift_release();
        swift_release();
        if ((uint64_t)(v30 - 32) < v16) {
          goto LABEL_58;
        }
      }
      return v22;
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      unint64_t v3 = sub_1A8DE9340();
      if (!v3) {
        goto LABEL_11;
      }
      uint64_t v12 = sub_1A8DE9370();
      if (__OFSUB__(v10, v12)) {
        goto LABEL_60;
      }
      v3 += v10 - v12;
LABEL_11:
      BOOL v13 = __OFSUB__(v11, v10);
      int64_t v14 = v11 - v10;
      if (v13) {
        goto LABEL_54;
      }
      uint64_t v15 = sub_1A8DE9360();
      if (v15 >= v14) {
        int64_t v16 = v14;
      }
      else {
        int64_t v16 = v15;
      }
      if (v3) {
        unint64_t v17 = v16;
      }
      else {
        unint64_t v17 = 0;
      }
      if ((v17 & 0x8000000000000000) != 0) {
        goto LABEL_55;
      }
      if (HIDWORD(v17)) {
        goto LABEL_56;
      }
      if (v17)
      {
        unsigned int v18 = (v17 - 1) | ((v17 - 1) >> 1) | (((v17 - 1) | ((v17 - 1) >> 1)) >> 2);
        unsigned int v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        int v20 = v19 | HIWORD(v19);
        if (v20 == -1) {
          goto LABEL_47;
        }
        uint64_t v21 = (v20 + 1);
      }
      else
      {
        uint64_t v21 = 1;
      }
      goto LABEL_48;
    case 3uLL:
      type metadata accessor for SecureBytes.Backing();
      uint64_t v22 = (void *)swift_allocObject();
      *((_OWORD *)v22 + 1) = xmmword_1A8DEC520;
      int64_t v4 = (int64_t)(v22 + 2);
      _swift_stdlib_malloc_size(v22);
      swift_beginAccess();
      uint64_t v22[2] = 0;
      if ((uint64_t)_swift_stdlib_malloc_size(v22) >= 32) {
        return v22;
      }
      __break(1u);
LABEL_25:
      unint64_t v3 = 1;
      goto LABEL_26;
    default:
      uint64_t __src = a1;
      __int16 v33 = a2;
      char v34 = BYTE2(a2);
      char v35 = BYTE3(a2);
      char v36 = BYTE4(a2);
      int64_t v4 = BYTE6(a2);
      char v37 = BYTE5(a2);
      if (!BYTE6(a2)) {
        goto LABEL_25;
      }
      unsigned int v5 = (BYTE6(a2) - 1) | ((BYTE6(a2) - 1) >> 1) | (((BYTE6(a2) - 1) | ((BYTE6(a2) - 1) >> 1)) >> 2);
      unint64_t v3 = (v5 | (v5 >> 4)) + 1;
LABEL_26:
      type metadata accessor for SecureBytes.Backing();
      uint64_t v22 = (void *)swift_allocObject();
      uint64_t v22[2] = 0;
      void v22[3] = v3;
      _swift_stdlib_malloc_size(v22);
      memcpy(v22 + 4, &__src, v4);
      swift_beginAccess();
      uint64_t v22[2] = v4;
      if ((uint64_t)(_swift_stdlib_malloc_size(v22) - 32) >= v4) {
        return v22;
      }
      __break(1u);
      goto LABEL_28;
  }
}

uint64_t static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, char *a10, uint64_t a11)
{
  uint64_t v28 = a8;
  uint64_t v29 = a1;
  uint64_t v38 = a4;
  uint64_t v31 = a2;
  char v36 = a9;
  uint64_t v35 = a11;
  __int16 v32 = a10;
  uint64_t v33 = a3;
  uint64_t v37 = sub_1A8DE9910();
  uint64_t v34 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v15 = (char *)&v28 - v14;
  uint64_t v30 = sub_1A8DE9910();
  uint64_t v16 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  unsigned int v18 = (char *)&v28 - v17;
  uint64_t v19 = type metadata accessor for HashedAuthenticationCode();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v28 - v21;
  uint64_t v39 = *v29;
  uint64_t v23 = *((void *)a6 - 1);
  (*(void (**)(char *, uint64_t, char *))(v23 + 16))(v18, v31, a6);
  (*(void (**)(char *, void, uint64_t, char *))(v23 + 56))(v18, 0, 1, a6);
  uint64_t v24 = v28;
  static HKDF.extract<A>(inputKeyMaterial:salt:)(&v39, (uint64_t)v18, a5, a6, v28, v32, (uint64_t)v22);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v30);
  uint64_t v25 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v15, v33, a7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v15, 0, 1, a7);
  uint64_t WitnessTable = (unsigned int (**)(char *, uint64_t, uint64_t))swift_getWitnessTable();
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)((uint64_t)v22, (uint64_t)v15, v38, a5, v19, a7, v24, WitnessTable, v36, v35);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
}

uint64_t static HKDF.deriveKey<A>(inputKeyMaterial:info:outputByteCount:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v19 = *a1;
  uint64_t v18 = MEMORY[0x1E4FBC860];
  uint64_t v15 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
  uint64_t v16 = (char *)sub_1A8D8A81C();
  return static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)(&v19, (uint64_t)&v18, a2, a3, a4, v15, a5, a6, a8, v16, a7);
}

uint64_t static HKDF.deriveKey<A>(inputKeyMaterial:salt:outputByteCount:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, void *a8@<X8>)
{
  uint64_t v19 = *a1;
  uint64_t v18 = MEMORY[0x1E4FBC860];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
  unint64_t v16 = sub_1A8D8A81C();
  return static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)(&v19, a2, (uint64_t)&v18, a3, a4, a5, v15, a6, a8, a7, v16);
}

uint64_t static HKDF.deriveKey(inputKeyMaterial:outputByteCount:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v14 = *a1;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v13 = MEMORY[0x1E4FBC860];
  uint64_t v9 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
  uint64_t v10 = (char *)sub_1A8D8A81C();
  return static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)(&v14, (uint64_t)&v13, (uint64_t)&v12, a2, a3, v9, (uint64_t)v9, a4, a5, v10, (uint64_t)v10);
}

uint64_t sub_1A8DAE4C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5 = v3[2];
  uint64_t v6 = v3[4];
  uint64_t v7 = v3[6];
  v11[0] = a1;
  v11[1] = a2;
  uint64_t v10 = v7;
  unint64_t v8 = sub_1A8D8A898();
  return static HMAC.authenticationCode<A>(for:using:)((uint64_t)v11, &v10, v5, MEMORY[0x1E4FBB2B8], v6, v8, a3);
}

uint64_t sub_1A8DAE538(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 - a3;
  if (!a3) {
    uint64_t v4 = 0;
  }
  if (result < 0 || v4 < result)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0 && v4 >= a2)
  {
    return a2 - result;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for HKDF()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1A8DAE584(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  v12[2] = *MEMORY[0x1E4F143B8];
  v12[0] = a3;
  v12[1] = a4;
  v11[5] = v12;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      char v7 = sub_1A8DD38F4((int)a1, a1 >> 32, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1A8DAF938);
      sub_1A8D8BD58(a1, a2);
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      char v7 = sub_1A8DD38F4(v8, v9, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1A8DAF938);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v11, 0, 14);
      uint64_t v6 = (char *)v11;
      goto LABEL_7;
    default:
      v11[0] = a1;
      LOWORD(v11[1]) = a2;
      BYTE2(v11[1]) = BYTE2(a2);
      BYTE3(v11[1]) = BYTE3(a2);
      BYTE4(v11[1]) = BYTE4(a2);
      BYTE5(v11[1]) = BYTE5(a2);
      uint64_t v6 = (char *)v11 + BYTE6(a2);
LABEL_7:
      char v7 = sub_1A8DB8864((uint64_t)v11, (uint64_t)v6, a3, a4);
      break;
  }
  return v7 & 1;
}

uint64_t AES.CMAC.update<A>(data:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = &v11[-v8];
  sub_1A8DE92B0();
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = v3;
  swift_getAssociatedConformanceWitness();
  sub_1A8DE9770();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t AES.CMAC.finalize()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(char **)v1;
  uint64_t v8 = sub_1A8D93078(*(void *)(v1 + 8));
  unint64_t v9 = v4;
  sub_1A8DD9764(&v8, 0);
  uint64_t v7 = v3;
  sub_1A8DE97C0();
  sub_1A8DAF1DC(&v8, &v7);
  *a1 = sub_1A8D924B0(v8, v9);
  a1[1] = v5;

  return swift_bridgeObjectRelease();
}

uint64_t AES.CMAC.init(key:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t result = AES.CMAC.init(key:outputSize:)(&v5, 16, v6);
  uint64_t v4 = v6[1];
  *a2 = v6[0];
  a2[1] = v4;
  return result;
}

uint64_t AES.CMAC.init(key:outputSize:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t result = swift_beginAccess();
  unint64_t v7 = *(void *)(v5 + 16);
  if (v7 >> 60)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = 8 * v7;
    if (v8 != 128 && v8 != 192 && v8 != 256) {
      goto LABEL_14;
    }
    uint64_t result = getCMACContextSize();
    if ((result & 0x8000000000000000) == 0)
    {
      size_t v9 = result;
      if (result)
      {
        uint64_t v10 = sub_1A8DE97D0();
        *(void *)(v10 + 16) = v9;
        bzero((void *)(v10 + 32), v9);
      }
      else
      {
        uint64_t v10 = MEMORY[0x1E4FBC860];
      }
      ccaes_cbc_encrypt_mode();
      int v11 = cccmac_init();
      uint64_t result = swift_release();
      if (!v11)
      {
        *a3 = v10;
        a3[1] = a2;
        return result;
      }
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t AES.CMAC.update(bufferPointer:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if (a1) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)sub_1A8DAF578(v3);
  uint64_t v3 = result;
  if (!a1) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t result = cccmac_update();
  if (!result)
  {
    *uint64_t v1 = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1A8DAEB28()
{
  return sub_1A8DE9390();
}

uint64_t sub_1A8DAEC2C()
{
  return sub_1A8DAEB28();
}

uint64_t sub_1A8DAEC4C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v5;
  if (result)
  {
    if (a1) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)sub_1A8DAF578(v5);
  uint64_t v5 = result;
  *a3 = result;
  if (!a1) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t result = cccmac_update();
  if (!result)
  {
    *a3 = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t AES.CMAC.MAC.byteCount.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t result = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      BOOL v4 = __OFSUB__(HIDWORD(v1), v1);
      int v5 = HIDWORD(v1) - v1;
      if (v4)
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x1A8DAED38);
      }
      return v5;
    case 2uLL:
      uint64_t v8 = v1 + 16;
      uint64_t v6 = *(void *)(v1 + 16);
      uint64_t v7 = *(void *)(v8 + 8);
      uint64_t result = v7 - v6;
      if (!__OFSUB__(v7, v6)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(v2);
  }
}

uint64_t AES.CMAC.MAC.withUnsafeBytes<A>(_:)()
{
  return sub_1A8DE9490();
}

uint64_t AES.CMAC.MAC.hash(into:)()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  sub_1A8D8BE04(v2, v1);
  sub_1A8DE94D0();

  return sub_1A8D8BD58(v2, v1);
}

uint64_t AES.CMAC.MAC.hashValue.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  sub_1A8DE9BD0();
  sub_1A8D8BE04(v1, v2);
  sub_1A8DE94D0();
  sub_1A8D8BD58(v1, v2);
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DAEE2C()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t result = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      BOOL v4 = __OFSUB__(HIDWORD(v1), v1);
      int v5 = HIDWORD(v1) - v1;
      if (v4)
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x1A8DAEE8CLL);
      }
      return v5;
    case 2uLL:
      uint64_t v8 = v1 + 16;
      uint64_t v6 = *(void *)(v1 + 16);
      uint64_t v7 = *(void *)(v8 + 8);
      uint64_t result = v7 - v6;
      if (!__OFSUB__(v7, v6)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(v2);
  }
}

uint64_t sub_1A8DAEE9C()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  sub_1A8DE9BD0();
  sub_1A8D8BE04(v1, v2);
  sub_1A8DE94D0();
  sub_1A8D8BD58(v1, v2);
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DAEF00()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  sub_1A8D8BE04(v2, v1);
  sub_1A8DE94D0();

  return sub_1A8D8BD58(v2, v1);
}

uint64_t sub_1A8DAEF60()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  sub_1A8DE9BD0();
  sub_1A8D8BE04(v1, v2);
  sub_1A8DE94D0();
  sub_1A8D8BD58(v1, v2);
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DAEFC0()
{
  return AES.CMAC.MAC.withUnsafeBytes<A>(_:)();
}

uint64_t sub_1A8DAEFD8()
{
  return sub_1A8DAEFE0(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_1A8DAEFE0(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = 0x203A43414DLL;
  unint64_t v12 = 0xE500000000000000;
  sub_1A8D8BE04(a1, a2);
  uint64_t v4 = sub_1A8DC9954(a1, a2);
  uint64_t result = sub_1A8D8BD58(a1, a2);
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  size_t v7 = 2 * v6;
  if (2 * v6 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (v6)
  {
    uint64_t v8 = sub_1A8DE97D0();
    *(void *)(v8 + 16) = v7;
    bzero((void *)(v8 + 32), v7);
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
  }
  uint64_t v9 = 0;
  uint64_t v10 = v8;
  sub_1A8DE97C0();
  sub_1A8D96AEC(v4, &v10, &v9);
  swift_bridgeObjectRelease();
  sub_1A8DE97C0();
  sub_1A8DE9650();
  swift_release();
  swift_bridgeObjectRelease_n();
  sub_1A8DE9680();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1A8DAF120@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  int v5 = sub_1A8DC3FD4(v4, v3);
  uint64_t v7 = v6;
  uint64_t result = sub_1A8D8BD58(v4, v3);
  *a1 = v5;
  a1[1] = v7;
  return result;
}

uint64_t sub_1A8DAF178()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = sub_1A8DC9954(v1, v2);
  sub_1A8D8BD58(v1, v2);
  return v3;
}

uint64_t sub_1A8DAF1C0(void *a1, unsigned char *a2, uint64_t a3)
{
  return sub_1A8DC8858(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
}

uint64_t sub_1A8DAF1C8(uint64_t a1, uint64_t a2)
{
  return sub_1A8DAE584(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

uint64_t sub_1A8DAF1DC(void *a1, char **a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[1];
  switch((unint64_t)v3 >> 62)
  {
    case 1uLL:
      *(void *)&long long v16 = *a1;
      *((void *)&v16 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t result = sub_1A8DAF490((char *)&v16, a2);
      uint64_t v9 = v16;
      unint64_t v10 = *((void *)&v16 + 1) | 0x4000000000000000;
      goto LABEL_7;
    case 2uLL:
      *(void *)&long long v16 = *a1;
      *((void *)&v16 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1A8DE93C0();
      uint64_t v2 = v16;
      uint64_t v6 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = *(void *)(v16 + 16);
      uint64_t v12 = *(void *)(v16 + 24);
      uint64_t v13 = sub_1A8DE9340();
      if (!v13)
      {
        __break(1u);
        JUMPOUT(0x1A8DAF480);
      }
      uint64_t v3 = v13;
      if (__OFSUB__(v11, sub_1A8DE9370())) {
        goto LABEL_18;
      }
      if (__OFSUB__(v12, v11)) {
        goto LABEL_21;
      }
      sub_1A8DE9360();
      uint64_t v3 = (uint64_t)*a2;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a2 = (char *)v3;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_12;
      }
      goto LABEL_22;
    case 3uLL:
      *(void *)((char *)&v16 + 7) = 0;
      *(void *)&long long v16 = 0;
      uint64_t v6 = (uint64_t)*a2;
      char v15 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = (char *)v6;
      if (v15) {
        goto LABEL_15;
      }
      goto LABEL_19;
    default:
      *(void *)&long long v16 = *a1;
      WORD4(v16) = v3;
      BYTE10(v16) = BYTE2(v3);
      BYTE11(v16) = BYTE3(v3);
      BYTE12(v16) = BYTE4(v3);
      BYTE13(v16) = BYTE5(v3);
      BYTE14(v16) = BYTE6(v3);
      uint64_t v6 = (uint64_t)*a2;
      char v7 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = (char *)v6;
      if ((v7 & 1) == 0)
      {
        uint64_t v6 = (uint64_t)sub_1A8DAF578(v6);
        *a2 = (char *)v6;
      }
      uint64_t result = cccmac_final_generate();
      if (result)
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        uint64_t v6 = (uint64_t)sub_1A8DAF578(v6);
        *a2 = (char *)v6;
LABEL_15:
        uint64_t result = cccmac_final_generate();
        if (result)
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          uint64_t v3 = (uint64_t)sub_1A8DAF578(v3);
          *a2 = (char *)v3;
LABEL_12:
          uint64_t result = cccmac_final_generate();
          if (result) {
            __break(1u);
          }
          *a2 = (char *)v3;
          *a1 = v2;
          a1[1] = v6 | 0x8000000000000000;
        }
        else
        {
          *a2 = (char *)v6;
        }
      }
      else
      {
        *a2 = (char *)v6;
        uint64_t v9 = v16;
        unint64_t v10 = DWORD2(v16) | ((unint64_t)BYTE12(v16) << 32) | ((unint64_t)BYTE13(v16) << 40) | ((unint64_t)BYTE14(v16) << 48);
LABEL_7:
        *a1 = v9;
        a1[1] = v10;
      }
      return result;
  }
}

uint64_t sub_1A8DAF490(char *a1, char **a2)
{
  sub_1A8DE93F0();
  uint64_t v4 = *(int *)a1;
  if (*((_DWORD *)a1 + 1) < (int)v4)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  a1 = (char *)*((void *)a1 + 1);
  uint64_t result = sub_1A8DE9340();
  if (!result) {
    goto LABEL_11;
  }
  if (__OFSUB__(v4, sub_1A8DE9370())) {
    goto LABEL_8;
  }
  sub_1A8DE9360();
  a1 = *a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = a1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    a1 = sub_1A8DAF578((uint64_t)a1);
    *a2 = a1;
  }
  uint64_t result = cccmac_final_generate();
  if (!result)
  {
    *a2 = a1;
    return result;
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1A8DAF564(uint64_t a1)
{
  return sub_1A8D963C8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1A8DAF578(uint64_t a1)
{
  return sub_1A8D96298(0, *(void *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_1A8DAF590()
{
  unint64_t result = qword_1E97A9398;
  if (!qword_1E97A9398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9398);
  }
  return result;
}

unint64_t sub_1A8DAF5E4(void *a1)
{
  a1[1] = sub_1A8DAF624();
  a1[2] = sub_1A8DAF678();
  a1[3] = sub_1A8DAF6CC();
  unint64_t result = sub_1A8DAF720();
  a1[4] = result;
  return result;
}

unint64_t sub_1A8DAF624()
{
  unint64_t result = qword_1E97A93A0;
  if (!qword_1E97A93A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A93A0);
  }
  return result;
}

unint64_t sub_1A8DAF678()
{
  unint64_t result = qword_1E97A93A8;
  if (!qword_1E97A93A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A93A8);
  }
  return result;
}

unint64_t sub_1A8DAF6CC()
{
  unint64_t result = qword_1E97A93B0;
  if (!qword_1E97A93B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A93B0);
  }
  return result;
}

unint64_t sub_1A8DAF720()
{
  unint64_t result = qword_1E97A93B8;
  if (!qword_1E97A93B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A93B8);
  }
  return result;
}

unint64_t sub_1A8DAF778()
{
  unint64_t result = qword_1E97A93C0;
  if (!qword_1E97A93C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A93C0);
  }
  return result;
}

void *_s4CMACVwCP(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  sub_1A8DE97C0();
  return a1;
}

uint64_t _s4CMACVwxx()
{
  return swift_bridgeObjectRelease();
}

void *_s4CMACVwca(void *a1, void *a2)
{
  *a1 = *a2;
  sub_1A8DE97C0();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *_s4CMACVwta(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t _s4CMACVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s4CMACVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AES.CMAC()
{
  return &type metadata for AES.CMAC;
}

ValueMetadata *type metadata accessor for AES.CMAC.MAC()
{
  return &type metadata for AES.CMAC.MAC;
}

BOOL sub_1A8DAF938@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  BOOL result = sub_1A8DB8864(a1, a2, **(void **)(v3 + 16), *(void *)(*(void *)(v3 + 16) + 8));
  if (!v4) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_1A8DAF970(uint64_t a1, uint64_t a2)
{
  return sub_1A8DAEC4C(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t SHA256.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DAFB4C(MEMORY[0x1E4F14718], &qword_1EB4769A8, a1);
}

uint64_t SHA256.update(bufferPointer:)(uint64_t a1, uint64_t a2)
{
  return sub_1A8D88C8C(a1, a2, &qword_1EB4769A8);
}

uint64_t SHA256.finalize()@<X0>(uint64_t a1@<X8>)
{
  return sub_1A8D88D94(a1);
}

uint64_t SHA384.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DAFB4C(MEMORY[0x1E4F14720], &qword_1EB4767E8, a1);
}

uint64_t SHA384.update(bufferPointer:)(uint64_t a1, uint64_t a2)
{
  return sub_1A8D88C8C(a1, a2, &qword_1EB4767E8);
}

uint64_t SHA384.finalize()@<X0>(uint64_t a1@<X8>)
{
  return sub_1A8DA8030(a1);
}

uint64_t static SHA256.blockByteCount.getter()
{
  return 64;
}

uint64_t static SHA256.byteCount.getter()
{
  return 32;
}

uint64_t sub_1A8DAFA68(uint64_t a1, uint64_t a2)
{
  return sub_1A8D88C8C(a1, a2, &qword_1E97A8BE8);
}

uint64_t sub_1A8DAFA74(uint64_t a1, uint64_t a2)
{
  return sub_1A8D88C8C(a1, a2, &qword_1EB4767E8);
}

uint64_t sub_1A8DAFA80(uint64_t a1, uint64_t a2)
{
  return sub_1A8D88C8C(a1, a2, &qword_1EB4769A8);
}

uint64_t _s9CryptoKit8InsecureO4SHA1V6update13bufferPointerySW_tF_0(uint64_t a1, uint64_t a2)
{
  return sub_1A8D88880(a1, a2, &qword_1EB476660);
}

uint64_t sub_1A8DAFA98()
{
  return 64;
}

uint64_t static SHA384.blockByteCount.getter()
{
  return 128;
}

uint64_t static SHA384.byteCount.getter()
{
  return 48;
}

uint64_t sub_1A8DAFAB0()
{
  return 128;
}

uint64_t sub_1A8DAFAB8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8D89318(MEMORY[0x1E4F14720], &qword_1EB4767E8, a1);
}

uint64_t sub_1A8DAFAD8(uint64_t a1, uint64_t a2)
{
  return sub_1A8D88C8C(a1, a2, &qword_1EB4767E8);
}

uint64_t sub_1A8DAFAF8@<X0>(uint64_t a1@<X8>)
{
  return sub_1A8DA8030(a1);
}

uint64_t static SHA512.blockByteCount.getter()
{
  return 128;
}

uint64_t static SHA512.byteCount.getter()
{
  return 64;
}

uint64_t SHA512.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DAFB4C(MEMORY[0x1E4F14728], &qword_1E97A8BE8, a1);
}

uint64_t sub_1A8DAFB4C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a1();
  if (result)
  {
    uint64_t v6 = result;
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v7 = swift_allocObject();
    getDigestSizeForDigestInfo();
    uint64_t v8 = swift_slowAlloc();
    uint64_t result = ccdigest_init();
    *(void *)(v7 + 16) = v6;
    *(void *)(v7 + 24) = v8;
    *a3 = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SHA512.update(bufferPointer:)(uint64_t a1, uint64_t a2)
{
  return sub_1A8D88C8C(a1, a2, &qword_1E97A8BE8);
}

uint64_t SHA512.finalize()@<X0>(_OWORD *a1@<X8>)
{
  return sub_1A8D889A4(a1);
}

unint64_t sub_1A8DAFC14()
{
  unint64_t result = qword_1E97A93C8;
  if (!qword_1E97A93C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A93C8);
  }
  return result;
}

unint64_t sub_1A8DAFC6C()
{
  unint64_t result = qword_1EB476698;
  if (!qword_1EB476698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476698);
  }
  return result;
}

unint64_t sub_1A8DAFCC4()
{
  unint64_t result = qword_1E97A93D0;
  if (!qword_1E97A93D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A93D0);
  }
  return result;
}

unint64_t sub_1A8DAFD18(uint64_t a1)
{
  unint64_t result = sub_1A8D9F724();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A8DAFD44()
{
  unint64_t result = qword_1EB476788;
  if (!qword_1EB476788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476788);
  }
  return result;
}

unint64_t sub_1A8DAFD9C()
{
  unint64_t result = qword_1E97A93D8;
  if (!qword_1E97A93D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A93D8);
  }
  return result;
}

unint64_t sub_1A8DAFDF0(uint64_t a1)
{
  unint64_t result = sub_1A8D9F77C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A8DAFE1C()
{
  unint64_t result = qword_1E97A93E0;
  if (!qword_1E97A93E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A93E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SHA384()
{
  return &type metadata for SHA384;
}

ValueMetadata *type metadata accessor for Insecure()
{
  return &type metadata for Insecure;
}

uint64_t sub_1A8DAFE90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v41 = a5;
  uint64_t v44 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v43 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t v49 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1A8DE9910();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v42 = (char *)&v40 - v10;
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v48 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  long long v16 = (char *)&v40 - v15;
  uint64_t v50 = a4;
  uint64_t v51 = a2;
  sub_1A8DE9840();
  uint64_t v46 = ccwrap_unwrapped_size();
  uint64_t result = ccaes_ecb_decrypt_mode();
  if (result)
  {
    uint64_t v18 = result;
    uint64_t v56 = MEMORY[0x1AD0E8030]();
    uint64_t v19 = swift_slowAlloc();
    swift_beginAccess();
    int v20 = ccecb_init();
    if (v20)
    {
      int v21 = v20;
      sub_1A8D8E240();
      swift_allocError();
      *(_DWORD *)uint64_t v22 = v21;
      *(unsigned char *)(v22 + 4) = 0;
      swift_willThrow();
      goto LABEL_10;
    }
    uint64_t v40 = v19;
    sub_1A8DE92B0();
    uint64_t v23 = sub_1A8DE9840();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v48 + 8);
    v24(v16, v11);
    if (v23 != 1)
    {
      uint64_t v32 = v51;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v51, a3);
      uint64_t v33 = sub_1A8DE9520();
      v55[3] = MEMORY[0x1E4F277C0];
      v55[4] = MEMORY[0x1E4F277B0];
      v55[0] = v33;
      v55[1] = v34;
      uint64_t v31 = v47;
      uint64_t v28 = v32;
      uint64_t v29 = v50;
      goto LABEL_8;
    }
    sub_1A8DE92B0();
    uint64_t v25 = v42;
    sub_1A8DE9870();
    v24(v14, v11);
    uint64_t v26 = AssociatedTypeWitness;
    uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, AssociatedTypeWitness);
    uint64_t v29 = v50;
    uint64_t v28 = v51;
    if (result != 1)
    {
      uint64_t v53 = v26;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v52);
      (*(void (**)(uint64_t *, char *, uint64_t))(v27 + 32))(boxed_opaque_existential_1, v25, v26);
      sub_1A8D934C8(&v52, (uint64_t)v55);
      uint64_t v31 = v47;
LABEL_8:
      uint64_t v19 = v40;
      unint64_t v35 = MEMORY[0x1F4188790](v46);
      *(&v40 - 6) = a3;
      *(&v40 - 5) = v29;
      *(&v40 - 4) = (uint64_t)v55;
      *(&v40 - 3) = v18;
      *(&v40 - 2) = v19;
      *(&v40 - 1) = v28;
      unint64_t v36 = sub_1A8D9C9CC(v35, (uint64_t (*)(void *, uint64_t *))sub_1A8DB04F0, (uint64_t)(&v40 - 8));
      if (!v31)
      {
        unint64_t v39 = v36;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
        *uint64_t v41 = v39;
        uint64_t v38 = (void *)v19;
        rsize_t v37 = v56;
        goto LABEL_11;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
LABEL_10:
      rsize_t v37 = v56;
      uint64_t v38 = (void *)v19;
LABEL_11:
      memset_s(v38, v37, 0, v37);
      return MEMORY[0x1AD0E8530](v19, -1, -1);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DB03E4(uint64_t a1, uint64_t a2, void *a3)
{
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  uint64_t result = sub_1A8DE9390();
  if (v5)
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v4 = 4;
    *(unsigned char *)(v4 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1A8DB04F0(uint64_t a1, uint64_t a2)
{
  return sub_1A8DB03E4(a1, a2, *(void **)(v2 + 32));
}

uint64_t sub_1A8DB0514@<X0>(uint64_t result@<X0>, void *a2@<X2>, _DWORD *a3@<X8>)
{
  if (*a2)
  {
    uint64_t v3 = result;
    uint64_t result = sub_1A8DE9840();
    if (v3)
    {
      uint64_t result = ccwrap_auth_decrypt();
      *a3 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DB05B4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1A8DB0514(a1, *(void **)(v2 + 32), a2);
}

uint64_t sub_1A8DB05E8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_1A8DEAA40;
      swift_retain_n();
      uint64_t v6 = v2 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_14;
      }
      if (v6 < (int)v2) {
        goto LABEL_24;
      }
      if (sub_1A8DE9340() && __OFSUB__((int)v2, sub_1A8DE9370())) {
        goto LABEL_25;
      }
      sub_1A8DE9380();
      swift_allocObject();
      uint64_t v10 = sub_1A8DE9320();
      swift_release();
      uint64_t v5 = v10;
LABEL_14:
      if (v6 < (int)v2) {
        goto LABEL_21;
      }
      swift_retain();
      if (!sub_1A8DE9340()) {
        goto LABEL_27;
      }
      if (__OFSUB__((int)v2, sub_1A8DE9370())) {
        goto LABEL_23;
      }
      sub_1A8DE9360();
      swift_beginAccess();
      uint64_t v4 = ccwrap_auth_encrypt();
      swift_release_n();
      unint64_t v9 = v5 | 0x4000000000000000;
      goto LABEL_18;
    case 2uLL:
      uint64_t v13 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain_n();
      sub_1A8DE93C0();
      uint64_t v7 = *(void *)(v2 + 16);
      uint64_t v8 = *(void *)(v2 + 24);
      swift_retain();
      if (!sub_1A8DE9340())
      {
        __break(1u);
LABEL_27:
        __break(1u);
        JUMPOUT(0x1A8DB09A8);
      }
      if (__OFSUB__(v7, sub_1A8DE9370()))
      {
        __break(1u);
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      if (__OFSUB__(v8, v7))
      {
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
      }
      sub_1A8DE9360();
      swift_beginAccess();
      uint64_t v4 = ccwrap_auth_encrypt();
      swift_release_n();
      unint64_t v9 = v13 | 0x8000000000000000;
LABEL_18:
      *a1 = v2;
      a1[1] = v9;
      return v4;
    case 3uLL:
      swift_beginAccess();
      return ccwrap_auth_encrypt();
    default:
      LOWORD(v12) = a1[1];
      BYTE2(v12) = BYTE2(a1[1]);
      HIBYTE(v12) = BYTE3(a1[1]);
      __int16 v14 = WORD2(a1[1]);
      unsigned __int8 v15 = BYTE6(a1[1]);
      swift_beginAccess();
      uint64_t v4 = ccwrap_auth_encrypt();
      *a1 = v2;
      a1[1] = v12 | ((unint64_t)v14 << 32) | ((unint64_t)HIBYTE(v14) << 40) | ((unint64_t)v15 << 48);
      return v4;
  }
}

uint64_t sub_1A8DB09B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  swift_beginAccess();
  uint64_t v13 = ccwrap_wrapped_size();
  *(void *)&long long v14 = sub_1A8D93078(v13);
  *((void *)&v14 + 1) = v3;
  sub_1A8DD9764(&v14, 0);
  long long v15 = v14;
  if (!ccaes_ecb_encrypt_mode()) {
    __break(1u);
  }
  rsize_t v4 = MEMORY[0x1AD0E8030]();
  uint64_t v5 = (void *)swift_slowAlloc();
  swift_beginAccess();
  int v6 = ccecb_init();
  if (v6)
  {
    int v7 = v6;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(unsigned char *)(v8 + 4) = 0;
  }
  else
  {
    swift_retain();
    int v9 = sub_1A8DB05E8((uint64_t *)&v15);
    swift_release();
    if (!v9)
    {
      unint64_t v12 = *((void *)&v15 + 1);
      uint64_t v2 = v15;
      sub_1A8D8BE04(v15, *((unint64_t *)&v15 + 1));
      memset_s(v5, v4, 0, v4);
      MEMORY[0x1AD0E8530](v5, -1, -1);
      sub_1A8D8BD58(v2, v12);
      return v2;
    }
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 3;
    *(unsigned char *)(v10 + 4) = 1;
  }
  swift_willThrow();
  memset_s(v5, v4, 0, v4);
  MEMORY[0x1AD0E8530](v5, -1, -1);
  sub_1A8D8BD58(v15, *((unint64_t *)&v15 + 1));
  return v2;
}

uint64_t sub_1A8DB0BE0()
{
  sub_1A8DE9390();
  return v1;
}

uint64_t sub_1A8DB0C54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, BOOL *a5@<X8>)
{
  uint64_t result = a4 - a3;
  if (a3) {
    uint64_t v8 = a4 - a3;
  }
  else {
    uint64_t v8 = 0;
  }
  if (a1)
  {
    if (v8 == a2 - a1)
    {
      if (a3)
      {
        uint64_t result = cc_cmp_safe();
        BOOL v9 = result == 0;
LABEL_10:
        *a5 = v9;
        return result;
      }
      goto LABEL_12;
    }
LABEL_9:
    BOOL v9 = 0;
    goto LABEL_10;
  }
  if (v8) {
    goto LABEL_9;
  }
  if (!a3) {
LABEL_12:
  }
    __break(1u);
  __break(1u);
  return result;
}

uint64_t sub_1A8DB0CD0()
{
  return sub_1A8DE9390();
}

uint64_t sub_1A8DB0D24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  return sub_1A8DB0C54(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), a3);
}

uint64_t sub_1A8DB0D40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  char v8 = a7 & 1;
  switch(a6 >> 62)
  {
    case 1uLL:
      LODWORD(v16) = HIDWORD(a5) - a5;
      if (__OFSUB__(HIDWORD(a5), a5))
      {
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x1A8DB0ECCLL);
      }
      uint64_t v16 = (int)v16;
LABEL_6:
      uint64_t v20 = 16;
      if ((a7 & 1) == 0) {
        uint64_t v20 = 8;
      }
      if (v16 == v20)
      {
        sub_1A8D8BE04(a3, a4);
        uint64_t v28 = sub_1A8D924B0(a3, a4);
        uint64_t v27 = v21;
        uint64_t v22 = sub_1A8D924B0(a5, a6);
        uint64_t v24 = v23;
        uint64_t result = sub_1A8D8BD58(a3, a4);
        *(void *)a8 = v22;
        *(void *)(a8 + 8) = v24;
        *(void *)(a8 + 16) = v28;
        *(void *)(a8 + 24) = v27;
        *(void *)(a8 + 32) = a1;
        *(void *)(a8 + 40) = a2;
        *(unsigned char *)(a8 + 48) = v8;
      }
      else
      {
LABEL_10:
        sub_1A8D8BD58(a1, a2);
        sub_1A8D8E240();
        swift_allocError();
        *(_DWORD *)uint64_t v26 = 1;
        *(unsigned char *)(v26 + 4) = 1;
        swift_willThrow();
        sub_1A8D8BD58(a5, a6);
        return sub_1A8D8BD58(a3, a4);
      }
      return result;
    case 2uLL:
      uint64_t v18 = *(void *)(a5 + 16);
      uint64_t v17 = *(void *)(a5 + 24);
      BOOL v19 = __OFSUB__(v17, v18);
      uint64_t v16 = v17 - v18;
      if (!v19) {
        goto LABEL_6;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_10;
    default:
      uint64_t v16 = BYTE6(a6);
      goto LABEL_6;
  }
}

uint64_t sub_1A8DB0EDC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v16 = *a2;
  uint64_t v17 = *a3;
  unint64_t v18 = a3[1];
  int v41 = *a5;
  swift_beginAccess();
  unint64_t v19 = *(void *)(v16 + 16);
  if (v19 >> 60)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v20 = 8 * v19;
  if (v20 != 128 && v20 != 256 && v20 != 192)
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v33 = 0;
    *(unsigned char *)(v33 + 4) = 1;
    return swift_willThrow();
  }
  uint64_t v34 = a9;
  uint64_t v35 = ccaes_ccm_encrypt_mode();
  if (v18 >> 60 != 15)
  {
    uint64_t v36 = v17;
    unint64_t v22 = v18;
    goto LABEL_9;
  }
  uint64_t v21 = sub_1A8D9CBEC(12);
  sub_1A8DA6274(v21, &v40);
  if (v10)
  {
LABEL_18:
    swift_unexpectedError();
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  unint64_t v22 = *((void *)&v40 + 1);
  uint64_t v36 = v40;
LABEL_9:
  sub_1A8D8C208(v17, v18);
  uint64_t v23 = sub_1A8DE9840();
  *(void *)&long long v39 = sub_1A8D93078(v23);
  *((void *)&v39 + 1) = v24;
  sub_1A8DD9764(&v39, 0);
  long long v40 = v39;
  char v25 = v41;
  if (v41) {
    uint64_t v26 = 16;
  }
  else {
    uint64_t v26 = 8;
  }
  *(void *)&long long v38 = sub_1A8D93078(v26);
  *((void *)&v38 + 1) = v27;
  sub_1A8DD9764(&v38, 0);
  long long v39 = v38;
  sub_1A8DB1704(v16 + 32, v16 + 32 + *(void *)(v16 + 16), v36, v22, a1, (uint64_t)&v40, a4, (uint64_t)&v39, v35, v35, a6, a7, a8, a10);
  if (v10)
  {
    sub_1A8D8BD58(v36, v22);
    sub_1A8D8BD58(v39, *((unint64_t *)&v39 + 1));
    unint64_t v29 = *((void *)&v40 + 1);
    uint64_t v28 = v40;
  }
  else
  {
    unsigned long long v30 = v40;
    long long v31 = v39;
    sub_1A8D8BE04(v36, v22);
    sub_1A8D8BE04(v30, *((unint64_t *)&v30 + 1));
    sub_1A8D8BE04(v31, *((unint64_t *)&v31 + 1));
    sub_1A8DB0D40(v36, v22, v30, *((unint64_t *)&v30 + 1), v31, *((unint64_t *)&v31 + 1), v25, v34);
    sub_1A8D8BD58(v36, v22);
    sub_1A8D8BD58(v31, *((unint64_t *)&v31 + 1));
    unint64_t v29 = v30 >> 64;
    uint64_t v28 = v30;
  }
  return sub_1A8D8BD58(v28, v29);
}

uint64_t sub_1A8DB11A8(long long *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v9 = a1[1];
  long long v32 = *a1;
  long long v33 = v9;
  long long v34 = a1[2];
  char v35 = *((unsigned char *)a1 + 48);
  uint64_t v10 = *a2;
  uint64_t v11 = ccaes_ccm_decrypt_mode();
  swift_beginAccess();
  unint64_t v12 = *(void *)(v10 + 16);
  if (v12 >> 60)
  {
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  uint64_t v13 = 8 * v12;
  if (v13 == 128 || v13 == 256 || v13 == 192)
  {
    long long v38 = v33;
    sub_1A8D9F2CC((uint64_t)&v38, (uint64_t)v39);
    sub_1A8D9F2CC((uint64_t)v39, (uint64_t)&v40);
    unsigned __int8 v14 = BYTE6(v41);
    uint64_t v15 = 0;
    switch(v41 >> 62)
    {
      case 1uLL:
        v41 &= 0x3FFFFFFFFFFFFFFFuLL;
        if (__OFSUB__(HIDWORD(v40), v40)) {
          goto LABEL_31;
        }
        uint64_t v15 = HIDWORD(v40) - (int)v40;
LABEL_11:
        *(void *)&long long v30 = sub_1A8D93078(v15);
        *((void *)&v30 + 1) = v19;
        sub_1A8DD9764(&v30, 0);
        long long v20 = v30;
        long long v30 = v38;
        long long v31 = v20;
        long long v36 = v32;
        if (v35) {
          size_t v21 = 16;
        }
        else {
          size_t v21 = 8;
        }
        sub_1A8D9F424((uint64_t)&v38);
        sub_1A8D9F424((uint64_t)&v36);
        uint64_t v22 = sub_1A8DE97D0();
        *(void *)(v22 + 16) = v21;
        bzero((void *)(v22 + 32), v21);
        uint64_t v29 = v22;
        sub_1A8DB2058(v10 + 32, v10 + 32 + *(void *)(v10 + 16), (uint64_t)&v32, (uint64_t)&v31, (uint64_t)&v30, a3, (uint64_t)&v29, v11, a4, a5);
        if (!v5)
        {
          sub_1A8D9F2CC((uint64_t)&v36, (uint64_t)v37);
          sub_1A8D9F2CC((uint64_t)v37, (uint64_t)&v42);
          switch(v43 >> 62)
          {
            case 1uLL:
              v43 &= 0x3FFFFFFFFFFFFFFFuLL;
              uint64_t v23 = (int)v42;
              if (SHIDWORD(v42) < (int)v42) {
                goto LABEL_33;
              }
              sub_1A8D9F424((uint64_t)&v36);
              sub_1A8D9F484((uint64_t *)&v32, (void (*)(uint64_t, uint64_t))sub_1A8D8BE04);
              if (!sub_1A8DE9340())
              {
                sub_1A8DE9360();
                __break(1u);
LABEL_37:
                sub_1A8DE9360();
                __break(1u);
                JUMPOUT(0x1A8DB16E4);
              }
              if (__OFSUB__(v23, sub_1A8DE9370())) {
                goto LABEL_35;
              }
              sub_1A8DE9360();
              sub_1A8DE97C0();
              a4 = cc_cmp_safe();
              swift_bridgeObjectRelease();
              sub_1A8D9F454((uint64_t)&v36);
LABEL_26:
              sub_1A8D9F484((uint64_t *)&v32, (void (*)(uint64_t, uint64_t))sub_1A8D8BD58);
              if (a4) {
                goto LABEL_27;
              }
              goto LABEL_24;
            case 2uLL:
              a4 = v43 & 0x3FFFFFFFFFFFFFFFLL;
              v43 &= 0x3FFFFFFFFFFFFFFFuLL;
              uint64_t v24 = *(void *)(v42 + 16);
              sub_1A8D9F484((uint64_t *)&v32, (void (*)(uint64_t, uint64_t))sub_1A8D8BE04);
              swift_retain();
              swift_retain();
              if (!sub_1A8DE9340()) {
                goto LABEL_37;
              }
              if (__OFSUB__(v24, sub_1A8DE9370())) {
                goto LABEL_34;
              }
              sub_1A8DE9360();
              sub_1A8DE97C0();
              int v25 = cc_cmp_safe();
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              sub_1A8D9F484((uint64_t *)&v32, (void (*)(uint64_t, uint64_t))sub_1A8D8BD58);
              if (!v25)
              {
LABEL_24:
                sub_1A8D9F454((uint64_t)&v36);
                unint64_t v26 = *((void *)&v31 + 1);
                a4 = v31;
                sub_1A8D8BE04(v31, *((unint64_t *)&v31 + 1));
                swift_bridgeObjectRelease();
                sub_1A8D8BD58(v30, *((unint64_t *)&v30 + 1));
                sub_1A8D8BD58(a4, v26);
                return a4;
              }
LABEL_27:
              sub_1A8D8E240();
              swift_allocError();
              *(_DWORD *)uint64_t v27 = 2;
              *(unsigned char *)(v27 + 4) = 1;
              swift_willThrow();
              break;
            case 3uLL:
              goto LABEL_25;
            default:
              v43 &= 0x3FFFFFFFFFFFFFFFuLL;
LABEL_25:
              sub_1A8D9F484((uint64_t *)&v32, (void (*)(uint64_t, uint64_t))sub_1A8D8BE04);
              sub_1A8DE97C0();
              a4 = cc_cmp_safe();
              swift_bridgeObjectRelease();
              goto LABEL_26;
          }
        }
        sub_1A8D9F454((uint64_t)&v36);
        swift_bridgeObjectRelease();
        sub_1A8D8BD58(v30, *((unint64_t *)&v30 + 1));
        sub_1A8D8BD58(v31, *((unint64_t *)&v31 + 1));
        break;
      case 2uLL:
        v41 &= 0x3FFFFFFFFFFFFFFFuLL;
        uint64_t v17 = *(void *)(v40 + 16);
        uint64_t v18 = *(void *)(v40 + 24);
        uint64_t v15 = v18 - v17;
        if (!__OFSUB__(v18, v17)) {
          goto LABEL_11;
        }
        goto LABEL_32;
      case 3uLL:
        goto LABEL_11;
      default:
        v41 &= 0x3FFFFFFFFFFFFFFFuLL;
        uint64_t v15 = v14;
        goto LABEL_11;
    }
  }
  else
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v16 = 0;
    *(unsigned char *)(v16 + 4) = 1;
    swift_willThrow();
  }
  return a4;
}

uint64_t sub_1A8DB1704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  v21[15] = *MEMORY[0x1E4F143B8];
  v21[4] = a11;
  v21[5] = a12;
  v21[6] = a13;
  v21[7] = a14;
  v21[8] = a5;
  v21[9] = a6;
  v21[10] = a7;
  v21[11] = a8;
  v21[12] = a10;
  v21[13] = a1;
  v21[14] = a2;
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      swift_retain();
      sub_1A8DD39A8((int)a3, a3 >> 32, (uint64_t (*)(uint64_t, uint64_t))sub_1A8DB2D60);
      uint64_t result = sub_1A8D8BD58(a3, a4);
      break;
    case 2uLL:
      uint64_t v19 = *(void *)(a3 + 16);
      uint64_t v20 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      sub_1A8DD39A8(v19, v20, (uint64_t (*)(uint64_t, uint64_t))sub_1A8DB2D60);
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      memset(v21, 0, 14);
      uint64_t v17 = (char *)v21;
      goto LABEL_7;
    default:
      v21[0] = a3;
      LOWORD(v21[1]) = a4;
      BYTE2(v21[1]) = BYTE2(a4);
      BYTE3(v21[1]) = BYTE3(a4);
      BYTE4(v21[1]) = BYTE4(a4);
      BYTE5(v21[1]) = BYTE5(a4);
      uint64_t v17 = (char *)v21 + BYTE6(a4);
LABEL_7:
      uint64_t result = sub_1A8DB1954((uint64_t)v21, (uint64_t)v17, a6, a7, a8, a10, a1, a9, a2, a11, a12, a13);
      break;
  }
  return result;
}

uint64_t sub_1A8DB1954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v31 = a5;
  uint64_t v32 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a1;
  uint64_t v35 = a8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_1A8DE9910();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v28 - v14;
  uint64_t v16 = swift_checkMetadataState();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v28 - v18;
  sub_1A8DE92B0();
  sub_1A8DE9870();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](result);
    *(&v28 - 12) = a10;
    *(&v28 - 11) = v22;
    *(&v28 - 10) = a12;
    *(&v28 - 9) = v23;
    uint64_t v24 = v29;
    *(&v28 - 8) = v28;
    *(&v28 - 7) = v24;
    uint64_t v25 = v33;
    *(&v28 - 6) = v31;
    *(&v28 - 5) = v25;
    *(&v28 - 4) = v34;
    *(&v28 - 3) = v26;
    uint64_t v27 = v32;
    *(&v28 - 2) = v30;
    *(&v28 - 1) = v27;
    swift_getAssociatedConformanceWitness();
    sub_1A8DE9390();
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v15, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_1A8DB1C5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v42 = a9;
  uint64_t v40 = a2;
  uint64_t v41 = a8;
  uint64_t v38 = a1;
  uint64_t v39 = a7;
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v35 = a4;
  uint64_t v44 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_1A8DE9910();
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t v18 = swift_checkMetadataState();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  size_t v21 = (char *)&v35 - v20;
  uint64_t v22 = sub_1A8DE9910();
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v35 - v23;
  (*(void (**)(char *, uint64_t))(v25 + 16))((char *)&v35 - v23, v44);
  uint64_t v26 = *(void *)(a14 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, a14);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1A8DE92B0();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v24, a14);
    sub_1A8DE9870();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v17, 1, AssociatedTypeWitness);
    if (result != 1)
    {
      MEMORY[0x1F4188790](result);
      uint64_t v29 = v36;
      *(&v35 - 10) = v35;
      *(&v35 - 9) = v29;
      uint64_t v30 = v39;
      *(&v35 - 8) = v37;
      *(&v35 - 7) = v30;
      *(&v35 - 6) = v41;
      *(&v35 - 5) = v31;
      *(&v35 - 4) = v33;
      *(&v35 - 3) = v32;
      uint64_t v34 = v40;
      *(&v35 - 2) = v38;
      *(&v35 - 1) = v34;
      swift_getAssociatedConformanceWitness();
      sub_1A8DE9390();
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, AssociatedTypeWitness);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DB2058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  long long v24 = *(_OWORD *)(a3 + 32);
  long long v25 = v24;
  v23[4] = a9;
  v23[5] = a10;
  v23[6] = a4;
  v23[7] = a5;
  v23[8] = a6;
  v23[9] = a7;
  v23[10] = a8;
  v23[11] = a1;
  v23[12] = a2;
  sub_1A8D9F2CC((uint64_t)&v25, (uint64_t)v26);
  sub_1A8D9F2CC((uint64_t)v26, (uint64_t)&v27);
  unsigned __int8 v16 = BYTE14(v27);
  switch(*((void *)&v27 + 1) >> 62)
  {
    case 1:
      *((void *)&v27 + 1) &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v18 = (int)v27;
      uint64_t v19 = SDWORD1(v27);
      if (SDWORD1(v27) < (int)v27) {
        __break(1u);
      }
      sub_1A8D9F424((uint64_t)&v24);
      sub_1A8DD39A8(v18, v19, (uint64_t (*)(uint64_t, uint64_t))sub_1A8DB2C08);
      break;
    case 2:
      *((void *)&v27 + 1) &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v20 = *(void *)(v27 + 16);
      uint64_t v21 = *(void *)(v27 + 24);
      sub_1A8D9F424((uint64_t)&v24);
      swift_retain();
      swift_retain();
      sub_1A8DD39A8(v20, v21, (uint64_t (*)(uint64_t, uint64_t))sub_1A8DB2C08);
      swift_release();
      swift_release();
      break;
    case 3:
      memset(v23, 0, 14);
      uint64_t v28 = a9;
      uint64_t v29 = a10;
      uint64_t v30 = a5;
      uint64_t v31 = a6;
      uint64_t v32 = a7;
      uint64_t v33 = a8;
      uint64_t v34 = a1;
      uint64_t v35 = a2;
      uint64_t v17 = (char *)v23;
      uint64_t v36 = v23;
      goto LABEL_7;
    default:
      *((void *)&v27 + 1) &= 0x3FFFFFFFFFFFFFFFuLL;
      v23[0] = v27;
      *(void *)((char *)v23 + 6) = *(void *)((char *)&v27 + 6);
      uint64_t v17 = (char *)v23 + v16;
      uint64_t v28 = a9;
      uint64_t v29 = a10;
      uint64_t v30 = a5;
      uint64_t v31 = a6;
      uint64_t v32 = a7;
      uint64_t v33 = a8;
      uint64_t v34 = a1;
      uint64_t v35 = a2;
      uint64_t v36 = v23;
LABEL_7:
      uint64_t v37 = v17;
      sub_1A8DB7CA4((uint64_t (*)(uint64_t, uint64_t))sub_1A8DB2C74);
      break;
  }
  return sub_1A8D9F454((uint64_t)&v24);
}

uint64_t sub_1A8DB22A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v41 = a9;
  uint64_t v39 = a7;
  uint64_t v40 = a8;
  uint64_t v37 = a6;
  uint64_t v38 = a2;
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v43 = a3;
  uint64_t v36 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = sub_1A8DE9910();
  MEMORY[0x1F4188790](v14 - 8);
  unsigned __int8 v16 = (char *)&v34 - v15;
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v34 - v19;
  uint64_t v21 = sub_1A8DE9910();
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v34 - v22;
  (*(void (**)(char *, uint64_t))(v24 + 16))((char *)&v34 - v22, v43);
  uint64_t v25 = *(void *)(a13 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, a13);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1A8DE92B0();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v23, a13);
    sub_1A8DE9870();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v16, 1, AssociatedTypeWitness);
    if (result != 1)
    {
      MEMORY[0x1F4188790](result);
      uint64_t v28 = v35;
      *(&v34 - 10) = v34;
      *(&v34 - 9) = v28;
      uint64_t v29 = v39;
      *(&v34 - 8) = v37;
      *(&v34 - 7) = v29;
      *(&v34 - 6) = v40;
      *(&v34 - 5) = v30;
      uint64_t v31 = v38;
      *(&v34 - 4) = v36;
      *(&v34 - 3) = v31;
      *(&v34 - 2) = v33;
      *(&v34 - 1) = v32;
      swift_getAssociatedConformanceWitness();
      sub_1A8DE9390();
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v16, AssociatedTypeWitness);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DB2698(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v14 = sub_1A8DAF578((uint64_t)v14);
    *a3 = v14;
  }
  uint64_t result = sub_1A8DB2794((uint64_t)(v14 + 32), (uint64_t)&v14[*((void *)v14 + 2) + 32], a4, a5, a6, a7, a8, a9, a10, a11, a12, a1);
  *a3 = v14;
  return result;
}

uint64_t sub_1A8DB2764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_1A8DB2794(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_1A8DB2794(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a4)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (!a6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!a8)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (!a10)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!a12)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!result)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t result = ccccm_one_shot();
  if (result)
  {
    int v12 = result;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = v12;
    *(unsigned char *)(v13 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1A8DB2878(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v11 = a1[1];
  switch(v11 >> 62)
  {
    case 1uLL:
      *(void *)&long long v34 = *a1;
      *((void *)&v34 + 1) = v11 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t result = sub_1A8DB2B0C((int *)&v34, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      uint64_t v14 = v34;
      unint64_t v15 = *((void *)&v34 + 1) | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      *(void *)&long long v34 = *a1;
      *((void *)&v34 + 1) = v11 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1A8DE93C0();
      uint64_t v16 = *((void *)&v34 + 1);
      uint64_t v17 = *(void *)(v34 + 16);
      uint64_t v18 = *(void *)(v34 + 24);
      uint64_t v19 = sub_1A8DE9340();
      if (!v19)
      {
        __break(1u);
        JUMPOUT(0x1A8DB2AFCLL);
      }
      uint64_t v20 = v19;
      uint64_t v21 = sub_1A8DE9370();
      uint64_t v22 = v17 - v21;
      if (__OFSUB__(v17, v21))
      {
        __break(1u);
LABEL_15:
        __break(1u);
      }
      BOOL v23 = __OFSUB__(v18, v17);
      uint64_t v24 = v18 - v17;
      if (v23) {
        goto LABEL_15;
      }
      uint64_t v25 = sub_1A8DE9360();
      if (v25 >= v24) {
        uint64_t v26 = v24;
      }
      else {
        uint64_t v26 = v25;
      }
      uint64_t result = sub_1A8DB2794(v20 + v22, v20 + v22 + v26, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      *a1 = v34;
      a1[1] = v16 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&v34 + 7) = 0;
      *(void *)&long long v34 = 0;
      return sub_1A8DB2794((uint64_t)&v34, (uint64_t)&v34, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    default:
      *(void *)&long long v34 = *a1;
      WORD4(v34) = v11;
      BYTE10(v34) = BYTE2(v11);
      BYTE11(v34) = BYTE3(v11);
      BYTE12(v34) = BYTE4(v11);
      BYTE13(v34) = BYTE5(v11);
      BYTE14(v34) = BYTE6(v11);
      uint64_t result = sub_1A8DB2794((uint64_t)&v34, (uint64_t)&v34 + BYTE6(v11), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      uint64_t v14 = v34;
      unint64_t v15 = DWORD2(v34) | ((unint64_t)BYTE12(v34) << 32) | ((unint64_t)BYTE13(v34) << 40) | ((unint64_t)BYTE14(v34) << 48);
LABEL_4:
      *a1 = v14;
      a1[1] = v15;
      return result;
  }
}

uint64_t sub_1A8DB2B0C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result = sub_1A8DE93F0();
  uint64_t v18 = *a1;
  uint64_t v19 = a1[1];
  if ((int)v19 < (int)v18)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t result = sub_1A8DE9340();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v20 = result;
  uint64_t result = sub_1A8DE9370();
  uint64_t v21 = v18 - result;
  if (__OFSUB__(v18, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v22 = v19 - v18;
  uint64_t v23 = sub_1A8DE9360();
  if (v23 >= v22) {
    uint64_t v24 = v22;
  }
  else {
    uint64_t v24 = v23;
  }
  return sub_1A8DB2794(v20 + v21, v20 + v21 + v24, a2, v25, v26, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_1A8DB2C08()
{
  return sub_1A8DB7CA4((uint64_t (*)(uint64_t, uint64_t))sub_1A8DB2C74);
}

uint64_t sub_1A8DB2C74()
{
  return sub_1A8DB7CA4((uint64_t (*)(uint64_t, uint64_t))sub_1A8DB2CE0);
}

uint64_t sub_1A8DB2CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1A8DB22A0(a1, a2, v3[4], v3[5], v3[6], v3[7], v3[8], v3[9], a3, v3[10], v3[11], v3[12], v3[2]);
}

uint64_t sub_1A8DB2D24(uint64_t a1, uint64_t a2)
{
  return sub_1A8DB2698(a1, a2, *(char ***)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80), *(void *)(v2 + 88));
}

uint64_t sub_1A8DB2D60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1A8DB1954(a1, a2, v3[7], v3[8], v3[9], v3[10], v3[11], a3, v3[12], v3[2], v3[3], v3[4]);
}

uint64_t sub_1A8DB2DA4()
{
  return sub_1A8DB7CA4((uint64_t (*)(uint64_t, uint64_t))sub_1A8DB2E14);
}

uint64_t sub_1A8DB2E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1A8DB1C5C(a1, a2, v3[6], v3[7], v3[8], v3[9], v3[10], v3[11], a3, v3[12], v3[13], v3[14], v3[2], v3[3]);
}

uint64_t sub_1A8DB2E60(uint64_t a1)
{
  return sub_1A8DB2878(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), a1);
}

uint64_t static AES.KeyWrap.wrap(_:using:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v4 = *a1;
  uint64_t v5 = v2;
  return sub_1A8DB09B8((uint64_t)&v5, &v4);
}

uint64_t static AES.KeyWrap.unwrap<A>(_:using:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v6 = *a2;
  return sub_1A8DAFE90((uint64_t)&v6, a1, a3, a4, a5);
}

ValueMetadata *type metadata accessor for AES.KeyWrap()
{
  return &type metadata for AES.KeyWrap;
}

unint64_t sub_1A8DB2F1C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A9418);
  uint64_t v2 = sub_1A8DE9B10();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1A8DB3DA0(v6, (uint64_t)&v15, &qword_1E97A9420);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1A8DB38D8(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1A8DB3B34(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A8DB3054(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A9428);
  uint64_t v2 = (void *)sub_1A8DE9B10();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    sub_1A8DE97C0();
    swift_unknownObjectRetain();
    unint64_t result = sub_1A8DB38D8(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A8DB3170(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8BD0);
  uint64_t v2 = sub_1A8DE9B10();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1A8DB3DA0(v6, (uint64_t)v15, &qword_1E97A8BC8);
    unint64_t result = sub_1A8DB3950((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_1A8DB3B34(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void SecureEnclave.P256.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1@<X0>, void *a2@<X8>)
{
}

unint64_t sub_1A8DB32E0()
{
  unint64_t result = qword_1E97A93E8;
  if (!qword_1E97A93E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A93E8);
  }
  return result;
}

unint64_t sub_1A8DB3334()
{
  unint64_t result = qword_1E97A93F8;
  if (!qword_1E97A93F8)
  {
    sub_1A8DB389C(255, &qword_1E97A93F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A93F8);
  }
  return result;
}

void SecureEnclave.P256.Signing.PrivateKey.init(from:)(__SecKey *a1@<X0>, void *a2@<X8>)
{
}

void sub_1A8DB33C8(__SecKey *a1@<X0>, uint64_t (*a2)(uint64_t *, uint64_t, unint64_t, void, unint64_t)@<X1>, void *a3@<X8>)
{
  CFDictionaryRef v7 = SecKeyCopyAttributes(a1);
  if (!v7)
  {
    sub_1A8DB32E0();
    swift_allocError();
    unsigned char *v13 = 0;
    swift_willThrow();

    return;
  }
  CFDictionaryRef v8 = v7;
  uint64_t v38 = a3;
  uint64_t v39 = a1;
  sub_1A8DB389C(0, &qword_1E97A93F0);
  sub_1A8DB3334();
  uint64_t v9 = sub_1A8DE9570();
  uint64_t v10 = sub_1A8DE9630();
  long long v11 = (void *)v10;
  if ((v9 & 0xC000000000000001) != 0)
  {
    uint64_t v12 = sub_1A8DE9AF0();

    swift_bridgeObjectRelease();
    if (!v12) {
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(void *)(v9 + 16) || (sub_1A8DB3994(v10), (v14 & 1) == 0))
    {

      swift_bridgeObjectRelease();
LABEL_13:
      sub_1A8DB32E0();
      swift_allocError();
      *uint64_t v19 = 1;
      swift_willThrow();

      return;
    }
    swift_unknownObjectRetain();

    swift_bridgeObjectRelease();
  }
  uint64_t v15 = sub_1A8DE9570();
  uint64_t v16 = sub_1A8DE9630();
  long long v17 = (void *)v16;
  if ((v15 & 0xC000000000000001) != 0)
  {
    uint64_t v18 = (void *)sub_1A8DE9AF0();

    swift_bridgeObjectRelease();
    if (!v18) {
      goto LABEL_22;
    }
  }
  else
  {
    if (!*(void *)(v15 + 16) || (unint64_t v20 = sub_1A8DB3994(v16), (v21 & 1) == 0))
    {

      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    uint64_t v18 = *(void **)(*(void *)(v15 + 56) + 8 * v20);
    swift_unknownObjectRetain();

    swift_bridgeObjectRelease();
  }
  if ((objc_msgSend(v18, sel_respondsToSelector_, sel_BOOLValue) & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (objc_msgSend(v18, sel_BOOLValue))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A9400);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A8DEC2F0;
    *(void *)(inited + 32) = sub_1A8DE9640();
    *(void *)(inited + 40) = v23;
    sub_1A8DB389C(0, &qword_1E97A9408);
    *(void *)(inited + 48) = sub_1A8DE98E0();
    unint64_t v24 = sub_1A8DB3054(inited);
    swift_unknownObjectRelease();
    goto LABEL_23;
  }
  swift_unknownObjectRelease();
LABEL_22:
  unint64_t v24 = 0;
LABEL_23:
  swift_unknownObjectRetain();
  self;
  uint64_t v25 = (void *)swift_dynamicCastObjCClassUnconditional();
  uint64_t v26 = sub_1A8DE94C0();
  unint64_t v28 = v27;

  uint64_t v29 = a2(&v40, v26, v28, 0, v24);
  if (v3)
  {
    sub_1A8D8BD58(v26, v28);
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v32 = (void *)v29;
    uint64_t v33 = v30;
    unint64_t v34 = v31;
    sub_1A8D8BD58(v26, v28);
    swift_bridgeObjectRelease();
    uint64_t v35 = v40;
    id v36 = v32;
    sub_1A8D8BE04(v33, v34);
    sub_1A8D8BD58(v33, v34);
    id v37 = v36;
    sub_1A8D8BE04(v33, v34);

    sub_1A8D8BD58(v33, v34);
    swift_unknownObjectRelease();

    void *v38 = v35;
    v38[1] = v33;
    long long v38[2] = v34;
    v38[3] = v37;
  }
}

void SecureEnclave.P384.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1@<X0>, void *a2@<X8>)
{
}

void SecureEnclave.P384.Signing.PrivateKey.init(from:)(__SecKey *a1@<X0>, void *a2@<X8>)
{
}

void SecureEnclave.Curve25519.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1@<X0>, void *a2@<X8>)
{
}

void SecureEnclave.Curve25519.Signing.PrivateKey.init(from:)(__SecKey *a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_1A8DB389C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_1A8DB38D8(uint64_t a1, uint64_t a2)
{
  sub_1A8DE9BD0();
  sub_1A8DE9660();
  uint64_t v4 = sub_1A8DE9C20();

  return sub_1A8DB3B44(a1, a2, v4);
}

unint64_t sub_1A8DB3950(uint64_t a1)
{
  uint64_t v2 = sub_1A8DE9A50();

  return sub_1A8DB3C28(a1, v2);
}

unint64_t sub_1A8DB3994(uint64_t a1)
{
  uint64_t v2 = sub_1A8DE98F0();

  return sub_1A8DB3E04(a1, v2);
}

unsigned char *storeEnumTagSinglePayload for SecKeySEPInteropErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A8DB3AA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecKeySEPInteropErrors()
{
  return &type metadata for SecKeySEPInteropErrors;
}

unint64_t sub_1A8DB3AE0()
{
  unint64_t result = qword_1E97A9410;
  if (!qword_1E97A9410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9410);
  }
  return result;
}

_OWORD *sub_1A8DB3B34(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1A8DB3B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1A8DE9B40() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        BOOL v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1A8DE9B40() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1A8DB3C28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1A8DB3CF0(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x1AD0E7860](v9, a1);
      sub_1A8DB3D4C((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1A8DB3CF0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1A8DB3D4C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1A8DB3DA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1A8DB3E04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_1A8DB389C(0, &qword_1E97A93F0);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = sub_1A8DE9900();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = sub_1A8DE9900();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t Curve448.KeyAgreement.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_1A8DBAD78();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t Curve448.KeyAgreement.PublicKey.rawRepresentation.getter()
{
  uint64_t v0 = sub_1A8DE97C0();
  uint64_t v1 = sub_1A8D93118(v0);
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t Curve448.KeyAgreement.PrivateKey.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1A8D9C550(0x38uLL);
  *a1 = result;
  return result;
}

size_t Curve448.KeyAgreement.PrivateKey.publicKey.getter@<X0>(size_t *a1@<X8>)
{
  size_t result = sub_1A8DBAA58();
  *a1 = result;
  return result;
}

uint64_t Curve448.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_1A8DBADFC();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t Curve448.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  swift_retain();
  sub_1A8DE97C0();
  unint64_t v6 = sub_1A8D9C41C(0x38uLL, v5, v4);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t Curve448.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = sub_1A8D9BD98(v0);
  swift_release();
  return v1;
}

size_t sub_1A8DB419C@<X0>(size_t *a1@<X8>)
{
  size_t result = sub_1A8DBAA58();
  *a1 = result;
  return result;
}

uint64_t sub_1A8DB41C8@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  swift_retain();
  sub_1A8DE97C0();
  unint64_t v6 = sub_1A8D9C41C(0x38uLL, v5, v4);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

ValueMetadata *type metadata accessor for Curve448.KeyAgreement()
{
  return &type metadata for Curve448.KeyAgreement;
}

ValueMetadata *type metadata accessor for Curve448.KeyAgreement.PublicKey()
{
  return &type metadata for Curve448.KeyAgreement.PublicKey;
}

ValueMetadata *type metadata accessor for Curve448.KeyAgreement.PrivateKey()
{
  return &type metadata for Curve448.KeyAgreement.PrivateKey;
}

uint64_t sub_1A8DB4270@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x1A8DB4358);
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      if (v6 == 12)
      {
        uint64_t result = sub_1A8D924B0(a1, a2);
        *a3 = result;
        a3[1] = v11;
      }
      else
      {
LABEL_8:
        sub_1A8D8E240();
        swift_allocError();
        *(_DWORD *)uint64_t v12 = 1;
        *(unsigned char *)(v12 + 4) = 1;
        swift_willThrow();
        return sub_1A8D8BD58(a1, a2);
      }
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v6 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t static ChaChaPoly.seal<A, B>(_:using:nonce:authenticating:)(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a8;
  uint64_t v22 = a7;
  uint64_t v14 = sub_1A8DE9910();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  long long v17 = (char *)&v21 - v16;
  uint64_t v25 = *a2;
  long long v24 = *a3;
  uint64_t v18 = *(void *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v21 - v16, a4, a6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, a6);
  uint64_t v19 = sub_1A8DB5C80(&v25, a1, (uint64_t *)&v24, (uint64_t)v17, a5, a6, v22, v23);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return v19;
}

uint64_t ChaChaPoly.SealedBox.init<A, B>(nonce:ciphertext:tag:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_1A8DB5910(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a3, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
  return v9;
}

uint64_t static ChaChaPoly.open<A>(_:using:authenticating:)(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_1A8DE9910();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v19 - v14;
  uint64_t v20 = *a3;
  uint64_t v16 = *(void *)(a5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v19 - v14, a4, a5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v15, 0, 1, a5);
  uint64_t v17 = sub_1A8DB6060(&v20, a1, a2, (uint64_t)v15, a5, a6);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return v17;
}

uint64_t static ChaChaPoly.seal<A>(_:using:nonce:)(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *a2;
  long long v8 = *a3;
  long long v11 = xmmword_1A8DEBCE0;
  *(_OWORD *)uint64_t v12 = v8;
  unint64_t v9 = sub_1A8D9E548();
  return sub_1A8DB5C80(&v13, a1, v12, (uint64_t)&v11, a4, MEMORY[0x1E4F277C0], a5, v9);
}

uint64_t sub_1A8DB47F4(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  swift_retain();
  sub_1A8D8BE04(a2, a3);
  sub_1A8DBAE90(12, a2, a3, (uint64_t *)&v34);
  uint64_t v11 = v34;
  switch(*((void *)&v34 + 1) >> 62)
  {
    case 1:
      LODWORD(v12) = DWORD1(v34) - v34;
      if (__OFSUB__(DWORD1(v34), v34))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        swift_once();
LABEL_19:
        int v27 = ccchacha20poly1305_verify();
        sub_1A8D8BD58(a3, a2);
        swift_release_n();
        if (v27)
        {
LABEL_20:
          sub_1A8D8E240();
          swift_allocError();
          *(_DWORD *)uint64_t v28 = 2;
          *(unsigned char *)(v28 + 4) = 1;
          swift_willThrow();
          sub_1A8D8BD58(v34, *((unint64_t *)&v34 + 1));
          return swift_release();
        }
        else
        {
LABEL_16:
          swift_release();
          return v34;
        }
      }
      uint64_t v12 = (int)v12;
LABEL_6:
      if (v12 != 12)
      {
LABEL_29:
        unint64_t v30 = *((void *)&v34 + 1);
        sub_1A8D8E240();
        swift_allocError();
        *(_DWORD *)uint64_t v31 = 1;
        *(unsigned char *)(v31 + 4) = 1;
        swift_willThrow();
        sub_1A8D8BD58(v11, v30);
        swift_unexpectedError();
        __break(1u);
        swift_release();
        swift_release();
        swift_release_n();
        __break(1u);
        swift_release_n();
        sub_1A8D8BD58(a3, a2);
        __break(1u);
        JUMPOUT(0x1A8DB4DBCLL);
      }
      *(void *)&long long v33 = a1;
      *(void *)&long long v34 = sub_1A8D924B0(v34, *((unint64_t *)&v34 + 1));
      *((void *)&v34 + 1) = v16;
      type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
      swift_allocObject();
      uint64_t result = sub_1A8DB6938((uint64_t *)&v33, (uint64_t *)&v34);
      if (!v5)
      {
        uint64_t v18 = result;
        if (a5 >> 60 != 15)
        {
          sub_1A8D8BE04(a4, a5);
          if (!swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v19 = swift_allocObject();
            swift_retain();
            uint64_t v20 = (void *)swift_slowAlloc();
            *(void *)(v19 + 16) = v20;
            memmove(v20, *(const void **)(v18 + 16), 0x100uLL);
            swift_release_n();
            uint64_t v18 = v19;
          }
          sub_1A8DB50D4(a4, a5);
          sub_1A8D8BF9C(a4, a5);
        }
        long long v34 = xmmword_1A8DEAA40;
        sub_1A8D8BE04(a2, a3);
        sub_1A8DBC268(12, a2, a3, v32);
        sub_1A8DBC924(16, v32[0], v32[1], (uint64_t *)&v33);
        long long v21 = v33;
        if (!swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v22 = swift_allocObject();
          swift_retain();
          uint64_t v23 = (void *)swift_slowAlloc();
          *(void *)(v22 + 16) = v23;
          memmove(v23, *(const void **)(v18 + 16), 0x100uLL);
          swift_release_n();
        }
        sub_1A8DB53B4(v21, *((unint64_t *)&v21 + 1), (uint64_t *)&v34);
        sub_1A8D8BD58(v21, *((unint64_t *)&v21 + 1));
        sub_1A8D8BE04(a2, a3);
        swift_retain();
        sub_1A8DBC780(16, a2, a3, (uint64_t *)&v33);
        a2 = *((void *)&v33 + 1);
        a3 = v33;
        switch(*((void *)&v33 + 1) >> 62)
        {
          case 1:
            if ((int)v33 > (uint64_t)v33 >> 32) {
              __break(1u);
            }
            swift_retain_n();
            sub_1A8D8BE04(a3, a2);
            char v29 = sub_1A8DB5B48((int)a3);
            sub_1A8D8BD58(a3, a2);
            sub_1A8D8BD58(a3, a2);
            swift_release_n();
            if ((v29 & 1) == 0) {
              goto LABEL_20;
            }
            goto LABEL_16;
          case 2:
            uint64_t v24 = *(void *)(v33 + 16);
            swift_retain_n();
            swift_retain();
            swift_retain();
            char v25 = sub_1A8DB5B48(v24);
            swift_release();
            swift_release();
            sub_1A8D8BD58(a3, a2);
            swift_release_n();
            if (v25) {
              goto LABEL_16;
            }
            goto LABEL_20;
          case 3:
            *(void *)((char *)&v33 + 6) = 0;
            *(void *)&long long v33 = 0;
            break;
          default:
            break;
        }
        uint64_t v26 = qword_1E97A8BC0;
        swift_retain_n();
        if (v26 == -1) {
          goto LABEL_19;
        }
        goto LABEL_27;
      }
      return result;
    case 2:
      uint64_t v14 = *(void *)(v34 + 16);
      uint64_t v13 = *(void *)(v34 + 24);
      BOOL v15 = __OFSUB__(v13, v14);
      uint64_t v12 = v13 - v14;
      if (!v15) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3:
      goto LABEL_29;
    default:
      uint64_t v12 = BYTE14(v34);
      goto LABEL_6;
  }
}

uint64_t static ChaChaPoly.open(_:using:)(unint64_t a1, unint64_t a2, uint64_t *a3)
{
  return sub_1A8DB47F4(*a3, a1, a2, 0, 0xF000000000000000);
}

uint64_t ChaChaPoly.SealedBox.combined.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t ChaChaPoly.SealedBox.tag.getter(uint64_t a1, unint64_t a2)
{
  sub_1A8D8BE04(a1, a2);
  sub_1A8DBC780(16, a1, a2, &v5);
  return v5;
}

uint64_t ChaChaPoly.SealedBox.ciphertext.getter(uint64_t a1, unint64_t a2)
{
  sub_1A8D8BE04(a1, a2);
  sub_1A8DBC268(12, a1, a2, v5);
  sub_1A8DBC924(16, v5[0], v5[1], &v6);
  return v6;
}

uint64_t ChaChaPoly.SealedBox.nonce.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_1A8D8BE04(a1, a2);
  sub_1A8DBAE90(12, a1, a2, v7);
  return sub_1A8DB4270(v7[0], v7[1], a3);
}

char *ChaChaPoly.SealedBox.init<A>(combined:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1A8DE9840() >= 28)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
    uint64_t v6 = (char *)sub_1A8DE9520();
  }
  else
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v7 = 1;
    *(unsigned char *)(v7 + 4) = 1;
    swift_willThrow();
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
  return v6;
}

uint64_t sub_1A8DB50D4(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 >= (int)a1)
      {
        swift_retain();
        sub_1A8D8BE04(a1, a2);
        sub_1A8DB585C((int)a1, a1 >> 32);
        return sub_1A8D8BD58(a1, a2);
      }
      __break(1u);
      goto LABEL_15;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      swift_retain();
      sub_1A8D8BE04(a1, a2);
      swift_retain();
      swift_retain();
      sub_1A8DB585C(v6, v7);
      swift_release();
      swift_release();
      return sub_1A8D8BD58(a1, a2);
    case 3uLL:
      uint64_t v9 = qword_1E97A8BC0;
      swift_retain_n();
      if (v9 != -1) {
LABEL_15:
      }
        swift_once();
      int v5 = ccchacha20poly1305_aad();
      if (v5) {
        goto LABEL_12;
      }
      goto LABEL_13;
    default:
      uint64_t v4 = qword_1E97A8BC0;
      swift_retain_n();
      if (v4 != -1) {
        swift_once();
      }
      int v5 = ccchacha20poly1305_aad();
      if (!v5) {
        goto LABEL_13;
      }
LABEL_12:
      int v10 = v5;
      sub_1A8D8E240();
      swift_allocError();
      *(_DWORD *)uint64_t v11 = v10;
      *(unsigned char *)(v11 + 4) = 0;
      swift_willThrow();
LABEL_13:
      sub_1A8D8BD58(a1, a2);
      return swift_release_n();
  }
}

uint64_t sub_1A8DB53B4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  switch((unint64_t)a3[1] >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(v3), v3)) {
        goto LABEL_5;
      }
      goto LABEL_13;
    case 2uLL:
      if (!__OFSUB__(*(void *)(v3 + 24), *(void *)(v3 + 16))) {
        goto LABEL_5;
      }
      goto LABEL_14;
    default:
LABEL_5:
      uint64_t v4 = 0;
      switch(a2 >> 62)
      {
        case 1uLL:
          LODWORD(v4) = HIDWORD(a1) - a1;
          if (__OFSUB__(HIDWORD(a1), a1)) {
            goto LABEL_15;
          }
          uint64_t v4 = (int)v4;
LABEL_10:
          if (v4 < 0)
          {
            __break(1u);
LABEL_13:
            __break(1u);
LABEL_14:
            __break(1u);
LABEL_15:
            __break(1u);
LABEL_16:
            __break(1u);
            JUMPOUT(0x1A8DB5514);
          }
LABEL_11:
          uint64_t v8 = sub_1A8DBB360(v4);
          MEMORY[0x1F4188790](v8);
          return sub_1A8DB7CA4(sub_1A8DB5C08);
        case 2uLL:
          uint64_t v6 = *(void *)(a1 + 16);
          uint64_t v5 = *(void *)(a1 + 24);
          BOOL v7 = __OFSUB__(v5, v6);
          uint64_t v4 = v5 - v6;
          if (!v7) {
            goto LABEL_10;
          }
          goto LABEL_16;
        case 3uLL:
          goto LABEL_11;
        default:
          uint64_t v4 = BYTE6(a2);
          goto LABEL_11;
      }
  }
}

uint64_t sub_1A8DB5534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(uint64_t, void, uint64_t, uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v11 = sub_1A8DBC418(a3, a1, a2);
  uint64_t v13 = v12 + v11;
  uint64_t v15 = v12 + v14;
  if (!v12)
  {
    uint64_t v15 = 0;
    uint64_t v13 = 0;
  }
  v17[0] = v13;
  v17[1] = v15;
  sub_1A8D8BE04(a4, a5);
  sub_1A8DB55E4(a4, a5, v17, a6, a7);
  return sub_1A8D8BD58(a4, a5);
}

uint64_t sub_1A8DB55E4(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, void, uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  v27[2] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v11 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      sub_1A8D8BE04(a1, a2);
      uint64_t v12 = sub_1A8DE9340();
      if (v12)
      {
        uint64_t v13 = sub_1A8DE9370();
        if (!__OFSUB__((int)a1, v13))
        {
          v12 += (int)a1 - v13;
          goto LABEL_7;
        }
LABEL_30:
        __break(1u);
      }
LABEL_7:
      uint64_t v14 = sub_1A8DE9360();
      if (v14 >= v11) {
        uint64_t v15 = (a1 >> 32) - (int)a1;
      }
      else {
        uint64_t v15 = v14;
      }
      uint64_t v16 = v12 + v15;
      if (v12) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      sub_1A8DB7488(v12, v17, a3, a4, a5);
      return sub_1A8D8BD58(a1, a2);
    case 2uLL:
      uint64_t v19 = *(void *)(a1 + 16);
      uint64_t v20 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v21 = sub_1A8DE9340();
      if (!v21) {
        goto LABEL_17;
      }
      uint64_t v22 = sub_1A8DE9370();
      if (__OFSUB__(v19, v22)) {
        goto LABEL_29;
      }
      v21 += v19 - v22;
LABEL_17:
      if (__OFSUB__(v20, v19)) {
        goto LABEL_28;
      }
      uint64_t v23 = sub_1A8DE9360();
      if (v23 >= v20 - v19) {
        uint64_t v24 = v20 - v19;
      }
      else {
        uint64_t v24 = v23;
      }
      uint64_t v25 = v21 + v24;
      if (v21) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      sub_1A8DB7488(v21, v26, a3, a4, a5);
      swift_release();
      return swift_release();
    case 3uLL:
      memset(v27, 0, 14);
      int v10 = (char *)v27;
      return sub_1A8DB7488((uint64_t)v27, (uint64_t)v10, a3, a4, a5);
    default:
      v27[0] = a1;
      LOWORD(v27[1]) = a2;
      BYTE2(v27[1]) = BYTE2(a2);
      BYTE3(v27[1]) = BYTE3(a2);
      BYTE4(v27[1]) = BYTE4(a2);
      BYTE5(v27[1]) = BYTE5(a2);
      int v10 = (char *)v27 + BYTE6(a2);
      return sub_1A8DB7488((uint64_t)v27, (uint64_t)v10, a3, a4, a5);
  }
}

uint64_t sub_1A8DB585C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1A8DE9340();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = sub_1A8DE9370();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v5 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    sub_1A8DE9360();
    sub_1A8DB6F9C(v5);
    return swift_release();
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1A8DB5910(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  if (sub_1A8DE9840() == 16)
  {
    uint64_t v3 = sub_1A8D92764(v2, v1);
    unint64_t v5 = v4;
    sub_1A8DB5C2C();
    sub_1A8DE98A0();
    sub_1A8D8BD58(v3, v5);
    sub_1A8DE98A0();
    sub_1A8D8BD58(v8, v9);
    return v3;
  }
  else
  {
    sub_1A8D8BD58(v2, v1);
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v7 = 1;
    *(unsigned char *)(v7 + 4) = 1;
    return swift_willThrow();
  }
}

unint64_t sub_1A8DB5A7C()
{
  unint64_t result = qword_1E97A9430;
  if (!qword_1E97A9430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9430);
  }
  return result;
}

unint64_t sub_1A8DB5AD4()
{
  unint64_t result = qword_1E97A9438;
  if (!qword_1E97A9438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9438);
  }
  return result;
}

ValueMetadata *type metadata accessor for ChaChaPoly()
{
  return &type metadata for ChaChaPoly;
}

ValueMetadata *type metadata accessor for ChaChaPoly.SealedBox()
{
  return &type metadata for ChaChaPoly.SealedBox;
}

uint64_t sub_1A8DB5B48(uint64_t a1)
{
  uint64_t v2 = sub_1A8DE9340();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t result = sub_1A8DE9370();
    if (__OFSUB__(a1, result)) {
      goto LABEL_10;
    }
    uint64_t v5 = v3 + a1 - result;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t result = sub_1A8DE9360();
  if (qword_1E97A8BC0 == -1)
  {
    if (v5) {
      return ccchacha20poly1305_verify() == 0;
    }
  }
  else
  {
    uint64_t result = swift_once();
    if (v5) {
      return ccchacha20poly1305_verify() == 0;
    }
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1A8DB5C08(uint64_t a1, uint64_t a2)
{
  return sub_1A8DB5534(a1, a2, *(void *)(v2 + 16), **(void **)(v2 + 24), *(void *)(*(void *)(v2 + 24) + 8), *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(v2 + 32), *(void *)(v2 + 40));
}

unint64_t sub_1A8DB5C2C()
{
  unint64_t result = qword_1E97A9440;
  if (!qword_1E97A9440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9440);
  }
  return result;
}

uint64_t sub_1A8DB5C80(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a8;
  uint64_t v29 = a2;
  uint64_t v30 = a5;
  uint64_t v31 = a7;
  uint64_t v33 = a4;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v32 = sub_1A8DE9910();
  uint64_t v34 = *(void *)(v32 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v32);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v35 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v12);
  int v27 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *a1;
  uint64_t v17 = *a3;
  uint64_t v19 = *a3;
  unint64_t v20 = a3[1];
  unint64_t v18 = v20;
  if (v20 >> 60 == 15)
  {
    *(void *)((char *)&v38 + 6) = 0;
    *(void *)&long long v38 = 0;
    BYTE14(v38) = 12;
    LODWORD(v37) = 0;
    uint64_t result = ccrng();
    if (!result)
    {
      __break(1u);
      return result;
    }
    if (v37) {
      __break(1u);
    }
    ccrng_generate_bridge();
    uint64_t v19 = v38;
    unint64_t v20 = DWORD2(v38) | ((unint64_t)BYTE12(v38) << 32) | ((unint64_t)BYTE13(v38) << 40) | ((unint64_t)BYTE14(v38) << 48);
  }
  uint64_t v36 = v16;
  *(void *)&long long v38 = v19;
  *((void *)&v38 + 1) = v20;
  type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
  swift_allocObject();
  sub_1A8D8C208(v17, v18);
  swift_retain();
  sub_1A8D8BE04(v19, v20);
  uint64_t v22 = sub_1A8DB6938(&v36, (uint64_t *)&v38);
  if (v8) {
    return sub_1A8D8BD58(v19, v20);
  }
  uint64_t v37 = v22;
  uint64_t v23 = v34;
  uint64_t v24 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v14, v33, v32);
  uint64_t v25 = v35;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v14, 1, a6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v24);
  }
  else
  {
    uint64_t v26 = (uint64_t)v27;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v14, a6);
    sub_1A8DB67A8(v26, a6, v28);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, a6);
  }
  *(void *)&long long v38 = v19;
  *((void *)&v38 + 1) = v20;
  sub_1A8D8BE04(v19, v20);
  sub_1A8DB6864(v29, (uint64_t *)&v38);
  swift_retain();
  sub_1A8DB75A8();
  swift_release();
  sub_1A8D8BD58(v19, v20);
  swift_release();
  return v38;
}

uint64_t sub_1A8DB6060(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v42 = a6;
  uint64_t v45 = a4;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = sub_1A8DE9910();
  uint64_t v46 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v42 - v13;
  unint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a1;
  swift_retain();
  sub_1A8D8BE04(a2, a3);
  uint64_t v43 = a2;
  unint64_t v44 = a3;
  sub_1A8DBAE90(12, a2, a3, (uint64_t *)&v50);
  unint64_t v19 = *((void *)&v50 + 1);
  uint64_t v20 = v50;
  switch(*((void *)&v50 + 1) >> 62)
  {
    case 1:
      LODWORD(v21) = DWORD1(v50) - v50;
      if (__OFSUB__(DWORD1(v50), v50))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        swift_once();
LABEL_18:
        int v38 = ccchacha20poly1305_verify();
        sub_1A8D8BD58(v19, v15);
        swift_release_n();
        if (v38)
        {
LABEL_19:
          sub_1A8D8E240();
          swift_allocError();
          *(_DWORD *)uint64_t v39 = 2;
          *(unsigned char *)(v39 + 4) = 1;
          swift_willThrow();
          sub_1A8D8BD58(v50, *((unint64_t *)&v50 + 1));
          return swift_release();
        }
        else
        {
LABEL_15:
          swift_release();
          return v50;
        }
      }
      uint64_t v21 = (int)v21;
LABEL_6:
      if (v21 != 12)
      {
LABEL_28:
        sub_1A8D8E240();
        swift_allocError();
        *(_DWORD *)uint64_t v41 = 1;
        *(unsigned char *)(v41 + 4) = 1;
        swift_willThrow();
        sub_1A8D8BD58(v20, v19);
        swift_unexpectedError();
        __break(1u);
        swift_release();
        swift_release();
        swift_release_n();
        __break(1u);
        swift_release_n();
        sub_1A8D8BD58(v19, v15);
        __break(1u);
        JUMPOUT(0x1A8DB6768);
      }
      uint64_t v25 = sub_1A8D924B0(v50, *((unint64_t *)&v50 + 1));
      *(void *)&long long v49 = v18;
      *(void *)&long long v50 = v25;
      *((void *)&v50 + 1) = v26;
      type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
      swift_allocObject();
      uint64_t result = sub_1A8DB6938((uint64_t *)&v49, (uint64_t *)&v50);
      if (!v6)
      {
        uint64_t v47 = result;
        uint64_t v28 = v46;
        (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v14, v45, v11);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a5) == 1)
        {
          (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v11);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, a5);
          sub_1A8DB67A8((uint64_t)v17, a5, v42);
          (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
        }
        long long v50 = xmmword_1A8DEAA40;
        uint64_t v30 = v43;
        unint64_t v29 = v44;
        sub_1A8D8BE04(v43, v44);
        sub_1A8DBC268(12, v30, v29, v48);
        sub_1A8DBC924(16, v48[0], v48[1], (uint64_t *)&v49);
        long long v31 = v49;
        uint64_t v32 = v47;
        if (!swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v33 = swift_allocObject();
          swift_retain();
          uint64_t v34 = (void *)swift_slowAlloc();
          *(void *)(v33 + 16) = v34;
          memmove(v34, *(const void **)(v32 + 16), 0x100uLL);
          swift_release();
          uint64_t v47 = v33;
          swift_release();
        }
        sub_1A8DB53B4(v31, *((unint64_t *)&v31 + 1), (uint64_t *)&v50);
        sub_1A8D8BD58(v31, *((unint64_t *)&v31 + 1));
        sub_1A8D8BE04(v30, v29);
        swift_retain();
        sub_1A8DBC780(16, v30, v29, (uint64_t *)&v49);
        unint64_t v15 = *((void *)&v49 + 1);
        unint64_t v19 = v49;
        switch(*((void *)&v49 + 1) >> 62)
        {
          case 1:
            if ((int)v49 > (uint64_t)v49 >> 32) {
              __break(1u);
            }
            swift_retain_n();
            sub_1A8D8BE04(v19, v15);
            char v40 = sub_1A8DB5B48((int)v19);
            sub_1A8D8BD58(v19, v15);
            sub_1A8D8BD58(v19, v15);
            swift_release_n();
            if ((v40 & 1) == 0) {
              goto LABEL_19;
            }
            goto LABEL_15;
          case 2:
            uint64_t v35 = *(void *)(v49 + 16);
            swift_retain_n();
            swift_retain();
            swift_retain();
            char v36 = sub_1A8DB5B48(v35);
            swift_release();
            swift_release();
            sub_1A8D8BD58(v19, v15);
            swift_release_n();
            if (v36) {
              goto LABEL_15;
            }
            goto LABEL_19;
          case 3:
            *(void *)((char *)&v49 + 6) = 0;
            *(void *)&long long v49 = 0;
            break;
          default:
            break;
        }
        uint64_t v37 = qword_1E97A8BC0;
        swift_retain_n();
        if (v37 == -1) {
          goto LABEL_18;
        }
        goto LABEL_26;
      }
      return result;
    case 2:
      uint64_t v23 = *(void *)(v50 + 16);
      uint64_t v22 = *(void *)(v50 + 24);
      BOOL v24 = __OFSUB__(v22, v23);
      uint64_t v21 = v22 - v23;
      if (!v24) {
        goto LABEL_6;
      }
      goto LABEL_25;
    case 3:
      goto LABEL_28;
    default:
      uint64_t v21 = BYTE14(v50);
      goto LABEL_6;
  }
}

uint64_t sub_1A8DB6788()
{
  uint64_t result = ccchacha20poly1305_info();
  qword_1E97AD6E8 = result;
  return result;
}

uint64_t sub_1A8DB67A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v7 = *v3;
    type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
    uint64_t v8 = swift_allocObject();
    swift_retain();
    unint64_t v9 = (void *)swift_slowAlloc();
    *(void *)(v8 + 16) = v9;
    memmove(v9, *(const void **)(v7 + 16), 0x100uLL);
    swift_release();
    uint64_t *v3 = v8;
    swift_release();
  }
  return sub_1A8DB6D2C(a1, a2, a3);
}

uint64_t sub_1A8DB6864(uint64_t a1, uint64_t *a2)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *v2;
    type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
    uint64_t v6 = swift_allocObject();
    swift_retain();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(void *)(v6 + 16) = v7;
    memmove(v7, *(const void **)(v5 + 16), 0x100uLL);
    swift_release();
    *uint64_t v2 = v6;
    swift_release();
  }
  return sub_1A8DB708C(a1, a2);
}

uint64_t sub_1A8DB6938(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  swift_beginAccess();
  unint64_t v8 = *(void *)(v5 + 16);
  if (v8 >> 60)
  {
    __break(1u);
LABEL_19:
    swift_once();
    goto LABEL_4;
  }
  if (v8 != 32)
  {
    swift_release();
    sub_1A8D8BD58(v6, v7);
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 0;
    *(unsigned char *)(v13 + 4) = 1;
    swift_willThrow();
    type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
    swift_deallocPartialClassInstance();
    return v2;
  }
  unint64_t v9 = (_OWORD *)swift_slowAlloc();
  *(void *)(v2 + 16) = v9;
  _OWORD *v9 = 0u;
  v9[1] = 0u;
  v9[2] = 0u;
  v9[3] = 0u;
  void v9[4] = 0u;
  v9[5] = 0u;
  v9[6] = 0u;
  v9[7] = 0u;
  v9[8] = 0u;
  v9[9] = 0u;
  v9[10] = 0u;
  v9[11] = 0u;
  v9[12] = 0u;
  v9[13] = 0u;
  v9[14] = 0u;
  *(_OWORD *)((char *)v9 + 233) = 0u;
  if (qword_1E97A8BC0 != -1) {
    goto LABEL_19;
  }
LABEL_4:
  int v10 = ccchacha20poly1305_init();
  if (v10)
  {
    int v11 = v10;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = v11;
    *(unsigned char *)(v12 + 4) = 0;
    swift_willThrow();
    sub_1A8D8BD58(v6, v7);
    swift_release();
LABEL_16:
    swift_release();
    return v2;
  }
  swift_release();
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 > v6 >> 32) {
        __break(1u);
      }
      swift_retain_n();
      sub_1A8D8BE04(v6, v7);
      int v17 = sub_1A8DB84BC((int)v6);
      if (v3) {
        goto LABEL_22;
      }
      int v16 = v17;
      sub_1A8D8BD58(v6, v7);
      break;
    case 2uLL:
      uint64_t v14 = *(void *)(v6 + 16);
      swift_retain_n();
      swift_retain();
      swift_retain();
      int v15 = sub_1A8DB84BC(v14);
      if (v4)
      {
        swift_release();
        swift_release();
        swift_release_n();
        __break(1u);
LABEL_22:
        swift_release_n();
        sub_1A8D8BD58(v6, v7);
        __break(1u);
        JUMPOUT(0x1A8DB6D1CLL);
      }
      int v16 = v15;
      swift_release();
      swift_release();
      break;
    default:
      swift_retain_n();
      int v16 = ccchacha20poly1305_setnonce();
      break;
  }
  sub_1A8D8BD58(v6, v7);
  swift_release_n();
  if (v16)
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v18 = v16;
    *(unsigned char *)(v18 + 4) = 0;
    swift_willThrow();
    goto LABEL_16;
  }
  return v2;
}

uint64_t sub_1A8DB6D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v9 = &v11[-v8];
  sub_1A8DE92B0();
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = v3;
  swift_getAssociatedConformanceWitness();
  sub_1A8DE9770();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t sub_1A8DB6E98()
{
  return sub_1A8DE9390();
}

uint64_t sub_1A8DB6F9C(uint64_t result)
{
  uint64_t v1 = result;
  if (qword_1E97A8BC0 == -1)
  {
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t result = swift_once();
  if (!v1) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = ccchacha20poly1305_aad();
  if (result)
  {
    int v2 = result;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v3 = v2;
    *(unsigned char *)(v3 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1A8DB705C(uint64_t a1, uint64_t *a2)
{
  return sub_1A8DB708C(a1, a2);
}

uint64_t sub_1A8DB708C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  switch((unint64_t)a2[1] >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(v2), v2)) {
        goto LABEL_5;
      }
      goto LABEL_8;
    case 2uLL:
      if (!__OFSUB__(*(void *)(v2 + 24), *(void *)(v2 + 16))) {
        goto LABEL_5;
      }
      goto LABEL_9;
    default:
LABEL_5:
      uint64_t v3 = sub_1A8DE9840();
      if (v3 < 0)
      {
        __break(1u);
LABEL_8:
        __break(1u);
LABEL_9:
        __break(1u);
        JUMPOUT(0x1A8DB71B8);
      }
      uint64_t v4 = sub_1A8DBB360(v3);
      MEMORY[0x1F4188790](v4);
      return sub_1A8DB7CA4(sub_1A8DB8418);
  }
}

uint64_t sub_1A8DB71C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v16 = (char *)&v23 - v15;
  uint64_t v17 = sub_1A8DBC418(a3, a1, a2);
  uint64_t v19 = v18 + v17;
  uint64_t v21 = v18 + v20;
  if (!v18)
  {
    uint64_t v21 = 0;
    uint64_t v19 = 0;
  }
  v30[0] = v19;
  v30[1] = v21;
  sub_1A8DE92B0();
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  int v27 = v30;
  uint64_t v28 = v23;
  uint64_t v29 = v24;
  swift_getAssociatedConformanceWitness();
  sub_1A8DE9770();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
}

uint64_t sub_1A8DB7380()
{
  return sub_1A8DE9390();
}

uint64_t sub_1A8DB7488(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, void, uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v8 = result;
  uint64_t v9 = a2 - result;
  if (result) {
    uint64_t v10 = a2 - result;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *a3;
  if (*a3) {
    uint64_t v11 = a3[1] - v11;
  }
  if (v11 < v10)
  {
    __break(1u);
  }
  else if (qword_1E97A8BC0 == -1)
  {
    if (result) {
      goto LABEL_9;
    }
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t result = swift_once();
  if (!v8) {
    goto LABEL_16;
  }
LABEL_9:
  int v12 = a4(qword_1E97AD6E8, *(void *)(a5 + 16), v9, v8, *a3);
  if (v12)
  {
    int v13 = v12;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v14 = v13;
    *(unsigned char *)(v14 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    uint64_t result = sub_1A8DBC418(v9, *a3, a3[1]);
    uint64_t v16 = v15 + result;
    uint64_t v18 = v15 + v17;
    if (!v15)
    {
      uint64_t v18 = 0;
      uint64_t v16 = 0;
    }
    *a3 = v16;
    a3[1] = v18;
  }
  return result;
}

uint64_t sub_1A8DB75A8()
{
  v5[5] = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  v4[1] = 0;
  if (qword_1E97A8BC0 != -1) {
    swift_once();
  }
  int v0 = ccchacha20poly1305_finalize();
  if (v0)
  {
    int v1 = v0;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v2 = v1;
    *(unsigned char *)(v2 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    v5[3] = MEMORY[0x1E4FBB2B8];
    void v5[4] = MEMORY[0x1E4F27EF0];
    v5[0] = v4;
    v5[1] = v5;
    __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x1E4FBB2B8]);
    sub_1A8DE9460();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
}

uint64_t sub_1A8DB76D0()
{
  int v1 = *(void **)(v0 + 16);
  memset_s(v1, 0x100uLL, 0, 0x100uLL);
  MEMORY[0x1AD0E8530](v1, -1, -1);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CoreCryptoChaChaPolyImpl.Context()
{
  return self;
}

char *sub_1A8DB7754(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  id v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)int v1 = xmmword_1A8DEAA40;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (sub_1A8DE9340() && __OFSUB__((int)v4, sub_1A8DE9370())) {
        goto LABEL_24;
      }
      sub_1A8DE9380();
      swift_allocObject();
      uint64_t v13 = sub_1A8DE9320();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = sub_1A8DB82AC((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1A8DE93C0();
      uint64_t result = sub_1A8DB82AC(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        *int v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *int v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      *int v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

uint64_t sub_1A8DB7A58(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = v1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      *(void *)&long long v18 = *v1;
      *((void *)&v18 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t result = sub_1A8DB81FC(a1);
      uint64_t v4 = v18;
      unint64_t v5 = *((void *)&v18 + 1) | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      *(void *)&long long v18 = *v1;
      *((void *)&v18 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1A8DE93C0();
      uint64_t v6 = *((void *)&v18 + 1);
      uint64_t v7 = *(void *)(v18 + 16);
      uint64_t v17 = *(void *)(v18 + 24);
      uint64_t v8 = sub_1A8DE9340();
      if (!v8)
      {
        __break(1u);
        JUMPOUT(0x1A8DB7C94);
      }
      uint64_t v9 = v8;
      uint64_t v10 = sub_1A8DE9370();
      uint64_t v11 = v7 - v10;
      if (__OFSUB__(v7, v10))
      {
        __break(1u);
LABEL_15:
        __break(1u);
      }
      BOOL v12 = __OFSUB__(v17, v7);
      uint64_t v13 = v17 - v7;
      if (v12) {
        goto LABEL_15;
      }
      uint64_t v14 = sub_1A8DE9360();
      if (v14 >= v13) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = v14;
      }
      uint64_t result = a1(v9 + v11, v9 + v11 + v15);
      *int v1 = v18;
      v1[1] = v6 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&v18 + 7) = 0;
      *(void *)&long long v18 = 0;
      return a1((uint64_t)&v18, (uint64_t)&v18);
    default:
      *(void *)&long long v18 = *v1;
      WORD4(v18) = v2;
      BYTE10(v18) = BYTE2(v2);
      BYTE11(v18) = BYTE3(v2);
      BYTE12(v18) = BYTE4(v2);
      BYTE13(v18) = BYTE5(v2);
      BYTE14(v18) = BYTE6(v2);
      uint64_t result = a1((uint64_t)&v18, (uint64_t)&v18 + BYTE6(v2));
      uint64_t v4 = v18;
      unint64_t v5 = DWORD2(v18) | ((unint64_t)BYTE12(v18) << 32) | ((unint64_t)BYTE13(v18) << 40) | ((unint64_t)BYTE14(v18) << 48);
LABEL_4:
      *int v1 = v4;
      v1[1] = v5;
      return result;
  }
}

uint64_t sub_1A8DB7CA4(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = v1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      *(void *)&long long v18 = *v1;
      *((void *)&v18 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t result = sub_1A8DB81FC(a1);
      uint64_t v4 = v18;
      unint64_t v5 = *((void *)&v18 + 1) | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      *(void *)&long long v18 = *v1;
      *((void *)&v18 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1A8DE93C0();
      uint64_t v6 = *((void *)&v18 + 1);
      uint64_t v7 = *(void *)(v18 + 16);
      uint64_t v17 = *(void *)(v18 + 24);
      uint64_t v8 = sub_1A8DE9340();
      if (!v8)
      {
        __break(1u);
        JUMPOUT(0x1A8DB7EE0);
      }
      uint64_t v9 = v8;
      uint64_t v10 = sub_1A8DE9370();
      uint64_t v11 = v7 - v10;
      if (__OFSUB__(v7, v10))
      {
        __break(1u);
LABEL_15:
        __break(1u);
      }
      BOOL v12 = __OFSUB__(v17, v7);
      uint64_t v13 = v17 - v7;
      if (v12) {
        goto LABEL_15;
      }
      uint64_t v14 = sub_1A8DE9360();
      if (v14 >= v13) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = v14;
      }
      uint64_t result = a1(v9 + v11, v9 + v11 + v15);
      *int v1 = v18;
      v1[1] = v6 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&v18 + 7) = 0;
      *(void *)&long long v18 = 0;
      return a1((uint64_t)&v18, (uint64_t)&v18);
    default:
      *(void *)&long long v18 = *v1;
      WORD4(v18) = v2;
      BYTE10(v18) = BYTE2(v2);
      BYTE11(v18) = BYTE3(v2);
      BYTE12(v18) = BYTE4(v2);
      BYTE13(v18) = BYTE5(v2);
      BYTE14(v18) = BYTE6(v2);
      uint64_t result = a1((uint64_t)&v18, (uint64_t)&v18 + BYTE6(v2));
      uint64_t v4 = v18;
      unint64_t v5 = DWORD2(v18) | ((unint64_t)BYTE12(v18) << 32) | ((unint64_t)BYTE13(v18) << 40) | ((unint64_t)BYTE14(v18) << 48);
LABEL_4:
      *int v1 = v4;
      v1[1] = v5;
      return result;
  }
}

char *sub_1A8DB7EF0(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  unint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)int v1 = xmmword_1A8DEAA40;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (sub_1A8DE9340() && __OFSUB__((int)v4, sub_1A8DE9370())) {
        goto LABEL_24;
      }
      sub_1A8DE9380();
      swift_allocObject();
      uint64_t v13 = sub_1A8DE9320();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = sub_1A8DB8360((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *unint64_t v5 = v4;
        goto LABEL_19;
      }
      *unint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v15 = *v1;
      uint64_t v16 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1A8DE93C0();
      uint64_t result = sub_1A8DB8360(*(void *)(v15 + 16), *(void *)(v15 + 24), a1);
      unint64_t v12 = v16 | 0x8000000000000000;
      if (v2)
      {
        *int v1 = v15;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *int v1 = v15;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v14, 0, 15);
      uint64_t result = (char *)a1(&v15, (char *)v14, (char *)v14);
      if (!v2) {
        return (char *)v15;
      }
      return result;
    default:
      v14[0] = *v1;
      LOWORD(v14[1]) = v3;
      BYTE2(v14[1]) = BYTE2(v3);
      BYTE3(v14[1]) = BYTE3(v3);
      BYTE4(v14[1]) = BYTE4(v3);
      BYTE5(v14[1]) = BYTE5(v3);
      BYTE6(v14[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v15, (char *)v14, (char *)v14 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v15;
      }
      unint64_t v8 = LODWORD(v14[1]) | ((unint64_t)BYTE4(v14[1]) << 32) | ((unint64_t)BYTE5(v14[1]) << 40) | ((unint64_t)BYTE6(v14[1]) << 48);
      *int v1 = v14[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

uint64_t sub_1A8DB81FC(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t result = sub_1A8DE93F0();
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = sub_1A8DE9340();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  uint64_t result = sub_1A8DE9370();
  uint64_t v7 = v4 - result;
  if (__OFSUB__(v4, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v8 = v5 - v4;
  uint64_t v9 = sub_1A8DE9360();
  if (v9 >= v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v9;
  }
  return a1(v6 + v7, v6 + v7 + v10);
}

char *sub_1A8DB82AC(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)sub_1A8DE9340();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)sub_1A8DE9370();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = sub_1A8DE9360();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

char *sub_1A8DB8360(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)sub_1A8DE9340();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)sub_1A8DE9370();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = sub_1A8DE9360();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_1A8DB8418(uint64_t a1, uint64_t a2)
{
  return sub_1A8DB71C8(a1, a2, v2[4], v2[5], v2[6], v2[7], v2[2], v2[3]);
}

uint64_t sub_1A8DB843C()
{
  return sub_1A8DB7380();
}

uint64_t sub_1A8DB8460(uint64_t a1, uint64_t a2)
{
  return sub_1A8DB7488(a1, a2, *(uint64_t **)(v2 + 16), *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_1A8DB8480()
{
  return sub_1A8DB6E98();
}

uint64_t sub_1A8DB84A0(uint64_t a1)
{
  return sub_1A8DB6F9C(a1);
}

uint64_t sub_1A8DB84BC(uint64_t a1)
{
  uint64_t v2 = sub_1A8DE9340();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t result = sub_1A8DE9370();
    if (__OFSUB__(a1, result)) {
      goto LABEL_10;
    }
    uint64_t v5 = v3 + a1 - result;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t result = sub_1A8DE9360();
  if (qword_1E97A8BC0 == -1)
  {
    if (v5) {
      return ccchacha20poly1305_setnonce();
    }
  }
  else
  {
    uint64_t result = swift_once();
    if (v5) {
      return ccchacha20poly1305_setnonce();
    }
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for CoreCryptoChaChaPolyImpl()
{
  return &type metadata for CoreCryptoChaChaPolyImpl;
}

void sub_1A8DB8584(uint64_t a1, uint64_t a2)
{
  if (a1 < 0 || (uint64_t v3 = a2 - 1, a2 < 1))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (a1 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = a1;
  }
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    goto LABEL_27;
  }
  double v7 = ceil(log2((double)v6) * 0.125);
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v8 = (uint64_t)v7;
  if ((uint64_t)v7 > a2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v14[0] = sub_1A8D93078(a2);
  v14[1] = v9;
  sub_1A8DD9764(v14, 0);
  if (__OFSUB__(a2, v8))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (a2 - v8 < a2)
  {
    uint64_t v10 = -v8;
    while (1)
    {
      uint64_t v11 = a2 + v10;
      if (__OFSUB__(v3, a2 + v10)) {
        break;
      }
      if ((unint64_t)(v3 - (a2 + v10) - 0x1000000000000000) >> 61 != 7) {
        goto LABEL_25;
      }
      BOOL v13 = __CFADD__(v10++, 1);
      sub_1A8DE9480();
      if (v13) {
        return;
      }
      if (__OFADD__(v11, 1))
      {
        __break(1u);
        return;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_33:
  __break(1u);
}

ValueMetadata *type metadata accessor for AES()
{
  return &type metadata for AES;
}

uint64_t SymmetricKey.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_1A8D9BD24();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t SymmetricKey.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return sub_1A8D9A30C(a1, a2, *v2);
}

uint64_t sub_1A8DB87B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8DB87D4(a1, a2, a3) & 1;
}

uint64_t sub_1A8DB87D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = a2 - a1;
  if (a1) {
    uint64_t v7 = a2 - a1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != *(void *)(a3 + 16)) {
    return 0;
  }
  if (a1) {
    return cc_cmp_safe() == 0;
  }
  __break(1u);
  return result;
}

BOOL sub_1A8DB8864(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a3 >> 32) - (int)a3;
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
      }
      else
      {
        sub_1A8D8BE04(a3, a4);
        uint64_t v10 = sub_1A8DE9340();
        if (!v10)
        {
LABEL_12:
          uint64_t v12 = sub_1A8DE9360();
          if (a1) {
            uint64_t v13 = a2 - a1;
          }
          else {
            uint64_t v13 = 0;
          }
          if (v10)
          {
            if (v12 >= v9) {
              uint64_t v12 = (a3 >> 32) - (int)a3;
            }
            if (v13 == v12)
            {
              if (a1)
              {
                int v14 = cc_cmp_safe();
                sub_1A8D8BD58(a3, a4);
                return v14 == 0;
              }
LABEL_52:
              __break(1u);
              goto LABEL_53;
            }
            goto LABEL_40;
          }
          if (v13)
          {
LABEL_40:
            sub_1A8D8BD58(a3, a4);
            return 0;
          }
LABEL_51:
          if (a1)
          {
LABEL_54:
            __break(1u);
            JUMPOUT(0x1A8DB8B4CLL);
          }
          goto LABEL_52;
        }
        uint64_t v11 = sub_1A8DE9370();
        if (!__OFSUB__((int)a3, v11))
        {
          v10 += (int)a3 - v11;
          goto LABEL_12;
        }
      }
      __break(1u);
      return result;
    case 2uLL:
      uint64_t v16 = *(void *)(a3 + 16);
      uint64_t v17 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      uint64_t v18 = sub_1A8DE9340();
      if (!v18) {
        goto LABEL_24;
      }
      uint64_t v19 = sub_1A8DE9370();
      if (__OFSUB__(v16, v19)) {
        goto LABEL_45;
      }
      v18 += v16 - v19;
LABEL_24:
      BOOL v20 = __OFSUB__(v17, v16);
      uint64_t v21 = v17 - v16;
      if (v20) {
        goto LABEL_44;
      }
      uint64_t v22 = sub_1A8DE9360();
      if (a1) {
        uint64_t v23 = a2 - a1;
      }
      else {
        uint64_t v23 = 0;
      }
      if (v18)
      {
        if (v22 >= v21) {
          uint64_t v22 = v21;
        }
        if (v23 == v22)
        {
          if (a1)
          {
            int v24 = cc_cmp_safe();
            swift_release();
            swift_release();
            return v24 == 0;
          }
          goto LABEL_50;
        }
        goto LABEL_38;
      }
      if (v23)
      {
LABEL_38:
        swift_release();
        swift_release();
        return 0;
      }
      goto LABEL_49;
    case 3uLL:
      if (!a1)
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        if (a1)
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      if (a2 == a1) {
        return cc_cmp_safe() == 0;
      }
      return 0;
    default:
      if (a1) {
        uint64_t v8 = a2 - a1;
      }
      else {
        uint64_t v8 = 0;
      }
      if (v8 != BYTE6(a4)) {
        return 0;
      }
      if (a1) {
        return cc_cmp_safe() == 0;
      }
      goto LABEL_48;
  }
}

uint64_t sub_1A8DB8B5C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a4;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v19 = (a3 >> 32) - (int)a3;
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
      }
      else
      {
        sub_1A8D8BE04(a3, a4);
        uint64_t v20 = sub_1A8DE9340();
        if (!v20) {
          goto LABEL_22;
        }
        uint64_t v21 = sub_1A8DE9370();
        if (!__OFSUB__((int)a3, v21))
        {
          v20 += (int)a3 - v21;
LABEL_22:
          uint64_t v22 = sub_1A8DE9360();
          if (v22 >= v19) {
            uint64_t v23 = (a3 >> 32) - (int)a3;
          }
          else {
            uint64_t v23 = v22;
          }
          uint64_t v24 = v20 + v23;
          if (v20) {
            uint64_t v25 = v24;
          }
          else {
            uint64_t v25 = 0;
          }
          sub_1A8DB0C54(v20, v25, a1, a2, (BOOL *)v27);
          if (!v4)
          {
            sub_1A8D8BD58(a3, v5);
            return LOBYTE(v27[0]);
          }
LABEL_38:
          sub_1A8D8BD58(a3, v5);
          __break(1u);
          JUMPOUT(0x1A8DB8E20);
        }
      }
      __break(1u);
      return result;
    case 2uLL:
      uint64_t v10 = *(void *)(a3 + 16);
      uint64_t v11 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      uint64_t v5 = sub_1A8DE9340();
      if (!v5) {
        goto LABEL_6;
      }
      uint64_t v12 = sub_1A8DE9370();
      if (__OFSUB__(v10, v12)) {
        goto LABEL_34;
      }
      v5 += v10 - v12;
LABEL_6:
      BOOL v13 = __OFSUB__(v11, v10);
      uint64_t v14 = v11 - v10;
      if (v13) {
        goto LABEL_33;
      }
      uint64_t v15 = sub_1A8DE9360();
      if (v15 >= v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = v5 + v16;
      if (v5) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      sub_1A8DB0C54(v5, v18, a1, a2, (BOOL *)v27);
      if (v4) {
        goto LABEL_37;
      }
      swift_release();
      swift_release();
      return LOBYTE(v27[0]);
    case 3uLL:
      memset(v27, 0, 14);
      if (!a1)
      {
        __break(1u);
LABEL_37:
        swift_release();
        swift_release();
        __break(1u);
        goto LABEL_38;
      }
      return a2 == a1 && cc_cmp_safe() == 0;
    default:
      v27[0] = a3;
      LOWORD(v27[1]) = a4;
      BYTE2(v27[1]) = BYTE2(a4);
      BYTE3(v27[1]) = BYTE3(a4);
      BYTE4(v27[1]) = BYTE4(a4);
      BYTE5(v27[1]) = BYTE5(a4);
      sub_1A8DB0C54((uint64_t)v27, (uint64_t)v27 + BYTE6(a4), a1, a2, &v26);
      return v26;
  }
}

uint64_t SymmetricKey.bitCount.getter()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 16);
  if (!(v3 >> 60)) {
    return 8 * v3;
  }
  __break(1u);
  return result;
}

uint64_t SymmetricKeySize.bitCount.getter()
{
  return *(void *)v0;
}

void static SymmetricKeySize.bits128.getter(void *a1@<X8>)
{
  *a1 = 128;
}

CryptoKit::SymmetricKeySize __swiftcall SymmetricKeySize.init(bitCount:)(CryptoKit::SymmetricKeySize bitCount)
{
  if (bitCount.bitCount < 1 || (bitCount.bitCount & 7) != 0) {
    __break(1u);
  }
  else {
    v1->bitCount = bitCount.bitCount;
  }
  return bitCount;
}

void static SymmetricKeySize.bits192.getter(void *a1@<X8>)
{
  *a1 = 192;
}

void static SymmetricKeySize.bits256.getter(void *a1@<X8>)
{
  *a1 = 256;
}

uint64_t SymmetricKey.init(size:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if ((unint64_t)(*a1 + 7) > 0xE)
  {
    if (v3 < 0) {
      uint64_t v3 = *a1 + 7;
    }
    uint64_t result = sub_1A8D9CBEC(v3 >> 3);
  }
  else
  {
    if (qword_1EB476778 != -1) {
      swift_once();
    }
    uint64_t result = swift_retain();
  }
  *a2 = result;
  return result;
}

uint64_t sub_1A8DB8F4C(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return SymmetricKey.withUnsafeBytes<A>(_:)(a1, a2);
}

uint64_t static SymmetricKey.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return sub_1A8DB87D4(v2 + 32, v2 + 32 + *(void *)(v2 + 16), v3) & 1;
}

uint64_t sub_1A8DB8FC8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return sub_1A8DB87D4(v2 + 32, v2 + 32 + *(void *)(v2 + 16), v3) & 1;
}

ValueMetadata *type metadata accessor for SymmetricKeySize()
{
  return &type metadata for SymmetricKeySize;
}

ValueMetadata *type metadata accessor for SymmetricKey()
{
  return &type metadata for SymmetricKey;
}

uint64_t HashFunction.update<A>(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790]();
  BOOL v13 = &v15[-v12];
  sub_1A8DE92B0();
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = v5;
  swift_getAssociatedConformanceWitness();
  sub_1A8DE9770();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t static HashFunction.hash(bufferPointer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v12, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40))(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a3);
}

uint64_t static HashFunction.hash<A>(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a2 - 8);
  double v11 = MEMORY[0x1F4188790](a1);
  BOOL v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, double))(v14 + 32))(v15, v14, v11);
  HashFunction.update<A>(data:)(a1, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(a4 + 48))(a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, a2);
}

uint64_t sub_1A8DB9430()
{
  return sub_1A8DE9390();
}

uint64_t sub_1A8DB953C()
{
  return sub_1A8DB9430();
}

uint64_t dispatch thunk of static HashFunction.blockByteCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_1A8DB9574(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v2 + 32) + 40))(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1A8DB95B8@<X0>(unsigned __int8 a1@<W1>, char **a2@<X8>)
{
  sub_1A8DC3DAC((uint64_t)v28);
  sub_1A8D8ECD0((uint64_t)v28, (uint64_t)v39, &qword_1EB476750);
  if (v40 == 255)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v6 = 3;
    return swift_willThrow();
  }
  v41[0] = v39[0];
  v41[1] = v39[1];
  v41[2] = v39[2];
  unsigned __int8 v42 = v40;
  if (LOBYTE(v39[0]) != a1
    || (sub_1A8D946F4((uint64_t)v41 + 8, (uint64_t)v43), sub_1A8D946F4((uint64_t)v43, (uint64_t)v51), (v53 & 1) != 0))
  {
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v5 = 1;
    swift_willThrow();
    return sub_1A8DBA7B4((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
  }
  long long v25 = v51[0];
  long long v26 = v51[1];
  uint64_t v27 = v52;
  sub_1A8DC3DAC((uint64_t)v29);
  sub_1A8D8ECD0((uint64_t)v29, (uint64_t)v35, &qword_1EB476750);
  if (v36 == 255)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v22 = 3;
    sub_1A8DBA7B4((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
    sub_1A8DBA7B4((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
    swift_willThrow();
    goto LABEL_11;
  }
  v37[0] = v35[0];
  v37[1] = v35[1];
  v37[2] = v35[2];
  unsigned __int8 v38 = v36;
  sub_1A8DBA7B4((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
  sub_1A8DBA7B4((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
  uint64_t v10 = sub_1A8DA1098((char *)v37, 6, v8, v9);
  if (v2)
  {
LABEL_11:
    swift_unknownObjectRelease();
    sub_1A8DBA7B4((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
    return sub_1A8DBA7B4((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
  }
  uint64_t v54 = v10;
  sub_1A8DC3DAC((uint64_t)v30);
  char v11 = v30[0];
  uint64_t v12 = v30[1];
  uint64_t v13 = v30[2];
  uint64_t v14 = v30[3];
  uint64_t v15 = v30[4];
  uint64_t v16 = v30[5];
  char v17 = v31;
  sub_1A8D8ECD0((uint64_t)v30, (uint64_t)v34, &qword_1EB476750);
  if (v34[48] == 255)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v21 = 0;
  }
  else
  {
    v44[0] = v11;
    uint64_t v45 = v12;
    uint64_t v46 = v13;
    uint64_t v47 = v14;
    uint64_t v48 = v15;
    uint64_t v49 = v16;
    char v50 = v17 & 1;
    uint64_t v24 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
    sub_1A8DBA7B4((uint64_t)v30, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
    sub_1A8DCA5E4(v11, (uint64_t)&v24, (uint64_t)v44);
    sub_1A8DBA7B4((uint64_t)v30, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
    uint64_t v18 = v24;
    uint64_t v19 = v24 + 32;
    uint64_t v20 = *((void *)v24 + 2);
    sub_1A8DBA7B4((uint64_t)v30, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
    uint64_t v21 = (2 * v20) | 1;
  }
  sub_1A8DC3DAC((uint64_t)v32);
  sub_1A8DBA7B4((uint64_t)v32, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
  sub_1A8D8ECD0((uint64_t)v32, (uint64_t)v33, &qword_1EB476750);
  if (v33[48] != 255)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v23 = 3;
    swift_willThrow();
    sub_1A8DBA7B4((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return sub_1A8DBA7B4((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
  }
  swift_unknownObjectRelease();
  sub_1A8DBA7B4((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
  uint64_t result = sub_1A8DBA7B4((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
  *a2 = v54;
  a2[1] = v18;
  a2[2] = v19;
  a2[3] = 0;
  a2[4] = (char *)v21;
  return result;
}

uint64_t sub_1A8DB9A40(uint64_t *a1, unint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = sub_1A8DE6758(a2);
    return sub_1A8DE6294(v3, v4, v5);
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1A8D96298(0, *(void *)(v7 + 16) + 1, 1, (char *)v7);
      uint64_t v7 = result;
    }
    unint64_t v9 = *(void *)(v7 + 16);
    unint64_t v8 = *(void *)(v7 + 24);
    if (v9 >= v8 >> 1)
    {
      uint64_t result = (uint64_t)sub_1A8D96298((char *)(v8 > 1), v9 + 1, 1, (char *)v7);
      uint64_t v7 = result;
    }
    *(void *)(v7 + 16) = v9 + 1;
    *(unsigned char *)(v7 + v9 + 32) = 0;
    *a1 = v7;
  }
  return result;
}

uint64_t sub_1A8DB9AFC@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1A8DC3DAC((uint64_t)v34);
  sub_1A8D8ECD0((uint64_t)v34, (uint64_t)v51, &qword_1EB476750);
  if (v52 != 255)
  {
    v53[0] = v51[0];
    v53[1] = v51[1];
    v53[2] = v51[2];
    unsigned __int8 v54 = v52;
    uint64_t result = sub_1A8DCF4A4((unsigned __int8 *)v53, 2u);
    if (v2) {
      return result;
    }
    if (!result)
    {
      sub_1A8DB95B8(0x30u, &v35);
      uint64_t v7 = v35;
      uint64_t v8 = v36;
      uint64_t v9 = v37;
      uint64_t v10 = v38;
      unint64_t v62 = v39;
      sub_1A8DC3DAC((uint64_t)v40);
      sub_1A8D8ECD0((uint64_t)v40, (uint64_t)v47, &qword_1EB476750);
      if (v48 == 255)
      {
        sub_1A8D8EC14();
        swift_allocError();
        *uint64_t v15 = 3;
        swift_willThrow();
      }
      else
      {
        v49[0] = v47[0];
        v49[1] = v47[1];
        v49[2] = v47[2];
        unsigned __int8 v50 = v48;
        if (LOBYTE(v47[0]) == 4)
        {
          uint64_t v30 = v10;
          uint64_t v31 = v9;
          uint64_t v32 = v8;
          uint64_t v33 = v7;
          sub_1A8D946F4((uint64_t)v49 + 8, (uint64_t)v55);
          uint64_t result = sub_1A8D946F4((uint64_t)v55, (uint64_t)v60);
          if ((v61 & 1) == 0)
          {
            __break(1u);
            return result;
          }
          uint64_t v11 = v60[0];
          uint64_t v12 = v60[1];
          uint64_t v13 = v60[2];
          unint64_t v14 = v60[3];
          sub_1A8DC41E4(a1, 0, 2);
          sub_1A8DBA7B4((uint64_t)v40, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
          sub_1A8DCAA70(v11, v12, v13, v14, (uint64_t)v41);
          sub_1A8DBA7B4((uint64_t)v40, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
          sub_1A8DBA828((uint64_t)v41, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
          sub_1A8DD074C(v41, 0x30u, (uint64_t)v42);
          uint64_t v18 = v42[0];
          uint64_t v19 = v42[1];
          uint64_t v20 = v42[2];
          uint64_t v21 = v42[3];
          uint64_t v22 = v42[4];
          long long v28 = v44;
          long long v29 = v43;
          long long v26 = v46;
          long long v27 = v45;
          if (!v42[0])
          {
            sub_1A8DBA828((uint64_t)v41, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
            uint64_t result = sub_1A8DBA7B4((uint64_t)v40, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
LABEL_27:
            unint64_t v25 = v62;
            *(void *)a2 = v33;
            *(void *)(a2 + 8) = v32;
            *(void *)(a2 + 16) = v31;
            *(void *)(a2 + 24) = v30;
            *(void *)(a2 + 32) = v25;
            *(void *)(a2 + 40) = v18;
            *(void *)(a2 + 48) = v19;
            *(void *)(a2 + 56) = v20;
            *(void *)(a2 + 64) = v21;
            *(void *)(a2 + 72) = v22;
            *(_OWORD *)(a2 + 80) = v29;
            *(_OWORD *)(a2 + 96) = v28;
            *(_OWORD *)(a2 + 112) = v27;
            *(_OWORD *)(a2 + 128) = v26;
            return result;
          }
          uint64_t v57 = v35;
          if (sub_1A8DA102C(v42[0], v35))
          {
            if (v19)
            {
              if (v36)
              {
                char v23 = sub_1A8D94168((uint64_t)v20, (uint64_t)v21, (unint64_t)v22, v37, v38, v39);
                swift_unknownObjectRetain();
                sub_1A8DE97C0();
                if (v23)
                {
                  sub_1A8DBA828((uint64_t)v41, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
                  sub_1A8DBA7B4((uint64_t)v40, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
                  swift_unknownObjectRelease();
LABEL_26:
                  uint64_t result = swift_bridgeObjectRelease();
                  goto LABEL_27;
                }
                goto LABEL_24;
              }
            }
            else if (!v36)
            {
              sub_1A8DE97C0();
              sub_1A8DBA828((uint64_t)v41, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
              sub_1A8DBA7B4((uint64_t)v40, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
              goto LABEL_26;
            }
            sub_1A8DE97C0();
            swift_unknownObjectRetain();
          }
          else
          {
            swift_unknownObjectRetain();
            sub_1A8DE97C0();
          }
LABEL_24:
          sub_1A8D8EC14();
          swift_allocError();
          unsigned char *v24 = 3;
          swift_willThrow();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          sub_1A8DBA670((uint64_t *)v42);
          sub_1A8DBA828((uint64_t)v41, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
          sub_1A8DBA7B4((uint64_t)v40, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
          sub_1A8D8ECA4((uint64_t)&v57);
          sub_1A8D8ECD0((uint64_t)&v36, (uint64_t)v56, &qword_1E97A8BB0);
          char v17 = v56;
          return sub_1A8D8ED34((uint64_t)v17);
        }
        sub_1A8D8EC14();
        swift_allocError();
        *uint64_t v16 = 1;
        swift_willThrow();
        sub_1A8DBA7B4((uint64_t)v40, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      }
      unint64_t v59 = v35;
      sub_1A8D8ECA4((uint64_t)&v59);
      sub_1A8D8ECD0((uint64_t)&v36, (uint64_t)v58, &qword_1E97A8BB0);
      char v17 = v58;
      return sub_1A8D8ED34((uint64_t)v17);
    }
  }
  sub_1A8D8EC14();
  swift_allocError();
  *uint64_t v6 = 3;
  return swift_willThrow();
}

uint64_t sub_1A8DBA154(char **a1, uint64_t a2)
{
  uint64_t v16 = &v17;
  char v17 = 0;
  sub_1A8DCA8E4(2, a1, (uint64_t (*)(char **))sub_1A8DBA324, (uint64_t)v15);
  long long v5 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v5;
  uint64_t v21 = *(void *)(a2 + 32);
  uint64_t v23 = *(void *)&v20[0];
  sub_1A8D8ECD0((uint64_t)v20 + 8, (uint64_t)v22, &qword_1E97A8BB0);
  sub_1A8DBA344((uint64_t)&v23);
  sub_1A8DBA370((uint64_t)v22);
  uint64_t result = sub_1A8DC633C(48, a1, (char *)v20);
  if (!v2)
  {
    char v17 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
    long long v7 = *(_OWORD *)(a2 + 88);
    long long v8 = *(_OWORD *)(a2 + 120);
    v18[4] = *(_OWORD *)(a2 + 104);
    v18[5] = v8;
    uint64_t v19 = *(void *)(a2 + 136);
    long long v9 = *(_OWORD *)(a2 + 56);
    v18[0] = *(_OWORD *)(a2 + 40);
    v18[1] = v9;
    void v18[2] = *(_OWORD *)(a2 + 72);
    v18[3] = v7;
    sub_1A8DBA5D8((uint64_t *)v18);
    sub_1A8DCAF14(48, &v17, (char *)v18);
    uint64_t v10 = sub_1A8DBA670((uint64_t *)v18);
    uint64_t v11 = v17;
    MEMORY[0x1F4188790](v10);
    void v14[2] = v11;
    v14[3] = v12;
    void v14[4] = 0;
    v14[5] = v13;
    sub_1A8DCA8E4(4, a1, (uint64_t (*)(char **))sub_1A8DBA704, (uint64_t)v14);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A8DBA308(uint64_t *a1, unint64_t *a2)
{
  return sub_1A8DB9A40(a1, *a2);
}

uint64_t sub_1A8DBA324(uint64_t *a1)
{
  return sub_1A8DB9A40(a1, **(void **)(v1 + 16));
}

uint64_t sub_1A8DBA344(uint64_t a1)
{
  return a1;
}

uint64_t sub_1A8DBA370(uint64_t a1)
{
  return a1;
}

uint64_t sub_1A8DBA39C@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, _OWORD *a3@<X8>)
{
  if (*a1 != a2 || (a1[48] & 1) != 0)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v6 = 1;
    swift_willThrow();
    uint64_t v7 = (uint64_t)a1;
    return sub_1A8DBA828(v7, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  }
  uint64_t v8 = *((void *)a1 + 5);
  long long v9 = *(_OWORD *)(a1 + 24);
  v26[0] = *(_OWORD *)(a1 + 8);
  v26[1] = v9;
  uint64_t v27 = v8;
  swift_unknownObjectRetain_n();
  sub_1A8DB9AFC(v26, (uint64_t)&v17);
  if (v3)
  {
    swift_unknownObjectRelease();
    sub_1A8DBA828((uint64_t)a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
LABEL_8:
    uint64_t v7 = (uint64_t)a1;
    return sub_1A8DBA828(v7, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  }
  sub_1A8DC3DAC((uint64_t)v28);
  sub_1A8DBA7B4((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
  sub_1A8D8ECD0((uint64_t)v28, (uint64_t)v29, &qword_1EB476750);
  if (v29[48] != 255)
  {
    sub_1A8D8EC14();
    swift_allocError();
    unsigned char *v10 = 3;
    swift_willThrow();
    sub_1A8DBA828((uint64_t)a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    _DWORD v16[6] = v23;
    v16[7] = v24;
    v16[8] = v25;
    id v16[2] = v19;
    void v16[3] = v20;
    v16[4] = v21;
    v16[5] = v22;
    v16[0] = v17;
    v16[1] = v18;
    sub_1A8DBA724((uint64_t)v16);
    swift_unknownObjectRelease();
    goto LABEL_8;
  }
  swift_unknownObjectRelease();
  sub_1A8DBA828((uint64_t)a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  uint64_t result = sub_1A8DBA828((uint64_t)a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  long long v12 = v24;
  a3[6] = v23;
  a3[7] = v12;
  a3[8] = v25;
  long long v13 = v20;
  a3[2] = v19;
  a3[3] = v13;
  long long v14 = v22;
  a3[4] = v21;
  a3[5] = v14;
  long long v15 = v18;
  *a3 = v17;
  a3[1] = v15;
  return result;
}

uint64_t *sub_1A8DBA5D8(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1A8DBA62C(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRetain();
    return sub_1A8DE97C0();
  }
  return result;
}

uint64_t *sub_1A8DBA670(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1A8DBA6C4(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1A8DBA704(uint64_t a1)
{
  return sub_1A8DA6BDC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1A8DBA724(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1A8DBA6C4(v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1A8DBA7B4(uint64_t a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1A8DBA7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a7 != 255) {
    return j__swift_unknownObjectRetain(a2, a3, a4, a5, a6, a7 & 1);
  }
  return result;
}

uint64_t sub_1A8DBA828(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1A8DBA868()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DBA8B0()
{
  return sub_1A8DE9C00();
}

uint64_t sub_1A8DBA8DC()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DBA920()
{
  return 0;
}

unint64_t sub_1A8DBA9D4()
{
  unint64_t result = qword_1E97A9448;
  if (!qword_1E97A9448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9448);
  }
  return result;
}

ValueMetadata *_s14ASN1IdentifierVMa()
{
  return &_s14ASN1IdentifierVN;
}

ValueMetadata *_s32CoreCryptoCurve448PrivateKeyImplVMa_0()
{
  return &_s32CoreCryptoCurve448PrivateKeyImplVN_0;
}

ValueMetadata *_s31CoreCryptoCurve448PublicKeyImplVMa_0()
{
  return &_s31CoreCryptoCurve448PublicKeyImplVN_0;
}

size_t sub_1A8DBAA58()
{
  uint64_t v0 = sub_1A8DE97D0();
  *(void *)(v0 + 16) = 56;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(void *)(v0 + 80) = 0;
  if (!ccrng()) {
LABEL_5:
  }
    __break(1u);
  if (cccurve448_make_pub())
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v1 = sub_1A8DE97C0();
  size_t v2 = sub_1A8DBAD00(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

size_t sub_1A8DBAB64@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  if (a1 && a2 - a1 == 56)
  {
    size_t result = sub_1A8D891D0(a1, a2);
    *a3 = result;
  }
  else
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1A8DBABDC(uint64_t result, uint64_t a2)
{
  if (!result || a2 - result != 56)
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1A8DBAC44@<X0>(uint64_t a1@<X0>, void *a2@<X2>, _DWORD *a3@<X8>)
{
  if (!ccrng())
  {
    __break(1u);
    goto LABEL_6;
  }
  if (!*a2)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }
  if (!a1) {
    goto LABEL_7;
  }
  uint64_t result = cccurve448();
  *a3 = result;
  return result;
}

size_t sub_1A8DBAD00(uint64_t a1)
{
  if (*(void *)(a1 + 16) == 56) {
    return sub_1A8D891D0(a1 + 32, a1 + 88);
  }
  sub_1A8D8E240();
  swift_allocError();
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_1A8DBAD78()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
  uint64_t result = sub_1A8DE9390();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1A8DBADFC()
{
  uint64_t result = sub_1A8DE9390();
  if (!v0) {
    return sub_1A8D9BD24();
  }
  return result;
}

uint64_t sub_1A8DBAE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8DBB044(a1, a2, a3, sub_1A8DBD824);
}

uint64_t sub_1A8DBAE90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_1A8DBD9CC(v10, v9, a2, a3);
  if (a1 && (v11 & 0x8000000000000000) == 0 && v11 < a1)
  {
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = a2 >> 32;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        goto LABEL_14;
      default:
        goto LABEL_16;
    }
  }
  uint64_t v12 = sub_1A8DBD950(v10, a1, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = (int)a2;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 16);
      break;
    default:
      break;
  }
  if (v12 < v13)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x1A8DBAFFCLL);
  }
LABEL_16:
  uint64_t v14 = sub_1A8DE9470();
  uint64_t v16 = v15;
  uint64_t result = sub_1A8D8BD58(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_1A8DBB02C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8DBB044(a1, a2, a3, sub_1A8DBD8C8);
}

uint64_t sub_1A8DBB044(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2) {
      uint64_t v4 = a3 - a2;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t result = a4(0, result, v4, a2, a3);
    if (v5) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = result;
    }
    if ((v6 & 0x8000000000000000) == 0) {
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DBB0C0(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  int64_t v5 = a5 >> 1;
  uint64_t v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!result || v6 < 0 || (int64_t v7 = a5 >> 1, v6 >= result))
  {
    int64_t v7 = a4 + result;
    if (__OFADD__(a4, result)) {
      goto LABEL_18;
    }
  }
  if (v7 < a4) {
    goto LABEL_14;
  }
  if (v5 < a4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 >= v7)
  {
    if ((v7 & 0x8000000000000000) == 0) {
      return a2;
    }
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1A8DBB13C(uint64_t a1, unint64_t a2)
{
  v10[5] = *MEMORY[0x1E4F143B8];
  v10[3] = MEMORY[0x1E4F277C0];
  v10[4] = MEMORY[0x1E4F277B0];
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v10, MEMORY[0x1E4F277C0]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      sub_1A8D8BE04(a1, a2);
      sub_1A8D8BE04(v5, v6);
      sub_1A8DBD6C0((int)v5, v5 >> 32);
      sub_1A8D8BD58(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      sub_1A8D8BE04(a1, a2);
      swift_retain();
      swift_retain();
      sub_1A8DBD6C0(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      sub_1A8D8BE04(a1, a2);
      sub_1A8DE9460();
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t sub_1A8DBB360(uint64_t a1)
{
  v28[5] = *MEMORY[0x1E4F143B8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4766D0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476718);
  if (swift_dynamicCast())
  {
    sub_1A8D934C8(v26, (uint64_t)v28);
    uint64_t v2 = __swift_project_boxed_opaque_existential_1(v28, v28[3]);
    MEMORY[0x1F4188790](v2);
    sub_1A8DE9390();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  }
  uint64_t v27 = 0;
  memset(v26, 0, sizeof(v26));
  sub_1A8D8C000((uint64_t)v26);
  uint64_t v4 = *v1;
  unint64_t v5 = v1[1];
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v4), v4)) {
        goto LABEL_43;
      }
      uint64_t v7 = HIDWORD(v4) - (int)v4;
      uint64_t v6 = v4 >> 32;
LABEL_8:
      if (__OFADD__(v6, a1)) {
        goto LABEL_37;
      }
      if (v6 + a1 < v6) {
        goto LABEL_38;
      }
      if (v6 < 0) {
        goto LABEL_39;
      }
      uint64_t v10 = sub_1A8DE9430();
      MEMORY[0x1F4188790](v10);
      uint64_t result = (uint64_t)sub_1A8DB7EF0((void *(*)(uint64_t *__return_ptr, char *, char *))sub_1A8DBDD5C);
      if (v13 == a1)
      {
        uint64_t v14 = result;
        uint64_t v15 = v12;
        memset(v28, 0, 15);
        if (v12 != result)
        {
          if ((v12 & 0x8000000000000000) == 0 && v12 < result)
          {
            char v16 = v11;
            LOBYTE(v17) = 0;
            uint64_t v18 = result - 1;
            do
            {
              *((unsigned char *)v28 + v17) = v16;
              __int16 v17 = v17 + 1;
              if ((v17 & 0x100) != 0) {
                goto LABEL_36;
              }
              if (v17 == 14)
              {
                *(void *)&v26[0] = v28[0];
                DWORD2(v26[0]) = v28[1];
                WORD6(v26[0]) = WORD2(v28[1]);
                uint64_t result = sub_1A8DE9460();
                if (v18 == v15) {
                  return result;
                }
                LOBYTE(v17) = 0;
              }
              else if (v18 == v15)
              {
                *(void *)&v26[0] = v28[0];
                DWORD2(v26[0]) = v28[1];
                WORD6(v26[0]) = WORD2(v28[1]);
                return sub_1A8DE9460();
              }
              ++v15;
            }
            while (v15 < v14);
          }
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v19 = *v1;
        unint64_t v20 = v1[1];
        uint64_t v21 = 0;
        switch(v20 >> 62)
        {
          case 1uLL:
            uint64_t v21 = (int)v19;
            break;
          case 2uLL:
            uint64_t v21 = *(void *)(v19 + 16);
            break;
          default:
            break;
        }
        BOOL v22 = __OFADD__(v21, v7);
        uint64_t v23 = v21 + v7;
        if (v22)
        {
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if (__OFADD__(v23, v13))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
        }
        uint64_t v24 = 0;
        switch(v20 >> 62)
        {
          case 1uLL:
            uint64_t v24 = v19 >> 32;
            break;
          case 2uLL:
            uint64_t v24 = *(void *)(v19 + 24);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v24 = BYTE6(v20);
            break;
        }
        if (v24 < v23 + v13) {
          goto LABEL_42;
        }
        return sub_1A8DE9440();
      }
      return result;
    case 2uLL:
      uint64_t v9 = v4 + 16;
      uint64_t v8 = *(void *)(v4 + 16);
      uint64_t v6 = *(void *)(v9 + 8);
      uint64_t v7 = v6 - v8;
      if (!__OFSUB__(v6, v8)) {
        goto LABEL_8;
      }
      goto LABEL_44;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v6 = BYTE6(v5);
      uint64_t v7 = BYTE6(v5);
      goto LABEL_8;
  }
}

uint64_t sub_1A8DBB74C(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, unint64_t a6)
{
  sub_1A8D8BE04(a2, a3);
  sub_1A8D8BE04(a2, a3);
  swift_retain();
  sub_1A8DBAE90((uint64_t)a4, a2, a3, (uint64_t *)&v50);
  uint64_t v14 = (void *)*((void *)&v50 + 1);
  uint64_t v13 = v50;
  switch(*((void *)&v50 + 1) >> 62)
  {
    case 1:
      LODWORD(v15) = DWORD1(v50) - v50;
      if (__OFSUB__(DWORD1(v50), v50))
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      uint64_t v15 = (int)v15;
LABEL_6:
      if (v15 < 12)
      {
LABEL_35:
        sub_1A8D8E240();
        swift_allocError();
        *(_DWORD *)uint64_t v43 = 1;
        *(unsigned char *)(v43 + 4) = 1;
        swift_willThrow();
        sub_1A8D8BD58(v13, (unint64_t)v14);
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x1A8DBBC70);
      }
      uint64_t v51 = a4;
      uint64_t v19 = a5;
      uint64_t v14 = (void *)sub_1A8D924B0(v50, *((unint64_t *)&v50 + 1));
      uint64_t v21 = v20;
      sub_1A8D8BD58(a2, a3);
      uint64_t v22 = ccaes_gcm_decrypt_mode();
      if (!v22)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      uint64_t v23 = v22;
      uint64_t v48 = a1;
      *(void *)&long long v50 = v14;
      *((void *)&v50 + 1) = v21;
      uint64_t v14 = (void *)type metadata accessor for CoreCryptoGCMImpl.Context();
      swift_allocObject();
      uint64_t result = sub_1A8D8D2BC(&v48, (uint64_t *)&v50, v23);
      if (v6) {
        return result;
      }
      uint64_t v13 = result;
      if (a6 >> 60 == 15)
      {
        long long v25 = v51;
        goto LABEL_15;
      }
      uint64_t v26 = v19;
      sub_1A8D8BE04(v19, a6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v27 = swift_allocObject();
        uint64_t v28 = *(void *)(v13 + 24);
        uint64_t v45 = v27;
        *(void *)(v27 + 24) = v28;
        swift_retain();
        MEMORY[0x1AD0E8050](v28);
        long long v29 = (void *)swift_slowAlloc();
        uint64_t __src = *(void **)(v13 + 16);
        size_t v30 = MEMORY[0x1AD0E8050](v28);
        if ((v30 & 0x8000000000000000) == 0)
        {
          memmove(v29, __src, v30);
          swift_release();
          *(void *)(v45 + 16) = v29;
          swift_release();
          uint64_t v13 = v45;
          uint64_t v26 = v19;
          goto LABEL_14;
        }
        goto LABEL_32;
      }
LABEL_14:
      sub_1A8DBBDD0(v26, a6);
      sub_1A8D8BF9C(v26, a6);
      long long v25 = v51;
LABEL_15:
      long long v50 = xmmword_1A8DEAA40;
      sub_1A8D8BE04(a2, a3);
      sub_1A8DBC268((uint64_t)v25, a2, a3, &v46);
      sub_1A8DBC924(16, v46, v47, &v48);
      uint64_t v32 = v48;
      unint64_t v31 = v49;
      switch(v49 >> 62)
      {
        case 1uLL:
          goto LABEL_19;
        case 2uLL:
          uint64_t v33 = *(void *)(v48 + 16);
          uint64_t v51 = *(void **)(v48 + 24);
          sub_1A8D8BD58(v48, v49);
          if (!__OFSUB__(v51, v33)) {
            goto LABEL_22;
          }
          __break(1u);
LABEL_19:
          sub_1A8D8BD58(v32, v31);
          if (__OFSUB__(HIDWORD(v32), v32)) {
            goto LABEL_33;
          }
LABEL_22:
          sub_1A8DE9450();
          sub_1A8D8BE04(a2, a3);
          sub_1A8DBC268((uint64_t)v25, a2, a3, &v46);
          sub_1A8DBC924(16, v46, v47, &v48);
          uint64_t v35 = v48;
          unint64_t v34 = v49;
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_25;
          }
          uint64_t v36 = swift_allocObject();
          uint64_t v37 = *(void *)(v13 + 24);
          *(void *)(v36 + 24) = v37;
          swift_retain();
          MEMORY[0x1AD0E8050](v37);
          uint64_t v14 = (void *)swift_slowAlloc();
          uint64_t v51 = *(void **)(v13 + 16);
          size_t v38 = MEMORY[0x1AD0E8050](v37);
          if ((v38 & 0x8000000000000000) != 0) {
            goto LABEL_31;
          }
          memmove(v14, v51, v38);
          swift_release();
          *(void *)(v36 + 16) = v14;
          swift_release();
LABEL_25:
          sub_1A8DBC048(v35, v34, (uint64_t *)&v50);
          sub_1A8D8BD58(v35, v34);
          sub_1A8D8BE04(a2, a3);
          swift_retain();
          sub_1A8DBC780(16, a2, a3, &v48);
          uint64_t v39 = v48;
          unint64_t v40 = v49;
          BOOL v41 = sub_1A8D8DF24(v48, v49);
          sub_1A8D8BD58(v39, v40);
          swift_release();
          if (v41)
          {
            swift_release();
            uint64_t result = v50;
          }
          else
          {
            sub_1A8D8E240();
            swift_allocError();
            *(_DWORD *)uint64_t v42 = 2;
            *(unsigned char *)(v42 + 4) = 1;
            swift_willThrow();
            sub_1A8D8BD58(v50, *((unint64_t *)&v50 + 1));
            uint64_t result = swift_release();
          }
          break;
        default:
          sub_1A8D8BD58(v48, v49);
          goto LABEL_22;
      }
      return result;
    case 2:
      uint64_t v17 = *(void *)(v50 + 16);
      uint64_t v16 = *(void *)(v50 + 24);
      BOOL v18 = __OFSUB__(v16, v17);
      uint64_t v15 = v16 - v17;
      if (!v18) {
        goto LABEL_6;
      }
      goto LABEL_30;
    case 3:
      goto LABEL_35;
    default:
      uint64_t v15 = BYTE14(v50);
      goto LABEL_6;
  }
}

uint64_t AES.GCM.SealedBox.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  sub_1A8D8BE04(v3, v4);
  sub_1A8DBAE90(v5, v3, v4, v7);
  return sub_1A8DBCAC4(v7[0], v7[1], a1);
}

uint64_t AES.GCM.SealedBox.ciphertext.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  sub_1A8D8BE04(v1, v2);
  sub_1A8DBC268(v3, v1, v2, v5);
  sub_1A8DBC924(16, v5[0], v5[1], &v6);
  return v6;
}

uint64_t AES.GCM.SealedBox.tag.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  sub_1A8D8BE04(v1, v2);
  sub_1A8DBC780(16, v1, v2, &v4);
  return v4;
}

uint64_t sub_1A8DBBDD0(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      sub_1A8D8BE04(a1, a2);
      sub_1A8DBD754((int)a1, a1 >> 32);
      return sub_1A8D8BD58(a1, a2);
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      swift_retain();
      sub_1A8D8BE04(a1, a2);
      swift_retain();
      swift_retain();
      sub_1A8DBD754(v5, v6);
      swift_release();
      swift_release();
      return sub_1A8D8BD58(a1, a2);
    case 3uLL:
      swift_retain_n();
      int v4 = ccgcm_aad();
      if (v4) {
        goto LABEL_9;
      }
      goto LABEL_10;
    default:
      swift_retain_n();
      int v4 = ccgcm_aad();
      if (!v4) {
        goto LABEL_10;
      }
LABEL_9:
      int v8 = v4;
      sub_1A8D8E240();
      swift_allocError();
      *(_DWORD *)uint64_t v9 = v8;
      *(unsigned char *)(v9 + 4) = 0;
      swift_willThrow();
LABEL_10:
      sub_1A8D8BD58(a1, a2);
      return swift_release_n();
  }
}

uint64_t sub_1A8DBC048(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  switch((unint64_t)a3[1] >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(v3), v3)) {
        goto LABEL_5;
      }
      goto LABEL_13;
    case 2uLL:
      if (!__OFSUB__(*(void *)(v3 + 24), *(void *)(v3 + 16))) {
        goto LABEL_5;
      }
      goto LABEL_14;
    default:
LABEL_5:
      uint64_t v4 = 0;
      switch(a2 >> 62)
      {
        case 1uLL:
          LODWORD(v4) = HIDWORD(a1) - a1;
          if (__OFSUB__(HIDWORD(a1), a1)) {
            goto LABEL_15;
          }
          uint64_t v4 = (int)v4;
LABEL_10:
          if (v4 < 0)
          {
            __break(1u);
LABEL_13:
            __break(1u);
LABEL_14:
            __break(1u);
LABEL_15:
            __break(1u);
LABEL_16:
            __break(1u);
            JUMPOUT(0x1A8DBC1A4);
          }
LABEL_11:
          uint64_t v8 = sub_1A8DBB360(v4);
          MEMORY[0x1F4188790](v8);
          return sub_1A8DB7CA4(sub_1A8DBDD38);
        case 2uLL:
          uint64_t v6 = *(void *)(a1 + 16);
          uint64_t v5 = *(void *)(a1 + 24);
          BOOL v7 = __OFSUB__(v5, v6);
          uint64_t v4 = v5 - v6;
          if (!v7) {
            goto LABEL_10;
          }
          goto LABEL_16;
        case 3uLL:
          goto LABEL_11;
        default:
          uint64_t v4 = BYTE6(a2);
          goto LABEL_11;
      }
  }
}

uint64_t sub_1A8DBC1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7 = sub_1A8DBC418(a3, a1, a2);
  uint64_t v9 = v8 + v7;
  uint64_t v11 = v8 + v10;
  if (!v8)
  {
    uint64_t v11 = 0;
    uint64_t v9 = 0;
  }
  v13[0] = v9;
  v13[1] = v11;
  sub_1A8D8BE04(a4, a5);
  sub_1A8DBC518(a4, a5, v13);
  return sub_1A8D8BD58(a4, a5);
}

uint64_t sub_1A8DBC268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_1A8DBD9CC(v10, v9, a2, a3);
  if (!a1 || v11 < 0 || v11 >= a1)
  {
    uint64_t v12 = sub_1A8DBD950(v10, a1, a2, a3);
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 1:
        uint64_t v13 = a2 >> 32;
        break;
      case 2:
        uint64_t v13 = *(void *)(a2 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v13 = BYTE6(a3);
        break;
    }
    if (v13 < v12)
    {
LABEL_16:
      __break(1u);
      JUMPOUT(0x1A8DBC3E8);
    }
  }
  uint64_t v14 = sub_1A8DE9470();
  uint64_t v16 = v15;
  uint64_t result = sub_1A8D8BD58(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_1A8DBC418(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v5 = a3 - a2;
  if (a2) {
    uint64_t v6 = a3 - a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t result = sub_1A8DBD8C8(0, result, v6, a2, a3);
  if (v7)
  {
    uint64_t result = v5;
    if (!a2) {
      return 0;
    }
  }
  else if (!a2)
  {
    uint64_t v5 = 0;
  }
  if (v5 < result) {
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_1A8DBC4A8(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  int64_t v5 = a5 >> 1;
  uint64_t v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (result)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      int64_t v7 = a5 >> 1;
      if (v6 < result)
      {
LABEL_8:
        if (v7 >= a4)
        {
          if (v5 >= a4) {
            return a2;
          }
          goto LABEL_15;
        }
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
  }
  int64_t v7 = a4 + result;
  if (!__OFADD__(a4, result))
  {
    if (v5 >= v7) {
      goto LABEL_8;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1A8DBC518(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _OWORD v25[2] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_1A8D8BE04(a1, a2);
      uint64_t v8 = sub_1A8DE9340();
      if (v8)
      {
        uint64_t v9 = sub_1A8DE9370();
        if (!__OFSUB__((int)a1, v9))
        {
          v8 += (int)a1 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = sub_1A8DE9360();
      if (v10 >= v7) {
        uint64_t v11 = (a1 >> 32) - (int)a1;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = v8 + v11;
      if (v8) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      sub_1A8D8DD50(v8, v13, a3);
      return sub_1A8D8BD58(a1, a2);
    case 2uLL:
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = sub_1A8DE9340();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = sub_1A8DE9370();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_30;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      uint64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_29;
      }
      uint64_t v21 = sub_1A8DE9360();
      if (v21 >= v20) {
        uint64_t v22 = v20;
      }
      else {
        uint64_t v22 = v21;
      }
      uint64_t v23 = v17 + v22;
      if (v17) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0;
      }
      sub_1A8D8DD50(v17, v24, a3);
      swift_release();
      return swift_release();
    case 3uLL:
      memset(v25, 0, 14);
      uint64_t v6 = (char *)v25;
      return sub_1A8D8DD50((uint64_t)v25, (uint64_t)v6, a3);
    default:
      v25[0] = a1;
      LOWORD(v25[1]) = a2;
      BYTE2(v25[1]) = BYTE2(a2);
      BYTE3(v25[1]) = BYTE3(a2);
      BYTE4(v25[1]) = BYTE4(a2);
      BYTE5(v25[1]) = BYTE5(a2);
      uint64_t v6 = (char *)v25 + BYTE6(a2);
      return sub_1A8D8DD50((uint64_t)v25, (uint64_t)v6, a3);
  }
}

uint64_t sub_1A8DBC780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = a2 >> 32;
      uint64_t v8 = (int)a2;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v10 = -a1;
  uint64_t v11 = sub_1A8DBD9CC(v9, v8, a2, a3);
  if (v11 <= 0 && v11 > v10)
  {
    uint64_t v12 = v5;
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = (int)a2;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 16);
        goto LABEL_14;
      case 3:
        goto LABEL_16;
      default:
        goto LABEL_11;
    }
  }
  uint64_t v12 = sub_1A8DBD950(v9, v10, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = a2 >> 32;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 24);
      break;
    case 3:
      break;
    default:
LABEL_11:
      uint64_t v13 = BYTE6(a3);
      break;
  }
  if (v13 < v12)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x1A8DBC8F4);
  }
LABEL_16:
  uint64_t v14 = sub_1A8DE9470();
  uint64_t v16 = v15;
  uint64_t result = sub_1A8D8BD58(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_1A8DBC924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x1A8DBCA94);
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = a2 >> 32;
      uint64_t v8 = (int)a2;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v10 = -a1;
  uint64_t v11 = sub_1A8DBD9CC(v9, v8, a2, a3);
  if (v11 > 0 || v11 <= v10)
  {
    uint64_t v12 = sub_1A8DBD950(v9, v10, a2, a3);
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 1:
        uint64_t v13 = (int)a2;
        break;
      case 2:
        uint64_t v13 = *(void *)(a2 + 16);
        break;
      default:
        break;
    }
    if (v12 < v13)
    {
      __break(1u);
      goto LABEL_14;
    }
  }
  uint64_t v14 = sub_1A8DE9470();
  uint64_t v16 = v15;
  uint64_t result = sub_1A8D8BD58(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_1A8DBCAC4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x1A8DBCBACLL);
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      if (v6 >= 12)
      {
        uint64_t result = sub_1A8D924B0(a1, a2);
        *a3 = result;
        a3[1] = v12;
      }
      else
      {
LABEL_7:
        sub_1A8D8E240();
        swift_allocError();
        *(_DWORD *)uint64_t v10 = 1;
        *(unsigned char *)(v10 + 4) = 1;
        swift_willThrow();
        return sub_1A8D8BD58(a1, a2);
      }
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v6 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t static AES.GCM.seal<A, B>(_:using:nonce:authenticating:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, long long *a9@<X8>)
{
  uint64_t v23 = a8;
  uint64_t v21 = a5;
  uint64_t v22 = a7;
  uint64_t v15 = sub_1A8DE9910();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v21 - v17;
  uint64_t v25 = *a2;
  long long v24 = *a3;
  uint64_t v19 = *(void *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v21 - v17, a4, a6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v18, 0, 1, a6);
  sub_1A8D8C7C0(&v25, a1, (uint64_t *)&v24, (uint64_t)v18, v21, a6, v22, v23, a9);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t AES.GCM.SealedBox.combined.getter()
{
  if (v0[2] != 12) {
    return 0;
  }
  unint64_t v2 = v0;
  uint64_t v1 = *v0;
  sub_1A8D8BE04(v1, v2[1]);
  return v1;
}

uint64_t AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *a1;
  unint64_t v10 = a1[1];
  if (sub_1A8DE9840() != 16)
  {
    sub_1A8D8BD58(v11, v10);
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 1;
    *(unsigned char *)(v13 + 4) = 1;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a3, a5);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
  }
  uint64_t v19 = 0;
  switch(v10 >> 62)
  {
    case 1uLL:
      LODWORD(v12) = HIDWORD(v11) - v11;
      if (__OFSUB__(HIDWORD(v11), v11)) {
        goto LABEL_14;
      }
      uint64_t v12 = (int)v12;
LABEL_7:
      uint64_t v19 = v12;
LABEL_9:
      uint64_t v17 = sub_1A8DE9840();
      if (__OFADD__(v19, v17))
      {
        __break(1u);
        goto LABEL_13;
      }
      if (__OFADD__(v19 + v17, sub_1A8DE9840()))
      {
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x1A8DBD058);
      }
      sub_1A8DE9450();
      sub_1A8DBB13C(v11, v10);
      sub_1A8D8BD58(v11, v10);
      sub_1A8DE94E0();
      sub_1A8DE94E0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a3, a5);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
      *(_OWORD *)a6 = xmmword_1A8DEAA40;
      *(void *)(a6 + 16) = v19;
      return result;
    case 2uLL:
      uint64_t v16 = *(void *)(v11 + 16);
      uint64_t v15 = *(void *)(v11 + 24);
      uint64_t v19 = v15 - v16;
      if (!__OFSUB__(v15, v16)) {
        goto LABEL_9;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v12 = BYTE6(v10);
      goto LABEL_7;
  }
}

uint64_t static AES.GCM.open<A>(_:using:authenticating:)(long long *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_1A8DE9910();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v18 - v12;
  uint64_t v14 = *((void *)a1 + 2);
  unint64_t v20 = *a2;
  long long v18 = *a1;
  uint64_t v19 = v14;
  uint64_t v15 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a3, a4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, a4);
  uint64_t v16 = sub_1A8D8CC9C(&v20, (uint64_t *)&v18, (uint64_t)v13, a4, a5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v16;
}

uint64_t static AES.GCM.seal<A>(_:using:nonce:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, long long *a6@<X8>)
{
  uint64_t v15 = *a2;
  long long v10 = *a3;
  long long v13 = xmmword_1A8DEBCE0;
  long long v14 = v10;
  unint64_t v11 = sub_1A8D9E548();
  return sub_1A8D8C7C0(&v15, a1, (uint64_t *)&v14, (uint64_t)&v13, a4, MEMORY[0x1E4F277C0], a5, v11, a6);
}

uint64_t static AES.GCM.open(_:using:)(uint64_t a1, uint64_t *a2)
{
  return sub_1A8DBB74C(*a2, *(void *)a1, *(void *)(a1 + 8), *(void **)(a1 + 16), 0, 0xF000000000000000);
}

uint64_t AES.GCM.SealedBox.init(combined:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  a3[2] = 12;
  return result;
}

uint64_t AES.GCM.SealedBox.init<A>(combined:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1A8DE9840() >= 28)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    uint64_t v11 = sub_1A8DE9520();
    uint64_t v13 = v12;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
    *a3 = v11;
    a3[1] = v13;
    a3[2] = 12;
  }
  else
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = 1;
    *(unsigned char *)(v9 + 4) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }
  return result;
}

unint64_t sub_1A8DBD468()
{
  unint64_t result = qword_1E97A9450;
  if (!qword_1E97A9450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9450);
  }
  return result;
}

unint64_t sub_1A8DBD4C0()
{
  unint64_t result = qword_1E97A9458;
  if (!qword_1E97A9458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9458);
  }
  return result;
}

ValueMetadata *type metadata accessor for AES.GCM()
{
  return &type metadata for AES.GCM;
}

uint64_t *sub_1A8DBD528(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1A8D8BE04(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *_s3GCMO9SealedBoxVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1A8D8BE04(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1A8D8BD58(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *_s3GCMO9SealedBoxVwta(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1A8D8BD58(v4, v5);
  a1[2] = *(void *)(a2 + 16);
  return a1;
}

uint64_t _s3GCMO9SealedBoxVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s3GCMO9SealedBoxVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AES.GCM.SealedBox()
{
  return &type metadata for AES.GCM.SealedBox;
}

uint64_t sub_1A8DBD6C0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1A8DE9340();
  if (!result || (uint64_t result = sub_1A8DE9370(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1A8DE9360();
      return sub_1A8DE9460();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DBD754(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1A8DE9340();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = sub_1A8DE9370();
    if (__OFSUB__(a1, result))
    {
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
    v5 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = sub_1A8DE9360();
  if (!v5)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  int v6 = ccgcm_aad();
  if (v6)
  {
    int v7 = v6;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(unsigned char *)(v8 + 4) = 0;
    swift_willThrow();
  }
  return swift_release();
}

uint64_t sub_1A8DBD824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_1A8DAE538(a1, a3, a4, a5);
  if (a2 > 0)
  {
    if (v9 < 0 || v9 >= (unint64_t)a2) {
      goto LABEL_8;
    }
    return 0;
  }
  if (v9 <= 0 && v9 > a2) {
    return 0;
  }
LABEL_8:
  uint64_t result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v11 = a5 - a4;
  if (!a4) {
    uint64_t v11 = 0;
  }
  if (result < 0 || v11 < result) {
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_1A8DBD8C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5 - a4;
  if (!a4) {
    uint64_t v5 = 0;
  }
  if (result < 0 || v5 < result)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a3 < 0 || v5 < a3) {
    goto LABEL_19;
  }
  uint64_t v6 = a3 - result;
  if (a2 > 0)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2) {
      goto LABEL_14;
    }
    return 0;
  }
  if (v6 <= 0 && v6 > a2) {
    return 0;
  }
LABEL_14:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (result < 0 || v5 < result) {
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_1A8DBD950(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x1A8DBD9BCLL);
  }
  return result;
}

uint64_t sub_1A8DBD9CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x1A8DBDA98);
  }
  return result;
}

unint64_t sub_1A8DBDAB8(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v5 = a5;
  unint64_t v6 = a4;
  unint64_t v7 = a3;
  unint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v10) = 1;
  }
  unint64_t result = a3;
  if ((a3 & 0xC) == 4 << v10)
  {
LABEL_22:
    unint64_t result = sub_1A8D9D9A8(v7, v6, v5);
    if ((v5 & 0x1000000000000000) == 0) {
      goto LABEL_6;
    }
LABEL_23:
    unint64_t result = sub_1A8DE96B0();
    if (v16) {
      unint64_t result = v8;
    }
    goto LABEL_17;
  }
  if ((a5 & 0x1000000000000000) != 0) {
    goto LABEL_23;
  }
LABEL_6:
  unint64_t v12 = result >> 16;
  int64_t v13 = (result >> 16) - v9;
  unint64_t v14 = v8 >> 16;
  if (v9)
  {
    if (v12 >= v14)
    {
      unint64_t result = v8;
      if (v13 < (uint64_t)v14) {
        goto LABEL_17;
      }
    }
  }
  else if (v14 >= v12)
  {
    unint64_t result = v8;
    if ((uint64_t)v14 < v13) {
      goto LABEL_17;
    }
  }
  if (v13 < 0)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }
  unint64_t v15 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    unint64_t v15 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v15 < v13) {
    goto LABEL_28;
  }
  unint64_t result = (v13 << 16) | 4;
LABEL_17:
  if (v7 >> 14 < result >> 14)
  {
    __break(1u);
    goto LABEL_27;
  }

  return sub_1A8D9DA24(result, v7, v8, v7, v6, v5);
}

unint64_t sub_1A8DBDBF8(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v5 = a5;
  unint64_t v6 = a4;
  unint64_t v7 = a3;
  unint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v10) = 1;
  }
  unint64_t result = a3;
  if ((a3 & 0xC) == 4 << v10)
  {
LABEL_22:
    unint64_t result = sub_1A8D9D9A8(v7, v6, v5);
    if ((v5 & 0x1000000000000000) == 0) {
      goto LABEL_6;
    }
LABEL_23:
    unint64_t result = sub_1A8DE96B0();
    if (v17) {
      unint64_t v15 = v8;
    }
    else {
      unint64_t v15 = result;
    }
    goto LABEL_17;
  }
  if ((a5 & 0x1000000000000000) != 0) {
    goto LABEL_23;
  }
LABEL_6:
  unint64_t v12 = result >> 16;
  int64_t v13 = (result >> 16) - v9;
  unint64_t v14 = v8 >> 16;
  if (v9)
  {
    if (v12 >= v14)
    {
      unint64_t v15 = v8;
      if (v13 < (uint64_t)v14) {
        goto LABEL_17;
      }
    }
  }
  else if (v14 >= v12)
  {
    unint64_t v15 = v8;
    if ((uint64_t)v14 < v13) {
      goto LABEL_17;
    }
  }
  if (v13 < 0)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }
  unint64_t v16 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    unint64_t v16 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v16 < v13) {
    goto LABEL_28;
  }
  unint64_t v15 = (v13 << 16) | 4;
LABEL_17:
  if (v15 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_27;
  }

  return sub_1A8D9DA24(v8, v15, v8, v7, v6, v5);
}

uint64_t sub_1A8DBDD38(uint64_t a1, uint64_t a2)
{
  return sub_1A8DBC1C4(a1, a2, *(void *)(v2 + 16), **(void **)(v2 + 24), *(void *)(*(void *)(v2 + 24) + 8));
}

uint64_t sub_1A8DBDD5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_1A8DBDDBC(a1, a2, *(void *)(v3 + 16), **(void **)(v3 + 32), *(unsigned char *)(*(void *)(v3 + 32) + 8));
  if (!v4)
  {
    *(void *)a3 = result;
    *(unsigned char *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v8;
    *(void *)(a3 + 24) = v9;
  }
  return result;
}

uint64_t sub_1A8DBDDA0()
{
  return sub_1A8DE8B64();
}

uint64_t sub_1A8DBDDBC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!result) {
    return a4;
  }
  if (!__OFSUB__(a2 - result, a3))
  {
    sub_1A8DC91F0((uint64_t)&v5, (unsigned char *)(result + a3), a2 - result - a3, a4, a5);
    return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DBDE34(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v4 = a1;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t))(a3 + 40))(&v4, &v5, a2);
}

uint64_t SharedSecret.init<A>(withExternalSS:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_1A8D9BD24();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t SharedSecret.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return sub_1A8D9A30C(a1, a2, *v2);
}

uint64_t SharedSecret.x963DerivedSymmetricKey<A, B>(using:sharedInfo:outputByteCount:)@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>)
{
  uint64_t v15 = *v7;
  swift_beginAccess();
  return sub_1A8DBDFD4(v15 + 32, v15 + 32 + *(void *)(v15 + 16), a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1A8DBDFD4@<X0>(size_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  sub_1A8D9A780(a1, a2, &v17);
  static ANSIKDFx963.deriveKey<A>(inputKeyMaterial:info:outputByteCount:)(&v17, a3, a4, a5, a6, a7, a8, a9);
  return swift_release();
}

uint64_t SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, char *a9, uint64_t a10)
{
  uint64_t v12 = *v10;
  return static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)(&v12, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1A8DBE0A4(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return SharedSecret.withUnsafeBytes<A>(_:)(a1, a2);
}

uint64_t SharedSecret.hash(into:)()
{
  return sub_1A8DE9BE0();
}

uint64_t SharedSecret.hashValue.getter()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DBE174()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DBE1D8()
{
  return sub_1A8DE9BE0();
}

uint64_t sub_1A8DBE22C()
{
  return sub_1A8DE9C20();
}

uint64_t static SharedSecret.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return sub_1A8DB87B8(v2 + 32, v2 + 32 + *(void *)(v2 + 16), v3) & 1;
}

uint64_t static SharedSecret.== infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1A8DE9910();
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v35 = (char *)v34 - v11;
  v34[0] = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v10);
  int64_t v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  long long v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v20 = (char *)v34 - v19;
  uint64_t v21 = *a1;
  uint64_t v37 = a2;
  uint64_t v38 = a4;
  sub_1A8DE92B0();
  v34[1] = v8;
  uint64_t v22 = sub_1A8DE9840();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v20, v14);
  if (v22 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v34[0] + 16))(v13, v37, a3);
    uint64_t v31 = sub_1A8DE9520();
    unint64_t v33 = v32;
    swift_beginAccess();
    char v30 = sub_1A8DB8B5C(v21 + 32, v21 + 32 + *(void *)(v21 + 16), v31, v33);
    sub_1A8D8BD58(v31, v33);
    return v30 & 1;
  }
  v39[0] = v21;
  sub_1A8DE92B0();
  long long v24 = v35;
  sub_1A8DE9870();
  v23(v18, v14);
  uint64_t v25 = AssociatedTypeWitness;
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, AssociatedTypeWitness);
  if (result != 1)
  {
    unint64_t v28 = sub_1A8DAB4C8();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    char v30 = sub_1A8DCC05C(v39, v24, &type metadata for SharedSecret, v25, v28, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v25);
    return v30 & 1;
  }
  __break(1u);
  return result;
}

uint64_t SharedSecret.description.getter()
{
  uint64_t v1 = *v0;
  strcpy((char *)v9, "SharedSecret: ");
  HIBYTE(v9[1]) = -18;
  uint64_t result = swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  size_t v4 = 2 * v3;
  if (2 * v3 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  swift_retain();
  if (v4)
  {
    uint64_t v5 = sub_1A8DE97D0();
    *(void *)(v5 + 16) = v4;
    bzero((void *)(v5 + 32), v4);
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
  }
  uint64_t v7 = 0;
  uint64_t v8 = v5;
  uint64_t v6 = swift_retain();
  sub_1A8D96960(v6, &v8, &v7);
  swift_release();
  sub_1A8DE97C0();
  sub_1A8DE9650();
  swift_release();
  swift_bridgeObjectRelease_n();
  sub_1A8DE9680();
  swift_bridgeObjectRelease();
  return v9[0];
}

unint64_t sub_1A8DBE824()
{
  unint64_t result = qword_1E97A9460;
  if (!qword_1E97A9460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9460);
  }
  return result;
}

uint64_t dispatch thunk of DiffieHellmanKeyAgreement.publicKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DiffieHellmanKeyAgreement.sharedSecretFromKeyAgreement(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for SharedSecret()
{
  return &type metadata for SharedSecret;
}

uint64_t static Insecure.SHA1.blockByteCount.getter()
{
  return 64;
}

uint64_t static Insecure.SHA1.byteCount.getter()
{
  return 20;
}

uint64_t Insecure.SHA1.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DBE994(MEMORY[0x1E4F14710], &qword_1EB476660, a1);
}

uint64_t Insecure.SHA1.finalize()@<X0>(void *a1@<X8>)
{
  return sub_1A8DA80D4(a1);
}

uint64_t sub_1A8DBE91C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8D88B38(MEMORY[0x1E4F14710], &qword_1EB476660, a1);
}

uint64_t sub_1A8DBE940@<X0>(void *a1@<X8>)
{
  return sub_1A8DA80D4(a1);
}

uint64_t static Insecure.MD5.blockByteCount.getter()
{
  return 64;
}

uint64_t static Insecure.MD5.byteCount.getter()
{
  return 16;
}

uint64_t Insecure.MD5.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DBE994(MEMORY[0x1E4F146F0], qword_1EB4764E0, a1);
}

uint64_t sub_1A8DBE994@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a1();
  if (result)
  {
    uint64_t v6 = result;
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v7 = swift_allocObject();
    getDigestSizeForDigestInfo();
    uint64_t v8 = swift_slowAlloc();
    uint64_t result = ccdigest_init();
    *(void *)(v7 + 16) = v6;
    *(void *)(v7 + 24) = v8;
    *a3 = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Insecure.MD5.finalize()@<X0>(void *a1@<X8>)
{
  return sub_1A8D88A84(a1);
}

unint64_t sub_1A8DBEA40()
{
  unint64_t result = qword_1E97A9468;
  if (!qword_1E97A9468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9468);
  }
  return result;
}

unint64_t sub_1A8DBEA94(uint64_t a1)
{
  unint64_t result = sub_1A8DBEABC();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A8DBEABC()
{
  unint64_t result = qword_1EB476668;
  if (!qword_1EB476668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476668);
  }
  return result;
}

unint64_t sub_1A8DBEB14()
{
  unint64_t result = qword_1E97A9470;
  if (!qword_1E97A9470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9470);
  }
  return result;
}

unint64_t sub_1A8DBEB6C()
{
  unint64_t result = qword_1E97A9478;
  if (!qword_1E97A9478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9478);
  }
  return result;
}

unint64_t sub_1A8DBEBC4()
{
  unint64_t result = qword_1E97A9480[0];
  if (!qword_1E97A9480[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E97A9480);
  }
  return result;
}

ValueMetadata *type metadata accessor for Insecure.SHA1()
{
  return &type metadata for Insecure.SHA1;
}

uint64_t type metadata accessor for CoreCryptoDigestImpl()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Curve25519.KeyAgreement.PublicKey.init<A>(_:kem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v10 == 3)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a2);
    Curve25519.KeyAgreement.PublicKey.init<A>(rawRepresentation:)((uint64_t)v9, a2, &v14);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
    if (!v3) {
      *a3 = v14;
    }
  }
  else
  {
    sub_1A8D8BDB0();
    swift_allocError();
    *uint64_t v12 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  }
  return result;
}

uint64_t Curve25519.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(unsigned char *a1)
{
  if (*a1 == 3)
  {
    uint64_t v1 = sub_1A8DE97C0();
    uint64_t v2 = sub_1A8D93118(v1);
    swift_bridgeObjectRelease();
    return v2;
  }
  else
  {
    sub_1A8D8BDB0();
    swift_allocError();
    *size_t v4 = 1;
    return swift_willThrow();
  }
}

uint64_t sub_1A8DBEE48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  return Curve25519.KeyAgreement.PublicKey.init<A>(_:kem:)(a1, a2, a3);
}

uint64_t sub_1A8DBEE74(unsigned char *a1)
{
  if (*a1 == 3)
  {
    uint64_t v1 = sub_1A8DE97C0();
    uint64_t v2 = sub_1A8D93118(v1);
    swift_bridgeObjectRelease();
    return v2;
  }
  else
  {
    sub_1A8D8BDB0();
    swift_allocError();
    *size_t v4 = 1;
    return swift_willThrow();
  }
}

_UNKNOWN **sub_1A8DBEF08()
{
  return &protocol witness table for Curve25519.KeyAgreement.PublicKey;
}

_UNKNOWN **sub_1A8DBEF14()
{
  return &protocol witness table for Curve25519.KeyAgreement.PrivateKey;
}

uint64_t MessageAuthenticationCode.makeIterator()()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476938);
  sub_1A8DE9390();
  return v1;
}

uint64_t static MessageAuthenticationCode.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A8DCC05C(a1, a2, a3, a3, *(void *)(a4 + 8), *(void *)(a4 + 8));
}

uint64_t MessageAuthenticationCode.description.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1A8DE9C30();
  uint64_t v16 = v6;
  sub_1A8DE9680();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  uint64_t result = sub_1A8DE97E0();
  uint64_t v8 = *(void *)(result + 16);
  if (v8 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  size_t v9 = 2 * v8;
  if (2 * v8 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  if (v8)
  {
    uint64_t v11 = sub_1A8DE97D0();
    *(void *)(v11 + 16) = v9;
    bzero((void *)(v11 + 32), v9);
  }
  else
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = 0;
  uint64_t v14 = v11;
  sub_1A8DE97C0();
  sub_1A8D96AEC(v10, &v14, &v13);
  swift_bridgeObjectRelease();
  sub_1A8DE97C0();
  sub_1A8DE9650();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A8DE9680();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t static MessageAuthenticationCode.== infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = a3;
  uint64_t v41 = a5;
  uint64_t v42 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1A8DE9910();
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v39 = (char *)&v36 - v11;
  uint64_t v37 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  long long v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v20 = (char *)&v36 - v19;
  uint64_t v43 = a6;
  sub_1A8DE92B0();
  uint64_t v21 = sub_1A8DE9840();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v20, v14);
  if (v21 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v13, a2, a4);
    uint64_t v33 = sub_1A8DE9520();
    unint64_t v35 = v34;
    v44[0] = v33;
    v44[1] = v34;
    char v32 = sub_1A8DCC05C(v42, v44, v40, MEMORY[0x1E4F277C0], *(void *)(v41 + 8), MEMORY[0x1E4F277B0]);
    sub_1A8D8BD58(v33, v35);
    return v32 & 1;
  }
  uint64_t v23 = v41;
  uint64_t v24 = v42;
  sub_1A8DE92B0();
  uint64_t v25 = v39;
  sub_1A8DE9870();
  v22(v18, v14);
  uint64_t v26 = AssociatedTypeWitness;
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, AssociatedTypeWitness);
  if (result != 1)
  {
    uint64_t v29 = *(void *)(v23 + 8);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v31 = v39;
    char v32 = sub_1A8DCC05C(v24, v39, v40, v26, v29, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v26);
    return v32 & 1;
  }
  __break(1u);
  return result;
}

void *sub_1A8DBF564@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1) {
    int64_t v4 = a2 - (void)a1;
  }
  else {
    int64_t v4 = 0;
  }
  uint64_t result = sub_1A8D9BA84(a1, v4);
  *a3 = result;
  a3[1] = 0;
  return result;
}

uint64_t dispatch thunk of MessageAuthenticationCode.byteCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t CryptoKitError.hash(into:)()
{
  if (*(unsigned char *)(v0 + 4) == 1) {
    return sub_1A8DE9BF0();
  }
  sub_1A8DE9BF0();
  return sub_1A8DE9C10();
}

uint64_t CryptoKitError.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 4);
  sub_1A8DE9BD0();
  sub_1A8DE9BF0();
  if (v1 != 1) {
    sub_1A8DE9C10();
  }
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DBF75C()
{
  if (*(unsigned char *)(v0 + 4) == 1) {
    return sub_1A8DE9BF0();
  }
  sub_1A8DE9BF0();
  return sub_1A8DE9C10();
}

uint64_t sub_1A8DBF810()
{
  int v1 = *(unsigned __int8 *)(v0 + 4);
  sub_1A8DE9BD0();
  sub_1A8DE9BF0();
  if (v1 != 1) {
    sub_1A8DE9C10();
  }
  return sub_1A8DE9C20();
}

BOOL static CryptoKitASN1Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CryptoKitASN1Error.hash(into:)()
{
  return sub_1A8DE9BF0();
}

uint64_t CryptoKitASN1Error.hashValue.getter()
{
  return sub_1A8DE9C20();
}

BOOL _s9CryptoKit0aB5ErrorO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)a2;
  char v3 = *(unsigned char *)(a2 + 4);
  if (*(unsigned char *)(a1 + 4) == 1)
  {
    switch(*(_DWORD *)a1)
    {
      case 1:
        if (v2 != 1) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 2:
        if (v2 != 2) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 3:
        if (v2 != 3) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 4:
        if (v2 != 4) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 5:
        if (v2 <= 4) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      default:
        if (v2) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
    }
  }
  else
  {
    return (*(unsigned char *)(a2 + 4) & 1) == 0 && *(_DWORD *)a1 == v2;
  }
  return result;
}

unint64_t sub_1A8DBFA60()
{
  unint64_t result = qword_1E97A9508;
  if (!qword_1E97A9508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9508);
  }
  return result;
}

unint64_t sub_1A8DBFAB8()
{
  unint64_t result = qword_1E97A9510;
  if (!qword_1E97A9510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9510);
  }
  return result;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CryptoKitError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CryptoKitError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

uint64_t sub_1A8DBFB6C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1A8DBFB88(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)unint64_t result = a2 - 1;
    *(unsigned char *)(result + 4) = 1;
  }
  else
  {
    *(unsigned char *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoKitError()
{
  return &type metadata for CryptoKitError;
}

uint64_t getEnumTagSinglePayload for CryptoKitASN1Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CryptoKitASN1Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A8DBFD14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoKitASN1Error()
{
  return &type metadata for CryptoKitASN1Error;
}

uint64_t Curve25519.KeyAgreement.PublicKey.rawRepresentation.getter()
{
  uint64_t v0 = sub_1A8DE97C0();
  uint64_t v1 = sub_1A8D93118(v0);
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t sub_1A8DBFD98@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1A8D9C130(0x20uLL);
  *a1 = result;
  return result;
}

unint64_t Curve25519.KeyAgreement.PrivateKey.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1A8D9C130(0x20uLL);
  *a1 = result;
  return result;
}

uint64_t Curve25519.KeyAgreement.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_1A8DCE544();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

size_t Curve25519.KeyAgreement.PrivateKey.publicKey.getter@<X0>(size_t *a1@<X8>)
{
  size_t result = sub_1A8DCF2E0();
  *a1 = result;
  return result;
}

uint64_t Curve25519.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_1A8DCE4C8();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t Curve25519.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *v2;
  swift_retain();
  sub_1A8DE97C0();
  unint64_t v7 = sub_1A8D9C2D4(0x20uLL, v6, v5);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3) {
    *a2 = v7;
  }
  return result;
}

uint64_t Curve25519.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = sub_1A8D9BD98(v0);
  swift_release();
  return v1;
}

size_t sub_1A8DC000C@<X0>(size_t *a1@<X8>)
{
  size_t result = sub_1A8DCF2E0();
  *a1 = result;
  return result;
}

uint64_t sub_1A8DC0038@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *v2;
  swift_retain();
  sub_1A8DE97C0();
  unint64_t v7 = sub_1A8D9C2D4(0x20uLL, v6, v5);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3) {
    *a2 = v7;
  }
  return result;
}

ValueMetadata *type metadata accessor for Curve25519.KeyAgreement()
{
  return &type metadata for Curve25519.KeyAgreement;
}

ValueMetadata *type metadata accessor for Curve25519.KeyAgreement.PublicKey()
{
  return &type metadata for Curve25519.KeyAgreement.PublicKey;
}

ValueMetadata *type metadata accessor for Curve25519.KeyAgreement.PrivateKey()
{
  return &type metadata for Curve25519.KeyAgreement.PrivateKey;
}

uint64_t sub_1A8DC00E4()
{
  uint64_t result = sub_1A8D918C0(0x636573uLL, 0xE300000000000000);
  qword_1E97A9518 = result;
  unk_1E97A9520 = v1;
  return result;
}

uint64_t HPKE.Sender.encapsulatedKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  sub_1A8D8BE04(v1, *(void *)(v0 + 72));
  return v1;
}

uint64_t HPKE.Sender.exportSecret<A>(context:outputByteCount:)@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  if (a1 < 1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = a1;
    unint64_t v7 = a2;
    uint64_t v4 = *(char *)(v2 + 40);
    uint64_t v5 = *(unsigned __int8 *)(v2 + 41);
    uint64_t v6 = *(char *)(v2 + 42);
    uint64_t v28 = *(void *)(v2 + 32);
    uint64_t v8 = qword_1E97A8C60;
    swift_retain();
    if (v8 == -1)
    {
      if (!(v3 >> 16)) {
        goto LABEL_4;
      }
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
  }
  swift_once();
  if (v3 >> 16) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v25 = v7;
  if (qword_1E97A8C40 != -1) {
LABEL_9:
  }
    swift_once();
  uint64_t v26 = qword_1E97A8FF0;
  unint64_t v27 = *(void *)algn_1E97A8FF8;
  uint64_t v9 = qword_1A8DED090[v4];
  sub_1A8D8BE04(qword_1E97A8FF0, *(unint64_t *)algn_1E97A8FF8);
  sub_1A8DB8584(v9, 2);
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  sub_1A8DE94F0();
  sub_1A8D8BD58(v11, v13);
  sub_1A8DB8584(v5 + 1, 2);
  uint64_t v15 = v14;
  unint64_t v17 = v16;
  sub_1A8DE94F0();
  sub_1A8D8BD58(v15, v17);
  sub_1A8DB8584(qword_1A8DED0B0[v6], 2);
  uint64_t v19 = v18;
  unint64_t v21 = v20;
  sub_1A8DE94F0();
  sub_1A8D8BD58(v19, v21);
  uint64_t v22 = v26;
  unint64_t v23 = v27;
  LOBYTE(v26) = v5;
  sub_1A8DC2824(&v28, v3, (unsigned __int8 *)&v26, v25);
  sub_1A8D8BD58(v22, v23);
  return swift_release();
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v17 = *((unsigned char *)v16 + 2);
  __int16 v34 = *v16;
  char v35 = v17;
  uint64_t v27 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v18);
  sub_1A8DA8648((char *)&v34, 0, &v27, 0, 0xF000000000000000, (uint64_t)v15, a2, a3, v28, a4, a5);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, a4);
  if (!v6)
  {
    uint64_t v20 = v29;
    __int16 v21 = v30;
    char v22 = v31;
    uint64_t v23 = v32;
    unint64_t v24 = v33;
    long long v25 = v28[1];
    *(_OWORD *)a6 = v28[0];
    *(_OWORD *)(a6 + 16) = v25;
    *(void *)(a6 + 32) = v20;
    *(_WORD *)(a6 + 40) = v21;
    *(unsigned char *)(a6 + 42) = v22;
    *(void *)(a6 + 48) = v23;
    *(void *)(a6 + 56) = v24;
    *(void *)(a6 + 64) = v23;
    *(void *)(a6 + 72) = v24;
    return sub_1A8D8BE04(v23, v24);
  }
  return result;
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:presharedKey:presharedKeyIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X5>, unint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  unint64_t v31 = a5;
  uint64_t v14 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v18 = *((unsigned char *)v17 + 2);
  uint64_t v20 = *v19;
  __int16 v40 = *v17;
  char v41 = v18;
  uint64_t v33 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v21);
  uint64_t v22 = v32;
  sub_1A8DA8648((char *)&v40, 1u, &v33, a4, v31, (uint64_t)v16, a2, a3, v34, a6, a8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a6);
  if (!v22)
  {
    uint64_t v24 = v35;
    __int16 v25 = v36;
    char v26 = v37;
    uint64_t v27 = v38;
    unint64_t v28 = v39;
    long long v29 = v34[1];
    *(_OWORD *)a7 = v34[0];
    *(_OWORD *)(a7 + 16) = v29;
    *(void *)(a7 + 32) = v24;
    *(_WORD *)(a7 + 40) = v25;
    *(unsigned char *)(a7 + 42) = v26;
    *(void *)(a7 + 48) = v27;
    *(void *)(a7 + 56) = v28;
    *(void *)(a7 + 64) = v27;
    *(void *)(a7 + 72) = v28;
    return sub_1A8D8BE04(v27, v28);
  }
  return result;
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:authenticatedBy:)@<X0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  unint64_t v32 = a4;
  uint64_t v30 = a7;
  uint64_t v31 = a3;
  long long v29 = a8;
  uint64_t v12 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v18 = (char *)&v29 - v17;
  char v19 = *((unsigned char *)a2 + 2);
  __int16 v41 = *a2;
  char v42 = v19;
  uint64_t v34 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v29 - v17, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a5, a6);
  uint64_t v20 = v33;
  sub_1A8DA8A6C((char *)&v41, 2u, &v34, 0, 0xF000000000000000, (uint64_t)v18, v31, v32, (size_t *)v35, (size_t)v14, a6, v30);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a5, a6);
  if (v20) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, AssociatedTypeWitness);
  }
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, AssociatedTypeWitness);
  uint64_t v22 = v36;
  __int16 v23 = v37;
  char v24 = v38;
  uint64_t v25 = v39;
  unint64_t v26 = v40;
  long long v27 = v35[1];
  unint64_t v28 = v29;
  *long long v29 = v35[0];
  v28[1] = v27;
  *((void *)v28 + 4) = v22;
  *((_WORD *)v28 + 20) = v23;
  *((unsigned char *)v28 + 42) = v24;
  *((void *)v28 + 6) = v25;
  *((void *)v28 + 7) = v26;
  *((void *)v28 + 8) = v25;
  *((void *)v28 + 9) = v26;
  return sub_1A8D8BE04(v25, v26);
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:authenticatedBy:presharedKey:presharedKeyIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  unint64_t v39 = a8;
  uint64_t v37 = a7;
  unint64_t v38 = a4;
  uint64_t v35 = a6;
  uint64_t v36 = a3;
  uint64_t v33 = a9;
  uint64_t v34 = a1;
  uint64_t v13 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v19 = (char *)&v32 - v18;
  LOWORD(v18) = *(_WORD *)a2;
  char v20 = *(unsigned char *)(a2 + 2);
  uint64_t v21 = v34;
  uint64_t v22 = *v35;
  __int16 v48 = v18;
  char v49 = v20;
  uint64_t v41 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v34, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a5, a10);
  uint64_t v23 = v40;
  sub_1A8DA8A6C((char *)&v48, 3u, &v41, v37, v39, (uint64_t)v19, v36, v38, (size_t *)v42, (size_t)v15, a10, a11);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a5, a10);
  if (v23) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v21, AssociatedTypeWitness);
  }
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, AssociatedTypeWitness);
  uint64_t v25 = v43;
  __int16 v26 = v44;
  char v27 = v45;
  uint64_t v28 = v46;
  unint64_t v29 = v47;
  long long v30 = v42[1];
  uint64_t v31 = v33;
  *uint64_t v33 = v42[0];
  v31[1] = v30;
  *((void *)v31 + 4) = v25;
  *((_WORD *)v31 + 20) = v26;
  *((unsigned char *)v31 + 42) = v27;
  *((void *)v31 + 6) = v28;
  *((void *)v31 + 7) = v29;
  *((void *)v31 + 8) = v28;
  *((void *)v31 + 9) = v29;
  return sub_1A8D8BE04(v28, v29);
}

uint64_t HPKE.Sender.seal<A, B>(_:authenticating:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1A8D8B7A0(a1, a2, a3, a4, a5, a6);
}

uint64_t HPKE.Sender.seal<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v8 = xmmword_1A8DEAA40;
  unint64_t v6 = sub_1A8D9E548();
  return sub_1A8D8B7A0(a1, (uint64_t)&v8, a2, MEMORY[0x1E4F277C0], a3, v6);
}

uint64_t HPKE.Recipient.exportSecret<A>(context:outputByteCount:)@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  if (a1 < 1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = a1;
    unint64_t v7 = a2;
    uint64_t v4 = *(char *)(v2 + 40);
    uint64_t v5 = *(unsigned __int8 *)(v2 + 41);
    uint64_t v6 = *(char *)(v2 + 42);
    uint64_t v26 = *(void *)(v2 + 32);
    uint64_t v8 = qword_1E97A8C60;
    swift_retain();
    if (v8 == -1)
    {
      if (!(v3 >> 16)) {
        goto LABEL_4;
      }
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
  }
  swift_once();
  if (v3 >> 16) {
    goto LABEL_8;
  }
LABEL_4:
  char v24 = v7;
  if (qword_1E97A8C40 != -1) {
LABEL_9:
  }
    swift_once();
  long long v25 = xmmword_1E97A8FF0;
  uint64_t v9 = qword_1A8DED090[v4];
  sub_1A8D8BE04(xmmword_1E97A8FF0, *((unint64_t *)&xmmword_1E97A8FF0 + 1));
  sub_1A8DB8584(v9, 2);
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  sub_1A8DE94F0();
  sub_1A8D8BD58(v11, v13);
  sub_1A8DB8584(v5 + 1, 2);
  uint64_t v15 = v14;
  unint64_t v17 = v16;
  sub_1A8DE94F0();
  sub_1A8D8BD58(v15, v17);
  sub_1A8DB8584(qword_1A8DED0B0[v6], 2);
  uint64_t v19 = v18;
  unint64_t v21 = v20;
  sub_1A8DE94F0();
  sub_1A8D8BD58(v19, v21);
  long long v22 = v25;
  LOBYTE(v25) = v5;
  sub_1A8DC2824(&v26, v3, (unsigned __int8 *)&v25, v24);
  sub_1A8D8BD58(v22, *((unint64_t *)&v22 + 1));
  return swift_release();
}

double HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)@<D0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v33 = a6;
  unint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v30 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_1A8DE9910();
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v30 - v17;
  uint64_t v19 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](v16);
  unint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v22 = *((unsigned char *)a2 + 2);
  __int16 v41 = *a2;
  char v42 = v22;
  uint64_t v35 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, a7);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v18, 1, 1, AssociatedTypeWitness);
  uint64_t v23 = v34;
  sub_1A8DA9244((unsigned __int8 *)&v41, 0, v32, v33, &v35, 0, 0xF000000000000000, (size_t)v21, (size_t *)v36, v30, v31, v18, a7, a8);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a1, a7);
  if (!v23)
  {
    uint64_t v25 = v37;
    __int16 v26 = v38;
    char v27 = v39;
    double result = *(double *)v36;
    long long v28 = v36[1];
    long long v29 = v40;
    *(_OWORD *)a9 = v36[0];
    *(_OWORD *)(a9 + 16) = v28;
    *(void *)(a9 + 32) = v25;
    *(_WORD *)(a9 + 40) = v26;
    *(unsigned char *)(a9 + 42) = v27;
    *(_OWORD *)(a9 + 48) = v29;
  }
  return result;
}

double HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:presharedKey:presharedKeyIdentifier:)@<D0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, unint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v40 = a8;
  uint64_t v38 = a5;
  unint64_t v39 = a6;
  uint64_t v35 = a3;
  unint64_t v36 = a4;
  uint64_t v34 = a9;
  unint64_t v37 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = sub_1A8DE9910();
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v19 = (char *)&v33 - v18;
  uint64_t v20 = *(void *)(a11 - 8);
  MEMORY[0x1F4188790](v17);
  char v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v23 = *((unsigned char *)a2 + 2);
  uint64_t v24 = *a7;
  __int16 v48 = *a2;
  char v49 = v23;
  uint64_t v42 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, a11);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v19, 1, 1, AssociatedTypeWitness);
  uint64_t v25 = v41;
  sub_1A8DA9244((unsigned __int8 *)&v48, 1u, v38, v39, &v42, v40, v37, (size_t)v22, (size_t *)v43, v35, v36, v19, a11, a12);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, a11);
  if (!v25)
  {
    uint64_t v27 = v44;
    __int16 v28 = v45;
    char v29 = v46;
    double result = *(double *)v43;
    long long v30 = v43[1];
    long long v31 = v47;
    uint64_t v32 = v34;
    *uint64_t v34 = v43[0];
    v32[1] = v30;
    *((void *)v32 + 4) = v27;
    *((_WORD *)v32 + 20) = v28;
    *((unsigned char *)v32 + 42) = v29;
    v32[3] = v31;
  }
  return result;
}

double HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:authenticatedBy:)@<D0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10)
{
  unint64_t v36 = a6;
  unint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v32 = a9;
  uint64_t v33 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_1A8DE9910();
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v32 - v17;
  uint64_t v19 = *(void *)(a8 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v22 = *((unsigned char *)a2 + 2);
  __int16 v45 = *a2;
  char v46 = v22;
  uint64_t v38 = a1;
  uint64_t v39 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, a8);
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v23 + 16))(v18, a7, AssociatedTypeWitness);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v23 + 56))(v18, 0, 1, AssociatedTypeWitness);
  uint64_t v24 = v37;
  sub_1A8DA9244((unsigned __int8 *)&v45, 2u, v35, v36, &v39, 0, 0xF000000000000000, (size_t)v21, (size_t *)v40, v33, v34, v18, a8, a10);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a7, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v38, a8);
  if (!v24)
  {
    uint64_t v26 = v41;
    __int16 v27 = v42;
    char v28 = v43;
    double result = *(double *)v40;
    long long v29 = v40[1];
    long long v30 = v44;
    long long v31 = v32;
    _OWORD *v32 = v40[0];
    v31[1] = v29;
    *((void *)v31 + 4) = v26;
    *((_WORD *)v31 + 20) = v27;
    *((unsigned char *)v31 + 42) = v28;
    v31[3] = v30;
  }
  return result;
}

double HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:authenticatedBy:presharedKey:presharedKeyIdentifier:)@<D0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v45 = a6;
  uint64_t v38 = a9;
  uint64_t v39 = a7;
  unint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v41 = a10;
  uint64_t v42 = a3;
  unint64_t v40 = a11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = sub_1A8DE9910();
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v20 = (char *)&v37 - v19;
  uint64_t v21 = *(void *)(a12 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v24 = *((unsigned char *)a2 + 2);
  uint64_t v25 = *a8;
  __int16 v54 = *a2;
  char v55 = v24;
  uint64_t v47 = a1;
  uint64_t v48 = v25;
  uint64_t v26 = a1;
  uint64_t v27 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v26, a12);
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v28 + 16))(v20, v27, AssociatedTypeWitness);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v20, 0, 1, AssociatedTypeWitness);
  uint64_t v29 = v46;
  sub_1A8DA9244((unsigned __int8 *)&v54, 3u, v44, v45, &v48, v41, v40, (size_t)v23, (size_t *)v49, v42, v43, v20, a12, a13);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v47, a12);
  if (!v29)
  {
    uint64_t v31 = v50;
    __int16 v32 = v51;
    char v33 = v52;
    double result = *(double *)v49;
    long long v34 = v49[1];
    long long v35 = v53;
    unint64_t v36 = v38;
    _OWORD *v38 = v49[0];
    v36[1] = v34;
    *((void *)v36 + 4) = v31;
    *((_WORD *)v36 + 20) = v32;
    *((unsigned char *)v36 + 42) = v33;
    v36[3] = v35;
  }
  return result;
}

uint64_t HPKE.Recipient.open<A, B>(_:authenticating:)(void (*a1)(void, void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1A8D8BB48(a1, a2, a3, a4, a5, a6);
}

uint64_t HPKE.Recipient.open<A>(_:)(void (*a1)(void, void), uint64_t a2, uint64_t a3)
{
  long long v8 = xmmword_1A8DEAA40;
  unint64_t v6 = sub_1A8D9E548();
  return sub_1A8D8BB48(a1, (uint64_t)&v8, a2, MEMORY[0x1E4F277C0], a3, v6);
}

ValueMetadata *type metadata accessor for HPKE()
{
  return &type metadata for HPKE;
}

uint64_t destroy for HPKE.Sender(void *a1)
{
  swift_release();
  unint64_t v2 = a1[3];
  if (v2 >> 60 != 15) {
    sub_1A8D8BD58(a1[2], v2);
  }
  swift_release();
  sub_1A8D8BD58(a1[6], a1[7]);
  uint64_t v3 = a1[8];
  unint64_t v4 = a1[9];

  return sub_1A8D8BD58(v3, v4);
}

uint64_t initializeWithCopy for HPKE.Sender(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = (_OWORD *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  swift_retain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    uint64_t v7 = *(void *)v5;
    sub_1A8D8BE04(v7, v6);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v6;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  uint64_t v8 = *(void *)(a2 + 48);
  unint64_t v9 = *(void *)(a2 + 56);
  swift_retain();
  sub_1A8D8BE04(v8, v9);
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  uint64_t v11 = *(void *)(a2 + 64);
  unint64_t v10 = *(void *)(a2 + 72);
  sub_1A8D8BE04(v11, v10);
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v10;
  return a1;
}

uint64_t assignWithCopy for HPKE.Sender(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_1A8D8BE04(*v4, *(void *)(a2 + 24));
      uint64_t v8 = *(void *)(a1 + 16);
      unint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v5;
      sub_1A8D8BD58(v8, v9);
      goto LABEL_8;
    }
    sub_1A8D8C404(a1 + 16);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  sub_1A8D8BE04(*v4, *(void *)(a2 + 24));
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
LABEL_8:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  uint64_t v10 = *(void *)(a2 + 48);
  unint64_t v11 = *(void *)(a2 + 56);
  sub_1A8D8BE04(v10, v11);
  uint64_t v12 = *(void *)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  sub_1A8D8BD58(v12, v13);
  uint64_t v15 = *(void *)(a2 + 64);
  unint64_t v14 = *(void *)(a2 + 72);
  sub_1A8D8BE04(v15, v14);
  uint64_t v16 = *(void *)(a1 + 64);
  unint64_t v17 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v15;
  *(void *)(a1 + 72) = v14;
  sub_1A8D8BD58(v16, v17);
  return a1;
}

uint64_t assignWithTake for HPKE.Sender(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  unint64_t v5 = (void *)(a2 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v5;
      *(void *)(a1 + 24) = v7;
      sub_1A8D8BD58(v8, v6);
      goto LABEL_6;
    }
    sub_1A8D8C404(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
LABEL_6:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  uint64_t v9 = *(void *)(a1 + 48);
  unint64_t v10 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_1A8D8BD58(v9, v10);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_1A8D8BD58(v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for HPKE.Sender(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HPKE.Sender(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKE.Sender()
{
  return &type metadata for HPKE.Sender;
}

ValueMetadata *type metadata accessor for HPKE.Recipient()
{
  return &type metadata for HPKE.Recipient;
}

ValueMetadata *_s31CoreCryptoCurve448PublicKeyImplVMa()
{
  return &_s31CoreCryptoCurve448PublicKeyImplVN;
}

ValueMetadata *_s32CoreCryptoCurve448PrivateKeyImplVMa()
{
  return &_s32CoreCryptoCurve448PrivateKeyImplVN;
}

size_t sub_1A8DC1C90()
{
  uint64_t v0 = sub_1A8DE97D0();
  *(void *)(v0 + 16) = 57;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 73) = 0u;
  if (!ccrng()) {
LABEL_5:
  }
    __break(1u);
  if (cced448_make_pub())
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v1 = sub_1A8DE97C0();
  size_t v2 = sub_1A8DC1F70(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1A8DC1D9C(void *a1, void *a2, char **a3)
{
  if (!ccrng()) {
    goto LABEL_8;
  }
  if (!*a1) {
    goto LABEL_9;
  }
  unint64_t v6 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v6 = sub_1A8D96298(0, *((void *)v6 + 2), 0, v6);
  }
  *a3 = v6;
  uint64_t result = cced448_make_key_pair();
  if (result)
  {
    __break(1u);
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  *a2 = 57;
  return result;
}

uint64_t sub_1A8DC1E90(uint64_t result, uint64_t a2)
{
  if (!result || a2 - result != 57)
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

size_t sub_1A8DC1EF8@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  if (a1 && a2 - a1 == 57)
  {
    size_t result = sub_1A8D891D0(a1, a2);
    *a3 = result;
  }
  else
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

size_t sub_1A8DC1F70(uint64_t a1)
{
  if (*(void *)(a1 + 16) == 57) {
    return sub_1A8D891D0(a1 + 32, a1 + 89);
  }
  sub_1A8D8E240();
  swift_allocError();
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_1A8DC1FE8()
{
  uint64_t result = sub_1A8DE9390();
  if (!v0) {
    return sub_1A8D9BD24();
  }
  return result;
}

uint64_t sub_1A8DC2064()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
  uint64_t result = sub_1A8DE9390();
  if (!v0) {
    return v2;
  }
  return result;
}

int64_t sub_1A8DC20E8@<X0>(int64_t result@<X0>, unint64_t a2@<X1>, char a3@<W3>, uint64_t *a4@<X8>)
{
  unint64_t v4 = a2;
  uint64_t v5 = result;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
LABEL_5:
    sub_1A8D8BE04(result, a2);
    sub_1A8DADB28(v5, v4);
    swift_beginAccess();
    uint64_t v13 = swift_retain();
    sub_1A8DD6A6C(v13, &v41);
    uint64_t v14 = sub_1A8DE9790();
    sub_1A8DAFA80(v14, v15);
    uint64_t v16 = v41;
    sub_1A8D88D94((uint64_t)&v42);
    uint64_t v40 = v16;
    long long v30 = v42;
    long long v31 = v43;
    swift_retain();
    sub_1A8DAFA80((uint64_t)&v30, (uint64_t)&v32);
    swift_retain();
    sub_1A8D88D94((uint64_t)&v35);
    swift_release();
    swift_release();
    swift_release_n();
    long long v28 = v35;
    long long v17 = v36;
    swift_release();
    sub_1A8D8BD58(v5, v4);
    type metadata accessor for SecureBytes.Backing();
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1A8DED130;
    unint64_t v4 = v12 + 16;
    _swift_stdlib_malloc_size((const void *)v12);
    *(_OWORD *)(v12 + 32) = v28;
    *(_OWORD *)(v12 + 48) = v17;
    swift_beginAccess();
    *(void *)(v12 + 16) = 32;
    uint64_t result = _swift_stdlib_malloc_size((const void *)v12);
    if (result >= 64) {
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_7;
  }
  if (a3 == 1)
  {
    sub_1A8D8BE04(result, a2);
    sub_1A8DADB28(v5, v4);
    swift_beginAccess();
    uint64_t v7 = swift_retain();
    sub_1A8DD66C4(v7, &v41);
    uint64_t v8 = sub_1A8DE9790();
    sub_1A8DAFA74(v8, v9);
    uint64_t v10 = v41;
    sub_1A8DA8030((uint64_t)&v42);
    uint64_t v40 = v10;
    long long v30 = v42;
    long long v31 = v43;
    long long v32 = v44;
    swift_retain();
    sub_1A8DAFA74((uint64_t)&v30, (uint64_t)&v33);
    swift_retain();
    sub_1A8DA8030((uint64_t)&v35);
    swift_release();
    swift_release();
    swift_release_n();
    long long v25 = v36;
    long long v27 = v35;
    long long v11 = v37;
    swift_release();
    sub_1A8D8BD58(v5, v4);
    type metadata accessor for SecureBytes.Backing();
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1A8DED120;
    unint64_t v4 = v12 + 16;
    _swift_stdlib_malloc_size((const void *)v12);
    *(_OWORD *)(v12 + 32) = v27;
    *(_OWORD *)(v12 + 48) = v25;
    *(_OWORD *)(v12 + 64) = v11;
    swift_beginAccess();
    *(void *)(v12 + 16) = 48;
    uint64_t result = _swift_stdlib_malloc_size((const void *)v12);
    if (result >= 80) {
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_5;
  }
LABEL_7:
  sub_1A8D8BE04(result, a2);
  sub_1A8DADB28(v5, v4);
  swift_beginAccess();
  uint64_t v18 = swift_retain();
  sub_1A8DD667C(v18, &v41);
  uint64_t v19 = sub_1A8DE9790();
  sub_1A8DAFA68(v19, v20);
  uint64_t v21 = v41;
  sub_1A8D889A4(&v42);
  uint64_t v40 = v21;
  long long v30 = v42;
  long long v31 = v43;
  long long v32 = v44;
  long long v33 = v45;
  swift_retain();
  sub_1A8DAFA68((uint64_t)&v30, (uint64_t)&v34);
  swift_retain();
  sub_1A8D889A4(&v35);
  swift_release();
  swift_release();
  swift_release_n();
  long long v26 = v36;
  long long v29 = v35;
  long long v24 = v37;
  uint64_t v22 = v38;
  uint64_t v23 = v39;
  swift_release();
  sub_1A8D8BD58(v5, v4);
  type metadata accessor for SecureBytes.Backing();
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1A8DED120;
  _swift_stdlib_malloc_size((const void *)v12);
  *(_OWORD *)(v12 + 32) = v29;
  *(_OWORD *)(v12 + 48) = v26;
  *(_OWORD *)(v12 + 64) = v24;
  *(void *)(v12 + 80) = v22;
  *(void *)(v12 + 88) = v23;
  swift_beginAccess();
  *(void *)(v12 + 16) = 64;
  uint64_t result = _swift_stdlib_malloc_size((const void *)v12);
  if (result < 96) {
    __break(1u);
  }
LABEL_8:
  *a4 = v12;
  return result;
}

BOOL sub_1A8DC259C(uint64_t a1)
{
  sub_1A8DC2D5C(a1, (uint64_t)&v7);
  uint64_t v1 = v8;
  if (v8)
  {
    sub_1A8D934C8(&v7, (uint64_t)v6);
    sub_1A8D8C154((uint64_t)v6, (uint64_t)v5);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v5[3]);
    sub_1A8DE9390();
    uint64_t v2 = v9;
    unint64_t v3 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    sub_1A8DE94F0();
    sub_1A8D8BD58(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  return v1 == 0;
}

uint64_t sub_1A8DC2684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, unint64_t a3@<X4>, unsigned __int16 a4@<W5>, size_t *a5@<X8>, char a6)
{
  uint64_t v9 = a4;
  sub_1A8DB8584(a4, 2);
  uint64_t v18 = v10;
  unint64_t v19 = v11;
  if (qword_1E97A8C68 != -1) {
    swift_once();
  }
  sub_1A8DE94F0();
  sub_1A8DE94F0();
  sub_1A8DE94F0();
  sub_1A8DBB13C(a2, a3);
  uint64_t v13 = v18;
  unint64_t v12 = v19;
  if (a6)
  {
    sub_1A8D8BE04(v18, v19);
    if (a6 == 1) {
      sub_1A8DD46BC(a1, v18, v19, v9, (int64_t)&v17);
    }
    else {
      sub_1A8DD4D08(a1, v18, v19, v9, (int64_t)&v17);
    }
  }
  else
  {
    sub_1A8D8BE04(v18, v19);
    sub_1A8DD40C8(a1, v18, v19, v9, (int64_t)&v17);
  }
  size_t v14 = sub_1A8DADA24(v17);
  swift_release();
  sub_1A8D8BD58(v13, v12);
  uint64_t result = sub_1A8D8BD58(v13, v12);
  *a5 = v14;
  return result;
}

uint64_t sub_1A8DC2824@<X0>(uint64_t *a1@<X0>, unsigned __int16 a2@<W4>, unsigned __int8 *a3@<X7>, size_t *a4@<X8>)
{
  uint64_t v12 = *a1;
  int v4 = *a3;
  uint64_t v5 = a2;
  sub_1A8DB8584(a2, 2);
  uint64_t v15 = v6;
  unint64_t v16 = v7;
  if (qword_1E97A8C68 != -1) {
    swift_once();
  }
  sub_1A8DE94F0();
  sub_1A8DE94F0();
  sub_1A8DE94F0();
  sub_1A8DE94E0();
  uint64_t v9 = v15;
  unint64_t v8 = v16;
  if (v4)
  {
    sub_1A8D8BE04(v15, v16);
    if (v4 == 1) {
      sub_1A8DD46BC(v12, v15, v16, v5, (int64_t)&v14);
    }
    else {
      sub_1A8DD4D08(v12, v15, v16, v5, (int64_t)&v14);
    }
  }
  else
  {
    sub_1A8D8BE04(v15, v16);
    sub_1A8DD40C8(v12, v15, v16, v5, (int64_t)&v14);
  }
  size_t v10 = sub_1A8DADA24(v14);
  swift_release();
  sub_1A8D8BD58(v9, v8);
  uint64_t result = sub_1A8D8BD58(v9, v8);
  *a4 = v10;
  return result;
}

uint64_t sub_1A8DC29D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unsigned __int8 *a4@<X5>, char *a5@<X6>, size_t *a6@<X8>)
{
  int v10 = *a4;
  char v11 = *a5;
  if (qword_1E97A8C70 != -1) {
    swift_once();
  }
  sub_1A8D8C154(a1, (uint64_t)v18);
  if (qword_1E97A8C68 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_1E97A9528;
  unint64_t v17 = qword_1E97A9530;
  sub_1A8D8BE04(qword_1E97A9528, qword_1E97A9530);
  sub_1A8DE94F0();
  sub_1A8DE94F0();
  sub_1A8DC259C((uint64_t)v18);
  sub_1A8D8BE04(v16, v17);
  sub_1A8DADB28(v16, v17);
  sub_1A8D8BD58(v16, v17);
  sub_1A8DC20E8(0, 0xC000000000000000, v11, &v19);
  swift_release();
  sub_1A8D8BD58(v16, v17);
  sub_1A8D8C000((uint64_t)v18);
  uint64_t v12 = v19;
  if (qword_1E97A8C78 != -1) {
    swift_once();
  }
  if (v10 == 2) {
    __int16 v13 = 64;
  }
  else {
    __int16 v13 = 32;
  }
  if (v10 == 1) {
    unsigned __int16 v14 = 48;
  }
  else {
    unsigned __int16 v14 = v13;
  }
  sub_1A8DC2684(v12, a2, a3, v14, a6, v11);
  return swift_release();
}

uint64_t sub_1A8DC2BDC()
{
  uint64_t result = sub_1A8D918C0(0x31762D454B5048uLL, 0xE700000000000000);
  qword_1E97A9528 = result;
  unk_1E97A9530 = v1;
  return result;
}

uint64_t sub_1A8DC2C14()
{
  uint64_t result = sub_1A8D918C0(0x6B72705F656165uLL, 0xE700000000000000);
  qword_1E97A9538 = result;
  unk_1E97A9540 = v1;
  return result;
}

uint64_t sub_1A8DC2C4C()
{
  uint64_t result = sub_1A8D918C0(0x735F646572616873uLL, 0xED00007465726365);
  qword_1E97A9548 = result;
  unk_1E97A9550 = v1;
  return result;
}

uint64_t sub_1A8DC2C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v14[3] = MEMORY[0x1E4FBB2B8];
  void v14[4] = MEMORY[0x1E4F27EF0];
  v14[0] = a1;
  v14[1] = a2;
  int v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x1E4FBB2B8]);
  uint64_t v5 = (unsigned char *)*v4;
  if (*v4 && (uint64_t v6 = (unsigned char *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = sub_1A8DCEE40(v5, v6);
      unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = sub_1A8D92F14((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x8000000000000000;
    }
    else
    {
      uint64_t v8 = sub_1A8D92F90((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xC000000000000000;
  }
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t sub_1A8DC2D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4766C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A8DC2DC4()
{
  sub_1A8DE9390();
  return v1;
}

unint64_t sub_1A8DC2E30()
{
  unint64_t result = qword_1E97A9558;
  if (!qword_1E97A9558)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB476690);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9558);
  }
  return result;
}

uint64_t P256.KeyAgreement.PrivateKey.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DC3488(MEMORY[0x1E4F14660], (uint64_t (*)(uint64_t, void, uint64_t))sub_1A8D9C15C, a1);
}

uint64_t sub_1A8DC2EB8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DC3550(MEMORY[0x1E4F14660], (uint64_t (*)(uint64_t, void, uint64_t))sub_1A8D9C15C, a1);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(_:kem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v12)
  {
    sub_1A8D8BDB0();
    swift_allocError();
    unsigned char *v13 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
    P256.KeyAgreement.PublicKey.init<A>(x963Representation:)((uint64_t)v11, a2, a3, &v16);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    if (!v4) {
      *a4 = v16;
    }
  }
  return result;
}

uint64_t P256.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(unsigned char *a1)
{
  if (*a1)
  {
    sub_1A8D8BDB0();
    swift_allocError();
    *uint64_t v1 = 1;
    return swift_willThrow();
  }
  else
  {
    sub_1A8DE97C0();
    unint64_t v3 = ccec_export_pub_size();
    uint64_t v4 = sub_1A8DE97D0();
    *(void *)(v4 + 16) = v3;
    ccec_export_pub();
    *(void *)(v4 + 16) = v3;
    uint64_t v5 = sub_1A8D93118(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v5;
  }
}

uint64_t sub_1A8DC312C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return P256.KeyAgreement.PublicKey.init<A>(_:kem:)(a1, a2, a3, a4);
}

uint64_t sub_1A8DC3158(unsigned char *a1)
{
  return P256.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(a1);
}

uint64_t P384.KeyAgreement.PrivateKey.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DC3488(MEMORY[0x1E4F14668], (uint64_t (*)(uint64_t, void, uint64_t))sub_1A8D9C188, a1);
}

uint64_t sub_1A8DC319C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DC3550(MEMORY[0x1E4F14668], (uint64_t (*)(uint64_t, void, uint64_t))sub_1A8D9C188, a1);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(_:kem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v12 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
    P384.KeyAgreement.PublicKey.init<A>(x963Representation:)((uint64_t)v11, a2, a3, &v16);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    if (!v4) {
      *a4 = v16;
    }
  }
  else
  {
    sub_1A8D8BDB0();
    swift_allocError();
    unsigned char *v14 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  }
  return result;
}

uint64_t P384.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(unsigned char *a1)
{
  if (*a1 == 1)
  {
    sub_1A8DE97C0();
    unint64_t v1 = ccec_export_pub_size();
    uint64_t v2 = sub_1A8DE97D0();
    *(void *)(v2 + 16) = v1;
    ccec_export_pub();
    *(void *)(v2 + 16) = v1;
    uint64_t v3 = sub_1A8D93118(v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v3;
  }
  else
  {
    sub_1A8D8BDB0();
    swift_allocError();
    *uint64_t v5 = 1;
    return swift_willThrow();
  }
}

uint64_t sub_1A8DC3418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return P384.KeyAgreement.PublicKey.init<A>(_:kem:)(a1, a2, a3, a4);
}

uint64_t sub_1A8DC3444(unsigned char *a1)
{
  return P384.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(a1);
}

uint64_t P521.KeyAgreement.PrivateKey.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DC3488(MEMORY[0x1E4F14670], (uint64_t (*)(uint64_t, void, uint64_t))sub_1A8D9C1B4, a1);
}

uint64_t sub_1A8DC3488@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(uint64_t, void, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a1();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    swift_dynamicCast();
    uint64_t v6 = getccec_full_ctx_size();
    uint64_t result = a2(v6, 0, v6);
    *a3 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8DC3524@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DC3550(MEMORY[0x1E4F14670], (uint64_t (*)(uint64_t, void, uint64_t))sub_1A8D9C1B4, a1);
}

uint64_t sub_1A8DC3550@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t (*a2)(uint64_t, void, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a1();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    swift_dynamicCast();
    uint64_t v6 = getccec_full_ctx_size();
    uint64_t result = a2(v6, 0, v6);
    *a3 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(_:kem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v12 == 2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
    P521.KeyAgreement.PublicKey.init<A>(x963Representation:)((uint64_t)v11, a2, a3, &v16);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    if (!v4) {
      *a4 = v16;
    }
  }
  else
  {
    sub_1A8D8BDB0();
    swift_allocError();
    unsigned char *v14 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  }
  return result;
}

uint64_t P521.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(unsigned char *a1)
{
  if (*a1 == 2)
  {
    sub_1A8DE97C0();
    unint64_t v1 = ccec_export_pub_size();
    uint64_t v2 = sub_1A8DE97D0();
    *(void *)(v2 + 16) = v1;
    ccec_export_pub();
    *(void *)(v2 + 16) = v1;
    uint64_t v3 = sub_1A8D93118(v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v3;
  }
  else
  {
    sub_1A8D8BDB0();
    swift_allocError();
    *uint64_t v5 = 1;
    return swift_willThrow();
  }
}

uint64_t sub_1A8DC383C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return P521.KeyAgreement.PublicKey.init<A>(_:kem:)(a1, a2, a3, a4);
}

uint64_t sub_1A8DC3868(unsigned char *a1)
{
  return P521.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(a1);
}

_UNKNOWN **sub_1A8DC3880()
{
  return &protocol witness table for P256.KeyAgreement.PublicKey;
}

_UNKNOWN **sub_1A8DC388C()
{
  return &protocol witness table for P256.KeyAgreement.PrivateKey;
}

_UNKNOWN **sub_1A8DC3898()
{
  return &protocol witness table for P384.KeyAgreement.PublicKey;
}

_UNKNOWN **sub_1A8DC38A4()
{
  return &protocol witness table for P384.KeyAgreement.PrivateKey;
}

_UNKNOWN **sub_1A8DC38B0()
{
  return &protocol witness table for P521.KeyAgreement.PublicKey;
}

_UNKNOWN **sub_1A8DC38BC()
{
  return &protocol witness table for P521.KeyAgreement.PrivateKey;
}

ValueMetadata *type metadata accessor for ASN1()
{
  return &type metadata for ASN1;
}

uint64_t destroy for ASN1.ASN1Node(uint64_t a1)
{
  return j__swift_unknownObjectRelease(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t initializeWithCopy for ASN1.ASN1Node(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 48);
  j__swift_unknownObjectRetain(v3, v4, v5, v6, v7, v8);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = v8;
  return a1;
}

uint64_t assignWithCopy for ASN1.ASN1Node(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 48);
  j__swift_unknownObjectRetain(v3, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = v8;
  j__swift_unknownObjectRelease(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ASN1.ASN1Node(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 40);
  char v4 = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 48);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v3;
  *(unsigned char *)(a1 + 48) = v4;
  j__swift_unknownObjectRelease(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1.ASN1Node(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1.ASN1Node(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1.ASN1Node()
{
  return &type metadata for ASN1.ASN1Node;
}

uint64_t destroy for ASN1.ASN1Node.Content(uint64_t a1)
{
  return j__swift_unknownObjectRelease(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t initializeWithCopy for ASN1.ASN1Node.Content(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = *((unsigned __int8 *)a2 + 40);
  j__swift_unknownObjectRetain(*a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t *assignWithCopy for ASN1.ASN1Node.Content(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = *((unsigned __int8 *)a2 + 40);
  j__swift_unknownObjectRetain(*a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v14 = *((unsigned __int8 *)a1 + 40);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  *((unsigned char *)a1 + 40) = v8;
  j__swift_unknownObjectRelease(v9, v10, v11, v12, v13, v14);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for ASN1.ASN1Node.Content(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = *((unsigned __int8 *)a1 + 40);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  a1[4] = v3;
  *((unsigned char *)a1 + 40) = v4;
  j__swift_unknownObjectRelease(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1.ASN1Node.Content(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1.ASN1Node.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1A8DC3D30(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_1A8DC3D38(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ASN1.ASN1Node.Content()
{
  return &type metadata for ASN1.ASN1Node.Content;
}

unint64_t sub_1A8DC3D58()
{
  unint64_t result = qword_1E97A9560;
  if (!qword_1E97A9560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9560);
  }
  return result;
}

void sub_1A8DC3DAC(uint64_t a1@<X8>)
{
  int64_t v3 = v1[2];
  unint64_t v4 = v1[3];
  if (v3 == v4 >> 1)
  {
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    long long v7 = 0uLL;
    char v8 = -1;
    long long v9 = 0uLL;
LABEL_9:
    *(void *)a1 = v5;
    *(_OWORD *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 24) = v9;
    *(void *)(a1 + 40) = v6;
    *(unsigned char *)(a1 + 48) = v8;
    return;
  }
  if (v3 >= (uint64_t)(v4 >> 1))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v10 = *v1;
  uint64_t v11 = v1[1];
  uint64_t v12 = (unsigned __int8 *)(v11 + 48 * v3);
  unsigned int v5 = *v12;
  uint64_t v13 = *((void *)v12 + 1);
  long long v14 = *((_OWORD *)v12 + 1);
  long long v15 = *((_OWORD *)v12 + 2);
  int64_t v16 = v3 + 1;
  v1[2] = v3 + 1;
  if ((v5 & 0x20) != 0)
  {
    sub_1A8DCA9F0(v10, v11, v3 + 1, v4, v13);
    uint64_t v21 = v20;
    uint64_t v22 = (v19 >> 1) - v18;
    if (!__OFSUB__(v19 >> 1, v18))
    {
      uint64_t v23 = v18;
      unint64_t v24 = v19;
      uint64_t v33 = v17;
      uint64_t v25 = v11;
      uint64_t v26 = v21;
      *unint64_t v1 = sub_1A8DBC264(v22, v10, v25, v16, v4);
      v1[1] = v27;
      v1[2] = v28;
      v1[3] = v29;
      sub_1A8DCA094(v26, v33, v23, v24, v13, v35);
      long long v31 = v35[1];
      long long v34 = v35[0];
      uint64_t v6 = v36;
      swift_unknownObjectRetain();
      long long v9 = v31;
      long long v7 = v34;
      char v8 = 0;
      goto LABEL_9;
    }
    goto LABEL_11;
  }
  long long v30 = v15;
  long long v32 = v14;
  if ((void)v14)
  {
    swift_unknownObjectRetain();
    uint64_t v6 = 0;
    char v8 = 1;
    long long v9 = v30;
    long long v7 = v32;
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
}

uint64_t sub_1A8DC3F20()
{
  uint64_t v0 = sub_1A8DE9A00();
  uint64_t result = sub_1A8DE9AE0();
  uint64_t v2 = v0 - result;
  if (__OFSUB__(v0, result))
  {
    __break(1u);
  }
  else
  {
    BOOL v3 = __OFADD__(v2, 7);
    uint64_t v4 = v2 + 7;
    if (!v3) {
      return v4 / 8;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DC3F8C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3] >> 1;
  if (v1 == v2)
  {
    int v3 = 0;
  }
  else
  {
    if (v1 >= v2)
    {
      __break(1u);
      return result;
    }
    int v3 = *(unsigned __int8 *)(v0[1] + v1);
    v0[2] = v1 + 1;
  }
  return v3 | ((v1 == v2) << 8);
}

void *sub_1A8DC3FD4(uint64_t a1, unint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1E4FBC860];
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      sub_1A8D8BE04(a1, a2);
      uint64_t v6 = (char *)sub_1A8DE9340();
      if (v6)
      {
        uint64_t v7 = sub_1A8DE9370();
        if (!__OFSUB__((int)a1, v7))
        {
          v6 += (int)a1 - v7;
          goto LABEL_7;
        }
LABEL_29:
        __break(1u);
      }
LABEL_7:
      uint64_t v8 = sub_1A8DE9360();
      if (v8 >= v5) {
        uint64_t v9 = (a1 >> 32) - (int)a1;
      }
      else {
        uint64_t v9 = v8;
      }
      if (v6) {
        int64_t v10 = v9;
      }
      else {
        int64_t v10 = 0;
      }
      uint64_t v2 = sub_1A8D9BA84(v6, v10);
      sub_1A8D8BD58(a1, a2);
      return v2;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v13 = (char *)sub_1A8DE9340();
      if (!v13) {
        goto LABEL_17;
      }
      uint64_t v14 = sub_1A8DE9370();
      if (__OFSUB__(v11, v14)) {
        goto LABEL_28;
      }
      v13 += v11 - v14;
LABEL_17:
      BOOL v15 = __OFSUB__(v12, v11);
      uint64_t v16 = v12 - v11;
      if (v15) {
        goto LABEL_27;
      }
      uint64_t v17 = sub_1A8DE9360();
      if (v17 >= v16) {
        int64_t v18 = v16;
      }
      else {
        int64_t v18 = v17;
      }
      if (v13) {
        int64_t v19 = v18;
      }
      else {
        int64_t v19 = 0;
      }
      uint64_t v2 = sub_1A8D9BA84(v13, v19);
      swift_release();
      swift_release();
      return v2;
    case 3uLL:
      return v2;
    default:
      uint64_t v21 = a1;
      __int16 v22 = a2;
      char v23 = BYTE2(a2);
      char v24 = BYTE3(a2);
      char v25 = BYTE4(a2);
      char v26 = BYTE5(a2);
      return sub_1A8D9BA84(&v21, BYTE6(a2));
  }
}

uint64_t sub_1A8DC41E4(long long *a1, unint64_t a2, char a3)
{
  long long v10 = *a1;
  long long v11 = a1[1];
  uint64_t v12 = *((void *)a1 + 4);
  sub_1A8DC3DAC((uint64_t)v13);
  sub_1A8D8ECD0((uint64_t)v13, (uint64_t)v18, &qword_1EB476750);
  if (v19 == 255)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    return 1;
  }
  v20[0] = v18[0];
  v20[1] = v18[1];
  _OWORD v20[2] = v18[2];
  unsigned __int8 v21 = v19;
  if (a2 > 0x1E)
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    JUMPOUT(0x1A8DC4530);
  }
  int v6 = 64;
  switch(a3)
  {
    case 1:
      goto LABEL_7;
    case 2:
      int v6 = 128;
      goto LABEL_7;
    case 3:
      int v6 = 192;
LABEL_7:
      if (LOBYTE(v20[0]) != (v6 | a2 | 0x20))
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        sub_1A8DBA7B4((uint64_t)v13, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        return 1;
      }
      *a1 = v10;
      a1[1] = v11;
      *((void *)a1 + 4) = v12;
      sub_1A8D946F4((uint64_t)v20 + 8, (uint64_t)v22);
      sub_1A8D946F4((uint64_t)v22, (uint64_t)&v23);
      if (v24) {
        goto LABEL_16;
      }
      sub_1A8DC3DAC((uint64_t)v14);
      sub_1A8D8ECD0((uint64_t)v14, (uint64_t)v17, &qword_1EB476750);
      if (v17[48] == 255)
      {
        sub_1A8DBA7B4((uint64_t)v13, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
        sub_1A8DBA7B4((uint64_t)v13, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
        swift_unknownObjectRetain();
      }
      else
      {
        sub_1A8DC3DAC((uint64_t)v15);
        sub_1A8DBA7B4((uint64_t)v13, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
        sub_1A8DBA7B4((uint64_t)v13, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
        swift_unknownObjectRetain();
        sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        sub_1A8D8ECD0((uint64_t)v15, (uint64_t)v16, &qword_1EB476750);
        int v8 = v16[48];
        sub_1A8DBA7B4((uint64_t)v14, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        if (v8 == 255)
        {
          sub_1A8DBA7B4((uint64_t)v13, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
          sub_1A8DBA7B4((uint64_t)v13, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          return 0;
        }
      }
      sub_1A8D8EC14();
      swift_allocError();
      unsigned char *v9 = 3;
      swift_willThrow();
      sub_1A8DBA7B4((uint64_t)v13, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      sub_1A8DBA7B4((uint64_t)v13, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    default:
      goto LABEL_17;
  }
}

uint64_t sub_1A8DC4540(long long *a1, unint64_t a2, char a3)
{
  return sub_1A8DC4598(a1, a2, a3, (void (*)(void *__return_ptr, _OWORD *))sub_1A8DCC3B8);
}

uint64_t sub_1A8DC456C(long long *a1, unint64_t a2, char a3)
{
  return sub_1A8DC4598(a1, a2, a3, (void (*)(void *__return_ptr, _OWORD *))sub_1A8DCC524);
}

uint64_t sub_1A8DC4598(long long *a1, unint64_t a2, char a3, void (*a4)(void *__return_ptr, _OWORD *))
{
  long long v12 = *a1;
  long long v13 = a1[1];
  uint64_t v14 = *((void *)a1 + 4);
  sub_1A8DC3DAC((uint64_t)v15 + 1);
  sub_1A8D8ECD0((uint64_t)v15 + 1, (uint64_t)v23, &qword_1EB476750);
  if (v24 == 255)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    return 1;
  }
  v25[0] = v23[0];
  v25[1] = v23[1];
  _OWORD v25[2] = v23[2];
  unsigned __int8 v26 = v24;
  if (a2 > 0x1E)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    JUMPOUT(0x1A8DC4940);
  }
  int v9 = 64;
  switch(a3)
  {
    case 1:
      goto LABEL_7;
    case 2:
      int v9 = 128;
      goto LABEL_7;
    case 3:
      int v9 = 192;
LABEL_7:
      if (LOBYTE(v25[0]) != (v9 | a2 | 0x20))
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        sub_1A8DBA7B4((uint64_t)v15 + 1, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        return 1;
      }
      *a1 = v12;
      a1[1] = v13;
      *((void *)a1 + 4) = v14;
      sub_1A8D946F4((uint64_t)v25 + 8, (uint64_t)v27);
      sub_1A8D946F4((uint64_t)v27, (uint64_t)&v28);
      if (v29) {
        goto LABEL_19;
      }
      sub_1A8DC3DAC((uint64_t)v16);
      sub_1A8D8ECD0((uint64_t)v16, (uint64_t)v19, &qword_1EB476750);
      if (v20 == 255)
      {
        sub_1A8DBA7B4((uint64_t)v15 + 1, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
        sub_1A8DBA7B4((uint64_t)v15 + 1, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
        swift_unknownObjectRetain();
        goto LABEL_14;
      }
      v21[0] = v19[0];
      v21[1] = v19[1];
      v21[2] = v19[2];
      unsigned __int8 v22 = v20;
      sub_1A8DC3DAC((uint64_t)v17);
      sub_1A8DBA7B4((uint64_t)v15 + 1, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
      sub_1A8DBA7B4((uint64_t)v15 + 1, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
      swift_unknownObjectRetain();
      sub_1A8DBA7B4((uint64_t)v17, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      sub_1A8D8ECD0((uint64_t)v17, (uint64_t)v18, &qword_1EB476750);
      if (v18[48] != 255)
      {
        sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
LABEL_14:
        sub_1A8D8EC14();
        swift_allocError();
        *long long v11 = 3;
        swift_willThrow();
        sub_1A8DBA7B4((uint64_t)v15 + 1, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        sub_1A8DBA7B4((uint64_t)v15 + 1, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      a4(v15, v21);
      sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      sub_1A8DBA7B4((uint64_t)v15 + 1, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      sub_1A8DBA7B4((uint64_t)v15 + 1, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      if (!v4) {
        return 0;
      }
      return result;
    default:
      goto LABEL_20;
  }
}

uint64_t sub_1A8DC4950(long long *a1, unint64_t a2, char a3)
{
  long long v12 = *a1;
  long long v13 = a1[1];
  uint64_t v14 = *((void *)a1 + 4);
  sub_1A8DC3DAC((uint64_t)v15);
  sub_1A8D8ECD0((uint64_t)v15, (uint64_t)v23, &qword_1EB476750);
  if (v24 == 255)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    return 1;
  }
  v25[0] = v23[0];
  v25[1] = v23[1];
  _OWORD v25[2] = v23[2];
  unsigned __int8 v26 = v24;
  if (a2 > 0x1E)
  {
    __break(1u);
    goto LABEL_23;
  }
  int v7 = 64;
  switch(a3)
  {
    case 1:
      goto LABEL_7;
    case 2:
      int v7 = 128;
      goto LABEL_7;
    case 3:
      int v7 = 192;
LABEL_7:
      if (LOBYTE(v25[0]) != (v7 | a2 | 0x20))
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        return 1;
      }
      *a1 = v12;
      a1[1] = v13;
      *((void *)a1 + 4) = v14;
      sub_1A8D946F4((uint64_t)v25 + 8, (uint64_t)v27);
      sub_1A8D946F4((uint64_t)v27, (uint64_t)&v29);
      if (v30)
      {
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        JUMPOUT(0x1A8DC4D88);
      }
      sub_1A8DC3DAC((uint64_t)v16);
      sub_1A8D8ECD0((uint64_t)v16, (uint64_t)v19, &qword_1EB476750);
      if (v20 == 255)
      {
        sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
        sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
        swift_unknownObjectRetain();
        goto LABEL_15;
      }
      v21[0] = v19[0];
      v21[1] = v19[1];
      v21[2] = v19[2];
      unsigned __int8 v22 = v20;
      sub_1A8DC3DAC((uint64_t)v17);
      sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
      sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
      swift_unknownObjectRetain();
      sub_1A8DBA7B4((uint64_t)v17, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      sub_1A8D8ECD0((uint64_t)v17, (uint64_t)v18, &qword_1EB476750);
      if (v18[48] != 255)
      {
        sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
LABEL_15:
        sub_1A8D8EC14();
        swift_allocError();
        unsigned char *v9 = 3;
        swift_willThrow();
        sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      sub_1A8D946F4((uint64_t)v21 + 8, (uint64_t)v28);
      sub_1A8DA81F4((uint64_t)v28);
      sub_1A8DCF724((unsigned __int8 *)v21, 2u);
      if (v3)
      {
LABEL_21:
        sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      if (v10 != 48)
      {
        sub_1A8DCBCBC();
        swift_allocError();
        *long long v11 = 6;
        swift_willThrow();
        goto LABEL_21;
      }
      sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return 0;
    default:
      goto LABEL_24;
  }
}

char *sub_1A8DC4D98(long long *a1, unint64_t a2, char a3)
{
  long long v12 = *a1;
  long long v13 = a1[1];
  uint64_t v14 = *((void *)a1 + 4);
  sub_1A8DC3DAC((uint64_t)v15);
  sub_1A8D8ECD0((uint64_t)v15, (uint64_t)v23, &qword_1EB476750);
  if (v24 == 255)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    return 0;
  }
  v25[0] = v23[0];
  v25[1] = v23[1];
  _OWORD v25[2] = v23[2];
  unsigned __int8 v26 = v24;
  if (a2 > 0x1E)
  {
    __break(1u);
    goto LABEL_19;
  }
  int v6 = 64;
  switch(a3)
  {
    case 1:
      goto LABEL_7;
    case 2:
      int v6 = 128;
      goto LABEL_7;
    case 3:
      int v6 = 192;
LABEL_7:
      if (LOBYTE(v25[0]) != (v6 | a2 | 0x20))
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        return 0;
      }
      *a1 = v12;
      a1[1] = v13;
      *((void *)a1 + 4) = v14;
      sub_1A8D946F4((uint64_t)v25 + 8, (uint64_t)v27);
      sub_1A8D946F4((uint64_t)v27, (uint64_t)&v28);
      if (v29)
      {
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        JUMPOUT(0x1A8DC512CLL);
      }
      sub_1A8DC3DAC((uint64_t)v16);
      sub_1A8D8ECD0((uint64_t)v16, (uint64_t)v19, &qword_1EB476750);
      if (v20 == 255)
      {
        sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
        sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
        swift_unknownObjectRetain();
      }
      else
      {
        v21[0] = v19[0];
        v21[1] = v19[1];
        v21[2] = v19[2];
        unsigned __int8 v22 = v20;
        sub_1A8DC3DAC((uint64_t)v17);
        sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
        sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
        swift_unknownObjectRetain();
        sub_1A8DBA7B4((uint64_t)v17, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        sub_1A8D8ECD0((uint64_t)v17, (uint64_t)v18, &qword_1EB476750);
        if (v18[48] == 255)
        {
          int v9 = sub_1A8DA1098((char *)v21, 6, v7, v8);
          sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
          sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          return v9;
        }
        sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      }
      sub_1A8D8EC14();
      swift_allocError();
      unsigned char *v10 = 3;
      swift_willThrow();
      int v9 = (char *)sub_1A8D8ED9C;
      sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      sub_1A8DBA7B4((uint64_t)v15, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v9;
    default:
      goto LABEL_20;
  }
}

uint64_t sub_1A8DC513C(long long *a1, unint64_t a2, char a3)
{
  long long v13 = *a1;
  long long v14 = a1[1];
  uint64_t v15 = *((void *)a1 + 4);
  sub_1A8DC3DAC((uint64_t)v16);
  sub_1A8D8ECD0((uint64_t)v16, (uint64_t)v24, &qword_1EB476750);
  if (v25 == 255)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
  }
  else
  {
    v26[0] = v24[0];
    v26[1] = v24[1];
    long long v26[2] = v24[2];
    unsigned __int8 v27 = v25;
    if (a2 > 0x1E)
    {
      __break(1u);
      goto LABEL_22;
    }
    int v7 = 64;
    switch(a3)
    {
      case 1:
        goto LABEL_7;
      case 2:
        int v7 = 128;
        goto LABEL_7;
      case 3:
        int v7 = 192;
LABEL_7:
        if (LOBYTE(v26[0]) == (v7 | a2 | 0x20))
        {
          *a1 = v13;
          a1[1] = v14;
          *((void *)a1 + 4) = v15;
          sub_1A8D946F4((uint64_t)v26 + 8, (uint64_t)v28);
          sub_1A8D946F4((uint64_t)v28, (uint64_t)&v29);
          if ((v30 & 1) == 0)
          {
            uint64_t v12 = v29;
            sub_1A8DC3DAC((uint64_t)v17);
            sub_1A8D8ECD0((uint64_t)v17, (uint64_t)v20, &qword_1EB476750);
            if (v21 == 255)
            {
              sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
              sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
              swift_unknownObjectRetain();
            }
            else
            {
              v22[0] = v20[0];
              v22[1] = v20[1];
              uint64_t v22[2] = v20[2];
              unsigned __int8 v23 = v21;
              sub_1A8DC3DAC((uint64_t)v18);
              sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
              sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
              swift_unknownObjectRetain();
              sub_1A8DBA7B4((uint64_t)v18, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
              sub_1A8D8ECD0((uint64_t)v18, (uint64_t)v19, &qword_1EB476750);
              if (v19[48] == 255)
              {
                uint64_t v11 = sub_1A8D944F0((unsigned __int8 *)v22, 3u);
                if (!v3)
                {
                  uint64_t v8 = v11;
                  sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
                  sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  return v8;
                }
                sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
                sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
                uint64_t v8 = v12;
                swift_unknownObjectRelease();
                goto LABEL_16;
              }
              sub_1A8DBA7B4((uint64_t)v17, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
            }
            sub_1A8D8EC14();
            swift_allocError();
            unsigned char *v9 = 3;
            swift_willThrow();
            sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
            sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
            swift_unknownObjectRelease();
            uint64_t v8 = v13;
LABEL_16:
            swift_unknownObjectRelease();
            return v8;
          }
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
          JUMPOUT(0x1A8DC5534);
        }
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        sub_1A8DBA7B4((uint64_t)v16, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        break;
      default:
        goto LABEL_23;
    }
  }
  return 0;
}

uint64_t sub_1A8DC5544()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A8DC5610()
{
  sub_1A8DE9BD0();
  sub_1A8DE9C00();
  sub_1A8DE9BF0();
  if (!v0[2])
  {
    sub_1A8DE9C00();
    return sub_1A8DE9C20();
  }
  uint64_t v1 = v0[4];
  unint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  sub_1A8DE9C00();
  unint64_t v4 = v2 >> 1;
  uint64_t result = (v2 >> 1) - v1;
  if (__OFSUB__(v2 >> 1, v1))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = sub_1A8DE9BF0();
  BOOL v6 = __OFSUB__(v4, v1);
  uint64_t v7 = v4 - v1;
  if (!v7) {
    return sub_1A8DE9C20();
  }
  if (!((v7 < 0) ^ v6 | (v7 == 0)))
  {
    uint64_t v8 = v3 + v1;
    do
    {
      ++v8;
      sub_1A8DE9C00();
      --v7;
    }
    while (v7);
    return sub_1A8DE9C20();
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1A8DC56E0()
{
  return sub_1A8DC5610();
}

uint64_t sub_1A8DC571C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  unint64_t v4 = v0[5];
  sub_1A8DE9C00();
  sub_1A8DE9BF0();
  if (!v1) {
    return sub_1A8DE9C00();
  }
  sub_1A8DE9C00();
  unint64_t v5 = v4 >> 1;
  uint64_t result = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = sub_1A8DE9BF0();
  BOOL v7 = __OFSUB__(v5, v3);
  uint64_t v8 = v5 - v3;
  if (!v8) {
    return result;
  }
  if ((v8 < 0) ^ v7 | (v8 == 0))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v9 = v2 + v3;
  do
  {
    ++v9;
    uint64_t result = sub_1A8DE9C00();
    --v8;
  }
  while (v8);
  return result;
}

uint64_t sub_1A8DC57BC()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  unint64_t v4 = v0[5];
  sub_1A8DE9BD0();
  sub_1A8DE9C00();
  sub_1A8DE9BF0();
  if (!v1)
  {
    sub_1A8DE9C00();
    return sub_1A8DE9C20();
  }
  sub_1A8DE9C00();
  unint64_t v5 = v4 >> 1;
  uint64_t result = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = sub_1A8DE9BF0();
  BOOL v7 = __OFSUB__(v5, v3);
  uint64_t v8 = v5 - v3;
  if (!v8) {
    return sub_1A8DE9C20();
  }
  if (!((v8 < 0) ^ v7 | (v8 == 0)))
  {
    uint64_t v9 = v2 + v3;
    do
    {
      ++v9;
      sub_1A8DE9C00();
      --v8;
    }
    while (v8);
    return sub_1A8DE9C20();
  }
LABEL_11:
  __break(1u);
  return result;
}

BOOL sub_1A8DC588C(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  uint64_t v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1A8DCA124(v7, v8);
}

uint64_t sub_1A8DC58D4()
{
  v3[0] = 0;
  v3[1] = 0xE000000000000000;
  sub_1A8DE9A90();
  sub_1A8DE9680();
  sub_1A8DC5544();
  sub_1A8DE9680();
  v3[0] = *(void *)(v0 + 8);
  sub_1A8DE9B20();
  sub_1A8DE9680();
  swift_bridgeObjectRelease();
  sub_1A8DE9680();
  sub_1A8D8ECD0(v0 + 16, (uint64_t)v2, &qword_1E97A9578);
  uint64_t result = sub_1A8D8ECD0((uint64_t)v2, (uint64_t)v3, &qword_1E97A9578);
  if (v3[0] && __OFSUB__(v3[3] >> 1, v3[2]))
  {
    __break(1u);
  }
  else
  {
    sub_1A8DE9B20();
    sub_1A8DE9680();
    swift_bridgeObjectRelease();
    sub_1A8DE9680();
    return 0;
  }
  return result;
}

uint64_t sub_1A8DC5A50()
{
  return sub_1A8DC58D4();
}

char *sub_1A8DC5A8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v10 = a4;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v9 = a3;
  swift_unknownObjectRetain();
  uint64_t v11 = sub_1A8D965DC(0, 16, 0, MEMORY[0x1E4FBC860]);
  sub_1A8DC5B84((char *)v8, 1, &v11);
  uint64_t result = (char *)v8[0];
  if (v5) {
    goto LABEL_6;
  }
  if (!__OFSUB__(v10 >> 1, v9))
  {
    if (v10 >> 1 == v9)
    {
      long long v4 = v11;
      swift_unknownObjectRelease();
      return v4;
    }
    sub_1A8D8EC14();
    swift_allocError();
    *BOOL v7 = 3;
    swift_willThrow();
LABEL_6:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return v4;
  }
  __break(1u);
  return result;
}

void sub_1A8DC5B84(char *a1, uint64_t a2, char **a3)
{
  if (a2 > 10) {
    goto LABEL_2;
  }
  __int16 v9 = sub_1A8DC3F8C();
  if ((v9 & 0x100) != 0) {
    goto LABEL_16;
  }
  char v10 = v9;
  if ((~v9 & 0x1F) == 0)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v11 = 0;
LABEL_18:
    swift_willThrow();
    return;
  }
  sub_1A8DC5ED4();
  if (v3) {
    return;
  }
  if (v13)
  {
LABEL_16:
    sub_1A8D8EC14();
    swift_allocError();
    char v5 = 5;
    goto LABEL_17;
  }
  uint64_t v14 = v12;
  if (v12 < 0)
  {
LABEL_2:
    sub_1A8D8EC14();
    swift_allocError();
    char v5 = 3;
LABEL_17:
    *long long v4 = v5;
    goto LABEL_18;
  }
  uint64_t v15 = *(void *)a1;
  unint64_t v40 = *((void *)a1 + 1);
  unint64_t v35 = *((void *)a1 + 3);
  int64_t v36 = *((void *)a1 + 2);
  uint64_t v16 = sub_1A8DBB0C0(v12, v15, v40, v36, v35);
  uint64_t v18 = v17;
  unint64_t v20 = v19;
  uint64_t v33 = v21;
  unint64_t v34 = v16;
  v37[0] = v16;
  v37[1] = v21;
  uint64_t v38 = v17;
  unint64_t v39 = v19;
  *(void *)a1 = sub_1A8DBC264(v14, v15, v40, v36, v35);
  *((void *)a1 + 1) = v22;
  *((void *)a1 + 2) = v23;
  *((void *)a1 + 3) = v24;
  unint64_t v40 = v20;
  if (__OFSUB__(v20 >> 1, v18)) {
    goto LABEL_32;
  }
  if ((v20 >> 1) - v18 == v14)
  {
    uint64_t v15 = v18;
    a1 = *a3;
    swift_unknownObjectRetain();
    if ((v10 & 0x20) == 0)
    {
      unint64_t v20 = v34;
      swift_unknownObjectRetain();
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_13:
        uint64_t v25 = v33;
        unint64_t v27 = *((void *)a1 + 2);
        unint64_t v26 = *((void *)a1 + 3);
        if (v27 >= v26 >> 1)
        {
          long long v32 = sub_1A8D965DC((char *)(v26 > 1), v27 + 1, 1, a1);
          uint64_t v25 = v33;
          a1 = v32;
        }
        *((void *)a1 + 2) = v27 + 1;
        long long v28 = &a1[48 * v27];
        v28[32] = v10;
        *((void *)v28 + 5) = a2;
        *((void *)v28 + 6) = v20;
        *((void *)v28 + 7) = v25;
        *((void *)v28 + 8) = v15;
        *((void *)v28 + 9) = v40;
        swift_unknownObjectRelease();
        *a3 = a1;
        return;
      }
LABEL_33:
      a1 = sub_1A8D965DC(0, *((void *)a1 + 2) + 1, 1, a1);
      goto LABEL_13;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a1 = sub_1A8D965DC(0, *((void *)a1 + 2) + 1, 1, a1);
    }
    unint64_t v20 = *((void *)a1 + 2);
    unint64_t v30 = *((void *)a1 + 3);
    if (v20 >= v30 >> 1) {
      a1 = sub_1A8D965DC((char *)(v30 > 1), v20 + 1, 1, a1);
    }
    *((void *)a1 + 2) = v20 + 1;
    long long v31 = &a1[48 * v20];
    v31[32] = v10;
    *((void *)v31 + 5) = a2;
    *((_OWORD *)v31 + 3) = 0u;
    *((_OWORD *)v31 + 4) = 0u;
    *a3 = a1;
    if (!v14)
    {
      swift_unknownObjectRelease();
      return;
    }
    while (1)
    {
      sub_1A8DC5B84(v37, a2 + 1, a3);
      if (__OFSUB__(v39 >> 1, v38)) {
        break;
      }
      if ((uint64_t)((v39 >> 1) - v38) <= 0) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  sub_1A8D8EC14();
  swift_allocError();
  *long long v29 = 5;
  swift_unknownObjectRetain();
  swift_willThrow();
LABEL_21:
  swift_unknownObjectRelease();
}

void sub_1A8DC5ED4()
{
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  int64_t v4 = v3 >> 1;
  if (v2 == v3 >> 1) {
    return;
  }
  if (v2 >= v4)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = *v0;
  uint64_t v6 = v0[1];
  int v7 = *(unsigned __int8 *)(v6 + v2);
  int64_t v8 = v2 + 1;
  v0[2] = v2 + 1;
  if (v7 == 128)
  {
    sub_1A8D8EC14();
    swift_allocError();
    unsigned char *v9 = 6;
    swift_willThrow();
    return;
  }
  if ((v7 & 0x80) != 0)
  {
    BOOL v10 = __OFSUB__(v4, v8);
    int64_t v11 = v4 - v8;
    if (!v10)
    {
      unint64_t v12 = v7 & 0x7F;
      if (v11 >= (uint64_t)v12)
      {
        sub_1A8DBB0C0(v7 & 0x7F, v5, v6, v2 + 1, v3);
        uint64_t v24 = v13;
        uint64_t v15 = v14;
        unint64_t v23 = v16;
        *uint64_t v0 = sub_1A8DBC264(v12, v5, v6, v8, v3);
        v0[1] = v17;
        v0[2] = v18;
        v0[3] = v19;
        swift_unknownObjectRetain();
        uint64_t v20 = swift_unknownObjectRetain();
        sub_1A8DCF9D0(v20, v24, v15, v23);
        if (!v1 && (v21 <= 0x7F || v12 > (71 - __clz(v21)) >> 3))
        {
          sub_1A8D8EC14();
          swift_allocError();
          *uint64_t v22 = 6;
          swift_willThrow();
        }
        swift_unknownObjectRelease();
      }
      return;
    }
LABEL_16:
    __break(1u);
  }
}

uint64_t sub_1A8DC6098()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_1A8DE9BD0();
  sub_1A8DCA8FC((uint64_t)v5, v1, v2, v3);
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DC60F4(uint64_t a1)
{
  return sub_1A8DCA8FC(a1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1A8DC6100()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_1A8DE9BD0();
  sub_1A8DCA8FC((uint64_t)v5, v1, v2, v3);
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DC6158(uint64_t a1, uint64_t a2)
{
  return sub_1A8D9423C(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_1A8DC6174@<X0>(uint64_t a1@<X8>)
{
  sub_1A8DC3DAC((uint64_t)v3);
  return sub_1A8D8ECD0((uint64_t)v3, a1, &qword_1EB476750);
}

__n128 sub_1A8DC61B8@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  __n128 result = *(__n128 *)v1;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v2;
  return result;
}

uint64_t sub_1A8DC61CC()
{
  uint64_t v1 = sub_1A8DCA1F4(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_1A8DC6208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8DC89D0(a1, a2, a3);
}

unint64_t sub_1A8DC6248()
{
  unint64_t result = qword_1E97A9568;
  if (!qword_1E97A9568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9568);
  }
  return result;
}

unint64_t sub_1A8DC62A0()
{
  unint64_t result = qword_1E97A9570;
  if (!qword_1E97A9570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9570);
  }
  return result;
}

uint64_t sub_1A8DC62F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8DCBC5C(a3, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
}

uint64_t sub_1A8DC633C(char a1, char **a2, char *a3)
{
  unint64_t v5 = v3;
  __int16 v9 = *a2;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A8D96298(0, *((void *)v9 + 2) + 1, 1, v9);
    __int16 v9 = (char *)isUniquelyReferenced_nonNull_native;
  }
  unint64_t v12 = *((void *)v9 + 2);
  unint64_t v11 = *((void *)v9 + 3);
  int64_t v13 = v11 >> 1;
  uint64_t v14 = v12 + 1;
  if (v11 >> 1 <= v12)
  {
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A8D96298((char *)(v11 > 1), v12 + 1, 1, v9);
    __int16 v9 = (char *)isUniquelyReferenced_nonNull_native;
    unint64_t v11 = *(void *)(isUniquelyReferenced_nonNull_native + 24);
    int64_t v13 = v11 >> 1;
  }
  *((void *)v9 + 2) = v14;
  v9[v12 + 32] = a1;
  unint64_t v15 = v12 + 2;
  if (v13 < (uint64_t)v15)
  {
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A8D96298((char *)(v11 > 1), v15, 1, v9);
    __int16 v9 = (char *)isUniquelyReferenced_nonNull_native;
  }
  *((void *)v9 + 2) = v15;
  v9[v14 + 32] = 0;
  *a2 = v9;
  unint64_t v16 = v15 - 1;
  if (__OFSUB__(v15, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v17 = *(void *)a3;
  MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
  _OWORD v24[2] = v17;
  sub_1A8DCAC0C(6, a2, (uint64_t (*)(char **))sub_1A8D8E960, (uint64_t)v24);
  if (*((void *)a3 + 1))
  {
    uint64_t v14 = *((void *)a3 + 3);
    unint64_t v18 = *((void *)a3 + 4);
    uint64_t v19 = *((void *)a3 + 2);
    uint64_t v20 = swift_unknownObjectRetain();
    sub_1A8DE8FC4(v20, v19, v14, v18);
    swift_unknownObjectRelease();
  }
  a3 = *a2;
  unint64_t v21 = *((void *)*a2 + 2);
  unint64_t v4 = v21 - v15;
  if ((uint64_t)(v21 - v15) >= 128)
  {
    if (v21 >= v15)
    {
      v24[5] = v5;
      unint64_t v5 = 71 - __clz(v4);
      uint64_t v14 = v5 >> 3;
      sub_1A8DC80D4(v5 >> 3, v15, v21);
      a3 = *a2;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_13:
        if (v16 < *((void *)a3 + 2))
        {
          uint64_t v22 = a3 + 32;
          a3[v16 + 32] = (v5 >> 3) | 0x80;
          *a2 = a3;
          if (v15 >= *((void *)a3 + 2)) {
            goto LABEL_35;
          }
          v22[v15] = v4 >> (8 * ((v14 - 1) & 7));
          if (v14 == 1) {
            goto LABEL_34;
          }
          if (v15 + 1 >= *((void *)a3 + 2)) {
            goto LABEL_35;
          }
          v22[v15 + 1] = v4 >> (8 * ((v14 - 2) & 7));
          if (v14 == 2) {
            goto LABEL_34;
          }
          if (v15 + 2 >= *((void *)a3 + 2)) {
            goto LABEL_35;
          }
          v22[v15 + 2] = v4 >> (8 * ((v14 - 3) & 7));
          if (v14 == 3) {
            goto LABEL_34;
          }
          if (v15 + 3 >= *((void *)a3 + 2)) {
            goto LABEL_35;
          }
          v22[v15 + 3] = v4 >> (8 * ((v14 - 4) & 7));
          if (v14 == 4) {
            goto LABEL_34;
          }
          if (v15 + 4 >= *((void *)a3 + 2)) {
            goto LABEL_35;
          }
          v22[v15 + 4] = v4 >> (8 * ((v14 - 5) & 7));
          if (v14 == 5) {
            goto LABEL_34;
          }
          if (v15 + 5 >= *((void *)a3 + 2)) {
            goto LABEL_35;
          }
          v22[v15 + 5] = v4 >> (8 * ((v14 - 6) & 7));
          if (v14 == 6) {
            goto LABEL_34;
          }
          if (v15 + 6 >= *((void *)a3 + 2)) {
            goto LABEL_35;
          }
          v22[v15 + 6] = v4 >> (8 * ((v14 - 7) & 7));
          if (v14 == 7) {
            goto LABEL_34;
          }
          if (v15 + 7 >= *((void *)a3 + 2))
          {
LABEL_35:
            __break(1u);
            goto LABEL_34;
          }
          v22[v15 + 7] = v4 >> (v5 & 0x38);
LABEL_34:
          swift_bridgeObjectRelease();
          uint64_t result = swift_unknownObjectRelease();
          *a2 = a3;
          return result;
        }
        __break(1u);
        goto LABEL_41;
      }
LABEL_39:
      a3 = sub_1A8DAF578((uint64_t)a3);
      goto LABEL_13;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_32;
    }
    goto LABEL_42;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)a3);
  a3 = (char *)result;
LABEL_32:
  if (v16 < *((void *)a3 + 2))
  {
    a3[v16 + 32] = v4;
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DC66D8(unint64_t a1, char **a2)
{
  uint64_t v6 = *a2;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_36;
  }
  while (1)
  {
    unint64_t v9 = *((void *)v6 + 2);
    unint64_t v8 = *((void *)v6 + 3);
    int64_t v10 = v8 >> 1;
    unint64_t v11 = v9 + 1;
    if (v8 >> 1 <= v9)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A8D96298((char *)(v8 > 1), v9 + 1, 1, v6);
      uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
      unint64_t v8 = *(void *)(isUniquelyReferenced_nonNull_native + 24);
      int64_t v10 = v8 >> 1;
    }
    *((void *)v6 + 2) = v11;
    v6[v9 + 32] = a1;
    unint64_t v12 = v9 + 2;
    if (v10 < (uint64_t)v12)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A8D96298((char *)(v8 > 1), v12, 1, v6);
      uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
    }
    *((void *)v6 + 2) = v12;
    v6[v11 + 32] = 0;
    *a2 = v6;
    unint64_t v13 = v12 - 1;
    if (__OFSUB__(v12, 1))
    {
      __break(1u);
    }
    else if (qword_1E97A8B50 == -1)
    {
      goto LABEL_8;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_once();
LABEL_8:
    MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
    void v19[2] = v14;
    sub_1A8DCAC0C(6, a2, (uint64_t (*)(char **))sub_1A8D8F024, (uint64_t)v19);
    uint64_t result = sub_1A8DC6A5C(48, a2);
    if (v2) {
      return result;
    }
    uint64_t v6 = *a2;
    unint64_t v16 = *((void *)*a2 + 2);
    unint64_t v17 = v16 - v12;
    if ((uint64_t)(v16 - v12) <= 127) {
      break;
    }
    if (v16 < v12)
    {
      __break(1u);
    }
    else
    {
      unint64_t v3 = 71 - __clz(v17);
      a1 = v3 >> 3;
      sub_1A8DC80D4(v3 >> 3, v12, v16);
      uint64_t v6 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_12;
      }
    }
    uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)v6);
    uint64_t v6 = (char *)result;
LABEL_12:
    if (v13 >= *((void *)v6 + 2))
    {
      __break(1u);
      goto LABEL_42;
    }
    unint64_t v18 = v6 + 32;
    v6[v13 + 32] = (v3 >> 3) | 0x80;
    *a2 = v6;
    if (v12 < *((void *)v6 + 2))
    {
      v18[v12] = v17 >> (8 * ((a1 - 1) & 7));
      if (a1 == 1) {
        goto LABEL_33;
      }
      if (v12 + 1 < *((void *)v6 + 2))
      {
        v18[v12 + 1] = v17 >> (8 * ((a1 - 2) & 7));
        if (a1 == 2) {
          goto LABEL_33;
        }
        if (v12 + 2 < *((void *)v6 + 2))
        {
          v18[v12 + 2] = v17 >> (8 * ((a1 - 3) & 7));
          if (a1 == 3) {
            goto LABEL_33;
          }
          if (v12 + 3 < *((void *)v6 + 2))
          {
            v18[v12 + 3] = v17 >> (8 * ((a1 - 4) & 7));
            if (a1 == 4) {
              goto LABEL_33;
            }
            if (v12 + 4 < *((void *)v6 + 2))
            {
              v18[v12 + 4] = v17 >> (8 * ((a1 - 5) & 7));
              if (a1 == 5) {
                goto LABEL_33;
              }
              if (v12 + 5 < *((void *)v6 + 2))
              {
                v18[v12 + 5] = v17 >> (8 * ((a1 - 6) & 7));
                if (a1 == 6) {
                  goto LABEL_33;
                }
                if (v12 + 6 < *((void *)v6 + 2))
                {
                  v18[v12 + 6] = v17 >> (8 * ((a1 - 7) & 7));
                  if (a1 == 7) {
                    goto LABEL_33;
                  }
                  if (v12 + 7 < *((void *)v6 + 2))
                  {
                    v18[v12 + 7] = v17 >> (v3 & 0x38);
LABEL_33:
                    *a2 = v6;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_36:
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A8D96298(0, *((void *)v6 + 2) + 1, 1, v6);
    uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
  }
  if ((v17 & 0x8000000000000000) != 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_31;
  }
LABEL_43:
  uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)v6);
  uint64_t v6 = (char *)result;
LABEL_31:
  if (v13 < *((void *)v6 + 2))
  {
    v6[v13 + 32] = v17;
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DC6A5C(char a1, char **a2)
{
  uint64_t v6 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = sub_1A8D96298(0, *((void *)v6 + 2) + 1, 1, v6);
  }
  unint64_t v8 = *((void *)v6 + 2);
  unint64_t v7 = *((void *)v6 + 3);
  int64_t v9 = v7 >> 1;
  unint64_t v10 = v8 + 1;
  if (v7 >> 1 <= v8)
  {
    uint64_t v6 = sub_1A8D96298((char *)(v7 > 1), v8 + 1, 1, v6);
    unint64_t v7 = *((void *)v6 + 3);
    int64_t v9 = v7 >> 1;
  }
  *((void *)v6 + 2) = v10;
  v6[v8 + 32] = a1;
  unint64_t v11 = (char *)(v8 + 2);
  if (v9 < (uint64_t)(v8 + 2)) {
    uint64_t v6 = sub_1A8D96298((char *)(v7 > 1), v8 + 2, 1, v6);
  }
  *((void *)v6 + 2) = v11;
  v6[v10 + 32] = 0;
  *a2 = v6;
  unint64_t v12 = v8 + 1;
  if (__OFSUB__(v11, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t result = sub_1A8DC6DB4(160, a2, (uint64_t (*)(uint64_t, char **))sub_1A8DC7404);
  if (!v2)
  {
    sub_1A8DC6DB4(161, a2, (uint64_t (*)(uint64_t, char **))sub_1A8DC7778);
    sub_1A8DC70B8(0xA2uLL, a2);
    uint64_t v6 = *a2;
    unint64_t v14 = *((void *)*a2 + 2);
    unint64_t v8 = v14 - (void)v11;
    if ((uint64_t)(v14 - (void)v11) <= 127)
    {
      if ((v8 & 0x8000000000000000) != 0) {
        goto LABEL_38;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_32;
      }
    }
    else
    {
      if (v14 < (unint64_t)v11) {
        goto LABEL_37;
      }
      unint64_t v3 = 71 - __clz(v8);
      uint64_t v6 = (char *)(v3 >> 3);
      sub_1A8DC80D4(v3 >> 3, (uint64_t)v11, v14);
      unint64_t v11 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        goto LABEL_39;
      }
      while (v12 < *((void *)v11 + 2))
      {
        unint64_t v15 = v11 + 32;
        v11[v12 + 32] = (v3 >> 3) | 0x80;
        *a2 = v11;
        if (v12 + 1 < *((void *)v11 + 2))
        {
          v15[v12 + 1] = v8 >> (8 * (((_BYTE)v6 - 1) & 7u));
          if (v6 == (char *)1) {
            goto LABEL_29;
          }
          if (v12 + 2 < *((void *)v11 + 2))
          {
            v15[v12 + 2] = v8 >> (8 * (((_BYTE)v6 - 2) & 7u));
            if (v6 == (char *)2) {
              goto LABEL_29;
            }
            if (v12 + 3 < *((void *)v11 + 2))
            {
              v15[v12 + 3] = v8 >> (8 * (((_BYTE)v6 - 3) & 7u));
              if (v6 == (char *)3) {
                goto LABEL_29;
              }
              if (v12 + 4 < *((void *)v11 + 2))
              {
                v15[v12 + 4] = v8 >> (8 * (((_BYTE)v6 - 4) & 7u));
                if (v6 == (char *)4) {
                  goto LABEL_29;
                }
                if (v12 + 5 < *((void *)v11 + 2))
                {
                  v15[v12 + 5] = v8 >> (8 * (((_BYTE)v6 - 5) & 7u));
                  if (v6 == (char *)5) {
                    goto LABEL_29;
                  }
                  if (v12 + 6 < *((void *)v11 + 2))
                  {
                    v15[v12 + 6] = v8 >> (8 * (((_BYTE)v6 - 6) & 7u));
                    if (v6 == (char *)6) {
                      goto LABEL_29;
                    }
                    if (v12 + 7 < *((void *)v11 + 2))
                    {
                      v15[v12 + 7] = v8 >> (8 * (((_BYTE)v6 - 7) & 7u));
                      if (v6 == (char *)7) {
                        goto LABEL_29;
                      }
                      if (v12 + 8 < *((void *)v11 + 2))
                      {
                        v15[v12 + 8] = v8 >> (v3 & 0x38);
LABEL_29:
                        *a2 = v11;
                        return result;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)v11);
        unint64_t v11 = (char *)result;
      }
      __break(1u);
    }
    uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)v6);
    uint64_t v6 = (char *)result;
LABEL_32:
    if (v12 >= *((void *)v6 + 2))
    {
      __break(1u);
    }
    else
    {
      v6[v12 + 32] = v8;
      *a2 = v6;
    }
  }
  return result;
}

uint64_t sub_1A8DC6DB4(char a1, char **a2, uint64_t (*a3)(uint64_t, char **))
{
  uint64_t v6 = v3;
  LOBYTE(v8) = a1;
  int64_t v9 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v11 = *((void *)v9 + 2);
    unint64_t v10 = *((void *)v9 + 3);
    int64_t v12 = v10 >> 1;
    unint64_t v13 = v11 + 1;
    if (v10 >> 1 <= v11)
    {
      int64_t v9 = sub_1A8D96298((char *)(v10 > 1), v11 + 1, 1, v9);
      unint64_t v10 = *((void *)v9 + 3);
      int64_t v12 = v10 >> 1;
    }
    *((void *)v9 + 2) = v13;
    v9[v11 + 32] = v8;
    unint64_t v8 = v11 + 2;
    if (v12 < (uint64_t)(v11 + 2)) {
      int64_t v9 = sub_1A8D96298((char *)(v10 > 1), v11 + 2, 1, v9);
    }
    *((void *)v9 + 2) = v8;
    v9[v13 + 32] = 0;
    *a2 = v9;
    unint64_t v14 = v11 + 1;
    if (__OFSUB__(v8, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    uint64_t result = a3(48, a2);
    a3 = (uint64_t (*)(uint64_t, char **))v6;
    if (v6) {
      return result;
    }
    uint64_t v6 = (uint64_t)*a2;
    unint64_t v16 = *((void *)*a2 + 2);
    unint64_t v11 = v16 - v8;
    if ((uint64_t)(v16 - v8) <= 127) {
      break;
    }
    if (v16 >= v8)
    {
      unint64_t v4 = 71 - __clz(v11);
      int64_t v9 = (char *)(v4 >> 3);
      sub_1A8DC80D4(v4 >> 3, v8, v16);
      uint64_t v6 = (uint64_t)*a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_1A8DAF578(v6);
    uint64_t v6 = result;
LABEL_11:
    if (v14 >= *(void *)(v6 + 16))
    {
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v17 = v6 + 32;
    *(unsigned char *)(v6 + 32 + v14) = (v4 >> 3) | 0x80;
    *a2 = (char *)v6;
    if (v8 < *(void *)(v6 + 16))
    {
      *(unsigned char *)(v17 + v8) = v11 >> (8 * (((_BYTE)v9 - 1) & 7u));
      if (v9 == (char *)1) {
        goto LABEL_32;
      }
      if (v8 + 1 < *(void *)(v6 + 16))
      {
        *(unsigned char *)(v17 + v8 + 1) = v11 >> (8 * (((_BYTE)v9 - 2) & 7u));
        if (v9 == (char *)2) {
          goto LABEL_32;
        }
        if (v8 + 2 < *(void *)(v6 + 16))
        {
          *(unsigned char *)(v17 + v8 + 2) = v11 >> (8 * (((_BYTE)v9 - 3) & 7u));
          if (v9 == (char *)3) {
            goto LABEL_32;
          }
          if (v8 + 3 < *(void *)(v6 + 16))
          {
            *(unsigned char *)(v17 + v8 + 3) = v11 >> (8 * (((_BYTE)v9 - 4) & 7u));
            if (v9 == (char *)4) {
              goto LABEL_32;
            }
            if (v8 + 4 < *(void *)(v6 + 16))
            {
              *(unsigned char *)(v17 + v8 + 4) = v11 >> (8 * (((_BYTE)v9 - 5) & 7u));
              if (v9 == (char *)5) {
                goto LABEL_32;
              }
              if (v8 + 5 < *(void *)(v6 + 16))
              {
                *(unsigned char *)(v17 + v8 + 5) = v11 >> (8 * (((_BYTE)v9 - 6) & 7u));
                if (v9 == (char *)6) {
                  goto LABEL_32;
                }
                if (v8 + 6 < *(void *)(v6 + 16))
                {
                  *(unsigned char *)(v17 + v8 + 6) = v11 >> (8 * (((_BYTE)v9 - 7) & 7u));
                  if (v9 == (char *)7) {
                    goto LABEL_32;
                  }
                  if (v8 + 7 < *(void *)(v6 + 16))
                  {
                    *(unsigned char *)(v17 + v8 + 7) = v11 >> (v4 & 0x38);
LABEL_32:
                    *a2 = (char *)v6;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    int64_t v9 = sub_1A8D96298(0, *((void *)v9 + 2) + 1, 1, v9);
  }
  if ((v11 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_1A8DAF578(v6);
  uint64_t v6 = result;
LABEL_30:
  if (v14 < *(void *)(v6 + 16))
  {
    *(unsigned char *)(v6 + v14 + 32) = v11;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DC70B8(unint64_t a1, char **a2)
{
  uint64_t v6 = *a2;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_33;
  }
  while (1)
  {
    unint64_t v9 = *((void *)v6 + 2);
    unint64_t v8 = *((void *)v6 + 3);
    int64_t v10 = v8 >> 1;
    unint64_t v11 = v9 + 1;
    if (v8 >> 1 <= v9)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A8D96298((char *)(v8 > 1), v9 + 1, 1, v6);
      uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
      unint64_t v8 = *(void *)(isUniquelyReferenced_nonNull_native + 24);
      int64_t v10 = v8 >> 1;
    }
    *((void *)v6 + 2) = v11;
    v6[v9 + 32] = a1;
    unint64_t v12 = v9 + 2;
    if (v10 < (uint64_t)v12)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A8D96298((char *)(v8 > 1), v12, 1, v6);
      uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
    }
    *((void *)v6 + 2) = v12;
    v6[v11 + 32] = 0;
    *a2 = v6;
    unint64_t v13 = v12 - 1;
    if (__OFSUB__(v12, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v18 = 48;
    MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
    uint64_t v17[2] = &v18;
    sub_1A8DCAC0C(2, a2, (uint64_t (*)(char **))sub_1A8DCBD10, (uint64_t)v17);
    uint64_t v6 = *a2;
    unint64_t v14 = *((void *)*a2 + 2);
    unint64_t v2 = v14 - v12;
    if ((uint64_t)(v14 - v12) < 128) {
      break;
    }
    if (v14 >= v12)
    {
      unint64_t v3 = 71 - __clz(v2);
      a1 = v3 >> 3;
      sub_1A8DC80D4(v3 >> 3, v12, v14);
      uint64_t v6 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_10;
      }
      goto LABEL_36;
    }
LABEL_35:
    __break(1u);
LABEL_36:
    uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)v6);
    uint64_t v6 = (char *)result;
LABEL_10:
    if (v13 >= *((void *)v6 + 2))
    {
      __break(1u);
      goto LABEL_38;
    }
    unint64_t v16 = v6 + 32;
    v6[v13 + 32] = (v3 >> 3) | 0x80;
    *a2 = v6;
    if (v12 < *((void *)v6 + 2))
    {
      v16[v12] = v2 >> (8 * ((a1 - 1) & 7));
      if (a1 == 1) {
        goto LABEL_31;
      }
      if (v12 + 1 < *((void *)v6 + 2))
      {
        v16[v12 + 1] = v2 >> (8 * ((a1 - 2) & 7));
        if (a1 == 2) {
          goto LABEL_31;
        }
        if (v12 + 2 < *((void *)v6 + 2))
        {
          v16[v12 + 2] = v2 >> (8 * ((a1 - 3) & 7));
          if (a1 == 3) {
            goto LABEL_31;
          }
          if (v12 + 3 < *((void *)v6 + 2))
          {
            v16[v12 + 3] = v2 >> (8 * ((a1 - 4) & 7));
            if (a1 == 4) {
              goto LABEL_31;
            }
            if (v12 + 4 < *((void *)v6 + 2))
            {
              v16[v12 + 4] = v2 >> (8 * ((a1 - 5) & 7));
              if (a1 == 5) {
                goto LABEL_31;
              }
              if (v12 + 5 < *((void *)v6 + 2))
              {
                v16[v12 + 5] = v2 >> (8 * ((a1 - 6) & 7));
                if (a1 == 6) {
                  goto LABEL_31;
                }
                if (v12 + 6 < *((void *)v6 + 2))
                {
                  v16[v12 + 6] = v2 >> (8 * ((a1 - 7) & 7));
                  if (a1 == 7) {
                    goto LABEL_31;
                  }
                  if (v12 + 7 < *((void *)v6 + 2))
                  {
                    v16[v12 + 7] = v2 >> (v3 & 0x38);
LABEL_31:
                    *a2 = v6;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_33:
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A8D96298(0, *((void *)v6 + 2) + 1, 1, v6);
    uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_29;
  }
LABEL_39:
  uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)v6);
  uint64_t v6 = (char *)result;
LABEL_29:
  if (v13 < *((void *)v6 + 2))
  {
    v6[v13 + 32] = v2;
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DC7404(unint64_t a1, char **a2)
{
  unint64_t v5 = *a2;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_34;
  }
  while (1)
  {
    unint64_t v8 = *((void *)v5 + 2);
    unint64_t v7 = *((void *)v5 + 3);
    int64_t v9 = v7 >> 1;
    unint64_t v10 = v8 + 1;
    if (v7 >> 1 <= v8)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A8D96298((char *)(v7 > 1), v8 + 1, 1, v5);
      unint64_t v5 = (char *)isUniquelyReferenced_nonNull_native;
      unint64_t v7 = *(void *)(isUniquelyReferenced_nonNull_native + 24);
      int64_t v9 = v7 >> 1;
    }
    *((void *)v5 + 2) = v10;
    v5[v8 + 32] = a1;
    unint64_t v11 = v8 + 2;
    if (v9 < (uint64_t)v11)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A8D96298((char *)(v7 > 1), v11, 1, v5);
      unint64_t v5 = (char *)isUniquelyReferenced_nonNull_native;
    }
    *((void *)v5 + 2) = v11;
    v5[v10 + 32] = 0;
    *a2 = v5;
    unint64_t v12 = v11 - 1;
    if (__OFSUB__(v11, 1))
    {
      __break(1u);
    }
    else if (qword_1E97A8B70 == -1)
    {
      goto LABEL_8;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_once();
LABEL_8:
    MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
    void v18[2] = v13;
    sub_1A8DCAC0C(6, a2, (uint64_t (*)(char **))sub_1A8D8F024, (uint64_t)v18);
    unint64_t v5 = *a2;
    unint64_t v14 = *((void *)*a2 + 2);
    unint64_t v15 = v14 - v11;
    if ((uint64_t)(v14 - v11) < 128) {
      break;
    }
    if (v14 < v11)
    {
      __break(1u);
    }
    else
    {
      unint64_t v2 = 71 - __clz(v15);
      a1 = v2 >> 3;
      sub_1A8DC80D4(v2 >> 3, v11, v14);
      unint64_t v5 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_11;
      }
    }
    uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)v5);
    unint64_t v5 = (char *)result;
LABEL_11:
    if (v12 >= *((void *)v5 + 2))
    {
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v17 = v5 + 32;
    v5[v12 + 32] = (v2 >> 3) | 0x80;
    *a2 = v5;
    if (v11 < *((void *)v5 + 2))
    {
      v17[v11] = v15 >> (8 * ((a1 - 1) & 7));
      if (a1 == 1) {
        goto LABEL_32;
      }
      if (v11 + 1 < *((void *)v5 + 2))
      {
        v17[v11 + 1] = v15 >> (8 * ((a1 - 2) & 7));
        if (a1 == 2) {
          goto LABEL_32;
        }
        if (v11 + 2 < *((void *)v5 + 2))
        {
          v17[v11 + 2] = v15 >> (8 * ((a1 - 3) & 7));
          if (a1 == 3) {
            goto LABEL_32;
          }
          if (v11 + 3 < *((void *)v5 + 2))
          {
            v17[v11 + 3] = v15 >> (8 * ((a1 - 4) & 7));
            if (a1 == 4) {
              goto LABEL_32;
            }
            if (v11 + 4 < *((void *)v5 + 2))
            {
              v17[v11 + 4] = v15 >> (8 * ((a1 - 5) & 7));
              if (a1 == 5) {
                goto LABEL_32;
              }
              if (v11 + 5 < *((void *)v5 + 2))
              {
                v17[v11 + 5] = v15 >> (8 * ((a1 - 6) & 7));
                if (a1 == 6) {
                  goto LABEL_32;
                }
                if (v11 + 6 < *((void *)v5 + 2))
                {
                  v17[v11 + 6] = v15 >> (8 * ((a1 - 7) & 7));
                  if (a1 == 7) {
                    goto LABEL_32;
                  }
                  if (v11 + 7 < *((void *)v5 + 2))
                  {
                    v17[v11 + 7] = v15 >> (v2 & 0x38);
LABEL_32:
                    *a2 = v5;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_34:
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A8D96298(0, *((void *)v5 + 2) + 1, 1, v5);
    unint64_t v5 = (char *)isUniquelyReferenced_nonNull_native;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)v5);
  unint64_t v5 = (char *)result;
LABEL_30:
  if (v12 < *((void *)v5 + 2))
  {
    v5[v12 + 32] = v15;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DC7778(unint64_t a1, char **a2)
{
  uint64_t v6 = *a2;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_36;
  }
  while (1)
  {
    unint64_t v9 = *((void *)v6 + 2);
    unint64_t v8 = *((void *)v6 + 3);
    int64_t v10 = v8 >> 1;
    unint64_t v11 = v9 + 1;
    if (v8 >> 1 <= v9)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A8D96298((char *)(v8 > 1), v9 + 1, 1, v6);
      uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
      unint64_t v8 = *(void *)(isUniquelyReferenced_nonNull_native + 24);
      int64_t v10 = v8 >> 1;
    }
    *((void *)v6 + 2) = v11;
    v6[v9 + 32] = a1;
    unint64_t v12 = v9 + 2;
    if (v10 < (uint64_t)v12)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A8D96298((char *)(v8 > 1), v12, 1, v6);
      uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
    }
    *((void *)v6 + 2) = v12;
    v6[v11 + 32] = 0;
    *a2 = v6;
    unint64_t v13 = v12 - 1;
    if (__OFSUB__(v12, 1))
    {
      __break(1u);
    }
    else if (qword_1E97A8B68 == -1)
    {
      goto LABEL_8;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_once();
LABEL_8:
    MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
    void v19[2] = v14;
    sub_1A8DCAC0C(6, a2, (uint64_t (*)(char **))sub_1A8D8F024, (uint64_t)v19);
    uint64_t result = sub_1A8DC7404(0x30uLL, a2);
    if (v2) {
      return result;
    }
    uint64_t v6 = *a2;
    unint64_t v16 = *((void *)*a2 + 2);
    unint64_t v17 = v16 - v12;
    if ((uint64_t)(v16 - v12) <= 127) {
      break;
    }
    if (v16 < v12)
    {
      __break(1u);
    }
    else
    {
      unint64_t v3 = 71 - __clz(v17);
      a1 = v3 >> 3;
      sub_1A8DC80D4(v3 >> 3, v12, v16);
      uint64_t v6 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_12;
      }
    }
    uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)v6);
    uint64_t v6 = (char *)result;
LABEL_12:
    if (v13 >= *((void *)v6 + 2))
    {
      __break(1u);
      goto LABEL_42;
    }
    uint64_t v18 = v6 + 32;
    v6[v13 + 32] = (v3 >> 3) | 0x80;
    *a2 = v6;
    if (v12 < *((void *)v6 + 2))
    {
      v18[v12] = v17 >> (8 * ((a1 - 1) & 7));
      if (a1 == 1) {
        goto LABEL_33;
      }
      if (v12 + 1 < *((void *)v6 + 2))
      {
        v18[v12 + 1] = v17 >> (8 * ((a1 - 2) & 7));
        if (a1 == 2) {
          goto LABEL_33;
        }
        if (v12 + 2 < *((void *)v6 + 2))
        {
          v18[v12 + 2] = v17 >> (8 * ((a1 - 3) & 7));
          if (a1 == 3) {
            goto LABEL_33;
          }
          if (v12 + 3 < *((void *)v6 + 2))
          {
            v18[v12 + 3] = v17 >> (8 * ((a1 - 4) & 7));
            if (a1 == 4) {
              goto LABEL_33;
            }
            if (v12 + 4 < *((void *)v6 + 2))
            {
              v18[v12 + 4] = v17 >> (8 * ((a1 - 5) & 7));
              if (a1 == 5) {
                goto LABEL_33;
              }
              if (v12 + 5 < *((void *)v6 + 2))
              {
                v18[v12 + 5] = v17 >> (8 * ((a1 - 6) & 7));
                if (a1 == 6) {
                  goto LABEL_33;
                }
                if (v12 + 6 < *((void *)v6 + 2))
                {
                  v18[v12 + 6] = v17 >> (8 * ((a1 - 7) & 7));
                  if (a1 == 7) {
                    goto LABEL_33;
                  }
                  if (v12 + 7 < *((void *)v6 + 2))
                  {
                    v18[v12 + 7] = v17 >> (v3 & 0x38);
LABEL_33:
                    *a2 = v6;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_36:
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A8D96298(0, *((void *)v6 + 2) + 1, 1, v6);
    uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
  }
  if ((v17 & 0x8000000000000000) != 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_31;
  }
LABEL_43:
  uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)v6);
  uint64_t v6 = (char *)result;
LABEL_31:
  if (v13 < *((void *)v6 + 2))
  {
    v6[v13 + 32] = v17;
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DC7AFC(char a1, uint64_t (*a2)(char **), uint64_t a3)
{
  unint64_t v5 = v3;
  LOBYTE(v8) = a1;
  unint64_t v9 = *v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v11 = *((void *)v9 + 2);
    unint64_t v10 = *((void *)v9 + 3);
    int64_t v12 = v10 >> 1;
    unint64_t v13 = v11 + 1;
    if (v10 >> 1 <= v11)
    {
      unint64_t v9 = sub_1A8D96298((char *)(v10 > 1), v11 + 1, 1, v9);
      unint64_t v10 = *((void *)v9 + 3);
      int64_t v12 = v10 >> 1;
    }
    *((void *)v9 + 2) = v13;
    v9[v11 + 32] = v8;
    unint64_t v8 = v11 + 2;
    if (v12 < (uint64_t)(v11 + 2)) {
      unint64_t v9 = sub_1A8D96298((char *)(v10 > 1), v11 + 2, 1, v9);
    }
    *((void *)v9 + 2) = v8;
    v9[v13 + 32] = 0;
    *unint64_t v5 = v9;
    unint64_t v9 = (char *)(v11 + 1);
    if (__OFSUB__(v8, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    uint64_t result = a2(v5);
    if (v4) {
      return result;
    }
    a3 = (uint64_t)*v5;
    unint64_t v15 = *((void *)*v5 + 2);
    unint64_t v13 = v15 - v8;
    if ((uint64_t)(v15 - v8) <= 127) {
      break;
    }
    if (v15 >= v8)
    {
      unint64_t v11 = 71 - __clz(v13);
      a2 = (uint64_t (*)(char **))(v11 >> 3);
      sub_1A8DC80D4(v11 >> 3, v8, v15);
      a3 = (uint64_t)*v5;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_1A8DAF578(a3);
    a3 = result;
LABEL_11:
    if ((unint64_t)v9 >= *(void *)(a3 + 16))
    {
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v16 = a3 + 32;
    v9[a3 + 32] = (v11 >> 3) | 0x80;
    *unint64_t v5 = (char *)a3;
    if (v8 < *(void *)(a3 + 16))
    {
      *(unsigned char *)(v16 + v8) = v13 >> (8 * (((_BYTE)a2 - 1) & 7u));
      if (a2 == (uint64_t (*)(char **))1) {
        goto LABEL_32;
      }
      if (v8 + 1 < *(void *)(a3 + 16))
      {
        *(unsigned char *)(v16 + v8 + 1) = v13 >> (8 * (((_BYTE)a2 - 2) & 7u));
        if (a2 == (uint64_t (*)(char **))2) {
          goto LABEL_32;
        }
        if (v8 + 2 < *(void *)(a3 + 16))
        {
          *(unsigned char *)(v16 + v8 + 2) = v13 >> (8 * (((_BYTE)a2 - 3) & 7u));
          if (a2 == (uint64_t (*)(char **))3) {
            goto LABEL_32;
          }
          if (v8 + 3 < *(void *)(a3 + 16))
          {
            *(unsigned char *)(v16 + v8 + 3) = v13 >> (8 * (((_BYTE)a2 - 4) & 7u));
            if (a2 == (uint64_t (*)(char **))4) {
              goto LABEL_32;
            }
            if (v8 + 4 < *(void *)(a3 + 16))
            {
              *(unsigned char *)(v16 + v8 + 4) = v13 >> (8 * (((_BYTE)a2 - 5) & 7u));
              if (a2 == (uint64_t (*)(char **))5) {
                goto LABEL_32;
              }
              if (v8 + 5 < *(void *)(a3 + 16))
              {
                *(unsigned char *)(v16 + v8 + 5) = v13 >> (8 * (((_BYTE)a2 - 6) & 7u));
                if (a2 == (uint64_t (*)(char **))6) {
                  goto LABEL_32;
                }
                if (v8 + 6 < *(void *)(a3 + 16))
                {
                  *(unsigned char *)(v16 + v8 + 6) = v13 >> (8 * (((_BYTE)a2 - 7) & 7u));
                  if (a2 == (uint64_t (*)(char **))7) {
                    goto LABEL_32;
                  }
                  if (v8 + 7 < *(void *)(a3 + 16))
                  {
                    *(unsigned char *)(v16 + v8 + 7) = v13 >> (v11 & 0x38);
LABEL_32:
                    *unint64_t v5 = (char *)a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    unint64_t v9 = sub_1A8D96298(0, *((void *)v9 + 2) + 1, 1, v9);
  }
  if ((v13 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_1A8DAF578(a3);
  a3 = result;
LABEL_30:
  if ((unint64_t)v9 < *(void *)(a3 + 16))
  {
    v9[a3 + 32] = v13;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DC7E04(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  if (*(unsigned char *)(a2 + 48))
  {
    sub_1A8DCBC5C(a2, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
    sub_1A8DE8FC4(v4, v5, v6, v7);
    return sub_1A8DCBC5C(v2, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  }
  else
  {
    uint64_t v8 = v7 >> 1;
    if (v6 != v7 >> 1)
    {
      sub_1A8DCBC5C(a2, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
      unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v36 = v4;
      uint64_t result = swift_unknownObjectRetain();
      unint64_t v25 = v7 & 0xFFFFFFFFFFFFFFFELL;
      while (v6 < (uint64_t)(v7 >> 1))
      {
        if (v8 <= v6) {
          goto LABEL_38;
        }
        if (v7 >> 1 < v8) {
          goto LABEL_39;
        }
        int64_t v12 = (unsigned __int8 *)(v5 + 48 * v6);
        uint64_t v13 = *v12;
        uint64_t v14 = v6 + 1;
        unint64_t v15 = v7 & 1;
        if ((v13 & 0x20) != 0)
        {
          uint64_t v16 = *((void *)v12 + 1);
          if (v14 == v8)
          {
            uint64_t v17 = v8;
          }
          else
          {
            uint64_t v18 = (uint64_t *)(v5 + 56 + 48 * v6);
            uint64_t v17 = v6 + 1;
            do
            {
              if (v17 >= v8)
              {
                __break(1u);
LABEL_36:
                __break(1u);
                goto LABEL_37;
              }
              if (v16 >= *v18) {
                goto LABEL_20;
              }
              uint64_t v19 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_36;
              }
              ++v17;
              v18 += 6;
            }
            while (v19 != v8);
            uint64_t v17 = v8;
LABEL_20:
            if (v17 <= v6) {
              goto LABEL_40;
            }
            if (v17 < 0) {
              goto LABEL_41;
            }
          }
          uint64_t v20 = v17 - v14;
          if (__OFSUB__(v17, v14)) {
            goto LABEL_42;
          }
          if (v20 < 0) {
            goto LABEL_43;
          }
          uint64_t v21 = v8 - v14;
          if (__OFSUB__(v8, v14)) {
            goto LABEL_44;
          }
          uint64_t v22 = v3;
          if (!v20 || v21 < 0 || (uint64_t v23 = v8, v21 >= v20))
          {
            uint64_t v23 = v17;
            if (__OFADD__(v14, v20)) {
              goto LABEL_47;
            }
            if (v8 < v17) {
              goto LABEL_45;
            }
          }
          if (v23 <= v6) {
            goto LABEL_46;
          }
          sub_1A8DCA094(v36, v5, v14, v15 | (2 * v17), v16, v29);
          long long v26 = v29[1];
          long long v28 = v29[0];
          uint64_t v10 = v30;
          swift_unknownObjectRetain();
          long long v11 = v28;
          uint64_t v14 = v23;
          uint64_t v3 = v22;
          unint64_t v9 = v25;
        }
        else
        {
          long long v27 = *((_OWORD *)v12 + 1);
          uint64_t result = *((void *)v12 + 2);
          if (!(void)v27) {
            goto LABEL_48;
          }
          long long v26 = *((_OWORD *)v12 + 2);
          swift_unknownObjectRetain();
          uint64_t v10 = 0;
          long long v11 = v27;
        }
        v31[0] = v13;
        unint64_t v7 = v15 | v9;
        long long v32 = v11;
        long long v33 = v26;
        uint64_t v34 = v10;
        BOOL v35 = (v13 & 0x20) == 0;
        uint64_t result = sub_1A8DC62F4(v13, v3, (uint64_t)v31);
        uint64_t v6 = v14;
        if (v14 == v8)
        {
          swift_unknownObjectRelease();
          uint64_t v2 = a2;
          return sub_1A8DCBC5C(v2, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
        }
      }
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1A8DC80D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 1) {
    goto LABEL_28;
  }
  uint64_t v6 = a3;
  uint64_t v7 = *v4;
  uint64_t v8 = *(void *)(*v4 + 16);
  uint64_t v9 = v8 - a3;
  if (__OFSUB__(v8, a3)) {
    goto LABEL_29;
  }
  uint64_t v3 = a2;
  uint64_t v5 = result;
  if (v9 >= result) {
    goto LABEL_13;
  }
  uint64_t v10 = result - v9;
  if (__OFSUB__(result, v9))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v10 < 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    uint64_t result = (uint64_t)sub_1A8D96298(0, v8 + 1, 1, (char *)v7);
    uint64_t v7 = result;
LABEL_8:
    unint64_t v11 = *(void *)(v7 + 16);
    do
    {
      unint64_t v12 = *(void *)(v7 + 24);
      if (v11 >= v12 >> 1)
      {
        uint64_t result = (uint64_t)sub_1A8D96298((char *)(v12 > 1), v11 + 1, 1, (char *)v7);
        uint64_t v7 = result;
      }
      *(void *)(v7 + 16) = v11 + 1;
      *(unsigned char *)(v7 + v11++ + 32) = 0;
      --v10;
    }
    while (v10);
    *uint64_t v4 = v7;
    goto LABEL_13;
  }
  if (v10)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_13:
  if (v6 == v3) {
    return result;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_30;
  }
  do
  {
    while (1)
    {
      if (v6 <= v3)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      unint64_t v13 = v6 - 1 + v5;
      if (__OFADD__(v6 - 1, v5)) {
        goto LABEL_24;
      }
      unint64_t v14 = v6 - 1;
      if (v6 < 1) {
        goto LABEL_25;
      }
      unint64_t v15 = *(void *)(v7 + 16);
      if (v14 >= v15) {
        goto LABEL_26;
      }
      if (v13 < v15) {
        break;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      uint64_t result = (uint64_t)sub_1A8DAF578(v7);
      uint64_t v7 = result;
    }
    *(unsigned char *)(v7 + 32 + v13) = *(unsigned char *)(v7 + v6-- + 31);
  }
  while (v14 != v3);
  *uint64_t v4 = v7;
  return result;
}

uint64_t sub_1A8DC825C(uint64_t *a1, unsigned char *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_1A8DC86D4(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t *, unsigned char *))ChaChaPoly.Nonce.makeIterator());
}

size_t sub_1A8DC8274(size_t *a1, unsigned char *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  v23[0] = a4;
  v23[1] = a5;
  v23[2] = a6;
  _OWORD v23[3] = a7;
  size_t v10 = sub_1A8D891D0((size_t)v23, (unint64_t)&v24);
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000) != 0) {
        goto LABEL_26;
      }
      size_t v11 = *(void *)(v10 + 16);
      if (v11)
      {
        *a2 = *(unsigned char *)(v10 + 32);
        unint64_t v12 = a3 - 1;
        if (a3 != 1)
        {
          if (v11 - 1 < v12) {
            unint64_t v12 = v11 - 1;
          }
          if (v12 >= a3 - 2) {
            unint64_t v12 = a3 - 2;
          }
          unint64_t v13 = v12 + 1;
          if (v13 <= 0x10 || ((unint64_t)&a2[-v10] & 0xFFFFFFFFFFFFFFF0) == 0x20)
          {
            uint64_t v14 = 1;
            unint64_t v15 = a2;
          }
          else
          {
            uint64_t v16 = v13 & 0xF;
            if ((v13 & 0xF) == 0) {
              uint64_t v16 = 16;
            }
            unint64_t v17 = v13 - v16;
            uint64_t v14 = v13 - v16 + 1;
            unint64_t v15 = &a2[v17];
            uint64_t v18 = a2 + 1;
            uint64_t v19 = (long long *)(v10 + 33);
            do
            {
              long long v20 = *v19++;
              *v18++ = v20;
              v17 -= 16;
            }
            while (v17);
          }
          uint64_t v21 = v15 + 1;
          while (a3 != v14)
          {
            if (v11 == v14) {
              goto LABEL_23;
            }
            *v21++ = *(unsigned char *)(v10 + 32 + v14);
            if (a3 == ++v14) {
              goto LABEL_24;
            }
          }
          __break(1u);
LABEL_26:
          __break(1u);
        }
      }
      else
      {
LABEL_23:
        a3 = v11;
      }
    }
  }
  else
  {
    a3 = 0;
  }
LABEL_24:
  *a1 = v10;
  a1[1] = a3;
  return a3;
}

size_t sub_1A8DC83D4(size_t *a1, unsigned char *a2, size_t a3)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  long long v7 = v3[1];
  v21[0] = *v3;
  v21[1] = v7;
  v21[2] = v3[2];
  size_t v8 = sub_1A8D891D0((size_t)v21, (unint64_t)v22);
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000) != 0) {
        goto LABEL_26;
      }
      size_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        *a2 = *(unsigned char *)(v8 + 32);
        unint64_t v10 = a3 - 1;
        if (a3 != 1)
        {
          if (v9 - 1 < v10) {
            unint64_t v10 = v9 - 1;
          }
          if (v10 >= a3 - 2) {
            unint64_t v10 = a3 - 2;
          }
          unint64_t v11 = v10 + 1;
          if (v11 <= 0x10 || ((unint64_t)&a2[-v8] & 0xFFFFFFFFFFFFFFF0) == 0x20)
          {
            uint64_t v12 = 1;
            unint64_t v13 = a2;
          }
          else
          {
            uint64_t v14 = v11 & 0xF;
            if ((v11 & 0xF) == 0) {
              uint64_t v14 = 16;
            }
            unint64_t v15 = v11 - v14;
            uint64_t v12 = v11 - v14 + 1;
            unint64_t v13 = &a2[v15];
            uint64_t v16 = a2 + 1;
            unint64_t v17 = (long long *)(v8 + 33);
            do
            {
              long long v18 = *v17++;
              *v16++ = v18;
              v15 -= 16;
            }
            while (v15);
          }
          uint64_t v19 = v13 + 1;
          while (a3 != v12)
          {
            if (v9 == v12) {
              goto LABEL_23;
            }
            *v19++ = *(unsigned char *)(v8 + 32 + v12);
            if (a3 == ++v12) {
              goto LABEL_24;
            }
          }
          __break(1u);
LABEL_26:
          __break(1u);
        }
      }
      else
      {
LABEL_23:
        a3 = v9;
      }
    }
  }
  else
  {
    a3 = 0;
  }
LABEL_24:
  *a1 = v8;
  a1[1] = a3;
  return a3;
}

size_t sub_1A8DC853C(size_t *a1, unsigned char *a2, size_t a3)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  long long v7 = v3[1];
  v22[0] = *v3;
  v22[1] = v7;
  long long v8 = v3[3];
  void v22[2] = v3[2];
  _OWORD v22[3] = v8;
  size_t v9 = sub_1A8D891D0((size_t)v22, (unint64_t)v23);
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000) != 0) {
        goto LABEL_26;
      }
      size_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        *a2 = *(unsigned char *)(v9 + 32);
        unint64_t v11 = a3 - 1;
        if (a3 != 1)
        {
          if (v10 - 1 < v11) {
            unint64_t v11 = v10 - 1;
          }
          if (v11 >= a3 - 2) {
            unint64_t v11 = a3 - 2;
          }
          unint64_t v12 = v11 + 1;
          if (v12 <= 0x10 || ((unint64_t)&a2[-v9] & 0xFFFFFFFFFFFFFFF0) == 0x20)
          {
            uint64_t v13 = 1;
            uint64_t v14 = a2;
          }
          else
          {
            uint64_t v15 = v12 & 0xF;
            if ((v12 & 0xF) == 0) {
              uint64_t v15 = 16;
            }
            unint64_t v16 = v12 - v15;
            uint64_t v13 = v12 - v15 + 1;
            uint64_t v14 = &a2[v16];
            unint64_t v17 = a2 + 1;
            long long v18 = (long long *)(v9 + 33);
            do
            {
              long long v19 = *v18++;
              *v17++ = v19;
              v16 -= 16;
            }
            while (v16);
          }
          long long v20 = v14 + 1;
          while (a3 != v13)
          {
            if (v10 == v13) {
              goto LABEL_23;
            }
            *v20++ = *(unsigned char *)(v9 + 32 + v13);
            if (a3 == ++v13) {
              goto LABEL_24;
            }
          }
          __break(1u);
LABEL_26:
          __break(1u);
        }
      }
      else
      {
LABEL_23:
        a3 = v10;
      }
    }
  }
  else
  {
    a3 = 0;
  }
LABEL_24:
  *a1 = v9;
  a1[1] = a3;
  return a3;
}

uint64_t sub_1A8DC86A4(uint64_t *a1, unsigned char *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_1A8DC86D4(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t *, unsigned char *))AES.CCM.Nonce.makeIterator());
}

uint64_t sub_1A8DC86BC(uint64_t *a1, unsigned char *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_1A8DC86D4(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t *, unsigned char *))AES.GCM.Nonce.makeIterator());
}

uint64_t sub_1A8DC86D4(uint64_t *a1, unsigned char *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(uint64_t *, unsigned char *))
{
  uint64_t v11 = a6(a1, a2);
  unint64_t v13 = v12;
  uint64_t result = sub_1A8D8BD58(a4, a5);
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    *a1 = v11;
    a1[1] = v13;
    return a3;
  }
  if (a3 < 0) {
    goto LABEL_28;
  }
  unint64_t v15 = *(void *)(v11 + 16);
  if (v13 == v15)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (v13 < v15)
  {
    unint64_t v16 = v13 + 1;
    *a2 = *(unsigned char *)(v11 + 32 + v13);
    unint64_t v17 = a3 - 1;
    if (a3 == 1)
    {
      ++v13;
      goto LABEL_6;
    }
    unint64_t v18 = a3 - 2;
    if (a3 - 2 >= v15 + ~v13) {
      unint64_t v18 = v15 + ~v13;
    }
    if (v18 < v17) {
      unint64_t v17 = v18;
    }
    unint64_t v19 = v17 + 1;
    if (v19 <= 0x10 || ((unint64_t)&a2[-v13 - v11] & 0xFFFFFFFFFFFFFFF0) == 0x20)
    {
      uint64_t v20 = 1;
      uint64_t v21 = a2;
    }
    else
    {
      uint64_t v22 = v19 & 0xF;
      if ((v19 & 0xF) == 0) {
        uint64_t v22 = 16;
      }
      unint64_t v23 = v19 - v22;
      uint64_t v20 = v19 - v22 + 1;
      v16 += v23;
      uint64_t v21 = &a2[v23];
      uint64_t v24 = a2 + 1;
      unint64_t v25 = (long long *)(v13 + v11 + 33);
      do
      {
        long long v26 = *v25++;
        *v24++ = v26;
        v23 -= 16;
      }
      while (v23);
    }
    long long v27 = v21 + 1;
    while (a3 != v20)
    {
      if (v15 == v16)
      {
        unint64_t v13 = v15;
        a3 = v20;
        goto LABEL_6;
      }
      ++v20;
      unint64_t v13 = v16 + 1;
      *v27++ = *(unsigned char *)(v11 + 32 + v16++);
      if (a3 == v20) {
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DC8858(void *a1, unsigned char *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  size_t v10 = sub_1A8DC3FD4(a4, a5);
  unint64_t v12 = v11;
  uint64_t result = sub_1A8D8BD58(a4, a5);
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    *a1 = v10;
    a1[1] = v12;
    return a3;
  }
  if (a3 < 0) {
    goto LABEL_28;
  }
  unint64_t v14 = v10[2];
  if (v12 == v14)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (v12 < v14)
  {
    unint64_t v15 = v12 + 1;
    *a2 = *((unsigned char *)v10 + v12 + 32);
    unint64_t v16 = a3 - 1;
    if (a3 == 1)
    {
      ++v12;
      goto LABEL_6;
    }
    unint64_t v17 = a3 - 2;
    if (a3 - 2 >= v14 + ~v12) {
      unint64_t v17 = v14 + ~v12;
    }
    if (v17 < v16) {
      unint64_t v16 = v17;
    }
    unint64_t v18 = v16 + 1;
    if (v18 <= 0x10 || ((a2 - ((char *)v10 + v12)) & 0xFFFFFFFFFFFFFFF0) == 0x20)
    {
      uint64_t v19 = 1;
      uint64_t v20 = a2;
    }
    else
    {
      uint64_t v21 = v18 & 0xF;
      if ((v18 & 0xF) == 0) {
        uint64_t v21 = 16;
      }
      unint64_t v22 = v18 - v21;
      uint64_t v19 = v18 - v21 + 1;
      v15 += v22;
      uint64_t v20 = &a2[v22];
      unint64_t v23 = a2 + 1;
      uint64_t v24 = (long long *)((char *)v10 + v12 + 33);
      do
      {
        long long v25 = *v24++;
        *v23++ = v25;
        v22 -= 16;
      }
      while (v22);
    }
    long long v26 = v20 + 1;
    while (a3 != v19)
    {
      if (v14 == v15)
      {
        unint64_t v12 = v14;
        a3 = v19;
        goto LABEL_6;
      }
      ++v19;
      unint64_t v12 = v15 + 1;
      *v26++ = *((unsigned char *)v10 + v15++ + 32);
      if (a3 == v19) {
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DC89D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  int64_t v6 = v3[2];
  long long v30 = *(_OWORD *)(v3 + 3);
  if (!a2) {
    goto LABEL_5;
  }
  uint64_t v7 = a3;
  if (!a3)
  {
LABEL_6:
    *(void *)uint64_t result = v4;
    *(void *)(result + 8) = v5;
    *(void *)(result + 16) = v6;
    *(_OWORD *)(result + 24) = v30;
    return v7;
  }
  if (a3 < 0) {
    goto LABEL_68;
  }
  int64_t v8 = (unint64_t)v30 >> 1;
  if (v6 == (unint64_t)v30 >> 1)
  {
LABEL_5:
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  uint64_t v29 = v4;
  uint64_t v26 = result;
  if (v6 >= (uint64_t)((unint64_t)v30 >> 1))
  {
LABEL_48:
    __break(1u);
LABEL_49:
    uint64_t result = v26;
    uint64_t v4 = v29;
    uint64_t v5 = v31;
    goto LABEL_6;
  }
  uint64_t v9 = a2;
  uint64_t v27 = v5 + 104;
  uint64_t v10 = 1;
  uint64_t v31 = v5;
  while (1)
  {
    if (v8 <= v6) {
      goto LABEL_53;
    }
    unint64_t v11 = (char *)(v5 + 48 * v6);
    char v12 = *v11;
    int64_t v13 = v6 + 1;
    if ((*v11 & 0x20) == 0)
    {
      uint64_t result = *((void *)v11 + 2);
      if (!result) {
        goto LABEL_70;
      }
      uint64_t v5 = *((void *)v11 + 3);
      int64_t v14 = *((void *)v11 + 4);
      uint64_t v15 = *((void *)v11 + 5);
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v16 = 0;
      int64_t v6 = v13;
      goto LABEL_45;
    }
    uint64_t v16 = *((void *)v11 + 1);
    int64_t v17 = (unint64_t)v30 >> 1;
    if (v13 != v8) {
      break;
    }
LABEL_25:
    int64_t v20 = v17 - v13;
    if (__OFSUB__(v17, v13)) {
      goto LABEL_58;
    }
    if (v20 < 0) {
      goto LABEL_59;
    }
    int64_t v21 = v8 - v13;
    if (__OFSUB__(v8, v13)) {
      goto LABEL_60;
    }
    if (!v20 || v21 < 0 || (int64_t v22 = (unint64_t)v30 >> 1, v21 >= v20))
    {
      int64_t v22 = v17;
      if (__OFADD__(v13, v20)) {
        goto LABEL_63;
      }
      if (v8 < v17) {
        goto LABEL_61;
      }
    }
    if (v22 <= v6) {
      goto LABEL_62;
    }
    if (v13 != v17)
    {
      if (v13 >= v17) {
        goto LABEL_65;
      }
      uint64_t v23 = *(void *)(v5 + 48 * v13 + 8);
      if (v16 >= v23) {
        goto LABEL_66;
      }
      int64_t v24 = v6 + 2;
      if (v6 + 2 != v17)
      {
        if (v6 + 2 >= v17) {
          goto LABEL_69;
        }
        long long v25 = (void *)(v27 + 48 * v6);
        while (v24 > v6)
        {
          if (v16 >= *v25) {
            goto LABEL_52;
          }
          ++v24;
          v25 += 6;
          if (v17 == v24) {
            goto LABEL_43;
          }
        }
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
LABEL_43:
      if (v23 != v16 + 1) {
        goto LABEL_67;
      }
    }
    uint64_t v15 = v30 & 1 | (2 * v17);
    uint64_t result = swift_unknownObjectRetain();
    int64_t v14 = v13;
    int64_t v6 = v22;
    uint64_t v7 = a3;
LABEL_45:
    *(unsigned char *)uint64_t v9 = v12;
    *(void *)(v9 + 8) = result;
    *(void *)(v9 + 16) = v5;
    *(void *)(v9 + 24) = v14;
    *(void *)(v9 + 32) = v15;
    *(void *)(v9 + 40) = v16;
    *(unsigned char *)(v9 + 48) = (v12 & 0x20) == 0;
    if (v10 == v7) {
      goto LABEL_49;
    }
    uint64_t v5 = v31;
    if (v6 == v8)
    {
      int64_t v6 = (unint64_t)v30 >> 1;
      uint64_t v7 = v10;
      uint64_t result = v26;
      uint64_t v4 = v29;
      goto LABEL_6;
    }
    ++v10;
    v9 += 56;
    if (v6 >= v8) {
      goto LABEL_48;
    }
  }
  if (v13 >= v8) {
    goto LABEL_64;
  }
  int64_t v17 = v6 + 1;
  if (v16 >= *(void *)(v5 + 48 * v13 + 8))
  {
LABEL_24:
    if (v17 < 0) {
      goto LABEL_57;
    }
    goto LABEL_25;
  }
  int64_t v17 = (unint64_t)v30 >> 1;
  if (v6 + 2 == v8)
  {
LABEL_23:
    if (v17 <= v6) {
      goto LABEL_56;
    }
    goto LABEL_24;
  }
  unint64_t v18 = (void *)(v27 + 48 * v6);
  int64_t v17 = v6 + 2;
  while (v17 < v8)
  {
    if (v16 >= *v18) {
      goto LABEL_23;
    }
    int64_t v19 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_55;
    }
    ++v17;
    v18 += 6;
    if (v19 == v8)
    {
      int64_t v17 = (unint64_t)v30 >> 1;
      goto LABEL_23;
    }
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
  return result;
}

size_t sub_1A8DC8CCC(size_t *a1, unsigned char *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  v22[0] = a4;
  v22[1] = a5;
  v23[0] = a6;
  size_t v9 = sub_1A8D891D0((size_t)v22, (unint64_t)v23 + 4);
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000) != 0) {
        goto LABEL_26;
      }
      size_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        *a2 = *(unsigned char *)(v9 + 32);
        unint64_t v11 = a3 - 1;
        if (a3 != 1)
        {
          if (v10 - 1 < v11) {
            unint64_t v11 = v10 - 1;
          }
          if (v11 >= a3 - 2) {
            unint64_t v11 = a3 - 2;
          }
          unint64_t v12 = v11 + 1;
          if (v12 <= 0x10 || ((unint64_t)&a2[-v9] & 0xFFFFFFFFFFFFFFF0) == 0x20)
          {
            uint64_t v13 = 1;
            int64_t v14 = a2;
          }
          else
          {
            uint64_t v15 = v12 & 0xF;
            if ((v12 & 0xF) == 0) {
              uint64_t v15 = 16;
            }
            unint64_t v16 = v12 - v15;
            uint64_t v13 = v12 - v15 + 1;
            int64_t v14 = &a2[v16];
            int64_t v17 = a2 + 1;
            unint64_t v18 = (long long *)(v9 + 33);
            do
            {
              long long v19 = *v18++;
              *v17++ = v19;
              v16 -= 16;
            }
            while (v16);
          }
          int64_t v20 = v14 + 1;
          while (a3 != v13)
          {
            if (v10 == v13) {
              goto LABEL_23;
            }
            *v20++ = *(unsigned char *)(v9 + 32 + v13);
            if (a3 == ++v13) {
              goto LABEL_24;
            }
          }
          __break(1u);
LABEL_26:
          __break(1u);
        }
      }
      else
      {
LABEL_23:
        a3 = v10;
      }
    }
  }
  else
  {
    a3 = 0;
  }
LABEL_24:
  *a1 = v9;
  a1[1] = a3;
  return a3;
}

size_t sub_1A8DC8E2C(size_t *a1, unsigned char *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  v21[0] = a4;
  v21[1] = a5;
  size_t v8 = sub_1A8D891D0((size_t)v21, (unint64_t)&v22);
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000) != 0) {
        goto LABEL_26;
      }
      size_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        *a2 = *(unsigned char *)(v8 + 32);
        unint64_t v10 = a3 - 1;
        if (a3 != 1)
        {
          if (v9 - 1 < v10) {
            unint64_t v10 = v9 - 1;
          }
          if (v10 >= a3 - 2) {
            unint64_t v10 = a3 - 2;
          }
          unint64_t v11 = v10 + 1;
          if (v11 <= 0x10 || ((unint64_t)&a2[-v8] & 0xFFFFFFFFFFFFFFF0) == 0x20)
          {
            uint64_t v12 = 1;
            uint64_t v13 = a2;
          }
          else
          {
            uint64_t v14 = v11 & 0xF;
            if ((v11 & 0xF) == 0) {
              uint64_t v14 = 16;
            }
            unint64_t v15 = v11 - v14;
            uint64_t v12 = v11 - v14 + 1;
            uint64_t v13 = &a2[v15];
            unint64_t v16 = a2 + 1;
            int64_t v17 = (long long *)(v8 + 33);
            do
            {
              long long v18 = *v17++;
              *v16++ = v18;
              v15 -= 16;
            }
            while (v15);
          }
          long long v19 = v13 + 1;
          while (a3 != v12)
          {
            if (v9 == v12) {
              goto LABEL_23;
            }
            *v19++ = *(unsigned char *)(v8 + 32 + v12);
            if (a3 == ++v12) {
              goto LABEL_24;
            }
          }
          __break(1u);
LABEL_26:
          __break(1u);
        }
      }
      else
      {
LABEL_23:
        a3 = v9;
      }
    }
  }
  else
  {
    a3 = 0;
  }
LABEL_24:
  *a1 = v8;
  a1[1] = a3;
  return a3;
}

uint64_t sub_1A8DC8F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v13)(uint64_t *__return_ptr, char *);
  void (*v14)(uint64_t *__return_ptr, char *);
  void (**v15)(uint64_t *__return_ptr, char *);
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v27 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8FB8);
  MEMORY[0x1F4188790](v6);
  size_t v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = v3[1];
  unint64_t v10 = v3[2];
  uint64_t v26 = *v3;
  *size_t v8 = v26;
  v8[1] = 0;
  switch(v10 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_1A8D8BE04(v9, v10);
      break;
    default:
      break;
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8FC8);
  sub_1A8DE9510();
  sub_1A8D8BD58(v9, v10);
  uint64_t v12 = *(int *)(v11 + 56);
  *((unsigned char *)v8 + v12) = 0;
  uint64_t v14 = (void (*)(uint64_t *__return_ptr, char *))v3[3];
  uint64_t v13 = (void (*)(uint64_t *__return_ptr, char *))v3[4];
  unint64_t v15 = (void (**)(uint64_t *__return_ptr, char *))((char *)v8 + *(int *)(v6 + 44));
  *unint64_t v15 = v14;
  v15[1] = v13;
  if (v27)
  {
    if (a3)
    {
      if (a3 < 0)
      {
        __break(1u);
        JUMPOUT(0x1A8DC91E0);
      }
      if (*(void *)(v26 + 16))
      {
        uint64_t v22 = v12;
        uint64_t v23 = a1;
        long long v25 = v26 + 32;
        int64_t v24 = sub_1A8DE9500();
        sub_1A8D93470();
        unint64_t v16 = a3;
        a3 = 0;
        int64_t v21 = v16;
        a1 = v16 - 1;
        while (1)
        {
          int64_t v17 = *(unsigned char *)(v25 + a3);
          long long v18 = a3 + 1;
          sub_1A8DE9980();
          if ((v28 & 0x100000000) != 0)
          {
            v8[1] = v18;
            goto LABEL_18;
          }
          BYTE1(v28) = v17;
          BYTE2(v28) = BYTE3(v28);
          v14(&v28, (char *)&v28 + 1);
          *(unsigned char *)(v27 + a3) = v28;
          if (a1 == a3)
          {
            a3 = v21;
            v8[1] = v21;
            a1 = v23;
            goto LABEL_20;
          }
          long long v19 = *(void *)(v26 + 16);
          if (v18 == v19) {
            break;
          }
          ++a3;
          if (v18 >= v19)
          {
            __break(1u);
            goto LABEL_13;
          }
        }
        v8[1] = ++a3;
LABEL_18:
        uint64_t v12 = v22;
        a1 = v23;
      }
      else
      {
        a3 = 0;
      }
      *((unsigned char *)v8 + v12) = 1;
    }
  }
  else
  {
LABEL_13:
    a3 = 0;
  }
LABEL_20:
  sub_1A8D8ECD0((uint64_t)v8, a1, &qword_1E97A8FB8);
  return a3;
}

uint64_t sub_1A8DC91F0(uint64_t result, unsigned char *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    goto LABEL_23;
  }
  if (!a3)
  {
LABEL_22:
    uint64_t v5 = a3;
    goto LABEL_23;
  }
  if (a3 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v5 = a4;
  if (!a4)
  {
LABEL_23:
    *(void *)uint64_t result = a4;
    *(unsigned char *)(result + 8) = a5;
    *(void *)(result + 16) = v5;
    return v5;
  }
  unint64_t v6 = a4 - 1;
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 != 1)
    {
      if (a3 - 2 < v6) {
        unint64_t v6 = a3 - 2;
      }
      if (v6 >= a3 - 1) {
        unint64_t v6 = a3 - 1;
      }
      unint64_t v7 = v6 + 1;
      if (v7 > 0x10)
      {
        uint64_t v10 = v7 & 0xF;
        if ((v7 & 0xF) == 0) {
          uint64_t v10 = 16;
        }
        unint64_t v11 = v7 - v10;
        uint64_t v8 = v7 - v10 + 1;
        uint64_t v9 = &a2[v11];
        int8x16_t v12 = vdupq_n_s8(a5);
        uint64_t v13 = (int8x16_t *)(a2 + 1);
        do
        {
          *v13++ = v12;
          v11 -= 16;
        }
        while (v11);
      }
      else
      {
        uint64_t v8 = 1;
        uint64_t v9 = a2;
      }
      uint64_t v14 = v9 + 1;
      while (a3 != v8)
      {
        if (a4 == v8)
        {
          uint64_t v5 = a4;
          goto LABEL_23;
        }
        ++v8;
        *v14++ = a5;
        if (a3 == v8) {
          goto LABEL_22;
        }
      }
      __break(1u);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1A8DC92C8(uint64_t a1, uint64_t a2)
{
  return sub_1A8DC97D0(a1, a2, (uint64_t (*)(void))ChaChaPoly.Nonce.makeIterator());
}

void *sub_1A8DC92E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  v25[0] = a1;
  v25[1] = a2;
  _OWORD v25[2] = a3;
  _OWORD v25[3] = a4;
  size_t v4 = sub_1A8D891D0((size_t)v25, (unint64_t)&v26);
  uint64_t v5 = *(void *)(v4 + 16);
  unint64_t v6 = (void *)MEMORY[0x1E4FBC860];
  size_t v7 = 0;
  if (v5)
  {
    uint64_t v8 = (unsigned char *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v9 = (char *)(v4 + 32);
    while (1)
    {
      char v11 = *v9++;
      char v10 = v11;
      if (!v7)
      {
        unint64_t v12 = v6[3];
        if ((uint64_t)((v12 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_24;
        }
        int64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
        if (v13 <= 1) {
          uint64_t v14 = 1;
        }
        else {
          uint64_t v14 = v13;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A0);
        unint64_t v15 = (void *)swift_allocObject();
        size_t v16 = 2 * _swift_stdlib_malloc_size(v15) - 64;
        _OWORD v15[2] = v14;
        v15[3] = v16;
        unint64_t v17 = (unint64_t)(v15 + 4);
        size_t v18 = v6[3] >> 1;
        if (v6[2])
        {
          if (v15 != v6 || v17 >= (unint64_t)v6 + v18 + 32) {
            memmove(v15 + 4, v6 + 4, v18);
          }
          uint64_t v6[2] = 0;
        }
        uint64_t v8 = (unsigned char *)(v17 + v18);
        size_t v7 = (v16 >> 1) - v18;
        swift_release();
        unint64_t v6 = v15;
      }
      BOOL v20 = __OFSUB__(v7--, 1);
      if (v20) {
        break;
      }
      *v8++ = v10;
      if (!--v5) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
LABEL_19:
  swift_release();
  unint64_t v21 = v6[3];
  if (v21 >= 2)
  {
    unint64_t v22 = v21 >> 1;
    BOOL v20 = __OFSUB__(v22, v7);
    unint64_t v23 = v22 - v7;
    if (v20) {
      goto LABEL_25;
    }
    uint64_t v6[2] = v23;
  }
  return v6;
}

void *sub_1A8DC9470(_OWORD *a1)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  long long v1 = a1[1];
  v23[0] = *a1;
  v23[1] = v1;
  void v23[2] = a1[2];
  size_t v2 = sub_1A8D891D0((size_t)v23, (unint64_t)v24);
  uint64_t v3 = *(void *)(v2 + 16);
  size_t v4 = (void *)MEMORY[0x1E4FBC860];
  size_t v5 = 0;
  if (v3)
  {
    unint64_t v6 = (unsigned char *)(MEMORY[0x1E4FBC860] + 32);
    size_t v7 = (char *)(v2 + 32);
    while (1)
    {
      char v9 = *v7++;
      char v8 = v9;
      if (!v5)
      {
        unint64_t v10 = v4[3];
        if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_24;
        }
        int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
        if (v11 <= 1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = v11;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A0);
        int64_t v13 = (void *)swift_allocObject();
        size_t v14 = 2 * _swift_stdlib_malloc_size(v13) - 64;
        uint64_t v13[2] = v12;
        v13[3] = v14;
        unint64_t v15 = (unint64_t)(v13 + 4);
        size_t v16 = v4[3] >> 1;
        if (v4[2])
        {
          if (v13 != v4 || v15 >= (unint64_t)v4 + v16 + 32) {
            memmove(v13 + 4, v4 + 4, v16);
          }
          void v4[2] = 0;
        }
        unint64_t v6 = (unsigned char *)(v15 + v16);
        size_t v5 = (v14 >> 1) - v16;
        swift_release();
        size_t v4 = v13;
      }
      BOOL v18 = __OFSUB__(v5--, 1);
      if (v18) {
        break;
      }
      *v6++ = v8;
      if (!--v3) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
LABEL_19:
  swift_release();
  unint64_t v19 = v4[3];
  if (v19 >= 2)
  {
    unint64_t v20 = v19 >> 1;
    BOOL v18 = __OFSUB__(v20, v5);
    unint64_t v21 = v20 - v5;
    if (v18) {
      goto LABEL_25;
    }
    void v4[2] = v21;
  }
  return v4;
}

void *sub_1A8DC9608(_OWORD *a1)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  long long v1 = a1[1];
  v24[0] = *a1;
  v24[1] = v1;
  long long v2 = a1[3];
  void v24[2] = a1[2];
  _OWORD v24[3] = v2;
  size_t v3 = sub_1A8D891D0((size_t)v24, (unint64_t)v25);
  uint64_t v4 = *(void *)(v3 + 16);
  size_t v5 = (void *)MEMORY[0x1E4FBC860];
  size_t v6 = 0;
  if (v4)
  {
    size_t v7 = (unsigned char *)(MEMORY[0x1E4FBC860] + 32);
    char v8 = (char *)(v3 + 32);
    while (1)
    {
      char v10 = *v8++;
      char v9 = v10;
      if (!v6)
      {
        unint64_t v11 = v5[3];
        if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_24;
        }
        int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = v12;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A0);
        size_t v14 = (void *)swift_allocObject();
        size_t v15 = 2 * _swift_stdlib_malloc_size(v14) - 64;
        void v14[2] = v13;
        v14[3] = v15;
        unint64_t v16 = (unint64_t)(v14 + 4);
        size_t v17 = v5[3] >> 1;
        if (v5[2])
        {
          if (v14 != v5 || v16 >= (unint64_t)v5 + v17 + 32) {
            memmove(v14 + 4, v5 + 4, v17);
          }
          uint64_t v5[2] = 0;
        }
        size_t v7 = (unsigned char *)(v16 + v17);
        size_t v6 = (v15 >> 1) - v17;
        swift_release();
        size_t v5 = v14;
      }
      BOOL v19 = __OFSUB__(v6--, 1);
      if (v19) {
        break;
      }
      *v7++ = v9;
      if (!--v4) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
LABEL_19:
  swift_release();
  unint64_t v20 = v5[3];
  if (v20 >= 2)
  {
    unint64_t v21 = v20 >> 1;
    BOOL v19 = __OFSUB__(v21, v6);
    unint64_t v22 = v21 - v6;
    if (v19) {
      goto LABEL_25;
    }
    uint64_t v5[2] = v22;
  }
  return v5;
}

uint64_t sub_1A8DC97A0(uint64_t a1, uint64_t a2)
{
  return sub_1A8DC97D0(a1, a2, (uint64_t (*)(void))AES.CCM.Nonce.makeIterator());
}

uint64_t sub_1A8DC97B8(uint64_t a1, uint64_t a2)
{
  return sub_1A8DC97D0(a1, a2, (uint64_t (*)(void))AES.GCM.Nonce.makeIterator());
}

uint64_t sub_1A8DC97D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  uint64_t v5 = *(void *)(result + 16);
  size_t v6 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v7 = v5 - v4;
  if (v5 != v4)
  {
    if (v5 > v4)
    {
      if (v4 < 0)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      if (!v5)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      size_t v8 = 0;
      char v9 = (char *)(v4 + result + 32);
      char v10 = (unsigned char *)(MEMORY[0x1E4FBC860] + 32);
      while (1)
      {
        char v12 = *v9++;
        char v11 = v12;
        if (!v8)
        {
          unint64_t v13 = v6[3];
          if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_28;
          }
          int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
          if (v14 <= 1) {
            uint64_t v15 = 1;
          }
          else {
            uint64_t v15 = v14;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A0);
          unint64_t v16 = (void *)swift_allocObject();
          size_t v17 = 2 * _swift_stdlib_malloc_size(v16) - 64;
          id v16[2] = v15;
          void v16[3] = v17;
          unint64_t v18 = (unint64_t)(v16 + 4);
          size_t v19 = v6[3] >> 1;
          if (v6[2])
          {
            if (v16 != v6 || v18 >= (unint64_t)v6 + v19 + 32) {
              memmove(v16 + 4, v6 + 4, v19);
            }
            uint64_t v6[2] = 0;
          }
          char v10 = (unsigned char *)(v18 + v19);
          size_t v8 = (v17 >> 1) - v19;
          uint64_t result = swift_release();
          size_t v6 = v16;
        }
        BOOL v21 = __OFSUB__(v8--, 1);
        if (v21) {
          break;
        }
        *v10++ = v11;
        if (!--v7) {
          goto LABEL_23;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
  size_t v8 = 0;
LABEL_23:
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v22 = v6[3];
  if (v22 < 2) {
    return (uint64_t)v6;
  }
  unint64_t v23 = v22 >> 1;
  BOOL v21 = __OFSUB__(v23, v8);
  unint64_t v24 = v23 - v8;
  if (!v21)
  {
    uint64_t v6[2] = v24;
    return (uint64_t)v6;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1A8DC9954(uint64_t a1, unint64_t a2)
{
  sub_1A8D8BE04(a1, a2);
  uint64_t v4 = sub_1A8DC3FD4(a1, a2);
  uint64_t v6 = v5;
  uint64_t result = sub_1A8D8BD58(a1, a2);
  uint64_t v8 = v4[2];
  char v9 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v10 = v8 - v6;
  if (v8 != v6)
  {
    if (v8 > v6)
    {
      if (v6 < 0)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      if (!v8)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      size_t v11 = 0;
      char v12 = (char *)v4 + v6 + 32;
      unint64_t v13 = (unsigned char *)(MEMORY[0x1E4FBC860] + 32);
      while (1)
      {
        char v15 = *v12++;
        char v14 = v15;
        if (!v11)
        {
          unint64_t v16 = v9[3];
          if ((uint64_t)((v16 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_28;
          }
          int64_t v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
          if (v17 <= 1) {
            uint64_t v18 = 1;
          }
          else {
            uint64_t v18 = v17;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A0);
          size_t v19 = (void *)swift_allocObject();
          size_t v20 = 2 * _swift_stdlib_malloc_size(v19) - 64;
          void v19[2] = v18;
          _OWORD v19[3] = v20;
          unint64_t v21 = (unint64_t)(v19 + 4);
          size_t v22 = v9[3] >> 1;
          if (v9[2])
          {
            if (v19 != v9 || v21 >= (unint64_t)v9 + v22 + 32) {
              memmove(v19 + 4, v9 + 4, v22);
            }
            void v9[2] = 0;
          }
          unint64_t v13 = (unsigned char *)(v21 + v22);
          size_t v11 = (v20 >> 1) - v22;
          uint64_t result = swift_release();
          char v9 = v19;
        }
        BOOL v24 = __OFSUB__(v11--, 1);
        if (v24) {
          break;
        }
        *v13++ = v14;
        if (!--v10) {
          goto LABEL_23;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
  size_t v11 = 0;
LABEL_23:
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v25 = v9[3];
  if (v25 < 2) {
    return (uint64_t)v9;
  }
  unint64_t v26 = v25 >> 1;
  BOOL v24 = __OFSUB__(v26, v11);
  unint64_t v27 = v26 - v11;
  if (!v24)
  {
    void v9[2] = v27;
    return (uint64_t)v9;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_1A8DC9AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  v24[0] = a1;
  v24[1] = a2;
  v25[0] = a3;
  size_t v3 = sub_1A8D891D0((size_t)v24, (unint64_t)v25 + 4);
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
  size_t v6 = 0;
  if (v4)
  {
    uint64_t v7 = (unsigned char *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v8 = (char *)(v3 + 32);
    while (1)
    {
      char v10 = *v8++;
      char v9 = v10;
      if (!v6)
      {
        unint64_t v11 = v5[3];
        if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_24;
        }
        int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = v12;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A0);
        char v14 = (void *)swift_allocObject();
        size_t v15 = 2 * _swift_stdlib_malloc_size(v14) - 64;
        void v14[2] = v13;
        v14[3] = v15;
        unint64_t v16 = (unint64_t)(v14 + 4);
        size_t v17 = v5[3] >> 1;
        if (v5[2])
        {
          if (v14 != v5 || v16 >= (unint64_t)v5 + v17 + 32) {
            memmove(v14 + 4, v5 + 4, v17);
          }
          uint64_t v5[2] = 0;
        }
        uint64_t v7 = (unsigned char *)(v16 + v17);
        size_t v6 = (v15 >> 1) - v17;
        swift_release();
        uint64_t v5 = v14;
      }
      BOOL v19 = __OFSUB__(v6--, 1);
      if (v19) {
        break;
      }
      *v7++ = v9;
      if (!--v4) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
LABEL_19:
  swift_release();
  unint64_t v20 = v5[3];
  if (v20 >= 2)
  {
    unint64_t v21 = v20 >> 1;
    BOOL v19 = __OFSUB__(v21, v6);
    unint64_t v22 = v21 - v6;
    if (v19) {
      goto LABEL_25;
    }
    uint64_t v5[2] = v22;
  }
  return v5;
}

void *sub_1A8DC9C84(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  v23[0] = a1;
  v23[1] = a2;
  size_t v2 = sub_1A8D891D0((size_t)v23, (unint64_t)&v24);
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
  size_t v5 = 0;
  if (v3)
  {
    size_t v6 = (unsigned char *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v7 = (char *)(v2 + 32);
    while (1)
    {
      char v9 = *v7++;
      char v8 = v9;
      if (!v5)
      {
        unint64_t v10 = v4[3];
        if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_24;
        }
        int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
        if (v11 <= 1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = v11;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A0);
        uint64_t v13 = (void *)swift_allocObject();
        size_t v14 = 2 * _swift_stdlib_malloc_size(v13) - 64;
        uint64_t v13[2] = v12;
        v13[3] = v14;
        unint64_t v15 = (unint64_t)(v13 + 4);
        size_t v16 = v4[3] >> 1;
        if (v4[2])
        {
          if (v13 != v4 || v15 >= (unint64_t)v4 + v16 + 32) {
            memmove(v13 + 4, v4 + 4, v16);
          }
          void v4[2] = 0;
        }
        size_t v6 = (unsigned char *)(v15 + v16);
        size_t v5 = (v14 >> 1) - v16;
        swift_release();
        uint64_t v4 = v13;
      }
      BOOL v18 = __OFSUB__(v5--, 1);
      if (v18) {
        break;
      }
      *v6++ = v8;
      if (!--v3) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
LABEL_19:
  swift_release();
  unint64_t v19 = v4[3];
  if (v19 >= 2)
  {
    unint64_t v20 = v19 >> 1;
    BOOL v18 = __OFSUB__(v20, v5);
    unint64_t v21 = v20 - v5;
    if (v18) {
      goto LABEL_25;
    }
    void v4[2] = v21;
  }
  return v4;
}

uint64_t sub_1A8DC9E10(uint64_t result, int64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = 0;
  uint64_t v7 = 32;
  int64_t v8 = result;
  while (1)
  {
    BOOL v9 = v8 <= a2;
    if (a3 > 0) {
      BOOL v9 = v8 >= a2;
    }
    if (v9) {
      break;
    }
    BOOL v10 = __OFADD__(v8, a3);
    v8 += a3;
    if (v10) {
      int64_t v8 = (v8 >> 63) ^ 0x8000000000000000;
    }
    v7 += 8;
    BOOL v10 = __OFADD__(v6++, 1);
    if (v10)
    {
      __break(1u);
      break;
    }
  }
  if (v6 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476758);
    int64_t v11 = (int64_t *)swift_allocObject();
    uint64_t result = _swift_stdlib_malloc_size(v11);
    uint64_t v12 = result - 32;
    if (result < 32) {
      uint64_t v12 = result - 25;
    }
    uint64_t v13 = v12 >> 3;
    void v11[2] = v6;
    v11[3] = 2 * v13;
    size_t v14 = v11 + 4;
    uint64_t v15 = v13 & 0x7FFFFFFFFFFFFFFFLL;
LABEL_15:
    v15 -= v6;
    while (1)
    {
      BOOL v16 = v5 <= a2;
      if (a3 > 0) {
        BOOL v16 = v5 >= a2;
      }
      if (v16) {
        break;
      }
      if (__OFADD__(v5, a3)) {
        int64_t v17 = ((v5 + a3) >> 63) ^ 0x8000000000000000;
      }
      else {
        int64_t v17 = v5 + a3;
      }
      *v14++ = v5;
      uint64_t v5 = v17;
      if (!--v6) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  int64_t v11 = (int64_t *)MEMORY[0x1E4FBC860];
  size_t v14 = (int64_t *)(MEMORY[0x1E4FBC860] + 32);
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBC860] + 24) >> 1;
  if (v6) {
    goto LABEL_15;
  }
  int64_t v17 = result;
LABEL_23:
  BOOL v18 = v17 <= a2;
  if (a3 > 0) {
    BOOL v18 = v17 >= a2;
  }
  if (!v18)
  {
    uint64_t v19 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      int64_t v20 = v17 + a3;
      if (__OFADD__(v17, a3))
      {
        int64_t v20 = v19;
        if (!v15) {
          goto LABEL_32;
        }
        int64_t v20 = v19;
      }
      else if (!v15)
      {
LABEL_32:
        unint64_t v21 = v11[3];
        if ((uint64_t)((v21 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_58;
        }
        int64_t v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
        if (v22 <= 1) {
          uint64_t v23 = 1;
        }
        else {
          uint64_t v23 = v22;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476758);
        uint64_t v24 = (int64_t *)swift_allocObject();
        int64_t v25 = _swift_stdlib_malloc_size(v24);
        uint64_t v26 = v25 - 32;
        if (v25 < 32) {
          uint64_t v26 = v25 - 25;
        }
        uint64_t v27 = v26 >> 3;
        void v24[2] = v23;
        _OWORD v24[3] = 2 * (v26 >> 3);
        unint64_t v28 = (unint64_t)(v24 + 4);
        unint64_t v29 = (unint64_t)v11[3] >> 1;
        if (v11[2])
        {
          if (v24 != v11 || v28 >= (unint64_t)&v11[v29 + 4]) {
            memmove(v24 + 4, v11 + 4, 8 * v29);
          }
          void v11[2] = 0;
        }
        size_t v14 = (int64_t *)(v28 + 8 * v29);
        uint64_t v15 = (v27 & 0x7FFFFFFFFFFFFFFFLL) - v29;
        uint64_t result = swift_release();
        int64_t v11 = v24;
        uint64_t v19 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
      }
      BOOL v10 = __OFSUB__(v15--, 1);
      if (v10) {
        goto LABEL_57;
      }
      *v14++ = v17;
      BOOL v31 = v20 <= a2;
      if (a3 > 0) {
        BOOL v31 = v20 >= a2;
      }
      int64_t v17 = v20;
    }
    while (!v31);
  }
  unint64_t v32 = v11[3];
  if (v32 < 2) {
    return (uint64_t)v11;
  }
  unint64_t v33 = v32 >> 1;
  BOOL v10 = __OFSUB__(v33, v15);
  unint64_t v34 = v33 - v15;
  if (!v10)
  {
    void v11[2] = v34;
    return (uint64_t)v11;
  }
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_1A8DCA094@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  int64_t v6 = a4 >> 1;
  if (a4 >> 1 == a3) {
    goto LABEL_10;
  }
  if ((uint64_t)(a4 >> 1) <= a3)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v7 = *(void *)(a2 + 48 * a3 + 8);
  if (v7 <= a5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = a3 + 1;
  if (a3 + 1 != v6)
  {
    BOOL v9 = (void *)(a2 + 48 * a3 + 56);
    while (v8 < v6)
    {
      if (*v9 <= a5) {
        goto LABEL_12;
      }
      ++v8;
      v9 += 6;
      if (v6 == v8) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
LABEL_9:
  if (v7 == a5 + 1)
  {
LABEL_10:
    *a6 = result;
    a6[1] = a2;
    a6[2] = a3;
    a6[3] = a4;
    a6[4] = a5;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

BOOL sub_1A8DCA124(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || a1[1] != a2[1]) {
    return 0;
  }
  uint64_t v3 = a2[2];
  if (a1[2])
  {
    if (v3) {
      return (sub_1A8D94168(a1[3], a1[4], a1[5], a2[3], a2[4], a2[5]) & 1) != 0;
    }
LABEL_8:
    sub_1A8DCA1C8((uint64_t)a1);
    sub_1A8DCA1C8((uint64_t)a2);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return 0;
  }
  if (v3) {
    goto LABEL_8;
  }
  return 1;
}

uint64_t sub_1A8DCA1C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1A8DCA1F4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v5 = a4 >> 1;
  int64_t v6 = (void *)MEMORY[0x1E4FBC860];
  if (a4 >> 1 != a3)
  {
    char v7 = a4;
    uint64_t v8 = a3;
    uint64_t v10 = result;
    uint64_t result = swift_unknownObjectRetain();
    if (v5 <= v8)
    {
LABEL_60:
      __break(1u);
LABEL_61:
      uint64_t result = swift_unknownObjectRelease();
      goto LABEL_62;
    }
    uint64_t v4 = 0;
    uint64_t v43 = v7 & 1;
    uint64_t v44 = v5;
    uint64_t v41 = a2 + 104;
    uint64_t v42 = v10;
    int64_t v11 = v6 + 4;
    uint64_t v45 = a2;
    while (1)
    {
      if (v5 <= v8) {
        goto LABEL_68;
      }
      uint64_t v12 = (char *)(a2 + 48 * v8);
      uint64_t v13 = v8 + 1;
      char v48 = *v12;
      if ((*v12 & 0x20) != 0) {
        break;
      }
      uint64_t v14 = *((void *)v12 + 2);
      if (!v14) {
        goto LABEL_87;
      }
      uint64_t v15 = *((void *)v12 + 4);
      uint64_t v46 = *((void *)v12 + 3);
      uint64_t v16 = *((void *)v12 + 5);
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v17 = 0;
      uint64_t v18 = v13;
      uint64_t v13 = v15;
      if (!v4) {
        goto LABEL_43;
      }
      uint64_t v47 = v16;
      uint64_t v8 = v18;
      uint64_t v13 = v15;
LABEL_56:
      a2 = v45;
      uint64_t v27 = v46;
LABEL_57:
      BOOL v37 = __OFSUB__(v4--, 1);
      if (v37) {
        goto LABEL_70;
      }
      *(unsigned char *)int64_t v11 = v48;
      v11[1] = v14;
      void v11[2] = v27;
      v11[3] = v13;
      void v11[4] = v47;
      v11[5] = v17;
      *((unsigned char *)v11 + 48) = (v48 & 0x20) == 0;
      int64_t v5 = v44;
      if (v8 == v44) {
        goto LABEL_61;
      }
      v11 += 7;
      if (v8 >= v44) {
        goto LABEL_60;
      }
    }
    uint64_t v17 = *((void *)v12 + 1);
    uint64_t v19 = v5;
    if (v13 != v5)
    {
      if (v13 >= v5) {
        goto LABEL_81;
      }
      uint64_t v19 = v8 + 1;
      if (v17 < *(void *)(a2 + 48 * v13 + 8))
      {
        uint64_t v19 = v5;
        if (v8 + 2 != v5)
        {
          int64_t v20 = (void *)(v41 + 48 * v8);
          uint64_t v19 = v8 + 2;
          while (v19 < v5)
          {
            if (v17 >= *v20) {
              goto LABEL_20;
            }
            uint64_t v21 = v19 + 1;
            if (__OFADD__(v19, 1)) {
              goto LABEL_71;
            }
            ++v19;
            v20 += 6;
            if (v21 == v5)
            {
              uint64_t v19 = v5;
              goto LABEL_20;
            }
          }
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
          return result;
        }
LABEL_20:
        if (v19 <= v8) {
          goto LABEL_72;
        }
      }
      if (v19 < 0) {
        goto LABEL_73;
      }
    }
    uint64_t v22 = v19 - v13;
    if (__OFSUB__(v19, v13)) {
      goto LABEL_74;
    }
    if (v22 < 0) {
      goto LABEL_75;
    }
    uint64_t v23 = v5 - v13;
    if (__OFSUB__(v5, v13)) {
      goto LABEL_76;
    }
    if (!v22 || v23 < 0 || (uint64_t v18 = v5, v23 >= v22))
    {
      uint64_t v18 = v19;
      if (__OFADD__(v13, v22)) {
        goto LABEL_80;
      }
      if (v5 < v19) {
        goto LABEL_77;
      }
    }
    if (v18 <= v8) {
      goto LABEL_78;
    }
    if (v13 != v19)
    {
      if (v13 >= v19) {
        goto LABEL_82;
      }
      uint64_t v24 = *(void *)(a2 + 48 * v13 + 8);
      if (v17 >= v24) {
        goto LABEL_83;
      }
      uint64_t v25 = v8 + 2;
      if (v8 + 2 != v19)
      {
        if (v8 + 2 >= v19) {
          goto LABEL_85;
        }
        uint64_t v26 = (void *)(v41 + 48 * v8);
        while (v25 > v8)
        {
          if (v17 >= *v26) {
            goto LABEL_67;
          }
          ++v25;
          v26 += 6;
          if (v19 == v25) {
            goto LABEL_40;
          }
        }
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
LABEL_40:
      if (v24 != v17 + 1) {
        goto LABEL_84;
      }
    }
    uint64_t v16 = v43 | (2 * v19);
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v46 = a2;
    uint64_t v14 = v10;
    if (v4)
    {
      uint64_t v47 = v16;
      uint64_t v8 = v18;
      a2 = v45;
      uint64_t v27 = v45;
      uint64_t v14 = v10;
      goto LABEL_57;
    }
LABEL_43:
    unint64_t v28 = v6[3];
    if ((uint64_t)((v28 >> 1) + 0x4000000000000000) < 0) {
      goto LABEL_79;
    }
    unint64_t v29 = v6;
    uint64_t v47 = v16;
    int64_t v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
    if (v30 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = v30;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A9580);
    int64_t v6 = (void *)swift_allocObject();
    uint64_t v32 = (uint64_t)(_swift_stdlib_malloc_size(v6) - 32) / 56;
    uint64_t v6[2] = v31;
    v6[3] = 2 * v32;
    unint64_t v33 = (unint64_t)(v6 + 4);
    uint64_t v34 = v29[3] >> 1;
    uint64_t v35 = 7 * v34;
    if (v29[2])
    {
      if (v6 != v29 || v33 >= (unint64_t)&v29[v35 + 4]) {
        memmove(v6 + 4, v29 + 4, 56 * v34);
      }
      _OWORD v29[2] = 0;
    }
    int64_t v11 = (void *)(v33 + v35 * 8);
    uint64_t v4 = (v32 & 0x7FFFFFFFFFFFFFFFLL) - v34;
    uint64_t result = swift_release();
    uint64_t v8 = v18;
    uint64_t v10 = v42;
    goto LABEL_56;
  }
  uint64_t v4 = 0;
LABEL_62:
  unint64_t v38 = v6[3];
  if (v38 >= 2)
  {
    unint64_t v39 = v38 >> 1;
    BOOL v37 = __OFSUB__(v39, v4);
    uint64_t v40 = v39 - v4;
    if (v37) {
      goto LABEL_86;
    }
    uint64_t v6[2] = v40;
  }
  return (uint64_t)v6;
}

uint64_t sub_1A8DCA5E4(char a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(v7) = a1;
  uint64_t v8 = *(char **)a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v10 = *((void *)v8 + 2);
    unint64_t v9 = *((void *)v8 + 3);
    int64_t v11 = v9 >> 1;
    unint64_t v12 = v10 + 1;
    if (v9 >> 1 <= v10)
    {
      uint64_t v8 = sub_1A8D96298((char *)(v9 > 1), v10 + 1, 1, v8);
      unint64_t v9 = *((void *)v8 + 3);
      int64_t v11 = v9 >> 1;
    }
    *((void *)v8 + 2) = v12;
    v8[v10 + 32] = v7;
    unint64_t v7 = v10 + 2;
    if (v11 < (uint64_t)(v10 + 2)) {
      uint64_t v8 = sub_1A8D96298((char *)(v9 > 1), v10 + 2, 1, v8);
    }
    *((void *)v8 + 2) = v7;
    v8[v12 + 32] = 0;
    *(void *)a2 = v8;
    unint64_t v13 = v10 + 1;
    if (__OFSUB__(v7, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    uint64_t result = sub_1A8DC7E04(a2, a3);
    if (v3) {
      return result;
    }
    a3 = *(void *)a2;
    unint64_t v15 = *(void *)(*(void *)a2 + 16);
    unint64_t v10 = v15 - v7;
    if ((uint64_t)(v15 - v7) <= 127) {
      break;
    }
    if (v15 >= v7)
    {
      unint64_t v4 = 71 - __clz(v10);
      uint64_t v8 = (char *)(v4 >> 3);
      sub_1A8DC80D4(v4 >> 3, v7, v15);
      a3 = *(void *)a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_1A8DAF578(a3);
    a3 = result;
LABEL_11:
    if (v13 >= *(void *)(a3 + 16))
    {
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v16 = a3 + 32;
    *(unsigned char *)(a3 + 32 + v13) = (v4 >> 3) | 0x80;
    *(void *)a2 = a3;
    if (v7 < *(void *)(a3 + 16))
    {
      *(unsigned char *)(v16 + v7) = v10 >> (8 * (((_BYTE)v8 - 1) & 7u));
      if (v8 == (char *)1) {
        goto LABEL_32;
      }
      if (v7 + 1 < *(void *)(a3 + 16))
      {
        *(unsigned char *)(v16 + v7 + 1) = v10 >> (8 * (((_BYTE)v8 - 2) & 7u));
        if (v8 == (char *)2) {
          goto LABEL_32;
        }
        if (v7 + 2 < *(void *)(a3 + 16))
        {
          *(unsigned char *)(v16 + v7 + 2) = v10 >> (8 * (((_BYTE)v8 - 3) & 7u));
          if (v8 == (char *)3) {
            goto LABEL_32;
          }
          if (v7 + 3 < *(void *)(a3 + 16))
          {
            *(unsigned char *)(v16 + v7 + 3) = v10 >> (8 * (((_BYTE)v8 - 4) & 7u));
            if (v8 == (char *)4) {
              goto LABEL_32;
            }
            if (v7 + 4 < *(void *)(a3 + 16))
            {
              *(unsigned char *)(v16 + v7 + 4) = v10 >> (8 * (((_BYTE)v8 - 5) & 7u));
              if (v8 == (char *)5) {
                goto LABEL_32;
              }
              if (v7 + 5 < *(void *)(a3 + 16))
              {
                *(unsigned char *)(v16 + v7 + 5) = v10 >> (8 * (((_BYTE)v8 - 6) & 7u));
                if (v8 == (char *)6) {
                  goto LABEL_32;
                }
                if (v7 + 6 < *(void *)(a3 + 16))
                {
                  *(unsigned char *)(v16 + v7 + 6) = v10 >> (8 * (((_BYTE)v8 - 7) & 7u));
                  if (v8 == (char *)7) {
                    goto LABEL_32;
                  }
                  if (v7 + 7 < *(void *)(a3 + 16))
                  {
                    *(unsigned char *)(v16 + v7 + 7) = v10 >> (v4 & 0x38);
LABEL_32:
                    *(void *)a2 = a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    uint64_t v8 = sub_1A8D96298(0, *((void *)v8 + 2) + 1, 1, v8);
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_1A8DAF578(a3);
  a3 = result;
LABEL_30:
  if (v13 < *(void *)(a3 + 16))
  {
    *(unsigned char *)(a3 + v13 + 32) = v10;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DCA8E4(char a1, char **a2, uint64_t (*a3)(char **), uint64_t a4)
{
  return sub_1A8DCAC0C(a1, a2, a3, a4);
}

uint64_t sub_1A8DCA8FC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  uint64_t result = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  uint64_t v6 = a3;
  uint64_t result = sub_1A8DE9BF0();
  if (v4 != v6)
  {
    while (v6 < v4)
    {
      uint64_t v8 = (void *)(a2 + 48 * v6);
      uint64_t v9 = v8[3];
      uint64_t v10 = v8[4];
      unint64_t v11 = v8[5];
      uint64_t v12 = v8[2];
      sub_1A8DE9C00();
      sub_1A8DE9BF0();
      if (v12)
      {
        sub_1A8DE9C00();
        unint64_t v13 = v11 >> 1;
        uint64_t result = (v11 >> 1) - v10;
        if (__OFSUB__(v11 >> 1, v10)) {
          goto LABEL_16;
        }
        uint64_t result = sub_1A8DE9BF0();
        BOOL v14 = __OFSUB__(v13, v10);
        uint64_t v15 = v13 - v10;
        if (v15)
        {
          if ((v15 < 0) ^ v14 | (v15 == 0)) {
            goto LABEL_17;
          }
          uint64_t v16 = v9 + v10;
          do
          {
            ++v16;
            uint64_t result = sub_1A8DE9C00();
            --v15;
          }
          while (v15);
        }
      }
      else
      {
        uint64_t result = sub_1A8DE9C00();
      }
      if (++v6 == v4) {
        return result;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

void sub_1A8DCA9F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  int64_t v5 = a4 >> 1;
  int64_t v6 = a3;
  if (a4 >> 1 != a3)
  {
    unint64_t v7 = (void *)(a2 + 48 * a3 + 8);
    int64_t v6 = a3;
    while (1)
    {
      if (v6 >= v5)
      {
        __break(1u);
        goto LABEL_13;
      }
      if (*v7 <= a5) {
        break;
      }
      ++v6;
      v7 += 6;
      if (v5 == v6)
      {
        int64_t v6 = a4 >> 1;
        break;
      }
    }
    if (v6 >= a3) {
      goto LABEL_8;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_8:
  if (v5 < a3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v5 < v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v6 < 0) {
LABEL_16:
  }
    __break(1u);
}

uint64_t sub_1A8DCAA70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = (uint64_t)sub_1A8DC5A8C(a1, a2, a3, a4);
  if (!v5)
  {
    unint64_t v11 = v10;
    unint64_t v12 = v10 >> 1;
    if (v9 == v10 >> 1)
    {
      __break(1u);
    }
    else if (v9 < (uint64_t)(v10 >> 1))
    {
      uint64_t v13 = result;
      uint64_t v14 = v8;
      uint64_t v15 = v8 + 48 * v9;
      char v16 = *(unsigned char *)v15;
      int64_t v17 = v9 + 1;
      if ((*(unsigned char *)v15 & 0x20) != 0)
      {
        uint64_t v31 = *(void *)(v15 + 8);
        sub_1A8DCA9F0(result, v8, v9 + 1, v10, v31);
        uint64_t v29 = v21;
        uint64_t v34 = v22;
        uint64_t result = (v20 >> 1) - v19;
        if (__OFSUB__(v20 >> 1, v19))
        {
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
        uint64_t v23 = v19;
        unint64_t v24 = v20;
        sub_1A8DBC264(result, v13, v14, v17, v11);
        int64_t v17 = v25;
        unint64_t v27 = v26;
        sub_1A8DCA094(v29, v34, v23, v24, v31, v32);
        long long v28 = v32[1];
        long long v30 = v32[0];
        uint64_t v18 = v33;
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        unint64_t v12 = v27 >> 1;
      }
      else
      {
        long long v30 = *(_OWORD *)(v15 + 16);
        uint64_t result = *(void *)(v15 + 16);
        if (!(void)v30)
        {
LABEL_18:
          __break(1u);
          return result;
        }
        long long v28 = *(_OWORD *)(v15 + 32);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v18 = 0;
      }
      if (!__OFSUB__(v12, v17))
      {
        if (v12 == v17)
        {
          *(unsigned char *)a5 = v16;
          *(_OWORD *)(a5 + 8) = v30;
          *(_OWORD *)(a5 + 24) = v28;
          *(void *)(a5 + 40) = v18;
          *(unsigned char *)(a5 + 48) = (v16 & 0x20) == 0;
          return result;
        }
        goto LABEL_16;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_1A8DCAC0C(char a1, char **a2, uint64_t (*a3)(char **), uint64_t a4)
{
  LOBYTE(v8) = a1;
  int64_t v9 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v11 = *((void *)v9 + 2);
    unint64_t v10 = *((void *)v9 + 3);
    int64_t v12 = v10 >> 1;
    unint64_t v13 = v11 + 1;
    if (v10 >> 1 <= v11)
    {
      int64_t v9 = sub_1A8D96298((char *)(v10 > 1), v11 + 1, 1, v9);
      unint64_t v10 = *((void *)v9 + 3);
      int64_t v12 = v10 >> 1;
    }
    *((void *)v9 + 2) = v13;
    v9[v11 + 32] = v8;
    unint64_t v8 = v11 + 2;
    if (v12 < (uint64_t)(v11 + 2)) {
      int64_t v9 = sub_1A8D96298((char *)(v10 > 1), v11 + 2, 1, v9);
    }
    *((void *)v9 + 2) = v8;
    v9[v13 + 32] = 0;
    *a2 = v9;
    int64_t v9 = (char *)(v11 + 1);
    if (__OFSUB__(v8, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    uint64_t result = a3(a2);
    if (v4) {
      return result;
    }
    a4 = (uint64_t)*a2;
    unint64_t v15 = *((void *)*a2 + 2);
    unint64_t v13 = v15 - v8;
    if ((uint64_t)(v15 - v8) <= 127) {
      break;
    }
    if (v15 >= v8)
    {
      unint64_t v11 = 71 - __clz(v13);
      a3 = (uint64_t (*)(char **))(v11 >> 3);
      sub_1A8DC80D4(v11 >> 3, v8, v15);
      a4 = (uint64_t)*a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_1A8DAF578(a4);
    a4 = result;
LABEL_11:
    if ((unint64_t)v9 >= *(void *)(a4 + 16))
    {
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v16 = a4 + 32;
    v9[a4 + 32] = (v11 >> 3) | 0x80;
    *a2 = (char *)a4;
    if (v8 < *(void *)(a4 + 16))
    {
      *(unsigned char *)(v16 + v8) = v13 >> (8 * (((_BYTE)a3 - 1) & 7u));
      if (a3 == (uint64_t (*)(char **))1) {
        goto LABEL_32;
      }
      if (v8 + 1 < *(void *)(a4 + 16))
      {
        *(unsigned char *)(v16 + v8 + 1) = v13 >> (8 * (((_BYTE)a3 - 2) & 7u));
        if (a3 == (uint64_t (*)(char **))2) {
          goto LABEL_32;
        }
        if (v8 + 2 < *(void *)(a4 + 16))
        {
          *(unsigned char *)(v16 + v8 + 2) = v13 >> (8 * (((_BYTE)a3 - 3) & 7u));
          if (a3 == (uint64_t (*)(char **))3) {
            goto LABEL_32;
          }
          if (v8 + 3 < *(void *)(a4 + 16))
          {
            *(unsigned char *)(v16 + v8 + 3) = v13 >> (8 * (((_BYTE)a3 - 4) & 7u));
            if (a3 == (uint64_t (*)(char **))4) {
              goto LABEL_32;
            }
            if (v8 + 4 < *(void *)(a4 + 16))
            {
              *(unsigned char *)(v16 + v8 + 4) = v13 >> (8 * (((_BYTE)a3 - 5) & 7u));
              if (a3 == (uint64_t (*)(char **))5) {
                goto LABEL_32;
              }
              if (v8 + 5 < *(void *)(a4 + 16))
              {
                *(unsigned char *)(v16 + v8 + 5) = v13 >> (8 * (((_BYTE)a3 - 6) & 7u));
                if (a3 == (uint64_t (*)(char **))6) {
                  goto LABEL_32;
                }
                if (v8 + 6 < *(void *)(a4 + 16))
                {
                  *(unsigned char *)(v16 + v8 + 6) = v13 >> (8 * (((_BYTE)a3 - 7) & 7u));
                  if (a3 == (uint64_t (*)(char **))7) {
                    goto LABEL_32;
                  }
                  if (v8 + 7 < *(void *)(a4 + 16))
                  {
                    *(unsigned char *)(v16 + v8 + 7) = v13 >> (v11 & 0x38);
LABEL_32:
                    *a2 = (char *)a4;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    int64_t v9 = sub_1A8D96298(0, *((void *)v9 + 2) + 1, 1, v9);
  }
  if ((v13 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_1A8DAF578(a4);
  a4 = result;
LABEL_30:
  if ((unint64_t)v9 < *(void *)(a4 + 16))
  {
    v9[a4 + 32] = v13;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DCAF14(char a1, char **a2, char *a3)
{
  LOBYTE(v7) = a1;
  unint64_t v8 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v10 = *((void *)v8 + 2);
    unint64_t v9 = *((void *)v8 + 3);
    int64_t v11 = v9 >> 1;
    unint64_t v12 = v10 + 1;
    if (v9 >> 1 <= v10)
    {
      unint64_t v8 = sub_1A8D96298((char *)(v9 > 1), v10 + 1, 1, v8);
      unint64_t v9 = *((void *)v8 + 3);
      int64_t v11 = v9 >> 1;
    }
    *((void *)v8 + 2) = v12;
    v8[v10 + 32] = v7;
    unint64_t v7 = v10 + 2;
    if (v11 < (uint64_t)(v10 + 2)) {
      unint64_t v8 = sub_1A8D96298((char *)(v9 > 1), v10 + 2, 1, v8);
    }
    *((void *)v8 + 2) = v7;
    v8[v12 + 32] = 0;
    *a2 = v8;
    unint64_t v13 = v10 + 1;
    if (__OFSUB__(v7, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    uint64_t result = sub_1A8DCFE44(a2, (uint64_t)a3);
    if (v3) {
      return result;
    }
    a3 = *a2;
    unint64_t v15 = *((void *)*a2 + 2);
    unint64_t v10 = v15 - v7;
    if ((uint64_t)(v15 - v7) <= 127) {
      break;
    }
    if (v15 >= v7)
    {
      unint64_t v4 = 71 - __clz(v10);
      unint64_t v8 = (char *)(v4 >> 3);
      sub_1A8DC80D4(v4 >> 3, v7, v15);
      a3 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)a3);
    a3 = (char *)result;
LABEL_11:
    if (v13 >= *((void *)a3 + 2))
    {
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v16 = a3 + 32;
    a3[v13 + 32] = (v4 >> 3) | 0x80;
    *a2 = a3;
    if (v7 < *((void *)a3 + 2))
    {
      v16[v7] = v10 >> (8 * (((_BYTE)v8 - 1) & 7u));
      if (v8 == (char *)1) {
        goto LABEL_32;
      }
      if (v7 + 1 < *((void *)a3 + 2))
      {
        v16[v7 + 1] = v10 >> (8 * (((_BYTE)v8 - 2) & 7u));
        if (v8 == (char *)2) {
          goto LABEL_32;
        }
        if (v7 + 2 < *((void *)a3 + 2))
        {
          v16[v7 + 2] = v10 >> (8 * (((_BYTE)v8 - 3) & 7u));
          if (v8 == (char *)3) {
            goto LABEL_32;
          }
          if (v7 + 3 < *((void *)a3 + 2))
          {
            v16[v7 + 3] = v10 >> (8 * (((_BYTE)v8 - 4) & 7u));
            if (v8 == (char *)4) {
              goto LABEL_32;
            }
            if (v7 + 4 < *((void *)a3 + 2))
            {
              v16[v7 + 4] = v10 >> (8 * (((_BYTE)v8 - 5) & 7u));
              if (v8 == (char *)5) {
                goto LABEL_32;
              }
              if (v7 + 5 < *((void *)a3 + 2))
              {
                v16[v7 + 5] = v10 >> (8 * (((_BYTE)v8 - 6) & 7u));
                if (v8 == (char *)6) {
                  goto LABEL_32;
                }
                if (v7 + 6 < *((void *)a3 + 2))
                {
                  v16[v7 + 6] = v10 >> (8 * (((_BYTE)v8 - 7) & 7u));
                  if (v8 == (char *)7) {
                    goto LABEL_32;
                  }
                  if (v7 + 7 < *((void *)a3 + 2))
                  {
                    v16[v7 + 7] = v10 >> (v4 & 0x38);
LABEL_32:
                    *a2 = a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    unint64_t v8 = sub_1A8D96298(0, *((void *)v8 + 2) + 1, 1, v8);
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)a3);
  a3 = (char *)result;
LABEL_30:
  if (v13 < *((void *)a3 + 2))
  {
    a3[v13 + 32] = v10;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DCB214(char a1, char **a2, uint64_t a3, char *a4)
{
  LOBYTE(v8) = a1;
  unint64_t v9 = (unint64_t)*a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v11 = *(void *)(v9 + 16);
    unint64_t v10 = *(void *)(v9 + 24);
    int64_t v12 = v10 >> 1;
    unint64_t v13 = v11 + 1;
    if (v10 >> 1 <= v11)
    {
      unint64_t v9 = (unint64_t)sub_1A8D96298((char *)(v10 > 1), v11 + 1, 1, (char *)v9);
      unint64_t v10 = *(void *)(v9 + 24);
      int64_t v12 = v10 >> 1;
    }
    *(void *)(v9 + 16) = v13;
    *(unsigned char *)(v9 + v11 + 32) = v8;
    unint64_t v8 = v11 + 2;
    if (v12 < (uint64_t)(v11 + 2)) {
      unint64_t v9 = (unint64_t)sub_1A8D96298((char *)(v10 > 1), v11 + 2, 1, (char *)v9);
    }
    *(void *)(v9 + 16) = v8;
    *(unsigned char *)(v9 + v13 + 32) = 0;
    *a2 = (char *)v9;
    unint64_t v14 = v11 + 1;
    if (__OFSUB__(v8, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    uint64_t result = sub_1A8DC66D8(0x30uLL, a2);
    if (v4) {
      return result;
    }
    sub_1A8D8BE04(a3, (unint64_t)a4);
    uint64_t v16 = sub_1A8DCCEB8(a3, (unint64_t)a4);
    uint64_t v17 = sub_1A8D8BD58(a3, (unint64_t)a4);
    MEMORY[0x1F4188790](v17);
    void v22[2] = v16;
    _OWORD v22[3] = v18;
    _OWORD v22[4] = 0;
    v22[5] = v19;
    sub_1A8DCAC0C(3, a2, sub_1A8DCC044, (uint64_t)v22);
    swift_release();
    a4 = *a2;
    unint64_t v20 = *((void *)*a2 + 2);
    unint64_t v9 = v20 - v8;
    if ((uint64_t)(v20 - v8) <= 127) {
      break;
    }
    if (v20 >= v8)
    {
      unint64_t v11 = 71 - __clz(v9);
      a3 = v11 >> 3;
      sub_1A8DC80D4(v11 >> 3, v8, v20);
      a4 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)a4);
    a4 = (char *)result;
LABEL_11:
    if (v14 >= *((void *)a4 + 2))
    {
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v21 = a4 + 32;
    a4[v14 + 32] = (v11 >> 3) | 0x80;
    *a2 = a4;
    if (v8 < *((void *)a4 + 2))
    {
      v21[v8] = v9 >> (8 * ((a3 - 1) & 7));
      if (a3 == 1) {
        goto LABEL_32;
      }
      if (v8 + 1 < *((void *)a4 + 2))
      {
        v21[v8 + 1] = v9 >> (8 * ((a3 - 2) & 7));
        if (a3 == 2) {
          goto LABEL_32;
        }
        if (v8 + 2 < *((void *)a4 + 2))
        {
          v21[v8 + 2] = v9 >> (8 * ((a3 - 3) & 7));
          if (a3 == 3) {
            goto LABEL_32;
          }
          if (v8 + 3 < *((void *)a4 + 2))
          {
            v21[v8 + 3] = v9 >> (8 * ((a3 - 4) & 7));
            if (a3 == 4) {
              goto LABEL_32;
            }
            if (v8 + 4 < *((void *)a4 + 2))
            {
              v21[v8 + 4] = v9 >> (8 * ((a3 - 5) & 7));
              if (a3 == 5) {
                goto LABEL_32;
              }
              if (v8 + 5 < *((void *)a4 + 2))
              {
                v21[v8 + 5] = v9 >> (8 * ((a3 - 6) & 7));
                if (a3 == 6) {
                  goto LABEL_32;
                }
                if (v8 + 6 < *((void *)a4 + 2))
                {
                  v21[v8 + 6] = v9 >> (8 * ((a3 - 7) & 7));
                  if (a3 == 7) {
                    goto LABEL_32;
                  }
                  if (v8 + 7 < *((void *)a4 + 2))
                  {
                    v21[v8 + 7] = v9 >> (v11 & 0x38);
LABEL_32:
                    *a2 = a4;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    unint64_t v9 = (unint64_t)sub_1A8D96298(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)a4);
  a4 = (char *)result;
LABEL_30:
  if (v14 < *((void *)a4 + 2))
  {
    a4[v14 + 32] = v9;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DCB5B4(char a1, char **a2, char *a3)
{
  LOBYTE(v7) = a1;
  unint64_t v8 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v10 = *((void *)v8 + 2);
    unint64_t v9 = *((void *)v8 + 3);
    int64_t v11 = v9 >> 1;
    unint64_t v12 = v10 + 1;
    if (v9 >> 1 <= v10)
    {
      unint64_t v8 = sub_1A8D96298((char *)(v9 > 1), v10 + 1, 1, v8);
      unint64_t v9 = *((void *)v8 + 3);
      int64_t v11 = v9 >> 1;
    }
    *((void *)v8 + 2) = v12;
    v8[v10 + 32] = v7;
    unint64_t v7 = v10 + 2;
    if (v11 < (uint64_t)(v10 + 2)) {
      unint64_t v8 = sub_1A8D96298((char *)(v9 > 1), v10 + 2, 1, v8);
    }
    *((void *)v8 + 2) = v7;
    v8[v12 + 32] = 0;
    *a2 = v8;
    unint64_t v13 = v10 + 1;
    if (__OFSUB__(v7, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    long long v14 = *((_OWORD *)a3 + 1);
    v21[0] = *(_OWORD *)a3;
    v21[1] = v14;
    uint64_t v22 = *((void *)a3 + 4);
    uint64_t v24 = *(void *)&v21[0];
    sub_1A8D8ECD0((uint64_t)v21 + 8, (uint64_t)v23, &qword_1E97A8BB0);
    sub_1A8DBA344((uint64_t)&v24);
    sub_1A8DBA370((uint64_t)v23);
    uint64_t result = sub_1A8DC633C(48, a2, (char *)v21);
    if (v3) {
      return result;
    }
    unint64_t v8 = (char *)v21;
    *(double *)&long long v16 = MEMORY[0x1F4188790](result);
    v20[1] = v17;
    _OWORD v20[2] = v16;
    sub_1A8DCAC0C(3, a2, sub_1A8DCBC9C, (uint64_t)v20);
    a3 = *a2;
    unint64_t v18 = *((void *)*a2 + 2);
    unint64_t v10 = v18 - v7;
    if ((uint64_t)(v18 - v7) <= 127) {
      break;
    }
    if (v18 >= v7)
    {
      unint64_t v4 = 71 - __clz(v10);
      unint64_t v8 = (char *)(v4 >> 3);
      sub_1A8DC80D4(v4 >> 3, v7, v18);
      a3 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)a3);
    a3 = (char *)result;
LABEL_11:
    if (v13 >= *((void *)a3 + 2))
    {
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v19 = a3 + 32;
    a3[v13 + 32] = (v4 >> 3) | 0x80;
    *a2 = a3;
    if (v7 < *((void *)a3 + 2))
    {
      v19[v7] = v10 >> (8 * (((_BYTE)v8 - 1) & 7u));
      if (v8 == (char *)1) {
        goto LABEL_32;
      }
      if (v7 + 1 < *((void *)a3 + 2))
      {
        v19[v7 + 1] = v10 >> (8 * (((_BYTE)v8 - 2) & 7u));
        if (v8 == (char *)2) {
          goto LABEL_32;
        }
        if (v7 + 2 < *((void *)a3 + 2))
        {
          v19[v7 + 2] = v10 >> (8 * (((_BYTE)v8 - 3) & 7u));
          if (v8 == (char *)3) {
            goto LABEL_32;
          }
          if (v7 + 3 < *((void *)a3 + 2))
          {
            v19[v7 + 3] = v10 >> (8 * (((_BYTE)v8 - 4) & 7u));
            if (v8 == (char *)4) {
              goto LABEL_32;
            }
            if (v7 + 4 < *((void *)a3 + 2))
            {
              v19[v7 + 4] = v10 >> (8 * (((_BYTE)v8 - 5) & 7u));
              if (v8 == (char *)5) {
                goto LABEL_32;
              }
              if (v7 + 5 < *((void *)a3 + 2))
              {
                v19[v7 + 5] = v10 >> (8 * (((_BYTE)v8 - 6) & 7u));
                if (v8 == (char *)6) {
                  goto LABEL_32;
                }
                if (v7 + 6 < *((void *)a3 + 2))
                {
                  v19[v7 + 6] = v10 >> (8 * (((_BYTE)v8 - 7) & 7u));
                  if (v8 == (char *)7) {
                    goto LABEL_32;
                  }
                  if (v7 + 7 < *((void *)a3 + 2))
                  {
                    v19[v7 + 7] = v10 >> (v4 & 0x38);
LABEL_32:
                    *a2 = a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    unint64_t v8 = sub_1A8D96298(0, *((void *)v8 + 2) + 1, 1, v8);
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)a3);
  a3 = (char *)result;
LABEL_30:
  if (v13 < *((void *)a3 + 2))
  {
    a3[v13 + 32] = v10;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DCB95C(char a1, char **a2, char *a3)
{
  LOBYTE(v7) = a1;
  unint64_t v8 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v10 = *((void *)v8 + 2);
    unint64_t v9 = *((void *)v8 + 3);
    int64_t v11 = v9 >> 1;
    unint64_t v12 = v10 + 1;
    if (v9 >> 1 <= v10)
    {
      unint64_t v8 = sub_1A8D96298((char *)(v9 > 1), v10 + 1, 1, v8);
      unint64_t v9 = *((void *)v8 + 3);
      int64_t v11 = v9 >> 1;
    }
    *((void *)v8 + 2) = v12;
    v8[v10 + 32] = v7;
    unint64_t v7 = v10 + 2;
    if (v11 < (uint64_t)(v10 + 2)) {
      unint64_t v8 = sub_1A8D96298((char *)(v9 > 1), v10 + 2, 1, v8);
    }
    *((void *)v8 + 2) = v7;
    v8[v12 + 32] = 0;
    *a2 = v8;
    unint64_t v13 = v10 + 1;
    if (__OFSUB__(v7, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    uint64_t result = sub_1A8DBA154(a2, (uint64_t)a3);
    if (v3) {
      return result;
    }
    a3 = *a2;
    unint64_t v15 = *((void *)*a2 + 2);
    unint64_t v10 = v15 - v7;
    if ((uint64_t)(v15 - v7) <= 127) {
      break;
    }
    if (v15 >= v7)
    {
      unint64_t v4 = 71 - __clz(v10);
      unint64_t v8 = (char *)(v4 >> 3);
      sub_1A8DC80D4(v4 >> 3, v7, v15);
      a3 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)a3);
    a3 = (char *)result;
LABEL_11:
    if (v13 >= *((void *)a3 + 2))
    {
      __break(1u);
      goto LABEL_40;
    }
    long long v16 = a3 + 32;
    a3[v13 + 32] = (v4 >> 3) | 0x80;
    *a2 = a3;
    if (v7 < *((void *)a3 + 2))
    {
      v16[v7] = v10 >> (8 * (((_BYTE)v8 - 1) & 7u));
      if (v8 == (char *)1) {
        goto LABEL_32;
      }
      if (v7 + 1 < *((void *)a3 + 2))
      {
        v16[v7 + 1] = v10 >> (8 * (((_BYTE)v8 - 2) & 7u));
        if (v8 == (char *)2) {
          goto LABEL_32;
        }
        if (v7 + 2 < *((void *)a3 + 2))
        {
          v16[v7 + 2] = v10 >> (8 * (((_BYTE)v8 - 3) & 7u));
          if (v8 == (char *)3) {
            goto LABEL_32;
          }
          if (v7 + 3 < *((void *)a3 + 2))
          {
            v16[v7 + 3] = v10 >> (8 * (((_BYTE)v8 - 4) & 7u));
            if (v8 == (char *)4) {
              goto LABEL_32;
            }
            if (v7 + 4 < *((void *)a3 + 2))
            {
              v16[v7 + 4] = v10 >> (8 * (((_BYTE)v8 - 5) & 7u));
              if (v8 == (char *)5) {
                goto LABEL_32;
              }
              if (v7 + 5 < *((void *)a3 + 2))
              {
                v16[v7 + 5] = v10 >> (8 * (((_BYTE)v8 - 6) & 7u));
                if (v8 == (char *)6) {
                  goto LABEL_32;
                }
                if (v7 + 6 < *((void *)a3 + 2))
                {
                  v16[v7 + 6] = v10 >> (8 * (((_BYTE)v8 - 7) & 7u));
                  if (v8 == (char *)7) {
                    goto LABEL_32;
                  }
                  if (v7 + 7 < *((void *)a3 + 2))
                  {
                    v16[v7 + 7] = v10 >> (v4 & 0x38);
LABEL_32:
                    *a2 = a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    unint64_t v8 = sub_1A8D96298(0, *((void *)v8 + 2) + 1, 1, v8);
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_1A8DAF578((uint64_t)a3);
  a3 = (char *)result;
LABEL_30:
  if (v13 < *((void *)a3 + 2))
  {
    a3[v13 + 32] = v10;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DCBC5C(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1A8DCBC9C(char **a1)
{
  return sub_1A8D93F24(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

unint64_t sub_1A8DCBCBC()
{
  unint64_t result = qword_1E97A8B48;
  if (!qword_1E97A8B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8B48);
  }
  return result;
}

uint64_t sub_1A8DCBD10(uint64_t *a1)
{
  return sub_1A8DBA308(a1, *(unint64_t **)(v1 + 16));
}

uint64_t destroy for ASN1.ASN1ParserNode()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for ASN1.ASN1ParserNode(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ASN1.ASN1ParserNode(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ASN1.ASN1ParserNode(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1.ASN1ParserNode(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1.ASN1ParserNode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1.ASN1ParserNode()
{
  return &type metadata for ASN1.ASN1ParserNode;
}

ValueMetadata *type metadata accessor for ASN1.ASN1ParseResult()
{
  return &type metadata for ASN1.ASN1ParseResult;
}

ValueMetadata *type metadata accessor for ASN1.ASN1NodeCollection.Iterator()
{
  return &type metadata for ASN1.ASN1NodeCollection.Iterator;
}

uint64_t _s9CryptoKit4ASN1O18ASN1NodeCollectionVwcp_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

void *_s9CryptoKit4ASN1O18ASN1NodeCollectionVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t _s9CryptoKit4ASN1O18ASN1NodeCollectionVwta_0(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for ASN1.ASN1NodeCollection()
{
  return &type metadata for ASN1.ASN1NodeCollection;
}

uint64_t sub_1A8DCC044(char **a1)
{
  return sub_1A8DCBC9C(a1);
}

BOOL static HPKE.Errors.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HPKE.Errors.hash(into:)()
{
  return sub_1A8DE9BF0();
}

uint64_t HPKE.Errors.hashValue.getter()
{
  return sub_1A8DE9C20();
}

unint64_t sub_1A8DCC0EC()
{
  unint64_t result = qword_1E97A9588;
  if (!qword_1E97A9588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9588);
  }
  return result;
}

unsigned char *_s6ErrorsOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A8DCC20CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKE.Errors()
{
  return &type metadata for HPKE.Errors;
}

void sub_1A8DCC244()
{
  qword_1E97AD690 = (uint64_t)&unk_1EFF5E618;
}

void sub_1A8DCC258()
{
  qword_1E97AD6A8 = (uint64_t)&unk_1EFF5E570;
}

uint64_t RSAPSSSPKI.rsaPublicKeyBytes.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_1A8D8BE04(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t RSAPSSSPKI.rsaPublicKeyBytes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1A8D8BD58(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*RSAPSSSPKI.rsaPublicKeyBytes.modify())()
{
  return nullsub_1;
}

uint64_t static RSAPSSSPKI.serialize(_:)(uint64_t a1, char *a2)
{
  unint64_t v7 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  sub_1A8D8BE04(a1, (unint64_t)a2);
  sub_1A8DCB214(48, &v7, a1, a2);
  sub_1A8D8BD58(a1, (unint64_t)a2);
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v6 = sub_1A8D93118((uint64_t)v7);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1A8DCC3B8(uint64_t a1)
{
  if (*(unsigned char *)a1 == 48 && (*(unsigned char *)(a1 + 48) & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    long long v6 = *(_OWORD *)(a1 + 24);
    v8[0] = *(_OWORD *)(a1 + 8);
    v8[1] = v6;
    uint64_t v9 = v5;
    swift_unknownObjectRetain_n();
    sub_1A8DCC9AC((uint64_t)v8, 2);
    if (v1
      || (sub_1A8DC3DAC((uint64_t)v10),
          sub_1A8DBA7B4((uint64_t)v10, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C), sub_1A8DCD6E0((uint64_t)v10, (uint64_t)v11), v11[48] == 255))
    {
      swift_unknownObjectRelease();
      return sub_1A8DBA828(a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    }
    else
    {
      sub_1A8D8EC14();
      swift_allocError();
      *unint64_t v7 = 3;
      swift_willThrow();
      sub_1A8DBA828(a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_1A8D8EC14();
    swift_allocError();
    unsigned char *v3 = 1;
    return swift_willThrow();
  }
}

uint64_t sub_1A8DCC524(unsigned char *a1)
{
  if (*a1 == 48 && (a1[48] & 1) == 0)
  {
    swift_unknownObjectRetain_n();
    sub_1A8DCC68C();
    if (v1
      || (sub_1A8DC3DAC((uint64_t)v6),
          sub_1A8DBA7B4((uint64_t)v6, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C), sub_1A8DCD6E0((uint64_t)v6, (uint64_t)v7), v7[48] == 255))
    {
      swift_unknownObjectRelease();
      return sub_1A8DBA828((uint64_t)a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    }
    else
    {
      sub_1A8D8EC14();
      swift_allocError();
      *uint64_t v5 = 3;
      swift_willThrow();
      sub_1A8DBA828((uint64_t)a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_1A8D8EC14();
    swift_allocError();
    unsigned char *v3 = 1;
    return swift_willThrow();
  }
}

char *sub_1A8DCC68C()
{
  sub_1A8DC3DAC((uint64_t)v18);
  sub_1A8DCD6E0((uint64_t)v18, (uint64_t)v33);
  if (v34 == 255)
  {
    sub_1A8D8EC14();
LABEL_10:
    swift_allocError();
    char v13 = 3;
    goto LABEL_11;
  }
  v35[0] = v33[0];
  v35[1] = v33[1];
  _OWORD v35[2] = v33[2];
  unsigned __int8 v36 = v34;
  uint64_t result = sub_1A8DA1098((char *)v35, 6, v1, v2);
  if (v0) {
    return result;
  }
  unsigned int v4 = result;
  if (qword_1E97A8B68 != -1) {
    swift_once();
  }
  BOOL v5 = sub_1A8DA102C(v4, (void *)qword_1E97AD6A8);
  swift_bridgeObjectRelease();
  if (!v5)
  {
    sub_1A8DCBCBC();
    goto LABEL_10;
  }
  sub_1A8DC3DAC((uint64_t)v19);
  uint64_t v6 = v20;
  uint64_t v7 = v21;
  uint64_t v8 = v22;
  uint64_t v9 = v23;
  uint64_t v10 = v24;
  char v11 = v25;
  sub_1A8DCD6E0((uint64_t)v19, (uint64_t)v28);
  if (v32 == 255)
  {
    sub_1A8DCBCBC();
    swift_allocError();
    char v13 = 4;
LABEL_11:
    *unint64_t v12 = v13;
    return (char *)swift_willThrow();
  }
  if (v28[0] != 48 || (v32 & 1) != 0)
  {
    sub_1A8D8EC14();
    swift_allocError();
    unsigned char *v14 = 1;
    swift_willThrow();
  }
  else
  {
    v16[0] = v29;
    v16[1] = v30;
    uint64_t v17 = v31;
    j__swift_unknownObjectRetain(v6, v7, v8, v9, v10, v11 & 1);
    swift_unknownObjectRetain();
    sub_1A8DCC9AC((uint64_t)v16, 5);
    sub_1A8DC3DAC((uint64_t)v26);
    sub_1A8DBA7B4((uint64_t)v26, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
    sub_1A8DCD6E0((uint64_t)v26, (uint64_t)v27);
    if (v27[48] == 255)
    {
      swift_unknownObjectRelease();
      sub_1A8DBA7B4((uint64_t)v19, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
    }
    else
    {
      sub_1A8D8EC14();
      swift_allocError();
      *unint64_t v15 = 3;
      swift_willThrow();
      sub_1A8DBA7B4((uint64_t)v19, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      swift_unknownObjectRelease();
    }
  }
  return (char *)sub_1A8DBA7B4((uint64_t)v19, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
}

uint64_t sub_1A8DCC9AC(uint64_t a1, char a2)
{
  sub_1A8DC3DAC((uint64_t)v12);
  sub_1A8DCD6E0((uint64_t)v12, (uint64_t)v15);
  if (v16 == 255)
  {
    sub_1A8D8EC14();
    swift_allocError();
    unsigned char *v10 = 3;
    return swift_willThrow();
  }
  v17[0] = v15[0];
  v17[1] = v15[1];
  uint64_t v17[2] = v15[2];
  unsigned __int8 v18 = v16;
  uint64_t result = (uint64_t)sub_1A8DA1098((char *)v17, 6, v4, v5);
  if (v2) {
    return result;
  }
  uint64_t v7 = (void *)result;
  if (qword_1E97A8B70 != -1) {
    swift_once();
  }
  BOOL v8 = sub_1A8DA102C(v7, (void *)qword_1E97AD6B0);
  swift_bridgeObjectRelease();
  if (!v8)
  {
    sub_1A8DCBCBC();
    swift_allocError();
    *char v11 = a2;
    return swift_willThrow();
  }
  sub_1A8DC3DAC((uint64_t)v13);
  uint64_t result = sub_1A8DCD6E0((uint64_t)v13, (uint64_t)v14);
  if (v14[48] != 255)
  {
    if (v14[0] != 5)
    {
      sub_1A8D8EC14();
      swift_allocError();
      unsigned char *v9 = 3;
      swift_willThrow();
    }
    return sub_1A8DBA7B4((uint64_t)v13, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
  }
  return result;
}

uint64_t RSAPSSSPKI.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = sub_1A8DCCEB8(a1, a2);
  sub_1A8DCAA70((uint64_t)v7, (uint64_t)(v7 + 4), 0, (2 * v7[2]) | 1, (uint64_t)v19);
  if (v3)
  {
    sub_1A8D8BD58(a1, a2);
    return swift_release();
  }
  swift_release();
  if (v19[0] != 48
    || (sub_1A8D946F4((uint64_t)&v20, (uint64_t)v28), sub_1A8D946F4((uint64_t)v28, (uint64_t)&v29), (v30 & 1) != 0))
  {
    sub_1A8D8EC14();
    swift_allocError();
    unsigned char *v9 = 1;
    swift_willThrow();
    sub_1A8D8BD58(a1, a2);
    return sub_1A8DBA828((uint64_t)v19, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  }
  sub_1A8DBA828((uint64_t)v19, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
  sub_1A8DBA828((uint64_t)v19, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
  sub_1A8DCD328();
  sub_1A8DC3DAC((uint64_t)v21);
  sub_1A8DCD6E0((uint64_t)v21, (uint64_t)v24);
  if (v25 == 255)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *unsigned __int8 v18 = 3;
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_1A8DBA828((uint64_t)v19, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    goto LABEL_7;
  }
  v26[0] = v24[0];
  v26[1] = v24[1];
  long long v26[2] = v24[2];
  unsigned __int8 v27 = v25;
  uint64_t v10 = sub_1A8D944F0((unsigned __int8 *)v26, 3u);
  long long v14 = sub_1A8D931D8(v10, v11, v12, v13);
  unint64_t v16 = v15;
  swift_unknownObjectRelease();
  sub_1A8DC3DAC((uint64_t)v22);
  sub_1A8DBA7B4((uint64_t)v22, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
  sub_1A8DCD6E0((uint64_t)v22, (uint64_t)v23);
  if (v23[48] != 255)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v17 = 3;
    swift_willThrow();
    sub_1A8DBA828((uint64_t)v19, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    sub_1A8D8BD58((uint64_t)v14, v16);
    swift_unknownObjectRelease();
LABEL_7:
    sub_1A8D8BD58(a1, a2);
    return sub_1A8DBA828((uint64_t)v19, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  }
  swift_unknownObjectRelease();
  sub_1A8DBA828((uint64_t)v19, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  sub_1A8D8BD58(a1, a2);
  uint64_t result = sub_1A8DBA828((uint64_t)v19, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  *a3 = v14;
  a3[1] = v16;
  return result;
}

void *sub_1A8DCCEB8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1A8DE9500();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v8 = (void *)MEMORY[0x1E4FBC860];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v9)
      {
        if (v9 >= 1)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A0);
          BOOL v8 = (void *)swift_allocObject();
          size_t v12 = _swift_stdlib_malloc_size(v8);
          _OWORD v8[2] = v9;
          _OWORD v8[3] = 2 * v12 - 64;
        }
        sub_1A8D8BE04(a1, a2);
        uint64_t v13 = sub_1A8DE9400();
        sub_1A8D8BD58(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (v13 != v9)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x1A8DCD064);
        }
      }
      return v8;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v8;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1A8DCD074()
{
  sub_1A8DC3DAC((uint64_t)v14);
  uint64_t v1 = v15;
  uint64_t v2 = v16;
  uint64_t v3 = v17;
  uint64_t v4 = v18;
  uint64_t v5 = v19;
  char v6 = v20;
  sub_1A8DCD6E0((uint64_t)v14, (uint64_t)v23);
  if (v24 == 255)
  {
    sub_1A8DCBCBC();
    swift_allocError();
    *BOOL v8 = 1;
    return swift_willThrow();
  }
  else
  {
    v25[0] = v23[0];
    v25[1] = v23[1];
    void v25[2] = v23[2];
    unsigned __int8 v26 = v24;
    if (LOBYTE(v23[0]) == 48
      && (sub_1A8D946F4((uint64_t)v25 + 8, (uint64_t)v27), sub_1A8D946F4((uint64_t)v27, (uint64_t)v28), (v30 & 1) == 0))
    {
      v12[0] = v28[0];
      v12[1] = v28[1];
      uint64_t v13 = v29;
      uint64_t v10 = v6 & 1;
      j__swift_unknownObjectRetain(v1, v2, v3, v4, v5, v10);
      j__swift_unknownObjectRetain(v1, v2, v3, v4, v5, v10);
      sub_1A8DC4540(v12, 0, 2);
      if (v0
        || (sub_1A8DC456C(v12, 1uLL, 2),
            sub_1A8DC4950(v12, 2uLL, 2),
            sub_1A8DC3DAC((uint64_t)v21),
            sub_1A8DBA7B4((uint64_t)v21, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C), sub_1A8DCD6E0((uint64_t)v21, (uint64_t)v22), v22[48] == 255))
      {
        swift_unknownObjectRelease();
        sub_1A8DBA7B4((uint64_t)v14, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
      }
      else
      {
        sub_1A8D8EC14();
        swift_allocError();
        *uint64_t v11 = 3;
        swift_willThrow();
        sub_1A8DBA7B4((uint64_t)v14, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        swift_unknownObjectRelease();
      }
    }
    else
    {
      sub_1A8D8EC14();
      swift_allocError();
      *uint64_t v7 = 1;
      swift_willThrow();
    }
    return sub_1A8DBA7B4((uint64_t)v14, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
  }
}

uint64_t sub_1A8DCD328()
{
  sub_1A8DC3DAC((uint64_t)v18);
  uint64_t v2 = v19;
  uint64_t v1 = v20;
  uint64_t v4 = v21;
  uint64_t v3 = v22;
  uint64_t v5 = v23;
  char v6 = v24;
  sub_1A8DCD6E0((uint64_t)v18, (uint64_t)v32);
  if (v33 == 255)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *BOOL v8 = 0;
    return swift_willThrow();
  }
  v34[0] = v32[0];
  v34[1] = v32[1];
  _OWORD v34[2] = v32[2];
  unsigned __int8 v35 = v33;
  if (LOBYTE(v32[0]) == 48)
  {
    sub_1A8D946F4((uint64_t)v34 + 8, (uint64_t)v36);
    sub_1A8D946F4((uint64_t)v36, (uint64_t)&v37);
    if ((v38 & 1) == 0)
    {
      sub_1A8DC3DAC((uint64_t)v25);
      sub_1A8DCD6E0((uint64_t)v25, (uint64_t)v28);
      if (v29 == 255)
      {
        sub_1A8D8EC14();
        swift_allocError();
        *uint64_t v16 = 3;
        sub_1A8DBA7B4((uint64_t)v18, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
        j__swift_unknownObjectRetain(v2, v1, v4, v3, v5, v6 & 1);
      }
      else
      {
        v30[0] = v28[0];
        v30[1] = v28[1];
        void v30[2] = v28[2];
        unsigned __int8 v31 = v29;
        sub_1A8DBA7B4((uint64_t)v18, (void (*)(void, void, void, void, void, void, void))sub_1A8DBA7F8);
        j__swift_unknownObjectRetain(v2, v1, v4, v3, v5, v6 & 1);
        size_t v12 = sub_1A8DA1098((char *)v30, 6, v10, v11);
        if (v0) {
          goto LABEL_16;
        }
        uint64_t v13 = v12;
        if (qword_1E97A8B50 != -1) {
          swift_once();
        }
        BOOL v14 = sub_1A8DA102C(v13, (void *)qword_1E97AD690);
        swift_bridgeObjectRelease();
        if (v14)
        {
          sub_1A8DCD074();
          sub_1A8DC3DAC((uint64_t)v26);
          sub_1A8DBA7B4((uint64_t)v26, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
          sub_1A8DCD6E0((uint64_t)v26, (uint64_t)v27);
          if (v27[48] != 255)
          {
            sub_1A8D8EC14();
            swift_allocError();
            *uint64_t v15 = 3;
            swift_willThrow();
            sub_1A8DBA7B4((uint64_t)v18, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
            swift_unknownObjectRelease();
            return sub_1A8DBA7B4((uint64_t)v18, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
          }
LABEL_16:
          swift_unknownObjectRelease();
          sub_1A8DBA7B4((uint64_t)v18, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
          return sub_1A8DBA7B4((uint64_t)v18, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
        }
        sub_1A8DCBCBC();
        swift_allocError();
        *uint64_t v17 = 0;
      }
      swift_willThrow();
      goto LABEL_16;
    }
  }
  sub_1A8D8EC14();
  swift_allocError();
  *uint64_t v7 = 1;
  swift_willThrow();
  return sub_1A8DBA7B4((uint64_t)v18, (void (*)(void, void, void, void, void, void, void))sub_1A8D8ED9C);
}

uint64_t sub_1A8DCD6E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476750);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for RSAPSSSPKI()
{
  return &type metadata for RSAPSSSPKI;
}

uint64_t getEnumTagSinglePayload for RSAPSSSPKIErrors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RSAPSSSPKIErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A8DCD8B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RSAPSSSPKIErrors()
{
  return &type metadata for RSAPSSSPKIErrors;
}

unint64_t sub_1A8DCD8F0()
{
  unint64_t result = qword_1E97A9590;
  if (!qword_1E97A9590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9590);
  }
  return result;
}

uint64_t Curve25519.Signing.PrivateKey.init()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1A8DE97D0();
  *(void *)(v2 + 16) = 32;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  uint64_t v5 = v2;
  unint64_t v3 = sub_1A8D9C658(0x20uLL, (uint64_t)&v5);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t Curve25519.Signing.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1A8DCDEC4();
  *a1 = result;
  return result;
}

uint64_t Curve25519.Signing.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_1A8DCE4C8();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t Curve25519.Signing.PrivateKey.rawRepresentation.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = sub_1A8D9BD98(v0);
  swift_release();
  return v1;
}

uint64_t Curve25519.Signing.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_1A8DCE544();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t Curve25519.Signing.PublicKey.rawRepresentation.getter()
{
  uint64_t v0 = sub_1A8DE97C0();
  uint64_t v1 = sub_1A8D93118(v0);
  swift_bridgeObjectRelease();
  return v1;
}

ValueMetadata *type metadata accessor for Curve25519.Signing()
{
  return &type metadata for Curve25519.Signing;
}

ValueMetadata *type metadata accessor for Curve25519.Signing.PrivateKey()
{
  return &type metadata for Curve25519.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for Curve25519.Signing.PublicKey()
{
  return &type metadata for Curve25519.Signing.PublicKey;
}

uint64_t sub_1A8DCDBAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (!a1) {
    goto LABEL_8;
  }
  init_ccec_ctx_pub();
  swift_beginAccess();
  if (!ccrng()) {
    goto LABEL_9;
  }
  if (ccec_diversify_pub_twin())
  {
    __break(1u);
    goto LABEL_7;
  }
  size_t v3 = ccec_export_pub_size();
  uint64_t v4 = sub_1A8DE97D0();
  *(void *)(v4 + 16) = v3;
  bzero((void *)(v4 + 32), v3);
  uint64_t result = ccec_export_pub();
  if (result)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  *a2 = v4;
  return result;
}

uint64_t sub_1A8DCDCE8(uint64_t a1, uint64_t a2, void **a3)
{
  ccec_ctx_k(a3);
  if (!a1) {
    goto LABEL_5;
  }
  if (!ccrng()) {
    goto LABEL_6;
  }
  uint64_t result = ccec_diversify_priv_twin();
  if (result)
  {
    __break(1u);
LABEL_5:
    __break(1u);
LABEL_6:
    __break(1u);
  }
  return result;
}

uint64_t ccec_ctx_k(void **a1)
{
  return (uint64_t)&a1[3 * **a1 + 2];
}

ValueMetadata *_s7ASN1AnyVMa()
{
  return &_s7ASN1AnyVN;
}

uint64_t sub_1A8DCDDE0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3] >> 1;
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = v0[1];
  uint64_t result = sub_1A8DE9BF0();
  BOOL v5 = __OFSUB__(v2, v1);
  uint64_t v6 = v2 - v1;
  if (!v6) {
    return result;
  }
  if ((v6 < 0) ^ v5 | (v6 == 0))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v7 = v4 + v1;
  do
  {
    ++v7;
    uint64_t result = sub_1A8DE9C00();
    --v6;
  }
  while (v6);
  return result;
}

unint64_t sub_1A8DCDE50()
{
  unint64_t result = qword_1E97A9598;
  if (!qword_1E97A9598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9598);
  }
  return result;
}

ValueMetadata *_s33CoreCryptoCurve25519PublicKeyImplVMa_0()
{
  return &_s33CoreCryptoCurve25519PublicKeyImplVN_0;
}

ValueMetadata *_s34CoreCryptoCurve25519PrivateKeyImplVMa_0()
{
  return &_s34CoreCryptoCurve25519PrivateKeyImplVN_0;
}

uint64_t sub_1A8DCDEC4()
{
  uint64_t v0 = sub_1A8DE97D0();
  *(void *)(v0 + 16) = 32;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  if (ccsha512_di())
  {
    if (!cced25519_make_pub())
    {
      uint64_t v1 = sub_1A8DE97C0();
      size_t v2 = sub_1A8DCE450(v1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    __break(1u);
  }
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

size_t sub_1A8DCDF8C(uint64_t a1, unint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      size_t v2 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v8 = sub_1A8DE9340();
      if (!v8)
      {
        sub_1A8DE9360();
        goto LABEL_25;
      }
      uint64_t v9 = v8;
      uint64_t v10 = sub_1A8DE9370();
      uint64_t v11 = (int)a1 - v10;
      if (__OFSUB__((int)a1, v10)) {
LABEL_31:
      }
        __break(1u);
      uint64_t v12 = sub_1A8DE9360();
      if (v12 >= v7) {
        uint64_t v13 = (a1 >> 32) - (int)a1;
      }
      else {
        uint64_t v13 = v12;
      }
      if (v13 == 32)
      {
        uint64_t v6 = (uint64_t *)(v9 + v11);
        BOOL v5 = (unsigned char *)(v9 + v11 + 32);
LABEL_12:
        size_t v2 = sub_1A8D891D0((size_t)v6, (unint64_t)v5);
        sub_1A8D8BD58(a1, a2);
        return v2;
      }
LABEL_25:
      sub_1A8D8E240();
      swift_allocError();
      *(_DWORD *)uint64_t v25 = 0;
      *(unsigned char *)(v25 + 4) = 1;
      swift_willThrow();
LABEL_26:
      sub_1A8D8BD58(a1, a2);
      return v2;
    case 2uLL:
      size_t v2 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      size_t v16 = sub_1A8DE9340();
      if (!v16) {
        goto LABEL_16;
      }
      uint64_t v17 = sub_1A8DE9370();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_16:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = sub_1A8DE9360();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      if (v16 && v21 == 32)
      {
        size_t v22 = sub_1A8D891D0(v16, v16 + 32);
        swift_release();
        swift_release();
        sub_1A8D8BD58(a1, a2);
        return v22;
      }
      sub_1A8D8E240();
      swift_allocError();
      *(_DWORD *)uint64_t v24 = 0;
      *(unsigned char *)(v24 + 4) = 1;
      swift_willThrow();
      swift_release();
      swift_release();
      goto LABEL_26;
    case 3uLL:
      goto LABEL_25;
    default:
      uint64_t v26 = a1;
      __int16 v27 = a2;
      char v28 = BYTE2(a2);
      char v29 = BYTE3(a2);
      char v30 = BYTE4(a2);
      char v31 = BYTE5(a2);
      if ((a2 & 0xFF000000000000) != 0x20000000000000) {
        goto LABEL_25;
      }
      BOOL v5 = v33;
      uint64_t v6 = &v26;
      goto LABEL_12;
  }
}

uint64_t sub_1A8DCE260(void *a1, void *a2, char **a3)
{
  if (!ccsha512_di()) {
    goto LABEL_9;
  }
  if (!ccrng())
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (!*a1) {
    goto LABEL_11;
  }
  uint64_t v6 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v6 = sub_1A8D96298(0, *((void *)v6 + 2), 0, v6);
  }
  *a3 = v6;
  uint64_t result = cced25519_make_key_pair();
  if (result)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *a2 = 32;
  return result;
}

uint64_t sub_1A8DCE370(uint64_t result, uint64_t a2)
{
  if (!result || a2 - result != 32)
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

size_t sub_1A8DCE3D8@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  if (a1 && a2 - a1 == 32)
  {
    size_t result = sub_1A8D891D0(a1, a2);
    *a3 = result;
  }
  else
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

size_t sub_1A8DCE450(uint64_t a1)
{
  if (*(void *)(a1 + 16) == 32) {
    return sub_1A8D891D0(a1 + 32, a1 + 64);
  }
  sub_1A8D8E240();
  swift_allocError();
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_1A8DCE4C8()
{
  uint64_t result = sub_1A8DE9390();
  if (!v0) {
    return sub_1A8D9BD24();
  }
  return result;
}

uint64_t sub_1A8DCE544()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
  uint64_t result = sub_1A8DE9390();
  if (!v0) {
    return v2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Curve448()
{
  return &type metadata for Curve448;
}

uint64_t SecureEnclave.Curve25519.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_1A8DE9910();
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  unint64_t v39 = (char *)&v35 - v10;
  uint64_t v37 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  unsigned __int8 v36 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_checkMetadataState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  size_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  BOOL v18 = (char *)&v35 - v17;
  uint64_t v19 = *v3;
  uint64_t v43 = v3[1];
  uint64_t v44 = v19;
  uint64_t v20 = v3[2];
  uint64_t v41 = v3[3];
  uint64_t v42 = v20;
  v50[7] = a3;
  sub_1A8DE92B0();
  uint64_t v38 = v7;
  uint64_t v21 = sub_1A8DE9840();
  size_t v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v18, v12);
  if (v21 == 1)
  {
    sub_1A8DE92B0();
    uint64_t v23 = v39;
    sub_1A8DE9870();
    v22(v16, v12);
    uint64_t v24 = AssociatedTypeWitness;
    uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, AssociatedTypeWitness);
    if (result == 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v48 = v24;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v47);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
    sub_1A8D934C8(&v47, (uint64_t)v50);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, a1, a2);
    uint64_t v28 = sub_1A8DE97E0();
    v50[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
    v50[4] = sub_1A8DA44FC();
    v50[0] = v28;
  }
  uint64_t v30 = v44;
  uint64_t v29 = v45;
  uint64_t v32 = v42;
  uint64_t v31 = v43;
  uint64_t v33 = v41;
  sub_1A8D8C154((uint64_t)v50, (uint64_t)&v47);
  unsigned __int8 v34 = __swift_project_boxed_opaque_existential_1(&v47, v48);
  MEMORY[0x1F4188790](v34);
  *(&v35 - 4) = v30;
  *(&v35 - 3) = v31;
  *(&v35 - 2) = v32;
  *(&v35 - 1) = v33;
  sub_1A8DE9390();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (!v29) {
    unsigned __int8 v34 = v46;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
  return (uint64_t)v34;
}

uint64_t sub_1A8DCEA7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X5>, void *a4@<X8>)
{
  uint64_t v25 = a4;
  uint64_t v8 = sub_1A8DE93E0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E4F27740], v8);
    sub_1A8DE93D0();
    uint64_t v13 = a2 - a1;
    if (v13)
    {
      sub_1A8DE9380();
      swift_allocObject();
      swift_retain();
      uint64_t v17 = sub_1A8DE9320();
      uint64_t v15 = sub_1A8DCEF04(v17, v13);
      unint64_t v16 = v18;
      swift_release();
    }
    else
    {
      uint64_t v14 = (void (*)(uint64_t, void))sub_1A8DE93D0();
      v14(a1, 0);
      swift_release();
      swift_release();
      uint64_t v15 = 0;
      unint64_t v16 = 0xC000000000000000;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    uint64_t v19 = sub_1A8DCECA8(a3);
    if (v4)
    {
      return sub_1A8D8BD58(v15, v16);
    }
    else
    {
      uint64_t v21 = v19;
      uint64_t v22 = v20;
      uint64_t result = sub_1A8D8BD58(v15, v16);
      uint64_t v23 = v25;
      *uint64_t v25 = v21;
      v23[1] = v22;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8DCEC88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1A8DCEA7C(a1, a2, *(void **)(v3 + 40), a3);
}

void *sub_1A8DCECA8(void *a1)
{
  v11[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)sub_1A8DE94A0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8B60);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1A8DEC2F0;
  if (!*MEMORY[0x1E4F3BAA0]) {
    __break(1u);
  }
  *(void *)(v3 + 32) = sub_1A8DE9640();
  *(void *)(v3 + 40) = v4;
  uint64_t v5 = (void *)sub_1A8DE97A0();
  swift_bridgeObjectRelease();
  sub_1A8DB2F1C(MEMORY[0x1E4FBC860]);
  uint64_t v6 = (void *)sub_1A8DE9560();
  swift_bridgeObjectRelease();
  v11[0] = 0;
  id v7 = objc_msgSend(a1, sel_sign_algorithms_parameters_error_, v2, v5, v6, v11);

  id v8 = v11[0];
  if (v7)
  {
    uint64_t v9 = (void *)sub_1A8DE94C0();
  }
  else
  {
    uint64_t v9 = v8;
    sub_1A8DE93B0();

    swift_willThrow();
  }
  return v9;
}

uint64_t sub_1A8DCEE40(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1A8DCEF04(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF) {
      return a2 << 32;
    }
    sub_1A8DE9420();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (unsigned char *)sub_1A8DE9340();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = sub_1A8DE9360();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      id v7 = &v4[v6];
      if (v4) {
        id v8 = v7;
      }
      else {
        id v8 = 0;
      }
      uint64_t v3 = sub_1A8DCEE40(v4, v8);
      swift_release();
      return v3;
    }
    uint64_t result = sub_1A8DE9370();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

ValueMetadata *_s34CoreCryptoCurve25519PrivateKeyImplVMa()
{
  return &_s34CoreCryptoCurve25519PrivateKeyImplVN;
}

ValueMetadata *_s33CoreCryptoCurve25519PublicKeyImplVMa()
{
  return &_s33CoreCryptoCurve25519PublicKeyImplVN;
}

size_t sub_1A8DCF00C(uint64_t a1, unint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      size_t v2 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v8 = sub_1A8DE9340();
      if (!v8)
      {
        sub_1A8DE9360();
        goto LABEL_25;
      }
      uint64_t v9 = v8;
      uint64_t v10 = sub_1A8DE9370();
      uint64_t v11 = (int)a1 - v10;
      if (__OFSUB__((int)a1, v10)) {
LABEL_31:
      }
        __break(1u);
      uint64_t v12 = sub_1A8DE9360();
      if (v12 >= v7) {
        uint64_t v13 = (a1 >> 32) - (int)a1;
      }
      else {
        uint64_t v13 = v12;
      }
      if (v13 == 32)
      {
        uint64_t v6 = (uint64_t *)(v9 + v11);
        uint64_t v5 = (unsigned char *)(v9 + v11 + 32);
LABEL_12:
        size_t v2 = sub_1A8D891D0((size_t)v6, (unint64_t)v5);
        sub_1A8D8BD58(a1, a2);
        return v2;
      }
LABEL_25:
      sub_1A8D8E240();
      swift_allocError();
      *(_DWORD *)uint64_t v25 = 0;
      *(unsigned char *)(v25 + 4) = 1;
      swift_willThrow();
LABEL_26:
      sub_1A8D8BD58(a1, a2);
      return v2;
    case 2uLL:
      size_t v2 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      size_t v16 = sub_1A8DE9340();
      if (!v16) {
        goto LABEL_16;
      }
      uint64_t v17 = sub_1A8DE9370();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_16:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = sub_1A8DE9360();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      if (v16 && v21 == 32)
      {
        size_t v22 = sub_1A8D891D0(v16, v16 + 32);
        swift_release();
        swift_release();
        sub_1A8D8BD58(a1, a2);
        return v22;
      }
      sub_1A8D8E240();
      swift_allocError();
      *(_DWORD *)uint64_t v24 = 0;
      *(unsigned char *)(v24 + 4) = 1;
      swift_willThrow();
      swift_release();
      swift_release();
      goto LABEL_26;
    case 3uLL:
      goto LABEL_25;
    default:
      uint64_t v26 = a1;
      __int16 v27 = a2;
      char v28 = BYTE2(a2);
      char v29 = BYTE3(a2);
      char v30 = BYTE4(a2);
      char v31 = BYTE5(a2);
      if ((a2 & 0xFF000000000000) != 0x20000000000000) {
        goto LABEL_25;
      }
      uint64_t v5 = v33;
      uint64_t v6 = &v26;
      goto LABEL_12;
  }
}

size_t sub_1A8DCF2E0()
{
  uint64_t v0 = sub_1A8DE97D0();
  *(void *)(v0 + 16) = 32;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  if (!ccrng()) {
LABEL_5:
  }
    __break(1u);
  if (cccurve25519_make_pub_with_rng())
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v1 = sub_1A8DE97C0();
  size_t v2 = sub_1A8DCE450(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1A8DCF3E8@<X0>(uint64_t a1@<X0>, void *a2@<X2>, _DWORD *a3@<X8>)
{
  if (!ccrng())
  {
    __break(1u);
    goto LABEL_6;
  }
  if (!*a2)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }
  if (!a1) {
    goto LABEL_7;
  }
  uint64_t result = cccurve25519_with_rng();
  *a3 = result;
  return result;
}

uint64_t sub_1A8DCF4A4(unsigned __int8 *a1, unsigned __int8 a2)
{
  if (*a1 != a2)
  {
    sub_1A8D8EC14();
    swift_allocError();
    char v9 = 1;
LABEL_16:
    *uint64_t v8 = v9;
    swift_willThrow();
    sub_1A8D8EC68((uint64_t)a1);
    return v2;
  }
  sub_1A8D946F4((uint64_t)(a1 + 8), (uint64_t)v10);
  uint64_t result = sub_1A8D946F4((uint64_t)v10, (uint64_t)&v11);
  if (v15)
  {
    int64_t v5 = v14 >> 1;
    if (__OFSUB__(v14 >> 1, v13))
    {
      __break(1u);
    }
    else
    {
      if ((uint64_t)((v14 >> 1) - v13) <= 0) {
        goto LABEL_15;
      }
      uint64_t result = v11;
      if (v13 == v5)
      {
LABEL_12:
        sub_1A8DD03E4(v11, v12, v13, v14);
        uint64_t v2 = v7;
        sub_1A8D8EC68((uint64_t)a1);
        return v2;
      }
      if (v13 < v5)
      {
        if (v13 + 1 == v5) {
          goto LABEL_12;
        }
        if (v13 + 1 < v5)
        {
          int v6 = *(char *)(v12 + v13 + 1);
          if (*(unsigned char *)(v12 + v13))
          {
            if (*(unsigned __int8 *)(v12 + v13) != 255 || (v6 & 0x80000000) == 0) {
              goto LABEL_12;
            }
            goto LABEL_15;
          }
          if ((v6 & 0x80000000) == 0)
          {
LABEL_15:
            sub_1A8D8EC14();
            swift_allocError();
            char v9 = 4;
            goto LABEL_16;
          }
          goto LABEL_12;
        }
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DCF5F0(unsigned __int8 *a1, unsigned __int8 a2)
{
  if (*a1 == a2)
  {
    sub_1A8D946F4((uint64_t)(a1 + 8), (uint64_t)v8);
    uint64_t result = sub_1A8D946F4((uint64_t)v8, (uint64_t)&v9);
    if ((v13 & 1) == 0)
    {
LABEL_23:
      __break(1u);
      return result;
    }
    int64_t v4 = v12 >> 1;
    if (__OFSUB__(v12 >> 1, v11))
    {
      __break(1u);
    }
    else
    {
      if ((uint64_t)((v12 >> 1) - v11) <= 0) {
        goto LABEL_17;
      }
      uint64_t result = v9;
      if (v11 == v4) {
        return result;
      }
      if (v11 < v4)
      {
        int v5 = *(unsigned __int8 *)(v10 + v11);
        if (v11 + 1 == v4)
        {
          if (!*(unsigned char *)(v10 + v11)) {
            return result;
          }
LABEL_14:
          if ((v5 & 0x80) == 0) {
            return result;
          }
          goto LABEL_17;
        }
        if (v11 + 1 < v4)
        {
          if (!*(unsigned char *)(v10 + v11))
          {
            if (*(char *)(v10 + v11 + 1) < 0) {
              return result;
            }
            goto LABEL_17;
          }
          if (v5 != 255) {
            goto LABEL_14;
          }
LABEL_17:
          sub_1A8D8EC14();
          swift_allocError();
          char v7 = 4;
          goto LABEL_18;
        }
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  sub_1A8D8EC14();
  swift_allocError();
  char v7 = 1;
LABEL_18:
  *int v6 = v7;
  swift_willThrow();
  return sub_1A8D8EC68((uint64_t)a1);
}

void sub_1A8DCF724(unsigned __int8 *a1, unsigned __int8 a2)
{
  if (*a1 != a2)
  {
    sub_1A8D8EC14();
    swift_allocError();
    char v7 = 1;
LABEL_18:
    *int v6 = v7;
    swift_willThrow();
    sub_1A8D8EC68((uint64_t)a1);
    return;
  }
  sub_1A8D946F4((uint64_t)(a1 + 8), (uint64_t)v8);
  sub_1A8D946F4((uint64_t)v8, (uint64_t)&v9);
  if (v13)
  {
    unint64_t v3 = v11;
    int64_t v4 = v12 >> 1;
    if (__OFSUB__(v12 >> 1, v11))
    {
      __break(1u);
    }
    else
    {
      if ((uint64_t)((v12 >> 1) - v11) <= 0) {
        goto LABEL_17;
      }
      if (v11 == v4)
      {
LABEL_15:
        sub_1A8DCF868(v9, v10, v3, v12);
        return;
      }
      if (v11 < v4)
      {
        int v5 = *(unsigned __int8 *)(v10 + v11);
        if (v11 + 1 == v4)
        {
          if (!*(unsigned char *)(v10 + v11))
          {
            unint64_t v3 = v12 >> 1;
            goto LABEL_15;
          }
          goto LABEL_14;
        }
        if (v11 + 1 < v4)
        {
          if (*(unsigned char *)(v10 + v11))
          {
            if (v5 != 255)
            {
LABEL_14:
              if ((v5 & 0x80) == 0) {
                goto LABEL_15;
              }
            }
          }
          else
          {
            unint64_t v3 = v11 + 1;
            if (*(char *)(v10 + v11 + 1) < 0) {
              goto LABEL_15;
            }
          }
LABEL_17:
          sub_1A8D8EC14();
          swift_allocError();
          char v7 = 4;
          goto LABEL_18;
        }
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
}

void sub_1A8DCF868(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (v5 > 8)
    {
      sub_1A8D8EC14();
      swift_allocError();
      *int v6 = 3;
      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }
    if ((unint64_t)(v5 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_24;
    }
    uint64_t v9 = sub_1A8DDF8D0(0, 8 * v5, 8);
    uint64_t v10 = *(void *)(v9 + 16);
    if (!v10)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return;
    }
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    if (a3 <= v4) {
      uint64_t v13 = v4;
    }
    else {
      uint64_t v13 = a3;
    }
    unint64_t v14 = v13 - a3;
    while (v14 > v10 - 1)
    {
      unint64_t v16 = *(void *)(v9 + 8 * v11 + 32);
      if (v16 - 65 < 0xFFFFFFFFFFFFFF7FLL)
      {
        unint64_t v15 = 0;
      }
      else
      {
        unint64_t v17 = *(unsigned __int8 *)(a2 + a3 + v11);
        if ((v16 & 0x8000000000000000) != 0)
        {
          unint64_t v19 = v17 >> -(char)v16;
          if (v16 <= 0xFFFFFFFFFFFFFFC0) {
            unint64_t v15 = 0;
          }
          else {
            unint64_t v15 = v19;
          }
        }
        else
        {
          uint64_t v18 = v17 << v16;
          if (v16 >= 0x40) {
            unint64_t v15 = 0;
          }
          else {
            unint64_t v15 = v18;
          }
        }
      }
      ++v11;
      v12 |= v15;
      if (v10 == v11) {
        goto LABEL_21;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

void sub_1A8DCF9D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

uint64_t sub_1A8DCF9E8@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1A8DC3DAC((uint64_t)v20);
  sub_1A8D8ECD0((uint64_t)v20, (uint64_t)v28, &qword_1EB476750);
  if (v29 == 255) {
    goto LABEL_8;
  }
  v30[0] = v28[0];
  v30[1] = v28[1];
  void v30[2] = v28[2];
  unsigned __int8 v31 = v29;
  uint64_t result = sub_1A8DCF4A4((unsigned __int8 *)v30, 2u);
  if (v2) {
    return result;
  }
  if (result != 1
    || (sub_1A8DC3DAC((uint64_t)v21), sub_1A8D8ECD0((uint64_t)v21, (uint64_t)v24, &qword_1EB476750), v25 == 255))
  {
LABEL_8:
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v12 = 3;
    return swift_willThrow();
  }
  else
  {
    v26[0] = v24[0];
    v26[1] = v24[1];
    long long v26[2] = v24[2];
    unsigned __int8 v27 = v25;
    if (LOBYTE(v24[0]) == 4)
    {
      sub_1A8D946F4((uint64_t)v26 + 8, (uint64_t)v32);
      uint64_t result = sub_1A8D946F4((uint64_t)v32, (uint64_t)v33);
      if (v34)
      {
        uint64_t v6 = v33[0];
        uint64_t v7 = v33[1];
        uint64_t v8 = v33[2];
        uint64_t v9 = v33[3];
        uint64_t v10 = sub_1A8DC4D98(a1, 0, 2);
        uint64_t v11 = sub_1A8DC513C(a1, 1uLL, 2);
        uint64_t result = sub_1A8DD056C(v6, v7, v8, v9, v10, v11, v14, v15, (uint64_t *)v22, v16);
        long long v17 = v22[5];
        *(_OWORD *)(a2 + 64) = v22[4];
        *(_OWORD *)(a2 + 80) = v17;
        *(void *)(a2 + 96) = v23;
        long long v18 = v22[1];
        *(_OWORD *)a2 = v22[0];
        *(_OWORD *)(a2 + 16) = v18;
        long long v19 = v22[3];
        *(_OWORD *)(a2 + 32) = v22[2];
        *(_OWORD *)(a2 + 48) = v19;
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      sub_1A8D8EC14();
      swift_allocError();
      unsigned char *v13 = 1;
      swift_willThrow();
      return sub_1A8D8ED60((uint64_t)v21);
    }
  }
  return result;
}

uint64_t sub_1A8DCFC2C@<X0>(void **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  if (qword_1E97A8BA8 != -1) {
    swift_once();
  }
  if (sub_1A8DA102C((void *)qword_1E97AD6A0, v5))
  {
    if (qword_1E97A8B58 != -1) {
      swift_once();
    }
    uint64_t v6 = &qword_1E97AD6B8;
LABEL_19:
    *(void *)a3 = *v6;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(v6 + 1);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(v6 + 3);
    swift_unknownObjectRetain();
    return sub_1A8DE97C0();
  }
  if (qword_1E97A8C48 != -1) {
    swift_once();
  }
  if (sub_1A8DA102C((void *)qword_1E97AD740, v5))
  {
    if (qword_1E97A8C30 != -1) {
      swift_once();
    }
    uint64_t v6 = &qword_1E97AD6F0;
    goto LABEL_19;
  }
  if (qword_1E97A8C50 != -1) {
    swift_once();
  }
  if (sub_1A8DA102C((void *)qword_1E97AD748, v5))
  {
    if (qword_1E97A8C38 != -1) {
      swift_once();
    }
    uint64_t v6 = &qword_1E97AD718;
    goto LABEL_19;
  }
  sub_1A8D8EC14();
  uint64_t v8 = swift_allocError();
  unsigned char *v9 = 3;
  uint64_t result = swift_willThrow();
  *a2 = v8;
  return result;
}

uint64_t sub_1A8DCFE44(char **a1, uint64_t a2)
{
  int64_t v4 = a1;
  *(void *)&v39[0] = 1;
  long long v38[2] = v39;
  sub_1A8DCA8E4(2, a1, (uint64_t (*)(char **))sub_1A8DCBD10, (uint64_t)v38);
  long long v5 = *(_OWORD *)(a2 + 56);
  v37[1] = *(_OWORD *)(a2 + 40);
  void v37[2] = v5;
  sub_1A8DCA8E4(4, v4, (uint64_t (*)(char **))sub_1A8DBA704, (uint64_t)v37);
  uint64_t v6 = v2;
  sub_1A8D8ECD0(a2, (uint64_t)v41, &qword_1E97A95A0);
  sub_1A8D8ECD0((uint64_t)v41, (uint64_t)v42, &qword_1E97A95A0);
  uint64_t v7 = (void *)v42[0];
  if (v42[0])
  {
    char v34 = v4;
    uint64_t v8 = v42[1];
    uint64_t v45 = v42[2];
    unint64_t v35 = v42[4];
    uint64_t v36 = v42[3];
    v44[0] = v42[0];
    sub_1A8DD0920(v41);
    sub_1A8DBA344((uint64_t)v44);
    uint64_t v9 = qword_1E97A8B58;
    swift_unknownObjectRetain();
    if (v9 != -1) {
      swift_once();
    }
    uint64_t v10 = unk_1E97AD6C0;
    uint64_t v12 = *((void *)&xmmword_1E97AD6C8 + 1);
    uint64_t v11 = xmmword_1E97AD6C8;
    unint64_t v13 = qword_1E97AD6D8;
    if (sub_1A8DA102C((void *)qword_1E97AD6B8, v7))
    {
      if (v10)
      {
        if (v8)
        {
          char v14 = sub_1A8D94168(v11, v12, v13, v45, v36, v35);
          sub_1A8D8ECA4((uint64_t)v44);
          swift_unknownObjectRelease();
          if (v14) {
            goto LABEL_31;
          }
LABEL_11:
          sub_1A8DBA344((uint64_t)v44);
          uint64_t v15 = qword_1E97A8C30;
          swift_unknownObjectRetain();
          if (v15 != -1) {
            swift_once();
          }
          uint64_t v16 = *(void *)algn_1E97AD6F8;
          uint64_t v18 = *((void *)&xmmword_1E97AD700 + 1);
          uint64_t v17 = xmmword_1E97AD700;
          unint64_t v19 = qword_1E97AD710;
          if (sub_1A8DA102C((void *)qword_1E97AD6F0, v7))
          {
            if (v16)
            {
              if (v8)
              {
                char v20 = sub_1A8D94168(v17, v18, v19, v45, v36, v35);
                sub_1A8D8ECA4((uint64_t)v44);
                swift_unknownObjectRelease();
                if (v20) {
                  goto LABEL_35;
                }
LABEL_20:
                sub_1A8DBA344((uint64_t)v44);
                uint64_t v21 = qword_1E97A8C38;
                swift_unknownObjectRetain();
                if (v21 != -1) {
                  swift_once();
                }
                uint64_t v22 = unk_1E97AD720;
                uint64_t v24 = *((void *)&xmmword_1E97AD728 + 1);
                uint64_t v23 = xmmword_1E97AD728;
                unint64_t v25 = qword_1E97AD738;
                if (sub_1A8DA102C((void *)qword_1E97AD718, v7))
                {
                  if (v22)
                  {
                    if (v8)
                    {
                      char v26 = sub_1A8D94168(v23, v24, v25, v45, v36, v35);
                      sub_1A8D8ECA4((uint64_t)v44);
                      swift_unknownObjectRelease();
                      if (v26) {
                        goto LABEL_39;
                      }
LABEL_29:
                      sub_1A8D8EC14();
                      swift_allocError();
                      *unsigned __int8 v27 = 3;
                      swift_willThrow();
                      sub_1A8D8ECA4((uint64_t)v44);
                      return swift_unknownObjectRelease();
                    }
                  }
                  else if (!v8)
                  {
                    sub_1A8D8ECA4((uint64_t)v44);
LABEL_39:
                    if (qword_1E97A8C50 != -1) {
                      swift_once();
                    }
                    unsigned __int8 v29 = &qword_1E97AD748;
                    goto LABEL_42;
                  }
                }
                sub_1A8D8ECA4((uint64_t)v44);
                swift_unknownObjectRelease();
                goto LABEL_29;
              }
            }
            else if (!v8)
            {
              sub_1A8D8ECA4((uint64_t)v44);
LABEL_35:
              if (qword_1E97A8C48 != -1) {
                swift_once();
              }
              unsigned __int8 v29 = &qword_1E97AD740;
LABEL_42:
              int64_t v4 = v34;
              goto LABEL_43;
            }
          }
          sub_1A8D8ECA4((uint64_t)v44);
          swift_unknownObjectRelease();
          goto LABEL_20;
        }
      }
      else if (!v8)
      {
        sub_1A8D8ECA4((uint64_t)v44);
LABEL_31:
        int64_t v4 = v34;
        if (qword_1E97A8BA8 != -1) {
          swift_once();
        }
        unsigned __int8 v29 = &qword_1E97AD6A0;
LABEL_43:
        uint64_t v30 = *v29;
        uint64_t v31 = sub_1A8DE97C0();
        *(void *)&v39[0] = v30;
        MEMORY[0x1F4188790](v31);
        uint64_t v33 = v39;
        sub_1A8DCA8E4(160, v4, sub_1A8DD0954, (uint64_t)v32);
        sub_1A8D8ECA4((uint64_t)v44);
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease();
        if (v6) {
          return result;
        }
        goto LABEL_44;
      }
    }
    sub_1A8D8ECA4((uint64_t)v44);
    swift_unknownObjectRelease();
    goto LABEL_11;
  }
LABEL_44:
  sub_1A8D8ECD0(a2 + 72, (uint64_t)v40, &qword_1E97A95A8);
  uint64_t result = sub_1A8D8ECD0((uint64_t)v40, (uint64_t)v43, &qword_1E97A95A8);
  if (*(void *)&v43[0])
  {
    v39[0] = v43[0];
    v39[1] = v43[1];
    MEMORY[0x1F4188790](result);
    uint64_t v33 = v39;
    return sub_1A8DCA8E4(161, v4, sub_1A8DD0390, (uint64_t)v32);
  }
  return result;
}

uint64_t sub_1A8DD0390(char **a1)
{
  uint64_t v2 = *(_OWORD **)(v1 + 16);
  v4[1] = *v2;
  void v4[2] = v2[1];
  return sub_1A8DCA8E4(3, a1, sub_1A8DCBC9C, (uint64_t)v4);
}

void sub_1A8DD03E4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = swift_unknownObjectRetain();
  sub_1A8DCF868(v8, a2, a3, a4);
  if (!v4 && a4 >> 1 != a3 && (uint64_t)(a4 >> 1) <= a3) {
    __break(1u);
  }
}

uint64_t sub_1A8DD056C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  char v14 = a5;
  if (a5)
  {
    uint64_t v31 = a5;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    sub_1A8DCFC2C(&v31, &v29, (uint64_t)v30);
    if (v10)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_1A8DBA6C4(0);
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
    uint64_t v24 = a3;
    uint64_t v25 = a4;
    uint64_t v26 = a7;
    uint64_t v27 = a8;
    swift_bridgeObjectRelease();
    uint64_t v23 = v30[0];
    uint64_t v22 = v30[1];
    uint64_t v21 = v30[2];
    uint64_t v20 = v30[3];
    char v14 = (void *)v30[4];
  }
  else
  {
    uint64_t v24 = a3;
    uint64_t v25 = a4;
    uint64_t v26 = a7;
    uint64_t v27 = a8;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  sub_1A8DBA62C(v23);
  sub_1A8DBA62C(v23);
  sub_1A8DBA6C4(v23);
  sub_1A8DBA6C4(v23);
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  *a9 = v23;
  a9[1] = v22;
  a9[2] = v21;
  a9[3] = v20;
  a9[4] = (uint64_t)v14;
  a9[5] = a1;
  a9[6] = a2;
  a9[7] = v24;
  a9[8] = v25;
  a9[9] = a6;
  a9[10] = v26;
  a9[11] = v27;
  a9[12] = a10;
  return result;
}

uint64_t sub_1A8DD074C@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  if (*a1 != a2 || (a1[48] & 1) != 0)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v6 = 1;
    swift_willThrow();
LABEL_4:
    sub_1A8D8EC68((uint64_t)a1);
    return sub_1A8DBA6C4(0);
  }
  uint64_t v8 = *((void *)a1 + 5);
  long long v9 = *(_OWORD *)(a1 + 24);
  v23[0] = *(_OWORD *)(a1 + 8);
  v23[1] = v9;
  uint64_t v24 = v8;
  swift_unknownObjectRetain_n();
  sub_1A8DCF9E8(v23, (uint64_t)v17);
  if (v3)
  {
    swift_unknownObjectRelease();
    sub_1A8D8EC68((uint64_t)a1);
    goto LABEL_4;
  }
  sub_1A8DC3DAC((uint64_t)v25);
  sub_1A8D8ED60((uint64_t)v25);
  sub_1A8D8ECD0((uint64_t)v25, (uint64_t)v26, &qword_1EB476750);
  if (v26[48] != 255)
  {
    sub_1A8D8EC14();
    swift_allocError();
    unsigned char *v10 = 3;
    swift_willThrow();
    sub_1A8D8EC68((uint64_t)a1);
    sub_1A8DBA6C4(*(uint64_t *)&v17[0]);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_4;
  }
  swift_unknownObjectRelease();
  sub_1A8D8EC68((uint64_t)a1);
  uint64_t result = sub_1A8D8EC68((uint64_t)a1);
  uint64_t v11 = v18;
  long long v12 = v19;
  long long v13 = v17[1];
  long long v14 = v20;
  long long v15 = v21;
  long long v16 = v22;
  *(_OWORD *)a3 = v17[0];
  *(_OWORD *)(a3 + 16) = v13;
  *(void *)(a3 + 32) = v11;
  *(_OWORD *)(a3 + 40) = v12;
  *(_OWORD *)(a3 + 56) = v14;
  *(_OWORD *)(a3 + 72) = v15;
  *(_OWORD *)(a3 + 88) = v16;
  return result;
}

uint64_t *sub_1A8DD0920(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1A8DD0954(char **a1)
{
  v3[2] = **(void **)(v1 + 16);
  return sub_1A8DCA8E4(6, a1, (uint64_t (*)(char **))sub_1A8D8E960, (uint64_t)v3);
}

uint64_t sub_1A8DD09A0(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(a1 + 16);
  size_t v4 = _swift_stdlib_malloc_size((const void *)v1) - 32;
  uint64_t result = swift_beginAccess();
  uint64_t v6 = *(void *)(v1 + 16);
  size_t v7 = v4 - v6;
  if (__OFSUB__(v4, v6))
  {
    __break(1u);
    goto LABEL_7;
  }
  BOOL v8 = __OFSUB__(v7, v3);
  size_t v9 = v7 - v3;
  if (v8)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  size_t v10 = _swift_stdlib_malloc_size((const void *)v1);
  uint64_t result = (uint64_t)sub_1A8DD1388((char *)(v1 + 32), v1 + v10, v6, a1);
  uint64_t v11 = *(void *)(v1 + 16);
  BOOL v8 = __OFADD__(v11, v3);
  uint64_t v12 = v11 + v3;
  if (!v8)
  {
    *(void *)(v1 + 16) = v12;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

size_t sub_1A8DD0A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_1A8DAE538(a1, a2, a3, a4);
  size_t v10 = _swift_stdlib_malloc_size(v4) - 32;
  size_t result = swift_beginAccess();
  int64_t v12 = v4[2];
  size_t v13 = v10 - v12;
  if (__OFSUB__(v10, v12))
  {
    __break(1u);
    goto LABEL_8;
  }
  BOOL v14 = __OFSUB__(v13, v9);
  size_t v15 = v13 - v9;
  if (v14)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  size_t result = _swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v12)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  size_t result = sub_1A8DD140C(a1, a2, a3, a4, (uint64_t)v4 + v12 + 32);
  uint64_t v16 = v4[2];
  BOOL v14 = __OFADD__(v16, v9);
  uint64_t v17 = v16 + v9;
  if (!v14)
  {
    void v4[2] = v17;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

size_t sub_1A8DD0B60(char a1)
{
  uint64_t v2 = v1;
  size_t v4 = _swift_stdlib_malloc_size(v2) - 32;
  long long v5 = v2 + 2;
  size_t result = swift_beginAccess();
  int64_t v7 = v2[2];
  size_t v8 = v4 - v7;
  if (__OFSUB__(v4, v7))
  {
    __break(1u);
    goto LABEL_8;
  }
  BOOL v9 = __OFSUB__(v8, 1);
  size_t v10 = v8 - 1;
  if (v9)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *((unsigned char *)v2 + v7 + 32) = a1;
  uint64_t v11 = *v5 + 1;
  if (!__OFADD__(*v5, 1))
  {
    size_t result = swift_beginAccess();
    *long long v5 = v11;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

size_t sub_1A8DD0C2C(const void *a1, size_t a2)
{
  uint64_t v3 = v2;
  size_t v6 = _swift_stdlib_malloc_size(v2) - 32;
  int64_t v7 = v2 + 2;
  size_t result = swift_beginAccess();
  int64_t v9 = v3[2];
  size_t v10 = v6 - v9;
  if (__OFSUB__(v6, v9))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v11 = __OFSUB__(v10, a2);
  size_t v12 = v10 - a2;
  if (v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  size_t result = _swift_stdlib_malloc_size(v3);
  if ((uint64_t)(result - 32) < v9)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!a1) {
    goto LABEL_8;
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    size_t result = (size_t)memmove((char *)v3 + v9 + 32, a1, a2);
LABEL_8:
    if (!__OFADD__(*v7, a2))
    {
      *v7 += a2;
      return result;
    }
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1A8DD0D00(int64_t a1, int64_t a2, size_t a3)
{
  size_t v4 = v3;
  size_t v8 = (char *)*v3 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  BOOL v11 = __OFSUB__(*v8, v10);
  int64_t v12 = *v8 - v10;
  if (v11)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v13 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v4);
    if (result - 32 >= v13)
    {
      if (a2 >= a1) {
        return sub_1A8DD104C(a1, a2, a3);
      }
      goto LABEL_26;
    }
  }
  if (v13 < 0) {
    goto LABEL_22;
  }
  if (HIDWORD(v13))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v13)
  {
    unsigned int v14 = (v13 - 1) | ((v13 - 1) >> 1) | (((v13 - 1) | ((v13 - 1) >> 1)) >> 2);
    unsigned int v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
    int v16 = v15 | HIWORD(v15);
    if (v16 == -1) {
      uint64_t v17 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v17 = (v16 + 1);
    }
  }
  else
  {
    uint64_t v17 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v17;
  if (a1 < 0) {
    goto LABEL_24;
  }
  uint64_t v18 = (const void *)result;
  long long v19 = (char *)*v4;
  uint64_t result = swift_beginAccess();
  uint64_t v20 = *((void *)v19 + 2);
  if (v20 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  sub_1A8D98CE8(v19, 0, a1);
  sub_1A8DD0B60(a3);
  sub_1A8D98CE8((char *)*v4, a2, v20);
  *size_t v4 = v18;
  return swift_release();
}

uint64_t sub_1A8DD0EA0(uint64_t a1, int64_t a2, void *a3, size_t a4)
{
  long long v5 = v4;
  int64_t v10 = (char *)*v4 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  BOOL v13 = __OFSUB__(*v10, v12);
  int64_t v14 = *v10 - v12;
  if (v13)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v15 = v14 + a4;
  if (__OFADD__(v14, a4))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v5);
    if (result - 32 >= v15)
    {
      if (a2 >= a1) {
        return sub_1A8DD114C(a1, a2, a3, a4);
      }
      goto LABEL_26;
    }
  }
  if (v15 < 0) {
    goto LABEL_22;
  }
  if (HIDWORD(v15))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v15)
  {
    unsigned int v16 = (v15 - 1) | ((v15 - 1) >> 1) | (((v15 - 1) | ((v15 - 1) >> 1)) >> 2);
    unsigned int v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
    int v18 = v17 | HIWORD(v17);
    if (v18 == -1) {
      uint64_t v19 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v19 = (v18 + 1);
    }
  }
  else
  {
    uint64_t v19 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v19;
  if (a1 < 0) {
    goto LABEL_24;
  }
  uint64_t v20 = (const void *)result;
  long long v21 = (char *)*v5;
  uint64_t result = swift_beginAccess();
  uint64_t v22 = *((void *)v21 + 2);
  if (v22 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  sub_1A8D98CE8(v21, 0, a1);
  sub_1A8DD0C2C(a3, a4);
  sub_1A8D98CE8((char *)*v5, a2, v22);
  *long long v5 = v20;
  return swift_release();
}

size_t sub_1A8DD104C(int64_t a1, int64_t a2, size_t a3)
{
  int64_t v7 = v3 + 2;
  size_t result = swift_beginAccess();
  int64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  int64_t v10 = v3[2];
  int64_t v11 = v10 - v9;
  if (__OFSUB__(v10, v9))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  int64_t v12 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  size_t result = _swift_stdlib_malloc_size(v3);
  if ((uint64_t)(result - 32) < v12)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  BOOL v13 = __OFSUB__(1, v9);
  uint64_t v14 = 1 - v9;
  if (v13)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v10 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1A8D9A960(a2, v10, v14);
  size_t result = sub_1A8DD1258(a3, a1);
  uint64_t v15 = v3[2];
  uint64_t v16 = v15 + v14;
  if (!__OFADD__(v15, v14))
  {
    size_t result = swift_beginAccess();
    *int64_t v7 = v16;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

size_t sub_1A8DD114C(uint64_t a1, int64_t a2, void *a3, size_t a4)
{
  int64_t v9 = v4 + 2;
  size_t result = swift_beginAccess();
  int64_t v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  int64_t v12 = v4[2];
  int64_t v13 = v12 - v11;
  if (__OFSUB__(v12, v11))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  int64_t v14 = v13 + a4;
  if (__OFADD__(v13, a4))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  size_t result = _swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v14)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  BOOL v15 = __OFSUB__(a4, v11);
  uint64_t v16 = a4 - v11;
  if (v15)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v12 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1A8D9A960(a2, v12, v16);
  size_t result = (size_t)sub_1A8DD12CC(a3, a4, a1);
  uint64_t v17 = v4[2];
  uint64_t v18 = v17 + v16;
  if (!__OFADD__(v17, v16))
  {
    size_t result = swift_beginAccess();
    void *v9 = v18;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

size_t sub_1A8DD1258(size_t result, int64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  int64_t v4 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  char v5 = result;
  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v4 >= a2)
  {
    size_t result = _swift_stdlib_malloc_size(v2);
    *((unsigned char *)v2 + a2 + 32) = v5;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

void *sub_1A8DD12CC(void *result, size_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v6 = a3 + a2;
  if (__OFADD__(a3, a2))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  int64_t v7 = v3;
  size_t v8 = result;
  size_t result = (void *)_swift_stdlib_malloc_size(v7);
  if ((uint64_t)result - 32 < v6)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v6 < a3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  size_t result = (void *)_swift_stdlib_malloc_size(v7);
  if (!v8) {
    return result;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  return memmove(&v7[a3 + 32], v8, a2);
}

char *sub_1A8DD1388(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    if (a2 - (uint64_t)result >= a3)
    {
      char v5 = &result[a3];
      swift_beginAccess();
      return (char *)memmove(v5, (const void *)(a4 + 32), *(void *)(a4 + 16));
    }
    __break(1u);
    goto LABEL_7;
  }
  if (a3 > 0) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t sub_1A8DD140C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    MEMORY[0x1F4188790]();
    MEMORY[0x1F4188790]();
    if (v5)
    {
      uint64_t v7 = v6 - v5;
      uint64_t v8 = v5;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v7 = 0;
    }
    return sub_1A8DD40A8(v8, v7);
  }
  return result;
}

uint64_t Kyber768.PublicKey.init<A>(dataRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DD192C(a1, a2, MEMORY[0x1E4F146D8], sub_1A8DD152C, a3);
}

uint64_t sub_1A8DD152C(uint64_t *a1, void *a2)
{
  return sub_1A8DD1A10(a1, a2, v2[4], v2[5], v2[2], v2[3], MEMORY[0x1E4F146D8]);
}

uint64_t Kyber768.PublicKey.dataRepresentation.getter()
{
  uint64_t v0 = (uint64_t (*)(void))MEMORY[0x1E4F146D8];

  return sub_1A8DD1D18(v0);
}

uint64_t Kyber768.PublicKey.encapsulate()@<X0>(uint64_t a1@<X8>)
{
  return sub_1A8DD1E28(MEMORY[0x1E4F146D8], a1);
}

uint64_t sub_1A8DD1640@<X0>(uint64_t a1@<X8>)
{
  return Kyber768.PublicKey.encapsulate()(a1);
}

uint64_t Kyber768.PrivateKey.init<A>(bytes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  return sub_1A8DD2090(a1, a2, a3, MEMORY[0x1E4F146D8], (uint64_t (*)(void *, uint64_t *))sub_1A8DD3B08, a4);
}

uint64_t Kyber768.PrivateKey.dataRepresentation.getter()
{
  uint64_t v0 = (uint64_t (*)(void))MEMORY[0x1E4F146D8];

  return sub_1A8DD23EC(v0);
}

uint64_t static Kyber768.PrivateKey.generate()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DD253C(MEMORY[0x1E4F146D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1A8D9C880, a1);
}

uint64_t Kyber768.PrivateKey.decapsulate(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1A8DD265C(a1, a2, MEMORY[0x1E4F146D8], a3);
}

uint64_t Kyber768.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(void))MEMORY[0x1E4F146D8];

  return sub_1A8DD2B10(v1, sub_1A8DD3B3C, a1);
}

uint64_t sub_1A8DD185C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DD2D10(MEMORY[0x1E4F146D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1A8D9C880, a1);
}

uint64_t sub_1A8DD18D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return Kyber768.PrivateKey.decapsulate(_:)(a1, a2, a3);
}

uint64_t Kyber1024.PublicKey.init<A>(dataRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DD192C(a1, a2, MEMORY[0x1E4F146D0], sub_1A8DD3B68, a3);
}

uint64_t sub_1A8DD192C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X3>, uint64_t (*a4)(void *, uint64_t *)@<X4>, uint64_t *a5@<X8>)
{
  uint64_t result = a3();
  if (result)
  {
    uint64_t v11 = cckem_sizeof_pub_ctx();
    uint64_t v13 = MEMORY[0x1F4188790](v11);
    uint64_t v12 = sub_1A8DE4458(v13, a4);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
    if (!v5) {
      *a5 = v12;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8DD1A10(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t result = *a1;
  if (result) {
    return sub_1A8DD1B30(result, a3, a2, a4, a5, a6, &v8, a7);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DD1A60(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v9 = cckem_pub_ctx_init();
  uint64_t result = ((uint64_t (*)(uint64_t))a5)(v9);
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t result = cckem_import_pubkey();
  if (result)
  {
    int v10 = result;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v11 = v10;
    *(unsigned char *)(v11 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    *a3 = a4;
  }
  return result;
}

uint64_t sub_1A8DD1B30(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t (*a8)(void))
{
  uint64_t result = a8();
  if (result)
  {
    uint64_t v12 = cckem_pub_ctx_init();
    MEMORY[0x1F4188790](v12);
    uint64_t result = sub_1A8DE9390();
    if (v8) {
      *a7 = v8;
    }
    else {
      *a3 = a4;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8DD1C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (!a1)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t result = cckem_import_pubkey();
  if (result)
  {
    int v6 = result;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v7 = v6;
    *(unsigned char *)(v7 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t Kyber1024.PublicKey.dataRepresentation.getter()
{
  uint64_t v0 = (uint64_t (*)(void))MEMORY[0x1E4F146D0];

  return sub_1A8DD1D18(v0);
}

uint64_t sub_1A8DD1D18(uint64_t (*a1)(void))
{
  _OWORD v4[3] = *MEMORY[0x1E4F143B8];
  if (!a1()) {
    __break(1u);
  }
  uint64_t v1 = cckem_pubkey_nbytes_info();
  v4[0] = sub_1A8D93078(v1);
  v4[1] = v2;
  sub_1A8DD9764(v4, 0);
  sub_1A8DD2DEC(v4);
  return v4[0];
}

uint64_t Kyber1024.PublicKey.encapsulate()@<X0>(uint64_t a1@<X8>)
{
  return sub_1A8DD1E28(MEMORY[0x1E4F146D0], a1);
}

uint64_t sub_1A8DD1E28@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *v2;
  int v17 = 0;
  if (!ccrng())
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  if (!a1()) {
    goto LABEL_19;
  }
  uint64_t v7 = cckem_shared_key_nbytes_info();
  if (qword_1EB476778 != -1) {
    swift_once();
  }
  uint64_t v8 = off_1EB476770;
  *(void *)&long long v15 = off_1EB476770;
  if (v7)
  {
    if ((v7 & 0x8000000000000000) == 0)
    {
      swift_retain();
      do
      {
        swift_beginAccess();
        uint64_t v9 = sub_1A8DD0D00(*(void *)(v15 + 16), *(void *)(v15 + 16), 0);
        --v7;
      }
      while (v7);
      uint64_t v8 = (void *)v15;
      uint64_t result = ((uint64_t (*)(uint64_t))a1)(v9);
      if (result) {
        goto LABEL_10;
      }
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v14 = swift_retain();
  uint64_t result = ((uint64_t (*)(uint64_t))a1)(v14);
  if (!result) {
    goto LABEL_15;
  }
LABEL_10:
  uint64_t v11 = cckem_encapsulated_key_nbytes_info();
  *(void *)&long long v15 = sub_1A8D93078(v11);
  *((void *)&v15 + 1) = v12;
  sub_1A8DD9764(&v15, 0);
  long long v16 = v15;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    size_t v13 = sub_1A8DADA24((uint64_t)v8);
    swift_release();
    uint64_t v8 = (void *)v13;
  }
  swift_beginAccess();
  uint64_t result = sub_1A8DD30DC(&v16, v6 + 32, (uint64_t)v8 + 32);
  if (v3)
  {
    swift_release();
    return sub_1A8D8BD58(v16, *((unint64_t *)&v16 + 1));
  }
LABEL_16:
  *(void *)a2 = v8;
  *(_OWORD *)(a2 + 8) = v16;
  return result;
}

uint64_t sub_1A8DD2038@<X0>(uint64_t a1@<X8>)
{
  return Kyber1024.PublicKey.encapsulate()(a1);
}

uint64_t Kyber1024.PrivateKey.init<A>(bytes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  return sub_1A8DD2090(a1, a2, a3, MEMORY[0x1E4F146D0], (uint64_t (*)(void *, uint64_t *))sub_1A8DD3BB0, a4);
}

uint64_t sub_1A8DD2090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(void *, uint64_t *)@<X4>, unint64_t *a6@<X8>)
{
  uint64_t result = a4();
  if (result)
  {
    uint64_t v13 = cckem_sizeof_full_ctx();
    _OWORD v15[2] = a2;
    _OWORD v15[3] = a3;
    void v15[4] = a1;
    unint64_t v16 = MEMORY[0x1F4188790](v13);
    unint64_t v14 = sub_1A8D9C9CC(v16, a5, (uint64_t)v15);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
    if (!v6) {
      *a6 = v14;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1A8DD2174(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  if (*result)
  {
    uint64_t result = (void *)sub_1A8DE9390();
    if (!v4) {
      *a2 = a4;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8DD21E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (!a4()) {
    goto LABEL_18;
  }
  uint64_t v7 = cckem_privkey_nbytes_info();
  if (!a4())
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v8 = cckem_pubkey_nbytes_info();
  uint64_t v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!a1)
  {
    if (v9) {
      goto LABEL_10;
    }
LABEL_20:
    uint64_t result = a4();
    if (result)
    {
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v9 != a2 - a1)
  {
LABEL_10:
    sub_1A8D8E240();
    swift_allocError();
    char v14 = 1;
    *(_DWORD *)uint64_t v13 = 1;
    goto LABEL_11;
  }
  uint64_t result = a4();
  if (!result) {
    goto LABEL_21;
  }
  int v11 = cckem_import_privkey();
  if (v11)
  {
    int v12 = v11;
    sub_1A8D8E240();
    swift_allocError();
    char v14 = 0;
    *(_DWORD *)uint64_t v13 = v12;
LABEL_11:
    *(unsigned char *)(v13 + 4) = v14;
    return swift_willThrow();
  }
  uint64_t result = cckem_public_ctx();
  if (!result) {
    goto LABEL_23;
  }
  uint64_t result = a4();
  if (!result)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  uint64_t result = cckem_import_pubkey();
  if (result)
  {
    int v15 = result;
    sub_1A8D8E240();
    swift_allocError();
    char v14 = 0;
    *(_DWORD *)uint64_t v13 = v15;
    goto LABEL_11;
  }
  return result;
}

uint64_t Kyber1024.PrivateKey.dataRepresentation.getter()
{
  uint64_t v0 = (uint64_t (*)(void))MEMORY[0x1E4F146D0];

  return sub_1A8DD23EC(v0);
}

uint64_t sub_1A8DD23EC(uint64_t (*a1)(void))
{
  v10[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *v1;
  if (!a1()) {
    goto LABEL_6;
  }
  uint64_t v4 = cckem_privkey_nbytes_info();
  if (!a1()) {
    goto LABEL_7;
  }
  uint64_t v5 = cckem_pubkey_nbytes_info();
  uint64_t v6 = v4 + v5;
  if (__OFADD__(v4, v5))
  {
    __break(1u);
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }
  v10[0] = sub_1A8D93078(v6);
  v10[1] = v7;
  sub_1A8DD9764(v10, 0);
  uint64_t v9 = v6;
  sub_1A8DD33F0(v10, v3 + 32, &v9, v6);
  return v10[0];
}

uint64_t static Kyber1024.PrivateKey.generate()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DD253C(MEMORY[0x1E4F146D0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1A8D9C8AC, a1);
}

uint64_t sub_1A8DD253C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = ccrng();
  if (!v6)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  uint64_t v7 = v6;
  if (!a1()) {
    goto LABEL_5;
  }
  uint64_t v8 = cckem_sizeof_full_ctx();
  uint64_t result = a2(v8, v7, v8);
  *a3 = result;
  return result;
}

uint64_t Kyber1024.PrivateKey.decapsulate(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1A8DD265C(a1, a2, MEMORY[0x1E4F146D0], a3);
}

uint64_t sub_1A8DD265C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, void *a4@<X8>)
{
  if (!a3()) {
LABEL_37:
  }
    __break(1u);
  uint64_t v7 = cckem_shared_key_nbytes_info();
  if (qword_1EB476778 != -1) {
    swift_once();
  }
  uint64_t v8 = off_1EB476770;
  uint64_t v25 = off_1EB476770;
  if (v7)
  {
    if (v7 < 0)
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    swift_retain();
    do
    {
      swift_beginAccess();
      sub_1A8DD0D00(v25[2], v25[2], 0);
      --v7;
    }
    while (v7);
    uint64_t v8 = v25;
  }
  else
  {
    swift_retain();
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    size_t v9 = sub_1A8DADA24((uint64_t)v8);
    swift_release();
    uint64_t v8 = (void *)v9;
  }
  swift_beginAccess();
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        goto LABEL_33;
      }
      sub_1A8D8BE04(a1, a2);
      if (!sub_1A8DE9340())
      {
        sub_1A8DE9360();
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1A8DD2A7CLL);
      }
      if (!__OFSUB__((int)a1, sub_1A8DE9370()))
      {
        sub_1A8DE9360();
        int v10 = cckem_decapsulate();
        if (v10)
        {
          int v11 = v10;
          sub_1A8D8E240();
          swift_allocError();
          *(_DWORD *)uint64_t v12 = v11;
          *(unsigned char *)(v12 + 4) = 0;
          swift_willThrow();
          sub_1A8D8BD58(a1, a2);
          return swift_release();
        }
        uint64_t result = sub_1A8D8BD58(a1, a2);
        goto LABEL_31;
      }
      break;
    case 2uLL:
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v24 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v14 = sub_1A8DE9340();
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = sub_1A8DE9370();
        if (__OFSUB__(v13, v16))
        {
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        uint64_t v17 = v15 + v13 - v16;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if (__OFSUB__(v24, v13)) {
        goto LABEL_34;
      }
      sub_1A8DE9360();
      if (!v17) {
        goto LABEL_39;
      }
      int v21 = cckem_decapsulate();
      if (v21)
      {
        int v22 = v21;
        sub_1A8D8E240();
        swift_allocError();
        *(_DWORD *)uint64_t v23 = v22;
        *(unsigned char *)(v23 + 4) = 0;
        swift_willThrow();
        swift_release();
        swift_release();
        return swift_release();
      }
      swift_release();
      uint64_t result = swift_release();
LABEL_31:
      *a4 = v8;
      return result;
    default:
      uint64_t result = cckem_decapsulate();
      if (!result) {
        goto LABEL_31;
      }
      int v19 = result;
      sub_1A8D8E240();
      swift_allocError();
      *(_DWORD *)uint64_t v20 = v19;
      *(unsigned char *)(v20 + 4) = 0;
      swift_willThrow();
      return swift_release();
  }
LABEL_35:
  __break(1u);
  goto LABEL_36;
}

uint64_t Kyber1024.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(void))MEMORY[0x1E4F146D0];

  return sub_1A8DD2B10(v1, sub_1A8DD3BE4, a1);
}

uint64_t sub_1A8DD2B10@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void *, uint64_t *)@<X1>, uint64_t *a3@<X8>)
{
  if (!a1()) {
    goto LABEL_12;
  }
  uint64_t v6 = cckem_sizeof_pub_ctx();
  if (v6 < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = sub_1A8DE97D0();
    *(void *)(v8 + 16) = v7;
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
  }
  if (!cckem_public_ctx()) {
    goto LABEL_13;
  }
  if (cckem_export_pubkey()) {
    goto LABEL_11;
  }
  *(void *)(v8 + 16) = v7;
  if (!a1()) {
    goto LABEL_14;
  }
  uint64_t v9 = cckem_sizeof_pub_ctx();
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v10 = sub_1A8DE4458(v12, a2);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v10;
  return result;
}

uint64_t sub_1A8DD2C9C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DD2D10(MEMORY[0x1E4F146D0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1A8D9C8AC, a1);
}

uint64_t sub_1A8DD2D10@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6 = ccrng();
  if (!v6)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  uint64_t v7 = v6;
  if (!a1()) {
    goto LABEL_5;
  }
  uint64_t v8 = cckem_sizeof_full_ctx();
  uint64_t result = a2(v8, v7, v8);
  *a3 = result;
  return result;
}

uint64_t sub_1A8DD2DD0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return Kyber1024.PrivateKey.decapsulate(_:)(a1, a2, a3);
}

uint64_t sub_1A8DD2DEC(uint64_t *a1)
{
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v7 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v1 = (int)v4;
      uint64_t v2 = v4 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_16;
      }
      if (v2 < (int)v4) {
        goto LABEL_29;
      }
      if (sub_1A8DE9340() && __OFSUB__((int)v4, sub_1A8DE9370())) {
        goto LABEL_30;
      }
LABEL_15:
      sub_1A8DE9380();
      swift_allocObject();
      uint64_t v10 = sub_1A8DE9320();
      swift_release();
      uint64_t v7 = v10;
LABEL_16:
      if (v2 < v1) {
        goto LABEL_25;
      }
      if (!sub_1A8DE9340()) {
        goto LABEL_32;
      }
      if (__OFSUB__(v1, sub_1A8DE9370())) {
        goto LABEL_27;
      }
      sub_1A8DE9360();
      uint64_t result = cckem_export_pubkey();
      if (result) {
        goto LABEL_28;
      }
      unint64_t v9 = v7 | 0x4000000000000000;
      goto LABEL_21;
    case 2uLL:
      uint64_t v11 = *a1;
      uint64_t v13 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1A8DE93C0();
      uint64_t v4 = v11;
      uint64_t v8 = *(void *)(v11 + 16);
      if (!sub_1A8DE9340())
      {
        __break(1u);
LABEL_32:
        __break(1u);
        JUMPOUT(0x1A8DD30CCLL);
      }
      if (__OFSUB__(v8, sub_1A8DE9370())) {
        goto LABEL_24;
      }
      sub_1A8DE9360();
      uint64_t result = cckem_export_pubkey();
      if (result) {
        goto LABEL_26;
      }
      unint64_t v9 = v13 | 0x8000000000000000;
LABEL_21:
      *a1 = v4;
      a1[1] = v9;
      break;
    case 3uLL:
      uint64_t result = cckem_export_pubkey();
      if (!result) {
        return result;
      }
      __break(1u);
      goto LABEL_15;
    default:
      LOWORD(v12) = a1[1];
      BYTE2(v12) = BYTE2(a1[1]);
      HIBYTE(v12) = BYTE3(a1[1]);
      __int16 v14 = WORD2(a1[1]);
      unsigned __int8 v15 = BYTE6(a1[1]);
      uint64_t result = cckem_export_pubkey();
      if (result)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
      }
      *a1 = v4;
      a1[1] = v12 | ((unint64_t)v14 << 32) | ((unint64_t)HIBYTE(v14) << 40) | ((unint64_t)v15 << 48);
      break;
  }
  return result;
}

uint64_t sub_1A8DD30DC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      *(void *)&long long v19 = *a1;
      *((void *)&v19 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t result = sub_1A8DD36D8((int *)&v19, a2, a3);
      uint64_t v9 = v19;
      unint64_t v10 = *((void *)&v19 + 1) | 0x4000000000000000;
      goto LABEL_7;
    case 2uLL:
      *(void *)&long long v19 = *a1;
      *((void *)&v19 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1A8DE93C0();
      uint64_t v11 = *((void *)&v19 + 1);
      uint64_t v13 = *(void *)(v19 + 16);
      uint64_t v12 = *(void *)(v19 + 24);
      uint64_t v18 = v19;
      if (!sub_1A8DE9340()) {
        goto LABEL_22;
      }
      if (__OFSUB__(v13, sub_1A8DE9370()))
      {
        __break(1u);
      }
      else if (!__OFSUB__(v12, v13))
      {
        sub_1A8DE9360();
        if (a3)
        {
          uint64_t result = cckem_encapsulate();
          if (result)
          {
            int v14 = result;
            sub_1A8D8E240();
            swift_allocError();
            *(_DWORD *)uint64_t v15 = v14;
            *(unsigned char *)(v15 + 4) = 0;
            uint64_t result = swift_willThrow();
          }
          *a1 = v18;
          a1[1] = v11 | 0x8000000000000000;
          return result;
        }
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        JUMPOUT(0x1A8DD33E0);
      }
      __break(1u);
      return result;
    case 3uLL:
      *(void *)((char *)&v19 + 7) = 0;
      *(void *)&long long v19 = 0;
      if (!a3) {
        goto LABEL_24;
      }
      uint64_t result = cckem_encapsulate();
      if (result)
      {
        int v16 = result;
        sub_1A8D8E240();
        swift_allocError();
        *(_DWORD *)uint64_t v17 = v16;
        *(unsigned char *)(v17 + 4) = 0;
        return swift_willThrow();
      }
      return result;
    default:
      *(void *)&long long v19 = *a1;
      WORD4(v19) = v3;
      BYTE10(v19) = BYTE2(v3);
      BYTE11(v19) = BYTE3(v3);
      BYTE12(v19) = BYTE4(v3);
      BYTE13(v19) = BYTE5(v3);
      BYTE14(v19) = BYTE6(v3);
      if (!a3)
      {
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      uint64_t result = cckem_encapsulate();
      if (result)
      {
        int v7 = result;
        sub_1A8D8E240();
        swift_allocError();
        *(_DWORD *)uint64_t v8 = v7;
        *(unsigned char *)(v8 + 4) = 0;
        uint64_t result = swift_willThrow();
      }
      uint64_t v9 = v19;
      unint64_t v10 = DWORD2(v19) | ((unint64_t)BYTE12(v19) << 32) | ((unint64_t)BYTE13(v19) << 40) | ((unint64_t)BYTE14(v19) << 48);
LABEL_7:
      *a1 = v9;
      a1[1] = v10;
      return result;
  }
}

uint64_t sub_1A8DD33F0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      *(void *)&long long v13 = *a1;
      *((void *)&v13 + 1) = v4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t result = sub_1A8DD37DC((int *)&v13, a2, a3, a4);
      uint64_t v9 = v13;
      unint64_t v10 = *((void *)&v13 + 1) | 0x4000000000000000;
      goto LABEL_8;
    case 2uLL:
      *(void *)&long long v13 = *a1;
      *((void *)&v13 + 1) = v4 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1A8DE93C0();
      uint64_t v11 = *((void *)&v13 + 1);
      uint64_t v12 = *(void *)(v13 + 16);
      if (!sub_1A8DE9340()) {
        goto LABEL_32;
      }
      if (__OFSUB__(v12, sub_1A8DE9370())) {
        goto LABEL_22;
      }
      sub_1A8DE9360();
      if (cckem_export_privkey()) {
        goto LABEL_25;
      }
      if (__OFSUB__(a4, *a3)) {
        goto LABEL_28;
      }
      if (!cckem_public_ctx()) {
        goto LABEL_33;
      }
      uint64_t result = cckem_export_pubkey();
      if (result) {
        goto LABEL_30;
      }
      *a1 = v13;
      a1[1] = v11 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&v13 + 7) = 0;
      *(void *)&long long v13 = 0;
      if (cckem_export_privkey()) {
        goto LABEL_23;
      }
      if (__OFSUB__(a4, *a3)) {
        goto LABEL_26;
      }
      if (!cckem_public_ctx()) {
        goto LABEL_34;
      }
      uint64_t result = cckem_export_pubkey();
      if (!result) {
        return result;
      }
      goto LABEL_29;
    default:
      *(void *)&long long v13 = *a1;
      WORD4(v13) = v4;
      BYTE10(v13) = BYTE2(v4);
      BYTE11(v13) = BYTE3(v4);
      BYTE12(v13) = BYTE4(v4);
      BYTE13(v13) = BYTE5(v4);
      BYTE14(v13) = BYTE6(v4);
      if (cckem_export_privkey())
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
      }
      if (__OFSUB__(a4, *a3)) {
        goto LABEL_24;
      }
      if (!cckem_public_ctx())
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        JUMPOUT(0x1A8DD36C8);
      }
      uint64_t result = cckem_export_pubkey();
      if (result) {
        goto LABEL_27;
      }
      uint64_t v9 = v13;
      unint64_t v10 = DWORD2(v13) | ((unint64_t)BYTE12(v13) << 32) | ((unint64_t)BYTE13(v13) << 40) | ((unint64_t)BYTE14(v13) << 48);
LABEL_8:
      *a1 = v9;
      a1[1] = v10;
      return result;
  }
}

uint64_t sub_1A8DD36D8(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1A8DE93F0();
  uint64_t v6 = *a1;
  if (a1[1] < (int)v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = sub_1A8DE9340();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = sub_1A8DE9370();
  if (__OFSUB__(v6, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = sub_1A8DE9360();
  if (!a3)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t result = cckem_encapsulate();
  if (result)
  {
    int v7 = result;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(unsigned char *)(v8 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1A8DD37DC(int *a1, uint64_t a2, void *a3, uint64_t a4)
{
  sub_1A8DE93F0();
  uint64_t v7 = *a1;
  if (a1[1] < (int)v7)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!sub_1A8DE9340())
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (__OFSUB__(v7, sub_1A8DE9370())) {
    goto LABEL_10;
  }
  sub_1A8DE9360();
  if (cckem_export_privkey())
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (__OFSUB__(a4, *a3))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!cckem_public_ctx()) {
    goto LABEL_15;
  }
  uint64_t result = cckem_export_pubkey();
  if (result) {
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_1A8DD38F4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = sub_1A8DE9340();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = sub_1A8DE9370();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v11 = sub_1A8DE9360();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = v8 + v12;
  if (v8) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  a3(&v16, v8, v14);
  if (!v3) {
    char v15 = v16;
  }
  return v15 & 1;
}

uint64_t sub_1A8DD39A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result = sub_1A8DE9340();
  uint64_t v7 = result;
  if (result)
  {
    uint64_t result = sub_1A8DE9370();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v7 += a1 - result;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v10 = sub_1A8DE9360();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = v7 + v11;
  if (v7) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  return a3(v7, v13);
}

uint64_t sub_1A8DD3A50(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  uint64_t v9 = a3[2];
  uint64_t v8 = a3[3];
  uint64_t v10 = sub_1A8DAE538(0, *a3, v9, v8);
  uint64_t result = sub_1A8DAE538(v6, v7, v9, v8);
  if (__OFADD__(v10, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v12 = result;
  if (v10 + result < v10)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (a1) {
    uint64_t v13 = a1 + v10;
  }
  else {
    uint64_t v13 = 0;
  }
  return a4(v13, v12);
}

void *sub_1A8DD3B08(void *a1, void *a2)
{
  return sub_1A8DD2174(a1, a2, *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_1A8DD3B3C(uint64_t *a1, void *a2)
{
  return sub_1A8DD3C10(a1, a2, MEMORY[0x1E4F146D8]);
}

uint64_t sub_1A8DD3B68(uint64_t *a1, void *a2)
{
  return sub_1A8DD1A10(a1, a2, v2[4], v2[5], v2[2], v2[3], MEMORY[0x1E4F146D0]);
}

void *sub_1A8DD3BB0(void *a1, void *a2)
{
  return sub_1A8DD2174(a1, a2, *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_1A8DD3BE4(uint64_t *a1, void *a2)
{
  return sub_1A8DD3C10(a1, a2, MEMORY[0x1E4F146D0]);
}

uint64_t sub_1A8DD3C10(uint64_t *a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t result = *a1;
  if (result) {
    return sub_1A8DD1A60(result, **(void **)(v3 + 16), a2, *(void *)(v3 + 24), a3);
  }
  __break(1u);
  return result;
}

_UNKNOWN **sub_1A8DD3C44()
{
  return &protocol witness table for Kyber768.PublicKey;
}

_UNKNOWN **sub_1A8DD3C50()
{
  return &protocol witness table for Kyber1024.PublicKey;
}

ValueMetadata *type metadata accessor for Kyber768()
{
  return &type metadata for Kyber768;
}

ValueMetadata *type metadata accessor for Kyber768.PublicKey()
{
  return &type metadata for Kyber768.PublicKey;
}

ValueMetadata *type metadata accessor for Kyber768.PrivateKey()
{
  return &type metadata for Kyber768.PrivateKey;
}

ValueMetadata *type metadata accessor for Kyber1024()
{
  return &type metadata for Kyber1024;
}

ValueMetadata *type metadata accessor for Kyber1024.PublicKey()
{
  return &type metadata for Kyber1024.PublicKey;
}

ValueMetadata *type metadata accessor for Kyber1024.PrivateKey()
{
  return &type metadata for Kyber1024.PrivateKey;
}

size_t sub_1A8DD3CBC()
{
  size_t v1 = _swift_stdlib_malloc_size(v0) - 32;
  size_t result = swift_beginAccess();
  int64_t v3 = v0[2];
  if (__OFSUB__(v1, v3))
  {
    __break(1u);
    goto LABEL_6;
  }
  if (((v1 - v3) & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  size_t result = _swift_stdlib_malloc_size(v0);
  if ((uint64_t)(result - 32) >= v3)
  {
    v0[2] = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

size_t sub_1A8DD3D40(int64_t a1, int64_t a2)
{
  uint64_t v5 = v2 + 2;
  size_t result = swift_beginAccess();
  int64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }
  int64_t v8 = v2[2];
  if (__OFSUB__(v8, v7))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v8 - v7)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  BOOL v9 = __OFSUB__(0, v7);
  uint64_t v10 = a1 - a2;
  if (v9)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v8 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  size_t result = sub_1A8D9A960(a2, v8, v10);
  if (a1 < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < a1)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  size_t result = _swift_stdlib_malloc_size(v2);
  uint64_t v11 = v2[2];
  uint64_t v12 = v11 + v10;
  if (!__OFADD__(v11, v10))
  {
    size_t result = swift_beginAccess();
    *uint64_t v5 = v12;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1A8DD3E48(int64_t a1, int64_t a2)
{
  int64_t v3 = v2;
  uint64_t v6 = (char *)*v2 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *v6 - v8;
  if (__OFSUB__(*v6, v8))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v3);
    if (result - 32 >= v9)
    {
      if (a2 >= a1) {
        return sub_1A8DD3D40(a1, a2);
      }
      goto LABEL_24;
    }
  }
  if (v9 < 0) {
    goto LABEL_20;
  }
  if (HIDWORD(v9))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v9)
  {
    unsigned int v10 = (v9 - 1) | ((v9 - 1) >> 1) | (((v9 - 1) | ((v9 - 1) >> 1)) >> 2);
    unsigned int v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
    int v12 = v11 | HIWORD(v11);
    if (v12 == -1) {
      uint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v13 = (v12 + 1);
    }
  }
  else
  {
    uint64_t v13 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v13;
  if (a1 < 0) {
    goto LABEL_22;
  }
  uint64_t v14 = (const void *)result;
  char v15 = (char *)*v3;
  uint64_t result = swift_beginAccess();
  uint64_t v16 = *((void *)v15 + 2);
  if (v16 < a2)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  sub_1A8D98CE8(v15, 0, a1);
  sub_1A8DD3CBC();
  sub_1A8D98CE8((char *)*v3, a2, v16);
  char *v3 = v14;
  return swift_release();
}

uint64_t sub_1A8DD3FC8(uint64_t a1, uint64_t a2)
{
  return sub_1A8DD21E4(a1, a2, *(void *)(v2 + 16), MEMORY[0x1E4F146D0]);
}

uint64_t sub_1A8DD3FF8(uint64_t a1, uint64_t a2)
{
  return sub_1A8DD1C14(a1, a2, *(void *)(v2 + 16), MEMORY[0x1E4F146D0]);
}

uint64_t sub_1A8DD4028(uint64_t a1, uint64_t a2)
{
  return sub_1A8DD21E4(a1, a2, *(void *)(v2 + 16), MEMORY[0x1E4F146D8]);
}

uint64_t sub_1A8DD4058(uint64_t a1, uint64_t a2)
{
  return sub_1A8DD1C14(a1, a2, *(void *)(v2 + 16), MEMORY[0x1E4F146D8]);
}

void *sub_1A8DD4088(void *__src, size_t __len)
{
  if (__src)
  {
    if ((__len & 0x8000000000000000) != 0) {
      __break(1u);
    }
    else {
      return memmove(*(void **)(v2 + 40), __src, __len);
    }
  }
  return __src;
}

uint64_t sub_1A8DD40A8(uint64_t a1, uint64_t a2)
{
  return sub_1A8DD3A50(a1, a2, *(uint64_t **)(v2 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24));
}

uint64_t sub_1A8DD40C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, int64_t a5@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  double v9 = ceil((double)a4 * 0.03125);
  if ((~*(void *)&v9 & 0x7FF0000000000000) == 0) {
    goto LABEL_30;
  }
  if (v9 <= -1.0) {
    goto LABEL_31;
  }
  if (v9 >= 256.0) {
    goto LABEL_32;
  }
  uint64_t v6 = a4;
  uint64_t v5 = a1;
  LODWORD(v7) = (int)v9;
  if (qword_1EB476778 != -1) {
    goto LABEL_33;
  }
LABEL_5:
  unsigned int v10 = off_1EB476770;
  uint64_t v44 = off_1EB476770;
  sub_1A8DADA24(v5);
  if (!v7)
  {
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  uint64_t v29 = (void *)a5;
  uint64_t v30 = v6;
  a5 = (int64_t)&v43 + 8;
  uint64_t v32 = a3 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v31 = a2 >> 32;
  swift_retain_n();
  LOBYTE(v11) = 1;
  int v35 = v7;
  do
  {
    uint64_t v12 = swift_retain();
    sub_1A8DD6A6C(v12, &v43);
    swift_beginAccess();
    uint64_t v5 = (uint64_t)(v10 + 4);
    uint64_t v7 = (uint64_t)v10 + v10[2] + 32;
    swift_retain();
    sub_1A8DAFA80((uint64_t)(v10 + 4), v7);
    swift_release();
    if (a3 >> 60 != 15)
    {
      switch(a3 >> 62)
      {
        case 1uLL:
          uint64_t v6 = (int)a2;
          if (v31 < (int)a2) {
            goto LABEL_29;
          }
          uint64_t v14 = a2;
          unint64_t v13 = a3;
          sub_1A8D8BE04(a2, a3);
          sub_1A8D8BE04(a2, a3);
          sub_1A8DD8BB0((int)a2, v31, v32, (uint64_t)&v43, sub_1A8DAFA80);
LABEL_12:
          sub_1A8D8BF9C(v14, v13);
          uint64_t v15 = v14;
LABEL_15:
          unint64_t v18 = v13;
LABEL_16:
          sub_1A8D8BF9C(v15, v18);
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(a2 + 16);
          uint64_t v17 = *(void *)(a2 + 24);
          sub_1A8D8C208(a2, a3);
          sub_1A8D8C208(a2, a3);
          swift_retain();
          swift_retain();
          sub_1A8DD8BB0(v16, v17, v32, (uint64_t)&v43, sub_1A8DAFA80);
          swift_release();
          swift_release();
          sub_1A8D8BF9C(a2, a3);
          uint64_t v15 = a2;
          unint64_t v18 = a3;
          goto LABEL_16;
        case 3uLL:
          *(void *)((char *)v45 + 6) = 0;
          *(void *)&v45[0] = 0;
          sub_1A8DAFA80((uint64_t)v45, (uint64_t)v45);
          unint64_t v13 = a3;
          sub_1A8D8BF9C(a2, a3);
          uint64_t v15 = a2;
          goto LABEL_15;
        default:
          *(void *)&v45[0] = a2;
          uint64_t v14 = a2;
          unint64_t v13 = a3;
          DWORD2(v45[0]) = a3;
          WORD6(v45[0]) = WORD2(a3);
          sub_1A8DAFA80((uint64_t)v45, (uint64_t)v45 + BYTE6(a3));
          goto LABEL_12;
      }
    }
    LOBYTE(v45[0]) = v11;
    uint64_t v6 = a5;
    sub_1A8DAFA80((uint64_t)v45, (uint64_t)v45 + 1);
    uint64_t v5 = v43;
    LODWORD(v7) = DWORD2(v43);
    sub_1A8D88D94((uint64_t)v45);
    uint64_t v42 = v5;
    v37[0] = v45[0];
    v37[1] = v45[1];
    swift_retain();
    sub_1A8DAFA80((uint64_t)v37, (uint64_t)&v38);
    swift_retain();
    sub_1A8D88D94((uint64_t)&v39);
    swift_release_n();
    long long v36 = v39;
    uint64_t v20 = v40;
    uint64_t v19 = v41;
    type metadata accessor for SecureBytes.Backing();
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1A8DED130;
    _swift_stdlib_malloc_size((const void *)v21);
    *(_OWORD *)(v21 + 32) = v36;
    *(void *)(v21 + 48) = v20;
    *(void *)(v21 + 56) = v19;
    swift_beginAccess();
    *(void *)(v21 + 16) = 32;
    a5 = _swift_stdlib_malloc_size((const void *)v21);
    swift_release();
    if (a5 < 64)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      swift_once();
      goto LABEL_5;
    }
    uint64_t v22 = swift_retain();
    sub_1A8DAD5A8(v22);
    swift_release();
    swift_release();
    swift_release();
    if (v35 == v11) {
      goto LABEL_21;
    }
    __int16 v11 = v11 + 1;
    unsigned int v10 = (void *)v21;
    a5 = v6;
  }
  while ((v11 & 0x100) == 0);
  __break(1u);
LABEL_21:
  if (v30 < 0) {
    goto LABEL_35;
  }
  uint64_t v23 = (uint64_t)v44;
  swift_beginAccess();
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v25 = sub_1A8DAD870(0, v30, v24, v23);
  if (v26) {
    uint64_t v27 = v24;
  }
  else {
    uint64_t v27 = v25;
  }
  if ((v27 | v24) < 0) {
    goto LABEL_36;
  }
  if (v24 < v27) {
    goto LABEL_37;
  }
  *(void *)&long long v39 = 0;
  *((void *)&v39 + 1) = v27;
  uint64_t v40 = v23;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4767B0);
  sub_1A8D9B260();
  sub_1A8DE9BC0();
  swift_release();
  swift_release();
  uint64_t result = swift_release_n();
  *uint64_t v29 = *(void *)&v37[0];
  return result;
}

uint64_t sub_1A8DD46BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, int64_t a5@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  double v9 = ceil((double)a4 / 48.0);
  if ((~*(void *)&v9 & 0x7FF0000000000000) == 0) {
    goto LABEL_30;
  }
  if (v9 <= -1.0) {
    goto LABEL_31;
  }
  if (v9 >= 256.0) {
    goto LABEL_32;
  }
  uint64_t v6 = a4;
  uint64_t v5 = a1;
  LODWORD(v7) = (int)v9;
  if (qword_1EB476778 != -1) {
    goto LABEL_33;
  }
LABEL_5:
  unsigned int v10 = off_1EB476770;
  uint64_t v46 = off_1EB476770;
  sub_1A8DADA24(v5);
  if (!v7)
  {
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  uint64_t v29 = (void *)a5;
  uint64_t v30 = v6;
  a5 = (int64_t)&v45 + 8;
  uint64_t v32 = a3 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v31 = a2 >> 32;
  swift_retain_n();
  LOBYTE(v11) = 1;
  int v35 = v7;
  do
  {
    uint64_t v12 = swift_retain();
    sub_1A8DD670C(v12, MEMORY[0x1E4F14720], &qword_1EB4767E8, (void (*)(uint64_t, uint64_t))sub_1A8DAFA74, (char *)sub_1A8DD6F1C, &v45);
    swift_beginAccess();
    uint64_t v5 = (uint64_t)(v10 + 4);
    uint64_t v7 = (uint64_t)v10 + v10[2] + 32;
    swift_retain();
    sub_1A8DAFA74((uint64_t)(v10 + 4), v7);
    swift_release();
    if (a3 >> 60 != 15)
    {
      switch(a3 >> 62)
      {
        case 1uLL:
          uint64_t v6 = (int)a2;
          if (v31 < (int)a2) {
            goto LABEL_29;
          }
          uint64_t v14 = a2;
          unint64_t v13 = a3;
          sub_1A8D8BE04(a2, a3);
          sub_1A8D8BE04(a2, a3);
          sub_1A8DD8BB0((int)a2, v31, v32, (uint64_t)&v45, sub_1A8DAFA74);
LABEL_12:
          sub_1A8D8BF9C(v14, v13);
          uint64_t v15 = v14;
LABEL_15:
          unint64_t v18 = v13;
LABEL_16:
          sub_1A8D8BF9C(v15, v18);
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(a2 + 16);
          uint64_t v17 = *(void *)(a2 + 24);
          sub_1A8D8C208(a2, a3);
          sub_1A8D8C208(a2, a3);
          swift_retain();
          swift_retain();
          sub_1A8DD8BB0(v16, v17, v32, (uint64_t)&v45, sub_1A8DAFA74);
          swift_release();
          swift_release();
          sub_1A8D8BF9C(a2, a3);
          uint64_t v15 = a2;
          unint64_t v18 = a3;
          goto LABEL_16;
        case 3uLL:
          *(void *)((char *)v47 + 6) = 0;
          *(void *)&v47[0] = 0;
          sub_1A8DAFA74((uint64_t)v47, (uint64_t)v47);
          unint64_t v13 = a3;
          sub_1A8D8BF9C(a2, a3);
          uint64_t v15 = a2;
          goto LABEL_15;
        default:
          *(void *)&v47[0] = a2;
          uint64_t v14 = a2;
          unint64_t v13 = a3;
          DWORD2(v47[0]) = a3;
          WORD6(v47[0]) = WORD2(a3);
          sub_1A8DAFA74((uint64_t)v47, (uint64_t)v47 + BYTE6(a3));
          goto LABEL_12;
      }
    }
    LOBYTE(v47[0]) = v11;
    uint64_t v6 = a5;
    sub_1A8DAFA74((uint64_t)v47, (uint64_t)v47 + 1);
    uint64_t v5 = v45;
    LODWORD(v7) = DWORD2(v45);
    sub_1A8DA8030((uint64_t)v47);
    uint64_t v44 = v5;
    v38[0] = v47[0];
    v38[1] = v47[1];
    long long v38[2] = v47[2];
    swift_retain();
    sub_1A8DAFA74((uint64_t)v38, (uint64_t)&v39);
    swift_retain();
    sub_1A8DA8030((uint64_t)&v40);
    swift_release_n();
    long long v36 = v41;
    long long v37 = v40;
    uint64_t v20 = v42;
    uint64_t v19 = v43;
    type metadata accessor for SecureBytes.Backing();
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1A8DED120;
    _swift_stdlib_malloc_size((const void *)v21);
    *(_OWORD *)(v21 + 32) = v37;
    *(_OWORD *)(v21 + 48) = v36;
    *(void *)(v21 + 64) = v20;
    *(void *)(v21 + 72) = v19;
    swift_beginAccess();
    *(void *)(v21 + 16) = 48;
    a5 = _swift_stdlib_malloc_size((const void *)v21);
    swift_release();
    if (a5 < 80)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      swift_once();
      goto LABEL_5;
    }
    uint64_t v22 = swift_retain();
    sub_1A8DAD5A8(v22);
    swift_release();
    swift_release();
    swift_release();
    if (v35 == v11) {
      goto LABEL_21;
    }
    __int16 v11 = v11 + 1;
    unsigned int v10 = (void *)v21;
    a5 = v6;
  }
  while ((v11 & 0x100) == 0);
  __break(1u);
LABEL_21:
  if (v30 < 0) {
    goto LABEL_35;
  }
  uint64_t v23 = (uint64_t)v46;
  swift_beginAccess();
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v25 = sub_1A8DAD870(0, v30, v24, v23);
  if (v26) {
    uint64_t v27 = v24;
  }
  else {
    uint64_t v27 = v25;
  }
  if ((v27 | v24) < 0) {
    goto LABEL_36;
  }
  if (v24 < v27) {
    goto LABEL_37;
  }
  *(void *)&long long v40 = 0;
  *((void *)&v40 + 1) = v27;
  *(void *)&long long v41 = v23;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4767B0);
  sub_1A8D9B260();
  sub_1A8DE9BC0();
  swift_release();
  swift_release();
  uint64_t result = swift_release_n();
  *uint64_t v29 = *(void *)&v38[0];
  return result;
}

uint64_t sub_1A8DD4D08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, int64_t a5@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  double v9 = ceil((double)a4 * 0.015625);
  if ((~*(void *)&v9 & 0x7FF0000000000000) == 0) {
    goto LABEL_30;
  }
  if (v9 <= -1.0) {
    goto LABEL_31;
  }
  if (v9 >= 256.0) {
    goto LABEL_32;
  }
  uint64_t v6 = a4;
  uint64_t v5 = a1;
  LODWORD(v7) = (int)v9;
  if (qword_1EB476778 != -1) {
    goto LABEL_33;
  }
LABEL_5:
  unsigned int v10 = off_1EB476770;
  uint64_t v48 = off_1EB476770;
  sub_1A8DADA24(v5);
  if (!v7)
  {
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  uint64_t v29 = (void *)a5;
  uint64_t v30 = v6;
  a5 = (int64_t)&v47 + 8;
  uint64_t v32 = a3 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v31 = a2 >> 32;
  swift_retain_n();
  LOBYTE(v11) = 1;
  int v35 = v7;
  do
  {
    uint64_t v12 = swift_retain();
    sub_1A8DD670C(v12, MEMORY[0x1E4F14728], &qword_1E97A8BE8, (void (*)(uint64_t, uint64_t))sub_1A8DAFA68, (char *)sub_1A8DD6D9C, &v47);
    swift_beginAccess();
    uint64_t v5 = (uint64_t)(v10 + 4);
    uint64_t v7 = (uint64_t)v10 + v10[2] + 32;
    swift_retain();
    sub_1A8DAFA68((uint64_t)(v10 + 4), v7);
    swift_release();
    if (a3 >> 60 != 15)
    {
      switch(a3 >> 62)
      {
        case 1uLL:
          uint64_t v6 = (int)a2;
          if (v31 < (int)a2) {
            goto LABEL_29;
          }
          uint64_t v14 = a2;
          unint64_t v13 = a3;
          sub_1A8D8BE04(a2, a3);
          sub_1A8D8BE04(a2, a3);
          sub_1A8DD8BB0((int)a2, v31, v32, (uint64_t)&v47, sub_1A8DAFA68);
LABEL_12:
          sub_1A8D8BF9C(v14, v13);
          uint64_t v15 = v14;
LABEL_15:
          unint64_t v18 = v13;
LABEL_16:
          sub_1A8D8BF9C(v15, v18);
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(a2 + 16);
          uint64_t v17 = *(void *)(a2 + 24);
          sub_1A8D8C208(a2, a3);
          sub_1A8D8C208(a2, a3);
          swift_retain();
          swift_retain();
          sub_1A8DD8BB0(v16, v17, v32, (uint64_t)&v47, sub_1A8DAFA68);
          swift_release();
          swift_release();
          sub_1A8D8BF9C(a2, a3);
          uint64_t v15 = a2;
          unint64_t v18 = a3;
          goto LABEL_16;
        case 3uLL:
          *(void *)((char *)v49 + 6) = 0;
          *(void *)&v49[0] = 0;
          sub_1A8DAFA68((uint64_t)v49, (uint64_t)v49);
          unint64_t v13 = a3;
          sub_1A8D8BF9C(a2, a3);
          uint64_t v15 = a2;
          goto LABEL_15;
        default:
          *(void *)&v49[0] = a2;
          uint64_t v14 = a2;
          unint64_t v13 = a3;
          DWORD2(v49[0]) = a3;
          WORD6(v49[0]) = WORD2(a3);
          sub_1A8DAFA68((uint64_t)v49, (uint64_t)v49 + BYTE6(a3));
          goto LABEL_12;
      }
    }
    LOBYTE(v49[0]) = v11;
    uint64_t v6 = a5;
    sub_1A8DAFA68((uint64_t)v49, (uint64_t)v49 + 1);
    uint64_t v5 = v47;
    LODWORD(v7) = DWORD2(v47);
    sub_1A8D889A4(v49);
    uint64_t v46 = v5;
    v39[0] = v49[0];
    v39[1] = v49[1];
    _OWORD v39[2] = v49[2];
    uint64_t v39[3] = v49[3];
    swift_retain();
    sub_1A8DAFA68((uint64_t)v39, (uint64_t)&v40);
    swift_retain();
    sub_1A8D889A4(&v41);
    swift_release_n();
    long long v37 = v42;
    long long v38 = v41;
    long long v36 = v43;
    uint64_t v20 = v44;
    uint64_t v19 = v45;
    type metadata accessor for SecureBytes.Backing();
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1A8DED120;
    _swift_stdlib_malloc_size((const void *)v21);
    *(_OWORD *)(v21 + 32) = v38;
    *(_OWORD *)(v21 + 48) = v37;
    *(_OWORD *)(v21 + 64) = v36;
    *(void *)(v21 + 80) = v20;
    *(void *)(v21 + 88) = v19;
    swift_beginAccess();
    *(void *)(v21 + 16) = 64;
    a5 = _swift_stdlib_malloc_size((const void *)v21);
    swift_release();
    if (a5 < 96)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      swift_once();
      goto LABEL_5;
    }
    uint64_t v22 = swift_retain();
    sub_1A8DAD5A8(v22);
    swift_release();
    swift_release();
    swift_release();
    if (v35 == v11) {
      goto LABEL_21;
    }
    __int16 v11 = v11 + 1;
    unsigned int v10 = (void *)v21;
    a5 = v6;
  }
  while ((v11 & 0x100) == 0);
  __break(1u);
LABEL_21:
  if (v30 < 0) {
    goto LABEL_35;
  }
  uint64_t v23 = (uint64_t)v48;
  swift_beginAccess();
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v25 = sub_1A8DAD870(0, v30, v24, v23);
  if (v26) {
    uint64_t v27 = v24;
  }
  else {
    uint64_t v27 = v25;
  }
  if ((v27 | v24) < 0) {
    goto LABEL_36;
  }
  if (v24 < v27) {
    goto LABEL_37;
  }
  *(void *)&long long v41 = 0;
  *((void *)&v41 + 1) = v27;
  *(void *)&long long v42 = v23;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4767B0);
  sub_1A8D9B260();
  sub_1A8DE9BC0();
  swift_release();
  swift_release();
  uint64_t result = swift_release_n();
  *uint64_t v29 = *(void *)&v39[0];
  return result;
}

uint64_t sub_1A8DD536C@<X0>(int64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, int64_t a6@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  double v11 = ceil((double)a5 * 0.03125);
  if ((~*(void *)&v11 & 0x7FF0000000000000) == 0) {
    goto LABEL_30;
  }
  if (v11 <= -1.0) {
    goto LABEL_31;
  }
  if (v11 >= 256.0) {
    goto LABEL_32;
  }
  uint64_t v8 = a5;
  unint64_t v6 = a2;
  int64_t v7 = a1;
  int v9 = (int)v11;
  if (qword_1EB476778 != -1) {
    goto LABEL_33;
  }
LABEL_5:
  uint64_t v12 = off_1EB476770;
  uint64_t v46 = off_1EB476770;
  sub_1A8D8BE04(v7, v6);
  swift_retain();
  sub_1A8DADB28(v7, v6);
  sub_1A8D8BD58(v7, v6);
  if (!v9)
  {
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  uint64_t v31 = (void *)a6;
  uint64_t v32 = v8;
  int64_t v7 = (int64_t)&v45 + 8;
  uint64_t v34 = a4 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v33 = a3 >> 32;
  swift_retain();
  LOBYTE(v13) = 1;
  int v37 = v9;
  do
  {
    uint64_t v14 = swift_retain();
    sub_1A8DD6A6C(v14, &v45);
    swift_beginAccess();
    unint64_t v6 = (unint64_t)(v12 + 4);
    uint64_t v8 = (uint64_t)v12 + v12[2] + 32;
    swift_retain();
    sub_1A8DAFA80((uint64_t)(v12 + 4), v8);
    swift_release();
    if (a4 >> 60 != 15)
    {
      switch(a4 >> 62)
      {
        case 1uLL:
          a6 = (int)a3;
          int v9 = HIDWORD(a3);
          if (v33 < (int)a3) {
            goto LABEL_29;
          }
          uint64_t v16 = a3;
          unint64_t v15 = a4;
          sub_1A8D8BE04(a3, a4);
          sub_1A8D8BE04(a3, a4);
          sub_1A8DD8BB0((int)a3, v33, v34, (uint64_t)&v45, sub_1A8DAFA80);
LABEL_12:
          sub_1A8D8BF9C(v16, v15);
          uint64_t v17 = v16;
LABEL_15:
          unint64_t v20 = v15;
LABEL_16:
          sub_1A8D8BF9C(v17, v20);
          break;
        case 2uLL:
          uint64_t v18 = *(void *)(a3 + 16);
          uint64_t v19 = *(void *)(a3 + 24);
          sub_1A8D8C208(a3, a4);
          sub_1A8D8C208(a3, a4);
          swift_retain();
          swift_retain();
          sub_1A8DD8BB0(v18, v19, v34, (uint64_t)&v45, sub_1A8DAFA80);
          swift_release();
          swift_release();
          sub_1A8D8BF9C(a3, a4);
          uint64_t v17 = a3;
          unint64_t v20 = a4;
          goto LABEL_16;
        case 3uLL:
          *(void *)((char *)v47 + 6) = 0;
          *(void *)&v47[0] = 0;
          sub_1A8DAFA80((uint64_t)v47, (uint64_t)v47);
          unint64_t v15 = a4;
          sub_1A8D8BF9C(a3, a4);
          uint64_t v17 = a3;
          goto LABEL_15;
        default:
          *(void *)&v47[0] = a3;
          uint64_t v16 = a3;
          unint64_t v15 = a4;
          DWORD2(v47[0]) = a4;
          WORD6(v47[0]) = WORD2(a4);
          sub_1A8DAFA80((uint64_t)v47, (uint64_t)v47 + BYTE6(a4));
          goto LABEL_12;
      }
    }
    LOBYTE(v47[0]) = v13;
    a6 = v7;
    sub_1A8DAFA80((uint64_t)v47, (uint64_t)v47 + 1);
    uint64_t v21 = v45;
    int v9 = DWORD2(v45);
    sub_1A8D88D94((uint64_t)v47);
    uint64_t v44 = v21;
    v39[0] = v47[0];
    v39[1] = v47[1];
    swift_retain();
    sub_1A8DAFA80((uint64_t)v39, (uint64_t)&v40);
    swift_retain();
    sub_1A8D88D94((uint64_t)&v41);
    swift_release_n();
    long long v38 = v41;
    uint64_t v23 = v42;
    uint64_t v22 = v43;
    unint64_t v6 = type metadata accessor for SecureBytes.Backing();
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1A8DED130;
    _swift_stdlib_malloc_size((const void *)v8);
    *(_OWORD *)(v8 + 32) = v38;
    *(void *)(v8 + 48) = v23;
    *(void *)(v8 + 56) = v22;
    swift_beginAccess();
    *(void *)(v8 + 16) = 32;
    int64_t v7 = _swift_stdlib_malloc_size((const void *)v8);
    swift_release();
    if (v7 < 64)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      swift_once();
      goto LABEL_5;
    }
    uint64_t v24 = swift_retain();
    sub_1A8DAD5A8(v24);
    swift_release();
    swift_release();
    swift_release();
    if (v37 == v13) {
      goto LABEL_21;
    }
    __int16 v13 = v13 + 1;
    uint64_t v12 = (void *)v8;
    int64_t v7 = a6;
  }
  while ((v13 & 0x100) == 0);
  __break(1u);
LABEL_21:
  if (v32 < 0) {
    goto LABEL_35;
  }
  uint64_t v25 = (uint64_t)v46;
  swift_beginAccess();
  uint64_t v26 = *(void *)(v25 + 16);
  uint64_t v27 = sub_1A8DAD870(0, v32, v26, v25);
  if (v28) {
    uint64_t v29 = v26;
  }
  else {
    uint64_t v29 = v27;
  }
  if ((v29 | v26) < 0) {
    goto LABEL_36;
  }
  if (v26 < v29) {
    goto LABEL_37;
  }
  *(void *)&long long v41 = 0;
  *((void *)&v41 + 1) = v29;
  uint64_t v42 = v25;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4767B0);
  sub_1A8D9B260();
  sub_1A8DE9BC0();
  swift_release();
  swift_release();
  uint64_t result = swift_release_n();
  *uint64_t v31 = *(void *)&v39[0];
  return result;
}

uint64_t sub_1A8DD5984@<X0>(int64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, int64_t a6@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  double v11 = ceil((double)a5 / 48.0);
  if ((~*(void *)&v11 & 0x7FF0000000000000) == 0) {
    goto LABEL_30;
  }
  if (v11 <= -1.0) {
    goto LABEL_31;
  }
  if (v11 >= 256.0) {
    goto LABEL_32;
  }
  uint64_t v8 = a5;
  unint64_t v6 = a2;
  int64_t v7 = a1;
  int v9 = (int)v11;
  if (qword_1EB476778 != -1) {
    goto LABEL_33;
  }
LABEL_5:
  uint64_t v12 = off_1EB476770;
  uint64_t v48 = off_1EB476770;
  sub_1A8D8BE04(v7, v6);
  swift_retain();
  sub_1A8DADB28(v7, v6);
  sub_1A8D8BD58(v7, v6);
  if (!v9)
  {
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  uint64_t v31 = (void *)a6;
  uint64_t v32 = v8;
  int64_t v7 = (int64_t)&v47 + 8;
  uint64_t v34 = a4 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v33 = a3 >> 32;
  swift_retain();
  LOBYTE(v13) = 1;
  int v37 = v9;
  do
  {
    uint64_t v14 = swift_retain();
    sub_1A8DD670C(v14, MEMORY[0x1E4F14720], &qword_1EB4767E8, (void (*)(uint64_t, uint64_t))sub_1A8DAFA74, (char *)sub_1A8DD6F1C, &v47);
    swift_beginAccess();
    unint64_t v6 = (unint64_t)(v12 + 4);
    uint64_t v8 = (uint64_t)v12 + v12[2] + 32;
    swift_retain();
    sub_1A8DAFA74((uint64_t)(v12 + 4), v8);
    swift_release();
    if (a4 >> 60 != 15)
    {
      switch(a4 >> 62)
      {
        case 1uLL:
          a6 = (int)a3;
          int v9 = HIDWORD(a3);
          if (v33 < (int)a3) {
            goto LABEL_29;
          }
          uint64_t v16 = a3;
          unint64_t v15 = a4;
          sub_1A8D8BE04(a3, a4);
          sub_1A8D8BE04(a3, a4);
          sub_1A8DD8BB0((int)a3, v33, v34, (uint64_t)&v47, sub_1A8DAFA74);
LABEL_12:
          sub_1A8D8BF9C(v16, v15);
          uint64_t v17 = v16;
LABEL_15:
          unint64_t v20 = v15;
LABEL_16:
          sub_1A8D8BF9C(v17, v20);
          break;
        case 2uLL:
          uint64_t v18 = *(void *)(a3 + 16);
          uint64_t v19 = *(void *)(a3 + 24);
          sub_1A8D8C208(a3, a4);
          sub_1A8D8C208(a3, a4);
          swift_retain();
          swift_retain();
          sub_1A8DD8BB0(v18, v19, v34, (uint64_t)&v47, sub_1A8DAFA74);
          swift_release();
          swift_release();
          sub_1A8D8BF9C(a3, a4);
          uint64_t v17 = a3;
          unint64_t v20 = a4;
          goto LABEL_16;
        case 3uLL:
          *(void *)((char *)v49 + 6) = 0;
          *(void *)&v49[0] = 0;
          sub_1A8DAFA74((uint64_t)v49, (uint64_t)v49);
          unint64_t v15 = a4;
          sub_1A8D8BF9C(a3, a4);
          uint64_t v17 = a3;
          goto LABEL_15;
        default:
          *(void *)&v49[0] = a3;
          uint64_t v16 = a3;
          unint64_t v15 = a4;
          DWORD2(v49[0]) = a4;
          WORD6(v49[0]) = WORD2(a4);
          sub_1A8DAFA74((uint64_t)v49, (uint64_t)v49 + BYTE6(a4));
          goto LABEL_12;
      }
    }
    LOBYTE(v49[0]) = v13;
    a6 = v7;
    sub_1A8DAFA74((uint64_t)v49, (uint64_t)v49 + 1);
    uint64_t v21 = v47;
    int v9 = DWORD2(v47);
    sub_1A8DA8030((uint64_t)v49);
    uint64_t v46 = v21;
    v40[0] = v49[0];
    v40[1] = v49[1];
    _OWORD v40[2] = v49[2];
    swift_retain();
    sub_1A8DAFA74((uint64_t)v40, (uint64_t)&v41);
    swift_retain();
    sub_1A8DA8030((uint64_t)&v42);
    swift_release_n();
    long long v38 = v43;
    long long v39 = v42;
    uint64_t v23 = v44;
    uint64_t v22 = v45;
    unint64_t v6 = type metadata accessor for SecureBytes.Backing();
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1A8DED120;
    _swift_stdlib_malloc_size((const void *)v8);
    *(_OWORD *)(v8 + 32) = v39;
    *(_OWORD *)(v8 + 48) = v38;
    *(void *)(v8 + 64) = v23;
    *(void *)(v8 + 72) = v22;
    swift_beginAccess();
    *(void *)(v8 + 16) = 48;
    int64_t v7 = _swift_stdlib_malloc_size((const void *)v8);
    swift_release();
    if (v7 < 80)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      swift_once();
      goto LABEL_5;
    }
    uint64_t v24 = swift_retain();
    sub_1A8DAD5A8(v24);
    swift_release();
    swift_release();
    swift_release();
    if (v37 == v13) {
      goto LABEL_21;
    }
    __int16 v13 = v13 + 1;
    uint64_t v12 = (void *)v8;
    int64_t v7 = a6;
  }
  while ((v13 & 0x100) == 0);
  __break(1u);
LABEL_21:
  if (v32 < 0) {
    goto LABEL_35;
  }
  uint64_t v25 = (uint64_t)v48;
  swift_beginAccess();
  uint64_t v26 = *(void *)(v25 + 16);
  uint64_t v27 = sub_1A8DAD870(0, v32, v26, v25);
  if (v28) {
    uint64_t v29 = v26;
  }
  else {
    uint64_t v29 = v27;
  }
  if ((v29 | v26) < 0) {
    goto LABEL_36;
  }
  if (v26 < v29) {
    goto LABEL_37;
  }
  *(void *)&long long v42 = 0;
  *((void *)&v42 + 1) = v29;
  *(void *)&long long v43 = v25;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4767B0);
  sub_1A8D9B260();
  sub_1A8DE9BC0();
  swift_release();
  swift_release();
  uint64_t result = swift_release_n();
  *uint64_t v31 = *(void *)&v40[0];
  return result;
}

uint64_t sub_1A8DD5FF4@<X0>(int64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, int64_t a6@<X8>)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  double v11 = ceil((double)a5 * 0.015625);
  if ((~*(void *)&v11 & 0x7FF0000000000000) == 0) {
    goto LABEL_30;
  }
  if (v11 <= -1.0) {
    goto LABEL_31;
  }
  if (v11 >= 256.0) {
    goto LABEL_32;
  }
  uint64_t v8 = a5;
  unint64_t v6 = a2;
  int64_t v7 = a1;
  int v9 = (int)v11;
  if (qword_1EB476778 != -1) {
    goto LABEL_33;
  }
LABEL_5:
  uint64_t v12 = off_1EB476770;
  uint64_t v50 = off_1EB476770;
  sub_1A8D8BE04(v7, v6);
  swift_retain();
  sub_1A8DADB28(v7, v6);
  sub_1A8D8BD58(v7, v6);
  if (!v9)
  {
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  uint64_t v31 = (void *)a6;
  uint64_t v32 = v8;
  int64_t v7 = (int64_t)&v49 + 8;
  uint64_t v34 = a4 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v33 = a3 >> 32;
  swift_retain();
  LOBYTE(v13) = 1;
  int v37 = v9;
  do
  {
    uint64_t v14 = swift_retain();
    sub_1A8DD670C(v14, MEMORY[0x1E4F14728], &qword_1E97A8BE8, (void (*)(uint64_t, uint64_t))sub_1A8DAFA68, (char *)sub_1A8DD6D9C, &v49);
    swift_beginAccess();
    unint64_t v6 = (unint64_t)(v12 + 4);
    uint64_t v8 = (uint64_t)v12 + v12[2] + 32;
    swift_retain();
    sub_1A8DAFA68((uint64_t)(v12 + 4), v8);
    swift_release();
    if (a4 >> 60 != 15)
    {
      switch(a4 >> 62)
      {
        case 1uLL:
          a6 = (int)a3;
          int v9 = HIDWORD(a3);
          if (v33 < (int)a3) {
            goto LABEL_29;
          }
          uint64_t v16 = a3;
          unint64_t v15 = a4;
          sub_1A8D8BE04(a3, a4);
          sub_1A8D8BE04(a3, a4);
          sub_1A8DD8BB0((int)a3, v33, v34, (uint64_t)&v49, sub_1A8DAFA68);
LABEL_12:
          sub_1A8D8BF9C(v16, v15);
          uint64_t v17 = v16;
LABEL_15:
          unint64_t v20 = v15;
LABEL_16:
          sub_1A8D8BF9C(v17, v20);
          break;
        case 2uLL:
          uint64_t v18 = *(void *)(a3 + 16);
          uint64_t v19 = *(void *)(a3 + 24);
          sub_1A8D8C208(a3, a4);
          sub_1A8D8C208(a3, a4);
          swift_retain();
          swift_retain();
          sub_1A8DD8BB0(v18, v19, v34, (uint64_t)&v49, sub_1A8DAFA68);
          swift_release();
          swift_release();
          sub_1A8D8BF9C(a3, a4);
          uint64_t v17 = a3;
          unint64_t v20 = a4;
          goto LABEL_16;
        case 3uLL:
          *(void *)((char *)v51 + 6) = 0;
          *(void *)&v51[0] = 0;
          sub_1A8DAFA68((uint64_t)v51, (uint64_t)v51);
          unint64_t v15 = a4;
          sub_1A8D8BF9C(a3, a4);
          uint64_t v17 = a3;
          goto LABEL_15;
        default:
          *(void *)&v51[0] = a3;
          uint64_t v16 = a3;
          unint64_t v15 = a4;
          DWORD2(v51[0]) = a4;
          WORD6(v51[0]) = WORD2(a4);
          sub_1A8DAFA68((uint64_t)v51, (uint64_t)v51 + BYTE6(a4));
          goto LABEL_12;
      }
    }
    LOBYTE(v51[0]) = v13;
    a6 = v7;
    sub_1A8DAFA68((uint64_t)v51, (uint64_t)v51 + 1);
    uint64_t v21 = v49;
    int v9 = DWORD2(v49);
    sub_1A8D889A4(v51);
    uint64_t v48 = v21;
    v41[0] = v51[0];
    v41[1] = v51[1];
    v41[2] = v51[2];
    _OWORD v41[3] = v51[3];
    swift_retain();
    sub_1A8DAFA68((uint64_t)v41, (uint64_t)&v42);
    swift_retain();
    sub_1A8D889A4(&v43);
    swift_release_n();
    long long v39 = v44;
    long long v40 = v43;
    long long v38 = v45;
    uint64_t v23 = v46;
    uint64_t v22 = v47;
    unint64_t v6 = type metadata accessor for SecureBytes.Backing();
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1A8DED120;
    _swift_stdlib_malloc_size((const void *)v8);
    *(_OWORD *)(v8 + 32) = v40;
    *(_OWORD *)(v8 + 48) = v39;
    *(_OWORD *)(v8 + 64) = v38;
    *(void *)(v8 + 80) = v23;
    *(void *)(v8 + 88) = v22;
    swift_beginAccess();
    *(void *)(v8 + 16) = 64;
    int64_t v7 = _swift_stdlib_malloc_size((const void *)v8);
    swift_release();
    if (v7 < 96)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      swift_once();
      goto LABEL_5;
    }
    uint64_t v24 = swift_retain();
    sub_1A8DAD5A8(v24);
    swift_release();
    swift_release();
    swift_release();
    if (v37 == v13) {
      goto LABEL_21;
    }
    __int16 v13 = v13 + 1;
    uint64_t v12 = (void *)v8;
    int64_t v7 = a6;
  }
  while ((v13 & 0x100) == 0);
  __break(1u);
LABEL_21:
  if (v32 < 0) {
    goto LABEL_35;
  }
  uint64_t v25 = (uint64_t)v50;
  swift_beginAccess();
  uint64_t v26 = *(void *)(v25 + 16);
  uint64_t v27 = sub_1A8DAD870(0, v32, v26, v25);
  if (v28) {
    uint64_t v29 = v26;
  }
  else {
    uint64_t v29 = v27;
  }
  if ((v29 | v26) < 0) {
    goto LABEL_36;
  }
  if (v26 < v29) {
    goto LABEL_37;
  }
  *(void *)&long long v43 = 0;
  *((void *)&v43 + 1) = v29;
  *(void *)&long long v44 = v25;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4767B0);
  sub_1A8D9B260();
  sub_1A8DE9BC0();
  swift_release();
  swift_release();
  uint64_t result = swift_release_n();
  *uint64_t v31 = *(void *)&v41[0];
  return result;
}

uint64_t sub_1A8DD667C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1A8DD670C(a1, MEMORY[0x1E4F14728], &qword_1E97A8BE8, (void (*)(uint64_t, uint64_t))sub_1A8DAFA68, (char *)sub_1A8DD6D9C, a2);
}

uint64_t sub_1A8DD66C4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1A8DD670C(a1, MEMORY[0x1E4F14720], &qword_1EB4767E8, (void (*)(uint64_t, uint64_t))sub_1A8DAFA74, (char *)sub_1A8DD6F1C, a2);
}

uint64_t sub_1A8DD670C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X2>, void (*a4)(uint64_t, uint64_t)@<X3>, char *a5@<X4>, _OWORD *a6@<X8>)
{
  swift_beginAccess();
  unint64_t v12 = *(void *)(a1 + 16);
  if (v12 == 128)
  {
    uint64_t v29 = &type metadata for SymmetricKey;
    unint64_t v30 = sub_1A8D8C060();
    v28[0] = a1;
    goto LABEL_11;
  }
  if (v12 > 0x80)
  {
    uint64_t v13 = sub_1A8DE97D0();
    *(void *)(v13 + 16) = 128;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_OWORD *)(v13 + 144) = 0u;
    uint64_t v27 = v13;
    ((void (*)(long long *__return_ptr, uint64_t, uint64_t, uint64_t *))a5)(v26, a1 + 32, a1 + 32 + *(void *)(a1 + 16), &v27);
    swift_release();
    sub_1A8D934C8(v26, (uint64_t)v28);
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v14 = sub_1A8DE97D0();
  *(void *)(v14 + 16) = 128;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  size_t v15 = *(void *)(a1 + 16);
  if (v15 > 0x80)
  {
    __break(1u);
LABEL_15:
    a5 = sub_1A8D96298((char *)1, 128, 1, a5);
    if (!v15) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  a5 = (char *)v14;
  if (*(void *)(v14 + 24) <= 0xFFuLL) {
    goto LABEL_15;
  }
  if (v15) {
LABEL_9:
  }
    memcpy(a5 + 32, (const void *)(a1 + 32), v15);
LABEL_10:
  swift_release();
  uint64_t v29 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
  unint64_t v30 = sub_1A8DA44FC();
  v28[0] = a5;
LABEL_11:
  uint64_t result = a2();
  if (result)
  {
    uint64_t v17 = result;
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v18 = swift_allocObject();
    getDigestSizeForDigestInfo();
    uint64_t v19 = swift_slowAlloc();
    ccdigest_init();
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = v19;
    *((void *)&v26[0] + 1) = v18;
    __swift_project_boxed_opaque_existential_1(v28, (uint64_t)v29);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
    sub_1A8DE9390();
    uint64_t v20 = sub_1A8DE97C0();
    a4(v20 + 32, v20 + 32 + *(void *)(v20 + 16));
    swift_bridgeObjectRelease();
    uint64_t v21 = swift_bridgeObjectRelease();
    uint64_t result = ((uint64_t (*)(uint64_t))a2)(v21);
    if (result)
    {
      uint64_t v22 = result;
      uint64_t v23 = swift_allocObject();
      getDigestSizeForDigestInfo();
      uint64_t v24 = swift_slowAlloc();
      ccdigest_init();
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = v24;
      *(void *)&v26[0] = v23;
      __swift_project_boxed_opaque_existential_1(v28, (uint64_t)v29);
      sub_1A8DE9390();
      uint64_t v25 = sub_1A8DE97C0();
      a4(v25 + 32, v25 + 32 + *(void *)(v25 + 16));
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      uint64_t result = swift_bridgeObjectRelease();
      *a6 = v26[0];
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DD6A6C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  swift_beginAccess();
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 == 64)
  {
    uint64_t v21 = &type metadata for SymmetricKey;
    unint64_t v22 = sub_1A8D8C060();
    v20[0] = a1;
    goto LABEL_11;
  }
  if (v5 > 0x40)
  {
    uint64_t v6 = sub_1A8DE97D0();
    *(void *)(v6 + 16) = 64;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    uint64_t v19 = (char *)v6;
    sub_1A8DD708C(a1 + 32, a1 + 32 + *(void *)(a1 + 16), &v19, (char **)v18);
    swift_release();
    sub_1A8D934C8(v18, (uint64_t)v20);
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v7 = sub_1A8DE97D0();
  *(void *)(v7 + 16) = 64;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  size_t v8 = *(void *)(a1 + 16);
  if (v8 > 0x40)
  {
    __break(1u);
LABEL_15:
    uint64_t v2 = sub_1A8D96298((char *)1, 64, 1, v2);
    if (!v8) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v2 = (char *)v7;
  if (*(void *)(v7 + 24) <= 0x7FuLL) {
    goto LABEL_15;
  }
  if (v8) {
LABEL_9:
  }
    memcpy(v2 + 32, (const void *)(a1 + 32), v8);
LABEL_10:
  swift_release();
  uint64_t v21 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
  unint64_t v22 = sub_1A8DA44FC();
  v20[0] = v2;
LABEL_11:
  uint64_t result = ccsha256_di();
  if (result)
  {
    uint64_t v10 = result;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A8);
    uint64_t v11 = swift_allocObject();
    getDigestSizeForDigestInfo();
    uint64_t v12 = swift_slowAlloc();
    ccdigest_init();
    *(void *)(v11 + 16) = v10;
    *(void *)(v11 + 24) = v12;
    *((void *)&v18[0] + 1) = v11;
    __swift_project_boxed_opaque_existential_1(v20, (uint64_t)v21);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
    sub_1A8DE9390();
    uint64_t v13 = sub_1A8DE97C0();
    sub_1A8DAFA80(v13 + 32, v13 + 32 + *(void *)(v13 + 16));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = ccsha256_di();
    if (result)
    {
      uint64_t v14 = result;
      uint64_t v15 = swift_allocObject();
      getDigestSizeForDigestInfo();
      uint64_t v16 = swift_slowAlloc();
      ccdigest_init();
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = v16;
      *(void *)&v18[0] = v15;
      __swift_project_boxed_opaque_existential_1(v20, (uint64_t)v21);
      sub_1A8DE9390();
      uint64_t v17 = sub_1A8DE97C0();
      sub_1A8DAFA80(v17 + 32, v17 + 32 + *(void *)(v17 + 16));
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = v18[0];
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DD6D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, char **a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = ccsha512_di();
  if (!v7) {
    __break(1u);
  }
  uint64_t v8 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8BE8);
  uint64_t v9 = swift_allocObject();
  getDigestSizeForDigestInfo();
  uint64_t v10 = swift_slowAlloc();
  ccdigest_init();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v10;
  sub_1A8DAFA68(a1, a2);
  sub_1A8D889A4(&v23);
  swift_release();
  long long v11 = v23;
  uint64_t v12 = v24;
  uint64_t v13 = v25;
  uint64_t v15 = v26;
  uint64_t v14 = v27;
  uint64_t v16 = v28;
  uint64_t v21 = v29;
  uint64_t v17 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v17 = sub_1A8D96298(0, *((void *)v17 + 2), 0, v17);
  }
  *a3 = v17;
  *((_OWORD *)v17 + 2) = v11;
  *((void *)v17 + 6) = v12;
  *((void *)v17 + 7) = v13;
  *((void *)v17 + 8) = v15;
  *((void *)v17 + 9) = v14;
  *((void *)v17 + 10) = v16;
  *((void *)v17 + 11) = v21;
  uint64_t v19 = *a3;
  a4[3] = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
  a4[4] = (char *)sub_1A8DA44FC();
  *a4 = v19;
  return sub_1A8DE97C0();
}

uint64_t sub_1A8DD6F1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, char **a4@<X8>)
{
  _OWORD v22[6] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = ccsha384_di();
  if (!v8) {
    __break(1u);
  }
  uint64_t v9 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4767E8);
  uint64_t v10 = swift_allocObject();
  getDigestSizeForDigestInfo();
  uint64_t v11 = swift_slowAlloc();
  ccdigest_init();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v11;
  sub_1A8DAFA74(a1, a2);
  sub_1A8DA8030((uint64_t)v22);
  swift_release();
  uint64_t v12 = v22[0];
  uint64_t v13 = v22[1];
  uint64_t v14 = v22[2];
  uint64_t v15 = v22[3];
  uint64_t v17 = v22[4];
  uint64_t v16 = v22[5];
  uint64_t v18 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v18 = sub_1A8D96298(0, *((void *)v18 + 2), 0, v18);
  }
  *a3 = v18;
  *((void *)v18 + 4) = v12;
  *((void *)v18 + 5) = v13;
  *((void *)v18 + 6) = v14;
  *((void *)v18 + 7) = v15;
  *((void *)v18 + 8) = v17;
  *((void *)v18 + 9) = v16;
  uint64_t v20 = *a3;
  a4[3] = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
  a4[4] = (char *)sub_1A8DA44FC();
  *a4 = v20;
  return sub_1A8DE97C0();
}

uint64_t sub_1A8DD708C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, char **a4@<X8>)
{
  v20[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = ccsha256_di();
  if (!v8) {
    __break(1u);
  }
  uint64_t v9 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB4769A8);
  uint64_t v10 = swift_allocObject();
  getDigestSizeForDigestInfo();
  uint64_t v11 = swift_slowAlloc();
  ccdigest_init();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v11;
  sub_1A8DAFA80(a1, a2);
  sub_1A8D88D94((uint64_t)v20);
  swift_release();
  uint64_t v12 = v20[0];
  uint64_t v13 = v20[1];
  uint64_t v14 = v20[2];
  uint64_t v15 = v20[3];
  uint64_t v16 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v16 = sub_1A8D96298(0, *((void *)v16 + 2), 0, v16);
  }
  *a3 = v16;
  *((void *)v16 + 4) = v12;
  *((void *)v16 + 5) = v13;
  *((void *)v16 + 6) = v14;
  *((void *)v16 + 7) = v15;
  uint64_t v18 = *a3;
  a4[3] = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EB476940);
  a4[4] = (char *)sub_1A8DA44FC();
  *a4 = v18;
  return sub_1A8DE97C0();
}

uint64_t sub_1A8DD71EC(uint64_t a1, unint64_t a2)
{
  return sub_1A8DD72FC(a1, a2, MEMORY[0x1E4F14660], MEMORY[0x1E4F14660], sub_1A8DD8E0C);
}

uint64_t sub_1A8DD7274(uint64_t a1, unint64_t a2)
{
  return sub_1A8DD72FC(a1, a2, MEMORY[0x1E4F14668], MEMORY[0x1E4F14668], sub_1A8DD8DD8);
}

uint64_t sub_1A8DD72FC(uint64_t a1, unint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t), uint64_t (*a5)(void *, uint64_t *))
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a1;
  unint64_t v38 = a2;
  uint64_t v7 = a5;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a1;
      uint64_t v13 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int v35 = a5;
      sub_1A8D8BE04(a1, a2);
      uint64_t v14 = (unsigned char *)sub_1A8DE9340();
      if (!v14) {
        goto LABEL_7;
      }
      uint64_t v15 = sub_1A8DE9370();
      if (__OFSUB__((int)a1, v15)) {
LABEL_36:
      }
        __break(1u);
      v14 += (int)a1 - v15;
LABEL_7:
      uint64_t v16 = sub_1A8DE9360();
      if (v16 >= v13) {
        uint64_t v17 = (a1 >> 32) - (int)a1;
      }
      else {
        uint64_t v17 = v16;
      }
      uint64_t v18 = &v14[v17];
      if (v14) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      sub_1A8DD7A54(v14, v19, a3);
      uint64_t v20 = sub_1A8D8BD58(a1, a2);
      if (v6)
      {
LABEL_29:
        sub_1A8D8BD58(a1, a2);
      }
      else
      {
LABEL_26:
        uint64_t v7 = v35;
LABEL_30:
        uint64_t v30 = a4(v20);
        if (!v30)
        {
          __break(1u);
          JUMPOUT(0x1A8DD7674);
        }
        uint64_t v31 = v30;
        v36[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
        v36[0] = v31;
        swift_dynamicCast();
        uint64_t v32 = getccec_pub_ctx_size();
        uint64_t v34 = MEMORY[0x1F4188790](v32);
        uint64_t v5 = sub_1A8DE4458(v34, v7);
        sub_1A8D8BD58(v37, v38);
      }
      return v5;
    case 2uLL:
      int v35 = a5;
      uint64_t v22 = *(void *)(a1 + 16);
      uint64_t v21 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      long long v23 = (unsigned char *)sub_1A8DE9340();
      if (!v23) {
        goto LABEL_18;
      }
      uint64_t v24 = sub_1A8DE9370();
      if (__OFSUB__(v22, v24)) {
        goto LABEL_35;
      }
      v23 += v22 - v24;
LABEL_18:
      BOOL v25 = __OFSUB__(v21, v22);
      uint64_t v5 = v21 - v22;
      if (v25) {
        goto LABEL_34;
      }
      uint64_t v26 = sub_1A8DE9360();
      if (v26 >= v5) {
        uint64_t v27 = v5;
      }
      else {
        uint64_t v27 = v26;
      }
      uint64_t v28 = &v23[v27];
      if (v23) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      sub_1A8DD7A54(v23, v29, a3);
      swift_release();
      uint64_t v20 = swift_release();
      if (!v6) {
        goto LABEL_26;
      }
      goto LABEL_29;
    case 3uLL:
      memset(v36, 0, 14);
      uint64_t v12 = v36;
      goto LABEL_28;
    default:
      v36[0] = a1;
      LOWORD(v36[1]) = a2;
      BYTE2(v36[1]) = BYTE2(a2);
      BYTE3(v36[1]) = BYTE3(a2);
      BYTE4(v36[1]) = BYTE4(a2);
      BYTE5(v36[1]) = BYTE5(a2);
      uint64_t v12 = (char *)v36 + BYTE6(a2);
LABEL_28:
      uint64_t v20 = sub_1A8DD7A54(v36, v12, a3);
      if (v6) {
        goto LABEL_29;
      }
      goto LABEL_30;
  }
}

uint64_t sub_1A8DD7684(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t), uint64_t (*a4)(void *, uint64_t *))
{
  uint64_t v7 = sub_1A8DD7A54((unsigned char *)(a1 + 32), (unsigned char *)(a1 + 32 + *(void *)(a1 + 16)), a2);
  if (v4)
  {
    swift_bridgeObjectRelease();
    return (uint64_t)a4;
  }
  uint64_t result = a3(v7);
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    swift_dynamicCast();
    uint64_t v9 = getccec_pub_ctx_size();
    uint64_t v10 = MEMORY[0x1F4188790](v9);
    a4 = (uint64_t (*)(void *, uint64_t *))sub_1A8DE4458(v10, a4);
    swift_bridgeObjectRelease();
    return (uint64_t)a4;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DD77E4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1A8DD788C(a1, a2, a3, a4, MEMORY[0x1E4F14660], MEMORY[0x1E4F14660], sub_1A8DD8DA4);
}

uint64_t sub_1A8DD7838(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1A8DD788C(a1, a2, a3, a4, MEMORY[0x1E4F14668], MEMORY[0x1E4F14668], sub_1A8DD8D70);
}

uint64_t sub_1A8DD788C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t), uint64_t (*a7)(void *, uint64_t *))
{
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = sub_1A8DD7A54((unsigned char *)(a2 + a3), (unsigned char *)(a2 + (a4 >> 1)), a5);
    if (v7)
    {
      swift_unknownObjectRelease();
      return (uint64_t)a7;
    }
    uint64_t result = a6(v10);
    if (result)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
      swift_dynamicCast();
      uint64_t v11 = getccec_pub_ctx_size();
      uint64_t v12 = MEMORY[0x1F4188790](v11);
      a7 = (uint64_t (*)(void *, uint64_t *))sub_1A8DE4458(v12, a7);
      swift_unknownObjectRelease();
      return (uint64_t)a7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DD7A00(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1A8DD788C(a1, a2, a3, a4, MEMORY[0x1E4F14670], MEMORY[0x1E4F14670], sub_1A8DD8D3C);
}

uint64_t sub_1A8DD7A54(unsigned char *a1, unsigned char *a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (!result) {
    goto LABEL_15;
  }
  uint64_t v6 = result;
  uint64_t v7 = self;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v7, sel_groupOrderByteCountForCP_, v9, v6);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (result + 0x4000000000000000 < 0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  if (!a1 || a2 - a1 != ((2 * result) | 1))
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = 1;
    goto LABEL_10;
  }
  if (a2 == a1) {
    goto LABEL_14;
  }
  if (*a1 == 4) {
    return result;
  }
  sub_1A8D8E240();
  swift_allocError();
  *(_DWORD *)uint64_t v8 = 5;
LABEL_10:
  *(unsigned char *)(v8 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_1A8DD7BAC(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void), uint64_t (*a9)(void))
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = a3;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v36 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2) {
        goto LABEL_33;
      }
      sub_1A8D8BE04(a2, a3);
      uint64_t v37 = sub_1A8DE9340();
      if (!v37) {
        goto LABEL_22;
      }
      uint64_t v38 = sub_1A8DE9370();
      if (__OFSUB__((int)a2, v38)) {
        goto LABEL_35;
      }
      v37 += (int)a2 - v38;
LABEL_22:
      uint64_t v39 = sub_1A8DE9360();
      if (v39 >= v36) {
        uint64_t v40 = (a2 >> 32) - (int)a2;
      }
      else {
        uint64_t v40 = v39;
      }
      uint64_t v41 = v37 + v40;
      if (v37) {
        uint64_t v42 = v41;
      }
      else {
        uint64_t v42 = 0;
      }
      sub_1A8DD80E8(v37, v42, a4, a1, a5, a6, a9);
      if (v9) {
        goto LABEL_39;
      }
      return sub_1A8D8BD58(a2, v13);
    case 2uLL:
      uint64_t v22 = *(void *)(a2 + 16);
      uint64_t v23 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v24 = sub_1A8DE9340();
      if (v24)
      {
        uint64_t v25 = v24;
        uint64_t v26 = sub_1A8DE9370();
        if (__OFSUB__(v22, v26))
        {
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
        }
        unint64_t v13 = v25 + v22 - v26;
        uint64_t v27 = v23 - v22;
        if (!__OFSUB__(v23, v22)) {
          goto LABEL_7;
        }
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v27 = v23 - v22;
        if (!__OFSUB__(v23, v22))
        {
LABEL_7:
          uint64_t v28 = sub_1A8DE9360();
          if (v28 >= v27) {
            uint64_t v29 = v27;
          }
          else {
            uint64_t v29 = v28;
          }
          uint64_t v30 = v13 + v29;
          if (v13) {
            uint64_t v31 = v30;
          }
          else {
            uint64_t v31 = 0;
          }
          sub_1A8DD80E8(v13, v31, a4, a1, a5, a6, a9);
          if (!v9)
          {
            swift_release();
            return swift_release();
          }
LABEL_38:
          swift_release();
          swift_release();
          __break(1u);
LABEL_39:
          sub_1A8D8BD58(a2, v13);
          __break(1u);
          JUMPOUT(0x1A8DD7F2CLL);
        }
      }
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    case 3uLL:
      memset(v50, 0, 14);
      uint64_t v33 = a8();
      if (!v33) {
        goto LABEL_37;
      }
      uint64_t v34 = v33;
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
      uint64_t v51 = v34;
      swift_dynamicCast();
      uint64_t v19 = v49;
      uint64_t v20 = 0;
      uint64_t v21 = a1;
      goto LABEL_17;
    default:
      v50[0] = a2;
      LOWORD(v50[1]) = a3;
      BYTE2(v50[1]) = BYTE2(a3);
      BYTE3(v50[1]) = BYTE3(a3);
      BYTE4(v50[1]) = BYTE4(a3);
      BYTE5(v50[1]) = BYTE5(a3);
      uint64_t v17 = a8();
      if (!v17)
      {
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      uint64_t v18 = v17;
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
      uint64_t v51 = v18;
      swift_dynamicCast();
      uint64_t v19 = v49;
      uint64_t v20 = BYTE6(v13);
      uint64_t v21 = a1;
LABEL_17:
      uint64_t result = MEMORY[0x1AD0E7D10](v19, v20, v50, v21);
      *a4 = (int)result;
      *a5 = a6;
      return result;
  }
}

uint64_t sub_1A8DD7F3C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t result = a7();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    swift_dynamicCast();
    uint64_t result = MEMORY[0x1AD0E7D10](v14, v12, a2 + 32, a1);
    *a3 = (int)result;
    *a4 = a5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8DD8004(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v10 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
    __break(1u);
  }
  else
  {
    uint64_t v16 = result;
    uint64_t result = a10();
    if (result)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
      swift_dynamicCast();
      uint64_t result = MEMORY[0x1AD0E7D10](v17, v10, a3 + a4, v16);
      *a6 = (int)result;
      *a7 = a8;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DD80E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t result = a7();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    uint64_t result = swift_dynamicCast();
    if (a1)
    {
      uint64_t result = MEMORY[0x1AD0E7D10](v14, a2 - a1, a1, a4);
      *a3 = (int)result;
      *a5 = a6;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DD81B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(void), void (*a7)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v12 = a6();
  if (!v12)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    JUMPOUT(0x1A8DD838CLL);
  }
  uint64_t v13 = v12;
  _OWORD v24[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  v24[0] = v13;
  swift_dynamicCast();
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v14) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_16;
      }
      uint64_t v14 = (int)v14;
LABEL_7:
      if (v14 < 1) {
        goto LABEL_19;
      }
      sub_1A8D8BE04(a4, a5);
      uint64_t v18 = MEMORY[0x1AD0E7CB0]();
      if (v18 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      a7(v24, a2, a3, a4, a5, 2 * v18);
      sub_1A8D8BD58(a4, a5);
      uint64_t v19 = getccec_pub_ctx_size();
      if (v19 < 0) {
        goto LABEL_15;
      }
      size_t v20 = v19;
      if (v19)
      {
        uint64_t v21 = sub_1A8DE97D0();
        *(void *)(v21 + 16) = v20;
        bzero((void *)(v21 + 32), v20);
      }
      else
      {
        uint64_t v21 = MEMORY[0x1E4FBC860];
      }
      sub_1A8DCDBAC(v21 + 32, v24);
      uint64_t v22 = v24[0];
      swift_release();
      swift_bridgeObjectRelease();
      return v22;
    case 2uLL:
      uint64_t v16 = *(void *)(a2 + 16);
      uint64_t v15 = *(void *)(a2 + 24);
      BOOL v17 = __OFSUB__(v15, v16);
      uint64_t v14 = v15 - v16;
      if (!v17) {
        goto LABEL_7;
      }
      goto LABEL_17;
    case 3uLL:
      goto LABEL_19;
    default:
      uint64_t v14 = BYTE6(a3);
      goto LABEL_7;
  }
}

unint64_t sub_1A8DD839C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(void), void (*a7)(void *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v13 = a6();
  if (!v13)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    JUMPOUT(0x1A8DD854CLL);
  }
  uint64_t v14 = v13;
  _OWORD v25[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  v25[0] = v14;
  swift_dynamicCast();
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v15) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_11;
      }
      uint64_t v15 = (int)v15;
LABEL_7:
      if (v15 < 1) {
        goto LABEL_14;
      }
      sub_1A8D8BE04(a4, a5);
      uint64_t v19 = MEMORY[0x1AD0E7CB0]();
      if (v19 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_11:
        __break(1u);
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
      a7(v25, a2, a3, a4, a5, 2 * v19);
      sub_1A8D8BD58(a4, a5);
      uint64_t v20 = v25[0];
      uint64_t v21 = getccec_full_ctx_size();
      swift_beginAccess();
      swift_retain();
      unint64_t v22 = sub_1A8D9C770(v21, v24, v20, (void **)(a1 + 32), v21);
      swift_release_n();
      return v22;
    case 2uLL:
      uint64_t v17 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      BOOL v18 = __OFSUB__(v16, v17);
      uint64_t v15 = v16 - v17;
      if (!v18) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v15 = BYTE6(a3);
      goto LABEL_7;
  }
}

uint64_t P256.Signing.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = sub_1A8DD81B4(*v5, a1, a2, a3, a4, MEMORY[0x1E4F14660], (void (*)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))sub_1A8DD536C);
  uint64_t result = sub_1A8DD7684(v7, MEMORY[0x1E4F14660], MEMORY[0x1E4F14660], sub_1A8DD8EA8);
  *a5 = result;
  return result;
}

unint64_t P256.KeyAgreement.PrivateKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t result = sub_1A8DD839C(*v5, a1, a2, a3, a4, MEMORY[0x1E4F14660], (void (*)(void *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))sub_1A8DD536C);
  *a5 = result;
  return result;
}

uint64_t P256.KeyAgreement.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = sub_1A8DD81B4(*v5, a1, a2, a3, a4, MEMORY[0x1E4F14660], (void (*)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))sub_1A8DD536C);
  uint64_t result = sub_1A8DD7684(v7, MEMORY[0x1E4F14660], MEMORY[0x1E4F14660], sub_1A8DD8EA8);
  *a5 = result;
  return result;
}

uint64_t P384.Signing.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = sub_1A8DD81B4(*v5, a1, a2, a3, a4, MEMORY[0x1E4F14668], (void (*)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))sub_1A8DD5984);
  uint64_t result = sub_1A8DD7684(v7, MEMORY[0x1E4F14668], MEMORY[0x1E4F14668], sub_1A8DD8E74);
  *a5 = result;
  return result;
}

unint64_t P384.KeyAgreement.PrivateKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t result = sub_1A8DD839C(*v5, a1, a2, a3, a4, MEMORY[0x1E4F14668], (void (*)(void *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))sub_1A8DD5984);
  *a5 = result;
  return result;
}

uint64_t P384.KeyAgreement.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = sub_1A8DD81B4(*v5, a1, a2, a3, a4, MEMORY[0x1E4F14668], (void (*)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))sub_1A8DD5984);
  uint64_t result = sub_1A8DD7684(v7, MEMORY[0x1E4F14668], MEMORY[0x1E4F14668], sub_1A8DD8E74);
  *a5 = result;
  return result;
}

uint64_t P521.Signing.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = sub_1A8DD81B4(*v5, a1, a2, a3, a4, MEMORY[0x1E4F14670], (void (*)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))sub_1A8DD5FF4);
  uint64_t result = sub_1A8DD7684(v7, MEMORY[0x1E4F14670], MEMORY[0x1E4F14670], sub_1A8DD8E40);
  *a5 = result;
  return result;
}

unint64_t P521.KeyAgreement.PrivateKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t result = sub_1A8DD839C(*v5, a1, a2, a3, a4, MEMORY[0x1E4F14670], (void (*)(void *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))sub_1A8DD5FF4);
  *a5 = result;
  return result;
}

uint64_t P521.KeyAgreement.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = sub_1A8DD81B4(*v5, a1, a2, a3, a4, MEMORY[0x1E4F14670], (void (*)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))sub_1A8DD5FF4);
  uint64_t result = sub_1A8DD7684(v7, MEMORY[0x1E4F14670], MEMORY[0x1E4F14670], sub_1A8DD8E40);
  *a5 = result;
  return result;
}

uint64_t sub_1A8DD8BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t result = sub_1A8DE9340();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = sub_1A8DE9370();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v12 = sub_1A8DE9360();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = v9 + v13;
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  return a5(v9, v15);
}

uint64_t sub_1A8DD8C54(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void))
{
  uint64_t result = *a1;
  if (result) {
    return sub_1A8DD7BAC(result, *(void *)a4, *(void *)(a4 + 8), a5, a2, a3, (uint64_t)v7, a6, a6);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DD8CA0(uint64_t *a1, void *a2, uint64_t a3, uint64_t *a4, void *a5, uint64_t (*a6)(void))
{
  uint64_t result = *a1;
  if (result) {
    return sub_1A8DD7F3C(result, *a4, a5, a2, a3, (uint64_t)v7, a6);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DD8CEC(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void))
{
  uint64_t result = *a1;
  if (result) {
    return sub_1A8DD8004(result, *(void *)a4, *(void *)(a4 + 8), *(void *)(a4 + 16), *(void *)(a4 + 24), a5, a2, a3, (uint64_t)v7, a6);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DD8D3C(uint64_t *a1, void *a2)
{
  return sub_1A8DD8CEC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), MEMORY[0x1E4F14670]);
}

uint64_t sub_1A8DD8D70(uint64_t *a1, void *a2)
{
  return sub_1A8DD8CEC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), MEMORY[0x1E4F14668]);
}

uint64_t sub_1A8DD8DA4(uint64_t *a1, void *a2)
{
  return sub_1A8DD8CEC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), MEMORY[0x1E4F14660]);
}

uint64_t sub_1A8DD8DD8(uint64_t *a1, uint64_t *a2)
{
  return sub_1A8DD8C54(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), MEMORY[0x1E4F14668]);
}

uint64_t sub_1A8DD8E0C(uint64_t *a1, uint64_t *a2)
{
  return sub_1A8DD8C54(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), MEMORY[0x1E4F14660]);
}

uint64_t sub_1A8DD8E40(uint64_t *a1, void *a2)
{
  return sub_1A8DD8CA0(a1, a2, *(void *)(v2 + 16), *(uint64_t **)(v2 + 24), *(void **)(v2 + 32), MEMORY[0x1E4F14670]);
}

uint64_t sub_1A8DD8E74(uint64_t *a1, void *a2)
{
  return sub_1A8DD8CA0(a1, a2, *(void *)(v2 + 16), *(uint64_t **)(v2 + 24), *(void **)(v2 + 32), MEMORY[0x1E4F14668]);
}

uint64_t sub_1A8DD8EA8(uint64_t *a1, void *a2)
{
  return sub_1A8DD8CA0(a1, a2, *(void *)(v2 + 16), *(uint64_t **)(v2 + 24), *(void **)(v2 + 32), MEMORY[0x1E4F14660]);
}

uint64_t AES.GCM.Nonce.init()@<X0>(void *a1@<X8>)
{
  return sub_1A8DD9290(a1);
}

uint64_t ChaChaPoly.Nonce.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1A8DE9840() == 12)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    uint64_t v9 = sub_1A8DE9520();
    uint64_t v11 = v10;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
    *a3 = v9;
    a3[1] = v11;
  }
  else
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 1;
    *(unsigned char *)(v13 + 4) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }
  return result;
}

uint64_t AES.GCM.Nonce.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1A8DE9840() >= 12)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    uint64_t v11 = sub_1A8DE9520();
    uint64_t v13 = v12;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
    *a3 = v11;
    a3[1] = v13;
  }
  else
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = 1;
    *(unsigned char *)(v9 + 4) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }
  return result;
}

uint64_t ChaChaPoly.Nonce.init()@<X0>(void *a1@<X8>)
{
  return sub_1A8DD9290(a1);
}

uint64_t sub_1A8DD9290@<X0>(void *a1@<X8>)
{
  if (!ccrng()) {
    __break(1u);
  }
  uint64_t result = ccrng_generate_bridge();
  *a1 = 0;
  a1[1] = 0xC000000000000;
  return result;
}

uint64_t ChaChaPoly.Nonce.withUnsafeBytes<A>(_:)()
{
  return sub_1A8DE9490();
}

size_t AES.GCM.Nonce.makeIterator()()
{
  return sub_1A8DD9494();
}

uint64_t sub_1A8DD93BC()
{
  return ChaChaPoly.Nonce.withUnsafeBytes<A>(_:)();
}

uint64_t sub_1A8DD93D4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DD96D4((uint64_t (*)(void))AES.GCM.Nonce.makeIterator(), a1);
}

uint64_t sub_1A8DD93EC()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = sub_1A8DC97B8(v1, v2);
  sub_1A8D8BD58(v1, v2);
  return v3;
}

uint64_t sub_1A8DD9434(uint64_t *a1, unsigned char *a2, uint64_t a3)
{
  return sub_1A8DC86BC(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
}

size_t ChaChaPoly.Nonce.makeIterator()()
{
  return sub_1A8DD9494();
}

size_t sub_1A8DD9494()
{
  void v22[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      if (v1 >> 32 < (int)v1)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_1A8D8BE04(v1, v2);
      size_t v4 = sub_1A8DE9340();
      if (v4)
      {
        uint64_t v5 = sub_1A8DE9370();
        if (!__OFSUB__((int)v1, v5))
        {
          v4 += (int)v1 - v5;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v6 = sub_1A8DE9360();
      if (v6 >= (v1 >> 32) - (int)v1) {
        uint64_t v7 = (v1 >> 32) - (int)v1;
      }
      else {
        uint64_t v7 = v6;
      }
      unint64_t v8 = v4 + v7;
      if (v4) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = 0;
      }
      size_t v10 = sub_1A8D891D0(v4, v9);
      sub_1A8D8BD58(v1, v2);
      return v10;
    case 2uLL:
      uint64_t v11 = *(void *)(v1 + 16);
      uint64_t v12 = *(void *)(v1 + 24);
      swift_retain();
      swift_retain();
      size_t v13 = sub_1A8DE9340();
      if (!v13) {
        goto LABEL_17;
      }
      uint64_t v14 = sub_1A8DE9370();
      if (__OFSUB__(v11, v14)) {
        goto LABEL_30;
      }
      v13 += v11 - v14;
LABEL_17:
      BOOL v15 = __OFSUB__(v12, v11);
      uint64_t v16 = v12 - v11;
      if (v15) {
        goto LABEL_29;
      }
      uint64_t v17 = sub_1A8DE9360();
      if (v17 >= v16) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = v17;
      }
      unint64_t v19 = v13 + v18;
      if (v13) {
        unint64_t v20 = v19;
      }
      else {
        unint64_t v20 = 0;
      }
      size_t v10 = sub_1A8D891D0(v13, v20);
      swift_release();
      swift_release();
      return v10;
    case 3uLL:
      memset(v22, 0, 14);
      uint64_t v3 = (char *)v22;
      return sub_1A8D891D0((size_t)v22, (unint64_t)v3);
    default:
      v22[0] = *v0;
      LOWORD(v22[1]) = v2;
      BYTE2(v22[1]) = BYTE2(v2);
      BYTE3(v22[1]) = BYTE3(v2);
      BYTE4(v22[1]) = BYTE4(v2);
      BYTE5(v22[1]) = BYTE5(v2);
      uint64_t v3 = (char *)v22 + BYTE6(v2);
      return sub_1A8D891D0((size_t)v22, (unint64_t)v3);
  }
}

uint64_t sub_1A8DD96BC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DD96D4((uint64_t (*)(void))ChaChaPoly.Nonce.makeIterator(), a1);
}

uint64_t sub_1A8DD96D4@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1();
  uint64_t result = sub_1A8D8BD58(*(void *)v2, *(void *)(v2 + 8));
  *a2 = v4;
  a2[1] = 0;
  return result;
}

uint64_t sub_1A8DD9714()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = sub_1A8DC92C8(v1, v2);
  sub_1A8D8BD58(v1, v2);
  return v3;
}

uint64_t sub_1A8DD975C(uint64_t *a1, unsigned char *a2, uint64_t a3)
{
  return sub_1A8DC825C(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
}

void *sub_1A8DD9764(void *result, int __c)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = result[1];
  uint64_t v4 = result;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t __b = *result;
      uint64_t v19 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t result = sub_1A8DA5CDC((int *)&__b, __c);
      uint64_t v5 = __b;
      unint64_t v6 = v19 | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      uint64_t __b = *result;
      uint64_t v19 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1A8DE93C0();
      uint64_t v7 = v19;
      uint64_t v8 = *(void *)(__b + 16);
      uint64_t v9 = *(void *)(__b + 24);
      uint64_t v10 = sub_1A8DE9340();
      if (!v10)
      {
        __break(1u);
        JUMPOUT(0x1A8DD9948);
      }
      uint64_t v11 = v10;
      uint64_t v12 = sub_1A8DE9370();
      uint64_t v13 = v8 - v12;
      if (__OFSUB__(v8, v12))
      {
        __break(1u);
LABEL_14:
        __break(1u);
      }
      BOOL v14 = __OFSUB__(v9, v8);
      int64_t v15 = v9 - v8;
      if (v14) {
        goto LABEL_14;
      }
      uint64_t v16 = sub_1A8DE9360();
      if (v16 >= v15) {
        size_t v17 = v15;
      }
      else {
        size_t v17 = v16;
      }
      uint64_t result = memset((void *)(v11 + v13), __c, v17);
      *uint64_t v4 = __b;
      v4[1] = v7 | 0x8000000000000000;
      return result;
    case 3uLL:
      return result;
    default:
      uint64_t __b = *result;
      LOWORD(v19) = v2;
      BYTE2(v19) = BYTE2(v2);
      BYTE3(v19) = BYTE3(v2);
      BYTE4(v19) = BYTE4(v2);
      BYTE5(v19) = BYTE5(v2);
      BYTE6(v19) = BYTE6(v2);
      uint64_t result = memset(&__b, __c, BYTE6(v2));
      uint64_t v5 = __b;
      unint64_t v6 = v19 | ((unint64_t)BYTE4(v19) << 32) | ((unint64_t)BYTE5(v19) << 40) | ((unint64_t)BYTE6(v19) << 48);
LABEL_4:
      *uint64_t v4 = v5;
      v4[1] = v6;
      return result;
  }
}

ValueMetadata *type metadata accessor for AES.GCM.Nonce()
{
  return &type metadata for AES.GCM.Nonce;
}

ValueMetadata *type metadata accessor for ChaChaPoly.Nonce()
{
  return &type metadata for ChaChaPoly.Nonce;
}

uint64_t AES.GCM.Nonce.withUnsafeBytes<A>(_:)()
{
  return ChaChaPoly.Nonce.withUnsafeBytes<A>(_:)();
}

uint64_t static SHA256Digest.byteCount.getter()
{
  return 32;
}

uint64_t static SHA384Digest.byteCount.getter()
{
  return 48;
}

uint64_t static SHA512Digest.byteCount.getter()
{
  return 64;
}

uint64_t sub_1A8DD99BC()
{
  v6[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = *v0;
  v6[0] = MEMORY[0x1E4FBC860];
  sub_1A8DE608C((uint64_t)&v5, (char *)v6);
  uint64_t v5 = v1;
  sub_1A8DE608C((uint64_t)&v5, (char *)v6);
  uint64_t v5 = v2;
  sub_1A8DE608C((uint64_t)&v5, (char *)v6);
  uint64_t v5 = v3;
  sub_1A8DE608C((uint64_t)&v5, (char *)v6);
  uint64_t result = v6[0];
  if (*(void *)(v6[0] + 16) < 0x20uLL) {
    __break(1u);
  }
  return result;
}

uint64_t SHA256Digest.description.getter()
{
  uint64_t v15 = 0x6420363532414853;
  unint64_t v16 = 0xEF203A7473656769;
  long long v1 = v0[1];
  v14[0] = *v0;
  v14[1] = v1;
  uint64_t result = sub_1A8DD99BC();
  unint64_t v6 = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((uint64_t)(v6 + 0x4000000000000000) < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  size_t v7 = 2 * v6;
  if (((2 * v6) & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = v3;
  uint64_t v10 = v4;
  unint64_t v11 = v5;
  if (v7)
  {
    uint64_t v12 = sub_1A8DE97D0();
    *(void *)(v12 + 16) = v7;
    bzero((void *)(v12 + 32), v7);
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = 0;
  *(void *)&v14[0] = v12;
  sub_1A8DE9A30();
  sub_1A8D96808(v8, v9, v10, v11, (uint64_t *)v14, &v13);
  swift_unknownObjectRelease();
  sub_1A8DE97C0();
  sub_1A8DE9650();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A8DE9680();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t SHA256Digest.hash(into:)()
{
  return sub_1A8DE9BE0();
}

uint64_t SHA256Digest.hashValue.getter()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DD9D18()
{
  return 32;
}

uint64_t sub_1A8DD9D20()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DD9DB0()
{
  return sub_1A8DE9BE0();
}

uint64_t sub_1A8DD9E20()
{
  return sub_1A8DE9C20();
}

void *sub_1A8DD9EB0()
{
  return sub_1A8DC92E0(*v0, v0[1], v0[2], v0[3]);
}

size_t sub_1A8DD9EBC(size_t *a1, unsigned char *a2, size_t a3)
{
  return sub_1A8DC8274(a1, a2, a3, *v3, v3[1], v3[2], v3[3]);
}

BOOL sub_1A8DD9EC8()
{
  return cc_cmp_safe() == 0;
}

uint64_t SHA384Digest.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v5 = v3[1];
  v10[0] = *v3;
  v10[1] = v5;
  _OWORD v10[2] = v3[2];
  uint64_t v12 = a3;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1EB476820);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476998);
  return sub_1A8D89068((uint64_t)v10, (uint64_t)sub_1A8DDBAF8, (uint64_t)v11, v6, v7, a3, MEMORY[0x1E4FBC0F0], (uint64_t)&v9);
}

uint64_t sub_1A8DDA018()
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = *v0;
  v8[0] = MEMORY[0x1E4FBC860];
  sub_1A8DE608C((uint64_t)&v7, (char *)v8);
  uint64_t v7 = v1;
  sub_1A8DE608C((uint64_t)&v7, (char *)v8);
  uint64_t v7 = v2;
  sub_1A8DE608C((uint64_t)&v7, (char *)v8);
  uint64_t v7 = v3;
  sub_1A8DE608C((uint64_t)&v7, (char *)v8);
  uint64_t v7 = v4;
  sub_1A8DE608C((uint64_t)&v7, (char *)v8);
  uint64_t v7 = v5;
  sub_1A8DE608C((uint64_t)&v7, (char *)v8);
  uint64_t result = v8[0];
  if (*(void *)(v8[0] + 16) < 0x30uLL) {
    __break(1u);
  }
  return result;
}

uint64_t SHA384Digest.description.getter()
{
  uint64_t v15 = 0x6420343833414853;
  unint64_t v16 = 0xEF203A7473656769;
  long long v1 = v0[1];
  v14[0] = *v0;
  v14[1] = v1;
  _OWORD v14[2] = v0[2];
  uint64_t result = sub_1A8DDA018();
  unint64_t v6 = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((uint64_t)(v6 + 0x4000000000000000) < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  size_t v7 = 2 * v6;
  if (((2 * v6) & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = v3;
  uint64_t v10 = v4;
  unint64_t v11 = v5;
  if (v7)
  {
    uint64_t v12 = sub_1A8DE97D0();
    *(void *)(v12 + 16) = v7;
    bzero((void *)(v12 + 32), v7);
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = 0;
  *(void *)&v14[0] = v12;
  sub_1A8DE9A30();
  sub_1A8D96808(v8, v9, v10, v11, (uint64_t *)v14, &v13);
  swift_unknownObjectRelease();
  sub_1A8DE97C0();
  sub_1A8DE9650();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A8DE9680();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t SHA384Digest.hash(into:)()
{
  return sub_1A8DE9BE0();
}

uint64_t SHA384Digest.hashValue.getter()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DDA3C0()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DDA458()
{
  return sub_1A8DE9BE0();
}

uint64_t sub_1A8DDA4D0()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DDA564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SHA384Digest.withUnsafeBytes<A>(_:)(a1, a2, a3);
}

size_t sub_1A8DDA580@<X0>(size_t *a1@<X8>)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  long long v3 = v1[1];
  v5[0] = *v1;
  v5[1] = v3;
  uint64_t v5[2] = v1[2];
  size_t result = sub_1A8D891D0((size_t)v5, (unint64_t)v6);
  *a1 = result;
  a1[1] = 0;
  return result;
}

void *sub_1A8DDA5F8()
{
  long long v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  return sub_1A8DC9470(v3);
}

size_t sub_1A8DDA62C(size_t *a1, unsigned char *a2, size_t a3)
{
  return sub_1A8DC83D4(a1, a2, a3);
}

BOOL sub_1A8DDA668()
{
  return cc_cmp_safe() == 0;
}

uint64_t SHA512Digest.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v5 = v3[1];
  v11[0] = *v3;
  v11[1] = v5;
  long long v6 = v3[3];
  id v11[2] = v3[2];
  v11[3] = v6;
  uint64_t v13 = a3;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8BE0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476998);
  return sub_1A8D89068((uint64_t)v11, (uint64_t)sub_1A8DDBB3C, (uint64_t)v12, v7, v8, a3, MEMORY[0x1E4FBC0F0], (uint64_t)&v10);
}

uint64_t sub_1A8DDA7C8()
{
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v9 = *v0;
  v10[0] = MEMORY[0x1E4FBC860];
  sub_1A8DE608C((uint64_t)&v9, (char *)v10);
  uint64_t v9 = v1;
  sub_1A8DE608C((uint64_t)&v9, (char *)v10);
  uint64_t v9 = v2;
  sub_1A8DE608C((uint64_t)&v9, (char *)v10);
  uint64_t v9 = v3;
  sub_1A8DE608C((uint64_t)&v9, (char *)v10);
  uint64_t v9 = v4;
  sub_1A8DE608C((uint64_t)&v9, (char *)v10);
  uint64_t v9 = v5;
  sub_1A8DE608C((uint64_t)&v9, (char *)v10);
  uint64_t v9 = v6;
  sub_1A8DE608C((uint64_t)&v9, (char *)v10);
  uint64_t v9 = v7;
  sub_1A8DE608C((uint64_t)&v9, (char *)v10);
  uint64_t result = v10[0];
  if (*(void *)(v10[0] + 16) < 0x40uLL) {
    __break(1u);
  }
  return result;
}

uint64_t SHA512Digest.description.getter()
{
  uint64_t v16 = 0x6420323135414853;
  unint64_t v17 = 0xEF203A7473656769;
  long long v1 = v0[1];
  v15[0] = *v0;
  v15[1] = v1;
  long long v2 = v0[3];
  _OWORD v15[2] = v0[2];
  _OWORD v15[3] = v2;
  uint64_t result = sub_1A8DDA7C8();
  unint64_t v7 = (v6 >> 1) - v5;
  if (__OFSUB__(v6 >> 1, v5))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((uint64_t)(v7 + 0x4000000000000000) < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  size_t v8 = 2 * v7;
  if (((2 * v7) & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v9 = result;
  uint64_t v10 = v4;
  uint64_t v11 = v5;
  unint64_t v12 = v6;
  if (v8)
  {
    uint64_t v13 = sub_1A8DE97D0();
    *(void *)(v13 + 16) = v8;
    bzero((void *)(v13 + 32), v8);
  }
  else
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = 0;
  *(void *)&v15[0] = v13;
  sub_1A8DE9A30();
  sub_1A8D96808(v9, v10, v11, v12, (uint64_t *)v15, &v14);
  swift_unknownObjectRelease();
  sub_1A8DE97C0();
  sub_1A8DE9650();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A8DE9680();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t SHA512Digest.hash(into:)()
{
  return sub_1A8DE9BE0();
}

uint64_t SHA512Digest.hashValue.getter()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DDABB0()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DDAC54()
{
  return sub_1A8DE9BE0();
}

uint64_t sub_1A8DDACCC()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DDAD6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SHA512Digest.withUnsafeBytes<A>(_:)(a1, a2, a3);
}

void *sub_1A8DDAD88()
{
  long long v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  long long v2 = v0[3];
  void v4[2] = v0[2];
  _OWORD v4[3] = v2;
  return sub_1A8DC9608(v4);
}

size_t sub_1A8DDADBC(size_t *a1, unsigned char *a2, size_t a3)
{
  return sub_1A8DC853C(a1, a2, a3);
}

BOOL sub_1A8DDADF8()
{
  return cc_cmp_safe() == 0;
}

uint64_t static Insecure.SHA1Digest.byteCount.getter()
{
  return 20;
}

uint64_t Insecure.SHA1Digest.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)v3 + 2);
  long long v10 = *v3;
  uint64_t v11 = v5;
  uint64_t v13 = a3;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476670);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476998);
  return sub_1A8D89068((uint64_t)&v10, (uint64_t)sub_1A8DDBB80, (uint64_t)v12, v6, v7, a3, MEMORY[0x1E4FBC0F0], (uint64_t)&v9);
}

uint64_t sub_1A8DDAF60()
{
  v5[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  uint64_t v4 = *v0;
  v5[0] = MEMORY[0x1E4FBC860];
  sub_1A8DE608C((uint64_t)&v4, (char *)v5);
  uint64_t v4 = v1;
  sub_1A8DE608C((uint64_t)&v4, (char *)v5);
  uint64_t v4 = v2;
  sub_1A8DE608C((uint64_t)&v4, (char *)v5);
  uint64_t result = v5[0];
  if (*(void *)(v5[0] + 16) < 0x14uLL) {
    __break(1u);
  }
  return result;
}

uint64_t Insecure.SHA1Digest.description.getter()
{
  uint64_t v1 = *((void *)v0 + 2);
  strcpy((char *)v16, "SHA1 digest: ");
  HIWORD(v16[1]) = -4864;
  long long v14 = *v0;
  uint64_t v15 = v1;
  uint64_t result = sub_1A8DDAF60();
  unint64_t v6 = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((uint64_t)(v6 + 0x4000000000000000) < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  size_t v7 = 2 * v6;
  if (((2 * v6) & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = v3;
  uint64_t v10 = v4;
  unint64_t v11 = v5;
  if (v7)
  {
    uint64_t v12 = sub_1A8DE97D0();
    *(void *)(v12 + 16) = v7;
    bzero((void *)(v12 + 32), v7);
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = 0;
  *(void *)&long long v14 = v12;
  sub_1A8DE9A30();
  sub_1A8D96808(v8, v9, v10, v11, (uint64_t *)&v14, &v13);
  swift_unknownObjectRelease();
  sub_1A8DE97C0();
  sub_1A8DE9650();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A8DE9680();
  swift_bridgeObjectRelease();
  return v16[0];
}

uint64_t Insecure.SHA1Digest.hash(into:)()
{
  return sub_1A8DE9BE0();
}

uint64_t Insecure.SHA1Digest.hashValue.getter()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DDB2B0()
{
  return 20;
}

uint64_t sub_1A8DDB2B8()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DDB348()
{
  return sub_1A8DE9BE0();
}

uint64_t sub_1A8DDB3C0()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DDB44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Insecure.SHA1Digest.withUnsafeBytes<A>(_:)(a1, a2, a3);
}

size_t sub_1A8DDB468@<X0>(size_t *a1@<X8>)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)v1 + 2);
  long long v5 = *v1;
  v6[0] = v3;
  size_t result = sub_1A8D891D0((size_t)&v5, (unint64_t)v6 + 4);
  *a1 = result;
  a1[1] = 0;
  return result;
}

void *sub_1A8DDB4E0()
{
  return sub_1A8DC9AF4(*v0, v0[1], v0[2]);
}

size_t sub_1A8DDB4EC(size_t *a1, unsigned char *a2, size_t a3)
{
  return sub_1A8DC8CCC(a1, a2, a3, *v3, v3[1], v3[2]);
}

BOOL sub_1A8DDB4F8()
{
  return cc_cmp_safe() == 0;
}

uint64_t static Insecure.MD5Digest.byteCount.getter()
{
  return 16;
}

uint64_t sub_1A8DDB580()
{
  v4[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = v0[1];
  uint64_t v3 = *v0;
  v4[0] = MEMORY[0x1E4FBC860];
  sub_1A8DE608C((uint64_t)&v3, (char *)v4);
  uint64_t v3 = v1;
  sub_1A8DE608C((uint64_t)&v3, (char *)v4);
  uint64_t result = v4[0];
  if (*(void *)(v4[0] + 16) < 0x10uLL) {
    __break(1u);
  }
  return result;
}

uint64_t Insecure.MD5Digest.description.getter()
{
  strcpy((char *)v14, "MD5 digest: ");
  BYTE5(v14[1]) = 0;
  HIWORD(v14[1]) = -5120;
  long long v13 = *v0;
  uint64_t result = sub_1A8DDB580();
  unint64_t v5 = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((uint64_t)(v5 + 0x4000000000000000) < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  size_t v6 = 2 * v5;
  if (((2 * v5) & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = v2;
  uint64_t v9 = v3;
  unint64_t v10 = v4;
  if (v6)
  {
    uint64_t v11 = sub_1A8DE97D0();
    *(void *)(v11 + 16) = v6;
    bzero((void *)(v11 + 32), v6);
  }
  else
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = 0;
  *(void *)&long long v13 = v11;
  sub_1A8DE9A30();
  sub_1A8D96808(v7, v8, v9, v10, (uint64_t *)&v13, &v12);
  swift_unknownObjectRelease();
  sub_1A8DE97C0();
  sub_1A8DE9650();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A8DE9680();
  swift_bridgeObjectRelease();
  return v14[0];
}

uint64_t Insecure.MD5Digest.hash(into:)()
{
  return sub_1A8DE9BE0();
}

uint64_t Insecure.MD5Digest.hashValue.getter()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DDB894()
{
  return 16;
}

uint64_t sub_1A8DDB89C()
{
  return sub_1A8DE9C20();
}

uint64_t sub_1A8DDB91C()
{
  return sub_1A8DE9BE0();
}

uint64_t sub_1A8DDB98C()
{
  return sub_1A8DE9C20();
}

size_t sub_1A8DDBA0C@<X0>(size_t *a1@<X8>)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  long long v4 = *v1;
  size_t result = sub_1A8D891D0((size_t)&v4, (unint64_t)v5);
  *a1 = result;
  a1[1] = 0;
  return result;
}

void *sub_1A8DDBA7C()
{
  return sub_1A8DC9C84(*v0, v0[1]);
}

size_t sub_1A8DDBA84(size_t *a1, unsigned char *a2, size_t a3)
{
  return sub_1A8DC8E2C(a1, a2, a3, *v3, v3[1]);
}

BOOL sub_1A8DDBA8C()
{
  return cc_cmp_safe() == 0;
}

uint64_t sub_1A8DDBAF8(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1) {
    uint64_t v6 = a1 + 48;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(a1, v6);
  if (v4) {
    *a3 = v4;
  }
  return result;
}

uint64_t sub_1A8DDBB3C(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1) {
    uint64_t v6 = a1 + 64;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(a1, v6);
  if (v4) {
    *a3 = v4;
  }
  return result;
}

uint64_t sub_1A8DDBB80(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1) {
    uint64_t v6 = a1 + 20;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(a1, v6);
  if (v4) {
    *a3 = v4;
  }
  return result;
}

unint64_t sub_1A8DDBBC4(uint64_t a1)
{
  unint64_t result = sub_1A8DAFC6C();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A8DDBBEC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8DDC4D0(a1, a2, a3, (uint64_t (*)(void))sub_1A8DDBC40, (uint64_t (*)(void))sub_1A8DDBC94, (uint64_t (*)(void))sub_1A8DDBCE8, (uint64_t (*)(void))sub_1A8DDBD3C);
}

unint64_t sub_1A8DDBC40()
{
  unint64_t result = qword_1EB4766E0;
  if (!qword_1EB4766E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB4766E0);
  }
  return result;
}

unint64_t sub_1A8DDBC94()
{
  unint64_t result = qword_1EB476700;
  if (!qword_1EB476700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476700);
  }
  return result;
}

unint64_t sub_1A8DDBCE8()
{
  unint64_t result = qword_1EB4766E8;
  if (!qword_1EB4766E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB4766E8);
  }
  return result;
}

unint64_t sub_1A8DDBD3C()
{
  unint64_t result = qword_1EB4766F8;
  if (!qword_1EB4766F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB4766F8);
  }
  return result;
}

unint64_t sub_1A8DDBD94()
{
  unint64_t result = qword_1EB4766F0;
  if (!qword_1EB4766F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB4766F0);
  }
  return result;
}

unint64_t sub_1A8DDBDE8(uint64_t a1)
{
  unint64_t result = sub_1A8DAFD44();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A8DDBE10(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8DDC4D0(a1, a2, a3, (uint64_t (*)(void))sub_1A8DDBE64, (uint64_t (*)(void))sub_1A8DDBEB8, (uint64_t (*)(void))sub_1A8DDBF0C, (uint64_t (*)(void))sub_1A8DDBF60);
}

unint64_t sub_1A8DDBE64()
{
  unint64_t result = qword_1EB4767F0;
  if (!qword_1EB4767F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB4767F0);
  }
  return result;
}

unint64_t sub_1A8DDBEB8()
{
  unint64_t result = qword_1EB476810;
  if (!qword_1EB476810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476810);
  }
  return result;
}

unint64_t sub_1A8DDBF0C()
{
  unint64_t result = qword_1EB4767F8;
  if (!qword_1EB4767F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB4767F8);
  }
  return result;
}

unint64_t sub_1A8DDBF60()
{
  unint64_t result = qword_1EB476808;
  if (!qword_1EB476808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476808);
  }
  return result;
}

unint64_t sub_1A8DDBFB8()
{
  unint64_t result = qword_1EB476800;
  if (!qword_1EB476800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476800);
  }
  return result;
}

unint64_t sub_1A8DDC00C(uint64_t a1)
{
  unint64_t result = sub_1A8DAFE1C();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A8DDC034(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8DDC4D0(a1, a2, a3, (uint64_t (*)(void))sub_1A8DDC088, (uint64_t (*)(void))sub_1A8DDC0DC, (uint64_t (*)(void))sub_1A8DDC130, (uint64_t (*)(void))sub_1A8DDC184);
}

unint64_t sub_1A8DDC088()
{
  unint64_t result = qword_1E97A8B78;
  if (!qword_1E97A8B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8B78);
  }
  return result;
}

unint64_t sub_1A8DDC0DC()
{
  unint64_t result = qword_1E97A8B98;
  if (!qword_1E97A8B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8B98);
  }
  return result;
}

unint64_t sub_1A8DDC130()
{
  unint64_t result = qword_1E97A8B80;
  if (!qword_1E97A8B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8B80);
  }
  return result;
}

unint64_t sub_1A8DDC184()
{
  unint64_t result = qword_1E97A8B90;
  if (!qword_1E97A8B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8B90);
  }
  return result;
}

unint64_t sub_1A8DDC1DC()
{
  unint64_t result = qword_1E97A8B88;
  if (!qword_1E97A8B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8B88);
  }
  return result;
}

unint64_t sub_1A8DDC230(uint64_t a1)
{
  unint64_t result = sub_1A8DBEB14();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A8DDC258(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8DDC4D0(a1, a2, a3, (uint64_t (*)(void))sub_1A8DDC2AC, (uint64_t (*)(void))sub_1A8DDC300, (uint64_t (*)(void))sub_1A8DDC354, (uint64_t (*)(void))sub_1A8DDC3A8);
}

unint64_t sub_1A8DDC2AC()
{
  unint64_t result = qword_1E97A95B0;
  if (!qword_1E97A95B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A95B0);
  }
  return result;
}

unint64_t sub_1A8DDC300()
{
  unint64_t result = qword_1E97A95B8;
  if (!qword_1E97A95B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A95B8);
  }
  return result;
}

unint64_t sub_1A8DDC354()
{
  unint64_t result = qword_1E97A95C0;
  if (!qword_1E97A95C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A95C0);
  }
  return result;
}

unint64_t sub_1A8DDC3A8()
{
  unint64_t result = qword_1E97A95C8;
  if (!qword_1E97A95C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A95C8);
  }
  return result;
}

unint64_t sub_1A8DDC400()
{
  unint64_t result = qword_1E97A95D0;
  if (!qword_1E97A95D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A95D0);
  }
  return result;
}

unint64_t sub_1A8DDC454(uint64_t a1)
{
  unint64_t result = sub_1A8DBEBC4();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A8DDC47C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8DDC4D0(a1, a2, a3, (uint64_t (*)(void))sub_1A8DDC534, (uint64_t (*)(void))sub_1A8DDC588, (uint64_t (*)(void))sub_1A8DDC5DC, (uint64_t (*)(void))sub_1A8DDC630);
}

uint64_t sub_1A8DDC4D0(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  a1[3] = a6();
  uint64_t result = a7();
  a1[4] = result;
  return result;
}

unint64_t sub_1A8DDC534()
{
  unint64_t result = qword_1E97A95D8;
  if (!qword_1E97A95D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A95D8);
  }
  return result;
}

unint64_t sub_1A8DDC588()
{
  unint64_t result = qword_1E97A95E0;
  if (!qword_1E97A95E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A95E0);
  }
  return result;
}

unint64_t sub_1A8DDC5DC()
{
  unint64_t result = qword_1E97A95E8;
  if (!qword_1E97A95E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A95E8);
  }
  return result;
}

unint64_t sub_1A8DDC630()
{
  unint64_t result = qword_1E97A95F0;
  if (!qword_1E97A95F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A95F0);
  }
  return result;
}

unint64_t sub_1A8DDC688()
{
  unint64_t result = qword_1E97A95F8;
  if (!qword_1E97A95F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A95F8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SHA384Digest(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SHA384Digest(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SHA384Digest()
{
  return &type metadata for SHA384Digest;
}

uint64_t getEnumTagSinglePayload for SHA512Digest(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SHA512Digest(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

uint64_t _s10SHA1DigestVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s10SHA1DigestVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Insecure.SHA1Digest()
{
  return &type metadata for Insecure.SHA1Digest;
}

uint64_t sub_1A8DDC7FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = sub_1A8DE9B40();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_1A8DE9B40() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DDC8C4@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return sub_1A8DE97C0();
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.publicKey.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return sub_1A8DE97C0();
}

void SecureEnclave.P256.KeyAgreement.PrivateKey.init(dataRepresentation:parameters:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
}

void SecureEnclave.P256.Signing.PrivateKey.init(dataRepresentation:parameters:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
}

void sub_1A8DDC914(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = sub_1A8DDCC54(&v19, a1, a2, a4, a3);
  if (v5)
  {

    sub_1A8D8BD58(a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v13 = (void *)v10;
    uint64_t v14 = v11;
    unint64_t v15 = v12;

    sub_1A8D8BD58(a1, a2);
    swift_bridgeObjectRelease();
    uint64_t v16 = v19;
    id v17 = v13;
    sub_1A8D8BE04(v14, v15);
    sub_1A8D8BD58(v14, v15);
    id v18 = v17;
    sub_1A8D8BE04(v14, v15);

    sub_1A8D8BD58(v14, v15);
    *a5 = v16;
    a5[1] = v14;
    a5[2] = v15;
    a5[3] = (uint64_t)v18;
  }
}

void sub_1A8DDCA1C()
{
  sub_1A8DE9640();
  id v0 = objc_allocWithZone(MEMORY[0x1E4F25238]);
  uint64_t v1 = (void *)sub_1A8DE9630();
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(v0, sel_initWithTokenID_, v1);

  qword_1E97AD6E0 = (uint64_t)v2;
}

uint64_t static SecureEnclave.isAvailable.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F25258]), sel_init);
  id v1 = objc_msgSend(v0, sel_tokenIDs);
  id v2 = (void *)sub_1A8DE97B0();

  uint64_t v3 = sub_1A8DE9640();
  char v5 = sub_1A8DDC7FC(v3, v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v5 & 1;
}

uint64_t sub_1A8DDCB48(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_1A8DDCC54(a1, a2, a3, a4, a5);
}

void SecureEnclave.P256.Signing.PrivateKey.init(dataRepresentation:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
}

void SecureEnclave.P256.Signing.PrivateKey.init(compactRepresentable:accessControl:authenticationContext:)(char a1@<W0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.dataRepresentation.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_1A8D8BE04(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t sub_1A8DDCC04(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_1A8DDCC54(a1, a2, a3, a4, a5);
}

uint64_t sub_1A8DDCC54(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  v32[1] = *(id *)MEMORY[0x1E4F143B8];
  if (qword_1E97A8BB8 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_1E97AD6E0;
  id v11 = (id)qword_1E97AD6E0;
  if (a5) {
    unint64_t v12 = a5;
  }
  else {
    unint64_t v12 = sub_1A8DB3054(MEMORY[0x1E4FBC860]);
  }
  sub_1A8DE97C0();
  sub_1A8DDDA84(v12);
  swift_bridgeObjectRelease();
  v32[0] = 0;
  id v13 = objc_allocWithZone(MEMORY[0x1E4F25240]);
  id v14 = a4;
  unint64_t v15 = (void *)sub_1A8DE9560();
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v13, sel_initWithToken_LAContext_parameters_error_, v10, v14, v15, v32);

  id v17 = v32[0];
  if (v32[0])
  {
    id v18 = v32[0];
    swift_willThrow();

LABEL_8:
    return (uint64_t)v17;
  }
  uint64_t v20 = (void *)sub_1A8DE94A0();
  v32[0] = 0;
  id v17 = objc_msgSend(v16, sel_objectForObjectID_error_, v20, v32);

  if (!v17)
  {
    id v29 = v32[0];
    sub_1A8DE93B0();

    swift_willThrow();
    goto LABEL_8;
  }
  id v21 = v32[0];
  id v22 = objc_msgSend(v17, sel_publicKey);
  if (!v22)
  {
    sub_1A8DDD884();
    swift_allocError();
    *(void *)uint64_t v30 = 2;
    *(unsigned char *)(v30 + 8) = 1;
    swift_willThrow();

    id v16 = v17;
    goto LABEL_8;
  }
  uint64_t v23 = v22;
  uint64_t v24 = sub_1A8DE94C0();
  unint64_t v26 = v25;

  sub_1A8D8BE04(v24, v26);
  uint64_t v27 = sub_1A8DD71EC(v24, v26);
  if (!v5)
  {
    uint64_t v28 = v27;
    sub_1A8D8BD58(v24, v26);

    *a1 = v28;
    sub_1A8D8BE04(a2, a3);
    return (uint64_t)v17;
  }
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

void SecureEnclave.P256.KeyAgreement.PrivateKey.init(dataRepresentation:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
}

void sub_1A8DDCF70(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = sub_1A8DDCC54(&v18, a1, a2, a3, 0);
  if (v4)
  {

    sub_1A8D8BD58(a1, a2);
  }
  else
  {
    unint64_t v12 = (void *)v9;
    uint64_t v13 = v10;
    unint64_t v14 = v11;

    sub_1A8D8BD58(a1, a2);
    uint64_t v15 = v18;
    id v16 = v12;
    sub_1A8D8BE04(v13, v14);
    sub_1A8D8BD58(v13, v14);
    id v17 = v16;
    sub_1A8D8BE04(v13, v14);

    sub_1A8D8BD58(v13, v14);
    *a4 = v15;
    a4[1] = v13;
    a4[2] = v14;
    a4[3] = (uint64_t)v17;
  }
}

uint64_t sub_1A8DDD068(uint64_t *a1, char a2, uint64_t a3, void *a4)
{
  v48[17] = *(id *)MEMORY[0x1E4F143B8];
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F25258]), sel_init);
  id v8 = objc_msgSend(v7, sel_tokenIDs);
  uint64_t v9 = (void *)sub_1A8DE97B0();

  uint64_t v10 = sub_1A8DE9640();
  id v12 = (id)v11;
  char v13 = sub_1A8DDC7FC(v10, v11, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v13 & 1) == 0)
  {
    sub_1A8DDD884();
    swift_allocError();
    *(void *)uint64_t v20 = 0;
    *(unsigned char *)(v20 + 8) = 1;
    swift_willThrow();
    return (uint64_t)v12;
  }
  if (qword_1E97A8BB8 != -1) {
    swift_once();
  }
  id v14 = (id)qword_1E97AD6E0;
  unint64_t v15 = sub_1A8DB3054(MEMORY[0x1E4FBC860]);
  sub_1A8DDDA84(v15);
  swift_bridgeObjectRelease();
  v48[0] = 0;
  id v16 = objc_allocWithZone(MEMORY[0x1E4F25240]);
  id v17 = a4;
  uint64_t v18 = (void *)sub_1A8DE9560();
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(v16, sel_initWithToken_LAContext_parameters_error_, v14, v17, v18, v48);

  if (v48[0])
  {
    id v19 = v48[0];
    swift_willThrow();

    return (uint64_t)v12;
  }
  id v45 = v12;
  long long v43 = a1;
  id v44 = self;
  id v22 = (void *)*MEMORY[0x1E4F3B548];
  type metadata accessor for CFString(0);
  uint64_t v23 = 1000;
  sub_1A8DDD8D8();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8BD8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A8DEC2F0;
    v48[0] = v22;
    id v25 = v22;
    sub_1A8DE9A70();
    id v26 = objc_msgSend(v44, sel_dataFromACL_, a3);
    uint64_t v27 = sub_1A8DE94C0();
    uint64_t v29 = v28;

    *(void *)(inited + 96) = MEMORY[0x1E4F277C0];
    *(void *)(inited + 72) = v27;
    *(void *)(inited + 80) = v29;
    sub_1A8DB3170(inited);
    uint64_t v30 = (void *)sub_1A8DE9560();
    swift_bridgeObjectRelease();
    v48[0] = 0;
    id v12 = objc_msgSend(v45, sel_createObjectWithAttributes_error_, v30, v48);

    if (!v12)
    {
      id v12 = v48[0];
      sub_1A8DE93B0();

      goto LABEL_19;
    }
    id v31 = v48[0];
    id v32 = objc_msgSend(v12, sel_publicKey);
    if (!v32)
    {
      __break(1u);
LABEL_21:
      __break(1u);
    }
    uint64_t v33 = v32;
    uint64_t v34 = sub_1A8DE94C0();
    unint64_t v36 = v35;

    if ((a2 & 1) == 0) {
      break;
    }
    uint64_t v37 = (void *)sub_1A8DE94A0();
    uint64_t v38 = MEMORY[0x1AD0E7C50]();
    if (!v38) {
      goto LABEL_21;
    }
    uint64_t v39 = (void *)v38;
    v48[3] = (id)__swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    v48[0] = v39;
    swift_dynamicCast();
    LODWORD(v39) = keyIsCompactRepresentable();

    if (v39) {
      break;
    }
    sub_1A8D8BD58(v34, v36);

    if (!--v23)
    {
      sub_1A8DDD884();
      swift_allocError();
      *(void *)uint64_t v40 = 3;
      *(unsigned char *)(v40 + 8) = 1;
LABEL_19:
      swift_willThrow();

      return (uint64_t)v12;
    }
  }
  id v41 = objc_msgSend(v12, sel_objectID);
  sub_1A8DE94C0();

  sub_1A8D8BE04(v34, v36);
  uint64_t v42 = sub_1A8DD71EC(v34, v36);
  if (!v4)
  {
    *long long v43 = v42;
    sub_1A8D8BD58(v34, v36);

    return (uint64_t)v12;
  }
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

void SecureEnclave.P256.KeyAgreement.PrivateKey.init(compactRepresentable:accessControl:authenticationContext:)(char a1@<W0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
}

void sub_1A8DDD5C8(char a1@<W0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  id v8 = (void *)sub_1A8DDD068(&v16, a1, (uint64_t)a2, a3);
  uint64_t v10 = v9;
  unint64_t v12 = v11;

  if (!v4)
  {
    uint64_t v13 = v16;
    id v14 = v8;
    sub_1A8D8BE04(v10, v12);
    sub_1A8D8BD58(v10, v12);
    id v15 = v14;
    sub_1A8D8BE04(v10, v12);

    sub_1A8D8BD58(v10, v12);
    *a4 = v13;
    a4[1] = v10;
    a4[2] = v12;
    a4[3] = (uint64_t)v15;
  }
}

ValueMetadata *type metadata accessor for SecureEnclave()
{
  return &type metadata for SecureEnclave;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256()
{
  return &type metadata for SecureEnclave.P256;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256.Signing()
{
  return &type metadata for SecureEnclave.P256.Signing;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256.Signing.PrivateKey()
{
  return &type metadata for SecureEnclave.P256.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256.KeyAgreement()
{
  return &type metadata for SecureEnclave.P256.KeyAgreement;
}

void _s9CryptoKit13SecureEnclaveO4P256O7SigningO10PrivateKeyVwxx_0(void *a1)
{
  swift_bridgeObjectRelease();
  sub_1A8D8BD58(a1[1], a1[2]);
  id v2 = (void *)a1[3];
}

void *_s9CryptoKit13SecureEnclaveO4P256O7SigningO10PrivateKeyVwcp_0(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  unint64_t v5 = a2[2];
  sub_1A8DE97C0();
  sub_1A8D8BE04(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  uint64_t v6 = (void *)a2[3];
  a1[3] = v6;
  id v7 = v6;
  return a1;
}

void *_s9CryptoKit13SecureEnclaveO4P256O7SigningO10PrivateKeyVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  sub_1A8DE97C0();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  sub_1A8D8BE04(v4, v5);
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_1A8D8BD58(v6, v7);
  id v8 = (void *)a2[3];
  uint64_t v9 = (void *)a1[3];
  a1[3] = v8;
  id v10 = v8;

  return a1;
}

void *_s9CryptoKit13SecureEnclaveO4P256O7SigningO10PrivateKeyVwta_0(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_1A8D8BD58(v4, v5);
  uint64_t v6 = (void *)a1[3];
  a1[3] = *(void *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey()
{
  return &type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey;
}

unint64_t sub_1A8DDD884()
{
  unint64_t result = qword_1E97A9600;
  if (!qword_1E97A9600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9600);
  }
  return result;
}

unint64_t sub_1A8DDD8D8()
{
  unint64_t result = qword_1E97A8BF8;
  if (!qword_1E97A8BF8)
  {
    type metadata accessor for CFString(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A8BF8);
  }
  return result;
}

uint64_t SecureEnclave.P384.KeyAgreement.PrivateKey.publicKey.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return sub_1A8DE97C0();
}

void SecureEnclave.P384.KeyAgreement.PrivateKey.init(dataRepresentation:parameters:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
}

void SecureEnclave.P384.Signing.PrivateKey.init(dataRepresentation:parameters:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
}

void sub_1A8DDD97C(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = sub_1A8DDDF4C(&v19, a1, a2, a4, a3);
  if (v5)
  {

    sub_1A8D8BD58(a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = (void *)v10;
    uint64_t v14 = v11;
    unint64_t v15 = v12;

    sub_1A8D8BD58(a1, a2);
    swift_bridgeObjectRelease();
    uint64_t v16 = v19;
    id v17 = v13;
    sub_1A8D8BE04(v14, v15);
    sub_1A8D8BD58(v14, v15);
    id v18 = v17;
    sub_1A8D8BE04(v14, v15);

    sub_1A8D8BD58(v14, v15);
    *a5 = v16;
    a5[1] = v14;
    a5[2] = v15;
    a5[3] = (uint64_t)v18;
  }
}

uint64_t sub_1A8DDDA84(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8BD0);
    uint64_t v2 = sub_1A8DE9B10();
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  sub_1A8DE97C0();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    id v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    sub_1A8DE97C0();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_1A8DB3B34(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_1A8DB3B34(v35, v36);
    sub_1A8DB3B34(v36, &v32);
    uint64_t result = sub_1A8DE9A50();
    uint64_t v19 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_1A8DB3B34(&v32, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_1A8DDEA2C();
    return v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1A8DDDE40(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_1A8DDDF4C(a1, a2, a3, a4, a5);
}

void SecureEnclave.P384.Signing.PrivateKey.init(dataRepresentation:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
}

void SecureEnclave.P384.Signing.PrivateKey.init(compactRepresentable:accessControl:authenticationContext:)(char a1@<W0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
}

uint64_t SecureEnclave.P384.KeyAgreement.PrivateKey.dataRepresentation.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_1A8D8BE04(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t sub_1A8DDDEFC(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_1A8DDDF4C(a1, a2, a3, a4, a5);
}

uint64_t sub_1A8DDDF4C(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  v32[1] = *(id *)MEMORY[0x1E4F143B8];
  if (qword_1E97A8BB8 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_1E97AD6E0;
  id v11 = (id)qword_1E97AD6E0;
  if (a5) {
    unint64_t v12 = a5;
  }
  else {
    unint64_t v12 = sub_1A8DB3054(MEMORY[0x1E4FBC860]);
  }
  sub_1A8DE97C0();
  sub_1A8DDDA84(v12);
  swift_bridgeObjectRelease();
  v32[0] = 0;
  id v13 = objc_allocWithZone(MEMORY[0x1E4F25240]);
  id v14 = a4;
  int64_t v15 = (void *)sub_1A8DE9560();
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v13, sel_initWithToken_LAContext_parameters_error_, v10, v14, v15, v32);

  id v17 = v32[0];
  if (v32[0])
  {
    id v18 = v32[0];
    swift_willThrow();

LABEL_8:
    return (uint64_t)v17;
  }
  unint64_t v20 = (void *)sub_1A8DE94A0();
  v32[0] = 0;
  id v17 = objc_msgSend(v16, sel_objectForObjectID_error_, v20, v32);

  if (!v17)
  {
    id v29 = v32[0];
    sub_1A8DE93B0();

    swift_willThrow();
    goto LABEL_8;
  }
  id v21 = v32[0];
  id v22 = objc_msgSend(v17, sel_publicKey);
  if (!v22)
  {
    sub_1A8DDD884();
    swift_allocError();
    *(void *)uint64_t v30 = 2;
    *(unsigned char *)(v30 + 8) = 1;
    swift_willThrow();

    id v16 = v17;
    goto LABEL_8;
  }
  unint64_t v23 = v22;
  uint64_t v24 = sub_1A8DE94C0();
  unint64_t v26 = v25;

  sub_1A8D8BE04(v24, v26);
  uint64_t v27 = sub_1A8DD7274(v24, v26);
  if (!v5)
  {
    uint64_t v28 = v27;
    sub_1A8D8BD58(v24, v26);

    *a1 = v28;
    sub_1A8D8BE04(a2, a3);
    return (uint64_t)v17;
  }
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

void SecureEnclave.P384.KeyAgreement.PrivateKey.init(dataRepresentation:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
}

void sub_1A8DDE268(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = sub_1A8DDDF4C(&v18, a1, a2, a3, 0);
  if (v4)
  {

    sub_1A8D8BD58(a1, a2);
  }
  else
  {
    unint64_t v12 = (void *)v9;
    uint64_t v13 = v10;
    unint64_t v14 = v11;

    sub_1A8D8BD58(a1, a2);
    uint64_t v15 = v18;
    id v16 = v12;
    sub_1A8D8BE04(v13, v14);
    sub_1A8D8BD58(v13, v14);
    id v17 = v16;
    sub_1A8D8BE04(v13, v14);

    sub_1A8D8BD58(v13, v14);
    *a4 = v15;
    a4[1] = v13;
    a4[2] = v14;
    a4[3] = (uint64_t)v17;
  }
}

uint64_t sub_1A8DDE360(uint64_t *a1, char a2, uint64_t a3, void *a4)
{
  v50[26] = *(id *)MEMORY[0x1E4F143B8];
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F25258]), sel_init);
  id v8 = objc_msgSend(v7, sel_tokenIDs);
  uint64_t v9 = (void *)sub_1A8DE97B0();

  uint64_t v10 = sub_1A8DE9640();
  id v12 = (id)v11;
  char v13 = sub_1A8DDC7FC(v10, v11, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v13 & 1) == 0)
  {
    sub_1A8DDD884();
    swift_allocError();
    *(void *)uint64_t v20 = 0;
    *(unsigned char *)(v20 + 8) = 1;
    swift_willThrow();
    return (uint64_t)v12;
  }
  if (qword_1E97A8BB8 != -1) {
    swift_once();
  }
  id v14 = (id)qword_1E97AD6E0;
  unint64_t v15 = sub_1A8DB3054(MEMORY[0x1E4FBC860]);
  sub_1A8DDDA84(v15);
  swift_bridgeObjectRelease();
  v50[0] = 0;
  id v16 = objc_allocWithZone(MEMORY[0x1E4F25240]);
  id v17 = a4;
  uint64_t v18 = (void *)sub_1A8DE9560();
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(v16, sel_initWithToken_LAContext_parameters_error_, v14, v17, v18, v50);

  if (v50[0])
  {
    id v19 = v50[0];
    swift_willThrow();

    return (uint64_t)v12;
  }
  id v47 = v12;
  id v44 = a1;
  id v46 = self;
  id v45 = (void *)*MEMORY[0x1E4F3B708];
  id v22 = (void *)*MEMORY[0x1E4F3B548];
  type metadata accessor for CFString(0);
  uint64_t v23 = 1000;
  sub_1A8DDD8D8();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E97A8BD8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A8DEE160;
    v50[0] = v45;
    id v25 = v45;
    sub_1A8DE9A70();
    *(void *)(inited + 96) = MEMORY[0x1E4FBB550];
    *(void *)(inited + 72) = 384;
    v50[0] = v22;
    id v26 = v22;
    sub_1A8DE9A70();
    id v27 = objc_msgSend(v46, sel_dataFromACL_, a3);
    uint64_t v28 = sub_1A8DE94C0();
    uint64_t v30 = v29;

    *(void *)(inited + 168) = MEMORY[0x1E4F277C0];
    *(void *)(inited + 144) = v28;
    *(void *)(inited + 152) = v30;
    sub_1A8DB3170(inited);
    long long v31 = (void *)sub_1A8DE9560();
    swift_bridgeObjectRelease();
    v50[0] = 0;
    id v12 = objc_msgSend(v47, sel_createObjectWithAttributes_error_, v31, v50);

    if (!v12)
    {
      id v12 = v50[0];
      sub_1A8DE93B0();

      goto LABEL_19;
    }
    id v32 = v50[0];
    id v33 = objc_msgSend(v12, sel_publicKey);
    if (!v33)
    {
      __break(1u);
LABEL_21:
      __break(1u);
    }
    uint64_t v34 = v33;
    uint64_t v35 = sub_1A8DE94C0();
    unint64_t v37 = v36;

    if ((a2 & 1) == 0) {
      break;
    }
    uint64_t v38 = (void *)sub_1A8DE94A0();
    uint64_t v39 = MEMORY[0x1AD0E7C60]();
    if (!v39) {
      goto LABEL_21;
    }
    uint64_t v40 = (void *)v39;
    v50[3] = (id)__swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    v50[0] = v40;
    swift_dynamicCast();
    LODWORD(v40) = keyIsCompactRepresentable();

    if (v40) {
      break;
    }
    sub_1A8D8BD58(v35, v37);

    if (!--v23)
    {
      sub_1A8DDD884();
      swift_allocError();
      *(void *)uint64_t v41 = 3;
      *(unsigned char *)(v41 + 8) = 1;
LABEL_19:
      swift_willThrow();

      return (uint64_t)v12;
    }
  }
  id v42 = objc_msgSend(v12, sel_objectID);
  sub_1A8DE94C0();

  sub_1A8D8BE04(v35, v37);
  uint64_t v43 = sub_1A8DD7274(v35, v37);
  if (!v4)
  {
    *id v44 = v43;
    sub_1A8D8BD58(v35, v37);

    return (uint64_t)v12;
  }
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

void SecureEnclave.P384.KeyAgreement.PrivateKey.init(compactRepresentable:accessControl:authenticationContext:)(char a1@<W0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
}

void sub_1A8DDE908(char a1@<W0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  id v8 = (void *)sub_1A8DDE360(&v16, a1, (uint64_t)a2, a3);
  uint64_t v10 = v9;
  unint64_t v12 = v11;

  if (!v4)
  {
    uint64_t v13 = v16;
    id v14 = v8;
    sub_1A8D8BE04(v10, v12);
    sub_1A8D8BD58(v10, v12);
    id v15 = v14;
    sub_1A8D8BE04(v10, v12);

    sub_1A8D8BD58(v10, v12);
    *a4 = v13;
    a4[1] = v10;
    a4[2] = v12;
    a4[3] = (uint64_t)v15;
  }
}

ValueMetadata *type metadata accessor for SecureEnclave.P384()
{
  return &type metadata for SecureEnclave.P384;
}

ValueMetadata *type metadata accessor for SecureEnclave.P384.Signing()
{
  return &type metadata for SecureEnclave.P384.Signing;
}

ValueMetadata *type metadata accessor for SecureEnclave.P384.Signing.PrivateKey()
{
  return &type metadata for SecureEnclave.P384.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for SecureEnclave.P384.KeyAgreement()
{
  return &type metadata for SecureEnclave.P384.KeyAgreement;
}

ValueMetadata *type metadata accessor for SecureEnclave.P384.KeyAgreement.PrivateKey()
{
  return &type metadata for SecureEnclave.P384.KeyAgreement.PrivateKey;
}

uint64_t sub_1A8DDEA2C()
{
  return swift_release();
}

uint64_t SecureEnclave.Curve25519.KeyAgreement.PrivateKey.publicKey.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return sub_1A8DE97C0();
}

void SecureEnclave.Curve25519.KeyAgreement.PrivateKey.init(dataRepresentation:parameters:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
}

void SecureEnclave.Curve25519.Signing.PrivateKey.init(dataRepresentation:parameters:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
}

void sub_1A8DDEAA8(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t (*a5)(uint64_t, unint64_t)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11 = sub_1A8DDECE0(&v20, a1, a2, a4, a3, a5);
  if (v6)
  {

    sub_1A8D8BD58(a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v14 = (void *)v11;
    uint64_t v15 = v12;
    unint64_t v16 = v13;

    sub_1A8D8BD58(a1, a2);
    swift_bridgeObjectRelease();
    uint64_t v17 = v20;
    id v18 = v14;
    sub_1A8D8BE04(v15, v16);
    sub_1A8D8BD58(v15, v16);
    id v19 = v18;
    sub_1A8D8BE04(v15, v16);

    sub_1A8D8BD58(v15, v16);
    *a6 = v17;
    a6[1] = v15;
    a6[2] = v16;
    a6[3] = (uint64_t)v19;
  }
}

uint64_t sub_1A8DDEBB4(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_1A8DDECE0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, unint64_t))sub_1A8DCDF8C);
}

void SecureEnclave.Curve25519.Signing.PrivateKey.init(dataRepresentation:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
}

uint64_t SecureEnclave.Curve25519.KeyAgreement.PrivateKey.dataRepresentation.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_1A8D8BE04(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t sub_1A8DDEC7C(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_1A8DDECE0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, unint64_t))sub_1A8DCF00C);
}

uint64_t sub_1A8DDECE0(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5, uint64_t (*a6)(uint64_t, unint64_t))
{
  v33[1] = *(id *)MEMORY[0x1E4F143B8];
  if (qword_1E97A8BB8 != -1) {
    swift_once();
  }
  id v11 = (id)qword_1E97AD6E0;
  id v12 = (id)qword_1E97AD6E0;
  if (a5) {
    unint64_t v13 = a5;
  }
  else {
    unint64_t v13 = sub_1A8DB3054(MEMORY[0x1E4FBC860]);
  }
  sub_1A8DE97C0();
  sub_1A8DDDA84(v13);
  swift_bridgeObjectRelease();
  v33[0] = 0;
  id v14 = objc_allocWithZone(MEMORY[0x1E4F25240]);
  id v15 = a4;
  unint64_t v16 = (void *)sub_1A8DE9560();
  swift_bridgeObjectRelease();
  id v17 = objc_msgSend(v14, sel_initWithToken_LAContext_parameters_error_, v11, v15, v16, v33);

  if (v33[0])
  {
    id v18 = v33[0];
    swift_willThrow();

LABEL_8:
    return (uint64_t)v11;
  }
  uint64_t v20 = (void *)sub_1A8DE94A0();
  v33[0] = 0;
  id v11 = objc_msgSend(v17, sel_objectForObjectID_error_, v20, v33);

  if (!v11)
  {
    id v29 = v33[0];
    sub_1A8DE93B0();

    swift_willThrow();
    goto LABEL_8;
  }
  id v21 = v33[0];
  id v22 = objc_msgSend(v11, sel_publicKey);
  if (!v22)
  {
    sub_1A8DDD884();
    swift_allocError();
    *(void *)uint64_t v30 = 2;
    *(unsigned char *)(v30 + 8) = 1;
    swift_willThrow();

    id v17 = v11;
    goto LABEL_8;
  }
  uint64_t v23 = v22;
  uint64_t v24 = sub_1A8DE94C0();
  unint64_t v26 = v25;

  sub_1A8D8BE04(v24, v26);
  uint64_t v27 = a6(v24, v26);
  if (!v6)
  {
    uint64_t v28 = v27;
    sub_1A8D8BD58(v24, v26);

    *a1 = v28;
    sub_1A8D8BE04(a2, a3);
    return (uint64_t)v11;
  }
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

void SecureEnclave.Curve25519.KeyAgreement.PrivateKey.init(dataRepresentation:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
}

void sub_1A8DDF01C(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(uint64_t, unint64_t)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = sub_1A8DDECE0(&v19, a1, a2, a3, 0, a4);
  if (v5)
  {

    sub_1A8D8BD58(a1, a2);
  }
  else
  {
    unint64_t v13 = (void *)v10;
    uint64_t v14 = v11;
    unint64_t v15 = v12;

    sub_1A8D8BD58(a1, a2);
    uint64_t v16 = v19;
    id v17 = v13;
    sub_1A8D8BE04(v14, v15);
    sub_1A8D8BD58(v14, v15);
    id v18 = v17;
    sub_1A8D8BE04(v14, v15);

    sub_1A8D8BD58(v14, v15);
    *a5 = v16;
    a5[1] = v14;
    a5[2] = v15;
    a5[3] = (uint64_t)v18;
  }
}

ValueMetadata *type metadata accessor for SecureEnclave.Curve25519()
{
  return &type metadata for SecureEnclave.Curve25519;
}

ValueMetadata *type metadata accessor for SecureEnclave.Curve25519.Signing()
{
  return &type metadata for SecureEnclave.Curve25519.Signing;
}

ValueMetadata *type metadata accessor for SecureEnclave.Curve25519.Signing.PrivateKey()
{
  return &type metadata for SecureEnclave.Curve25519.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for SecureEnclave.Curve25519.KeyAgreement()
{
  return &type metadata for SecureEnclave.Curve25519.KeyAgreement;
}

ValueMetadata *type metadata accessor for SecureEnclave.Curve25519.KeyAgreement.PrivateKey()
{
  return &type metadata for SecureEnclave.Curve25519.KeyAgreement.PrivateKey;
}

uint64_t sub_1A8DDF170@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1A8DDF2CC(a1, MEMORY[0x1E4F14660], (uint64_t (*)(unint64_t, uint64_t, uint64_t, void *, unint64_t))sub_1A8D9C300, a2);
}

uint64_t sub_1A8DDF1E4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1A8DDF2CC(a1, MEMORY[0x1E4F14668], (uint64_t (*)(unint64_t, uint64_t, uint64_t, void *, unint64_t))sub_1A8D9C300, a2);
}

uint64_t sub_1A8DDF258@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1A8DDF2CC(a1, MEMORY[0x1E4F14670], (uint64_t (*)(unint64_t, uint64_t, uint64_t, void *, unint64_t))sub_1A8D9C300, a2);
}

uint64_t sub_1A8DDF2CC@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(unint64_t, uint64_t, uint64_t, void *, unint64_t)@<X2>, uint64_t *a4@<X8>)
{
  v16[5] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = *v4;
  uint64_t v10 = a2();
  if (!v10) {
LABEL_7:
  }
    __break(1u);
  uint64_t v11 = v10;
  unint64_t v12 = self;
  v16[4] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  v16[1] = v11;
  swift_dynamicCast();
  unint64_t v13 = (unint64_t)objc_msgSend(v12, sel_groupOrderByteCountForCP_, v16[0]);
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  unint64_t v14 = v13;
  swift_beginAccess();
  v16[0] = v14;
  uint64_t result = a3(v14, v9 + 32, v8 + 32, v16, v14);
  if (!v5) {
    *a4 = result;
  }
  return result;
}

uint64_t sub_1A8DDF400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void *, uint64_t *))
{
  v13[0] = a1;
  v13[1] = a2;
  uint64_t v13[2] = a3;
  v13[3] = a4;
  uint64_t result = a5();
  if (result)
  {
    uint64_t v8 = result;
    v12[7] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    void v12[4] = v8;
    swift_dynamicCast();
    uint64_t v9 = getccec_full_ctx_size();
    MEMORY[0x1F4188790](v9);
    long long v12[2] = v13;
    uint64_t v12[3] = v10;
    unint64_t v11 = sub_1A8D9C9CC(v10, a6, (uint64_t)v12);
    swift_unknownObjectRelease();
    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8DDF4E0(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v5 = *a3;
  if (!*a3)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = result;
  uint64_t result = a4();
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  uint64_t result = swift_dynamicCast();
  if (!v7)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  int v8 = ccec_raw_import_priv_only();
  int v14 = v8;
  if (v8)
  {
    int v9 = v8;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = v9;
    *(unsigned char *)(v10 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    int64_t v11 = ccec_der_export_priv_size();
    if (v11)
    {
      unint64_t v12 = (void *)sub_1A8D9CBEC(v11);
    }
    else
    {
      if (qword_1EB476778 != -1) {
        swift_once();
      }
      unint64_t v12 = off_1EB476770;
      swift_retain();
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      size_t v13 = sub_1A8DADA24((uint64_t)v12);
      swift_release();
      unint64_t v12 = (void *)v13;
    }
    swift_beginAccess();
    sub_1A8DDF69C((uint64_t)(v12 + 4), (uint64_t)v12 + v12[2] + 32, &v14, v5, a5);
    return swift_release();
  }
}

uint64_t sub_1A8DDF69C(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t (*a5)(void))
{
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  int v7 = ccec_der_export_priv();
  *a3 = v7;
  if (v7)
  {
    int v8 = v7;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = v8;
    goto LABEL_7;
  }
  uint64_t result = a5();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  swift_dynamicCast();
  uint64_t result = ccec_der_import_priv();
  *a3 = result;
  if (!result) {
    return result;
  }
  int v10 = result;
  sub_1A8D8E240();
  swift_allocError();
  *(_DWORD *)uint64_t v9 = v10;
LABEL_7:
  *(unsigned char *)(v9 + 4) = 0;
  return swift_willThrow();
}

int64_t sub_1A8DDF7E0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = (const void *)ccec_ctx_k((void **)(a1 + 32));
  int64_t result = a2();
  if (result)
  {
    uint64_t v5 = self;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    swift_dynamicCast();
    int64_t result = (int64_t)objc_msgSend(v5, sel_groupOrderByteCountForCP_, v9);
    if ((result & 0x8000000000000000) == 0)
    {
      size_t v6 = sub_1A8DDF990(v3, result);
      size_t v7 = sub_1A8DAD938(v6);
      swift_bridgeObjectRelease();
      uint64_t v8 = sub_1A8D9BD98(v7);
      swift_release();
      return v8;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DDF8D0(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t result = sub_1A8DC9E10(a1, a2, a3);
  uint64_t v4 = result;
  unint64_t v5 = *(void *)(result + 16);
  if (v5 < 2) {
    return v4;
  }
  unint64_t v6 = 0;
  unint64_t v7 = v5 >> 1;
  for (unint64_t i = v5 + 3; ; --i)
  {
    if (v6 == i - 4) {
      goto LABEL_5;
    }
    unint64_t v9 = *(void *)(v4 + 16);
    if (v6 >= v9) {
      break;
    }
    if (i - 4 >= v9) {
      goto LABEL_12;
    }
    uint64_t v10 = *(void *)(v4 + 8 * v6 + 32);
    uint64_t v11 = *(void *)(v4 + 8 * i);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1A8DAF564(v4);
      uint64_t v4 = result;
    }
    *(void *)(v4 + 8 * v6 + 32) = v11;
    *(void *)(v4 + 8 * i) = v10;
LABEL_5:
    if (v7 == ++v6) {
      return v4;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1A8DDF990(const void *a1, int64_t a2)
{
  uint64_t result = (uint64_t)sub_1A8D9BA84(a1, a2);
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(result + 16);
  if (v4 < 2) {
    return v3;
  }
  unint64_t v5 = 0;
  unint64_t v6 = v4 >> 1;
  for (unint64_t i = v4 + 31; ; --i)
  {
    if (v5 == i - 32) {
      goto LABEL_5;
    }
    unint64_t v8 = *(void *)(v3 + 16);
    if (v5 >= v8) {
      break;
    }
    if (i - 32 >= v8) {
      goto LABEL_12;
    }
    char v9 = *(unsigned char *)(v3 + v5 + 32);
    char v10 = *(unsigned char *)(v3 + i);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1A8DAF578(v3);
      uint64_t v3 = result;
    }
    *(unsigned char *)(v3 + v5 + 32) = v10;
    *(unsigned char *)(v3 + i) = v9;
LABEL_5:
    if (v6 == ++v5) {
      return v3;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1A8DDFA50(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  sub_1A8DE97C0();
  unint64_t v4 = ccec_export_pub_size();
  uint64_t v5 = sub_1A8DE97D0();
  *(void *)(v5 + 16) = v4;
  ccec_export_pub();
  *(void *)(v5 + 16) = v4;
  uint64_t v6 = sub_1A8D93118(v5);
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  char v9 = (void *)sub_1A8DE94A0();
  uint64_t v10 = sub_1A8D8BD58(v6, v8);
  uint64_t result = a2(v10);
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    swift_dynamicCast();
    int IsCompactRepresentable = keyIsCompactRepresentable();

    if (IsCompactRepresentable)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1A8DAF578(a1);
      }
      unint64_t v13 = ccec_compact_export_size();
      if (v13)
      {
        uint64_t v14 = sub_1A8DE97D0();
        *(void *)(v14 + 16) = v13;
      }
      else
      {
        uint64_t v14 = MEMORY[0x1E4FBC860];
      }
      ccec_compact_export_pub();
      *(void *)(v14 + 16) = v13;
      uint64_t v15 = sub_1A8D93118(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A8DDFBF8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    swift_dynamicCast();
    uint64_t result = ccec_compressed_x962_export_pub_size();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = result;
      if (result)
      {
        uint64_t v4 = sub_1A8DE97D0();
        *(void *)(v4 + 16) = v3;
      }
      else
      {
        uint64_t v4 = MEMORY[0x1E4FBC860];
      }
      uint64_t result = ccec_compressed_x962_export_pub();
      if (!result)
      {
        *(void *)(v4 + 16) = v3;
        uint64_t v5 = sub_1A8D93118(v4);
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DDFCE8()
{
  unint64_t v0 = ccec_export_pub_size();
  uint64_t v1 = sub_1A8DE97D0();
  *(void *)(v1 + 16) = v0;
  ccec_export_pub();
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = sub_1A8D93118(v1);
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v2 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 24);
      goto LABEL_5;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(v4);
LABEL_5:
      if (v5 < 1)
      {
LABEL_7:
        __break(1u);
        JUMPOUT(0x1A8DDFDC8);
      }
      uint64_t v6 = sub_1A8DE9470();
      sub_1A8D8BD58(v2, v4);
      return v6;
  }
}

uint64_t P256.KeyAgreement.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_1A8DE2C6C(a1, MEMORY[0x1E4F14660], (uint64_t (*)(uint64_t, void, uint64_t))sub_1A8D9C15C, a2);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3328(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A8DE45B8, (uint64_t)&type metadata for P256, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8D9FD5C, a4);
}

uint64_t P384.KeyAgreement.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_1A8DE2C6C(a1, MEMORY[0x1E4F14668], (uint64_t (*)(uint64_t, void, uint64_t))sub_1A8D9C188, a2);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3328(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A8DE460C, (uint64_t)&type metadata for P384, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8D9FD5C, a4);
}

uint64_t P521.KeyAgreement.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_1A8DE2C6C(a1, MEMORY[0x1E4F14670], (uint64_t (*)(uint64_t, void, uint64_t))sub_1A8D9C1B4, a2);
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3328(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A8DE4660, (uint64_t)&type metadata for P521, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8D9FD5C, a4);
}

uint64_t P256.Signing.PublicKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3328(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A8DE45B8, (uint64_t)&type metadata for P256, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8D9FD5C, a4);
}

uint64_t P384.Signing.PublicKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3328(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A8DE460C, (uint64_t)&type metadata for P384, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8D9FD5C, a4);
}

uint64_t P521.Signing.PublicKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3328(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A8DE4660, (uint64_t)&type metadata for P521, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8D9FD5C, a4);
}

uint64_t P256.Signing.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3224(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE45B8, (uint64_t)&type metadata for P256, sub_1A8DA08A4, a4);
}

uint64_t P256.Signing.PublicKey.init<A>(compactRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3224(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE45B8, (uint64_t)&type metadata for P256, sub_1A8DA07AC, a4);
}

uint64_t P256.Signing.PublicKey.init<A>(compressedRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3328(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A8DE45B8, (uint64_t)&type metadata for P256, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA0070, a4);
}

uint64_t P256.Signing.PublicKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE3498(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A8DD77E4, a3);
}

uint64_t P256.Signing.PublicKey.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE36A0(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A8DD77E4, a3);
}

uint64_t P256.Signing.PublicKey.derRepresentation.getter()
{
  if (qword_1E97A8B58 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1E97AD6B8;
  uint64_t v1 = unk_1E97AD6C0;
  long long v12 = xmmword_1E97AD6C8;
  uint64_t v2 = qword_1E97AD6D8;
  swift_unknownObjectRetain();
  sub_1A8DE97C0();
  sub_1A8DE97C0();
  unint64_t v3 = ccec_export_pub_size();
  uint64_t v4 = sub_1A8DE97D0();
  *(void *)(v4 + 16) = v3;
  ccec_export_pub();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = sub_1A8D93118(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v8 = sub_1A8DCCEB8(v5, v7);
  sub_1A8D8BD58(v5, v7);
  uint64_t v9 = (2 * v8[2]) | 1;
  v14[0] = v0;
  v14[1] = v1;
  long long v15 = v12;
  uint64_t v16 = v2;
  id v17 = v8;
  id v18 = v8 + 4;
  uint64_t v19 = 0;
  uint64_t v20 = v9;
  unint64_t v13 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  sub_1A8DE97C0();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A8DCB5B4(48, &v13, (char *)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_1A8D93118((uint64_t)v13);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t P256.Signing.PublicKey.pemRepresentation.getter()
{
  return sub_1A8DE0BCC(P256.Signing.PublicKey.derRepresentation.getter);
}

uint64_t P256.Signing.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_1A8DE2C6C(a1, MEMORY[0x1E4F14660], (uint64_t (*)(uint64_t, void, uint64_t))sub_1A8D9C15C, a2);
}

uint64_t P256.Signing.PrivateKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3B64(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE45B8, (uint64_t)&type metadata for P256, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA04C0, a4);
}

uint64_t P256.Signing.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3B64(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE45B8, (uint64_t)&type metadata for P256, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA04EC, a4);
}

uint64_t P256.Signing.PrivateKey.init(seed:compactRepresentable:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE0D30(a1, a2, a3, MEMORY[0x1E4F14660], (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_1A8D9BF90, a4);
}

uint64_t P256.Signing.PrivateKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE0DCC(a1, a2, MEMORY[0x1E4F14660], (uint64_t (*)(void *, uint64_t *))sub_1A8DE4BB0, a3);
}

void P256.Signing.PrivateKey.init<A>(derRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t P256.Signing.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DE3CF8(MEMORY[0x1E4F14660], a1);
}

uint64_t P256.Signing.PrivateKey.derRepresentation.getter()
{
  uint64_t v1 = *v0;
  if (qword_1E97A8B58 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E97AD6B8;
  uint64_t v3 = unk_1E97AD6C0;
  long long v4 = xmmword_1E97AD6C8;
  uint64_t v5 = qword_1E97AD6D8;
  swift_unknownObjectRetain();
  swift_retain();
  sub_1A8DE97C0();
  int64_t v6 = sub_1A8DDF7E0(v1, MEMORY[0x1E4F14660]);
  unint64_t v8 = v7;
  swift_release();
  uint64_t v9 = sub_1A8DCCEB8(v6, v8);
  uint64_t v10 = sub_1A8D8BD58(v6, v8);
  uint64_t v11 = MEMORY[0x1AD0E7C50](v10);
  if (!v11) {
    goto LABEL_10;
  }
  uint64_t v12 = v11;
  *((void *)&v35 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  *(void *)&long long v34 = v12;
  swift_retain();
  swift_dynamicCast();
  uint64_t v13 = getccec_pub_ctx_size();
  if (v13 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  size_t v14 = v13;
  if (v13)
  {
    uint64_t v15 = sub_1A8DE97D0();
    *(void *)(v15 + 16) = v14;
  }
  else
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
  }
  memcpy((void *)(v15 + 32), (const void *)(v1 + 32), v14);
  *(void *)(v15 + 16) = v14;
  swift_release();
  unint64_t v16 = ccec_export_pub_size();
  uint64_t v17 = sub_1A8DE97D0();
  *(void *)(v17 + 16) = v16;
  ccec_export_pub();
  *(void *)(v17 + 16) = v16;
  uint64_t v18 = sub_1A8D93118(v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v21 = sub_1A8DCCEB8(v18, v20);
  sub_1A8D8BD58(v18, v20);
  uint64_t v22 = v21[2];
  uint64_t v23 = (2 * v9[2]) | 1;
  *(void *)&v27[0] = v2;
  *((void *)&v27[0] + 1) = v3;
  v27[1] = v4;
  *(void *)uint64_t v28 = v5;
  memset(&v28[8], 0, 32);
  uint64_t v29 = 0;
  *(void *)&long long v30 = v9;
  *((void *)&v30 + 1) = v9 + 4;
  *(void *)&long long v31 = 0;
  *((void *)&v31 + 1) = v23;
  *(void *)&long long v32 = v21;
  *((void *)&v32 + 1) = v21 + 4;
  *(void *)&long long v33 = 0;
  *((void *)&v33 + 1) = (2 * v22) | 1;
  long long v36 = *(_OWORD *)v28;
  long long v37 = *(_OWORD *)&v28[16];
  long long v34 = v27[0];
  long long v35 = v4;
  long long v41 = v32;
  long long v42 = v33;
  long long v39 = v30;
  long long v40 = v31;
  long long v38 = 0uLL;
  unint64_t v26 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  sub_1A8DE4910((uint64_t)v27);
  sub_1A8DCB95C(48, &v26, (char *)&v34);
  sub_1A8DBA724((uint64_t)v27);
  uint64_t v24 = sub_1A8D93118((uint64_t)v26);
  swift_bridgeObjectRelease();
  sub_1A8DBA724((uint64_t)v27);
  return v24;
}

uint64_t P256.Signing.PrivateKey.pemRepresentation.getter()
{
  return sub_1A8DE1794(P256.Signing.PrivateKey.derRepresentation.getter);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3224(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE45B8, (uint64_t)&type metadata for P256, sub_1A8DA08A4, a4);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(compactRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3224(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE45B8, (uint64_t)&type metadata for P256, sub_1A8DA07AC, a4);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(compressedRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3328(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A8DE45B8, (uint64_t)&type metadata for P256, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA0070, a4);
}

uint64_t P256.KeyAgreement.PublicKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE3498(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A8DD77E4, a3);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE36A0(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A8DD77E4, a3);
}

uint64_t P256.KeyAgreement.PublicKey.compactRepresentation.getter()
{
  return sub_1A8DDFA50(*v0, MEMORY[0x1E4F14660]);
}

uint64_t P256.KeyAgreement.PublicKey.rawRepresentation.getter()
{
  return sub_1A8DDFCE8();
}

uint64_t P256.KeyAgreement.PublicKey.compressedRepresentation.getter()
{
  return sub_1A8DDFBF8(*v0, MEMORY[0x1E4F14660]);
}

uint64_t P256.KeyAgreement.PublicKey.derRepresentation.getter()
{
  if (qword_1E97A8B58 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1E97AD6B8;
  uint64_t v1 = unk_1E97AD6C0;
  long long v12 = xmmword_1E97AD6C8;
  uint64_t v2 = qword_1E97AD6D8;
  swift_unknownObjectRetain();
  sub_1A8DE97C0();
  sub_1A8DE97C0();
  unint64_t v3 = ccec_export_pub_size();
  uint64_t v4 = sub_1A8DE97D0();
  *(void *)(v4 + 16) = v3;
  ccec_export_pub();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = sub_1A8D93118(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v8 = sub_1A8DCCEB8(v5, v7);
  sub_1A8D8BD58(v5, v7);
  uint64_t v9 = (2 * v8[2]) | 1;
  v14[0] = v0;
  v14[1] = v1;
  long long v15 = v12;
  uint64_t v16 = v2;
  uint64_t v17 = v8;
  uint64_t v18 = v8 + 4;
  uint64_t v19 = 0;
  uint64_t v20 = v9;
  uint64_t v13 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  sub_1A8DE97C0();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A8DCB5B4(48, &v13, (char *)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_1A8D93118((uint64_t)v13);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t P256.KeyAgreement.PublicKey.pemRepresentation.getter()
{
  return sub_1A8DE0BCC(P256.KeyAgreement.PublicKey.derRepresentation.getter);
}

uint64_t sub_1A8DE0BCC(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  unint64_t v3 = v2;
  uint64_t v4 = sub_1A8D9CED8(0x4B2043494C425550uLL);
  swift_bridgeObjectRelease();
  sub_1A8D8BD58(v1, v3);
  return v4;
}

uint64_t P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3B64(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE45B8, (uint64_t)&type metadata for P256, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA04C0, a4);
}

uint64_t P256.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3B64(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE45B8, (uint64_t)&type metadata for P256, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA04EC, a4);
}

uint64_t P256.KeyAgreement.PrivateKey.init(seed:compactRepresentable:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE0D30(a1, a2, a3, MEMORY[0x1E4F14660], (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_1A8D9BF90, a4);
}

uint64_t sub_1A8DE0D30@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10 = sub_1A8DE46B4(a1, a2, a3, a4, a5);
  uint64_t result = sub_1A8D8BD58(a1, a2);
  if (!v6) {
    *a6 = v10;
  }
  return result;
}

uint64_t P256.KeyAgreement.PrivateKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE0DCC(a1, a2, MEMORY[0x1E4F14660], (uint64_t (*)(void *, uint64_t *))sub_1A8DE4BB0, a3);
}

uint64_t sub_1A8DE0DCC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void *, uint64_t *)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = sub_1A8D9DB04(a1, a2);
  if (!v5)
  {
    uint64_t v13 = result;
    uint64_t v14 = v10;
    uint64_t v15 = v11;
    unint64_t v16 = v12;
    if (result == 0x4156495250204345 && v10 == 0xEE0059454B204554 || (sub_1A8DE9B40() & 1) != 0)
    {
      sub_1A8D8BE04(v15, v16);
      uint64_t v17 = sub_1A8DCCEB8(v15, v16);
      sub_1A8D8BD58(v15, v16);
      sub_1A8DCAA70((uint64_t)v17, (uint64_t)(v17 + 4), 0, (2 * v17[2]) | 1, (uint64_t)v30);
      swift_release();
      sub_1A8DD074C(v30, 0x30u, (uint64_t)v31);
      uint64_t v18 = v31[6];
      uint64_t v19 = v31[7];
      uint64_t v20 = v31[8];
      uint64_t v21 = swift_unknownObjectRetain();
      uint64_t v28 = sub_1A8DDF400(v21, v18, v19, v20, a3, a4);
      swift_bridgeObjectRelease();
      sub_1A8D8BD58(v15, v16);
      uint64_t result = (uint64_t)sub_1A8DBA670(v31);
      *a5 = v28;
    }
    else if (v13 == 0x2045544156495250 && v14 == 0xEB0000000059454BLL || (sub_1A8DE9B40() & 1) != 0)
    {
      sub_1A8D8BE04(v15, v16);
      uint64_t v22 = sub_1A8DCCEB8(v15, v16);
      sub_1A8D8BD58(v15, v16);
      sub_1A8DCAA70((uint64_t)v22, (uint64_t)(v22 + 4), 0, (2 * v22[2]) | 1, (uint64_t)v32);
      swift_release();
      sub_1A8DBA39C(v32, 0x30u, v33);
      uint64_t v23 = v34;
      uint64_t v24 = v35;
      uint64_t v25 = v36;
      uint64_t v26 = swift_unknownObjectRetain();
      uint64_t v29 = sub_1A8DDF400(v26, v23, v24, v25, a3, a4);
      swift_bridgeObjectRelease();
      sub_1A8D8BD58(v15, v16);
      uint64_t result = sub_1A8DBA724((uint64_t)v33);
      *a5 = v29;
    }
    else
    {
      sub_1A8D8EC14();
      swift_allocError();
      *uint64_t v27 = 7;
      swift_willThrow();
      swift_bridgeObjectRelease();
      return sub_1A8D8BD58(v15, v16);
    }
  }
  return result;
}

void P256.KeyAgreement.PrivateKey.init<A>(derRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

void sub_1A8DE1174(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X3>, uint64_t (*a4)(void *, uint64_t *)@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v27 = a3;
  uint64_t v6 = v5;
  uint64_t v10 = *(void *)(a2 - 8);
  double v11 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v11);
  uint64_t v13 = sub_1A8DE97E0();
  unint64_t v14 = (2 * *(void *)(v13 + 16)) | 1;
  sub_1A8DCAA70(v13, v13 + 32, 0, v14, (uint64_t)v28);
  uint64_t v26 = a5;
  if (v5)
  {
    sub_1A8DCAA70(v13, v13 + 32, 0, v14, (uint64_t)v33);
    swift_bridgeObjectRelease();
    sub_1A8DD074C(v33, 0x30u, (uint64_t)v34);
    uint64_t v18 = v34[6];
    uint64_t v19 = v34[7];
    uint64_t v20 = v34[8];
    uint64_t v21 = swift_unknownObjectRetain();
    uint64_t v22 = sub_1A8DDF400(v21, v18, v19, v20, v27, v35);

    sub_1A8DBA670(v34);
    uint64_t v23 = v22;
  }
  else
  {
    sub_1A8DBA39C(v28, 0x30u, v29);
    uint64_t v15 = v30;
    uint64_t v16 = v31;
    uint64_t v25 = v32;
    uint64_t v17 = swift_unknownObjectRetain();
    uint64_t v23 = sub_1A8DDF400(v17, v15, v16, v25, v27, v35);
    swift_bridgeObjectRelease();
    sub_1A8DBA724((uint64_t)v29);
  }
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a2);
  *uint64_t v26 = v23;
}

uint64_t P256.KeyAgreement.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DE3CF8(MEMORY[0x1E4F14660], a1);
}

int64_t P256.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  return sub_1A8DDF7E0(*v0, MEMORY[0x1E4F14660]);
}

uint64_t P256.KeyAgreement.PrivateKey.derRepresentation.getter()
{
  uint64_t v1 = *v0;
  if (qword_1E97A8B58 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E97AD6B8;
  uint64_t v3 = unk_1E97AD6C0;
  long long v4 = xmmword_1E97AD6C8;
  uint64_t v5 = qword_1E97AD6D8;
  swift_unknownObjectRetain();
  swift_retain();
  sub_1A8DE97C0();
  int64_t v6 = sub_1A8DDF7E0(v1, MEMORY[0x1E4F14660]);
  unint64_t v8 = v7;
  swift_release();
  uint64_t v9 = sub_1A8DCCEB8(v6, v8);
  uint64_t v10 = sub_1A8D8BD58(v6, v8);
  uint64_t v11 = MEMORY[0x1AD0E7C50](v10);
  if (!v11) {
    goto LABEL_10;
  }
  uint64_t v12 = v11;
  *((void *)&v35 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  *(void *)&long long v34 = v12;
  swift_retain();
  swift_dynamicCast();
  uint64_t v13 = getccec_pub_ctx_size();
  if (v13 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  size_t v14 = v13;
  if (v13)
  {
    uint64_t v15 = sub_1A8DE97D0();
    *(void *)(v15 + 16) = v14;
  }
  else
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
  }
  memcpy((void *)(v15 + 32), (const void *)(v1 + 32), v14);
  *(void *)(v15 + 16) = v14;
  swift_release();
  unint64_t v16 = ccec_export_pub_size();
  uint64_t v17 = sub_1A8DE97D0();
  *(void *)(v17 + 16) = v16;
  ccec_export_pub();
  *(void *)(v17 + 16) = v16;
  uint64_t v18 = sub_1A8D93118(v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = sub_1A8DCCEB8(v18, v20);
  sub_1A8D8BD58(v18, v20);
  uint64_t v22 = v21[2];
  uint64_t v23 = (2 * v9[2]) | 1;
  *(void *)&v27[0] = v2;
  *((void *)&v27[0] + 1) = v3;
  v27[1] = v4;
  *(void *)uint64_t v28 = v5;
  memset(&v28[8], 0, 32);
  uint64_t v29 = 0;
  *(void *)&long long v30 = v9;
  *((void *)&v30 + 1) = v9 + 4;
  *(void *)&long long v31 = 0;
  *((void *)&v31 + 1) = v23;
  *(void *)&long long v32 = v21;
  *((void *)&v32 + 1) = v21 + 4;
  *(void *)&long long v33 = 0;
  *((void *)&v33 + 1) = (2 * v22) | 1;
  long long v36 = *(_OWORD *)v28;
  long long v37 = *(_OWORD *)&v28[16];
  long long v34 = v27[0];
  long long v35 = v4;
  long long v41 = v32;
  long long v42 = v33;
  long long v39 = v30;
  long long v40 = v31;
  long long v38 = 0uLL;
  uint64_t v26 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  sub_1A8DE4910((uint64_t)v27);
  sub_1A8DCB95C(48, &v26, (char *)&v34);
  sub_1A8DBA724((uint64_t)v27);
  uint64_t v24 = sub_1A8D93118((uint64_t)v26);
  swift_bridgeObjectRelease();
  sub_1A8DBA724((uint64_t)v27);
  return v24;
}

uint64_t P256.KeyAgreement.PrivateKey.pemRepresentation.getter()
{
  return sub_1A8DE1794(P256.KeyAgreement.PrivateKey.derRepresentation.getter);
}

uint64_t sub_1A8DE1794(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  unint64_t v3 = v2;
  uint64_t v4 = sub_1A8D9CED8(0x2045544156495250uLL);
  swift_bridgeObjectRelease();
  sub_1A8D8BD58(v1, v3);
  return v4;
}

uint64_t P384.Signing.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3224(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE460C, (uint64_t)&type metadata for P384, sub_1A8DA08A4, a4);
}

uint64_t P384.Signing.PublicKey.init<A>(compactRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3224(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE460C, (uint64_t)&type metadata for P384, sub_1A8DA07AC, a4);
}

uint64_t P384.Signing.PublicKey.init<A>(compressedRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3328(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A8DE460C, (uint64_t)&type metadata for P384, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA0070, a4);
}

uint64_t P384.Signing.PublicKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE3498(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A8DD7838, a3);
}

uint64_t P384.Signing.PublicKey.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE36A0(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A8DD7838, a3);
}

uint64_t P384.Signing.PublicKey.derRepresentation.getter()
{
  if (qword_1E97A8C30 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1E97AD6F0;
  uint64_t v1 = *(void *)algn_1E97AD6F8;
  long long v12 = xmmword_1E97AD700;
  uint64_t v2 = qword_1E97AD710;
  swift_unknownObjectRetain();
  sub_1A8DE97C0();
  sub_1A8DE97C0();
  unint64_t v3 = ccec_export_pub_size();
  uint64_t v4 = sub_1A8DE97D0();
  *(void *)(v4 + 16) = v3;
  ccec_export_pub();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = sub_1A8D93118(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v8 = sub_1A8DCCEB8(v5, v7);
  sub_1A8D8BD58(v5, v7);
  uint64_t v9 = (2 * v8[2]) | 1;
  v14[0] = v0;
  v14[1] = v1;
  long long v15 = v12;
  uint64_t v16 = v2;
  uint64_t v17 = v8;
  uint64_t v18 = v8 + 4;
  uint64_t v19 = 0;
  uint64_t v20 = v9;
  uint64_t v13 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  sub_1A8DE97C0();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A8DCB5B4(48, &v13, (char *)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_1A8D93118((uint64_t)v13);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t P384.Signing.PublicKey.pemRepresentation.getter()
{
  return sub_1A8DE0BCC(P384.Signing.PublicKey.derRepresentation.getter);
}

uint64_t P384.Signing.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_1A8DE2C6C(a1, MEMORY[0x1E4F14668], (uint64_t (*)(uint64_t, void, uint64_t))sub_1A8D9C188, a2);
}

uint64_t P384.Signing.PrivateKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3B64(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE460C, (uint64_t)&type metadata for P384, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA04C0, a4);
}

uint64_t P384.Signing.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3B64(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE460C, (uint64_t)&type metadata for P384, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA04EC, a4);
}

uint64_t P384.Signing.PrivateKey.init(seed:compactRepresentable:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE0D30(a1, a2, a3, MEMORY[0x1E4F14668], (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_1A8D9BFBC, a4);
}

uint64_t P384.Signing.PrivateKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE0DCC(a1, a2, MEMORY[0x1E4F14668], (uint64_t (*)(void *, uint64_t *))sub_1A8DE4B6C, a3);
}

void P384.Signing.PrivateKey.init<A>(derRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t P384.Signing.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DE3CF8(MEMORY[0x1E4F14668], a1);
}

uint64_t P384.Signing.PrivateKey.derRepresentation.getter()
{
  uint64_t v1 = *v0;
  if (qword_1E97A8C30 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E97AD6F0;
  uint64_t v3 = *(void *)algn_1E97AD6F8;
  long long v4 = xmmword_1E97AD700;
  uint64_t v5 = qword_1E97AD710;
  swift_unknownObjectRetain();
  swift_retain();
  sub_1A8DE97C0();
  int64_t v6 = sub_1A8DDF7E0(v1, MEMORY[0x1E4F14668]);
  unint64_t v8 = v7;
  swift_release();
  uint64_t v9 = sub_1A8DCCEB8(v6, v8);
  uint64_t v10 = sub_1A8D8BD58(v6, v8);
  uint64_t v11 = MEMORY[0x1AD0E7C60](v10);
  if (!v11) {
    goto LABEL_10;
  }
  uint64_t v12 = v11;
  *((void *)&v35 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  *(void *)&long long v34 = v12;
  swift_retain();
  swift_dynamicCast();
  uint64_t v13 = getccec_pub_ctx_size();
  if (v13 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  size_t v14 = v13;
  if (v13)
  {
    uint64_t v15 = sub_1A8DE97D0();
    *(void *)(v15 + 16) = v14;
  }
  else
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
  }
  memcpy((void *)(v15 + 32), (const void *)(v1 + 32), v14);
  *(void *)(v15 + 16) = v14;
  swift_release();
  unint64_t v16 = ccec_export_pub_size();
  uint64_t v17 = sub_1A8DE97D0();
  *(void *)(v17 + 16) = v16;
  ccec_export_pub();
  *(void *)(v17 + 16) = v16;
  uint64_t v18 = sub_1A8D93118(v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = sub_1A8DCCEB8(v18, v20);
  sub_1A8D8BD58(v18, v20);
  uint64_t v22 = v21[2];
  uint64_t v23 = (2 * v9[2]) | 1;
  *(void *)&v27[0] = v2;
  *((void *)&v27[0] + 1) = v3;
  v27[1] = v4;
  *(void *)uint64_t v28 = v5;
  memset(&v28[8], 0, 32);
  uint64_t v29 = 0;
  *(void *)&long long v30 = v9;
  *((void *)&v30 + 1) = v9 + 4;
  *(void *)&long long v31 = 0;
  *((void *)&v31 + 1) = v23;
  *(void *)&long long v32 = v21;
  *((void *)&v32 + 1) = v21 + 4;
  *(void *)&long long v33 = 0;
  *((void *)&v33 + 1) = (2 * v22) | 1;
  long long v36 = *(_OWORD *)v28;
  long long v37 = *(_OWORD *)&v28[16];
  long long v34 = v27[0];
  long long v35 = v4;
  long long v41 = v32;
  long long v42 = v33;
  long long v39 = v30;
  long long v40 = v31;
  long long v38 = 0uLL;
  uint64_t v26 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  sub_1A8DE4910((uint64_t)v27);
  sub_1A8DCB95C(48, &v26, (char *)&v34);
  sub_1A8DBA724((uint64_t)v27);
  uint64_t v24 = sub_1A8D93118((uint64_t)v26);
  swift_bridgeObjectRelease();
  sub_1A8DBA724((uint64_t)v27);
  return v24;
}

uint64_t P384.Signing.PrivateKey.pemRepresentation.getter()
{
  return sub_1A8DE1794(P384.Signing.PrivateKey.derRepresentation.getter);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3224(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE460C, (uint64_t)&type metadata for P384, sub_1A8DA08A4, a4);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(compactRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3224(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE460C, (uint64_t)&type metadata for P384, sub_1A8DA07AC, a4);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(compressedRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3328(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A8DE460C, (uint64_t)&type metadata for P384, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA0070, a4);
}

uint64_t P384.KeyAgreement.PublicKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE3498(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A8DD7838, a3);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE36A0(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A8DD7838, a3);
}

uint64_t P384.KeyAgreement.PublicKey.compactRepresentation.getter()
{
  return sub_1A8DDFA50(*v0, MEMORY[0x1E4F14668]);
}

uint64_t P384.KeyAgreement.PublicKey.compressedRepresentation.getter()
{
  return sub_1A8DDFBF8(*v0, MEMORY[0x1E4F14668]);
}

uint64_t P384.KeyAgreement.PublicKey.derRepresentation.getter()
{
  if (qword_1E97A8C30 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1E97AD6F0;
  uint64_t v1 = *(void *)algn_1E97AD6F8;
  long long v12 = xmmword_1E97AD700;
  uint64_t v2 = qword_1E97AD710;
  swift_unknownObjectRetain();
  sub_1A8DE97C0();
  sub_1A8DE97C0();
  unint64_t v3 = ccec_export_pub_size();
  uint64_t v4 = sub_1A8DE97D0();
  *(void *)(v4 + 16) = v3;
  ccec_export_pub();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = sub_1A8D93118(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v8 = sub_1A8DCCEB8(v5, v7);
  sub_1A8D8BD58(v5, v7);
  uint64_t v9 = (2 * v8[2]) | 1;
  v14[0] = v0;
  v14[1] = v1;
  long long v15 = v12;
  uint64_t v16 = v2;
  uint64_t v17 = v8;
  uint64_t v18 = v8 + 4;
  uint64_t v19 = 0;
  uint64_t v20 = v9;
  uint64_t v13 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  sub_1A8DE97C0();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A8DCB5B4(48, &v13, (char *)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_1A8D93118((uint64_t)v13);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t P384.KeyAgreement.PublicKey.pemRepresentation.getter()
{
  return sub_1A8DE0BCC(P384.KeyAgreement.PublicKey.derRepresentation.getter);
}

uint64_t P384.KeyAgreement.PrivateKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3B64(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE460C, (uint64_t)&type metadata for P384, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA04C0, a4);
}

uint64_t P384.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3B64(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE460C, (uint64_t)&type metadata for P384, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA04EC, a4);
}

uint64_t P384.KeyAgreement.PrivateKey.init(seed:compactRepresentable:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE0D30(a1, a2, a3, MEMORY[0x1E4F14668], (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_1A8D9BFBC, a4);
}

uint64_t P384.KeyAgreement.PrivateKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE0DCC(a1, a2, MEMORY[0x1E4F14668], (uint64_t (*)(void *, uint64_t *))sub_1A8DE4B6C, a3);
}

void P384.KeyAgreement.PrivateKey.init<A>(derRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t P384.KeyAgreement.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DE3CF8(MEMORY[0x1E4F14668], a1);
}

int64_t P384.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  return sub_1A8DDF7E0(*v0, MEMORY[0x1E4F14668]);
}

uint64_t P384.KeyAgreement.PrivateKey.derRepresentation.getter()
{
  uint64_t v1 = *v0;
  if (qword_1E97A8C30 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E97AD6F0;
  uint64_t v3 = *(void *)algn_1E97AD6F8;
  long long v4 = xmmword_1E97AD700;
  uint64_t v5 = qword_1E97AD710;
  swift_unknownObjectRetain();
  swift_retain();
  sub_1A8DE97C0();
  int64_t v6 = sub_1A8DDF7E0(v1, MEMORY[0x1E4F14668]);
  unint64_t v8 = v7;
  swift_release();
  uint64_t v9 = sub_1A8DCCEB8(v6, v8);
  uint64_t v10 = sub_1A8D8BD58(v6, v8);
  uint64_t v11 = MEMORY[0x1AD0E7C60](v10);
  if (!v11) {
    goto LABEL_10;
  }
  uint64_t v12 = v11;
  *((void *)&v35 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  *(void *)&long long v34 = v12;
  swift_retain();
  swift_dynamicCast();
  uint64_t v13 = getccec_pub_ctx_size();
  if (v13 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  size_t v14 = v13;
  if (v13)
  {
    uint64_t v15 = sub_1A8DE97D0();
    *(void *)(v15 + 16) = v14;
  }
  else
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
  }
  memcpy((void *)(v15 + 32), (const void *)(v1 + 32), v14);
  *(void *)(v15 + 16) = v14;
  swift_release();
  unint64_t v16 = ccec_export_pub_size();
  uint64_t v17 = sub_1A8DE97D0();
  *(void *)(v17 + 16) = v16;
  ccec_export_pub();
  *(void *)(v17 + 16) = v16;
  uint64_t v18 = sub_1A8D93118(v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = sub_1A8DCCEB8(v18, v20);
  sub_1A8D8BD58(v18, v20);
  uint64_t v22 = v21[2];
  uint64_t v23 = (2 * v9[2]) | 1;
  *(void *)&v27[0] = v2;
  *((void *)&v27[0] + 1) = v3;
  v27[1] = v4;
  *(void *)uint64_t v28 = v5;
  memset(&v28[8], 0, 32);
  uint64_t v29 = 0;
  *(void *)&long long v30 = v9;
  *((void *)&v30 + 1) = v9 + 4;
  *(void *)&long long v31 = 0;
  *((void *)&v31 + 1) = v23;
  *(void *)&long long v32 = v21;
  *((void *)&v32 + 1) = v21 + 4;
  *(void *)&long long v33 = 0;
  *((void *)&v33 + 1) = (2 * v22) | 1;
  long long v36 = *(_OWORD *)v28;
  long long v37 = *(_OWORD *)&v28[16];
  long long v34 = v27[0];
  long long v35 = v4;
  long long v41 = v32;
  long long v42 = v33;
  long long v39 = v30;
  long long v40 = v31;
  long long v38 = 0uLL;
  uint64_t v26 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  sub_1A8DE4910((uint64_t)v27);
  sub_1A8DCB95C(48, &v26, (char *)&v34);
  sub_1A8DBA724((uint64_t)v27);
  uint64_t v24 = sub_1A8D93118((uint64_t)v26);
  swift_bridgeObjectRelease();
  sub_1A8DBA724((uint64_t)v27);
  return v24;
}

uint64_t P384.KeyAgreement.PrivateKey.pemRepresentation.getter()
{
  return sub_1A8DE1794(P384.KeyAgreement.PrivateKey.derRepresentation.getter);
}

uint64_t P521.Signing.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3224(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE4660, (uint64_t)&type metadata for P521, sub_1A8DA08A4, a4);
}

uint64_t P521.Signing.PublicKey.init<A>(compactRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3224(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE4660, (uint64_t)&type metadata for P521, sub_1A8DA07AC, a4);
}

uint64_t P521.Signing.PublicKey.init<A>(compressedRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3328(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A8DE4660, (uint64_t)&type metadata for P521, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA0070, a4);
}

uint64_t P521.Signing.PublicKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE3498(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A8DD7A00, a3);
}

uint64_t P521.Signing.PublicKey.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE36A0(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A8DD7A00, a3);
}

uint64_t _s9CryptoKit4P256O12KeyAgreementO06PublicD0V18x963Representation10Foundation4DataVvg_0()
{
  unint64_t v0 = ccec_export_pub_size();
  uint64_t v1 = sub_1A8DE97D0();
  *(void *)(v1 + 16) = v0;
  ccec_export_pub();
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = sub_1A8D93118(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t P521.Signing.PublicKey.derRepresentation.getter()
{
  if (qword_1E97A8C38 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1E97AD718;
  uint64_t v1 = unk_1E97AD720;
  long long v12 = xmmword_1E97AD728;
  uint64_t v2 = qword_1E97AD738;
  swift_unknownObjectRetain();
  sub_1A8DE97C0();
  sub_1A8DE97C0();
  unint64_t v3 = ccec_export_pub_size();
  uint64_t v4 = sub_1A8DE97D0();
  *(void *)(v4 + 16) = v3;
  ccec_export_pub();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = sub_1A8D93118(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v8 = sub_1A8DCCEB8(v5, v7);
  sub_1A8D8BD58(v5, v7);
  uint64_t v9 = (2 * v8[2]) | 1;
  v14[0] = v0;
  v14[1] = v1;
  long long v15 = v12;
  uint64_t v16 = v2;
  uint64_t v17 = v8;
  uint64_t v18 = v8 + 4;
  uint64_t v19 = 0;
  uint64_t v20 = v9;
  uint64_t v13 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  sub_1A8DE97C0();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A8DCB5B4(48, &v13, (char *)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_1A8D93118((uint64_t)v13);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t P521.Signing.PublicKey.pemRepresentation.getter()
{
  return sub_1A8DE0BCC(P521.Signing.PublicKey.derRepresentation.getter);
}

uint64_t P521.Signing.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_1A8DE2C6C(a1, MEMORY[0x1E4F14670], (uint64_t (*)(uint64_t, void, uint64_t))sub_1A8D9C1B4, a2);
}

uint64_t sub_1A8DE2C6C@<X0>(char a1@<W0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(uint64_t, void, uint64_t)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = a2();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
    swift_dynamicCast();
    uint64_t v8 = getccec_full_ctx_size();
    uint64_t result = a3(v8, a1 & 1, v8);
    *a4 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t P521.Signing.PrivateKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3B64(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE4660, (uint64_t)&type metadata for P521, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA04C0, a4);
}

uint64_t P521.Signing.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3B64(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE4660, (uint64_t)&type metadata for P521, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA04EC, a4);
}

uint64_t P521.Signing.PrivateKey.init(seed:compactRepresentable:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE0D30(a1, a2, a3, MEMORY[0x1E4F14670], (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_1A8D9C104, a4);
}

uint64_t P521.Signing.PrivateKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE0DCC(a1, a2, MEMORY[0x1E4F14670], (uint64_t (*)(void *, uint64_t *))sub_1A8DE4B04, a3);
}

void P521.Signing.PrivateKey.init<A>(derRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t P521.Signing.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DE3CF8(MEMORY[0x1E4F14670], a1);
}

uint64_t P521.Signing.PrivateKey.derRepresentation.getter()
{
  uint64_t v1 = *v0;
  if (qword_1E97A8C38 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E97AD718;
  uint64_t v3 = unk_1E97AD720;
  long long v4 = xmmword_1E97AD728;
  uint64_t v5 = qword_1E97AD738;
  swift_unknownObjectRetain();
  swift_retain();
  sub_1A8DE97C0();
  int64_t v6 = sub_1A8DDF7E0(v1, MEMORY[0x1E4F14670]);
  unint64_t v8 = v7;
  swift_release();
  uint64_t v9 = sub_1A8DCCEB8(v6, v8);
  sub_1A8D8BD58(v6, v8);
  uint64_t v10 = ccec_cp_521();
  if (!v10) {
    goto LABEL_10;
  }
  uint64_t v11 = v10;
  *((void *)&v34 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  *(void *)&long long v33 = v11;
  swift_retain();
  swift_dynamicCast();
  uint64_t v12 = getccec_pub_ctx_size();
  if (v12 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  size_t v13 = v12;
  if (v12)
  {
    uint64_t v14 = sub_1A8DE97D0();
    *(void *)(v14 + 16) = v13;
  }
  else
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
  }
  memcpy((void *)(v14 + 32), (const void *)(v1 + 32), v13);
  *(void *)(v14 + 16) = v13;
  swift_release();
  unint64_t v15 = ccec_export_pub_size();
  uint64_t v16 = sub_1A8DE97D0();
  *(void *)(v16 + 16) = v15;
  ccec_export_pub();
  *(void *)(v16 + 16) = v15;
  uint64_t v17 = sub_1A8D93118(v16);
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_1A8DCCEB8(v17, v19);
  sub_1A8D8BD58(v17, v19);
  uint64_t v21 = v20[2];
  uint64_t v22 = (2 * v9[2]) | 1;
  *(void *)&v26[0] = v2;
  *((void *)&v26[0] + 1) = v3;
  v26[1] = v4;
  *(void *)uint64_t v27 = v5;
  memset(&v27[8], 0, 32);
  uint64_t v28 = 0;
  *(void *)&long long v29 = v9;
  *((void *)&v29 + 1) = v9 + 4;
  *(void *)&long long v30 = 0;
  *((void *)&v30 + 1) = v22;
  *(void *)&long long v31 = v20;
  *((void *)&v31 + 1) = v20 + 4;
  *(void *)&long long v32 = 0;
  *((void *)&v32 + 1) = (2 * v21) | 1;
  long long v35 = *(_OWORD *)v27;
  long long v36 = *(_OWORD *)&v27[16];
  long long v33 = v26[0];
  long long v34 = v4;
  long long v40 = v31;
  long long v41 = v32;
  long long v38 = v29;
  long long v39 = v30;
  long long v37 = 0uLL;
  uint64_t v25 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  sub_1A8DE4910((uint64_t)v26);
  sub_1A8DCB95C(48, &v25, (char *)&v33);
  sub_1A8DBA724((uint64_t)v26);
  uint64_t v23 = sub_1A8D93118((uint64_t)v25);
  swift_bridgeObjectRelease();
  sub_1A8DBA724((uint64_t)v26);
  return v23;
}

uint64_t P521.Signing.PrivateKey.pemRepresentation.getter()
{
  return sub_1A8DE1794(P521.Signing.PrivateKey.derRepresentation.getter);
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3224(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE4660, (uint64_t)&type metadata for P521, sub_1A8DA08A4, a4);
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(compactRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3224(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE4660, (uint64_t)&type metadata for P521, sub_1A8DA07AC, a4);
}

uint64_t sub_1A8DE3224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14 = a4();
  uint64_t v15 = a6(a1, a5, a2, v14, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (!v7) {
    *a7 = v15;
  }
  return result;
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(compressedRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3328(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A8DE4660, (uint64_t)&type metadata for P521, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA0070, a4);
}

uint64_t sub_1A8DE3328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(char *, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v22 = a7;
  uint64_t v14 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a2);
  uint64_t v18 = a4(v17);
  uint64_t v19 = a6(v16, a5, a2, v18, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a2);
  if (!v7) {
    *uint64_t v22 = v19;
  }
  return result;
}

uint64_t P521.KeyAgreement.PublicKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE3498(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A8DD7A00, a3);
}

uint64_t sub_1A8DE3498@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t, char *, char *, char *)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_1A8D9DB04(a1, a2);
  if (!v4)
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    if (result == 0x4B2043494C425550 && v8 == 0xEA00000000005945 || (sub_1A8DE9B40() & 1) != 0)
    {
      sub_1A8D8BE04(v11, v12);
      size_t v13 = sub_1A8DCCEB8(v11, v12);
      sub_1A8DCAA70((uint64_t)v13, (uint64_t)(v13 + 4), 0, (2 * v13[2]) | 1, (uint64_t)v20);
      swift_release();
      sub_1A8D8E97C(v20, 0x30u, v21);
      uint64_t v14 = v21[6];
      uint64_t v15 = v21[7];
      uint64_t v16 = v21[8];
      uint64_t v17 = swift_unknownObjectRetain();
      uint64_t v19 = a3(v17, v14, v15, v16);
      sub_1A8DE4898((uint64_t)v21);
      sub_1A8D8BD58(v11, v12);
      swift_bridgeObjectRelease();
      uint64_t result = sub_1A8D8BD58(v11, v12);
      *a4 = v19;
    }
    else
    {
      sub_1A8D8EC14();
      swift_allocError();
      *uint64_t v18 = 7;
      swift_willThrow();
      swift_bridgeObjectRelease();
      return sub_1A8D8BD58(v11, v12);
    }
  }
  return result;
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE36A0(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A8DD7A00, a3);
}

uint64_t sub_1A8DE36A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, char *, char *, char *)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 16))(&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, a2);
  uint64_t v11 = sub_1A8DE97E0();
  sub_1A8DCAA70(v11, v11 + 32, 0, (2 * *(void *)(v11 + 16)) | 1, (uint64_t)v18);
  swift_bridgeObjectRelease();
  if (v4) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  }
  sub_1A8D8E97C(v18, 0x30u, v19);
  unint64_t v12 = v19[6];
  size_t v13 = v19[7];
  uint64_t v14 = v19[8];
  uint64_t v15 = swift_unknownObjectRetain();
  uint64_t v16 = a3(v15, v12, v13, v14);
  sub_1A8DE4898((uint64_t)v19);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  *a4 = v16;
  return result;
}

uint64_t P521.KeyAgreement.PublicKey.compactRepresentation.getter()
{
  return sub_1A8DDFA50(*v0, MEMORY[0x1E4F14670]);
}

uint64_t P521.KeyAgreement.PublicKey.compressedRepresentation.getter()
{
  return sub_1A8DDFBF8(*v0, MEMORY[0x1E4F14670]);
}

uint64_t P521.KeyAgreement.PublicKey.derRepresentation.getter()
{
  if (qword_1E97A8C38 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1E97AD718;
  uint64_t v1 = unk_1E97AD720;
  long long v12 = xmmword_1E97AD728;
  uint64_t v2 = qword_1E97AD738;
  swift_unknownObjectRetain();
  sub_1A8DE97C0();
  sub_1A8DE97C0();
  unint64_t v3 = ccec_export_pub_size();
  uint64_t v4 = sub_1A8DE97D0();
  *(void *)(v4 + 16) = v3;
  ccec_export_pub();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = sub_1A8D93118(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_1A8DCCEB8(v5, v7);
  sub_1A8D8BD58(v5, v7);
  uint64_t v9 = (2 * v8[2]) | 1;
  v14[0] = v0;
  v14[1] = v1;
  long long v15 = v12;
  uint64_t v16 = v2;
  uint64_t v17 = v8;
  uint64_t v18 = v8 + 4;
  uint64_t v19 = 0;
  uint64_t v20 = v9;
  size_t v13 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  sub_1A8DE97C0();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A8DCB5B4(48, &v13, (char *)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_1A8D93118((uint64_t)v13);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t P521.KeyAgreement.PublicKey.pemRepresentation.getter()
{
  return sub_1A8DE0BCC(P521.KeyAgreement.PublicKey.derRepresentation.getter);
}

uint64_t P521.KeyAgreement.PrivateKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3B64(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE4660, (uint64_t)&type metadata for P521, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA04C0, a4);
}

uint64_t P521.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE3B64(a1, a2, a3, (uint64_t (*)(void))sub_1A8DE4660, (uint64_t)&type metadata for P521, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A8DA04EC, a4);
}

uint64_t sub_1A8DE3B64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14 = a4();
  uint64_t v15 = a6(a1, a5, a2, v14, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (!v7) {
    *a7 = v15;
  }
  return result;
}

uint64_t P521.KeyAgreement.PrivateKey.init(seed:compactRepresentable:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  return sub_1A8DE0D30(a1, a2, a3, MEMORY[0x1E4F14670], (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_1A8D9C104, a4);
}

uint64_t P521.KeyAgreement.PrivateKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE0DCC(a1, a2, MEMORY[0x1E4F14670], (uint64_t (*)(void *, uint64_t *))sub_1A8DE4B04, a3);
}

void P521.KeyAgreement.PrivateKey.init<A>(derRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t P521.KeyAgreement.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DE3CF8(MEMORY[0x1E4F14670], a1);
}

uint64_t sub_1A8DE3CF8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t result = a1();
  if (!result) {
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  swift_dynamicCast();
  uint64_t result = getccec_pub_ctx_size();
  if (result < 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  size_t v6 = result;
  swift_retain();
  if (v6)
  {
    uint64_t v7 = sub_1A8DE97D0();
    *(void *)(v7 + 16) = v6;
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
  memcpy((void *)(v7 + 32), (const void *)(v4 + 32), v6);
  *(void *)(v7 + 16) = v6;
  uint64_t result = swift_release();
  *a2 = v7;
  return result;
}

int64_t P521.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  return sub_1A8DDF7E0(*v0, MEMORY[0x1E4F14670]);
}

uint64_t _s9CryptoKit4P256O7SigningO10PrivateKeyV18x963Representation10Foundation4DataVvg_0()
{
  unint64_t v0 = ccec_x963_export_size();
  uint64_t v1 = sub_1A8DE97D0();
  *(void *)(v1 + 16) = v0;
  ccec_x963_export();
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = sub_1A8D93118(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t P521.KeyAgreement.PrivateKey.derRepresentation.getter()
{
  uint64_t v1 = *v0;
  if (qword_1E97A8C38 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E97AD718;
  uint64_t v3 = unk_1E97AD720;
  long long v4 = xmmword_1E97AD728;
  uint64_t v5 = qword_1E97AD738;
  swift_unknownObjectRetain();
  swift_retain();
  sub_1A8DE97C0();
  int64_t v6 = sub_1A8DDF7E0(v1, MEMORY[0x1E4F14670]);
  unint64_t v8 = v7;
  swift_release();
  uint64_t v9 = sub_1A8DCCEB8(v6, v8);
  sub_1A8D8BD58(v6, v8);
  uint64_t v10 = ccec_cp_521();
  if (!v10) {
    goto LABEL_10;
  }
  uint64_t v11 = v10;
  *((void *)&v34 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  *(void *)&long long v33 = v11;
  swift_retain();
  swift_dynamicCast();
  uint64_t v12 = getccec_pub_ctx_size();
  if (v12 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  size_t v13 = v12;
  if (v12)
  {
    uint64_t v14 = sub_1A8DE97D0();
    *(void *)(v14 + 16) = v13;
  }
  else
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
  }
  memcpy((void *)(v14 + 32), (const void *)(v1 + 32), v13);
  *(void *)(v14 + 16) = v13;
  swift_release();
  unint64_t v15 = ccec_export_pub_size();
  uint64_t v16 = sub_1A8DE97D0();
  *(void *)(v16 + 16) = v15;
  ccec_export_pub();
  *(void *)(v16 + 16) = v15;
  uint64_t v17 = sub_1A8D93118(v16);
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_1A8DCCEB8(v17, v19);
  sub_1A8D8BD58(v17, v19);
  uint64_t v21 = v20[2];
  uint64_t v22 = (2 * v9[2]) | 1;
  *(void *)&v26[0] = v2;
  *((void *)&v26[0] + 1) = v3;
  v26[1] = v4;
  *(void *)uint64_t v27 = v5;
  memset(&v27[8], 0, 32);
  uint64_t v28 = 0;
  *(void *)&long long v29 = v9;
  *((void *)&v29 + 1) = v9 + 4;
  *(void *)&long long v30 = 0;
  *((void *)&v30 + 1) = v22;
  *(void *)&long long v31 = v20;
  *((void *)&v31 + 1) = v20 + 4;
  *(void *)&long long v32 = 0;
  *((void *)&v32 + 1) = (2 * v21) | 1;
  long long v35 = *(_OWORD *)v27;
  long long v36 = *(_OWORD *)&v27[16];
  long long v33 = v26[0];
  long long v34 = v4;
  long long v40 = v31;
  long long v41 = v32;
  long long v38 = v29;
  long long v39 = v30;
  long long v37 = 0uLL;
  uint64_t v25 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  sub_1A8DE4910((uint64_t)v26);
  sub_1A8DCB95C(48, &v25, (char *)&v33);
  sub_1A8DBA724((uint64_t)v26);
  uint64_t v23 = sub_1A8D93118((uint64_t)v25);
  swift_bridgeObjectRelease();
  sub_1A8DBA724((uint64_t)v26);
  return v23;
}

uint64_t P521.KeyAgreement.PrivateKey.pemRepresentation.getter()
{
  return sub_1A8DE1794(P521.KeyAgreement.PrivateKey.derRepresentation.getter);
}

uint64_t P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(uint64_t a1)
{
  return sub_1A8DE42B4(a1, (uint64_t (*)(void *))sub_1A8DDF170);
}

uint64_t sub_1A8DE41D4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DE430C(MEMORY[0x1E4F14660], a1);
}

uint64_t sub_1A8DE41EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8DE4418(a1, a2, a3, (uint64_t (*)(void *))sub_1A8DDF170);
}

uint64_t P384.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(uint64_t a1)
{
  return sub_1A8DE42B4(a1, (uint64_t (*)(void *))sub_1A8DDF1E4);
}

uint64_t sub_1A8DE4244@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DE430C(MEMORY[0x1E4F14668], a1);
}

uint64_t sub_1A8DE425C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8DE4418(a1, a2, a3, (uint64_t (*)(void *))sub_1A8DDF1E4);
}

uint64_t P521.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(uint64_t a1)
{
  return sub_1A8DE42B4(a1, (uint64_t (*)(void *))sub_1A8DDF258);
}

uint64_t sub_1A8DE42B4(uint64_t a1, uint64_t (*a2)(void *))
{
  void v4[2] = *v2;
  return a2(v4);
}

uint64_t sub_1A8DE42F4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A8DE430C(MEMORY[0x1E4F14670], a1);
}

uint64_t sub_1A8DE430C@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t result = a1();
  if (!result) {
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  swift_dynamicCast();
  uint64_t result = getccec_pub_ctx_size();
  if (result < 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  size_t v6 = result;
  swift_retain();
  if (v6)
  {
    uint64_t v7 = sub_1A8DE97D0();
    *(void *)(v7 + 16) = v6;
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
  memcpy((void *)(v7 + 32), (const void *)(v4 + 32), v6);
  *(void *)(v7 + 16) = v6;
  uint64_t result = swift_release();
  *a2 = v7;
  return result;
}

uint64_t sub_1A8DE43EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A8DE4418(a1, a2, a3, (uint64_t (*)(void *))sub_1A8DDF258);
}

uint64_t sub_1A8DE4418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *))
{
  void v6[2] = *v4;
  return a4(v6);
}

uint64_t sub_1A8DE4458(uint64_t result, uint64_t (*a2)(void *, uint64_t *))
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v4 = result;
  if (result)
  {
    uint64_t v5 = sub_1A8DE97D0();
    *(void *)(v5 + 16) = v4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
  }
  uint64_t v6 = v5 + 32;
  v7[1] = v4;
  uint64_t v8 = 0;
  v7[0] = v5 + 32;
  uint64_t result = a2(v7, &v8);
  if (v2)
  {
    if (v8 <= v4)
    {
      if (!v7[0])
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      if (v6 == v7[0])
      {
        *(void *)(v5 + 16) = v8;
        swift_bridgeObjectRelease();
        return v5;
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 > v4)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v7[0])
  {
    if (v6 == v7[0])
    {
      *(void *)(v5 + 16) = v8;
      return v5;
    }
    goto LABEL_19;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t *sub_1A8DE4558(uint64_t *result, void *a2, void *a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v7 = a3[2];
  uint64_t v8 = a3[3] >> 1;
  BOOL v9 = __OFSUB__(v8, v7);
  uint64_t v10 = v8 - v7;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = (uint64_t *)sub_1A8DDF4E0(a3[1] + v7, a3[1] + v7 + v10, result, a5, a6);
    if (!v6) {
      *a2 = a4;
    }
  }
  return result;
}

unint64_t sub_1A8DE45B8()
{
  unint64_t result = qword_1EB4766D8;
  if (!qword_1EB4766D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB4766D8);
  }
  return result;
}

unint64_t sub_1A8DE460C()
{
  unint64_t result = qword_1EB476720;
  if (!qword_1EB476720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB476720);
  }
  return result;
}

unint64_t sub_1A8DE4660()
{
  unint64_t result = qword_1E97A9608;
  if (!qword_1E97A9608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E97A9608);
  }
  return result;
}

uint64_t sub_1A8DE46B4(uint64_t a1, unint64_t a2, char a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v7 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_17;
      }
      unint64_t v7 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (!a4()) {
        goto LABEL_19;
      }
      uint64_t v11 = self;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
      swift_dynamicCast();
      unint64_t v12 = (unint64_t)objc_msgSend(v11, sel_groupOrderByteCountForCP_, v18);
      if ((v12 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        JUMPOUT(0x1A8DE4888);
      }
      if (__OFADD__(v12, 8)) {
        goto LABEL_16;
      }
      if (v7 == v12 + 8)
      {
        swift_dynamicCast();
        uint64_t v13 = getccec_full_ctx_size();
        if (a3) {
          uint64_t v14 = 9;
        }
        else {
          uint64_t v14 = 1;
        }
        return a5(v13, a1, a2, v14, v13);
      }
      else
      {
        sub_1A8D8E240();
        swift_allocError();
        *(_DWORD *)uint64_t v16 = 1;
        *(unsigned char *)(v16 + 4) = 1;
        return swift_willThrow();
      }
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      unint64_t v7 = v8 - v9;
      if (!__OFSUB__(v8, v9)) {
        goto LABEL_6;
      }
      goto LABEL_18;
    case 3uLL:
      goto LABEL_6;
    default:
      unint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1A8DE4898(uint64_t a1)
{
  return a1;
}

unint64_t ccec_x963_export_size()
{
  return 3 * ((unint64_t)(cczp_bitlen() + 7) >> 3) + 1;
}

uint64_t sub_1A8DE4910(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  swift_unknownObjectRetain();
  sub_1A8DE97C0();
  sub_1A8DBA62C(v2);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_UNKNOWN **sub_1A8DE499C()
{
  return &off_1EFF607D0;
}

_UNKNOWN **sub_1A8DE49A8()
{
  return &off_1EFF60628;
}

_UNKNOWN **sub_1A8DE49B4()
{
  return &off_1EFF60A48;
}

_UNKNOWN **sub_1A8DE49C0()
{
  return &off_1EFF608A0;
}

_UNKNOWN **sub_1A8DE49CC()
{
  return &off_1EFF60CC0;
}

_UNKNOWN **sub_1A8DE49D8()
{
  return &off_1EFF60B18;
}

ValueMetadata *type metadata accessor for P256.Signing()
{
  return &type metadata for P256.Signing;
}

ValueMetadata *type metadata accessor for P256.Signing.PublicKey()
{
  return &type metadata for P256.Signing.PublicKey;
}

ValueMetadata *type metadata accessor for P256.Signing.PrivateKey()
{
  return &type metadata for P256.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for P256.KeyAgreement()
{
  return &type metadata for P256.KeyAgreement;
}

ValueMetadata *type metadata accessor for P256.KeyAgreement.PublicKey()
{
  return &type metadata for P256.KeyAgreement.PublicKey;
}

ValueMetadata *type metadata accessor for P256.KeyAgreement.PrivateKey()
{
  return &type metadata for P256.KeyAgreement.PrivateKey;
}

ValueMetadata *type metadata accessor for P384.Signing()
{
  return &type metadata for P384.Signing;
}

ValueMetadata *type metadata accessor for P384.Signing.PublicKey()
{
  return &type metadata for P384.Signing.PublicKey;
}

ValueMetadata *type metadata accessor for P384.Signing.PrivateKey()
{
  return &type metadata for P384.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for P384.KeyAgreement()
{
  return &type metadata for P384.KeyAgreement;
}

ValueMetadata *type metadata accessor for P384.KeyAgreement.PublicKey()
{
  return &type metadata for P384.KeyAgreement.PublicKey;
}

ValueMetadata *type metadata accessor for P384.KeyAgreement.PrivateKey()
{
  return &type metadata for P384.KeyAgreement.PrivateKey;
}

ValueMetadata *type metadata accessor for P521.Signing()
{
  return &type metadata for P521.Signing;
}

ValueMetadata *type metadata accessor for P521.Signing.PublicKey()
{
  return &type metadata for P521.Signing.PublicKey;
}

ValueMetadata *type metadata accessor for P521.Signing.PrivateKey()
{
  return &type metadata for P521.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for P521.KeyAgreement()
{
  return &type metadata for P521.KeyAgreement;
}

ValueMetadata *type metadata accessor for P521.KeyAgreement.PublicKey()
{
  return &type metadata for P521.KeyAgreement.PublicKey;
}

ValueMetadata *type metadata accessor for P521.KeyAgreement.PrivateKey()
{
  return &type metadata for P521.KeyAgreement.PrivateKey;
}

uint64_t *sub_1A8DE4B04(uint64_t *a1, void *a2)
{
  return sub_1A8DE4558(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), MEMORY[0x1E4F14670], MEMORY[0x1E4F14670]);
}

unint64_t ccec_compact_export_size()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

uint64_t *sub_1A8DE4B6C(uint64_t *a1, void *a2)
{
  return sub_1A8DE4558(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), MEMORY[0x1E4F14668], MEMORY[0x1E4F14668]);
}

uint64_t *sub_1A8DE4BB0(uint64_t *a1, void *a2)
{
  return sub_1A8DE4558(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), MEMORY[0x1E4F14660], MEMORY[0x1E4F14660]);
}

uint64_t sub_1A8DE4C2C()
{
  return sub_1A8DE56A4();
}

uint64_t sub_1A8DE4C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A8DE4DBC(a1, a2, a3, a4, MEMORY[0x1E4F14660], MEMORY[0x1E4F14660], (void (*)(void, void))sub_1A8DE7458);
}

uint64_t sub_1A8DE4CB8()
{
  return sub_1A8DE4F50();
}

uint64_t sub_1A8DE4CD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return sub_1A8DE4FA8(a1, a2, a3, sub_1A8DE7484, a4);
}

uint64_t sub_1A8DE4D30()
{
  return sub_1A8DE56A4();
}

uint64_t sub_1A8DE4D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A8DE4DBC(a1, a2, a3, a4, MEMORY[0x1E4F14668], MEMORY[0x1E4F14668], (void (*)(void, void))sub_1A8DE7488);
}

uint64_t sub_1A8DE4DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), void (*a7)(void, void))
{
  if (!a3) {
    goto LABEL_10;
  }
  uint64_t v13 = a5();
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t v14 = v13;
  unint64_t v15 = self;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  *(void *)&long long v20 = v14;
  swift_dynamicCast();
  int64_t v16 = (int64_t)objc_msgSend(v15, sel_groupOrderByteCountForCP_, v23);
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v16 + 0x4000000000000000 < 0)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  *(void *)&long long v20 = sub_1A8D93078(2 * v16);
  *((void *)&v20 + 1) = v17;
  sub_1A8DD9764(&v20, 0);
  long long v22 = v20;
  sub_1A8DE5B2C(&v22, a3, a1, a2, a6);
  long long v18 = v22;
  if (!v7)
  {
    sub_1A8D8BE04(v22, *((unint64_t *)&v22 + 1));
    a7(v18, *((void *)&v18 + 1));
  }
  return sub_1A8D8BD58(v18, *((unint64_t *)&v18 + 1));
}

uint64_t sub_1A8DE4F50()
{
  sub_1A8DE59F4(*v0 + 32, &v2);
  return v2;
}

uint64_t sub_1A8DE4FA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (*a4)(void)@<X6>, uint64_t *a5@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v28 = a2;
  *((void *)&v28 + 1) = a3;
  uint64_t v8 = a4();
  uint64_t v10 = v8;
  unint64_t v11 = v9;
  uint64_t v13 = v12;
  unint64_t v15 = v14;
  switch(v9 >> 62)
  {
    case 1uLL:
      if (v8 >> 32 < (int)v8) {
        __break(1u);
      }
      uint64_t v25 = a5;
      sub_1A8D8BE04(v8, v9);
      sub_1A8D8BE04(v13, v15);
      sub_1A8D8BE04(v10, v11);
      uint64_t v24 = sub_1A8DE5E58((int)v10, v10 >> 32, v11 & 0x3FFFFFFFFFFFFFFFLL, v10, v11, v13, v15, a1);
      if (v5) {
        goto LABEL_16;
      }
      uint64_t v22 = v24;
      sub_1A8D8BD58(v10, v11);
      goto LABEL_11;
    case 2uLL:
      uint64_t v25 = a5;
      uint64_t v26 = a1;
      uint64_t v19 = *(void *)(v8 + 16);
      uint64_t v20 = *(void *)(v8 + 24);
      sub_1A8D8BE04(v8, v9);
      sub_1A8D8BE04(v13, v15);
      swift_retain();
      swift_retain();
      uint64_t v21 = sub_1A8DE5E58(v19, v20, v11 & 0x3FFFFFFFFFFFFFFFLL, v10, v11, v13, v15, v26);
      if (v5) {
        goto LABEL_15;
      }
      uint64_t v22 = v21;
      swift_release();
      swift_release();
LABEL_11:
      sub_1A8D8BD58(v10, v11);
      sub_1A8D8BD58(v13, v15);
      sub_1A8D8BD58(v10, v11);
      uint64_t result = sub_1A8D8BD58(v13, v15);
      a5 = v25;
      break;
    case 3uLL:
      *(void *)((char *)&v28 + 6) = 0;
      *(void *)&long long v28 = 0;
      sub_1A8D8BE04(v8, v9);
      sub_1A8D8BE04(v13, v15);
      uint64_t v16 = v13;
      unint64_t v17 = v15;
      uint64_t v18 = a1;
      goto LABEL_6;
    default:
      *(void *)&long long v28 = v8;
      WORD4(v28) = v9;
      BYTE10(v28) = BYTE2(v9);
      BYTE11(v28) = BYTE3(v9);
      BYTE12(v28) = BYTE4(v9);
      BYTE13(v28) = BYTE5(v9);
      sub_1A8D8BE04(v8, v9);
      sub_1A8D8BE04(v13, v15);
      uint64_t v16 = v13;
      unint64_t v17 = v15;
      uint64_t v18 = a1;
LABEL_6:
      sub_1A8DE538C((uint64_t)&v28, v16, v17, v18, &v27);
      if (v5)
      {
        sub_1A8D8BD58(v10, v11);
        sub_1A8D8BD58(v13, v15);
        __break(1u);
LABEL_15:
        sub_1A8D8BD58(v10, v11);
        sub_1A8D8BD58(v13, v15);
        swift_release();
        swift_release();
        __break(1u);
LABEL_16:
        sub_1A8D8BD58(v10, v11);
        sub_1A8D8BD58(v13, v15);
        sub_1A8D8BD58(v10, v11);
        __break(1u);
        JUMPOUT(0x1A8DE537CLL);
      }
      sub_1A8D8BD58(v10, v11);
      sub_1A8D8BD58(v13, v15);
      sub_1A8D8BD58(v10, v11);
      uint64_t result = sub_1A8D8BD58(v13, v15);
      uint64_t v22 = v27;
      break;
  }
  *a5 = v22;
  return result;
}

uint64_t sub_1A8DE538C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, unint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X8>)
{
  uint64_t v7 = a3;
  void v19[2] = *MEMORY[0x1E4F143B8];
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
      else
      {
        sub_1A8D8BE04(a2, a3);
        uint64_t v16 = sub_1A8DE9340();
        if (!v16) {
          goto LABEL_15;
        }
        uint64_t v17 = sub_1A8DE9370();
        if (!__OFSUB__((int)a2, v17))
        {
          v16 += (int)a2 - v17;
LABEL_15:
          sub_1A8DE9360();
          sub_1A8DE5AC8(v16, a4, a1, v19);
          if (!v5)
          {
            uint64_t result = sub_1A8D8BD58(a2, v7);
            goto LABEL_17;
          }
LABEL_24:
          sub_1A8D8BD58(a2, v7);
          __break(1u);
          JUMPOUT(0x1A8DE5660);
        }
      }
      __break(1u);
      return result;
    case 2uLL:
      uint64_t v11 = *(void *)(a2 + 16);
      uint64_t v12 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v7 = sub_1A8DE9340();
      if (!v7) {
        goto LABEL_6;
      }
      uint64_t v13 = sub_1A8DE9370();
      if (__OFSUB__(v11, v13)) {
        goto LABEL_21;
      }
      v7 += v11 - v13;
LABEL_6:
      if (__OFSUB__(v12, v11)) {
        goto LABEL_20;
      }
      sub_1A8DE9360();
      sub_1A8DE5AC8(v7, a4, a1, v19);
      if (v5)
      {
        swift_release();
        swift_release();
        __break(1u);
        goto LABEL_24;
      }
      swift_release();
      uint64_t result = swift_release();
LABEL_17:
      uint64_t v15 = v19[0];
LABEL_18:
      *a5 = v15;
      return result;
    case 3uLL:
      memset(v19, 0, 14);
      goto LABEL_10;
    default:
      v19[0] = a2;
      LOWORD(v19[1]) = a3;
      BYTE2(v19[1]) = BYTE2(a3);
      BYTE3(v19[1]) = BYTE3(a3);
      BYTE4(v19[1]) = BYTE4(a3);
      BYTE5(v19[1]) = BYTE5(a3);
LABEL_10:
      uint64_t result = sub_1A8DE5AC8((uint64_t)v19, a4, a1, &v18);
      uint64_t v15 = v18;
      goto LABEL_18;
  }
}

uint64_t sub_1A8DE5670()
{
  return sub_1A8DE56A4();
}

uint64_t sub_1A8DE56A4()
{
  return sub_1A8DE9390();
}

uint64_t sub_1A8DE5748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A8DE4DBC(a1, a2, a3, a4, MEMORY[0x1E4F14670], MEMORY[0x1E4F14670], (void (*)(void, void))sub_1A8DE74B4);
}

uint64_t sub_1A8DE57A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  if (a1) {
    uint64_t v8 = a2 - a1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!a6()) {
    goto LABEL_36;
  }
  unint64_t v9 = self;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  swift_dynamicCast();
  int64_t v10 = (int64_t)objc_msgSend(v9, sel_groupOrderByteCountForCP_, v19);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v10 + 0x4000000000000000 < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v8 < 2 * v10)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  swift_dynamicCast();
  uint64_t v11 = (uint64_t)objc_msgSend(v9, sel_groupOrderByteCountForCP_, v19);
  if (v11 < 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v11)
  {
    uint64_t v12 = v8 >= v11 ? v11 : v8;
    if ((v8 & 0x8000000000000000) == 0 && v12 < 0) {
      goto LABEL_35;
    }
  }
  swift_dynamicCast();
  uint64_t v13 = (uint64_t)objc_msgSend(v9, sel_groupOrderByteCountForCP_, v19);
  if (v13 < 0) {
    goto LABEL_33;
  }
  if (-v13 < -v8 && -v8 < 1) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v8 - v13;
  }
  if (v8 < v15) {
    goto LABEL_34;
  }
  if (!a4)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (!a1)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
  if (!ccrng()) {
    goto LABEL_39;
  }
  uint64_t result = ccec_sign_composite();
  if (result)
  {
    int v17 = result;
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v18 = v17;
    *(unsigned char *)(v18 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1A8DE59F4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (!a1) {
    __break(1u);
  }
  MEMORY[0x1F4188790](a1);
  uint64_t result = sub_1A8DE9390();
  *a2 = 0;
  return result;
}

uint64_t sub_1A8DE5AC8@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, void *a4@<X8>)
{
  if (!a2)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (!a3)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result)
  {
    uint64_t result = ccec_verify_composite();
    *a4 = (int)result;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1A8DE5B2C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a1[1];
  switch(v5 >> 62)
  {
    case 1uLL:
      *(void *)&long long v25 = *a1;
      *((void *)&v25 + 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t result = sub_1A8DE5D84((int *)&v25, a2, a3, a4, a5);
      uint64_t v10 = v25;
      unint64_t v11 = *((void *)&v25 + 1) | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      *(void *)&long long v25 = *a1;
      *((void *)&v25 + 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1A8DE93C0();
      uint64_t v12 = *((void *)&v25 + 1);
      uint64_t v13 = *(void *)(v25 + 16);
      uint64_t v24 = *(void *)(v25 + 24);
      uint64_t v14 = sub_1A8DE9340();
      if (!v14)
      {
        __break(1u);
        JUMPOUT(0x1A8DE5D74);
      }
      uint64_t v15 = v14;
      uint64_t v16 = sub_1A8DE9370();
      uint64_t v17 = v13 - v16;
      if (__OFSUB__(v13, v16))
      {
        __break(1u);
LABEL_15:
        __break(1u);
      }
      BOOL v18 = __OFSUB__(v24, v13);
      uint64_t v19 = v24 - v13;
      if (v18) {
        goto LABEL_15;
      }
      uint64_t v20 = sub_1A8DE9360();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t result = sub_1A8DE57A0(v15 + v17, v15 + v17 + v21, a2, a3, a4, a5);
      *a1 = v25;
      a1[1] = v12 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&v25 + 7) = 0;
      *(void *)&long long v25 = 0;
      return sub_1A8DE57A0((uint64_t)&v25, (uint64_t)&v25, a2, a3, a4, a5);
    default:
      *(void *)&long long v25 = *a1;
      WORD4(v25) = v5;
      BYTE10(v25) = BYTE2(v5);
      BYTE11(v25) = BYTE3(v5);
      BYTE12(v25) = BYTE4(v5);
      BYTE13(v25) = BYTE5(v5);
      BYTE14(v25) = BYTE6(v5);
      uint64_t result = sub_1A8DE57A0((uint64_t)&v25, (uint64_t)&v25 + BYTE6(v5), a2, a3, a4, a5);
      uint64_t v10 = v25;
      unint64_t v11 = DWORD2(v25) | ((unint64_t)BYTE12(v25) << 32) | ((unint64_t)BYTE13(v25) << 40) | ((unint64_t)BYTE14(v25) << 48);
LABEL_4:
      *a1 = v10;
      a1[1] = v11;
      return result;
  }
}

uint64_t sub_1A8DE5D84(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = sub_1A8DE93F0();
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  if ((int)v11 < (int)v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v18 = a2;
  uint64_t result = sub_1A8DE9340();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v13 = result;
  uint64_t result = sub_1A8DE9370();
  uint64_t v14 = v12 - result;
  if (__OFSUB__(v12, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v15 = v11 - v12;
  uint64_t v16 = sub_1A8DE9360();
  if (v16 >= v15) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v16;
  }
  return sub_1A8DE57A0(v13 + v14, v13 + v14 + v17, v18, a3, a4, a5);
}

uint64_t sub_1A8DE5E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1A8DE9340();
  uint64_t v15 = result;
  if (result)
  {
    uint64_t result = sub_1A8DE9370();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v15 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_1A8DE9360();
  uint64_t result = sub_1A8DE538C(v15, a6, a7, a8, &v16);
  if (!v8) {
    return v16;
  }
  return result;
}

uint64_t sub_1A8DE5F44@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1A8DE4FA8(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), sub_1A8DE7484, a2);
}

uint64_t sub_1A8DE5F78(uint64_t a1, uint64_t a2)
{
  return sub_1A8DE4DBC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), MEMORY[0x1E4F14670], MEMORY[0x1E4F14670], (void (*)(void, void))sub_1A8DE74B4);
}

uint64_t sub_1A8DE5FD4(uint64_t a1, uint64_t a2)
{
  return sub_1A8DE4DBC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), MEMORY[0x1E4F14668], MEMORY[0x1E4F14668], (void (*)(void, void))sub_1A8DE7488);
}

uint64_t sub_1A8DE6030(uint64_t a1, uint64_t a2)
{
  return sub_1A8DE4DBC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), MEMORY[0x1E4F14660], MEMORY[0x1E4F14660], (void (*)(void, void))sub_1A8DE7458);
}

uint64_t sub_1A8DE608C(uint64_t result, char *a2)
{
  int64_t v5 = (int64_t)&a2[-result];
  if (result) {
    int64_t v6 = (int64_t)&a2[-result];
  }
  else {
    int64_t v6 = 0;
  }
  uint64_t v7 = *v2;
  int64_t v8 = *(void *)(*v2 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v3 = a2;
  uint64_t v4 = (char *)result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (!result || (int64_t v10 = *(void *)(v7 + 24) >> 1, v10 < v9))
  {
    if (v8 <= v9) {
      int64_t v11 = v8 + v6;
    }
    else {
      int64_t v11 = v8;
    }
    uint64_t result = (uint64_t)sub_1A8D96298((char *)result, v11, 1, (char *)v7);
    uint64_t v7 = result;
    int64_t v10 = *(void *)(result + 24) >> 1;
  }
  uint64_t v12 = *(void *)(v7 + 16);
  int64_t v13 = v10 - v12;
  int64_t v14 = 0;
  if (v4 && v3 && v4 < v3 && v10 != v12)
  {
    if (v5 >= v13) {
      int64_t v14 = v10 - v12;
    }
    else {
      int64_t v14 = v5;
    }
    if (v14 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t result = (uint64_t)memmove((void *)(v7 + v12 + 32), v4, v14);
    v4 += v14;
  }
  if (v14 < v6) {
    goto LABEL_27;
  }
  if (v14)
  {
    uint64_t v15 = *(void *)(v7 + 16);
    BOOL v16 = __OFADD__(v15, v14);
    int64_t v17 = v15 + v14;
    if (v16)
    {
      __break(1u);
      goto LABEL_33;
    }
    *(void *)(v7 + 16) = v17;
  }
  if (v14 != v13) {
    goto LABEL_25;
  }
LABEL_28:
  int64_t v17 = *(void *)(v7 + 16);
  if (!v4)
  {
LABEL_33:
    if (!v3) {
      goto LABEL_25;
    }
    uint64_t v4 = 0;
    goto LABEL_35;
  }
  if (!v3 || v4 != v3)
  {
LABEL_35:
    char v20 = *v4;
    uint64_t v18 = v4 + 1;
    char v19 = v20;
    while (1)
    {
      while (1)
      {
        unint64_t v21 = *(void *)(v7 + 24);
        int64_t v22 = v21 >> 1;
        uint64_t v23 = v17 + 1;
        if ((uint64_t)(v21 >> 1) >= v17 + 1) {
          break;
        }
        uint64_t v26 = (char *)v7;
        int64_t v27 = v17;
        uint64_t result = (uint64_t)sub_1A8D96298((char *)(v21 > 1), v17 + 1, 1, v26);
        int64_t v17 = v27;
        uint64_t v7 = result;
        int64_t v22 = *(void *)(result + 24) >> 1;
        if (v17 < v22) {
          goto LABEL_39;
        }
LABEL_36:
        *(void *)(v7 + 16) = v17;
      }
      if (v17 >= v22) {
        goto LABEL_36;
      }
LABEL_39:
      *(unsigned char *)(v7 + v17 + 32) = v19;
      if (v3 && v3 == v18)
      {
LABEL_49:
        *(void *)(v7 + 16) = v23;
        break;
      }
      uint64_t v24 = 0;
      while (1)
      {
        uint64_t v25 = (uint64_t)&v18[v24 + 1];
        char v19 = v18[v24];
        if (~v17 + v22 == v24) {
          break;
        }
        *(unsigned char *)(v7 + v17 + 33 + v24++) = v19;
        if (v3 && (char *)v25 == v3)
        {
          uint64_t v23 = v17 + v24 + 1;
          goto LABEL_49;
        }
      }
      v18 += v24 + 1;
      int64_t v17 = v22;
      *(void *)(v7 + 16) = v22;
    }
  }
LABEL_25:
  *uint64_t v2 = v7;
  return result;
}

uint64_t sub_1A8DE6294(uint64_t result, unint64_t a2, unint64_t a3)
{
  int64_t v5 = (unsigned char *)((71 - __clz(a3)) >> 3);
  if ((unint64_t)v5 < result)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = a2;
  if ((unint64_t)v5 < a2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  int64_t v7 = result;
  uint64_t v8 = result - a2;
  uint64_t v3 = *v4;
  int64_t v9 = *((void *)*v4 + 2);
  int64_t v10 = v9 + result - a2;
  if (__OFADD__(v9, result - a2))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v13 = *((void *)v3 + 3) >> 1, v13 < v10))
  {
    if (v9 <= v10) {
      int64_t v14 = v10;
    }
    else {
      int64_t v14 = v9;
    }
    uint64_t v3 = sub_1A8D96298(isUniquelyReferenced_nonNull_native, v14, 1, v3);
    int64_t v13 = *((void *)v3 + 3) >> 1;
  }
  uint64_t v15 = *((void *)v3 + 2);
  uint64_t v16 = v13 - v15;
  uint64_t result = (uint64_t)sub_1A8DE8CC4(&v45, &v3[v15 + 32], v13 - v15, v7, v6, a3);
  if (result < v8) {
    goto LABEL_19;
  }
  if (result >= 1)
  {
    uint64_t v17 = *((void *)v3 + 2);
    BOOL v18 = __OFADD__(v17, result);
    int64_t v5 = (unsigned char *)(v17 + result);
    if (v18)
    {
      __break(1u);
LABEL_41:
      uint64_t v30 = v7 - v6 + 1;
      goto LABEL_42;
    }
    *((void *)v3 + 2) = v5;
  }
  if (result != v16)
  {
LABEL_15:
    *uint64_t v4 = v3;
    return result;
  }
LABEL_20:
  uint64_t v19 = v48;
  if (__OFSUB__(v48, v46)) {
    goto LABEL_45;
  }
  if (v48 == v46) {
    goto LABEL_15;
  }
  int64_t v7 = *((void *)v3 + 2);
  unint64_t v20 = v47;
  uint64_t v42 = v45;
  uint64_t v43 = v46;
  unint64_t v21 = sub_1A8DE8B90(v44, v48, v45, v46, v47, v5);
  char v23 = *v22;
  uint64_t result = ((uint64_t (*)(unsigned char *, void))v21)(v44, 0);
  uint64_t v24 = v19 - 1;
  if (v19 < 1) {
    goto LABEL_47;
  }
  unint64_t v25 = v20;
  int64_t v41 = (71 - __clz(v20)) >> 3;
  if (v41 < v19) {
    goto LABEL_47;
  }
  uint64_t v26 = v43;
  uint64_t v27 = -v43;
LABEL_26:
  while (1)
  {
    unint64_t v28 = *((void *)v3 + 3);
    int64_t v29 = v28 >> 1;
    uint64_t v30 = v7 + 1;
    if ((uint64_t)(v28 >> 1) < v7 + 1) {
      break;
    }
    long long v31 = (unsigned char *)(v7 - v29);
    if (v7 < v29) {
      goto LABEL_28;
    }
LABEL_25:
    *((void *)v3 + 2) = v7;
  }
  long long v37 = v3;
  unint64_t v38 = v25;
  uint64_t result = (uint64_t)sub_1A8D96298((char *)(v28 > 1), v7 + 1, 1, v37);
  unint64_t v25 = v38;
  uint64_t v26 = v43;
  uint64_t v3 = (char *)result;
  int64_t v29 = *(void *)(result + 24) >> 1;
  long long v31 = (unsigned char *)(v7 - v29);
  if (v7 >= v29) {
    goto LABEL_25;
  }
LABEL_28:
  v3[v7 + 32] = v23;
  if (__OFSUB__(v24, v26)) {
    goto LABEL_46;
  }
  int64_t v39 = v29;
  if (v24 == v26)
  {
LABEL_42:
    *((void *)v3 + 2) = v30;
    goto LABEL_15;
  }
  uint64_t v6 = 0;
  long long v40 = (unsigned char *)(v27 + v24);
  long long v32 = v31 + 1;
  long long v33 = v3 + 33;
  while (1)
  {
    unint64_t v34 = v25;
    long long v35 = sub_1A8DE8B90(v44, v24 + v6, v42, v26, v25, v31);
    char v23 = *v36;
    uint64_t result = ((uint64_t (*)(unsigned char *, void))v35)(v44, 0);
    if (v24 > v41 || v24 + v6 < 1) {
      break;
    }
    unint64_t v25 = v34;
    if (v32 == (unsigned char *)v6)
    {
      uint64_t v24 = v24 + v6 - 1;
      uint64_t v27 = -v43;
      int64_t v7 = v39;
      uint64_t v26 = v43;
      *((void *)v3 + 2) = v39;
      goto LABEL_26;
    }
    v33[v7] = v23;
    uint64_t v26 = v43;
    if (__OFSUB__(v24 + v6 - 1, v43)) {
      goto LABEL_44;
    }
    --v6;
    ++v33;
    long long v31 = v40;
    if (!&v40[v6]) {
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_1A8DE6598(uint64_t a1, uint64_t a2, int64_t a3, unint64_t a4, char **a5)
{
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_16;
  }
  int64_t v5 = a5;
  if (a4 >> 1 != a3)
  {
    if ((uint64_t)(a4 >> 1) <= a3)
    {
      __break(1u);
    }
    else
    {
      unint64_t v6 = a4;
      uint64_t v7 = a2;
      if ((*(char *)(a2 + a3) & 0x80000000) == 0)
      {
        uint64_t v13 = sub_1A8DE6860(a1, a2, a3, a4);
        sub_1A8DE8FC4(v13, v14, v15, v16);
        return swift_unknownObjectRelease();
      }
      uint64_t v8 = *a5;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *int64_t v5 = v8;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_11:
        unint64_t v18 = *((void *)v8 + 2);
        unint64_t v19 = *((void *)v8 + 3);
        unint64_t v20 = v18 + 1;
        if (v18 >= v19 >> 1)
        {
          unint64_t v25 = v18 + 1;
          int64_t v22 = v8;
          unint64_t v23 = *((void *)v8 + 2);
          uint64_t v24 = sub_1A8D96298((char *)(v19 > 1), v18 + 1, 1, v22);
          unint64_t v18 = v23;
          unint64_t v20 = v25;
          uint64_t v8 = v24;
        }
        *((void *)v8 + 2) = v20;
        v8[v18 + 32] = 0;
        *int64_t v5 = v8;
        uint64_t v21 = swift_unknownObjectRetain();
        sub_1A8DE8FC4(v21, v7, a3, v6);
        return swift_unknownObjectRelease();
      }
    }
    uint64_t v8 = sub_1A8D96298(0, *((void *)v8 + 2) + 1, 1, v8);
    *int64_t v5 = v8;
    goto LABEL_11;
  }
  unint64_t v6 = (unint64_t)*a5;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *int64_t v5 = v6;
  if ((result & 1) == 0)
  {
LABEL_16:
    uint64_t result = (uint64_t)sub_1A8D96298(0, *(void *)(v6 + 16) + 1, 1, (char *)v6);
    unint64_t v6 = result;
    *int64_t v5 = result;
  }
  unint64_t v11 = *(void *)(v6 + 16);
  unint64_t v10 = *(void *)(v6 + 24);
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)sub_1A8D96298((char *)(v10 > 1), v11 + 1, 1, (char *)v6);
    unint64_t v6 = result;
  }
  *(void *)(v6 + 16) = v11 + 1;
  *(unsigned char *)(v6 + v11 + 32) = 0;
  *int64_t v5 = v6;
  return result;
}

unint64_t sub_1A8DE6758(unint64_t a1)
{
  if (!a1) {
    return 0;
  }
  unint64_t v2 = 71 - __clz(a1);
  uint64_t v3 = v2 >> 3;
  unint64_t result = sub_1A8DE8C3C(v2 >> 3, v2 >> 3, 0, a1, v2);
  if (result != 255 && result != 0) {
    return v3;
  }
  if (v3 >= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v3;
  }
  uint64_t v7 = 8 * v3;
  char v8 = 16 - 8 * v3;
  unint64_t v9 = v3;
  while (1)
  {
    if (v9 < 2) {
      return v6;
    }
    unint64_t v15 = v9;
    uint64_t v10 = v7 - 8;
    if (v7 - 8 < 0) {
      unint64_t v11 = a1 << ((v8 - 8) & 0x38);
    }
    else {
      unint64_t v11 = a1 >> (v10 & 0x38);
    }
    if (result != v11) {
      return v15;
    }
    unint64_t v9 = v15 - 1;
    if (v15 - 1 > v3) {
      break;
    }
    BOOL v12 = v7 < 16;
    unint64_t v13 = a1 >> ((v7 + 48) & 0x38);
    if (v12) {
      unint64_t v13 = a1 << (v8 & 0x38);
    }
    char v14 = result ^ v13;
    v8 += 8;
    uint64_t v7 = v10;
    if (v14 < 0) {
      return v15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A8DE6860(uint64_t a1, uint64_t a2, int64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  if ((uint64_t)(a4 >> 1) < a3)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  unint64_t v5 = a4;
  if (a4 >> 1 == a3) {
    return swift_unknownObjectRetain();
  }
  if (v4 <= a3)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  int v6 = *(unsigned __int8 *)(a2 + a3);
  if (v6 != 255 && v6 != 0) {
    return swift_unknownObjectRetain();
  }
  if (!__OFSUB__(v4, a3))
  {
    if (v4 - a3 >= 2)
    {
      while (1)
      {
        int64_t v8 = v5 >> 1;
        if (a3 >= (uint64_t)(v5 >> 1)) {
          break;
        }
        if (*(unsigned __int8 *)(a2 + a3) != v6) {
          return swift_unknownObjectRetain();
        }
        if (__OFSUB__(v4, a3)) {
          goto LABEL_34;
        }
        int64_t v9 = a4 >> 1;
        if (v4 != a3)
        {
          if (v4 <= a3) {
            goto LABEL_35;
          }
          int64_t v9 = a3 + 1;
        }
        if (v8 < v9) {
          goto LABEL_36;
        }
        if (v9 < a3) {
          goto LABEL_37;
        }
        if (v8 < (unint64_t)v4) {
          goto LABEL_38;
        }
        if (v4 < a3) {
          goto LABEL_39;
        }
        if (v9 == v4) {
          goto LABEL_40;
        }
        if (v9 >= v4) {
          goto LABEL_41;
        }
        if (((*(unsigned __int8 *)(a2 + v9) ^ v6) & 0x80) != 0) {
          return swift_unknownObjectRetain();
        }
        int64_t v10 = a4 >> 1;
        if (v4 != a3)
        {
          int64_t v10 = a3 + 1;
          if (__OFADD__(a3, 1)) {
            goto LABEL_47;
          }
          if (v4 < v10) {
            goto LABEL_42;
          }
        }
        if (v8 < v10) {
          goto LABEL_43;
        }
        if (v10 < a3) {
          goto LABEL_44;
        }
        if (__OFSUB__(v4, v10)) {
          goto LABEL_45;
        }
        unint64_t v5 = v5 & 1 | a4 & 0xFFFFFFFFFFFFFFFELL;
        if (v10 != v4)
        {
          a3 = v10;
          if (v4 - v10 >= 2) {
            continue;
          }
        }
        return swift_unknownObjectRetain();
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    return swift_unknownObjectRetain();
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t P256.Signing.ECDSASignature.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X8>)
{
  return sub_1A8DE6A38(a1, a2, MEMORY[0x1E4F14660], a3);
}

uint64_t P384.Signing.ECDSASignature.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X8>)
{
  return sub_1A8DE6A38(a1, a2, MEMORY[0x1E4F14668], a3);
}

uint64_t sub_1A8DE6A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X3>, long long *a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v10);
  uint64_t v12 = sub_1A8DE97E0();
  sub_1A8DCAA70(v12, v12 + 32, 0, (2 * *(void *)(v12 + 16)) | 1, (uint64_t)v49);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1A8D946F4((uint64_t)&v50, (uint64_t)v51);
  sub_1A8DA81F4((uint64_t)v51);
  uint64_t v14 = sub_1A8DE70D0(v49, 0x30u, (uint64_t *)&v43);
  long long v40 = v43;
  uint64_t v15 = v44;
  unint64_t v41 = v45;
  long long v39 = v46;
  uint64_t v38 = v47;
  unint64_t v37 = v48;
  uint64_t result = a3(v14);
  if (!result) {
    goto LABEL_34;
  }
  uint64_t v16 = result;
  uint64_t v17 = self;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  uint64_t v45 = v18;
  *(void *)&long long v43 = v16;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v17, sel_groupOrderByteCountForCP_, (void)v42);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v36 = v15;
  BOOL v19 = __OFSUB__(v41 >> 1, v15);
  uint64_t v20 = (v41 >> 1) - v15;
  if (v19)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result < v20)
  {
LABEL_9:
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v21 = 1;
    *(unsigned char *)(v21 + 4) = 1;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1A8DBA828((uint64_t)v49, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  }
  if (__OFSUB__(v37 >> 1, v38)) {
    goto LABEL_23;
  }
  if (result < (uint64_t)((v37 >> 1) - v38)) {
    goto LABEL_9;
  }
  uint64_t v34 = (v37 >> 1) - v38;
  long long v42 = xmmword_1A8DEAA40;
  uint64_t v45 = v18;
  *(void *)&long long v43 = v16;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v17, sel_groupOrderByteCountForCP_, v52);
  if (result < 0) {
    goto LABEL_24;
  }
  id v35 = v17;
  if (result + 0x4000000000000000 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  sub_1A8DE9450();
  uint64_t v45 = v18;
  *(void *)&long long v43 = v16;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v35, sel_groupOrderByteCountForCP_, v52);
  if (result < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  BOOL v19 = __OFSUB__(result, v20);
  result -= v20;
  if (v19)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v22 = v36;
  if (result < 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  sub_1A8DBB360(result);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476690);
  uint64_t v45 = v23;
  unint64_t v33 = sub_1A8DA8230();
  *(void *)&long long v46 = v33;
  uint64_t v24 = swift_allocObject();
  *(void *)&long long v43 = v24;
  *(_OWORD *)(v24 + 16) = v40;
  unint64_t v25 = v41;
  *(void *)(v24 + 32) = v22;
  *(void *)(v24 + 40) = v25;
  uint64_t v36 = v23;
  uint64_t result = (uint64_t)__swift_project_boxed_opaque_existential_1(&v43, v23);
  uint64_t v26 = *(void *)(result + 16);
  uint64_t v27 = *(void *)(result + 24) >> 1;
  BOOL v19 = __OFSUB__(v27, v26);
  uint64_t v28 = v27 - v26;
  if (v19)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  unint64_t v41 = *(void *)(result + 8) + v26 + v28;
  unint64_t v29 = v40;
  swift_unknownObjectRetain_n();
  sub_1A8DE9460();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
  unint64_t v41 = v29;
  swift_unknownObjectRelease();
  uint64_t v45 = v18;
  *(void *)&long long v43 = v16;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v35, sel_groupOrderByteCountForCP_, v52);
  if (result < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  BOOL v19 = __OFSUB__(result, v34);
  result -= v34;
  if (v19)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    sub_1A8DBB360(result);
    uint64_t v30 = v36;
    uint64_t v45 = v36;
    *(void *)&long long v46 = v33;
    uint64_t v31 = swift_allocObject();
    *(void *)&long long v43 = v31;
    *(_OWORD *)(v31 + 16) = v39;
    unint64_t v32 = v37;
    *(void *)(v31 + 32) = v38;
    *(void *)(v31 + 40) = v32;
    uint64_t result = (uint64_t)__swift_project_boxed_opaque_existential_1(&v43, v30);
    if (!__OFSUB__(*(void *)(result + 24) >> 1, *(void *)(result + 16)))
    {
      swift_unknownObjectRetain_n();
      sub_1A8DE9460();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_1A8DBA828((uint64_t)v49, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
      uint64_t result = swift_unknownObjectRelease();
      *a4 = v42;
      return result;
    }
    goto LABEL_33;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1A8DE70D0@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  if (*a1 != a2
    || (sub_1A8D946F4((uint64_t)(a1 + 8), (uint64_t)v39), sub_1A8D946F4((uint64_t)v39, (uint64_t)&v40), (v41 & 1) != 0))
  {
    sub_1A8D8EC14();
    swift_allocError();
    *int v6 = 1;
    swift_willThrow();
    uint64_t v7 = (uint64_t)a1;
    return sub_1A8DBA828(v7, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  }
  sub_1A8DC3DAC((uint64_t)v27);
  sub_1A8DCD6E0((uint64_t)v27, (uint64_t)v35);
  if (v36 == 255)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v22 = 3;
    sub_1A8DBA828((uint64_t)a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
    sub_1A8DBA828((uint64_t)a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
    swift_willThrow();
    goto LABEL_11;
  }
  v37[0] = v35[0];
  v37[1] = v35[1];
  _OWORD v37[2] = v35[2];
  unsigned __int8 v38 = v36;
  sub_1A8DBA828((uint64_t)a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
  sub_1A8DBA828((uint64_t)a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
  uint64_t v8 = sub_1A8DCF5F0((unsigned __int8 *)v37, 2u);
  if (v3)
  {
LABEL_11:
    swift_unknownObjectRelease();
    sub_1A8DBA828((uint64_t)a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    goto LABEL_12;
  }
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  sub_1A8DC3DAC((uint64_t)v28);
  sub_1A8DCD6E0((uint64_t)v28, (uint64_t)v31);
  if (v32 == 255)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v23 = 3;
    swift_willThrow();
    swift_unknownObjectRelease();
    goto LABEL_11;
  }
  v33[0] = v31[0];
  v33[1] = v31[1];
  id v33[2] = v31[2];
  unsigned __int8 v34 = v32;
  uint64_t v16 = sub_1A8DCF5F0((unsigned __int8 *)v33, 2u);
  uint64_t v18 = v17;
  uint64_t v25 = v20;
  uint64_t v26 = v19;
  uint64_t v42 = v16;
  sub_1A8DC3DAC((uint64_t)v29);
  sub_1A8D8ED60((uint64_t)v29);
  sub_1A8DCD6E0((uint64_t)v29, (uint64_t)v30);
  if (v30[48] != 255)
  {
    sub_1A8D8EC14();
    swift_allocError();
    *uint64_t v21 = 3;
    swift_willThrow();
    sub_1A8DBA828((uint64_t)a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
LABEL_12:
    uint64_t v7 = (uint64_t)a1;
    return sub_1A8DBA828(v7, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  }
  swift_unknownObjectRelease();
  sub_1A8DBA828((uint64_t)a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  uint64_t result = sub_1A8DBA828((uint64_t)a1, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  *a3 = v12;
  a3[1] = v13;
  a3[2] = v14;
  a3[3] = v15;
  a3[4] = v42;
  a3[5] = v18;
  a3[6] = v26;
  a3[7] = v25;
  return result;
}

uint64_t sub_1A8DE7458@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE74E0(a1, a2, MEMORY[0x1E4F14660], a3);
}

uint64_t sub_1A8DE7488@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE74E0(a1, a2, MEMORY[0x1E4F14668], a3);
}

uint64_t sub_1A8DE74B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE74E0(a1, a2, MEMORY[0x1E4F14670], a3);
}

uint64_t sub_1A8DE74E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_14;
      }
      uint64_t v7 = HIDWORD(a1) - (int)a1;
LABEL_6:
      uint64_t v10 = a3();
      if (!v10) {
        goto LABEL_16;
      }
      uint64_t v11 = v10;
      uint64_t v12 = self;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
      swift_dynamicCast();
      uint64_t result = (uint64_t)objc_msgSend(v12, sel_groupOrderByteCountForCP_, v15, v11);
      if (result < 0)
      {
        __break(1u);
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
        JUMPOUT(0x1A8DE765CLL);
      }
      if (result + 0x4000000000000000 < 0) {
        goto LABEL_13;
      }
      if (v7 == 2 * result)
      {
        *a4 = a1;
        a4[1] = a2;
      }
      else
      {
        sub_1A8D8E240();
        swift_allocError();
        *(_DWORD *)uint64_t v14 = 1;
        *(unsigned char *)(v14 + 4) = 1;
        swift_willThrow();
        return sub_1A8D8BD58(a1, a2);
      }
      return result;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      uint64_t v7 = v8 - v9;
      if (!__OFSUB__(v8, v9)) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1A8DE766C()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v1), v1)) {
        goto LABEL_14;
      }
      uint64_t v3 = (uint64_t)(int)(HIDWORD(v1) - v1 + (HIDWORD(v1) - (int)v1 < 0)) >> 1;
      sub_1A8D8BE04(v1, v2);
      if ((int)v1 > v3) {
        goto LABEL_13;
      }
      uint64_t v4 = sub_1A8DE9470();
      uint64_t v5 = v1 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v1 + 16);
      uint64_t v6 = *(void *)(v1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v9 = v6 - v7;
      if (v8) {
        goto LABEL_15;
      }
      uint64_t v3 = v9 / 2;
      sub_1A8D8BE04(v1, v2);
      if (v3 < v7)
      {
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x1A8DE77F8);
      }
      uint64_t v4 = sub_1A8DE9470();
      uint64_t v5 = *(void *)(v1 + 24);
      break;
    case 3uLL:
      goto LABEL_11;
    default:
      uint64_t v3 = (v2 >> 49) & 0x7F;
      uint64_t v4 = sub_1A8DE9470();
      uint64_t v5 = BYTE6(v2);
      break;
  }
  if (v5 < v3)
  {
    __break(1u);
LABEL_11:
    uint64_t v4 = sub_1A8DE9470();
  }
  sub_1A8DE9470();
  sub_1A8D8BD58(v1, v2);
  return v4;
}

uint64_t P256.Signing.ECDSASignature.rawRepresentation.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_1A8D8BE04(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t P256.Signing.ECDSASignature.rawRepresentation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1A8D8BD58(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*P256.Signing.ECDSASignature.rawRepresentation.modify())()
{
  return nullsub_1;
}

uint64_t P256.Signing.ECDSASignature.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE83B0(a1, a2, MEMORY[0x1E4F14660], a3);
}

uint64_t P256.Signing.ECDSASignature.withUnsafeBytes<A>(_:)()
{
  return sub_1A8DE9490();
}

uint64_t P256.Signing.ECDSASignature.derRepresentation.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v1), v1)) {
        goto LABEL_17;
      }
      uint64_t v3 = (uint64_t)(int)(HIDWORD(v1) - v1 + (HIDWORD(v1) - (int)v1 < 0)) >> 1;
      uint64_t v4 = (int)v1;
      break;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 16);
      uint64_t v5 = *(void *)(v1 + 24);
      BOOL v6 = __OFSUB__(v5, v4);
      uint64_t v7 = v5 - v4;
      if (v6) {
        goto LABEL_18;
      }
      uint64_t v3 = v7 / 2;
      break;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v3 = (v2 >> 49) & 0x7F;
      goto LABEL_8;
  }
  sub_1A8D8BE04(v1, v2);
  if (v3 < v4)
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x1A8DE7BA0);
  }
LABEL_8:
  uint64_t v8 = sub_1A8DE9470();
  unint64_t v10 = v9;
  uint64_t v11 = sub_1A8DCCEB8(v8, v9);
  sub_1A8D8BD58(v8, v10);
  uint64_t v12 = (2 * v11[2]) | 1;
  uint64_t v13 = 0;
  switch(v2 >> 62)
  {
    case 0uLL:
      uint64_t v13 = BYTE6(v2);
      break;
    case 1uLL:
      uint64_t v13 = v1 >> 32;
      goto LABEL_12;
    case 2uLL:
      uint64_t v13 = *(void *)(v1 + 24);
LABEL_12:
      sub_1A8D8BE04(v1, v2);
      break;
    case 3uLL:
      break;
    default:
      JUMPOUT(0);
  }
  if (v13 < v3) {
    goto LABEL_16;
  }
  uint64_t v14 = sub_1A8DE9470();
  unint64_t v16 = v15;
  sub_1A8D8BD58(v1, v2);
  uint64_t v17 = sub_1A8DCCEB8(v14, v16);
  sub_1A8D8BD58(v14, v16);
  uint64_t v18 = (2 * v17[2]) | 1;
  swift_retain();
  swift_retain();
  void v22[7] = v18;
  uint64_t v23 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  v22[0] = v11;
  v22[1] = v11 + 4;
  void v22[2] = 0;
  void v22[3] = v12;
  _OWORD v22[4] = v17;
  v22[5] = v17 + 4;
  _OWORD v22[6] = 0;
  MEMORY[0x1F4188790](v23);
  _OWORD v21[2] = v22;
  sub_1A8DC7AFC(48, sub_1A8DE90F4, (uint64_t)v21);
  uint64_t v19 = sub_1A8D93118((uint64_t)v23);
  swift_bridgeObjectRelease();
  sub_1A8D8BD58(v1, v2);
  swift_release_n();
  swift_release_n();
  return v19;
}

uint64_t sub_1A8DE7BC0()
{
  return P256.Signing.ECDSASignature.withUnsafeBytes<A>(_:)();
}

uint64_t P256.Signing.PrivateKey.signature<A>(for:)()
{
  return sub_1A8DE4C2C();
}

uint64_t P256.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *v3;
  unint64_t v8 = sub_1A8D8954C();
  static HashFunction.hash<A>(data:)(a1, (uint64_t)&type metadata for SHA256, a2, v8, a3);
  swift_beginAccess();
  uint64_t v9 = v7 + 32 + *(void *)(v7 + 16);
  long long v11 = v14;
  uint64_t v12 = v15;
  uint64_t v13 = v16;
  return sub_1A8DE4C60((uint64_t)&v11, (uint64_t)&v14, v7 + 32, v9);
}

uint64_t P256.Signing.PublicKey.isValidSignature<A>(_:for:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A8DE8A28(a1, a2, a3, a4, (uint64_t (*)(long long *))sub_1A8DE4CB8);
}

uint64_t P256.Signing.PublicKey.isValidSignature<A>(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  unint64_t v9 = sub_1A8D8954C();
  static HashFunction.hash<A>(data:)(a2, (uint64_t)&type metadata for SHA256, a3, v9, a4);
  unsigned __int8 v13 = 0;
  v12[0] = v14;
  v12[1] = v15;
  sub_1A8DE4CD0((uint64_t)v12, v7, v8, &v11);
  return (v11 == 0) & v13;
}

uint64_t (*P384.Signing.ECDSASignature.rawRepresentation.modify())()
{
  return nullsub_1;
}

uint64_t P384.Signing.ECDSASignature.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE83B0(a1, a2, MEMORY[0x1E4F14668], a3);
}

uint64_t P384.Signing.ECDSASignature.derRepresentation.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v1), v1)) {
        goto LABEL_17;
      }
      uint64_t v3 = (uint64_t)(int)(HIDWORD(v1) - v1 + (HIDWORD(v1) - (int)v1 < 0)) >> 1;
      uint64_t v4 = (int)v1;
      break;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 16);
      uint64_t v5 = *(void *)(v1 + 24);
      BOOL v6 = __OFSUB__(v5, v4);
      uint64_t v7 = v5 - v4;
      if (v6) {
        goto LABEL_18;
      }
      uint64_t v3 = v7 / 2;
      break;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v3 = (v2 >> 49) & 0x7F;
      goto LABEL_8;
  }
  sub_1A8D8BE04(v1, v2);
  if (v3 < v4)
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x1A8DE810CLL);
  }
LABEL_8:
  uint64_t v8 = sub_1A8DE9470();
  unint64_t v10 = v9;
  uint64_t v11 = sub_1A8DCCEB8(v8, v9);
  sub_1A8D8BD58(v8, v10);
  uint64_t v12 = (2 * v11[2]) | 1;
  uint64_t v13 = 0;
  switch(v2 >> 62)
  {
    case 0uLL:
      uint64_t v13 = BYTE6(v2);
      break;
    case 1uLL:
      uint64_t v13 = v1 >> 32;
      goto LABEL_12;
    case 2uLL:
      uint64_t v13 = *(void *)(v1 + 24);
LABEL_12:
      sub_1A8D8BE04(v1, v2);
      break;
    case 3uLL:
      break;
    default:
      JUMPOUT(0);
  }
  if (v13 < v3) {
    goto LABEL_16;
  }
  uint64_t v14 = sub_1A8DE9470();
  unint64_t v16 = v15;
  sub_1A8D8BD58(v1, v2);
  uint64_t v17 = sub_1A8DCCEB8(v14, v16);
  sub_1A8D8BD58(v14, v16);
  uint64_t v18 = (2 * v17[2]) | 1;
  swift_retain();
  swift_retain();
  void v22[7] = v18;
  uint64_t v23 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  v22[0] = v11;
  v22[1] = v11 + 4;
  void v22[2] = 0;
  void v22[3] = v12;
  _OWORD v22[4] = v17;
  v22[5] = v17 + 4;
  _OWORD v22[6] = 0;
  MEMORY[0x1F4188790](v23);
  _OWORD v21[2] = v22;
  sub_1A8DC7AFC(48, sub_1A8DE9260, (uint64_t)v21);
  uint64_t v19 = sub_1A8D93118((uint64_t)v23);
  swift_bridgeObjectRelease();
  sub_1A8D8BD58(v1, v2);
  swift_release_n();
  swift_release_n();
  return v19;
}

uint64_t P384.Signing.PrivateKey.signature<A>(for:)()
{
  return sub_1A8DE4D30();
}

uint64_t P384.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *v3;
  unint64_t v8 = sub_1A8D9F724();
  static HashFunction.hash<A>(data:)(a1, (uint64_t)&type metadata for SHA384, a2, v8, a3);
  swift_beginAccess();
  uint64_t v9 = v7 + 32 + *(void *)(v7 + 16);
  v11[0] = v14[0];
  v11[1] = v14[1];
  uint64_t v12 = v15;
  uint64_t v13 = v16;
  return sub_1A8DE4D64((uint64_t)v11, (uint64_t)v14, v7 + 32, v9);
}

uint64_t P384.Signing.PublicKey.isValidSignature<A>(_:for:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A8DE8A28(a1, a2, a3, a4, (uint64_t (*)(long long *))sub_1A8DE4CB8);
}

uint64_t P384.Signing.PublicKey.isValidSignature<A>(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  unint64_t v9 = sub_1A8D9F724();
  static HashFunction.hash<A>(data:)(a2, (uint64_t)&type metadata for SHA384, a3, v9, a4);
  unsigned __int8 v13 = 0;
  v12[0] = v14;
  v12[1] = v15;
  _OWORD v12[2] = v16;
  sub_1A8DE4CD0((uint64_t)v12, v7, v8, &v11);
  return (v11 == 0) & v13;
}

uint64_t (*P521.Signing.ECDSASignature.rawRepresentation.modify())()
{
  return nullsub_1;
}

uint64_t P521.Signing.ECDSASignature.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A8DE83B0(a1, a2, MEMORY[0x1E4F14670], a3);
}

uint64_t sub_1A8DE83B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v20 = a4;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1A8DE9840();
  uint64_t result = a3();
  if (!result) {
    goto LABEL_9;
  }
  uint64_t v12 = result;
  unsigned __int8 v13 = self;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB476930);
  uint64_t v21 = v12;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v13, sel_groupOrderByteCountForCP_, v23);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (result + 0x4000000000000000 < 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (v10 == 2 * result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a2);
    uint64_t v14 = sub_1A8DE9520();
    uint64_t v16 = v15;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
    uint64_t v17 = v20;
    *uint64_t v20 = v14;
    v17[1] = v16;
  }
  else
  {
    sub_1A8D8E240();
    swift_allocError();
    *(_DWORD *)uint64_t v18 = 1;
    *(unsigned char *)(v18 + 4) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  }
  return result;
}

uint64_t P521.Signing.ECDSASignature.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X8>)
{
  return sub_1A8DE6A38(a1, a2, MEMORY[0x1E4F14670], a3);
}

uint64_t P521.Signing.ECDSASignature.derRepresentation.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v1), v1)) {
        goto LABEL_17;
      }
      uint64_t v3 = (uint64_t)(int)(HIDWORD(v1) - v1 + (HIDWORD(v1) - (int)v1 < 0)) >> 1;
      uint64_t v4 = (int)v1;
      break;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 16);
      uint64_t v5 = *(void *)(v1 + 24);
      BOOL v6 = __OFSUB__(v5, v4);
      uint64_t v7 = v5 - v4;
      if (v6) {
        goto LABEL_18;
      }
      uint64_t v3 = v7 / 2;
      break;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v3 = (v2 >> 49) & 0x7F;
      goto LABEL_8;
  }
  sub_1A8D8BE04(v1, v2);
  if (v3 < v4)
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x1A8DE88B4);
  }
LABEL_8:
  uint64_t v8 = sub_1A8DE9470();
  unint64_t v10 = v9;
  uint64_t v11 = sub_1A8DCCEB8(v8, v9);
  sub_1A8D8BD58(v8, v10);
  uint64_t v12 = (2 * v11[2]) | 1;
  uint64_t v13 = 0;
  switch(v2 >> 62)
  {
    case 0uLL:
      uint64_t v13 = BYTE6(v2);
      break;
    case 1uLL:
      uint64_t v13 = v1 >> 32;
      goto LABEL_12;
    case 2uLL:
      uint64_t v13 = *(void *)(v1 + 24);
LABEL_12:
      sub_1A8D8BE04(v1, v2);
      break;
    case 3uLL:
      break;
    default:
      JUMPOUT(0);
  }
  if (v13 < v3) {
    goto LABEL_16;
  }
  uint64_t v14 = sub_1A8DE9470();
  unint64_t v16 = v15;
  sub_1A8D8BD58(v1, v2);
  uint64_t v17 = sub_1A8DCCEB8(v14, v16);
  sub_1A8D8BD58(v14, v16);
  uint64_t v18 = (2 * v17[2]) | 1;
  swift_retain();
  swift_retain();
  void v22[7] = v18;
  uint64_t v23 = sub_1A8D96298(0, 1024, 0, MEMORY[0x1E4FBC860]);
  v22[0] = v11;
  v22[1] = v11 + 4;
  void v22[2] = 0;
  void v22[3] = v12;
  _OWORD v22[4] = v17;
  v22[5] = v17 + 4;
  _OWORD v22[6] = 0;
  MEMORY[0x1F4188790](v23);
  _OWORD v21[2] = v22;
  sub_1A8DC7AFC(48, sub_1A8DE9260, (uint64_t)v21);
  uint64_t v19 = sub_1A8D93118((uint64_t)v23);
  swift_bridgeObjectRelease();
  sub_1A8D8BD58(v1, v2);
  swift_release_n();
  swift_release_n();
  return v19;
}

uint64_t P521.Signing.PrivateKey.signature<A>(for:)()
{
  return sub_1A8DE5670();
}

uint64_t P521.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *v3;
  unint64_t v8 = sub_1A8D9F77C();
  static HashFunction.hash<A>(data:)(a1, (uint64_t)&type metadata for SHA512, a2, v8, a3);
  swift_beginAccess();
  uint64_t v9 = v7 + 32 + *(void *)(v7 + 16);
  v11[0] = v14[0];
  v11[1] = v14[1];
  _OWORD v11[2] = v14[2];
  uint64_t v12 = v15;
  uint64_t v13 = v16;
  return sub_1A8DE5748((uint64_t)v11, (uint64_t)v14, v7 + 32, v9);
}

uint64_t P521.Signing.PublicKey.isValidSignature<A>(_:for:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A8DE8A28(a1, a2, a3, a4, (uint64_t (*)(long long *))sub_1A8DE4CB8);
}

uint64_t sub_1A8DE8A28(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(long long *))
{
  uint64_t v8 = *v5;
  long long v7 = *a1;
  return a5(&v7) & 1;
}

uint64_t P521.Signing.PublicKey.isValidSignature<A>(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  unint64_t v9 = sub_1A8D9F77C();
  static HashFunction.hash<A>(data:)(a2, (uint64_t)&type metadata for SHA512, a3, v9, a4);
  unsigned __int8 v13 = 0;
  v12[0] = v14;
  v12[1] = v15;
  _OWORD v12[2] = v16;
  _OWORD v12[3] = v17;
  sub_1A8DE4CD0((uint64_t)v12, v7, v8, &v11);
  return (v11 == 0) & v13;
}

uint64_t sub_1A8DE8B64()
{
  return sub_1A8DE9460();
}

uint64_t (*sub_1A8DE8B90@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unsigned char *a6@<X8>))()
{
  if (a3 < a2 || a4 >= a2)
  {
    __break(1u);
    goto LABEL_13;
  }
  int64_t v6 = (unint64_t)(a2 - 0x1000000000000001) >> 61;
  if (v6 != 7)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  a6 = a1;
  char v7 = 8 * a2;
  int64_t v6 = 8 * a2 - 8;
  if (v6 < -64)
  {
    LOBYTE(v8) = 0;
    goto LABEL_11;
  }
  if (v6 > 64)
  {
LABEL_7:
    LOBYTE(v8) = 0;
    goto LABEL_11;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)v6 < 0x40)
    {
      unint64_t v8 = a5 >> (v6 & 0x38);
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_14:
  uint64_t v10 = a5 << ((8 - v7) & 0x38);
  if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFC0) {
    LOBYTE(v8) = 0;
  }
  else {
    LOBYTE(v8) = v10;
  }
LABEL_11:
  *a6 = v8;
  return nullsub_1;
}

unint64_t sub_1A8DE8C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int64_t a5@<X8>)
{
  if (a2 < a1 || a3 >= a1)
  {
    __break(1u);
    goto LABEL_12;
  }
  a5 = (unint64_t)(a1 - 0x1000000000000001) >> 61;
  if (a5 != 7)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    uint64_t v7 = a4 << ((8 - v5) & 0x38);
    if ((unint64_t)a5 <= 0xFFFFFFFFFFFFFFC0) {
      return 0;
    }
    else {
      return v7;
    }
  }
  char v5 = 8 * a1;
  a5 = 8 * a1 - 8;
  if (a5 < -64) {
    return 0;
  }
  if (a5 > 64) {
    return 0;
  }
  if (a5 < 0) {
    goto LABEL_13;
  }
  if ((unint64_t)a5 >= 0x40) {
    return 0;
  }
  return a4 >> (a5 & 0x38);
}

int64_t *sub_1A8DE8CC4(int64_t *result, unsigned char *a2, int64_t a3, int64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2)
  {
    if (!a3) {
      goto LABEL_7;
    }
    if (a3 < 0) {
      goto LABEL_36;
    }
    if (__OFSUB__(a4, a5))
    {
LABEL_37:
      __break(1u);
      return result;
    }
    if (a4 != a5)
    {
      if (a4 <= a5) {
        goto LABEL_33;
      }
      uint64_t v7 = 0;
      int64_t v8 = (71 - __clz(a6)) >> 3;
      char v9 = 8 - 8 * a4;
      uint64_t v10 = 8 * a4 - 8;
      while (1)
      {
        if ((unint64_t)(a4 - 0x1000000000000001 + v7) >> 61 != 7)
        {
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        if (v10 < -64)
        {
LABEL_13:
          LOBYTE(v11) = 0;
          if (v8 < a4) {
            goto LABEL_34;
          }
          goto LABEL_22;
        }
        if (v10 > 64) {
          break;
        }
        if (v10 < 0)
        {
          if ((unint64_t)v10 <= 0xFFFFFFFFFFFFFFC0) {
            goto LABEL_13;
          }
          unint64_t v11 = a6 << (v9 & 0x38);
        }
        else
        {
          if ((unint64_t)v10 >= 0x40) {
            break;
          }
          unint64_t v11 = a6 >> (v10 & 0x38);
        }
        if (v8 < a4) {
          goto LABEL_34;
        }
LABEL_22:
        if (a4 + v7 < 1) {
          goto LABEL_34;
        }
        *a2 = v11;
        if (!(a3 - 1 + v7))
        {
          uint64_t v6 = a4 + v7 - 1;
          goto LABEL_8;
        }
        if (__OFSUB__(a4 + v7 - 1, a5)) {
          goto LABEL_35;
        }
        if (!(a4 - a5 - 1 + v7))
        {
          uint64_t v6 = a5;
          a3 = a4 - a5;
          goto LABEL_8;
        }
        ++a2;
        --v7;
        v9 += 8;
        v10 -= 8;
        if (a4 + v7 <= a5) {
          goto LABEL_33;
        }
      }
      LOBYTE(v11) = 0;
      if (v8 < a4) {
        goto LABEL_34;
      }
      goto LABEL_22;
    }
  }
  a3 = 0;
LABEL_7:
  uint64_t v6 = a4;
LABEL_8:
  *uint64_t result = a4;
  result[1] = a5;
  result[2] = a6;
  result[3] = v6;
  return (int64_t *)a3;
}

uint64_t sub_1A8DE8E24(char **a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 6);
  uint64_t v5 = *((void *)a2 + 7);
  long long v6 = a2[1];
  long long v11 = *a2;
  long long v12 = v6;
  uint64_t v10 = &v11;
  sub_1A8DCA8E4(2, a1, sub_1A8DE9218, (uint64_t)v9);
  long long v11 = a2[2];
  *(void *)&long long v12 = v4;
  *((void *)&v12 + 1) = v5;
  void v8[2] = &v11;
  return sub_1A8DCA8E4(2, a1, sub_1A8DE9218, (uint64_t)v8);
}

void sub_1A8DE8ECC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v7 = *v4;
  int64_t v8 = *((void *)*v4 + 2);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v7 + 3) >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      char isUniquelyReferenced_nonNull_native = sub_1A8D963D4(isUniquelyReferenced_nonNull_native, v13, 1, v7);
      uint64_t v7 = isUniquelyReferenced_nonNull_native;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v14 = *((void *)v7 + 2);
  if ((*((void *)v7 + 3) >> 1) - v14 < v6) {
    goto LABEL_19;
  }
  memcpy(&v7[8 * v14 + 32], (const void *)(a2 + 8 * a3), 8 * v6);
  if (v6 <= 0)
  {
LABEL_16:
    *uint64_t v4 = v7;
    return;
  }
  uint64_t v15 = *((void *)v7 + 2);
  BOOL v16 = __OFADD__(v15, v6);
  uint64_t v17 = v15 + v6;
  if (!v16)
  {
    *((void *)v7 + 2) = v17;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
}

void sub_1A8DE8FC4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  int64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v7 = *v4;
  int64_t v8 = *((void *)*v4 + 2);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v7 + 3) >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      char isUniquelyReferenced_nonNull_native = sub_1A8D96298(isUniquelyReferenced_nonNull_native, v13, 1, v7);
      uint64_t v7 = isUniquelyReferenced_nonNull_native;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v14 = *((void *)v7 + 2);
  if ((*((void *)v7 + 3) >> 1) - v14 < v6) {
    goto LABEL_19;
  }
  memcpy(&v7[v14 + 32], (const void *)(a2 + a3), v6);
  if (v6 <= 0)
  {
LABEL_16:
    *uint64_t v4 = v7;
    return;
  }
  uint64_t v15 = *((void *)v7 + 2);
  BOOL v16 = __OFADD__(v15, v6);
  uint64_t v17 = v15 + v6;
  if (!v16)
  {
    *((void *)v7 + 2) = v17;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
}

uint64_t sub_1A8DE90BC()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1A8DE90F4(char **a1)
{
  return sub_1A8DE8E24(a1, *(long long **)(v1 + 16));
}

_UNKNOWN **sub_1A8DE9110()
{
  return &off_1EFF60728;
}

_UNKNOWN **sub_1A8DE911C()
{
  return &off_1EC3F1B30;
}

_UNKNOWN **sub_1A8DE9128()
{
  return &off_1EC3F1B88;
}

_UNKNOWN **sub_1A8DE9134()
{
  return &off_1EC3F1BA0;
}

_UNKNOWN **sub_1A8DE9140()
{
  return &off_1EC3F1BB8;
}

_UNKNOWN **sub_1A8DE914C()
{
  return &off_1EFF607D0;
}

_UNKNOWN **sub_1A8DE9158()
{
  return &off_1EFF609A0;
}

_UNKNOWN **sub_1A8DE9164()
{
  return &off_1EC3F1CE0;
}

_UNKNOWN **sub_1A8DE9170()
{
  return &off_1EC3F1D38;
}

_UNKNOWN **sub_1A8DE917C()
{
  return &off_1EC3F1D50;
}

_UNKNOWN **sub_1A8DE9188()
{
  return &off_1EC3F1D68;
}

_UNKNOWN **sub_1A8DE9194()
{
  return &off_1EFF60A48;
}

_UNKNOWN **sub_1A8DE91A0()
{
  return &off_1EFF60C18;
}

_UNKNOWN **sub_1A8DE91AC()
{
  return &off_1EC3F1E90;
}

_UNKNOWN **sub_1A8DE91B8()
{
  return &off_1EC3F1EE8;
}

_UNKNOWN **sub_1A8DE91C4()
{
  return &off_1EC3F1F00;
}

_UNKNOWN **sub_1A8DE91D0()
{
  return &off_1EC3F1F18;
}

_UNKNOWN **sub_1A8DE91DC()
{
  return &off_1EFF60CC0;
}

ValueMetadata *type metadata accessor for P256.Signing.ECDSASignature()
{
  return &type metadata for P256.Signing.ECDSASignature;
}

ValueMetadata *type metadata accessor for P384.Signing.ECDSASignature()
{
  return &type metadata for P384.Signing.ECDSASignature;
}

ValueMetadata *type metadata accessor for P521.Signing.ECDSASignature()
{
  return &type metadata for P521.Signing.ECDSASignature;
}

uint64_t sub_1A8DE9218(char **a1)
{
  return sub_1A8DE9230(a1);
}

uint64_t sub_1A8DE9230(char **a1)
{
  return sub_1A8DE6598(**(void **)(v1 + 16), *(void *)(*(void *)(v1 + 16) + 8), *(void *)(*(void *)(v1 + 16) + 16), *(void *)(*(void *)(v1 + 16) + 24), a1);
}

uint64_t sub_1A8DE9260(char **a1)
{
  return sub_1A8DE90F4(a1);
}

uint64_t P384.Signing.ECDSASignature.withUnsafeBytes<A>(_:)()
{
  return P256.Signing.ECDSASignature.withUnsafeBytes<A>(_:)();
}

uint64_t P521.Signing.ECDSASignature.withUnsafeBytes<A>(_:)()
{
  return P256.Signing.ECDSASignature.withUnsafeBytes<A>(_:)();
}

uint64_t sub_1A8DE92B0()
{
  return MEMORY[0x1F40E3430]();
}

uint64_t sub_1A8DE9300()
{
  return MEMORY[0x1F40E3460]();
}

uint64_t sub_1A8DE9320()
{
  return MEMORY[0x1F40E37C0]();
}

uint64_t sub_1A8DE9330()
{
  return MEMORY[0x1F40E37D0]();
}

uint64_t sub_1A8DE9340()
{
  return MEMORY[0x1F40E37E0]();
}

uint64_t sub_1A8DE9350()
{
  return MEMORY[0x1F40E37F0]();
}

uint64_t sub_1A8DE9360()
{
  return MEMORY[0x1F40E3800]();
}

uint64_t sub_1A8DE9370()
{
  return MEMORY[0x1F40E3818]();
}

uint64_t sub_1A8DE9380()
{
  return MEMORY[0x1F40E3830]();
}

uint64_t sub_1A8DE9390()
{
  return MEMORY[0x1F40E3B70]();
}

uint64_t sub_1A8DE93B0()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t sub_1A8DE93C0()
{
  return MEMORY[0x1F40E4BC8]();
}

uint64_t sub_1A8DE93D0()
{
  return MEMORY[0x1F40E4BF0]();
}

uint64_t sub_1A8DE93E0()
{
  return MEMORY[0x1F40E4C00]();
}

uint64_t sub_1A8DE93F0()
{
  return MEMORY[0x1F40E4C08]();
}

uint64_t sub_1A8DE9400()
{
  return MEMORY[0x1F40E4C58]();
}

uint64_t sub_1A8DE9410()
{
  return MEMORY[0x1F40E4C78]();
}

uint64_t sub_1A8DE9420()
{
  return MEMORY[0x1F40E4C80]();
}

uint64_t sub_1A8DE9430()
{
  return MEMORY[0x1F40E4CA0]();
}

uint64_t sub_1A8DE9440()
{
  return MEMORY[0x1F40E4CA8]();
}

uint64_t sub_1A8DE9450()
{
  return MEMORY[0x1F40E4CB8]();
}

uint64_t sub_1A8DE9460()
{
  return MEMORY[0x1F40E4CD8]();
}

uint64_t sub_1A8DE9470()
{
  return MEMORY[0x1F40E4CF8]();
}

uint64_t sub_1A8DE9480()
{
  return MEMORY[0x1F40E4D10]();
}

uint64_t sub_1A8DE9490()
{
  return MEMORY[0x1F40E4D30]();
}

uint64_t sub_1A8DE94A0()
{
  return MEMORY[0x1F40E4D48]();
}

uint64_t sub_1A8DE94B0()
{
  return MEMORY[0x1F40E4D58]();
}

uint64_t sub_1A8DE94C0()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t sub_1A8DE94D0()
{
  return MEMORY[0x1F40E4DB8]();
}

uint64_t sub_1A8DE94E0()
{
  return MEMORY[0x1F40E4E20]();
}

uint64_t sub_1A8DE94F0()
{
  return MEMORY[0x1F40E4E30]();
}

uint64_t sub_1A8DE9500()
{
  return MEMORY[0x1F40E4E60]();
}

uint64_t sub_1A8DE9510()
{
  return MEMORY[0x1F40E4E70]();
}

uint64_t sub_1A8DE9520()
{
  return MEMORY[0x1F40E4EB8]();
}

uint64_t sub_1A8DE9540()
{
  return MEMORY[0x1F4186968]();
}

uint64_t sub_1A8DE9550()
{
  return MEMORY[0x1F4186978]();
}

uint64_t sub_1A8DE9560()
{
  return MEMORY[0x1F40E6000]();
}

uint64_t sub_1A8DE9570()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t sub_1A8DE9590()
{
  return MEMORY[0x1F41836F8]();
}

uint64_t sub_1A8DE95A0()
{
  return MEMORY[0x1F4183708]();
}

uint64_t sub_1A8DE95B0()
{
  return MEMORY[0x1F4183738]();
}

uint64_t sub_1A8DE95C0()
{
  return MEMORY[0x1F4183740]();
}

uint64_t sub_1A8DE95D0()
{
  return MEMORY[0x1F4183748]();
}

uint64_t sub_1A8DE95E0()
{
  return MEMORY[0x1F4183750]();
}

uint64_t sub_1A8DE95F0()
{
  return MEMORY[0x1F4183770]();
}

uint64_t sub_1A8DE9600()
{
  return MEMORY[0x1F4183788]();
}

uint64_t sub_1A8DE9610()
{
  return MEMORY[0x1F4183790]();
}

uint64_t sub_1A8DE9620()
{
  return MEMORY[0x1F41837E0]();
}

uint64_t sub_1A8DE9630()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_1A8DE9640()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_1A8DE9650()
{
  return MEMORY[0x1F4183950]();
}

uint64_t sub_1A8DE9660()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_1A8DE9670()
{
  return MEMORY[0x1F41839F8]();
}

uint64_t sub_1A8DE9680()
{
  return MEMORY[0x1F4183A38]();
}

uint64_t sub_1A8DE9690()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_1A8DE96A0()
{
  return MEMORY[0x1F4183A88]();
}

uint64_t sub_1A8DE96B0()
{
  return MEMORY[0x1F4183A98]();
}

uint64_t sub_1A8DE96C0()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t sub_1A8DE96D0()
{
  return MEMORY[0x1F4183AA8]();
}

uint64_t sub_1A8DE96E0()
{
  return MEMORY[0x1F4183AB0]();
}

uint64_t sub_1A8DE96F0()
{
  return MEMORY[0x1F4183B10]();
}

uint64_t sub_1A8DE9700()
{
  return MEMORY[0x1F4183B58]();
}

uint64_t sub_1A8DE9710()
{
  return MEMORY[0x1F4183B68]();
}

uint64_t sub_1A8DE9720()
{
  return MEMORY[0x1F4183BA0]();
}

uint64_t sub_1A8DE9730()
{
  return MEMORY[0x1F4183BA8]();
}

uint64_t sub_1A8DE9740()
{
  return MEMORY[0x1F4183BD0]();
}

uint64_t sub_1A8DE9750()
{
  return MEMORY[0x1F4183BF8]();
}

uint64_t sub_1A8DE9760()
{
  return MEMORY[0x1F4183C18]();
}

uint64_t sub_1A8DE9770()
{
  return MEMORY[0x1F4183C80]();
}

uint64_t sub_1A8DE9780()
{
  return MEMORY[0x1F4183CF0]();
}

uint64_t sub_1A8DE9790()
{
  return MEMORY[0x1F40E6330]();
}

uint64_t sub_1A8DE97A0()
{
  return MEMORY[0x1F40E6338]();
}

uint64_t sub_1A8DE97B0()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t sub_1A8DE97C0()
{
  return MEMORY[0x1F40E6378]();
}

uint64_t sub_1A8DE97D0()
{
  return MEMORY[0x1F4183F08]();
}

uint64_t sub_1A8DE97E0()
{
  return MEMORY[0x1F4183FD8]();
}

uint64_t sub_1A8DE97F0()
{
  return MEMORY[0x1F41842A0]();
}

uint64_t sub_1A8DE9830()
{
  return MEMORY[0x1F41842D0]();
}

uint64_t sub_1A8DE9840()
{
  return MEMORY[0x1F41842F8]();
}

uint64_t sub_1A8DE9850()
{
  return MEMORY[0x1F4184338]();
}

uint64_t sub_1A8DE9870()
{
  return MEMORY[0x1F4184398]();
}

uint64_t sub_1A8DE9880()
{
  return MEMORY[0x1F41843D0]();
}

uint64_t sub_1A8DE9890()
{
  return MEMORY[0x1F4184430]();
}

uint64_t sub_1A8DE98A0()
{
  return MEMORY[0x1F41844E8]();
}

uint64_t sub_1A8DE98D0()
{
  return MEMORY[0x1F41845B0]();
}

uint64_t sub_1A8DE98E0()
{
  return MEMORY[0x1F40E68F8]();
}

uint64_t sub_1A8DE98F0()
{
  return MEMORY[0x1F41874A8]();
}

uint64_t sub_1A8DE9900()
{
  return MEMORY[0x1F41874C0]();
}

uint64_t sub_1A8DE9910()
{
  return MEMORY[0x1F4184640]();
}

uint64_t sub_1A8DE9920()
{
  return MEMORY[0x1F4184730]();
}

uint64_t sub_1A8DE9930()
{
  return MEMORY[0x1F4184750]();
}

uint64_t sub_1A8DE9940()
{
  return MEMORY[0x1F4184768]();
}

uint64_t sub_1A8DE9950()
{
  return MEMORY[0x1F4184770]();
}

uint64_t sub_1A8DE9960()
{
  return MEMORY[0x1F4184788]();
}

uint64_t sub_1A8DE9970()
{
  return MEMORY[0x1F4184790]();
}

uint64_t sub_1A8DE9980()
{
  return MEMORY[0x1F41847A0]();
}

uint64_t sub_1A8DE9990()
{
  return MEMORY[0x1F4184800]();
}

uint64_t sub_1A8DE99B0()
{
  return MEMORY[0x1F4184848]();
}

uint64_t sub_1A8DE99C0()
{
  return MEMORY[0x1F41848C0]();
}

uint64_t sub_1A8DE99D0()
{
  return MEMORY[0x1F41848C8]();
}

uint64_t sub_1A8DE99E0()
{
  return MEMORY[0x1F4184908]();
}

uint64_t sub_1A8DE99F0()
{
  return MEMORY[0x1F4184938]();
}

uint64_t sub_1A8DE9A00()
{
  return MEMORY[0x1F4184940]();
}

uint64_t sub_1A8DE9A10()
{
  return MEMORY[0x1F4184950]();
}

uint64_t sub_1A8DE9A20()
{
  return MEMORY[0x1F4184970]();
}

uint64_t sub_1A8DE9A30()
{
  return MEMORY[0x1F40E6DB0]();
}

uint64_t sub_1A8DE9A40()
{
  return MEMORY[0x1F41849D8]();
}

uint64_t sub_1A8DE9A50()
{
  return MEMORY[0x1F4184C18]();
}

uint64_t sub_1A8DE9A60()
{
  return MEMORY[0x1F4184C20]();
}

uint64_t sub_1A8DE9A70()
{
  return MEMORY[0x1F4184C38]();
}

uint64_t sub_1A8DE9A80()
{
  return MEMORY[0x1F4184CE0]();
}

uint64_t sub_1A8DE9A90()
{
  return MEMORY[0x1F4184CE8]();
}

uint64_t sub_1A8DE9AA0()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t sub_1A8DE9AB0()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1A8DE9AC0()
{
  return MEMORY[0x1F4184E70]();
}

uint64_t sub_1A8DE9AD0()
{
  return MEMORY[0x1F4185068]();
}

uint64_t sub_1A8DE9AE0()
{
  return MEMORY[0x1F41850F8]();
}

uint64_t sub_1A8DE9AF0()
{
  return MEMORY[0x1F4185260]();
}

uint64_t sub_1A8DE9B00()
{
  return MEMORY[0x1F41852A0]();
}

uint64_t sub_1A8DE9B10()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_1A8DE9B20()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_1A8DE9B30()
{
  return MEMORY[0x1F4185A20]();
}

uint64_t sub_1A8DE9B40()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_1A8DE9B50()
{
  return MEMORY[0x1F4185CF8]();
}

uint64_t sub_1A8DE9B60()
{
  return MEMORY[0x1F4185D38]();
}

uint64_t sub_1A8DE9B70()
{
  return MEMORY[0x1F4185D58]();
}

uint64_t sub_1A8DE9B80()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t sub_1A8DE9B90()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t sub_1A8DE9BA0()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t sub_1A8DE9BB0()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t sub_1A8DE9BC0()
{
  return MEMORY[0x1F40E6E70]();
}

uint64_t sub_1A8DE9BD0()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_1A8DE9BE0()
{
  return MEMORY[0x1F4185EB8]();
}

uint64_t sub_1A8DE9BF0()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_1A8DE9C00()
{
  return MEMORY[0x1F4185ED0]();
}

uint64_t sub_1A8DE9C10()
{
  return MEMORY[0x1F4185EE0]();
}

uint64_t sub_1A8DE9C20()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t sub_1A8DE9C30()
{
  return MEMORY[0x1F4186318]();
}

CFDictionaryRef SecKeyCopyAttributes(SecKeyRef key)
{
  return (CFDictionaryRef)MEMORY[0x1F40F6E38](key);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x1F40CA6A8]();
}

uint64_t ccaes_cbc_encrypt_mode()
{
  return MEMORY[0x1F40CA6B8]();
}

uint64_t ccaes_ccm_decrypt_mode()
{
  return MEMORY[0x1F40CA6C0]();
}

uint64_t ccaes_ccm_encrypt_mode()
{
  return MEMORY[0x1F40CA6C8]();
}

uint64_t ccaes_ecb_decrypt_mode()
{
  return MEMORY[0x1F40CA6D8]();
}

uint64_t ccaes_ecb_encrypt_mode()
{
  return MEMORY[0x1F40CA6E0]();
}

uint64_t ccaes_gcm_decrypt_mode()
{
  return MEMORY[0x1F40CA6E8]();
}

uint64_t ccaes_gcm_encrypt_mode()
{
  return MEMORY[0x1F40CA6F0]();
}

uint64_t ccccm_one_shot()
{
  return MEMORY[0x1F40CA760]();
}

uint64_t ccchacha20poly1305_aad()
{
  return MEMORY[0x1F40CA770]();
}

uint64_t ccchacha20poly1305_finalize()
{
  return MEMORY[0x1F40CA788]();
}

uint64_t ccchacha20poly1305_info()
{
  return MEMORY[0x1F40CA790]();
}

uint64_t ccchacha20poly1305_init()
{
  return MEMORY[0x1F40CA798]();
}

uint64_t ccchacha20poly1305_setnonce()
{
  return MEMORY[0x1F40CA7A8]();
}

uint64_t ccchacha20poly1305_verify()
{
  return MEMORY[0x1F40CA7B0]();
}

uint64_t cccmac_final_generate()
{
  return MEMORY[0x1F40CA7B8]();
}

uint64_t cccmac_init()
{
  return MEMORY[0x1F40CA7C0]();
}

uint64_t cccmac_update()
{
  return MEMORY[0x1F40CA7C8]();
}

uint64_t cccurve25519_make_priv()
{
  return MEMORY[0x1F40CA7E0]();
}

uint64_t cccurve25519_make_pub_with_rng()
{
  return MEMORY[0x1F40CA7F0]();
}

uint64_t cccurve25519_with_rng()
{
  return MEMORY[0x1F40CA7F8]();
}

uint64_t cccurve448()
{
  return MEMORY[0x1F40CA800]();
}

uint64_t cccurve448_make_priv()
{
  return MEMORY[0x1F40CA810]();
}

uint64_t cccurve448_make_pub()
{
  return MEMORY[0x1F40CA818]();
}

uint64_t ccdigest_init()
{
  return MEMORY[0x1F40CA9B8]();
}

uint64_t ccec_compact_export_pub()
{
  return MEMORY[0x1F40CA9D8]();
}

uint64_t ccec_compact_generate_key()
{
  return MEMORY[0x1F40CA9E0]();
}

uint64_t ccec_compressed_x962_export_pub()
{
  return MEMORY[0x1F40CAA10]();
}

uint64_t ccec_compressed_x962_export_pub_size()
{
  return MEMORY[0x1F40CAA18]();
}

uint64_t ccec_cp_256()
{
  return MEMORY[0x1F40CAA40]();
}

uint64_t ccec_cp_384()
{
  return MEMORY[0x1F40CAA48]();
}

uint64_t ccec_cp_521()
{
  return MEMORY[0x1F40CAA50]();
}

uint64_t ccec_der_export_priv()
{
  return MEMORY[0x1F40CAA70]();
}

uint64_t ccec_der_export_priv_size()
{
  return MEMORY[0x1F40CAA78]();
}

uint64_t ccec_der_import_priv()
{
  return MEMORY[0x1F40CAA88]();
}

uint64_t ccec_diversify_min_entropy_len()
{
  return MEMORY[0x1F40CAA98]();
}

uint64_t ccec_diversify_priv_twin()
{
  return MEMORY[0x1F40CAAA0]();
}

uint64_t ccec_diversify_pub_twin()
{
  return MEMORY[0x1F40CAAB0]();
}

uint64_t ccec_export_pub()
{
  return MEMORY[0x1F40CAAB8]();
}

uint64_t ccec_generate_key_deterministic()
{
  return MEMORY[0x1F40CAAD8]();
}

uint64_t ccec_generate_key_fips()
{
  return MEMORY[0x1F40CAAE0]();
}

uint64_t ccec_import_pub()
{
  return MEMORY[0x1F40CAB00]();
}

uint64_t ccec_raw_import_priv_only()
{
  return MEMORY[0x1F40CAB28]();
}

uint64_t ccec_sign_composite()
{
  return MEMORY[0x1F40CAB60]();
}

uint64_t ccec_verify_composite()
{
  return MEMORY[0x1F40CAB80]();
}

uint64_t ccec_x963_export()
{
  return MEMORY[0x1F40CAB90]();
}

uint64_t ccec_x963_import_priv()
{
  return MEMORY[0x1F40CAB98]();
}

uint64_t ccecb_init()
{
  return MEMORY[0x1F40CABC0]();
}

uint64_t ccecb_one_shot()
{
  return MEMORY[0x1F40CABC8]();
}

uint64_t ccecdh_compute_shared_secret()
{
  return MEMORY[0x1F40CABD0]();
}

uint64_t cced25519_make_key_pair()
{
  return MEMORY[0x1F40CAC20]();
}

uint64_t cced25519_make_pub()
{
  return MEMORY[0x1F40CAC30]();
}

uint64_t cced25519_sign()
{
  return MEMORY[0x1F40CAC40]();
}

uint64_t cced25519_verify()
{
  return MEMORY[0x1F40CAC50]();
}

uint64_t cced448_make_key_pair()
{
  return MEMORY[0x1F40CAC58]();
}

uint64_t cced448_make_pub()
{
  return MEMORY[0x1F40CAC60]();
}

uint64_t cced448_sign()
{
  return MEMORY[0x1F40CAC68]();
}

uint64_t cced448_verify()
{
  return MEMORY[0x1F40CAC70]();
}

uint64_t ccgcm_aad()
{
  return MEMORY[0x1F40CAC78]();
}

uint64_t ccgcm_finalize()
{
  return MEMORY[0x1F40CAC88]();
}

uint64_t ccgcm_init()
{
  return MEMORY[0x1F40CAC98]();
}

uint64_t ccgcm_set_iv()
{
  return MEMORY[0x1F40CACB8]();
}

uint64_t ccgcm_update()
{
  return MEMORY[0x1F40CACC0]();
}

uint64_t cckem_decapsulate()
{
  return MEMORY[0x1F40CAEC0]();
}

uint64_t cckem_encapsulate()
{
  return MEMORY[0x1F40CAEC8]();
}

uint64_t cckem_encapsulated_key_nbytes_info()
{
  return MEMORY[0x1F40CAED8]();
}

uint64_t cckem_export_privkey()
{
  return MEMORY[0x1F40CAEE0]();
}

uint64_t cckem_export_pubkey()
{
  return MEMORY[0x1F40CAEE8]();
}

uint64_t cckem_full_ctx_init()
{
  return MEMORY[0x1F40CAEF0]();
}

uint64_t cckem_generate_key()
{
  return MEMORY[0x1F40CAEF8]();
}

uint64_t cckem_import_privkey()
{
  return MEMORY[0x1F40CAF00]();
}

uint64_t cckem_import_pubkey()
{
  return MEMORY[0x1F40CAF08]();
}

uint64_t cckem_privkey_nbytes_info()
{
  return MEMORY[0x1F40CAF28]();
}

uint64_t cckem_pub_ctx_init()
{
  return MEMORY[0x1F40CAF30]();
}

uint64_t cckem_pubkey_nbytes_info()
{
  return MEMORY[0x1F40CAF40]();
}

uint64_t cckem_public_ctx()
{
  return MEMORY[0x1F40CAF48]();
}

uint64_t cckem_shared_key_nbytes_info()
{
  return MEMORY[0x1F40CAF58]();
}

uint64_t cckem_sizeof_full_ctx()
{
  return MEMORY[0x1F40CAF60]();
}

uint64_t cckem_sizeof_pub_ctx()
{
  return MEMORY[0x1F40CAF68]();
}

uint64_t ccrng()
{
  return MEMORY[0x1F40CB030]();
}

uint64_t ccrng_generate_bridge()
{
  return MEMORY[0x1F4116EF0]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x1F40CB148]();
}

uint64_t ccsha384_di()
{
  return MEMORY[0x1F40CB150]();
}

uint64_t ccsha512_di()
{
  return MEMORY[0x1F40CB158]();
}

uint64_t ccwrap_auth_decrypt()
{
  return MEMORY[0x1F40CB308]();
}

uint64_t ccwrap_auth_encrypt()
{
  return MEMORY[0x1F40CB310]();
}

uint64_t ccwrap_unwrapped_size()
{
  return MEMORY[0x1F40CB318]();
}

uint64_t ccwrap_wrapped_size()
{
  return MEMORY[0x1F40CB320]();
}

uint64_t cczp_bitlen()
{
  return MEMORY[0x1F40CB330]();
}

void free(void *a1)
{
}

uint64_t getCMACContextSize()
{
  return MEMORY[0x1F4116F00]();
}

uint64_t getContextSizeForECBMode()
{
  return MEMORY[0x1F4116F08]();
}

uint64_t getDigestSizeForDigestInfo()
{
  return MEMORY[0x1F4116F10]();
}

uint64_t getGCMCtxSize()
{
  return MEMORY[0x1F4116F18]();
}

uint64_t getccec_full_ctx_size()
{
  return MEMORY[0x1F4116F20]();
}

uint64_t getccec_pub_ctx_size()
{
  return MEMORY[0x1F4116F28]();
}

uint64_t init_ccec_ctx_full()
{
  return MEMORY[0x1F4116F30]();
}

uint64_t init_ccec_ctx_pub()
{
  return MEMORY[0x1F4116F38]();
}

uint64_t keyIsCompactRepresentable()
{
  return MEMORY[0x1F4116F40]();
}

long double log2(long double __x)
{
  MEMORY[0x1F40CC8A8](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1F40CCD40](__s, __smax, *(void *)&__c, __n);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1F4186488]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1F41864E8]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1F41867D8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}